
BoyStory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003236  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00003236  000032aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002da8  00000000  00000000  000033bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001593  00000000  00000000  00006164  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000076f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00007837  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000079a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000095f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000a4db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000b288  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000b3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000b675  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000be43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <main>
      7a:	0c 94 19 19 	jmp	0x3232	; 0x3232 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e2 18 	jmp	0x31c4	; 0x31c4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e2 18 	jmp	0x31c4	; 0x31c4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 f2 18 	jmp	0x31e4	; 0x31e4 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <PORT_init>:
 * [Description]   : Initialize all pins with specific static configurations.
 * [Arguments]     : The function takes no arguments.
 * [return]        : The function returns void.
 ====================================================================================================================*/
void PORT_init(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
    #define PORT_OUTPUT_LOW_PIN    1

    #undef  PORT_OUTPUT_HIGH_PIN
    #define PORT_OUTPUT_HIGH_PIN   1

    DDRA = CONCAT(PORT_PORTA_PIN7_PIN_MODE,PORT_PORTA_PIN6_PIN_MODE,PORT_PORTA_PIN5_PIN_MODE,PORT_PORTA_PIN4_PIN_MODE,PORT_PORTA_PIN3_PIN_MODE,PORT_PORTA_PIN2_PIN_MODE,PORT_PORTA_PIN1_PIN_MODE,PORT_PORTA_PIN0_PIN_MODE);
     b3e:	ea e3       	ldi	r30, 0x3A	; 58
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	8f e0       	ldi	r24, 0x0F	; 15
     b44:	80 83       	st	Z, r24
    DDRB = CONCAT(PORT_PORTB_PIN7_PIN_MODE,PORT_PORTB_PIN6_PIN_MODE,PORT_PORTB_PIN5_PIN_MODE,PORT_PORTB_PIN4_PIN_MODE,PORT_PORTB_PIN3_PIN_MODE,PORT_PORTB_PIN2_PIN_MODE,PORT_PORTB_PIN1_PIN_MODE,PORT_PORTB_PIN0_PIN_MODE);
     b46:	e7 e3       	ldi	r30, 0x37	; 55
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	10 82       	st	Z, r1
    DDRC = CONCAT(PORT_PORTC_PIN7_PIN_MODE,PORT_PORTC_PIN6_PIN_MODE,PORT_PORTC_PIN5_PIN_MODE,PORT_PORTC_PIN4_PIN_MODE,PORT_PORTC_PIN3_PIN_MODE,PORT_PORTC_PIN2_PIN_MODE,PORT_PORTC_PIN1_PIN_MODE,PORT_PORTC_PIN0_PIN_MODE);
     b4c:	e4 e3       	ldi	r30, 0x34	; 52
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	80 83       	st	Z, r24
    DDRD = CONCAT(PORT_PORTD_PIN7_PIN_MODE,PORT_PORTD_PIN6_PIN_MODE,PORT_PORTD_PIN5_PIN_MODE,PORT_PORTD_PIN4_PIN_MODE,PORT_PORTD_PIN3_PIN_MODE,PORT_PORTD_PIN2_PIN_MODE,PORT_PORTD_PIN1_PIN_MODE,PORT_PORTD_PIN0_PIN_MODE);
     b54:	e1 e3       	ldi	r30, 0x31	; 49
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	8f ef       	ldi	r24, 0xFF	; 255
     b5a:	80 83       	st	Z, r24
    #define PORT_OUTPUT_LOW_PIN    0

    #undef  PORT_OUTPUT_HIGH_PIN
    #define PORT_OUTPUT_HIGH_PIN   1

    PORTA = CONCAT(PORT_PORTA_PIN7_PIN_MODE,PORT_PORTA_PIN6_PIN_MODE,PORT_PORTA_PIN5_PIN_MODE,PORT_PORTA_PIN4_PIN_MODE,PORT_PORTA_PIN3_PIN_MODE,PORT_PORTA_PIN2_PIN_MODE,PORT_PORTA_PIN1_PIN_MODE,PORT_PORTA_PIN0_PIN_MODE);
     b5c:	eb e3       	ldi	r30, 0x3B	; 59
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 ef       	ldi	r24, 0xF0	; 240
     b62:	80 83       	st	Z, r24
    PORTB = CONCAT(PORT_PORTB_PIN7_PIN_MODE,PORT_PORTB_PIN6_PIN_MODE,PORT_PORTB_PIN5_PIN_MODE,PORT_PORTB_PIN4_PIN_MODE,PORT_PORTB_PIN3_PIN_MODE,PORT_PORTB_PIN2_PIN_MODE,PORT_PORTB_PIN1_PIN_MODE,PORT_PORTB_PIN0_PIN_MODE);
     b64:	e8 e3       	ldi	r30, 0x38	; 56
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	10 82       	st	Z, r1
    PORTC = CONCAT(PORT_PORTC_PIN7_PIN_MODE,PORT_PORTC_PIN6_PIN_MODE,PORT_PORTC_PIN5_PIN_MODE,PORT_PORTC_PIN4_PIN_MODE,PORT_PORTC_PIN3_PIN_MODE,PORT_PORTC_PIN2_PIN_MODE,PORT_PORTC_PIN1_PIN_MODE,PORT_PORTC_PIN0_PIN_MODE);
     b6a:	e5 e3       	ldi	r30, 0x35	; 53
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	10 82       	st	Z, r1
    PORTD = CONCAT(PORT_PORTD_PIN7_PIN_MODE,PORT_PORTD_PIN6_PIN_MODE,PORT_PORTD_PIN5_PIN_MODE,PORT_PORTD_PIN4_PIN_MODE,PORT_PORTD_PIN3_PIN_MODE,PORT_PORTD_PIN2_PIN_MODE,PORT_PORTD_PIN1_PIN_MODE,PORT_PORTD_PIN0_PIN_MODE);
     b70:	e2 e3       	ldi	r30, 0x32	; 50
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	10 82       	st	Z, r1
    #undef  PORT_OUTPUT_LOW_PIN
    #define PORT_OUTPUT_LOW_PIN    2

    #undef  PORT_OUTPUT_HIGH_PIN
    #define PORT_OUTPUT_HIGH_PIN   3
}
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <PORT_setPinDirection>:
 *                                                          - Port Number Error.
 *                                                          - Pin Number Error.
 *                                                          - Invalid Direction Error.
 ====================================================================================================================*/
PORT_errorStatus PORT_setPinDirection(uint8 a_portID, uint8 a_pinID, PORT_pinDirection a_direction)
{
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	00 d0       	rcall	.+0      	; 0xb82 <PORT_setPinDirection+0x6>
     b82:	00 d0       	rcall	.+0      	; 0xb84 <PORT_setPinDirection+0x8>
     b84:	00 d0       	rcall	.+0      	; 0xb86 <PORT_setPinDirection+0xa>
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	8a 83       	std	Y+2, r24	; 0x02
     b8c:	6b 83       	std	Y+3, r22	; 0x03
     b8e:	4c 83       	std	Y+4, r20	; 0x04
    PORT_errorStatus LOC_errorStatus = PORT_NO_ERRORS;
     b90:	19 82       	std	Y+1, r1	; 0x01

    if(a_portID >= PORT_NUM_OF_PORTS)
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	84 30       	cpi	r24, 0x04	; 4
     b96:	18 f0       	brcs	.+6      	; 0xb9e <PORT_setPinDirection+0x22>
    {
        LOC_errorStatus = PORT_PORT_NUM_ERROR;
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	89 83       	std	Y+1, r24	; 0x01
     b9c:	b8 c0       	rjmp	.+368    	; 0xd0e <PORT_setPinDirection+0x192>
    }

    else if(a_pinID >= PORT_NUM_OF_PINS_PER_PORT)
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	88 30       	cpi	r24, 0x08	; 8
     ba2:	18 f0       	brcs	.+6      	; 0xbaa <PORT_setPinDirection+0x2e>
    {
        LOC_errorStatus = PORT_PIN_NUM_ERROR;
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	89 83       	std	Y+1, r24	; 0x01
     ba8:	b2 c0       	rjmp	.+356    	; 0xd0e <PORT_setPinDirection+0x192>
    }

    else if((a_direction != PORT_INPUT_PIN) && (a_direction != PORT_OUTPUT_PIN))
     baa:	8c 81       	ldd	r24, Y+4	; 0x04
     bac:	88 23       	and	r24, r24
     bae:	31 f0       	breq	.+12     	; 0xbbc <PORT_setPinDirection+0x40>
     bb0:	8c 81       	ldd	r24, Y+4	; 0x04
     bb2:	81 30       	cpi	r24, 0x01	; 1
     bb4:	19 f0       	breq	.+6      	; 0xbbc <PORT_setPinDirection+0x40>
    {
        LOC_errorStatus = PORT_DIRECTION_ERROR;
     bb6:	83 e0       	ldi	r24, 0x03	; 3
     bb8:	89 83       	std	Y+1, r24	; 0x01
     bba:	a9 c0       	rjmp	.+338    	; 0xd0e <PORT_setPinDirection+0x192>
    }

    else
    {
        switch (a_portID)
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	3e 83       	std	Y+6, r19	; 0x06
     bc4:	2d 83       	std	Y+5, r18	; 0x05
     bc6:	6d 81       	ldd	r22, Y+5	; 0x05
     bc8:	7e 81       	ldd	r23, Y+6	; 0x06
     bca:	61 30       	cpi	r22, 0x01	; 1
     bcc:	71 05       	cpc	r23, r1
     bce:	d1 f1       	breq	.+116    	; 0xc44 <PORT_setPinDirection+0xc8>
     bd0:	8d 81       	ldd	r24, Y+5	; 0x05
     bd2:	9e 81       	ldd	r25, Y+6	; 0x06
     bd4:	82 30       	cpi	r24, 0x02	; 2
     bd6:	91 05       	cpc	r25, r1
     bd8:	34 f4       	brge	.+12     	; 0xbe6 <PORT_setPinDirection+0x6a>
     bda:	2d 81       	ldd	r18, Y+5	; 0x05
     bdc:	3e 81       	ldd	r19, Y+6	; 0x06
     bde:	21 15       	cp	r18, r1
     be0:	31 05       	cpc	r19, r1
     be2:	71 f0       	breq	.+28     	; 0xc00 <PORT_setPinDirection+0x84>
     be4:	94 c0       	rjmp	.+296    	; 0xd0e <PORT_setPinDirection+0x192>
     be6:	6d 81       	ldd	r22, Y+5	; 0x05
     be8:	7e 81       	ldd	r23, Y+6	; 0x06
     bea:	62 30       	cpi	r22, 0x02	; 2
     bec:	71 05       	cpc	r23, r1
     bee:	09 f4       	brne	.+2      	; 0xbf2 <PORT_setPinDirection+0x76>
     bf0:	4b c0       	rjmp	.+150    	; 0xc88 <PORT_setPinDirection+0x10c>
     bf2:	8d 81       	ldd	r24, Y+5	; 0x05
     bf4:	9e 81       	ldd	r25, Y+6	; 0x06
     bf6:	83 30       	cpi	r24, 0x03	; 3
     bf8:	91 05       	cpc	r25, r1
     bfa:	09 f4       	brne	.+2      	; 0xbfe <PORT_setPinDirection+0x82>
     bfc:	67 c0       	rjmp	.+206    	; 0xccc <PORT_setPinDirection+0x150>
     bfe:	87 c0       	rjmp	.+270    	; 0xd0e <PORT_setPinDirection+0x192>
        {
        case PORT_PORTA_ID:
            WRITE_BIT(DDRA,a_pinID,a_direction);
     c00:	aa e3       	ldi	r26, 0x3A	; 58
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	ea e3       	ldi	r30, 0x3A	; 58
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	48 2f       	mov	r20, r24
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <PORT_setPinDirection+0xa0>
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	2a 95       	dec	r18
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <PORT_setPinDirection+0x9c>
     c20:	80 95       	com	r24
     c22:	48 23       	and	r20, r24
     c24:	8c 81       	ldd	r24, Y+4	; 0x04
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	88 2f       	mov	r24, r24
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	b9 01       	movw	r22, r18
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <PORT_setPinDirection+0xbc>
     c34:	66 0f       	add	r22, r22
     c36:	77 1f       	adc	r23, r23
     c38:	8a 95       	dec	r24
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <PORT_setPinDirection+0xb8>
     c3c:	cb 01       	movw	r24, r22
     c3e:	84 2b       	or	r24, r20
     c40:	8c 93       	st	X, r24
     c42:	65 c0       	rjmp	.+202    	; 0xd0e <PORT_setPinDirection+0x192>
            break;

        case PORT_PORTB_ID:
            WRITE_BIT(DDRB,a_pinID,a_direction);
     c44:	a7 e3       	ldi	r26, 0x37	; 55
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e7 e3       	ldi	r30, 0x37	; 55
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	48 2f       	mov	r20, r24
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <PORT_setPinDirection+0xe4>
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	2a 95       	dec	r18
     c62:	e2 f7       	brpl	.-8      	; 0xc5c <PORT_setPinDirection+0xe0>
     c64:	80 95       	com	r24
     c66:	48 23       	and	r20, r24
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	88 2f       	mov	r24, r24
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	b9 01       	movw	r22, r18
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <PORT_setPinDirection+0x100>
     c78:	66 0f       	add	r22, r22
     c7a:	77 1f       	adc	r23, r23
     c7c:	8a 95       	dec	r24
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <PORT_setPinDirection+0xfc>
     c80:	cb 01       	movw	r24, r22
     c82:	84 2b       	or	r24, r20
     c84:	8c 93       	st	X, r24
     c86:	43 c0       	rjmp	.+134    	; 0xd0e <PORT_setPinDirection+0x192>
            break;

        case PORT_PORTC_ID:
            WRITE_BIT(DDRC,a_pinID,a_direction);
     c88:	a4 e3       	ldi	r26, 0x34	; 52
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e4 e3       	ldi	r30, 0x34	; 52
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	48 2f       	mov	r20, r24
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <PORT_setPinDirection+0x128>
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	2a 95       	dec	r18
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <PORT_setPinDirection+0x124>
     ca8:	80 95       	com	r24
     caa:	48 23       	and	r20, r24
     cac:	8c 81       	ldd	r24, Y+4	; 0x04
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	88 2f       	mov	r24, r24
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	b9 01       	movw	r22, r18
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <PORT_setPinDirection+0x144>
     cbc:	66 0f       	add	r22, r22
     cbe:	77 1f       	adc	r23, r23
     cc0:	8a 95       	dec	r24
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <PORT_setPinDirection+0x140>
     cc4:	cb 01       	movw	r24, r22
     cc6:	84 2b       	or	r24, r20
     cc8:	8c 93       	st	X, r24
     cca:	21 c0       	rjmp	.+66     	; 0xd0e <PORT_setPinDirection+0x192>
            break;

        case PORT_PORTD_ID:
            WRITE_BIT(DDRD,a_pinID,a_direction);
     ccc:	a1 e3       	ldi	r26, 0x31	; 49
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e1 e3       	ldi	r30, 0x31	; 49
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	48 2f       	mov	r20, r24
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <PORT_setPinDirection+0x16c>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	2a 95       	dec	r18
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <PORT_setPinDirection+0x168>
     cec:	80 95       	com	r24
     cee:	48 23       	and	r20, r24
     cf0:	8c 81       	ldd	r24, Y+4	; 0x04
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	88 2f       	mov	r24, r24
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	b9 01       	movw	r22, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <PORT_setPinDirection+0x188>
     d00:	66 0f       	add	r22, r22
     d02:	77 1f       	adc	r23, r23
     d04:	8a 95       	dec	r24
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <PORT_setPinDirection+0x184>
     d08:	cb 01       	movw	r24, r22
     d0a:	84 2b       	or	r24, r20
     d0c:	8c 93       	st	X, r24
            /* Do Nothing. */
            break;
        }
    }

    return LOC_errorStatus;
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d10:	26 96       	adiw	r28, 0x06	; 6
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61
     d1c:	cf 91       	pop	r28
     d1e:	df 91       	pop	r29
     d20:	08 95       	ret

00000d22 <DIO_writePin>:
 *                                                          - Port Number Error.
 *                                                          - Pin Number Error.
 *                                                          - Invalid Level Error.
 ====================================================================================================================*/
DIO_errorStatus DIO_writePin(uint8 a_portID, uint8 a_pinID, DIO_pinStatus a_value)
{
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	00 d0       	rcall	.+0      	; 0xd28 <DIO_writePin+0x6>
     d28:	00 d0       	rcall	.+0      	; 0xd2a <DIO_writePin+0x8>
     d2a:	00 d0       	rcall	.+0      	; 0xd2c <DIO_writePin+0xa>
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	8a 83       	std	Y+2, r24	; 0x02
     d32:	6b 83       	std	Y+3, r22	; 0x03
     d34:	4c 83       	std	Y+4, r20	; 0x04
    DIO_errorStatus LOC_errorStatus = DIO_NO_ERRORS;
     d36:	19 82       	std	Y+1, r1	; 0x01

    if(a_portID >= DIO_NUM_OF_PORTS)
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	18 f0       	brcs	.+6      	; 0xd44 <DIO_writePin+0x22>
    {
        LOC_errorStatus = DIO_PORT_NUM_ERROR;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	89 83       	std	Y+1, r24	; 0x01
     d42:	b8 c0       	rjmp	.+368    	; 0xeb4 <DIO_writePin+0x192>
    }

    else if(a_pinID >= DIO_NUM_OF_PINS_PER_PORT)
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	88 30       	cpi	r24, 0x08	; 8
     d48:	18 f0       	brcs	.+6      	; 0xd50 <DIO_writePin+0x2e>
    {
        LOC_errorStatus = DIO_PIN_NUM_ERROR;
     d4a:	82 e0       	ldi	r24, 0x02	; 2
     d4c:	89 83       	std	Y+1, r24	; 0x01
     d4e:	b2 c0       	rjmp	.+356    	; 0xeb4 <DIO_writePin+0x192>
    }

    else if((a_value != DIO_HIGH_PIN) && (a_value != DIO_LOW_PIN))
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	31 f0       	breq	.+12     	; 0xd62 <DIO_writePin+0x40>
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	88 23       	and	r24, r24
     d5a:	19 f0       	breq	.+6      	; 0xd62 <DIO_writePin+0x40>
    {
        LOC_errorStatus = DIO_LEVEL_ERROR;
     d5c:	83 e0       	ldi	r24, 0x03	; 3
     d5e:	89 83       	std	Y+1, r24	; 0x01
     d60:	a9 c0       	rjmp	.+338    	; 0xeb4 <DIO_writePin+0x192>
    }

    else
    {
        switch (a_portID)
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	3e 83       	std	Y+6, r19	; 0x06
     d6a:	2d 83       	std	Y+5, r18	; 0x05
     d6c:	6d 81       	ldd	r22, Y+5	; 0x05
     d6e:	7e 81       	ldd	r23, Y+6	; 0x06
     d70:	61 30       	cpi	r22, 0x01	; 1
     d72:	71 05       	cpc	r23, r1
     d74:	d1 f1       	breq	.+116    	; 0xdea <DIO_writePin+0xc8>
     d76:	8d 81       	ldd	r24, Y+5	; 0x05
     d78:	9e 81       	ldd	r25, Y+6	; 0x06
     d7a:	82 30       	cpi	r24, 0x02	; 2
     d7c:	91 05       	cpc	r25, r1
     d7e:	34 f4       	brge	.+12     	; 0xd8c <DIO_writePin+0x6a>
     d80:	2d 81       	ldd	r18, Y+5	; 0x05
     d82:	3e 81       	ldd	r19, Y+6	; 0x06
     d84:	21 15       	cp	r18, r1
     d86:	31 05       	cpc	r19, r1
     d88:	71 f0       	breq	.+28     	; 0xda6 <DIO_writePin+0x84>
     d8a:	94 c0       	rjmp	.+296    	; 0xeb4 <DIO_writePin+0x192>
     d8c:	6d 81       	ldd	r22, Y+5	; 0x05
     d8e:	7e 81       	ldd	r23, Y+6	; 0x06
     d90:	62 30       	cpi	r22, 0x02	; 2
     d92:	71 05       	cpc	r23, r1
     d94:	09 f4       	brne	.+2      	; 0xd98 <DIO_writePin+0x76>
     d96:	4b c0       	rjmp	.+150    	; 0xe2e <DIO_writePin+0x10c>
     d98:	8d 81       	ldd	r24, Y+5	; 0x05
     d9a:	9e 81       	ldd	r25, Y+6	; 0x06
     d9c:	83 30       	cpi	r24, 0x03	; 3
     d9e:	91 05       	cpc	r25, r1
     da0:	09 f4       	brne	.+2      	; 0xda4 <DIO_writePin+0x82>
     da2:	67 c0       	rjmp	.+206    	; 0xe72 <DIO_writePin+0x150>
     da4:	87 c0       	rjmp	.+270    	; 0xeb4 <DIO_writePin+0x192>
        {
        case DIO_PORTA_ID:
            WRITE_BIT(PORTA,a_pinID,a_value);
     da6:	ab e3       	ldi	r26, 0x3B	; 59
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	eb e3       	ldi	r30, 0x3B	; 59
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <DIO_writePin+0xa0>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	2a 95       	dec	r18
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <DIO_writePin+0x9c>
     dc6:	80 95       	com	r24
     dc8:	48 23       	and	r20, r24
     dca:	8c 81       	ldd	r24, Y+4	; 0x04
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	88 2f       	mov	r24, r24
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	b9 01       	movw	r22, r18
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <DIO_writePin+0xbc>
     dda:	66 0f       	add	r22, r22
     ddc:	77 1f       	adc	r23, r23
     dde:	8a 95       	dec	r24
     de0:	e2 f7       	brpl	.-8      	; 0xdda <DIO_writePin+0xb8>
     de2:	cb 01       	movw	r24, r22
     de4:	84 2b       	or	r24, r20
     de6:	8c 93       	st	X, r24
     de8:	65 c0       	rjmp	.+202    	; 0xeb4 <DIO_writePin+0x192>
            break;

        case DIO_PORTB_ID:
            WRITE_BIT(PORTB,a_pinID,a_value);
     dea:	a8 e3       	ldi	r26, 0x38	; 56
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e8 e3       	ldi	r30, 0x38	; 56
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <DIO_writePin+0xe4>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	2a 95       	dec	r18
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <DIO_writePin+0xe0>
     e0a:	80 95       	com	r24
     e0c:	48 23       	and	r20, r24
     e0e:	8c 81       	ldd	r24, Y+4	; 0x04
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	88 2f       	mov	r24, r24
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	b9 01       	movw	r22, r18
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <DIO_writePin+0x100>
     e1e:	66 0f       	add	r22, r22
     e20:	77 1f       	adc	r23, r23
     e22:	8a 95       	dec	r24
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <DIO_writePin+0xfc>
     e26:	cb 01       	movw	r24, r22
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	43 c0       	rjmp	.+134    	; 0xeb4 <DIO_writePin+0x192>
            break;

        case DIO_PORTC_ID:
            WRITE_BIT(PORTC,a_pinID,a_value);
     e2e:	a5 e3       	ldi	r26, 0x35	; 53
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e5 e3       	ldi	r30, 0x35	; 53
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <DIO_writePin+0x128>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	2a 95       	dec	r18
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <DIO_writePin+0x124>
     e4e:	80 95       	com	r24
     e50:	48 23       	and	r20, r24
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	88 2f       	mov	r24, r24
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	b9 01       	movw	r22, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <DIO_writePin+0x144>
     e62:	66 0f       	add	r22, r22
     e64:	77 1f       	adc	r23, r23
     e66:	8a 95       	dec	r24
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <DIO_writePin+0x140>
     e6a:	cb 01       	movw	r24, r22
     e6c:	84 2b       	or	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	21 c0       	rjmp	.+66     	; 0xeb4 <DIO_writePin+0x192>
            break;

        case DIO_PORTD_ID:
            WRITE_BIT(PORTD,a_pinID,a_value);
     e72:	a2 e3       	ldi	r26, 0x32	; 50
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e2 e3       	ldi	r30, 0x32	; 50
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <DIO_writePin+0x16c>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	2a 95       	dec	r18
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <DIO_writePin+0x168>
     e92:	80 95       	com	r24
     e94:	48 23       	and	r20, r24
     e96:	8c 81       	ldd	r24, Y+4	; 0x04
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	88 2f       	mov	r24, r24
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	b9 01       	movw	r22, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_writePin+0x188>
     ea6:	66 0f       	add	r22, r22
     ea8:	77 1f       	adc	r23, r23
     eaa:	8a 95       	dec	r24
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_writePin+0x184>
     eae:	cb 01       	movw	r24, r22
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
            /* Do Nothing. */
            break;
        }
    }

    return LOC_errorStatus;
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb6:	26 96       	adiw	r28, 0x06	; 6
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <DIO_writePort>:
 * [return]        : The function returns the error status: - No Errors.
 *                                                          - Port Number Error.
 *                                                          - Invalid Level Error.
 ====================================================================================================================*/
DIO_errorStatus DIO_writePort(uint8 a_portID, uint8 a_value)
{
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	00 d0       	rcall	.+0      	; 0xece <DIO_writePort+0x6>
     ece:	00 d0       	rcall	.+0      	; 0xed0 <DIO_writePort+0x8>
     ed0:	0f 92       	push	r0
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	8a 83       	std	Y+2, r24	; 0x02
     ed8:	6b 83       	std	Y+3, r22	; 0x03
    DIO_errorStatus LOC_errorStatus = DIO_NO_ERRORS;
     eda:	19 82       	std	Y+1, r1	; 0x01

    if(a_portID >= DIO_NUM_OF_PORTS)
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	84 30       	cpi	r24, 0x04	; 4
     ee0:	18 f0       	brcs	.+6      	; 0xee8 <DIO_writePort+0x20>
    {
        LOC_errorStatus = DIO_PORT_NUM_ERROR;
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	89 83       	std	Y+1, r24	; 0x01
     ee6:	32 c0       	rjmp	.+100    	; 0xf4c <DIO_writePort+0x84>
        LOC_errorStatus = DIO_LEVEL_ERROR;
    }

    else
    {
        switch (a_portID)
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	3d 83       	std	Y+5, r19	; 0x05
     ef0:	2c 83       	std	Y+4, r18	; 0x04
     ef2:	8c 81       	ldd	r24, Y+4	; 0x04
     ef4:	9d 81       	ldd	r25, Y+5	; 0x05
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	91 05       	cpc	r25, r1
     efa:	d1 f0       	breq	.+52     	; 0xf30 <DIO_writePort+0x68>
     efc:	2c 81       	ldd	r18, Y+4	; 0x04
     efe:	3d 81       	ldd	r19, Y+5	; 0x05
     f00:	22 30       	cpi	r18, 0x02	; 2
     f02:	31 05       	cpc	r19, r1
     f04:	2c f4       	brge	.+10     	; 0xf10 <DIO_writePort+0x48>
     f06:	8c 81       	ldd	r24, Y+4	; 0x04
     f08:	9d 81       	ldd	r25, Y+5	; 0x05
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	61 f0       	breq	.+24     	; 0xf26 <DIO_writePort+0x5e>
     f0e:	1e c0       	rjmp	.+60     	; 0xf4c <DIO_writePort+0x84>
     f10:	2c 81       	ldd	r18, Y+4	; 0x04
     f12:	3d 81       	ldd	r19, Y+5	; 0x05
     f14:	22 30       	cpi	r18, 0x02	; 2
     f16:	31 05       	cpc	r19, r1
     f18:	81 f0       	breq	.+32     	; 0xf3a <DIO_writePort+0x72>
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	9d 81       	ldd	r25, Y+5	; 0x05
     f1e:	83 30       	cpi	r24, 0x03	; 3
     f20:	91 05       	cpc	r25, r1
     f22:	81 f0       	breq	.+32     	; 0xf44 <DIO_writePort+0x7c>
     f24:	13 c0       	rjmp	.+38     	; 0xf4c <DIO_writePort+0x84>
        {
        case DIO_PORTA_ID:
            PORTA = a_value;
     f26:	eb e3       	ldi	r30, 0x3B	; 59
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	80 83       	st	Z, r24
     f2e:	0e c0       	rjmp	.+28     	; 0xf4c <DIO_writePort+0x84>
            break;

        case DIO_PORTB_ID:
            PORTB = a_value;
     f30:	e8 e3       	ldi	r30, 0x38	; 56
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	80 83       	st	Z, r24
     f38:	09 c0       	rjmp	.+18     	; 0xf4c <DIO_writePort+0x84>
            break;

        case DIO_PORTC_ID:
            PORTC = a_value;
     f3a:	e5 e3       	ldi	r30, 0x35	; 53
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	80 83       	st	Z, r24
     f42:	04 c0       	rjmp	.+8      	; 0xf4c <DIO_writePort+0x84>
            break;

        case DIO_PORTD_ID:
            PORTD = a_value;
     f44:	e2 e3       	ldi	r30, 0x32	; 50
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	80 83       	st	Z, r24
            /* Do Nothing. */
            break;
        }
    }

    return LOC_errorStatus;
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <DIO_readPin>:
 *                                                          - Port Number Error.
 *                                                          - Pin Number Error.
 *                                                          - Null Pointer Error.
 ====================================================================================================================*/
DIO_errorStatus DIO_readPin(uint8 a_portID, uint8 a_pinID, DIO_pinStatus* a_ptr2value)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	2b 97       	sbiw	r28, 0x0b	; 11
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	8a 83       	std	Y+2, r24	; 0x02
     f74:	6b 83       	std	Y+3, r22	; 0x03
     f76:	5d 83       	std	Y+5, r21	; 0x05
     f78:	4c 83       	std	Y+4, r20	; 0x04
    DIO_errorStatus LOC_errorStatus = DIO_NO_ERRORS;
     f7a:	19 82       	std	Y+1, r1	; 0x01

    if(a_portID >= DIO_NUM_OF_PORTS)
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	84 30       	cpi	r24, 0x04	; 4
     f80:	18 f0       	brcs	.+6      	; 0xf88 <DIO_readPin+0x2a>
    {
        LOC_errorStatus = DIO_PORT_NUM_ERROR;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	89 83       	std	Y+1, r24	; 0x01
     f86:	9e c0       	rjmp	.+316    	; 0x10c4 <DIO_readPin+0x166>
    }

    else if(a_pinID >= DIO_NUM_OF_PINS_PER_PORT)
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	88 30       	cpi	r24, 0x08	; 8
     f8c:	18 f0       	brcs	.+6      	; 0xf94 <DIO_readPin+0x36>
    {
        LOC_errorStatus = DIO_PIN_NUM_ERROR;
     f8e:	82 e0       	ldi	r24, 0x02	; 2
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	98 c0       	rjmp	.+304    	; 0x10c4 <DIO_readPin+0x166>
    }

    else if(a_ptr2value == NULL_PTR)
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	9d 81       	ldd	r25, Y+5	; 0x05
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	19 f4       	brne	.+6      	; 0xfa2 <DIO_readPin+0x44>
    {
        LOC_errorStatus = DIO_NULL_PTR_ERROR;
     f9c:	84 e0       	ldi	r24, 0x04	; 4
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	91 c0       	rjmp	.+290    	; 0x10c4 <DIO_readPin+0x166>
    }

    else
    {
        switch (a_portID)
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	3b 87       	std	Y+11, r19	; 0x0b
     faa:	2a 87       	std	Y+10, r18	; 0x0a
     fac:	4a 85       	ldd	r20, Y+10	; 0x0a
     fae:	5b 85       	ldd	r21, Y+11	; 0x0b
     fb0:	41 30       	cpi	r20, 0x01	; 1
     fb2:	51 05       	cpc	r21, r1
     fb4:	a1 f1       	breq	.+104    	; 0x101e <DIO_readPin+0xc0>
     fb6:	8a 85       	ldd	r24, Y+10	; 0x0a
     fb8:	9b 85       	ldd	r25, Y+11	; 0x0b
     fba:	82 30       	cpi	r24, 0x02	; 2
     fbc:	91 05       	cpc	r25, r1
     fbe:	34 f4       	brge	.+12     	; 0xfcc <DIO_readPin+0x6e>
     fc0:	2a 85       	ldd	r18, Y+10	; 0x0a
     fc2:	3b 85       	ldd	r19, Y+11	; 0x0b
     fc4:	21 15       	cp	r18, r1
     fc6:	31 05       	cpc	r19, r1
     fc8:	71 f0       	breq	.+28     	; 0xfe6 <DIO_readPin+0x88>
     fca:	7c c0       	rjmp	.+248    	; 0x10c4 <DIO_readPin+0x166>
     fcc:	4a 85       	ldd	r20, Y+10	; 0x0a
     fce:	5b 85       	ldd	r21, Y+11	; 0x0b
     fd0:	42 30       	cpi	r20, 0x02	; 2
     fd2:	51 05       	cpc	r21, r1
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <DIO_readPin+0x7a>
     fd6:	3f c0       	rjmp	.+126    	; 0x1056 <DIO_readPin+0xf8>
     fd8:	8a 85       	ldd	r24, Y+10	; 0x0a
     fda:	9b 85       	ldd	r25, Y+11	; 0x0b
     fdc:	83 30       	cpi	r24, 0x03	; 3
     fde:	91 05       	cpc	r25, r1
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <DIO_readPin+0x86>
     fe2:	55 c0       	rjmp	.+170    	; 0x108e <DIO_readPin+0x130>
     fe4:	6f c0       	rjmp	.+222    	; 0x10c4 <DIO_readPin+0x166>
        {
        case DIO_PORTA_ID:
            *a_ptr2value = GET_BIT(PINA,a_pinID);
     fe6:	e9 e3       	ldi	r30, 0x39	; 57
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a9 01       	movw	r20, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_readPin+0xa0>
     ffa:	55 95       	asr	r21
     ffc:	47 95       	ror	r20
     ffe:	8a 95       	dec	r24
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_readPin+0x9c>
    1002:	ca 01       	movw	r24, r20
    1004:	81 70       	andi	r24, 0x01	; 1
    1006:	90 70       	andi	r25, 0x00	; 0
    1008:	88 23       	and	r24, r24
    100a:	19 f0       	breq	.+6      	; 0x1012 <DIO_readPin+0xb4>
    100c:	51 e0       	ldi	r21, 0x01	; 1
    100e:	59 87       	std	Y+9, r21	; 0x09
    1010:	01 c0       	rjmp	.+2      	; 0x1014 <DIO_readPin+0xb6>
    1012:	19 86       	std	Y+9, r1	; 0x09
    1014:	ec 81       	ldd	r30, Y+4	; 0x04
    1016:	fd 81       	ldd	r31, Y+5	; 0x05
    1018:	89 85       	ldd	r24, Y+9	; 0x09
    101a:	80 83       	st	Z, r24
    101c:	53 c0       	rjmp	.+166    	; 0x10c4 <DIO_readPin+0x166>
            break;

        case DIO_PORTB_ID:
            *a_ptr2value = GET_BIT(PINB,a_pinID);
    101e:	e6 e3       	ldi	r30, 0x36	; 54
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	88 2f       	mov	r24, r24
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a9 01       	movw	r20, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_readPin+0xd8>
    1032:	55 95       	asr	r21
    1034:	47 95       	ror	r20
    1036:	8a 95       	dec	r24
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_readPin+0xd4>
    103a:	ca 01       	movw	r24, r20
    103c:	81 70       	andi	r24, 0x01	; 1
    103e:	90 70       	andi	r25, 0x00	; 0
    1040:	88 23       	and	r24, r24
    1042:	19 f0       	breq	.+6      	; 0x104a <DIO_readPin+0xec>
    1044:	51 e0       	ldi	r21, 0x01	; 1
    1046:	58 87       	std	Y+8, r21	; 0x08
    1048:	01 c0       	rjmp	.+2      	; 0x104c <DIO_readPin+0xee>
    104a:	18 86       	std	Y+8, r1	; 0x08
    104c:	ec 81       	ldd	r30, Y+4	; 0x04
    104e:	fd 81       	ldd	r31, Y+5	; 0x05
    1050:	88 85       	ldd	r24, Y+8	; 0x08
    1052:	80 83       	st	Z, r24
    1054:	37 c0       	rjmp	.+110    	; 0x10c4 <DIO_readPin+0x166>
            break;

        case DIO_PORTC_ID:
            *a_ptr2value = GET_BIT(PINC,a_pinID);
    1056:	e3 e3       	ldi	r30, 0x33	; 51
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	a9 01       	movw	r20, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <DIO_readPin+0x110>
    106a:	55 95       	asr	r21
    106c:	47 95       	ror	r20
    106e:	8a 95       	dec	r24
    1070:	e2 f7       	brpl	.-8      	; 0x106a <DIO_readPin+0x10c>
    1072:	ca 01       	movw	r24, r20
    1074:	81 70       	andi	r24, 0x01	; 1
    1076:	90 70       	andi	r25, 0x00	; 0
    1078:	88 23       	and	r24, r24
    107a:	19 f0       	breq	.+6      	; 0x1082 <DIO_readPin+0x124>
    107c:	51 e0       	ldi	r21, 0x01	; 1
    107e:	5f 83       	std	Y+7, r21	; 0x07
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <DIO_readPin+0x126>
    1082:	1f 82       	std	Y+7, r1	; 0x07
    1084:	ec 81       	ldd	r30, Y+4	; 0x04
    1086:	fd 81       	ldd	r31, Y+5	; 0x05
    1088:	8f 81       	ldd	r24, Y+7	; 0x07
    108a:	80 83       	st	Z, r24
    108c:	1b c0       	rjmp	.+54     	; 0x10c4 <DIO_readPin+0x166>
            break;

        case DIO_PORTD_ID:
            *a_ptr2value = GET_BIT(PIND,a_pinID);
    108e:	e0 e3       	ldi	r30, 0x30	; 48
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	88 2f       	mov	r24, r24
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	a9 01       	movw	r20, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_readPin+0x148>
    10a2:	55 95       	asr	r21
    10a4:	47 95       	ror	r20
    10a6:	8a 95       	dec	r24
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <DIO_readPin+0x144>
    10aa:	ca 01       	movw	r24, r20
    10ac:	81 70       	andi	r24, 0x01	; 1
    10ae:	90 70       	andi	r25, 0x00	; 0
    10b0:	88 23       	and	r24, r24
    10b2:	19 f0       	breq	.+6      	; 0x10ba <DIO_readPin+0x15c>
    10b4:	51 e0       	ldi	r21, 0x01	; 1
    10b6:	5e 83       	std	Y+6, r21	; 0x06
    10b8:	01 c0       	rjmp	.+2      	; 0x10bc <DIO_readPin+0x15e>
    10ba:	1e 82       	std	Y+6, r1	; 0x06
    10bc:	ec 81       	ldd	r30, Y+4	; 0x04
    10be:	fd 81       	ldd	r31, Y+5	; 0x05
    10c0:	8e 81       	ldd	r24, Y+6	; 0x06
    10c2:	80 83       	st	Z, r24
            /* Do Nothing. */
            break;
        }
    }

    return LOC_errorStatus;
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c6:	2b 96       	adiw	r28, 0x0b	; 11
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <DIO_readPort>:
 * [return]        : The function returns the error status: - No Errors.
 *                                                          - Port Number Error.
 *                                                          - Null Pointer Error.
 ====================================================================================================================*/
DIO_errorStatus DIO_readPort(uint8 a_portID, uint8* a_ptr2value)
{
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	00 d0       	rcall	.+0      	; 0x10de <DIO_readPort+0x6>
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <DIO_readPort+0x8>
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <DIO_readPort+0xa>
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	8a 83       	std	Y+2, r24	; 0x02
    10e8:	7c 83       	std	Y+4, r23	; 0x04
    10ea:	6b 83       	std	Y+3, r22	; 0x03
    DIO_errorStatus LOC_errorStatus = DIO_NO_ERRORS;
    10ec:	19 82       	std	Y+1, r1	; 0x01

    if(a_portID >= DIO_NUM_OF_PORTS)
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	84 30       	cpi	r24, 0x04	; 4
    10f2:	18 f0       	brcs	.+6      	; 0x10fa <DIO_readPort+0x22>
    {
        LOC_errorStatus = DIO_PORT_NUM_ERROR;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	41 c0       	rjmp	.+130    	; 0x117c <DIO_readPort+0xa4>
    }

    else if(a_ptr2value == NULL_PTR)
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	19 f4       	brne	.+6      	; 0x1108 <DIO_readPort+0x30>
    {
        LOC_errorStatus = DIO_NULL_PTR_ERROR;
    1102:	84 e0       	ldi	r24, 0x04	; 4
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	3a c0       	rjmp	.+116    	; 0x117c <DIO_readPort+0xa4>
    }

    else
    {
        switch (a_portID)
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	3e 83       	std	Y+6, r19	; 0x06
    1110:	2d 83       	std	Y+5, r18	; 0x05
    1112:	8d 81       	ldd	r24, Y+5	; 0x05
    1114:	9e 81       	ldd	r25, Y+6	; 0x06
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	91 05       	cpc	r25, r1
    111a:	e1 f0       	breq	.+56     	; 0x1154 <DIO_readPort+0x7c>
    111c:	2d 81       	ldd	r18, Y+5	; 0x05
    111e:	3e 81       	ldd	r19, Y+6	; 0x06
    1120:	22 30       	cpi	r18, 0x02	; 2
    1122:	31 05       	cpc	r19, r1
    1124:	2c f4       	brge	.+10     	; 0x1130 <DIO_readPort+0x58>
    1126:	8d 81       	ldd	r24, Y+5	; 0x05
    1128:	9e 81       	ldd	r25, Y+6	; 0x06
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	61 f0       	breq	.+24     	; 0x1146 <DIO_readPort+0x6e>
    112e:	26 c0       	rjmp	.+76     	; 0x117c <DIO_readPort+0xa4>
    1130:	2d 81       	ldd	r18, Y+5	; 0x05
    1132:	3e 81       	ldd	r19, Y+6	; 0x06
    1134:	22 30       	cpi	r18, 0x02	; 2
    1136:	31 05       	cpc	r19, r1
    1138:	a1 f0       	breq	.+40     	; 0x1162 <DIO_readPort+0x8a>
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	9e 81       	ldd	r25, Y+6	; 0x06
    113e:	83 30       	cpi	r24, 0x03	; 3
    1140:	91 05       	cpc	r25, r1
    1142:	b1 f0       	breq	.+44     	; 0x1170 <DIO_readPort+0x98>
    1144:	1b c0       	rjmp	.+54     	; 0x117c <DIO_readPort+0xa4>
        {
        case DIO_PORTA_ID:
            *a_ptr2value = PINA;
    1146:	e9 e3       	ldi	r30, 0x39	; 57
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	eb 81       	ldd	r30, Y+3	; 0x03
    114e:	fc 81       	ldd	r31, Y+4	; 0x04
    1150:	80 83       	st	Z, r24
    1152:	14 c0       	rjmp	.+40     	; 0x117c <DIO_readPort+0xa4>
            break;

        case DIO_PORTB_ID:
            *a_ptr2value = PINB;
    1154:	e6 e3       	ldi	r30, 0x36	; 54
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	eb 81       	ldd	r30, Y+3	; 0x03
    115c:	fc 81       	ldd	r31, Y+4	; 0x04
    115e:	80 83       	st	Z, r24
    1160:	0d c0       	rjmp	.+26     	; 0x117c <DIO_readPort+0xa4>
            break;

        case DIO_PORTC_ID:
            *a_ptr2value = PINC;
    1162:	e3 e3       	ldi	r30, 0x33	; 51
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	eb 81       	ldd	r30, Y+3	; 0x03
    116a:	fc 81       	ldd	r31, Y+4	; 0x04
    116c:	80 83       	st	Z, r24
    116e:	06 c0       	rjmp	.+12     	; 0x117c <DIO_readPort+0xa4>
            break;

        case DIO_PORTD_ID:
            *a_ptr2value = PIND;
    1170:	e0 e3       	ldi	r30, 0x30	; 48
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	eb 81       	ldd	r30, Y+3	; 0x03
    1178:	fc 81       	ldd	r31, Y+4	; 0x04
    117a:	80 83       	st	Z, r24
            /* Do Nothing. */
            break;
        }
    }

    return LOC_errorStatus;
    117c:	89 81       	ldd	r24, Y+1	; 0x01
}
    117e:	26 96       	adiw	r28, 0x06	; 6
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <DIO_togglePin>:
 * [return]        : The function returns the error status: - No Errors.
 *                                                          - Port Number Error.
 *                                                          - Pin Number Error.
 ====================================================================================================================*/
DIO_errorStatus DIO_togglePin(uint8 a_portID, uint8 a_pinID)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	00 d0       	rcall	.+0      	; 0x1196 <DIO_togglePin+0x6>
    1196:	00 d0       	rcall	.+0      	; 0x1198 <DIO_togglePin+0x8>
    1198:	0f 92       	push	r0
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	8a 83       	std	Y+2, r24	; 0x02
    11a0:	6b 83       	std	Y+3, r22	; 0x03
    DIO_errorStatus LOC_errorStatus = DIO_NO_ERRORS;
    11a2:	19 82       	std	Y+1, r1	; 0x01

    if(a_portID >= DIO_NUM_OF_PORTS)
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	84 30       	cpi	r24, 0x04	; 4
    11a8:	18 f0       	brcs	.+6      	; 0x11b0 <DIO_togglePin+0x20>
    {
        LOC_errorStatus = DIO_PORT_NUM_ERROR;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	74 c0       	rjmp	.+232    	; 0x1298 <DIO_togglePin+0x108>
    }

    else if(a_pinID >= DIO_NUM_OF_PINS_PER_PORT)
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	88 30       	cpi	r24, 0x08	; 8
    11b4:	18 f0       	brcs	.+6      	; 0x11bc <DIO_togglePin+0x2c>
    {
        LOC_errorStatus = DIO_PIN_NUM_ERROR;
    11b6:	82 e0       	ldi	r24, 0x02	; 2
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	6e c0       	rjmp	.+220    	; 0x1298 <DIO_togglePin+0x108>
    }

    else
    {
        switch (a_portID)
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	3d 83       	std	Y+5, r19	; 0x05
    11c4:	2c 83       	std	Y+4, r18	; 0x04
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	91 05       	cpc	r25, r1
    11ce:	49 f1       	breq	.+82     	; 0x1222 <DIO_togglePin+0x92>
    11d0:	2c 81       	ldd	r18, Y+4	; 0x04
    11d2:	3d 81       	ldd	r19, Y+5	; 0x05
    11d4:	22 30       	cpi	r18, 0x02	; 2
    11d6:	31 05       	cpc	r19, r1
    11d8:	2c f4       	brge	.+10     	; 0x11e4 <DIO_togglePin+0x54>
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	9d 81       	ldd	r25, Y+5	; 0x05
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	61 f0       	breq	.+24     	; 0x11fa <DIO_togglePin+0x6a>
    11e2:	5a c0       	rjmp	.+180    	; 0x1298 <DIO_togglePin+0x108>
    11e4:	2c 81       	ldd	r18, Y+4	; 0x04
    11e6:	3d 81       	ldd	r19, Y+5	; 0x05
    11e8:	22 30       	cpi	r18, 0x02	; 2
    11ea:	31 05       	cpc	r19, r1
    11ec:	71 f1       	breq	.+92     	; 0x124a <DIO_togglePin+0xba>
    11ee:	8c 81       	ldd	r24, Y+4	; 0x04
    11f0:	9d 81       	ldd	r25, Y+5	; 0x05
    11f2:	83 30       	cpi	r24, 0x03	; 3
    11f4:	91 05       	cpc	r25, r1
    11f6:	e9 f1       	breq	.+122    	; 0x1272 <DIO_togglePin+0xe2>
    11f8:	4f c0       	rjmp	.+158    	; 0x1298 <DIO_togglePin+0x108>
        {
        case DIO_PORTA_ID:
            TOGGLE_BIT(PORTA,a_pinID);
    11fa:	ab e3       	ldi	r26, 0x3B	; 59
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	eb e3       	ldi	r30, 0x3B	; 59
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_togglePin+0x88>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_togglePin+0x84>
    121c:	84 27       	eor	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	3b c0       	rjmp	.+118    	; 0x1298 <DIO_togglePin+0x108>
            break;

        case DIO_PORTB_ID:
            TOGGLE_BIT(PORTB,a_pinID);
    1222:	a8 e3       	ldi	r26, 0x38	; 56
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e8 e3       	ldi	r30, 0x38	; 56
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_togglePin+0xb0>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_togglePin+0xac>
    1244:	84 27       	eor	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	27 c0       	rjmp	.+78     	; 0x1298 <DIO_togglePin+0x108>
            break;

        case DIO_PORTC_ID:
            TOGGLE_BIT(PORTC,a_pinID);
    124a:	a5 e3       	ldi	r26, 0x35	; 53
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e5 e3       	ldi	r30, 0x35	; 53
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_togglePin+0xd8>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_togglePin+0xd4>
    126c:	84 27       	eor	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	13 c0       	rjmp	.+38     	; 0x1298 <DIO_togglePin+0x108>
            break;

        case DIO_PORTD_ID:
            TOGGLE_BIT(PORTD,a_pinID);
    1272:	a2 e3       	ldi	r26, 0x32	; 50
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e2 e3       	ldi	r30, 0x32	; 50
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 2e       	mov	r0, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <DIO_togglePin+0x100>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <DIO_togglePin+0xfc>
    1294:	84 27       	eor	r24, r20
    1296:	8c 93       	st	X, r24
            /* Do Nothing. */
            break;
        }
    }

    return LOC_errorStatus;
    1298:	89 81       	ldd	r24, Y+1	; 0x01
}
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <LCD_init>:
 * [Description]   : Initialize the LCD by sending initialization command.
 * [Arguments]     : The function takes no arguments.
 * [return]        : The function returns void.
 ====================================================================================================================*/
void LCD_init(void)
{
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_4_BIT_2_LINES_INIT2_COMMAND);
	LCD_sendCommand(LCD_4_BIT_2_LINES_SET_COMMAND);

	#elif(LCD_DATA_BIT_MODE == LCD_8_BIT_MODE)

	LCD_sendCommand(LCD_8_BIT_2_LINES_SET_COMMAND);
    12b2:	88 e3       	ldi	r24, 0x38	; 56
    12b4:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_sendCommand>

	#endif

	LCD_sendCommand(LCD_CURSOR_OFF_COMMAND);
    12b8:	8c e0       	ldi	r24, 0x0C	; 12
    12ba:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_SCREEN_COMMAND);
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_sendCommand>
}
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <LCD_sendCommand>:
 * [Description]   : Send a specific command to the LCD.
 * [Arguments]     : <a_command>      -> Indicates to the required command.
 * [return]        : The function returns void.
 ====================================================================================================================*/
static void LCD_sendCommand(uint8 a_command)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	e9 97       	sbiw	r28, 0x39	; 57
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	89 af       	std	Y+57, r24	; 0x39
	DIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,DIO_LOW_PIN);
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	0e 94 91 06 	call	0xd22	; 0xd22 <DIO_writePin>
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	a0 e8       	ldi	r26, 0x80	; 128
    12f0:	bf e3       	ldi	r27, 0x3F	; 63
    12f2:	8d ab       	std	Y+53, r24	; 0x35
    12f4:	9e ab       	std	Y+54, r25	; 0x36
    12f6:	af ab       	std	Y+55, r26	; 0x37
    12f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fa:	6d a9       	ldd	r22, Y+53	; 0x35
    12fc:	7e a9       	ldd	r23, Y+54	; 0x36
    12fe:	8f a9       	ldd	r24, Y+55	; 0x37
    1300:	98 ad       	ldd	r25, Y+56	; 0x38
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	4a e7       	ldi	r20, 0x7A	; 122
    1308:	55 e4       	ldi	r21, 0x45	; 69
    130a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	89 ab       	std	Y+49, r24	; 0x31
    1314:	9a ab       	std	Y+50, r25	; 0x32
    1316:	ab ab       	std	Y+51, r26	; 0x33
    1318:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    131a:	69 a9       	ldd	r22, Y+49	; 0x31
    131c:	7a a9       	ldd	r23, Y+50	; 0x32
    131e:	8b a9       	ldd	r24, Y+51	; 0x33
    1320:	9c a9       	ldd	r25, Y+52	; 0x34
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e8       	ldi	r20, 0x80	; 128
    1328:	5f e3       	ldi	r21, 0x3F	; 63
    132a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    132e:	88 23       	and	r24, r24
    1330:	2c f4       	brge	.+10     	; 0x133c <LCD_sendCommand+0x72>
		__ticks = 1;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	98 ab       	std	Y+48, r25	; 0x30
    1338:	8f a7       	std	Y+47, r24	; 0x2f
    133a:	3f c0       	rjmp	.+126    	; 0x13ba <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    133c:	69 a9       	ldd	r22, Y+49	; 0x31
    133e:	7a a9       	ldd	r23, Y+50	; 0x32
    1340:	8b a9       	ldd	r24, Y+51	; 0x33
    1342:	9c a9       	ldd	r25, Y+52	; 0x34
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	3f ef       	ldi	r19, 0xFF	; 255
    1348:	4f e7       	ldi	r20, 0x7F	; 127
    134a:	57 e4       	ldi	r21, 0x47	; 71
    134c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1350:	18 16       	cp	r1, r24
    1352:	4c f5       	brge	.+82     	; 0x13a6 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1354:	6d a9       	ldd	r22, Y+53	; 0x35
    1356:	7e a9       	ldd	r23, Y+54	; 0x36
    1358:	8f a9       	ldd	r24, Y+55	; 0x37
    135a:	98 ad       	ldd	r25, Y+56	; 0x38
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	40 e2       	ldi	r20, 0x20	; 32
    1362:	51 e4       	ldi	r21, 0x41	; 65
    1364:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	bc 01       	movw	r22, r24
    136e:	cd 01       	movw	r24, r26
    1370:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	98 ab       	std	Y+48, r25	; 0x30
    137a:	8f a7       	std	Y+47, r24	; 0x2f
    137c:	0f c0       	rjmp	.+30     	; 0x139c <LCD_sendCommand+0xd2>
    137e:	80 e9       	ldi	r24, 0x90	; 144
    1380:	91 e0       	ldi	r25, 0x01	; 1
    1382:	9e a7       	std	Y+46, r25	; 0x2e
    1384:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1386:	8d a5       	ldd	r24, Y+45	; 0x2d
    1388:	9e a5       	ldd	r25, Y+46	; 0x2e
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	f1 f7       	brne	.-4      	; 0x138a <LCD_sendCommand+0xc0>
    138e:	9e a7       	std	Y+46, r25	; 0x2e
    1390:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1392:	8f a5       	ldd	r24, Y+47	; 0x2f
    1394:	98 a9       	ldd	r25, Y+48	; 0x30
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	98 ab       	std	Y+48, r25	; 0x30
    139a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139c:	8f a5       	ldd	r24, Y+47	; 0x2f
    139e:	98 a9       	ldd	r25, Y+48	; 0x30
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	69 f7       	brne	.-38     	; 0x137e <LCD_sendCommand+0xb4>
    13a4:	14 c0       	rjmp	.+40     	; 0x13ce <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a6:	69 a9       	ldd	r22, Y+49	; 0x31
    13a8:	7a a9       	ldd	r23, Y+50	; 0x32
    13aa:	8b a9       	ldd	r24, Y+51	; 0x33
    13ac:	9c a9       	ldd	r25, Y+52	; 0x34
    13ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	98 ab       	std	Y+48, r25	; 0x30
    13b8:	8f a7       	std	Y+47, r24	; 0x2f
    13ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    13bc:	98 a9       	ldd	r25, Y+48	; 0x30
    13be:	9c a7       	std	Y+44, r25	; 0x2c
    13c0:	8b a7       	std	Y+43, r24	; 0x2b
    13c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    13c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	f1 f7       	brne	.-4      	; 0x13c6 <LCD_sendCommand+0xfc>
    13ca:	9c a7       	std	Y+44, r25	; 0x2c
    13cc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(LCD_SETUP_TIME_DELAY);
	DIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN_ID,DIO_HIGH_PIN);
    13ce:	82 e0       	ldi	r24, 0x02	; 2
    13d0:	61 e0       	ldi	r22, 0x01	; 1
    13d2:	41 e0       	ldi	r20, 0x01	; 1
    13d4:	0e 94 91 06 	call	0xd22	; 0xd22 <DIO_writePin>
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	a0 e8       	ldi	r26, 0x80	; 128
    13de:	bf e3       	ldi	r27, 0x3F	; 63
    13e0:	8f a3       	std	Y+39, r24	; 0x27
    13e2:	98 a7       	std	Y+40, r25	; 0x28
    13e4:	a9 a7       	std	Y+41, r26	; 0x29
    13e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e8:	6f a1       	ldd	r22, Y+39	; 0x27
    13ea:	78 a5       	ldd	r23, Y+40	; 0x28
    13ec:	89 a5       	ldd	r24, Y+41	; 0x29
    13ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	4a e7       	ldi	r20, 0x7A	; 122
    13f6:	55 e4       	ldi	r21, 0x45	; 69
    13f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	8b a3       	std	Y+35, r24	; 0x23
    1402:	9c a3       	std	Y+36, r25	; 0x24
    1404:	ad a3       	std	Y+37, r26	; 0x25
    1406:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1408:	6b a1       	ldd	r22, Y+35	; 0x23
    140a:	7c a1       	ldd	r23, Y+36	; 0x24
    140c:	8d a1       	ldd	r24, Y+37	; 0x25
    140e:	9e a1       	ldd	r25, Y+38	; 0x26
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 e8       	ldi	r20, 0x80	; 128
    1416:	5f e3       	ldi	r21, 0x3F	; 63
    1418:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    141c:	88 23       	and	r24, r24
    141e:	2c f4       	brge	.+10     	; 0x142a <LCD_sendCommand+0x160>
		__ticks = 1;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	9a a3       	std	Y+34, r25	; 0x22
    1426:	89 a3       	std	Y+33, r24	; 0x21
    1428:	3f c0       	rjmp	.+126    	; 0x14a8 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    142a:	6b a1       	ldd	r22, Y+35	; 0x23
    142c:	7c a1       	ldd	r23, Y+36	; 0x24
    142e:	8d a1       	ldd	r24, Y+37	; 0x25
    1430:	9e a1       	ldd	r25, Y+38	; 0x26
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	3f ef       	ldi	r19, 0xFF	; 255
    1436:	4f e7       	ldi	r20, 0x7F	; 127
    1438:	57 e4       	ldi	r21, 0x47	; 71
    143a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    143e:	18 16       	cp	r1, r24
    1440:	4c f5       	brge	.+82     	; 0x1494 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1442:	6f a1       	ldd	r22, Y+39	; 0x27
    1444:	78 a5       	ldd	r23, Y+40	; 0x28
    1446:	89 a5       	ldd	r24, Y+41	; 0x29
    1448:	9a a5       	ldd	r25, Y+42	; 0x2a
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e2       	ldi	r20, 0x20	; 32
    1450:	51 e4       	ldi	r21, 0x41	; 65
    1452:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	bc 01       	movw	r22, r24
    145c:	cd 01       	movw	r24, r26
    145e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	9a a3       	std	Y+34, r25	; 0x22
    1468:	89 a3       	std	Y+33, r24	; 0x21
    146a:	0f c0       	rjmp	.+30     	; 0x148a <LCD_sendCommand+0x1c0>
    146c:	80 e9       	ldi	r24, 0x90	; 144
    146e:	91 e0       	ldi	r25, 0x01	; 1
    1470:	98 a3       	std	Y+32, r25	; 0x20
    1472:	8f 8f       	std	Y+31, r24	; 0x1f
    1474:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1476:	98 a1       	ldd	r25, Y+32	; 0x20
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <LCD_sendCommand+0x1ae>
    147c:	98 a3       	std	Y+32, r25	; 0x20
    147e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1480:	89 a1       	ldd	r24, Y+33	; 0x21
    1482:	9a a1       	ldd	r25, Y+34	; 0x22
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	9a a3       	std	Y+34, r25	; 0x22
    1488:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148a:	89 a1       	ldd	r24, Y+33	; 0x21
    148c:	9a a1       	ldd	r25, Y+34	; 0x22
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	69 f7       	brne	.-38     	; 0x146c <LCD_sendCommand+0x1a2>
    1492:	14 c0       	rjmp	.+40     	; 0x14bc <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1494:	6b a1       	ldd	r22, Y+35	; 0x23
    1496:	7c a1       	ldd	r23, Y+36	; 0x24
    1498:	8d a1       	ldd	r24, Y+37	; 0x25
    149a:	9e a1       	ldd	r25, Y+38	; 0x26
    149c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	9a a3       	std	Y+34, r25	; 0x22
    14a6:	89 a3       	std	Y+33, r24	; 0x21
    14a8:	89 a1       	ldd	r24, Y+33	; 0x21
    14aa:	9a a1       	ldd	r25, Y+34	; 0x22
    14ac:	9e 8f       	std	Y+30, r25	; 0x1e
    14ae:	8d 8f       	std	Y+29, r24	; 0x1d
    14b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	f1 f7       	brne	.-4      	; 0x14b4 <LCD_sendCommand+0x1ea>
    14b8:	9e 8f       	std	Y+30, r25	; 0x1e
    14ba:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN6_ID,GET_BIT(a_command,2));
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN7_ID,GET_BIT(a_command,3));

	#elif(LCD_DATA_BIT_MODE == LCD_8_BIT_MODE)

	DIO_writePort(LCD_DATA_PORT_ID,a_command);
    14bc:	83 e0       	ldi	r24, 0x03	; 3
    14be:	69 ad       	ldd	r22, Y+57	; 0x39
    14c0:	0e 94 64 07 	call	0xec8	; 0xec8 <DIO_writePort>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	a0 e8       	ldi	r26, 0x80	; 128
    14ca:	bf e3       	ldi	r27, 0x3F	; 63
    14cc:	89 8f       	std	Y+25, r24	; 0x19
    14ce:	9a 8f       	std	Y+26, r25	; 0x1a
    14d0:	ab 8f       	std	Y+27, r26	; 0x1b
    14d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d4:	69 8d       	ldd	r22, Y+25	; 0x19
    14d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	4a e7       	ldi	r20, 0x7A	; 122
    14e2:	55 e4       	ldi	r21, 0x45	; 69
    14e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	8d 8b       	std	Y+21, r24	; 0x15
    14ee:	9e 8b       	std	Y+22, r25	; 0x16
    14f0:	af 8b       	std	Y+23, r26	; 0x17
    14f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14f4:	6d 89       	ldd	r22, Y+21	; 0x15
    14f6:	7e 89       	ldd	r23, Y+22	; 0x16
    14f8:	8f 89       	ldd	r24, Y+23	; 0x17
    14fa:	98 8d       	ldd	r25, Y+24	; 0x18
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e8       	ldi	r20, 0x80	; 128
    1502:	5f e3       	ldi	r21, 0x3F	; 63
    1504:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1508:	88 23       	and	r24, r24
    150a:	2c f4       	brge	.+10     	; 0x1516 <LCD_sendCommand+0x24c>
		__ticks = 1;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	9c 8b       	std	Y+20, r25	; 0x14
    1512:	8b 8b       	std	Y+19, r24	; 0x13
    1514:	3f c0       	rjmp	.+126    	; 0x1594 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1516:	6d 89       	ldd	r22, Y+21	; 0x15
    1518:	7e 89       	ldd	r23, Y+22	; 0x16
    151a:	8f 89       	ldd	r24, Y+23	; 0x17
    151c:	98 8d       	ldd	r25, Y+24	; 0x18
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	3f ef       	ldi	r19, 0xFF	; 255
    1522:	4f e7       	ldi	r20, 0x7F	; 127
    1524:	57 e4       	ldi	r21, 0x47	; 71
    1526:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    152a:	18 16       	cp	r1, r24
    152c:	4c f5       	brge	.+82     	; 0x1580 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152e:	69 8d       	ldd	r22, Y+25	; 0x19
    1530:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1532:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1534:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e2       	ldi	r20, 0x20	; 32
    153c:	51 e4       	ldi	r21, 0x41	; 65
    153e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	bc 01       	movw	r22, r24
    1548:	cd 01       	movw	r24, r26
    154a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	9c 8b       	std	Y+20, r25	; 0x14
    1554:	8b 8b       	std	Y+19, r24	; 0x13
    1556:	0f c0       	rjmp	.+30     	; 0x1576 <LCD_sendCommand+0x2ac>
    1558:	80 e9       	ldi	r24, 0x90	; 144
    155a:	91 e0       	ldi	r25, 0x01	; 1
    155c:	9a 8b       	std	Y+18, r25	; 0x12
    155e:	89 8b       	std	Y+17, r24	; 0x11
    1560:	89 89       	ldd	r24, Y+17	; 0x11
    1562:	9a 89       	ldd	r25, Y+18	; 0x12
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	f1 f7       	brne	.-4      	; 0x1564 <LCD_sendCommand+0x29a>
    1568:	9a 8b       	std	Y+18, r25	; 0x12
    156a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156c:	8b 89       	ldd	r24, Y+19	; 0x13
    156e:	9c 89       	ldd	r25, Y+20	; 0x14
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	9c 8b       	std	Y+20, r25	; 0x14
    1574:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1576:	8b 89       	ldd	r24, Y+19	; 0x13
    1578:	9c 89       	ldd	r25, Y+20	; 0x14
    157a:	00 97       	sbiw	r24, 0x00	; 0
    157c:	69 f7       	brne	.-38     	; 0x1558 <LCD_sendCommand+0x28e>
    157e:	14 c0       	rjmp	.+40     	; 0x15a8 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1580:	6d 89       	ldd	r22, Y+21	; 0x15
    1582:	7e 89       	ldd	r23, Y+22	; 0x16
    1584:	8f 89       	ldd	r24, Y+23	; 0x17
    1586:	98 8d       	ldd	r25, Y+24	; 0x18
    1588:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	9c 8b       	std	Y+20, r25	; 0x14
    1592:	8b 8b       	std	Y+19, r24	; 0x13
    1594:	8b 89       	ldd	r24, Y+19	; 0x13
    1596:	9c 89       	ldd	r25, Y+20	; 0x14
    1598:	98 8b       	std	Y+16, r25	; 0x10
    159a:	8f 87       	std	Y+15, r24	; 0x0f
    159c:	8f 85       	ldd	r24, Y+15	; 0x0f
    159e:	98 89       	ldd	r25, Y+16	; 0x10
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	f1 f7       	brne	.-4      	; 0x15a0 <LCD_sendCommand+0x2d6>
    15a4:	98 8b       	std	Y+16, r25	; 0x10
    15a6:	8f 87       	std	Y+15, r24	; 0x0f

	#endif

	_delay_ms(LCD_SETUP_TIME_DELAY);
	DIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN_ID,DIO_LOW_PIN);
    15a8:	82 e0       	ldi	r24, 0x02	; 2
    15aa:	61 e0       	ldi	r22, 0x01	; 1
    15ac:	40 e0       	ldi	r20, 0x00	; 0
    15ae:	0e 94 91 06 	call	0xd22	; 0xd22 <DIO_writePin>
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	a0 e8       	ldi	r26, 0x80	; 128
    15b8:	bf e3       	ldi	r27, 0x3F	; 63
    15ba:	8b 87       	std	Y+11, r24	; 0x0b
    15bc:	9c 87       	std	Y+12, r25	; 0x0c
    15be:	ad 87       	std	Y+13, r26	; 0x0d
    15c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	4a e7       	ldi	r20, 0x7A	; 122
    15d0:	55 e4       	ldi	r21, 0x45	; 69
    15d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	8f 83       	std	Y+7, r24	; 0x07
    15dc:	98 87       	std	Y+8, r25	; 0x08
    15de:	a9 87       	std	Y+9, r26	; 0x09
    15e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15e2:	6f 81       	ldd	r22, Y+7	; 0x07
    15e4:	78 85       	ldd	r23, Y+8	; 0x08
    15e6:	89 85       	ldd	r24, Y+9	; 0x09
    15e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e8       	ldi	r20, 0x80	; 128
    15f0:	5f e3       	ldi	r21, 0x3F	; 63
    15f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15f6:	88 23       	and	r24, r24
    15f8:	2c f4       	brge	.+10     	; 0x1604 <LCD_sendCommand+0x33a>
		__ticks = 1;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	9e 83       	std	Y+6, r25	; 0x06
    1600:	8d 83       	std	Y+5, r24	; 0x05
    1602:	3f c0       	rjmp	.+126    	; 0x1682 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1604:	6f 81       	ldd	r22, Y+7	; 0x07
    1606:	78 85       	ldd	r23, Y+8	; 0x08
    1608:	89 85       	ldd	r24, Y+9	; 0x09
    160a:	9a 85       	ldd	r25, Y+10	; 0x0a
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	3f ef       	ldi	r19, 0xFF	; 255
    1610:	4f e7       	ldi	r20, 0x7F	; 127
    1612:	57 e4       	ldi	r21, 0x47	; 71
    1614:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1618:	18 16       	cp	r1, r24
    161a:	4c f5       	brge	.+82     	; 0x166e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161c:	6b 85       	ldd	r22, Y+11	; 0x0b
    161e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1620:	8d 85       	ldd	r24, Y+13	; 0x0d
    1622:	9e 85       	ldd	r25, Y+14	; 0x0e
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	40 e2       	ldi	r20, 0x20	; 32
    162a:	51 e4       	ldi	r21, 0x41	; 65
    162c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	bc 01       	movw	r22, r24
    1636:	cd 01       	movw	r24, r26
    1638:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	9e 83       	std	Y+6, r25	; 0x06
    1642:	8d 83       	std	Y+5, r24	; 0x05
    1644:	0f c0       	rjmp	.+30     	; 0x1664 <LCD_sendCommand+0x39a>
    1646:	80 e9       	ldi	r24, 0x90	; 144
    1648:	91 e0       	ldi	r25, 0x01	; 1
    164a:	9c 83       	std	Y+4, r25	; 0x04
    164c:	8b 83       	std	Y+3, r24	; 0x03
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	9c 81       	ldd	r25, Y+4	; 0x04
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	f1 f7       	brne	.-4      	; 0x1652 <LCD_sendCommand+0x388>
    1656:	9c 83       	std	Y+4, r25	; 0x04
    1658:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165a:	8d 81       	ldd	r24, Y+5	; 0x05
    165c:	9e 81       	ldd	r25, Y+6	; 0x06
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	9e 83       	std	Y+6, r25	; 0x06
    1662:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	9e 81       	ldd	r25, Y+6	; 0x06
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	69 f7       	brne	.-38     	; 0x1646 <LCD_sendCommand+0x37c>
    166c:	14 c0       	rjmp	.+40     	; 0x1696 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    166e:	6f 81       	ldd	r22, Y+7	; 0x07
    1670:	78 85       	ldd	r23, Y+8	; 0x08
    1672:	89 85       	ldd	r24, Y+9	; 0x09
    1674:	9a 85       	ldd	r25, Y+10	; 0x0a
    1676:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	9e 83       	std	Y+6, r25	; 0x06
    1680:	8d 83       	std	Y+5, r24	; 0x05
    1682:	8d 81       	ldd	r24, Y+5	; 0x05
    1684:	9e 81       	ldd	r25, Y+6	; 0x06
    1686:	9a 83       	std	Y+2, r25	; 0x02
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	9a 81       	ldd	r25, Y+2	; 0x02
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <LCD_sendCommand+0x3c4>
    1692:	9a 83       	std	Y+2, r25	; 0x02
    1694:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(LCD_SETUP_TIME_DELAY);
}
    1696:	e9 96       	adiw	r28, 0x39	; 57
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	cf 91       	pop	r28
    16a4:	df 91       	pop	r29
    16a6:	08 95       	ret

000016a8 <LCD_sendData>:
 * [Description]   : Display a specific data on the LCD data lines.
 * [Arguments]     : <a_data>      -> Indicates to the required data.
 * [return]        : The function returns void.
 ====================================================================================================================*/
static void LCD_sendData(uint8 a_data)
{
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	e9 97       	sbiw	r28, 0x39	; 57
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	89 af       	std	Y+57, r24	; 0x39
	DIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,DIO_HIGH_PIN);
    16be:	82 e0       	ldi	r24, 0x02	; 2
    16c0:	60 e0       	ldi	r22, 0x00	; 0
    16c2:	41 e0       	ldi	r20, 0x01	; 1
    16c4:	0e 94 91 06 	call	0xd22	; 0xd22 <DIO_writePin>
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	a0 e8       	ldi	r26, 0x80	; 128
    16ce:	bf e3       	ldi	r27, 0x3F	; 63
    16d0:	8d ab       	std	Y+53, r24	; 0x35
    16d2:	9e ab       	std	Y+54, r25	; 0x36
    16d4:	af ab       	std	Y+55, r26	; 0x37
    16d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d8:	6d a9       	ldd	r22, Y+53	; 0x35
    16da:	7e a9       	ldd	r23, Y+54	; 0x36
    16dc:	8f a9       	ldd	r24, Y+55	; 0x37
    16de:	98 ad       	ldd	r25, Y+56	; 0x38
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	4a e7       	ldi	r20, 0x7A	; 122
    16e6:	55 e4       	ldi	r21, 0x45	; 69
    16e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	89 ab       	std	Y+49, r24	; 0x31
    16f2:	9a ab       	std	Y+50, r25	; 0x32
    16f4:	ab ab       	std	Y+51, r26	; 0x33
    16f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16f8:	69 a9       	ldd	r22, Y+49	; 0x31
    16fa:	7a a9       	ldd	r23, Y+50	; 0x32
    16fc:	8b a9       	ldd	r24, Y+51	; 0x33
    16fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e8       	ldi	r20, 0x80	; 128
    1706:	5f e3       	ldi	r21, 0x3F	; 63
    1708:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    170c:	88 23       	and	r24, r24
    170e:	2c f4       	brge	.+10     	; 0x171a <LCD_sendData+0x72>
		__ticks = 1;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	98 ab       	std	Y+48, r25	; 0x30
    1716:	8f a7       	std	Y+47, r24	; 0x2f
    1718:	3f c0       	rjmp	.+126    	; 0x1798 <LCD_sendData+0xf0>
	else if (__tmp > 65535)
    171a:	69 a9       	ldd	r22, Y+49	; 0x31
    171c:	7a a9       	ldd	r23, Y+50	; 0x32
    171e:	8b a9       	ldd	r24, Y+51	; 0x33
    1720:	9c a9       	ldd	r25, Y+52	; 0x34
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	3f ef       	ldi	r19, 0xFF	; 255
    1726:	4f e7       	ldi	r20, 0x7F	; 127
    1728:	57 e4       	ldi	r21, 0x47	; 71
    172a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    172e:	18 16       	cp	r1, r24
    1730:	4c f5       	brge	.+82     	; 0x1784 <LCD_sendData+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1732:	6d a9       	ldd	r22, Y+53	; 0x35
    1734:	7e a9       	ldd	r23, Y+54	; 0x36
    1736:	8f a9       	ldd	r24, Y+55	; 0x37
    1738:	98 ad       	ldd	r25, Y+56	; 0x38
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e2       	ldi	r20, 0x20	; 32
    1740:	51 e4       	ldi	r21, 0x41	; 65
    1742:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	bc 01       	movw	r22, r24
    174c:	cd 01       	movw	r24, r26
    174e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	98 ab       	std	Y+48, r25	; 0x30
    1758:	8f a7       	std	Y+47, r24	; 0x2f
    175a:	0f c0       	rjmp	.+30     	; 0x177a <LCD_sendData+0xd2>
    175c:	80 e9       	ldi	r24, 0x90	; 144
    175e:	91 e0       	ldi	r25, 0x01	; 1
    1760:	9e a7       	std	Y+46, r25	; 0x2e
    1762:	8d a7       	std	Y+45, r24	; 0x2d
    1764:	8d a5       	ldd	r24, Y+45	; 0x2d
    1766:	9e a5       	ldd	r25, Y+46	; 0x2e
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	f1 f7       	brne	.-4      	; 0x1768 <LCD_sendData+0xc0>
    176c:	9e a7       	std	Y+46, r25	; 0x2e
    176e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1770:	8f a5       	ldd	r24, Y+47	; 0x2f
    1772:	98 a9       	ldd	r25, Y+48	; 0x30
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	98 ab       	std	Y+48, r25	; 0x30
    1778:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177a:	8f a5       	ldd	r24, Y+47	; 0x2f
    177c:	98 a9       	ldd	r25, Y+48	; 0x30
    177e:	00 97       	sbiw	r24, 0x00	; 0
    1780:	69 f7       	brne	.-38     	; 0x175c <LCD_sendData+0xb4>
    1782:	14 c0       	rjmp	.+40     	; 0x17ac <LCD_sendData+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1784:	69 a9       	ldd	r22, Y+49	; 0x31
    1786:	7a a9       	ldd	r23, Y+50	; 0x32
    1788:	8b a9       	ldd	r24, Y+51	; 0x33
    178a:	9c a9       	ldd	r25, Y+52	; 0x34
    178c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	98 ab       	std	Y+48, r25	; 0x30
    1796:	8f a7       	std	Y+47, r24	; 0x2f
    1798:	8f a5       	ldd	r24, Y+47	; 0x2f
    179a:	98 a9       	ldd	r25, Y+48	; 0x30
    179c:	9c a7       	std	Y+44, r25	; 0x2c
    179e:	8b a7       	std	Y+43, r24	; 0x2b
    17a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    17a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	f1 f7       	brne	.-4      	; 0x17a4 <LCD_sendData+0xfc>
    17a8:	9c a7       	std	Y+44, r25	; 0x2c
    17aa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(LCD_SETUP_TIME_DELAY);
	DIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN_ID,DIO_HIGH_PIN);
    17ac:	82 e0       	ldi	r24, 0x02	; 2
    17ae:	61 e0       	ldi	r22, 0x01	; 1
    17b0:	41 e0       	ldi	r20, 0x01	; 1
    17b2:	0e 94 91 06 	call	0xd22	; 0xd22 <DIO_writePin>
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	a0 e8       	ldi	r26, 0x80	; 128
    17bc:	bf e3       	ldi	r27, 0x3F	; 63
    17be:	8f a3       	std	Y+39, r24	; 0x27
    17c0:	98 a7       	std	Y+40, r25	; 0x28
    17c2:	a9 a7       	std	Y+41, r26	; 0x29
    17c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c6:	6f a1       	ldd	r22, Y+39	; 0x27
    17c8:	78 a5       	ldd	r23, Y+40	; 0x28
    17ca:	89 a5       	ldd	r24, Y+41	; 0x29
    17cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	4a e7       	ldi	r20, 0x7A	; 122
    17d4:	55 e4       	ldi	r21, 0x45	; 69
    17d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	8b a3       	std	Y+35, r24	; 0x23
    17e0:	9c a3       	std	Y+36, r25	; 0x24
    17e2:	ad a3       	std	Y+37, r26	; 0x25
    17e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17e6:	6b a1       	ldd	r22, Y+35	; 0x23
    17e8:	7c a1       	ldd	r23, Y+36	; 0x24
    17ea:	8d a1       	ldd	r24, Y+37	; 0x25
    17ec:	9e a1       	ldd	r25, Y+38	; 0x26
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 e8       	ldi	r20, 0x80	; 128
    17f4:	5f e3       	ldi	r21, 0x3F	; 63
    17f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17fa:	88 23       	and	r24, r24
    17fc:	2c f4       	brge	.+10     	; 0x1808 <LCD_sendData+0x160>
		__ticks = 1;
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	9a a3       	std	Y+34, r25	; 0x22
    1804:	89 a3       	std	Y+33, r24	; 0x21
    1806:	3f c0       	rjmp	.+126    	; 0x1886 <LCD_sendData+0x1de>
	else if (__tmp > 65535)
    1808:	6b a1       	ldd	r22, Y+35	; 0x23
    180a:	7c a1       	ldd	r23, Y+36	; 0x24
    180c:	8d a1       	ldd	r24, Y+37	; 0x25
    180e:	9e a1       	ldd	r25, Y+38	; 0x26
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	3f ef       	ldi	r19, 0xFF	; 255
    1814:	4f e7       	ldi	r20, 0x7F	; 127
    1816:	57 e4       	ldi	r21, 0x47	; 71
    1818:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    181c:	18 16       	cp	r1, r24
    181e:	4c f5       	brge	.+82     	; 0x1872 <LCD_sendData+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1820:	6f a1       	ldd	r22, Y+39	; 0x27
    1822:	78 a5       	ldd	r23, Y+40	; 0x28
    1824:	89 a5       	ldd	r24, Y+41	; 0x29
    1826:	9a a5       	ldd	r25, Y+42	; 0x2a
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 e2       	ldi	r20, 0x20	; 32
    182e:	51 e4       	ldi	r21, 0x41	; 65
    1830:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	bc 01       	movw	r22, r24
    183a:	cd 01       	movw	r24, r26
    183c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	9a a3       	std	Y+34, r25	; 0x22
    1846:	89 a3       	std	Y+33, r24	; 0x21
    1848:	0f c0       	rjmp	.+30     	; 0x1868 <LCD_sendData+0x1c0>
    184a:	80 e9       	ldi	r24, 0x90	; 144
    184c:	91 e0       	ldi	r25, 0x01	; 1
    184e:	98 a3       	std	Y+32, r25	; 0x20
    1850:	8f 8f       	std	Y+31, r24	; 0x1f
    1852:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1854:	98 a1       	ldd	r25, Y+32	; 0x20
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	f1 f7       	brne	.-4      	; 0x1856 <LCD_sendData+0x1ae>
    185a:	98 a3       	std	Y+32, r25	; 0x20
    185c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185e:	89 a1       	ldd	r24, Y+33	; 0x21
    1860:	9a a1       	ldd	r25, Y+34	; 0x22
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	9a a3       	std	Y+34, r25	; 0x22
    1866:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1868:	89 a1       	ldd	r24, Y+33	; 0x21
    186a:	9a a1       	ldd	r25, Y+34	; 0x22
    186c:	00 97       	sbiw	r24, 0x00	; 0
    186e:	69 f7       	brne	.-38     	; 0x184a <LCD_sendData+0x1a2>
    1870:	14 c0       	rjmp	.+40     	; 0x189a <LCD_sendData+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1872:	6b a1       	ldd	r22, Y+35	; 0x23
    1874:	7c a1       	ldd	r23, Y+36	; 0x24
    1876:	8d a1       	ldd	r24, Y+37	; 0x25
    1878:	9e a1       	ldd	r25, Y+38	; 0x26
    187a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	9a a3       	std	Y+34, r25	; 0x22
    1884:	89 a3       	std	Y+33, r24	; 0x21
    1886:	89 a1       	ldd	r24, Y+33	; 0x21
    1888:	9a a1       	ldd	r25, Y+34	; 0x22
    188a:	9e 8f       	std	Y+30, r25	; 0x1e
    188c:	8d 8f       	std	Y+29, r24	; 0x1d
    188e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1890:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <LCD_sendData+0x1ea>
    1896:	9e 8f       	std	Y+30, r25	; 0x1e
    1898:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN6_ID,GET_BIT(a_data,2));
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN7_ID,GET_BIT(a_data,3));

	#elif(LCD_DATA_BIT_MODE == LCD_8_BIT_MODE)

	DIO_writePort(LCD_DATA_PORT_ID,a_data);
    189a:	83 e0       	ldi	r24, 0x03	; 3
    189c:	69 ad       	ldd	r22, Y+57	; 0x39
    189e:	0e 94 64 07 	call	0xec8	; 0xec8 <DIO_writePort>
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	a0 e8       	ldi	r26, 0x80	; 128
    18a8:	bf e3       	ldi	r27, 0x3F	; 63
    18aa:	89 8f       	std	Y+25, r24	; 0x19
    18ac:	9a 8f       	std	Y+26, r25	; 0x1a
    18ae:	ab 8f       	std	Y+27, r26	; 0x1b
    18b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b2:	69 8d       	ldd	r22, Y+25	; 0x19
    18b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	4a e7       	ldi	r20, 0x7A	; 122
    18c0:	55 e4       	ldi	r21, 0x45	; 69
    18c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	8d 8b       	std	Y+21, r24	; 0x15
    18cc:	9e 8b       	std	Y+22, r25	; 0x16
    18ce:	af 8b       	std	Y+23, r26	; 0x17
    18d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18d2:	6d 89       	ldd	r22, Y+21	; 0x15
    18d4:	7e 89       	ldd	r23, Y+22	; 0x16
    18d6:	8f 89       	ldd	r24, Y+23	; 0x17
    18d8:	98 8d       	ldd	r25, Y+24	; 0x18
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e8       	ldi	r20, 0x80	; 128
    18e0:	5f e3       	ldi	r21, 0x3F	; 63
    18e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18e6:	88 23       	and	r24, r24
    18e8:	2c f4       	brge	.+10     	; 0x18f4 <LCD_sendData+0x24c>
		__ticks = 1;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	9c 8b       	std	Y+20, r25	; 0x14
    18f0:	8b 8b       	std	Y+19, r24	; 0x13
    18f2:	3f c0       	rjmp	.+126    	; 0x1972 <LCD_sendData+0x2ca>
	else if (__tmp > 65535)
    18f4:	6d 89       	ldd	r22, Y+21	; 0x15
    18f6:	7e 89       	ldd	r23, Y+22	; 0x16
    18f8:	8f 89       	ldd	r24, Y+23	; 0x17
    18fa:	98 8d       	ldd	r25, Y+24	; 0x18
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	3f ef       	ldi	r19, 0xFF	; 255
    1900:	4f e7       	ldi	r20, 0x7F	; 127
    1902:	57 e4       	ldi	r21, 0x47	; 71
    1904:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1908:	18 16       	cp	r1, r24
    190a:	4c f5       	brge	.+82     	; 0x195e <LCD_sendData+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190c:	69 8d       	ldd	r22, Y+25	; 0x19
    190e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1910:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1912:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e2       	ldi	r20, 0x20	; 32
    191a:	51 e4       	ldi	r21, 0x41	; 65
    191c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	bc 01       	movw	r22, r24
    1926:	cd 01       	movw	r24, r26
    1928:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	9c 8b       	std	Y+20, r25	; 0x14
    1932:	8b 8b       	std	Y+19, r24	; 0x13
    1934:	0f c0       	rjmp	.+30     	; 0x1954 <LCD_sendData+0x2ac>
    1936:	80 e9       	ldi	r24, 0x90	; 144
    1938:	91 e0       	ldi	r25, 0x01	; 1
    193a:	9a 8b       	std	Y+18, r25	; 0x12
    193c:	89 8b       	std	Y+17, r24	; 0x11
    193e:	89 89       	ldd	r24, Y+17	; 0x11
    1940:	9a 89       	ldd	r25, Y+18	; 0x12
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <LCD_sendData+0x29a>
    1946:	9a 8b       	std	Y+18, r25	; 0x12
    1948:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194a:	8b 89       	ldd	r24, Y+19	; 0x13
    194c:	9c 89       	ldd	r25, Y+20	; 0x14
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	9c 8b       	std	Y+20, r25	; 0x14
    1952:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1954:	8b 89       	ldd	r24, Y+19	; 0x13
    1956:	9c 89       	ldd	r25, Y+20	; 0x14
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	69 f7       	brne	.-38     	; 0x1936 <LCD_sendData+0x28e>
    195c:	14 c0       	rjmp	.+40     	; 0x1986 <LCD_sendData+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195e:	6d 89       	ldd	r22, Y+21	; 0x15
    1960:	7e 89       	ldd	r23, Y+22	; 0x16
    1962:	8f 89       	ldd	r24, Y+23	; 0x17
    1964:	98 8d       	ldd	r25, Y+24	; 0x18
    1966:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	9c 8b       	std	Y+20, r25	; 0x14
    1970:	8b 8b       	std	Y+19, r24	; 0x13
    1972:	8b 89       	ldd	r24, Y+19	; 0x13
    1974:	9c 89       	ldd	r25, Y+20	; 0x14
    1976:	98 8b       	std	Y+16, r25	; 0x10
    1978:	8f 87       	std	Y+15, r24	; 0x0f
    197a:	8f 85       	ldd	r24, Y+15	; 0x0f
    197c:	98 89       	ldd	r25, Y+16	; 0x10
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <LCD_sendData+0x2d6>
    1982:	98 8b       	std	Y+16, r25	; 0x10
    1984:	8f 87       	std	Y+15, r24	; 0x0f

	#endif

    _delay_ms(LCD_SETUP_TIME_DELAY);
    DIO_writePin(LCD_EN_PORT_ID,LCD_EN_PIN_ID,DIO_LOW_PIN);
    1986:	82 e0       	ldi	r24, 0x02	; 2
    1988:	61 e0       	ldi	r22, 0x01	; 1
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	0e 94 91 06 	call	0xd22	; 0xd22 <DIO_writePin>
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a0 e8       	ldi	r26, 0x80	; 128
    1996:	bf e3       	ldi	r27, 0x3F	; 63
    1998:	8b 87       	std	Y+11, r24	; 0x0b
    199a:	9c 87       	std	Y+12, r25	; 0x0c
    199c:	ad 87       	std	Y+13, r26	; 0x0d
    199e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	4a e7       	ldi	r20, 0x7A	; 122
    19ae:	55 e4       	ldi	r21, 0x45	; 69
    19b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	8f 83       	std	Y+7, r24	; 0x07
    19ba:	98 87       	std	Y+8, r25	; 0x08
    19bc:	a9 87       	std	Y+9, r26	; 0x09
    19be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19c0:	6f 81       	ldd	r22, Y+7	; 0x07
    19c2:	78 85       	ldd	r23, Y+8	; 0x08
    19c4:	89 85       	ldd	r24, Y+9	; 0x09
    19c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e8       	ldi	r20, 0x80	; 128
    19ce:	5f e3       	ldi	r21, 0x3F	; 63
    19d0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19d4:	88 23       	and	r24, r24
    19d6:	2c f4       	brge	.+10     	; 0x19e2 <LCD_sendData+0x33a>
		__ticks = 1;
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	9e 83       	std	Y+6, r25	; 0x06
    19de:	8d 83       	std	Y+5, r24	; 0x05
    19e0:	3f c0       	rjmp	.+126    	; 0x1a60 <LCD_sendData+0x3b8>
	else if (__tmp > 65535)
    19e2:	6f 81       	ldd	r22, Y+7	; 0x07
    19e4:	78 85       	ldd	r23, Y+8	; 0x08
    19e6:	89 85       	ldd	r24, Y+9	; 0x09
    19e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	3f ef       	ldi	r19, 0xFF	; 255
    19ee:	4f e7       	ldi	r20, 0x7F	; 127
    19f0:	57 e4       	ldi	r21, 0x47	; 71
    19f2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19f6:	18 16       	cp	r1, r24
    19f8:	4c f5       	brge	.+82     	; 0x1a4c <LCD_sendData+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    19fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e2       	ldi	r20, 0x20	; 32
    1a08:	51 e4       	ldi	r21, 0x41	; 65
    1a0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	bc 01       	movw	r22, r24
    1a14:	cd 01       	movw	r24, r26
    1a16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	9e 83       	std	Y+6, r25	; 0x06
    1a20:	8d 83       	std	Y+5, r24	; 0x05
    1a22:	0f c0       	rjmp	.+30     	; 0x1a42 <LCD_sendData+0x39a>
    1a24:	80 e9       	ldi	r24, 0x90	; 144
    1a26:	91 e0       	ldi	r25, 0x01	; 1
    1a28:	9c 83       	std	Y+4, r25	; 0x04
    1a2a:	8b 83       	std	Y+3, r24	; 0x03
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <LCD_sendData+0x388>
    1a34:	9c 83       	std	Y+4, r25	; 0x04
    1a36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a38:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	9e 83       	std	Y+6, r25	; 0x06
    1a40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a42:	8d 81       	ldd	r24, Y+5	; 0x05
    1a44:	9e 81       	ldd	r25, Y+6	; 0x06
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	69 f7       	brne	.-38     	; 0x1a24 <LCD_sendData+0x37c>
    1a4a:	14 c0       	rjmp	.+40     	; 0x1a74 <LCD_sendData+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4e:	78 85       	ldd	r23, Y+8	; 0x08
    1a50:	89 85       	ldd	r24, Y+9	; 0x09
    1a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	9e 83       	std	Y+6, r25	; 0x06
    1a5e:	8d 83       	std	Y+5, r24	; 0x05
    1a60:	8d 81       	ldd	r24, Y+5	; 0x05
    1a62:	9e 81       	ldd	r25, Y+6	; 0x06
    1a64:	9a 83       	std	Y+2, r25	; 0x02
    1a66:	89 83       	std	Y+1, r24	; 0x01
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <LCD_sendData+0x3c4>
    1a70:	9a 83       	std	Y+2, r25	; 0x02
    1a72:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(LCD_SETUP_TIME_DELAY);
}
    1a74:	e9 96       	adiw	r28, 0x39	; 57
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <LCD_moveCursor>:
 * [Arguments]     : <a_row>      -> Indicates to the row number of the required position.
 *                   <a_column>   -> Indicates to the column number of the required position.
 * [return]        : The function returns void.
 ====================================================================================================================*/
void LCD_moveCursor(LCD_rowID a_row, LCD_columnID a_column)
{
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	00 d0       	rcall	.+0      	; 0x1a8c <LCD_moveCursor+0x6>
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <LCD_moveCursor+0x8>
    1a8e:	0f 92       	push	r0
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	8a 83       	std	Y+2, r24	; 0x02
    1a96:	6b 83       	std	Y+3, r22	; 0x03
		break;
	}

	#elif(LCD_NUM_OF_COLUMNS == LCD_20_COLUMNS)

	uint8 LOC_memoryAddress = LCD_20_COLUMNS_1ST_ROW_BASE_ADDRESS;
    1a98:	19 82       	std	Y+1, r1	; 0x01

	switch (a_row)
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	3d 83       	std	Y+5, r19	; 0x05
    1aa2:	2c 83       	std	Y+4, r18	; 0x04
    1aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa6:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa8:	81 30       	cpi	r24, 0x01	; 1
    1aaa:	91 05       	cpc	r25, r1
    1aac:	c1 f0       	breq	.+48     	; 0x1ade <LCD_moveCursor+0x58>
    1aae:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab2:	22 30       	cpi	r18, 0x02	; 2
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	2c f4       	brge	.+10     	; 0x1ac2 <LCD_moveCursor+0x3c>
    1ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aba:	9d 81       	ldd	r25, Y+5	; 0x05
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	61 f0       	breq	.+24     	; 0x1ad8 <LCD_moveCursor+0x52>
    1ac0:	1a c0       	rjmp	.+52     	; 0x1af6 <LCD_moveCursor+0x70>
    1ac2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac6:	22 30       	cpi	r18, 0x02	; 2
    1ac8:	31 05       	cpc	r19, r1
    1aca:	69 f0       	breq	.+26     	; 0x1ae6 <LCD_moveCursor+0x60>
    1acc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ace:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad0:	83 30       	cpi	r24, 0x03	; 3
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	61 f0       	breq	.+24     	; 0x1aee <LCD_moveCursor+0x68>
    1ad6:	0f c0       	rjmp	.+30     	; 0x1af6 <LCD_moveCursor+0x70>
	{
	case LCD_ROW_1_ID:
		LOC_memoryAddress = (LCD_20_COLUMNS_1ST_ROW_BASE_ADDRESS + a_column);
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	0d c0       	rjmp	.+26     	; 0x1af8 <LCD_moveCursor+0x72>
		break;

	case LCD_ROW_2_ID:
		LOC_memoryAddress = (LCD_20_COLUMNS_2ND_ROW_BASE_ADDRESS + a_column);
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	80 5c       	subi	r24, 0xC0	; 192
    1ae2:	89 83       	std	Y+1, r24	; 0x01
    1ae4:	09 c0       	rjmp	.+18     	; 0x1af8 <LCD_moveCursor+0x72>
		break;

	case LCD_ROW_3_ID:
		LOC_memoryAddress = (LCD_20_COLUMNS_3RD_ROW_BASE_ADDRESS + a_column);
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	8c 5e       	subi	r24, 0xEC	; 236
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	05 c0       	rjmp	.+10     	; 0x1af8 <LCD_moveCursor+0x72>
		break;

	case LCD_ROW_4_ID:
		LOC_memoryAddress = (LCD_20_COLUMNS_4TH_ROW_BASE_ADDRESS + a_column);
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	8c 5a       	subi	r24, 0xAC	; 172
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	01 c0       	rjmp	.+2      	; 0x1af8 <LCD_moveCursor+0x72>
		break;

	default:
		LOC_memoryAddress = LCD_20_COLUMNS_1ST_ROW_BASE_ADDRESS;
    1af6:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	#endif

	LCD_sendCommand(LCD_MOVE_CURSOR_COMMAND(LOC_memoryAddress));
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	80 68       	ori	r24, 0x80	; 128
    1afc:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_sendCommand>
}
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <LCD_displayCharacter>:
 * [Description]   : Display a specific character on the LCD at the cursor position.
 * [Arguments]     : <a_charachter>      -> Indicates to the required character.
 * [return]        : The function returns void.
 ====================================================================================================================*/
void LCD_displayCharacter(uint8 a_charachter)
{
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	0f 92       	push	r0
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendData(a_charachter);
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_sendData>
}
    1b22:	0f 90       	pop	r0
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	08 95       	ret

00001b2a <LCD_displayCharacterRowColumn>:
 *                   <a_row>         -> Indicates to the row number of the required position.
 *                   <a_column>      -> Indicates to the column number of the required position.
 * [return]        : The function returns void.
 ====================================================================================================================*/
void LCD_displayCharacterRowColumn(uint8 a_charachter, uint8 a_row, uint8 a_column)
{
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	00 d0       	rcall	.+0      	; 0x1b30 <LCD_displayCharacterRowColumn+0x6>
    1b30:	0f 92       	push	r0
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	89 83       	std	Y+1, r24	; 0x01
    1b38:	6a 83       	std	Y+2, r22	; 0x02
    1b3a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(a_row,a_column);
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	6b 81       	ldd	r22, Y+3	; 0x03
    1b40:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
	LCD_sendData(a_charachter);
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_sendData>
}
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <LCD_displayString>:
 * [Description]   : Display a specific string on the LCD at the cursor position.
 * [Arguments]     : <a_ptr2string>      -> Pointer points to the required string.
 * [return]        : The function returns void.
 ====================================================================================================================*/
void LCD_displayString(uint8* a_ptr2string)
{
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	00 d0       	rcall	.+0      	; 0x1b5c <LCD_displayString+0x6>
    1b5c:	0f 92       	push	r0
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	9b 83       	std	Y+3, r25	; 0x03
    1b64:	8a 83       	std	Y+2, r24	; 0x02
	if(a_ptr2string != NULL_PTR)
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6a:	00 97       	sbiw	r24, 0x00	; 0
    1b6c:	d9 f0       	breq	.+54     	; 0x1ba4 <LCD_displayString+0x4e>
	{
		for(uint8 counter = 0; *(a_ptr2string + counter) != '\0'; counter++)
    1b6e:	19 82       	std	Y+1, r1	; 0x01
    1b70:	0e c0       	rjmp	.+28     	; 0x1b8e <LCD_displayString+0x38>
		{
			LCD_displayCharacter(*(a_ptr2string + counter));
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	e2 0f       	add	r30, r18
    1b80:	f3 1f       	adc	r31, r19
    1b82:	80 81       	ld	r24, Z
    1b84:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
 ====================================================================================================================*/
void LCD_displayString(uint8* a_ptr2string)
{
	if(a_ptr2string != NULL_PTR)
	{
		for(uint8 counter = 0; *(a_ptr2string + counter) != '\0'; counter++)
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	8f 5f       	subi	r24, 0xFF	; 255
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	9b 81       	ldd	r25, Y+3	; 0x03
    1b98:	fc 01       	movw	r30, r24
    1b9a:	e2 0f       	add	r30, r18
    1b9c:	f3 1f       	adc	r31, r19
    1b9e:	80 81       	ld	r24, Z
    1ba0:	88 23       	and	r24, r24
    1ba2:	39 f7       	brne	.-50     	; 0x1b72 <LCD_displayString+0x1c>
	}
	else
	{
		/* Do Nothing. */
	}
}
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	08 95       	ret

00001bb0 <LCD_displayStringRowColumn>:
 *                   <a_row>         -> Indicates to the row number of the required position.
 *                   <a_column>      -> Indicates to the column number of the required position.
 * [return]        : The function returns void.
 ====================================================================================================================*/
void LCD_displayStringRowColumn(uint8* a_ptr2string, uint8 a_row, uint8 a_column)
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <LCD_displayStringRowColumn+0x6>
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <LCD_displayStringRowColumn+0x8>
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	9a 83       	std	Y+2, r25	; 0x02
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	6b 83       	std	Y+3, r22	; 0x03
    1bc2:	4c 83       	std	Y+4, r20	; 0x04
	LCD_moveCursor(a_row,a_column);
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	6c 81       	ldd	r22, Y+4	; 0x04
    1bc8:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
	LCD_displayString(a_ptr2string);
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd0:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_displayString>
}
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <LCD_displayInteger>:
 * [Description]   : Convert a specific integer value to string and display it on the LCD.
 * [Arguments]     : <a_integerNumber>      -> Indicates to the required integer number.
 * [return]        : The function returns void.
 ====================================================================================================================*/
void LCD_displayInteger(uint32 a_integerNumber)
{
    1be2:	ef 92       	push	r14
    1be4:	ff 92       	push	r15
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	df 93       	push	r29
    1bec:	cf 93       	push	r28
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	28 97       	sbiw	r28, 0x08	; 8
    1bf4:	0f b6       	in	r0, 0x3f	; 63
    1bf6:	f8 94       	cli
    1bf8:	de bf       	out	0x3e, r29	; 62
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	cd bf       	out	0x3d, r28	; 61
    1bfe:	6d 83       	std	Y+5, r22	; 0x05
    1c00:	7e 83       	std	Y+6, r23	; 0x06
    1c02:	8f 83       	std	Y+7, r24	; 0x07
    1c04:	98 87       	std	Y+8, r25	; 0x08
	if(a_integerNumber == 0)
    1c06:	8d 81       	ldd	r24, Y+5	; 0x05
    1c08:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0a:	af 81       	ldd	r26, Y+7	; 0x07
    1c0c:	b8 85       	ldd	r27, Y+8	; 0x08
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	a1 05       	cpc	r26, r1
    1c12:	b1 05       	cpc	r27, r1
    1c14:	21 f4       	brne	.+8      	; 0x1c1e <LCD_displayInteger+0x3c>
	{
		LCD_displayCharacter('0');
    1c16:	80 e3       	ldi	r24, 0x30	; 48
    1c18:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
    1c1c:	74 c0       	rjmp	.+232    	; 0x1d06 <LCD_displayInteger+0x124>
	}

	else
	{
		uint32 LOC_reversedNumber = 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	a0 e0       	ldi	r26, 0x00	; 0
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	9a 83       	std	Y+2, r25	; 0x02
    1c2a:	ab 83       	std	Y+3, r26	; 0x03
    1c2c:	bc 83       	std	Y+4, r27	; 0x04
    1c2e:	36 c0       	rjmp	.+108    	; 0x1c9c <LCD_displayInteger+0xba>
		
		while(a_integerNumber != 0)
		{
			LOC_reversedNumber = (LOC_reversedNumber * 10) + (a_integerNumber % 10);
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	9a 81       	ldd	r25, Y+2	; 0x02
    1c34:	ab 81       	ldd	r26, Y+3	; 0x03
    1c36:	bc 81       	ldd	r27, Y+4	; 0x04
    1c38:	2a e0       	ldi	r18, 0x0A	; 10
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	40 e0       	ldi	r20, 0x00	; 0
    1c3e:	50 e0       	ldi	r21, 0x00	; 0
    1c40:	bc 01       	movw	r22, r24
    1c42:	cd 01       	movw	r24, r26
    1c44:	0e 94 95 18 	call	0x312a	; 0x312a <__mulsi3>
    1c48:	7b 01       	movw	r14, r22
    1c4a:	8c 01       	movw	r16, r24
    1c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c50:	af 81       	ldd	r26, Y+7	; 0x07
    1c52:	b8 85       	ldd	r27, Y+8	; 0x08
    1c54:	2a e0       	ldi	r18, 0x0A	; 10
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e0       	ldi	r20, 0x00	; 0
    1c5a:	50 e0       	ldi	r21, 0x00	; 0
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	0e 94 c0 18 	call	0x3180	; 0x3180 <__udivmodsi4>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	8e 0d       	add	r24, r14
    1c6a:	9f 1d       	adc	r25, r15
    1c6c:	a0 1f       	adc	r26, r16
    1c6e:	b1 1f       	adc	r27, r17
    1c70:	89 83       	std	Y+1, r24	; 0x01
    1c72:	9a 83       	std	Y+2, r25	; 0x02
    1c74:	ab 83       	std	Y+3, r26	; 0x03
    1c76:	bc 83       	std	Y+4, r27	; 0x04
			a_integerNumber /= 10;
    1c78:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7c:	af 81       	ldd	r26, Y+7	; 0x07
    1c7e:	b8 85       	ldd	r27, Y+8	; 0x08
    1c80:	2a e0       	ldi	r18, 0x0A	; 10
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e0       	ldi	r20, 0x00	; 0
    1c86:	50 e0       	ldi	r21, 0x00	; 0
    1c88:	bc 01       	movw	r22, r24
    1c8a:	cd 01       	movw	r24, r26
    1c8c:	0e 94 c0 18 	call	0x3180	; 0x3180 <__udivmodsi4>
    1c90:	da 01       	movw	r26, r20
    1c92:	c9 01       	movw	r24, r18
    1c94:	8d 83       	std	Y+5, r24	; 0x05
    1c96:	9e 83       	std	Y+6, r25	; 0x06
    1c98:	af 83       	std	Y+7, r26	; 0x07
    1c9a:	b8 87       	std	Y+8, r27	; 0x08

	else
	{
		uint32 LOC_reversedNumber = 1;
		
		while(a_integerNumber != 0)
    1c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca0:	af 81       	ldd	r26, Y+7	; 0x07
    1ca2:	b8 85       	ldd	r27, Y+8	; 0x08
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	a1 05       	cpc	r26, r1
    1ca8:	b1 05       	cpc	r27, r1
    1caa:	11 f6       	brne	.-124    	; 0x1c30 <LCD_displayInteger+0x4e>
    1cac:	23 c0       	rjmp	.+70     	; 0x1cf4 <LCD_displayInteger+0x112>
			a_integerNumber /= 10;
		}

		while(LOC_reversedNumber != 1)
		{
			LCD_displayCharacter((LOC_reversedNumber % 10) + '0');
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb2:	ab 81       	ldd	r26, Y+3	; 0x03
    1cb4:	bc 81       	ldd	r27, Y+4	; 0x04
    1cb6:	2a e0       	ldi	r18, 0x0A	; 10
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	bc 01       	movw	r22, r24
    1cc0:	cd 01       	movw	r24, r26
    1cc2:	0e 94 c0 18 	call	0x3180	; 0x3180 <__udivmodsi4>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	80 5d       	subi	r24, 0xD0	; 208
    1ccc:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
			LOC_reversedNumber /= 10;
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd4:	ab 81       	ldd	r26, Y+3	; 0x03
    1cd6:	bc 81       	ldd	r27, Y+4	; 0x04
    1cd8:	2a e0       	ldi	r18, 0x0A	; 10
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e0       	ldi	r20, 0x00	; 0
    1cde:	50 e0       	ldi	r21, 0x00	; 0
    1ce0:	bc 01       	movw	r22, r24
    1ce2:	cd 01       	movw	r24, r26
    1ce4:	0e 94 c0 18 	call	0x3180	; 0x3180 <__udivmodsi4>
    1ce8:	da 01       	movw	r26, r20
    1cea:	c9 01       	movw	r24, r18
    1cec:	89 83       	std	Y+1, r24	; 0x01
    1cee:	9a 83       	std	Y+2, r25	; 0x02
    1cf0:	ab 83       	std	Y+3, r26	; 0x03
    1cf2:	bc 83       	std	Y+4, r27	; 0x04
		{
			LOC_reversedNumber = (LOC_reversedNumber * 10) + (a_integerNumber % 10);
			a_integerNumber /= 10;
		}

		while(LOC_reversedNumber != 1)
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf8:	ab 81       	ldd	r26, Y+3	; 0x03
    1cfa:	bc 81       	ldd	r27, Y+4	; 0x04
    1cfc:	81 30       	cpi	r24, 0x01	; 1
    1cfe:	91 05       	cpc	r25, r1
    1d00:	a1 05       	cpc	r26, r1
    1d02:	b1 05       	cpc	r27, r1
    1d04:	a1 f6       	brne	.-88     	; 0x1cae <LCD_displayInteger+0xcc>
		{
			LCD_displayCharacter((LOC_reversedNumber % 10) + '0');
			LOC_reversedNumber /= 10;
		}
	}
}
    1d06:	28 96       	adiw	r28, 0x08	; 8
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	cf 91       	pop	r28
    1d14:	df 91       	pop	r29
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	ff 90       	pop	r15
    1d1c:	ef 90       	pop	r14
    1d1e:	08 95       	ret

00001d20 <LCD_displayHEX>:
 * [Description]   : Convert a specific decimal byte to HEX and display this HEX on the LCD.
 * [Arguments]     : <a_decimalNumber>      -> Indicates to the decimal byte.
 * [return]        : The function returns void.
 ====================================================================================================================*/
void LCD_displayHEX(uint8 a_decimalNumber)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <LCD_displayHEX+0x6>
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 LOC_byteNIB = GET_H_NIB(a_decimalNumber);
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	82 95       	swap	r24
    1d30:	8f 70       	andi	r24, 0x0F	; 15
    1d32:	89 83       	std	Y+1, r24	; 0x01

	if(LOC_byteNIB > 9)
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	8a 30       	cpi	r24, 0x0A	; 10
    1d38:	50 f0       	brcs	.+20     	; 0x1d4e <LCD_displayHEX+0x2e>
	{
		LCD_displayCharacter('A' + (LOC_byteNIB % 10));
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a e0       	ldi	r25, 0x0A	; 10
    1d3e:	69 2f       	mov	r22, r25
    1d40:	0e 94 b4 18 	call	0x3168	; 0x3168 <__udivmodqi4>
    1d44:	89 2f       	mov	r24, r25
    1d46:	8f 5b       	subi	r24, 0xBF	; 191
    1d48:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
    1d4c:	04 c0       	rjmp	.+8      	; 0x1d56 <LCD_displayHEX+0x36>
	}

	else
	{
		LCD_displayCharacter('0' + LOC_byteNIB);
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	80 5d       	subi	r24, 0xD0	; 208
    1d52:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
	}

	LOC_byteNIB = GET_L_NIB(a_decimalNumber);
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	8f 70       	andi	r24, 0x0F	; 15
    1d5a:	89 83       	std	Y+1, r24	; 0x01

	if(LOC_byteNIB > 9)
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	8a 30       	cpi	r24, 0x0A	; 10
    1d60:	50 f0       	brcs	.+20     	; 0x1d76 <LCD_displayHEX+0x56>
	{
		LCD_displayCharacter('A' + (LOC_byteNIB % 10));
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	9a e0       	ldi	r25, 0x0A	; 10
    1d66:	69 2f       	mov	r22, r25
    1d68:	0e 94 b4 18 	call	0x3168	; 0x3168 <__udivmodqi4>
    1d6c:	89 2f       	mov	r24, r25
    1d6e:	8f 5b       	subi	r24, 0xBF	; 191
    1d70:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
    1d74:	04 c0       	rjmp	.+8      	; 0x1d7e <LCD_displayHEX+0x5e>
	}

	else
	{
		LCD_displayCharacter('0' + LOC_byteNIB);
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	80 5d       	subi	r24, 0xD0	; 208
    1d7a:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
	}
}
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <LCD_createCustomCharacter>:
 * [Arguments]     : <a_ptr2map>      -> Pointer to the array that holds the character map.
 *                   <a_index>        -> Indicates to the index number in the CGRAM to store the character in.
 * [return]        : The function returns void.
 ====================================================================================================================*/
void LCD_createCustomCharacter(uint8* a_ptr2map, uint8 a_index)
{
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <LCD_createCustomCharacter+0x6>
    1d8e:	00 d0       	rcall	.+0      	; 0x1d90 <LCD_createCustomCharacter+0x8>
    1d90:	0f 92       	push	r0
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
    1d96:	9c 83       	std	Y+4, r25	; 0x04
    1d98:	8b 83       	std	Y+3, r24	; 0x03
    1d9a:	6d 83       	std	Y+5, r22	; 0x05
	uint8 LOC_addressCGRAM = (LCD_CGRAM_BASE_ADDRESS + (a_index * LCD_SPECIAL_PATTERN_NUM_OF_ROWS));
    1d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9e:	88 2f       	mov	r24, r24
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	08 96       	adiw	r24, 0x08	; 8
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	88 0f       	add	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	8a 83       	std	Y+2, r24	; 0x02

	LCD_sendCommand(LOC_addressCGRAM);
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_sendCommand>

	for(uint8 iterator = 0; iterator < LCD_SPECIAL_PATTERN_NUM_OF_ROWS; iterator++)
    1db8:	19 82       	std	Y+1, r1	; 0x01
    1dba:	0e c0       	rjmp	.+28     	; 0x1dd8 <LCD_createCustomCharacter+0x50>
	{
		LCD_sendData(*(a_ptr2map + iterator));
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	e2 0f       	add	r30, r18
    1dca:	f3 1f       	adc	r31, r19
    1dcc:	80 81       	ld	r24, Z
    1dce:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_sendData>
{
	uint8 LOC_addressCGRAM = (LCD_CGRAM_BASE_ADDRESS + (a_index * LCD_SPECIAL_PATTERN_NUM_OF_ROWS));

	LCD_sendCommand(LOC_addressCGRAM);

	for(uint8 iterator = 0; iterator < LCD_SPECIAL_PATTERN_NUM_OF_ROWS; iterator++)
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	8f 5f       	subi	r24, 0xFF	; 255
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	88 30       	cpi	r24, 0x08	; 8
    1ddc:	78 f3       	brcs	.-34     	; 0x1dbc <LCD_createCustomCharacter+0x34>
	{
		LCD_sendData(*(a_ptr2map + iterator));
	}

	LCD_sendCommand(LCD_DDRAM_BASE_ADDRESS);
    1dde:	80 e8       	ldi	r24, 0x80	; 128
    1de0:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_sendCommand>
}
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	08 95       	ret

00001df4 <LCD_clearScreen>:
 * [Description]   : Clear the LCD screen.
 * [Arguments]     : The function takes no arguments.
 * [return]        : The function returns void.
 ====================================================================================================================*/
void LCD_clearScreen(void)
{
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN_COMMAND);
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_sendCommand>
}
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <LCD_returnHome>:
 * [Description]   : Return to the first column in the first row on the LCD screen.
 * [Arguments]     : The function takes no arguments.
 * [return]        : The function returns void.
 ====================================================================================================================*/
void LCD_returnHome(void)
{
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_RETURN_HOME_COMMAND);
    1e10:	82 e0       	ldi	r24, 0x02	; 2
    1e12:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_sendCommand>
}
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <main>:
 * [Arguments]     : <>      -> 
 *                   <>      -> 
 * [return]        : The function returns void.
 ====================================================================================================================*/
int main(void)
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
	InitSystem();
    1e24:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <InitSystem>

	while(1)
	{
		CreateFrame1();
    1e28:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <CreateFrame1>
		MoveFrame1();
    1e2c:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <MoveFrame1>
		CreateFrame2();
    1e30:	0e 94 3f 13 	call	0x267e	; 0x267e <CreateFrame2>
		MoveFrame2();
    1e34:	0e 94 bd 13 	call	0x277a	; 0x277a <MoveFrame2>
		CreateFrame3();
    1e38:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <CreateFrame3>
		MoveFrame3();
    1e3c:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <MoveFrame3>
    1e40:	f3 cf       	rjmp	.-26     	; 0x1e28 <main+0xc>

00001e42 <InitSystem>:
	}
}

void InitSystem(void)
{
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
	PORT_init();
    1e4a:	0e 94 9b 05 	call	0xb36	; 0xb36 <PORT_init>
	LCD_init();
    1e4e:	0e 94 55 09 	call	0x12aa	; 0x12aa <LCD_init>
	CreateStorySympols();
    1e52:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <CreateStorySympols>
}
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	08 95       	ret

00001e5c <CreateStorySympols>:

void CreateStorySympols(void)
{
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	6e 97       	sbiw	r28, 0x1e	; 30
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
	uint8 sympols[3][8] = {{0x0E,0x0E,0x04,0x0E,0x15,0x0E,0x11,0x00},
                           {0x00,0x01,0x03,0x07,0x0F,0x1F,0x1F,0x00},
			               {0x04,0x0E,0x1F,0x1F,0x04,0x04,0x1F,0x00}};
    1e70:	ce 01       	movw	r24, r28
    1e72:	02 96       	adiw	r24, 0x02	; 2
    1e74:	9b 8f       	std	Y+27, r25	; 0x1b
    1e76:	8a 8f       	std	Y+26, r24	; 0x1a
    1e78:	e8 e6       	ldi	r30, 0x68	; 104
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	fd 8f       	std	Y+29, r31	; 0x1d
    1e7e:	ec 8f       	std	Y+28, r30	; 0x1c
    1e80:	f8 e1       	ldi	r31, 0x18	; 24
    1e82:	fe 8f       	std	Y+30, r31	; 0x1e
    1e84:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1e86:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1e88:	00 80       	ld	r0, Z
    1e8a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e8c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e8e:	01 96       	adiw	r24, 0x01	; 1
    1e90:	9d 8f       	std	Y+29, r25	; 0x1d
    1e92:	8c 8f       	std	Y+28, r24	; 0x1c
    1e94:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e96:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1e98:	00 82       	st	Z, r0
    1e9a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e9c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	9b 8f       	std	Y+27, r25	; 0x1b
    1ea2:	8a 8f       	std	Y+26, r24	; 0x1a
    1ea4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ea6:	91 50       	subi	r25, 0x01	; 1
    1ea8:	9e 8f       	std	Y+30, r25	; 0x1e
    1eaa:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1eac:	ee 23       	and	r30, r30
    1eae:	51 f7       	brne	.-44     	; 0x1e84 <CreateStorySympols+0x28>

	for(uint8 iterator = 0; iterator < 3; iterator++)
    1eb0:	19 82       	std	Y+1, r1	; 0x01
    1eb2:	14 c0       	rjmp	.+40     	; 0x1edc <CreateStorySympols+0x80>
	{
		LCD_createCustomCharacter(*(sympols + iterator),iterator);
    1eb4:	9e 01       	movw	r18, r28
    1eb6:	2e 5f       	subi	r18, 0xFE	; 254
    1eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	88 2f       	mov	r24, r24
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	82 0f       	add	r24, r18
    1ece:	93 1f       	adc	r25, r19
    1ed0:	69 81       	ldd	r22, Y+1	; 0x01
    1ed2:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_createCustomCharacter>
{
	uint8 sympols[3][8] = {{0x0E,0x0E,0x04,0x0E,0x15,0x0E,0x11,0x00},
                           {0x00,0x01,0x03,0x07,0x0F,0x1F,0x1F,0x00},
			               {0x04,0x0E,0x1F,0x1F,0x04,0x04,0x1F,0x00}};

	for(uint8 iterator = 0; iterator < 3; iterator++)
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	8f 5f       	subi	r24, 0xFF	; 255
    1eda:	89 83       	std	Y+1, r24	; 0x01
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	83 30       	cpi	r24, 0x03	; 3
    1ee0:	48 f3       	brcs	.-46     	; 0x1eb4 <CreateStorySympols+0x58>
	{
		LCD_createCustomCharacter(*(sympols + iterator),iterator);
	}
}
    1ee2:	6e 96       	adiw	r28, 0x1e	; 30
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <CreateFrame1>:

void CreateFrame1(void)
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	c5 56       	subi	r28, 0x65	; 101
    1efe:	d0 40       	sbci	r29, 0x00	; 0
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	f8 94       	cli
    1f04:	de bf       	out	0x3e, r29	; 62
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	cd bf       	out	0x3d, r28	; 61
	uint8 frame1[][20] = {{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
	                  {'_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'},
					  {'_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'},
					  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}};
    1f0a:	ce 01       	movw	r24, r28
    1f0c:	41 96       	adiw	r24, 0x11	; 17
    1f0e:	a3 96       	adiw	r28, 0x23	; 35
    1f10:	9f af       	std	Y+63, r25	; 0x3f
    1f12:	8e af       	std	Y+62, r24	; 0x3e
    1f14:	a3 97       	sbiw	r28, 0x23	; 35
    1f16:	e0 e8       	ldi	r30, 0x80	; 128
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	a5 96       	adiw	r28, 0x25	; 37
    1f1c:	ff af       	std	Y+63, r31	; 0x3f
    1f1e:	ee af       	std	Y+62, r30	; 0x3e
    1f20:	a5 97       	sbiw	r28, 0x25	; 37
    1f22:	f0 e5       	ldi	r31, 0x50	; 80
    1f24:	a6 96       	adiw	r28, 0x26	; 38
    1f26:	ff af       	std	Y+63, r31	; 0x3f
    1f28:	a6 97       	sbiw	r28, 0x26	; 38
    1f2a:	a5 96       	adiw	r28, 0x25	; 37
    1f2c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f2e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f30:	a5 97       	sbiw	r28, 0x25	; 37
    1f32:	00 80       	ld	r0, Z
    1f34:	a5 96       	adiw	r28, 0x25	; 37
    1f36:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f38:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f3a:	a5 97       	sbiw	r28, 0x25	; 37
    1f3c:	01 96       	adiw	r24, 0x01	; 1
    1f3e:	a5 96       	adiw	r28, 0x25	; 37
    1f40:	9f af       	std	Y+63, r25	; 0x3f
    1f42:	8e af       	std	Y+62, r24	; 0x3e
    1f44:	a5 97       	sbiw	r28, 0x25	; 37
    1f46:	a3 96       	adiw	r28, 0x23	; 35
    1f48:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f4a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f4c:	a3 97       	sbiw	r28, 0x23	; 35
    1f4e:	00 82       	st	Z, r0
    1f50:	a3 96       	adiw	r28, 0x23	; 35
    1f52:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f54:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f56:	a3 97       	sbiw	r28, 0x23	; 35
    1f58:	01 96       	adiw	r24, 0x01	; 1
    1f5a:	a3 96       	adiw	r28, 0x23	; 35
    1f5c:	9f af       	std	Y+63, r25	; 0x3f
    1f5e:	8e af       	std	Y+62, r24	; 0x3e
    1f60:	a3 97       	sbiw	r28, 0x23	; 35
    1f62:	a6 96       	adiw	r28, 0x26	; 38
    1f64:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f66:	a6 97       	sbiw	r28, 0x26	; 38
    1f68:	91 50       	subi	r25, 0x01	; 1
    1f6a:	a6 96       	adiw	r28, 0x26	; 38
    1f6c:	9f af       	std	Y+63, r25	; 0x3f
    1f6e:	a6 97       	sbiw	r28, 0x26	; 38
    1f70:	a6 96       	adiw	r28, 0x26	; 38
    1f72:	ef ad       	ldd	r30, Y+63	; 0x3f
    1f74:	a6 97       	sbiw	r28, 0x26	; 38
    1f76:	ee 23       	and	r30, r30
    1f78:	c1 f6       	brne	.-80     	; 0x1f2a <CreateFrame1+0x36>

	for(uint8 row_iterator = 0; row_iterator < 4; row_iterator++)
    1f7a:	18 8a       	std	Y+16, r1	; 0x10
    1f7c:	2c c0       	rjmp	.+88     	; 0x1fd6 <CreateFrame1+0xe2>
	{
		LCD_moveCursor(row_iterator,0);
    1f7e:	88 89       	ldd	r24, Y+16	; 0x10
    1f80:	60 e0       	ldi	r22, 0x00	; 0
    1f82:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
		for(uint8 column_iterator = 0; column_iterator < 20; column_iterator++)
    1f86:	1f 86       	std	Y+15, r1	; 0x0f
    1f88:	20 c0       	rjmp	.+64     	; 0x1fca <CreateFrame1+0xd6>
		{
			LCD_displayCharacter(*(*(frame1 + row_iterator) + column_iterator));
    1f8a:	ae 01       	movw	r20, r28
    1f8c:	4f 5e       	subi	r20, 0xEF	; 239
    1f8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f90:	88 89       	ldd	r24, Y+16	; 0x10
    1f92:	88 2f       	mov	r24, r24
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9c 01       	movw	r18, r24
    1f98:	22 0f       	add	r18, r18
    1f9a:	33 1f       	adc	r19, r19
    1f9c:	22 0f       	add	r18, r18
    1f9e:	33 1f       	adc	r19, r19
    1fa0:	c9 01       	movw	r24, r18
    1fa2:	88 0f       	add	r24, r24
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	28 0f       	add	r18, r24
    1fac:	39 1f       	adc	r19, r25
    1fae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb0:	88 2f       	mov	r24, r24
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	82 0f       	add	r24, r18
    1fb6:	93 1f       	adc	r25, r19
    1fb8:	fa 01       	movw	r30, r20
    1fba:	e8 0f       	add	r30, r24
    1fbc:	f9 1f       	adc	r31, r25
    1fbe:	80 81       	ld	r24, Z
    1fc0:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
					  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}};

	for(uint8 row_iterator = 0; row_iterator < 4; row_iterator++)
	{
		LCD_moveCursor(row_iterator,0);
		for(uint8 column_iterator = 0; column_iterator < 20; column_iterator++)
    1fc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc6:	8f 5f       	subi	r24, 0xFF	; 255
    1fc8:	8f 87       	std	Y+15, r24	; 0x0f
    1fca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fcc:	84 31       	cpi	r24, 0x14	; 20
    1fce:	e8 f2       	brcs	.-70     	; 0x1f8a <CreateFrame1+0x96>
	uint8 frame1[][20] = {{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
	                  {'_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'},
					  {'_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'},
					  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}};

	for(uint8 row_iterator = 0; row_iterator < 4; row_iterator++)
    1fd0:	88 89       	ldd	r24, Y+16	; 0x10
    1fd2:	8f 5f       	subi	r24, 0xFF	; 255
    1fd4:	88 8b       	std	Y+16, r24	; 0x10
    1fd6:	88 89       	ldd	r24, Y+16	; 0x10
    1fd8:	84 30       	cpi	r24, 0x04	; 4
    1fda:	88 f2       	brcs	.-94     	; 0x1f7e <CreateFrame1+0x8a>
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	aa e7       	ldi	r26, 0x7A	; 122
    1fe2:	b4 e4       	ldi	r27, 0x44	; 68
    1fe4:	8b 87       	std	Y+11, r24	; 0x0b
    1fe6:	9c 87       	std	Y+12, r25	; 0x0c
    1fe8:	ad 87       	std	Y+13, r26	; 0x0d
    1fea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	4a e7       	ldi	r20, 0x7A	; 122
    1ffa:	55 e4       	ldi	r21, 0x45	; 69
    1ffc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	8f 83       	std	Y+7, r24	; 0x07
    2006:	98 87       	std	Y+8, r25	; 0x08
    2008:	a9 87       	std	Y+9, r26	; 0x09
    200a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    200c:	6f 81       	ldd	r22, Y+7	; 0x07
    200e:	78 85       	ldd	r23, Y+8	; 0x08
    2010:	89 85       	ldd	r24, Y+9	; 0x09
    2012:	9a 85       	ldd	r25, Y+10	; 0x0a
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	40 e8       	ldi	r20, 0x80	; 128
    201a:	5f e3       	ldi	r21, 0x3F	; 63
    201c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2020:	88 23       	and	r24, r24
    2022:	2c f4       	brge	.+10     	; 0x202e <CreateFrame1+0x13a>
		__ticks = 1;
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	9e 83       	std	Y+6, r25	; 0x06
    202a:	8d 83       	std	Y+5, r24	; 0x05
    202c:	3f c0       	rjmp	.+126    	; 0x20ac <CreateFrame1+0x1b8>
	else if (__tmp > 65535)
    202e:	6f 81       	ldd	r22, Y+7	; 0x07
    2030:	78 85       	ldd	r23, Y+8	; 0x08
    2032:	89 85       	ldd	r24, Y+9	; 0x09
    2034:	9a 85       	ldd	r25, Y+10	; 0x0a
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	3f ef       	ldi	r19, 0xFF	; 255
    203a:	4f e7       	ldi	r20, 0x7F	; 127
    203c:	57 e4       	ldi	r21, 0x47	; 71
    203e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2042:	18 16       	cp	r1, r24
    2044:	4c f5       	brge	.+82     	; 0x2098 <CreateFrame1+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2046:	6b 85       	ldd	r22, Y+11	; 0x0b
    2048:	7c 85       	ldd	r23, Y+12	; 0x0c
    204a:	8d 85       	ldd	r24, Y+13	; 0x0d
    204c:	9e 85       	ldd	r25, Y+14	; 0x0e
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	40 e2       	ldi	r20, 0x20	; 32
    2054:	51 e4       	ldi	r21, 0x41	; 65
    2056:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	bc 01       	movw	r22, r24
    2060:	cd 01       	movw	r24, r26
    2062:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	9e 83       	std	Y+6, r25	; 0x06
    206c:	8d 83       	std	Y+5, r24	; 0x05
    206e:	0f c0       	rjmp	.+30     	; 0x208e <CreateFrame1+0x19a>
    2070:	80 e9       	ldi	r24, 0x90	; 144
    2072:	91 e0       	ldi	r25, 0x01	; 1
    2074:	9c 83       	std	Y+4, r25	; 0x04
    2076:	8b 83       	std	Y+3, r24	; 0x03
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	9c 81       	ldd	r25, Y+4	; 0x04
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <CreateFrame1+0x188>
    2080:	9c 83       	std	Y+4, r25	; 0x04
    2082:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2084:	8d 81       	ldd	r24, Y+5	; 0x05
    2086:	9e 81       	ldd	r25, Y+6	; 0x06
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	9e 83       	std	Y+6, r25	; 0x06
    208c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208e:	8d 81       	ldd	r24, Y+5	; 0x05
    2090:	9e 81       	ldd	r25, Y+6	; 0x06
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	69 f7       	brne	.-38     	; 0x2070 <CreateFrame1+0x17c>
    2096:	14 c0       	rjmp	.+40     	; 0x20c0 <CreateFrame1+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2098:	6f 81       	ldd	r22, Y+7	; 0x07
    209a:	78 85       	ldd	r23, Y+8	; 0x08
    209c:	89 85       	ldd	r24, Y+9	; 0x09
    209e:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	9e 83       	std	Y+6, r25	; 0x06
    20aa:	8d 83       	std	Y+5, r24	; 0x05
    20ac:	8d 81       	ldd	r24, Y+5	; 0x05
    20ae:	9e 81       	ldd	r25, Y+6	; 0x06
    20b0:	9a 83       	std	Y+2, r25	; 0x02
    20b2:	89 83       	std	Y+1, r24	; 0x01
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	9a 81       	ldd	r25, Y+2	; 0x02
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <CreateFrame1+0x1c4>
    20bc:	9a 83       	std	Y+2, r25	; 0x02
    20be:	89 83       	std	Y+1, r24	; 0x01
			LCD_displayCharacter(*(*(frame1 + row_iterator) + column_iterator));
		}
	}

	_delay_ms(1000);
}
    20c0:	cb 59       	subi	r28, 0x9B	; 155
    20c2:	df 4f       	sbci	r29, 0xFF	; 255
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <MoveFrame1>:

void MoveFrame1(void)
{
    20d4:	0f 93       	push	r16
    20d6:	1f 93       	push	r17
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	c8 54       	subi	r28, 0x48	; 72
    20e2:	d0 40       	sbci	r29, 0x00	; 0
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
	LCD_moveCursor(1,0);
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	60 e0       	ldi	r22, 0x00	; 0
    20f2:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
	LCD_displayCharacter(0);
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
    20fc:	fe 01       	movw	r30, r28
    20fe:	ed 5b       	subi	r30, 0xBD	; 189
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	a8 ec       	ldi	r26, 0xC8	; 200
    2108:	b2 e4       	ldi	r27, 0x42	; 66
    210a:	80 83       	st	Z, r24
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	a2 83       	std	Z+2, r26	; 0x02
    2110:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2112:	8e 01       	movw	r16, r28
    2114:	01 5c       	subi	r16, 0xC1	; 193
    2116:	1f 4f       	sbci	r17, 0xFF	; 255
    2118:	fe 01       	movw	r30, r28
    211a:	ed 5b       	subi	r30, 0xBD	; 189
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	60 81       	ld	r22, Z
    2120:	71 81       	ldd	r23, Z+1	; 0x01
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	4a e7       	ldi	r20, 0x7A	; 122
    212c:	55 e4       	ldi	r21, 0x45	; 69
    212e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	f8 01       	movw	r30, r16
    2138:	80 83       	st	Z, r24
    213a:	91 83       	std	Z+1, r25	; 0x01
    213c:	a2 83       	std	Z+2, r26	; 0x02
    213e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2140:	fe 01       	movw	r30, r28
    2142:	ff 96       	adiw	r30, 0x3f	; 63
    2144:	60 81       	ld	r22, Z
    2146:	71 81       	ldd	r23, Z+1	; 0x01
    2148:	82 81       	ldd	r24, Z+2	; 0x02
    214a:	93 81       	ldd	r25, Z+3	; 0x03
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e8       	ldi	r20, 0x80	; 128
    2152:	5f e3       	ldi	r21, 0x3F	; 63
    2154:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2158:	88 23       	and	r24, r24
    215a:	2c f4       	brge	.+10     	; 0x2166 <MoveFrame1+0x92>
		__ticks = 1;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	9e af       	std	Y+62, r25	; 0x3e
    2162:	8d af       	std	Y+61, r24	; 0x3d
    2164:	46 c0       	rjmp	.+140    	; 0x21f2 <MoveFrame1+0x11e>
	else if (__tmp > 65535)
    2166:	fe 01       	movw	r30, r28
    2168:	ff 96       	adiw	r30, 0x3f	; 63
    216a:	60 81       	ld	r22, Z
    216c:	71 81       	ldd	r23, Z+1	; 0x01
    216e:	82 81       	ldd	r24, Z+2	; 0x02
    2170:	93 81       	ldd	r25, Z+3	; 0x03
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	3f ef       	ldi	r19, 0xFF	; 255
    2176:	4f e7       	ldi	r20, 0x7F	; 127
    2178:	57 e4       	ldi	r21, 0x47	; 71
    217a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    217e:	18 16       	cp	r1, r24
    2180:	64 f5       	brge	.+88     	; 0x21da <MoveFrame1+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2182:	fe 01       	movw	r30, r28
    2184:	ed 5b       	subi	r30, 0xBD	; 189
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	60 81       	ld	r22, Z
    218a:	71 81       	ldd	r23, Z+1	; 0x01
    218c:	82 81       	ldd	r24, Z+2	; 0x02
    218e:	93 81       	ldd	r25, Z+3	; 0x03
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	40 e2       	ldi	r20, 0x20	; 32
    2196:	51 e4       	ldi	r21, 0x41	; 65
    2198:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	bc 01       	movw	r22, r24
    21a2:	cd 01       	movw	r24, r26
    21a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	9e af       	std	Y+62, r25	; 0x3e
    21ae:	8d af       	std	Y+61, r24	; 0x3d
    21b0:	0f c0       	rjmp	.+30     	; 0x21d0 <MoveFrame1+0xfc>
    21b2:	80 e9       	ldi	r24, 0x90	; 144
    21b4:	91 e0       	ldi	r25, 0x01	; 1
    21b6:	9c af       	std	Y+60, r25	; 0x3c
    21b8:	8b af       	std	Y+59, r24	; 0x3b
    21ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    21bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <MoveFrame1+0xea>
    21c2:	9c af       	std	Y+60, r25	; 0x3c
    21c4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    21c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	9e af       	std	Y+62, r25	; 0x3e
    21ce:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    21d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	69 f7       	brne	.-38     	; 0x21b2 <MoveFrame1+0xde>
    21d8:	16 c0       	rjmp	.+44     	; 0x2206 <MoveFrame1+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21da:	fe 01       	movw	r30, r28
    21dc:	ff 96       	adiw	r30, 0x3f	; 63
    21de:	60 81       	ld	r22, Z
    21e0:	71 81       	ldd	r23, Z+1	; 0x01
    21e2:	82 81       	ldd	r24, Z+2	; 0x02
    21e4:	93 81       	ldd	r25, Z+3	; 0x03
    21e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	9e af       	std	Y+62, r25	; 0x3e
    21f0:	8d af       	std	Y+61, r24	; 0x3d
    21f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    21f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    21f6:	9a af       	std	Y+58, r25	; 0x3a
    21f8:	89 af       	std	Y+57, r24	; 0x39
    21fa:	89 ad       	ldd	r24, Y+57	; 0x39
    21fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <MoveFrame1+0x12a>
    2202:	9a af       	std	Y+58, r25	; 0x3a
    2204:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);

	for(uint8 step = 1; step < 20; step++)
    2206:	fe 01       	movw	r30, r28
    2208:	e8 5b       	subi	r30, 0xB8	; 184
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	80 83       	st	Z, r24
    2210:	92 c0       	rjmp	.+292    	; 0x2336 <MoveFrame1+0x262>
	{
		LCD_moveCursor(1,step);
    2212:	fe 01       	movw	r30, r28
    2214:	e8 5b       	subi	r30, 0xB8	; 184
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	60 81       	ld	r22, Z
    221c:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
		LCD_displayCharacter(0);
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
		LCD_moveCursor(1,step - 1);
    2226:	fe 01       	movw	r30, r28
    2228:	e8 5b       	subi	r30, 0xB8	; 184
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	80 81       	ld	r24, Z
    222e:	98 2f       	mov	r25, r24
    2230:	91 50       	subi	r25, 0x01	; 1
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	69 2f       	mov	r22, r25
    2236:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
		LCD_displayCharacter('_');
    223a:	8f e5       	ldi	r24, 0x5F	; 95
    223c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	a8 ec       	ldi	r26, 0xC8	; 200
    2246:	b2 e4       	ldi	r27, 0x42	; 66
    2248:	8d ab       	std	Y+53, r24	; 0x35
    224a:	9e ab       	std	Y+54, r25	; 0x36
    224c:	af ab       	std	Y+55, r26	; 0x37
    224e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2250:	6d a9       	ldd	r22, Y+53	; 0x35
    2252:	7e a9       	ldd	r23, Y+54	; 0x36
    2254:	8f a9       	ldd	r24, Y+55	; 0x37
    2256:	98 ad       	ldd	r25, Y+56	; 0x38
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	4a e7       	ldi	r20, 0x7A	; 122
    225e:	55 e4       	ldi	r21, 0x45	; 69
    2260:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	89 ab       	std	Y+49, r24	; 0x31
    226a:	9a ab       	std	Y+50, r25	; 0x32
    226c:	ab ab       	std	Y+51, r26	; 0x33
    226e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2270:	69 a9       	ldd	r22, Y+49	; 0x31
    2272:	7a a9       	ldd	r23, Y+50	; 0x32
    2274:	8b a9       	ldd	r24, Y+51	; 0x33
    2276:	9c a9       	ldd	r25, Y+52	; 0x34
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e8       	ldi	r20, 0x80	; 128
    227e:	5f e3       	ldi	r21, 0x3F	; 63
    2280:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2284:	88 23       	and	r24, r24
    2286:	2c f4       	brge	.+10     	; 0x2292 <MoveFrame1+0x1be>
		__ticks = 1;
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	98 ab       	std	Y+48, r25	; 0x30
    228e:	8f a7       	std	Y+47, r24	; 0x2f
    2290:	3f c0       	rjmp	.+126    	; 0x2310 <MoveFrame1+0x23c>
	else if (__tmp > 65535)
    2292:	69 a9       	ldd	r22, Y+49	; 0x31
    2294:	7a a9       	ldd	r23, Y+50	; 0x32
    2296:	8b a9       	ldd	r24, Y+51	; 0x33
    2298:	9c a9       	ldd	r25, Y+52	; 0x34
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	3f ef       	ldi	r19, 0xFF	; 255
    229e:	4f e7       	ldi	r20, 0x7F	; 127
    22a0:	57 e4       	ldi	r21, 0x47	; 71
    22a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22a6:	18 16       	cp	r1, r24
    22a8:	4c f5       	brge	.+82     	; 0x22fc <MoveFrame1+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22aa:	6d a9       	ldd	r22, Y+53	; 0x35
    22ac:	7e a9       	ldd	r23, Y+54	; 0x36
    22ae:	8f a9       	ldd	r24, Y+55	; 0x37
    22b0:	98 ad       	ldd	r25, Y+56	; 0x38
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e2       	ldi	r20, 0x20	; 32
    22b8:	51 e4       	ldi	r21, 0x41	; 65
    22ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	bc 01       	movw	r22, r24
    22c4:	cd 01       	movw	r24, r26
    22c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	98 ab       	std	Y+48, r25	; 0x30
    22d0:	8f a7       	std	Y+47, r24	; 0x2f
    22d2:	0f c0       	rjmp	.+30     	; 0x22f2 <MoveFrame1+0x21e>
    22d4:	80 e9       	ldi	r24, 0x90	; 144
    22d6:	91 e0       	ldi	r25, 0x01	; 1
    22d8:	9e a7       	std	Y+46, r25	; 0x2e
    22da:	8d a7       	std	Y+45, r24	; 0x2d
    22dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    22de:	9e a5       	ldd	r25, Y+46	; 0x2e
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	f1 f7       	brne	.-4      	; 0x22e0 <MoveFrame1+0x20c>
    22e4:	9e a7       	std	Y+46, r25	; 0x2e
    22e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ea:	98 a9       	ldd	r25, Y+48	; 0x30
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	98 ab       	std	Y+48, r25	; 0x30
    22f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    22f4:	98 a9       	ldd	r25, Y+48	; 0x30
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	69 f7       	brne	.-38     	; 0x22d4 <MoveFrame1+0x200>
    22fa:	14 c0       	rjmp	.+40     	; 0x2324 <MoveFrame1+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fc:	69 a9       	ldd	r22, Y+49	; 0x31
    22fe:	7a a9       	ldd	r23, Y+50	; 0x32
    2300:	8b a9       	ldd	r24, Y+51	; 0x33
    2302:	9c a9       	ldd	r25, Y+52	; 0x34
    2304:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	98 ab       	std	Y+48, r25	; 0x30
    230e:	8f a7       	std	Y+47, r24	; 0x2f
    2310:	8f a5       	ldd	r24, Y+47	; 0x2f
    2312:	98 a9       	ldd	r25, Y+48	; 0x30
    2314:	9c a7       	std	Y+44, r25	; 0x2c
    2316:	8b a7       	std	Y+43, r24	; 0x2b
    2318:	8b a5       	ldd	r24, Y+43	; 0x2b
    231a:	9c a5       	ldd	r25, Y+44	; 0x2c
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	f1 f7       	brne	.-4      	; 0x231c <MoveFrame1+0x248>
    2320:	9c a7       	std	Y+44, r25	; 0x2c
    2322:	8b a7       	std	Y+43, r24	; 0x2b
{
	LCD_moveCursor(1,0);
	LCD_displayCharacter(0);
	_delay_ms(100);

	for(uint8 step = 1; step < 20; step++)
    2324:	de 01       	movw	r26, r28
    2326:	a8 5b       	subi	r26, 0xB8	; 184
    2328:	bf 4f       	sbci	r27, 0xFF	; 255
    232a:	fe 01       	movw	r30, r28
    232c:	e8 5b       	subi	r30, 0xB8	; 184
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	80 81       	ld	r24, Z
    2332:	8f 5f       	subi	r24, 0xFF	; 255
    2334:	8c 93       	st	X, r24
    2336:	fe 01       	movw	r30, r28
    2338:	e8 5b       	subi	r30, 0xB8	; 184
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	80 81       	ld	r24, Z
    233e:	84 31       	cpi	r24, 0x14	; 20
    2340:	08 f4       	brcc	.+2      	; 0x2344 <MoveFrame1+0x270>
    2342:	67 cf       	rjmp	.-306    	; 0x2212 <MoveFrame1+0x13e>
		LCD_moveCursor(1,step - 1);
		LCD_displayCharacter('_');
		_delay_ms(100);
	}

	LCD_moveCursor(1,19);
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	63 e1       	ldi	r22, 0x13	; 19
    2348:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
	LCD_displayCharacter('_');
    234c:	8f e5       	ldi	r24, 0x5F	; 95
    234e:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	a6 e1       	ldi	r26, 0x16	; 22
    2358:	b3 e4       	ldi	r27, 0x43	; 67
    235a:	8f a3       	std	Y+39, r24	; 0x27
    235c:	98 a7       	std	Y+40, r25	; 0x28
    235e:	a9 a7       	std	Y+41, r26	; 0x29
    2360:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2362:	6f a1       	ldd	r22, Y+39	; 0x27
    2364:	78 a5       	ldd	r23, Y+40	; 0x28
    2366:	89 a5       	ldd	r24, Y+41	; 0x29
    2368:	9a a5       	ldd	r25, Y+42	; 0x2a
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	4a e7       	ldi	r20, 0x7A	; 122
    2370:	55 e4       	ldi	r21, 0x45	; 69
    2372:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	8b a3       	std	Y+35, r24	; 0x23
    237c:	9c a3       	std	Y+36, r25	; 0x24
    237e:	ad a3       	std	Y+37, r26	; 0x25
    2380:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2382:	6b a1       	ldd	r22, Y+35	; 0x23
    2384:	7c a1       	ldd	r23, Y+36	; 0x24
    2386:	8d a1       	ldd	r24, Y+37	; 0x25
    2388:	9e a1       	ldd	r25, Y+38	; 0x26
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e8       	ldi	r20, 0x80	; 128
    2390:	5f e3       	ldi	r21, 0x3F	; 63
    2392:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2396:	88 23       	and	r24, r24
    2398:	2c f4       	brge	.+10     	; 0x23a4 <MoveFrame1+0x2d0>
		__ticks = 1;
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	9a a3       	std	Y+34, r25	; 0x22
    23a0:	89 a3       	std	Y+33, r24	; 0x21
    23a2:	3f c0       	rjmp	.+126    	; 0x2422 <MoveFrame1+0x34e>
	else if (__tmp > 65535)
    23a4:	6b a1       	ldd	r22, Y+35	; 0x23
    23a6:	7c a1       	ldd	r23, Y+36	; 0x24
    23a8:	8d a1       	ldd	r24, Y+37	; 0x25
    23aa:	9e a1       	ldd	r25, Y+38	; 0x26
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	3f ef       	ldi	r19, 0xFF	; 255
    23b0:	4f e7       	ldi	r20, 0x7F	; 127
    23b2:	57 e4       	ldi	r21, 0x47	; 71
    23b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23b8:	18 16       	cp	r1, r24
    23ba:	4c f5       	brge	.+82     	; 0x240e <MoveFrame1+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23bc:	6f a1       	ldd	r22, Y+39	; 0x27
    23be:	78 a5       	ldd	r23, Y+40	; 0x28
    23c0:	89 a5       	ldd	r24, Y+41	; 0x29
    23c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e2       	ldi	r20, 0x20	; 32
    23ca:	51 e4       	ldi	r21, 0x41	; 65
    23cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	bc 01       	movw	r22, r24
    23d6:	cd 01       	movw	r24, r26
    23d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	9a a3       	std	Y+34, r25	; 0x22
    23e2:	89 a3       	std	Y+33, r24	; 0x21
    23e4:	0f c0       	rjmp	.+30     	; 0x2404 <MoveFrame1+0x330>
    23e6:	80 e9       	ldi	r24, 0x90	; 144
    23e8:	91 e0       	ldi	r25, 0x01	; 1
    23ea:	98 a3       	std	Y+32, r25	; 0x20
    23ec:	8f 8f       	std	Y+31, r24	; 0x1f
    23ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23f0:	98 a1       	ldd	r25, Y+32	; 0x20
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <MoveFrame1+0x31e>
    23f6:	98 a3       	std	Y+32, r25	; 0x20
    23f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fa:	89 a1       	ldd	r24, Y+33	; 0x21
    23fc:	9a a1       	ldd	r25, Y+34	; 0x22
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	9a a3       	std	Y+34, r25	; 0x22
    2402:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2404:	89 a1       	ldd	r24, Y+33	; 0x21
    2406:	9a a1       	ldd	r25, Y+34	; 0x22
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	69 f7       	brne	.-38     	; 0x23e6 <MoveFrame1+0x312>
    240c:	14 c0       	rjmp	.+40     	; 0x2436 <MoveFrame1+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240e:	6b a1       	ldd	r22, Y+35	; 0x23
    2410:	7c a1       	ldd	r23, Y+36	; 0x24
    2412:	8d a1       	ldd	r24, Y+37	; 0x25
    2414:	9e a1       	ldd	r25, Y+38	; 0x26
    2416:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	9a a3       	std	Y+34, r25	; 0x22
    2420:	89 a3       	std	Y+33, r24	; 0x21
    2422:	89 a1       	ldd	r24, Y+33	; 0x21
    2424:	9a a1       	ldd	r25, Y+34	; 0x22
    2426:	9e 8f       	std	Y+30, r25	; 0x1e
    2428:	8d 8f       	std	Y+29, r24	; 0x1d
    242a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    242c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	f1 f7       	brne	.-4      	; 0x242e <MoveFrame1+0x35a>
    2432:	9e 8f       	std	Y+30, r25	; 0x1e
    2434:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(150);

	for(uint8 step = 1; step < 20; step++)
    2436:	fe 01       	movw	r30, r28
    2438:	e9 5b       	subi	r30, 0xB9	; 185
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	80 83       	st	Z, r24
    2440:	92 c0       	rjmp	.+292    	; 0x2566 <MoveFrame1+0x492>
	{
		LCD_moveCursor(2,step);
    2442:	fe 01       	movw	r30, r28
    2444:	e9 5b       	subi	r30, 0xB9	; 185
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	82 e0       	ldi	r24, 0x02	; 2
    244a:	60 81       	ld	r22, Z
    244c:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
		LCD_displayCharacter(0);
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
		LCD_moveCursor(2,step - 1);
    2456:	fe 01       	movw	r30, r28
    2458:	e9 5b       	subi	r30, 0xB9	; 185
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	80 81       	ld	r24, Z
    245e:	98 2f       	mov	r25, r24
    2460:	91 50       	subi	r25, 0x01	; 1
    2462:	82 e0       	ldi	r24, 0x02	; 2
    2464:	69 2f       	mov	r22, r25
    2466:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
		LCD_displayCharacter('_');
    246a:	8f e5       	ldi	r24, 0x5F	; 95
    246c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	a8 ec       	ldi	r26, 0xC8	; 200
    2476:	b2 e4       	ldi	r27, 0x42	; 66
    2478:	89 8f       	std	Y+25, r24	; 0x19
    247a:	9a 8f       	std	Y+26, r25	; 0x1a
    247c:	ab 8f       	std	Y+27, r26	; 0x1b
    247e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2480:	69 8d       	ldd	r22, Y+25	; 0x19
    2482:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2484:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2486:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	4a e7       	ldi	r20, 0x7A	; 122
    248e:	55 e4       	ldi	r21, 0x45	; 69
    2490:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	8d 8b       	std	Y+21, r24	; 0x15
    249a:	9e 8b       	std	Y+22, r25	; 0x16
    249c:	af 8b       	std	Y+23, r26	; 0x17
    249e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24a0:	6d 89       	ldd	r22, Y+21	; 0x15
    24a2:	7e 89       	ldd	r23, Y+22	; 0x16
    24a4:	8f 89       	ldd	r24, Y+23	; 0x17
    24a6:	98 8d       	ldd	r25, Y+24	; 0x18
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e8       	ldi	r20, 0x80	; 128
    24ae:	5f e3       	ldi	r21, 0x3F	; 63
    24b0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24b4:	88 23       	and	r24, r24
    24b6:	2c f4       	brge	.+10     	; 0x24c2 <MoveFrame1+0x3ee>
		__ticks = 1;
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	9c 8b       	std	Y+20, r25	; 0x14
    24be:	8b 8b       	std	Y+19, r24	; 0x13
    24c0:	3f c0       	rjmp	.+126    	; 0x2540 <MoveFrame1+0x46c>
	else if (__tmp > 65535)
    24c2:	6d 89       	ldd	r22, Y+21	; 0x15
    24c4:	7e 89       	ldd	r23, Y+22	; 0x16
    24c6:	8f 89       	ldd	r24, Y+23	; 0x17
    24c8:	98 8d       	ldd	r25, Y+24	; 0x18
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	3f ef       	ldi	r19, 0xFF	; 255
    24ce:	4f e7       	ldi	r20, 0x7F	; 127
    24d0:	57 e4       	ldi	r21, 0x47	; 71
    24d2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24d6:	18 16       	cp	r1, r24
    24d8:	4c f5       	brge	.+82     	; 0x252c <MoveFrame1+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24da:	69 8d       	ldd	r22, Y+25	; 0x19
    24dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e2       	ldi	r20, 0x20	; 32
    24e8:	51 e4       	ldi	r21, 0x41	; 65
    24ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	bc 01       	movw	r22, r24
    24f4:	cd 01       	movw	r24, r26
    24f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	9c 8b       	std	Y+20, r25	; 0x14
    2500:	8b 8b       	std	Y+19, r24	; 0x13
    2502:	0f c0       	rjmp	.+30     	; 0x2522 <MoveFrame1+0x44e>
    2504:	80 e9       	ldi	r24, 0x90	; 144
    2506:	91 e0       	ldi	r25, 0x01	; 1
    2508:	9a 8b       	std	Y+18, r25	; 0x12
    250a:	89 8b       	std	Y+17, r24	; 0x11
    250c:	89 89       	ldd	r24, Y+17	; 0x11
    250e:	9a 89       	ldd	r25, Y+18	; 0x12
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	f1 f7       	brne	.-4      	; 0x2510 <MoveFrame1+0x43c>
    2514:	9a 8b       	std	Y+18, r25	; 0x12
    2516:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2518:	8b 89       	ldd	r24, Y+19	; 0x13
    251a:	9c 89       	ldd	r25, Y+20	; 0x14
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	9c 8b       	std	Y+20, r25	; 0x14
    2520:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2522:	8b 89       	ldd	r24, Y+19	; 0x13
    2524:	9c 89       	ldd	r25, Y+20	; 0x14
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	69 f7       	brne	.-38     	; 0x2504 <MoveFrame1+0x430>
    252a:	14 c0       	rjmp	.+40     	; 0x2554 <MoveFrame1+0x480>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    252c:	6d 89       	ldd	r22, Y+21	; 0x15
    252e:	7e 89       	ldd	r23, Y+22	; 0x16
    2530:	8f 89       	ldd	r24, Y+23	; 0x17
    2532:	98 8d       	ldd	r25, Y+24	; 0x18
    2534:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	9c 8b       	std	Y+20, r25	; 0x14
    253e:	8b 8b       	std	Y+19, r24	; 0x13
    2540:	8b 89       	ldd	r24, Y+19	; 0x13
    2542:	9c 89       	ldd	r25, Y+20	; 0x14
    2544:	98 8b       	std	Y+16, r25	; 0x10
    2546:	8f 87       	std	Y+15, r24	; 0x0f
    2548:	8f 85       	ldd	r24, Y+15	; 0x0f
    254a:	98 89       	ldd	r25, Y+16	; 0x10
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <MoveFrame1+0x478>
    2550:	98 8b       	std	Y+16, r25	; 0x10
    2552:	8f 87       	std	Y+15, r24	; 0x0f

	LCD_moveCursor(1,19);
	LCD_displayCharacter('_');
	_delay_ms(150);

	for(uint8 step = 1; step < 20; step++)
    2554:	de 01       	movw	r26, r28
    2556:	a9 5b       	subi	r26, 0xB9	; 185
    2558:	bf 4f       	sbci	r27, 0xFF	; 255
    255a:	fe 01       	movw	r30, r28
    255c:	e9 5b       	subi	r30, 0xB9	; 185
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	80 81       	ld	r24, Z
    2562:	8f 5f       	subi	r24, 0xFF	; 255
    2564:	8c 93       	st	X, r24
    2566:	fe 01       	movw	r30, r28
    2568:	e9 5b       	subi	r30, 0xB9	; 185
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	80 81       	ld	r24, Z
    256e:	84 31       	cpi	r24, 0x14	; 20
    2570:	08 f4       	brcc	.+2      	; 0x2574 <MoveFrame1+0x4a0>
    2572:	67 cf       	rjmp	.-306    	; 0x2442 <MoveFrame1+0x36e>
		LCD_moveCursor(2,step - 1);
		LCD_displayCharacter('_');
		_delay_ms(100);
	}

	LCD_moveCursor(2,19);
    2574:	82 e0       	ldi	r24, 0x02	; 2
    2576:	63 e1       	ldi	r22, 0x13	; 19
    2578:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
	LCD_displayCharacter('_');
    257c:	8f e5       	ldi	r24, 0x5F	; 95
    257e:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	a6 e1       	ldi	r26, 0x16	; 22
    2588:	b3 e4       	ldi	r27, 0x43	; 67
    258a:	8b 87       	std	Y+11, r24	; 0x0b
    258c:	9c 87       	std	Y+12, r25	; 0x0c
    258e:	ad 87       	std	Y+13, r26	; 0x0d
    2590:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2592:	6b 85       	ldd	r22, Y+11	; 0x0b
    2594:	7c 85       	ldd	r23, Y+12	; 0x0c
    2596:	8d 85       	ldd	r24, Y+13	; 0x0d
    2598:	9e 85       	ldd	r25, Y+14	; 0x0e
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	4a e7       	ldi	r20, 0x7A	; 122
    25a0:	55 e4       	ldi	r21, 0x45	; 69
    25a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	8f 83       	std	Y+7, r24	; 0x07
    25ac:	98 87       	std	Y+8, r25	; 0x08
    25ae:	a9 87       	std	Y+9, r26	; 0x09
    25b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25b2:	6f 81       	ldd	r22, Y+7	; 0x07
    25b4:	78 85       	ldd	r23, Y+8	; 0x08
    25b6:	89 85       	ldd	r24, Y+9	; 0x09
    25b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e8       	ldi	r20, 0x80	; 128
    25c0:	5f e3       	ldi	r21, 0x3F	; 63
    25c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25c6:	88 23       	and	r24, r24
    25c8:	2c f4       	brge	.+10     	; 0x25d4 <MoveFrame1+0x500>
		__ticks = 1;
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	9e 83       	std	Y+6, r25	; 0x06
    25d0:	8d 83       	std	Y+5, r24	; 0x05
    25d2:	3f c0       	rjmp	.+126    	; 0x2652 <MoveFrame1+0x57e>
	else if (__tmp > 65535)
    25d4:	6f 81       	ldd	r22, Y+7	; 0x07
    25d6:	78 85       	ldd	r23, Y+8	; 0x08
    25d8:	89 85       	ldd	r24, Y+9	; 0x09
    25da:	9a 85       	ldd	r25, Y+10	; 0x0a
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	3f ef       	ldi	r19, 0xFF	; 255
    25e0:	4f e7       	ldi	r20, 0x7F	; 127
    25e2:	57 e4       	ldi	r21, 0x47	; 71
    25e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25e8:	18 16       	cp	r1, r24
    25ea:	4c f5       	brge	.+82     	; 0x263e <MoveFrame1+0x56a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	40 e2       	ldi	r20, 0x20	; 32
    25fa:	51 e4       	ldi	r21, 0x41	; 65
    25fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	bc 01       	movw	r22, r24
    2606:	cd 01       	movw	r24, r26
    2608:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	9e 83       	std	Y+6, r25	; 0x06
    2612:	8d 83       	std	Y+5, r24	; 0x05
    2614:	0f c0       	rjmp	.+30     	; 0x2634 <MoveFrame1+0x560>
    2616:	80 e9       	ldi	r24, 0x90	; 144
    2618:	91 e0       	ldi	r25, 0x01	; 1
    261a:	9c 83       	std	Y+4, r25	; 0x04
    261c:	8b 83       	std	Y+3, r24	; 0x03
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	9c 81       	ldd	r25, Y+4	; 0x04
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	f1 f7       	brne	.-4      	; 0x2622 <MoveFrame1+0x54e>
    2626:	9c 83       	std	Y+4, r25	; 0x04
    2628:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262a:	8d 81       	ldd	r24, Y+5	; 0x05
    262c:	9e 81       	ldd	r25, Y+6	; 0x06
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	9e 83       	std	Y+6, r25	; 0x06
    2632:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2634:	8d 81       	ldd	r24, Y+5	; 0x05
    2636:	9e 81       	ldd	r25, Y+6	; 0x06
    2638:	00 97       	sbiw	r24, 0x00	; 0
    263a:	69 f7       	brne	.-38     	; 0x2616 <MoveFrame1+0x542>
    263c:	14 c0       	rjmp	.+40     	; 0x2666 <MoveFrame1+0x592>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263e:	6f 81       	ldd	r22, Y+7	; 0x07
    2640:	78 85       	ldd	r23, Y+8	; 0x08
    2642:	89 85       	ldd	r24, Y+9	; 0x09
    2644:	9a 85       	ldd	r25, Y+10	; 0x0a
    2646:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	9e 83       	std	Y+6, r25	; 0x06
    2650:	8d 83       	std	Y+5, r24	; 0x05
    2652:	8d 81       	ldd	r24, Y+5	; 0x05
    2654:	9e 81       	ldd	r25, Y+6	; 0x06
    2656:	9a 83       	std	Y+2, r25	; 0x02
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	9a 81       	ldd	r25, Y+2	; 0x02
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	f1 f7       	brne	.-4      	; 0x265e <MoveFrame1+0x58a>
    2662:	9a 83       	std	Y+2, r25	; 0x02
    2664:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(150);
}
    2666:	c8 5b       	subi	r28, 0xB8	; 184
    2668:	df 4f       	sbci	r29, 0xFF	; 255
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	de bf       	out	0x3e, r29	; 62
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	cd bf       	out	0x3d, r28	; 61
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	1f 91       	pop	r17
    267a:	0f 91       	pop	r16
    267c:	08 95       	ret

0000267e <CreateFrame2>:

void CreateFrame2(void)
{
    267e:	df 93       	push	r29
    2680:	cf 93       	push	r28
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	c7 55       	subi	r28, 0x57	; 87
    2688:	d0 40       	sbci	r29, 0x00	; 0
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	de bf       	out	0x3e, r29	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	cd bf       	out	0x3d, r28	; 61
	uint8 frame1[][20] = {{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
	                  {'_','_','_','_','_','_','_','_','_',' ','_','_','_','_','_','_','_','_','_','_'},
					  {'_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'},
					  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}};
    2694:	ce 01       	movw	r24, r28
    2696:	03 96       	adiw	r24, 0x03	; 3
    2698:	65 96       	adiw	r28, 0x15	; 21
    269a:	9f af       	std	Y+63, r25	; 0x3f
    269c:	8e af       	std	Y+62, r24	; 0x3e
    269e:	65 97       	sbiw	r28, 0x15	; 21
    26a0:	e0 ed       	ldi	r30, 0xD0	; 208
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	67 96       	adiw	r28, 0x17	; 23
    26a6:	ff af       	std	Y+63, r31	; 0x3f
    26a8:	ee af       	std	Y+62, r30	; 0x3e
    26aa:	67 97       	sbiw	r28, 0x17	; 23
    26ac:	f0 e5       	ldi	r31, 0x50	; 80
    26ae:	68 96       	adiw	r28, 0x18	; 24
    26b0:	ff af       	std	Y+63, r31	; 0x3f
    26b2:	68 97       	sbiw	r28, 0x18	; 24
    26b4:	67 96       	adiw	r28, 0x17	; 23
    26b6:	ee ad       	ldd	r30, Y+62	; 0x3e
    26b8:	ff ad       	ldd	r31, Y+63	; 0x3f
    26ba:	67 97       	sbiw	r28, 0x17	; 23
    26bc:	00 80       	ld	r0, Z
    26be:	67 96       	adiw	r28, 0x17	; 23
    26c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    26c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    26c4:	67 97       	sbiw	r28, 0x17	; 23
    26c6:	01 96       	adiw	r24, 0x01	; 1
    26c8:	67 96       	adiw	r28, 0x17	; 23
    26ca:	9f af       	std	Y+63, r25	; 0x3f
    26cc:	8e af       	std	Y+62, r24	; 0x3e
    26ce:	67 97       	sbiw	r28, 0x17	; 23
    26d0:	65 96       	adiw	r28, 0x15	; 21
    26d2:	ee ad       	ldd	r30, Y+62	; 0x3e
    26d4:	ff ad       	ldd	r31, Y+63	; 0x3f
    26d6:	65 97       	sbiw	r28, 0x15	; 21
    26d8:	00 82       	st	Z, r0
    26da:	65 96       	adiw	r28, 0x15	; 21
    26dc:	8e ad       	ldd	r24, Y+62	; 0x3e
    26de:	9f ad       	ldd	r25, Y+63	; 0x3f
    26e0:	65 97       	sbiw	r28, 0x15	; 21
    26e2:	01 96       	adiw	r24, 0x01	; 1
    26e4:	65 96       	adiw	r28, 0x15	; 21
    26e6:	9f af       	std	Y+63, r25	; 0x3f
    26e8:	8e af       	std	Y+62, r24	; 0x3e
    26ea:	65 97       	sbiw	r28, 0x15	; 21
    26ec:	68 96       	adiw	r28, 0x18	; 24
    26ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    26f0:	68 97       	sbiw	r28, 0x18	; 24
    26f2:	91 50       	subi	r25, 0x01	; 1
    26f4:	68 96       	adiw	r28, 0x18	; 24
    26f6:	9f af       	std	Y+63, r25	; 0x3f
    26f8:	68 97       	sbiw	r28, 0x18	; 24
    26fa:	68 96       	adiw	r28, 0x18	; 24
    26fc:	ef ad       	ldd	r30, Y+63	; 0x3f
    26fe:	68 97       	sbiw	r28, 0x18	; 24
    2700:	ee 23       	and	r30, r30
    2702:	c1 f6       	brne	.-80     	; 0x26b4 <CreateFrame2+0x36>

	for(uint8 row_iterator = 0; row_iterator < 4; row_iterator++)
    2704:	1a 82       	std	Y+2, r1	; 0x02
    2706:	2c c0       	rjmp	.+88     	; 0x2760 <CreateFrame2+0xe2>
	{
		LCD_moveCursor(row_iterator,0);
    2708:	8a 81       	ldd	r24, Y+2	; 0x02
    270a:	60 e0       	ldi	r22, 0x00	; 0
    270c:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
		for(uint8 column_iterator = 0; column_iterator < 20; column_iterator++)
    2710:	19 82       	std	Y+1, r1	; 0x01
    2712:	20 c0       	rjmp	.+64     	; 0x2754 <CreateFrame2+0xd6>
		{
			LCD_displayCharacter(*(*(frame1 + row_iterator) + column_iterator));
    2714:	ae 01       	movw	r20, r28
    2716:	4d 5f       	subi	r20, 0xFD	; 253
    2718:	5f 4f       	sbci	r21, 0xFF	; 255
    271a:	8a 81       	ldd	r24, Y+2	; 0x02
    271c:	88 2f       	mov	r24, r24
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	9c 01       	movw	r18, r24
    2722:	22 0f       	add	r18, r18
    2724:	33 1f       	adc	r19, r19
    2726:	22 0f       	add	r18, r18
    2728:	33 1f       	adc	r19, r19
    272a:	c9 01       	movw	r24, r18
    272c:	88 0f       	add	r24, r24
    272e:	99 1f       	adc	r25, r25
    2730:	88 0f       	add	r24, r24
    2732:	99 1f       	adc	r25, r25
    2734:	28 0f       	add	r18, r24
    2736:	39 1f       	adc	r19, r25
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	88 2f       	mov	r24, r24
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	82 0f       	add	r24, r18
    2740:	93 1f       	adc	r25, r19
    2742:	fa 01       	movw	r30, r20
    2744:	e8 0f       	add	r30, r24
    2746:	f9 1f       	adc	r31, r25
    2748:	80 81       	ld	r24, Z
    274a:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
					  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}};

	for(uint8 row_iterator = 0; row_iterator < 4; row_iterator++)
	{
		LCD_moveCursor(row_iterator,0);
		for(uint8 column_iterator = 0; column_iterator < 20; column_iterator++)
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	8f 5f       	subi	r24, 0xFF	; 255
    2752:	89 83       	std	Y+1, r24	; 0x01
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	84 31       	cpi	r24, 0x14	; 20
    2758:	e8 f2       	brcs	.-70     	; 0x2714 <CreateFrame2+0x96>
	uint8 frame1[][20] = {{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
	                  {'_','_','_','_','_','_','_','_','_',' ','_','_','_','_','_','_','_','_','_','_'},
					  {'_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'},
					  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}};

	for(uint8 row_iterator = 0; row_iterator < 4; row_iterator++)
    275a:	8a 81       	ldd	r24, Y+2	; 0x02
    275c:	8f 5f       	subi	r24, 0xFF	; 255
    275e:	8a 83       	std	Y+2, r24	; 0x02
    2760:	8a 81       	ldd	r24, Y+2	; 0x02
    2762:	84 30       	cpi	r24, 0x04	; 4
    2764:	88 f2       	brcs	.-94     	; 0x2708 <CreateFrame2+0x8a>
		for(uint8 column_iterator = 0; column_iterator < 20; column_iterator++)
		{
			LCD_displayCharacter(*(*(frame1 + row_iterator) + column_iterator));
		}
	}
}
    2766:	c9 5a       	subi	r28, 0xA9	; 169
    2768:	df 4f       	sbci	r29, 0xFF	; 255
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <MoveFrame2>:

void MoveFrame2(void)
{
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	ea 97       	sbiw	r28, 0x3a	; 58
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	f8 94       	cli
    2788:	de bf       	out	0x3e, r29	; 62
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	cd bf       	out	0x3d, r28	; 61
	LCD_moveCursor(1,0);
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	60 e0       	ldi	r22, 0x00	; 0
    2792:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
	LCD_displayCharacter(0);
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>

	for(uint8 step = 1; step < 10; step++)
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	8a af       	std	Y+58, r24	; 0x3a
    27a0:	86 c0       	rjmp	.+268    	; 0x28ae <MoveFrame2+0x134>
	{
		LCD_moveCursor(1,step);
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	6a ad       	ldd	r22, Y+58	; 0x3a
    27a6:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
		LCD_displayCharacter(0);
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
		LCD_moveCursor(1,step - 1);
    27b0:	8a ad       	ldd	r24, Y+58	; 0x3a
    27b2:	98 2f       	mov	r25, r24
    27b4:	91 50       	subi	r25, 0x01	; 1
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	69 2f       	mov	r22, r25
    27ba:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
		LCD_displayCharacter('_');
    27be:	8f e5       	ldi	r24, 0x5F	; 95
    27c0:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	a8 ec       	ldi	r26, 0xC8	; 200
    27ca:	b2 e4       	ldi	r27, 0x42	; 66
    27cc:	8d ab       	std	Y+53, r24	; 0x35
    27ce:	9e ab       	std	Y+54, r25	; 0x36
    27d0:	af ab       	std	Y+55, r26	; 0x37
    27d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d4:	6d a9       	ldd	r22, Y+53	; 0x35
    27d6:	7e a9       	ldd	r23, Y+54	; 0x36
    27d8:	8f a9       	ldd	r24, Y+55	; 0x37
    27da:	98 ad       	ldd	r25, Y+56	; 0x38
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	4a e7       	ldi	r20, 0x7A	; 122
    27e2:	55 e4       	ldi	r21, 0x45	; 69
    27e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	89 ab       	std	Y+49, r24	; 0x31
    27ee:	9a ab       	std	Y+50, r25	; 0x32
    27f0:	ab ab       	std	Y+51, r26	; 0x33
    27f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27f4:	69 a9       	ldd	r22, Y+49	; 0x31
    27f6:	7a a9       	ldd	r23, Y+50	; 0x32
    27f8:	8b a9       	ldd	r24, Y+51	; 0x33
    27fa:	9c a9       	ldd	r25, Y+52	; 0x34
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e8       	ldi	r20, 0x80	; 128
    2802:	5f e3       	ldi	r21, 0x3F	; 63
    2804:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2808:	88 23       	and	r24, r24
    280a:	2c f4       	brge	.+10     	; 0x2816 <MoveFrame2+0x9c>
		__ticks = 1;
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	98 ab       	std	Y+48, r25	; 0x30
    2812:	8f a7       	std	Y+47, r24	; 0x2f
    2814:	3f c0       	rjmp	.+126    	; 0x2894 <MoveFrame2+0x11a>
	else if (__tmp > 65535)
    2816:	69 a9       	ldd	r22, Y+49	; 0x31
    2818:	7a a9       	ldd	r23, Y+50	; 0x32
    281a:	8b a9       	ldd	r24, Y+51	; 0x33
    281c:	9c a9       	ldd	r25, Y+52	; 0x34
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	3f ef       	ldi	r19, 0xFF	; 255
    2822:	4f e7       	ldi	r20, 0x7F	; 127
    2824:	57 e4       	ldi	r21, 0x47	; 71
    2826:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    282a:	18 16       	cp	r1, r24
    282c:	4c f5       	brge	.+82     	; 0x2880 <MoveFrame2+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282e:	6d a9       	ldd	r22, Y+53	; 0x35
    2830:	7e a9       	ldd	r23, Y+54	; 0x36
    2832:	8f a9       	ldd	r24, Y+55	; 0x37
    2834:	98 ad       	ldd	r25, Y+56	; 0x38
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	40 e2       	ldi	r20, 0x20	; 32
    283c:	51 e4       	ldi	r21, 0x41	; 65
    283e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	98 ab       	std	Y+48, r25	; 0x30
    2854:	8f a7       	std	Y+47, r24	; 0x2f
    2856:	0f c0       	rjmp	.+30     	; 0x2876 <MoveFrame2+0xfc>
    2858:	80 e9       	ldi	r24, 0x90	; 144
    285a:	91 e0       	ldi	r25, 0x01	; 1
    285c:	9e a7       	std	Y+46, r25	; 0x2e
    285e:	8d a7       	std	Y+45, r24	; 0x2d
    2860:	8d a5       	ldd	r24, Y+45	; 0x2d
    2862:	9e a5       	ldd	r25, Y+46	; 0x2e
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <MoveFrame2+0xea>
    2868:	9e a7       	std	Y+46, r25	; 0x2e
    286a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286c:	8f a5       	ldd	r24, Y+47	; 0x2f
    286e:	98 a9       	ldd	r25, Y+48	; 0x30
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	98 ab       	std	Y+48, r25	; 0x30
    2874:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2876:	8f a5       	ldd	r24, Y+47	; 0x2f
    2878:	98 a9       	ldd	r25, Y+48	; 0x30
    287a:	00 97       	sbiw	r24, 0x00	; 0
    287c:	69 f7       	brne	.-38     	; 0x2858 <MoveFrame2+0xde>
    287e:	14 c0       	rjmp	.+40     	; 0x28a8 <MoveFrame2+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2880:	69 a9       	ldd	r22, Y+49	; 0x31
    2882:	7a a9       	ldd	r23, Y+50	; 0x32
    2884:	8b a9       	ldd	r24, Y+51	; 0x33
    2886:	9c a9       	ldd	r25, Y+52	; 0x34
    2888:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	98 ab       	std	Y+48, r25	; 0x30
    2892:	8f a7       	std	Y+47, r24	; 0x2f
    2894:	8f a5       	ldd	r24, Y+47	; 0x2f
    2896:	98 a9       	ldd	r25, Y+48	; 0x30
    2898:	9c a7       	std	Y+44, r25	; 0x2c
    289a:	8b a7       	std	Y+43, r24	; 0x2b
    289c:	8b a5       	ldd	r24, Y+43	; 0x2b
    289e:	9c a5       	ldd	r25, Y+44	; 0x2c
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <MoveFrame2+0x126>
    28a4:	9c a7       	std	Y+44, r25	; 0x2c
    28a6:	8b a7       	std	Y+43, r24	; 0x2b
void MoveFrame2(void)
{
	LCD_moveCursor(1,0);
	LCD_displayCharacter(0);

	for(uint8 step = 1; step < 10; step++)
    28a8:	8a ad       	ldd	r24, Y+58	; 0x3a
    28aa:	8f 5f       	subi	r24, 0xFF	; 255
    28ac:	8a af       	std	Y+58, r24	; 0x3a
    28ae:	8a ad       	ldd	r24, Y+58	; 0x3a
    28b0:	8a 30       	cpi	r24, 0x0A	; 10
    28b2:	08 f4       	brcc	.+2      	; 0x28b6 <MoveFrame2+0x13c>
    28b4:	76 cf       	rjmp	.-276    	; 0x27a2 <MoveFrame2+0x28>
		LCD_moveCursor(1,step - 1);
		LCD_displayCharacter('_');
		_delay_ms(100);
	}

	LCD_moveCursor(1,9);
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	69 e0       	ldi	r22, 0x09	; 9
    28ba:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
	LCD_displayCharacter(' ');
    28be:	80 e2       	ldi	r24, 0x20	; 32
    28c0:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
	LCD_moveCursor(2,9);
    28c4:	82 e0       	ldi	r24, 0x02	; 2
    28c6:	69 e0       	ldi	r22, 0x09	; 9
    28c8:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
	LCD_displayCharacter(0);
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	a8 e4       	ldi	r26, 0x48	; 72
    28d8:	b3 e4       	ldi	r27, 0x43	; 67
    28da:	8f a3       	std	Y+39, r24	; 0x27
    28dc:	98 a7       	std	Y+40, r25	; 0x28
    28de:	a9 a7       	std	Y+41, r26	; 0x29
    28e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e2:	6f a1       	ldd	r22, Y+39	; 0x27
    28e4:	78 a5       	ldd	r23, Y+40	; 0x28
    28e6:	89 a5       	ldd	r24, Y+41	; 0x29
    28e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	4a e7       	ldi	r20, 0x7A	; 122
    28f0:	55 e4       	ldi	r21, 0x45	; 69
    28f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	8b a3       	std	Y+35, r24	; 0x23
    28fc:	9c a3       	std	Y+36, r25	; 0x24
    28fe:	ad a3       	std	Y+37, r26	; 0x25
    2900:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2902:	6b a1       	ldd	r22, Y+35	; 0x23
    2904:	7c a1       	ldd	r23, Y+36	; 0x24
    2906:	8d a1       	ldd	r24, Y+37	; 0x25
    2908:	9e a1       	ldd	r25, Y+38	; 0x26
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e8       	ldi	r20, 0x80	; 128
    2910:	5f e3       	ldi	r21, 0x3F	; 63
    2912:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2916:	88 23       	and	r24, r24
    2918:	2c f4       	brge	.+10     	; 0x2924 <MoveFrame2+0x1aa>
		__ticks = 1;
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	9a a3       	std	Y+34, r25	; 0x22
    2920:	89 a3       	std	Y+33, r24	; 0x21
    2922:	3f c0       	rjmp	.+126    	; 0x29a2 <MoveFrame2+0x228>
	else if (__tmp > 65535)
    2924:	6b a1       	ldd	r22, Y+35	; 0x23
    2926:	7c a1       	ldd	r23, Y+36	; 0x24
    2928:	8d a1       	ldd	r24, Y+37	; 0x25
    292a:	9e a1       	ldd	r25, Y+38	; 0x26
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	3f ef       	ldi	r19, 0xFF	; 255
    2930:	4f e7       	ldi	r20, 0x7F	; 127
    2932:	57 e4       	ldi	r21, 0x47	; 71
    2934:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2938:	18 16       	cp	r1, r24
    293a:	4c f5       	brge	.+82     	; 0x298e <MoveFrame2+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293c:	6f a1       	ldd	r22, Y+39	; 0x27
    293e:	78 a5       	ldd	r23, Y+40	; 0x28
    2940:	89 a5       	ldd	r24, Y+41	; 0x29
    2942:	9a a5       	ldd	r25, Y+42	; 0x2a
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e2       	ldi	r20, 0x20	; 32
    294a:	51 e4       	ldi	r21, 0x41	; 65
    294c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	bc 01       	movw	r22, r24
    2956:	cd 01       	movw	r24, r26
    2958:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	9a a3       	std	Y+34, r25	; 0x22
    2962:	89 a3       	std	Y+33, r24	; 0x21
    2964:	0f c0       	rjmp	.+30     	; 0x2984 <MoveFrame2+0x20a>
    2966:	80 e9       	ldi	r24, 0x90	; 144
    2968:	91 e0       	ldi	r25, 0x01	; 1
    296a:	98 a3       	std	Y+32, r25	; 0x20
    296c:	8f 8f       	std	Y+31, r24	; 0x1f
    296e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2970:	98 a1       	ldd	r25, Y+32	; 0x20
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	f1 f7       	brne	.-4      	; 0x2972 <MoveFrame2+0x1f8>
    2976:	98 a3       	std	Y+32, r25	; 0x20
    2978:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    297a:	89 a1       	ldd	r24, Y+33	; 0x21
    297c:	9a a1       	ldd	r25, Y+34	; 0x22
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	9a a3       	std	Y+34, r25	; 0x22
    2982:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2984:	89 a1       	ldd	r24, Y+33	; 0x21
    2986:	9a a1       	ldd	r25, Y+34	; 0x22
    2988:	00 97       	sbiw	r24, 0x00	; 0
    298a:	69 f7       	brne	.-38     	; 0x2966 <MoveFrame2+0x1ec>
    298c:	14 c0       	rjmp	.+40     	; 0x29b6 <MoveFrame2+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298e:	6b a1       	ldd	r22, Y+35	; 0x23
    2990:	7c a1       	ldd	r23, Y+36	; 0x24
    2992:	8d a1       	ldd	r24, Y+37	; 0x25
    2994:	9e a1       	ldd	r25, Y+38	; 0x26
    2996:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	9a a3       	std	Y+34, r25	; 0x22
    29a0:	89 a3       	std	Y+33, r24	; 0x21
    29a2:	89 a1       	ldd	r24, Y+33	; 0x21
    29a4:	9a a1       	ldd	r25, Y+34	; 0x22
    29a6:	9e 8f       	std	Y+30, r25	; 0x1e
    29a8:	8d 8f       	std	Y+29, r24	; 0x1d
    29aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	f1 f7       	brne	.-4      	; 0x29ae <MoveFrame2+0x234>
    29b2:	9e 8f       	std	Y+30, r25	; 0x1e
    29b4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);

	for(uint8 step = 10; step < 20; step++)
    29b6:	8a e0       	ldi	r24, 0x0A	; 10
    29b8:	89 af       	std	Y+57, r24	; 0x39
    29ba:	86 c0       	rjmp	.+268    	; 0x2ac8 <MoveFrame2+0x34e>
	{
		LCD_moveCursor(2,step);
    29bc:	82 e0       	ldi	r24, 0x02	; 2
    29be:	69 ad       	ldd	r22, Y+57	; 0x39
    29c0:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
		LCD_displayCharacter(0);
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
		LCD_moveCursor(2,step - 1);
    29ca:	89 ad       	ldd	r24, Y+57	; 0x39
    29cc:	98 2f       	mov	r25, r24
    29ce:	91 50       	subi	r25, 0x01	; 1
    29d0:	82 e0       	ldi	r24, 0x02	; 2
    29d2:	69 2f       	mov	r22, r25
    29d4:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
		LCD_displayCharacter('_');
    29d8:	8f e5       	ldi	r24, 0x5F	; 95
    29da:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	a8 ec       	ldi	r26, 0xC8	; 200
    29e4:	b2 e4       	ldi	r27, 0x42	; 66
    29e6:	89 8f       	std	Y+25, r24	; 0x19
    29e8:	9a 8f       	std	Y+26, r25	; 0x1a
    29ea:	ab 8f       	std	Y+27, r26	; 0x1b
    29ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ee:	69 8d       	ldd	r22, Y+25	; 0x19
    29f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	4a e7       	ldi	r20, 0x7A	; 122
    29fc:	55 e4       	ldi	r21, 0x45	; 69
    29fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	8d 8b       	std	Y+21, r24	; 0x15
    2a08:	9e 8b       	std	Y+22, r25	; 0x16
    2a0a:	af 8b       	std	Y+23, r26	; 0x17
    2a0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a10:	7e 89       	ldd	r23, Y+22	; 0x16
    2a12:	8f 89       	ldd	r24, Y+23	; 0x17
    2a14:	98 8d       	ldd	r25, Y+24	; 0x18
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	40 e8       	ldi	r20, 0x80	; 128
    2a1c:	5f e3       	ldi	r21, 0x3F	; 63
    2a1e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a22:	88 23       	and	r24, r24
    2a24:	2c f4       	brge	.+10     	; 0x2a30 <MoveFrame2+0x2b6>
		__ticks = 1;
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	9c 8b       	std	Y+20, r25	; 0x14
    2a2c:	8b 8b       	std	Y+19, r24	; 0x13
    2a2e:	3f c0       	rjmp	.+126    	; 0x2aae <MoveFrame2+0x334>
	else if (__tmp > 65535)
    2a30:	6d 89       	ldd	r22, Y+21	; 0x15
    2a32:	7e 89       	ldd	r23, Y+22	; 0x16
    2a34:	8f 89       	ldd	r24, Y+23	; 0x17
    2a36:	98 8d       	ldd	r25, Y+24	; 0x18
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	3f ef       	ldi	r19, 0xFF	; 255
    2a3c:	4f e7       	ldi	r20, 0x7F	; 127
    2a3e:	57 e4       	ldi	r21, 0x47	; 71
    2a40:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a44:	18 16       	cp	r1, r24
    2a46:	4c f5       	brge	.+82     	; 0x2a9a <MoveFrame2+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a48:	69 8d       	ldd	r22, Y+25	; 0x19
    2a4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	40 e2       	ldi	r20, 0x20	; 32
    2a56:	51 e4       	ldi	r21, 0x41	; 65
    2a58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	bc 01       	movw	r22, r24
    2a62:	cd 01       	movw	r24, r26
    2a64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	9c 8b       	std	Y+20, r25	; 0x14
    2a6e:	8b 8b       	std	Y+19, r24	; 0x13
    2a70:	0f c0       	rjmp	.+30     	; 0x2a90 <MoveFrame2+0x316>
    2a72:	80 e9       	ldi	r24, 0x90	; 144
    2a74:	91 e0       	ldi	r25, 0x01	; 1
    2a76:	9a 8b       	std	Y+18, r25	; 0x12
    2a78:	89 8b       	std	Y+17, r24	; 0x11
    2a7a:	89 89       	ldd	r24, Y+17	; 0x11
    2a7c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a7e:	01 97       	sbiw	r24, 0x01	; 1
    2a80:	f1 f7       	brne	.-4      	; 0x2a7e <MoveFrame2+0x304>
    2a82:	9a 8b       	std	Y+18, r25	; 0x12
    2a84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a86:	8b 89       	ldd	r24, Y+19	; 0x13
    2a88:	9c 89       	ldd	r25, Y+20	; 0x14
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	9c 8b       	std	Y+20, r25	; 0x14
    2a8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a90:	8b 89       	ldd	r24, Y+19	; 0x13
    2a92:	9c 89       	ldd	r25, Y+20	; 0x14
    2a94:	00 97       	sbiw	r24, 0x00	; 0
    2a96:	69 f7       	brne	.-38     	; 0x2a72 <MoveFrame2+0x2f8>
    2a98:	14 c0       	rjmp	.+40     	; 0x2ac2 <MoveFrame2+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa0:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	9c 8b       	std	Y+20, r25	; 0x14
    2aac:	8b 8b       	std	Y+19, r24	; 0x13
    2aae:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab2:	98 8b       	std	Y+16, r25	; 0x10
    2ab4:	8f 87       	std	Y+15, r24	; 0x0f
    2ab6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ab8:	98 89       	ldd	r25, Y+16	; 0x10
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	f1 f7       	brne	.-4      	; 0x2aba <MoveFrame2+0x340>
    2abe:	98 8b       	std	Y+16, r25	; 0x10
    2ac0:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_displayCharacter(' ');
	LCD_moveCursor(2,9);
	LCD_displayCharacter(0);
	_delay_ms(200);

	for(uint8 step = 10; step < 20; step++)
    2ac2:	89 ad       	ldd	r24, Y+57	; 0x39
    2ac4:	8f 5f       	subi	r24, 0xFF	; 255
    2ac6:	89 af       	std	Y+57, r24	; 0x39
    2ac8:	89 ad       	ldd	r24, Y+57	; 0x39
    2aca:	84 31       	cpi	r24, 0x14	; 20
    2acc:	08 f4       	brcc	.+2      	; 0x2ad0 <MoveFrame2+0x356>
    2ace:	76 cf       	rjmp	.-276    	; 0x29bc <MoveFrame2+0x242>
		LCD_moveCursor(2,step - 1);
		LCD_displayCharacter('_');
		_delay_ms(100);
	}

	LCD_moveCursor(2,19);
    2ad0:	82 e0       	ldi	r24, 0x02	; 2
    2ad2:	63 e1       	ldi	r22, 0x13	; 19
    2ad4:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
	LCD_displayCharacter('_');
    2ad8:	8f e5       	ldi	r24, 0x5F	; 95
    2ada:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	a6 e1       	ldi	r26, 0x16	; 22
    2ae4:	b3 e4       	ldi	r27, 0x43	; 67
    2ae6:	8b 87       	std	Y+11, r24	; 0x0b
    2ae8:	9c 87       	std	Y+12, r25	; 0x0c
    2aea:	ad 87       	std	Y+13, r26	; 0x0d
    2aec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2af2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2af4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	4a e7       	ldi	r20, 0x7A	; 122
    2afc:	55 e4       	ldi	r21, 0x45	; 69
    2afe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	8f 83       	std	Y+7, r24	; 0x07
    2b08:	98 87       	std	Y+8, r25	; 0x08
    2b0a:	a9 87       	std	Y+9, r26	; 0x09
    2b0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b10:	78 85       	ldd	r23, Y+8	; 0x08
    2b12:	89 85       	ldd	r24, Y+9	; 0x09
    2b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	40 e8       	ldi	r20, 0x80	; 128
    2b1c:	5f e3       	ldi	r21, 0x3F	; 63
    2b1e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b22:	88 23       	and	r24, r24
    2b24:	2c f4       	brge	.+10     	; 0x2b30 <MoveFrame2+0x3b6>
		__ticks = 1;
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	9e 83       	std	Y+6, r25	; 0x06
    2b2c:	8d 83       	std	Y+5, r24	; 0x05
    2b2e:	3f c0       	rjmp	.+126    	; 0x2bae <MoveFrame2+0x434>
	else if (__tmp > 65535)
    2b30:	6f 81       	ldd	r22, Y+7	; 0x07
    2b32:	78 85       	ldd	r23, Y+8	; 0x08
    2b34:	89 85       	ldd	r24, Y+9	; 0x09
    2b36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	3f ef       	ldi	r19, 0xFF	; 255
    2b3c:	4f e7       	ldi	r20, 0x7F	; 127
    2b3e:	57 e4       	ldi	r21, 0x47	; 71
    2b40:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b44:	18 16       	cp	r1, r24
    2b46:	4c f5       	brge	.+82     	; 0x2b9a <MoveFrame2+0x420>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	40 e2       	ldi	r20, 0x20	; 32
    2b56:	51 e4       	ldi	r21, 0x41	; 65
    2b58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	bc 01       	movw	r22, r24
    2b62:	cd 01       	movw	r24, r26
    2b64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	9e 83       	std	Y+6, r25	; 0x06
    2b6e:	8d 83       	std	Y+5, r24	; 0x05
    2b70:	0f c0       	rjmp	.+30     	; 0x2b90 <MoveFrame2+0x416>
    2b72:	80 e9       	ldi	r24, 0x90	; 144
    2b74:	91 e0       	ldi	r25, 0x01	; 1
    2b76:	9c 83       	std	Y+4, r25	; 0x04
    2b78:	8b 83       	std	Y+3, r24	; 0x03
    2b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	f1 f7       	brne	.-4      	; 0x2b7e <MoveFrame2+0x404>
    2b82:	9c 83       	std	Y+4, r25	; 0x04
    2b84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b86:	8d 81       	ldd	r24, Y+5	; 0x05
    2b88:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8a:	01 97       	sbiw	r24, 0x01	; 1
    2b8c:	9e 83       	std	Y+6, r25	; 0x06
    2b8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b90:	8d 81       	ldd	r24, Y+5	; 0x05
    2b92:	9e 81       	ldd	r25, Y+6	; 0x06
    2b94:	00 97       	sbiw	r24, 0x00	; 0
    2b96:	69 f7       	brne	.-38     	; 0x2b72 <MoveFrame2+0x3f8>
    2b98:	14 c0       	rjmp	.+40     	; 0x2bc2 <MoveFrame2+0x448>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b9c:	78 85       	ldd	r23, Y+8	; 0x08
    2b9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	9e 83       	std	Y+6, r25	; 0x06
    2bac:	8d 83       	std	Y+5, r24	; 0x05
    2bae:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb2:	9a 83       	std	Y+2, r25	; 0x02
    2bb4:	89 83       	std	Y+1, r24	; 0x01
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bba:	01 97       	sbiw	r24, 0x01	; 1
    2bbc:	f1 f7       	brne	.-4      	; 0x2bba <MoveFrame2+0x440>
    2bbe:	9a 83       	std	Y+2, r25	; 0x02
    2bc0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(150);
}
    2bc2:	ea 96       	adiw	r28, 0x3a	; 58
    2bc4:	0f b6       	in	r0, 0x3f	; 63
    2bc6:	f8 94       	cli
    2bc8:	de bf       	out	0x3e, r29	; 62
    2bca:	0f be       	out	0x3f, r0	; 63
    2bcc:	cd bf       	out	0x3d, r28	; 61
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	08 95       	ret

00002bd4 <CreateFrame3>:

void CreateFrame3(void)
{
    2bd4:	df 93       	push	r29
    2bd6:	cf 93       	push	r28
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	c7 55       	subi	r28, 0x57	; 87
    2bde:	d0 40       	sbci	r29, 0x00	; 0
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	f8 94       	cli
    2be4:	de bf       	out	0x3e, r29	; 62
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	cd bf       	out	0x3d, r28	; 61
	uint8 frame1[][20] = {{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
	                  {'_','_','_','_','_','_','_','_','_',' ','_','_','_','_','_','_','_','_','_','_'},
					  {'_','_','_','_','_','_','_','_','_',1,'_','_','_','_','_','_','_','_','_','_'},
					  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}};
    2bea:	ce 01       	movw	r24, r28
    2bec:	03 96       	adiw	r24, 0x03	; 3
    2bee:	65 96       	adiw	r28, 0x15	; 21
    2bf0:	9f af       	std	Y+63, r25	; 0x3f
    2bf2:	8e af       	std	Y+62, r24	; 0x3e
    2bf4:	65 97       	sbiw	r28, 0x15	; 21
    2bf6:	e0 e2       	ldi	r30, 0x20	; 32
    2bf8:	f1 e0       	ldi	r31, 0x01	; 1
    2bfa:	67 96       	adiw	r28, 0x17	; 23
    2bfc:	ff af       	std	Y+63, r31	; 0x3f
    2bfe:	ee af       	std	Y+62, r30	; 0x3e
    2c00:	67 97       	sbiw	r28, 0x17	; 23
    2c02:	f0 e5       	ldi	r31, 0x50	; 80
    2c04:	68 96       	adiw	r28, 0x18	; 24
    2c06:	ff af       	std	Y+63, r31	; 0x3f
    2c08:	68 97       	sbiw	r28, 0x18	; 24
    2c0a:	67 96       	adiw	r28, 0x17	; 23
    2c0c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c0e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c10:	67 97       	sbiw	r28, 0x17	; 23
    2c12:	00 80       	ld	r0, Z
    2c14:	67 96       	adiw	r28, 0x17	; 23
    2c16:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c18:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c1a:	67 97       	sbiw	r28, 0x17	; 23
    2c1c:	01 96       	adiw	r24, 0x01	; 1
    2c1e:	67 96       	adiw	r28, 0x17	; 23
    2c20:	9f af       	std	Y+63, r25	; 0x3f
    2c22:	8e af       	std	Y+62, r24	; 0x3e
    2c24:	67 97       	sbiw	r28, 0x17	; 23
    2c26:	65 96       	adiw	r28, 0x15	; 21
    2c28:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c2a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c2c:	65 97       	sbiw	r28, 0x15	; 21
    2c2e:	00 82       	st	Z, r0
    2c30:	65 96       	adiw	r28, 0x15	; 21
    2c32:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c34:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c36:	65 97       	sbiw	r28, 0x15	; 21
    2c38:	01 96       	adiw	r24, 0x01	; 1
    2c3a:	65 96       	adiw	r28, 0x15	; 21
    2c3c:	9f af       	std	Y+63, r25	; 0x3f
    2c3e:	8e af       	std	Y+62, r24	; 0x3e
    2c40:	65 97       	sbiw	r28, 0x15	; 21
    2c42:	68 96       	adiw	r28, 0x18	; 24
    2c44:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c46:	68 97       	sbiw	r28, 0x18	; 24
    2c48:	91 50       	subi	r25, 0x01	; 1
    2c4a:	68 96       	adiw	r28, 0x18	; 24
    2c4c:	9f af       	std	Y+63, r25	; 0x3f
    2c4e:	68 97       	sbiw	r28, 0x18	; 24
    2c50:	68 96       	adiw	r28, 0x18	; 24
    2c52:	ef ad       	ldd	r30, Y+63	; 0x3f
    2c54:	68 97       	sbiw	r28, 0x18	; 24
    2c56:	ee 23       	and	r30, r30
    2c58:	c1 f6       	brne	.-80     	; 0x2c0a <CreateFrame3+0x36>

	for(uint8 row_iterator = 0; row_iterator < 4; row_iterator++)
    2c5a:	1a 82       	std	Y+2, r1	; 0x02
    2c5c:	2c c0       	rjmp	.+88     	; 0x2cb6 <CreateFrame3+0xe2>
	{
		LCD_moveCursor(row_iterator,0);
    2c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c60:	60 e0       	ldi	r22, 0x00	; 0
    2c62:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
		for(uint8 column_iterator = 0; column_iterator < 20; column_iterator++)
    2c66:	19 82       	std	Y+1, r1	; 0x01
    2c68:	20 c0       	rjmp	.+64     	; 0x2caa <CreateFrame3+0xd6>
		{
			LCD_displayCharacter(*(*(frame1 + row_iterator) + column_iterator));
    2c6a:	ae 01       	movw	r20, r28
    2c6c:	4d 5f       	subi	r20, 0xFD	; 253
    2c6e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c70:	8a 81       	ldd	r24, Y+2	; 0x02
    2c72:	88 2f       	mov	r24, r24
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	9c 01       	movw	r18, r24
    2c78:	22 0f       	add	r18, r18
    2c7a:	33 1f       	adc	r19, r19
    2c7c:	22 0f       	add	r18, r18
    2c7e:	33 1f       	adc	r19, r19
    2c80:	c9 01       	movw	r24, r18
    2c82:	88 0f       	add	r24, r24
    2c84:	99 1f       	adc	r25, r25
    2c86:	88 0f       	add	r24, r24
    2c88:	99 1f       	adc	r25, r25
    2c8a:	28 0f       	add	r18, r24
    2c8c:	39 1f       	adc	r19, r25
    2c8e:	89 81       	ldd	r24, Y+1	; 0x01
    2c90:	88 2f       	mov	r24, r24
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	82 0f       	add	r24, r18
    2c96:	93 1f       	adc	r25, r19
    2c98:	fa 01       	movw	r30, r20
    2c9a:	e8 0f       	add	r30, r24
    2c9c:	f9 1f       	adc	r31, r25
    2c9e:	80 81       	ld	r24, Z
    2ca0:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
					  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}};

	for(uint8 row_iterator = 0; row_iterator < 4; row_iterator++)
	{
		LCD_moveCursor(row_iterator,0);
		for(uint8 column_iterator = 0; column_iterator < 20; column_iterator++)
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	8f 5f       	subi	r24, 0xFF	; 255
    2ca8:	89 83       	std	Y+1, r24	; 0x01
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	84 31       	cpi	r24, 0x14	; 20
    2cae:	e8 f2       	brcs	.-70     	; 0x2c6a <CreateFrame3+0x96>
	uint8 frame1[][20] = {{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
	                  {'_','_','_','_','_','_','_','_','_',' ','_','_','_','_','_','_','_','_','_','_'},
					  {'_','_','_','_','_','_','_','_','_',1,'_','_','_','_','_','_','_','_','_','_'},
					  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}};

	for(uint8 row_iterator = 0; row_iterator < 4; row_iterator++)
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	8f 5f       	subi	r24, 0xFF	; 255
    2cb4:	8a 83       	std	Y+2, r24	; 0x02
    2cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb8:	84 30       	cpi	r24, 0x04	; 4
    2cba:	88 f2       	brcs	.-94     	; 0x2c5e <CreateFrame3+0x8a>
		for(uint8 column_iterator = 0; column_iterator < 20; column_iterator++)
		{
			LCD_displayCharacter(*(*(frame1 + row_iterator) + column_iterator));
		}
	}
}
    2cbc:	c9 5a       	subi	r28, 0xA9	; 169
    2cbe:	df 4f       	sbci	r29, 0xFF	; 255
    2cc0:	0f b6       	in	r0, 0x3f	; 63
    2cc2:	f8 94       	cli
    2cc4:	de bf       	out	0x3e, r29	; 62
    2cc6:	0f be       	out	0x3f, r0	; 63
    2cc8:	cd bf       	out	0x3d, r28	; 61
    2cca:	cf 91       	pop	r28
    2ccc:	df 91       	pop	r29
    2cce:	08 95       	ret

00002cd0 <MoveFrame3>:

void MoveFrame3(void)
{
    2cd0:	df 93       	push	r29
    2cd2:	cf 93       	push	r28
    2cd4:	cd b7       	in	r28, 0x3d	; 61
    2cd6:	de b7       	in	r29, 0x3e	; 62
    2cd8:	ea 97       	sbiw	r28, 0x3a	; 58
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	f8 94       	cli
    2cde:	de bf       	out	0x3e, r29	; 62
    2ce0:	0f be       	out	0x3f, r0	; 63
    2ce2:	cd bf       	out	0x3d, r28	; 61
	LCD_moveCursor(2,0);
    2ce4:	82 e0       	ldi	r24, 0x02	; 2
    2ce6:	60 e0       	ldi	r22, 0x00	; 0
    2ce8:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
	LCD_displayCharacter(0);
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>

	for(uint8 step = 1; step < 10; step++)
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	8a af       	std	Y+58, r24	; 0x3a
    2cf6:	86 c0       	rjmp	.+268    	; 0x2e04 <MoveFrame3+0x134>
	{
		LCD_moveCursor(2,step);
    2cf8:	82 e0       	ldi	r24, 0x02	; 2
    2cfa:	6a ad       	ldd	r22, Y+58	; 0x3a
    2cfc:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
		LCD_displayCharacter(0);
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
		LCD_moveCursor(2,step - 1);
    2d06:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d08:	98 2f       	mov	r25, r24
    2d0a:	91 50       	subi	r25, 0x01	; 1
    2d0c:	82 e0       	ldi	r24, 0x02	; 2
    2d0e:	69 2f       	mov	r22, r25
    2d10:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
		LCD_displayCharacter('_');
    2d14:	8f e5       	ldi	r24, 0x5F	; 95
    2d16:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	a8 ec       	ldi	r26, 0xC8	; 200
    2d20:	b2 e4       	ldi	r27, 0x42	; 66
    2d22:	8d ab       	std	Y+53, r24	; 0x35
    2d24:	9e ab       	std	Y+54, r25	; 0x36
    2d26:	af ab       	std	Y+55, r26	; 0x37
    2d28:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d2a:	6d a9       	ldd	r22, Y+53	; 0x35
    2d2c:	7e a9       	ldd	r23, Y+54	; 0x36
    2d2e:	8f a9       	ldd	r24, Y+55	; 0x37
    2d30:	98 ad       	ldd	r25, Y+56	; 0x38
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	4a e7       	ldi	r20, 0x7A	; 122
    2d38:	55 e4       	ldi	r21, 0x45	; 69
    2d3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	89 ab       	std	Y+49, r24	; 0x31
    2d44:	9a ab       	std	Y+50, r25	; 0x32
    2d46:	ab ab       	std	Y+51, r26	; 0x33
    2d48:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d4a:	69 a9       	ldd	r22, Y+49	; 0x31
    2d4c:	7a a9       	ldd	r23, Y+50	; 0x32
    2d4e:	8b a9       	ldd	r24, Y+51	; 0x33
    2d50:	9c a9       	ldd	r25, Y+52	; 0x34
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	40 e8       	ldi	r20, 0x80	; 128
    2d58:	5f e3       	ldi	r21, 0x3F	; 63
    2d5a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d5e:	88 23       	and	r24, r24
    2d60:	2c f4       	brge	.+10     	; 0x2d6c <MoveFrame3+0x9c>
		__ticks = 1;
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	98 ab       	std	Y+48, r25	; 0x30
    2d68:	8f a7       	std	Y+47, r24	; 0x2f
    2d6a:	3f c0       	rjmp	.+126    	; 0x2dea <MoveFrame3+0x11a>
	else if (__tmp > 65535)
    2d6c:	69 a9       	ldd	r22, Y+49	; 0x31
    2d6e:	7a a9       	ldd	r23, Y+50	; 0x32
    2d70:	8b a9       	ldd	r24, Y+51	; 0x33
    2d72:	9c a9       	ldd	r25, Y+52	; 0x34
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	3f ef       	ldi	r19, 0xFF	; 255
    2d78:	4f e7       	ldi	r20, 0x7F	; 127
    2d7a:	57 e4       	ldi	r21, 0x47	; 71
    2d7c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d80:	18 16       	cp	r1, r24
    2d82:	4c f5       	brge	.+82     	; 0x2dd6 <MoveFrame3+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d84:	6d a9       	ldd	r22, Y+53	; 0x35
    2d86:	7e a9       	ldd	r23, Y+54	; 0x36
    2d88:	8f a9       	ldd	r24, Y+55	; 0x37
    2d8a:	98 ad       	ldd	r25, Y+56	; 0x38
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	40 e2       	ldi	r20, 0x20	; 32
    2d92:	51 e4       	ldi	r21, 0x41	; 65
    2d94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	bc 01       	movw	r22, r24
    2d9e:	cd 01       	movw	r24, r26
    2da0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	98 ab       	std	Y+48, r25	; 0x30
    2daa:	8f a7       	std	Y+47, r24	; 0x2f
    2dac:	0f c0       	rjmp	.+30     	; 0x2dcc <MoveFrame3+0xfc>
    2dae:	80 e9       	ldi	r24, 0x90	; 144
    2db0:	91 e0       	ldi	r25, 0x01	; 1
    2db2:	9e a7       	std	Y+46, r25	; 0x2e
    2db4:	8d a7       	std	Y+45, r24	; 0x2d
    2db6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2db8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	f1 f7       	brne	.-4      	; 0x2dba <MoveFrame3+0xea>
    2dbe:	9e a7       	std	Y+46, r25	; 0x2e
    2dc0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dc4:	98 a9       	ldd	r25, Y+48	; 0x30
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	98 ab       	std	Y+48, r25	; 0x30
    2dca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dce:	98 a9       	ldd	r25, Y+48	; 0x30
    2dd0:	00 97       	sbiw	r24, 0x00	; 0
    2dd2:	69 f7       	brne	.-38     	; 0x2dae <MoveFrame3+0xde>
    2dd4:	14 c0       	rjmp	.+40     	; 0x2dfe <MoveFrame3+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd6:	69 a9       	ldd	r22, Y+49	; 0x31
    2dd8:	7a a9       	ldd	r23, Y+50	; 0x32
    2dda:	8b a9       	ldd	r24, Y+51	; 0x33
    2ddc:	9c a9       	ldd	r25, Y+52	; 0x34
    2dde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	98 ab       	std	Y+48, r25	; 0x30
    2de8:	8f a7       	std	Y+47, r24	; 0x2f
    2dea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dec:	98 a9       	ldd	r25, Y+48	; 0x30
    2dee:	9c a7       	std	Y+44, r25	; 0x2c
    2df0:	8b a7       	std	Y+43, r24	; 0x2b
    2df2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2df4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	f1 f7       	brne	.-4      	; 0x2df6 <MoveFrame3+0x126>
    2dfa:	9c a7       	std	Y+44, r25	; 0x2c
    2dfc:	8b a7       	std	Y+43, r24	; 0x2b
void MoveFrame3(void)
{
	LCD_moveCursor(2,0);
	LCD_displayCharacter(0);

	for(uint8 step = 1; step < 10; step++)
    2dfe:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e00:	8f 5f       	subi	r24, 0xFF	; 255
    2e02:	8a af       	std	Y+58, r24	; 0x3a
    2e04:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e06:	8a 30       	cpi	r24, 0x0A	; 10
    2e08:	08 f4       	brcc	.+2      	; 0x2e0c <MoveFrame3+0x13c>
    2e0a:	76 cf       	rjmp	.-276    	; 0x2cf8 <MoveFrame3+0x28>
		LCD_moveCursor(2,step - 1);
		LCD_displayCharacter('_');
		_delay_ms(100);
	}

	LCD_moveCursor(1,9);
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	69 e0       	ldi	r22, 0x09	; 9
    2e10:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
	LCD_displayCharacter(0);
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
	LCD_moveCursor(2,9);
    2e1a:	82 e0       	ldi	r24, 0x02	; 2
    2e1c:	69 e0       	ldi	r22, 0x09	; 9
    2e1e:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
	LCD_displayCharacter(1);
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	a8 e4       	ldi	r26, 0x48	; 72
    2e2e:	b3 e4       	ldi	r27, 0x43	; 67
    2e30:	8f a3       	std	Y+39, r24	; 0x27
    2e32:	98 a7       	std	Y+40, r25	; 0x28
    2e34:	a9 a7       	std	Y+41, r26	; 0x29
    2e36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e38:	6f a1       	ldd	r22, Y+39	; 0x27
    2e3a:	78 a5       	ldd	r23, Y+40	; 0x28
    2e3c:	89 a5       	ldd	r24, Y+41	; 0x29
    2e3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	4a e7       	ldi	r20, 0x7A	; 122
    2e46:	55 e4       	ldi	r21, 0x45	; 69
    2e48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	8b a3       	std	Y+35, r24	; 0x23
    2e52:	9c a3       	std	Y+36, r25	; 0x24
    2e54:	ad a3       	std	Y+37, r26	; 0x25
    2e56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e58:	6b a1       	ldd	r22, Y+35	; 0x23
    2e5a:	7c a1       	ldd	r23, Y+36	; 0x24
    2e5c:	8d a1       	ldd	r24, Y+37	; 0x25
    2e5e:	9e a1       	ldd	r25, Y+38	; 0x26
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e8       	ldi	r20, 0x80	; 128
    2e66:	5f e3       	ldi	r21, 0x3F	; 63
    2e68:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e6c:	88 23       	and	r24, r24
    2e6e:	2c f4       	brge	.+10     	; 0x2e7a <MoveFrame3+0x1aa>
		__ticks = 1;
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	9a a3       	std	Y+34, r25	; 0x22
    2e76:	89 a3       	std	Y+33, r24	; 0x21
    2e78:	3f c0       	rjmp	.+126    	; 0x2ef8 <MoveFrame3+0x228>
	else if (__tmp > 65535)
    2e7a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e7c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e80:	9e a1       	ldd	r25, Y+38	; 0x26
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	3f ef       	ldi	r19, 0xFF	; 255
    2e86:	4f e7       	ldi	r20, 0x7F	; 127
    2e88:	57 e4       	ldi	r21, 0x47	; 71
    2e8a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e8e:	18 16       	cp	r1, r24
    2e90:	4c f5       	brge	.+82     	; 0x2ee4 <MoveFrame3+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e92:	6f a1       	ldd	r22, Y+39	; 0x27
    2e94:	78 a5       	ldd	r23, Y+40	; 0x28
    2e96:	89 a5       	ldd	r24, Y+41	; 0x29
    2e98:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	40 e2       	ldi	r20, 0x20	; 32
    2ea0:	51 e4       	ldi	r21, 0x41	; 65
    2ea2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	bc 01       	movw	r22, r24
    2eac:	cd 01       	movw	r24, r26
    2eae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	9a a3       	std	Y+34, r25	; 0x22
    2eb8:	89 a3       	std	Y+33, r24	; 0x21
    2eba:	0f c0       	rjmp	.+30     	; 0x2eda <MoveFrame3+0x20a>
    2ebc:	80 e9       	ldi	r24, 0x90	; 144
    2ebe:	91 e0       	ldi	r25, 0x01	; 1
    2ec0:	98 a3       	std	Y+32, r25	; 0x20
    2ec2:	8f 8f       	std	Y+31, r24	; 0x1f
    2ec4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ec6:	98 a1       	ldd	r25, Y+32	; 0x20
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	f1 f7       	brne	.-4      	; 0x2ec8 <MoveFrame3+0x1f8>
    2ecc:	98 a3       	std	Y+32, r25	; 0x20
    2ece:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ed2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	9a a3       	std	Y+34, r25	; 0x22
    2ed8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eda:	89 a1       	ldd	r24, Y+33	; 0x21
    2edc:	9a a1       	ldd	r25, Y+34	; 0x22
    2ede:	00 97       	sbiw	r24, 0x00	; 0
    2ee0:	69 f7       	brne	.-38     	; 0x2ebc <MoveFrame3+0x1ec>
    2ee2:	14 c0       	rjmp	.+40     	; 0x2f0c <MoveFrame3+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ee6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ee8:	8d a1       	ldd	r24, Y+37	; 0x25
    2eea:	9e a1       	ldd	r25, Y+38	; 0x26
    2eec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	9a a3       	std	Y+34, r25	; 0x22
    2ef6:	89 a3       	std	Y+33, r24	; 0x21
    2ef8:	89 a1       	ldd	r24, Y+33	; 0x21
    2efa:	9a a1       	ldd	r25, Y+34	; 0x22
    2efc:	9e 8f       	std	Y+30, r25	; 0x1e
    2efe:	8d 8f       	std	Y+29, r24	; 0x1d
    2f00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	f1 f7       	brne	.-4      	; 0x2f04 <MoveFrame3+0x234>
    2f08:	9e 8f       	std	Y+30, r25	; 0x1e
    2f0a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);

	for(uint8 step = 10; step < 20; step++)
    2f0c:	8a e0       	ldi	r24, 0x0A	; 10
    2f0e:	89 af       	std	Y+57, r24	; 0x39
    2f10:	86 c0       	rjmp	.+268    	; 0x301e <MoveFrame3+0x34e>
	{
		LCD_moveCursor(1,step);
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	69 ad       	ldd	r22, Y+57	; 0x39
    2f16:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
		LCD_displayCharacter(0);
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
		LCD_moveCursor(1,step - 1);
    2f20:	89 ad       	ldd	r24, Y+57	; 0x39
    2f22:	98 2f       	mov	r25, r24
    2f24:	91 50       	subi	r25, 0x01	; 1
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	69 2f       	mov	r22, r25
    2f2a:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
		LCD_displayCharacter('_');
    2f2e:	8f e5       	ldi	r24, 0x5F	; 95
    2f30:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	a8 ec       	ldi	r26, 0xC8	; 200
    2f3a:	b2 e4       	ldi	r27, 0x42	; 66
    2f3c:	89 8f       	std	Y+25, r24	; 0x19
    2f3e:	9a 8f       	std	Y+26, r25	; 0x1a
    2f40:	ab 8f       	std	Y+27, r26	; 0x1b
    2f42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f44:	69 8d       	ldd	r22, Y+25	; 0x19
    2f46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	4a e7       	ldi	r20, 0x7A	; 122
    2f52:	55 e4       	ldi	r21, 0x45	; 69
    2f54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	8d 8b       	std	Y+21, r24	; 0x15
    2f5e:	9e 8b       	std	Y+22, r25	; 0x16
    2f60:	af 8b       	std	Y+23, r26	; 0x17
    2f62:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f64:	6d 89       	ldd	r22, Y+21	; 0x15
    2f66:	7e 89       	ldd	r23, Y+22	; 0x16
    2f68:	8f 89       	ldd	r24, Y+23	; 0x17
    2f6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	40 e8       	ldi	r20, 0x80	; 128
    2f72:	5f e3       	ldi	r21, 0x3F	; 63
    2f74:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2f78:	88 23       	and	r24, r24
    2f7a:	2c f4       	brge	.+10     	; 0x2f86 <MoveFrame3+0x2b6>
		__ticks = 1;
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	9c 8b       	std	Y+20, r25	; 0x14
    2f82:	8b 8b       	std	Y+19, r24	; 0x13
    2f84:	3f c0       	rjmp	.+126    	; 0x3004 <MoveFrame3+0x334>
	else if (__tmp > 65535)
    2f86:	6d 89       	ldd	r22, Y+21	; 0x15
    2f88:	7e 89       	ldd	r23, Y+22	; 0x16
    2f8a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f8c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	3f ef       	ldi	r19, 0xFF	; 255
    2f92:	4f e7       	ldi	r20, 0x7F	; 127
    2f94:	57 e4       	ldi	r21, 0x47	; 71
    2f96:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2f9a:	18 16       	cp	r1, r24
    2f9c:	4c f5       	brge	.+82     	; 0x2ff0 <MoveFrame3+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9e:	69 8d       	ldd	r22, Y+25	; 0x19
    2fa0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fa2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fa4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	40 e2       	ldi	r20, 0x20	; 32
    2fac:	51 e4       	ldi	r21, 0x41	; 65
    2fae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	bc 01       	movw	r22, r24
    2fb8:	cd 01       	movw	r24, r26
    2fba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	9c 8b       	std	Y+20, r25	; 0x14
    2fc4:	8b 8b       	std	Y+19, r24	; 0x13
    2fc6:	0f c0       	rjmp	.+30     	; 0x2fe6 <MoveFrame3+0x316>
    2fc8:	80 e9       	ldi	r24, 0x90	; 144
    2fca:	91 e0       	ldi	r25, 0x01	; 1
    2fcc:	9a 8b       	std	Y+18, r25	; 0x12
    2fce:	89 8b       	std	Y+17, r24	; 0x11
    2fd0:	89 89       	ldd	r24, Y+17	; 0x11
    2fd2:	9a 89       	ldd	r25, Y+18	; 0x12
    2fd4:	01 97       	sbiw	r24, 0x01	; 1
    2fd6:	f1 f7       	brne	.-4      	; 0x2fd4 <MoveFrame3+0x304>
    2fd8:	9a 8b       	std	Y+18, r25	; 0x12
    2fda:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fdc:	8b 89       	ldd	r24, Y+19	; 0x13
    2fde:	9c 89       	ldd	r25, Y+20	; 0x14
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	9c 8b       	std	Y+20, r25	; 0x14
    2fe4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe6:	8b 89       	ldd	r24, Y+19	; 0x13
    2fe8:	9c 89       	ldd	r25, Y+20	; 0x14
    2fea:	00 97       	sbiw	r24, 0x00	; 0
    2fec:	69 f7       	brne	.-38     	; 0x2fc8 <MoveFrame3+0x2f8>
    2fee:	14 c0       	rjmp	.+40     	; 0x3018 <MoveFrame3+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	9c 8b       	std	Y+20, r25	; 0x14
    3002:	8b 8b       	std	Y+19, r24	; 0x13
    3004:	8b 89       	ldd	r24, Y+19	; 0x13
    3006:	9c 89       	ldd	r25, Y+20	; 0x14
    3008:	98 8b       	std	Y+16, r25	; 0x10
    300a:	8f 87       	std	Y+15, r24	; 0x0f
    300c:	8f 85       	ldd	r24, Y+15	; 0x0f
    300e:	98 89       	ldd	r25, Y+16	; 0x10
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	f1 f7       	brne	.-4      	; 0x3010 <MoveFrame3+0x340>
    3014:	98 8b       	std	Y+16, r25	; 0x10
    3016:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_displayCharacter(0);
	LCD_moveCursor(2,9);
	LCD_displayCharacter(1);
	_delay_ms(200);

	for(uint8 step = 10; step < 20; step++)
    3018:	89 ad       	ldd	r24, Y+57	; 0x39
    301a:	8f 5f       	subi	r24, 0xFF	; 255
    301c:	89 af       	std	Y+57, r24	; 0x39
    301e:	89 ad       	ldd	r24, Y+57	; 0x39
    3020:	84 31       	cpi	r24, 0x14	; 20
    3022:	08 f4       	brcc	.+2      	; 0x3026 <MoveFrame3+0x356>
    3024:	76 cf       	rjmp	.-276    	; 0x2f12 <MoveFrame3+0x242>
		LCD_moveCursor(1,step - 1);
		LCD_displayCharacter('_');
		_delay_ms(100);
	}

	LCD_moveCursor(1,19);
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	63 e1       	ldi	r22, 0x13	; 19
    302a:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_moveCursor>
	LCD_displayCharacter('_');
    302e:	8f e5       	ldi	r24, 0x5F	; 95
    3030:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LCD_displayCharacter>
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	a6 e1       	ldi	r26, 0x16	; 22
    303a:	b3 e4       	ldi	r27, 0x43	; 67
    303c:	8b 87       	std	Y+11, r24	; 0x0b
    303e:	9c 87       	std	Y+12, r25	; 0x0c
    3040:	ad 87       	std	Y+13, r26	; 0x0d
    3042:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3044:	6b 85       	ldd	r22, Y+11	; 0x0b
    3046:	7c 85       	ldd	r23, Y+12	; 0x0c
    3048:	8d 85       	ldd	r24, Y+13	; 0x0d
    304a:	9e 85       	ldd	r25, Y+14	; 0x0e
    304c:	20 e0       	ldi	r18, 0x00	; 0
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	4a e7       	ldi	r20, 0x7A	; 122
    3052:	55 e4       	ldi	r21, 0x45	; 69
    3054:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	8f 83       	std	Y+7, r24	; 0x07
    305e:	98 87       	std	Y+8, r25	; 0x08
    3060:	a9 87       	std	Y+9, r26	; 0x09
    3062:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3064:	6f 81       	ldd	r22, Y+7	; 0x07
    3066:	78 85       	ldd	r23, Y+8	; 0x08
    3068:	89 85       	ldd	r24, Y+9	; 0x09
    306a:	9a 85       	ldd	r25, Y+10	; 0x0a
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	40 e8       	ldi	r20, 0x80	; 128
    3072:	5f e3       	ldi	r21, 0x3F	; 63
    3074:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3078:	88 23       	and	r24, r24
    307a:	2c f4       	brge	.+10     	; 0x3086 <MoveFrame3+0x3b6>
		__ticks = 1;
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	9e 83       	std	Y+6, r25	; 0x06
    3082:	8d 83       	std	Y+5, r24	; 0x05
    3084:	3f c0       	rjmp	.+126    	; 0x3104 <MoveFrame3+0x434>
	else if (__tmp > 65535)
    3086:	6f 81       	ldd	r22, Y+7	; 0x07
    3088:	78 85       	ldd	r23, Y+8	; 0x08
    308a:	89 85       	ldd	r24, Y+9	; 0x09
    308c:	9a 85       	ldd	r25, Y+10	; 0x0a
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	3f ef       	ldi	r19, 0xFF	; 255
    3092:	4f e7       	ldi	r20, 0x7F	; 127
    3094:	57 e4       	ldi	r21, 0x47	; 71
    3096:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    309a:	18 16       	cp	r1, r24
    309c:	4c f5       	brge	.+82     	; 0x30f0 <MoveFrame3+0x420>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    309e:	6b 85       	ldd	r22, Y+11	; 0x0b
    30a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	40 e2       	ldi	r20, 0x20	; 32
    30ac:	51 e4       	ldi	r21, 0x41	; 65
    30ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	bc 01       	movw	r22, r24
    30b8:	cd 01       	movw	r24, r26
    30ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	9e 83       	std	Y+6, r25	; 0x06
    30c4:	8d 83       	std	Y+5, r24	; 0x05
    30c6:	0f c0       	rjmp	.+30     	; 0x30e6 <MoveFrame3+0x416>
    30c8:	80 e9       	ldi	r24, 0x90	; 144
    30ca:	91 e0       	ldi	r25, 0x01	; 1
    30cc:	9c 83       	std	Y+4, r25	; 0x04
    30ce:	8b 83       	std	Y+3, r24	; 0x03
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	9c 81       	ldd	r25, Y+4	; 0x04
    30d4:	01 97       	sbiw	r24, 0x01	; 1
    30d6:	f1 f7       	brne	.-4      	; 0x30d4 <MoveFrame3+0x404>
    30d8:	9c 83       	std	Y+4, r25	; 0x04
    30da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30dc:	8d 81       	ldd	r24, Y+5	; 0x05
    30de:	9e 81       	ldd	r25, Y+6	; 0x06
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	9e 83       	std	Y+6, r25	; 0x06
    30e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e6:	8d 81       	ldd	r24, Y+5	; 0x05
    30e8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ea:	00 97       	sbiw	r24, 0x00	; 0
    30ec:	69 f7       	brne	.-38     	; 0x30c8 <MoveFrame3+0x3f8>
    30ee:	14 c0       	rjmp	.+40     	; 0x3118 <MoveFrame3+0x448>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f0:	6f 81       	ldd	r22, Y+7	; 0x07
    30f2:	78 85       	ldd	r23, Y+8	; 0x08
    30f4:	89 85       	ldd	r24, Y+9	; 0x09
    30f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	9e 83       	std	Y+6, r25	; 0x06
    3102:	8d 83       	std	Y+5, r24	; 0x05
    3104:	8d 81       	ldd	r24, Y+5	; 0x05
    3106:	9e 81       	ldd	r25, Y+6	; 0x06
    3108:	9a 83       	std	Y+2, r25	; 0x02
    310a:	89 83       	std	Y+1, r24	; 0x01
    310c:	89 81       	ldd	r24, Y+1	; 0x01
    310e:	9a 81       	ldd	r25, Y+2	; 0x02
    3110:	01 97       	sbiw	r24, 0x01	; 1
    3112:	f1 f7       	brne	.-4      	; 0x3110 <MoveFrame3+0x440>
    3114:	9a 83       	std	Y+2, r25	; 0x02
    3116:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(150);
}
    3118:	ea 96       	adiw	r28, 0x3a	; 58
    311a:	0f b6       	in	r0, 0x3f	; 63
    311c:	f8 94       	cli
    311e:	de bf       	out	0x3e, r29	; 62
    3120:	0f be       	out	0x3f, r0	; 63
    3122:	cd bf       	out	0x3d, r28	; 61
    3124:	cf 91       	pop	r28
    3126:	df 91       	pop	r29
    3128:	08 95       	ret

0000312a <__mulsi3>:
    312a:	62 9f       	mul	r22, r18
    312c:	d0 01       	movw	r26, r0
    312e:	73 9f       	mul	r23, r19
    3130:	f0 01       	movw	r30, r0
    3132:	82 9f       	mul	r24, r18
    3134:	e0 0d       	add	r30, r0
    3136:	f1 1d       	adc	r31, r1
    3138:	64 9f       	mul	r22, r20
    313a:	e0 0d       	add	r30, r0
    313c:	f1 1d       	adc	r31, r1
    313e:	92 9f       	mul	r25, r18
    3140:	f0 0d       	add	r31, r0
    3142:	83 9f       	mul	r24, r19
    3144:	f0 0d       	add	r31, r0
    3146:	74 9f       	mul	r23, r20
    3148:	f0 0d       	add	r31, r0
    314a:	65 9f       	mul	r22, r21
    314c:	f0 0d       	add	r31, r0
    314e:	99 27       	eor	r25, r25
    3150:	72 9f       	mul	r23, r18
    3152:	b0 0d       	add	r27, r0
    3154:	e1 1d       	adc	r30, r1
    3156:	f9 1f       	adc	r31, r25
    3158:	63 9f       	mul	r22, r19
    315a:	b0 0d       	add	r27, r0
    315c:	e1 1d       	adc	r30, r1
    315e:	f9 1f       	adc	r31, r25
    3160:	bd 01       	movw	r22, r26
    3162:	cf 01       	movw	r24, r30
    3164:	11 24       	eor	r1, r1
    3166:	08 95       	ret

00003168 <__udivmodqi4>:
    3168:	99 1b       	sub	r25, r25
    316a:	79 e0       	ldi	r23, 0x09	; 9
    316c:	04 c0       	rjmp	.+8      	; 0x3176 <__udivmodqi4_ep>

0000316e <__udivmodqi4_loop>:
    316e:	99 1f       	adc	r25, r25
    3170:	96 17       	cp	r25, r22
    3172:	08 f0       	brcs	.+2      	; 0x3176 <__udivmodqi4_ep>
    3174:	96 1b       	sub	r25, r22

00003176 <__udivmodqi4_ep>:
    3176:	88 1f       	adc	r24, r24
    3178:	7a 95       	dec	r23
    317a:	c9 f7       	brne	.-14     	; 0x316e <__udivmodqi4_loop>
    317c:	80 95       	com	r24
    317e:	08 95       	ret

00003180 <__udivmodsi4>:
    3180:	a1 e2       	ldi	r26, 0x21	; 33
    3182:	1a 2e       	mov	r1, r26
    3184:	aa 1b       	sub	r26, r26
    3186:	bb 1b       	sub	r27, r27
    3188:	fd 01       	movw	r30, r26
    318a:	0d c0       	rjmp	.+26     	; 0x31a6 <__udivmodsi4_ep>

0000318c <__udivmodsi4_loop>:
    318c:	aa 1f       	adc	r26, r26
    318e:	bb 1f       	adc	r27, r27
    3190:	ee 1f       	adc	r30, r30
    3192:	ff 1f       	adc	r31, r31
    3194:	a2 17       	cp	r26, r18
    3196:	b3 07       	cpc	r27, r19
    3198:	e4 07       	cpc	r30, r20
    319a:	f5 07       	cpc	r31, r21
    319c:	20 f0       	brcs	.+8      	; 0x31a6 <__udivmodsi4_ep>
    319e:	a2 1b       	sub	r26, r18
    31a0:	b3 0b       	sbc	r27, r19
    31a2:	e4 0b       	sbc	r30, r20
    31a4:	f5 0b       	sbc	r31, r21

000031a6 <__udivmodsi4_ep>:
    31a6:	66 1f       	adc	r22, r22
    31a8:	77 1f       	adc	r23, r23
    31aa:	88 1f       	adc	r24, r24
    31ac:	99 1f       	adc	r25, r25
    31ae:	1a 94       	dec	r1
    31b0:	69 f7       	brne	.-38     	; 0x318c <__udivmodsi4_loop>
    31b2:	60 95       	com	r22
    31b4:	70 95       	com	r23
    31b6:	80 95       	com	r24
    31b8:	90 95       	com	r25
    31ba:	9b 01       	movw	r18, r22
    31bc:	ac 01       	movw	r20, r24
    31be:	bd 01       	movw	r22, r26
    31c0:	cf 01       	movw	r24, r30
    31c2:	08 95       	ret

000031c4 <__prologue_saves__>:
    31c4:	2f 92       	push	r2
    31c6:	3f 92       	push	r3
    31c8:	4f 92       	push	r4
    31ca:	5f 92       	push	r5
    31cc:	6f 92       	push	r6
    31ce:	7f 92       	push	r7
    31d0:	8f 92       	push	r8
    31d2:	9f 92       	push	r9
    31d4:	af 92       	push	r10
    31d6:	bf 92       	push	r11
    31d8:	cf 92       	push	r12
    31da:	df 92       	push	r13
    31dc:	ef 92       	push	r14
    31de:	ff 92       	push	r15
    31e0:	0f 93       	push	r16
    31e2:	1f 93       	push	r17
    31e4:	cf 93       	push	r28
    31e6:	df 93       	push	r29
    31e8:	cd b7       	in	r28, 0x3d	; 61
    31ea:	de b7       	in	r29, 0x3e	; 62
    31ec:	ca 1b       	sub	r28, r26
    31ee:	db 0b       	sbc	r29, r27
    31f0:	0f b6       	in	r0, 0x3f	; 63
    31f2:	f8 94       	cli
    31f4:	de bf       	out	0x3e, r29	; 62
    31f6:	0f be       	out	0x3f, r0	; 63
    31f8:	cd bf       	out	0x3d, r28	; 61
    31fa:	09 94       	ijmp

000031fc <__epilogue_restores__>:
    31fc:	2a 88       	ldd	r2, Y+18	; 0x12
    31fe:	39 88       	ldd	r3, Y+17	; 0x11
    3200:	48 88       	ldd	r4, Y+16	; 0x10
    3202:	5f 84       	ldd	r5, Y+15	; 0x0f
    3204:	6e 84       	ldd	r6, Y+14	; 0x0e
    3206:	7d 84       	ldd	r7, Y+13	; 0x0d
    3208:	8c 84       	ldd	r8, Y+12	; 0x0c
    320a:	9b 84       	ldd	r9, Y+11	; 0x0b
    320c:	aa 84       	ldd	r10, Y+10	; 0x0a
    320e:	b9 84       	ldd	r11, Y+9	; 0x09
    3210:	c8 84       	ldd	r12, Y+8	; 0x08
    3212:	df 80       	ldd	r13, Y+7	; 0x07
    3214:	ee 80       	ldd	r14, Y+6	; 0x06
    3216:	fd 80       	ldd	r15, Y+5	; 0x05
    3218:	0c 81       	ldd	r16, Y+4	; 0x04
    321a:	1b 81       	ldd	r17, Y+3	; 0x03
    321c:	aa 81       	ldd	r26, Y+2	; 0x02
    321e:	b9 81       	ldd	r27, Y+1	; 0x01
    3220:	ce 0f       	add	r28, r30
    3222:	d1 1d       	adc	r29, r1
    3224:	0f b6       	in	r0, 0x3f	; 63
    3226:	f8 94       	cli
    3228:	de bf       	out	0x3e, r29	; 62
    322a:	0f be       	out	0x3f, r0	; 63
    322c:	cd bf       	out	0x3d, r28	; 61
    322e:	ed 01       	movw	r28, r26
    3230:	08 95       	ret

00003232 <_exit>:
    3232:	f8 94       	cli

00003234 <__stop_program>:
    3234:	ff cf       	rjmp	.-2      	; 0x3234 <__stop_program>
