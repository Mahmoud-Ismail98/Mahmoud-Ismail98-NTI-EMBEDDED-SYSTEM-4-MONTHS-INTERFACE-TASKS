#include "../inc/MCAL/PORT/PORT.h"

#include "../inc/LIB/Bit_utils.h"
#include "../inc/LIB/Std_types.h"
#include "../inc/MCAL/PORT/PORT_cfg.h"
#include "../inc/MCAL/PORT/PORT_prv.h"

void PORT_voidInit(void)
{
	
	#undef PORT_u8PINMODE_OUTPUT_LOW
	#define PORT_u8PINMODE_OUTPUT_LOW 1
	
	
	#undef PORT_u8PINMODE_INPUT_FLOATING
	#define PORT_u8PINMODE_INPUT_FLOATING 0

	#undef PORT_u8PINMODE_INPUUT_PULLUP
	#define PORT_u8PINMODE_INPUUT_PULLUP 0

	
	DDRA =CONC(DIO_u8MODEPORTAPIN7,DIO_u8MODEPORTAPIN6,DIO_u8MODEPORTAPIN5,DIO_u8MODEPORTAPIN4,DIO_u8MODEPORTAPIN3,DIO_u8MODEPORTAPIN2,DIO_u8MODEPORTAPIN1,DIO_u8MODEPORTAPIN0);
	DDRB =CONC(DIO_u8MODEPORTBPIN7,DIO_u8MODEPORTBPIN6,DIO_u8MODEPORTBPIN5,DIO_u8MODEPORTBPIN4,DIO_u8MODEPORTBPIN3,DIO_u8MODEPORTBPIN2,DIO_u8MODEPORTBPIN1,DIO_u8MODEPORTBPIN0);
	DDRC =CONC(DIO_u8MODEPORTCPIN7,DIO_u8MODEPORTCPIN6,DIO_u8MODEPORTCPIN5,DIO_u8MODEPORTCPIN4,DIO_u8MODEPORTCPIN3,DIO_u8MODEPORTCPIN2,DIO_u8MODEPORTCPIN1,DIO_u8MODEPORTCPIN0);
	DDRD =CONC(DIO_u8MODEPORTDPIN7,DIO_u8MODEPORTDPIN6,DIO_u8MODEPORTDPIN5,DIO_u8MODEPORTDPIN4,DIO_u8MODEPORTDPIN3,DIO_u8MODEPORTDPIN2,DIO_u8MODEPORTDPIN1,DIO_u8MODEPORTDPIN0);
	
	#undef PORT_u8PINMODE_OUTPUT_LOW
	#define PORT_u8PINMODE_OUTPUT_LOW 0
	
	#undef PORT_u8PINMODE_INPUT_FLOATING
	#define PORT_u8PINMODE_INPUT_FLOATING 0

	#undef PORT_u8PINMODE_INPUUT_PULLUP
	#define PORT_u8PINMODE_INPUUT_PULLUP 1
	
	PORTA =CONC(DIO_u8MODEPORTAPIN7,DIO_u8MODEPORTAPIN6,DIO_u8MODEPORTAPIN5,DIO_u8MODEPORTAPIN4,DIO_u8MODEPORTAPIN3,DIO_u8MODEPORTAPIN2,DIO_u8MODEPORTAPIN1,DIO_u8MODEPORTAPIN0);
	PORTB =CONC(DIO_u8MODEPORTBPIN7,DIO_u8MODEPORTBPIN6,DIO_u8MODEPORTBPIN5,DIO_u8MODEPORTBPIN4,DIO_u8MODEPORTBPIN3,DIO_u8MODEPORTBPIN2,DIO_u8MODEPORTBPIN1,DIO_u8MODEPORTBPIN0);
	PORTC =CONC(DIO_u8MODEPORTCPIN7,DIO_u8MODEPORTCPIN6,DIO_u8MODEPORTCPIN5,DIO_u8MODEPORTCPIN4,DIO_u8MODEPORTCPIN3,DIO_u8MODEPORTCPIN2,DIO_u8MODEPORTCPIN1,DIO_u8MODEPORTCPIN0);
	PORTD =CONC(DIO_u8MODEPORTDPIN7,DIO_u8MODEPORTDPIN6,DIO_u8MODEPORTDPIN5,DIO_u8MODEPORTDPIN4,DIO_u8MODEPORTDPIN3,DIO_u8MODEPORTDPIN2,DIO_u8MODEPORTDPIN1,DIO_u8MODEPORTDPIN0);
	
	#undef PORT_u8PINMODE_OUTPUT_LOW
	#define PORT_u8PINMODE_OUTPUT_LOW 0
	
	#undef PORT_u8PINMODE_INPUT_FLOATING
	#define PORT_u8PINMODE_INPUT_FLOATING 2

	#undef PORT_u8PINMODE_INPUUT_PULLUP
	#define PORT_u8PINMODE_INPUUT_PULLUP 3
}
PORT_enumErrStatus PORT_enumSET_PINDirection(u8 Copy_u8PINNum, u8 Copy_u8PINDirection)
{
	u8 Local_u8PINID = Copy_u8PINNum%8;
	u8 Local_u8PORTID = Copy_u8PINNum/8;
	PORT_enumErrStatus Local_enumErrStatus = PORT_enumOK;
	switch(Local_u8PORTID)
	{
		case PORT_u8PORTA:
			if(Copy_u8PINDirection == PORT_u8PINDIR_OUTPUT)
			{
				SET_BIT(DDRA,Local_u8PINID);
			}
			else if(Copy_u8PINDirection == PORT_u8PINDIR_INPUT)
			{
				CLR_BIT(DDRA,Local_u8PINID);
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
			}
			break;
		case PORT_u8PORTB:
			if(Copy_u8PINDirection == PORT_u8PINDIR_OUTPUT)
			{
				SET_BIT(DDRB,Local_u8PINID);
			}
			else if(Copy_u8PINDirection == PORT_u8PINDIR_INPUT)
			{
				CLR_BIT(DDRB,Local_u8PINID);
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
			}
			break;
		case PORT_u8PORTC:
			if(Copy_u8PINDirection == PORT_u8PINDIR_OUTPUT)
			{
				SET_BIT(DDRC,Local_u8PINID);
			}
			else if(Copy_u8PINDirection == PORT_u8PINDIR_INPUT)
			{
				CLR_BIT(DDRC,Local_u8PINID);
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
			}
			break;
		case PORT_u8PORTD:
			if(Copy_u8PINDirection == PORT_u8PINDIR_OUTPUT)
			{
				SET_BIT(DDRD,Local_u8PINID);
			}
			else if(Copy_u8PINDirection == PORT_u8PINDIR_INPUT)
			{
				CLR_BIT(DDRD,Local_u8PINID);
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
			}
			break;
		default :
			Local_enumErrStatus = PORT_enumPINerr;
			break;
	}
	return Local_enumErrStatus;
}
PORT_enumErrStatus PORT_enumSET_PINMODE(u8 Copy_u8PINNum, u8 Copy_u8PINMODE)
{
	u8 Local_u8PINID = Copy_u8PINNum%8;
	u8 Local_u8PORTID = Copy_u8PINNum/8;
	PORT_enumErrStatus Local_enumErrStatus = PORT_enumOK;
	switch(Local_u8PORTID)
	{
		case PORT_u8PORTA:
			if(Copy_u8PINMODE == PORT_u8PINMODE_INPUUT_PULLUP  || Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_HIGH)
			{
				SET_BIT(PORTA,Local_u8PINID);
			}
			else if(Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_LOW  || Copy_u8PINMODE == PORT_u8PINMODE_INPUT_FLOATING)
			{
				CLR_BIT(PORTA,Local_u8PINID);
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
			}
			break;
		case PORT_u8PORTB:
			if(Copy_u8PINMODE == PORT_u8PINMODE_INPUUT_PULLUP  || Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_HIGH)
			{
				SET_BIT(PORTB,Local_u8PINID);
			}
			else if(Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_LOW  || Copy_u8PINMODE == PORT_u8PINMODE_INPUT_FLOATING)
			{
				CLR_BIT(PORTB,Local_u8PINID);
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
			}
			break;
		case PORT_u8PORTC:
			if(Copy_u8PINMODE == PORT_u8PINMODE_INPUUT_PULLUP  || Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_HIGH)
			{
				SET_BIT(PORTC,Local_u8PINID);
			}
			else if(Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_LOW  || Copy_u8PINMODE == PORT_u8PINMODE_INPUT_FLOATING)
			{
				CLR_BIT(PORTC,Local_u8PINID);
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
			}
			break;
		case PORT_u8PORTD:
			if(Copy_u8PINMODE == PORT_u8PINMODE_INPUUT_PULLUP  || Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_HIGH)
			{
				SET_BIT(PORTD,Local_u8PINID);
			}
			else if(Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_LOW  || Copy_u8PINMODE == PORT_u8PINMODE_INPUT_FLOATING)
			{
				CLR_BIT(PORTD,Local_u8PINID);
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
			}
			break;
		default :
			Local_enumErrStatus = PORT_enumPINerr;
			break;
	}
	return Local_enumErrStatus;
}
