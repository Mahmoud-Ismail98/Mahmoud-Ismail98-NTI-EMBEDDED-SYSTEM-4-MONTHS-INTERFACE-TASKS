
stopWatch_sevenSeg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002166  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002166  000021fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800068  00800068  00002202  2**0
                  ALLOC
  3 .stab         00001ba8  00000000  00000000  00002204  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001128  00000000  00000000  00003dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005184  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008a68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009623  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__vector_1>
       8:	0c 94 0d 0a 	jmp	0x141a	; 0x141a <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a0 37       	cpi	r26, 0x70	; 112
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e6       	ldi	r30, 0x66	; 102
      78:	f1 e2       	ldi	r31, 0x21	; 33
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 55 10 	call	0x20aa	; 0x20aa <main>
      8a:	0c 94 b1 10 	jmp	0x2162	; 0x2162 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 96 10 	jmp	0x212c	; 0x212c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 86 10 	jmp	0x210c	; 0x210c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 86 10 	jmp	0x210c	; 0x210c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 96 10 	jmp	0x212c	; 0x212c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 86 10 	jmp	0x210c	; 0x210c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 86 10 	jmp	0x210c	; 0x210c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 86 10 	jmp	0x210c	; 0x210c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <dio_writePin>:
#include"dio.h"
#include"dio_prv.h"
#include"dio_cfg.h"
#include<avr/io.h>
DIO_errorStatus dio_writePin(u8 pin_id, u8 value)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8c 83       	std	Y+4, r24	; 0x04
     b5c:	6d 83       	std	Y+5, r22	; 0x05
	DIO_errorStatus return_errorStatus = Dio_Ok;
     b5e:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_port;

	u8 loc_pin;

	if(pin_id > NUM_OF_PINS)
     b60:	8c 81       	ldd	r24, Y+4	; 0x04
     b62:	80 32       	cpi	r24, 0x20	; 32
     b64:	18 f0       	brcs	.+6      	; 0xb6c <dio_writePin+0x26>
	{
		return_errorStatus = Dio_pinError;
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	8b 83       	std	Y+3, r24	; 0x03
     b6a:	0e c1       	rjmp	.+540    	; 0xd88 <dio_writePin+0x242>
	}
	else if(value > NUM_OF_LEVELS)
     b6c:	8d 81       	ldd	r24, Y+5	; 0x05
     b6e:	82 30       	cpi	r24, 0x02	; 2
     b70:	18 f0       	brcs	.+6      	; 0xb78 <dio_writePin+0x32>
	{
		return_errorStatus = Dio_levelError;
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	8b 83       	std	Y+3, r24	; 0x03
     b76:	08 c1       	rjmp	.+528    	; 0xd88 <dio_writePin+0x242>
	}
	else
	{
		loc_pin = pin_id % NUM_OF_PINS_PER_PORT;
     b78:	8c 81       	ldd	r24, Y+4	; 0x04
     b7a:	87 70       	andi	r24, 0x07	; 7
     b7c:	89 83       	std	Y+1, r24	; 0x01
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
     b7e:	8c 81       	ldd	r24, Y+4	; 0x04
     b80:	86 95       	lsr	r24
     b82:	86 95       	lsr	r24
     b84:	86 95       	lsr	r24
     b86:	8a 83       	std	Y+2, r24	; 0x02

		switch(loc_port)
     b88:	8a 81       	ldd	r24, Y+2	; 0x02
     b8a:	28 2f       	mov	r18, r24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	3f 87       	std	Y+15, r19	; 0x0f
     b90:	2e 87       	std	Y+14, r18	; 0x0e
     b92:	8e 85       	ldd	r24, Y+14	; 0x0e
     b94:	9f 85       	ldd	r25, Y+15	; 0x0f
     b96:	81 30       	cpi	r24, 0x01	; 1
     b98:	91 05       	cpc	r25, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <dio_writePin+0x58>
     b9c:	4f c0       	rjmp	.+158    	; 0xc3c <dio_writePin+0xf6>
     b9e:	2e 85       	ldd	r18, Y+14	; 0x0e
     ba0:	3f 85       	ldd	r19, Y+15	; 0x0f
     ba2:	22 30       	cpi	r18, 0x02	; 2
     ba4:	31 05       	cpc	r19, r1
     ba6:	2c f4       	brge	.+10     	; 0xbb2 <dio_writePin+0x6c>
     ba8:	8e 85       	ldd	r24, Y+14	; 0x0e
     baa:	9f 85       	ldd	r25, Y+15	; 0x0f
     bac:	00 97       	sbiw	r24, 0x00	; 0
     bae:	71 f0       	breq	.+28     	; 0xbcc <dio_writePin+0x86>
     bb0:	eb c0       	rjmp	.+470    	; 0xd88 <dio_writePin+0x242>
     bb2:	2e 85       	ldd	r18, Y+14	; 0x0e
     bb4:	3f 85       	ldd	r19, Y+15	; 0x0f
     bb6:	22 30       	cpi	r18, 0x02	; 2
     bb8:	31 05       	cpc	r19, r1
     bba:	09 f4       	brne	.+2      	; 0xbbe <dio_writePin+0x78>
     bbc:	77 c0       	rjmp	.+238    	; 0xcac <dio_writePin+0x166>
     bbe:	8e 85       	ldd	r24, Y+14	; 0x0e
     bc0:	9f 85       	ldd	r25, Y+15	; 0x0f
     bc2:	83 30       	cpi	r24, 0x03	; 3
     bc4:	91 05       	cpc	r25, r1
     bc6:	09 f4       	brne	.+2      	; 0xbca <dio_writePin+0x84>
     bc8:	a9 c0       	rjmp	.+338    	; 0xd1c <dio_writePin+0x1d6>
     bca:	de c0       	rjmp	.+444    	; 0xd88 <dio_writePin+0x242>
		{

		case DIO_PORTA:

			switch (value)
     bcc:	8d 81       	ldd	r24, Y+5	; 0x05
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	3d 87       	std	Y+13, r19	; 0x0d
     bd4:	2c 87       	std	Y+12, r18	; 0x0c
     bd6:	8c 85       	ldd	r24, Y+12	; 0x0c
     bd8:	9d 85       	ldd	r25, Y+13	; 0x0d
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	d1 f0       	breq	.+52     	; 0xc12 <dio_writePin+0xcc>
     bde:	2c 85       	ldd	r18, Y+12	; 0x0c
     be0:	3d 85       	ldd	r19, Y+13	; 0x0d
     be2:	21 30       	cpi	r18, 0x01	; 1
     be4:	31 05       	cpc	r19, r1
     be6:	09 f0       	breq	.+2      	; 0xbea <dio_writePin+0xa4>
     be8:	cf c0       	rjmp	.+414    	; 0xd88 <dio_writePin+0x242>
			{

			case DIO_HIGH:

				SET_BIT(PORTA, loc_pin);
     bea:	ab e3       	ldi	r26, 0x3B	; 59
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	eb e3       	ldi	r30, 0x3B	; 59
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	48 2f       	mov	r20, r24
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	02 2e       	mov	r0, r18
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <dio_writePin+0xc2>
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	0a 94       	dec	r0
     c0a:	e2 f7       	brpl	.-8      	; 0xc04 <dio_writePin+0xbe>
     c0c:	84 2b       	or	r24, r20
     c0e:	8c 93       	st	X, r24
     c10:	bb c0       	rjmp	.+374    	; 0xd88 <dio_writePin+0x242>

				break;

			case DIO_LOW:

				CLEAR_BIT(PORTA, loc_pin);
     c12:	ab e3       	ldi	r26, 0x3B	; 59
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	eb e3       	ldi	r30, 0x3B	; 59
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	48 2f       	mov	r20, r24
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	28 2f       	mov	r18, r24
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	02 2e       	mov	r0, r18
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <dio_writePin+0xea>
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	0a 94       	dec	r0
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <dio_writePin+0xe6>
     c34:	80 95       	com	r24
     c36:	84 23       	and	r24, r20
     c38:	8c 93       	st	X, r24
     c3a:	a6 c0       	rjmp	.+332    	; 0xd88 <dio_writePin+0x242>
			}
			break;

		case DIO_PORTB:

			switch (value)
     c3c:	8d 81       	ldd	r24, Y+5	; 0x05
     c3e:	28 2f       	mov	r18, r24
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	3b 87       	std	Y+11, r19	; 0x0b
     c44:	2a 87       	std	Y+10, r18	; 0x0a
     c46:	8a 85       	ldd	r24, Y+10	; 0x0a
     c48:	9b 85       	ldd	r25, Y+11	; 0x0b
     c4a:	00 97       	sbiw	r24, 0x00	; 0
     c4c:	d1 f0       	breq	.+52     	; 0xc82 <dio_writePin+0x13c>
     c4e:	2a 85       	ldd	r18, Y+10	; 0x0a
     c50:	3b 85       	ldd	r19, Y+11	; 0x0b
     c52:	21 30       	cpi	r18, 0x01	; 1
     c54:	31 05       	cpc	r19, r1
     c56:	09 f0       	breq	.+2      	; 0xc5a <dio_writePin+0x114>
     c58:	97 c0       	rjmp	.+302    	; 0xd88 <dio_writePin+0x242>
			{

			case DIO_HIGH:

				SET_BIT(PORTB, loc_pin);
     c5a:	a8 e3       	ldi	r26, 0x38	; 56
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e8 e3       	ldi	r30, 0x38	; 56
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	48 2f       	mov	r20, r24
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	02 2e       	mov	r0, r18
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <dio_writePin+0x132>
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	0a 94       	dec	r0
     c7a:	e2 f7       	brpl	.-8      	; 0xc74 <dio_writePin+0x12e>
     c7c:	84 2b       	or	r24, r20
     c7e:	8c 93       	st	X, r24
     c80:	83 c0       	rjmp	.+262    	; 0xd88 <dio_writePin+0x242>

				break;

			case DIO_LOW:

				CLEAR_BIT(PORTB, loc_pin);
     c82:	a8 e3       	ldi	r26, 0x38	; 56
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e8 e3       	ldi	r30, 0x38	; 56
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	48 2f       	mov	r20, r24
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	28 2f       	mov	r18, r24
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	02 2e       	mov	r0, r18
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <dio_writePin+0x15a>
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	0a 94       	dec	r0
     ca2:	e2 f7       	brpl	.-8      	; 0xc9c <dio_writePin+0x156>
     ca4:	80 95       	com	r24
     ca6:	84 23       	and	r24, r20
     ca8:	8c 93       	st	X, r24
     caa:	6e c0       	rjmp	.+220    	; 0xd88 <dio_writePin+0x242>
			break;


		case DIO_PORTC:

			switch (value)
     cac:	8d 81       	ldd	r24, Y+5	; 0x05
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	39 87       	std	Y+9, r19	; 0x09
     cb4:	28 87       	std	Y+8, r18	; 0x08
     cb6:	88 85       	ldd	r24, Y+8	; 0x08
     cb8:	99 85       	ldd	r25, Y+9	; 0x09
     cba:	00 97       	sbiw	r24, 0x00	; 0
     cbc:	d1 f0       	breq	.+52     	; 0xcf2 <dio_writePin+0x1ac>
     cbe:	28 85       	ldd	r18, Y+8	; 0x08
     cc0:	39 85       	ldd	r19, Y+9	; 0x09
     cc2:	21 30       	cpi	r18, 0x01	; 1
     cc4:	31 05       	cpc	r19, r1
     cc6:	09 f0       	breq	.+2      	; 0xcca <dio_writePin+0x184>
     cc8:	5f c0       	rjmp	.+190    	; 0xd88 <dio_writePin+0x242>
			{

			case DIO_HIGH:

				SET_BIT(PORTC, loc_pin);
     cca:	a5 e3       	ldi	r26, 0x35	; 53
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e5 e3       	ldi	r30, 0x35	; 53
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	48 2f       	mov	r20, r24
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 2e       	mov	r0, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <dio_writePin+0x1a2>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <dio_writePin+0x19e>
     cec:	84 2b       	or	r24, r20
     cee:	8c 93       	st	X, r24
     cf0:	4b c0       	rjmp	.+150    	; 0xd88 <dio_writePin+0x242>

				break;

			case DIO_LOW:

				CLEAR_BIT(PORTC, loc_pin);
     cf2:	a5 e3       	ldi	r26, 0x35	; 53
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e5 e3       	ldi	r30, 0x35	; 53
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	48 2f       	mov	r20, r24
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <dio_writePin+0x1ca>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <dio_writePin+0x1c6>
     d14:	80 95       	com	r24
     d16:	84 23       	and	r24, r20
     d18:	8c 93       	st	X, r24
     d1a:	36 c0       	rjmp	.+108    	; 0xd88 <dio_writePin+0x242>



		case DIO_PORTD:

			switch (value)
     d1c:	8d 81       	ldd	r24, Y+5	; 0x05
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	3f 83       	std	Y+7, r19	; 0x07
     d24:	2e 83       	std	Y+6, r18	; 0x06
     d26:	8e 81       	ldd	r24, Y+6	; 0x06
     d28:	9f 81       	ldd	r25, Y+7	; 0x07
     d2a:	00 97       	sbiw	r24, 0x00	; 0
     d2c:	c9 f0       	breq	.+50     	; 0xd60 <dio_writePin+0x21a>
     d2e:	2e 81       	ldd	r18, Y+6	; 0x06
     d30:	3f 81       	ldd	r19, Y+7	; 0x07
     d32:	21 30       	cpi	r18, 0x01	; 1
     d34:	31 05       	cpc	r19, r1
     d36:	41 f5       	brne	.+80     	; 0xd88 <dio_writePin+0x242>
			{

			case DIO_HIGH:

				SET_BIT(PORTD, loc_pin);
     d38:	a2 e3       	ldi	r26, 0x32	; 50
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e2 e3       	ldi	r30, 0x32	; 50
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	48 2f       	mov	r20, r24
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	02 2e       	mov	r0, r18
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <dio_writePin+0x210>
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	0a 94       	dec	r0
     d58:	e2 f7       	brpl	.-8      	; 0xd52 <dio_writePin+0x20c>
     d5a:	84 2b       	or	r24, r20
     d5c:	8c 93       	st	X, r24
     d5e:	14 c0       	rjmp	.+40     	; 0xd88 <dio_writePin+0x242>

				break;

			case DIO_LOW:

				CLEAR_BIT(PORTD, loc_pin);
     d60:	a2 e3       	ldi	r26, 0x32	; 50
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e2 e3       	ldi	r30, 0x32	; 50
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	48 2f       	mov	r20, r24
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	02 2e       	mov	r0, r18
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <dio_writePin+0x238>
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	0a 94       	dec	r0
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <dio_writePin+0x234>
     d82:	80 95       	com	r24
     d84:	84 23       	and	r24, r20
     d86:	8c 93       	st	X, r24


		}
	}

	return return_errorStatus;
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
}
     d8a:	2f 96       	adiw	r28, 0x0f	; 15
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	08 95       	ret

00000d9c <dio_readPin>:
DIO_errorStatus dio_readPin(u8 pin_id, pu8 level)
{
     d9c:	df 93       	push	r29
     d9e:	cf 93       	push	r28
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	28 97       	sbiw	r28, 0x08	; 8
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	cd bf       	out	0x3d, r28	; 61
     db0:	8c 83       	std	Y+4, r24	; 0x04
     db2:	7e 83       	std	Y+6, r23	; 0x06
     db4:	6d 83       	std	Y+5, r22	; 0x05
	DIO_errorStatus return_errorStatus = Dio_Ok;
     db6:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_port;

	u8 loc_pin;

	if(pin_id > NUM_OF_PINS)
     db8:	8c 81       	ldd	r24, Y+4	; 0x04
     dba:	80 32       	cpi	r24, 0x20	; 32
     dbc:	18 f0       	brcs	.+6      	; 0xdc4 <dio_readPin+0x28>
	{
		return_errorStatus = Dio_pinError;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	8b 83       	std	Y+3, r24	; 0x03
     dc2:	35 c1       	rjmp	.+618    	; 0x102e <dio_readPin+0x292>
	}
	else if(level == NULL)
     dc4:	8d 81       	ldd	r24, Y+5	; 0x05
     dc6:	9e 81       	ldd	r25, Y+6	; 0x06
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	19 f4       	brne	.+6      	; 0xdd2 <dio_readPin+0x36>
	{
		return_errorStatus = Dio_NullPointerError;
     dcc:	84 e0       	ldi	r24, 0x04	; 4
     dce:	8b 83       	std	Y+3, r24	; 0x03
     dd0:	2e c1       	rjmp	.+604    	; 0x102e <dio_readPin+0x292>
	}
	else
	{
		loc_pin = pin_id % NUM_OF_PINS_PER_PORT;
     dd2:	8c 81       	ldd	r24, Y+4	; 0x04
     dd4:	87 70       	andi	r24, 0x07	; 7
     dd6:	89 83       	std	Y+1, r24	; 0x01
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	86 95       	lsr	r24
     ddc:	86 95       	lsr	r24
     dde:	86 95       	lsr	r24
     de0:	8a 83       	std	Y+2, r24	; 0x02

		switch(loc_port)
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	38 87       	std	Y+8, r19	; 0x08
     dea:	2f 83       	std	Y+7, r18	; 0x07
     dec:	4f 81       	ldd	r20, Y+7	; 0x07
     dee:	58 85       	ldd	r21, Y+8	; 0x08
     df0:	41 30       	cpi	r20, 0x01	; 1
     df2:	51 05       	cpc	r21, r1
     df4:	09 f4       	brne	.+2      	; 0xdf8 <dio_readPin+0x5c>
     df6:	59 c0       	rjmp	.+178    	; 0xeaa <dio_readPin+0x10e>
     df8:	8f 81       	ldd	r24, Y+7	; 0x07
     dfa:	98 85       	ldd	r25, Y+8	; 0x08
     dfc:	82 30       	cpi	r24, 0x02	; 2
     dfe:	91 05       	cpc	r25, r1
     e00:	34 f4       	brge	.+12     	; 0xe0e <dio_readPin+0x72>
     e02:	2f 81       	ldd	r18, Y+7	; 0x07
     e04:	38 85       	ldd	r19, Y+8	; 0x08
     e06:	21 15       	cp	r18, r1
     e08:	31 05       	cpc	r19, r1
     e0a:	71 f0       	breq	.+28     	; 0xe28 <dio_readPin+0x8c>
     e0c:	10 c1       	rjmp	.+544    	; 0x102e <dio_readPin+0x292>
     e0e:	4f 81       	ldd	r20, Y+7	; 0x07
     e10:	58 85       	ldd	r21, Y+8	; 0x08
     e12:	42 30       	cpi	r20, 0x02	; 2
     e14:	51 05       	cpc	r21, r1
     e16:	09 f4       	brne	.+2      	; 0xe1a <dio_readPin+0x7e>
     e18:	89 c0       	rjmp	.+274    	; 0xf2c <dio_readPin+0x190>
     e1a:	8f 81       	ldd	r24, Y+7	; 0x07
     e1c:	98 85       	ldd	r25, Y+8	; 0x08
     e1e:	83 30       	cpi	r24, 0x03	; 3
     e20:	91 05       	cpc	r25, r1
     e22:	09 f4       	brne	.+2      	; 0xe26 <dio_readPin+0x8a>
     e24:	c4 c0       	rjmp	.+392    	; 0xfae <dio_readPin+0x212>
     e26:	03 c1       	rjmp	.+518    	; 0x102e <dio_readPin+0x292>
		{

		case DIO_PORTA:

			if (GET_BIT(DDRA,loc_pin) == PORT_INPUT)
     e28:	ea e3       	ldi	r30, 0x3A	; 58
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	48 2f       	mov	r20, r24
     e30:	50 e0       	ldi	r21, 0x00	; 0
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <dio_readPin+0xa6>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	2a 95       	dec	r18
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <dio_readPin+0xa2>
     e46:	9a 01       	movw	r18, r20
     e48:	28 23       	and	r18, r24
     e4a:	39 23       	and	r19, r25
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	88 2f       	mov	r24, r24
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	a9 01       	movw	r20, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <dio_readPin+0xbe>
     e56:	55 95       	asr	r21
     e58:	47 95       	ror	r20
     e5a:	8a 95       	dec	r24
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <dio_readPin+0xba>
     e5e:	ca 01       	movw	r24, r20
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	01 f5       	brne	.+64     	; 0xea4 <dio_readPin+0x108>
			{
				*level = GET_BIT(PINA, loc_pin);
     e64:	e9 e3       	ldi	r30, 0x39	; 57
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	48 2f       	mov	r20, r24
     e6c:	50 e0       	ldi	r21, 0x00	; 0
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <dio_readPin+0xe2>
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	2a 95       	dec	r18
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <dio_readPin+0xde>
     e82:	9a 01       	movw	r18, r20
     e84:	28 23       	and	r18, r24
     e86:	39 23       	and	r19, r25
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	88 2f       	mov	r24, r24
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	a9 01       	movw	r20, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <dio_readPin+0xfa>
     e92:	55 95       	asr	r21
     e94:	47 95       	ror	r20
     e96:	8a 95       	dec	r24
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <dio_readPin+0xf6>
     e9a:	ca 01       	movw	r24, r20
     e9c:	ed 81       	ldd	r30, Y+5	; 0x05
     e9e:	fe 81       	ldd	r31, Y+6	; 0x06
     ea0:	80 83       	st	Z, r24
     ea2:	c5 c0       	rjmp	.+394    	; 0x102e <dio_readPin+0x292>
			}
			else
			{
				return_errorStatus = Dio_directionError;
     ea4:	83 e0       	ldi	r24, 0x03	; 3
     ea6:	8b 83       	std	Y+3, r24	; 0x03
     ea8:	c2 c0       	rjmp	.+388    	; 0x102e <dio_readPin+0x292>
				break;


		case DIO_PORTB:

			if (GET_BIT(DDRB,loc_pin) == PORT_INPUT)
     eaa:	e7 e3       	ldi	r30, 0x37	; 55
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <dio_readPin+0x128>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	2a 95       	dec	r18
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <dio_readPin+0x124>
     ec8:	9a 01       	movw	r18, r20
     eca:	28 23       	and	r18, r24
     ecc:	39 23       	and	r19, r25
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	88 2f       	mov	r24, r24
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	a9 01       	movw	r20, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <dio_readPin+0x140>
     ed8:	55 95       	asr	r21
     eda:	47 95       	ror	r20
     edc:	8a 95       	dec	r24
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <dio_readPin+0x13c>
     ee0:	ca 01       	movw	r24, r20
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	01 f5       	brne	.+64     	; 0xf26 <dio_readPin+0x18a>
			{
				*level = GET_BIT(PINB, loc_pin);
     ee6:	e6 e3       	ldi	r30, 0x36	; 54
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <dio_readPin+0x164>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	2a 95       	dec	r18
     f02:	e2 f7       	brpl	.-8      	; 0xefc <dio_readPin+0x160>
     f04:	9a 01       	movw	r18, r20
     f06:	28 23       	and	r18, r24
     f08:	39 23       	and	r19, r25
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	a9 01       	movw	r20, r18
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <dio_readPin+0x17c>
     f14:	55 95       	asr	r21
     f16:	47 95       	ror	r20
     f18:	8a 95       	dec	r24
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <dio_readPin+0x178>
     f1c:	ca 01       	movw	r24, r20
     f1e:	ed 81       	ldd	r30, Y+5	; 0x05
     f20:	fe 81       	ldd	r31, Y+6	; 0x06
     f22:	80 83       	st	Z, r24
     f24:	84 c0       	rjmp	.+264    	; 0x102e <dio_readPin+0x292>
			}
			else
			{
				return_errorStatus = Dio_directionError;
     f26:	83 e0       	ldi	r24, 0x03	; 3
     f28:	8b 83       	std	Y+3, r24	; 0x03
     f2a:	81 c0       	rjmp	.+258    	; 0x102e <dio_readPin+0x292>



		case DIO_PORTC:

			if (GET_BIT(DDRC,loc_pin) == PORT_INPUT)
     f2c:	e4 e3       	ldi	r30, 0x34	; 52
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <dio_readPin+0x1aa>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	2a 95       	dec	r18
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <dio_readPin+0x1a6>
     f4a:	9a 01       	movw	r18, r20
     f4c:	28 23       	and	r18, r24
     f4e:	39 23       	and	r19, r25
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	a9 01       	movw	r20, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <dio_readPin+0x1c2>
     f5a:	55 95       	asr	r21
     f5c:	47 95       	ror	r20
     f5e:	8a 95       	dec	r24
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <dio_readPin+0x1be>
     f62:	ca 01       	movw	r24, r20
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	01 f5       	brne	.+64     	; 0xfa8 <dio_readPin+0x20c>
			{

				*level = GET_BIT(PINC, loc_pin);
     f68:	e3 e3       	ldi	r30, 0x33	; 51
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <dio_readPin+0x1e6>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	2a 95       	dec	r18
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <dio_readPin+0x1e2>
     f86:	9a 01       	movw	r18, r20
     f88:	28 23       	and	r18, r24
     f8a:	39 23       	and	r19, r25
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	a9 01       	movw	r20, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <dio_readPin+0x1fe>
     f96:	55 95       	asr	r21
     f98:	47 95       	ror	r20
     f9a:	8a 95       	dec	r24
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <dio_readPin+0x1fa>
     f9e:	ca 01       	movw	r24, r20
     fa0:	ed 81       	ldd	r30, Y+5	; 0x05
     fa2:	fe 81       	ldd	r31, Y+6	; 0x06
     fa4:	80 83       	st	Z, r24
     fa6:	43 c0       	rjmp	.+134    	; 0x102e <dio_readPin+0x292>

			}
			else
			{
				return_errorStatus = Dio_directionError;
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	8b 83       	std	Y+3, r24	; 0x03
     fac:	40 c0       	rjmp	.+128    	; 0x102e <dio_readPin+0x292>
				break;


		case DIO_PORTD:

			if (GET_BIT(DDRD,loc_pin) == PORT_INPUT)
     fae:	e1 e3       	ldi	r30, 0x31	; 49
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <dio_readPin+0x22c>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	2a 95       	dec	r18
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <dio_readPin+0x228>
     fcc:	9a 01       	movw	r18, r20
     fce:	28 23       	and	r18, r24
     fd0:	39 23       	and	r19, r25
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	88 2f       	mov	r24, r24
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	a9 01       	movw	r20, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <dio_readPin+0x244>
     fdc:	55 95       	asr	r21
     fde:	47 95       	ror	r20
     fe0:	8a 95       	dec	r24
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <dio_readPin+0x240>
     fe4:	ca 01       	movw	r24, r20
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	01 f5       	brne	.+64     	; 0x102a <dio_readPin+0x28e>
			{

				*level = GET_BIT(PIND, loc_pin);
     fea:	e0 e3       	ldi	r30, 0x30	; 48
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <dio_readPin+0x268>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	2a 95       	dec	r18
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <dio_readPin+0x264>
    1008:	9a 01       	movw	r18, r20
    100a:	28 23       	and	r18, r24
    100c:	39 23       	and	r19, r25
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	a9 01       	movw	r20, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <dio_readPin+0x280>
    1018:	55 95       	asr	r21
    101a:	47 95       	ror	r20
    101c:	8a 95       	dec	r24
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <dio_readPin+0x27c>
    1020:	ca 01       	movw	r24, r20
    1022:	ed 81       	ldd	r30, Y+5	; 0x05
    1024:	fe 81       	ldd	r31, Y+6	; 0x06
    1026:	80 83       	st	Z, r24
    1028:	02 c0       	rjmp	.+4      	; 0x102e <dio_readPin+0x292>

			}
			else
			{
				return_errorStatus = Dio_directionError;
    102a:	83 e0       	ldi	r24, 0x03	; 3
    102c:	8b 83       	std	Y+3, r24	; 0x03
				break;

		}
	}

	return return_errorStatus;
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1030:	28 96       	adiw	r28, 0x08	; 8
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <dio_writePort>:
DIO_errorStatus dio_writePort(u8 port_id, u8 value)
{
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	00 d0       	rcall	.+0      	; 0x1048 <dio_writePort+0x6>
    1048:	00 d0       	rcall	.+0      	; 0x104a <dio_writePort+0x8>
    104a:	0f 92       	push	r0
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	8a 83       	std	Y+2, r24	; 0x02
    1052:	6b 83       	std	Y+3, r22	; 0x03
	DIO_errorStatus return_errorStatus = Dio_Ok;
    1054:	19 82       	std	Y+1, r1	; 0x01

	if (port_id > NUM_OF_PORTS) {
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	84 30       	cpi	r24, 0x04	; 4
    105a:	18 f0       	brcs	.+6      	; 0x1062 <dio_writePort+0x20>

		return_errorStatus = Dio_portError;
    105c:	85 e0       	ldi	r24, 0x05	; 5
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	32 c0       	rjmp	.+100    	; 0x10c6 <dio_writePort+0x84>
	}

	else {

		switch (port_id) {
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	3d 83       	std	Y+5, r19	; 0x05
    106a:	2c 83       	std	Y+4, r18	; 0x04
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	9d 81       	ldd	r25, Y+5	; 0x05
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	91 05       	cpc	r25, r1
    1074:	d1 f0       	breq	.+52     	; 0x10aa <dio_writePort+0x68>
    1076:	2c 81       	ldd	r18, Y+4	; 0x04
    1078:	3d 81       	ldd	r19, Y+5	; 0x05
    107a:	22 30       	cpi	r18, 0x02	; 2
    107c:	31 05       	cpc	r19, r1
    107e:	2c f4       	brge	.+10     	; 0x108a <dio_writePort+0x48>
    1080:	8c 81       	ldd	r24, Y+4	; 0x04
    1082:	9d 81       	ldd	r25, Y+5	; 0x05
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	61 f0       	breq	.+24     	; 0x10a0 <dio_writePort+0x5e>
    1088:	1e c0       	rjmp	.+60     	; 0x10c6 <dio_writePort+0x84>
    108a:	2c 81       	ldd	r18, Y+4	; 0x04
    108c:	3d 81       	ldd	r19, Y+5	; 0x05
    108e:	22 30       	cpi	r18, 0x02	; 2
    1090:	31 05       	cpc	r19, r1
    1092:	81 f0       	breq	.+32     	; 0x10b4 <dio_writePort+0x72>
    1094:	8c 81       	ldd	r24, Y+4	; 0x04
    1096:	9d 81       	ldd	r25, Y+5	; 0x05
    1098:	83 30       	cpi	r24, 0x03	; 3
    109a:	91 05       	cpc	r25, r1
    109c:	81 f0       	breq	.+32     	; 0x10be <dio_writePort+0x7c>
    109e:	13 c0       	rjmp	.+38     	; 0x10c6 <dio_writePort+0x84>

		case DIO_PORTA:

			ASSIGN_REG(PORTA, value);
    10a0:	eb e3       	ldi	r30, 0x3B	; 59
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	80 83       	st	Z, r24
    10a8:	0e c0       	rjmp	.+28     	; 0x10c6 <dio_writePort+0x84>

			break;

		case DIO_PORTB:

			ASSIGN_REG(PORTB, value);
    10aa:	e8 e3       	ldi	r30, 0x38	; 56
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	80 83       	st	Z, r24
    10b2:	09 c0       	rjmp	.+18     	; 0x10c6 <dio_writePort+0x84>

			break;

		case DIO_PORTC:

			ASSIGN_REG(PORTC, value);
    10b4:	e5 e3       	ldi	r30, 0x35	; 53
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	80 83       	st	Z, r24
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <dio_writePort+0x84>

			break;

		case DIO_PORTD:

			ASSIGN_REG(PORTD, value);
    10be:	e2 e3       	ldi	r30, 0x32	; 50
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	80 83       	st	Z, r24

		}

	}

	return return_errorStatus;
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <dio_readPort>:
DIO_errorStatus dio_readPort(u8 port_id, pu8 level)
{
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	00 d0       	rcall	.+0      	; 0x10de <dio_readPort+0x6>
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <dio_readPort+0x8>
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <dio_readPort+0xa>
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	8a 83       	std	Y+2, r24	; 0x02
    10e8:	7c 83       	std	Y+4, r23	; 0x04
    10ea:	6b 83       	std	Y+3, r22	; 0x03
	DIO_errorStatus return_errorStatus = Dio_Ok;
    10ec:	19 82       	std	Y+1, r1	; 0x01

	if (level == NULL) {
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	9c 81       	ldd	r25, Y+4	; 0x04
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	19 f4       	brne	.+6      	; 0x10fc <dio_readPort+0x24>

		return_errorStatus = Dio_NullPointerError;
    10f6:	84 e0       	ldi	r24, 0x04	; 4
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	40 c0       	rjmp	.+128    	; 0x117c <dio_readPort+0xa4>
	}

	else if (port_id > NUM_OF_PORTS)
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	84 30       	cpi	r24, 0x04	; 4
    1100:	18 f0       	brcs	.+6      	; 0x1108 <dio_readPort+0x30>
	{

		return_errorStatus = Dio_portError;
    1102:	85 e0       	ldi	r24, 0x05	; 5
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	3a c0       	rjmp	.+116    	; 0x117c <dio_readPort+0xa4>
	}

	else
	{

		switch (port_id) {
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	3e 83       	std	Y+6, r19	; 0x06
    1110:	2d 83       	std	Y+5, r18	; 0x05
    1112:	8d 81       	ldd	r24, Y+5	; 0x05
    1114:	9e 81       	ldd	r25, Y+6	; 0x06
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	91 05       	cpc	r25, r1
    111a:	e1 f0       	breq	.+56     	; 0x1154 <dio_readPort+0x7c>
    111c:	2d 81       	ldd	r18, Y+5	; 0x05
    111e:	3e 81       	ldd	r19, Y+6	; 0x06
    1120:	22 30       	cpi	r18, 0x02	; 2
    1122:	31 05       	cpc	r19, r1
    1124:	2c f4       	brge	.+10     	; 0x1130 <dio_readPort+0x58>
    1126:	8d 81       	ldd	r24, Y+5	; 0x05
    1128:	9e 81       	ldd	r25, Y+6	; 0x06
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	61 f0       	breq	.+24     	; 0x1146 <dio_readPort+0x6e>
    112e:	26 c0       	rjmp	.+76     	; 0x117c <dio_readPort+0xa4>
    1130:	2d 81       	ldd	r18, Y+5	; 0x05
    1132:	3e 81       	ldd	r19, Y+6	; 0x06
    1134:	22 30       	cpi	r18, 0x02	; 2
    1136:	31 05       	cpc	r19, r1
    1138:	a1 f0       	breq	.+40     	; 0x1162 <dio_readPort+0x8a>
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	9e 81       	ldd	r25, Y+6	; 0x06
    113e:	83 30       	cpi	r24, 0x03	; 3
    1140:	91 05       	cpc	r25, r1
    1142:	b1 f0       	breq	.+44     	; 0x1170 <dio_readPort+0x98>
    1144:	1b c0       	rjmp	.+54     	; 0x117c <dio_readPort+0xa4>

		case DIO_PORTA:

			*level = PINA;
    1146:	e9 e3       	ldi	r30, 0x39	; 57
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	eb 81       	ldd	r30, Y+3	; 0x03
    114e:	fc 81       	ldd	r31, Y+4	; 0x04
    1150:	80 83       	st	Z, r24
    1152:	14 c0       	rjmp	.+40     	; 0x117c <dio_readPort+0xa4>

			break;

		case DIO_PORTB:

			*level = PINB;
    1154:	e6 e3       	ldi	r30, 0x36	; 54
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	eb 81       	ldd	r30, Y+3	; 0x03
    115c:	fc 81       	ldd	r31, Y+4	; 0x04
    115e:	80 83       	st	Z, r24
    1160:	0d c0       	rjmp	.+26     	; 0x117c <dio_readPort+0xa4>

			break;

		case DIO_PORTC:

			*level = PINC;
    1162:	e3 e3       	ldi	r30, 0x33	; 51
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	eb 81       	ldd	r30, Y+3	; 0x03
    116a:	fc 81       	ldd	r31, Y+4	; 0x04
    116c:	80 83       	st	Z, r24
    116e:	06 c0       	rjmp	.+12     	; 0x117c <dio_readPort+0xa4>

			break;

		case DIO_PORTD:

			*level = PIND;
    1170:	e0 e3       	ldi	r30, 0x30	; 48
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	eb 81       	ldd	r30, Y+3	; 0x03
    1178:	fc 81       	ldd	r31, Y+4	; 0x04
    117a:	80 83       	st	Z, r24
			break;

		}

	}
	return return_errorStatus;
    117c:	89 81       	ldd	r24, Y+1	; 0x01
}
    117e:	26 96       	adiw	r28, 0x06	; 6
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <dio_tooglePin>:
DIO_errorStatus dio_tooglePin(u8 pin_id)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	00 d0       	rcall	.+0      	; 0x1196 <dio_tooglePin+0x6>
    1196:	00 d0       	rcall	.+0      	; 0x1198 <dio_tooglePin+0x8>
    1198:	00 d0       	rcall	.+0      	; 0x119a <dio_tooglePin+0xa>
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	8c 83       	std	Y+4, r24	; 0x04
	DIO_errorStatus return_errorStatus = Dio_Ok;
    11a0:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_pin;
	u8 loc_port;

	if (pin_id > NUM_OF_PINS)
    11a2:	8c 81       	ldd	r24, Y+4	; 0x04
    11a4:	80 32       	cpi	r24, 0x20	; 32
    11a6:	18 f0       	brcs	.+6      	; 0x11ae <dio_tooglePin+0x1e>
	{

		return_errorStatus = Dio_pinError;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	8b 83       	std	Y+3, r24	; 0x03
    11ac:	f9 c0       	rjmp	.+498    	; 0x13a0 <dio_tooglePin+0x210>
	}

	else
	{
		loc_pin = pin_id % NUM_OF_PINS_PER_PORT;
    11ae:	8c 81       	ldd	r24, Y+4	; 0x04
    11b0:	87 70       	andi	r24, 0x07	; 7
    11b2:	8a 83       	std	Y+2, r24	; 0x02
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	86 95       	lsr	r24
    11b8:	86 95       	lsr	r24
    11ba:	86 95       	lsr	r24
    11bc:	89 83       	std	Y+1, r24	; 0x01

		switch (loc_port)
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	3e 83       	std	Y+6, r19	; 0x06
    11c6:	2d 83       	std	Y+5, r18	; 0x05
    11c8:	4d 81       	ldd	r20, Y+5	; 0x05
    11ca:	5e 81       	ldd	r21, Y+6	; 0x06
    11cc:	41 30       	cpi	r20, 0x01	; 1
    11ce:	51 05       	cpc	r21, r1
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <dio_tooglePin+0x44>
    11d2:	4c c0       	rjmp	.+152    	; 0x126c <dio_tooglePin+0xdc>
    11d4:	8d 81       	ldd	r24, Y+5	; 0x05
    11d6:	9e 81       	ldd	r25, Y+6	; 0x06
    11d8:	82 30       	cpi	r24, 0x02	; 2
    11da:	91 05       	cpc	r25, r1
    11dc:	34 f4       	brge	.+12     	; 0x11ea <dio_tooglePin+0x5a>
    11de:	2d 81       	ldd	r18, Y+5	; 0x05
    11e0:	3e 81       	ldd	r19, Y+6	; 0x06
    11e2:	21 15       	cp	r18, r1
    11e4:	31 05       	cpc	r19, r1
    11e6:	71 f0       	breq	.+28     	; 0x1204 <dio_tooglePin+0x74>
    11e8:	db c0       	rjmp	.+438    	; 0x13a0 <dio_tooglePin+0x210>
    11ea:	4d 81       	ldd	r20, Y+5	; 0x05
    11ec:	5e 81       	ldd	r21, Y+6	; 0x06
    11ee:	42 30       	cpi	r20, 0x02	; 2
    11f0:	51 05       	cpc	r21, r1
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <dio_tooglePin+0x66>
    11f4:	6f c0       	rjmp	.+222    	; 0x12d4 <dio_tooglePin+0x144>
    11f6:	8d 81       	ldd	r24, Y+5	; 0x05
    11f8:	9e 81       	ldd	r25, Y+6	; 0x06
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	91 05       	cpc	r25, r1
    11fe:	09 f4       	brne	.+2      	; 0x1202 <dio_tooglePin+0x72>
    1200:	9d c0       	rjmp	.+314    	; 0x133c <dio_tooglePin+0x1ac>
    1202:	ce c0       	rjmp	.+412    	; 0x13a0 <dio_tooglePin+0x210>
		{

		case DIO_PORTA:

			if (GET_BIT(DDRA,loc_pin) == PORT_OUTPUT)
    1204:	ea e3       	ldi	r30, 0x3A	; 58
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	50 e0       	ldi	r21, 0x00	; 0
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 c0       	rjmp	.+4      	; 0x121e <dio_tooglePin+0x8e>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	2a 95       	dec	r18
    1220:	e2 f7       	brpl	.-8      	; 0x121a <dio_tooglePin+0x8a>
    1222:	9a 01       	movw	r18, r20
    1224:	28 23       	and	r18, r24
    1226:	39 23       	and	r19, r25
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	88 2f       	mov	r24, r24
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	a9 01       	movw	r20, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <dio_tooglePin+0xa6>
    1232:	55 95       	asr	r21
    1234:	47 95       	ror	r20
    1236:	8a 95       	dec	r24
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <dio_tooglePin+0xa2>
    123a:	ca 01       	movw	r24, r20
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	91 05       	cpc	r25, r1
    1240:	09 f0       	breq	.+2      	; 0x1244 <dio_tooglePin+0xb4>
    1242:	ae c0       	rjmp	.+348    	; 0x13a0 <dio_tooglePin+0x210>
			{
				TOGGLE_BIT(PORTA, loc_pin);
    1244:	ab e3       	ldi	r26, 0x3B	; 59
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	eb e3       	ldi	r30, 0x3B	; 59
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <dio_tooglePin+0xd2>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <dio_tooglePin+0xce>
    1266:	84 27       	eor	r24, r20
    1268:	8c 93       	st	X, r24
    126a:	9a c0       	rjmp	.+308    	; 0x13a0 <dio_tooglePin+0x210>
			}
			break;

		case DIO_PORTB:

			if (GET_BIT(DDRB,loc_pin) == PORT_OUTPUT)
    126c:	e7 e3       	ldi	r30, 0x37	; 55
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <dio_tooglePin+0xf6>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	2a 95       	dec	r18
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <dio_tooglePin+0xf2>
    128a:	9a 01       	movw	r18, r20
    128c:	28 23       	and	r18, r24
    128e:	39 23       	and	r19, r25
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	88 2f       	mov	r24, r24
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	a9 01       	movw	r20, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <dio_tooglePin+0x10e>
    129a:	55 95       	asr	r21
    129c:	47 95       	ror	r20
    129e:	8a 95       	dec	r24
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <dio_tooglePin+0x10a>
    12a2:	ca 01       	movw	r24, r20
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	91 05       	cpc	r25, r1
    12a8:	09 f0       	breq	.+2      	; 0x12ac <dio_tooglePin+0x11c>
    12aa:	7a c0       	rjmp	.+244    	; 0x13a0 <dio_tooglePin+0x210>
			{
				TOGGLE_BIT(PORTB, loc_pin);
    12ac:	a8 e3       	ldi	r26, 0x38	; 56
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e8 e3       	ldi	r30, 0x38	; 56
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <dio_tooglePin+0x13a>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <dio_tooglePin+0x136>
    12ce:	84 27       	eor	r24, r20
    12d0:	8c 93       	st	X, r24
    12d2:	66 c0       	rjmp	.+204    	; 0x13a0 <dio_tooglePin+0x210>
			}
			break;

		case DIO_PORTC:

			if (GET_BIT(DDRC,loc_pin) == PORT_OUTPUT)
    12d4:	e4 e3       	ldi	r30, 0x34	; 52
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	50 e0       	ldi	r21, 0x00	; 0
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <dio_tooglePin+0x15e>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	2a 95       	dec	r18
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <dio_tooglePin+0x15a>
    12f2:	9a 01       	movw	r18, r20
    12f4:	28 23       	and	r18, r24
    12f6:	39 23       	and	r19, r25
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	88 2f       	mov	r24, r24
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	a9 01       	movw	r20, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <dio_tooglePin+0x176>
    1302:	55 95       	asr	r21
    1304:	47 95       	ror	r20
    1306:	8a 95       	dec	r24
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <dio_tooglePin+0x172>
    130a:	ca 01       	movw	r24, r20
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	91 05       	cpc	r25, r1
    1310:	09 f0       	breq	.+2      	; 0x1314 <dio_tooglePin+0x184>
    1312:	46 c0       	rjmp	.+140    	; 0x13a0 <dio_tooglePin+0x210>
			{
				TOGGLE_BIT(PORTC, loc_pin);
    1314:	a5 e3       	ldi	r26, 0x35	; 53
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e5 e3       	ldi	r30, 0x35	; 53
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	48 2f       	mov	r20, r24
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 2e       	mov	r0, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <dio_tooglePin+0x1a2>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	0a 94       	dec	r0
    1334:	e2 f7       	brpl	.-8      	; 0x132e <dio_tooglePin+0x19e>
    1336:	84 27       	eor	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	32 c0       	rjmp	.+100    	; 0x13a0 <dio_tooglePin+0x210>
			}
			break;

		case DIO_PORTD:

			if (GET_BIT(DDRD,loc_pin) == PORT_OUTPUT)
    133c:	e1 e3       	ldi	r30, 0x31	; 49
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <dio_tooglePin+0x1c6>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	2a 95       	dec	r18
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <dio_tooglePin+0x1c2>
    135a:	9a 01       	movw	r18, r20
    135c:	28 23       	and	r18, r24
    135e:	39 23       	and	r19, r25
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	88 2f       	mov	r24, r24
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	a9 01       	movw	r20, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <dio_tooglePin+0x1de>
    136a:	55 95       	asr	r21
    136c:	47 95       	ror	r20
    136e:	8a 95       	dec	r24
    1370:	e2 f7       	brpl	.-8      	; 0x136a <dio_tooglePin+0x1da>
    1372:	ca 01       	movw	r24, r20
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	91 05       	cpc	r25, r1
    1378:	99 f4       	brne	.+38     	; 0x13a0 <dio_tooglePin+0x210>
			{
				TOGGLE_BIT(PORTD, loc_pin);
    137a:	a2 e3       	ldi	r26, 0x32	; 50
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e2 e3       	ldi	r30, 0x32	; 50
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	48 2f       	mov	r20, r24
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 2e       	mov	r0, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <dio_tooglePin+0x208>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	0a 94       	dec	r0
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <dio_tooglePin+0x204>
    139c:	84 27       	eor	r24, r20
    139e:	8c 93       	st	X, r24
			break;

		}

	}
	return return_errorStatus;
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    13a2:	26 96       	adiw	r28, 0x06	; 6
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <__vector_1>:

static void(*clbck_ptr[2])(void);


ISR(INT0_vect)
{
    13b4:	1f 92       	push	r1
    13b6:	0f 92       	push	r0
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	0f 92       	push	r0
    13bc:	11 24       	eor	r1, r1
    13be:	2f 93       	push	r18
    13c0:	3f 93       	push	r19
    13c2:	4f 93       	push	r20
    13c4:	5f 93       	push	r21
    13c6:	6f 93       	push	r22
    13c8:	7f 93       	push	r23
    13ca:	8f 93       	push	r24
    13cc:	9f 93       	push	r25
    13ce:	af 93       	push	r26
    13d0:	bf 93       	push	r27
    13d2:	ef 93       	push	r30
    13d4:	ff 93       	push	r31
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
	if(clbck_ptr[0] != NULL)
    13de:	80 91 68 00 	lds	r24, 0x0068
    13e2:	90 91 69 00 	lds	r25, 0x0069
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	29 f0       	breq	.+10     	; 0x13f4 <__vector_1+0x40>
	{
		clbck_ptr[0]();
    13ea:	e0 91 68 00 	lds	r30, 0x0068
    13ee:	f0 91 69 00 	lds	r31, 0x0069
    13f2:	09 95       	icall
	}
}
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	ff 91       	pop	r31
    13fa:	ef 91       	pop	r30
    13fc:	bf 91       	pop	r27
    13fe:	af 91       	pop	r26
    1400:	9f 91       	pop	r25
    1402:	8f 91       	pop	r24
    1404:	7f 91       	pop	r23
    1406:	6f 91       	pop	r22
    1408:	5f 91       	pop	r21
    140a:	4f 91       	pop	r20
    140c:	3f 91       	pop	r19
    140e:	2f 91       	pop	r18
    1410:	0f 90       	pop	r0
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	0f 90       	pop	r0
    1416:	1f 90       	pop	r1
    1418:	18 95       	reti

0000141a <__vector_2>:

ISR(INT1_vect)
{
    141a:	1f 92       	push	r1
    141c:	0f 92       	push	r0
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	0f 92       	push	r0
    1422:	11 24       	eor	r1, r1
    1424:	2f 93       	push	r18
    1426:	3f 93       	push	r19
    1428:	4f 93       	push	r20
    142a:	5f 93       	push	r21
    142c:	6f 93       	push	r22
    142e:	7f 93       	push	r23
    1430:	8f 93       	push	r24
    1432:	9f 93       	push	r25
    1434:	af 93       	push	r26
    1436:	bf 93       	push	r27
    1438:	ef 93       	push	r30
    143a:	ff 93       	push	r31
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
	if(clbck_ptr[1] != NULL)
    1444:	80 91 6a 00 	lds	r24, 0x006A
    1448:	90 91 6b 00 	lds	r25, 0x006B
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	29 f0       	breq	.+10     	; 0x145a <__vector_2+0x40>
	{
		clbck_ptr[1]();
    1450:	e0 91 6a 00 	lds	r30, 0x006A
    1454:	f0 91 6b 00 	lds	r31, 0x006B
    1458:	09 95       	icall
	}
}
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	ff 91       	pop	r31
    1460:	ef 91       	pop	r30
    1462:	bf 91       	pop	r27
    1464:	af 91       	pop	r26
    1466:	9f 91       	pop	r25
    1468:	8f 91       	pop	r24
    146a:	7f 91       	pop	r23
    146c:	6f 91       	pop	r22
    146e:	5f 91       	pop	r21
    1470:	4f 91       	pop	r20
    1472:	3f 91       	pop	r19
    1474:	2f 91       	pop	r18
    1476:	0f 90       	pop	r0
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	0f 90       	pop	r0
    147c:	1f 90       	pop	r1
    147e:	18 95       	reti

00001480 <callBack>:
void callBack(void(*loc_clbk_ptr)(void), u8 index)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	00 d0       	rcall	.+0      	; 0x1486 <callBack+0x6>
    1486:	0f 92       	push	r0
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	9a 83       	std	Y+2, r25	; 0x02
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	6b 83       	std	Y+3, r22	; 0x03
	clbck_ptr[index] = loc_clbk_ptr;
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	fc 01       	movw	r30, r24
    149e:	e8 59       	subi	r30, 0x98	; 152
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	9a 81       	ldd	r25, Y+2	; 0x02
    14a6:	91 83       	std	Z+1, r25	; 0x01
    14a8:	80 83       	st	Z, r24
}
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <exInt0_enable>:

void exInt0_enable(u8 trigger)
{
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	0f 92       	push	r0
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(GICR,BIT_6);
    14c2:	ab e5       	ldi	r26, 0x5B	; 91
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	eb e5       	ldi	r30, 0x5B	; 91
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	80 64       	ori	r24, 0x40	; 64
    14ce:	8c 93       	st	X, r24
	ASSIGN_BITS(MCUCR,trigger);
    14d0:	a5 e5       	ldi	r26, 0x55	; 85
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e5 e5       	ldi	r30, 0x55	; 85
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	90 81       	ld	r25, Z
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	89 2b       	or	r24, r25
    14de:	8c 93       	st	X, r24
}
    14e0:	0f 90       	pop	r0
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <exInt0_disable>:
void exInt0_disable(void)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
	setPinDirection(PORT_PIN26_ID,PIN_OUTPUT);
    14f0:	8a e1       	ldi	r24, 0x1A	; 26
    14f2:	61 e0       	ldi	r22, 0x01	; 1
    14f4:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <setPinDirection>
	CLEAR_BIT(GICR,BIT_6);
    14f8:	ab e5       	ldi	r26, 0x5B	; 91
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	eb e5       	ldi	r30, 0x5B	; 91
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	8f 7b       	andi	r24, 0xBF	; 191
    1504:	8c 93       	st	X, r24
}
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <exInt1_enable>:
void exInt1_enable(u8 trigger)
{
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	0f 92       	push	r0
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(GICR,BIT_7);
    1518:	ab e5       	ldi	r26, 0x5B	; 91
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	eb e5       	ldi	r30, 0x5B	; 91
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	80 68       	ori	r24, 0x80	; 128
    1524:	8c 93       	st	X, r24
	ASSIGN_SECOND_TWO_BITS(MCUCR,trigger);
    1526:	a5 e5       	ldi	r26, 0x55	; 85
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e5 e5       	ldi	r30, 0x55	; 85
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	90 81       	ld	r25, Z
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	89 2b       	or	r24, r25
    1534:	88 0f       	add	r24, r24
    1536:	88 0f       	add	r24, r24
    1538:	8c 93       	st	X, r24
}
    153a:	0f 90       	pop	r0
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <exInt1_disable>:
void exInt1_disable(void)
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
	setPinDirection(PORT_PIN27_ID,PIN_INPUT);
    154a:	8b e1       	ldi	r24, 0x1B	; 27
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <setPinDirection>
	CLEAR_BIT(GICR,BIT_7);
    1552:	ab e5       	ldi	r26, 0x5B	; 91
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	eb e5       	ldi	r30, 0x5B	; 91
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8f 77       	andi	r24, 0x7F	; 127
    155e:	8c 93       	st	X, r24
}
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <exInt2_enable>:
void exInt2_enable(u8 trigger)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	0f 92       	push	r0
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(GICR,BIT_5);
    1572:	ab e5       	ldi	r26, 0x5B	; 91
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	eb e5       	ldi	r30, 0x5B	; 91
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	80 62       	ori	r24, 0x20	; 32
    157e:	8c 93       	st	X, r24
	SET_BIT(MCUCSR,BIT_5);
    1580:	a4 e5       	ldi	r26, 0x54	; 84
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e4 e5       	ldi	r30, 0x54	; 84
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	80 62       	ori	r24, 0x20	; 32
    158c:	8c 93       	st	X, r24
}
    158e:	0f 90       	pop	r0
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <exInt2_disable>:
void exInt2_disable(void)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
	setPinDirection(PORT_PIN28_ID,PIN_INPUT);
    159e:	8c e1       	ldi	r24, 0x1C	; 28
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <setPinDirection>
	CLEAR_BIT(GICR,BIT_5);
    15a6:	ab e5       	ldi	r26, 0x5B	; 91
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	eb e5       	ldi	r30, 0x5B	; 91
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	8f 7d       	andi	r24, 0xDF	; 223
    15b2:	8c 93       	st	X, r24
}
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <port_init>:
#include"port_config.h"
#include<avr/io.h>
/*initialize based on user configuration*/

void port_init(void)
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
#define PIN_OUTPUT_LOW               1

#undef PIN_OUTPUT_HIGH
#define PIN_OUTPUT_HIGH              1

	DDRA = CONC(DIO_u8_PIN0,DIO_u8_PIN1,DIO_u8_PIN2,DIO_u8_PIN3,DIO_u8_PIN4,DIO_u8_PIN5,DIO_u8_PIN6,DIO_u8_PIN7);
    15c2:	ea e3       	ldi	r30, 0x3A	; 58
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	8f ef       	ldi	r24, 0xFF	; 255
    15c8:	80 83       	st	Z, r24
	DDRB = CONC(DIO_u8_PIN8,DIO_u8_PIN9,DIO_u8_PIN10,DIO_u8_PIN11,DIO_u8_PIN12,DIO_u8_PIN13,DIO_u8_PIN14,DIO_u8_PIN15);
    15ca:	e7 e3       	ldi	r30, 0x37	; 55
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	10 82       	st	Z, r1
	DDRC = CONC(DIO_u8_PIN16,DIO_u8_PIN17,DIO_u8_PIN18,DIO_u8_PIN19,DIO_u8_PIN20,DIO_u8_PIN21,DIO_u8_PIN22,DIO_u8_PIN23);
    15d0:	e4 e3       	ldi	r30, 0x34	; 52
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	8f ef       	ldi	r24, 0xFF	; 255
    15d6:	80 83       	st	Z, r24
	DDRD = CONC(DIO_u8_PIN24,DIO_u8_PIN25,DIO_u8_PIN26,DIO_u8_PIN27,DIO_u8_PIN28,DIO_u8_PIN29,DIO_u8_PIN30,DIO_u8_PIN31);
    15d8:	e1 e3       	ldi	r30, 0x31	; 49
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	10 82       	st	Z, r1
#define PIN_OUTPUT_LOW               0

#undef PIN_OUTPUT_HIGH
#define PIN_OUTPUT_HIGH              1

	PORTA = CONC(DIO_u8_PIN0,DIO_u8_PIN1,DIO_u8_PIN2,DIO_u8_PIN3,DIO_u8_PIN4,DIO_u8_PIN5,DIO_u8_PIN6,DIO_u8_PIN7);
    15de:	eb e3       	ldi	r30, 0x3B	; 59
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	10 82       	st	Z, r1
	PORTB = CONC(DIO_u8_PIN8,DIO_u8_PIN9,DIO_u8_PIN10,DIO_u8_PIN11,DIO_u8_PIN12,DIO_u8_PIN13,DIO_u8_PIN14,DIO_u8_PIN15);
    15e4:	e8 e3       	ldi	r30, 0x38	; 56
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	10 82       	st	Z, r1
	PORTC = CONC(DIO_u8_PIN16,DIO_u8_PIN17,DIO_u8_PIN18,DIO_u8_PIN19,DIO_u8_PIN20,DIO_u8_PIN21,DIO_u8_PIN22,DIO_u8_PIN23);
    15ea:	e5 e3       	ldi	r30, 0x35	; 53
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	10 82       	st	Z, r1
	PORTD = CONC(DIO_u8_PIN24,DIO_u8_PIN25,DIO_u8_PIN26,DIO_u8_PIN27,DIO_u8_PIN28,DIO_u8_PIN29,DIO_u8_PIN30,DIO_u8_PIN31);
    15f0:	e2 e3       	ldi	r30, 0x32	; 50
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	10 82       	st	Z, r1
#define PIN_OUTPUT_LOW              1
#define PIN_OUTPUT_HIGH             2
#define PIN_INPUT_PULL_UP           3
#define PIN_INPUT_FLOATING          4

}
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	08 95       	ret

000015fc <setPinDirection>:

/*set pin direction*/
port_errorStatus setPinDirection(u8 pin_id, u8 direction)
{
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	27 97       	sbiw	r28, 0x07	; 7
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	8c 83       	std	Y+4, r24	; 0x04
    1612:	6d 83       	std	Y+5, r22	; 0x05
	port_errorStatus return_errorStatus = port_OK;
    1614:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_pn;
	u8 loc_port;

	if(pin_id > NUM_OF_PINS)
    1616:	8c 81       	ldd	r24, Y+4	; 0x04
    1618:	80 32       	cpi	r24, 0x20	; 32
    161a:	18 f0       	brcs	.+6      	; 0x1622 <setPinDirection+0x26>
	{
		return_errorStatus = pinError;
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	8b 83       	std	Y+3, r24	; 0x03
    1620:	df c0       	rjmp	.+446    	; 0x17e0 <setPinDirection+0x1e4>
	}
	else if(direction > NUM_OF_DIRECTION)
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
    1624:	82 30       	cpi	r24, 0x02	; 2
    1626:	18 f0       	brcs	.+6      	; 0x162e <setPinDirection+0x32>
	{
		return_errorStatus = pinDirectionError;
    1628:	82 e0       	ldi	r24, 0x02	; 2
    162a:	8b 83       	std	Y+3, r24	; 0x03
    162c:	d9 c0       	rjmp	.+434    	; 0x17e0 <setPinDirection+0x1e4>
	}
	else
	{
		loc_pn = pin_id % NUM_OF_PINS_PER_PORT;
    162e:	8c 81       	ldd	r24, Y+4	; 0x04
    1630:	87 70       	andi	r24, 0x07	; 7
    1632:	8a 83       	std	Y+2, r24	; 0x02
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	86 95       	lsr	r24
    1638:	86 95       	lsr	r24
    163a:	86 95       	lsr	r24
    163c:	89 83       	std	Y+1, r24	; 0x01

		switch(loc_port)
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	3f 83       	std	Y+7, r19	; 0x07
    1646:	2e 83       	std	Y+6, r18	; 0x06
    1648:	8e 81       	ldd	r24, Y+6	; 0x06
    164a:	9f 81       	ldd	r25, Y+7	; 0x07
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	91 05       	cpc	r25, r1
    1650:	09 f4       	brne	.+2      	; 0x1654 <setPinDirection+0x58>
    1652:	43 c0       	rjmp	.+134    	; 0x16da <setPinDirection+0xde>
    1654:	2e 81       	ldd	r18, Y+6	; 0x06
    1656:	3f 81       	ldd	r19, Y+7	; 0x07
    1658:	22 30       	cpi	r18, 0x02	; 2
    165a:	31 05       	cpc	r19, r1
    165c:	2c f4       	brge	.+10     	; 0x1668 <setPinDirection+0x6c>
    165e:	8e 81       	ldd	r24, Y+6	; 0x06
    1660:	9f 81       	ldd	r25, Y+7	; 0x07
    1662:	00 97       	sbiw	r24, 0x00	; 0
    1664:	71 f0       	breq	.+28     	; 0x1682 <setPinDirection+0x86>
    1666:	bc c0       	rjmp	.+376    	; 0x17e0 <setPinDirection+0x1e4>
    1668:	2e 81       	ldd	r18, Y+6	; 0x06
    166a:	3f 81       	ldd	r19, Y+7	; 0x07
    166c:	22 30       	cpi	r18, 0x02	; 2
    166e:	31 05       	cpc	r19, r1
    1670:	09 f4       	brne	.+2      	; 0x1674 <setPinDirection+0x78>
    1672:	5f c0       	rjmp	.+190    	; 0x1732 <setPinDirection+0x136>
    1674:	8e 81       	ldd	r24, Y+6	; 0x06
    1676:	9f 81       	ldd	r25, Y+7	; 0x07
    1678:	83 30       	cpi	r24, 0x03	; 3
    167a:	91 05       	cpc	r25, r1
    167c:	09 f4       	brne	.+2      	; 0x1680 <setPinDirection+0x84>
    167e:	85 c0       	rjmp	.+266    	; 0x178a <setPinDirection+0x18e>
    1680:	af c0       	rjmp	.+350    	; 0x17e0 <setPinDirection+0x1e4>
		{
		case PORT_PORTA:
			if (direction == PIN_OUTPUT_HIGH)
    1682:	8d 81       	ldd	r24, Y+5	; 0x05
    1684:	82 30       	cpi	r24, 0x02	; 2
    1686:	a1 f4       	brne	.+40     	; 0x16b0 <setPinDirection+0xb4>
			{
				SET_BIT(DDRA, loc_pn);
    1688:	aa e3       	ldi	r26, 0x3A	; 58
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	ea e3       	ldi	r30, 0x3A	; 58
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <setPinDirection+0xaa>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <setPinDirection+0xa6>
    16aa:	84 2b       	or	r24, r20
    16ac:	8c 93       	st	X, r24
    16ae:	98 c0       	rjmp	.+304    	; 0x17e0 <setPinDirection+0x1e4>
			}
			else
			{
				CLEAR_BIT(DDRA, loc_pn);
    16b0:	aa e3       	ldi	r26, 0x3A	; 58
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	ea e3       	ldi	r30, 0x3A	; 58
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 2e       	mov	r0, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <setPinDirection+0xd2>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	0a 94       	dec	r0
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <setPinDirection+0xce>
    16d2:	80 95       	com	r24
    16d4:	84 23       	and	r24, r20
    16d6:	8c 93       	st	X, r24
    16d8:	83 c0       	rjmp	.+262    	; 0x17e0 <setPinDirection+0x1e4>
			}
			break;

		case PORT_PORTB:
			if (direction == PIN_OUTPUT_HIGH)
    16da:	8d 81       	ldd	r24, Y+5	; 0x05
    16dc:	82 30       	cpi	r24, 0x02	; 2
    16de:	a1 f4       	brne	.+40     	; 0x1708 <setPinDirection+0x10c>
			{
				SET_BIT(DDRB, loc_pn);
    16e0:	a7 e3       	ldi	r26, 0x37	; 55
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e7 e3       	ldi	r30, 0x37	; 55
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	48 2f       	mov	r20, r24
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	02 2e       	mov	r0, r18
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <setPinDirection+0x102>
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	0a 94       	dec	r0
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <setPinDirection+0xfe>
    1702:	84 2b       	or	r24, r20
    1704:	8c 93       	st	X, r24
    1706:	6c c0       	rjmp	.+216    	; 0x17e0 <setPinDirection+0x1e4>
			}
			else
			{
				CLEAR_BIT(DDRB, loc_pn);
    1708:	a7 e3       	ldi	r26, 0x37	; 55
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e7 e3       	ldi	r30, 0x37	; 55
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	48 2f       	mov	r20, r24
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	02 2e       	mov	r0, r18
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <setPinDirection+0x12a>
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	0a 94       	dec	r0
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <setPinDirection+0x126>
    172a:	80 95       	com	r24
    172c:	84 23       	and	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	57 c0       	rjmp	.+174    	; 0x17e0 <setPinDirection+0x1e4>
			}
			break;
		case PORT_PORTC:
			if (direction == PIN_OUTPUT_HIGH)
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	82 30       	cpi	r24, 0x02	; 2
    1736:	a1 f4       	brne	.+40     	; 0x1760 <setPinDirection+0x164>
			{
				SET_BIT(DDRC, loc_pn);
    1738:	a4 e3       	ldi	r26, 0x34	; 52
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e4 e3       	ldi	r30, 0x34	; 52
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	48 2f       	mov	r20, r24
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	02 2e       	mov	r0, r18
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <setPinDirection+0x15a>
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	0a 94       	dec	r0
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <setPinDirection+0x156>
    175a:	84 2b       	or	r24, r20
    175c:	8c 93       	st	X, r24
    175e:	40 c0       	rjmp	.+128    	; 0x17e0 <setPinDirection+0x1e4>
			}
			else
			{
				CLEAR_BIT(DDRC, loc_pn);
    1760:	a4 e3       	ldi	r26, 0x34	; 52
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e4 e3       	ldi	r30, 0x34	; 52
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 2e       	mov	r0, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <setPinDirection+0x182>
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	0a 94       	dec	r0
    1780:	e2 f7       	brpl	.-8      	; 0x177a <setPinDirection+0x17e>
    1782:	80 95       	com	r24
    1784:	84 23       	and	r24, r20
    1786:	8c 93       	st	X, r24
    1788:	2b c0       	rjmp	.+86     	; 0x17e0 <setPinDirection+0x1e4>
			}
			break;
		case PORT_PORTD:
			if (direction == PIN_OUTPUT_HIGH)
    178a:	8d 81       	ldd	r24, Y+5	; 0x05
    178c:	82 30       	cpi	r24, 0x02	; 2
    178e:	a1 f4       	brne	.+40     	; 0x17b8 <setPinDirection+0x1bc>
			{
				SET_BIT(DDRD, loc_pn);
    1790:	a1 e3       	ldi	r26, 0x31	; 49
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e1 e3       	ldi	r30, 0x31	; 49
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	48 2f       	mov	r20, r24
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 2e       	mov	r0, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <setPinDirection+0x1b2>
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	0a 94       	dec	r0
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <setPinDirection+0x1ae>
    17b2:	84 2b       	or	r24, r20
    17b4:	8c 93       	st	X, r24
    17b6:	14 c0       	rjmp	.+40     	; 0x17e0 <setPinDirection+0x1e4>
			}
			else
			{
				CLEAR_BIT(DDRD, loc_pn);
    17b8:	a1 e3       	ldi	r26, 0x31	; 49
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e1 e3       	ldi	r30, 0x31	; 49
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	48 2f       	mov	r20, r24
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	02 2e       	mov	r0, r18
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <setPinDirection+0x1da>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	0a 94       	dec	r0
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <setPinDirection+0x1d6>
    17da:	80 95       	com	r24
    17dc:	84 23       	and	r24, r20
    17de:	8c 93       	st	X, r24
			}
			break;
		}
	}

		return return_errorStatus;
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03


}
    17e2:	27 96       	adiw	r28, 0x07	; 7
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <setMode>:
/*
*choose between four modes
*change the state of pin in specific time
* */
port_errorStatus setMode(u8 pin_id, u8 mode)
{
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	2f 97       	sbiw	r28, 0x0f	; 15
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	8c 83       	std	Y+4, r24	; 0x04
    180a:	6d 83       	std	Y+5, r22	; 0x05
	port_errorStatus return_errorStatus = port_OK;
    180c:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_port;

	u8 loc_pin;

	if(pin_id > NUM_OF_PINS)
    180e:	8c 81       	ldd	r24, Y+4	; 0x04
    1810:	80 32       	cpi	r24, 0x20	; 32
    1812:	18 f0       	brcs	.+6      	; 0x181a <setMode+0x26>
	{
		return_errorStatus = pinError;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	8b 83       	std	Y+3, r24	; 0x03
    1818:	2b c3       	rjmp	.+1622   	; 0x1e70 <setMode+0x67c>
	}
	else if(mode > NUM_OF_MODES)
    181a:	8d 81       	ldd	r24, Y+5	; 0x05
    181c:	84 30       	cpi	r24, 0x04	; 4
    181e:	18 f0       	brcs	.+6      	; 0x1826 <setMode+0x32>
	{
		return_errorStatus = pinDirectionError;
    1820:	82 e0       	ldi	r24, 0x02	; 2
    1822:	8b 83       	std	Y+3, r24	; 0x03
    1824:	25 c3       	rjmp	.+1610   	; 0x1e70 <setMode+0x67c>
	}
	else
	{
		loc_pin = pin_id % NUM_OF_PINS_PER_PORT;
    1826:	8c 81       	ldd	r24, Y+4	; 0x04
    1828:	87 70       	andi	r24, 0x07	; 7
    182a:	89 83       	std	Y+1, r24	; 0x01
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
    182c:	8c 81       	ldd	r24, Y+4	; 0x04
    182e:	86 95       	lsr	r24
    1830:	86 95       	lsr	r24
    1832:	86 95       	lsr	r24
    1834:	8a 83       	std	Y+2, r24	; 0x02

		switch(loc_port)
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	3f 87       	std	Y+15, r19	; 0x0f
    183e:	2e 87       	std	Y+14, r18	; 0x0e
    1840:	8e 85       	ldd	r24, Y+14	; 0x0e
    1842:	9f 85       	ldd	r25, Y+15	; 0x0f
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	91 05       	cpc	r25, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <setMode+0x58>
    184a:	d6 c0       	rjmp	.+428    	; 0x19f8 <setMode+0x204>
    184c:	2e 85       	ldd	r18, Y+14	; 0x0e
    184e:	3f 85       	ldd	r19, Y+15	; 0x0f
    1850:	22 30       	cpi	r18, 0x02	; 2
    1852:	31 05       	cpc	r19, r1
    1854:	2c f4       	brge	.+10     	; 0x1860 <setMode+0x6c>
    1856:	8e 85       	ldd	r24, Y+14	; 0x0e
    1858:	9f 85       	ldd	r25, Y+15	; 0x0f
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	71 f0       	breq	.+28     	; 0x187a <setMode+0x86>
    185e:	08 c3       	rjmp	.+1552   	; 0x1e70 <setMode+0x67c>
    1860:	2e 85       	ldd	r18, Y+14	; 0x0e
    1862:	3f 85       	ldd	r19, Y+15	; 0x0f
    1864:	22 30       	cpi	r18, 0x02	; 2
    1866:	31 05       	cpc	r19, r1
    1868:	09 f4       	brne	.+2      	; 0x186c <setMode+0x78>
    186a:	85 c1       	rjmp	.+778    	; 0x1b76 <setMode+0x382>
    186c:	8e 85       	ldd	r24, Y+14	; 0x0e
    186e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1870:	83 30       	cpi	r24, 0x03	; 3
    1872:	91 05       	cpc	r25, r1
    1874:	09 f4       	brne	.+2      	; 0x1878 <setMode+0x84>
    1876:	3e c2       	rjmp	.+1148   	; 0x1cf4 <setMode+0x500>
    1878:	fb c2       	rjmp	.+1526   	; 0x1e70 <setMode+0x67c>
		{

		case PORT_PORTA:

			switch (mode)
    187a:	8d 81       	ldd	r24, Y+5	; 0x05
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	3d 87       	std	Y+13, r19	; 0x0d
    1882:	2c 87       	std	Y+12, r18	; 0x0c
    1884:	8c 85       	ldd	r24, Y+12	; 0x0c
    1886:	9d 85       	ldd	r25, Y+13	; 0x0d
    1888:	82 30       	cpi	r24, 0x02	; 2
    188a:	91 05       	cpc	r25, r1
    188c:	09 f4       	brne	.+2      	; 0x1890 <setMode+0x9c>
    188e:	3f c0       	rjmp	.+126    	; 0x190e <setMode+0x11a>
    1890:	2c 85       	ldd	r18, Y+12	; 0x0c
    1892:	3d 85       	ldd	r19, Y+13	; 0x0d
    1894:	23 30       	cpi	r18, 0x03	; 3
    1896:	31 05       	cpc	r19, r1
    1898:	34 f4       	brge	.+12     	; 0x18a6 <setMode+0xb2>
    189a:	8c 85       	ldd	r24, Y+12	; 0x0c
    189c:	9d 85       	ldd	r25, Y+13	; 0x0d
    189e:	81 30       	cpi	r24, 0x01	; 1
    18a0:	91 05       	cpc	r25, r1
    18a2:	71 f0       	breq	.+28     	; 0x18c0 <setMode+0xcc>
    18a4:	e5 c2       	rjmp	.+1482   	; 0x1e70 <setMode+0x67c>
    18a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    18a8:	3d 85       	ldd	r19, Y+13	; 0x0d
    18aa:	23 30       	cpi	r18, 0x03	; 3
    18ac:	31 05       	cpc	r19, r1
    18ae:	09 f4       	brne	.+2      	; 0x18b2 <setMode+0xbe>
    18b0:	7c c0       	rjmp	.+248    	; 0x19aa <setMode+0x1b6>
    18b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    18b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    18b6:	84 30       	cpi	r24, 0x04	; 4
    18b8:	91 05       	cpc	r25, r1
    18ba:	09 f4       	brne	.+2      	; 0x18be <setMode+0xca>
    18bc:	4e c0       	rjmp	.+156    	; 0x195a <setMode+0x166>
    18be:	d8 c2       	rjmp	.+1456   	; 0x1e70 <setMode+0x67c>
			{

			case PIN_OUTPUT_LOW:

				SET_BIT(DDRA, loc_pin);
    18c0:	aa e3       	ldi	r26, 0x3A	; 58
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	ea e3       	ldi	r30, 0x3A	; 58
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <setMode+0xe8>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	2a 95       	dec	r18
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <setMode+0xe4>
    18e0:	84 2b       	or	r24, r20
    18e2:	8c 93       	st	X, r24

				CLEAR_BIT(PORTA, loc_pin);
    18e4:	ab e3       	ldi	r26, 0x3B	; 59
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	eb e3       	ldi	r30, 0x3B	; 59
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	48 2f       	mov	r20, r24
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	02 2e       	mov	r0, r18
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <setMode+0x10e>
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	0a 94       	dec	r0
    1904:	e2 f7       	brpl	.-8      	; 0x18fe <setMode+0x10a>
    1906:	80 95       	com	r24
    1908:	84 23       	and	r24, r20
    190a:	8c 93       	st	X, r24
    190c:	b1 c2       	rjmp	.+1378   	; 0x1e70 <setMode+0x67c>

				break;

			case PIN_OUTPUT_HIGH:

				SET_BIT(DDRA, loc_pin);
    190e:	aa e3       	ldi	r26, 0x3A	; 58
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	ea e3       	ldi	r30, 0x3A	; 58
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	48 2f       	mov	r20, r24
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	02 c0       	rjmp	.+4      	; 0x192a <setMode+0x136>
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
    192a:	2a 95       	dec	r18
    192c:	e2 f7       	brpl	.-8      	; 0x1926 <setMode+0x132>
    192e:	84 2b       	or	r24, r20
    1930:	8c 93       	st	X, r24

				SET_BIT(PORTA, loc_pin);
    1932:	ab e3       	ldi	r26, 0x3B	; 59
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	eb e3       	ldi	r30, 0x3B	; 59
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	48 2f       	mov	r20, r24
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	02 2e       	mov	r0, r18
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <setMode+0x15c>
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	0a 94       	dec	r0
    1952:	e2 f7       	brpl	.-8      	; 0x194c <setMode+0x158>
    1954:	84 2b       	or	r24, r20
    1956:	8c 93       	st	X, r24
    1958:	8b c2       	rjmp	.+1302   	; 0x1e70 <setMode+0x67c>

				break;

			case PIN_INPUT_FLOATING:

				CLEAR_BIT(DDRA, loc_pin);
    195a:	aa e3       	ldi	r26, 0x3A	; 58
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	ea e3       	ldi	r30, 0x3A	; 58
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	48 2f       	mov	r20, r24
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <setMode+0x182>
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	2a 95       	dec	r18
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <setMode+0x17e>
    197a:	80 95       	com	r24
    197c:	84 23       	and	r24, r20
    197e:	8c 93       	st	X, r24

				CLEAR_BIT(PORTA, loc_pin);
    1980:	ab e3       	ldi	r26, 0x3B	; 59
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	eb e3       	ldi	r30, 0x3B	; 59
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	48 2f       	mov	r20, r24
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 2e       	mov	r0, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <setMode+0x1aa>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	0a 94       	dec	r0
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <setMode+0x1a6>
    19a2:	80 95       	com	r24
    19a4:	84 23       	and	r24, r20
    19a6:	8c 93       	st	X, r24
    19a8:	63 c2       	rjmp	.+1222   	; 0x1e70 <setMode+0x67c>

				break;

			case PIN_INPUT_PULL_UP:

				CLEAR_BIT(DDRA, loc_pin);
    19aa:	aa e3       	ldi	r26, 0x3A	; 58
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	ea e3       	ldi	r30, 0x3A	; 58
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	48 2f       	mov	r20, r24
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <setMode+0x1d2>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	2a 95       	dec	r18
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <setMode+0x1ce>
    19ca:	80 95       	com	r24
    19cc:	84 23       	and	r24, r20
    19ce:	8c 93       	st	X, r24

				SET_BIT(PORTA, loc_pin);
    19d0:	ab e3       	ldi	r26, 0x3B	; 59
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	eb e3       	ldi	r30, 0x3B	; 59
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	48 2f       	mov	r20, r24
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 2e       	mov	r0, r18
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <setMode+0x1fa>
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	0a 94       	dec	r0
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <setMode+0x1f6>
    19f2:	84 2b       	or	r24, r20
    19f4:	8c 93       	st	X, r24
    19f6:	3c c2       	rjmp	.+1144   	; 0x1e70 <setMode+0x67c>
			}
			break;

		case PORT_PORTB:

			switch (mode)
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	3b 87       	std	Y+11, r19	; 0x0b
    1a00:	2a 87       	std	Y+10, r18	; 0x0a
    1a02:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a04:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a06:	82 30       	cpi	r24, 0x02	; 2
    1a08:	91 05       	cpc	r25, r1
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <setMode+0x21a>
    1a0c:	3f c0       	rjmp	.+126    	; 0x1a8c <setMode+0x298>
    1a0e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a10:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a12:	23 30       	cpi	r18, 0x03	; 3
    1a14:	31 05       	cpc	r19, r1
    1a16:	34 f4       	brge	.+12     	; 0x1a24 <setMode+0x230>
    1a18:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a1c:	81 30       	cpi	r24, 0x01	; 1
    1a1e:	91 05       	cpc	r25, r1
    1a20:	71 f0       	breq	.+28     	; 0x1a3e <setMode+0x24a>
    1a22:	26 c2       	rjmp	.+1100   	; 0x1e70 <setMode+0x67c>
    1a24:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a26:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a28:	23 30       	cpi	r18, 0x03	; 3
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <setMode+0x23c>
    1a2e:	7c c0       	rjmp	.+248    	; 0x1b28 <setMode+0x334>
    1a30:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a32:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a34:	84 30       	cpi	r24, 0x04	; 4
    1a36:	91 05       	cpc	r25, r1
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <setMode+0x248>
    1a3a:	4e c0       	rjmp	.+156    	; 0x1ad8 <setMode+0x2e4>
    1a3c:	19 c2       	rjmp	.+1074   	; 0x1e70 <setMode+0x67c>
			{

			case PIN_OUTPUT_LOW:

				SET_BIT(DDRB, loc_pin);
    1a3e:	a7 e3       	ldi	r26, 0x37	; 55
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e7 e3       	ldi	r30, 0x37	; 55
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	48 2f       	mov	r20, r24
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <setMode+0x266>
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	2a 95       	dec	r18
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <setMode+0x262>
    1a5e:	84 2b       	or	r24, r20
    1a60:	8c 93       	st	X, r24

				CLEAR_BIT(PORTB, loc_pin);
    1a62:	a8 e3       	ldi	r26, 0x38	; 56
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e8 e3       	ldi	r30, 0x38	; 56
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	48 2f       	mov	r20, r24
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	02 2e       	mov	r0, r18
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <setMode+0x28c>
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	0a 94       	dec	r0
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <setMode+0x288>
    1a84:	80 95       	com	r24
    1a86:	84 23       	and	r24, r20
    1a88:	8c 93       	st	X, r24
    1a8a:	f2 c1       	rjmp	.+996    	; 0x1e70 <setMode+0x67c>

				break;

			case PIN_OUTPUT_HIGH:

				SET_BIT(DDRB, loc_pin);
    1a8c:	a7 e3       	ldi	r26, 0x37	; 55
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e7 e3       	ldi	r30, 0x37	; 55
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	48 2f       	mov	r20, r24
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <setMode+0x2b4>
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	2a 95       	dec	r18
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <setMode+0x2b0>
    1aac:	84 2b       	or	r24, r20
    1aae:	8c 93       	st	X, r24

				SET_BIT(PORTB, loc_pin);
    1ab0:	a8 e3       	ldi	r26, 0x38	; 56
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e8 e3       	ldi	r30, 0x38	; 56
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	48 2f       	mov	r20, r24
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	02 2e       	mov	r0, r18
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <setMode+0x2da>
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	0a 94       	dec	r0
    1ad0:	e2 f7       	brpl	.-8      	; 0x1aca <setMode+0x2d6>
    1ad2:	84 2b       	or	r24, r20
    1ad4:	8c 93       	st	X, r24
    1ad6:	cc c1       	rjmp	.+920    	; 0x1e70 <setMode+0x67c>

				break;

			case PIN_INPUT_FLOATING:

				CLEAR_BIT(DDRB, loc_pin);
    1ad8:	a7 e3       	ldi	r26, 0x37	; 55
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e7 e3       	ldi	r30, 0x37	; 55
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	48 2f       	mov	r20, r24
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <setMode+0x300>
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	2a 95       	dec	r18
    1af6:	e2 f7       	brpl	.-8      	; 0x1af0 <setMode+0x2fc>
    1af8:	80 95       	com	r24
    1afa:	84 23       	and	r24, r20
    1afc:	8c 93       	st	X, r24

				CLEAR_BIT(PORTB, loc_pin);
    1afe:	a8 e3       	ldi	r26, 0x38	; 56
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e8 e3       	ldi	r30, 0x38	; 56
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	48 2f       	mov	r20, r24
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	02 2e       	mov	r0, r18
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <setMode+0x328>
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	0a 94       	dec	r0
    1b1e:	e2 f7       	brpl	.-8      	; 0x1b18 <setMode+0x324>
    1b20:	80 95       	com	r24
    1b22:	84 23       	and	r24, r20
    1b24:	8c 93       	st	X, r24
    1b26:	a4 c1       	rjmp	.+840    	; 0x1e70 <setMode+0x67c>

				break;

			case PIN_INPUT_PULL_UP:

				CLEAR_BIT(DDRB, loc_pin);
    1b28:	a7 e3       	ldi	r26, 0x37	; 55
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e7 e3       	ldi	r30, 0x37	; 55
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	48 2f       	mov	r20, r24
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <setMode+0x350>
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	2a 95       	dec	r18
    1b46:	e2 f7       	brpl	.-8      	; 0x1b40 <setMode+0x34c>
    1b48:	80 95       	com	r24
    1b4a:	84 23       	and	r24, r20
    1b4c:	8c 93       	st	X, r24

				SET_BIT(PORTB, loc_pin);
    1b4e:	a8 e3       	ldi	r26, 0x38	; 56
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e8 e3       	ldi	r30, 0x38	; 56
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	48 2f       	mov	r20, r24
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	02 2e       	mov	r0, r18
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <setMode+0x378>
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	0a 94       	dec	r0
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <setMode+0x374>
    1b70:	84 2b       	or	r24, r20
    1b72:	8c 93       	st	X, r24
    1b74:	7d c1       	rjmp	.+762    	; 0x1e70 <setMode+0x67c>
			break;


		case PORT_PORTC:

			switch (mode)
    1b76:	8d 81       	ldd	r24, Y+5	; 0x05
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	39 87       	std	Y+9, r19	; 0x09
    1b7e:	28 87       	std	Y+8, r18	; 0x08
    1b80:	88 85       	ldd	r24, Y+8	; 0x08
    1b82:	99 85       	ldd	r25, Y+9	; 0x09
    1b84:	82 30       	cpi	r24, 0x02	; 2
    1b86:	91 05       	cpc	r25, r1
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <setMode+0x398>
    1b8a:	3f c0       	rjmp	.+126    	; 0x1c0a <setMode+0x416>
    1b8c:	28 85       	ldd	r18, Y+8	; 0x08
    1b8e:	39 85       	ldd	r19, Y+9	; 0x09
    1b90:	23 30       	cpi	r18, 0x03	; 3
    1b92:	31 05       	cpc	r19, r1
    1b94:	34 f4       	brge	.+12     	; 0x1ba2 <setMode+0x3ae>
    1b96:	88 85       	ldd	r24, Y+8	; 0x08
    1b98:	99 85       	ldd	r25, Y+9	; 0x09
    1b9a:	81 30       	cpi	r24, 0x01	; 1
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	71 f0       	breq	.+28     	; 0x1bbc <setMode+0x3c8>
    1ba0:	67 c1       	rjmp	.+718    	; 0x1e70 <setMode+0x67c>
    1ba2:	28 85       	ldd	r18, Y+8	; 0x08
    1ba4:	39 85       	ldd	r19, Y+9	; 0x09
    1ba6:	23 30       	cpi	r18, 0x03	; 3
    1ba8:	31 05       	cpc	r19, r1
    1baa:	09 f4       	brne	.+2      	; 0x1bae <setMode+0x3ba>
    1bac:	7c c0       	rjmp	.+248    	; 0x1ca6 <setMode+0x4b2>
    1bae:	88 85       	ldd	r24, Y+8	; 0x08
    1bb0:	99 85       	ldd	r25, Y+9	; 0x09
    1bb2:	84 30       	cpi	r24, 0x04	; 4
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <setMode+0x3c6>
    1bb8:	4e c0       	rjmp	.+156    	; 0x1c56 <setMode+0x462>
    1bba:	5a c1       	rjmp	.+692    	; 0x1e70 <setMode+0x67c>
			{

			case PIN_OUTPUT_LOW:

				SET_BIT(DDRC, loc_pin);
    1bbc:	a4 e3       	ldi	r26, 0x34	; 52
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e4 e3       	ldi	r30, 0x34	; 52
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	48 2f       	mov	r20, r24
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <setMode+0x3e4>
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	2a 95       	dec	r18
    1bda:	e2 f7       	brpl	.-8      	; 0x1bd4 <setMode+0x3e0>
    1bdc:	84 2b       	or	r24, r20
    1bde:	8c 93       	st	X, r24

				CLEAR_BIT(PORTC, loc_pin);
    1be0:	a5 e3       	ldi	r26, 0x35	; 53
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e5 e3       	ldi	r30, 0x35	; 53
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	48 2f       	mov	r20, r24
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	02 2e       	mov	r0, r18
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <setMode+0x40a>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	0a 94       	dec	r0
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <setMode+0x406>
    1c02:	80 95       	com	r24
    1c04:	84 23       	and	r24, r20
    1c06:	8c 93       	st	X, r24
    1c08:	33 c1       	rjmp	.+614    	; 0x1e70 <setMode+0x67c>

				break;

			case PIN_OUTPUT_HIGH:

				SET_BIT(DDRC, loc_pin);
    1c0a:	a4 e3       	ldi	r26, 0x34	; 52
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e4 e3       	ldi	r30, 0x34	; 52
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	48 2f       	mov	r20, r24
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <setMode+0x432>
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	2a 95       	dec	r18
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <setMode+0x42e>
    1c2a:	84 2b       	or	r24, r20
    1c2c:	8c 93       	st	X, r24

				SET_BIT(PORTC, loc_pin);
    1c2e:	a5 e3       	ldi	r26, 0x35	; 53
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e5 e3       	ldi	r30, 0x35	; 53
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 2e       	mov	r0, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <setMode+0x458>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	0a 94       	dec	r0
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <setMode+0x454>
    1c50:	84 2b       	or	r24, r20
    1c52:	8c 93       	st	X, r24
    1c54:	0d c1       	rjmp	.+538    	; 0x1e70 <setMode+0x67c>

				break;

			case PIN_INPUT_FLOATING:

				CLEAR_BIT(DDRC, loc_pin);
    1c56:	a4 e3       	ldi	r26, 0x34	; 52
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e4 e3       	ldi	r30, 0x34	; 52
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	48 2f       	mov	r20, r24
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <setMode+0x47e>
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	2a 95       	dec	r18
    1c74:	e2 f7       	brpl	.-8      	; 0x1c6e <setMode+0x47a>
    1c76:	80 95       	com	r24
    1c78:	84 23       	and	r24, r20
    1c7a:	8c 93       	st	X, r24

				CLEAR_BIT(PORTC, loc_pin);
    1c7c:	a5 e3       	ldi	r26, 0x35	; 53
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e5 e3       	ldi	r30, 0x35	; 53
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	48 2f       	mov	r20, r24
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	02 2e       	mov	r0, r18
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <setMode+0x4a6>
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	0a 94       	dec	r0
    1c9c:	e2 f7       	brpl	.-8      	; 0x1c96 <setMode+0x4a2>
    1c9e:	80 95       	com	r24
    1ca0:	84 23       	and	r24, r20
    1ca2:	8c 93       	st	X, r24
    1ca4:	e5 c0       	rjmp	.+458    	; 0x1e70 <setMode+0x67c>

				break;

			case PIN_INPUT_PULL_UP:

				CLEAR_BIT(DDRC, loc_pin);
    1ca6:	a4 e3       	ldi	r26, 0x34	; 52
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e4 e3       	ldi	r30, 0x34	; 52
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <setMode+0x4ce>
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	2a 95       	dec	r18
    1cc4:	e2 f7       	brpl	.-8      	; 0x1cbe <setMode+0x4ca>
    1cc6:	80 95       	com	r24
    1cc8:	84 23       	and	r24, r20
    1cca:	8c 93       	st	X, r24

				SET_BIT(PORTC, loc_pin);
    1ccc:	a5 e3       	ldi	r26, 0x35	; 53
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e5 e3       	ldi	r30, 0x35	; 53
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	48 2f       	mov	r20, r24
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	02 2e       	mov	r0, r18
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <setMode+0x4f6>
    1ce6:	88 0f       	add	r24, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	0a 94       	dec	r0
    1cec:	e2 f7       	brpl	.-8      	; 0x1ce6 <setMode+0x4f2>
    1cee:	84 2b       	or	r24, r20
    1cf0:	8c 93       	st	X, r24
    1cf2:	be c0       	rjmp	.+380    	; 0x1e70 <setMode+0x67c>



		case PORT_PORTD:

			switch (mode)
    1cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	3f 83       	std	Y+7, r19	; 0x07
    1cfc:	2e 83       	std	Y+6, r18	; 0x06
    1cfe:	8e 81       	ldd	r24, Y+6	; 0x06
    1d00:	9f 81       	ldd	r25, Y+7	; 0x07
    1d02:	82 30       	cpi	r24, 0x02	; 2
    1d04:	91 05       	cpc	r25, r1
    1d06:	09 f4       	brne	.+2      	; 0x1d0a <setMode+0x516>
    1d08:	3f c0       	rjmp	.+126    	; 0x1d88 <setMode+0x594>
    1d0a:	2e 81       	ldd	r18, Y+6	; 0x06
    1d0c:	3f 81       	ldd	r19, Y+7	; 0x07
    1d0e:	23 30       	cpi	r18, 0x03	; 3
    1d10:	31 05       	cpc	r19, r1
    1d12:	34 f4       	brge	.+12     	; 0x1d20 <setMode+0x52c>
    1d14:	8e 81       	ldd	r24, Y+6	; 0x06
    1d16:	9f 81       	ldd	r25, Y+7	; 0x07
    1d18:	81 30       	cpi	r24, 0x01	; 1
    1d1a:	91 05       	cpc	r25, r1
    1d1c:	71 f0       	breq	.+28     	; 0x1d3a <setMode+0x546>
    1d1e:	a8 c0       	rjmp	.+336    	; 0x1e70 <setMode+0x67c>
    1d20:	2e 81       	ldd	r18, Y+6	; 0x06
    1d22:	3f 81       	ldd	r19, Y+7	; 0x07
    1d24:	23 30       	cpi	r18, 0x03	; 3
    1d26:	31 05       	cpc	r19, r1
    1d28:	09 f4       	brne	.+2      	; 0x1d2c <setMode+0x538>
    1d2a:	7c c0       	rjmp	.+248    	; 0x1e24 <setMode+0x630>
    1d2c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d2e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d30:	84 30       	cpi	r24, 0x04	; 4
    1d32:	91 05       	cpc	r25, r1
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <setMode+0x544>
    1d36:	4e c0       	rjmp	.+156    	; 0x1dd4 <setMode+0x5e0>
    1d38:	9b c0       	rjmp	.+310    	; 0x1e70 <setMode+0x67c>
			{

			case PIN_OUTPUT_LOW:

				SET_BIT(DDRD, loc_pin);
    1d3a:	a1 e3       	ldi	r26, 0x31	; 49
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e1 e3       	ldi	r30, 0x31	; 49
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	48 2f       	mov	r20, r24
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <setMode+0x562>
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	2a 95       	dec	r18
    1d58:	e2 f7       	brpl	.-8      	; 0x1d52 <setMode+0x55e>
    1d5a:	84 2b       	or	r24, r20
    1d5c:	8c 93       	st	X, r24

				CLEAR_BIT(PORTD, loc_pin);
    1d5e:	a2 e3       	ldi	r26, 0x32	; 50
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	e2 e3       	ldi	r30, 0x32	; 50
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	48 2f       	mov	r20, r24
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	02 2e       	mov	r0, r18
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <setMode+0x588>
    1d78:	88 0f       	add	r24, r24
    1d7a:	99 1f       	adc	r25, r25
    1d7c:	0a 94       	dec	r0
    1d7e:	e2 f7       	brpl	.-8      	; 0x1d78 <setMode+0x584>
    1d80:	80 95       	com	r24
    1d82:	84 23       	and	r24, r20
    1d84:	8c 93       	st	X, r24
    1d86:	74 c0       	rjmp	.+232    	; 0x1e70 <setMode+0x67c>

				break;

			case PIN_OUTPUT_HIGH:

				SET_BIT(DDRD, loc_pin);
    1d88:	a1 e3       	ldi	r26, 0x31	; 49
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e1 e3       	ldi	r30, 0x31	; 49
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	48 2f       	mov	r20, r24
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <setMode+0x5b0>
    1da0:	88 0f       	add	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	2a 95       	dec	r18
    1da6:	e2 f7       	brpl	.-8      	; 0x1da0 <setMode+0x5ac>
    1da8:	84 2b       	or	r24, r20
    1daa:	8c 93       	st	X, r24

				SET_BIT(PORTD, loc_pin);
    1dac:	a2 e3       	ldi	r26, 0x32	; 50
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e2 e3       	ldi	r30, 0x32	; 50
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	48 2f       	mov	r20, r24
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	02 2e       	mov	r0, r18
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <setMode+0x5d6>
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	0a 94       	dec	r0
    1dcc:	e2 f7       	brpl	.-8      	; 0x1dc6 <setMode+0x5d2>
    1dce:	84 2b       	or	r24, r20
    1dd0:	8c 93       	st	X, r24
    1dd2:	4e c0       	rjmp	.+156    	; 0x1e70 <setMode+0x67c>

				break;

			case PIN_INPUT_FLOATING:

				CLEAR_BIT(DDRD, loc_pin);
    1dd4:	a1 e3       	ldi	r26, 0x31	; 49
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e1 e3       	ldi	r30, 0x31	; 49
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	48 2f       	mov	r20, r24
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <setMode+0x5fc>
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	2a 95       	dec	r18
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <setMode+0x5f8>
    1df4:	80 95       	com	r24
    1df6:	84 23       	and	r24, r20
    1df8:	8c 93       	st	X, r24

				CLEAR_BIT(PORTD, loc_pin);
    1dfa:	a2 e3       	ldi	r26, 0x32	; 50
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e2 e3       	ldi	r30, 0x32	; 50
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	48 2f       	mov	r20, r24
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	28 2f       	mov	r18, r24
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	02 2e       	mov	r0, r18
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <setMode+0x624>
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	0a 94       	dec	r0
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <setMode+0x620>
    1e1c:	80 95       	com	r24
    1e1e:	84 23       	and	r24, r20
    1e20:	8c 93       	st	X, r24
    1e22:	26 c0       	rjmp	.+76     	; 0x1e70 <setMode+0x67c>

				break;

			case PIN_INPUT_PULL_UP:

				CLEAR_BIT(DDRD, loc_pin);
    1e24:	a1 e3       	ldi	r26, 0x31	; 49
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e1 e3       	ldi	r30, 0x31	; 49
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	48 2f       	mov	r20, r24
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <setMode+0x64c>
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	2a 95       	dec	r18
    1e42:	e2 f7       	brpl	.-8      	; 0x1e3c <setMode+0x648>
    1e44:	80 95       	com	r24
    1e46:	84 23       	and	r24, r20
    1e48:	8c 93       	st	X, r24

				SET_BIT(PORTD, loc_pin);
    1e4a:	a2 e3       	ldi	r26, 0x32	; 50
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e2 e3       	ldi	r30, 0x32	; 50
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	48 2f       	mov	r20, r24
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	02 2e       	mov	r0, r18
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <setMode+0x674>
    1e64:	88 0f       	add	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	0a 94       	dec	r0
    1e6a:	e2 f7       	brpl	.-8      	; 0x1e64 <setMode+0x670>
    1e6c:	84 2b       	or	r24, r20
    1e6e:	8c 93       	st	X, r24


		}
	}

	return return_errorStatus;
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e72:	2f 96       	adiw	r28, 0x0f	; 15
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <SevenSegment_Display>:
 */
#include"sevenSeg.h"
#include"sevenSeg_cfg.h"

void SevenSegment_Display(u8 number)
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	0f 92       	push	r0
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	89 83       	std	Y+1, r24	; 0x01
#if(DECODER_USE == TRUE)
	DISPLAY_DECODER(SEVENSEG_PORT,number);
    1e90:	a5 e3       	ldi	r26, 0x35	; 53
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e5 e3       	ldi	r30, 0x35	; 53
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	98 2f       	mov	r25, r24
    1e9c:	90 7f       	andi	r25, 0xF0	; 240
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	8f 70       	andi	r24, 0x0F	; 15
    1ea2:	89 2b       	or	r24, r25
    1ea4:	8c 93       	st	X, r24
			SEVENSEG_PORT = SEVENSEG_NINE;
			break;
		}

#endif
}
    1ea6:	0f 90       	pop	r0
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <settingSegment>:

#define arraySegment_size           4
char seg[arraySegment_size];

void settingSegment(void)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
	if(seg[0] == 10)
    1eb6:	80 91 6c 00 	lds	r24, 0x006C
    1eba:	8a 30       	cpi	r24, 0x0A	; 10
    1ebc:	39 f4       	brne	.+14     	; 0x1ecc <settingSegment+0x1e>
	{
		seg[0] = 0;
    1ebe:	10 92 6c 00 	sts	0x006C, r1
		seg[1]++;
    1ec2:	80 91 6d 00 	lds	r24, 0x006D
    1ec6:	8f 5f       	subi	r24, 0xFF	; 255
    1ec8:	80 93 6d 00 	sts	0x006D, r24
	}

	if(seg[1] == 6)
    1ecc:	80 91 6d 00 	lds	r24, 0x006D
    1ed0:	86 30       	cpi	r24, 0x06	; 6
    1ed2:	49 f4       	brne	.+18     	; 0x1ee6 <settingSegment+0x38>
	{
		seg[0] = 0;
    1ed4:	10 92 6c 00 	sts	0x006C, r1
		seg[1] = 0;
    1ed8:	10 92 6d 00 	sts	0x006D, r1
		seg[2]++;
    1edc:	80 91 6e 00 	lds	r24, 0x006E
    1ee0:	8f 5f       	subi	r24, 0xFF	; 255
    1ee2:	80 93 6e 00 	sts	0x006E, r24
	}


	if(seg[2] == 10)
    1ee6:	80 91 6e 00 	lds	r24, 0x006E
    1eea:	8a 30       	cpi	r24, 0x0A	; 10
    1eec:	59 f4       	brne	.+22     	; 0x1f04 <settingSegment+0x56>
	{
		seg[0] = 0;
    1eee:	10 92 6c 00 	sts	0x006C, r1
		seg[1] = 0;
    1ef2:	10 92 6d 00 	sts	0x006D, r1
		seg[2] = 0;
    1ef6:	10 92 6e 00 	sts	0x006E, r1
		seg[3]++;
    1efa:	80 91 6f 00 	lds	r24, 0x006F
    1efe:	8f 5f       	subi	r24, 0xFF	; 255
    1f00:	80 93 6f 00 	sts	0x006F, r24
	}

	if(seg[3] == 6)
    1f04:	80 91 6f 00 	lds	r24, 0x006F
    1f08:	86 30       	cpi	r24, 0x06	; 6
    1f0a:	41 f4       	brne	.+16     	; 0x1f1c <settingSegment+0x6e>
	{
		seg[0] = 0;
    1f0c:	10 92 6c 00 	sts	0x006C, r1
		seg[1] = 0;
    1f10:	10 92 6d 00 	sts	0x006D, r1
		seg[2] = 0;
    1f14:	10 92 6e 00 	sts	0x006E, r1
		seg[3] = 0;
    1f18:	10 92 6f 00 	sts	0x006F, r1
	}

}
    1f1c:	cf 91       	pop	r28
    1f1e:	df 91       	pop	r29
    1f20:	08 95       	ret

00001f22 <clear_button>:

void clear_button(void)
{
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
	SEVENSEG_PORT = 0x00;
    1f2a:	e5 e3       	ldi	r30, 0x35	; 53
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	10 82       	st	Z, r1

	seg[0] = 0;
    1f30:	10 92 6c 00 	sts	0x006C, r1
	seg[1] = 0;
    1f34:	10 92 6d 00 	sts	0x006D, r1
	seg[2] = 0;
    1f38:	10 92 6e 00 	sts	0x006E, r1
	seg[3] = 0;
    1f3c:	10 92 6f 00 	sts	0x006F, r1
}
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	08 95       	ret

00001f46 <increment_button>:
void increment_button(void)
{
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
	seg[0]++;
    1f4e:	80 91 6c 00 	lds	r24, 0x006C
    1f52:	8f 5f       	subi	r24, 0xFF	; 255
    1f54:	80 93 6c 00 	sts	0x006C, r24
}
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <displaySegment>:

void displaySegment(void)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	60 97       	sbiw	r28, 0x10	; 16
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
	int i;
	for(i = 0; i < arraySegment_size; i++)
    1f72:	18 8a       	std	Y+16, r1	; 0x10
    1f74:	1f 86       	std	Y+15, r1	; 0x0f
    1f76:	8a c0       	rjmp	.+276    	; 0x208c <displaySegment+0x12e>
	{
		DISPLAY_PORT = (1<<i);
    1f78:	eb e3       	ldi	r30, 0x3B	; 59
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	0f 84       	ldd	r0, Y+15	; 0x0f
    1f82:	02 c0       	rjmp	.+4      	; 0x1f88 <displaySegment+0x2a>
    1f84:	88 0f       	add	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	0a 94       	dec	r0
    1f8a:	e2 f7       	brpl	.-8      	; 0x1f84 <displaySegment+0x26>
    1f8c:	80 83       	st	Z, r24
		SevenSegment_Display(seg[i]);
    1f8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f90:	98 89       	ldd	r25, Y+16	; 0x10
    1f92:	fc 01       	movw	r30, r24
    1f94:	e4 59       	subi	r30, 0x94	; 148
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	80 81       	ld	r24, Z
    1f9a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <SevenSegment_Display>
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	a0 e0       	ldi	r26, 0x00	; 0
    1fa4:	b0 e4       	ldi	r27, 0x40	; 64
    1fa6:	8b 87       	std	Y+11, r24	; 0x0b
    1fa8:	9c 87       	std	Y+12, r25	; 0x0c
    1faa:	ad 87       	std	Y+13, r26	; 0x0d
    1fac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	4a e7       	ldi	r20, 0x7A	; 122
    1fbc:	53 e4       	ldi	r21, 0x43	; 67
    1fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	8f 83       	std	Y+7, r24	; 0x07
    1fc8:	98 87       	std	Y+8, r25	; 0x08
    1fca:	a9 87       	std	Y+9, r26	; 0x09
    1fcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fce:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd0:	78 85       	ldd	r23, Y+8	; 0x08
    1fd2:	89 85       	ldd	r24, Y+9	; 0x09
    1fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e8       	ldi	r20, 0x80	; 128
    1fdc:	5f e3       	ldi	r21, 0x3F	; 63
    1fde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe2:	88 23       	and	r24, r24
    1fe4:	2c f4       	brge	.+10     	; 0x1ff0 <displaySegment+0x92>
		__ticks = 1;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	9e 83       	std	Y+6, r25	; 0x06
    1fec:	8d 83       	std	Y+5, r24	; 0x05
    1fee:	3f c0       	rjmp	.+126    	; 0x206e <displaySegment+0x110>
	else if (__tmp > 65535)
    1ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff2:	78 85       	ldd	r23, Y+8	; 0x08
    1ff4:	89 85       	ldd	r24, Y+9	; 0x09
    1ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	3f ef       	ldi	r19, 0xFF	; 255
    1ffc:	4f e7       	ldi	r20, 0x7F	; 127
    1ffe:	57 e4       	ldi	r21, 0x47	; 71
    2000:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2004:	18 16       	cp	r1, r24
    2006:	4c f5       	brge	.+82     	; 0x205a <displaySegment+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2008:	6b 85       	ldd	r22, Y+11	; 0x0b
    200a:	7c 85       	ldd	r23, Y+12	; 0x0c
    200c:	8d 85       	ldd	r24, Y+13	; 0x0d
    200e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e2       	ldi	r20, 0x20	; 32
    2016:	51 e4       	ldi	r21, 0x41	; 65
    2018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	bc 01       	movw	r22, r24
    2022:	cd 01       	movw	r24, r26
    2024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	9e 83       	std	Y+6, r25	; 0x06
    202e:	8d 83       	std	Y+5, r24	; 0x05
    2030:	0f c0       	rjmp	.+30     	; 0x2050 <displaySegment+0xf2>
    2032:	89 e1       	ldi	r24, 0x19	; 25
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9c 83       	std	Y+4, r25	; 0x04
    2038:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	9c 81       	ldd	r25, Y+4	; 0x04
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	f1 f7       	brne	.-4      	; 0x203e <displaySegment+0xe0>
    2042:	9c 83       	std	Y+4, r25	; 0x04
    2044:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2046:	8d 81       	ldd	r24, Y+5	; 0x05
    2048:	9e 81       	ldd	r25, Y+6	; 0x06
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	9e 83       	std	Y+6, r25	; 0x06
    204e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2050:	8d 81       	ldd	r24, Y+5	; 0x05
    2052:	9e 81       	ldd	r25, Y+6	; 0x06
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	69 f7       	brne	.-38     	; 0x2032 <displaySegment+0xd4>
    2058:	14 c0       	rjmp	.+40     	; 0x2082 <displaySegment+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205a:	6f 81       	ldd	r22, Y+7	; 0x07
    205c:	78 85       	ldd	r23, Y+8	; 0x08
    205e:	89 85       	ldd	r24, Y+9	; 0x09
    2060:	9a 85       	ldd	r25, Y+10	; 0x0a
    2062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	9e 83       	std	Y+6, r25	; 0x06
    206c:	8d 83       	std	Y+5, r24	; 0x05
    206e:	8d 81       	ldd	r24, Y+5	; 0x05
    2070:	9e 81       	ldd	r25, Y+6	; 0x06
    2072:	9a 83       	std	Y+2, r25	; 0x02
    2074:	89 83       	std	Y+1, r24	; 0x01
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	9a 81       	ldd	r25, Y+2	; 0x02
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <displaySegment+0x11c>
    207e:	9a 83       	std	Y+2, r25	; 0x02
    2080:	89 83       	std	Y+1, r24	; 0x01
}

void displaySegment(void)
{
	int i;
	for(i = 0; i < arraySegment_size; i++)
    2082:	8f 85       	ldd	r24, Y+15	; 0x0f
    2084:	98 89       	ldd	r25, Y+16	; 0x10
    2086:	01 96       	adiw	r24, 0x01	; 1
    2088:	98 8b       	std	Y+16, r25	; 0x10
    208a:	8f 87       	std	Y+15, r24	; 0x0f
    208c:	8f 85       	ldd	r24, Y+15	; 0x0f
    208e:	98 89       	ldd	r25, Y+16	; 0x10
    2090:	84 30       	cpi	r24, 0x04	; 4
    2092:	91 05       	cpc	r25, r1
    2094:	0c f4       	brge	.+2      	; 0x2098 <displaySegment+0x13a>
    2096:	70 cf       	rjmp	.-288    	; 0x1f78 <displaySegment+0x1a>
	{
		DISPLAY_PORT = (1<<i);
		SevenSegment_Display(seg[i]);
		_delay_ms(2);
	}
}
    2098:	60 96       	adiw	r28, 0x10	; 16
    209a:	0f b6       	in	r0, 0x3f	; 63
    209c:	f8 94       	cli
    209e:	de bf       	out	0x3e, r29	; 62
    20a0:	0f be       	out	0x3f, r0	; 63
    20a2:	cd bf       	out	0x3d, r28	; 61
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	08 95       	ret

000020aa <main>:
int main()
{
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
	port_init();
    20b2:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <port_init>

	SEVENSEG_PORT = 0x00;
    20b6:	e5 e3       	ldi	r30, 0x35	; 53
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	10 82       	st	Z, r1
	DISPLAY_PORT = 0x00;
    20bc:	eb e3       	ldi	r30, 0x3B	; 59
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	10 82       	st	Z, r1
	SREG = (1<<7);
    20c2:	ef e5       	ldi	r30, 0x5F	; 95
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 e8       	ldi	r24, 0x80	; 128
    20c8:	80 83       	st	Z, r24

	exInt0_enable(FALLING_EDGE_INT_REQ);
    20ca:	82 e0       	ldi	r24, 0x02	; 2
    20cc:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <exInt0_enable>
	exInt1_enable(RISING_EDGE_INT_REQ);
    20d0:	83 e0       	ldi	r24, 0x03	; 3
    20d2:	0e 94 86 0a 	call	0x150c	; 0x150c <exInt1_enable>

	callBack(clear_button,0);
    20d6:	81 e9       	ldi	r24, 0x91	; 145
    20d8:	9f e0       	ldi	r25, 0x0F	; 15
    20da:	60 e0       	ldi	r22, 0x00	; 0
    20dc:	0e 94 40 0a 	call	0x1480	; 0x1480 <callBack>
	callBack(increment_button,1);
    20e0:	83 ea       	ldi	r24, 0xA3	; 163
    20e2:	9f e0       	ldi	r25, 0x0F	; 15
    20e4:	61 e0       	ldi	r22, 0x01	; 1
    20e6:	0e 94 40 0a 	call	0x1480	; 0x1480 <callBack>

	while(1)
	{
		displaySegment();
    20ea:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <displaySegment>

		settingSegment();
    20ee:	0e 94 57 0f 	call	0x1eae	; 0x1eae <settingSegment>
    20f2:	fb cf       	rjmp	.-10     	; 0x20ea <main+0x40>

000020f4 <__prologue_saves__>:
    20f4:	2f 92       	push	r2
    20f6:	3f 92       	push	r3
    20f8:	4f 92       	push	r4
    20fa:	5f 92       	push	r5
    20fc:	6f 92       	push	r6
    20fe:	7f 92       	push	r7
    2100:	8f 92       	push	r8
    2102:	9f 92       	push	r9
    2104:	af 92       	push	r10
    2106:	bf 92       	push	r11
    2108:	cf 92       	push	r12
    210a:	df 92       	push	r13
    210c:	ef 92       	push	r14
    210e:	ff 92       	push	r15
    2110:	0f 93       	push	r16
    2112:	1f 93       	push	r17
    2114:	cf 93       	push	r28
    2116:	df 93       	push	r29
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	ca 1b       	sub	r28, r26
    211e:	db 0b       	sbc	r29, r27
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	09 94       	ijmp

0000212c <__epilogue_restores__>:
    212c:	2a 88       	ldd	r2, Y+18	; 0x12
    212e:	39 88       	ldd	r3, Y+17	; 0x11
    2130:	48 88       	ldd	r4, Y+16	; 0x10
    2132:	5f 84       	ldd	r5, Y+15	; 0x0f
    2134:	6e 84       	ldd	r6, Y+14	; 0x0e
    2136:	7d 84       	ldd	r7, Y+13	; 0x0d
    2138:	8c 84       	ldd	r8, Y+12	; 0x0c
    213a:	9b 84       	ldd	r9, Y+11	; 0x0b
    213c:	aa 84       	ldd	r10, Y+10	; 0x0a
    213e:	b9 84       	ldd	r11, Y+9	; 0x09
    2140:	c8 84       	ldd	r12, Y+8	; 0x08
    2142:	df 80       	ldd	r13, Y+7	; 0x07
    2144:	ee 80       	ldd	r14, Y+6	; 0x06
    2146:	fd 80       	ldd	r15, Y+5	; 0x05
    2148:	0c 81       	ldd	r16, Y+4	; 0x04
    214a:	1b 81       	ldd	r17, Y+3	; 0x03
    214c:	aa 81       	ldd	r26, Y+2	; 0x02
    214e:	b9 81       	ldd	r27, Y+1	; 0x01
    2150:	ce 0f       	add	r28, r30
    2152:	d1 1d       	adc	r29, r1
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	f8 94       	cli
    2158:	de bf       	out	0x3e, r29	; 62
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	ed 01       	movw	r28, r26
    2160:	08 95       	ret

00002162 <_exit>:
    2162:	f8 94       	cli

00002164 <__stop_program>:
    2164:	ff cf       	rjmp	.-2      	; 0x2164 <__stop_program>
