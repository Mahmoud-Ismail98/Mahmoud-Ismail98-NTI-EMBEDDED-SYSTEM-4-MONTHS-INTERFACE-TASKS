
sevenSeg_count.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002192  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002192  00002206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000018f0  00000000  00000000  00002210  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f02  00000000  00000000  00003b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004b42  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000068fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000077e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000086f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008981  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000914f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 c7 10 	jmp	0x218e	; 0x218e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 90 10 	jmp	0x2120	; 0x2120 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 90 10 	jmp	0x2120	; 0x2120 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
#include"../includes/Mcal/dio.h"
#include<util/delay.h>
#include<avr/io.h>
#include"../includes/Hal/sevenSeg.h"
int main()
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	ab 97       	sbiw	r28, 0x2b	; 43
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	// Display number
	u8 count = 0;
     b4a:	1b a6       	std	Y+43, r1	; 0x2b

	// configure pins as output from PA1 to PA7
	// configure pins as input from PD26 to PD28
	port_init();
     b4c:	0e 94 a5 0b 	call	0x174a	; 0x174a <port_init>


	// Display ZERO value on the 7-segment
	SevenSegment_Display(count);
     b50:	8b a5       	ldd	r24, Y+43	; 0x2b
     b52:	0e 94 06 10 	call	0x200c	; 0x200c <SevenSegment_Display>

	while(1)
	{
		// read push button pin state
		if( !(PIND & (1<<PD2)) )
     b56:	e0 e3       	ldi	r30, 0x30	; 48
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	88 2f       	mov	r24, r24
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	84 70       	andi	r24, 0x04	; 4
     b62:	90 70       	andi	r25, 0x00	; 0
     b64:	00 97       	sbiw	r24, 0x00	; 0
     b66:	09 f0       	breq	.+2      	; 0xb6a <main+0x34>
     b68:	8e c0       	rjmp	.+284    	; 0xc86 <main+0x150>
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	a0 ef       	ldi	r26, 0xF0	; 240
     b70:	b1 e4       	ldi	r27, 0x41	; 65
     b72:	8f a3       	std	Y+39, r24	; 0x27
     b74:	98 a7       	std	Y+40, r25	; 0x28
     b76:	a9 a7       	std	Y+41, r26	; 0x29
     b78:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b7a:	6f a1       	ldd	r22, Y+39	; 0x27
     b7c:	78 a5       	ldd	r23, Y+40	; 0x28
     b7e:	89 a5       	ldd	r24, Y+41	; 0x29
     b80:	9a a5       	ldd	r25, Y+42	; 0x2a
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	4a e7       	ldi	r20, 0x7A	; 122
     b88:	53 e4       	ldi	r21, 0x43	; 67
     b8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b8e:	dc 01       	movw	r26, r24
     b90:	cb 01       	movw	r24, r22
     b92:	8b a3       	std	Y+35, r24	; 0x23
     b94:	9c a3       	std	Y+36, r25	; 0x24
     b96:	ad a3       	std	Y+37, r26	; 0x25
     b98:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     b9a:	6b a1       	ldd	r22, Y+35	; 0x23
     b9c:	7c a1       	ldd	r23, Y+36	; 0x24
     b9e:	8d a1       	ldd	r24, Y+37	; 0x25
     ba0:	9e a1       	ldd	r25, Y+38	; 0x26
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e8       	ldi	r20, 0x80	; 128
     ba8:	5f e3       	ldi	r21, 0x3F	; 63
     baa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bae:	88 23       	and	r24, r24
     bb0:	2c f4       	brge	.+10     	; 0xbbc <main+0x86>
		__ticks = 1;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	9a a3       	std	Y+34, r25	; 0x22
     bb8:	89 a3       	std	Y+33, r24	; 0x21
     bba:	3f c0       	rjmp	.+126    	; 0xc3a <main+0x104>
	else if (__tmp > 65535)
     bbc:	6b a1       	ldd	r22, Y+35	; 0x23
     bbe:	7c a1       	ldd	r23, Y+36	; 0x24
     bc0:	8d a1       	ldd	r24, Y+37	; 0x25
     bc2:	9e a1       	ldd	r25, Y+38	; 0x26
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	3f ef       	ldi	r19, 0xFF	; 255
     bc8:	4f e7       	ldi	r20, 0x7F	; 127
     bca:	57 e4       	ldi	r21, 0x47	; 71
     bcc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bd0:	18 16       	cp	r1, r24
     bd2:	4c f5       	brge	.+82     	; 0xc26 <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd4:	6f a1       	ldd	r22, Y+39	; 0x27
     bd6:	78 a5       	ldd	r23, Y+40	; 0x28
     bd8:	89 a5       	ldd	r24, Y+41	; 0x29
     bda:	9a a5       	ldd	r25, Y+42	; 0x2a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e2       	ldi	r20, 0x20	; 32
     be2:	51 e4       	ldi	r21, 0x41	; 65
     be4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	bc 01       	movw	r22, r24
     bee:	cd 01       	movw	r24, r26
     bf0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bf4:	dc 01       	movw	r26, r24
     bf6:	cb 01       	movw	r24, r22
     bf8:	9a a3       	std	Y+34, r25	; 0x22
     bfa:	89 a3       	std	Y+33, r24	; 0x21
     bfc:	0f c0       	rjmp	.+30     	; 0xc1c <main+0xe6>
     bfe:	89 e1       	ldi	r24, 0x19	; 25
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	98 a3       	std	Y+32, r25	; 0x20
     c04:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c06:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c08:	98 a1       	ldd	r25, Y+32	; 0x20
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	f1 f7       	brne	.-4      	; 0xc0a <main+0xd4>
     c0e:	98 a3       	std	Y+32, r25	; 0x20
     c10:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c12:	89 a1       	ldd	r24, Y+33	; 0x21
     c14:	9a a1       	ldd	r25, Y+34	; 0x22
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	9a a3       	std	Y+34, r25	; 0x22
     c1a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1c:	89 a1       	ldd	r24, Y+33	; 0x21
     c1e:	9a a1       	ldd	r25, Y+34	; 0x22
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	69 f7       	brne	.-38     	; 0xbfe <main+0xc8>
     c24:	14 c0       	rjmp	.+40     	; 0xc4e <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c26:	6b a1       	ldd	r22, Y+35	; 0x23
     c28:	7c a1       	ldd	r23, Y+36	; 0x24
     c2a:	8d a1       	ldd	r24, Y+37	; 0x25
     c2c:	9e a1       	ldd	r25, Y+38	; 0x26
     c2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	9a a3       	std	Y+34, r25	; 0x22
     c38:	89 a3       	std	Y+33, r24	; 0x21
     c3a:	89 a1       	ldd	r24, Y+33	; 0x21
     c3c:	9a a1       	ldd	r25, Y+34	; 0x22
     c3e:	9e 8f       	std	Y+30, r25	; 0x1e
     c40:	8d 8f       	std	Y+29, r24	; 0x1d
     c42:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c44:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <main+0x110>
     c4a:	9e 8f       	std	Y+30, r25	; 0x1e
     c4c:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(30);
			//check after bouncing
			if( !(PIND & (1<<PD2)) )
     c4e:	e0 e3       	ldi	r30, 0x30	; 48
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	88 2f       	mov	r24, r24
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	84 70       	andi	r24, 0x04	; 4
     c5a:	90 70       	andi	r25, 0x00	; 0
     c5c:	00 97       	sbiw	r24, 0x00	; 0
     c5e:	49 f4       	brne	.+18     	; 0xc72 <main+0x13c>
			{
				if(count != MAX_DISPLAY_NUM)
     c60:	8b a5       	ldd	r24, Y+43	; 0x2b
     c62:	89 30       	cpi	r24, 0x09	; 9
     c64:	19 f0       	breq	.+6      	; 0xc6c <main+0x136>
				{
					// increment 7-segment every press
					count++;
     c66:	8b a5       	ldd	r24, Y+43	; 0x2b
     c68:	8f 5f       	subi	r24, 0xFF	; 255
     c6a:	8b a7       	std	Y+43, r24	; 0x2b
				}
				// Display the number
				SevenSegment_Display(count);
     c6c:	8b a5       	ldd	r24, Y+43	; 0x2b
     c6e:	0e 94 06 10 	call	0x200c	; 0x200c <SevenSegment_Display>
			}
			// wait until switch is released
			while( !(PIND & (1<<PD2)) ){}
     c72:	e0 e3       	ldi	r30, 0x30	; 48
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	88 2f       	mov	r24, r24
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	84 70       	andi	r24, 0x04	; 4
     c7e:	90 70       	andi	r25, 0x00	; 0
     c80:	00 97       	sbiw	r24, 0x00	; 0
     c82:	b9 f3       	breq	.-18     	; 0xc72 <main+0x13c>
     c84:	68 cf       	rjmp	.-304    	; 0xb56 <main+0x20>
		}
		else if(!(PIND & (1<<PD3)))
     c86:	e0 e3       	ldi	r30, 0x30	; 48
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	88 2f       	mov	r24, r24
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	88 70       	andi	r24, 0x08	; 8
     c92:	90 70       	andi	r25, 0x00	; 0
     c94:	00 97       	sbiw	r24, 0x00	; 0
     c96:	09 f0       	breq	.+2      	; 0xc9a <main+0x164>
     c98:	8e c0       	rjmp	.+284    	; 0xdb6 <main+0x280>
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	a0 ef       	ldi	r26, 0xF0	; 240
     ca0:	b1 e4       	ldi	r27, 0x41	; 65
     ca2:	89 8f       	std	Y+25, r24	; 0x19
     ca4:	9a 8f       	std	Y+26, r25	; 0x1a
     ca6:	ab 8f       	std	Y+27, r26	; 0x1b
     ca8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     caa:	69 8d       	ldd	r22, Y+25	; 0x19
     cac:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	4a e7       	ldi	r20, 0x7A	; 122
     cb8:	53 e4       	ldi	r21, 0x43	; 67
     cba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cbe:	dc 01       	movw	r26, r24
     cc0:	cb 01       	movw	r24, r22
     cc2:	8d 8b       	std	Y+21, r24	; 0x15
     cc4:	9e 8b       	std	Y+22, r25	; 0x16
     cc6:	af 8b       	std	Y+23, r26	; 0x17
     cc8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cca:	6d 89       	ldd	r22, Y+21	; 0x15
     ccc:	7e 89       	ldd	r23, Y+22	; 0x16
     cce:	8f 89       	ldd	r24, Y+23	; 0x17
     cd0:	98 8d       	ldd	r25, Y+24	; 0x18
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	40 e8       	ldi	r20, 0x80	; 128
     cd8:	5f e3       	ldi	r21, 0x3F	; 63
     cda:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cde:	88 23       	and	r24, r24
     ce0:	2c f4       	brge	.+10     	; 0xcec <main+0x1b6>
		__ticks = 1;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	9c 8b       	std	Y+20, r25	; 0x14
     ce8:	8b 8b       	std	Y+19, r24	; 0x13
     cea:	3f c0       	rjmp	.+126    	; 0xd6a <main+0x234>
	else if (__tmp > 65535)
     cec:	6d 89       	ldd	r22, Y+21	; 0x15
     cee:	7e 89       	ldd	r23, Y+22	; 0x16
     cf0:	8f 89       	ldd	r24, Y+23	; 0x17
     cf2:	98 8d       	ldd	r25, Y+24	; 0x18
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	4f e7       	ldi	r20, 0x7F	; 127
     cfa:	57 e4       	ldi	r21, 0x47	; 71
     cfc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d00:	18 16       	cp	r1, r24
     d02:	4c f5       	brge	.+82     	; 0xd56 <main+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d04:	69 8d       	ldd	r22, Y+25	; 0x19
     d06:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d08:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e2       	ldi	r20, 0x20	; 32
     d12:	51 e4       	ldi	r21, 0x41	; 65
     d14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d18:	dc 01       	movw	r26, r24
     d1a:	cb 01       	movw	r24, r22
     d1c:	bc 01       	movw	r22, r24
     d1e:	cd 01       	movw	r24, r26
     d20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	9c 8b       	std	Y+20, r25	; 0x14
     d2a:	8b 8b       	std	Y+19, r24	; 0x13
     d2c:	0f c0       	rjmp	.+30     	; 0xd4c <main+0x216>
     d2e:	89 e1       	ldi	r24, 0x19	; 25
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	9a 8b       	std	Y+18, r25	; 0x12
     d34:	89 8b       	std	Y+17, r24	; 0x11
     d36:	89 89       	ldd	r24, Y+17	; 0x11
     d38:	9a 89       	ldd	r25, Y+18	; 0x12
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <main+0x204>
     d3e:	9a 8b       	std	Y+18, r25	; 0x12
     d40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d42:	8b 89       	ldd	r24, Y+19	; 0x13
     d44:	9c 89       	ldd	r25, Y+20	; 0x14
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	9c 8b       	std	Y+20, r25	; 0x14
     d4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d4c:	8b 89       	ldd	r24, Y+19	; 0x13
     d4e:	9c 89       	ldd	r25, Y+20	; 0x14
     d50:	00 97       	sbiw	r24, 0x00	; 0
     d52:	69 f7       	brne	.-38     	; 0xd2e <main+0x1f8>
     d54:	14 c0       	rjmp	.+40     	; 0xd7e <main+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d56:	6d 89       	ldd	r22, Y+21	; 0x15
     d58:	7e 89       	ldd	r23, Y+22	; 0x16
     d5a:	8f 89       	ldd	r24, Y+23	; 0x17
     d5c:	98 8d       	ldd	r25, Y+24	; 0x18
     d5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	9c 8b       	std	Y+20, r25	; 0x14
     d68:	8b 8b       	std	Y+19, r24	; 0x13
     d6a:	8b 89       	ldd	r24, Y+19	; 0x13
     d6c:	9c 89       	ldd	r25, Y+20	; 0x14
     d6e:	98 8b       	std	Y+16, r25	; 0x10
     d70:	8f 87       	std	Y+15, r24	; 0x0f
     d72:	8f 85       	ldd	r24, Y+15	; 0x0f
     d74:	98 89       	ldd	r25, Y+16	; 0x10
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	f1 f7       	brne	.-4      	; 0xd76 <main+0x240>
     d7a:	98 8b       	std	Y+16, r25	; 0x10
     d7c:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(30);
			if( !(PIND & (1<<PD3)) )
     d7e:	e0 e3       	ldi	r30, 0x30	; 48
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	88 2f       	mov	r24, r24
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	88 70       	andi	r24, 0x08	; 8
     d8a:	90 70       	andi	r25, 0x00	; 0
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	49 f4       	brne	.+18     	; 0xda2 <main+0x26c>
			{
				if(count != MIN_DISPLAY_NUM)
     d90:	8b a5       	ldd	r24, Y+43	; 0x2b
     d92:	88 23       	and	r24, r24
     d94:	19 f0       	breq	.+6      	; 0xd9c <main+0x266>
				{
					// decrement 7-segment every press
					count--;
     d96:	8b a5       	ldd	r24, Y+43	; 0x2b
     d98:	81 50       	subi	r24, 0x01	; 1
     d9a:	8b a7       	std	Y+43, r24	; 0x2b
				}
				SevenSegment_Display(count);
     d9c:	8b a5       	ldd	r24, Y+43	; 0x2b
     d9e:	0e 94 06 10 	call	0x200c	; 0x200c <SevenSegment_Display>
			}
			while( !(PIND & (1<<PD3)) ){}
     da2:	e0 e3       	ldi	r30, 0x30	; 48
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	88 2f       	mov	r24, r24
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	88 70       	andi	r24, 0x08	; 8
     dae:	90 70       	andi	r25, 0x00	; 0
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	b9 f3       	breq	.-18     	; 0xda2 <main+0x26c>
     db4:	d0 ce       	rjmp	.-608    	; 0xb56 <main+0x20>
		}
		else if(!(PIND & (1<<PD4)))
     db6:	e0 e3       	ldi	r30, 0x30	; 48
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	88 2f       	mov	r24, r24
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	80 71       	andi	r24, 0x10	; 16
     dc2:	90 70       	andi	r25, 0x00	; 0
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	09 f0       	breq	.+2      	; 0xdca <main+0x294>
     dc8:	c6 ce       	rjmp	.-628    	; 0xb56 <main+0x20>
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	a0 ef       	ldi	r26, 0xF0	; 240
     dd0:	b1 e4       	ldi	r27, 0x41	; 65
     dd2:	8b 87       	std	Y+11, r24	; 0x0b
     dd4:	9c 87       	std	Y+12, r25	; 0x0c
     dd6:	ad 87       	std	Y+13, r26	; 0x0d
     dd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dda:	6b 85       	ldd	r22, Y+11	; 0x0b
     ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
     dde:	8d 85       	ldd	r24, Y+13	; 0x0d
     de0:	9e 85       	ldd	r25, Y+14	; 0x0e
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	4a e7       	ldi	r20, 0x7A	; 122
     de8:	53 e4       	ldi	r21, 0x43	; 67
     dea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	8f 83       	std	Y+7, r24	; 0x07
     df4:	98 87       	std	Y+8, r25	; 0x08
     df6:	a9 87       	std	Y+9, r26	; 0x09
     df8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dfa:	6f 81       	ldd	r22, Y+7	; 0x07
     dfc:	78 85       	ldd	r23, Y+8	; 0x08
     dfe:	89 85       	ldd	r24, Y+9	; 0x09
     e00:	9a 85       	ldd	r25, Y+10	; 0x0a
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e8       	ldi	r20, 0x80	; 128
     e08:	5f e3       	ldi	r21, 0x3F	; 63
     e0a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e0e:	88 23       	and	r24, r24
     e10:	2c f4       	brge	.+10     	; 0xe1c <main+0x2e6>
		__ticks = 1;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	9e 83       	std	Y+6, r25	; 0x06
     e18:	8d 83       	std	Y+5, r24	; 0x05
     e1a:	3f c0       	rjmp	.+126    	; 0xe9a <main+0x364>
	else if (__tmp > 65535)
     e1c:	6f 81       	ldd	r22, Y+7	; 0x07
     e1e:	78 85       	ldd	r23, Y+8	; 0x08
     e20:	89 85       	ldd	r24, Y+9	; 0x09
     e22:	9a 85       	ldd	r25, Y+10	; 0x0a
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	3f ef       	ldi	r19, 0xFF	; 255
     e28:	4f e7       	ldi	r20, 0x7F	; 127
     e2a:	57 e4       	ldi	r21, 0x47	; 71
     e2c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e30:	18 16       	cp	r1, r24
     e32:	4c f5       	brge	.+82     	; 0xe86 <main+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e34:	6b 85       	ldd	r22, Y+11	; 0x0b
     e36:	7c 85       	ldd	r23, Y+12	; 0x0c
     e38:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	40 e2       	ldi	r20, 0x20	; 32
     e42:	51 e4       	ldi	r21, 0x41	; 65
     e44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	bc 01       	movw	r22, r24
     e4e:	cd 01       	movw	r24, r26
     e50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	9e 83       	std	Y+6, r25	; 0x06
     e5a:	8d 83       	std	Y+5, r24	; 0x05
     e5c:	0f c0       	rjmp	.+30     	; 0xe7c <main+0x346>
     e5e:	89 e1       	ldi	r24, 0x19	; 25
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	9c 83       	std	Y+4, r25	; 0x04
     e64:	8b 83       	std	Y+3, r24	; 0x03
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	9c 81       	ldd	r25, Y+4	; 0x04
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	f1 f7       	brne	.-4      	; 0xe6a <main+0x334>
     e6e:	9c 83       	std	Y+4, r25	; 0x04
     e70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e72:	8d 81       	ldd	r24, Y+5	; 0x05
     e74:	9e 81       	ldd	r25, Y+6	; 0x06
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	9e 83       	std	Y+6, r25	; 0x06
     e7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7c:	8d 81       	ldd	r24, Y+5	; 0x05
     e7e:	9e 81       	ldd	r25, Y+6	; 0x06
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	69 f7       	brne	.-38     	; 0xe5e <main+0x328>
     e84:	14 c0       	rjmp	.+40     	; 0xeae <main+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e86:	6f 81       	ldd	r22, Y+7	; 0x07
     e88:	78 85       	ldd	r23, Y+8	; 0x08
     e8a:	89 85       	ldd	r24, Y+9	; 0x09
     e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	9e 83       	std	Y+6, r25	; 0x06
     e98:	8d 83       	std	Y+5, r24	; 0x05
     e9a:	8d 81       	ldd	r24, Y+5	; 0x05
     e9c:	9e 81       	ldd	r25, Y+6	; 0x06
     e9e:	9a 83       	std	Y+2, r25	; 0x02
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	9a 81       	ldd	r25, Y+2	; 0x02
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <main+0x370>
     eaa:	9a 83       	std	Y+2, r25	; 0x02
     eac:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(30);
			if( !(PIND & (1<<PD4)) )
     eae:	e0 e3       	ldi	r30, 0x30	; 48
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	88 2f       	mov	r24, r24
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	80 71       	andi	r24, 0x10	; 16
     eba:	90 70       	andi	r25, 0x00	; 0
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	21 f4       	brne	.+8      	; 0xec8 <main+0x392>
			{
				SevenSegment_Display(MIN_DISPLAY_NUM);
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	0e 94 06 10 	call	0x200c	; 0x200c <SevenSegment_Display>
				count = 0;
     ec6:	1b a6       	std	Y+43, r1	; 0x2b
			}
			while( !(PIND & (1<<PD2)) ){}
     ec8:	e0 e3       	ldi	r30, 0x30	; 48
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	88 2f       	mov	r24, r24
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	84 70       	andi	r24, 0x04	; 4
     ed4:	90 70       	andi	r25, 0x00	; 0
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	b9 f3       	breq	.-18     	; 0xec8 <main+0x392>
     eda:	3d ce       	rjmp	.-902    	; 0xb56 <main+0x20>

00000edc <dio_writePin>:
#include"dio.h"
#include"dio_prv.h"
#include"dio_cfg.h"
#include<avr/io.h>
DIO_errorStatus dio_writePin(u8 pin_id, u8 value)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	2f 97       	sbiw	r28, 0x0f	; 15
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	cd bf       	out	0x3d, r28	; 61
     ef0:	8c 83       	std	Y+4, r24	; 0x04
     ef2:	6d 83       	std	Y+5, r22	; 0x05
	DIO_errorStatus return_errorStatus = Dio_Ok;
     ef4:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_port;

	u8 loc_pin;

	if(pin_id > NUM_OF_PINS)
     ef6:	8c 81       	ldd	r24, Y+4	; 0x04
     ef8:	80 32       	cpi	r24, 0x20	; 32
     efa:	18 f0       	brcs	.+6      	; 0xf02 <dio_writePin+0x26>
	{
		return_errorStatus = Dio_pinError;
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	8b 83       	std	Y+3, r24	; 0x03
     f00:	0e c1       	rjmp	.+540    	; 0x111e <dio_writePin+0x242>
	}
	else if(value > NUM_OF_LEVELS)
     f02:	8d 81       	ldd	r24, Y+5	; 0x05
     f04:	82 30       	cpi	r24, 0x02	; 2
     f06:	18 f0       	brcs	.+6      	; 0xf0e <dio_writePin+0x32>
	{
		return_errorStatus = Dio_levelError;
     f08:	82 e0       	ldi	r24, 0x02	; 2
     f0a:	8b 83       	std	Y+3, r24	; 0x03
     f0c:	08 c1       	rjmp	.+528    	; 0x111e <dio_writePin+0x242>
	}
	else
	{
		loc_pin = pin_id % NUM_OF_PINS_PER_PORT;
     f0e:	8c 81       	ldd	r24, Y+4	; 0x04
     f10:	87 70       	andi	r24, 0x07	; 7
     f12:	89 83       	std	Y+1, r24	; 0x01
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
     f14:	8c 81       	ldd	r24, Y+4	; 0x04
     f16:	86 95       	lsr	r24
     f18:	86 95       	lsr	r24
     f1a:	86 95       	lsr	r24
     f1c:	8a 83       	std	Y+2, r24	; 0x02

		switch(loc_port)
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	3f 87       	std	Y+15, r19	; 0x0f
     f26:	2e 87       	std	Y+14, r18	; 0x0e
     f28:	8e 85       	ldd	r24, Y+14	; 0x0e
     f2a:	9f 85       	ldd	r25, Y+15	; 0x0f
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	91 05       	cpc	r25, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <dio_writePin+0x58>
     f32:	4f c0       	rjmp	.+158    	; 0xfd2 <dio_writePin+0xf6>
     f34:	2e 85       	ldd	r18, Y+14	; 0x0e
     f36:	3f 85       	ldd	r19, Y+15	; 0x0f
     f38:	22 30       	cpi	r18, 0x02	; 2
     f3a:	31 05       	cpc	r19, r1
     f3c:	2c f4       	brge	.+10     	; 0xf48 <dio_writePin+0x6c>
     f3e:	8e 85       	ldd	r24, Y+14	; 0x0e
     f40:	9f 85       	ldd	r25, Y+15	; 0x0f
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	71 f0       	breq	.+28     	; 0xf62 <dio_writePin+0x86>
     f46:	eb c0       	rjmp	.+470    	; 0x111e <dio_writePin+0x242>
     f48:	2e 85       	ldd	r18, Y+14	; 0x0e
     f4a:	3f 85       	ldd	r19, Y+15	; 0x0f
     f4c:	22 30       	cpi	r18, 0x02	; 2
     f4e:	31 05       	cpc	r19, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <dio_writePin+0x78>
     f52:	77 c0       	rjmp	.+238    	; 0x1042 <dio_writePin+0x166>
     f54:	8e 85       	ldd	r24, Y+14	; 0x0e
     f56:	9f 85       	ldd	r25, Y+15	; 0x0f
     f58:	83 30       	cpi	r24, 0x03	; 3
     f5a:	91 05       	cpc	r25, r1
     f5c:	09 f4       	brne	.+2      	; 0xf60 <dio_writePin+0x84>
     f5e:	a9 c0       	rjmp	.+338    	; 0x10b2 <dio_writePin+0x1d6>
     f60:	de c0       	rjmp	.+444    	; 0x111e <dio_writePin+0x242>
		{

		case DIO_PORTA:

			switch (value)
     f62:	8d 81       	ldd	r24, Y+5	; 0x05
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	3d 87       	std	Y+13, r19	; 0x0d
     f6a:	2c 87       	std	Y+12, r18	; 0x0c
     f6c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f6e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	d1 f0       	breq	.+52     	; 0xfa8 <dio_writePin+0xcc>
     f74:	2c 85       	ldd	r18, Y+12	; 0x0c
     f76:	3d 85       	ldd	r19, Y+13	; 0x0d
     f78:	21 30       	cpi	r18, 0x01	; 1
     f7a:	31 05       	cpc	r19, r1
     f7c:	09 f0       	breq	.+2      	; 0xf80 <dio_writePin+0xa4>
     f7e:	cf c0       	rjmp	.+414    	; 0x111e <dio_writePin+0x242>
			{

			case DIO_HIGH:

				SET_BIT(PORTA, loc_pin);
     f80:	ab e3       	ldi	r26, 0x3B	; 59
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	eb e3       	ldi	r30, 0x3B	; 59
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <dio_writePin+0xc2>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <dio_writePin+0xbe>
     fa2:	84 2b       	or	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	bb c0       	rjmp	.+374    	; 0x111e <dio_writePin+0x242>

				break;

			case DIO_LOW:

				CLEAR_BIT(PORTA, loc_pin);
     fa8:	ab e3       	ldi	r26, 0x3B	; 59
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	eb e3       	ldi	r30, 0x3B	; 59
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <dio_writePin+0xea>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <dio_writePin+0xe6>
     fca:	80 95       	com	r24
     fcc:	84 23       	and	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	a6 c0       	rjmp	.+332    	; 0x111e <dio_writePin+0x242>
			}
			break;

		case DIO_PORTB:

			switch (value)
     fd2:	8d 81       	ldd	r24, Y+5	; 0x05
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	3b 87       	std	Y+11, r19	; 0x0b
     fda:	2a 87       	std	Y+10, r18	; 0x0a
     fdc:	8a 85       	ldd	r24, Y+10	; 0x0a
     fde:	9b 85       	ldd	r25, Y+11	; 0x0b
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	d1 f0       	breq	.+52     	; 0x1018 <dio_writePin+0x13c>
     fe4:	2a 85       	ldd	r18, Y+10	; 0x0a
     fe6:	3b 85       	ldd	r19, Y+11	; 0x0b
     fe8:	21 30       	cpi	r18, 0x01	; 1
     fea:	31 05       	cpc	r19, r1
     fec:	09 f0       	breq	.+2      	; 0xff0 <dio_writePin+0x114>
     fee:	97 c0       	rjmp	.+302    	; 0x111e <dio_writePin+0x242>
			{

			case DIO_HIGH:

				SET_BIT(PORTB, loc_pin);
     ff0:	a8 e3       	ldi	r26, 0x38	; 56
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e8 e3       	ldi	r30, 0x38	; 56
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <dio_writePin+0x132>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <dio_writePin+0x12e>
    1012:	84 2b       	or	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	83 c0       	rjmp	.+262    	; 0x111e <dio_writePin+0x242>

				break;

			case DIO_LOW:

				CLEAR_BIT(PORTB, loc_pin);
    1018:	a8 e3       	ldi	r26, 0x38	; 56
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e8 e3       	ldi	r30, 0x38	; 56
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <dio_writePin+0x15a>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <dio_writePin+0x156>
    103a:	80 95       	com	r24
    103c:	84 23       	and	r24, r20
    103e:	8c 93       	st	X, r24
    1040:	6e c0       	rjmp	.+220    	; 0x111e <dio_writePin+0x242>
			break;


		case DIO_PORTC:

			switch (value)
    1042:	8d 81       	ldd	r24, Y+5	; 0x05
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	39 87       	std	Y+9, r19	; 0x09
    104a:	28 87       	std	Y+8, r18	; 0x08
    104c:	88 85       	ldd	r24, Y+8	; 0x08
    104e:	99 85       	ldd	r25, Y+9	; 0x09
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	d1 f0       	breq	.+52     	; 0x1088 <dio_writePin+0x1ac>
    1054:	28 85       	ldd	r18, Y+8	; 0x08
    1056:	39 85       	ldd	r19, Y+9	; 0x09
    1058:	21 30       	cpi	r18, 0x01	; 1
    105a:	31 05       	cpc	r19, r1
    105c:	09 f0       	breq	.+2      	; 0x1060 <dio_writePin+0x184>
    105e:	5f c0       	rjmp	.+190    	; 0x111e <dio_writePin+0x242>
			{

			case DIO_HIGH:

				SET_BIT(PORTC, loc_pin);
    1060:	a5 e3       	ldi	r26, 0x35	; 53
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e5 e3       	ldi	r30, 0x35	; 53
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <dio_writePin+0x1a2>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <dio_writePin+0x19e>
    1082:	84 2b       	or	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	4b c0       	rjmp	.+150    	; 0x111e <dio_writePin+0x242>

				break;

			case DIO_LOW:

				CLEAR_BIT(PORTC, loc_pin);
    1088:	a5 e3       	ldi	r26, 0x35	; 53
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e5 e3       	ldi	r30, 0x35	; 53
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <dio_writePin+0x1ca>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <dio_writePin+0x1c6>
    10aa:	80 95       	com	r24
    10ac:	84 23       	and	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	36 c0       	rjmp	.+108    	; 0x111e <dio_writePin+0x242>



		case DIO_PORTD:

			switch (value)
    10b2:	8d 81       	ldd	r24, Y+5	; 0x05
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	3f 83       	std	Y+7, r19	; 0x07
    10ba:	2e 83       	std	Y+6, r18	; 0x06
    10bc:	8e 81       	ldd	r24, Y+6	; 0x06
    10be:	9f 81       	ldd	r25, Y+7	; 0x07
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	c9 f0       	breq	.+50     	; 0x10f6 <dio_writePin+0x21a>
    10c4:	2e 81       	ldd	r18, Y+6	; 0x06
    10c6:	3f 81       	ldd	r19, Y+7	; 0x07
    10c8:	21 30       	cpi	r18, 0x01	; 1
    10ca:	31 05       	cpc	r19, r1
    10cc:	41 f5       	brne	.+80     	; 0x111e <dio_writePin+0x242>
			{

			case DIO_HIGH:

				SET_BIT(PORTD, loc_pin);
    10ce:	a2 e3       	ldi	r26, 0x32	; 50
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e2 e3       	ldi	r30, 0x32	; 50
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <dio_writePin+0x210>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <dio_writePin+0x20c>
    10f0:	84 2b       	or	r24, r20
    10f2:	8c 93       	st	X, r24
    10f4:	14 c0       	rjmp	.+40     	; 0x111e <dio_writePin+0x242>

				break;

			case DIO_LOW:

				CLEAR_BIT(PORTD, loc_pin);
    10f6:	a2 e3       	ldi	r26, 0x32	; 50
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e2 e3       	ldi	r30, 0x32	; 50
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <dio_writePin+0x238>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <dio_writePin+0x234>
    1118:	80 95       	com	r24
    111a:	84 23       	and	r24, r20
    111c:	8c 93       	st	X, r24


		}
	}

	return return_errorStatus;
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1120:	2f 96       	adiw	r28, 0x0f	; 15
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <dio_readPin>:
DIO_errorStatus dio_readPin(u8 pin_id, pu8 level)
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	28 97       	sbiw	r28, 0x08	; 8
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	8c 83       	std	Y+4, r24	; 0x04
    1148:	7e 83       	std	Y+6, r23	; 0x06
    114a:	6d 83       	std	Y+5, r22	; 0x05
	DIO_errorStatus return_errorStatus = Dio_Ok;
    114c:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_port;

	u8 loc_pin;

	if(pin_id > NUM_OF_PINS)
    114e:	8c 81       	ldd	r24, Y+4	; 0x04
    1150:	80 32       	cpi	r24, 0x20	; 32
    1152:	18 f0       	brcs	.+6      	; 0x115a <dio_readPin+0x28>
	{
		return_errorStatus = Dio_pinError;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	8b 83       	std	Y+3, r24	; 0x03
    1158:	35 c1       	rjmp	.+618    	; 0x13c4 <dio_readPin+0x292>
	}
	else if(level == NULL)
    115a:	8d 81       	ldd	r24, Y+5	; 0x05
    115c:	9e 81       	ldd	r25, Y+6	; 0x06
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	19 f4       	brne	.+6      	; 0x1168 <dio_readPin+0x36>
	{
		return_errorStatus = Dio_NullPointerError;
    1162:	84 e0       	ldi	r24, 0x04	; 4
    1164:	8b 83       	std	Y+3, r24	; 0x03
    1166:	2e c1       	rjmp	.+604    	; 0x13c4 <dio_readPin+0x292>
	}
	else
	{
		loc_pin = pin_id % NUM_OF_PINS_PER_PORT;
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	87 70       	andi	r24, 0x07	; 7
    116c:	89 83       	std	Y+1, r24	; 0x01
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	86 95       	lsr	r24
    1172:	86 95       	lsr	r24
    1174:	86 95       	lsr	r24
    1176:	8a 83       	std	Y+2, r24	; 0x02

		switch(loc_port)
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	38 87       	std	Y+8, r19	; 0x08
    1180:	2f 83       	std	Y+7, r18	; 0x07
    1182:	4f 81       	ldd	r20, Y+7	; 0x07
    1184:	58 85       	ldd	r21, Y+8	; 0x08
    1186:	41 30       	cpi	r20, 0x01	; 1
    1188:	51 05       	cpc	r21, r1
    118a:	09 f4       	brne	.+2      	; 0x118e <dio_readPin+0x5c>
    118c:	59 c0       	rjmp	.+178    	; 0x1240 <dio_readPin+0x10e>
    118e:	8f 81       	ldd	r24, Y+7	; 0x07
    1190:	98 85       	ldd	r25, Y+8	; 0x08
    1192:	82 30       	cpi	r24, 0x02	; 2
    1194:	91 05       	cpc	r25, r1
    1196:	34 f4       	brge	.+12     	; 0x11a4 <dio_readPin+0x72>
    1198:	2f 81       	ldd	r18, Y+7	; 0x07
    119a:	38 85       	ldd	r19, Y+8	; 0x08
    119c:	21 15       	cp	r18, r1
    119e:	31 05       	cpc	r19, r1
    11a0:	71 f0       	breq	.+28     	; 0x11be <dio_readPin+0x8c>
    11a2:	10 c1       	rjmp	.+544    	; 0x13c4 <dio_readPin+0x292>
    11a4:	4f 81       	ldd	r20, Y+7	; 0x07
    11a6:	58 85       	ldd	r21, Y+8	; 0x08
    11a8:	42 30       	cpi	r20, 0x02	; 2
    11aa:	51 05       	cpc	r21, r1
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <dio_readPin+0x7e>
    11ae:	89 c0       	rjmp	.+274    	; 0x12c2 <dio_readPin+0x190>
    11b0:	8f 81       	ldd	r24, Y+7	; 0x07
    11b2:	98 85       	ldd	r25, Y+8	; 0x08
    11b4:	83 30       	cpi	r24, 0x03	; 3
    11b6:	91 05       	cpc	r25, r1
    11b8:	09 f4       	brne	.+2      	; 0x11bc <dio_readPin+0x8a>
    11ba:	c4 c0       	rjmp	.+392    	; 0x1344 <dio_readPin+0x212>
    11bc:	03 c1       	rjmp	.+518    	; 0x13c4 <dio_readPin+0x292>
		{

		case DIO_PORTA:

			if (GET_BIT(DDRA,loc_pin) == PORT_INPUT)
    11be:	ea e3       	ldi	r30, 0x3A	; 58
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <dio_readPin+0xa6>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	2a 95       	dec	r18
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <dio_readPin+0xa2>
    11dc:	9a 01       	movw	r18, r20
    11de:	28 23       	and	r18, r24
    11e0:	39 23       	and	r19, r25
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	88 2f       	mov	r24, r24
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	a9 01       	movw	r20, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <dio_readPin+0xbe>
    11ec:	55 95       	asr	r21
    11ee:	47 95       	ror	r20
    11f0:	8a 95       	dec	r24
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <dio_readPin+0xba>
    11f4:	ca 01       	movw	r24, r20
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	01 f5       	brne	.+64     	; 0x123a <dio_readPin+0x108>
			{
				*level = GET_BIT(PINA, loc_pin);
    11fa:	e9 e3       	ldi	r30, 0x39	; 57
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	48 2f       	mov	r20, r24
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <dio_readPin+0xe2>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	2a 95       	dec	r18
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <dio_readPin+0xde>
    1218:	9a 01       	movw	r18, r20
    121a:	28 23       	and	r18, r24
    121c:	39 23       	and	r19, r25
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	88 2f       	mov	r24, r24
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	a9 01       	movw	r20, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <dio_readPin+0xfa>
    1228:	55 95       	asr	r21
    122a:	47 95       	ror	r20
    122c:	8a 95       	dec	r24
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <dio_readPin+0xf6>
    1230:	ca 01       	movw	r24, r20
    1232:	ed 81       	ldd	r30, Y+5	; 0x05
    1234:	fe 81       	ldd	r31, Y+6	; 0x06
    1236:	80 83       	st	Z, r24
    1238:	c5 c0       	rjmp	.+394    	; 0x13c4 <dio_readPin+0x292>
			}
			else
			{
				return_errorStatus = Dio_directionError;
    123a:	83 e0       	ldi	r24, 0x03	; 3
    123c:	8b 83       	std	Y+3, r24	; 0x03
    123e:	c2 c0       	rjmp	.+388    	; 0x13c4 <dio_readPin+0x292>
				break;


		case DIO_PORTB:

			if (GET_BIT(DDRB,loc_pin) == PORT_INPUT)
    1240:	e7 e3       	ldi	r30, 0x37	; 55
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	50 e0       	ldi	r21, 0x00	; 0
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 c0       	rjmp	.+4      	; 0x125a <dio_readPin+0x128>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	2a 95       	dec	r18
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <dio_readPin+0x124>
    125e:	9a 01       	movw	r18, r20
    1260:	28 23       	and	r18, r24
    1262:	39 23       	and	r19, r25
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	88 2f       	mov	r24, r24
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	a9 01       	movw	r20, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <dio_readPin+0x140>
    126e:	55 95       	asr	r21
    1270:	47 95       	ror	r20
    1272:	8a 95       	dec	r24
    1274:	e2 f7       	brpl	.-8      	; 0x126e <dio_readPin+0x13c>
    1276:	ca 01       	movw	r24, r20
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	01 f5       	brne	.+64     	; 0x12bc <dio_readPin+0x18a>
			{
				*level = GET_BIT(PINB, loc_pin);
    127c:	e6 e3       	ldi	r30, 0x36	; 54
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <dio_readPin+0x164>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	2a 95       	dec	r18
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <dio_readPin+0x160>
    129a:	9a 01       	movw	r18, r20
    129c:	28 23       	and	r18, r24
    129e:	39 23       	and	r19, r25
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	88 2f       	mov	r24, r24
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	a9 01       	movw	r20, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <dio_readPin+0x17c>
    12aa:	55 95       	asr	r21
    12ac:	47 95       	ror	r20
    12ae:	8a 95       	dec	r24
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <dio_readPin+0x178>
    12b2:	ca 01       	movw	r24, r20
    12b4:	ed 81       	ldd	r30, Y+5	; 0x05
    12b6:	fe 81       	ldd	r31, Y+6	; 0x06
    12b8:	80 83       	st	Z, r24
    12ba:	84 c0       	rjmp	.+264    	; 0x13c4 <dio_readPin+0x292>
			}
			else
			{
				return_errorStatus = Dio_directionError;
    12bc:	83 e0       	ldi	r24, 0x03	; 3
    12be:	8b 83       	std	Y+3, r24	; 0x03
    12c0:	81 c0       	rjmp	.+258    	; 0x13c4 <dio_readPin+0x292>



		case DIO_PORTC:

			if (GET_BIT(DDRC,loc_pin) == PORT_INPUT)
    12c2:	e4 e3       	ldi	r30, 0x34	; 52
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	48 2f       	mov	r20, r24
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <dio_readPin+0x1aa>
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	2a 95       	dec	r18
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <dio_readPin+0x1a6>
    12e0:	9a 01       	movw	r18, r20
    12e2:	28 23       	and	r18, r24
    12e4:	39 23       	and	r19, r25
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	88 2f       	mov	r24, r24
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	a9 01       	movw	r20, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <dio_readPin+0x1c2>
    12f0:	55 95       	asr	r21
    12f2:	47 95       	ror	r20
    12f4:	8a 95       	dec	r24
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <dio_readPin+0x1be>
    12f8:	ca 01       	movw	r24, r20
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	01 f5       	brne	.+64     	; 0x133e <dio_readPin+0x20c>
			{

				*level = GET_BIT(PINC, loc_pin);
    12fe:	e3 e3       	ldi	r30, 0x33	; 51
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <dio_readPin+0x1e6>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	2a 95       	dec	r18
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <dio_readPin+0x1e2>
    131c:	9a 01       	movw	r18, r20
    131e:	28 23       	and	r18, r24
    1320:	39 23       	and	r19, r25
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	88 2f       	mov	r24, r24
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	a9 01       	movw	r20, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <dio_readPin+0x1fe>
    132c:	55 95       	asr	r21
    132e:	47 95       	ror	r20
    1330:	8a 95       	dec	r24
    1332:	e2 f7       	brpl	.-8      	; 0x132c <dio_readPin+0x1fa>
    1334:	ca 01       	movw	r24, r20
    1336:	ed 81       	ldd	r30, Y+5	; 0x05
    1338:	fe 81       	ldd	r31, Y+6	; 0x06
    133a:	80 83       	st	Z, r24
    133c:	43 c0       	rjmp	.+134    	; 0x13c4 <dio_readPin+0x292>

			}
			else
			{
				return_errorStatus = Dio_directionError;
    133e:	83 e0       	ldi	r24, 0x03	; 3
    1340:	8b 83       	std	Y+3, r24	; 0x03
    1342:	40 c0       	rjmp	.+128    	; 0x13c4 <dio_readPin+0x292>
				break;


		case DIO_PORTD:

			if (GET_BIT(DDRD,loc_pin) == PORT_INPUT)
    1344:	e1 e3       	ldi	r30, 0x31	; 49
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	50 e0       	ldi	r21, 0x00	; 0
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 c0       	rjmp	.+4      	; 0x135e <dio_readPin+0x22c>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	2a 95       	dec	r18
    1360:	e2 f7       	brpl	.-8      	; 0x135a <dio_readPin+0x228>
    1362:	9a 01       	movw	r18, r20
    1364:	28 23       	and	r18, r24
    1366:	39 23       	and	r19, r25
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	a9 01       	movw	r20, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <dio_readPin+0x244>
    1372:	55 95       	asr	r21
    1374:	47 95       	ror	r20
    1376:	8a 95       	dec	r24
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <dio_readPin+0x240>
    137a:	ca 01       	movw	r24, r20
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	01 f5       	brne	.+64     	; 0x13c0 <dio_readPin+0x28e>
			{
				*level = GET_BIT(PIND, loc_pin);
    1380:	e0 e3       	ldi	r30, 0x30	; 48
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 c0       	rjmp	.+4      	; 0x139a <dio_readPin+0x268>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	2a 95       	dec	r18
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <dio_readPin+0x264>
    139e:	9a 01       	movw	r18, r20
    13a0:	28 23       	and	r18, r24
    13a2:	39 23       	and	r19, r25
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	88 2f       	mov	r24, r24
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a9 01       	movw	r20, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <dio_readPin+0x280>
    13ae:	55 95       	asr	r21
    13b0:	47 95       	ror	r20
    13b2:	8a 95       	dec	r24
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <dio_readPin+0x27c>
    13b6:	ca 01       	movw	r24, r20
    13b8:	ed 81       	ldd	r30, Y+5	; 0x05
    13ba:	fe 81       	ldd	r31, Y+6	; 0x06
    13bc:	80 83       	st	Z, r24
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <dio_readPin+0x292>
			}
			else
			{
				return_errorStatus = Dio_directionError;
    13c0:	83 e0       	ldi	r24, 0x03	; 3
    13c2:	8b 83       	std	Y+3, r24	; 0x03
				break;

		}
	}

	return return_errorStatus;
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    13c6:	28 96       	adiw	r28, 0x08	; 8
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	f8 94       	cli
    13cc:	de bf       	out	0x3e, r29	; 62
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	cd bf       	out	0x3d, r28	; 61
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <dio_writePort>:
DIO_errorStatus dio_writePort(u8 port_id, u8 value)
{
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	00 d0       	rcall	.+0      	; 0x13de <dio_writePort+0x6>
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <dio_writePort+0x8>
    13e0:	0f 92       	push	r0
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	8a 83       	std	Y+2, r24	; 0x02
    13e8:	6b 83       	std	Y+3, r22	; 0x03
	DIO_errorStatus return_errorStatus = Dio_Ok;
    13ea:	19 82       	std	Y+1, r1	; 0x01

	if (port_id > NUM_OF_PORTS) {
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	84 30       	cpi	r24, 0x04	; 4
    13f0:	18 f0       	brcs	.+6      	; 0x13f8 <dio_writePort+0x20>

		return_errorStatus = Dio_portError;
    13f2:	85 e0       	ldi	r24, 0x05	; 5
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	32 c0       	rjmp	.+100    	; 0x145c <dio_writePort+0x84>
	}

	else {

		switch (port_id) {
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	3d 83       	std	Y+5, r19	; 0x05
    1400:	2c 83       	std	Y+4, r18	; 0x04
    1402:	8c 81       	ldd	r24, Y+4	; 0x04
    1404:	9d 81       	ldd	r25, Y+5	; 0x05
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	91 05       	cpc	r25, r1
    140a:	d1 f0       	breq	.+52     	; 0x1440 <dio_writePort+0x68>
    140c:	2c 81       	ldd	r18, Y+4	; 0x04
    140e:	3d 81       	ldd	r19, Y+5	; 0x05
    1410:	22 30       	cpi	r18, 0x02	; 2
    1412:	31 05       	cpc	r19, r1
    1414:	2c f4       	brge	.+10     	; 0x1420 <dio_writePort+0x48>
    1416:	8c 81       	ldd	r24, Y+4	; 0x04
    1418:	9d 81       	ldd	r25, Y+5	; 0x05
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	61 f0       	breq	.+24     	; 0x1436 <dio_writePort+0x5e>
    141e:	1e c0       	rjmp	.+60     	; 0x145c <dio_writePort+0x84>
    1420:	2c 81       	ldd	r18, Y+4	; 0x04
    1422:	3d 81       	ldd	r19, Y+5	; 0x05
    1424:	22 30       	cpi	r18, 0x02	; 2
    1426:	31 05       	cpc	r19, r1
    1428:	81 f0       	breq	.+32     	; 0x144a <dio_writePort+0x72>
    142a:	8c 81       	ldd	r24, Y+4	; 0x04
    142c:	9d 81       	ldd	r25, Y+5	; 0x05
    142e:	83 30       	cpi	r24, 0x03	; 3
    1430:	91 05       	cpc	r25, r1
    1432:	81 f0       	breq	.+32     	; 0x1454 <dio_writePort+0x7c>
    1434:	13 c0       	rjmp	.+38     	; 0x145c <dio_writePort+0x84>

		case DIO_PORTA:

			ASSIGN_REG(PORTA, value);
    1436:	eb e3       	ldi	r30, 0x3B	; 59
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	80 83       	st	Z, r24
    143e:	0e c0       	rjmp	.+28     	; 0x145c <dio_writePort+0x84>

			break;

		case DIO_PORTB:

			ASSIGN_REG(PORTB, value);
    1440:	e8 e3       	ldi	r30, 0x38	; 56
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	80 83       	st	Z, r24
    1448:	09 c0       	rjmp	.+18     	; 0x145c <dio_writePort+0x84>

			break;

		case DIO_PORTC:

			ASSIGN_REG(PORTC, value);
    144a:	e5 e3       	ldi	r30, 0x35	; 53
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	80 83       	st	Z, r24
    1452:	04 c0       	rjmp	.+8      	; 0x145c <dio_writePort+0x84>

			break;

		case DIO_PORTD:

			ASSIGN_REG(PORTD, value);
    1454:	e2 e3       	ldi	r30, 0x32	; 50
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	80 83       	st	Z, r24

		}

	}

	return return_errorStatus;
    145c:	89 81       	ldd	r24, Y+1	; 0x01
}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <dio_readPort>:
DIO_errorStatus dio_readPort(u8 port_id, pu8 level)
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	00 d0       	rcall	.+0      	; 0x1474 <dio_readPort+0x6>
    1474:	00 d0       	rcall	.+0      	; 0x1476 <dio_readPort+0x8>
    1476:	00 d0       	rcall	.+0      	; 0x1478 <dio_readPort+0xa>
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	8a 83       	std	Y+2, r24	; 0x02
    147e:	7c 83       	std	Y+4, r23	; 0x04
    1480:	6b 83       	std	Y+3, r22	; 0x03
	DIO_errorStatus return_errorStatus = Dio_Ok;
    1482:	19 82       	std	Y+1, r1	; 0x01

	if (level == NULL) {
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	9c 81       	ldd	r25, Y+4	; 0x04
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	19 f4       	brne	.+6      	; 0x1492 <dio_readPort+0x24>

		return_errorStatus = Dio_NullPointerError;
    148c:	84 e0       	ldi	r24, 0x04	; 4
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	40 c0       	rjmp	.+128    	; 0x1512 <dio_readPort+0xa4>
	}

	else if (port_id > NUM_OF_PORTS)
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	84 30       	cpi	r24, 0x04	; 4
    1496:	18 f0       	brcs	.+6      	; 0x149e <dio_readPort+0x30>
	{

		return_errorStatus = Dio_portError;
    1498:	85 e0       	ldi	r24, 0x05	; 5
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	3a c0       	rjmp	.+116    	; 0x1512 <dio_readPort+0xa4>
	}

	else
	{

		switch (port_id) {
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	3e 83       	std	Y+6, r19	; 0x06
    14a6:	2d 83       	std	Y+5, r18	; 0x05
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	9e 81       	ldd	r25, Y+6	; 0x06
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	91 05       	cpc	r25, r1
    14b0:	e1 f0       	breq	.+56     	; 0x14ea <dio_readPort+0x7c>
    14b2:	2d 81       	ldd	r18, Y+5	; 0x05
    14b4:	3e 81       	ldd	r19, Y+6	; 0x06
    14b6:	22 30       	cpi	r18, 0x02	; 2
    14b8:	31 05       	cpc	r19, r1
    14ba:	2c f4       	brge	.+10     	; 0x14c6 <dio_readPort+0x58>
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	9e 81       	ldd	r25, Y+6	; 0x06
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	61 f0       	breq	.+24     	; 0x14dc <dio_readPort+0x6e>
    14c4:	26 c0       	rjmp	.+76     	; 0x1512 <dio_readPort+0xa4>
    14c6:	2d 81       	ldd	r18, Y+5	; 0x05
    14c8:	3e 81       	ldd	r19, Y+6	; 0x06
    14ca:	22 30       	cpi	r18, 0x02	; 2
    14cc:	31 05       	cpc	r19, r1
    14ce:	a1 f0       	breq	.+40     	; 0x14f8 <dio_readPort+0x8a>
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	9e 81       	ldd	r25, Y+6	; 0x06
    14d4:	83 30       	cpi	r24, 0x03	; 3
    14d6:	91 05       	cpc	r25, r1
    14d8:	b1 f0       	breq	.+44     	; 0x1506 <dio_readPort+0x98>
    14da:	1b c0       	rjmp	.+54     	; 0x1512 <dio_readPort+0xa4>

		case DIO_PORTA:

			*level = PINA;
    14dc:	e9 e3       	ldi	r30, 0x39	; 57
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	eb 81       	ldd	r30, Y+3	; 0x03
    14e4:	fc 81       	ldd	r31, Y+4	; 0x04
    14e6:	80 83       	st	Z, r24
    14e8:	14 c0       	rjmp	.+40     	; 0x1512 <dio_readPort+0xa4>

			break;

		case DIO_PORTB:

			*level = PINB;
    14ea:	e6 e3       	ldi	r30, 0x36	; 54
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	eb 81       	ldd	r30, Y+3	; 0x03
    14f2:	fc 81       	ldd	r31, Y+4	; 0x04
    14f4:	80 83       	st	Z, r24
    14f6:	0d c0       	rjmp	.+26     	; 0x1512 <dio_readPort+0xa4>

			break;

		case DIO_PORTC:

			*level = PINC;
    14f8:	e3 e3       	ldi	r30, 0x33	; 51
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1500:	fc 81       	ldd	r31, Y+4	; 0x04
    1502:	80 83       	st	Z, r24
    1504:	06 c0       	rjmp	.+12     	; 0x1512 <dio_readPort+0xa4>

			break;

		case DIO_PORTD:

			*level = PIND;
    1506:	e0 e3       	ldi	r30, 0x30	; 48
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	eb 81       	ldd	r30, Y+3	; 0x03
    150e:	fc 81       	ldd	r31, Y+4	; 0x04
    1510:	80 83       	st	Z, r24
			break;

		}

	}
	return return_errorStatus;
    1512:	89 81       	ldd	r24, Y+1	; 0x01
}
    1514:	26 96       	adiw	r28, 0x06	; 6
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <dio_tooglePin>:
DIO_errorStatus dio_tooglePin(u8 pin_id)
{
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	00 d0       	rcall	.+0      	; 0x152c <dio_tooglePin+0x6>
    152c:	00 d0       	rcall	.+0      	; 0x152e <dio_tooglePin+0x8>
    152e:	00 d0       	rcall	.+0      	; 0x1530 <dio_tooglePin+0xa>
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	8c 83       	std	Y+4, r24	; 0x04
	DIO_errorStatus return_errorStatus = Dio_Ok;
    1536:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_pin;
	u8 loc_port;

	if (pin_id > NUM_OF_PINS)
    1538:	8c 81       	ldd	r24, Y+4	; 0x04
    153a:	80 32       	cpi	r24, 0x20	; 32
    153c:	18 f0       	brcs	.+6      	; 0x1544 <dio_tooglePin+0x1e>
	{

		return_errorStatus = Dio_pinError;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	8b 83       	std	Y+3, r24	; 0x03
    1542:	f9 c0       	rjmp	.+498    	; 0x1736 <dio_tooglePin+0x210>
	}

	else
	{
		loc_pin = pin_id % NUM_OF_PINS_PER_PORT;
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
    1546:	87 70       	andi	r24, 0x07	; 7
    1548:	8a 83       	std	Y+2, r24	; 0x02
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
    154a:	8c 81       	ldd	r24, Y+4	; 0x04
    154c:	86 95       	lsr	r24
    154e:	86 95       	lsr	r24
    1550:	86 95       	lsr	r24
    1552:	89 83       	std	Y+1, r24	; 0x01

		switch (loc_port)
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	3e 83       	std	Y+6, r19	; 0x06
    155c:	2d 83       	std	Y+5, r18	; 0x05
    155e:	4d 81       	ldd	r20, Y+5	; 0x05
    1560:	5e 81       	ldd	r21, Y+6	; 0x06
    1562:	41 30       	cpi	r20, 0x01	; 1
    1564:	51 05       	cpc	r21, r1
    1566:	09 f4       	brne	.+2      	; 0x156a <dio_tooglePin+0x44>
    1568:	4c c0       	rjmp	.+152    	; 0x1602 <dio_tooglePin+0xdc>
    156a:	8d 81       	ldd	r24, Y+5	; 0x05
    156c:	9e 81       	ldd	r25, Y+6	; 0x06
    156e:	82 30       	cpi	r24, 0x02	; 2
    1570:	91 05       	cpc	r25, r1
    1572:	34 f4       	brge	.+12     	; 0x1580 <dio_tooglePin+0x5a>
    1574:	2d 81       	ldd	r18, Y+5	; 0x05
    1576:	3e 81       	ldd	r19, Y+6	; 0x06
    1578:	21 15       	cp	r18, r1
    157a:	31 05       	cpc	r19, r1
    157c:	71 f0       	breq	.+28     	; 0x159a <dio_tooglePin+0x74>
    157e:	db c0       	rjmp	.+438    	; 0x1736 <dio_tooglePin+0x210>
    1580:	4d 81       	ldd	r20, Y+5	; 0x05
    1582:	5e 81       	ldd	r21, Y+6	; 0x06
    1584:	42 30       	cpi	r20, 0x02	; 2
    1586:	51 05       	cpc	r21, r1
    1588:	09 f4       	brne	.+2      	; 0x158c <dio_tooglePin+0x66>
    158a:	6f c0       	rjmp	.+222    	; 0x166a <dio_tooglePin+0x144>
    158c:	8d 81       	ldd	r24, Y+5	; 0x05
    158e:	9e 81       	ldd	r25, Y+6	; 0x06
    1590:	83 30       	cpi	r24, 0x03	; 3
    1592:	91 05       	cpc	r25, r1
    1594:	09 f4       	brne	.+2      	; 0x1598 <dio_tooglePin+0x72>
    1596:	9d c0       	rjmp	.+314    	; 0x16d2 <dio_tooglePin+0x1ac>
    1598:	ce c0       	rjmp	.+412    	; 0x1736 <dio_tooglePin+0x210>
		{

		case DIO_PORTA:

			if (GET_BIT(DDRA,loc_pin) == PORT_OUTPUT)
    159a:	ea e3       	ldi	r30, 0x3A	; 58
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	48 2f       	mov	r20, r24
    15a2:	50 e0       	ldi	r21, 0x00	; 0
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <dio_tooglePin+0x8e>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	2a 95       	dec	r18
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <dio_tooglePin+0x8a>
    15b8:	9a 01       	movw	r18, r20
    15ba:	28 23       	and	r18, r24
    15bc:	39 23       	and	r19, r25
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	a9 01       	movw	r20, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <dio_tooglePin+0xa6>
    15c8:	55 95       	asr	r21
    15ca:	47 95       	ror	r20
    15cc:	8a 95       	dec	r24
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <dio_tooglePin+0xa2>
    15d0:	ca 01       	movw	r24, r20
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	91 05       	cpc	r25, r1
    15d6:	09 f0       	breq	.+2      	; 0x15da <dio_tooglePin+0xb4>
    15d8:	ae c0       	rjmp	.+348    	; 0x1736 <dio_tooglePin+0x210>
			{
				TOGGLE_BIT(PORTA, loc_pin);
    15da:	ab e3       	ldi	r26, 0x3B	; 59
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	eb e3       	ldi	r30, 0x3B	; 59
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	48 2f       	mov	r20, r24
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 2e       	mov	r0, r18
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <dio_tooglePin+0xd2>
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	0a 94       	dec	r0
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <dio_tooglePin+0xce>
    15fc:	84 27       	eor	r24, r20
    15fe:	8c 93       	st	X, r24
    1600:	9a c0       	rjmp	.+308    	; 0x1736 <dio_tooglePin+0x210>
			}
			break;

		case DIO_PORTB:

			if (GET_BIT(DDRB,loc_pin) == PORT_OUTPUT)
    1602:	e7 e3       	ldi	r30, 0x37	; 55
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	50 e0       	ldi	r21, 0x00	; 0
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 c0       	rjmp	.+4      	; 0x161c <dio_tooglePin+0xf6>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	2a 95       	dec	r18
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <dio_tooglePin+0xf2>
    1620:	9a 01       	movw	r18, r20
    1622:	28 23       	and	r18, r24
    1624:	39 23       	and	r19, r25
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	88 2f       	mov	r24, r24
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	a9 01       	movw	r20, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <dio_tooglePin+0x10e>
    1630:	55 95       	asr	r21
    1632:	47 95       	ror	r20
    1634:	8a 95       	dec	r24
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <dio_tooglePin+0x10a>
    1638:	ca 01       	movw	r24, r20
    163a:	81 30       	cpi	r24, 0x01	; 1
    163c:	91 05       	cpc	r25, r1
    163e:	09 f0       	breq	.+2      	; 0x1642 <dio_tooglePin+0x11c>
    1640:	7a c0       	rjmp	.+244    	; 0x1736 <dio_tooglePin+0x210>
			{
				TOGGLE_BIT(PORTB, loc_pin);
    1642:	a8 e3       	ldi	r26, 0x38	; 56
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e8 e3       	ldi	r30, 0x38	; 56
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	48 2f       	mov	r20, r24
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 2e       	mov	r0, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <dio_tooglePin+0x13a>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	0a 94       	dec	r0
    1662:	e2 f7       	brpl	.-8      	; 0x165c <dio_tooglePin+0x136>
    1664:	84 27       	eor	r24, r20
    1666:	8c 93       	st	X, r24
    1668:	66 c0       	rjmp	.+204    	; 0x1736 <dio_tooglePin+0x210>
			}
			break;

		case DIO_PORTC:

			if (GET_BIT(DDRC,loc_pin) == PORT_OUTPUT)
    166a:	e4 e3       	ldi	r30, 0x34	; 52
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	48 2f       	mov	r20, r24
    1672:	50 e0       	ldi	r21, 0x00	; 0
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <dio_tooglePin+0x15e>
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	2a 95       	dec	r18
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <dio_tooglePin+0x15a>
    1688:	9a 01       	movw	r18, r20
    168a:	28 23       	and	r18, r24
    168c:	39 23       	and	r19, r25
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	88 2f       	mov	r24, r24
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	a9 01       	movw	r20, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <dio_tooglePin+0x176>
    1698:	55 95       	asr	r21
    169a:	47 95       	ror	r20
    169c:	8a 95       	dec	r24
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <dio_tooglePin+0x172>
    16a0:	ca 01       	movw	r24, r20
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	91 05       	cpc	r25, r1
    16a6:	09 f0       	breq	.+2      	; 0x16aa <dio_tooglePin+0x184>
    16a8:	46 c0       	rjmp	.+140    	; 0x1736 <dio_tooglePin+0x210>
			{
				TOGGLE_BIT(PORTC, loc_pin);
    16aa:	a5 e3       	ldi	r26, 0x35	; 53
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e5 e3       	ldi	r30, 0x35	; 53
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <dio_tooglePin+0x1a2>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <dio_tooglePin+0x19e>
    16cc:	84 27       	eor	r24, r20
    16ce:	8c 93       	st	X, r24
    16d0:	32 c0       	rjmp	.+100    	; 0x1736 <dio_tooglePin+0x210>
			}
			break;

		case DIO_PORTD:

			if (GET_BIT(DDRD,loc_pin) == PORT_OUTPUT)
    16d2:	e1 e3       	ldi	r30, 0x31	; 49
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	48 2f       	mov	r20, r24
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <dio_tooglePin+0x1c6>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	2a 95       	dec	r18
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <dio_tooglePin+0x1c2>
    16f0:	9a 01       	movw	r18, r20
    16f2:	28 23       	and	r18, r24
    16f4:	39 23       	and	r19, r25
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a9 01       	movw	r20, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <dio_tooglePin+0x1de>
    1700:	55 95       	asr	r21
    1702:	47 95       	ror	r20
    1704:	8a 95       	dec	r24
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <dio_tooglePin+0x1da>
    1708:	ca 01       	movw	r24, r20
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	91 05       	cpc	r25, r1
    170e:	99 f4       	brne	.+38     	; 0x1736 <dio_tooglePin+0x210>
			{
				TOGGLE_BIT(PORTD, loc_pin);
    1710:	a2 e3       	ldi	r26, 0x32	; 50
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e2 e3       	ldi	r30, 0x32	; 50
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	48 2f       	mov	r20, r24
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	02 2e       	mov	r0, r18
    1728:	02 c0       	rjmp	.+4      	; 0x172e <dio_tooglePin+0x208>
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	0a 94       	dec	r0
    1730:	e2 f7       	brpl	.-8      	; 0x172a <dio_tooglePin+0x204>
    1732:	84 27       	eor	r24, r20
    1734:	8c 93       	st	X, r24
			break;

		}

	}
	return return_errorStatus;
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1738:	26 96       	adiw	r28, 0x06	; 6
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <port_init>:
#include"port_config.h"
#include<avr/io.h>
/*initialize based on user configuration*/

void port_init(void)
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
#define PIN_OUTPUT_LOW               0

#undef PIN_OUTPUT_HIGH
#define PIN_OUTPUT_HIGH              1

	DDRA = CONC(DIO_u8_PIN0,DIO_u8_PIN1,DIO_u8_PIN2,DIO_u8_PIN3,DIO_u8_PIN4,DIO_u8_PIN5,DIO_u8_PIN6,DIO_u8_PIN7);
    1752:	ea e3       	ldi	r30, 0x3A	; 58
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	8f e7       	ldi	r24, 0x7F	; 127
    1758:	80 83       	st	Z, r24
	DDRB = CONC(DIO_u8_PIN8,DIO_u8_PIN9,DIO_u8_PIN10,DIO_u8_PIN11,DIO_u8_PIN12,DIO_u8_PIN13,DIO_u8_PIN14,DIO_u8_PIN15);
    175a:	e7 e3       	ldi	r30, 0x37	; 55
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	10 82       	st	Z, r1
	DDRC = CONC(DIO_u8_PIN16,DIO_u8_PIN17,DIO_u8_PIN18,DIO_u8_PIN19,DIO_u8_PIN20,DIO_u8_PIN21,DIO_u8_PIN22,DIO_u8_PIN23);
    1760:	e4 e3       	ldi	r30, 0x34	; 52
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	10 82       	st	Z, r1
	DDRD = CONC(DIO_u8_PIN24,DIO_u8_PIN25,DIO_u8_PIN26,DIO_u8_PIN27,DIO_u8_PIN28,DIO_u8_PIN29,DIO_u8_PIN30,DIO_u8_PIN31);
    1766:	e1 e3       	ldi	r30, 0x31	; 49
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	10 82       	st	Z, r1
#define PIN_OUTPUT_LOW               0

#undef PIN_OUTPUT_HIGH
#define PIN_OUTPUT_HIGH              1

	PORTA = CONC(DIO_u8_PIN0,DIO_u8_PIN1,DIO_u8_PIN2,DIO_u8_PIN3,DIO_u8_PIN4,DIO_u8_PIN5,DIO_u8_PIN6,DIO_u8_PIN7);
    176c:	eb e3       	ldi	r30, 0x3B	; 59
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	8f e7       	ldi	r24, 0x7F	; 127
    1772:	80 83       	st	Z, r24
	PORTB = CONC(DIO_u8_PIN8,DIO_u8_PIN9,DIO_u8_PIN10,DIO_u8_PIN11,DIO_u8_PIN12,DIO_u8_PIN13,DIO_u8_PIN14,DIO_u8_PIN15);
    1774:	e8 e3       	ldi	r30, 0x38	; 56
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	10 82       	st	Z, r1
	PORTC = CONC(DIO_u8_PIN16,DIO_u8_PIN17,DIO_u8_PIN18,DIO_u8_PIN19,DIO_u8_PIN20,DIO_u8_PIN21,DIO_u8_PIN22,DIO_u8_PIN23);
    177a:	e5 e3       	ldi	r30, 0x35	; 53
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	10 82       	st	Z, r1
	PORTD = CONC(DIO_u8_PIN24,DIO_u8_PIN25,DIO_u8_PIN26,DIO_u8_PIN27,DIO_u8_PIN28,DIO_u8_PIN29,DIO_u8_PIN30,DIO_u8_PIN31);
    1780:	e2 e3       	ldi	r30, 0x32	; 50
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	10 82       	st	Z, r1

#define PIN_OUTPUT_HIGH             2
#define PIN_INPUT_PULL_UP           3
#define PIN_INPUT_FLOATING          4

}
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <setPinDirection>:

/*set pin direction*/
port_errorStatus setPinDirection(u8 pin_id, u8 direction)
{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	27 97       	sbiw	r28, 0x07	; 7
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	8c 83       	std	Y+4, r24	; 0x04
    17a2:	6d 83       	std	Y+5, r22	; 0x05
	port_errorStatus return_errorStatus = port_OK;
    17a4:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_pn;
	u8 loc_port;

	if(pin_id > NUM_OF_PINS)
    17a6:	8c 81       	ldd	r24, Y+4	; 0x04
    17a8:	80 32       	cpi	r24, 0x20	; 32
    17aa:	18 f0       	brcs	.+6      	; 0x17b2 <setPinDirection+0x26>
	{
		return_errorStatus = pinError;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	8b 83       	std	Y+3, r24	; 0x03
    17b0:	df c0       	rjmp	.+446    	; 0x1970 <setPinDirection+0x1e4>
	}
	else if(direction > NUM_OF_DIRECTION)
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	82 30       	cpi	r24, 0x02	; 2
    17b6:	18 f0       	brcs	.+6      	; 0x17be <setPinDirection+0x32>
	{
		return_errorStatus = pinDirectionError;
    17b8:	82 e0       	ldi	r24, 0x02	; 2
    17ba:	8b 83       	std	Y+3, r24	; 0x03
    17bc:	d9 c0       	rjmp	.+434    	; 0x1970 <setPinDirection+0x1e4>
	}
	else
	{
		loc_pn = pin_id % NUM_OF_PINS_PER_PORT;
    17be:	8c 81       	ldd	r24, Y+4	; 0x04
    17c0:	87 70       	andi	r24, 0x07	; 7
    17c2:	8a 83       	std	Y+2, r24	; 0x02
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
    17c4:	8c 81       	ldd	r24, Y+4	; 0x04
    17c6:	86 95       	lsr	r24
    17c8:	86 95       	lsr	r24
    17ca:	86 95       	lsr	r24
    17cc:	89 83       	std	Y+1, r24	; 0x01

		switch(loc_port)
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	3f 83       	std	Y+7, r19	; 0x07
    17d6:	2e 83       	std	Y+6, r18	; 0x06
    17d8:	8e 81       	ldd	r24, Y+6	; 0x06
    17da:	9f 81       	ldd	r25, Y+7	; 0x07
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	91 05       	cpc	r25, r1
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <setPinDirection+0x58>
    17e2:	43 c0       	rjmp	.+134    	; 0x186a <setPinDirection+0xde>
    17e4:	2e 81       	ldd	r18, Y+6	; 0x06
    17e6:	3f 81       	ldd	r19, Y+7	; 0x07
    17e8:	22 30       	cpi	r18, 0x02	; 2
    17ea:	31 05       	cpc	r19, r1
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <setPinDirection+0x6c>
    17ee:	8e 81       	ldd	r24, Y+6	; 0x06
    17f0:	9f 81       	ldd	r25, Y+7	; 0x07
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	71 f0       	breq	.+28     	; 0x1812 <setPinDirection+0x86>
    17f6:	bc c0       	rjmp	.+376    	; 0x1970 <setPinDirection+0x1e4>
    17f8:	2e 81       	ldd	r18, Y+6	; 0x06
    17fa:	3f 81       	ldd	r19, Y+7	; 0x07
    17fc:	22 30       	cpi	r18, 0x02	; 2
    17fe:	31 05       	cpc	r19, r1
    1800:	09 f4       	brne	.+2      	; 0x1804 <setPinDirection+0x78>
    1802:	5f c0       	rjmp	.+190    	; 0x18c2 <setPinDirection+0x136>
    1804:	8e 81       	ldd	r24, Y+6	; 0x06
    1806:	9f 81       	ldd	r25, Y+7	; 0x07
    1808:	83 30       	cpi	r24, 0x03	; 3
    180a:	91 05       	cpc	r25, r1
    180c:	09 f4       	brne	.+2      	; 0x1810 <setPinDirection+0x84>
    180e:	85 c0       	rjmp	.+266    	; 0x191a <setPinDirection+0x18e>
    1810:	af c0       	rjmp	.+350    	; 0x1970 <setPinDirection+0x1e4>
		{
		case PORT_PORTA:
			if (direction == PIN_OUTPUT_HIGH)
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	82 30       	cpi	r24, 0x02	; 2
    1816:	a1 f4       	brne	.+40     	; 0x1840 <setPinDirection+0xb4>
			{
				SET_BIT(DDRA, loc_pn);
    1818:	aa e3       	ldi	r26, 0x3A	; 58
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	ea e3       	ldi	r30, 0x3A	; 58
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	48 2f       	mov	r20, r24
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	02 2e       	mov	r0, r18
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <setPinDirection+0xaa>
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	0a 94       	dec	r0
    1838:	e2 f7       	brpl	.-8      	; 0x1832 <setPinDirection+0xa6>
    183a:	84 2b       	or	r24, r20
    183c:	8c 93       	st	X, r24
    183e:	98 c0       	rjmp	.+304    	; 0x1970 <setPinDirection+0x1e4>
			}
			else
			{
				CLEAR_BIT(DDRA, loc_pn);
    1840:	aa e3       	ldi	r26, 0x3A	; 58
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	ea e3       	ldi	r30, 0x3A	; 58
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	48 2f       	mov	r20, r24
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	02 2e       	mov	r0, r18
    1858:	02 c0       	rjmp	.+4      	; 0x185e <setPinDirection+0xd2>
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	0a 94       	dec	r0
    1860:	e2 f7       	brpl	.-8      	; 0x185a <setPinDirection+0xce>
    1862:	80 95       	com	r24
    1864:	84 23       	and	r24, r20
    1866:	8c 93       	st	X, r24
    1868:	83 c0       	rjmp	.+262    	; 0x1970 <setPinDirection+0x1e4>
			}
			break;

		case PORT_PORTB:
			if (direction == PIN_OUTPUT_HIGH)
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	82 30       	cpi	r24, 0x02	; 2
    186e:	a1 f4       	brne	.+40     	; 0x1898 <setPinDirection+0x10c>
			{
				SET_BIT(DDRB, loc_pn);
    1870:	a7 e3       	ldi	r26, 0x37	; 55
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e7 e3       	ldi	r30, 0x37	; 55
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	48 2f       	mov	r20, r24
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 2e       	mov	r0, r18
    1888:	02 c0       	rjmp	.+4      	; 0x188e <setPinDirection+0x102>
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	0a 94       	dec	r0
    1890:	e2 f7       	brpl	.-8      	; 0x188a <setPinDirection+0xfe>
    1892:	84 2b       	or	r24, r20
    1894:	8c 93       	st	X, r24
    1896:	6c c0       	rjmp	.+216    	; 0x1970 <setPinDirection+0x1e4>
			}
			else
			{
				CLEAR_BIT(DDRB, loc_pn);
    1898:	a7 e3       	ldi	r26, 0x37	; 55
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e7 e3       	ldi	r30, 0x37	; 55
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <setPinDirection+0x12a>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <setPinDirection+0x126>
    18ba:	80 95       	com	r24
    18bc:	84 23       	and	r24, r20
    18be:	8c 93       	st	X, r24
    18c0:	57 c0       	rjmp	.+174    	; 0x1970 <setPinDirection+0x1e4>
			}
			break;
		case PORT_PORTC:
			if (direction == PIN_OUTPUT_HIGH)
    18c2:	8d 81       	ldd	r24, Y+5	; 0x05
    18c4:	82 30       	cpi	r24, 0x02	; 2
    18c6:	a1 f4       	brne	.+40     	; 0x18f0 <setPinDirection+0x164>
			{
				SET_BIT(DDRC, loc_pn);
    18c8:	a4 e3       	ldi	r26, 0x34	; 52
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e4 e3       	ldi	r30, 0x34	; 52
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 2e       	mov	r0, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <setPinDirection+0x15a>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <setPinDirection+0x156>
    18ea:	84 2b       	or	r24, r20
    18ec:	8c 93       	st	X, r24
    18ee:	40 c0       	rjmp	.+128    	; 0x1970 <setPinDirection+0x1e4>
			}
			else
			{
				CLEAR_BIT(DDRC, loc_pn);
    18f0:	a4 e3       	ldi	r26, 0x34	; 52
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e4 e3       	ldi	r30, 0x34	; 52
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	48 2f       	mov	r20, r24
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	02 2e       	mov	r0, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <setPinDirection+0x182>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	0a 94       	dec	r0
    1910:	e2 f7       	brpl	.-8      	; 0x190a <setPinDirection+0x17e>
    1912:	80 95       	com	r24
    1914:	84 23       	and	r24, r20
    1916:	8c 93       	st	X, r24
    1918:	2b c0       	rjmp	.+86     	; 0x1970 <setPinDirection+0x1e4>
			}
			break;
		case PORT_PORTD:
			if (direction == PIN_OUTPUT_HIGH)
    191a:	8d 81       	ldd	r24, Y+5	; 0x05
    191c:	82 30       	cpi	r24, 0x02	; 2
    191e:	a1 f4       	brne	.+40     	; 0x1948 <setPinDirection+0x1bc>
			{
				SET_BIT(DDRD, loc_pn);
    1920:	a1 e3       	ldi	r26, 0x31	; 49
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e1 e3       	ldi	r30, 0x31	; 49
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	48 2f       	mov	r20, r24
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 2e       	mov	r0, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <setPinDirection+0x1b2>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	0a 94       	dec	r0
    1940:	e2 f7       	brpl	.-8      	; 0x193a <setPinDirection+0x1ae>
    1942:	84 2b       	or	r24, r20
    1944:	8c 93       	st	X, r24
    1946:	14 c0       	rjmp	.+40     	; 0x1970 <setPinDirection+0x1e4>
			}
			else
			{
				CLEAR_BIT(DDRD, loc_pn);
    1948:	a1 e3       	ldi	r26, 0x31	; 49
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e1 e3       	ldi	r30, 0x31	; 49
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	48 2f       	mov	r20, r24
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	02 2e       	mov	r0, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <setPinDirection+0x1da>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	0a 94       	dec	r0
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <setPinDirection+0x1d6>
    196a:	80 95       	com	r24
    196c:	84 23       	and	r24, r20
    196e:	8c 93       	st	X, r24
			}
			break;
		}
	}

		return return_errorStatus;
    1970:	8b 81       	ldd	r24, Y+3	; 0x03


}
    1972:	27 96       	adiw	r28, 0x07	; 7
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	de bf       	out	0x3e, r29	; 62
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	cd bf       	out	0x3d, r28	; 61
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <setMode>:
/*
*choose between four modes
*change the state of pin in specific time
* */
port_errorStatus setMode(u8 pin_id, u8 mode)
{
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	2f 97       	sbiw	r28, 0x0f	; 15
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	8c 83       	std	Y+4, r24	; 0x04
    199a:	6d 83       	std	Y+5, r22	; 0x05
	port_errorStatus return_errorStatus = port_OK;
    199c:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_port;

	u8 loc_pin;

	if(pin_id > NUM_OF_PINS)
    199e:	8c 81       	ldd	r24, Y+4	; 0x04
    19a0:	80 32       	cpi	r24, 0x20	; 32
    19a2:	18 f0       	brcs	.+6      	; 0x19aa <setMode+0x26>
	{
		return_errorStatus = pinError;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	8b 83       	std	Y+3, r24	; 0x03
    19a8:	27 c3       	rjmp	.+1614   	; 0x1ff8 <setMode+0x674>
	}
	else if(mode > NUM_OF_MODES)
    19aa:	8d 81       	ldd	r24, Y+5	; 0x05
    19ac:	84 30       	cpi	r24, 0x04	; 4
    19ae:	18 f0       	brcs	.+6      	; 0x19b6 <setMode+0x32>
	{
		return_errorStatus = pinDirectionError;
    19b0:	82 e0       	ldi	r24, 0x02	; 2
    19b2:	8b 83       	std	Y+3, r24	; 0x03
    19b4:	21 c3       	rjmp	.+1602   	; 0x1ff8 <setMode+0x674>
	}
	else
	{
		loc_pin = pin_id % NUM_OF_PINS_PER_PORT;
    19b6:	8c 81       	ldd	r24, Y+4	; 0x04
    19b8:	87 70       	andi	r24, 0x07	; 7
    19ba:	89 83       	std	Y+1, r24	; 0x01
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
    19bc:	8c 81       	ldd	r24, Y+4	; 0x04
    19be:	86 95       	lsr	r24
    19c0:	86 95       	lsr	r24
    19c2:	86 95       	lsr	r24
    19c4:	8a 83       	std	Y+2, r24	; 0x02

		switch(loc_port)
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	3f 87       	std	Y+15, r19	; 0x0f
    19ce:	2e 87       	std	Y+14, r18	; 0x0e
    19d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    19d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    19d4:	81 30       	cpi	r24, 0x01	; 1
    19d6:	91 05       	cpc	r25, r1
    19d8:	09 f4       	brne	.+2      	; 0x19dc <setMode+0x58>
    19da:	d5 c0       	rjmp	.+426    	; 0x1b86 <setMode+0x202>
    19dc:	2e 85       	ldd	r18, Y+14	; 0x0e
    19de:	3f 85       	ldd	r19, Y+15	; 0x0f
    19e0:	22 30       	cpi	r18, 0x02	; 2
    19e2:	31 05       	cpc	r19, r1
    19e4:	2c f4       	brge	.+10     	; 0x19f0 <setMode+0x6c>
    19e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    19e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	71 f0       	breq	.+28     	; 0x1a0a <setMode+0x86>
    19ee:	04 c3       	rjmp	.+1544   	; 0x1ff8 <setMode+0x674>
    19f0:	2e 85       	ldd	r18, Y+14	; 0x0e
    19f2:	3f 85       	ldd	r19, Y+15	; 0x0f
    19f4:	22 30       	cpi	r18, 0x02	; 2
    19f6:	31 05       	cpc	r19, r1
    19f8:	09 f4       	brne	.+2      	; 0x19fc <setMode+0x78>
    19fa:	83 c1       	rjmp	.+774    	; 0x1d02 <setMode+0x37e>
    19fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    19fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a00:	83 30       	cpi	r24, 0x03	; 3
    1a02:	91 05       	cpc	r25, r1
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <setMode+0x84>
    1a06:	3b c2       	rjmp	.+1142   	; 0x1e7e <setMode+0x4fa>
    1a08:	f7 c2       	rjmp	.+1518   	; 0x1ff8 <setMode+0x674>
		{

		case PORT_PORTA:

			switch (mode)
    1a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	3d 87       	std	Y+13, r19	; 0x0d
    1a12:	2c 87       	std	Y+12, r18	; 0x0c
    1a14:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a16:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a18:	82 30       	cpi	r24, 0x02	; 2
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <setMode+0x9c>
    1a1e:	3e c0       	rjmp	.+124    	; 0x1a9c <setMode+0x118>
    1a20:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a22:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a24:	23 30       	cpi	r18, 0x03	; 3
    1a26:	31 05       	cpc	r19, r1
    1a28:	2c f4       	brge	.+10     	; 0x1a34 <setMode+0xb0>
    1a2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a2c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	71 f0       	breq	.+28     	; 0x1a4e <setMode+0xca>
    1a32:	e2 c2       	rjmp	.+1476   	; 0x1ff8 <setMode+0x674>
    1a34:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a36:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a38:	23 30       	cpi	r18, 0x03	; 3
    1a3a:	31 05       	cpc	r19, r1
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <setMode+0xbc>
    1a3e:	7c c0       	rjmp	.+248    	; 0x1b38 <setMode+0x1b4>
    1a40:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a42:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a44:	84 30       	cpi	r24, 0x04	; 4
    1a46:	91 05       	cpc	r25, r1
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <setMode+0xc8>
    1a4a:	4e c0       	rjmp	.+156    	; 0x1ae8 <setMode+0x164>
    1a4c:	d5 c2       	rjmp	.+1450   	; 0x1ff8 <setMode+0x674>
			{

			case PIN_OUTPUT_LOW:

				SET_BIT(DDRA, loc_pin);
    1a4e:	aa e3       	ldi	r26, 0x3A	; 58
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	ea e3       	ldi	r30, 0x3A	; 58
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	48 2f       	mov	r20, r24
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <setMode+0xe6>
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	2a 95       	dec	r18
    1a6c:	e2 f7       	brpl	.-8      	; 0x1a66 <setMode+0xe2>
    1a6e:	84 2b       	or	r24, r20
    1a70:	8c 93       	st	X, r24

				CLEAR_BIT(PORTA, loc_pin);
    1a72:	ab e3       	ldi	r26, 0x3B	; 59
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	eb e3       	ldi	r30, 0x3B	; 59
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	48 2f       	mov	r20, r24
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	02 2e       	mov	r0, r18
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <setMode+0x10c>
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	0a 94       	dec	r0
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <setMode+0x108>
    1a94:	80 95       	com	r24
    1a96:	84 23       	and	r24, r20
    1a98:	8c 93       	st	X, r24
    1a9a:	ae c2       	rjmp	.+1372   	; 0x1ff8 <setMode+0x674>

				break;

			case PIN_OUTPUT_HIGH:

				SET_BIT(DDRA, loc_pin);
    1a9c:	aa e3       	ldi	r26, 0x3A	; 58
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	ea e3       	ldi	r30, 0x3A	; 58
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	48 2f       	mov	r20, r24
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <setMode+0x134>
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	2a 95       	dec	r18
    1aba:	e2 f7       	brpl	.-8      	; 0x1ab4 <setMode+0x130>
    1abc:	84 2b       	or	r24, r20
    1abe:	8c 93       	st	X, r24

				SET_BIT(PORTA, loc_pin);
    1ac0:	ab e3       	ldi	r26, 0x3B	; 59
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	eb e3       	ldi	r30, 0x3B	; 59
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	48 2f       	mov	r20, r24
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	02 2e       	mov	r0, r18
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <setMode+0x15a>
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	0a 94       	dec	r0
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <setMode+0x156>
    1ae2:	84 2b       	or	r24, r20
    1ae4:	8c 93       	st	X, r24
    1ae6:	88 c2       	rjmp	.+1296   	; 0x1ff8 <setMode+0x674>

				break;

			case PIN_INPUT_FLOATING:

				CLEAR_BIT(DDRA, loc_pin);
    1ae8:	aa e3       	ldi	r26, 0x3A	; 58
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	ea e3       	ldi	r30, 0x3A	; 58
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	48 2f       	mov	r20, r24
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <setMode+0x180>
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	2a 95       	dec	r18
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <setMode+0x17c>
    1b08:	80 95       	com	r24
    1b0a:	84 23       	and	r24, r20
    1b0c:	8c 93       	st	X, r24

				CLEAR_BIT(PORTA, loc_pin);
    1b0e:	ab e3       	ldi	r26, 0x3B	; 59
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	eb e3       	ldi	r30, 0x3B	; 59
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	48 2f       	mov	r20, r24
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	02 2e       	mov	r0, r18
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <setMode+0x1a8>
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	0a 94       	dec	r0
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <setMode+0x1a4>
    1b30:	80 95       	com	r24
    1b32:	84 23       	and	r24, r20
    1b34:	8c 93       	st	X, r24
    1b36:	60 c2       	rjmp	.+1216   	; 0x1ff8 <setMode+0x674>

				break;

			case PIN_INPUT_PULL_UP:

				CLEAR_BIT(DDRA, loc_pin);
    1b38:	aa e3       	ldi	r26, 0x3A	; 58
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	ea e3       	ldi	r30, 0x3A	; 58
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	48 2f       	mov	r20, r24
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <setMode+0x1d0>
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	2a 95       	dec	r18
    1b56:	e2 f7       	brpl	.-8      	; 0x1b50 <setMode+0x1cc>
    1b58:	80 95       	com	r24
    1b5a:	84 23       	and	r24, r20
    1b5c:	8c 93       	st	X, r24

				SET_BIT(PORTA, loc_pin);
    1b5e:	ab e3       	ldi	r26, 0x3B	; 59
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	eb e3       	ldi	r30, 0x3B	; 59
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	48 2f       	mov	r20, r24
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	02 2e       	mov	r0, r18
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <setMode+0x1f8>
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	0a 94       	dec	r0
    1b7e:	e2 f7       	brpl	.-8      	; 0x1b78 <setMode+0x1f4>
    1b80:	84 2b       	or	r24, r20
    1b82:	8c 93       	st	X, r24
    1b84:	39 c2       	rjmp	.+1138   	; 0x1ff8 <setMode+0x674>
			}
			break;

		case PORT_PORTB:

			switch (mode)
    1b86:	8d 81       	ldd	r24, Y+5	; 0x05
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	3b 87       	std	Y+11, r19	; 0x0b
    1b8e:	2a 87       	std	Y+10, r18	; 0x0a
    1b90:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b92:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b94:	82 30       	cpi	r24, 0x02	; 2
    1b96:	91 05       	cpc	r25, r1
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <setMode+0x218>
    1b9a:	3e c0       	rjmp	.+124    	; 0x1c18 <setMode+0x294>
    1b9c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b9e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ba0:	23 30       	cpi	r18, 0x03	; 3
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	2c f4       	brge	.+10     	; 0x1bb0 <setMode+0x22c>
    1ba6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ba8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	71 f0       	breq	.+28     	; 0x1bca <setMode+0x246>
    1bae:	24 c2       	rjmp	.+1096   	; 0x1ff8 <setMode+0x674>
    1bb0:	2a 85       	ldd	r18, Y+10	; 0x0a
    1bb2:	3b 85       	ldd	r19, Y+11	; 0x0b
    1bb4:	23 30       	cpi	r18, 0x03	; 3
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <setMode+0x238>
    1bba:	7c c0       	rjmp	.+248    	; 0x1cb4 <setMode+0x330>
    1bbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bbe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bc0:	84 30       	cpi	r24, 0x04	; 4
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <setMode+0x244>
    1bc6:	4e c0       	rjmp	.+156    	; 0x1c64 <setMode+0x2e0>
    1bc8:	17 c2       	rjmp	.+1070   	; 0x1ff8 <setMode+0x674>
			{

			case PIN_OUTPUT_LOW:

				SET_BIT(DDRB, loc_pin);
    1bca:	a7 e3       	ldi	r26, 0x37	; 55
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e7 e3       	ldi	r30, 0x37	; 55
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	48 2f       	mov	r20, r24
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <setMode+0x262>
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	2a 95       	dec	r18
    1be8:	e2 f7       	brpl	.-8      	; 0x1be2 <setMode+0x25e>
    1bea:	84 2b       	or	r24, r20
    1bec:	8c 93       	st	X, r24

				CLEAR_BIT(PORTB, loc_pin);
    1bee:	a8 e3       	ldi	r26, 0x38	; 56
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e8 e3       	ldi	r30, 0x38	; 56
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	48 2f       	mov	r20, r24
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 2e       	mov	r0, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <setMode+0x288>
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	0a 94       	dec	r0
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <setMode+0x284>
    1c10:	80 95       	com	r24
    1c12:	84 23       	and	r24, r20
    1c14:	8c 93       	st	X, r24
    1c16:	f0 c1       	rjmp	.+992    	; 0x1ff8 <setMode+0x674>

				break;

			case PIN_OUTPUT_HIGH:

				SET_BIT(DDRB, loc_pin);
    1c18:	a7 e3       	ldi	r26, 0x37	; 55
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e7 e3       	ldi	r30, 0x37	; 55
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <setMode+0x2b0>
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	2a 95       	dec	r18
    1c36:	e2 f7       	brpl	.-8      	; 0x1c30 <setMode+0x2ac>
    1c38:	84 2b       	or	r24, r20
    1c3a:	8c 93       	st	X, r24

				SET_BIT(PORTB, loc_pin);
    1c3c:	a8 e3       	ldi	r26, 0x38	; 56
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e8 e3       	ldi	r30, 0x38	; 56
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	48 2f       	mov	r20, r24
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 2e       	mov	r0, r18
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <setMode+0x2d6>
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	0a 94       	dec	r0
    1c5c:	e2 f7       	brpl	.-8      	; 0x1c56 <setMode+0x2d2>
    1c5e:	84 2b       	or	r24, r20
    1c60:	8c 93       	st	X, r24
    1c62:	ca c1       	rjmp	.+916    	; 0x1ff8 <setMode+0x674>

				break;

			case PIN_INPUT_FLOATING:

				CLEAR_BIT(DDRB, loc_pin);
    1c64:	a7 e3       	ldi	r26, 0x37	; 55
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e7 e3       	ldi	r30, 0x37	; 55
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	48 2f       	mov	r20, r24
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <setMode+0x2fc>
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	2a 95       	dec	r18
    1c82:	e2 f7       	brpl	.-8      	; 0x1c7c <setMode+0x2f8>
    1c84:	80 95       	com	r24
    1c86:	84 23       	and	r24, r20
    1c88:	8c 93       	st	X, r24

				CLEAR_BIT(PORTB, loc_pin);
    1c8a:	a8 e3       	ldi	r26, 0x38	; 56
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e8 e3       	ldi	r30, 0x38	; 56
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	48 2f       	mov	r20, r24
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	02 2e       	mov	r0, r18
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <setMode+0x324>
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	0a 94       	dec	r0
    1caa:	e2 f7       	brpl	.-8      	; 0x1ca4 <setMode+0x320>
    1cac:	80 95       	com	r24
    1cae:	84 23       	and	r24, r20
    1cb0:	8c 93       	st	X, r24
    1cb2:	a2 c1       	rjmp	.+836    	; 0x1ff8 <setMode+0x674>

				break;

			case PIN_INPUT_PULL_UP:

				CLEAR_BIT(DDRB, loc_pin);
    1cb4:	a7 e3       	ldi	r26, 0x37	; 55
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e7 e3       	ldi	r30, 0x37	; 55
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	48 2f       	mov	r20, r24
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <setMode+0x34c>
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	2a 95       	dec	r18
    1cd2:	e2 f7       	brpl	.-8      	; 0x1ccc <setMode+0x348>
    1cd4:	80 95       	com	r24
    1cd6:	84 23       	and	r24, r20
    1cd8:	8c 93       	st	X, r24

				SET_BIT(PORTB, loc_pin);
    1cda:	a8 e3       	ldi	r26, 0x38	; 56
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	e8 e3       	ldi	r30, 0x38	; 56
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	48 2f       	mov	r20, r24
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	02 2e       	mov	r0, r18
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <setMode+0x374>
    1cf4:	88 0f       	add	r24, r24
    1cf6:	99 1f       	adc	r25, r25
    1cf8:	0a 94       	dec	r0
    1cfa:	e2 f7       	brpl	.-8      	; 0x1cf4 <setMode+0x370>
    1cfc:	84 2b       	or	r24, r20
    1cfe:	8c 93       	st	X, r24
    1d00:	7b c1       	rjmp	.+758    	; 0x1ff8 <setMode+0x674>
			break;


		case PORT_PORTC:

			switch (mode)
    1d02:	8d 81       	ldd	r24, Y+5	; 0x05
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	39 87       	std	Y+9, r19	; 0x09
    1d0a:	28 87       	std	Y+8, r18	; 0x08
    1d0c:	88 85       	ldd	r24, Y+8	; 0x08
    1d0e:	99 85       	ldd	r25, Y+9	; 0x09
    1d10:	82 30       	cpi	r24, 0x02	; 2
    1d12:	91 05       	cpc	r25, r1
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <setMode+0x394>
    1d16:	3e c0       	rjmp	.+124    	; 0x1d94 <setMode+0x410>
    1d18:	28 85       	ldd	r18, Y+8	; 0x08
    1d1a:	39 85       	ldd	r19, Y+9	; 0x09
    1d1c:	23 30       	cpi	r18, 0x03	; 3
    1d1e:	31 05       	cpc	r19, r1
    1d20:	2c f4       	brge	.+10     	; 0x1d2c <setMode+0x3a8>
    1d22:	88 85       	ldd	r24, Y+8	; 0x08
    1d24:	99 85       	ldd	r25, Y+9	; 0x09
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	71 f0       	breq	.+28     	; 0x1d46 <setMode+0x3c2>
    1d2a:	66 c1       	rjmp	.+716    	; 0x1ff8 <setMode+0x674>
    1d2c:	28 85       	ldd	r18, Y+8	; 0x08
    1d2e:	39 85       	ldd	r19, Y+9	; 0x09
    1d30:	23 30       	cpi	r18, 0x03	; 3
    1d32:	31 05       	cpc	r19, r1
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <setMode+0x3b4>
    1d36:	7c c0       	rjmp	.+248    	; 0x1e30 <setMode+0x4ac>
    1d38:	88 85       	ldd	r24, Y+8	; 0x08
    1d3a:	99 85       	ldd	r25, Y+9	; 0x09
    1d3c:	84 30       	cpi	r24, 0x04	; 4
    1d3e:	91 05       	cpc	r25, r1
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <setMode+0x3c0>
    1d42:	4e c0       	rjmp	.+156    	; 0x1de0 <setMode+0x45c>
    1d44:	59 c1       	rjmp	.+690    	; 0x1ff8 <setMode+0x674>
			{

			case PIN_OUTPUT_LOW:

				SET_BIT(DDRC, loc_pin);
    1d46:	a4 e3       	ldi	r26, 0x34	; 52
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e4 e3       	ldi	r30, 0x34	; 52
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	48 2f       	mov	r20, r24
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <setMode+0x3de>
    1d5e:	88 0f       	add	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	2a 95       	dec	r18
    1d64:	e2 f7       	brpl	.-8      	; 0x1d5e <setMode+0x3da>
    1d66:	84 2b       	or	r24, r20
    1d68:	8c 93       	st	X, r24

				CLEAR_BIT(PORTC, loc_pin);
    1d6a:	a5 e3       	ldi	r26, 0x35	; 53
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e5 e3       	ldi	r30, 0x35	; 53
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	48 2f       	mov	r20, r24
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	02 2e       	mov	r0, r18
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <setMode+0x404>
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	0a 94       	dec	r0
    1d8a:	e2 f7       	brpl	.-8      	; 0x1d84 <setMode+0x400>
    1d8c:	80 95       	com	r24
    1d8e:	84 23       	and	r24, r20
    1d90:	8c 93       	st	X, r24
    1d92:	32 c1       	rjmp	.+612    	; 0x1ff8 <setMode+0x674>

				break;

			case PIN_OUTPUT_HIGH:

				SET_BIT(DDRC, loc_pin);
    1d94:	a4 e3       	ldi	r26, 0x34	; 52
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e4 e3       	ldi	r30, 0x34	; 52
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	48 2f       	mov	r20, r24
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <setMode+0x42c>
    1dac:	88 0f       	add	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	2a 95       	dec	r18
    1db2:	e2 f7       	brpl	.-8      	; 0x1dac <setMode+0x428>
    1db4:	84 2b       	or	r24, r20
    1db6:	8c 93       	st	X, r24

				SET_BIT(PORTC, loc_pin);
    1db8:	a5 e3       	ldi	r26, 0x35	; 53
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e5 e3       	ldi	r30, 0x35	; 53
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	48 2f       	mov	r20, r24
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	02 2e       	mov	r0, r18
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <setMode+0x452>
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	0a 94       	dec	r0
    1dd8:	e2 f7       	brpl	.-8      	; 0x1dd2 <setMode+0x44e>
    1dda:	84 2b       	or	r24, r20
    1ddc:	8c 93       	st	X, r24
    1dde:	0c c1       	rjmp	.+536    	; 0x1ff8 <setMode+0x674>

				break;

			case PIN_INPUT_FLOATING:

				CLEAR_BIT(DDRC, loc_pin);
    1de0:	a4 e3       	ldi	r26, 0x34	; 52
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e4 e3       	ldi	r30, 0x34	; 52
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	48 2f       	mov	r20, r24
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <setMode+0x478>
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	2a 95       	dec	r18
    1dfe:	e2 f7       	brpl	.-8      	; 0x1df8 <setMode+0x474>
    1e00:	80 95       	com	r24
    1e02:	84 23       	and	r24, r20
    1e04:	8c 93       	st	X, r24

				CLEAR_BIT(PORTC, loc_pin);
    1e06:	a5 e3       	ldi	r26, 0x35	; 53
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e5 e3       	ldi	r30, 0x35	; 53
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	48 2f       	mov	r20, r24
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	02 2e       	mov	r0, r18
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <setMode+0x4a0>
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	0a 94       	dec	r0
    1e26:	e2 f7       	brpl	.-8      	; 0x1e20 <setMode+0x49c>
    1e28:	80 95       	com	r24
    1e2a:	84 23       	and	r24, r20
    1e2c:	8c 93       	st	X, r24
    1e2e:	e4 c0       	rjmp	.+456    	; 0x1ff8 <setMode+0x674>

				break;

			case PIN_INPUT_PULL_UP:

				CLEAR_BIT(DDRC, loc_pin);
    1e30:	a4 e3       	ldi	r26, 0x34	; 52
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e4 e3       	ldi	r30, 0x34	; 52
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	48 2f       	mov	r20, r24
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <setMode+0x4c8>
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	2a 95       	dec	r18
    1e4e:	e2 f7       	brpl	.-8      	; 0x1e48 <setMode+0x4c4>
    1e50:	80 95       	com	r24
    1e52:	84 23       	and	r24, r20
    1e54:	8c 93       	st	X, r24

				SET_BIT(PORTC, loc_pin);
    1e56:	a5 e3       	ldi	r26, 0x35	; 53
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e5 e3       	ldi	r30, 0x35	; 53
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	48 2f       	mov	r20, r24
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	02 2e       	mov	r0, r18
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <setMode+0x4f0>
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	0a 94       	dec	r0
    1e76:	e2 f7       	brpl	.-8      	; 0x1e70 <setMode+0x4ec>
    1e78:	84 2b       	or	r24, r20
    1e7a:	8c 93       	st	X, r24
    1e7c:	bd c0       	rjmp	.+378    	; 0x1ff8 <setMode+0x674>



		case PORT_PORTD:

			switch (mode)
    1e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e80:	28 2f       	mov	r18, r24
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	3f 83       	std	Y+7, r19	; 0x07
    1e86:	2e 83       	std	Y+6, r18	; 0x06
    1e88:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e8c:	82 30       	cpi	r24, 0x02	; 2
    1e8e:	91 05       	cpc	r25, r1
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <setMode+0x510>
    1e92:	3e c0       	rjmp	.+124    	; 0x1f10 <setMode+0x58c>
    1e94:	2e 81       	ldd	r18, Y+6	; 0x06
    1e96:	3f 81       	ldd	r19, Y+7	; 0x07
    1e98:	23 30       	cpi	r18, 0x03	; 3
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	2c f4       	brge	.+10     	; 0x1ea8 <setMode+0x524>
    1e9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	71 f0       	breq	.+28     	; 0x1ec2 <setMode+0x53e>
    1ea6:	a8 c0       	rjmp	.+336    	; 0x1ff8 <setMode+0x674>
    1ea8:	2e 81       	ldd	r18, Y+6	; 0x06
    1eaa:	3f 81       	ldd	r19, Y+7	; 0x07
    1eac:	23 30       	cpi	r18, 0x03	; 3
    1eae:	31 05       	cpc	r19, r1
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <setMode+0x530>
    1eb2:	7c c0       	rjmp	.+248    	; 0x1fac <setMode+0x628>
    1eb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1eb8:	84 30       	cpi	r24, 0x04	; 4
    1eba:	91 05       	cpc	r25, r1
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <setMode+0x53c>
    1ebe:	4e c0       	rjmp	.+156    	; 0x1f5c <setMode+0x5d8>
    1ec0:	9b c0       	rjmp	.+310    	; 0x1ff8 <setMode+0x674>
			{

			case PIN_OUTPUT_LOW:

				SET_BIT(DDRD, loc_pin);
    1ec2:	a1 e3       	ldi	r26, 0x31	; 49
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e1 e3       	ldi	r30, 0x31	; 49
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	48 2f       	mov	r20, r24
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <setMode+0x55a>
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	2a 95       	dec	r18
    1ee0:	e2 f7       	brpl	.-8      	; 0x1eda <setMode+0x556>
    1ee2:	84 2b       	or	r24, r20
    1ee4:	8c 93       	st	X, r24

				CLEAR_BIT(PORTD, loc_pin);
    1ee6:	a2 e3       	ldi	r26, 0x32	; 50
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e2 e3       	ldi	r30, 0x32	; 50
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	48 2f       	mov	r20, r24
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	02 2e       	mov	r0, r18
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <setMode+0x580>
    1f00:	88 0f       	add	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	0a 94       	dec	r0
    1f06:	e2 f7       	brpl	.-8      	; 0x1f00 <setMode+0x57c>
    1f08:	80 95       	com	r24
    1f0a:	84 23       	and	r24, r20
    1f0c:	8c 93       	st	X, r24
    1f0e:	74 c0       	rjmp	.+232    	; 0x1ff8 <setMode+0x674>

				break;

			case PIN_OUTPUT_HIGH:

				SET_BIT(DDRD, loc_pin);
    1f10:	a1 e3       	ldi	r26, 0x31	; 49
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e1 e3       	ldi	r30, 0x31	; 49
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	48 2f       	mov	r20, r24
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <setMode+0x5a8>
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	2a 95       	dec	r18
    1f2e:	e2 f7       	brpl	.-8      	; 0x1f28 <setMode+0x5a4>
    1f30:	84 2b       	or	r24, r20
    1f32:	8c 93       	st	X, r24

				SET_BIT(PORTD, loc_pin);
    1f34:	a2 e3       	ldi	r26, 0x32	; 50
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e2 e3       	ldi	r30, 0x32	; 50
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	48 2f       	mov	r20, r24
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	28 2f       	mov	r18, r24
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	02 2e       	mov	r0, r18
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <setMode+0x5ce>
    1f4e:	88 0f       	add	r24, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	0a 94       	dec	r0
    1f54:	e2 f7       	brpl	.-8      	; 0x1f4e <setMode+0x5ca>
    1f56:	84 2b       	or	r24, r20
    1f58:	8c 93       	st	X, r24
    1f5a:	4e c0       	rjmp	.+156    	; 0x1ff8 <setMode+0x674>

				break;

			case PIN_INPUT_FLOATING:

				CLEAR_BIT(DDRD, loc_pin);
    1f5c:	a1 e3       	ldi	r26, 0x31	; 49
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e1 e3       	ldi	r30, 0x31	; 49
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	48 2f       	mov	r20, r24
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <setMode+0x5f4>
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	2a 95       	dec	r18
    1f7a:	e2 f7       	brpl	.-8      	; 0x1f74 <setMode+0x5f0>
    1f7c:	80 95       	com	r24
    1f7e:	84 23       	and	r24, r20
    1f80:	8c 93       	st	X, r24

				CLEAR_BIT(PORTD, loc_pin);
    1f82:	a2 e3       	ldi	r26, 0x32	; 50
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e2 e3       	ldi	r30, 0x32	; 50
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	48 2f       	mov	r20, r24
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	02 2e       	mov	r0, r18
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <setMode+0x61c>
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	0a 94       	dec	r0
    1fa2:	e2 f7       	brpl	.-8      	; 0x1f9c <setMode+0x618>
    1fa4:	80 95       	com	r24
    1fa6:	84 23       	and	r24, r20
    1fa8:	8c 93       	st	X, r24
    1faa:	26 c0       	rjmp	.+76     	; 0x1ff8 <setMode+0x674>

				break;

			case PIN_INPUT_PULL_UP:

				CLEAR_BIT(DDRD, loc_pin);
    1fac:	a1 e3       	ldi	r26, 0x31	; 49
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e1 e3       	ldi	r30, 0x31	; 49
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	48 2f       	mov	r20, r24
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <setMode+0x644>
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	2a 95       	dec	r18
    1fca:	e2 f7       	brpl	.-8      	; 0x1fc4 <setMode+0x640>
    1fcc:	80 95       	com	r24
    1fce:	84 23       	and	r24, r20
    1fd0:	8c 93       	st	X, r24

				SET_BIT(PORTD, loc_pin);
    1fd2:	a2 e3       	ldi	r26, 0x32	; 50
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e2 e3       	ldi	r30, 0x32	; 50
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	48 2f       	mov	r20, r24
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	02 2e       	mov	r0, r18
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <setMode+0x66c>
    1fec:	88 0f       	add	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	0a 94       	dec	r0
    1ff2:	e2 f7       	brpl	.-8      	; 0x1fec <setMode+0x668>
    1ff4:	84 2b       	or	r24, r20
    1ff6:	8c 93       	st	X, r24


		}
	}

	return return_errorStatus;
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1ffa:	2f 96       	adiw	r28, 0x0f	; 15
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	de bf       	out	0x3e, r29	; 62
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	cd bf       	out	0x3d, r28	; 61
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <SevenSegment_Display>:
 */
#include"sevenSeg.h"
#include"sevenSeg_cfg.h"

void SevenSegment_Display(u8 number)
{
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	00 d0       	rcall	.+0      	; 0x2012 <SevenSegment_Display+0x6>
    2012:	0f 92       	push	r0
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	89 83       	std	Y+1, r24	; 0x01
#if(DECODER_USE == TRUE)
	DISPLAY_DECODER(SEVENSEG_PORT,number);
#else

		switch(number)
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	3b 83       	std	Y+3, r19	; 0x03
    2022:	2a 83       	std	Y+2, r18	; 0x02
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	9b 81       	ldd	r25, Y+3	; 0x03
    2028:	84 30       	cpi	r24, 0x04	; 4
    202a:	91 05       	cpc	r25, r1
    202c:	09 f4       	brne	.+2      	; 0x2030 <SevenSegment_Display+0x24>
    202e:	55 c0       	rjmp	.+170    	; 0x20da <SevenSegment_Display+0xce>
    2030:	2a 81       	ldd	r18, Y+2	; 0x02
    2032:	3b 81       	ldd	r19, Y+3	; 0x03
    2034:	25 30       	cpi	r18, 0x05	; 5
    2036:	31 05       	cpc	r19, r1
    2038:	dc f4       	brge	.+54     	; 0x2070 <SevenSegment_Display+0x64>
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	9b 81       	ldd	r25, Y+3	; 0x03
    203e:	81 30       	cpi	r24, 0x01	; 1
    2040:	91 05       	cpc	r25, r1
    2042:	09 f4       	brne	.+2      	; 0x2046 <SevenSegment_Display+0x3a>
    2044:	3b c0       	rjmp	.+118    	; 0x20bc <SevenSegment_Display+0xb0>
    2046:	2a 81       	ldd	r18, Y+2	; 0x02
    2048:	3b 81       	ldd	r19, Y+3	; 0x03
    204a:	22 30       	cpi	r18, 0x02	; 2
    204c:	31 05       	cpc	r19, r1
    204e:	2c f4       	brge	.+10     	; 0x205a <SevenSegment_Display+0x4e>
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	9b 81       	ldd	r25, Y+3	; 0x03
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	69 f1       	breq	.+90     	; 0x20b2 <SevenSegment_Display+0xa6>
    2058:	5d c0       	rjmp	.+186    	; 0x2114 <SevenSegment_Display+0x108>
    205a:	2a 81       	ldd	r18, Y+2	; 0x02
    205c:	3b 81       	ldd	r19, Y+3	; 0x03
    205e:	22 30       	cpi	r18, 0x02	; 2
    2060:	31 05       	cpc	r19, r1
    2062:	89 f1       	breq	.+98     	; 0x20c6 <SevenSegment_Display+0xba>
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	9b 81       	ldd	r25, Y+3	; 0x03
    2068:	83 30       	cpi	r24, 0x03	; 3
    206a:	91 05       	cpc	r25, r1
    206c:	89 f1       	breq	.+98     	; 0x20d0 <SevenSegment_Display+0xc4>
    206e:	52 c0       	rjmp	.+164    	; 0x2114 <SevenSegment_Display+0x108>
    2070:	2a 81       	ldd	r18, Y+2	; 0x02
    2072:	3b 81       	ldd	r19, Y+3	; 0x03
    2074:	27 30       	cpi	r18, 0x07	; 7
    2076:	31 05       	cpc	r19, r1
    2078:	09 f4       	brne	.+2      	; 0x207c <SevenSegment_Display+0x70>
    207a:	3e c0       	rjmp	.+124    	; 0x20f8 <SevenSegment_Display+0xec>
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	9b 81       	ldd	r25, Y+3	; 0x03
    2080:	88 30       	cpi	r24, 0x08	; 8
    2082:	91 05       	cpc	r25, r1
    2084:	5c f4       	brge	.+22     	; 0x209c <SevenSegment_Display+0x90>
    2086:	2a 81       	ldd	r18, Y+2	; 0x02
    2088:	3b 81       	ldd	r19, Y+3	; 0x03
    208a:	25 30       	cpi	r18, 0x05	; 5
    208c:	31 05       	cpc	r19, r1
    208e:	51 f1       	breq	.+84     	; 0x20e4 <SevenSegment_Display+0xd8>
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	9b 81       	ldd	r25, Y+3	; 0x03
    2094:	86 30       	cpi	r24, 0x06	; 6
    2096:	91 05       	cpc	r25, r1
    2098:	51 f1       	breq	.+84     	; 0x20ee <SevenSegment_Display+0xe2>
    209a:	3c c0       	rjmp	.+120    	; 0x2114 <SevenSegment_Display+0x108>
    209c:	2a 81       	ldd	r18, Y+2	; 0x02
    209e:	3b 81       	ldd	r19, Y+3	; 0x03
    20a0:	28 30       	cpi	r18, 0x08	; 8
    20a2:	31 05       	cpc	r19, r1
    20a4:	71 f1       	breq	.+92     	; 0x2102 <SevenSegment_Display+0xf6>
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	9b 81       	ldd	r25, Y+3	; 0x03
    20aa:	89 30       	cpi	r24, 0x09	; 9
    20ac:	91 05       	cpc	r25, r1
    20ae:	71 f1       	breq	.+92     	; 0x210c <SevenSegment_Display+0x100>
    20b0:	31 c0       	rjmp	.+98     	; 0x2114 <SevenSegment_Display+0x108>
		{
		case 0:
			SEVENSEG_PORT = SEVENSEG_ZERO;
    20b2:	eb e3       	ldi	r30, 0x3B	; 59
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	8e e7       	ldi	r24, 0x7E	; 126
    20b8:	80 83       	st	Z, r24
    20ba:	2c c0       	rjmp	.+88     	; 0x2114 <SevenSegment_Display+0x108>
			break;
		case 1:
			SEVENSEG_PORT = SEVENSEG_ONE;
    20bc:	eb e3       	ldi	r30, 0x3B	; 59
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	8c e0       	ldi	r24, 0x0C	; 12
    20c2:	80 83       	st	Z, r24
    20c4:	27 c0       	rjmp	.+78     	; 0x2114 <SevenSegment_Display+0x108>
			break;
		case 2:
			SEVENSEG_PORT = SEVENSEG_TWO;
    20c6:	eb e3       	ldi	r30, 0x3B	; 59
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	86 eb       	ldi	r24, 0xB6	; 182
    20cc:	80 83       	st	Z, r24
    20ce:	22 c0       	rjmp	.+68     	; 0x2114 <SevenSegment_Display+0x108>
			break;
		case 3:
			SEVENSEG_PORT = SEVENSEG_THREE;
    20d0:	eb e3       	ldi	r30, 0x3B	; 59
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	8e e9       	ldi	r24, 0x9E	; 158
    20d6:	80 83       	st	Z, r24
    20d8:	1d c0       	rjmp	.+58     	; 0x2114 <SevenSegment_Display+0x108>
			break;
		case 4:
			SEVENSEG_PORT = SEVENSEG_FOUR;
    20da:	eb e3       	ldi	r30, 0x3B	; 59
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	8c ec       	ldi	r24, 0xCC	; 204
    20e0:	80 83       	st	Z, r24
    20e2:	18 c0       	rjmp	.+48     	; 0x2114 <SevenSegment_Display+0x108>
			break;
		case 5:
			SEVENSEG_PORT = SEVENSEG_FIVE;
    20e4:	eb e3       	ldi	r30, 0x3B	; 59
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	8a ed       	ldi	r24, 0xDA	; 218
    20ea:	80 83       	st	Z, r24
    20ec:	13 c0       	rjmp	.+38     	; 0x2114 <SevenSegment_Display+0x108>
			break;
		case 6:
			SEVENSEG_PORT = SEVENSEG_SIX;
    20ee:	eb e3       	ldi	r30, 0x3B	; 59
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	8a ef       	ldi	r24, 0xFA	; 250
    20f4:	80 83       	st	Z, r24
    20f6:	0e c0       	rjmp	.+28     	; 0x2114 <SevenSegment_Display+0x108>
			break;
		case 7:
			SEVENSEG_PORT = SEVENSEG_SEVEN;
    20f8:	eb e3       	ldi	r30, 0x3B	; 59
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	8e e0       	ldi	r24, 0x0E	; 14
    20fe:	80 83       	st	Z, r24
    2100:	09 c0       	rjmp	.+18     	; 0x2114 <SevenSegment_Display+0x108>
			break;
		case 8:
			SEVENSEG_PORT = SEVENSEG_EIGHT;
    2102:	eb e3       	ldi	r30, 0x3B	; 59
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	8e ef       	ldi	r24, 0xFE	; 254
    2108:	80 83       	st	Z, r24
    210a:	04 c0       	rjmp	.+8      	; 0x2114 <SevenSegment_Display+0x108>
			break;
		case 9:
			SEVENSEG_PORT = SEVENSEG_NINE;
    210c:	eb e3       	ldi	r30, 0x3B	; 59
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	8e ec       	ldi	r24, 0xCE	; 206
    2112:	80 83       	st	Z, r24
			break;
		}

#endif
}
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <__prologue_saves__>:
    2120:	2f 92       	push	r2
    2122:	3f 92       	push	r3
    2124:	4f 92       	push	r4
    2126:	5f 92       	push	r5
    2128:	6f 92       	push	r6
    212a:	7f 92       	push	r7
    212c:	8f 92       	push	r8
    212e:	9f 92       	push	r9
    2130:	af 92       	push	r10
    2132:	bf 92       	push	r11
    2134:	cf 92       	push	r12
    2136:	df 92       	push	r13
    2138:	ef 92       	push	r14
    213a:	ff 92       	push	r15
    213c:	0f 93       	push	r16
    213e:	1f 93       	push	r17
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	ca 1b       	sub	r28, r26
    214a:	db 0b       	sbc	r29, r27
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	09 94       	ijmp

00002158 <__epilogue_restores__>:
    2158:	2a 88       	ldd	r2, Y+18	; 0x12
    215a:	39 88       	ldd	r3, Y+17	; 0x11
    215c:	48 88       	ldd	r4, Y+16	; 0x10
    215e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2160:	6e 84       	ldd	r6, Y+14	; 0x0e
    2162:	7d 84       	ldd	r7, Y+13	; 0x0d
    2164:	8c 84       	ldd	r8, Y+12	; 0x0c
    2166:	9b 84       	ldd	r9, Y+11	; 0x0b
    2168:	aa 84       	ldd	r10, Y+10	; 0x0a
    216a:	b9 84       	ldd	r11, Y+9	; 0x09
    216c:	c8 84       	ldd	r12, Y+8	; 0x08
    216e:	df 80       	ldd	r13, Y+7	; 0x07
    2170:	ee 80       	ldd	r14, Y+6	; 0x06
    2172:	fd 80       	ldd	r15, Y+5	; 0x05
    2174:	0c 81       	ldd	r16, Y+4	; 0x04
    2176:	1b 81       	ldd	r17, Y+3	; 0x03
    2178:	aa 81       	ldd	r26, Y+2	; 0x02
    217a:	b9 81       	ldd	r27, Y+1	; 0x01
    217c:	ce 0f       	add	r28, r30
    217e:	d1 1d       	adc	r29, r1
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	ed 01       	movw	r28, r26
    218c:	08 95       	ret

0000218e <_exit>:
    218e:	f8 94       	cli

00002190 <__stop_program>:
    2190:	ff cf       	rjmp	.-2      	; 0x2190 <__stop_program>
