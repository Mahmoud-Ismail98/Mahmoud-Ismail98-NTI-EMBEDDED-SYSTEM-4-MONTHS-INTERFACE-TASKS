
AVR_DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000946  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000946  000009da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000a0  008000a0  00000a1a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000301c  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e49  00000000  00000000  00003cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000166b  00000000  00000000  00004b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000784  00000000  00000000  000061a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f90  00000000  00000000  0000692c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028e9  00000000  00000000  000078bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000a1a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_1>
   8:	0c 94 01 02 	jmp	0x402	; 0x402 <__vector_2>
   c:	0c 94 28 02 	jmp	0x450	; 0x450 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__vector_10>
  2c:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 b3 01 	jmp	0x366	; 0x366 <__vector_18>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3a       	cpi	r26, 0xAC	; 172
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a1 02 	call	0x542	; 0x542 <main>
  8a:	0c 94 a1 04 	jmp	0x942	; 0x942 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_vid_4Pin_Dir_cfg>:
		}
			
	}
		
	return LCD_Error_state;		
}
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	8c 01       	movw	r16, r24
  9a:	c0 e0       	ldi	r28, 0x00	; 0
  9c:	08 c0       	rjmp	.+16     	; 0xae <LCD_vid_4Pin_Dir_cfg+0x1c>
  9e:	f8 01       	movw	r30, r16
  a0:	ec 0f       	add	r30, r28
  a2:	f1 1d       	adc	r31, r1
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	80 81       	ld	r24, Z
  a8:	0e 94 65 04 	call	0x8ca	; 0x8ca <Port_enuSetpinDirection>
  ac:	cf 5f       	subi	r28, 0xFF	; 255
  ae:	c4 30       	cpi	r28, 0x04	; 4
  b0:	b0 f3       	brcs	.-20     	; 0x9e <LCD_vid_4Pin_Dir_cfg+0xc>
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	f8 01       	movw	r30, r16
  b6:	85 81       	ldd	r24, Z+5	; 0x05
  b8:	0e 94 65 04 	call	0x8ca	; 0x8ca <Port_enuSetpinDirection>
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	f8 01       	movw	r30, r16
  c0:	84 81       	ldd	r24, Z+4	; 0x04
  c2:	0e 94 65 04 	call	0x8ca	; 0x8ca <Port_enuSetpinDirection>
  c6:	cf 91       	pop	r28
  c8:	1f 91       	pop	r17
  ca:	0f 91       	pop	r16
  cc:	08 95       	ret

000000ce <LCD_vid_Generate_faling_4bit>:
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	ec 01       	movw	r28, r24
  d4:	61 e0       	ldi	r22, 0x01	; 1
  d6:	8d 81       	ldd	r24, Y+5	; 0x05
  d8:	0e 94 22 04 	call	0x844	; 0x844 <Dio_enuWriteChannel>
  dc:	8f e1       	ldi	r24, 0x1F	; 31
  de:	9e e4       	ldi	r25, 0x4E	; 78
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_vid_Generate_faling_4bit+0x12>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_vid_Generate_faling_4bit+0x18>
  e6:	00 00       	nop
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	8d 81       	ldd	r24, Y+5	; 0x05
  ec:	0e 94 22 04 	call	0x844	; 0x844 <Dio_enuWriteChannel>
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <LCD_vid_Send_4bit_bus>:
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ec 01       	movw	r28, r24
 100:	06 2f       	mov	r16, r22
 102:	10 e0       	ldi	r17, 0x00	; 0
 104:	14 c0       	rjmp	.+40     	; 0x12e <LCD_vid_Send_4bit_bus+0x38>
 106:	81 2f       	mov	r24, r17
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	9c 01       	movw	r18, r24
 10c:	2c 5f       	subi	r18, 0xFC	; 252
 10e:	3f 4f       	sbci	r19, 0xFF	; 255
 110:	60 2f       	mov	r22, r16
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <LCD_vid_Send_4bit_bus+0x24>
 116:	75 95       	asr	r23
 118:	67 95       	ror	r22
 11a:	2a 95       	dec	r18
 11c:	e2 f7       	brpl	.-8      	; 0x116 <LCD_vid_Send_4bit_bus+0x20>
 11e:	61 70       	andi	r22, 0x01	; 1
 120:	fe 01       	movw	r30, r28
 122:	e8 0f       	add	r30, r24
 124:	f9 1f       	adc	r31, r25
 126:	80 81       	ld	r24, Z
 128:	0e 94 22 04 	call	0x844	; 0x844 <Dio_enuWriteChannel>
 12c:	1f 5f       	subi	r17, 0xFF	; 255
 12e:	14 30       	cpi	r17, 0x04	; 4
 130:	50 f3       	brcs	.-44     	; 0x106 <LCD_vid_Send_4bit_bus+0x10>
 132:	ce 01       	movw	r24, r28
 134:	0e 94 67 00 	call	0xce	; 0xce <LCD_vid_Generate_faling_4bit>
 138:	10 e0       	ldi	r17, 0x00	; 0
 13a:	10 c0       	rjmp	.+32     	; 0x15c <LCD_vid_Send_4bit_bus+0x66>
 13c:	60 2f       	mov	r22, r16
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	01 2e       	mov	r0, r17
 142:	02 c0       	rjmp	.+4      	; 0x148 <LCD_vid_Send_4bit_bus+0x52>
 144:	75 95       	asr	r23
 146:	67 95       	ror	r22
 148:	0a 94       	dec	r0
 14a:	e2 f7       	brpl	.-8      	; 0x144 <LCD_vid_Send_4bit_bus+0x4e>
 14c:	61 70       	andi	r22, 0x01	; 1
 14e:	fe 01       	movw	r30, r28
 150:	e1 0f       	add	r30, r17
 152:	f1 1d       	adc	r31, r1
 154:	80 81       	ld	r24, Z
 156:	0e 94 22 04 	call	0x844	; 0x844 <Dio_enuWriteChannel>
 15a:	1f 5f       	subi	r17, 0xFF	; 255
 15c:	14 30       	cpi	r17, 0x04	; 4
 15e:	70 f3       	brcs	.-36     	; 0x13c <LCD_vid_Send_4bit_bus+0x46>
 160:	ce 01       	movw	r24, r28
 162:	0e 94 67 00 	call	0xce	; 0xce <LCD_vid_Generate_faling_4bit>
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	08 95       	ret

00000170 <LCD_vidInit_4bit>:
static void LCD_vid_Send_4bit_bus(LCD_4BIT_ST*lcd,u8 comand);
static void LCD_vid_Generate_faling_4bit(LCD_4BIT_ST*lcd);
static void LCD_vid_4Pin_Dir_cfg(LCD_4BIT_ST*lcd);

LCD_tenuErrorStatus LCD_vidInit_4bit(LCD_4BIT_ST*lcd)
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
	LCD_tenuErrorStatus LCD_Error_state=LCD_E_OK;
	if(NULL==lcd)
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	09 f4       	brne	.+2      	; 0x17a <LCD_vidInit_4bit+0xa>
 178:	45 c0       	rjmp	.+138    	; 0x204 <LCD_vidInit_4bit+0x94>
 17a:	ec 01       	movw	r28, r24
	{
		LCD_Error_state=LCD_ERROR_NULL_PTR;
	}
	else
	{
		LCD_vid_4Pin_Dir_cfg(lcd);
 17c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_vid_4Pin_Dir_cfg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	2f ef       	ldi	r18, 0xFF	; 255
 182:	83 ef       	ldi	r24, 0xF3	; 243
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	21 50       	subi	r18, 0x01	; 1
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <LCD_vidInit_4bit+0x16>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_vidInit_4bit+0x20>
 190:	00 00       	nop
		_delay_ms(40);
		Dio_enuWriteChannel(lcd->lcd_pin_rs,DIO_PIN_LOW);//send commands
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	8c 81       	ldd	r24, Y+4	; 0x04
 196:	0e 94 22 04 	call	0x844	; 0x844 <Dio_enuWriteChannel>
		LCD_vid_Send_4bit_bus(lcd,LCD_8BIT_MODE_2LINE_5_8);
 19a:	68 e3       	ldi	r22, 0x38	; 56
 19c:	ce 01       	movw	r24, r28
 19e:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_vid_Send_4bit_bus>
 1a2:	8f e1       	ldi	r24, 0x1F	; 31
 1a4:	9e e4       	ldi	r25, 0x4E	; 78
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_vidInit_4bit+0x36>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_vidInit_4bit+0x3c>
 1ac:	00 00       	nop
		_delay_ms(5);
		LCD_vid_Send_4bit_bus(lcd,LCD_8BIT_MODE_2LINE_5_8);
 1ae:	68 e3       	ldi	r22, 0x38	; 56
 1b0:	ce 01       	movw	r24, r28
 1b2:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_vid_Send_4bit_bus>
 1b6:	9f ef       	ldi	r25, 0xFF	; 255
 1b8:	22 e5       	ldi	r18, 0x52	; 82
 1ba:	87 e0       	ldi	r24, 0x07	; 7
 1bc:	91 50       	subi	r25, 0x01	; 1
 1be:	20 40       	sbci	r18, 0x00	; 0
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <LCD_vidInit_4bit+0x4c>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCD_vidInit_4bit+0x56>
 1c6:	00 00       	nop
		_delay_ms(150);
		LCD_vid_Send_4bit_bus(lcd,LCD_8BIT_MODE_2LINE_5_8);
 1c8:	68 e3       	ldi	r22, 0x38	; 56
 1ca:	ce 01       	movw	r24, r28
 1cc:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_vid_Send_4bit_bus>
		
		LCD_vid_Send_4bit_bus(lcd,LCD_CLEAR_DISPLAY);
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	ce 01       	movw	r24, r28
 1d4:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_vid_Send_4bit_bus>
		
		LCD_vid_Send_4bit_bus(lcd,LCD_CURSOR_HOME);
 1d8:	62 e0       	ldi	r22, 0x02	; 2
 1da:	ce 01       	movw	r24, r28
 1dc:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_vid_Send_4bit_bus>
		LCD_vid_Send_4bit_bus(lcd,LCD_ENTRY_MODE_INCREMENT_SHIFT_OFF);
 1e0:	66 e0       	ldi	r22, 0x06	; 6
 1e2:	ce 01       	movw	r24, r28
 1e4:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_vid_Send_4bit_bus>
		LCD_vid_Send_4bit_bus(lcd,LCD_DISPLAY_ON_UNDR_LINE_OFF_CURSOR_OFF);
 1e8:	6c e0       	ldi	r22, 0x0C	; 12
 1ea:	ce 01       	movw	r24, r28
 1ec:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_vid_Send_4bit_bus>
		LCD_vid_Send_4bit_bus(lcd,LCD_4BIT_MODE_2LINE_5_8);
 1f0:	68 e2       	ldi	r22, 0x28	; 40
 1f2:	ce 01       	movw	r24, r28
 1f4:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_vid_Send_4bit_bus>
		LCD_vid_Send_4bit_bus(lcd,LCD_DDRAM_START_ADDRESS);
 1f8:	60 e8       	ldi	r22, 0x80	; 128
 1fa:	ce 01       	movw	r24, r28
 1fc:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_vid_Send_4bit_bus>
static void LCD_vid_Generate_faling_4bit(LCD_4BIT_ST*lcd);
static void LCD_vid_4Pin_Dir_cfg(LCD_4BIT_ST*lcd);

LCD_tenuErrorStatus LCD_vidInit_4bit(LCD_4BIT_ST*lcd)
{
	LCD_tenuErrorStatus LCD_Error_state=LCD_E_OK;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	01 c0       	rjmp	.+2      	; 0x206 <LCD_vidInit_4bit+0x96>
	if(NULL==lcd)
	{
		LCD_Error_state=LCD_ERROR_NULL_PTR;
 204:	82 e0       	ldi	r24, 0x02	; 2
		LCD_vid_Send_4bit_bus(lcd,LCD_4BIT_MODE_2LINE_5_8);
		LCD_vid_Send_4bit_bus(lcd,LCD_DDRAM_START_ADDRESS);
	}
	
	return LCD_Error_state;
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <LCD_vidSendcommand_4bit>:
LCD_tenuErrorStatus LCD_vidSendcommand_4bit(LCD_4BIT_ST*lcd,u8 Copyu8Comaand)
{
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
	LCD_tenuErrorStatus LCD_Error_state=LCD_E_OK;
	if(NULL==lcd)
 212:	00 97       	sbiw	r24, 0x00	; 0
 214:	61 f0       	breq	.+24     	; 0x22e <LCD_vidSendcommand_4bit+0x22>
 216:	16 2f       	mov	r17, r22
 218:	ec 01       	movw	r28, r24
	{
		LCD_Error_state=LCD_ERROR_NULL_PTR;
	}
	else
	{
		Dio_enuWriteChannel(lcd->lcd_pin_rs,DIO_PIN_LOW);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	8c 81       	ldd	r24, Y+4	; 0x04
 21e:	0e 94 22 04 	call	0x844	; 0x844 <Dio_enuWriteChannel>
		LCD_vid_Send_4bit_bus(lcd,Copyu8Comaand);
 222:	61 2f       	mov	r22, r17
 224:	ce 01       	movw	r24, r28
 226:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_vid_Send_4bit_bus>
	
	return LCD_Error_state;
}
LCD_tenuErrorStatus LCD_vidSendcommand_4bit(LCD_4BIT_ST*lcd,u8 Copyu8Comaand)
{
	LCD_tenuErrorStatus LCD_Error_state=LCD_E_OK;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	01 c0       	rjmp	.+2      	; 0x230 <LCD_vidSendcommand_4bit+0x24>
	if(NULL==lcd)
	{
		LCD_Error_state=LCD_ERROR_NULL_PTR;
 22e:	82 e0       	ldi	r24, 0x02	; 2
	{
		Dio_enuWriteChannel(lcd->lcd_pin_rs,DIO_PIN_LOW);
		LCD_vid_Send_4bit_bus(lcd,Copyu8Comaand);
	}
	return LCD_Error_state;
}
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	1f 91       	pop	r17
 236:	08 95       	ret

00000238 <LCD_vidDisplayChar_4bit>:
LCD_tenuErrorStatus LCD_vidDisplayChar_4bit(LCD_4BIT_ST*lcd,u8 Copyu8Char)
{
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
	LCD_tenuErrorStatus LCD_Error_state=LCD_E_OK;
	if(NULL==lcd)
 23e:	00 97       	sbiw	r24, 0x00	; 0
 240:	61 f0       	breq	.+24     	; 0x25a <LCD_vidDisplayChar_4bit+0x22>
 242:	16 2f       	mov	r17, r22
 244:	ec 01       	movw	r28, r24
	{
		LCD_Error_state=LCD_ERROR_NULL_PTR;
	}
	else
	{
		Dio_enuWriteChannel(lcd->lcd_pin_rs,DIO_PIN_HIGH);
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	8c 81       	ldd	r24, Y+4	; 0x04
 24a:	0e 94 22 04 	call	0x844	; 0x844 <Dio_enuWriteChannel>
		LCD_vid_Send_4bit_bus(lcd,Copyu8Char);
 24e:	61 2f       	mov	r22, r17
 250:	ce 01       	movw	r24, r28
 252:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_vid_Send_4bit_bus>
	}
	return LCD_Error_state;
}
LCD_tenuErrorStatus LCD_vidDisplayChar_4bit(LCD_4BIT_ST*lcd,u8 Copyu8Char)
{
	LCD_tenuErrorStatus LCD_Error_state=LCD_E_OK;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	01 c0       	rjmp	.+2      	; 0x25c <LCD_vidDisplayChar_4bit+0x24>
	if(NULL==lcd)
	{
		LCD_Error_state=LCD_ERROR_NULL_PTR;
 25a:	82 e0       	ldi	r24, 0x02	; 2
		Dio_enuWriteChannel(lcd->lcd_pin_rs,DIO_PIN_HIGH);
		LCD_vid_Send_4bit_bus(lcd,Copyu8Char);
	}
	return LCD_Error_state;

}
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	08 95       	ret

00000264 <LCD_vidCraetCustomChar_4bit>:
LCD_tenuErrorStatus LCD_vidCraetCustomChar_4bit(LCD_4BIT_ST*lcd,ptr_u8 add_pu8CustomChar, u8 index){
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
	LCD_tenuErrorStatus LCD_Error_state=LCD_E_OK;
	if(NULL==lcd||NULL==add_pu8CustomChar)
 26e:	00 97       	sbiw	r24, 0x00	; 0
 270:	11 f1       	breq	.+68     	; 0x2b6 <LCD_vidCraetCustomChar_4bit+0x52>
 272:	61 15       	cp	r22, r1
 274:	71 05       	cpc	r23, r1
 276:	09 f1       	breq	.+66     	; 0x2ba <LCD_vidCraetCustomChar_4bit+0x56>
	{
		LCD_Error_state=LCD_ERROR_NULL_PTR;
	}
	else if(index>7)
 278:	48 30       	cpi	r20, 0x08	; 8
 27a:	08 f5       	brcc	.+66     	; 0x2be <LCD_vidCraetCustomChar_4bit+0x5a>
 27c:	7b 01       	movw	r14, r22
 27e:	ec 01       	movw	r28, r24
	{
		LCD_Error_state=LCD_ERROR_NULL_PTR;
	}
	else
	{
		LCD_vidSendcommand_4bit(lcd,LCD_CGRAM_START_ADDRESS+index*8);
 280:	64 2f       	mov	r22, r20
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	68 5f       	subi	r22, 0xF8	; 248
 286:	7f 4f       	sbci	r23, 0xFF	; 255
 288:	66 0f       	add	r22, r22
 28a:	66 0f       	add	r22, r22
 28c:	66 0f       	add	r22, r22
 28e:	0e 94 06 01 	call	0x20c	; 0x20c <LCD_vidSendcommand_4bit>
		for(u8 lcd_bytecounter=0;lcd_bytecounter<8;lcd_bytecounter++ )
 292:	10 e0       	ldi	r17, 0x00	; 0
 294:	08 c0       	rjmp	.+16     	; 0x2a6 <LCD_vidCraetCustomChar_4bit+0x42>
		{
			LCD_vidDisplayChar_4bit(lcd,*(add_pu8CustomChar+lcd_bytecounter));
 296:	f7 01       	movw	r30, r14
 298:	e1 0f       	add	r30, r17
 29a:	f1 1d       	adc	r31, r1
 29c:	60 81       	ld	r22, Z
 29e:	ce 01       	movw	r24, r28
 2a0:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
		LCD_Error_state=LCD_ERROR_NULL_PTR;
	}
	else
	{
		LCD_vidSendcommand_4bit(lcd,LCD_CGRAM_START_ADDRESS+index*8);
		for(u8 lcd_bytecounter=0;lcd_bytecounter<8;lcd_bytecounter++ )
 2a4:	1f 5f       	subi	r17, 0xFF	; 255
 2a6:	18 30       	cpi	r17, 0x08	; 8
 2a8:	b0 f3       	brcs	.-20     	; 0x296 <LCD_vidCraetCustomChar_4bit+0x32>
		{
			LCD_vidDisplayChar_4bit(lcd,*(add_pu8CustomChar+lcd_bytecounter));
		}
		
		LCD_vidSendcommand_4bit(lcd,LCD_DDRAM_START_ADDRESS);
 2aa:	60 e8       	ldi	r22, 0x80	; 128
 2ac:	ce 01       	movw	r24, r28
 2ae:	0e 94 06 01 	call	0x20c	; 0x20c <LCD_vidSendcommand_4bit>
	}
	return LCD_Error_state;

}
LCD_tenuErrorStatus LCD_vidCraetCustomChar_4bit(LCD_4BIT_ST*lcd,ptr_u8 add_pu8CustomChar, u8 index){
	LCD_tenuErrorStatus LCD_Error_state=LCD_E_OK;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	05 c0       	rjmp	.+10     	; 0x2c0 <LCD_vidCraetCustomChar_4bit+0x5c>
	if(NULL==lcd||NULL==add_pu8CustomChar)
	{
		LCD_Error_state=LCD_ERROR_NULL_PTR;
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <LCD_vidCraetCustomChar_4bit+0x5c>
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <LCD_vidCraetCustomChar_4bit+0x5c>
	}
	else if(index>7)
	{
		LCD_Error_state=LCD_ERROR_NULL_PTR;
 2be:	82 e0       	ldi	r24, 0x02	; 2
		}
		
		LCD_vidSendcommand_4bit(lcd,LCD_DDRAM_START_ADDRESS);
	}
	return LCD_Error_state;
}
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	1f 91       	pop	r17
 2c6:	ff 90       	pop	r15
 2c8:	ef 90       	pop	r14
 2ca:	08 95       	ret

000002cc <LCD_vidGotoXY_4bit>:
LCD_tenuErrorStatus LCD_vidGotoXY_4bit(LCD_4BIT_ST*lcd,u8 copy_rows,u8 copy_colums )
{
	LCD_tenuErrorStatus LCD_Error_state=LCD_E_OK;
	if(NULL==lcd)
 2cc:	00 97       	sbiw	r24, 0x00	; 0
 2ce:	39 f1       	breq	.+78     	; 0x31e <LCD_vidGotoXY_4bit+0x52>
	{
		LCD_Error_state=LCD_ERROR_NULL_PTR;
	}
	else if(copy_rows>4)
 2d0:	65 30       	cpi	r22, 0x05	; 5
 2d2:	38 f5       	brcc	.+78     	; 0x322 <LCD_vidGotoXY_4bit+0x56>
	{
		LCD_Error_state=LCD_ROW_OUT_OF_RANGE;
	}
	else if(copy_rows>20)
 2d4:	65 31       	cpi	r22, 0x15	; 21
 2d6:	38 f5       	brcc	.+78     	; 0x326 <LCD_vidGotoXY_4bit+0x5a>
	{
		LCD_Error_state=LCD_COL_OUT_OF_RANGE;
	}
	else
	{
		switch (copy_rows)
 2d8:	62 30       	cpi	r22, 0x02	; 2
 2da:	79 f0       	breq	.+30     	; 0x2fa <LCD_vidGotoXY_4bit+0x2e>
 2dc:	18 f4       	brcc	.+6      	; 0x2e4 <LCD_vidGotoXY_4bit+0x18>
 2de:	61 30       	cpi	r22, 0x01	; 1
 2e0:	31 f0       	breq	.+12     	; 0x2ee <LCD_vidGotoXY_4bit+0x22>
 2e2:	23 c0       	rjmp	.+70     	; 0x32a <LCD_vidGotoXY_4bit+0x5e>
 2e4:	63 30       	cpi	r22, 0x03	; 3
 2e6:	79 f0       	breq	.+30     	; 0x306 <LCD_vidGotoXY_4bit+0x3a>
 2e8:	64 30       	cpi	r22, 0x04	; 4
 2ea:	99 f0       	breq	.+38     	; 0x312 <LCD_vidGotoXY_4bit+0x46>
 2ec:	1e c0       	rjmp	.+60     	; 0x32a <LCD_vidGotoXY_4bit+0x5e>
		{
			case ROW1:
			LCD_vidSendcommand_4bit(lcd,(LCD_4ROWS_FIRST_ROW_ADDREESS+copy_colums));
 2ee:	60 e8       	ldi	r22, 0x80	; 128
 2f0:	64 0f       	add	r22, r20
 2f2:	0e 94 06 01 	call	0x20c	; 0x20c <LCD_vidSendcommand_4bit>
	}
	return LCD_Error_state;
}
LCD_tenuErrorStatus LCD_vidGotoXY_4bit(LCD_4BIT_ST*lcd,u8 copy_rows,u8 copy_colums )
{
	LCD_tenuErrorStatus LCD_Error_state=LCD_E_OK;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch (copy_rows)
		{
			case ROW1:
			LCD_vidSendcommand_4bit(lcd,(LCD_4ROWS_FIRST_ROW_ADDREESS+copy_colums));
			break;
 2f8:	08 95       	ret
			case ROW2:
			LCD_vidSendcommand_4bit(lcd,(LCD_4ROWS_SECOND_ROW_ADDREESS+copy_colums));
 2fa:	60 ec       	ldi	r22, 0xC0	; 192
 2fc:	64 0f       	add	r22, r20
 2fe:	0e 94 06 01 	call	0x20c	; 0x20c <LCD_vidSendcommand_4bit>
	}
	return LCD_Error_state;
}
LCD_tenuErrorStatus LCD_vidGotoXY_4bit(LCD_4BIT_ST*lcd,u8 copy_rows,u8 copy_colums )
{
	LCD_tenuErrorStatus LCD_Error_state=LCD_E_OK;
 302:	81 e0       	ldi	r24, 0x01	; 1
			case ROW1:
			LCD_vidSendcommand_4bit(lcd,(LCD_4ROWS_FIRST_ROW_ADDREESS+copy_colums));
			break;
			case ROW2:
			LCD_vidSendcommand_4bit(lcd,(LCD_4ROWS_SECOND_ROW_ADDREESS+copy_colums));
			break;
 304:	08 95       	ret
			case ROW3:
			LCD_vidSendcommand_4bit(lcd,(LCD_4ROWS_THIRD_ROW_ADDREESS+copy_colums));
 306:	64 e9       	ldi	r22, 0x94	; 148
 308:	64 0f       	add	r22, r20
 30a:	0e 94 06 01 	call	0x20c	; 0x20c <LCD_vidSendcommand_4bit>
	}
	return LCD_Error_state;
}
LCD_tenuErrorStatus LCD_vidGotoXY_4bit(LCD_4BIT_ST*lcd,u8 copy_rows,u8 copy_colums )
{
	LCD_tenuErrorStatus LCD_Error_state=LCD_E_OK;
 30e:	81 e0       	ldi	r24, 0x01	; 1
			case ROW2:
			LCD_vidSendcommand_4bit(lcd,(LCD_4ROWS_SECOND_ROW_ADDREESS+copy_colums));
			break;
			case ROW3:
			LCD_vidSendcommand_4bit(lcd,(LCD_4ROWS_THIRD_ROW_ADDREESS+copy_colums));
			break;
 310:	08 95       	ret
			case ROW4:
			LCD_vidSendcommand_4bit(lcd,(LCD_4ROWS_FOURTH_ROW_ADDREESS+copy_colums));
 312:	64 ed       	ldi	r22, 0xD4	; 212
 314:	64 0f       	add	r22, r20
 316:	0e 94 06 01 	call	0x20c	; 0x20c <LCD_vidSendcommand_4bit>
	}
	return LCD_Error_state;
}
LCD_tenuErrorStatus LCD_vidGotoXY_4bit(LCD_4BIT_ST*lcd,u8 copy_rows,u8 copy_colums )
{
	LCD_tenuErrorStatus LCD_Error_state=LCD_E_OK;
 31a:	81 e0       	ldi	r24, 0x01	; 1
			case ROW3:
			LCD_vidSendcommand_4bit(lcd,(LCD_4ROWS_THIRD_ROW_ADDREESS+copy_colums));
			break;
			case ROW4:
			LCD_vidSendcommand_4bit(lcd,(LCD_4ROWS_FOURTH_ROW_ADDREESS+copy_colums));
			break;
 31c:	08 95       	ret
LCD_tenuErrorStatus LCD_vidGotoXY_4bit(LCD_4BIT_ST*lcd,u8 copy_rows,u8 copy_colums )
{
	LCD_tenuErrorStatus LCD_Error_state=LCD_E_OK;
	if(NULL==lcd)
	{
		LCD_Error_state=LCD_ERROR_NULL_PTR;
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	08 95       	ret
	}
	else if(copy_rows>4)
	{
		LCD_Error_state=LCD_ROW_OUT_OF_RANGE;
 322:	83 e0       	ldi	r24, 0x03	; 3
 324:	08 95       	ret
	}
	else if(copy_rows>20)
	{
		LCD_Error_state=LCD_COL_OUT_OF_RANGE;
 326:	84 e0       	ldi	r24, 0x04	; 4
 328:	08 95       	ret
	}
	return LCD_Error_state;
}
LCD_tenuErrorStatus LCD_vidGotoXY_4bit(LCD_4BIT_ST*lcd,u8 copy_rows,u8 copy_colums )
{
	LCD_tenuErrorStatus LCD_Error_state=LCD_E_OK;
 32a:	81 e0       	ldi	r24, 0x01	; 1
			LCD_vidSendcommand_4bit(lcd,(LCD_4ROWS_FOURTH_ROW_ADDREESS+copy_colums));
			break;
		}
	}
	return LCD_Error_state;
}
 32c:	08 95       	ret

0000032e <LCD_vidDisplayString_4bit>:
LCD_tenuErrorStatus LCD_vidDisplayString_4bit(LCD_4BIT_ST*lcd,ptr_u8 add_pu8String)
{
 32e:	0f 93       	push	r16
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	8c 01       	movw	r16, r24
 338:	eb 01       	movw	r28, r22
	LCD_tenuErrorStatus LCD_Error_state=LCD_E_OK;
	if(NULL==lcd||NULL==add_pu8String)
 33a:	89 2b       	or	r24, r25
 33c:	61 f0       	breq	.+24     	; 0x356 <LCD_vidDisplayString_4bit+0x28>
 33e:	20 97       	sbiw	r28, 0x00	; 0
 340:	29 f4       	brne	.+10     	; 0x34c <LCD_vidDisplayString_4bit+0x1e>
 342:	0b c0       	rjmp	.+22     	; 0x35a <LCD_vidDisplayString_4bit+0x2c>
		LCD_Error_state=LCD_ERROR_NULL_PTR;
	}
	else{
		while(*add_pu8String)
		{
			LCD_vidDisplayChar_4bit(lcd,*add_pu8String);
 344:	c8 01       	movw	r24, r16
 346:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
			add_pu8String++;
 34a:	21 96       	adiw	r28, 0x01	; 1
	if(NULL==lcd||NULL==add_pu8String)
	{
		LCD_Error_state=LCD_ERROR_NULL_PTR;
	}
	else{
		while(*add_pu8String)
 34c:	68 81       	ld	r22, Y
 34e:	61 11       	cpse	r22, r1
 350:	f9 cf       	rjmp	.-14     	; 0x344 <LCD_vidDisplayString_4bit+0x16>
	}
	return LCD_Error_state;
}
LCD_tenuErrorStatus LCD_vidDisplayString_4bit(LCD_4BIT_ST*lcd,ptr_u8 add_pu8String)
{
	LCD_tenuErrorStatus LCD_Error_state=LCD_E_OK;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	03 c0       	rjmp	.+6      	; 0x35c <LCD_vidDisplayString_4bit+0x2e>
	if(NULL==lcd||NULL==add_pu8String)
	{
		LCD_Error_state=LCD_ERROR_NULL_PTR;
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	01 c0       	rjmp	.+2      	; 0x35c <LCD_vidDisplayString_4bit+0x2e>
 35a:	82 e0       	ldi	r24, 0x02	; 2
			LCD_vidDisplayChar_4bit(lcd,*add_pu8String);
			add_pu8String++;
		}
	}
	return LCD_Error_state;
}
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	08 95       	ret

00000366 <__vector_18>:
	  *result=HIGH_byte*256+LOW_byte;
	  ADC_CLEAR_FLAG();*/
  }
  void __vector_18(void) __attribute__((signal));
  void __vector_18(void)
  {
 366:	1f 92       	push	r1
 368:	0f 92       	push	r0
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	0f 92       	push	r0
 36e:	11 24       	eor	r1, r1
 370:	2f 93       	push	r18
 372:	3f 93       	push	r19
 374:	4f 93       	push	r20
 376:	5f 93       	push	r21
 378:	6f 93       	push	r22
 37a:	7f 93       	push	r23
 37c:	8f 93       	push	r24
 37e:	9f 93       	push	r25
 380:	af 93       	push	r26
 382:	bf 93       	push	r27
 384:	ef 93       	push	r30
 386:	ff 93       	push	r31
	  ADC_CALLBack();
 388:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <__data_end>
 38c:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <__data_end+0x1>
 390:	09 95       	icall
  }
 392:	ff 91       	pop	r31
 394:	ef 91       	pop	r30
 396:	bf 91       	pop	r27
 398:	af 91       	pop	r26
 39a:	9f 91       	pop	r25
 39c:	8f 91       	pop	r24
 39e:	7f 91       	pop	r23
 3a0:	6f 91       	pop	r22
 3a2:	5f 91       	pop	r21
 3a4:	4f 91       	pop	r20
 3a6:	3f 91       	pop	r19
 3a8:	2f 91       	pop	r18
 3aa:	0f 90       	pop	r0
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	0f 90       	pop	r0
 3b0:	1f 90       	pop	r1
 3b2:	18 95       	reti

000003b4 <__vector_1>:

/**********************ISR for the EXTI in the vector table*************/
void __vector_1(void) __attribute__((signal));

void __vector_1(void)
{
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	2f 93       	push	r18
 3c0:	3f 93       	push	r19
 3c2:	4f 93       	push	r20
 3c4:	5f 93       	push	r21
 3c6:	6f 93       	push	r22
 3c8:	7f 93       	push	r23
 3ca:	8f 93       	push	r24
 3cc:	9f 93       	push	r25
 3ce:	af 93       	push	r26
 3d0:	bf 93       	push	r27
 3d2:	ef 93       	push	r30
 3d4:	ff 93       	push	r31
	EXTI_APP_FN[0]();
 3d6:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <EXTI_APP_FN>
 3da:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <EXTI_APP_FN+0x1>
 3de:	09 95       	icall
}
 3e0:	ff 91       	pop	r31
 3e2:	ef 91       	pop	r30
 3e4:	bf 91       	pop	r27
 3e6:	af 91       	pop	r26
 3e8:	9f 91       	pop	r25
 3ea:	8f 91       	pop	r24
 3ec:	7f 91       	pop	r23
 3ee:	6f 91       	pop	r22
 3f0:	5f 91       	pop	r21
 3f2:	4f 91       	pop	r20
 3f4:	3f 91       	pop	r19
 3f6:	2f 91       	pop	r18
 3f8:	0f 90       	pop	r0
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	0f 90       	pop	r0
 3fe:	1f 90       	pop	r1
 400:	18 95       	reti

00000402 <__vector_2>:

void __vector_2(void) __attribute__((signal));

void __vector_2(void)
{
 402:	1f 92       	push	r1
 404:	0f 92       	push	r0
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	0f 92       	push	r0
 40a:	11 24       	eor	r1, r1
 40c:	2f 93       	push	r18
 40e:	3f 93       	push	r19
 410:	4f 93       	push	r20
 412:	5f 93       	push	r21
 414:	6f 93       	push	r22
 416:	7f 93       	push	r23
 418:	8f 93       	push	r24
 41a:	9f 93       	push	r25
 41c:	af 93       	push	r26
 41e:	bf 93       	push	r27
 420:	ef 93       	push	r30
 422:	ff 93       	push	r31
	EXTI_APP_FN[1]();
 424:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <EXTI_APP_FN+0x2>
 428:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <EXTI_APP_FN+0x3>
 42c:	09 95       	icall
}
 42e:	ff 91       	pop	r31
 430:	ef 91       	pop	r30
 432:	bf 91       	pop	r27
 434:	af 91       	pop	r26
 436:	9f 91       	pop	r25
 438:	8f 91       	pop	r24
 43a:	7f 91       	pop	r23
 43c:	6f 91       	pop	r22
 43e:	5f 91       	pop	r21
 440:	4f 91       	pop	r20
 442:	3f 91       	pop	r19
 444:	2f 91       	pop	r18
 446:	0f 90       	pop	r0
 448:	0f be       	out	0x3f, r0	; 63
 44a:	0f 90       	pop	r0
 44c:	1f 90       	pop	r1
 44e:	18 95       	reti

00000450 <__vector_3>:

void __vector_3(void) __attribute__((signal));

void __vector_3(void)
{
 450:	1f 92       	push	r1
 452:	0f 92       	push	r0
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	0f 92       	push	r0
 458:	11 24       	eor	r1, r1
 45a:	2f 93       	push	r18
 45c:	3f 93       	push	r19
 45e:	4f 93       	push	r20
 460:	5f 93       	push	r21
 462:	6f 93       	push	r22
 464:	7f 93       	push	r23
 466:	8f 93       	push	r24
 468:	9f 93       	push	r25
 46a:	af 93       	push	r26
 46c:	bf 93       	push	r27
 46e:	ef 93       	push	r30
 470:	ff 93       	push	r31
	EXTI_APP_FN[2]();
 472:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <EXTI_APP_FN+0x4>
 476:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <EXTI_APP_FN+0x5>
 47a:	09 95       	icall
 47c:	ff 91       	pop	r31
 47e:	ef 91       	pop	r30
 480:	bf 91       	pop	r27
 482:	af 91       	pop	r26
 484:	9f 91       	pop	r25
 486:	8f 91       	pop	r24
 488:	7f 91       	pop	r23
 48a:	6f 91       	pop	r22
 48c:	5f 91       	pop	r21
 48e:	4f 91       	pop	r20
 490:	3f 91       	pop	r19
 492:	2f 91       	pop	r18
 494:	0f 90       	pop	r0
 496:	0f be       	out	0x3f, r0	; 63
 498:	0f 90       	pop	r0
 49a:	1f 90       	pop	r1
 49c:	18 95       	reti

0000049e <GIE_INIT>:
void GIE_INIT(void)
{
 	switch(GIE_STATE)
	 {
		 case ENABLE_GIE:
		 SET_BIT(SREG,7);
 49e:	8f b7       	in	r24, 0x3f	; 63
 4a0:	80 68       	ori	r24, 0x80	; 128
 4a2:	8f bf       	out	0x3f, r24	; 63
 4a4:	08 95       	ret

000004a6 <__vector_11>:
	SET_COMPARE_VALUE((duty*(256-TIMER0_PRELOAD_CFG)/100));
}

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
 4a6:	1f 92       	push	r1
 4a8:	0f 92       	push	r0
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	0f 92       	push	r0
 4ae:	11 24       	eor	r1, r1
 4b0:	2f 93       	push	r18
 4b2:	3f 93       	push	r19
 4b4:	4f 93       	push	r20
 4b6:	5f 93       	push	r21
 4b8:	6f 93       	push	r22
 4ba:	7f 93       	push	r23
 4bc:	8f 93       	push	r24
 4be:	9f 93       	push	r25
 4c0:	af 93       	push	r26
 4c2:	bf 93       	push	r27
 4c4:	ef 93       	push	r30
 4c6:	ff 93       	push	r31
	TIMER0_OVERFLOW_CALLBACK();
 4c8:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <TIMER0_OVERFLOW_CALLBACK>
 4cc:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <TIMER0_OVERFLOW_CALLBACK+0x1>
 4d0:	09 95       	icall
}
 4d2:	ff 91       	pop	r31
 4d4:	ef 91       	pop	r30
 4d6:	bf 91       	pop	r27
 4d8:	af 91       	pop	r26
 4da:	9f 91       	pop	r25
 4dc:	8f 91       	pop	r24
 4de:	7f 91       	pop	r23
 4e0:	6f 91       	pop	r22
 4e2:	5f 91       	pop	r21
 4e4:	4f 91       	pop	r20
 4e6:	3f 91       	pop	r19
 4e8:	2f 91       	pop	r18
 4ea:	0f 90       	pop	r0
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	0f 90       	pop	r0
 4f0:	1f 90       	pop	r1
 4f2:	18 95       	reti

000004f4 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
 4f4:	1f 92       	push	r1
 4f6:	0f 92       	push	r0
 4f8:	0f b6       	in	r0, 0x3f	; 63
 4fa:	0f 92       	push	r0
 4fc:	11 24       	eor	r1, r1
 4fe:	2f 93       	push	r18
 500:	3f 93       	push	r19
 502:	4f 93       	push	r20
 504:	5f 93       	push	r21
 506:	6f 93       	push	r22
 508:	7f 93       	push	r23
 50a:	8f 93       	push	r24
 50c:	9f 93       	push	r25
 50e:	af 93       	push	r26
 510:	bf 93       	push	r27
 512:	ef 93       	push	r30
 514:	ff 93       	push	r31
	TIMER0_COMPARE_MATCH_CALLBACK();
 516:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <TIMER0_COMPARE_MATCH_CALLBACK>
 51a:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <TIMER0_COMPARE_MATCH_CALLBACK+0x1>
 51e:	09 95       	icall
}
 520:	ff 91       	pop	r31
 522:	ef 91       	pop	r30
 524:	bf 91       	pop	r27
 526:	af 91       	pop	r26
 528:	9f 91       	pop	r25
 52a:	8f 91       	pop	r24
 52c:	7f 91       	pop	r23
 52e:	6f 91       	pop	r22
 530:	5f 91       	pop	r21
 532:	4f 91       	pop	r20
 534:	3f 91       	pop	r19
 536:	2f 91       	pop	r18
 538:	0f 90       	pop	r0
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	0f 90       	pop	r0
 53e:	1f 90       	pop	r1
 540:	18 95       	reti

00000542 <main>:
	.lcd_pins[3]=PIN_B4_ID_12,
	.lcd_pin_rs=PIN_A3_ID_3,
.lcd_pin_e=PIN_A2_ID_2};

int main(void)
{
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
	
	Port_vidInit();
 546:	0e 94 5e 04 	call	0x8bc	; 0x8bc <Port_vidInit>
	GIE_INIT();
 54a:	0e 94 4f 02 	call	0x49e	; 0x49e <GIE_INIT>
	LCD_vidInit_4bit(&lcd);
 54e:	80 e6       	ldi	r24, 0x60	; 96
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_vidInit_4bit>
	LCD_vidCraetCustomChar_4bit(&lcd,hamada,1);
 556:	41 e0       	ldi	r20, 0x01	; 1
 558:	66 e6       	ldi	r22, 0x66	; 102
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	80 e6       	ldi	r24, 0x60	; 96
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 32 01 	call	0x264	; 0x264 <LCD_vidCraetCustomChar_4bit>
	LCD_vidSendcommand_4bit(&lcd,LCD_CLEAR_DISPLAY);
 564:	61 e0       	ldi	r22, 0x01	; 1
 566:	80 e6       	ldi	r24, 0x60	; 96
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 06 01 	call	0x20c	; 0x20c <LCD_vidSendcommand_4bit>
	LCD_vidDisplayString_4bit(&lcd,line);
 56e:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <line>
 572:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <line+0x1>
 576:	80 e6       	ldi	r24, 0x60	; 96
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_vidDisplayString_4bit>
	LCD_vidGotoXY_4bit(&lcd,2,0);
 57e:	40 e0       	ldi	r20, 0x00	; 0
 580:	62 e0       	ldi	r22, 0x02	; 2
 582:	80 e6       	ldi	r24, 0x60	; 96
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
	LCD_vidDisplayString_4bit(&lcd,line);
 58a:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <line>
 58e:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <line+0x1>
 592:	80 e6       	ldi	r24, 0x60	; 96
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_vidDisplayString_4bit>
	LCD_vidGotoXY_4bit(&lcd,3,0);
 59a:	40 e0       	ldi	r20, 0x00	; 0
 59c:	63 e0       	ldi	r22, 0x03	; 3
 59e:	80 e6       	ldi	r24, 0x60	; 96
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
	LCD_vidDisplayString_4bit(&lcd,line);
 5a6:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <line>
 5aa:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <line+0x1>
 5ae:	80 e6       	ldi	r24, 0x60	; 96
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_vidDisplayString_4bit>
	LCD_vidGotoXY_4bit(&lcd,4,0);
 5b6:	40 e0       	ldi	r20, 0x00	; 0
 5b8:	64 e0       	ldi	r22, 0x04	; 4
 5ba:	80 e6       	ldi	r24, 0x60	; 96
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
	LCD_vidDisplayString_4bit(&lcd,line);
 5c2:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <line>
 5c6:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <line+0x1>
 5ca:	80 e6       	ldi	r24, 0x60	; 96
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_vidDisplayString_4bit>
	LCD_vidGotoXY_4bit(&lcd,1,0);
 5d2:	40 e0       	ldi	r20, 0x00	; 0
 5d4:	61 e0       	ldi	r22, 0x01	; 1
 5d6:	80 e6       	ldi	r24, 0x60	; 96
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
	LCD_vidDisplayChar_4bit(&lcd,1);
 5de:	61 e0       	ldi	r22, 0x01	; 1
 5e0:	80 e6       	ldi	r24, 0x60	; 96
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
	while (1)
	{

		//LCD_vidDisplayChar_4bit(&lcd,keypad_value);
		//1s
		for(u8 row=1;row<=4;row++)
 5e8:	d1 e0       	ldi	r29, 0x01	; 1
 5ea:	2a c0       	rjmp	.+84     	; 0x640 <main+0xfe>
		{
			
			for(u8 col=0;col<=18;col++)
			{	
				LCD_vidGotoXY_4bit(&lcd,row,col);
 5ec:	4c 2f       	mov	r20, r28
 5ee:	6d 2f       	mov	r22, r29
 5f0:	80 e6       	ldi	r24, 0x60	; 96
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
				LCD_vidDisplayChar_4bit(&lcd,'_');
 5f8:	6f e5       	ldi	r22, 0x5F	; 95
 5fa:	80 e6       	ldi	r24, 0x60	; 96
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
				LCD_vidDisplayChar_4bit(&lcd,1);
 602:	61 e0       	ldi	r22, 0x01	; 1
 604:	80 e6       	ldi	r24, 0x60	; 96
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
 60c:	2f ef       	ldi	r18, 0xFF	; 255
 60e:	81 ee       	ldi	r24, 0xE1	; 225
 610:	94 e0       	ldi	r25, 0x04	; 4
 612:	21 50       	subi	r18, 0x01	; 1
 614:	80 40       	sbci	r24, 0x00	; 0
 616:	90 40       	sbci	r25, 0x00	; 0
 618:	e1 f7       	brne	.-8      	; 0x612 <main+0xd0>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <main+0xda>
 61c:	00 00       	nop
		//LCD_vidDisplayChar_4bit(&lcd,keypad_value);
		//1s
		for(u8 row=1;row<=4;row++)
		{
			
			for(u8 col=0;col<=18;col++)
 61e:	cf 5f       	subi	r28, 0xFF	; 255
 620:	01 c0       	rjmp	.+2      	; 0x624 <main+0xe2>
 622:	c0 e0       	ldi	r28, 0x00	; 0
 624:	c3 31       	cpi	r28, 0x13	; 19
 626:	10 f3       	brcs	.-60     	; 0x5ec <main+0xaa>
				LCD_vidGotoXY_4bit(&lcd,row,col);
				LCD_vidDisplayChar_4bit(&lcd,'_');
				LCD_vidDisplayChar_4bit(&lcd,1);
				_delay_ms(100);
			}
			LCD_vidGotoXY_4bit(&lcd,row,19);
 628:	43 e1       	ldi	r20, 0x13	; 19
 62a:	6d 2f       	mov	r22, r29
 62c:	80 e6       	ldi	r24, 0x60	; 96
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
			LCD_vidDisplayChar_4bit(&lcd,'_');
 634:	6f e5       	ldi	r22, 0x5F	; 95
 636:	80 e6       	ldi	r24, 0x60	; 96
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
	while (1)
	{

		//LCD_vidDisplayChar_4bit(&lcd,keypad_value);
		//1s
		for(u8 row=1;row<=4;row++)
 63e:	df 5f       	subi	r29, 0xFF	; 255
 640:	d5 30       	cpi	r29, 0x05	; 5
 642:	78 f3       	brcs	.-34     	; 0x622 <main+0xe0>
			}
			LCD_vidGotoXY_4bit(&lcd,row,19);
			LCD_vidDisplayChar_4bit(&lcd,'_');
		}//1e
		//2s
		LCD_vidGotoXY_4bit(&lcd,1,10);
 644:	4a e0       	ldi	r20, 0x0A	; 10
 646:	61 e0       	ldi	r22, 0x01	; 1
 648:	80 e6       	ldi	r24, 0x60	; 96
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
		LCD_vidDisplayChar_4bit(&lcd,' ');
 650:	60 e2       	ldi	r22, 0x20	; 32
 652:	80 e6       	ldi	r24, 0x60	; 96
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
		for(u8 row=1;row<=4;row++)
 65a:	d1 e0       	ldi	r29, 0x01	; 1
 65c:	3b c0       	rjmp	.+118    	; 0x6d4 <main+0x192>
		{
			
			for(u8 col=0;col<=18;col++)
			{	
				if(row==1&&col==10)
 65e:	d1 30       	cpi	r29, 0x01	; 1
 660:	79 f4       	brne	.+30     	; 0x680 <main+0x13e>
 662:	ca 30       	cpi	r28, 0x0A	; 10
 664:	69 f4       	brne	.+26     	; 0x680 <main+0x13e>
				{
					LCD_vidGotoXY_4bit(&lcd,row,col);
 666:	4c 2f       	mov	r20, r28
 668:	6d 2f       	mov	r22, r29
 66a:	80 e6       	ldi	r24, 0x60	; 96
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
					LCD_vidDisplayChar_4bit(&lcd,' ');
 672:	60 e2       	ldi	r22, 0x20	; 32
 674:	80 e6       	ldi	r24, 0x60	; 96
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
					row=2;
 67c:	d2 e0       	ldi	r29, 0x02	; 2
 67e:	19 c0       	rjmp	.+50     	; 0x6b2 <main+0x170>
				}
				else
				{
					LCD_vidGotoXY_4bit(&lcd,row,col);
 680:	4c 2f       	mov	r20, r28
 682:	6d 2f       	mov	r22, r29
 684:	80 e6       	ldi	r24, 0x60	; 96
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
					LCD_vidDisplayChar_4bit(&lcd,'_');
 68c:	6f e5       	ldi	r22, 0x5F	; 95
 68e:	80 e6       	ldi	r24, 0x60	; 96
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
					LCD_vidDisplayChar_4bit(&lcd,1);
 696:	61 e0       	ldi	r22, 0x01	; 1
 698:	80 e6       	ldi	r24, 0x60	; 96
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
 6a0:	2f ef       	ldi	r18, 0xFF	; 255
 6a2:	81 ee       	ldi	r24, 0xE1	; 225
 6a4:	94 e0       	ldi	r25, 0x04	; 4
 6a6:	21 50       	subi	r18, 0x01	; 1
 6a8:	80 40       	sbci	r24, 0x00	; 0
 6aa:	90 40       	sbci	r25, 0x00	; 0
 6ac:	e1 f7       	brne	.-8      	; 0x6a6 <main+0x164>
 6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <main+0x16e>
 6b0:	00 00       	nop
		LCD_vidGotoXY_4bit(&lcd,1,10);
		LCD_vidDisplayChar_4bit(&lcd,' ');
		for(u8 row=1;row<=4;row++)
		{
			
			for(u8 col=0;col<=18;col++)
 6b2:	cf 5f       	subi	r28, 0xFF	; 255
 6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <main+0x176>
 6b6:	c0 e0       	ldi	r28, 0x00	; 0
 6b8:	c3 31       	cpi	r28, 0x13	; 19
 6ba:	88 f2       	brcs	.-94     	; 0x65e <main+0x11c>
					LCD_vidDisplayChar_4bit(&lcd,'_');
					LCD_vidDisplayChar_4bit(&lcd,1);
					_delay_ms(100);
				}
			}
			LCD_vidGotoXY_4bit(&lcd,row,19);
 6bc:	43 e1       	ldi	r20, 0x13	; 19
 6be:	6d 2f       	mov	r22, r29
 6c0:	80 e6       	ldi	r24, 0x60	; 96
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
			LCD_vidDisplayChar_4bit(&lcd,'_');
 6c8:	6f e5       	ldi	r22, 0x5F	; 95
 6ca:	80 e6       	ldi	r24, 0x60	; 96
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
			LCD_vidDisplayChar_4bit(&lcd,'_');
		}//1e
		//2s
		LCD_vidGotoXY_4bit(&lcd,1,10);
		LCD_vidDisplayChar_4bit(&lcd,' ');
		for(u8 row=1;row<=4;row++)
 6d2:	df 5f       	subi	r29, 0xFF	; 255
 6d4:	d5 30       	cpi	r29, 0x05	; 5
 6d6:	78 f3       	brcs	.-34     	; 0x6b6 <main+0x174>
			}
			LCD_vidGotoXY_4bit(&lcd,row,19);
			LCD_vidDisplayChar_4bit(&lcd,'_');
		}//2e
		//3
		LCD_vidGotoXY_4bit(&lcd,1,10);
 6d8:	4a e0       	ldi	r20, 0x0A	; 10
 6da:	61 e0       	ldi	r22, 0x01	; 1
 6dc:	80 e6       	ldi	r24, 0x60	; 96
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
		LCD_vidDisplayChar_4bit(&lcd,'_');
 6e4:	6f e5       	ldi	r22, 0x5F	; 95
 6e6:	80 e6       	ldi	r24, 0x60	; 96
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
		LCD_vidGotoXY_4bit(&lcd,3,10);
 6ee:	4a e0       	ldi	r20, 0x0A	; 10
 6f0:	63 e0       	ldi	r22, 0x03	; 3
 6f2:	80 e6       	ldi	r24, 0x60	; 96
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
		LCD_vidDisplayChar_4bit(&lcd,' ');
 6fa:	60 e2       	ldi	r22, 0x20	; 32
 6fc:	80 e6       	ldi	r24, 0x60	; 96
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
		LCD_vidGotoXY_4bit(&lcd,4,10);
 704:	4a e0       	ldi	r20, 0x0A	; 10
 706:	64 e0       	ldi	r22, 0x04	; 4
 708:	80 e6       	ldi	r24, 0x60	; 96
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
		LCD_vidDisplayChar_4bit(&lcd,'/');
 710:	6f e2       	ldi	r22, 0x2F	; 47
 712:	80 e6       	ldi	r24, 0x60	; 96
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
		LCD_vidGotoXY_4bit(&lcd,4,1);
 71a:	41 e0       	ldi	r20, 0x01	; 1
 71c:	64 e0       	ldi	r22, 0x04	; 4
 71e:	80 e6       	ldi	r24, 0x60	; 96
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
		u8 row=4;
		for(u8 col=0;col<=18;col++)
 726:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_vidGotoXY_4bit(&lcd,3,10);
		LCD_vidDisplayChar_4bit(&lcd,' ');
		LCD_vidGotoXY_4bit(&lcd,4,10);
		LCD_vidDisplayChar_4bit(&lcd,'/');
		LCD_vidGotoXY_4bit(&lcd,4,1);
		u8 row=4;
 728:	d4 e0       	ldi	r29, 0x04	; 4
		for(u8 col=0;col<=18;col++)
 72a:	3f c0       	rjmp	.+126    	; 0x7aa <main+0x268>
		{
			
			if(col==10)
 72c:	ca 30       	cpi	r28, 0x0A	; 10
 72e:	19 f5       	brne	.+70     	; 0x776 <main+0x234>
			{
				LCD_vidGotoXY_4bit(&lcd,4,10);
 730:	4a e0       	ldi	r20, 0x0A	; 10
 732:	64 e0       	ldi	r22, 0x04	; 4
 734:	80 e6       	ldi	r24, 0x60	; 96
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
				LCD_vidDisplayChar_4bit(&lcd,'_');
 73c:	6f e5       	ldi	r22, 0x5F	; 95
 73e:	80 e6       	ldi	r24, 0x60	; 96
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
				LCD_vidGotoXY_4bit(&lcd,3,10);
 746:	4a e0       	ldi	r20, 0x0A	; 10
 748:	63 e0       	ldi	r22, 0x03	; 3
 74a:	80 e6       	ldi	r24, 0x60	; 96
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
				LCD_vidDisplayChar_4bit(&lcd,1);
 752:	61 e0       	ldi	r22, 0x01	; 1
 754:	80 e6       	ldi	r24, 0x60	; 96
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
				row=3;
				LCD_vidGotoXY_4bit(&lcd,3,10);
 75c:	4a e0       	ldi	r20, 0x0A	; 10
 75e:	63 e0       	ldi	r22, 0x03	; 3
 760:	80 e6       	ldi	r24, 0x60	; 96
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
				LCD_vidDisplayChar_4bit(&lcd,' ');
 768:	60 e2       	ldi	r22, 0x20	; 32
 76a:	80 e6       	ldi	r24, 0x60	; 96
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
			{
				LCD_vidGotoXY_4bit(&lcd,4,10);
				LCD_vidDisplayChar_4bit(&lcd,'_');
				LCD_vidGotoXY_4bit(&lcd,3,10);
				LCD_vidDisplayChar_4bit(&lcd,1);
				row=3;
 772:	d3 e0       	ldi	r29, 0x03	; 3
 774:	19 c0       	rjmp	.+50     	; 0x7a8 <main+0x266>
				LCD_vidDisplayChar_4bit(&lcd,' ');

			}
			else
			{
				LCD_vidGotoXY_4bit(&lcd,row,col);
 776:	4c 2f       	mov	r20, r28
 778:	6d 2f       	mov	r22, r29
 77a:	80 e6       	ldi	r24, 0x60	; 96
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
				LCD_vidDisplayChar_4bit(&lcd,'_');
 782:	6f e5       	ldi	r22, 0x5F	; 95
 784:	80 e6       	ldi	r24, 0x60	; 96
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
				LCD_vidDisplayChar_4bit(&lcd,1);
 78c:	61 e0       	ldi	r22, 0x01	; 1
 78e:	80 e6       	ldi	r24, 0x60	; 96
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
 796:	2f ef       	ldi	r18, 0xFF	; 255
 798:	81 ee       	ldi	r24, 0xE1	; 225
 79a:	94 e0       	ldi	r25, 0x04	; 4
 79c:	21 50       	subi	r18, 0x01	; 1
 79e:	80 40       	sbci	r24, 0x00	; 0
 7a0:	90 40       	sbci	r25, 0x00	; 0
 7a2:	e1 f7       	brne	.-8      	; 0x79c <main+0x25a>
 7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <main+0x264>
 7a6:	00 00       	nop
		LCD_vidDisplayChar_4bit(&lcd,' ');
		LCD_vidGotoXY_4bit(&lcd,4,10);
		LCD_vidDisplayChar_4bit(&lcd,'/');
		LCD_vidGotoXY_4bit(&lcd,4,1);
		u8 row=4;
		for(u8 col=0;col<=18;col++)
 7a8:	cf 5f       	subi	r28, 0xFF	; 255
 7aa:	c3 31       	cpi	r28, 0x13	; 19
 7ac:	08 f4       	brcc	.+2      	; 0x7b0 <main+0x26e>
 7ae:	be cf       	rjmp	.-132    	; 0x72c <main+0x1ea>
				LCD_vidDisplayChar_4bit(&lcd,'_');
				LCD_vidDisplayChar_4bit(&lcd,1);
				_delay_ms(100);
			}
		}
		LCD_vidGotoXY_4bit(&lcd,3,19);
 7b0:	43 e1       	ldi	r20, 0x13	; 19
 7b2:	63 e0       	ldi	r22, 0x03	; 3
 7b4:	80 e6       	ldi	r24, 0x60	; 96
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
		LCD_vidDisplayChar_4bit(&lcd,'_');
 7bc:	6f e5       	ldi	r22, 0x5F	; 95
 7be:	80 e6       	ldi	r24, 0x60	; 96
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
		LCD_vidGotoXY_4bit(&lcd,3,10);
 7c6:	4a e0       	ldi	r20, 0x0A	; 10
 7c8:	63 e0       	ldi	r22, 0x03	; 3
 7ca:	80 e6       	ldi	r24, 0x60	; 96
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
		LCD_vidDisplayChar_4bit(&lcd,'|');
 7d2:	6c e7       	ldi	r22, 0x7C	; 124
 7d4:	80 e6       	ldi	r24, 0x60	; 96
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
		for(u8 finalcol=0;finalcol<10;finalcol++)
 7dc:	c0 e0       	ldi	r28, 0x00	; 0
 7de:	1a c0       	rjmp	.+52     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
		{
			LCD_vidGotoXY_4bit(&lcd,3,finalcol);
 7e0:	4c 2f       	mov	r20, r28
 7e2:	63 e0       	ldi	r22, 0x03	; 3
 7e4:	80 e6       	ldi	r24, 0x60	; 96
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
			LCD_vidDisplayChar_4bit(&lcd,'_');
 7ec:	6f e5       	ldi	r22, 0x5F	; 95
 7ee:	80 e6       	ldi	r24, 0x60	; 96
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
			LCD_vidDisplayChar_4bit(&lcd,1);
 7f6:	61 e0       	ldi	r22, 0x01	; 1
 7f8:	80 e6       	ldi	r24, 0x60	; 96
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_vidDisplayChar_4bit>
 800:	2f ef       	ldi	r18, 0xFF	; 255
 802:	81 ee       	ldi	r24, 0xE1	; 225
 804:	94 e0       	ldi	r25, 0x04	; 4
 806:	21 50       	subi	r18, 0x01	; 1
 808:	80 40       	sbci	r24, 0x00	; 0
 80a:	90 40       	sbci	r25, 0x00	; 0
 80c:	e1 f7       	brne	.-8      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 80e:	00 c0       	rjmp	.+0      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 810:	00 00       	nop
		}
		LCD_vidGotoXY_4bit(&lcd,3,19);
		LCD_vidDisplayChar_4bit(&lcd,'_');
		LCD_vidGotoXY_4bit(&lcd,3,10);
		LCD_vidDisplayChar_4bit(&lcd,'|');
		for(u8 finalcol=0;finalcol<10;finalcol++)
 812:	cf 5f       	subi	r28, 0xFF	; 255
 814:	ca 30       	cpi	r28, 0x0A	; 10
 816:	20 f3       	brcs	.-56     	; 0x7e0 <main+0x29e>
			_delay_ms(100);
		}
		break;
		
	}
	LCD_vidSendcommand_4bit(&lcd,LCD_CLEAR_DISPLAY);
 818:	61 e0       	ldi	r22, 0x01	; 1
 81a:	80 e6       	ldi	r24, 0x60	; 96
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 06 01 	call	0x20c	; 0x20c <LCD_vidSendcommand_4bit>
	LCD_vidGotoXY_4bit(&lcd,2,6);
 822:	46 e0       	ldi	r20, 0x06	; 6
 824:	62 e0       	ldi	r22, 0x02	; 2
 826:	80 e6       	ldi	r24, 0x60	; 96
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_vidGotoXY_4bit>
	LCD_vidDisplayString_4bit(&lcd,"GAME OVER");
 82e:	60 e7       	ldi	r22, 0x70	; 112
 830:	70 e0       	ldi	r23, 0x00	; 0
 832:	80 e6       	ldi	r24, 0x60	; 96
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_vidDisplayString_4bit>
	
}
 83a:	80 e0       	ldi	r24, 0x00	; 0
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	08 95       	ret

00000844 <Dio_enuWriteChannel>:
 *          E_DIO_OK:  the function done successfully 
 *         	E_DIO_PIN_OUT_OF_RANGE: invalid pin number
 */
Dio_tenuErrorStatus Dio_enuWriteChannel (Dio_tenuPins Copy_u8ChannelId, DIO_tenuLogicLevel Copy_u8Level){
	Dio_tenuErrorStatus DIO_FN_E_ST=E_DIO_OK;
	if (Copy_u8ChannelId>31||Copy_u8ChannelId<0)
 844:	80 32       	cpi	r24, 0x20	; 32
 846:	b0 f5       	brcc	.+108    	; 0x8b4 <__stack+0x55>
	{
		DIO_FN_E_ST=E_DIO_PIN_OUT_OF_RANGE;
	}
	else
	{
		u8 DIO_Local_Port=Copy_u8ChannelId/8; //get the port no
 848:	e8 2f       	mov	r30, r24
 84a:	e6 95       	lsr	r30
 84c:	e6 95       	lsr	r30
 84e:	e6 95       	lsr	r30
		u8 DIO_Local_Pin=Copy_u8ChannelId%8; //get the pin no in the port
 850:	87 70       	andi	r24, 0x07	; 7
		switch(Copy_u8Level)
 852:	66 23       	and	r22, r22
 854:	c1 f0       	breq	.+48     	; 0x886 <__stack+0x27>
 856:	61 30       	cpi	r22, 0x01	; 1
 858:	79 f5       	brne	.+94     	; 0x8b8 <__stack+0x59>
		{
			case DIO_PIN_HIGH :
			SET_BIT(*PORT_REG_ARR[DIO_Local_Port],DIO_Local_Pin);
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	ee 0f       	add	r30, r30
 85e:	ff 1f       	adc	r31, r31
 860:	e1 57       	subi	r30, 0x71	; 113
 862:	ff 4f       	sbci	r31, 0xFF	; 255
 864:	01 90       	ld	r0, Z+
 866:	f0 81       	ld	r31, Z
 868:	e0 2d       	mov	r30, r0
 86a:	40 81       	ld	r20, Z
 86c:	21 e0       	ldi	r18, 0x01	; 1
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	b9 01       	movw	r22, r18
 872:	02 c0       	rjmp	.+4      	; 0x878 <__stack+0x19>
 874:	66 0f       	add	r22, r22
 876:	77 1f       	adc	r23, r23
 878:	8a 95       	dec	r24
 87a:	e2 f7       	brpl	.-8      	; 0x874 <__stack+0x15>
 87c:	cb 01       	movw	r24, r22
 87e:	84 2b       	or	r24, r20
 880:	80 83       	st	Z, r24
 * @return Error_st of the function
 *          E_DIO_OK:  the function done successfully 
 *         	E_DIO_PIN_OUT_OF_RANGE: invalid pin number
 */
Dio_tenuErrorStatus Dio_enuWriteChannel (Dio_tenuPins Copy_u8ChannelId, DIO_tenuLogicLevel Copy_u8Level){
	Dio_tenuErrorStatus DIO_FN_E_ST=E_DIO_OK;
 882:	82 e0       	ldi	r24, 0x02	; 2
		u8 DIO_Local_Pin=Copy_u8ChannelId%8; //get the pin no in the port
		switch(Copy_u8Level)
		{
			case DIO_PIN_HIGH :
			SET_BIT(*PORT_REG_ARR[DIO_Local_Port],DIO_Local_Pin);
			break;
 884:	08 95       	ret
			case DIO_PIN_LOW:
			CLR_BIT(*PORT_REG_ARR[DIO_Local_Port],DIO_Local_Pin);
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	ee 0f       	add	r30, r30
 88a:	ff 1f       	adc	r31, r31
 88c:	e1 57       	subi	r30, 0x71	; 113
 88e:	ff 4f       	sbci	r31, 0xFF	; 255
 890:	01 90       	ld	r0, Z+
 892:	f0 81       	ld	r31, Z
 894:	e0 2d       	mov	r30, r0
 896:	40 81       	ld	r20, Z
 898:	21 e0       	ldi	r18, 0x01	; 1
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	b9 01       	movw	r22, r18
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__stack+0x45>
 8a0:	66 0f       	add	r22, r22
 8a2:	77 1f       	adc	r23, r23
 8a4:	8a 95       	dec	r24
 8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <__stack+0x41>
 8a8:	cb 01       	movw	r24, r22
 8aa:	80 95       	com	r24
 8ac:	84 23       	and	r24, r20
 8ae:	80 83       	st	Z, r24
 * @return Error_st of the function
 *          E_DIO_OK:  the function done successfully 
 *         	E_DIO_PIN_OUT_OF_RANGE: invalid pin number
 */
Dio_tenuErrorStatus Dio_enuWriteChannel (Dio_tenuPins Copy_u8ChannelId, DIO_tenuLogicLevel Copy_u8Level){
	Dio_tenuErrorStatus DIO_FN_E_ST=E_DIO_OK;
 8b0:	82 e0       	ldi	r24, 0x02	; 2
			case DIO_PIN_HIGH :
			SET_BIT(*PORT_REG_ARR[DIO_Local_Port],DIO_Local_Pin);
			break;
			case DIO_PIN_LOW:
			CLR_BIT(*PORT_REG_ARR[DIO_Local_Port],DIO_Local_Pin);
			break;
 8b2:	08 95       	ret
 */
Dio_tenuErrorStatus Dio_enuWriteChannel (Dio_tenuPins Copy_u8ChannelId, DIO_tenuLogicLevel Copy_u8Level){
	Dio_tenuErrorStatus DIO_FN_E_ST=E_DIO_OK;
	if (Copy_u8ChannelId>31||Copy_u8ChannelId<0)
	{
		DIO_FN_E_ST=E_DIO_PIN_OUT_OF_RANGE;
 8b4:	80 e0       	ldi	r24, 0x00	; 0
 8b6:	08 95       	ret
			break;
			case DIO_PIN_LOW:
			CLR_BIT(*PORT_REG_ARR[DIO_Local_Port],DIO_Local_Pin);
			break;
			default:
			DIO_FN_E_ST=E_DIO_WRONG_LOGIC;
 8b8:	83 e0       	ldi	r24, 0x03	; 3
		}
		
	}
	return DIO_FN_E_ST;
	
}
 8ba:	08 95       	ret

000008bc <Port_vidInit>:
	#define PIN_CFG_MODE_OUTPUT_HIGH        1
	#define PIN_CFG_MODE_INPUT_FLOATING     0
	#define PIN_CFG_MODE_INPUT_PULLUP       0

	/*assign values to the DDR register*/
	DDRA=CONC(PIN_A7_ID_7_CFG,PIN_A6_ID_6_CFG,PIN_A5_ID_5_CFG,PIN_A4_ID_4_CFG,PIN_A3_ID_3_CFG,PIN_A2_ID_2_CFG,PIN_A1_ID_1_CFG,PIN_A0_ID_0_CFG);
 8bc:	80 e7       	ldi	r24, 0x70	; 112
 8be:	8a bb       	out	0x1a, r24	; 26
	
	DDRB=CONC(PIN_B7_ID_15_CFG,PIN_B6_ID_14_CFG,PIN_B5_ID_13_CFG,PIN_B4_ID_12_CFG,PIN_B3_ID_11_CFG,PIN_B2_ID_10_CFG,PIN_B1_ID_9_CFG,PIN_B0_ID_8_CFG);
 8c0:	80 e8       	ldi	r24, 0x80	; 128
 8c2:	87 bb       	out	0x17, r24	; 23
	DDRC=CONC(PIN_C7_ID_23_CFG,PIN_C6_ID_22_CFG,PIN_C5_ID_21_CFG,PIN_C4_ID_20_CFG,PIN_C3_ID_19_CFG,PIN_C2_ID_18_CFG,PIN_C1_ID_17_CFG,PIN_C0_ID_16_CFG);
 8c4:	14 ba       	out	0x14, r1	; 20
	DDRD=CONC(PIN_D7_ID_31_CFG,PIN_D6_ID_30_CFG,PIN_D5_ID_29_CFG,PIN_D4_ID_28_CFG,PIN_D3_ID_27_CFG,PIN_D2_ID_26_CFG,PIN_D1_ID_25_CFG,PIN_D0_ID_24_CFG);
 8c6:	11 ba       	out	0x11, r1	; 17
 8c8:	08 95       	ret

000008ca <Port_enuSetpinDirection>:
 *         (E_PIN_OUT_OF_RANGE): the function has issue in input pin id out of range 
 *         (E_WRONG_DIRECTION): the function has issue in the given value of the direction 
 */
Port_tenuErrorStatus Port_enuSetpinDirection(u8 Copy_pin_no,PIN_tenuDirection Copy_pin_direction ){
	Port_tenuErrorStatus Error_st=E_OK;
	if (Copy_pin_no>31||Copy_pin_no<0)
 8ca:	80 32       	cpi	r24, 0x20	; 32
 8cc:	b0 f5       	brcc	.+108    	; 0x93a <Port_enuSetpinDirection+0x70>
	{
		Error_st=E_PIN_OUT_OF_RANGE;
	}
	else
	{
		u8 Local_Port_vlue=Copy_pin_no/8; //get the port no
 8ce:	e8 2f       	mov	r30, r24
 8d0:	e6 95       	lsr	r30
 8d2:	e6 95       	lsr	r30
 8d4:	e6 95       	lsr	r30
		u8 Local_Port_pin=Copy_pin_no%8; //get the pin no in the port
 8d6:	87 70       	andi	r24, 0x07	; 7

		if (Copy_pin_direction==PIN_MODE_OUTPUT)//check if the pin output
 8d8:	61 30       	cpi	r22, 0x01	; 1
 8da:	b1 f4       	brne	.+44     	; 0x908 <Port_enuSetpinDirection+0x3e>
		{
			//SET THE PIN TO BE OUTPUT
			SET_BIT(*DDRR_REG_ARR[Local_Port_vlue],Local_Port_pin);
 8dc:	f0 e0       	ldi	r31, 0x00	; 0
 8de:	ee 0f       	add	r30, r30
 8e0:	ff 1f       	adc	r31, r31
 8e2:	e9 56       	subi	r30, 0x69	; 105
 8e4:	ff 4f       	sbci	r31, 0xFF	; 255
 8e6:	01 90       	ld	r0, Z+
 8e8:	f0 81       	ld	r31, Z
 8ea:	e0 2d       	mov	r30, r0
 8ec:	40 81       	ld	r20, Z
 8ee:	21 e0       	ldi	r18, 0x01	; 1
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	b9 01       	movw	r22, r18
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <Port_enuSetpinDirection+0x30>
 8f6:	66 0f       	add	r22, r22
 8f8:	77 1f       	adc	r23, r23
 8fa:	8a 95       	dec	r24
 8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <Port_enuSetpinDirection+0x2c>
 8fe:	cb 01       	movw	r24, r22
 900:	84 2b       	or	r24, r20
 902:	80 83       	st	Z, r24
 *         (E_OK) : the function done successfully
 *         (E_PIN_OUT_OF_RANGE): the function has issue in input pin id out of range 
 *         (E_WRONG_DIRECTION): the function has issue in the given value of the direction 
 */
Port_tenuErrorStatus Port_enuSetpinDirection(u8 Copy_pin_no,PIN_tenuDirection Copy_pin_direction ){
	Port_tenuErrorStatus Error_st=E_OK;
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	08 95       	ret
		if (Copy_pin_direction==PIN_MODE_OUTPUT)//check if the pin output
		{
			//SET THE PIN TO BE OUTPUT
			SET_BIT(*DDRR_REG_ARR[Local_Port_vlue],Local_Port_pin);
		}
		else if(Copy_pin_direction==PIN_MODE_INPUT)//check if the pin input
 908:	61 11       	cpse	r22, r1
 90a:	19 c0       	rjmp	.+50     	; 0x93e <Port_enuSetpinDirection+0x74>
		{
			//SET THE PIN TO BE INPUT
			CLR_BIT(*DDRR_REG_ARR[Local_Port_vlue],Local_Port_pin);
 90c:	f0 e0       	ldi	r31, 0x00	; 0
 90e:	ee 0f       	add	r30, r30
 910:	ff 1f       	adc	r31, r31
 912:	e9 56       	subi	r30, 0x69	; 105
 914:	ff 4f       	sbci	r31, 0xFF	; 255
 916:	01 90       	ld	r0, Z+
 918:	f0 81       	ld	r31, Z
 91a:	e0 2d       	mov	r30, r0
 91c:	40 81       	ld	r20, Z
 91e:	21 e0       	ldi	r18, 0x01	; 1
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	b9 01       	movw	r22, r18
 924:	02 c0       	rjmp	.+4      	; 0x92a <Port_enuSetpinDirection+0x60>
 926:	66 0f       	add	r22, r22
 928:	77 1f       	adc	r23, r23
 92a:	8a 95       	dec	r24
 92c:	e2 f7       	brpl	.-8      	; 0x926 <Port_enuSetpinDirection+0x5c>
 92e:	cb 01       	movw	r24, r22
 930:	80 95       	com	r24
 932:	84 23       	and	r24, r20
 934:	80 83       	st	Z, r24
 *         (E_OK) : the function done successfully
 *         (E_PIN_OUT_OF_RANGE): the function has issue in input pin id out of range 
 *         (E_WRONG_DIRECTION): the function has issue in the given value of the direction 
 */
Port_tenuErrorStatus Port_enuSetpinDirection(u8 Copy_pin_no,PIN_tenuDirection Copy_pin_direction ){
	Port_tenuErrorStatus Error_st=E_OK;
 936:	81 e0       	ldi	r24, 0x01	; 1
 938:	08 95       	ret
	if (Copy_pin_no>31||Copy_pin_no<0)
	{
		Error_st=E_PIN_OUT_OF_RANGE;
 93a:	80 e0       	ldi	r24, 0x00	; 0
 93c:	08 95       	ret
			//SET THE PIN TO BE INPUT
			CLR_BIT(*DDRR_REG_ARR[Local_Port_vlue],Local_Port_pin);
		}
		else{
			//undefined status
			Error_st=E_WRONG_DIRECTION;
 93e:	82 e0       	ldi	r24, 0x02	; 2
		}
	}

	return Error_st;

}
 940:	08 95       	ret

00000942 <_exit>:
 942:	f8 94       	cli

00000944 <__stop_program>:
 944:	ff cf       	rjmp	.-2      	; 0x944 <__stop_program>
