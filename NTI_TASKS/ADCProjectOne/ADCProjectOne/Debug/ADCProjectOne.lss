
ADCProjectOne.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000095c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000095c  000009f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800074  00800074  00000a04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000185f  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ada  00000000  00000000  00002467  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000103a  00000000  00000000  00002f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  00003f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000922  00000000  00000000  0000430c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e12  00000000  00000000  00004c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00006a40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c9 03 	call	0x792	; 0x792 <main>
  8a:	0c 94 ac 04 	jmp	0x958	; 0x958 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidInit>:
 /*this function initializes the ADC based on configurations in ADC_Config.h file */

void ADC_voidInit(void) 
{
	// ADC Enable
	SET_BIT(ADCSRA,7);
  92:	ea e1       	ldi	r30, 0x1A	; 26
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	80 68       	ori	r24, 0x80	; 128
  9a:	80 83       	st	Z, r24


     
	// Prescaler Configuration as 128
	CLR_BIT(ADCSRA,2);
  9c:	80 81       	ld	r24, Z
  9e:	8b 7f       	andi	r24, 0xFB	; 251
  a0:	80 83       	st	Z, r24
	CLR_BIT(ADCSRA,1);
  a2:	80 81       	ld	r24, Z
  a4:	8d 7f       	andi	r24, 0xFD	; 253
  a6:	80 83       	st	Z, r24
	SET_BIT(ADCSRA,0);
  a8:	80 81       	ld	r24, Z
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	80 83       	st	Z, r24


	//Referance Voltage as AVCC with external capacitor
	CLR_BIT(ADMUX,7);
  ae:	ab e1       	ldi	r26, 0x1B	; 27
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	8c 91       	ld	r24, X
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	8c 93       	st	X, r24
	SET_BIT(ADMUX,6);
  b8:	8c 91       	ld	r24, X
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	8c 93       	st	X, r24

	// ADC Data RIGHT Adjustment
	SET_BIT(ADMUX,5);
  be:	8c 91       	ld	r24, X
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	8c 93       	st	X, r24
    
	/* Enable Interrupt */
	SET_BIT(ADCSRA,3);
  c4:	80 81       	ld	r24, Z
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <ADC_u8StartConversionSynchoronus>:

u8 ADC_u8StartConversionSynchoronus(u8 copy_u8Channel , u8* Copy_u8Reading) 
{
	 u32 Local_u32Counter = 0 ;
     u8 Local_u8ErrorState = OK ;
	if (ADC_u8BusyState == IDLE)
  cc:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
  d0:	91 11       	cpse	r25, r1
  d2:	23 c0       	rjmp	.+70     	; 0x11a <ADC_u8StartConversionSynchoronus+0x4e>
	{
	/* ADC is Now Busy */
	ADC_u8BusyState = BUSY ; 
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__data_end>
	
	/* Clear The MUX BITS IS ADMUX Register */ 
	 ADMUX &= 0b11100000 ; 
  da:	eb e1       	ldi	r30, 0x1B	; 27
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	90 81       	ld	r25, Z
  e0:	90 7e       	andi	r25, 0xE0	; 224
  e2:	90 83       	st	Z, r25
    /* Set The Required Channel Into The MUX Bits */
	 ADMUX |= copy_u8Channel ; 
  e4:	90 81       	ld	r25, Z
  e6:	89 2b       	or	r24, r25
  e8:	80 83       	st	Z, r24
	 
	 /*Start Conversion */ 
	 SET_BIT(ADCSRA , ADCSRA_ADSC ); 
  ea:	ea e1       	ldi	r30, 0x1A	; 26
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	80 83       	st	Z, r24
	 
	 /* POlling (busy Waiting ) until the conversion complete Flag Is set Or Counter Reaching Time OUT */
	 while((GET_BIT(ADCSRA , ADCSRA_ADIF==0 ))&& (Local_u32Counter != ADC_u32TimeOUT));
  f4:	80 81       	ld	r24, Z
  f6:	82 95       	swap	r24
  f8:	8f 70       	andi	r24, 0x0F	; 15
  fa:	e1 f3       	breq	.-8      	; 0xf4 <ADC_u8StartConversionSynchoronus+0x28>
	 }
	 else 
	 {
		
		/* LOOP IS BROKEN Because FLag Is Raised */
		SET_BIT(ADCSRA ,ADCSRA_ADIF);
  fc:	ea e1       	ldi	r30, 0x1A	; 26
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 61       	ori	r24, 0x10	; 16
 104:	80 83       	st	Z, r24
	    
		/* Return_The_Reading */
		 *Copy_u8Reading = ADC ;
 106:	80 91 18 00 	lds	r24, 0x0018	; 0x800018 <__TEXT_REGION_LENGTH__+0x7e0018>
 10a:	90 91 19 00 	lds	r25, 0x0019	; 0x800019 <__TEXT_REGION_LENGTH__+0x7e0019>
 10e:	fb 01       	movw	r30, r22
 110:	80 83       	st	Z, r24
		 
		 
		 /*ADC IS Finished , Return To IDLE */ 
		 ADC_u8BusyState = IDLE ; 
 112:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>


u8 ADC_u8StartConversionSynchoronus(u8 copy_u8Channel , u8* Copy_u8Reading) 
{
	 u32 Local_u32Counter = 0 ;
     u8 Local_u8ErrorState = OK ;
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	08 95       	ret
		 ADC_u8BusyState = IDLE ; 
	 }
	}
	else 
	{
		Local_u8ErrorState = BUSY_FUNCTION ; 
 11a:	83 e0       	ldi	r24, 0x03	; 3
	}

	 return Local_u8ErrorState ; 
	 
	 
} 
 11c:	08 95       	ret

0000011e <Dio_enuWriteChannel>:

	u8 LOC_u8Port;

	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {
 11e:	80 32       	cpi	r24, 0x20	; 32
 120:	08 f0       	brcs	.+2      	; 0x124 <Dio_enuWriteChannel+0x6>
 122:	c1 c0       	rjmp	.+386    	; 0x2a6 <Dio_enuWriteChannel+0x188>

		LOC_enuReturnStatus = Dio_enuChannelError;
	}

	else if (Copy_u8Level > DIO_u8NUMBER_OF_LEVELS) {
 124:	63 30       	cpi	r22, 0x03	; 3
 126:	08 f0       	brcs	.+2      	; 0x12a <Dio_enuWriteChannel+0xc>
 128:	c0 c0       	rjmp	.+384    	; 0x2aa <Dio_enuWriteChannel+0x18c>
	}

	else {

		LOC_u8Port = Copy_u8ChannelId / DIO_u8REGISTER_SIZE;
		LOC_u8Pin = Copy_u8ChannelId % DIO_u8REGISTER_SIZE;
 12a:	98 2f       	mov	r25, r24
 12c:	97 70       	andi	r25, 0x07	; 7

		switch (LOC_u8Port) {
 12e:	86 95       	lsr	r24
 130:	86 95       	lsr	r24
 132:	86 95       	lsr	r24
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	a1 f1       	breq	.+104    	; 0x1a0 <Dio_enuWriteChannel+0x82>
 138:	38 f0       	brcs	.+14     	; 0x148 <Dio_enuWriteChannel+0x2a>
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	09 f4       	brne	.+2      	; 0x140 <Dio_enuWriteChannel+0x22>
 13e:	5c c0       	rjmp	.+184    	; 0x1f8 <Dio_enuWriteChannel+0xda>
 140:	83 30       	cpi	r24, 0x03	; 3
 142:	09 f4       	brne	.+2      	; 0x146 <Dio_enuWriteChannel+0x28>
 144:	85 c0       	rjmp	.+266    	; 0x250 <Dio_enuWriteChannel+0x132>
 146:	b3 c0       	rjmp	.+358    	; 0x2ae <Dio_enuWriteChannel+0x190>

		case DIO_u8PORTA:
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
 148:	2a b3       	in	r18, 0x1a	; 26
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	09 2e       	mov	r0, r25
 14e:	02 c0       	rjmp	.+4      	; 0x154 <Dio_enuWriteChannel+0x36>
 150:	35 95       	asr	r19
 152:	27 95       	ror	r18
 154:	0a 94       	dec	r0
 156:	e2 f7       	brpl	.-8      	; 0x150 <Dio_enuWriteChannel+0x32>
 158:	20 ff       	sbrs	r18, 0
 15a:	ab c0       	rjmp	.+342    	; 0x2b2 <Dio_enuWriteChannel+0x194>
				switch (Copy_u8Level) {
 15c:	66 23       	and	r22, r22
 15e:	89 f0       	breq	.+34     	; 0x182 <Dio_enuWriteChannel+0x64>
 160:	61 30       	cpi	r22, 0x01	; 1
 162:	09 f0       	breq	.+2      	; 0x166 <Dio_enuWriteChannel+0x48>
 164:	a8 c0       	rjmp	.+336    	; 0x2b6 <Dio_enuWriteChannel+0x198>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTA, LOC_u8Pin);
 166:	4b b3       	in	r20, 0x1b	; 27
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	b9 01       	movw	r22, r18
 16e:	02 c0       	rjmp	.+4      	; 0x174 <Dio_enuWriteChannel+0x56>
 170:	66 0f       	add	r22, r22
 172:	77 1f       	adc	r23, r23
 174:	9a 95       	dec	r25
 176:	e2 f7       	brpl	.-8      	; 0x170 <Dio_enuWriteChannel+0x52>
 178:	cb 01       	movw	r24, r22
 17a:	84 2b       	or	r24, r20
 17c:	8b bb       	out	0x1b, r24	; 27
			
#include <avr/io.h>			

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 17e:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTA, LOC_u8Pin);
					break;
 180:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTA, LOC_u8Pin);
 182:	4b b3       	in	r20, 0x1b	; 27
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	b9 01       	movw	r22, r18
 18a:	02 c0       	rjmp	.+4      	; 0x190 <Dio_enuWriteChannel+0x72>
 18c:	66 0f       	add	r22, r22
 18e:	77 1f       	adc	r23, r23
 190:	9a 95       	dec	r25
 192:	e2 f7       	brpl	.-8      	; 0x18c <Dio_enuWriteChannel+0x6e>
 194:	cb 01       	movw	r24, r22
 196:	80 95       	com	r24
 198:	84 23       	and	r24, r20
 19a:	8b bb       	out	0x1b, r24	; 27
			
#include <avr/io.h>			

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 19c:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTA, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTA, LOC_u8Pin);
					break;
 19e:	08 95       	ret
			}
			break;

		case DIO_u8PORTB:

			if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
 1a0:	27 b3       	in	r18, 0x17	; 23
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	09 2e       	mov	r0, r25
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <Dio_enuWriteChannel+0x8e>
 1a8:	35 95       	asr	r19
 1aa:	27 95       	ror	r18
 1ac:	0a 94       	dec	r0
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <Dio_enuWriteChannel+0x8a>
 1b0:	20 ff       	sbrs	r18, 0
 1b2:	83 c0       	rjmp	.+262    	; 0x2ba <Dio_enuWriteChannel+0x19c>
				switch (Copy_u8Level) {
 1b4:	66 23       	and	r22, r22
 1b6:	89 f0       	breq	.+34     	; 0x1da <Dio_enuWriteChannel+0xbc>
 1b8:	61 30       	cpi	r22, 0x01	; 1
 1ba:	09 f0       	breq	.+2      	; 0x1be <Dio_enuWriteChannel+0xa0>
 1bc:	80 c0       	rjmp	.+256    	; 0x2be <Dio_enuWriteChannel+0x1a0>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTB, LOC_u8Pin);
 1be:	48 b3       	in	r20, 0x18	; 24
 1c0:	21 e0       	ldi	r18, 0x01	; 1
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	b9 01       	movw	r22, r18
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <Dio_enuWriteChannel+0xae>
 1c8:	66 0f       	add	r22, r22
 1ca:	77 1f       	adc	r23, r23
 1cc:	9a 95       	dec	r25
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <Dio_enuWriteChannel+0xaa>
 1d0:	cb 01       	movw	r24, r22
 1d2:	84 2b       	or	r24, r20
 1d4:	88 bb       	out	0x18, r24	; 24
			
#include <avr/io.h>			

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 1d6:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTB, LOC_u8Pin);
					break;
 1d8:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTB, LOC_u8Pin);
 1da:	48 b3       	in	r20, 0x18	; 24
 1dc:	21 e0       	ldi	r18, 0x01	; 1
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	b9 01       	movw	r22, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <Dio_enuWriteChannel+0xca>
 1e4:	66 0f       	add	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	9a 95       	dec	r25
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <Dio_enuWriteChannel+0xc6>
 1ec:	cb 01       	movw	r24, r22
 1ee:	80 95       	com	r24
 1f0:	84 23       	and	r24, r20
 1f2:	88 bb       	out	0x18, r24	; 24
			
#include <avr/io.h>			

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 1f4:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTB, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTB, LOC_u8Pin);
					break;
 1f6:	08 95       	ret

			break;

		case DIO_u8PORTC:

			if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
 1f8:	24 b3       	in	r18, 0x14	; 20
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	09 2e       	mov	r0, r25
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <Dio_enuWriteChannel+0xe6>
 200:	35 95       	asr	r19
 202:	27 95       	ror	r18
 204:	0a 94       	dec	r0
 206:	e2 f7       	brpl	.-8      	; 0x200 <Dio_enuWriteChannel+0xe2>
 208:	20 ff       	sbrs	r18, 0
 20a:	5b c0       	rjmp	.+182    	; 0x2c2 <Dio_enuWriteChannel+0x1a4>
				switch (Copy_u8Level) {
 20c:	66 23       	and	r22, r22
 20e:	89 f0       	breq	.+34     	; 0x232 <Dio_enuWriteChannel+0x114>
 210:	61 30       	cpi	r22, 0x01	; 1
 212:	09 f0       	breq	.+2      	; 0x216 <Dio_enuWriteChannel+0xf8>
 214:	58 c0       	rjmp	.+176    	; 0x2c6 <Dio_enuWriteChannel+0x1a8>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTC, LOC_u8Pin);
 216:	45 b3       	in	r20, 0x15	; 21
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	b9 01       	movw	r22, r18
 21e:	02 c0       	rjmp	.+4      	; 0x224 <Dio_enuWriteChannel+0x106>
 220:	66 0f       	add	r22, r22
 222:	77 1f       	adc	r23, r23
 224:	9a 95       	dec	r25
 226:	e2 f7       	brpl	.-8      	; 0x220 <Dio_enuWriteChannel+0x102>
 228:	cb 01       	movw	r24, r22
 22a:	84 2b       	or	r24, r20
 22c:	85 bb       	out	0x15, r24	; 21
			
#include <avr/io.h>			

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 22e:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTC, LOC_u8Pin);
					break;
 230:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTC, LOC_u8Pin);
 232:	45 b3       	in	r20, 0x15	; 21
 234:	21 e0       	ldi	r18, 0x01	; 1
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	b9 01       	movw	r22, r18
 23a:	02 c0       	rjmp	.+4      	; 0x240 <Dio_enuWriteChannel+0x122>
 23c:	66 0f       	add	r22, r22
 23e:	77 1f       	adc	r23, r23
 240:	9a 95       	dec	r25
 242:	e2 f7       	brpl	.-8      	; 0x23c <Dio_enuWriteChannel+0x11e>
 244:	cb 01       	movw	r24, r22
 246:	80 95       	com	r24
 248:	84 23       	and	r24, r20
 24a:	85 bb       	out	0x15, r24	; 21
			
#include <avr/io.h>			

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 24c:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTC, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTC, LOC_u8Pin);
					break;
 24e:	08 95       	ret
			}
			break;

		case DIO_u8PORTD:

			if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
 250:	21 b3       	in	r18, 0x11	; 17
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	09 2e       	mov	r0, r25
 256:	02 c0       	rjmp	.+4      	; 0x25c <Dio_enuWriteChannel+0x13e>
 258:	35 95       	asr	r19
 25a:	27 95       	ror	r18
 25c:	0a 94       	dec	r0
 25e:	e2 f7       	brpl	.-8      	; 0x258 <Dio_enuWriteChannel+0x13a>
 260:	20 ff       	sbrs	r18, 0
 262:	33 c0       	rjmp	.+102    	; 0x2ca <Dio_enuWriteChannel+0x1ac>
				switch (Copy_u8Level) {
 264:	66 23       	and	r22, r22
 266:	81 f0       	breq	.+32     	; 0x288 <Dio_enuWriteChannel+0x16a>
 268:	61 30       	cpi	r22, 0x01	; 1
 26a:	89 f5       	brne	.+98     	; 0x2ce <Dio_enuWriteChannel+0x1b0>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTD, LOC_u8Pin);
 26c:	42 b3       	in	r20, 0x12	; 18
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	b9 01       	movw	r22, r18
 274:	02 c0       	rjmp	.+4      	; 0x27a <Dio_enuWriteChannel+0x15c>
 276:	66 0f       	add	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	9a 95       	dec	r25
 27c:	e2 f7       	brpl	.-8      	; 0x276 <Dio_enuWriteChannel+0x158>
 27e:	cb 01       	movw	r24, r22
 280:	84 2b       	or	r24, r20
 282:	82 bb       	out	0x12, r24	; 18
			
#include <avr/io.h>			

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 284:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTD, LOC_u8Pin);
					break;
 286:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTD, LOC_u8Pin);
 288:	42 b3       	in	r20, 0x12	; 18
 28a:	21 e0       	ldi	r18, 0x01	; 1
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	b9 01       	movw	r22, r18
 290:	02 c0       	rjmp	.+4      	; 0x296 <Dio_enuWriteChannel+0x178>
 292:	66 0f       	add	r22, r22
 294:	77 1f       	adc	r23, r23
 296:	9a 95       	dec	r25
 298:	e2 f7       	brpl	.-8      	; 0x292 <Dio_enuWriteChannel+0x174>
 29a:	cb 01       	movw	r24, r22
 29c:	80 95       	com	r24
 29e:	84 23       	and	r24, r20
 2a0:	82 bb       	out	0x12, r24	; 18
			
#include <avr/io.h>			

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2a2:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTD, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTD, LOC_u8Pin);
					break;
 2a4:	08 95       	ret

	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {

		LOC_enuReturnStatus = Dio_enuChannelError;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	08 95       	ret
	}

	else if (Copy_u8Level > DIO_u8NUMBER_OF_LEVELS) {

		LOC_enuReturnStatus = Dio_enuLevelError;
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	08 95       	ret
			
#include <avr/io.h>			

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	08 95       	ret
					CLR_BIT(PORTA, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 2b2:	83 e0       	ldi	r24, 0x03	; 3
 2b4:	08 95       	ret
			
#include <avr/io.h>			

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	08 95       	ret
					CLR_BIT(PORTB, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 2ba:	83 e0       	ldi	r24, 0x03	; 3
 2bc:	08 95       	ret
			
#include <avr/io.h>			

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	08 95       	ret
					CLR_BIT(PORTC, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	08 95       	ret
			
#include <avr/io.h>			

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	08 95       	ret
					CLR_BIT(PORTD, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 2ca:	83 e0       	ldi	r24, 0x03	; 3
 2cc:	08 95       	ret
			
#include <avr/io.h>			

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2ce:	80 e0       	ldi	r24, 0x00	; 0

		}

	}
	return LOC_enuReturnStatus;
}
 2d0:	08 95       	ret

000002d2 <ExtI_voidInitialize>:
	if (GET_BIT(GIFR,INTF0) == ENABLED){
          return ENABLED;
	}
	else
		return DISABLED;
}
 2d2:	8b b7       	in	r24, 0x3b	; 59
 2d4:	80 64       	ori	r24, 0x40	; 64
 2d6:	8b bf       	out	0x3b, r24	; 59
 2d8:	85 b7       	in	r24, 0x35	; 53
 2da:	8e 7f       	andi	r24, 0xFE	; 254
 2dc:	85 bf       	out	0x35, r24	; 53
 2de:	85 b7       	in	r24, 0x35	; 53
 2e0:	82 60       	ori	r24, 0x02	; 2
 2e2:	85 bf       	out	0x35, r24	; 53
 2e4:	08 95       	ret

000002e6 <ExtI_voidSetCallBack>:

void ExtI_voidSetCallBack(void (* I_ptr)(void)){
     Ext_INT0_ptr = I_ptr;
 2e6:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <Ext_INT0_ptr+0x1>
 2ea:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <Ext_INT0_ptr>
 2ee:	08 95       	ret

000002f0 <__vector_1>:
}



void __vector_1(void)__attribute((signal,used));
void __vector_1(void) {
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	2f 93       	push	r18
 2fc:	3f 93       	push	r19
 2fe:	4f 93       	push	r20
 300:	5f 93       	push	r21
 302:	6f 93       	push	r22
 304:	7f 93       	push	r23
 306:	8f 93       	push	r24
 308:	9f 93       	push	r25
 30a:	af 93       	push	r26
 30c:	bf 93       	push	r27
 30e:	ef 93       	push	r30
 310:	ff 93       	push	r31
	Ext_INT0_ptr();
 312:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <Ext_INT0_ptr>
 316:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <Ext_INT0_ptr+0x1>
 31a:	09 95       	icall
}
 31c:	ff 91       	pop	r31
 31e:	ef 91       	pop	r30
 320:	bf 91       	pop	r27
 322:	af 91       	pop	r26
 324:	9f 91       	pop	r25
 326:	8f 91       	pop	r24
 328:	7f 91       	pop	r23
 32a:	6f 91       	pop	r22
 32c:	5f 91       	pop	r21
 32e:	4f 91       	pop	r20
 330:	3f 91       	pop	r19
 332:	2f 91       	pop	r18
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <GIE_voidEnableGlobalInterrupt>:
#include "GI_Config.h"
#include "GI_Int.h"


GIE_voidEnableGlobalInterrupt(void){
	SET_BIT(SREG,I);
 33e:	8f b7       	in	r24, 0x3f	; 63
 340:	80 68       	ori	r24, 0x80	; 128
 342:	8f bf       	out	0x3f, r24	; 63
}
 344:	08 95       	ret

00000346 <LCD_vidSendCommand>:
/* Description! Interface to send the configuration commands to the LCD Driver         */
/* Input      ! Command number                                                         */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidSendCommand(u8 u8CmdCpy)
{
 346:	cf 93       	push	r28
 348:	c8 2f       	mov	r28, r24

	/* Set RS to LOW */
	Dio_enuWriteChannel(RS_PIN, DIO_u8LEVEL_LOW);
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	88 e0       	ldi	r24, 0x08	; 8
 34e:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>

	/* Set R/W to LOW */
	Dio_enuWriteChannel(RW_PIN, DIO_u8LEVEL_LOW);
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	89 e0       	ldi	r24, 0x09	; 9
 356:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35a:	89 ef       	ldi	r24, 0xF9	; 249
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <LCD_vidSendCommand+0x18>
 362:	00 c0       	rjmp	.+0      	; 0x364 <LCD_vidSendCommand+0x1e>
 364:	00 00       	nop

	/* Set E to HIGH  */	
	_delay_ms(1);
	Dio_enuWriteChannel(EN_PIN , DIO_u8LEVEL_HIGH);
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	8a e0       	ldi	r24, 0x0A	; 10
 36a:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>

	/* Load Command on Data bus */
	   
	Dio_enuWriteChannel(DATA_PIN4 , GET_BIT(u8CmdCpy ,4)) ;
 36e:	c4 fb       	bst	r28, 4
 370:	66 27       	eor	r22, r22
 372:	60 f9       	bld	r22, 0
 374:	80 e1       	ldi	r24, 0x10	; 16
 376:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
	Dio_enuWriteChannel(DATA_PIN5 , GET_BIT(u8CmdCpy ,5)) ;
 37a:	c5 fb       	bst	r28, 5
 37c:	66 27       	eor	r22, r22
 37e:	60 f9       	bld	r22, 0
 380:	81 e1       	ldi	r24, 0x11	; 17
 382:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
	Dio_enuWriteChannel(DATA_PIN6 , GET_BIT(u8CmdCpy ,6)) ;
 386:	c6 fb       	bst	r28, 6
 388:	66 27       	eor	r22, r22
 38a:	60 f9       	bld	r22, 0
 38c:	82 e1       	ldi	r24, 0x12	; 18
 38e:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
	Dio_enuWriteChannel(DATA_PIN7 , GET_BIT(u8CmdCpy ,7)) ;
 392:	6c 2f       	mov	r22, r28
 394:	66 1f       	adc	r22, r22
 396:	66 27       	eor	r22, r22
 398:	66 1f       	adc	r22, r22
 39a:	83 e1       	ldi	r24, 0x13	; 19
 39c:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
 3a0:	89 ef       	ldi	r24, 0xF9	; 249
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <LCD_vidSendCommand+0x5e>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <LCD_vidSendCommand+0x64>
 3aa:	00 00       	nop
	
	_delay_ms(1);
	
	Dio_enuWriteChannel(EN_PIN , DIO_u8LEVEL_LOW);
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	8a e0       	ldi	r24, 0x0A	; 10
 3b0:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
 3b4:	89 ef       	ldi	r24, 0xF9	; 249
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <LCD_vidSendCommand+0x72>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <LCD_vidSendCommand+0x78>
 3be:	00 00       	nop
	
	_delay_ms(1);

	/* Set E to LOW */	
	Dio_enuWriteChannel(EN_PIN, DIO_u8LEVEL_HIGH);
 3c0:	61 e0       	ldi	r22, 0x01	; 1
 3c2:	8a e0       	ldi	r24, 0x0A	; 10
 3c4:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
 3c8:	89 ef       	ldi	r24, 0xF9	; 249
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <LCD_vidSendCommand+0x86>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <LCD_vidSendCommand+0x8c>
 3d2:	00 00       	nop
	/* Wait for E to settle */
	_delay_ms(1);

	 /* Set E to HIGH */
	
	Dio_enuWriteChannel(DATA_PIN4 , GET_BIT(u8CmdCpy ,0)) ;
 3d4:	6c 2f       	mov	r22, r28
 3d6:	61 70       	andi	r22, 0x01	; 1
 3d8:	80 e1       	ldi	r24, 0x10	; 16
 3da:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
	Dio_enuWriteChannel(DATA_PIN5 , GET_BIT(u8CmdCpy ,1)) ;
 3de:	c1 fb       	bst	r28, 1
 3e0:	66 27       	eor	r22, r22
 3e2:	60 f9       	bld	r22, 0
 3e4:	81 e1       	ldi	r24, 0x11	; 17
 3e6:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
	Dio_enuWriteChannel(DATA_PIN6 , GET_BIT(u8CmdCpy ,2)) ;
 3ea:	c2 fb       	bst	r28, 2
 3ec:	66 27       	eor	r22, r22
 3ee:	60 f9       	bld	r22, 0
 3f0:	82 e1       	ldi	r24, 0x12	; 18
 3f2:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
	Dio_enuWriteChannel(DATA_PIN7 , GET_BIT(u8CmdCpy ,3)) ;
 3f6:	c3 fb       	bst	r28, 3
 3f8:	66 27       	eor	r22, r22
 3fa:	60 f9       	bld	r22, 0
 3fc:	83 e1       	ldi	r24, 0x13	; 19
 3fe:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
 402:	89 ef       	ldi	r24, 0xF9	; 249
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
	 
	  _delay_ms(1) ;
	
  	Dio_enuWriteChannel(EN_PIN, DIO_u8LEVEL_LOW);
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	8a e0       	ldi	r24, 0x0A	; 10
 412:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
 416:	89 ef       	ldi	r24, 0xF9	; 249
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 420:	00 00       	nop
	//Dio_enuWriteChannel(EN_PIN, DIO_u8LEVEL_LOW);

  /* Delay for 1ms to let the LCD execute command */	
	

}
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <LCD_vidInit>:
 426:	85 ea       	ldi	r24, 0xA5	; 165
 428:	9e e0       	ldi	r25, 0x0E	; 14
 42a:	01 97       	sbiw	r24, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <LCD_vidInit+0x4>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <LCD_vidInit+0xa>
 430:	00 00       	nop
{
	
	/* Delay 15ms to ensure the initialization of the LCD driver */
	_delay_ms(15);
   
 LCD_vidSendCommand(LCD_4bit_INT1) ; 
 432:	83 e3       	ldi	r24, 0x33	; 51
 434:	0e 94 a3 01 	call	0x346	; 0x346 <LCD_vidSendCommand>
 LCD_vidSendCommand(LCD_4bit_INT2) ;
 438:	82 e3       	ldi	r24, 0x32	; 50
 43a:	0e 94 a3 01 	call	0x346	; 0x346 <LCD_vidSendCommand>
 LCD_vidSendCommand(lcd_FunctionSet4bit) ; 
 43e:	88 e2       	ldi	r24, 0x28	; 40
 440:	0e 94 a3 01 	call	0x346	; 0x346 <LCD_vidSendCommand>
 LCD_vidSendCommand(lcd_DisplayOn) ;
 444:	8c e0       	ldi	r24, 0x0C	; 12
 446:	0e 94 a3 01 	call	0x346	; 0x346 <LCD_vidSendCommand>
 LCD_vidSendCommand(lcd_Clear) ;
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	0e 94 a3 01 	call	0x346	; 0x346 <LCD_vidSendCommand>
 450:	89 ef       	ldi	r24, 0xF9	; 249
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <LCD_vidInit+0x2e>
 458:	00 c0       	rjmp	.+0      	; 0x45a <LCD_vidInit+0x34>
 45a:	00 00       	nop
 45c:	08 95       	ret

0000045e <LCD_vidWriteCharctr>:
/* Description! Interface to write character on LCD screen                             */
/* Input      ! Data to send                                                           */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidWriteCharctr(u8 u8DataCpy)
{
 45e:	cf 93       	push	r28
 460:	c8 2f       	mov	r28, r24

/* Set RS to LOW */
Dio_enuWriteChannel(RS_PIN, DIO_u8LEVEL_HIGH);
 462:	61 e0       	ldi	r22, 0x01	; 1
 464:	88 e0       	ldi	r24, 0x08	; 8
 466:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>

/* Set R/W to LOW */
Dio_enuWriteChannel(RW_PIN, DIO_u8LEVEL_LOW);
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	89 e0       	ldi	r24, 0x09	; 9
 46e:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>

/* Set E to HIGH  */
Dio_enuWriteChannel(EN_PIN , DIO_u8LEVEL_HIGH);
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	8a e0       	ldi	r24, 0x0A	; 10
 476:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>

/* Load Command on Data bus */

Dio_enuWriteChannel(DATA_PIN4 , GET_BIT(u8DataCpy ,4)) ;
 47a:	c4 fb       	bst	r28, 4
 47c:	66 27       	eor	r22, r22
 47e:	60 f9       	bld	r22, 0
 480:	80 e1       	ldi	r24, 0x10	; 16
 482:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
Dio_enuWriteChannel(DATA_PIN5 , GET_BIT(u8DataCpy ,5)) ;
 486:	c5 fb       	bst	r28, 5
 488:	66 27       	eor	r22, r22
 48a:	60 f9       	bld	r22, 0
 48c:	81 e1       	ldi	r24, 0x11	; 17
 48e:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
Dio_enuWriteChannel(DATA_PIN6 , GET_BIT(u8DataCpy ,6)) ;
 492:	c6 fb       	bst	r28, 6
 494:	66 27       	eor	r22, r22
 496:	60 f9       	bld	r22, 0
 498:	82 e1       	ldi	r24, 0x12	; 18
 49a:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
Dio_enuWriteChannel(DATA_PIN7 , GET_BIT(u8DataCpy ,7)) ;
 49e:	6c 2f       	mov	r22, r28
 4a0:	66 1f       	adc	r22, r22
 4a2:	66 27       	eor	r22, r22
 4a4:	66 1f       	adc	r22, r22
 4a6:	83 e1       	ldi	r24, 0x13	; 19
 4a8:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
 4ac:	89 ef       	ldi	r24, 0xF9	; 249
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <LCD_vidWriteCharctr+0x52>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <LCD_vidWriteCharctr+0x58>
 4b6:	00 00       	nop

_delay_ms(1);
Dio_enuWriteChannel(EN_PIN , DIO_u8LEVEL_LOW);
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	8a e0       	ldi	r24, 0x0A	; 10
 4bc:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
 4c0:	89 ef       	ldi	r24, 0xF9	; 249
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <LCD_vidWriteCharctr+0x66>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <LCD_vidWriteCharctr+0x6c>
 4ca:	00 00       	nop

_delay_ms(1);

/* Set E to LOW */
Dio_enuWriteChannel(EN_PIN, DIO_u8LEVEL_HIGH);
 4cc:	61 e0       	ldi	r22, 0x01	; 1
 4ce:	8a e0       	ldi	r24, 0x0A	; 10
 4d0:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
 4d4:	89 ef       	ldi	r24, 0xF9	; 249
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	01 97       	sbiw	r24, 0x01	; 1
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <LCD_vidWriteCharctr+0x7a>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <LCD_vidWriteCharctr+0x80>
 4de:	00 00       	nop
/* Wait for E to settle */
_delay_ms(1);

/* Set E to HIGH */

Dio_enuWriteChannel(DATA_PIN4 , GET_BIT(u8DataCpy ,0)) ;
 4e0:	6c 2f       	mov	r22, r28
 4e2:	61 70       	andi	r22, 0x01	; 1
 4e4:	80 e1       	ldi	r24, 0x10	; 16
 4e6:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
Dio_enuWriteChannel(DATA_PIN5 , GET_BIT(u8DataCpy ,1)) ;
 4ea:	c1 fb       	bst	r28, 1
 4ec:	66 27       	eor	r22, r22
 4ee:	60 f9       	bld	r22, 0
 4f0:	81 e1       	ldi	r24, 0x11	; 17
 4f2:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
Dio_enuWriteChannel(DATA_PIN6 , GET_BIT(u8DataCpy ,2)) ;
 4f6:	c2 fb       	bst	r28, 2
 4f8:	66 27       	eor	r22, r22
 4fa:	60 f9       	bld	r22, 0
 4fc:	82 e1       	ldi	r24, 0x12	; 18
 4fe:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
Dio_enuWriteChannel(DATA_PIN7 , GET_BIT(u8DataCpy ,3)) ;
 502:	c3 fb       	bst	r28, 3
 504:	66 27       	eor	r22, r22
 506:	60 f9       	bld	r22, 0
 508:	83 e1       	ldi	r24, 0x13	; 19
 50a:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
 50e:	89 ef       	ldi	r24, 0xF9	; 249
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	01 97       	sbiw	r24, 0x01	; 1
 514:	f1 f7       	brne	.-4      	; 0x512 <LCD_vidWriteCharctr+0xb4>
 516:	00 c0       	rjmp	.+0      	; 0x518 <LCD_vidWriteCharctr+0xba>
 518:	00 00       	nop

_delay_ms(1) ;

/* Delay for 1ms to let the LCD execute command */
/* SetE To HIGH */
Dio_enuWriteChannel(EN_PIN, DIO_u8LEVEL_LOW);
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	8a e0       	ldi	r24, 0x0A	; 10
 51e:	0e 94 8f 00 	call	0x11e	; 0x11e <Dio_enuWriteChannel>
 522:	89 ef       	ldi	r24, 0xF9	; 249
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	f1 f7       	brne	.-4      	; 0x526 <LCD_vidWriteCharctr+0xc8>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <LCD_vidWriteCharctr+0xce>
 52c:	00 00       	nop

/* Delay for 1ms to let the LCD execute command */
_delay_ms(1);
}
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

00000532 <LCD_vidWriteString>:
/* Description! Interface to write string on LCD screen                                */
/* Input      ! Pointer to the string                                                  */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_vidWriteString (u8* pu8StringCpy)
{
 532:	0f 93       	push	r16
 534:	1f 93       	push	r17
 536:	cf 93       	push	r28
 538:	fc 01       	movw	r30, r24


	u8 iteration=0;
	while (pu8StringCpy[iteration] != '\0')
 53a:	80 81       	ld	r24, Z
 53c:	88 23       	and	r24, r24
 53e:	59 f0       	breq	.+22     	; 0x556 <LCD_vidWriteString+0x24>
 540:	8f 01       	movw	r16, r30
 542:	c0 e0       	ldi	r28, 0x00	; 0
{
		/* Write Character on LCD */
		LCD_vidWriteCharctr(pu8StringCpy[iteration]);
 544:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_vidWriteCharctr>

		iteration++;
 548:	cf 5f       	subi	r28, 0xFF	; 255
void LCD_vidWriteString (u8* pu8StringCpy)
{


	u8 iteration=0;
	while (pu8StringCpy[iteration] != '\0')
 54a:	f8 01       	movw	r30, r16
 54c:	ec 0f       	add	r30, r28
 54e:	f1 1d       	adc	r31, r1
 550:	80 81       	ld	r24, Z
 552:	81 11       	cpse	r24, r1
 554:	f7 cf       	rjmp	.-18     	; 0x544 <LCD_vidWriteString+0x12>
 556:	83 ef       	ldi	r24, 0xF3	; 243
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	f1 f7       	brne	.-4      	; 0x55a <LCD_vidWriteString+0x28>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <LCD_vidWriteString+0x2e>
 560:	00 00       	nop

		iteration++;
}
		/* Delay to let the LCD show the character */
		_delay_ms(2);
	}
 562:	cf 91       	pop	r28
 564:	1f 91       	pop	r17
 566:	0f 91       	pop	r16
 568:	08 95       	ret

0000056a <LCD_displayInteger>:

}

*/
void LCD_displayInteger(u64 a_integerNumber)
{	
 56a:	2f 92       	push	r2
 56c:	3f 92       	push	r3
 56e:	4f 92       	push	r4
 570:	5f 92       	push	r5
 572:	6f 92       	push	r6
 574:	7f 92       	push	r7
 576:	8f 92       	push	r8
 578:	9f 92       	push	r9
 57a:	af 92       	push	r10
 57c:	bf 92       	push	r11
 57e:	cf 92       	push	r12
 580:	df 92       	push	r13
 582:	ef 92       	push	r14
 584:	ff 92       	push	r15
 586:	0f 93       	push	r16
 588:	1f 93       	push	r17
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
 58e:	cd b7       	in	r28, 0x3d	; 61
 590:	de b7       	in	r29, 0x3e	; 62
 592:	28 97       	sbiw	r28, 0x08	; 8
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	f8 94       	cli
 598:	de bf       	out	0x3e, r29	; 62
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	cd bf       	out	0x3d, r28	; 61
 59e:	29 83       	std	Y+1, r18	; 0x01
 5a0:	3a 83       	std	Y+2, r19	; 0x02
 5a2:	4b 83       	std	Y+3, r20	; 0x03
 5a4:	5c 83       	std	Y+4, r21	; 0x04
 5a6:	6d 83       	std	Y+5, r22	; 0x05
 5a8:	7e 83       	std	Y+6, r23	; 0x06
 5aa:	38 2e       	mov	r3, r24
 5ac:	29 2e       	mov	r2, r25
	if(a_integerNumber == 0)
 5ae:	a0 e0       	ldi	r26, 0x00	; 0
 5b0:	0e 94 a0 04 	call	0x940	; 0x940 <__cmpdi2_s8>
 5b4:	21 f4       	brne	.+8      	; 0x5be <LCD_displayInteger+0x54>
	{
		
		LCD_vidWriteCharctr('0');
 5b6:	80 e3       	ldi	r24, 0x30	; 48
 5b8:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_vidWriteCharctr>
 5bc:	bd c0       	rjmp	.+378    	; 0x738 <LCD_displayInteger+0x1ce>
 5be:	44 24       	eor	r4, r4
 5c0:	43 94       	inc	r4
 5c2:	51 2c       	mov	r5, r1
 5c4:	61 2c       	mov	r6, r1
 5c6:	71 2c       	mov	r7, r1
 5c8:	81 2c       	mov	r8, r1
 5ca:	91 2c       	mov	r9, r1
 5cc:	18 86       	std	Y+8, r1	; 0x08
 5ce:	1f 82       	std	Y+7, r1	; 0x07
	{
		u64 LOC_reversedNumber = 1;

		while(a_integerNumber != 0)
		{
			LOC_reversedNumber = (LOC_reversedNumber * 10) + (a_integerNumber % 10);
 5d0:	24 2d       	mov	r18, r4
 5d2:	35 2d       	mov	r19, r5
 5d4:	46 2d       	mov	r20, r6
 5d6:	57 2d       	mov	r21, r7
 5d8:	68 2d       	mov	r22, r8
 5da:	79 2d       	mov	r23, r9
 5dc:	88 85       	ldd	r24, Y+8	; 0x08
 5de:	9f 81       	ldd	r25, Y+7	; 0x07
 5e0:	01 e0       	ldi	r16, 0x01	; 1
 5e2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__ashldi3>
 5e6:	82 2e       	mov	r8, r18
 5e8:	93 2e       	mov	r9, r19
 5ea:	48 87       	std	Y+8, r20	; 0x08
 5ec:	5f 83       	std	Y+7, r21	; 0x07
 5ee:	b6 2f       	mov	r27, r22
 5f0:	a7 2f       	mov	r26, r23
 5f2:	f8 2f       	mov	r31, r24
 5f4:	e9 2f       	mov	r30, r25
 5f6:	02 e0       	ldi	r16, 0x02	; 2
 5f8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__ashldi3>
 5fc:	a2 2e       	mov	r10, r18
 5fe:	b3 2e       	mov	r11, r19
 600:	c4 2e       	mov	r12, r20
 602:	d5 2e       	mov	r13, r21
 604:	e6 2e       	mov	r14, r22
 606:	f7 2e       	mov	r15, r23
 608:	08 2f       	mov	r16, r24
 60a:	19 2f       	mov	r17, r25
 60c:	28 2d       	mov	r18, r8
 60e:	39 2d       	mov	r19, r9
 610:	48 85       	ldd	r20, Y+8	; 0x08
 612:	5f 81       	ldd	r21, Y+7	; 0x07
 614:	6b 2f       	mov	r22, r27
 616:	7a 2f       	mov	r23, r26
 618:	8f 2f       	mov	r24, r31
 61a:	9e 2f       	mov	r25, r30
 61c:	0e 94 97 04 	call	0x92e	; 0x92e <__adddi3>
 620:	28 87       	std	Y+8, r18	; 0x08
 622:	3f 83       	std	Y+7, r19	; 0x07
 624:	94 2e       	mov	r9, r20
 626:	85 2e       	mov	r8, r21
 628:	76 2e       	mov	r7, r22
 62a:	67 2e       	mov	r6, r23
 62c:	58 2e       	mov	r5, r24
 62e:	49 2e       	mov	r4, r25
 630:	0f 2e       	mov	r0, r31
 632:	fa e0       	ldi	r31, 0x0A	; 10
 634:	af 2e       	mov	r10, r31
 636:	f0 2d       	mov	r31, r0
 638:	b1 2c       	mov	r11, r1
 63a:	c1 2c       	mov	r12, r1
 63c:	d1 2c       	mov	r13, r1
 63e:	e1 2c       	mov	r14, r1
 640:	f1 2c       	mov	r15, r1
 642:	00 e0       	ldi	r16, 0x00	; 0
 644:	10 e0       	ldi	r17, 0x00	; 0
 646:	29 81       	ldd	r18, Y+1	; 0x01
 648:	3a 81       	ldd	r19, Y+2	; 0x02
 64a:	4b 81       	ldd	r20, Y+3	; 0x03
 64c:	5c 81       	ldd	r21, Y+4	; 0x04
 64e:	6d 81       	ldd	r22, Y+5	; 0x05
 650:	7e 81       	ldd	r23, Y+6	; 0x06
 652:	83 2d       	mov	r24, r3
 654:	92 2d       	mov	r25, r2
 656:	0e 94 1f 04 	call	0x83e	; 0x83e <__umoddi3>
 65a:	a8 84       	ldd	r10, Y+8	; 0x08
 65c:	bf 80       	ldd	r11, Y+7	; 0x07
 65e:	c9 2c       	mov	r12, r9
 660:	d8 2c       	mov	r13, r8
 662:	e7 2c       	mov	r14, r7
 664:	f6 2c       	mov	r15, r6
 666:	05 2d       	mov	r16, r5
 668:	14 2d       	mov	r17, r4
 66a:	0e 94 97 04 	call	0x92e	; 0x92e <__adddi3>
 66e:	42 2e       	mov	r4, r18
 670:	53 2e       	mov	r5, r19
 672:	64 2e       	mov	r6, r20
 674:	75 2e       	mov	r7, r21
 676:	86 2e       	mov	r8, r22
 678:	97 2e       	mov	r9, r23
 67a:	88 87       	std	Y+8, r24	; 0x08
 67c:	9f 83       	std	Y+7, r25	; 0x07
			a_integerNumber /= 10;
 67e:	0f 2e       	mov	r0, r31
 680:	fa e0       	ldi	r31, 0x0A	; 10
 682:	af 2e       	mov	r10, r31
 684:	f0 2d       	mov	r31, r0
 686:	b1 2c       	mov	r11, r1
 688:	c1 2c       	mov	r12, r1
 68a:	d1 2c       	mov	r13, r1
 68c:	e1 2c       	mov	r14, r1
 68e:	f1 2c       	mov	r15, r1
 690:	00 e0       	ldi	r16, 0x00	; 0
 692:	10 e0       	ldi	r17, 0x00	; 0
 694:	29 81       	ldd	r18, Y+1	; 0x01
 696:	3a 81       	ldd	r19, Y+2	; 0x02
 698:	4b 81       	ldd	r20, Y+3	; 0x03
 69a:	5c 81       	ldd	r21, Y+4	; 0x04
 69c:	6d 81       	ldd	r22, Y+5	; 0x05
 69e:	7e 81       	ldd	r23, Y+6	; 0x06
 6a0:	83 2d       	mov	r24, r3
 6a2:	92 2d       	mov	r25, r2
 6a4:	0e 94 21 04 	call	0x842	; 0x842 <__udivdi3>
 6a8:	29 83       	std	Y+1, r18	; 0x01
 6aa:	3a 83       	std	Y+2, r19	; 0x02
 6ac:	4b 83       	std	Y+3, r20	; 0x03
 6ae:	5c 83       	std	Y+4, r21	; 0x04
 6b0:	6d 83       	std	Y+5, r22	; 0x05
 6b2:	7e 83       	std	Y+6, r23	; 0x06
 6b4:	38 2e       	mov	r3, r24
 6b6:	29 2e       	mov	r2, r25
	}
	else
	{
		u64 LOC_reversedNumber = 1;

		while(a_integerNumber != 0)
 6b8:	a0 e0       	ldi	r26, 0x00	; 0
 6ba:	0e 94 a0 04 	call	0x940	; 0x940 <__cmpdi2_s8>
 6be:	09 f0       	breq	.+2      	; 0x6c2 <LCD_displayInteger+0x158>
 6c0:	87 cf       	rjmp	.-242    	; 0x5d0 <LCD_displayInteger+0x66>
		{
			LOC_reversedNumber = (LOC_reversedNumber * 10) + (a_integerNumber % 10);
			a_integerNumber /= 10;
		}

		while(LOC_reversedNumber != 1)
 6c2:	24 2d       	mov	r18, r4
 6c4:	35 2d       	mov	r19, r5
 6c6:	46 2d       	mov	r20, r6
 6c8:	57 2d       	mov	r21, r7
 6ca:	68 2d       	mov	r22, r8
 6cc:	79 2d       	mov	r23, r9
 6ce:	88 85       	ldd	r24, Y+8	; 0x08
 6d0:	9f 81       	ldd	r25, Y+7	; 0x07
 6d2:	a1 e0       	ldi	r26, 0x01	; 1
 6d4:	0e 94 a0 04 	call	0x940	; 0x940 <__cmpdi2_s8>
 6d8:	79 f1       	breq	.+94     	; 0x738 <LCD_displayInteger+0x1ce>
		{
			LCD_vidWriteCharctr((LOC_reversedNumber % 10) + '0');
 6da:	0f 2e       	mov	r0, r31
 6dc:	fa e0       	ldi	r31, 0x0A	; 10
 6de:	af 2e       	mov	r10, r31
 6e0:	f0 2d       	mov	r31, r0
 6e2:	b1 2c       	mov	r11, r1
 6e4:	c1 2c       	mov	r12, r1
 6e6:	d1 2c       	mov	r13, r1
 6e8:	e1 2c       	mov	r14, r1
 6ea:	f1 2c       	mov	r15, r1
 6ec:	00 e0       	ldi	r16, 0x00	; 0
 6ee:	10 e0       	ldi	r17, 0x00	; 0
 6f0:	24 2d       	mov	r18, r4
 6f2:	35 2d       	mov	r19, r5
 6f4:	46 2d       	mov	r20, r6
 6f6:	57 2d       	mov	r21, r7
 6f8:	68 2d       	mov	r22, r8
 6fa:	79 2d       	mov	r23, r9
 6fc:	88 85       	ldd	r24, Y+8	; 0x08
 6fe:	9f 81       	ldd	r25, Y+7	; 0x07
 700:	0e 94 1f 04 	call	0x83e	; 0x83e <__umoddi3>
 704:	80 e3       	ldi	r24, 0x30	; 48
 706:	82 0f       	add	r24, r18
 708:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_vidWriteCharctr>
			LOC_reversedNumber /= 10;
 70c:	24 2d       	mov	r18, r4
 70e:	35 2d       	mov	r19, r5
 710:	46 2d       	mov	r20, r6
 712:	57 2d       	mov	r21, r7
 714:	68 2d       	mov	r22, r8
 716:	79 2d       	mov	r23, r9
 718:	88 85       	ldd	r24, Y+8	; 0x08
 71a:	9f 81       	ldd	r25, Y+7	; 0x07
 71c:	0e 94 21 04 	call	0x842	; 0x842 <__udivdi3>
 720:	42 2e       	mov	r4, r18
 722:	53 2e       	mov	r5, r19
 724:	64 2e       	mov	r6, r20
 726:	75 2e       	mov	r7, r21
 728:	86 2e       	mov	r8, r22
 72a:	97 2e       	mov	r9, r23
 72c:	88 87       	std	Y+8, r24	; 0x08
 72e:	9f 83       	std	Y+7, r25	; 0x07
		{
			LOC_reversedNumber = (LOC_reversedNumber * 10) + (a_integerNumber % 10);
			a_integerNumber /= 10;
		}

		while(LOC_reversedNumber != 1)
 730:	a1 e0       	ldi	r26, 0x01	; 1
 732:	0e 94 a0 04 	call	0x940	; 0x940 <__cmpdi2_s8>
 736:	89 f6       	brne	.-94     	; 0x6da <LCD_displayInteger+0x170>
		{
			LCD_vidWriteCharctr((LOC_reversedNumber % 10) + '0');
			LOC_reversedNumber /= 10;
		}
	}
}
 738:	28 96       	adiw	r28, 0x08	; 8
 73a:	0f b6       	in	r0, 0x3f	; 63
 73c:	f8 94       	cli
 73e:	de bf       	out	0x3e, r29	; 62
 740:	0f be       	out	0x3f, r0	; 63
 742:	cd bf       	out	0x3d, r28	; 61
 744:	df 91       	pop	r29
 746:	cf 91       	pop	r28
 748:	1f 91       	pop	r17
 74a:	0f 91       	pop	r16
 74c:	ff 90       	pop	r15
 74e:	ef 90       	pop	r14
 750:	df 90       	pop	r13
 752:	cf 90       	pop	r12
 754:	bf 90       	pop	r11
 756:	af 90       	pop	r10
 758:	9f 90       	pop	r9
 75a:	8f 90       	pop	r8
 75c:	7f 90       	pop	r7
 75e:	6f 90       	pop	r6
 760:	5f 90       	pop	r5
 762:	4f 90       	pop	r4
 764:	3f 90       	pop	r3
 766:	2f 90       	pop	r2
 768:	08 95       	ret

0000076a <LCD_voidGotToXY>:


void LCD_voidGotToXY (u8 Copy_u8XPos,u8 Copy_u8YPos )
{
	u8 Local_u8Address ; 
	if (Copy_u8XPos == 0 )
 76a:	88 23       	and	r24, r24
 76c:	29 f0       	breq	.+10     	; 0x778 <LCD_voidGotToXY+0xe>
	{
		Local_u8Address = Copy_u8YPos;
		
	}
	else if (Copy_u8XPos == 1)
 76e:	81 30       	cpi	r24, 0x01	; 1
 770:	21 f4       	brne	.+8      	; 0x77a <LCD_voidGotToXY+0x10>
	{
		Local_u8Address = Copy_u8YPos +0x40 ; 
 772:	90 e4       	ldi	r25, 0x40	; 64
 774:	96 0f       	add	r25, r22
 776:	01 c0       	rjmp	.+2      	; 0x77a <LCD_voidGotToXY+0x10>
void LCD_voidGotToXY (u8 Copy_u8XPos,u8 Copy_u8YPos )
{
	u8 Local_u8Address ; 
	if (Copy_u8XPos == 0 )
	{
		Local_u8Address = Copy_u8YPos;
 778:	96 2f       	mov	r25, r22
	}
	else if (Copy_u8XPos == 1)
	{
		Local_u8Address = Copy_u8YPos +0x40 ; 
	}
		LCD_vidSendCommand(Local_u8Address + 128 );
 77a:	80 e8       	ldi	r24, 0x80	; 128
 77c:	89 0f       	add	r24, r25
 77e:	0e 94 a3 01 	call	0x346	; 0x346 <LCD_vidSendCommand>
 782:	08 95       	ret

00000784 <EXTI_SWITCH>:
    }
}

void EXTI_SWITCH(void)
 {
  switchFlag ^= 1 ; 
 784:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	89 27       	eor	r24, r25
 78c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 790:	08 95       	ret

00000792 <main>:
u8 ADC_READING =0  ; 
u8 ADC_Reading_synchoronus ; 
int main(void)
{
	
	Port_vidInit(); 
 792:	0e 94 12 04 	call	0x824	; 0x824 <Port_vidInit>
	LCD_vidInit();
 796:	0e 94 13 02 	call	0x426	; 0x426 <LCD_vidInit>
	ADC_voidInit();
 79a:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidInit>
    GIE_voidEnableGlobalInterrupt();
 79e:	0e 94 9f 01 	call	0x33e	; 0x33e <GIE_voidEnableGlobalInterrupt>
    ExtI_voidInitialize();
 7a2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <ExtI_voidInitialize>
    ExtI_voidSetCallBack(&EXTI_SWITCH);
 7a6:	82 ec       	ldi	r24, 0xC2	; 194
 7a8:	93 e0       	ldi	r25, 0x03	; 3
 7aa:	0e 94 73 01 	call	0x2e6	; 0x2e6 <ExtI_voidSetCallBack>
		    LCD_vidWriteString("VOLT  "); 
		}
		else 
		{
			LCD_voidGotToXY(0,0);
          LCD_displayInteger(ADC_Reading_synchoronus * 1000);
 7ae:	c8 ee       	ldi	r28, 0xE8	; 232
 7b0:	d3 e0       	ldi	r29, 0x03	; 3
    ExtI_voidInitialize();
    ExtI_voidSetCallBack(&EXTI_SWITCH);
   //LCD_displayInteger(ADC_Reading_synchoronus);
    while (1) 
    {
       	ADC_u8StartConversionSynchoronus(1,  &ADC_Reading_synchoronus);
 7b2:	67 e7       	ldi	r22, 0x77	; 119
 7b4:	70 e0       	ldi	r23, 0x00	; 0
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	0e 94 66 00 	call	0xcc	; 0xcc <ADC_u8StartConversionSynchoronus>
		
		if (  switchFlag == 1 )
 7bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 7c0:	81 30       	cpi	r24, 0x01	; 1
 7c2:	a1 f4       	brne	.+40     	; 0x7ec <main+0x5a>
		{
			LCD_voidGotToXY(0,0);
 7c4:	60 e0       	ldi	r22, 0x00	; 0
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_voidGotToXY>
			LCD_displayInteger(ADC_Reading_synchoronus);
 7cc:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <ADC_Reading_synchoronus>
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	40 e0       	ldi	r20, 0x00	; 0
 7d4:	50 e0       	ldi	r21, 0x00	; 0
 7d6:	60 e0       	ldi	r22, 0x00	; 0
 7d8:	70 e0       	ldi	r23, 0x00	; 0
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_displayInteger>
		    LCD_vidWriteString("VOLT  "); 
 7e2:	81 e6       	ldi	r24, 0x61	; 97
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	0e 94 99 02 	call	0x532	; 0x532 <LCD_vidWriteString>
 7ea:	e3 cf       	rjmp	.-58     	; 0x7b2 <main+0x20>
		}
		else 
		{
			LCD_voidGotToXY(0,0);
 7ec:	60 e0       	ldi	r22, 0x00	; 0
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_voidGotToXY>
          LCD_displayInteger(ADC_Reading_synchoronus * 1000);
 7f4:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <ADC_Reading_synchoronus>
 7f8:	8c 9f       	mul	r24, r28
 7fa:	a0 01       	movw	r20, r0
 7fc:	8d 9f       	mul	r24, r29
 7fe:	50 0d       	add	r21, r0
 800:	11 24       	eor	r1, r1
 802:	95 2f       	mov	r25, r21
 804:	99 0f       	add	r25, r25
 806:	99 0b       	sbc	r25, r25
 808:	24 2f       	mov	r18, r20
 80a:	35 2f       	mov	r19, r21
 80c:	49 2f       	mov	r20, r25
 80e:	59 2f       	mov	r21, r25
 810:	69 2f       	mov	r22, r25
 812:	79 2f       	mov	r23, r25
 814:	89 2f       	mov	r24, r25
 816:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_displayInteger>
          LCD_vidWriteString("Milli_VOLT") ;
 81a:	88 e6       	ldi	r24, 0x68	; 104
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 99 02 	call	0x532	; 0x532 <LCD_vidWriteString>
 822:	c7 cf       	rjmp	.-114    	; 0x7b2 <main+0x20>

00000824 <Port_vidInit>:
#define PORT_u8OUTPUT_LOW		1

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		0

	DDRA = CONC(PORT_u8MODEPIN07,PORT_u8MODEPIN06,PORT_u8MODEPIN05,PORT_u8MODEPIN04,PORT_u8MODEPIN03,PORT_u8MODEPIN02,PORT_u8MODEPIN01,PORT_u8MODEPIN00);
 824:	8c ef       	ldi	r24, 0xFC	; 252
 826:	8a bb       	out	0x1a, r24	; 26
	DDRB = CONC(PORT_u8MODEPIN15,PORT_u8MODEPIN14,PORT_u8MODEPIN13,PORT_u8MODEPIN12,PORT_u8MODEPIN11,PORT_u8MODEPIN10,PORT_u8MODEPIN09,PORT_u8MODEPIN08);
 828:	8f ef       	ldi	r24, 0xFF	; 255
 82a:	87 bb       	out	0x17, r24	; 23
	DDRC = CONC(PORT_u8MODEPIN23,PORT_u8MODEPIN22,PORT_u8MODEPIN21,PORT_u8MODEPIN20,PORT_u8MODEPIN19,PORT_u8MODEPIN18,PORT_u8MODEPIN17,PORT_u8MODEPIN16);
 82c:	84 bb       	out	0x14, r24	; 20
	DDRD = CONC(PORT_u8MODEPIN31,PORT_u8MODEPIN30,PORT_u8MODEPIN29,PORT_u8MODEPIN28,PORT_u8MODEPIN27,PORT_u8MODEPIN26,PORT_u8MODEPIN25,PORT_u8MODEPIN24);
 82e:	80 ef       	ldi	r24, 0xF0	; 240
 830:	81 bb       	out	0x11, r24	; 17
#define PORT_u8OUTPUT_LOW		0

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		1

	PORTA = CONC(PORT_u8MODEPIN07,PORT_u8MODEPIN06,PORT_u8MODEPIN05,PORT_u8MODEPIN04,PORT_u8MODEPIN03,PORT_u8MODEPIN02,PORT_u8MODEPIN01,PORT_u8MODEPIN00);
 832:	1b ba       	out	0x1b, r1	; 27
	PORTB = CONC(PORT_u8MODEPIN15,PORT_u8MODEPIN14,PORT_u8MODEPIN13,PORT_u8MODEPIN12,PORT_u8MODEPIN11,PORT_u8MODEPIN10,PORT_u8MODEPIN09,PORT_u8MODEPIN08);
 834:	18 ba       	out	0x18, r1	; 24
	PORTC = CONC(PORT_u8MODEPIN23,PORT_u8MODEPIN22,PORT_u8MODEPIN21,PORT_u8MODEPIN20,PORT_u8MODEPIN19,PORT_u8MODEPIN18,PORT_u8MODEPIN17,PORT_u8MODEPIN16);
 836:	15 ba       	out	0x15, r1	; 21
	PORTD = CONC(PORT_u8MODEPIN31,PORT_u8MODEPIN30,PORT_u8MODEPIN29,PORT_u8MODEPIN28,PORT_u8MODEPIN27,PORT_u8MODEPIN26,PORT_u8MODEPIN25,PORT_u8MODEPIN24);
 838:	8f e0       	ldi	r24, 0x0F	; 15
 83a:	82 bb       	out	0x12, r24	; 18
 83c:	08 95       	ret

0000083e <__umoddi3>:
 83e:	68 94       	set
 840:	01 c0       	rjmp	.+2      	; 0x844 <__udivdi3_umoddi3>

00000842 <__udivdi3>:
 842:	e8 94       	clt

00000844 <__udivdi3_umoddi3>:
 844:	8f 92       	push	r8
 846:	9f 92       	push	r9
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	0e 94 2d 04 	call	0x85a	; 0x85a <__udivmod64>
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	9f 90       	pop	r9
 856:	8f 90       	pop	r8
 858:	08 95       	ret

0000085a <__udivmod64>:
 85a:	88 24       	eor	r8, r8
 85c:	99 24       	eor	r9, r9
 85e:	f4 01       	movw	r30, r8
 860:	e4 01       	movw	r28, r8
 862:	b0 e4       	ldi	r27, 0x40	; 64
 864:	9f 93       	push	r25
 866:	aa 27       	eor	r26, r26
 868:	9a 15       	cp	r25, r10
 86a:	8b 04       	cpc	r8, r11
 86c:	9c 04       	cpc	r9, r12
 86e:	ed 05       	cpc	r30, r13
 870:	fe 05       	cpc	r31, r14
 872:	cf 05       	cpc	r28, r15
 874:	d0 07       	cpc	r29, r16
 876:	a1 07       	cpc	r26, r17
 878:	98 f4       	brcc	.+38     	; 0x8a0 <__stack+0x41>
 87a:	ad 2f       	mov	r26, r29
 87c:	dc 2f       	mov	r29, r28
 87e:	cf 2f       	mov	r28, r31
 880:	fe 2f       	mov	r31, r30
 882:	e9 2d       	mov	r30, r9
 884:	98 2c       	mov	r9, r8
 886:	89 2e       	mov	r8, r25
 888:	98 2f       	mov	r25, r24
 88a:	87 2f       	mov	r24, r23
 88c:	76 2f       	mov	r23, r22
 88e:	65 2f       	mov	r22, r21
 890:	54 2f       	mov	r21, r20
 892:	43 2f       	mov	r20, r19
 894:	32 2f       	mov	r19, r18
 896:	22 27       	eor	r18, r18
 898:	b8 50       	subi	r27, 0x08	; 8
 89a:	31 f7       	brne	.-52     	; 0x868 <__stack+0x9>
 89c:	bf 91       	pop	r27
 89e:	27 c0       	rjmp	.+78     	; 0x8ee <__stack+0x8f>
 8a0:	1b 2e       	mov	r1, r27
 8a2:	bf 91       	pop	r27
 8a4:	bb 27       	eor	r27, r27
 8a6:	22 0f       	add	r18, r18
 8a8:	33 1f       	adc	r19, r19
 8aa:	44 1f       	adc	r20, r20
 8ac:	55 1f       	adc	r21, r21
 8ae:	66 1f       	adc	r22, r22
 8b0:	77 1f       	adc	r23, r23
 8b2:	88 1f       	adc	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	88 1c       	adc	r8, r8
 8b8:	99 1c       	adc	r9, r9
 8ba:	ee 1f       	adc	r30, r30
 8bc:	ff 1f       	adc	r31, r31
 8be:	cc 1f       	adc	r28, r28
 8c0:	dd 1f       	adc	r29, r29
 8c2:	aa 1f       	adc	r26, r26
 8c4:	bb 1f       	adc	r27, r27
 8c6:	8a 14       	cp	r8, r10
 8c8:	9b 04       	cpc	r9, r11
 8ca:	ec 05       	cpc	r30, r12
 8cc:	fd 05       	cpc	r31, r13
 8ce:	ce 05       	cpc	r28, r14
 8d0:	df 05       	cpc	r29, r15
 8d2:	a0 07       	cpc	r26, r16
 8d4:	b1 07       	cpc	r27, r17
 8d6:	48 f0       	brcs	.+18     	; 0x8ea <__stack+0x8b>
 8d8:	8a 18       	sub	r8, r10
 8da:	9b 08       	sbc	r9, r11
 8dc:	ec 09       	sbc	r30, r12
 8de:	fd 09       	sbc	r31, r13
 8e0:	ce 09       	sbc	r28, r14
 8e2:	df 09       	sbc	r29, r15
 8e4:	a0 0b       	sbc	r26, r16
 8e6:	b1 0b       	sbc	r27, r17
 8e8:	21 60       	ori	r18, 0x01	; 1
 8ea:	1a 94       	dec	r1
 8ec:	e1 f6       	brne	.-72     	; 0x8a6 <__stack+0x47>
 8ee:	2e f4       	brtc	.+10     	; 0x8fa <__stack+0x9b>
 8f0:	94 01       	movw	r18, r8
 8f2:	af 01       	movw	r20, r30
 8f4:	be 01       	movw	r22, r28
 8f6:	cd 01       	movw	r24, r26
 8f8:	00 0c       	add	r0, r0
 8fa:	08 95       	ret

000008fc <__ashldi3>:
 8fc:	0f 93       	push	r16
 8fe:	08 30       	cpi	r16, 0x08	; 8
 900:	90 f0       	brcs	.+36     	; 0x926 <__ashldi3+0x2a>
 902:	98 2f       	mov	r25, r24
 904:	87 2f       	mov	r24, r23
 906:	76 2f       	mov	r23, r22
 908:	65 2f       	mov	r22, r21
 90a:	54 2f       	mov	r21, r20
 90c:	43 2f       	mov	r20, r19
 90e:	32 2f       	mov	r19, r18
 910:	22 27       	eor	r18, r18
 912:	08 50       	subi	r16, 0x08	; 8
 914:	f4 cf       	rjmp	.-24     	; 0x8fe <__ashldi3+0x2>
 916:	22 0f       	add	r18, r18
 918:	33 1f       	adc	r19, r19
 91a:	44 1f       	adc	r20, r20
 91c:	55 1f       	adc	r21, r21
 91e:	66 1f       	adc	r22, r22
 920:	77 1f       	adc	r23, r23
 922:	88 1f       	adc	r24, r24
 924:	99 1f       	adc	r25, r25
 926:	0a 95       	dec	r16
 928:	b2 f7       	brpl	.-20     	; 0x916 <__ashldi3+0x1a>
 92a:	0f 91       	pop	r16
 92c:	08 95       	ret

0000092e <__adddi3>:
 92e:	2a 0d       	add	r18, r10
 930:	3b 1d       	adc	r19, r11
 932:	4c 1d       	adc	r20, r12
 934:	5d 1d       	adc	r21, r13
 936:	6e 1d       	adc	r22, r14
 938:	7f 1d       	adc	r23, r15
 93a:	80 1f       	adc	r24, r16
 93c:	91 1f       	adc	r25, r17
 93e:	08 95       	ret

00000940 <__cmpdi2_s8>:
 940:	00 24       	eor	r0, r0
 942:	a7 fd       	sbrc	r26, 7
 944:	00 94       	com	r0
 946:	2a 17       	cp	r18, r26
 948:	30 05       	cpc	r19, r0
 94a:	40 05       	cpc	r20, r0
 94c:	50 05       	cpc	r21, r0
 94e:	60 05       	cpc	r22, r0
 950:	70 05       	cpc	r23, r0
 952:	80 05       	cpc	r24, r0
 954:	90 05       	cpc	r25, r0
 956:	08 95       	ret

00000958 <_exit>:
 958:	f8 94       	cli

0000095a <__stop_program>:
 95a:	ff cf       	rjmp	.-2      	; 0x95a <__stop_program>
