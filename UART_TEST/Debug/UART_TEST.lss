
UART_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000025f0  00002664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002310  00000000  00000000  0000266c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000138b  00000000  00000000  0000497c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000099f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a453  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 74 12 	call	0x24e8	; 0x24e8 <main>
      7a:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <UART_voidInit>:
#include "../Include/UART_interface.h"
#include "../Include/UART_private.h"
#include "../Include/UART_config.h"

void UART_voidInit(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <UART_voidInit+0x6>
     b3c:	0f 92       	push	r0
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
    u8 local_u8TempReg = 0x80;
     b42:	80 e8       	ldi	r24, 0x80	; 128
     b44:	8b 83       	std	Y+3, r24	; 0x03
    u16 local_u16BuadValue = 51;
     b46:	83 e3       	ldi	r24, 0x33	; 51
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	9a 83       	std	Y+2, r25	; 0x02
     b4c:	89 83       	std	Y+1, r24	; 0x01
    /* config boad rate */
    CLR_BIT(UART_u8_UCSRA_REG,UART_u8_U2X_BIT);
     b4e:	ab e2       	ldi	r26, 0x2B	; 43
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	eb e2       	ldi	r30, 0x2B	; 43
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8d 7f       	andi	r24, 0xFD	; 253
     b5a:	8c 93       	st	X, r24
    UART_u8_UBRRL_REG = (u8)local_u16BuadValue;
     b5c:	e9 e2       	ldi	r30, 0x29	; 41
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	80 83       	st	Z, r24
    UART_u8_UBRRH_REG = (u8)(local_u16BuadValue>>8);
     b64:	e0 e4       	ldi	r30, 0x40	; 64
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	9a 81       	ldd	r25, Y+2	; 0x02
     b6c:	89 2f       	mov	r24, r25
     b6e:	99 27       	eor	r25, r25
     b70:	80 83       	st	Z, r24
    /* disable to MPCM */
    CLR_BIT(UART_u8_UCSRA_REG,UART_u8_MPCM_BIT);
     b72:	ab e2       	ldi	r26, 0x2B	; 43
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	eb e2       	ldi	r30, 0x2B	; 43
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	8e 7f       	andi	r24, 0xFE	; 254
     b7e:	8c 93       	st	X, r24
    /* config the UART mode */
    #if   UART_u8_MODE == UART_ASYNCH_MODE  // in case synch mode
        CLR_BIT(local_u8TempReg,UART_u8_UMSEL_BIT);
     b80:	8b 81       	ldd	r24, Y+3	; 0x03
     b82:	8f 7b       	andi	r24, 0xBF	; 191
     b84:	8b 83       	std	Y+3, r24	; 0x03
        SET_BIT(local_u8TempReg,UART_u8_UPM1_BIT);
    #elif UART_u8_PARITY_MODE == UART_ODD_PARITY  // in case odd parity
        SET_BIT(local_u8TempReg,UART_u8_UPM0_BIT);
        SET_BIT(local_u8TempReg,UART_u8_UPM1_BIT);
    #elif UART_u8_PARITY_MODE == UART_DISABLED_PARITY  // in case disabled
        CLR_BIT(local_u8TempReg,UART_u8_UPM0_BIT);
     b86:	8b 81       	ldd	r24, Y+3	; 0x03
     b88:	8f 7e       	andi	r24, 0xEF	; 239
     b8a:	8b 83       	std	Y+3, r24	; 0x03
        CLR_BIT(local_u8TempReg,UART_u8_UPM1_BIT);
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	8f 7d       	andi	r24, 0xDF	; 223
     b90:	8b 83       	std	Y+3, r24	; 0x03
    #endif
    /* config the stop bit mode */
    #if   UART_u8_STOP_MODE == UART_STOP_BIT_1  // in case 1 bit
        CLR_BIT(local_u8TempReg,UART_u8_USBS_BIT);
    #elif UART_u8_STOP_MODE == UART_STOP_BIT_2  // in case 2 bit
        SET_BIT(local_u8TempReg,UART_u8_USBS_BIT);
     b92:	8b 81       	ldd	r24, Y+3	; 0x03
     b94:	88 60       	ori	r24, 0x08	; 8
     b96:	8b 83       	std	Y+3, r24	; 0x03
    #elif UART_u8_DATA_BIT == UART_DATA_7_BIT  // in case 7 bit data
        CLR_BIT(local_u8TempReg,UART_u8_UCSZ0_BIT);
        SET_BIT(local_u8TempReg,UART_u8_UCSZ1_BIT);
        CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSZ2_BIT);
    #elif UART_u8_DATA_BIT == UART_DATA_8_BIT  // in case 8 bit data
        SET_BIT(local_u8TempReg,UART_u8_UCSZ0_BIT);
     b98:	8b 81       	ldd	r24, Y+3	; 0x03
     b9a:	82 60       	ori	r24, 0x02	; 2
     b9c:	8b 83       	std	Y+3, r24	; 0x03
        SET_BIT(local_u8TempReg,UART_u8_UCSZ1_BIT);
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	84 60       	ori	r24, 0x04	; 4
     ba2:	8b 83       	std	Y+3, r24	; 0x03
        CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSZ2_BIT);
     ba4:	aa e2       	ldi	r26, 0x2A	; 42
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	ea e2       	ldi	r30, 0x2A	; 42
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	8b 7f       	andi	r24, 0xFB	; 251
     bb0:	8c 93       	st	X, r24
        SET_BIT(local_u8TempReg,UART_u8_UCSZ0_BIT);
        SET_BIT(local_u8TempReg,UART_u8_UCSZ1_BIT);
        SET_BIT(UART_u8_UCSRB_REG,UART_u8_UCSZ2_BIT);
    #endif
    /* set local variable in the UCSRC register */
    UART_u8_UCSRC_REG = local_u8TempReg;
     bb2:	e0 e4       	ldi	r30, 0x40	; 64
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	80 83       	st	Z, r24
    /* Enable Transmitter and Receiver */
    SET_BIT(UART_u8_UCSRB_REG,UART_u8_TXEN_BIT);
     bba:	aa e2       	ldi	r26, 0x2A	; 42
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	ea e2       	ldi	r30, 0x2A	; 42
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	88 60       	ori	r24, 0x08	; 8
     bc6:	8c 93       	st	X, r24
    SET_BIT(UART_u8_UCSRB_REG,UART_u8_RXEN_BIT);
     bc8:	aa e2       	ldi	r26, 0x2A	; 42
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	ea e2       	ldi	r30, 0x2A	; 42
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	80 61       	ori	r24, 0x10	; 16
     bd4:	8c 93       	st	X, r24
}
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	cf 91       	pop	r28
     bde:	df 91       	pop	r29
     be0:	08 95       	ret

00000be2 <UART_UARTEnumSendData>:

UARTEnum UART_UARTEnumSendData(u8 copy_u8Data)
{
     be2:	df 93       	push	r29
     be4:	cf 93       	push	r28
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <UART_UARTEnumSendData+0x6>
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
     bec:	8a 83       	std	Y+2, r24	; 0x02
    UARTEnum local_UARTEnumErrorState = UART_TX_OK;
     bee:	19 82       	std	Y+1, r1	; 0x01
    if(copy_u8Data <= 255)
    {
        /* wait until the register is empty */
        while(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UDRE_BIT) == 0);
     bf0:	eb e2       	ldi	r30, 0x2B	; 43
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	82 95       	swap	r24
     bf8:	86 95       	lsr	r24
     bfa:	87 70       	andi	r24, 0x07	; 7
     bfc:	88 2f       	mov	r24, r24
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	81 70       	andi	r24, 0x01	; 1
     c02:	90 70       	andi	r25, 0x00	; 0
     c04:	00 97       	sbiw	r24, 0x00	; 0
     c06:	a1 f3       	breq	.-24     	; 0xbf0 <UART_UARTEnumSendData+0xe>
        /* send the data */
        UART_u8_UDR_REG = copy_u8Data;
     c08:	ec e2       	ldi	r30, 0x2C	; 44
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	8a 81       	ldd	r24, Y+2	; 0x02
     c0e:	80 83       	st	Z, r24
    }
    else
    {
        local_UARTEnumErrorState = UART_TX_NOK;
    }
    return local_UARTEnumErrorState;
     c10:	89 81       	ldd	r24, Y+1	; 0x01
}
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	cf 91       	pop	r28
     c18:	df 91       	pop	r29
     c1a:	08 95       	ret

00000c1c <UART_UARTEnumReceiveData>:

UARTEnum UART_UARTEnumReceiveData(pu8 copy_pu8Data)
{
     c1c:	df 93       	push	r29
     c1e:	cf 93       	push	r28
     c20:	00 d0       	rcall	.+0      	; 0xc22 <UART_UARTEnumReceiveData+0x6>
     c22:	0f 92       	push	r0
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	9b 83       	std	Y+3, r25	; 0x03
     c2a:	8a 83       	std	Y+2, r24	; 0x02
    UARTEnum local_UARTEnumErrorState = UART_RX_OK;
     c2c:	82 e0       	ldi	r24, 0x02	; 2
     c2e:	89 83       	std	Y+1, r24	; 0x01
    if(copy_pu8Data != NULL)
     c30:	8a 81       	ldd	r24, Y+2	; 0x02
     c32:	9b 81       	ldd	r25, Y+3	; 0x03
     c34:	00 97       	sbiw	r24, 0x00	; 0
     c36:	61 f0       	breq	.+24     	; 0xc50 <UART_UARTEnumReceiveData+0x34>
    {
        /* wait until the receive is completed */
        while(GET_BIT(UART_u8_UCSRA_REG,UART_u8_RXC_BIT) == 0);
     c38:	eb e2       	ldi	r30, 0x2B	; 43
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	88 23       	and	r24, r24
     c40:	dc f7       	brge	.-10     	; 0xc38 <UART_UARTEnumReceiveData+0x1c>
        /* receive the data */
        *copy_pu8Data = UART_u8_UDR_REG ;
     c42:	ec e2       	ldi	r30, 0x2C	; 44
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	ea 81       	ldd	r30, Y+2	; 0x02
     c4a:	fb 81       	ldd	r31, Y+3	; 0x03
     c4c:	80 83       	st	Z, r24
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <UART_UARTEnumReceiveData+0x38>
    }
    else
    {
        local_UARTEnumErrorState = UART_RX_NOK;
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_UARTEnumErrorState;
     c54:	89 81       	ldd	r24, Y+1	; 0x01
}
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	08 95       	ret

00000c62 <UART_UARTEnumSendString>:

UARTEnum UART_UARTEnumSendString(pu8 copy_pu8SendString)
{
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	00 d0       	rcall	.+0      	; 0xc68 <UART_UARTEnumSendString+0x6>
     c68:	00 d0       	rcall	.+0      	; 0xc6a <UART_UARTEnumSendString+0x8>
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	9c 83       	std	Y+4, r25	; 0x04
     c70:	8b 83       	std	Y+3, r24	; 0x03
    UARTEnum local_UARTEnumErrorState = UART_TXSTR_OK;
     c72:	84 e0       	ldi	r24, 0x04	; 4
     c74:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Count = 0;
     c76:	19 82       	std	Y+1, r1	; 0x01
    if(copy_pu8SendString != NULL)
     c78:	8b 81       	ldd	r24, Y+3	; 0x03
     c7a:	9c 81       	ldd	r25, Y+4	; 0x04
     c7c:	00 97       	sbiw	r24, 0x00	; 0
     c7e:	a1 f1       	breq	.+104    	; 0xce8 <UART_UARTEnumSendString+0x86>
    {
        /* wait until the register is empty */
        while(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UDRE_BIT) == 0);
     c80:	eb e2       	ldi	r30, 0x2B	; 43
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	82 95       	swap	r24
     c88:	86 95       	lsr	r24
     c8a:	87 70       	andi	r24, 0x07	; 7
     c8c:	88 2f       	mov	r24, r24
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	81 70       	andi	r24, 0x01	; 1
     c92:	90 70       	andi	r25, 0x00	; 0
     c94:	00 97       	sbiw	r24, 0x00	; 0
     c96:	a1 f3       	breq	.-24     	; 0xc80 <UART_UARTEnumSendString+0x1e>
     c98:	1b c0       	rjmp	.+54     	; 0xcd0 <UART_UARTEnumSendString+0x6e>
        while(copy_pu8SendString[local_u8Count] != '\0')
        {
            /* send the data */
            UART_u8_UDR_REG = copy_pu8SendString[local_u8Count];
     c9a:	ac e2       	ldi	r26, 0x2C	; 44
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	28 2f       	mov	r18, r24
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	9c 81       	ldd	r25, Y+4	; 0x04
     ca8:	fc 01       	movw	r30, r24
     caa:	e2 0f       	add	r30, r18
     cac:	f3 1f       	adc	r31, r19
     cae:	80 81       	ld	r24, Z
     cb0:	8c 93       	st	X, r24
            /* wait until the transmitter is completed */
            while(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UDRE_BIT) == 0);
     cb2:	eb e2       	ldi	r30, 0x2B	; 43
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	82 95       	swap	r24
     cba:	86 95       	lsr	r24
     cbc:	87 70       	andi	r24, 0x07	; 7
     cbe:	88 2f       	mov	r24, r24
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	81 70       	andi	r24, 0x01	; 1
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	a1 f3       	breq	.-24     	; 0xcb2 <UART_UARTEnumSendString+0x50>
            local_u8Count++;
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	8f 5f       	subi	r24, 0xFF	; 255
     cce:	89 83       	std	Y+1, r24	; 0x01
    u8 local_u8Count = 0;
    if(copy_pu8SendString != NULL)
    {
        /* wait until the register is empty */
        while(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UDRE_BIT) == 0);
        while(copy_pu8SendString[local_u8Count] != '\0')
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	9c 81       	ldd	r25, Y+4	; 0x04
     cda:	fc 01       	movw	r30, r24
     cdc:	e2 0f       	add	r30, r18
     cde:	f3 1f       	adc	r31, r19
     ce0:	80 81       	ld	r24, Z
     ce2:	88 23       	and	r24, r24
     ce4:	d1 f6       	brne	.-76     	; 0xc9a <UART_UARTEnumSendString+0x38>
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <UART_UARTEnumSendString+0x8a>
            local_u8Count++;
        }
    }
    else
    {
        local_UARTEnumErrorState = UART_TXSTR_NOK;
     ce8:	85 e0       	ldi	r24, 0x05	; 5
     cea:	8a 83       	std	Y+2, r24	; 0x02
    }
    return local_UARTEnumErrorState;
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
}
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	cf 91       	pop	r28
     cf8:	df 91       	pop	r29
     cfa:	08 95       	ret

00000cfc <UART_UARTEnumReceiveString>:

UARTEnum UART_UARTEnumReceiveString(pu8 copy_pu8ReceiveString,u8 copy_u8StringLenth)
{
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	00 d0       	rcall	.+0      	; 0xd02 <UART_UARTEnumReceiveString+0x6>
     d02:	00 d0       	rcall	.+0      	; 0xd04 <UART_UARTEnumReceiveString+0x8>
     d04:	0f 92       	push	r0
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	9c 83       	std	Y+4, r25	; 0x04
     d0c:	8b 83       	std	Y+3, r24	; 0x03
     d0e:	6d 83       	std	Y+5, r22	; 0x05
    UARTEnum local_UARTEnumErrorState = UART_RXSTR_OK;
     d10:	86 e0       	ldi	r24, 0x06	; 6
     d12:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Count = 0;
     d14:	19 82       	std	Y+1, r1	; 0x01
    if(copy_pu8ReceiveString != NULL)
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	9c 81       	ldd	r25, Y+4	; 0x04
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	d1 f0       	breq	.+52     	; 0xd52 <UART_UARTEnumReceiveString+0x56>
     d1e:	14 c0       	rjmp	.+40     	; 0xd48 <UART_UARTEnumReceiveString+0x4c>
    {
    	while(local_u8Count < copy_u8StringLenth)
    	{
			/* wait until the receive is completed */
			while(GET_BIT(UART_u8_UCSRA_REG,UART_u8_RXC_BIT) == 0);
     d20:	eb e2       	ldi	r30, 0x2B	; 43
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	88 23       	and	r24, r24
     d28:	dc f7       	brge	.-10     	; 0xd20 <UART_UARTEnumReceiveString+0x24>
    		/* receive the data */
    		copy_pu8ReceiveString[local_u8Count] = UART_u8_UDR_REG;
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	9c 81       	ldd	r25, Y+4	; 0x04
     d34:	dc 01       	movw	r26, r24
     d36:	a2 0f       	add	r26, r18
     d38:	b3 1f       	adc	r27, r19
     d3a:	ec e2       	ldi	r30, 0x2C	; 44
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8c 93       	st	X, r24
    		local_u8Count++;
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	8f 5f       	subi	r24, 0xFF	; 255
     d46:	89 83       	std	Y+1, r24	; 0x01
{
    UARTEnum local_UARTEnumErrorState = UART_RXSTR_OK;
    u8 local_u8Count = 0;
    if(copy_pu8ReceiveString != NULL)
    {
    	while(local_u8Count < copy_u8StringLenth)
     d48:	99 81       	ldd	r25, Y+1	; 0x01
     d4a:	8d 81       	ldd	r24, Y+5	; 0x05
     d4c:	98 17       	cp	r25, r24
     d4e:	40 f3       	brcs	.-48     	; 0xd20 <UART_UARTEnumReceiveString+0x24>
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <UART_UARTEnumReceiveString+0x5a>
    		local_u8Count++;
    	}
    }
    else
    {
        local_UARTEnumErrorState = UART_RXSTR_NOK;
     d52:	87 e0       	ldi	r24, 0x07	; 7
     d54:	8a 83       	std	Y+2, r24	; 0x02
    }
    return local_UARTEnumErrorState;
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
}
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <PORT_voidInit>:
#include "../Include/PORT_private.h"
#include "../Include/PORT_config.h"


void PORT_voidInit(void)
{
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
	/* Initialization Direction for all Pins */
	// PORTA
	PORT_u8_DDRA_REG = CONC(PORT_u8_PA7_DIRECTION,PORT_u8_PA6_DIRECTION,PORT_u8_PA5_DIRECTION,PORT_u8_PA4_DIRECTION,
     d70:	ea e3       	ldi	r30, 0x3A	; 58
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	8f ef       	ldi	r24, 0xFF	; 255
     d76:	80 83       	st	Z, r24
	                        PORT_u8_PA3_DIRECTION,PORT_u8_PA2_DIRECTION,PORT_u8_PA1_DIRECTION,PORT_u8_PA0_DIRECTION);
	// PORTB
	PORT_u8_DDRB_REG = CONC(PORT_u8_PB7_DIRECTION,PORT_u8_PB6_DIRECTION,PORT_u8_PB5_DIRECTION,PORT_u8_PB4_DIRECTION,
     d78:	e7 e3       	ldi	r30, 0x37	; 55
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	8f ef       	ldi	r24, 0xFF	; 255
     d7e:	80 83       	st	Z, r24
	                        PORT_u8_PB3_DIRECTION,PORT_u8_PB2_DIRECTION,PORT_u8_PB1_DIRECTION,PORT_u8_PB0_DIRECTION);
	// PORTC
	PORT_u8_DDRC_REG = CONC(PORT_u8_PC7_DIRECTION,PORT_u8_PC6_DIRECTION,PORT_u8_PC5_DIRECTION,PORT_u8_PC4_DIRECTION,
     d80:	e4 e3       	ldi	r30, 0x34	; 52
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 ef       	ldi	r24, 0xF0	; 240
     d86:	80 83       	st	Z, r24
							PORT_u8_PC3_DIRECTION,PORT_u8_PC2_DIRECTION,PORT_u8_PC1_DIRECTION,PORT_u8_PC0_DIRECTION);
	// PORTD
	PORT_u8_DDRD_REG = CONC(PORT_u8_PD7_DIRECTION,PORT_u8_PD6_DIRECTION,PORT_u8_PD5_DIRECTION,PORT_u8_PD4_DIRECTION,
     d88:	e1 e3       	ldi	r30, 0x31	; 49
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	8e ef       	ldi	r24, 0xFE	; 254
     d8e:	80 83       	st	Z, r24
							PORT_u8_PD3_DIRECTION,PORT_u8_PD2_DIRECTION,PORT_u8_PD1_DIRECTION,PORT_u8_PD0_DIRECTION);
					
	/* Initialization Value for all Pins  */
	// PORTA
	PORT_u8_PORTA_REG = CONC(PORT_u8_PA7_VALUE,PORT_u8_PA6_VALUE,PORT_u8_PA5_VALUE,PORT_u8_PA4_VALUE,
     d90:	eb e3       	ldi	r30, 0x3B	; 59
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	10 82       	st	Z, r1
							 PORT_u8_PA3_VALUE,PORT_u8_PA2_VALUE,PORT_u8_PA1_VALUE,PORT_u8_PA0_VALUE);
	// PORTB
	PORT_u8_PORTB_REG = CONC(PORT_u8_PB7_VALUE,PORT_u8_PB6_VALUE,PORT_u8_PB5_VALUE,PORT_u8_PB4_VALUE,
     d96:	e8 e3       	ldi	r30, 0x38	; 56
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	8f e0       	ldi	r24, 0x0F	; 15
     d9c:	80 83       	st	Z, r24
							 PORT_u8_PB3_VALUE,PORT_u8_PB2_VALUE,PORT_u8_PB1_VALUE,PORT_u8_PB0_VALUE);
	// PORTC
	PORT_u8_PORTC_REG = CONC(PORT_u8_PC7_VALUE,PORT_u8_PC6_VALUE,PORT_u8_PC5_VALUE,PORT_u8_PC4_VALUE,
     d9e:	e5 e3       	ldi	r30, 0x35	; 53
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	8f e0       	ldi	r24, 0x0F	; 15
     da4:	80 83       	st	Z, r24
							 PORT_u8_PC3_VALUE,PORT_u8_PC2_VALUE,PORT_u8_PC1_VALUE,PORT_u8_PC0_VALUE);
	// PORTD
	PORT_u8_PORTD_REG = CONC(PORT_u8_PD7_VALUE,PORT_u8_PD6_VALUE,PORT_u8_PD5_VALUE,PORT_u8_PD4_VALUE,
     da6:	e2 e3       	ldi	r30, 0x32	; 50
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	10 82       	st	Z, r1
							 PORT_u8_PD3_VALUE,PORT_u8_PD2_VALUE,PORT_u8_PD1_VALUE,PORT_u8_PD0_VALUE);
}
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	08 95       	ret

00000db2 <PORT_PortEnumSetPinDirection>:

PortEnum PORT_PortEnumSetPinDirection(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Direction)
{
     db2:	df 93       	push	r29
     db4:	cf 93       	push	r28
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	2e 97       	sbiw	r28, 0x0e	; 14
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	8a 83       	std	Y+2, r24	; 0x02
     dc8:	6b 83       	std	Y+3, r22	; 0x03
     dca:	4c 83       	std	Y+4, r20	; 0x04
	PortEnum local_PortEnumErrorState = PORT_DIRECTION_OK;
     dcc:	19 82       	std	Y+1, r1	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= PORT_u8_PORTD) && (copy_u8PinId <= PORT_u8_PIN7))
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	84 30       	cpi	r24, 0x04	; 4
     dd2:	08 f0       	brcs	.+2      	; 0xdd6 <PORT_PortEnumSetPinDirection+0x24>
     dd4:	05 c1       	rjmp	.+522    	; 0xfe0 <PORT_PortEnumSetPinDirection+0x22e>
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	88 30       	cpi	r24, 0x08	; 8
     dda:	08 f0       	brcs	.+2      	; 0xdde <PORT_PortEnumSetPinDirection+0x2c>
     ddc:	01 c1       	rjmp	.+514    	; 0xfe0 <PORT_PortEnumSetPinDirection+0x22e>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	3e 87       	std	Y+14, r19	; 0x0e
     de6:	2d 87       	std	Y+13, r18	; 0x0d
     de8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dea:	9e 85       	ldd	r25, Y+14	; 0x0e
     dec:	81 30       	cpi	r24, 0x01	; 1
     dee:	91 05       	cpc	r25, r1
     df0:	09 f4       	brne	.+2      	; 0xdf4 <PORT_PortEnumSetPinDirection+0x42>
     df2:	4f c0       	rjmp	.+158    	; 0xe92 <PORT_PortEnumSetPinDirection+0xe0>
     df4:	2d 85       	ldd	r18, Y+13	; 0x0d
     df6:	3e 85       	ldd	r19, Y+14	; 0x0e
     df8:	22 30       	cpi	r18, 0x02	; 2
     dfa:	31 05       	cpc	r19, r1
     dfc:	2c f4       	brge	.+10     	; 0xe08 <PORT_PortEnumSetPinDirection+0x56>
     dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     e00:	9e 85       	ldd	r25, Y+14	; 0x0e
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	71 f0       	breq	.+28     	; 0xe22 <PORT_PortEnumSetPinDirection+0x70>
     e06:	ee c0       	rjmp	.+476    	; 0xfe4 <PORT_PortEnumSetPinDirection+0x232>
     e08:	2d 85       	ldd	r18, Y+13	; 0x0d
     e0a:	3e 85       	ldd	r19, Y+14	; 0x0e
     e0c:	22 30       	cpi	r18, 0x02	; 2
     e0e:	31 05       	cpc	r19, r1
     e10:	09 f4       	brne	.+2      	; 0xe14 <PORT_PortEnumSetPinDirection+0x62>
     e12:	77 c0       	rjmp	.+238    	; 0xf02 <PORT_PortEnumSetPinDirection+0x150>
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	83 30       	cpi	r24, 0x03	; 3
     e1a:	91 05       	cpc	r25, r1
     e1c:	09 f4       	brne	.+2      	; 0xe20 <PORT_PortEnumSetPinDirection+0x6e>
     e1e:	a9 c0       	rjmp	.+338    	; 0xf72 <PORT_PortEnumSetPinDirection+0x1c0>
     e20:	e1 c0       	rjmp	.+450    	; 0xfe4 <PORT_PortEnumSetPinDirection+0x232>
		{
			case PORT_u8_PORTA:   // PORTA
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
     e22:	8c 81       	ldd	r24, Y+4	; 0x04
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	3c 87       	std	Y+12, r19	; 0x0c
     e2a:	2b 87       	std	Y+11, r18	; 0x0b
     e2c:	8b 85       	ldd	r24, Y+11	; 0x0b
     e2e:	9c 85       	ldd	r25, Y+12	; 0x0c
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	d1 f0       	breq	.+52     	; 0xe68 <PORT_PortEnumSetPinDirection+0xb6>
     e34:	2b 85       	ldd	r18, Y+11	; 0x0b
     e36:	3c 85       	ldd	r19, Y+12	; 0x0c
     e38:	21 30       	cpi	r18, 0x01	; 1
     e3a:	31 05       	cpc	r19, r1
     e3c:	09 f0       	breq	.+2      	; 0xe40 <PORT_PortEnumSetPinDirection+0x8e>
     e3e:	d2 c0       	rjmp	.+420    	; 0xfe4 <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRA_REG,copy_u8PinId);     break;
     e40:	aa e3       	ldi	r26, 0x3A	; 58
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	ea e3       	ldi	r30, 0x3A	; 58
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	48 2f       	mov	r20, r24
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	02 2e       	mov	r0, r18
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <PORT_PortEnumSetPinDirection+0xac>
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	0a 94       	dec	r0
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <PORT_PortEnumSetPinDirection+0xa8>
     e62:	84 2b       	or	r24, r20
     e64:	8c 93       	st	X, r24
     e66:	be c0       	rjmp	.+380    	; 0xfe4 <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRA_REG,copy_u8PinId);     break;
     e68:	aa e3       	ldi	r26, 0x3A	; 58
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	ea e3       	ldi	r30, 0x3A	; 58
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <PORT_PortEnumSetPinDirection+0xd4>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <PORT_PortEnumSetPinDirection+0xd0>
     e8a:	80 95       	com	r24
     e8c:	84 23       	and	r24, r20
     e8e:	8c 93       	st	X, r24
     e90:	a9 c0       	rjmp	.+338    	; 0xfe4 <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTB:   // PORTB
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
     e92:	8c 81       	ldd	r24, Y+4	; 0x04
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	3a 87       	std	Y+10, r19	; 0x0a
     e9a:	29 87       	std	Y+9, r18	; 0x09
     e9c:	89 85       	ldd	r24, Y+9	; 0x09
     e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	d1 f0       	breq	.+52     	; 0xed8 <PORT_PortEnumSetPinDirection+0x126>
     ea4:	29 85       	ldd	r18, Y+9	; 0x09
     ea6:	3a 85       	ldd	r19, Y+10	; 0x0a
     ea8:	21 30       	cpi	r18, 0x01	; 1
     eaa:	31 05       	cpc	r19, r1
     eac:	09 f0       	breq	.+2      	; 0xeb0 <PORT_PortEnumSetPinDirection+0xfe>
     eae:	9a c0       	rjmp	.+308    	; 0xfe4 <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRB_REG,copy_u8PinId);     break;
     eb0:	a7 e3       	ldi	r26, 0x37	; 55
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e7 e3       	ldi	r30, 0x37	; 55
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 2e       	mov	r0, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <PORT_PortEnumSetPinDirection+0x11c>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <PORT_PortEnumSetPinDirection+0x118>
     ed2:	84 2b       	or	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	86 c0       	rjmp	.+268    	; 0xfe4 <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRB_REG,copy_u8PinId);     break;
     ed8:	a7 e3       	ldi	r26, 0x37	; 55
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e7 e3       	ldi	r30, 0x37	; 55
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <PORT_PortEnumSetPinDirection+0x144>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <PORT_PortEnumSetPinDirection+0x140>
     efa:	80 95       	com	r24
     efc:	84 23       	and	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	71 c0       	rjmp	.+226    	; 0xfe4 <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTC:  // PORTC
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	38 87       	std	Y+8, r19	; 0x08
     f0a:	2f 83       	std	Y+7, r18	; 0x07
     f0c:	8f 81       	ldd	r24, Y+7	; 0x07
     f0e:	98 85       	ldd	r25, Y+8	; 0x08
     f10:	00 97       	sbiw	r24, 0x00	; 0
     f12:	d1 f0       	breq	.+52     	; 0xf48 <PORT_PortEnumSetPinDirection+0x196>
     f14:	2f 81       	ldd	r18, Y+7	; 0x07
     f16:	38 85       	ldd	r19, Y+8	; 0x08
     f18:	21 30       	cpi	r18, 0x01	; 1
     f1a:	31 05       	cpc	r19, r1
     f1c:	09 f0       	breq	.+2      	; 0xf20 <PORT_PortEnumSetPinDirection+0x16e>
     f1e:	62 c0       	rjmp	.+196    	; 0xfe4 <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRC_REG,copy_u8PinId);     break;
     f20:	a4 e3       	ldi	r26, 0x34	; 52
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e4 e3       	ldi	r30, 0x34	; 52
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	48 2f       	mov	r20, r24
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 2e       	mov	r0, r18
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <PORT_PortEnumSetPinDirection+0x18c>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <PORT_PortEnumSetPinDirection+0x188>
     f42:	84 2b       	or	r24, r20
     f44:	8c 93       	st	X, r24
     f46:	4e c0       	rjmp	.+156    	; 0xfe4 <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRC_REG,copy_u8PinId);     break;
     f48:	a4 e3       	ldi	r26, 0x34	; 52
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e4 e3       	ldi	r30, 0x34	; 52
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <PORT_PortEnumSetPinDirection+0x1b4>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <PORT_PortEnumSetPinDirection+0x1b0>
     f6a:	80 95       	com	r24
     f6c:	84 23       	and	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	39 c0       	rjmp	.+114    	; 0xfe4 <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTD:  // PORTD
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
     f72:	8c 81       	ldd	r24, Y+4	; 0x04
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	3e 83       	std	Y+6, r19	; 0x06
     f7a:	2d 83       	std	Y+5, r18	; 0x05
     f7c:	8d 81       	ldd	r24, Y+5	; 0x05
     f7e:	9e 81       	ldd	r25, Y+6	; 0x06
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	c9 f0       	breq	.+50     	; 0xfb6 <PORT_PortEnumSetPinDirection+0x204>
     f84:	2d 81       	ldd	r18, Y+5	; 0x05
     f86:	3e 81       	ldd	r19, Y+6	; 0x06
     f88:	21 30       	cpi	r18, 0x01	; 1
     f8a:	31 05       	cpc	r19, r1
     f8c:	59 f5       	brne	.+86     	; 0xfe4 <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRD_REG,copy_u8PinId);     break;
     f8e:	a1 e3       	ldi	r26, 0x31	; 49
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e1 e3       	ldi	r30, 0x31	; 49
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <PORT_PortEnumSetPinDirection+0x1fa>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <PORT_PortEnumSetPinDirection+0x1f6>
     fb0:	84 2b       	or	r24, r20
     fb2:	8c 93       	st	X, r24
     fb4:	17 c0       	rjmp	.+46     	; 0xfe4 <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRD_REG,copy_u8PinId);     break;
     fb6:	a1 e3       	ldi	r26, 0x31	; 49
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e1 e3       	ldi	r30, 0x31	; 49
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <PORT_PortEnumSetPinDirection+0x222>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <PORT_PortEnumSetPinDirection+0x21e>
     fd8:	80 95       	com	r24
     fda:	84 23       	and	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <PORT_PortEnumSetPinDirection+0x232>
			break;
		}
	}
	else
	{
		local_PortEnumErrorState = PORT_DIRECTION_NOK;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_PortEnumErrorState;
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe6:	2e 96       	adiw	r28, 0x0e	; 14
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <PORT_PortEnumSetPinMode>:


PortEnum PORT_PortEnumSetPinMode(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Mode)
{
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	2e 97       	sbiw	r28, 0x0e	; 14
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	8a 83       	std	Y+2, r24	; 0x02
    100e:	6b 83       	std	Y+3, r22	; 0x03
    1010:	4c 83       	std	Y+4, r20	; 0x04
	PortEnum local_PortEnumErrorState = PORT_MODE_OK;
    1012:	82 e0       	ldi	r24, 0x02	; 2
    1014:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= PORT_u8_PORTD) && (copy_u8PinId <= PORT_u8_PIN7))
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	84 30       	cpi	r24, 0x04	; 4
    101a:	08 f0       	brcs	.+2      	; 0x101e <PORT_PortEnumSetPinMode+0x26>
    101c:	ee c1       	rjmp	.+988    	; 0x13fa <PORT_PortEnumSetPinMode+0x402>
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	88 30       	cpi	r24, 0x08	; 8
    1022:	08 f0       	brcs	.+2      	; 0x1026 <PORT_PortEnumSetPinMode+0x2e>
    1024:	ea c1       	rjmp	.+980    	; 0x13fa <PORT_PortEnumSetPinMode+0x402>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	3e 87       	std	Y+14, r19	; 0x0e
    102e:	2d 87       	std	Y+13, r18	; 0x0d
    1030:	8d 85       	ldd	r24, Y+13	; 0x0d
    1032:	9e 85       	ldd	r25, Y+14	; 0x0e
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	91 05       	cpc	r25, r1
    1038:	09 f4       	brne	.+2      	; 0x103c <PORT_PortEnumSetPinMode+0x44>
    103a:	89 c0       	rjmp	.+274    	; 0x114e <PORT_PortEnumSetPinMode+0x156>
    103c:	2d 85       	ldd	r18, Y+13	; 0x0d
    103e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1040:	22 30       	cpi	r18, 0x02	; 2
    1042:	31 05       	cpc	r19, r1
    1044:	2c f4       	brge	.+10     	; 0x1050 <PORT_PortEnumSetPinMode+0x58>
    1046:	8d 85       	ldd	r24, Y+13	; 0x0d
    1048:	9e 85       	ldd	r25, Y+14	; 0x0e
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	71 f0       	breq	.+28     	; 0x106a <PORT_PortEnumSetPinMode+0x72>
    104e:	d7 c1       	rjmp	.+942    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
    1050:	2d 85       	ldd	r18, Y+13	; 0x0d
    1052:	3e 85       	ldd	r19, Y+14	; 0x0e
    1054:	22 30       	cpi	r18, 0x02	; 2
    1056:	31 05       	cpc	r19, r1
    1058:	09 f4       	brne	.+2      	; 0x105c <PORT_PortEnumSetPinMode+0x64>
    105a:	eb c0       	rjmp	.+470    	; 0x1232 <PORT_PortEnumSetPinMode+0x23a>
    105c:	8d 85       	ldd	r24, Y+13	; 0x0d
    105e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1060:	83 30       	cpi	r24, 0x03	; 3
    1062:	91 05       	cpc	r25, r1
    1064:	09 f4       	brne	.+2      	; 0x1068 <PORT_PortEnumSetPinMode+0x70>
    1066:	57 c1       	rjmp	.+686    	; 0x1316 <PORT_PortEnumSetPinMode+0x31e>
    1068:	ca c1       	rjmp	.+916    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
		{
			case PORT_u8_PORTA:  // PORTA
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	3c 87       	std	Y+12, r19	; 0x0c
    1072:	2b 87       	std	Y+11, r18	; 0x0b
    1074:	8b 85       	ldd	r24, Y+11	; 0x0b
    1076:	9c 85       	ldd	r25, Y+12	; 0x0c
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	91 05       	cpc	r25, r1
    107c:	b1 f0       	breq	.+44     	; 0x10aa <PORT_PortEnumSetPinMode+0xb2>
    107e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1080:	3c 85       	ldd	r19, Y+12	; 0x0c
    1082:	22 30       	cpi	r18, 0x02	; 2
    1084:	31 05       	cpc	r19, r1
    1086:	2c f4       	brge	.+10     	; 0x1092 <PORT_PortEnumSetPinMode+0x9a>
    1088:	8b 85       	ldd	r24, Y+11	; 0x0b
    108a:	9c 85       	ldd	r25, Y+12	; 0x0c
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	09 f1       	breq	.+66     	; 0x10d2 <PORT_PortEnumSetPinMode+0xda>
    1090:	b6 c1       	rjmp	.+876    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
    1092:	2b 85       	ldd	r18, Y+11	; 0x0b
    1094:	3c 85       	ldd	r19, Y+12	; 0x0c
    1096:	22 30       	cpi	r18, 0x02	; 2
    1098:	31 05       	cpc	r19, r1
    109a:	81 f1       	breq	.+96     	; 0x10fc <PORT_PortEnumSetPinMode+0x104>
    109c:	8b 85       	ldd	r24, Y+11	; 0x0b
    109e:	9c 85       	ldd	r25, Y+12	; 0x0c
    10a0:	83 30       	cpi	r24, 0x03	; 3
    10a2:	91 05       	cpc	r25, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <PORT_PortEnumSetPinMode+0xb0>
    10a6:	3e c0       	rjmp	.+124    	; 0x1124 <PORT_PortEnumSetPinMode+0x12c>
    10a8:	aa c1       	rjmp	.+852    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
    10aa:	ab e3       	ldi	r26, 0x3B	; 59
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	eb e3       	ldi	r30, 0x3B	; 59
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <PORT_PortEnumSetPinMode+0xd0>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <PORT_PortEnumSetPinMode+0xcc>
    10cc:	84 2b       	or	r24, r20
    10ce:	8c 93       	st	X, r24
    10d0:	96 c1       	rjmp	.+812    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
    10d2:	ab e3       	ldi	r26, 0x3B	; 59
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	eb e3       	ldi	r30, 0x3B	; 59
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <PORT_PortEnumSetPinMode+0xf8>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <PORT_PortEnumSetPinMode+0xf4>
    10f4:	80 95       	com	r24
    10f6:	84 23       	and	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	81 c1       	rjmp	.+770    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
    10fc:	ab e3       	ldi	r26, 0x3B	; 59
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	eb e3       	ldi	r30, 0x3B	; 59
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <PORT_PortEnumSetPinMode+0x122>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <PORT_PortEnumSetPinMode+0x11e>
    111e:	84 2b       	or	r24, r20
    1120:	8c 93       	st	X, r24
    1122:	6d c1       	rjmp	.+730    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
    1124:	ab e3       	ldi	r26, 0x3B	; 59
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	eb e3       	ldi	r30, 0x3B	; 59
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	48 2f       	mov	r20, r24
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 2e       	mov	r0, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <PORT_PortEnumSetPinMode+0x14a>
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	0a 94       	dec	r0
    1144:	e2 f7       	brpl	.-8      	; 0x113e <PORT_PortEnumSetPinMode+0x146>
    1146:	80 95       	com	r24
    1148:	84 23       	and	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	58 c1       	rjmp	.+688    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTB:  // PORTB
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    114e:	8c 81       	ldd	r24, Y+4	; 0x04
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3a 87       	std	Y+10, r19	; 0x0a
    1156:	29 87       	std	Y+9, r18	; 0x09
    1158:	89 85       	ldd	r24, Y+9	; 0x09
    115a:	9a 85       	ldd	r25, Y+10	; 0x0a
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	b1 f0       	breq	.+44     	; 0x118e <PORT_PortEnumSetPinMode+0x196>
    1162:	29 85       	ldd	r18, Y+9	; 0x09
    1164:	3a 85       	ldd	r19, Y+10	; 0x0a
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <PORT_PortEnumSetPinMode+0x17e>
    116c:	89 85       	ldd	r24, Y+9	; 0x09
    116e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	09 f1       	breq	.+66     	; 0x11b6 <PORT_PortEnumSetPinMode+0x1be>
    1174:	44 c1       	rjmp	.+648    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
    1176:	29 85       	ldd	r18, Y+9	; 0x09
    1178:	3a 85       	ldd	r19, Y+10	; 0x0a
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f1       	breq	.+96     	; 0x11e0 <PORT_PortEnumSetPinMode+0x1e8>
    1180:	89 85       	ldd	r24, Y+9	; 0x09
    1182:	9a 85       	ldd	r25, Y+10	; 0x0a
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	09 f4       	brne	.+2      	; 0x118c <PORT_PortEnumSetPinMode+0x194>
    118a:	3e c0       	rjmp	.+124    	; 0x1208 <PORT_PortEnumSetPinMode+0x210>
    118c:	38 c1       	rjmp	.+624    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
    118e:	a8 e3       	ldi	r26, 0x38	; 56
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e8 e3       	ldi	r30, 0x38	; 56
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <PORT_PortEnumSetPinMode+0x1b4>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <PORT_PortEnumSetPinMode+0x1b0>
    11b0:	84 2b       	or	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	24 c1       	rjmp	.+584    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
    11b6:	a8 e3       	ldi	r26, 0x38	; 56
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e8 e3       	ldi	r30, 0x38	; 56
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <PORT_PortEnumSetPinMode+0x1dc>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <PORT_PortEnumSetPinMode+0x1d8>
    11d8:	80 95       	com	r24
    11da:	84 23       	and	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	0f c1       	rjmp	.+542    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
    11e0:	a8 e3       	ldi	r26, 0x38	; 56
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e8 e3       	ldi	r30, 0x38	; 56
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <PORT_PortEnumSetPinMode+0x206>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <PORT_PortEnumSetPinMode+0x202>
    1202:	84 2b       	or	r24, r20
    1204:	8c 93       	st	X, r24
    1206:	fb c0       	rjmp	.+502    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
    1208:	a8 e3       	ldi	r26, 0x38	; 56
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e8 e3       	ldi	r30, 0x38	; 56
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	48 2f       	mov	r20, r24
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	02 2e       	mov	r0, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <PORT_PortEnumSetPinMode+0x22e>
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	0a 94       	dec	r0
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <PORT_PortEnumSetPinMode+0x22a>
    122a:	80 95       	com	r24
    122c:	84 23       	and	r24, r20
    122e:	8c 93       	st	X, r24
    1230:	e6 c0       	rjmp	.+460    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTC:  // PORTC
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	38 87       	std	Y+8, r19	; 0x08
    123a:	2f 83       	std	Y+7, r18	; 0x07
    123c:	8f 81       	ldd	r24, Y+7	; 0x07
    123e:	98 85       	ldd	r25, Y+8	; 0x08
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	91 05       	cpc	r25, r1
    1244:	b1 f0       	breq	.+44     	; 0x1272 <PORT_PortEnumSetPinMode+0x27a>
    1246:	2f 81       	ldd	r18, Y+7	; 0x07
    1248:	38 85       	ldd	r19, Y+8	; 0x08
    124a:	22 30       	cpi	r18, 0x02	; 2
    124c:	31 05       	cpc	r19, r1
    124e:	2c f4       	brge	.+10     	; 0x125a <PORT_PortEnumSetPinMode+0x262>
    1250:	8f 81       	ldd	r24, Y+7	; 0x07
    1252:	98 85       	ldd	r25, Y+8	; 0x08
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	09 f1       	breq	.+66     	; 0x129a <PORT_PortEnumSetPinMode+0x2a2>
    1258:	d2 c0       	rjmp	.+420    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
    125a:	2f 81       	ldd	r18, Y+7	; 0x07
    125c:	38 85       	ldd	r19, Y+8	; 0x08
    125e:	22 30       	cpi	r18, 0x02	; 2
    1260:	31 05       	cpc	r19, r1
    1262:	81 f1       	breq	.+96     	; 0x12c4 <PORT_PortEnumSetPinMode+0x2cc>
    1264:	8f 81       	ldd	r24, Y+7	; 0x07
    1266:	98 85       	ldd	r25, Y+8	; 0x08
    1268:	83 30       	cpi	r24, 0x03	; 3
    126a:	91 05       	cpc	r25, r1
    126c:	09 f4       	brne	.+2      	; 0x1270 <PORT_PortEnumSetPinMode+0x278>
    126e:	3e c0       	rjmp	.+124    	; 0x12ec <PORT_PortEnumSetPinMode+0x2f4>
    1270:	c6 c0       	rjmp	.+396    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    1272:	a5 e3       	ldi	r26, 0x35	; 53
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e5 e3       	ldi	r30, 0x35	; 53
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 2e       	mov	r0, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <PORT_PortEnumSetPinMode+0x298>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <PORT_PortEnumSetPinMode+0x294>
    1294:	84 2b       	or	r24, r20
    1296:	8c 93       	st	X, r24
    1298:	b2 c0       	rjmp	.+356    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    129a:	a5 e3       	ldi	r26, 0x35	; 53
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e5 e3       	ldi	r30, 0x35	; 53
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <PORT_PortEnumSetPinMode+0x2c0>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <PORT_PortEnumSetPinMode+0x2bc>
    12bc:	80 95       	com	r24
    12be:	84 23       	and	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	9d c0       	rjmp	.+314    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    12c4:	a5 e3       	ldi	r26, 0x35	; 53
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e5 e3       	ldi	r30, 0x35	; 53
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <PORT_PortEnumSetPinMode+0x2ea>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <PORT_PortEnumSetPinMode+0x2e6>
    12e6:	84 2b       	or	r24, r20
    12e8:	8c 93       	st	X, r24
    12ea:	89 c0       	rjmp	.+274    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    12ec:	a5 e3       	ldi	r26, 0x35	; 53
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e5 e3       	ldi	r30, 0x35	; 53
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	48 2f       	mov	r20, r24
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 2e       	mov	r0, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <PORT_PortEnumSetPinMode+0x312>
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	0a 94       	dec	r0
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <PORT_PortEnumSetPinMode+0x30e>
    130e:	80 95       	com	r24
    1310:	84 23       	and	r24, r20
    1312:	8c 93       	st	X, r24
    1314:	74 c0       	rjmp	.+232    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTD:  // PORTD
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    1316:	8c 81       	ldd	r24, Y+4	; 0x04
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	3e 83       	std	Y+6, r19	; 0x06
    131e:	2d 83       	std	Y+5, r18	; 0x05
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	91 05       	cpc	r25, r1
    1328:	b1 f0       	breq	.+44     	; 0x1356 <PORT_PortEnumSetPinMode+0x35e>
    132a:	2d 81       	ldd	r18, Y+5	; 0x05
    132c:	3e 81       	ldd	r19, Y+6	; 0x06
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	2c f4       	brge	.+10     	; 0x133e <PORT_PortEnumSetPinMode+0x346>
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	09 f1       	breq	.+66     	; 0x137e <PORT_PortEnumSetPinMode+0x386>
    133c:	60 c0       	rjmp	.+192    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
    133e:	2d 81       	ldd	r18, Y+5	; 0x05
    1340:	3e 81       	ldd	r19, Y+6	; 0x06
    1342:	22 30       	cpi	r18, 0x02	; 2
    1344:	31 05       	cpc	r19, r1
    1346:	81 f1       	breq	.+96     	; 0x13a8 <PORT_PortEnumSetPinMode+0x3b0>
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	83 30       	cpi	r24, 0x03	; 3
    134e:	91 05       	cpc	r25, r1
    1350:	09 f4       	brne	.+2      	; 0x1354 <PORT_PortEnumSetPinMode+0x35c>
    1352:	3e c0       	rjmp	.+124    	; 0x13d0 <PORT_PortEnumSetPinMode+0x3d8>
    1354:	54 c0       	rjmp	.+168    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    1356:	a2 e3       	ldi	r26, 0x32	; 50
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e2 e3       	ldi	r30, 0x32	; 50
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	48 2f       	mov	r20, r24
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 2e       	mov	r0, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <PORT_PortEnumSetPinMode+0x37c>
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	0a 94       	dec	r0
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <PORT_PortEnumSetPinMode+0x378>
    1378:	84 2b       	or	r24, r20
    137a:	8c 93       	st	X, r24
    137c:	40 c0       	rjmp	.+128    	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    137e:	a2 e3       	ldi	r26, 0x32	; 50
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e2 e3       	ldi	r30, 0x32	; 50
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <PORT_PortEnumSetPinMode+0x3a4>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <PORT_PortEnumSetPinMode+0x3a0>
    13a0:	80 95       	com	r24
    13a2:	84 23       	and	r24, r20
    13a4:	8c 93       	st	X, r24
    13a6:	2b c0       	rjmp	.+86     	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    13a8:	a2 e3       	ldi	r26, 0x32	; 50
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e2 e3       	ldi	r30, 0x32	; 50
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <PORT_PortEnumSetPinMode+0x3ce>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <PORT_PortEnumSetPinMode+0x3ca>
    13ca:	84 2b       	or	r24, r20
    13cc:	8c 93       	st	X, r24
    13ce:	17 c0       	rjmp	.+46     	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    13d0:	a2 e3       	ldi	r26, 0x32	; 50
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e2 e3       	ldi	r30, 0x32	; 50
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 2e       	mov	r0, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <PORT_PortEnumSetPinMode+0x3f6>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <PORT_PortEnumSetPinMode+0x3f2>
    13f2:	80 95       	com	r24
    13f4:	84 23       	and	r24, r20
    13f6:	8c 93       	st	X, r24
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <PORT_PortEnumSetPinMode+0x406>
			break;
		}
	}
	else
	{
		local_PortEnumErrorState = PORT_MODE_NOK;
    13fa:	83 e0       	ldi	r24, 0x03	; 3
    13fc:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_PortEnumErrorState;
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1400:	2e 96       	adiw	r28, 0x0e	; 14
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <GIE_voidInit>:

#include "../Include/GIE_interface.h"
#include "../Include/GIE_private.h"

void GIE_voidInit(u8 copy_u8State)
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	00 d0       	rcall	.+0      	; 0x1418 <GIE_voidInit+0x6>
    1418:	0f 92       	push	r0
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	89 83       	std	Y+1, r24	; 0x01
    switch(copy_u8State)
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	3b 83       	std	Y+3, r19	; 0x03
    1428:	2a 83       	std	Y+2, r18	; 0x02
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	9b 81       	ldd	r25, Y+3	; 0x03
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	31 f0       	breq	.+12     	; 0x143e <GIE_voidInit+0x2c>
    1432:	2a 81       	ldd	r18, Y+2	; 0x02
    1434:	3b 81       	ldd	r19, Y+3	; 0x03
    1436:	21 30       	cpi	r18, 0x01	; 1
    1438:	31 05       	cpc	r19, r1
    143a:	49 f0       	breq	.+18     	; 0x144e <GIE_voidInit+0x3c>
    143c:	0f c0       	rjmp	.+30     	; 0x145c <GIE_voidInit+0x4a>
    {
        case GIE_u8_ENABLE :  SET_BIT(GIE_u8_SREG,7);       break;
    143e:	af e5       	ldi	r26, 0x5F	; 95
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	ef e5       	ldi	r30, 0x5F	; 95
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	80 68       	ori	r24, 0x80	; 128
    144a:	8c 93       	st	X, r24
    144c:	07 c0       	rjmp	.+14     	; 0x145c <GIE_voidInit+0x4a>
        case GIE_u8_DISABLE:  CLR_BIT(GIE_u8_SREG,7);       break;
    144e:	af e5       	ldi	r26, 0x5F	; 95
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	ef e5       	ldi	r30, 0x5F	; 95
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	8f 77       	andi	r24, 0x7F	; 127
    145a:	8c 93       	st	X, r24
    }
}
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <DIO_DioEnumWriteChannel>:
#include "../Include/DIO_interface.h"
#include "../Include/DIO_private.h"
#include "../Include/DIO_config.h"

DioEnum DIO_DioEnumWriteChannel(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Level)
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	2e 97       	sbiw	r28, 0x0e	; 14
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	8a 83       	std	Y+2, r24	; 0x02
    147e:	6b 83       	std	Y+3, r22	; 0x03
    1480:	4c 83       	std	Y+4, r20	; 0x04
	DioEnum local_DioEnumErrorState = DIO_WRITE_OK;
    1482:	19 82       	std	Y+1, r1	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7))
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	84 30       	cpi	r24, 0x04	; 4
    1488:	08 f0       	brcs	.+2      	; 0x148c <DIO_DioEnumWriteChannel+0x24>
    148a:	05 c1       	rjmp	.+522    	; 0x1696 <DIO_DioEnumWriteChannel+0x22e>
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	88 30       	cpi	r24, 0x08	; 8
    1490:	08 f0       	brcs	.+2      	; 0x1494 <DIO_DioEnumWriteChannel+0x2c>
    1492:	01 c1       	rjmp	.+514    	; 0x1696 <DIO_DioEnumWriteChannel+0x22e>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	3e 87       	std	Y+14, r19	; 0x0e
    149c:	2d 87       	std	Y+13, r18	; 0x0d
    149e:	8d 85       	ldd	r24, Y+13	; 0x0d
    14a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	91 05       	cpc	r25, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <DIO_DioEnumWriteChannel+0x42>
    14a8:	4f c0       	rjmp	.+158    	; 0x1548 <DIO_DioEnumWriteChannel+0xe0>
    14aa:	2d 85       	ldd	r18, Y+13	; 0x0d
    14ac:	3e 85       	ldd	r19, Y+14	; 0x0e
    14ae:	22 30       	cpi	r18, 0x02	; 2
    14b0:	31 05       	cpc	r19, r1
    14b2:	2c f4       	brge	.+10     	; 0x14be <DIO_DioEnumWriteChannel+0x56>
    14b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	71 f0       	breq	.+28     	; 0x14d8 <DIO_DioEnumWriteChannel+0x70>
    14bc:	ee c0       	rjmp	.+476    	; 0x169a <DIO_DioEnumWriteChannel+0x232>
    14be:	2d 85       	ldd	r18, Y+13	; 0x0d
    14c0:	3e 85       	ldd	r19, Y+14	; 0x0e
    14c2:	22 30       	cpi	r18, 0x02	; 2
    14c4:	31 05       	cpc	r19, r1
    14c6:	09 f4       	brne	.+2      	; 0x14ca <DIO_DioEnumWriteChannel+0x62>
    14c8:	77 c0       	rjmp	.+238    	; 0x15b8 <DIO_DioEnumWriteChannel+0x150>
    14ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    14cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ce:	83 30       	cpi	r24, 0x03	; 3
    14d0:	91 05       	cpc	r25, r1
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <DIO_DioEnumWriteChannel+0x6e>
    14d4:	a9 c0       	rjmp	.+338    	; 0x1628 <DIO_DioEnumWriteChannel+0x1c0>
    14d6:	e1 c0       	rjmp	.+450    	; 0x169a <DIO_DioEnumWriteChannel+0x232>
		{
			case DIO_u8_PORTA:  // PORTA
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	3c 87       	std	Y+12, r19	; 0x0c
    14e0:	2b 87       	std	Y+11, r18	; 0x0b
    14e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    14e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	d1 f0       	breq	.+52     	; 0x151e <DIO_DioEnumWriteChannel+0xb6>
    14ea:	2b 85       	ldd	r18, Y+11	; 0x0b
    14ec:	3c 85       	ldd	r19, Y+12	; 0x0c
    14ee:	21 30       	cpi	r18, 0x01	; 1
    14f0:	31 05       	cpc	r19, r1
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <DIO_DioEnumWriteChannel+0x8e>
    14f4:	d2 c0       	rjmp	.+420    	; 0x169a <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,copy_u8PinId);     break;
    14f6:	ab e3       	ldi	r26, 0x3B	; 59
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	eb e3       	ldi	r30, 0x3B	; 59
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <DIO_DioEnumWriteChannel+0xac>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <DIO_DioEnumWriteChannel+0xa8>
    1518:	84 2b       	or	r24, r20
    151a:	8c 93       	st	X, r24
    151c:	be c0       	rjmp	.+380    	; 0x169a <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,copy_u8PinId);     break;
    151e:	ab e3       	ldi	r26, 0x3B	; 59
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	eb e3       	ldi	r30, 0x3B	; 59
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	48 2f       	mov	r20, r24
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DIO_DioEnumWriteChannel+0xd4>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <DIO_DioEnumWriteChannel+0xd0>
    1540:	80 95       	com	r24
    1542:	84 23       	and	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	a9 c0       	rjmp	.+338    	; 0x169a <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTB:  // PORTB
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    1548:	8c 81       	ldd	r24, Y+4	; 0x04
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	3a 87       	std	Y+10, r19	; 0x0a
    1550:	29 87       	std	Y+9, r18	; 0x09
    1552:	89 85       	ldd	r24, Y+9	; 0x09
    1554:	9a 85       	ldd	r25, Y+10	; 0x0a
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	d1 f0       	breq	.+52     	; 0x158e <DIO_DioEnumWriteChannel+0x126>
    155a:	29 85       	ldd	r18, Y+9	; 0x09
    155c:	3a 85       	ldd	r19, Y+10	; 0x0a
    155e:	21 30       	cpi	r18, 0x01	; 1
    1560:	31 05       	cpc	r19, r1
    1562:	09 f0       	breq	.+2      	; 0x1566 <DIO_DioEnumWriteChannel+0xfe>
    1564:	9a c0       	rjmp	.+308    	; 0x169a <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,copy_u8PinId);     break;
    1566:	a8 e3       	ldi	r26, 0x38	; 56
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e8 e3       	ldi	r30, 0x38	; 56
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	48 2f       	mov	r20, r24
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 2e       	mov	r0, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <DIO_DioEnumWriteChannel+0x11c>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	0a 94       	dec	r0
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <DIO_DioEnumWriteChannel+0x118>
    1588:	84 2b       	or	r24, r20
    158a:	8c 93       	st	X, r24
    158c:	86 c0       	rjmp	.+268    	; 0x169a <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,copy_u8PinId);     break;
    158e:	a8 e3       	ldi	r26, 0x38	; 56
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e8 e3       	ldi	r30, 0x38	; 56
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 2e       	mov	r0, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <DIO_DioEnumWriteChannel+0x144>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	0a 94       	dec	r0
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <DIO_DioEnumWriteChannel+0x140>
    15b0:	80 95       	com	r24
    15b2:	84 23       	and	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	71 c0       	rjmp	.+226    	; 0x169a <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTC:  // PORTC
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    15b8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	38 87       	std	Y+8, r19	; 0x08
    15c0:	2f 83       	std	Y+7, r18	; 0x07
    15c2:	8f 81       	ldd	r24, Y+7	; 0x07
    15c4:	98 85       	ldd	r25, Y+8	; 0x08
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	d1 f0       	breq	.+52     	; 0x15fe <DIO_DioEnumWriteChannel+0x196>
    15ca:	2f 81       	ldd	r18, Y+7	; 0x07
    15cc:	38 85       	ldd	r19, Y+8	; 0x08
    15ce:	21 30       	cpi	r18, 0x01	; 1
    15d0:	31 05       	cpc	r19, r1
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <DIO_DioEnumWriteChannel+0x16e>
    15d4:	62 c0       	rjmp	.+196    	; 0x169a <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,copy_u8PinId);     break;
    15d6:	a5 e3       	ldi	r26, 0x35	; 53
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e5 e3       	ldi	r30, 0x35	; 53
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	48 2f       	mov	r20, r24
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 2e       	mov	r0, r18
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <DIO_DioEnumWriteChannel+0x18c>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	0a 94       	dec	r0
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <DIO_DioEnumWriteChannel+0x188>
    15f8:	84 2b       	or	r24, r20
    15fa:	8c 93       	st	X, r24
    15fc:	4e c0       	rjmp	.+156    	; 0x169a <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,copy_u8PinId);     break;
    15fe:	a5 e3       	ldi	r26, 0x35	; 53
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e5 e3       	ldi	r30, 0x35	; 53
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_DioEnumWriteChannel+0x1b4>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_DioEnumWriteChannel+0x1b0>
    1620:	80 95       	com	r24
    1622:	84 23       	and	r24, r20
    1624:	8c 93       	st	X, r24
    1626:	39 c0       	rjmp	.+114    	; 0x169a <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTD:  // PORTD
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	3e 83       	std	Y+6, r19	; 0x06
    1630:	2d 83       	std	Y+5, r18	; 0x05
    1632:	8d 81       	ldd	r24, Y+5	; 0x05
    1634:	9e 81       	ldd	r25, Y+6	; 0x06
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	c9 f0       	breq	.+50     	; 0x166c <DIO_DioEnumWriteChannel+0x204>
    163a:	2d 81       	ldd	r18, Y+5	; 0x05
    163c:	3e 81       	ldd	r19, Y+6	; 0x06
    163e:	21 30       	cpi	r18, 0x01	; 1
    1640:	31 05       	cpc	r19, r1
    1642:	59 f5       	brne	.+86     	; 0x169a <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,copy_u8PinId);     break;
    1644:	a2 e3       	ldi	r26, 0x32	; 50
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e2 e3       	ldi	r30, 0x32	; 50
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	02 2e       	mov	r0, r18
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <DIO_DioEnumWriteChannel+0x1fa>
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	0a 94       	dec	r0
    1664:	e2 f7       	brpl	.-8      	; 0x165e <DIO_DioEnumWriteChannel+0x1f6>
    1666:	84 2b       	or	r24, r20
    1668:	8c 93       	st	X, r24
    166a:	17 c0       	rjmp	.+46     	; 0x169a <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,copy_u8PinId);     break;
    166c:	a2 e3       	ldi	r26, 0x32	; 50
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e2 e3       	ldi	r30, 0x32	; 50
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	48 2f       	mov	r20, r24
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 2e       	mov	r0, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <DIO_DioEnumWriteChannel+0x222>
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	0a 94       	dec	r0
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <DIO_DioEnumWriteChannel+0x21e>
    168e:	80 95       	com	r24
    1690:	84 23       	and	r24, r20
    1692:	8c 93       	st	X, r24
    1694:	02 c0       	rjmp	.+4      	; 0x169a <DIO_DioEnumWriteChannel+0x232>
			break;
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_WRITE_NOK;
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    169a:	89 81       	ldd	r24, Y+1	; 0x01
}
    169c:	2e 96       	adiw	r28, 0x0e	; 14
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <DIO_DioEnumReadChannel>:

DioEnum DIO_DioEnumReadChannel(u8 copy_u8PortId,u8 copy_u8PinId,pu8 copy_pu8ReadChannel)
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	28 97       	sbiw	r28, 0x08	; 8
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	8b 83       	std	Y+3, r24	; 0x03
    16c4:	6c 83       	std	Y+4, r22	; 0x04
    16c6:	5e 83       	std	Y+6, r21	; 0x06
    16c8:	4d 83       	std	Y+5, r20	; 0x05
	DioEnum local_DioEnumErrorState = DIO_READ_OK;
    16ca:	82 e0       	ldi	r24, 0x02	; 2
    16cc:	8a 83       	std	Y+2, r24	; 0x02
	/* local variable to store in value of the pin */
	u8 local_u8GetValue;
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7) && (copy_pu8ReadChannel != NULL))
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	84 30       	cpi	r24, 0x04	; 4
    16d2:	08 f0       	brcs	.+2      	; 0x16d6 <DIO_DioEnumReadChannel+0x28>
    16d4:	9f c0       	rjmp	.+318    	; 0x1814 <DIO_DioEnumReadChannel+0x166>
    16d6:	8c 81       	ldd	r24, Y+4	; 0x04
    16d8:	88 30       	cpi	r24, 0x08	; 8
    16da:	08 f0       	brcs	.+2      	; 0x16de <DIO_DioEnumReadChannel+0x30>
    16dc:	9b c0       	rjmp	.+310    	; 0x1814 <DIO_DioEnumReadChannel+0x166>
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	9e 81       	ldd	r25, Y+6	; 0x06
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <DIO_DioEnumReadChannel+0x3a>
    16e6:	96 c0       	rjmp	.+300    	; 0x1814 <DIO_DioEnumReadChannel+0x166>
	{
		/* step1: check about which port you want to read */
		switch(copy_u8PortId)
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	38 87       	std	Y+8, r19	; 0x08
    16f0:	2f 83       	std	Y+7, r18	; 0x07
    16f2:	4f 81       	ldd	r20, Y+7	; 0x07
    16f4:	58 85       	ldd	r21, Y+8	; 0x08
    16f6:	41 30       	cpi	r20, 0x01	; 1
    16f8:	51 05       	cpc	r21, r1
    16fa:	a9 f1       	breq	.+106    	; 0x1766 <DIO_DioEnumReadChannel+0xb8>
    16fc:	8f 81       	ldd	r24, Y+7	; 0x07
    16fe:	98 85       	ldd	r25, Y+8	; 0x08
    1700:	82 30       	cpi	r24, 0x02	; 2
    1702:	91 05       	cpc	r25, r1
    1704:	34 f4       	brge	.+12     	; 0x1712 <DIO_DioEnumReadChannel+0x64>
    1706:	2f 81       	ldd	r18, Y+7	; 0x07
    1708:	38 85       	ldd	r19, Y+8	; 0x08
    170a:	21 15       	cp	r18, r1
    170c:	31 05       	cpc	r19, r1
    170e:	71 f0       	breq	.+28     	; 0x172c <DIO_DioEnumReadChannel+0x7e>
    1710:	83 c0       	rjmp	.+262    	; 0x1818 <DIO_DioEnumReadChannel+0x16a>
    1712:	4f 81       	ldd	r20, Y+7	; 0x07
    1714:	58 85       	ldd	r21, Y+8	; 0x08
    1716:	42 30       	cpi	r20, 0x02	; 2
    1718:	51 05       	cpc	r21, r1
    171a:	09 f4       	brne	.+2      	; 0x171e <DIO_DioEnumReadChannel+0x70>
    171c:	41 c0       	rjmp	.+130    	; 0x17a0 <DIO_DioEnumReadChannel+0xf2>
    171e:	8f 81       	ldd	r24, Y+7	; 0x07
    1720:	98 85       	ldd	r25, Y+8	; 0x08
    1722:	83 30       	cpi	r24, 0x03	; 3
    1724:	91 05       	cpc	r25, r1
    1726:	09 f4       	brne	.+2      	; 0x172a <DIO_DioEnumReadChannel+0x7c>
    1728:	58 c0       	rjmp	.+176    	; 0x17da <DIO_DioEnumReadChannel+0x12c>
    172a:	76 c0       	rjmp	.+236    	; 0x1818 <DIO_DioEnumReadChannel+0x16a>
		{
			case DIO_u8_PORTA:  // PORTA
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINA_REG,copy_u8PinId);
    172c:	e9 e3       	ldi	r30, 0x39	; 57
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	8c 81       	ldd	r24, Y+4	; 0x04
    1738:	88 2f       	mov	r24, r24
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	a9 01       	movw	r20, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <DIO_DioEnumReadChannel+0x96>
    1740:	55 95       	asr	r21
    1742:	47 95       	ror	r20
    1744:	8a 95       	dec	r24
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <DIO_DioEnumReadChannel+0x92>
    1748:	ca 01       	movw	r24, r20
    174a:	81 70       	andi	r24, 0x01	; 1
    174c:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	88 23       	and	r24, r24
    1752:	21 f4       	brne	.+8      	; 0x175c <DIO_DioEnumReadChannel+0xae>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    1754:	ed 81       	ldd	r30, Y+5	; 0x05
    1756:	fe 81       	ldd	r31, Y+6	; 0x06
    1758:	10 82       	st	Z, r1
    175a:	5e c0       	rjmp	.+188    	; 0x1818 <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    175c:	ed 81       	ldd	r30, Y+5	; 0x05
    175e:	fe 81       	ldd	r31, Y+6	; 0x06
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	80 83       	st	Z, r24
    1764:	59 c0       	rjmp	.+178    	; 0x1818 <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTB:  // PORTB
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINB_REG,copy_u8PinId);
    1766:	e6 e3       	ldi	r30, 0x36	; 54
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	8c 81       	ldd	r24, Y+4	; 0x04
    1772:	88 2f       	mov	r24, r24
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	a9 01       	movw	r20, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <DIO_DioEnumReadChannel+0xd0>
    177a:	55 95       	asr	r21
    177c:	47 95       	ror	r20
    177e:	8a 95       	dec	r24
    1780:	e2 f7       	brpl	.-8      	; 0x177a <DIO_DioEnumReadChannel+0xcc>
    1782:	ca 01       	movw	r24, r20
    1784:	81 70       	andi	r24, 0x01	; 1
    1786:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	88 23       	and	r24, r24
    178c:	21 f4       	brne	.+8      	; 0x1796 <DIO_DioEnumReadChannel+0xe8>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    178e:	ed 81       	ldd	r30, Y+5	; 0x05
    1790:	fe 81       	ldd	r31, Y+6	; 0x06
    1792:	10 82       	st	Z, r1
    1794:	41 c0       	rjmp	.+130    	; 0x1818 <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    1796:	ed 81       	ldd	r30, Y+5	; 0x05
    1798:	fe 81       	ldd	r31, Y+6	; 0x06
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	80 83       	st	Z, r24
    179e:	3c c0       	rjmp	.+120    	; 0x1818 <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTC:  // PORTC
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINC_REG,copy_u8PinId);
    17a0:	e3 e3       	ldi	r30, 0x33	; 51
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	8c 81       	ldd	r24, Y+4	; 0x04
    17ac:	88 2f       	mov	r24, r24
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	a9 01       	movw	r20, r18
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <DIO_DioEnumReadChannel+0x10a>
    17b4:	55 95       	asr	r21
    17b6:	47 95       	ror	r20
    17b8:	8a 95       	dec	r24
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <DIO_DioEnumReadChannel+0x106>
    17bc:	ca 01       	movw	r24, r20
    17be:	81 70       	andi	r24, 0x01	; 1
    17c0:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	88 23       	and	r24, r24
    17c6:	21 f4       	brne	.+8      	; 0x17d0 <DIO_DioEnumReadChannel+0x122>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    17c8:	ed 81       	ldd	r30, Y+5	; 0x05
    17ca:	fe 81       	ldd	r31, Y+6	; 0x06
    17cc:	10 82       	st	Z, r1
    17ce:	24 c0       	rjmp	.+72     	; 0x1818 <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    17d0:	ed 81       	ldd	r30, Y+5	; 0x05
    17d2:	fe 81       	ldd	r31, Y+6	; 0x06
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	80 83       	st	Z, r24
    17d8:	1f c0       	rjmp	.+62     	; 0x1818 <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTD:  // PORTD
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PIND_REG,copy_u8PinId);
    17da:	e0 e3       	ldi	r30, 0x30	; 48
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	8c 81       	ldd	r24, Y+4	; 0x04
    17e6:	88 2f       	mov	r24, r24
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	a9 01       	movw	r20, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <DIO_DioEnumReadChannel+0x144>
    17ee:	55 95       	asr	r21
    17f0:	47 95       	ror	r20
    17f2:	8a 95       	dec	r24
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <DIO_DioEnumReadChannel+0x140>
    17f6:	ca 01       	movw	r24, r20
    17f8:	81 70       	andi	r24, 0x01	; 1
    17fa:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	88 23       	and	r24, r24
    1800:	21 f4       	brne	.+8      	; 0x180a <DIO_DioEnumReadChannel+0x15c>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    1802:	ed 81       	ldd	r30, Y+5	; 0x05
    1804:	fe 81       	ldd	r31, Y+6	; 0x06
    1806:	10 82       	st	Z, r1
    1808:	07 c0       	rjmp	.+14     	; 0x1818 <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    180a:	ed 81       	ldd	r30, Y+5	; 0x05
    180c:	fe 81       	ldd	r31, Y+6	; 0x06
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	80 83       	st	Z, r24
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <DIO_DioEnumReadChannel+0x16a>
			break;
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_READ_NOK;
    1814:	83 e0       	ldi	r24, 0x03	; 3
    1816:	8a 83       	std	Y+2, r24	; 0x02
	}
	return local_DioEnumErrorState;
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
}
    181a:	28 96       	adiw	r28, 0x08	; 8
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <DIO_DioEnumWritePort>:

DioEnum DIO_DioEnumWritePort(u8 copy_u8PortId,u8 copy_u8Value)
{
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	00 d0       	rcall	.+0      	; 0x1832 <DIO_DioEnumWritePort+0x6>
    1832:	00 d0       	rcall	.+0      	; 0x1834 <DIO_DioEnumWritePort+0x8>
    1834:	0f 92       	push	r0
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	8a 83       	std	Y+2, r24	; 0x02
    183c:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_WPORT_OK;
    183e:	84 e0       	ldi	r24, 0x04	; 4
    1840:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if(copy_u8PortId <= DIO_u8_PORTD)
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	84 30       	cpi	r24, 0x04	; 4
    1846:	98 f5       	brcc	.+102    	; 0x18ae <DIO_DioEnumWritePort+0x82>
	{
		/* check about which port you want to write into the value */
		switch(copy_u8PortId)
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	3d 83       	std	Y+5, r19	; 0x05
    1850:	2c 83       	std	Y+4, r18	; 0x04
    1852:	8c 81       	ldd	r24, Y+4	; 0x04
    1854:	9d 81       	ldd	r25, Y+5	; 0x05
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	91 05       	cpc	r25, r1
    185a:	d1 f0       	breq	.+52     	; 0x1890 <DIO_DioEnumWritePort+0x64>
    185c:	2c 81       	ldd	r18, Y+4	; 0x04
    185e:	3d 81       	ldd	r19, Y+5	; 0x05
    1860:	22 30       	cpi	r18, 0x02	; 2
    1862:	31 05       	cpc	r19, r1
    1864:	2c f4       	brge	.+10     	; 0x1870 <DIO_DioEnumWritePort+0x44>
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	9d 81       	ldd	r25, Y+5	; 0x05
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	61 f0       	breq	.+24     	; 0x1886 <DIO_DioEnumWritePort+0x5a>
    186e:	21 c0       	rjmp	.+66     	; 0x18b2 <DIO_DioEnumWritePort+0x86>
    1870:	2c 81       	ldd	r18, Y+4	; 0x04
    1872:	3d 81       	ldd	r19, Y+5	; 0x05
    1874:	22 30       	cpi	r18, 0x02	; 2
    1876:	31 05       	cpc	r19, r1
    1878:	81 f0       	breq	.+32     	; 0x189a <DIO_DioEnumWritePort+0x6e>
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	9d 81       	ldd	r25, Y+5	; 0x05
    187e:	83 30       	cpi	r24, 0x03	; 3
    1880:	91 05       	cpc	r25, r1
    1882:	81 f0       	breq	.+32     	; 0x18a4 <DIO_DioEnumWritePort+0x78>
    1884:	16 c0       	rjmp	.+44     	; 0x18b2 <DIO_DioEnumWritePort+0x86>
		{
			case DIO_u8_PORTA: DIO_u8_PORTA_REG = copy_u8Value;      break;
    1886:	eb e3       	ldi	r30, 0x3B	; 59
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	80 83       	st	Z, r24
    188e:	11 c0       	rjmp	.+34     	; 0x18b2 <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTB: DIO_u8_PORTB_REG = copy_u8Value;      break;
    1890:	e8 e3       	ldi	r30, 0x38	; 56
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	80 83       	st	Z, r24
    1898:	0c c0       	rjmp	.+24     	; 0x18b2 <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTC: DIO_u8_PORTC_REG = copy_u8Value;      break;
    189a:	e5 e3       	ldi	r30, 0x35	; 53
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	80 83       	st	Z, r24
    18a2:	07 c0       	rjmp	.+14     	; 0x18b2 <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTD: DIO_u8_PORTD_REG = copy_u8Value;      break;
    18a4:	e2 e3       	ldi	r30, 0x32	; 50
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	80 83       	st	Z, r24
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <DIO_DioEnumWritePort+0x86>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_WPORT_NOK;
    18ae:	85 e0       	ldi	r24, 0x05	; 5
    18b0:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <DIO_DioEnumReadPort>:

DioEnum DIO_DioEnumReadPort(u8 copy_u8PortId,pu8 copy_pu8ReadPort)
{
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <DIO_DioEnumReadPort+0x6>
    18ca:	00 d0       	rcall	.+0      	; 0x18cc <DIO_DioEnumReadPort+0x8>
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <DIO_DioEnumReadPort+0xa>
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	8a 83       	std	Y+2, r24	; 0x02
    18d4:	7c 83       	std	Y+4, r23	; 0x04
    18d6:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_RPORT_OK;
    18d8:	86 e0       	ldi	r24, 0x06	; 6
    18da:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_pu8ReadPort != NULL))
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	84 30       	cpi	r24, 0x04	; 4
    18e0:	08 f0       	brcs	.+2      	; 0x18e4 <DIO_DioEnumReadPort+0x20>
    18e2:	3f c0       	rjmp	.+126    	; 0x1962 <DIO_DioEnumReadPort+0x9e>
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	9c 81       	ldd	r25, Y+4	; 0x04
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	d9 f1       	breq	.+118    	; 0x1962 <DIO_DioEnumReadPort+0x9e>
	{
		/* check about which port you want to read this value */
		switch(copy_u8PortId)
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	3e 83       	std	Y+6, r19	; 0x06
    18f4:	2d 83       	std	Y+5, r18	; 0x05
    18f6:	8d 81       	ldd	r24, Y+5	; 0x05
    18f8:	9e 81       	ldd	r25, Y+6	; 0x06
    18fa:	81 30       	cpi	r24, 0x01	; 1
    18fc:	91 05       	cpc	r25, r1
    18fe:	e1 f0       	breq	.+56     	; 0x1938 <DIO_DioEnumReadPort+0x74>
    1900:	2d 81       	ldd	r18, Y+5	; 0x05
    1902:	3e 81       	ldd	r19, Y+6	; 0x06
    1904:	22 30       	cpi	r18, 0x02	; 2
    1906:	31 05       	cpc	r19, r1
    1908:	2c f4       	brge	.+10     	; 0x1914 <DIO_DioEnumReadPort+0x50>
    190a:	8d 81       	ldd	r24, Y+5	; 0x05
    190c:	9e 81       	ldd	r25, Y+6	; 0x06
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	61 f0       	breq	.+24     	; 0x192a <DIO_DioEnumReadPort+0x66>
    1912:	29 c0       	rjmp	.+82     	; 0x1966 <DIO_DioEnumReadPort+0xa2>
    1914:	2d 81       	ldd	r18, Y+5	; 0x05
    1916:	3e 81       	ldd	r19, Y+6	; 0x06
    1918:	22 30       	cpi	r18, 0x02	; 2
    191a:	31 05       	cpc	r19, r1
    191c:	a1 f0       	breq	.+40     	; 0x1946 <DIO_DioEnumReadPort+0x82>
    191e:	8d 81       	ldd	r24, Y+5	; 0x05
    1920:	9e 81       	ldd	r25, Y+6	; 0x06
    1922:	83 30       	cpi	r24, 0x03	; 3
    1924:	91 05       	cpc	r25, r1
    1926:	b1 f0       	breq	.+44     	; 0x1954 <DIO_DioEnumReadPort+0x90>
    1928:	1e c0       	rjmp	.+60     	; 0x1966 <DIO_DioEnumReadPort+0xa2>
		{
			case DIO_u8_PORTA: *copy_pu8ReadPort = DIO_u8_PINA_REG;      break;
    192a:	e9 e3       	ldi	r30, 0x39	; 57
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	eb 81       	ldd	r30, Y+3	; 0x03
    1932:	fc 81       	ldd	r31, Y+4	; 0x04
    1934:	80 83       	st	Z, r24
    1936:	17 c0       	rjmp	.+46     	; 0x1966 <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTB: *copy_pu8ReadPort = DIO_u8_PINB_REG;      break;
    1938:	e6 e3       	ldi	r30, 0x36	; 54
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	eb 81       	ldd	r30, Y+3	; 0x03
    1940:	fc 81       	ldd	r31, Y+4	; 0x04
    1942:	80 83       	st	Z, r24
    1944:	10 c0       	rjmp	.+32     	; 0x1966 <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTC: *copy_pu8ReadPort = DIO_u8_PINC_REG;      break;
    1946:	e3 e3       	ldi	r30, 0x33	; 51
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	eb 81       	ldd	r30, Y+3	; 0x03
    194e:	fc 81       	ldd	r31, Y+4	; 0x04
    1950:	80 83       	st	Z, r24
    1952:	09 c0       	rjmp	.+18     	; 0x1966 <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTD: *copy_pu8ReadPort = DIO_u8_PIND_REG;      break;
    1954:	e0 e3       	ldi	r30, 0x30	; 48
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	eb 81       	ldd	r30, Y+3	; 0x03
    195c:	fc 81       	ldd	r31, Y+4	; 0x04
    195e:	80 83       	st	Z, r24
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <DIO_DioEnumReadPort+0xa2>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_RPORT_NOK;
    1962:	87 e0       	ldi	r24, 0x07	; 7
    1964:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    1966:	89 81       	ldd	r24, Y+1	; 0x01
}
    1968:	26 96       	adiw	r28, 0x06	; 6
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	de bf       	out	0x3e, r29	; 62
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	cd bf       	out	0x3d, r28	; 61
    1974:	cf 91       	pop	r28
    1976:	df 91       	pop	r29
    1978:	08 95       	ret

0000197a <DIO_DioEnumFlibChannel>:

DioEnum DIO_DioEnumFlibChannel(u8 copy_u8PortId,u8 copy_u8PinId)
{
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	00 d0       	rcall	.+0      	; 0x1980 <DIO_DioEnumFlibChannel+0x6>
    1980:	00 d0       	rcall	.+0      	; 0x1982 <DIO_DioEnumFlibChannel+0x8>
    1982:	0f 92       	push	r0
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	8a 83       	std	Y+2, r24	; 0x02
    198a:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_FLIB_OK;
    198c:	88 e0       	ldi	r24, 0x08	; 8
    198e:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7))
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	84 30       	cpi	r24, 0x04	; 4
    1994:	08 f0       	brcs	.+2      	; 0x1998 <DIO_DioEnumFlibChannel+0x1e>
    1996:	73 c0       	rjmp	.+230    	; 0x1a7e <DIO_DioEnumFlibChannel+0x104>
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	88 30       	cpi	r24, 0x08	; 8
    199c:	08 f0       	brcs	.+2      	; 0x19a0 <DIO_DioEnumFlibChannel+0x26>
    199e:	6f c0       	rjmp	.+222    	; 0x1a7e <DIO_DioEnumFlibChannel+0x104>
	{
		/* check about which port you want to toggle your pins */
		switch(copy_u8PortId)
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	3d 83       	std	Y+5, r19	; 0x05
    19a8:	2c 83       	std	Y+4, r18	; 0x04
    19aa:	8c 81       	ldd	r24, Y+4	; 0x04
    19ac:	9d 81       	ldd	r25, Y+5	; 0x05
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	91 05       	cpc	r25, r1
    19b2:	49 f1       	breq	.+82     	; 0x1a06 <DIO_DioEnumFlibChannel+0x8c>
    19b4:	2c 81       	ldd	r18, Y+4	; 0x04
    19b6:	3d 81       	ldd	r19, Y+5	; 0x05
    19b8:	22 30       	cpi	r18, 0x02	; 2
    19ba:	31 05       	cpc	r19, r1
    19bc:	2c f4       	brge	.+10     	; 0x19c8 <DIO_DioEnumFlibChannel+0x4e>
    19be:	8c 81       	ldd	r24, Y+4	; 0x04
    19c0:	9d 81       	ldd	r25, Y+5	; 0x05
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	61 f0       	breq	.+24     	; 0x19de <DIO_DioEnumFlibChannel+0x64>
    19c6:	5d c0       	rjmp	.+186    	; 0x1a82 <DIO_DioEnumFlibChannel+0x108>
    19c8:	2c 81       	ldd	r18, Y+4	; 0x04
    19ca:	3d 81       	ldd	r19, Y+5	; 0x05
    19cc:	22 30       	cpi	r18, 0x02	; 2
    19ce:	31 05       	cpc	r19, r1
    19d0:	71 f1       	breq	.+92     	; 0x1a2e <DIO_DioEnumFlibChannel+0xb4>
    19d2:	8c 81       	ldd	r24, Y+4	; 0x04
    19d4:	9d 81       	ldd	r25, Y+5	; 0x05
    19d6:	83 30       	cpi	r24, 0x03	; 3
    19d8:	91 05       	cpc	r25, r1
    19da:	e9 f1       	breq	.+122    	; 0x1a56 <DIO_DioEnumFlibChannel+0xdc>
    19dc:	52 c0       	rjmp	.+164    	; 0x1a82 <DIO_DioEnumFlibChannel+0x108>
		{
			case DIO_u8_PORTA: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    19de:	ab e3       	ldi	r26, 0x3B	; 59
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	eb e3       	ldi	r30, 0x3B	; 59
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	48 2f       	mov	r20, r24
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	02 2e       	mov	r0, r18
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <DIO_DioEnumFlibChannel+0x82>
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	0a 94       	dec	r0
    19fe:	e2 f7       	brpl	.-8      	; 0x19f8 <DIO_DioEnumFlibChannel+0x7e>
    1a00:	84 27       	eor	r24, r20
    1a02:	8c 93       	st	X, r24
    1a04:	3e c0       	rjmp	.+124    	; 0x1a82 <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTB: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    1a06:	ab e3       	ldi	r26, 0x3B	; 59
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	eb e3       	ldi	r30, 0x3B	; 59
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	48 2f       	mov	r20, r24
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	02 2e       	mov	r0, r18
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <DIO_DioEnumFlibChannel+0xaa>
    1a20:	88 0f       	add	r24, r24
    1a22:	99 1f       	adc	r25, r25
    1a24:	0a 94       	dec	r0
    1a26:	e2 f7       	brpl	.-8      	; 0x1a20 <DIO_DioEnumFlibChannel+0xa6>
    1a28:	84 27       	eor	r24, r20
    1a2a:	8c 93       	st	X, r24
    1a2c:	2a c0       	rjmp	.+84     	; 0x1a82 <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTC: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    1a2e:	ab e3       	ldi	r26, 0x3B	; 59
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	eb e3       	ldi	r30, 0x3B	; 59
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	48 2f       	mov	r20, r24
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	02 2e       	mov	r0, r18
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <DIO_DioEnumFlibChannel+0xd2>
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	0a 94       	dec	r0
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <DIO_DioEnumFlibChannel+0xce>
    1a50:	84 27       	eor	r24, r20
    1a52:	8c 93       	st	X, r24
    1a54:	16 c0       	rjmp	.+44     	; 0x1a82 <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTD: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    1a56:	ab e3       	ldi	r26, 0x3B	; 59
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	eb e3       	ldi	r30, 0x3B	; 59
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	48 2f       	mov	r20, r24
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 2e       	mov	r0, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <DIO_DioEnumFlibChannel+0xfa>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	0a 94       	dec	r0
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <DIO_DioEnumFlibChannel+0xf6>
    1a78:	84 27       	eor	r24, r20
    1a7a:	8c 93       	st	X, r24
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <DIO_DioEnumFlibChannel+0x108>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_FLIB_NOK;
    1a7e:	89 e0       	ldi	r24, 0x09	; 9
    1a80:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <LCD_voidInit>:
#include "../Include/LCD_config.h"
#define F_CPU    8000000UL
#include <util/delay.h>

void LCD_voidInit(void)
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	e8 97       	sbiw	r28, 0x38	; 56
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	a8 e4       	ldi	r26, 0x48	; 72
    1aae:	b2 e4       	ldi	r27, 0x42	; 66
    1ab0:	8d ab       	std	Y+53, r24	; 0x35
    1ab2:	9e ab       	std	Y+54, r25	; 0x36
    1ab4:	af ab       	std	Y+55, r26	; 0x37
    1ab6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab8:	6d a9       	ldd	r22, Y+53	; 0x35
    1aba:	7e a9       	ldd	r23, Y+54	; 0x36
    1abc:	8f a9       	ldd	r24, Y+55	; 0x37
    1abe:	98 ad       	ldd	r25, Y+56	; 0x38
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	4a ef       	ldi	r20, 0xFA	; 250
    1ac6:	54 e4       	ldi	r21, 0x44	; 68
    1ac8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	89 ab       	std	Y+49, r24	; 0x31
    1ad2:	9a ab       	std	Y+50, r25	; 0x32
    1ad4:	ab ab       	std	Y+51, r26	; 0x33
    1ad6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ad8:	69 a9       	ldd	r22, Y+49	; 0x31
    1ada:	7a a9       	ldd	r23, Y+50	; 0x32
    1adc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ade:	9c a9       	ldd	r25, Y+52	; 0x34
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e8       	ldi	r20, 0x80	; 128
    1ae6:	5f e3       	ldi	r21, 0x3F	; 63
    1ae8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1aec:	88 23       	and	r24, r24
    1aee:	2c f4       	brge	.+10     	; 0x1afa <LCD_voidInit+0x66>
		__ticks = 1;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	98 ab       	std	Y+48, r25	; 0x30
    1af6:	8f a7       	std	Y+47, r24	; 0x2f
    1af8:	3f c0       	rjmp	.+126    	; 0x1b78 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1afa:	69 a9       	ldd	r22, Y+49	; 0x31
    1afc:	7a a9       	ldd	r23, Y+50	; 0x32
    1afe:	8b a9       	ldd	r24, Y+51	; 0x33
    1b00:	9c a9       	ldd	r25, Y+52	; 0x34
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	3f ef       	ldi	r19, 0xFF	; 255
    1b06:	4f e7       	ldi	r20, 0x7F	; 127
    1b08:	57 e4       	ldi	r21, 0x47	; 71
    1b0a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b0e:	18 16       	cp	r1, r24
    1b10:	4c f5       	brge	.+82     	; 0x1b64 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b12:	6d a9       	ldd	r22, Y+53	; 0x35
    1b14:	7e a9       	ldd	r23, Y+54	; 0x36
    1b16:	8f a9       	ldd	r24, Y+55	; 0x37
    1b18:	98 ad       	ldd	r25, Y+56	; 0x38
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e2       	ldi	r20, 0x20	; 32
    1b20:	51 e4       	ldi	r21, 0x41	; 65
    1b22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	bc 01       	movw	r22, r24
    1b2c:	cd 01       	movw	r24, r26
    1b2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	98 ab       	std	Y+48, r25	; 0x30
    1b38:	8f a7       	std	Y+47, r24	; 0x2f
    1b3a:	0f c0       	rjmp	.+30     	; 0x1b5a <LCD_voidInit+0xc6>
    1b3c:	88 ec       	ldi	r24, 0xC8	; 200
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	9e a7       	std	Y+46, r25	; 0x2e
    1b42:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b44:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b46:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <LCD_voidInit+0xb4>
    1b4c:	9e a7       	std	Y+46, r25	; 0x2e
    1b4e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b52:	98 a9       	ldd	r25, Y+48	; 0x30
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	98 ab       	std	Y+48, r25	; 0x30
    1b58:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	69 f7       	brne	.-38     	; 0x1b3c <LCD_voidInit+0xa8>
    1b62:	14 c0       	rjmp	.+40     	; 0x1b8c <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b64:	69 a9       	ldd	r22, Y+49	; 0x31
    1b66:	7a a9       	ldd	r23, Y+50	; 0x32
    1b68:	8b a9       	ldd	r24, Y+51	; 0x33
    1b6a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	98 ab       	std	Y+48, r25	; 0x30
    1b76:	8f a7       	std	Y+47, r24	; 0x2f
    1b78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b7c:	9c a7       	std	Y+44, r25	; 0x2c
    1b7e:	8b a7       	std	Y+43, r24	; 0x2b
    1b80:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b82:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <LCD_voidInit+0xf0>
    1b88:	9c a7       	std	Y+44, r25	; 0x2c
    1b8a:	8b a7       	std	Y+43, r24	; 0x2b
    /* delay more than 30 msec */
    _delay_ms(50);
    LCD_voidSendCommand(LCD_u8_CURSOR_HOME);
    1b8c:	82 e0       	ldi	r24, 0x02	; 2
    1b8e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_voidSendCommand>
    #if   LCD_u8_MODE == LCD_u8_MODE_8_BIT
        /* function set => call send_command func */
        LCD_voidSendCommand(LCD_u8_8B_Mode);
    #elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
        /* function set => call send_command func */
        LCD_voidSendCommand(LCD_u8_4B_Mode);
    1b92:	88 e2       	ldi	r24, 0x28	; 40
    1b94:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_voidSendCommand>
    #endif 
    /* display clear => call send_command func */
    LCD_voidSendCommand(LCD_u8_DISPLAY_CLEAR);
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_voidSendCommand>
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	a0 e8       	ldi	r26, 0x80	; 128
    1ba4:	b0 e4       	ldi	r27, 0x40	; 64
    1ba6:	8f a3       	std	Y+39, r24	; 0x27
    1ba8:	98 a7       	std	Y+40, r25	; 0x28
    1baa:	a9 a7       	std	Y+41, r26	; 0x29
    1bac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bae:	6f a1       	ldd	r22, Y+39	; 0x27
    1bb0:	78 a5       	ldd	r23, Y+40	; 0x28
    1bb2:	89 a5       	ldd	r24, Y+41	; 0x29
    1bb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	4a ef       	ldi	r20, 0xFA	; 250
    1bbc:	54 e4       	ldi	r21, 0x44	; 68
    1bbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	8b a3       	std	Y+35, r24	; 0x23
    1bc8:	9c a3       	std	Y+36, r25	; 0x24
    1bca:	ad a3       	std	Y+37, r26	; 0x25
    1bcc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bce:	6b a1       	ldd	r22, Y+35	; 0x23
    1bd0:	7c a1       	ldd	r23, Y+36	; 0x24
    1bd2:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd4:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e8       	ldi	r20, 0x80	; 128
    1bdc:	5f e3       	ldi	r21, 0x3F	; 63
    1bde:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1be2:	88 23       	and	r24, r24
    1be4:	2c f4       	brge	.+10     	; 0x1bf0 <LCD_voidInit+0x15c>
		__ticks = 1;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	9a a3       	std	Y+34, r25	; 0x22
    1bec:	89 a3       	std	Y+33, r24	; 0x21
    1bee:	3f c0       	rjmp	.+126    	; 0x1c6e <LCD_voidInit+0x1da>
	else if (__tmp > 65535)
    1bf0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bf2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bf4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bf6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	3f ef       	ldi	r19, 0xFF	; 255
    1bfc:	4f e7       	ldi	r20, 0x7F	; 127
    1bfe:	57 e4       	ldi	r21, 0x47	; 71
    1c00:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c04:	18 16       	cp	r1, r24
    1c06:	4c f5       	brge	.+82     	; 0x1c5a <LCD_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c08:	6f a1       	ldd	r22, Y+39	; 0x27
    1c0a:	78 a5       	ldd	r23, Y+40	; 0x28
    1c0c:	89 a5       	ldd	r24, Y+41	; 0x29
    1c0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e2       	ldi	r20, 0x20	; 32
    1c16:	51 e4       	ldi	r21, 0x41	; 65
    1c18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	bc 01       	movw	r22, r24
    1c22:	cd 01       	movw	r24, r26
    1c24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	9a a3       	std	Y+34, r25	; 0x22
    1c2e:	89 a3       	std	Y+33, r24	; 0x21
    1c30:	0f c0       	rjmp	.+30     	; 0x1c50 <LCD_voidInit+0x1bc>
    1c32:	88 ec       	ldi	r24, 0xC8	; 200
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	98 a3       	std	Y+32, r25	; 0x20
    1c38:	8f 8f       	std	Y+31, r24	; 0x1f
    1c3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c3c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <LCD_voidInit+0x1aa>
    1c42:	98 a3       	std	Y+32, r25	; 0x20
    1c44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c46:	89 a1       	ldd	r24, Y+33	; 0x21
    1c48:	9a a1       	ldd	r25, Y+34	; 0x22
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	9a a3       	std	Y+34, r25	; 0x22
    1c4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c50:	89 a1       	ldd	r24, Y+33	; 0x21
    1c52:	9a a1       	ldd	r25, Y+34	; 0x22
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	69 f7       	brne	.-38     	; 0x1c32 <LCD_voidInit+0x19e>
    1c58:	14 c0       	rjmp	.+40     	; 0x1c82 <LCD_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c60:	9e a1       	ldd	r25, Y+38	; 0x26
    1c62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	9a a3       	std	Y+34, r25	; 0x22
    1c6c:	89 a3       	std	Y+33, r24	; 0x21
    1c6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c70:	9a a1       	ldd	r25, Y+34	; 0x22
    1c72:	9e 8f       	std	Y+30, r25	; 0x1e
    1c74:	8d 8f       	std	Y+29, r24	; 0x1d
    1c76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <LCD_voidInit+0x1e6>
    1c7e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c80:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(4);
    /* entry mode => call send_command func */
    LCD_voidSendCommand(LCD_u8_ENTRY_Mode);
    1c82:	86 e0       	ldi	r24, 0x06	; 6
    1c84:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_voidSendCommand>
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	a0 e8       	ldi	r26, 0x80	; 128
    1c8e:	bf e3       	ldi	r27, 0x3F	; 63
    1c90:	89 8f       	std	Y+25, r24	; 0x19
    1c92:	9a 8f       	std	Y+26, r25	; 0x1a
    1c94:	ab 8f       	std	Y+27, r26	; 0x1b
    1c96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c98:	69 8d       	ldd	r22, Y+25	; 0x19
    1c9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	4a ef       	ldi	r20, 0xFA	; 250
    1ca6:	54 e4       	ldi	r21, 0x44	; 68
    1ca8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	8d 8b       	std	Y+21, r24	; 0x15
    1cb2:	9e 8b       	std	Y+22, r25	; 0x16
    1cb4:	af 8b       	std	Y+23, r26	; 0x17
    1cb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cb8:	6d 89       	ldd	r22, Y+21	; 0x15
    1cba:	7e 89       	ldd	r23, Y+22	; 0x16
    1cbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1cbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e8       	ldi	r20, 0x80	; 128
    1cc6:	5f e3       	ldi	r21, 0x3F	; 63
    1cc8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ccc:	88 23       	and	r24, r24
    1cce:	2c f4       	brge	.+10     	; 0x1cda <LCD_voidInit+0x246>
		__ticks = 1;
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	9c 8b       	std	Y+20, r25	; 0x14
    1cd6:	8b 8b       	std	Y+19, r24	; 0x13
    1cd8:	3f c0       	rjmp	.+126    	; 0x1d58 <LCD_voidInit+0x2c4>
	else if (__tmp > 65535)
    1cda:	6d 89       	ldd	r22, Y+21	; 0x15
    1cdc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cde:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	3f ef       	ldi	r19, 0xFF	; 255
    1ce6:	4f e7       	ldi	r20, 0x7F	; 127
    1ce8:	57 e4       	ldi	r21, 0x47	; 71
    1cea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cee:	18 16       	cp	r1, r24
    1cf0:	4c f5       	brge	.+82     	; 0x1d44 <LCD_voidInit+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf2:	69 8d       	ldd	r22, Y+25	; 0x19
    1cf4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cf6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e2       	ldi	r20, 0x20	; 32
    1d00:	51 e4       	ldi	r21, 0x41	; 65
    1d02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	bc 01       	movw	r22, r24
    1d0c:	cd 01       	movw	r24, r26
    1d0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	9c 8b       	std	Y+20, r25	; 0x14
    1d18:	8b 8b       	std	Y+19, r24	; 0x13
    1d1a:	0f c0       	rjmp	.+30     	; 0x1d3a <LCD_voidInit+0x2a6>
    1d1c:	88 ec       	ldi	r24, 0xC8	; 200
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	9a 8b       	std	Y+18, r25	; 0x12
    1d22:	89 8b       	std	Y+17, r24	; 0x11
    1d24:	89 89       	ldd	r24, Y+17	; 0x11
    1d26:	9a 89       	ldd	r25, Y+18	; 0x12
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <LCD_voidInit+0x294>
    1d2c:	9a 8b       	std	Y+18, r25	; 0x12
    1d2e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d30:	8b 89       	ldd	r24, Y+19	; 0x13
    1d32:	9c 89       	ldd	r25, Y+20	; 0x14
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	9c 8b       	std	Y+20, r25	; 0x14
    1d38:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	69 f7       	brne	.-38     	; 0x1d1c <LCD_voidInit+0x288>
    1d42:	14 c0       	rjmp	.+40     	; 0x1d6c <LCD_voidInit+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d44:	6d 89       	ldd	r22, Y+21	; 0x15
    1d46:	7e 89       	ldd	r23, Y+22	; 0x16
    1d48:	8f 89       	ldd	r24, Y+23	; 0x17
    1d4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	9c 8b       	std	Y+20, r25	; 0x14
    1d56:	8b 8b       	std	Y+19, r24	; 0x13
    1d58:	8b 89       	ldd	r24, Y+19	; 0x13
    1d5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d5c:	98 8b       	std	Y+16, r25	; 0x10
    1d5e:	8f 87       	std	Y+15, r24	; 0x0f
    1d60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d62:	98 89       	ldd	r25, Y+16	; 0x10
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	f1 f7       	brne	.-4      	; 0x1d64 <LCD_voidInit+0x2d0>
    1d68:	98 8b       	std	Y+16, r25	; 0x10
    1d6a:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);  
    /* display uursor on/off control => call send_command func */
    LCD_voidSendCommand(LCD_u8_DISPLAY_CURSOR_ON);
    1d6c:	8c e0       	ldi	r24, 0x0C	; 12
    1d6e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_voidSendCommand>
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	a0 e8       	ldi	r26, 0x80	; 128
    1d78:	bf e3       	ldi	r27, 0x3F	; 63
    1d7a:	8b 87       	std	Y+11, r24	; 0x0b
    1d7c:	9c 87       	std	Y+12, r25	; 0x0c
    1d7e:	ad 87       	std	Y+13, r26	; 0x0d
    1d80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	4a ef       	ldi	r20, 0xFA	; 250
    1d90:	54 e4       	ldi	r21, 0x44	; 68
    1d92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	8f 83       	std	Y+7, r24	; 0x07
    1d9c:	98 87       	std	Y+8, r25	; 0x08
    1d9e:	a9 87       	std	Y+9, r26	; 0x09
    1da0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1da2:	6f 81       	ldd	r22, Y+7	; 0x07
    1da4:	78 85       	ldd	r23, Y+8	; 0x08
    1da6:	89 85       	ldd	r24, Y+9	; 0x09
    1da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e8       	ldi	r20, 0x80	; 128
    1db0:	5f e3       	ldi	r21, 0x3F	; 63
    1db2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1db6:	88 23       	and	r24, r24
    1db8:	2c f4       	brge	.+10     	; 0x1dc4 <LCD_voidInit+0x330>
		__ticks = 1;
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9e 83       	std	Y+6, r25	; 0x06
    1dc0:	8d 83       	std	Y+5, r24	; 0x05
    1dc2:	3f c0       	rjmp	.+126    	; 0x1e42 <LCD_voidInit+0x3ae>
	else if (__tmp > 65535)
    1dc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc6:	78 85       	ldd	r23, Y+8	; 0x08
    1dc8:	89 85       	ldd	r24, Y+9	; 0x09
    1dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	3f ef       	ldi	r19, 0xFF	; 255
    1dd0:	4f e7       	ldi	r20, 0x7F	; 127
    1dd2:	57 e4       	ldi	r21, 0x47	; 71
    1dd4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dd8:	18 16       	cp	r1, r24
    1dda:	4c f5       	brge	.+82     	; 0x1e2e <LCD_voidInit+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ddc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e2       	ldi	r20, 0x20	; 32
    1dea:	51 e4       	ldi	r21, 0x41	; 65
    1dec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	bc 01       	movw	r22, r24
    1df6:	cd 01       	movw	r24, r26
    1df8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	9e 83       	std	Y+6, r25	; 0x06
    1e02:	8d 83       	std	Y+5, r24	; 0x05
    1e04:	0f c0       	rjmp	.+30     	; 0x1e24 <LCD_voidInit+0x390>
    1e06:	88 ec       	ldi	r24, 0xC8	; 200
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	9c 83       	std	Y+4, r25	; 0x04
    1e0c:	8b 83       	std	Y+3, r24	; 0x03
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	9c 81       	ldd	r25, Y+4	; 0x04
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <LCD_voidInit+0x37e>
    1e16:	9c 83       	std	Y+4, r25	; 0x04
    1e18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	9e 83       	std	Y+6, r25	; 0x06
    1e22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
    1e26:	9e 81       	ldd	r25, Y+6	; 0x06
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	69 f7       	brne	.-38     	; 0x1e06 <LCD_voidInit+0x372>
    1e2c:	14 c0       	rjmp	.+40     	; 0x1e56 <LCD_voidInit+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e30:	78 85       	ldd	r23, Y+8	; 0x08
    1e32:	89 85       	ldd	r24, Y+9	; 0x09
    1e34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	9e 83       	std	Y+6, r25	; 0x06
    1e40:	8d 83       	std	Y+5, r24	; 0x05
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	9e 81       	ldd	r25, Y+6	; 0x06
    1e46:	9a 83       	std	Y+2, r25	; 0x02
    1e48:	89 83       	std	Y+1, r24	; 0x01
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <LCD_voidInit+0x3ba>
    1e52:	9a 83       	std	Y+2, r25	; 0x02
    1e54:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);  
}
    1e56:	e8 96       	adiw	r28, 0x38	; 56
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 copy_u8Comand)
{
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	6d 97       	sbiw	r28, 0x1d	; 29
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	8d 8f       	std	Y+29, r24	; 0x1d
    /* write 0 to RS pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	40 e0       	ldi	r20, 0x00	; 0
    1e84:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_DioEnumWriteChannel>
    /* write 0 to RW pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	61 e0       	ldi	r22, 0x01	; 1
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_DioEnumWriteChannel>
    /* write 1 to enable pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	62 e0       	ldi	r22, 0x02	; 2
    1e96:	41 e0       	ldi	r20, 0x01	; 1
    1e98:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_DioEnumWriteChannel>
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    #elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
        /* write the command to Data Port => 4_Bit high */
        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Comand);
    1e9c:	83 e0       	ldi	r24, 0x03	; 3
    1e9e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ea0:	0e 94 16 0c 	call	0x182c	; 0x182c <DIO_DioEnumWritePort>
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	62 e0       	ldi	r22, 0x02	; 2
    1ea8:	40 e0       	ldi	r20, 0x00	; 0
    1eaa:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_DioEnumWriteChannel>
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	a0 e8       	ldi	r26, 0x80	; 128
    1eb4:	bf e3       	ldi	r27, 0x3F	; 63
    1eb6:	89 8f       	std	Y+25, r24	; 0x19
    1eb8:	9a 8f       	std	Y+26, r25	; 0x1a
    1eba:	ab 8f       	std	Y+27, r26	; 0x1b
    1ebc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebe:	69 8d       	ldd	r22, Y+25	; 0x19
    1ec0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ec2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ec4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	4a ef       	ldi	r20, 0xFA	; 250
    1ecc:	54 e4       	ldi	r21, 0x44	; 68
    1ece:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	8d 8b       	std	Y+21, r24	; 0x15
    1ed8:	9e 8b       	std	Y+22, r25	; 0x16
    1eda:	af 8b       	std	Y+23, r26	; 0x17
    1edc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ede:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e8       	ldi	r20, 0x80	; 128
    1eec:	5f e3       	ldi	r21, 0x3F	; 63
    1eee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ef2:	88 23       	and	r24, r24
    1ef4:	2c f4       	brge	.+10     	; 0x1f00 <LCD_voidSendCommand+0x98>
		__ticks = 1;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	9c 8b       	std	Y+20, r25	; 0x14
    1efc:	8b 8b       	std	Y+19, r24	; 0x13
    1efe:	3f c0       	rjmp	.+126    	; 0x1f7e <LCD_voidSendCommand+0x116>
	else if (__tmp > 65535)
    1f00:	6d 89       	ldd	r22, Y+21	; 0x15
    1f02:	7e 89       	ldd	r23, Y+22	; 0x16
    1f04:	8f 89       	ldd	r24, Y+23	; 0x17
    1f06:	98 8d       	ldd	r25, Y+24	; 0x18
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	3f ef       	ldi	r19, 0xFF	; 255
    1f0c:	4f e7       	ldi	r20, 0x7F	; 127
    1f0e:	57 e4       	ldi	r21, 0x47	; 71
    1f10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f14:	18 16       	cp	r1, r24
    1f16:	4c f5       	brge	.+82     	; 0x1f6a <LCD_voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f18:	69 8d       	ldd	r22, Y+25	; 0x19
    1f1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	40 e2       	ldi	r20, 0x20	; 32
    1f26:	51 e4       	ldi	r21, 0x41	; 65
    1f28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	9c 8b       	std	Y+20, r25	; 0x14
    1f3e:	8b 8b       	std	Y+19, r24	; 0x13
    1f40:	0f c0       	rjmp	.+30     	; 0x1f60 <LCD_voidSendCommand+0xf8>
    1f42:	88 ec       	ldi	r24, 0xC8	; 200
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	9a 8b       	std	Y+18, r25	; 0x12
    1f48:	89 8b       	std	Y+17, r24	; 0x11
    1f4a:	89 89       	ldd	r24, Y+17	; 0x11
    1f4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <LCD_voidSendCommand+0xe6>
    1f52:	9a 8b       	std	Y+18, r25	; 0x12
    1f54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f56:	8b 89       	ldd	r24, Y+19	; 0x13
    1f58:	9c 89       	ldd	r25, Y+20	; 0x14
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	9c 8b       	std	Y+20, r25	; 0x14
    1f5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f60:	8b 89       	ldd	r24, Y+19	; 0x13
    1f62:	9c 89       	ldd	r25, Y+20	; 0x14
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	69 f7       	brne	.-38     	; 0x1f42 <LCD_voidSendCommand+0xda>
    1f68:	14 c0       	rjmp	.+40     	; 0x1f92 <LCD_voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f70:	98 8d       	ldd	r25, Y+24	; 0x18
    1f72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9c 8b       	std	Y+20, r25	; 0x14
    1f7c:	8b 8b       	std	Y+19, r24	; 0x13
    1f7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f80:	9c 89       	ldd	r25, Y+20	; 0x14
    1f82:	98 8b       	std	Y+16, r25	; 0x10
    1f84:	8f 87       	std	Y+15, r24	; 0x0f
    1f86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f88:	98 89       	ldd	r25, Y+16	; 0x10
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <LCD_voidSendCommand+0x122>
    1f8e:	98 8b       	std	Y+16, r25	; 0x10
    1f90:	8f 87       	std	Y+15, r24	; 0x0f
        /* delay 1msec */
        _delay_ms(1);
        /* write the command to Data Port => 4_Bit low */
        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Comand<<4);
    1f92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f94:	98 2f       	mov	r25, r24
    1f96:	92 95       	swap	r25
    1f98:	90 7f       	andi	r25, 0xF0	; 240
    1f9a:	83 e0       	ldi	r24, 0x03	; 3
    1f9c:	69 2f       	mov	r22, r25
    1f9e:	0e 94 16 0c 	call	0x182c	; 0x182c <DIO_DioEnumWritePort>
        /* set enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	62 e0       	ldi	r22, 0x02	; 2
    1fa6:	41 e0       	ldi	r20, 0x01	; 1
    1fa8:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_DioEnumWriteChannel>
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a0 e8       	ldi	r26, 0x80	; 128
    1fb2:	bf e3       	ldi	r27, 0x3F	; 63
    1fb4:	8b 87       	std	Y+11, r24	; 0x0b
    1fb6:	9c 87       	std	Y+12, r25	; 0x0c
    1fb8:	ad 87       	std	Y+13, r26	; 0x0d
    1fba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	4a ef       	ldi	r20, 0xFA	; 250
    1fca:	54 e4       	ldi	r21, 0x44	; 68
    1fcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	8f 83       	std	Y+7, r24	; 0x07
    1fd6:	98 87       	std	Y+8, r25	; 0x08
    1fd8:	a9 87       	std	Y+9, r26	; 0x09
    1fda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fde:	78 85       	ldd	r23, Y+8	; 0x08
    1fe0:	89 85       	ldd	r24, Y+9	; 0x09
    1fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e8       	ldi	r20, 0x80	; 128
    1fea:	5f e3       	ldi	r21, 0x3F	; 63
    1fec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ff0:	88 23       	and	r24, r24
    1ff2:	2c f4       	brge	.+10     	; 0x1ffe <LCD_voidSendCommand+0x196>
		__ticks = 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9e 83       	std	Y+6, r25	; 0x06
    1ffa:	8d 83       	std	Y+5, r24	; 0x05
    1ffc:	3f c0       	rjmp	.+126    	; 0x207c <LCD_voidSendCommand+0x214>
	else if (__tmp > 65535)
    1ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    2000:	78 85       	ldd	r23, Y+8	; 0x08
    2002:	89 85       	ldd	r24, Y+9	; 0x09
    2004:	9a 85       	ldd	r25, Y+10	; 0x0a
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	3f ef       	ldi	r19, 0xFF	; 255
    200a:	4f e7       	ldi	r20, 0x7F	; 127
    200c:	57 e4       	ldi	r21, 0x47	; 71
    200e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2012:	18 16       	cp	r1, r24
    2014:	4c f5       	brge	.+82     	; 0x2068 <LCD_voidSendCommand+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2016:	6b 85       	ldd	r22, Y+11	; 0x0b
    2018:	7c 85       	ldd	r23, Y+12	; 0x0c
    201a:	8d 85       	ldd	r24, Y+13	; 0x0d
    201c:	9e 85       	ldd	r25, Y+14	; 0x0e
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e2       	ldi	r20, 0x20	; 32
    2024:	51 e4       	ldi	r21, 0x41	; 65
    2026:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	9e 83       	std	Y+6, r25	; 0x06
    203c:	8d 83       	std	Y+5, r24	; 0x05
    203e:	0f c0       	rjmp	.+30     	; 0x205e <LCD_voidSendCommand+0x1f6>
    2040:	88 ec       	ldi	r24, 0xC8	; 200
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	9c 83       	std	Y+4, r25	; 0x04
    2046:	8b 83       	std	Y+3, r24	; 0x03
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <LCD_voidSendCommand+0x1e4>
    2050:	9c 83       	std	Y+4, r25	; 0x04
    2052:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2054:	8d 81       	ldd	r24, Y+5	; 0x05
    2056:	9e 81       	ldd	r25, Y+6	; 0x06
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	9e 83       	std	Y+6, r25	; 0x06
    205c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205e:	8d 81       	ldd	r24, Y+5	; 0x05
    2060:	9e 81       	ldd	r25, Y+6	; 0x06
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	69 f7       	brne	.-38     	; 0x2040 <LCD_voidSendCommand+0x1d8>
    2066:	14 c0       	rjmp	.+40     	; 0x2090 <LCD_voidSendCommand+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2068:	6f 81       	ldd	r22, Y+7	; 0x07
    206a:	78 85       	ldd	r23, Y+8	; 0x08
    206c:	89 85       	ldd	r24, Y+9	; 0x09
    206e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2070:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	8d 83       	std	Y+5, r24	; 0x05
    207c:	8d 81       	ldd	r24, Y+5	; 0x05
    207e:	9e 81       	ldd	r25, Y+6	; 0x06
    2080:	9a 83       	std	Y+2, r25	; 0x02
    2082:	89 83       	std	Y+1, r24	; 0x01
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	9a 81       	ldd	r25, Y+2	; 0x02
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <LCD_voidSendCommand+0x220>
    208c:	9a 83       	std	Y+2, r25	; 0x02
    208e:	89 83       	std	Y+1, r24	; 0x01
        /* delay 1msec */
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	62 e0       	ldi	r22, 0x02	; 2
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_DioEnumWriteChannel>
    #endif 
}
    209a:	6d 96       	adiw	r28, 0x1d	; 29
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <LCD_voidDisplayCharacter>:

void LCD_voidDisplayCharacter(u8 copy_u8Data)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	6d 97       	sbiw	r28, 0x1d	; 29
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	de bf       	out	0x3e, r29	; 62
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	cd bf       	out	0x3d, r28	; 61
    20c0:	8d 8f       	std	Y+29, r24	; 0x1d
    /* write 1 to RS pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	41 e0       	ldi	r20, 0x01	; 1
    20c8:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_DioEnumWriteChannel>
    /* write 0 to RW pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	61 e0       	ldi	r22, 0x01	; 1
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_DioEnumWriteChannel>
    /* write 1 to enable pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	62 e0       	ldi	r22, 0x02	; 2
    20da:	41 e0       	ldi	r20, 0x01	; 1
    20dc:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_DioEnumWriteChannel>
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    #elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
        /* write the character to Data Port => 4_Bit high */
        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Data);
    20e0:	83 e0       	ldi	r24, 0x03	; 3
    20e2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    20e4:	0e 94 16 0c 	call	0x182c	; 0x182c <DIO_DioEnumWritePort>
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	62 e0       	ldi	r22, 0x02	; 2
    20ec:	40 e0       	ldi	r20, 0x00	; 0
    20ee:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_DioEnumWriteChannel>
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	a0 e8       	ldi	r26, 0x80	; 128
    20f8:	bf e3       	ldi	r27, 0x3F	; 63
    20fa:	89 8f       	std	Y+25, r24	; 0x19
    20fc:	9a 8f       	std	Y+26, r25	; 0x1a
    20fe:	ab 8f       	std	Y+27, r26	; 0x1b
    2100:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2102:	69 8d       	ldd	r22, Y+25	; 0x19
    2104:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2106:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2108:	9c 8d       	ldd	r25, Y+28	; 0x1c
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	4a ef       	ldi	r20, 0xFA	; 250
    2110:	54 e4       	ldi	r21, 0x44	; 68
    2112:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	8d 8b       	std	Y+21, r24	; 0x15
    211c:	9e 8b       	std	Y+22, r25	; 0x16
    211e:	af 8b       	std	Y+23, r26	; 0x17
    2120:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2122:	6d 89       	ldd	r22, Y+21	; 0x15
    2124:	7e 89       	ldd	r23, Y+22	; 0x16
    2126:	8f 89       	ldd	r24, Y+23	; 0x17
    2128:	98 8d       	ldd	r25, Y+24	; 0x18
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e8       	ldi	r20, 0x80	; 128
    2130:	5f e3       	ldi	r21, 0x3F	; 63
    2132:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2136:	88 23       	and	r24, r24
    2138:	2c f4       	brge	.+10     	; 0x2144 <LCD_voidDisplayCharacter+0x98>
		__ticks = 1;
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	9c 8b       	std	Y+20, r25	; 0x14
    2140:	8b 8b       	std	Y+19, r24	; 0x13
    2142:	3f c0       	rjmp	.+126    	; 0x21c2 <LCD_voidDisplayCharacter+0x116>
	else if (__tmp > 65535)
    2144:	6d 89       	ldd	r22, Y+21	; 0x15
    2146:	7e 89       	ldd	r23, Y+22	; 0x16
    2148:	8f 89       	ldd	r24, Y+23	; 0x17
    214a:	98 8d       	ldd	r25, Y+24	; 0x18
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	3f ef       	ldi	r19, 0xFF	; 255
    2150:	4f e7       	ldi	r20, 0x7F	; 127
    2152:	57 e4       	ldi	r21, 0x47	; 71
    2154:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2158:	18 16       	cp	r1, r24
    215a:	4c f5       	brge	.+82     	; 0x21ae <LCD_voidDisplayCharacter+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215c:	69 8d       	ldd	r22, Y+25	; 0x19
    215e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2160:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2162:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	40 e2       	ldi	r20, 0x20	; 32
    216a:	51 e4       	ldi	r21, 0x41	; 65
    216c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	bc 01       	movw	r22, r24
    2176:	cd 01       	movw	r24, r26
    2178:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	9c 8b       	std	Y+20, r25	; 0x14
    2182:	8b 8b       	std	Y+19, r24	; 0x13
    2184:	0f c0       	rjmp	.+30     	; 0x21a4 <LCD_voidDisplayCharacter+0xf8>
    2186:	88 ec       	ldi	r24, 0xC8	; 200
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	9a 8b       	std	Y+18, r25	; 0x12
    218c:	89 8b       	std	Y+17, r24	; 0x11
    218e:	89 89       	ldd	r24, Y+17	; 0x11
    2190:	9a 89       	ldd	r25, Y+18	; 0x12
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	f1 f7       	brne	.-4      	; 0x2192 <LCD_voidDisplayCharacter+0xe6>
    2196:	9a 8b       	std	Y+18, r25	; 0x12
    2198:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219a:	8b 89       	ldd	r24, Y+19	; 0x13
    219c:	9c 89       	ldd	r25, Y+20	; 0x14
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	9c 8b       	std	Y+20, r25	; 0x14
    21a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a4:	8b 89       	ldd	r24, Y+19	; 0x13
    21a6:	9c 89       	ldd	r25, Y+20	; 0x14
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	69 f7       	brne	.-38     	; 0x2186 <LCD_voidDisplayCharacter+0xda>
    21ac:	14 c0       	rjmp	.+40     	; 0x21d6 <LCD_voidDisplayCharacter+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ae:	6d 89       	ldd	r22, Y+21	; 0x15
    21b0:	7e 89       	ldd	r23, Y+22	; 0x16
    21b2:	8f 89       	ldd	r24, Y+23	; 0x17
    21b4:	98 8d       	ldd	r25, Y+24	; 0x18
    21b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	9c 8b       	std	Y+20, r25	; 0x14
    21c0:	8b 8b       	std	Y+19, r24	; 0x13
    21c2:	8b 89       	ldd	r24, Y+19	; 0x13
    21c4:	9c 89       	ldd	r25, Y+20	; 0x14
    21c6:	98 8b       	std	Y+16, r25	; 0x10
    21c8:	8f 87       	std	Y+15, r24	; 0x0f
    21ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    21cc:	98 89       	ldd	r25, Y+16	; 0x10
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <LCD_voidDisplayCharacter+0x122>
    21d2:	98 8b       	std	Y+16, r25	; 0x10
    21d4:	8f 87       	std	Y+15, r24	; 0x0f
        /* delay 1msec */
        _delay_ms(1);
        /* write the character to Data Port => 4_Bit low */
        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Data<<4);
    21d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21d8:	98 2f       	mov	r25, r24
    21da:	92 95       	swap	r25
    21dc:	90 7f       	andi	r25, 0xF0	; 240
    21de:	83 e0       	ldi	r24, 0x03	; 3
    21e0:	69 2f       	mov	r22, r25
    21e2:	0e 94 16 0c 	call	0x182c	; 0x182c <DIO_DioEnumWritePort>
        /* set enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	62 e0       	ldi	r22, 0x02	; 2
    21ea:	41 e0       	ldi	r20, 0x01	; 1
    21ec:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_DioEnumWriteChannel>
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	a0 e8       	ldi	r26, 0x80	; 128
    21f6:	bf e3       	ldi	r27, 0x3F	; 63
    21f8:	8b 87       	std	Y+11, r24	; 0x0b
    21fa:	9c 87       	std	Y+12, r25	; 0x0c
    21fc:	ad 87       	std	Y+13, r26	; 0x0d
    21fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2200:	6b 85       	ldd	r22, Y+11	; 0x0b
    2202:	7c 85       	ldd	r23, Y+12	; 0x0c
    2204:	8d 85       	ldd	r24, Y+13	; 0x0d
    2206:	9e 85       	ldd	r25, Y+14	; 0x0e
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	4a ef       	ldi	r20, 0xFA	; 250
    220e:	54 e4       	ldi	r21, 0x44	; 68
    2210:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	8f 83       	std	Y+7, r24	; 0x07
    221a:	98 87       	std	Y+8, r25	; 0x08
    221c:	a9 87       	std	Y+9, r26	; 0x09
    221e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2220:	6f 81       	ldd	r22, Y+7	; 0x07
    2222:	78 85       	ldd	r23, Y+8	; 0x08
    2224:	89 85       	ldd	r24, Y+9	; 0x09
    2226:	9a 85       	ldd	r25, Y+10	; 0x0a
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e8       	ldi	r20, 0x80	; 128
    222e:	5f e3       	ldi	r21, 0x3F	; 63
    2230:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2234:	88 23       	and	r24, r24
    2236:	2c f4       	brge	.+10     	; 0x2242 <LCD_voidDisplayCharacter+0x196>
		__ticks = 1;
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	9e 83       	std	Y+6, r25	; 0x06
    223e:	8d 83       	std	Y+5, r24	; 0x05
    2240:	3f c0       	rjmp	.+126    	; 0x22c0 <LCD_voidDisplayCharacter+0x214>
	else if (__tmp > 65535)
    2242:	6f 81       	ldd	r22, Y+7	; 0x07
    2244:	78 85       	ldd	r23, Y+8	; 0x08
    2246:	89 85       	ldd	r24, Y+9	; 0x09
    2248:	9a 85       	ldd	r25, Y+10	; 0x0a
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	3f ef       	ldi	r19, 0xFF	; 255
    224e:	4f e7       	ldi	r20, 0x7F	; 127
    2250:	57 e4       	ldi	r21, 0x47	; 71
    2252:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2256:	18 16       	cp	r1, r24
    2258:	4c f5       	brge	.+82     	; 0x22ac <LCD_voidDisplayCharacter+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225a:	6b 85       	ldd	r22, Y+11	; 0x0b
    225c:	7c 85       	ldd	r23, Y+12	; 0x0c
    225e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2260:	9e 85       	ldd	r25, Y+14	; 0x0e
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e2       	ldi	r20, 0x20	; 32
    2268:	51 e4       	ldi	r21, 0x41	; 65
    226a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	bc 01       	movw	r22, r24
    2274:	cd 01       	movw	r24, r26
    2276:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	9e 83       	std	Y+6, r25	; 0x06
    2280:	8d 83       	std	Y+5, r24	; 0x05
    2282:	0f c0       	rjmp	.+30     	; 0x22a2 <LCD_voidDisplayCharacter+0x1f6>
    2284:	88 ec       	ldi	r24, 0xC8	; 200
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	9c 83       	std	Y+4, r25	; 0x04
    228a:	8b 83       	std	Y+3, r24	; 0x03
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	f1 f7       	brne	.-4      	; 0x2290 <LCD_voidDisplayCharacter+0x1e4>
    2294:	9c 83       	std	Y+4, r25	; 0x04
    2296:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2298:	8d 81       	ldd	r24, Y+5	; 0x05
    229a:	9e 81       	ldd	r25, Y+6	; 0x06
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	9e 83       	std	Y+6, r25	; 0x06
    22a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a2:	8d 81       	ldd	r24, Y+5	; 0x05
    22a4:	9e 81       	ldd	r25, Y+6	; 0x06
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	69 f7       	brne	.-38     	; 0x2284 <LCD_voidDisplayCharacter+0x1d8>
    22aa:	14 c0       	rjmp	.+40     	; 0x22d4 <LCD_voidDisplayCharacter+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ac:	6f 81       	ldd	r22, Y+7	; 0x07
    22ae:	78 85       	ldd	r23, Y+8	; 0x08
    22b0:	89 85       	ldd	r24, Y+9	; 0x09
    22b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	9e 83       	std	Y+6, r25	; 0x06
    22be:	8d 83       	std	Y+5, r24	; 0x05
    22c0:	8d 81       	ldd	r24, Y+5	; 0x05
    22c2:	9e 81       	ldd	r25, Y+6	; 0x06
    22c4:	9a 83       	std	Y+2, r25	; 0x02
    22c6:	89 83       	std	Y+1, r24	; 0x01
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	9a 81       	ldd	r25, Y+2	; 0x02
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	f1 f7       	brne	.-4      	; 0x22cc <LCD_voidDisplayCharacter+0x220>
    22d0:	9a 83       	std	Y+2, r25	; 0x02
    22d2:	89 83       	std	Y+1, r24	; 0x01
        /* delay 1msec */
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	62 e0       	ldi	r22, 0x02	; 2
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_DioEnumWriteChannel>
    #endif
}
    22de:	6d 96       	adiw	r28, 0x1d	; 29
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <LCD_voidCreateCustomCharacter>:

void LCD_voidCreateCustomCharacter(pu8 copy_pu8Character,u8 copy_u8PatternIndex,u8 copy_u8Row,u8 copy_u8Col)
{
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    22f8:	27 97       	sbiw	r28, 0x07	; 7
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	de bf       	out	0x3e, r29	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	9c 83       	std	Y+4, r25	; 0x04
    2306:	8b 83       	std	Y+3, r24	; 0x03
    2308:	6d 83       	std	Y+5, r22	; 0x05
    230a:	4e 83       	std	Y+6, r20	; 0x06
    230c:	2f 83       	std	Y+7, r18	; 0x07
    u8 local_u8Count;
    /* to set CGRAM Address: 1- Index * 8 */
    u8 local_u8Adress = copy_u8PatternIndex * 8;
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	88 2f       	mov	r24, r24
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	88 0f       	add	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	88 0f       	add	r24, r24
    231a:	99 1f       	adc	r25, r25
    231c:	88 0f       	add	r24, r24
    231e:	99 1f       	adc	r25, r25
    2320:	89 83       	std	Y+1, r24	; 0x01
    /* 2- set the address in the last special character */
    LCD_voidSendCommand(local_u8Adress + 64);
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	80 5c       	subi	r24, 0xC0	; 192
    2326:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_voidSendCommand>
    /* to write the data to CGRAM or DDRAM */
    for(local_u8Count = 0;local_u8Count <8;local_u8Count++)
    232a:	1a 82       	std	Y+2, r1	; 0x02
    232c:	0e c0       	rjmp	.+28     	; 0x234a <LCD_voidCreateCustomCharacter+0x5a>
    {
        LCD_voidDisplayCharacter(copy_pu8Character[local_u8Count]);
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	28 2f       	mov	r18, r24
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	9c 81       	ldd	r25, Y+4	; 0x04
    2338:	fc 01       	movw	r30, r24
    233a:	e2 0f       	add	r30, r18
    233c:	f3 1f       	adc	r31, r19
    233e:	80 81       	ld	r24, Z
    2340:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_voidDisplayCharacter>
    /* to set CGRAM Address: 1- Index * 8 */
    u8 local_u8Adress = copy_u8PatternIndex * 8;
    /* 2- set the address in the last special character */
    LCD_voidSendCommand(local_u8Adress + 64);
    /* to write the data to CGRAM or DDRAM */
    for(local_u8Count = 0;local_u8Count <8;local_u8Count++)
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	8f 5f       	subi	r24, 0xFF	; 255
    2348:	8a 83       	std	Y+2, r24	; 0x02
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	88 30       	cpi	r24, 0x08	; 8
    234e:	78 f3       	brcs	.-34     	; 0x232e <LCD_voidCreateCustomCharacter+0x3e>
    {
        LCD_voidDisplayCharacter(copy_pu8Character[local_u8Count]);
    }
    /* set DDRAM address */
    LCD_voidGoToXY(copy_u8Row,copy_u8Col);
    2350:	8e 81       	ldd	r24, Y+6	; 0x06
    2352:	6f 81       	ldd	r22, Y+7	; 0x07
    2354:	0e 94 b8 11 	call	0x2370	; 0x2370 <LCD_voidGoToXY>
    /* display the pattern */
    LCD_voidDisplayCharacter(copy_u8PatternIndex);
    2358:	8d 81       	ldd	r24, Y+5	; 0x05
    235a:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_voidDisplayCharacter>
}
    235e:	27 96       	adiw	r28, 0x07	; 7
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	cf 91       	pop	r28
    236c:	df 91       	pop	r29
    236e:	08 95       	ret

00002370 <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 copy_u8Row,u8 copy_u8Col)
{
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	00 d0       	rcall	.+0      	; 0x2376 <LCD_voidGoToXY+0x6>
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	89 83       	std	Y+1, r24	; 0x01
    237c:	6a 83       	std	Y+2, r22	; 0x02
    /* to select the row and the column*/
    LCD_voidSendCommand(LCD_u8_ADRESS + copy_u8Row + copy_u8Col);
    237e:	99 81       	ldd	r25, Y+1	; 0x01
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	89 0f       	add	r24, r25
    2384:	80 58       	subi	r24, 0x80	; 128
    2386:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_voidSendCommand>
}
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <LCD_u8DisplayString>:

u8 LCD_u8DisplayString(pu8 copy_pu8String)
{
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	00 d0       	rcall	.+0      	; 0x239a <LCD_u8DisplayString+0x6>
    239a:	00 d0       	rcall	.+0      	; 0x239c <LCD_u8DisplayString+0x8>
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	9c 83       	std	Y+4, r25	; 0x04
    23a2:	8b 83       	std	Y+3, r24	; 0x03
    u8 local_u8ErrorState = STD_TYPES_OK;
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Count = 0;
    23a8:	19 82       	std	Y+1, r1	; 0x01
    if(copy_pu8String != NULL)
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	9c 81       	ldd	r25, Y+4	; 0x04
    23ae:	00 97       	sbiw	r24, 0x00	; 0
    23b0:	d9 f0       	breq	.+54     	; 0x23e8 <LCD_u8DisplayString+0x54>
    23b2:	0e c0       	rjmp	.+28     	; 0x23d0 <LCD_u8DisplayString+0x3c>
    {
        /* check to the end of the string */
        while(copy_pu8String[local_u8Count] != '\0')
        {
            /* diplay the first character in the string */
           LCD_voidDisplayCharacter(copy_pu8String[local_u8Count]);
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	28 2f       	mov	r18, r24
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	fc 01       	movw	r30, r24
    23c0:	e2 0f       	add	r30, r18
    23c2:	f3 1f       	adc	r31, r19
    23c4:	80 81       	ld	r24, Z
    23c6:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_voidDisplayCharacter>
           local_u8Count++; 
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	8f 5f       	subi	r24, 0xFF	; 255
    23ce:	89 83       	std	Y+1, r24	; 0x01
    u8 local_u8ErrorState = STD_TYPES_OK;
    u8 local_u8Count = 0;
    if(copy_pu8String != NULL)
    {
        /* check to the end of the string */
        while(copy_pu8String[local_u8Count] != '\0')
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	28 2f       	mov	r18, r24
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	9c 81       	ldd	r25, Y+4	; 0x04
    23da:	fc 01       	movw	r30, r24
    23dc:	e2 0f       	add	r30, r18
    23de:	f3 1f       	adc	r31, r19
    23e0:	80 81       	ld	r24, Z
    23e2:	88 23       	and	r24, r24
    23e4:	39 f7       	brne	.-50     	; 0x23b4 <LCD_u8DisplayString+0x20>
    23e6:	01 c0       	rjmp	.+2      	; 0x23ea <LCD_u8DisplayString+0x56>
           local_u8Count++; 
        }
    }
    else
    {
        local_u8ErrorState = STD_TYPES_NOK;
    23e8:	1a 82       	std	Y+2, r1	; 0x02
    }
    return local_u8ErrorState;
    23ea:	8a 81       	ldd	r24, Y+2	; 0x02
}
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	cf 91       	pop	r28
    23f6:	df 91       	pop	r29
    23f8:	08 95       	ret

000023fa <LCD_voidDisplayNumber>:

void LCD_voidDisplayNumber(u32 copy_u32Number)
{
    23fa:	1f 93       	push	r17
    23fc:	df 93       	push	r29
    23fe:	cf 93       	push	r28
    2400:	00 d0       	rcall	.+0      	; 0x2402 <LCD_voidDisplayNumber+0x8>
    2402:	00 d0       	rcall	.+0      	; 0x2404 <LCD_voidDisplayNumber+0xa>
    2404:	0f 92       	push	r0
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	6a 83       	std	Y+2, r22	; 0x02
    240c:	7b 83       	std	Y+3, r23	; 0x03
    240e:	8c 83       	std	Y+4, r24	; 0x04
    2410:	9d 83       	std	Y+5, r25	; 0x05
    u8 local_u8Reserved = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	89 83       	std	Y+1, r24	; 0x01
    if(copy_u32Number == 0)
    2416:	8a 81       	ldd	r24, Y+2	; 0x02
    2418:	9b 81       	ldd	r25, Y+3	; 0x03
    241a:	ac 81       	ldd	r26, Y+4	; 0x04
    241c:	bd 81       	ldd	r27, Y+5	; 0x05
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	a1 05       	cpc	r26, r1
    2422:	b1 05       	cpc	r27, r1
    2424:	a1 f5       	brne	.+104    	; 0x248e <LCD_voidDisplayNumber+0x94>
    {
        LCD_voidDisplayCharacter(0);   
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_voidDisplayCharacter>
    242c:	4a c0       	rjmp	.+148    	; 0x24c2 <LCD_voidDisplayNumber+0xc8>
    }
    else
    {
        while(copy_u32Number != 0)
        {
            local_u8Reserved = (local_u8Reserved * 10) + (copy_u32Number % 10);
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	88 2f       	mov	r24, r24
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	9c 01       	movw	r18, r24
    2436:	22 0f       	add	r18, r18
    2438:	33 1f       	adc	r19, r19
    243a:	c9 01       	movw	r24, r18
    243c:	88 0f       	add	r24, r24
    243e:	99 1f       	adc	r25, r25
    2440:	88 0f       	add	r24, r24
    2442:	99 1f       	adc	r25, r25
    2444:	82 0f       	add	r24, r18
    2446:	93 1f       	adc	r25, r19
    2448:	18 2f       	mov	r17, r24
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	9b 81       	ldd	r25, Y+3	; 0x03
    244e:	ac 81       	ldd	r26, Y+4	; 0x04
    2450:	bd 81       	ldd	r27, Y+5	; 0x05
    2452:	2a e0       	ldi	r18, 0x0A	; 10
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e0       	ldi	r20, 0x00	; 0
    2458:	50 e0       	ldi	r21, 0x00	; 0
    245a:	bc 01       	movw	r22, r24
    245c:	cd 01       	movw	r24, r26
    245e:	0e 94 9d 12 	call	0x253a	; 0x253a <__udivmodsi4>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	81 0f       	add	r24, r17
    2468:	89 83       	std	Y+1, r24	; 0x01
            copy_u32Number /= 10;
    246a:	8a 81       	ldd	r24, Y+2	; 0x02
    246c:	9b 81       	ldd	r25, Y+3	; 0x03
    246e:	ac 81       	ldd	r26, Y+4	; 0x04
    2470:	bd 81       	ldd	r27, Y+5	; 0x05
    2472:	2a e0       	ldi	r18, 0x0A	; 10
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e0       	ldi	r20, 0x00	; 0
    2478:	50 e0       	ldi	r21, 0x00	; 0
    247a:	bc 01       	movw	r22, r24
    247c:	cd 01       	movw	r24, r26
    247e:	0e 94 9d 12 	call	0x253a	; 0x253a <__udivmodsi4>
    2482:	da 01       	movw	r26, r20
    2484:	c9 01       	movw	r24, r18
    2486:	8a 83       	std	Y+2, r24	; 0x02
    2488:	9b 83       	std	Y+3, r25	; 0x03
    248a:	ac 83       	std	Y+4, r26	; 0x04
    248c:	bd 83       	std	Y+5, r27	; 0x05
    {
        LCD_voidDisplayCharacter(0);   
    }
    else
    {
        while(copy_u32Number != 0)
    248e:	8a 81       	ldd	r24, Y+2	; 0x02
    2490:	9b 81       	ldd	r25, Y+3	; 0x03
    2492:	ac 81       	ldd	r26, Y+4	; 0x04
    2494:	bd 81       	ldd	r27, Y+5	; 0x05
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	a1 05       	cpc	r26, r1
    249a:	b1 05       	cpc	r27, r1
    249c:	41 f6       	brne	.-112    	; 0x242e <LCD_voidDisplayNumber+0x34>
            local_u8Reserved = (local_u8Reserved * 10) + (copy_u32Number % 10);
            copy_u32Number /= 10;
        }
        do
        {
            LCD_voidDisplayCharacter((local_u8Reserved % 10) + '0');
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	9a e0       	ldi	r25, 0x0A	; 10
    24a2:	69 2f       	mov	r22, r25
    24a4:	0e 94 91 12 	call	0x2522	; 0x2522 <__udivmodqi4>
    24a8:	89 2f       	mov	r24, r25
    24aa:	80 5d       	subi	r24, 0xD0	; 208
    24ac:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_voidDisplayCharacter>
            local_u8Reserved /= 10;
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	9a e0       	ldi	r25, 0x0A	; 10
    24b4:	69 2f       	mov	r22, r25
    24b6:	0e 94 91 12 	call	0x2522	; 0x2522 <__udivmodqi4>
    24ba:	89 83       	std	Y+1, r24	; 0x01
        }while(local_u8Reserved != 1);
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	81 30       	cpi	r24, 0x01	; 1
    24c0:	71 f7       	brne	.-36     	; 0x249e <LCD_voidDisplayNumber+0xa4>
    }
}
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	cf 91       	pop	r28
    24ce:	df 91       	pop	r29
    24d0:	1f 91       	pop	r17
    24d2:	08 95       	ret

000024d4 <LCD_voidDisplayClear>:

void LCD_voidDisplayClear(void)
{
    24d4:	df 93       	push	r29
    24d6:	cf 93       	push	r28
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(0x01);
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_voidSendCommand>
}
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <main>:
#include "../MCAL/GIE/Include/GIE_interface.h"
#include "../MCAL/UART/Include/UART_interface.h"
#include "../HAL/LCD/Include/LCD_interface.h"

int main(void)
{
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
    24f0:	2b 97       	sbiw	r28, 0x0b	; 11
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8string[11];

	PORT_voidInit();
    24fc:	0e 94 b4 06 	call	0xd68	; 0xd68 <PORT_voidInit>
	GIE_voidInit(GIE_u8_ENABLE);
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	0e 94 09 0a 	call	0x1412	; 0x1412 <GIE_voidInit>
	UART_voidInit();
    2506:	0e 94 9b 05 	call	0xb36	; 0xb36 <UART_voidInit>
	LCD_voidInit();
    250a:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_voidInit>
//	UART_UARTEnumSendString("ahmed mohey");
	UART_UARTEnumReceiveString(local_u8string,11);
    250e:	ce 01       	movw	r24, r28
    2510:	01 96       	adiw	r24, 0x01	; 1
    2512:	6b e0       	ldi	r22, 0x0B	; 11
    2514:	0e 94 7e 06 	call	0xcfc	; 0xcfc <UART_UARTEnumReceiveString>
	LCD_u8DisplayString(local_u8string);
    2518:	ce 01       	movw	r24, r28
    251a:	01 96       	adiw	r24, 0x01	; 1
    251c:	0e 94 ca 11 	call	0x2394	; 0x2394 <LCD_u8DisplayString>
    2520:	ff cf       	rjmp	.-2      	; 0x2520 <main+0x38>

00002522 <__udivmodqi4>:
    2522:	99 1b       	sub	r25, r25
    2524:	79 e0       	ldi	r23, 0x09	; 9
    2526:	04 c0       	rjmp	.+8      	; 0x2530 <__udivmodqi4_ep>

00002528 <__udivmodqi4_loop>:
    2528:	99 1f       	adc	r25, r25
    252a:	96 17       	cp	r25, r22
    252c:	08 f0       	brcs	.+2      	; 0x2530 <__udivmodqi4_ep>
    252e:	96 1b       	sub	r25, r22

00002530 <__udivmodqi4_ep>:
    2530:	88 1f       	adc	r24, r24
    2532:	7a 95       	dec	r23
    2534:	c9 f7       	brne	.-14     	; 0x2528 <__udivmodqi4_loop>
    2536:	80 95       	com	r24
    2538:	08 95       	ret

0000253a <__udivmodsi4>:
    253a:	a1 e2       	ldi	r26, 0x21	; 33
    253c:	1a 2e       	mov	r1, r26
    253e:	aa 1b       	sub	r26, r26
    2540:	bb 1b       	sub	r27, r27
    2542:	fd 01       	movw	r30, r26
    2544:	0d c0       	rjmp	.+26     	; 0x2560 <__udivmodsi4_ep>

00002546 <__udivmodsi4_loop>:
    2546:	aa 1f       	adc	r26, r26
    2548:	bb 1f       	adc	r27, r27
    254a:	ee 1f       	adc	r30, r30
    254c:	ff 1f       	adc	r31, r31
    254e:	a2 17       	cp	r26, r18
    2550:	b3 07       	cpc	r27, r19
    2552:	e4 07       	cpc	r30, r20
    2554:	f5 07       	cpc	r31, r21
    2556:	20 f0       	brcs	.+8      	; 0x2560 <__udivmodsi4_ep>
    2558:	a2 1b       	sub	r26, r18
    255a:	b3 0b       	sbc	r27, r19
    255c:	e4 0b       	sbc	r30, r20
    255e:	f5 0b       	sbc	r31, r21

00002560 <__udivmodsi4_ep>:
    2560:	66 1f       	adc	r22, r22
    2562:	77 1f       	adc	r23, r23
    2564:	88 1f       	adc	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	1a 94       	dec	r1
    256a:	69 f7       	brne	.-38     	; 0x2546 <__udivmodsi4_loop>
    256c:	60 95       	com	r22
    256e:	70 95       	com	r23
    2570:	80 95       	com	r24
    2572:	90 95       	com	r25
    2574:	9b 01       	movw	r18, r22
    2576:	ac 01       	movw	r20, r24
    2578:	bd 01       	movw	r22, r26
    257a:	cf 01       	movw	r24, r30
    257c:	08 95       	ret

0000257e <__prologue_saves__>:
    257e:	2f 92       	push	r2
    2580:	3f 92       	push	r3
    2582:	4f 92       	push	r4
    2584:	5f 92       	push	r5
    2586:	6f 92       	push	r6
    2588:	7f 92       	push	r7
    258a:	8f 92       	push	r8
    258c:	9f 92       	push	r9
    258e:	af 92       	push	r10
    2590:	bf 92       	push	r11
    2592:	cf 92       	push	r12
    2594:	df 92       	push	r13
    2596:	ef 92       	push	r14
    2598:	ff 92       	push	r15
    259a:	0f 93       	push	r16
    259c:	1f 93       	push	r17
    259e:	cf 93       	push	r28
    25a0:	df 93       	push	r29
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
    25a6:	ca 1b       	sub	r28, r26
    25a8:	db 0b       	sbc	r29, r27
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	de bf       	out	0x3e, r29	; 62
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	cd bf       	out	0x3d, r28	; 61
    25b4:	09 94       	ijmp

000025b6 <__epilogue_restores__>:
    25b6:	2a 88       	ldd	r2, Y+18	; 0x12
    25b8:	39 88       	ldd	r3, Y+17	; 0x11
    25ba:	48 88       	ldd	r4, Y+16	; 0x10
    25bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    25be:	6e 84       	ldd	r6, Y+14	; 0x0e
    25c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    25c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    25c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    25c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    25c8:	b9 84       	ldd	r11, Y+9	; 0x09
    25ca:	c8 84       	ldd	r12, Y+8	; 0x08
    25cc:	df 80       	ldd	r13, Y+7	; 0x07
    25ce:	ee 80       	ldd	r14, Y+6	; 0x06
    25d0:	fd 80       	ldd	r15, Y+5	; 0x05
    25d2:	0c 81       	ldd	r16, Y+4	; 0x04
    25d4:	1b 81       	ldd	r17, Y+3	; 0x03
    25d6:	aa 81       	ldd	r26, Y+2	; 0x02
    25d8:	b9 81       	ldd	r27, Y+1	; 0x01
    25da:	ce 0f       	add	r28, r30
    25dc:	d1 1d       	adc	r29, r1
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	f8 94       	cli
    25e2:	de bf       	out	0x3e, r29	; 62
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	cd bf       	out	0x3d, r28	; 61
    25e8:	ed 01       	movw	r28, r26
    25ea:	08 95       	ret

000025ec <_exit>:
    25ec:	f8 94       	cli

000025ee <__stop_program>:
    25ee:	ff cf       	rjmp	.-2      	; 0x25ee <__stop_program>
