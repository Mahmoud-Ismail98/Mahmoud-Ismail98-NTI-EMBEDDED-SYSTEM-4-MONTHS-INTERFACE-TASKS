
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000b90  00000c24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800080  00800080  00000c44  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c15  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca3  00000000  00000000  00002abd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000129f  00000000  00000000  00003760  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000498  00000000  00000000  00004a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bba  00000000  00000000  00004e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b92  00000000  00000000  00005a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  000075e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 81 03 	jmp	0x702	; 0x702 <__vector_1>
   8:	0c 94 aa 03 	jmp	0x754	; 0x754 <__vector_2>
   c:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 2b 04 	jmp	0x856	; 0x856 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 39       	cpi	r26, 0x98	; 152
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0e 02 	call	0x41c	; 0x41c <main>
  8a:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EXT_INTCallBackfunction>:
	EXT_InterruptPirefralEnable(EXT_0,EXT_RISING_EDGE);
	EXTINT_voidSetCallBack(&EXT_INTCallBackfunction,EXT_0);
}
void ICUSW_voidDisableSWICU(void)
{
	EXT_InterruptPirefralDisable(EXT_0);
  92:	83 e8       	ldi	r24, 0x83	; 131
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 23 04 	call	0x846	; 0x846 <Timer_voidGetTimer1CounterValue>
  9a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <Local_u8Flag.1672>
  9e:	81 11       	cpse	r24, r1
  a0:	16 c0       	rjmp	.+44     	; 0xce <EXT_INTCallBackfunction+0x3c>
  a2:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <Local_u16CounterValue.1670>
  a6:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <Local_u16CounterValue.1670+0x1>
  aa:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__data_end>
  ae:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <__data_end+0x1>
  b2:	82 1b       	sub	r24, r18
  b4:	93 0b       	sbc	r25, r19
  b6:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <ICUSW_u16OffPeriod+0x1>
  ba:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <ICUSW_u16OffPeriod>
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 07 03 	call	0x60e	; 0x60e <EXT_InterruptPirefralEnable>
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <Local_u8Flag.1672>
  cc:	18 c0       	rjmp	.+48     	; 0xfe <EXT_INTCallBackfunction+0x6c>
  ce:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <Local_u8Flag.1672>
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	a1 f4       	brne	.+40     	; 0xfe <EXT_INTCallBackfunction+0x6c>
  d6:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <Local_u16CounterValue.1670>
  da:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <Local_u16CounterValue.1670+0x1>
  de:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__data_end>
  e2:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <__data_end+0x1>
  e6:	82 1b       	sub	r24, r18
  e8:	93 0b       	sbc	r25, r19
  ea:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <ICUSW_u16OnPeriod+0x1>
  ee:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <ICUSW_u16OnPeriod>
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 07 03 	call	0x60e	; 0x60e <EXT_InterruptPirefralEnable>
  fa:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <Local_u8Flag.1672>
  fe:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <Local_u16CounterValue.1670>
 102:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <Local_u16CounterValue.1670+0x1>
 106:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__data_end+0x1>
 10a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
 10e:	08 95       	ret

00000110 <ICUSW_voidEnableSWICU>:
 110:	0e 94 0c 04 	call	0x818	; 0x818 <Timer_voidInit>
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 07 03 	call	0x60e	; 0x60e <EXT_InterruptPirefralEnable>
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	89 e4       	ldi	r24, 0x49	; 73
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 78 03 	call	0x6f0	; 0x6f0 <EXTINT_voidSetCallBack>
 128:	08 95       	ret

0000012a <ICUSW_u8GetOnPeriod>:


ICUSW_ErrorState ICUSW_u8GetOnPeriod(pu16 Copy_pu16OnPeriod)
{
    ICUSW_ErrorState Loc_u8ReturnState = ICUSW_OK;
    if (Copy_pu16OnPeriod == NULL)
 12a:	00 97       	sbiw	r24, 0x00	; 0
 12c:	49 f0       	breq	.+18     	; 0x140 <ICUSW_u8GetOnPeriod+0x16>
    {
        Loc_u8ReturnState = ICUSW_NULLPTR;
    }
    else
    {
        *Copy_pu16OnPeriod = ICUSW_u16OnPeriod;
 12e:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <ICUSW_u16OnPeriod>
 132:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <ICUSW_u16OnPeriod+0x1>
 136:	fc 01       	movw	r30, r24
 138:	31 83       	std	Z+1, r19	; 0x01
 13a:	20 83       	st	Z, r18
}


ICUSW_ErrorState ICUSW_u8GetOnPeriod(pu16 Copy_pu16OnPeriod)
{
    ICUSW_ErrorState Loc_u8ReturnState = ICUSW_OK;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	08 95       	ret
    if (Copy_pu16OnPeriod == NULL)
    {
        Loc_u8ReturnState = ICUSW_NULLPTR;
 140:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        *Copy_pu16OnPeriod = ICUSW_u16OnPeriod;
    }
    return Loc_u8ReturnState;
}
 142:	08 95       	ret

00000144 <ICUSW_u8GetTotalPeriod>:

ICUSW_ErrorState ICUSW_u8GetTotalPeriod(pu32 Copy_pu32TotalPeriod)
{
    ICUSW_ErrorState Loc_u8ReturnState = ICUSW_OK;
    if (Copy_pu32TotalPeriod == NULL)
 144:	00 97       	sbiw	r24, 0x00	; 0
 146:	99 f0       	breq	.+38     	; 0x16e <ICUSW_u8GetTotalPeriod+0x2a>
    {
        Loc_u8ReturnState = ICUSW_NULLPTR;
    }
    else
    {
        *Copy_pu32TotalPeriod = (u32)(ICUSW_u16OnPeriod + ICUSW_u16OffPeriod);
 148:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <ICUSW_u16OnPeriod>
 14c:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <ICUSW_u16OnPeriod+0x1>
 150:	40 91 85 00 	lds	r20, 0x0085	; 0x800085 <ICUSW_u16OffPeriod>
 154:	50 91 86 00 	lds	r21, 0x0086	; 0x800086 <ICUSW_u16OffPeriod+0x1>
 158:	42 0f       	add	r20, r18
 15a:	53 1f       	adc	r21, r19
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	40 83       	st	Z, r20
 164:	51 83       	std	Z+1, r21	; 0x01
 166:	62 83       	std	Z+2, r22	; 0x02
 168:	73 83       	std	Z+3, r23	; 0x03
    return Loc_u8ReturnState;
}

ICUSW_ErrorState ICUSW_u8GetTotalPeriod(pu32 Copy_pu32TotalPeriod)
{
    ICUSW_ErrorState Loc_u8ReturnState = ICUSW_OK;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	08 95       	ret
    if (Copy_pu32TotalPeriod == NULL)
    {
        Loc_u8ReturnState = ICUSW_NULLPTR;
 16e:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        *Copy_pu32TotalPeriod = (u32)(ICUSW_u16OnPeriod + ICUSW_u16OffPeriod);
    }
    return Loc_u8ReturnState;
}
 170:	08 95       	ret

00000172 <ICUSW_u8GetDutyCycle>:

ICUSW_ErrorState ICUSW_u8GetDutyCycle(pu8 Copy_pu8DutyCycle)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
    ICUSW_ErrorState Loc_u8ReturnState = ICUSW_OK;
    if (Copy_pu8DutyCycle == NULL)
 178:	89 2b       	or	r24, r25
 17a:	c9 f0       	breq	.+50     	; 0x1ae <ICUSW_u8GetDutyCycle+0x3c>
    {
        Loc_u8ReturnState = ICUSW_NULLPTR;
    }
    else
    {
        *Copy_pu8DutyCycle = (u8)(((u32)ICUSW_u16OnPeriod * 100) / (ICUSW_u16OnPeriod + ICUSW_u16OffPeriod));
 17c:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <ICUSW_u16OnPeriod>
 180:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <ICUSW_u16OnPeriod+0x1>
 184:	a4 e6       	ldi	r26, 0x64	; 100
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__umulhisi3>
 18c:	40 91 87 00 	lds	r20, 0x0087	; 0x800087 <ICUSW_u16OnPeriod>
 190:	50 91 88 00 	lds	r21, 0x0088	; 0x800088 <ICUSW_u16OnPeriod+0x1>
 194:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <ICUSW_u16OffPeriod>
 198:	30 91 86 00 	lds	r19, 0x0086	; 0x800086 <ICUSW_u16OffPeriod+0x1>
 19c:	24 0f       	add	r18, r20
 19e:	35 1f       	adc	r19, r21
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	0e 94 95 05 	call	0xb2a	; 0xb2a <__udivmodsi4>
 1a8:	28 83       	st	Y, r18
    return Loc_u8ReturnState;
}

ICUSW_ErrorState ICUSW_u8GetDutyCycle(pu8 Copy_pu8DutyCycle)
{
    ICUSW_ErrorState Loc_u8ReturnState = ICUSW_OK;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <ICUSW_u8GetDutyCycle+0x3e>
    if (Copy_pu8DutyCycle == NULL)
    {
        Loc_u8ReturnState = ICUSW_NULLPTR;
 1ae:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        *Copy_pu8DutyCycle = (u8)(((u32)ICUSW_u16OnPeriod * 100) / (ICUSW_u16OnPeriod + ICUSW_u16OffPeriod));
    }
    return Loc_u8ReturnState;
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <LCD_VoidSendDataBus>:
#include "LCD_cfg.h"



void LCD_VoidSendDataBus( u8 Copy_u8Data )
{
 1b6:	cf 93       	push	r28
 1b8:	c8 2f       	mov	r28, r24
#if	LCD_MODE	==	LCD_4BIT_MODE 
	/*SENDING HIGH NIBBLE*/
	DIO_enuWriteChannel(LCD_PIN_DATA_4,GET_BIT(Copy_u8Data,4));
 1ba:	84 fb       	bst	r24, 4
 1bc:	66 27       	eor	r22, r22
 1be:	60 f9       	bld	r22, 0
 1c0:	8c e0       	ldi	r24, 0x0C	; 12
 1c2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_enuWriteChannel>
	DIO_enuWriteChannel(LCD_PIN_DATA_5,GET_BIT(Copy_u8Data,5));
 1c6:	c5 fb       	bst	r28, 5
 1c8:	66 27       	eor	r22, r22
 1ca:	60 f9       	bld	r22, 0
 1cc:	8d e0       	ldi	r24, 0x0D	; 13
 1ce:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_enuWriteChannel>
	DIO_enuWriteChannel(LCD_PIN_DATA_6,GET_BIT(Copy_u8Data,6));
 1d2:	c6 fb       	bst	r28, 6
 1d4:	66 27       	eor	r22, r22
 1d6:	60 f9       	bld	r22, 0
 1d8:	8e e0       	ldi	r24, 0x0E	; 14
 1da:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_enuWriteChannel>
	DIO_enuWriteChannel(LCD_PIN_DATA_7,GET_BIT(Copy_u8Data,7));
 1de:	6c 2f       	mov	r22, r28
 1e0:	66 1f       	adc	r22, r22
 1e2:	66 27       	eor	r22, r22
 1e4:	66 1f       	adc	r22, r22
 1e6:	8f e0       	ldi	r24, 0x0F	; 15
 1e8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_enuWriteChannel>
	/* Enable pulse */
	DIO_enuWriteChannel(LCD_PIN_EN,LCD_PIN_HIGH);
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	89 e0       	ldi	r24, 0x09	; 9
 1f0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_enuWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	8a 95       	dec	r24
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <LCD_VoidSendDataBus+0x40>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <LCD_VoidSendDataBus+0x46>
	_delay_us(1);
	DIO_enuWriteChannel(LCD_PIN_EN,LCD_PIN_LOW);
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	89 e0       	ldi	r24, 0x09	; 9
 200:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_enuWriteChannel>
 204:	8f e8       	ldi	r24, 0x8F	; 143
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCD_VoidSendDataBus+0x52>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <LCD_VoidSendDataBus+0x58>
 20e:	00 00       	nop
	_delay_us(200);

	/*SENDING HIGH NIBBLE*/
	DIO_enuWriteChannel(LCD_PIN_DATA_4,GET_BIT(Copy_u8Data,0));
 210:	6c 2f       	mov	r22, r28
 212:	61 70       	andi	r22, 0x01	; 1
 214:	8c e0       	ldi	r24, 0x0C	; 12
 216:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_enuWriteChannel>
	DIO_enuWriteChannel(LCD_PIN_DATA_5,GET_BIT(Copy_u8Data,1));
 21a:	c1 fb       	bst	r28, 1
 21c:	66 27       	eor	r22, r22
 21e:	60 f9       	bld	r22, 0
 220:	8d e0       	ldi	r24, 0x0D	; 13
 222:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_enuWriteChannel>
	DIO_enuWriteChannel(LCD_PIN_DATA_6,GET_BIT(Copy_u8Data,2));
 226:	c2 fb       	bst	r28, 2
 228:	66 27       	eor	r22, r22
 22a:	60 f9       	bld	r22, 0
 22c:	8e e0       	ldi	r24, 0x0E	; 14
 22e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_enuWriteChannel>
	DIO_enuWriteChannel(LCD_PIN_DATA_7,GET_BIT(Copy_u8Data,3));
 232:	c3 fb       	bst	r28, 3
 234:	66 27       	eor	r22, r22
 236:	60 f9       	bld	r22, 0
 238:	8f e0       	ldi	r24, 0x0F	; 15
 23a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_enuWriteChannel>

	/* Enable pulse */
	DIO_enuWriteChannel(LCD_PIN_EN,LCD_PIN_HIGH);
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	89 e0       	ldi	r24, 0x09	; 9
 242:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_enuWriteChannel>
 246:	92 e0       	ldi	r25, 0x02	; 2
 248:	9a 95       	dec	r25
 24a:	f1 f7       	brne	.-4      	; 0x248 <LCD_VoidSendDataBus+0x92>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <LCD_VoidSendDataBus+0x98>
	_delay_us(1);
	DIO_enuWriteChannel(LCD_PIN_EN,LCD_PIN_LOW);
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	89 e0       	ldi	r24, 0x09	; 9
 252:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_enuWriteChannel>
 256:	8f e8       	ldi	r24, 0x8F	; 143
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <LCD_VoidSendDataBus+0xa4>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <LCD_VoidSendDataBus+0xaa>
 260:	00 00       	nop
	_delay_us(1);
	DIO_enuWriteChannel(LCD_PIN_EN,LCD_PIN_LOW);
	_delay_us(200);

#endif
}
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <LCD_VoidInit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	8f e3       	ldi	r24, 0x3F	; 63
 268:	9c e9       	ldi	r25, 0x9C	; 156
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <LCD_VoidInit+0x4>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <LCD_VoidInit+0xa>
 270:	00 00       	nop

void LCD_VoidInit (void)			
{			
	_delay_ms(20);	
	/* LCD Power ON delay always >20ms */
	DIO_enuWriteChannel(LCD_PIN_RS,LCD_PIN_LOW);
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	88 e0       	ldi	r24, 0x08	; 8
 276:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_enuWriteChannel>
	/*  4 bit initialization of LCD  */
#if	LCD_MODE	==	LCD_4BIT_MODE 
	LCD_VoidSendDataBus(LCD_4MODE_SET);	
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_VoidSendDataBus>
	/* 2 line, 5*7 matrix in 4-bit mode */	
	LCD_VoidSendDataBus(lCD_2LINE_SET);
 280:	88 e2       	ldi	r24, 0x28	; 40
 282:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_VoidSendDataBus>
#elif	LCD_MODE	==	LCD_8BIT_MODE
	LCD_VoidSendDataBus(LCD_8MODE_SET);	
#endif		
	/* Display on cursor off*/
	LCD_VoidSendDataBus(LCD_DISPLAY_ON_CURSOR_OFF);
 286:	8c e0       	ldi	r24, 0x0C	; 12
 288:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_VoidSendDataBus>
	/* Increment cursor (shift cursor to right)*/	
	LCD_VoidSendDataBus(LCD_SHIFT_CURSOR_SET);	
 28c:	86 e0       	ldi	r24, 0x06	; 6
 28e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_VoidSendDataBus>
	/* Clear display screen*/	
	LCD_VoidSendDataBus(LCD_CLEAR_LCD);		
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_VoidSendDataBus>
 298:	8f e9       	ldi	r24, 0x9F	; 159
 29a:	9f e0       	ldi	r25, 0x0F	; 15
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <LCD_VoidInit+0x36>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <LCD_VoidInit+0x3c>
 2a2:	00 00       	nop
 2a4:	08 95       	ret

000002a6 <LCD_VOidSendChar>:
	_delay_ms(2);
}


void LCD_VOidSendChar( u8 Copy_u8Data )
{
 2a6:	cf 93       	push	r28
 2a8:	c8 2f       	mov	r28, r24
 DIO_enuWriteChannel(LCD_PIN_RS,LCD_PIN_HIGH);
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	88 e0       	ldi	r24, 0x08	; 8
 2ae:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_enuWriteChannel>
 LCD_VoidSendDataBus( Copy_u8Data );
 2b2:	8c 2f       	mov	r24, r28
 2b4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_VoidSendDataBus>
}
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <LCD_VoidSendString>:


void LCD_VoidSendString (pu8 Copy_Addu8Str)		
{
 2bc:	cf 92       	push	r12
 2be:	df 92       	push	r13
 2c0:	ef 92       	push	r14
 2c2:	ff 92       	push	r15
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	ec 01       	movw	r28, r24
	u32 Loc_u32Iterator;
	for(Loc_u32Iterator=0;Copy_Addu8Str[Loc_u32Iterator]!=NULL;Loc_u32Iterator++)		/* Send each char of string till the NULL */
 2ca:	c1 2c       	mov	r12, r1
 2cc:	d1 2c       	mov	r13, r1
 2ce:	76 01       	movw	r14, r12
 2d0:	07 c0       	rjmp	.+14     	; 0x2e0 <LCD_VoidSendString+0x24>
	{
		LCD_VOidSendChar(Copy_Addu8Str[Loc_u32Iterator]);
 2d2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_VOidSendChar>


void LCD_VoidSendString (pu8 Copy_Addu8Str)		
{
	u32 Loc_u32Iterator;
	for(Loc_u32Iterator=0;Copy_Addu8Str[Loc_u32Iterator]!=NULL;Loc_u32Iterator++)		/* Send each char of string till the NULL */
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	c8 1a       	sub	r12, r24
 2da:	d8 0a       	sbc	r13, r24
 2dc:	e8 0a       	sbc	r14, r24
 2de:	f8 0a       	sbc	r15, r24
 2e0:	fe 01       	movw	r30, r28
 2e2:	ec 0d       	add	r30, r12
 2e4:	fd 1d       	adc	r31, r13
 2e6:	80 81       	ld	r24, Z
 2e8:	81 11       	cpse	r24, r1
 2ea:	f3 cf       	rjmp	.-26     	; 0x2d2 <LCD_VoidSendString+0x16>
	{
		LCD_VOidSendChar(Copy_Addu8Str[Loc_u32Iterator]);
	}
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	ff 90       	pop	r15
 2f2:	ef 90       	pop	r14
 2f4:	df 90       	pop	r13
 2f6:	cf 90       	pop	r12
 2f8:	08 95       	ret

000002fa <LCD_Goto_xy>:


void LCD_Goto_xy (u8 Copy_u8Row, u8 Copy_u8Col)	
{
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	d8 2f       	mov	r29, r24
 300:	c6 2f       	mov	r28, r22
	DIO_enuWriteChannel(LCD_PIN_RS,LCD_PIN_LOW);
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	88 e0       	ldi	r24, 0x08	; 8
 306:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DIO_enuWriteChannel>
 	LCD_VoidSendDataBus( LCD_CURSOR_HOME + Copy_u8Row + Copy_u8Col );		
 30a:	8d 2f       	mov	r24, r29
 30c:	8c 0f       	add	r24, r28
 30e:	80 58       	subi	r24, 0x80	; 128
 310:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_VoidSendDataBus>
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <LCD_VoidSendNumbers>:

void LCD_VoidSendNumbers(float Copy_f32Number)
{
 31a:	8f 92       	push	r8
 31c:	9f 92       	push	r9
 31e:	af 92       	push	r10
 320:	bf 92       	push	r11
 322:	cf 92       	push	r12
 324:	df 92       	push	r13
 326:	ef 92       	push	r14
 328:	ff 92       	push	r15
 32a:	0f 93       	push	r16
 32c:	1f 93       	push	r17
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
 336:	64 97       	sbiw	r28, 0x14	; 20
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	f8 94       	cli
 33c:	de bf       	out	0x3e, r29	; 62
 33e:	0f be       	out	0x3f, r0	; 63
 340:	cd bf       	out	0x3d, r28	; 61
 342:	4b 01       	movw	r8, r22
 344:	5c 01       	movw	r10, r24
    u8 Loc_u8Array[20];
    u32 Loc_f32Number = (u32)(Copy_f32Number * 100);
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	48 ec       	ldi	r20, 0xC8	; 200
 34c:	52 e4       	ldi	r21, 0x42	; 66
 34e:	0e 94 00 05 	call	0xa00	; 0xa00 <__mulsf3>
 352:	0e 94 47 04 	call	0x88e	; 0x88e <__fixunssfsi>
 356:	6b 01       	movw	r12, r22
 358:	7c 01       	movw	r14, r24
    s8 Loc_s8Counter = 0;
    u8 isNegative = 0;

    if (Copy_f32Number < 0) {
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	a9 01       	movw	r20, r18
 360:	c5 01       	movw	r24, r10
 362:	b4 01       	movw	r22, r8
 364:	0e 94 42 04 	call	0x884	; 0x884 <__cmpsf2>
 368:	88 23       	and	r24, r24
 36a:	54 f4       	brge	.+20     	; 0x380 <LCD_VoidSendNumbers+0x66>
        isNegative = 1;
        Loc_f32Number = -Loc_f32Number;
 36c:	f0 94       	com	r15
 36e:	e0 94       	com	r14
 370:	d0 94       	com	r13
 372:	c0 94       	com	r12
 374:	c1 1c       	adc	r12, r1
 376:	d1 1c       	adc	r13, r1
 378:	e1 1c       	adc	r14, r1
 37a:	f1 1c       	adc	r15, r1
    u32 Loc_f32Number = (u32)(Copy_f32Number * 100);
    s8 Loc_s8Counter = 0;
    u8 isNegative = 0;

    if (Copy_f32Number < 0) {
        isNegative = 1;
 37c:	01 e0       	ldi	r16, 0x01	; 1
 37e:	01 c0       	rjmp	.+2      	; 0x382 <LCD_VoidSendNumbers+0x68>
void LCD_VoidSendNumbers(float Copy_f32Number)
{
    u8 Loc_u8Array[20];
    u32 Loc_f32Number = (u32)(Copy_f32Number * 100);
    s8 Loc_s8Counter = 0;
    u8 isNegative = 0;
 380:	00 e0       	ldi	r16, 0x00	; 0

    if (Copy_f32Number < 0) {
        isNegative = 1;
 382:	10 e0       	ldi	r17, 0x00	; 0
        Loc_f32Number = -Loc_f32Number;
    }

    do {
        Loc_u8Array[Loc_s8Counter] = Loc_f32Number % 10;
 384:	c7 01       	movw	r24, r14
 386:	b6 01       	movw	r22, r12
 388:	2a e0       	ldi	r18, 0x0A	; 10
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	40 e0       	ldi	r20, 0x00	; 0
 38e:	50 e0       	ldi	r21, 0x00	; 0
 390:	0e 94 95 05 	call	0xb2a	; 0xb2a <__udivmodsi4>
 394:	e1 e0       	ldi	r30, 0x01	; 1
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	ec 0f       	add	r30, r28
 39a:	fd 1f       	adc	r31, r29
 39c:	e1 0f       	add	r30, r17
 39e:	f1 1d       	adc	r31, r1
 3a0:	17 fd       	sbrc	r17, 7
 3a2:	fa 95       	dec	r31
 3a4:	60 83       	st	Z, r22
        Loc_f32Number /= 10;
 3a6:	c2 2e       	mov	r12, r18
 3a8:	d3 2e       	mov	r13, r19
 3aa:	e4 2e       	mov	r14, r20
 3ac:	f5 2e       	mov	r15, r21
        Loc_s8Counter++;
 3ae:	1f 5f       	subi	r17, 0xFF	; 255
    } while (Loc_f32Number > 0);
 3b0:	c1 14       	cp	r12, r1
 3b2:	d1 04       	cpc	r13, r1
 3b4:	e1 04       	cpc	r14, r1
 3b6:	f1 04       	cpc	r15, r1
 3b8:	29 f7       	brne	.-54     	; 0x384 <LCD_VoidSendNumbers+0x6a>

    if (isNegative) {
 3ba:	00 23       	and	r16, r16
 3bc:	d1 f0       	breq	.+52     	; 0x3f2 <LCD_VoidSendNumbers+0xd8>
        LCD_VOidSendChar('-');
 3be:	8d e2       	ldi	r24, 0x2D	; 45
 3c0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_VOidSendChar>
 3c4:	16 c0       	rjmp	.+44     	; 0x3f2 <LCD_VoidSendNumbers+0xd8>
    }

    while (Loc_s8Counter > 0) {
        if (Loc_s8Counter == 2) {
 3c6:	12 30       	cpi	r17, 0x02	; 2
 3c8:	19 f4       	brne	.+6      	; 0x3d0 <LCD_VoidSendNumbers+0xb6>
            LCD_VOidSendChar('.');
 3ca:	8e e2       	ldi	r24, 0x2E	; 46
 3cc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_VOidSendChar>
        }
        Loc_s8Counter--;
 3d0:	11 50       	subi	r17, 0x01	; 1
        LCD_VOidSendChar(Loc_u8Array[Loc_s8Counter] + '0');
 3d2:	e1 e0       	ldi	r30, 0x01	; 1
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	ec 0f       	add	r30, r28
 3d8:	fd 1f       	adc	r31, r29
 3da:	e1 0f       	add	r30, r17
 3dc:	f1 1d       	adc	r31, r1
 3de:	17 fd       	sbrc	r17, 7
 3e0:	fa 95       	dec	r31
 3e2:	80 81       	ld	r24, Z
 3e4:	80 5d       	subi	r24, 0xD0	; 208
 3e6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_VOidSendChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ea:	85 e0       	ldi	r24, 0x05	; 5
 3ec:	8a 95       	dec	r24
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <LCD_VoidSendNumbers+0xd2>
 3f0:	00 00       	nop

    if (isNegative) {
        LCD_VOidSendChar('-');
    }

    while (Loc_s8Counter > 0) {
 3f2:	11 16       	cp	r1, r17
 3f4:	44 f3       	brlt	.-48     	; 0x3c6 <LCD_VoidSendNumbers+0xac>
        }
        Loc_s8Counter--;
        LCD_VOidSendChar(Loc_u8Array[Loc_s8Counter] + '0');
        _delay_us(2);
    }
}
 3f6:	64 96       	adiw	r28, 0x14	; 20
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	f8 94       	cli
 3fc:	de bf       	out	0x3e, r29	; 62
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	cd bf       	out	0x3d, r28	; 61
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	0f 91       	pop	r16
 40a:	ff 90       	pop	r15
 40c:	ef 90       	pop	r14
 40e:	df 90       	pop	r13
 410:	cf 90       	pop	r12
 412:	bf 90       	pop	r11
 414:	af 90       	pop	r10
 416:	9f 90       	pop	r9
 418:	8f 90       	pop	r8
 41a:	08 95       	ret

0000041c <main>:
   volatile u16 Loc_u16OnPeriod=0;
   volatile u32 Loc_u16TotalPeriod=0;
   volatile u8 Loc_u16OnDutyCycle=0;

int main() {
    GIE_globalInterruptEnable();
 41c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <GIE_globalInterruptEnable>
   PORT_VoidInit();
 420:	0e 94 00 04 	call	0x800	; 0x800 <PORT_VoidInit>
   LCD_VoidInit();
 424:	0e 94 33 01 	call	0x266	; 0x266 <LCD_VoidInit>
   ICUSW_voidEnableSWICU();
 428:	0e 94 88 00 	call	0x110	; 0x110 <ICUSW_voidEnableSWICU>


    while (1) {
        ICUSW_u8GetOnPeriod(&Loc_u16OnPeriod);
 42c:	8e e8       	ldi	r24, 0x8E	; 142
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 95 00 	call	0x12a	; 0x12a <ICUSW_u8GetOnPeriod>
        ICUSW_u8GetTotalPeriod(&Loc_u16TotalPeriod);
 434:	8a e8       	ldi	r24, 0x8A	; 138
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 a2 00 	call	0x144	; 0x144 <ICUSW_u8GetTotalPeriod>
        ICUSW_u8GetDutyCycle(&Loc_u16OnDutyCycle);
 43c:	89 e8       	ldi	r24, 0x89	; 137
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 b9 00 	call	0x172	; 0x172 <ICUSW_u8GetDutyCycle>
        LCD_Goto_xy(LCD_ROW_0,LCD_COL_0);
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_Goto_xy>
       LCD_VoidSendString("On Period");
 44c:	80 e6       	ldi	r24, 0x60	; 96
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_VoidSendString>
       LCD_Goto_xy(LCD_ROW_0,LCD_COL_11);
 454:	6b e0       	ldi	r22, 0x0B	; 11
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_Goto_xy>
       LCD_VoidSendNumbers(Loc_u16OnPeriod);
 45c:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <Loc_u16OnPeriod>
 460:	70 91 8f 00 	lds	r23, 0x008F	; 0x80008f <Loc_u16OnPeriod+0x1>
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 76 04 	call	0x8ec	; 0x8ec <__floatunsisf>
 46c:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_VoidSendNumbers>
       LCD_Goto_xy(LCD_ROW_1,LCD_COL_0);
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	80 e4       	ldi	r24, 0x40	; 64
 474:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_Goto_xy>
       LCD_VoidSendString("OFF Period");
 478:	8a e6       	ldi	r24, 0x6A	; 106
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_VoidSendString>
       LCD_Goto_xy(LCD_ROW_1,LCD_COL_11);
 480:	6b e0       	ldi	r22, 0x0B	; 11
 482:	80 e4       	ldi	r24, 0x40	; 64
 484:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_Goto_xy>
       LCD_VoidSendNumbers(Loc_u16TotalPeriod-Loc_u16OnPeriod);
 488:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <Loc_u16TotalPeriod>
 48c:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <Loc_u16TotalPeriod+0x1>
 490:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <Loc_u16TotalPeriod+0x2>
 494:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <Loc_u16TotalPeriod+0x3>
 498:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <Loc_u16OnPeriod>
 49c:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <Loc_u16OnPeriod+0x1>
 4a0:	bc 01       	movw	r22, r24
 4a2:	cd 01       	movw	r24, r26
 4a4:	62 1b       	sub	r22, r18
 4a6:	73 0b       	sbc	r23, r19
 4a8:	81 09       	sbc	r24, r1
 4aa:	91 09       	sbc	r25, r1
 4ac:	0e 94 76 04 	call	0x8ec	; 0x8ec <__floatunsisf>
 4b0:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_VoidSendNumbers>

       LCD_Goto_xy(LCD_ROW_2,LCD_COL_0);
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	84 e1       	ldi	r24, 0x14	; 20
 4b8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_Goto_xy>
       LCD_VoidSendString("Duty Cycle");
 4bc:	85 e7       	ldi	r24, 0x75	; 117
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_VoidSendString>
       LCD_Goto_xy(LCD_ROW_2,LCD_COL_11);
 4c4:	6b e0       	ldi	r22, 0x0B	; 11
 4c6:	84 e1       	ldi	r24, 0x14	; 20
 4c8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_Goto_xy>
       LCD_VoidSendNumbers(Loc_u16OnDutyCycle);
 4cc:	60 91 89 00 	lds	r22, 0x0089	; 0x800089 <Loc_u16OnDutyCycle>
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 76 04 	call	0x8ec	; 0x8ec <__floatunsisf>
 4da:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_VoidSendNumbers>
 4de:	a6 cf       	rjmp	.-180    	; 0x42c <main+0x10>

000004e0 <DIO_enuWriteChannel>:



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
    if((Copy_u8ChannelId>31)||(Copy_u8ChannelId<0)){
 4e0:	80 32       	cpi	r24, 0x20	; 32
 4e2:	08 f0       	brcs	.+2      	; 0x4e6 <DIO_enuWriteChannel+0x6>
 4e4:	8e c0       	rjmp	.+284    	; 0x602 <DIO_enuWriteChannel+0x122>
        Local_u8Status = DIO_WRONGCHANNEL;
    }
    else if((Copy_u8Level>1)||(Copy_u8Level<0))
 4e6:	62 30       	cpi	r22, 0x02	; 2
 4e8:	08 f0       	brcs	.+2      	; 0x4ec <DIO_enuWriteChannel+0xc>
 4ea:	8d c0       	rjmp	.+282    	; 0x606 <DIO_enuWriteChannel+0x126>
    {
        Local_u8Status = DIO_WRONGDIR;
	}
    else{
        u8 Local_u8Port = Copy_u8ChannelId/8;
 4ec:	98 2f       	mov	r25, r24
 4ee:	96 95       	lsr	r25
 4f0:	96 95       	lsr	r25
 4f2:	96 95       	lsr	r25
        u8 Local_u8Pin = Copy_u8ChannelId%8;
 4f4:	87 70       	andi	r24, 0x07	; 7
        switch(Local_u8Port)
 4f6:	91 30       	cpi	r25, 0x01	; 1
 4f8:	39 f1       	breq	.+78     	; 0x548 <DIO_enuWriteChannel+0x68>
 4fa:	38 f0       	brcs	.+14     	; 0x50a <DIO_enuWriteChannel+0x2a>
 4fc:	92 30       	cpi	r25, 0x02	; 2
 4fe:	09 f4       	brne	.+2      	; 0x502 <DIO_enuWriteChannel+0x22>
 500:	42 c0       	rjmp	.+132    	; 0x586 <DIO_enuWriteChannel+0xa6>
 502:	93 30       	cpi	r25, 0x03	; 3
 504:	09 f4       	brne	.+2      	; 0x508 <DIO_enuWriteChannel+0x28>
 506:	5e c0       	rjmp	.+188    	; 0x5c4 <DIO_enuWriteChannel+0xe4>
 508:	80 c0       	rjmp	.+256    	; 0x60a <DIO_enuWriteChannel+0x12a>
        {
            case DIO_PORTA:
                if(Copy_u8Level==DIO_CHANNEL_LOW)
 50a:	61 11       	cpse	r22, r1
 50c:	0f c0       	rjmp	.+30     	; 0x52c <DIO_enuWriteChannel+0x4c>
                {
                    CLR_BIT(DIO_PORTA_Reg,Local_u8Pin);
 50e:	4b b3       	in	r20, 0x1b	; 27
 510:	21 e0       	ldi	r18, 0x01	; 1
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	b9 01       	movw	r22, r18
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_enuWriteChannel+0x3c>
 518:	66 0f       	add	r22, r22
 51a:	77 1f       	adc	r23, r23
 51c:	8a 95       	dec	r24
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_enuWriteChannel+0x38>
 520:	cb 01       	movw	r24, r22
 522:	80 95       	com	r24
 524:	84 23       	and	r24, r20
 526:	8b bb       	out	0x1b, r24	; 27
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
 528:	84 e0       	ldi	r24, 0x04	; 4
 52a:	08 95       	ret
                {
                    CLR_BIT(DIO_PORTA_Reg,Local_u8Pin);
                }
                else
                {
                    SET_BIT(DIO_PORTA_Reg,Local_u8Pin);
 52c:	4b b3       	in	r20, 0x1b	; 27
 52e:	21 e0       	ldi	r18, 0x01	; 1
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	b9 01       	movw	r22, r18
 534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_enuWriteChannel+0x5a>
 536:	66 0f       	add	r22, r22
 538:	77 1f       	adc	r23, r23
 53a:	8a 95       	dec	r24
 53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_enuWriteChannel+0x56>
 53e:	cb 01       	movw	r24, r22
 540:	84 2b       	or	r24, r20
 542:	8b bb       	out	0x1b, r24	; 27
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
 544:	84 e0       	ldi	r24, 0x04	; 4
 546:	08 95       	ret
                {
                    SET_BIT(DIO_PORTA_Reg,Local_u8Pin);
                }   
            break;
            case DIO_PORTB:
                if(Copy_u8Level==DIO_CHANNEL_LOW)
 548:	61 11       	cpse	r22, r1
 54a:	0f c0       	rjmp	.+30     	; 0x56a <DIO_enuWriteChannel+0x8a>
                {
                    CLR_BIT(DIO_PORTB_Reg,Local_u8Pin);
 54c:	48 b3       	in	r20, 0x18	; 24
 54e:	21 e0       	ldi	r18, 0x01	; 1
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	b9 01       	movw	r22, r18
 554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_enuWriteChannel+0x7a>
 556:	66 0f       	add	r22, r22
 558:	77 1f       	adc	r23, r23
 55a:	8a 95       	dec	r24
 55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_enuWriteChannel+0x76>
 55e:	cb 01       	movw	r24, r22
 560:	80 95       	com	r24
 562:	84 23       	and	r24, r20
 564:	88 bb       	out	0x18, r24	; 24
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
 566:	84 e0       	ldi	r24, 0x04	; 4
 568:	08 95       	ret
                {
                    CLR_BIT(DIO_PORTB_Reg,Local_u8Pin);
                }
                else
                {
                    SET_BIT(DIO_PORTB_Reg,Local_u8Pin);
 56a:	48 b3       	in	r20, 0x18	; 24
 56c:	21 e0       	ldi	r18, 0x01	; 1
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	b9 01       	movw	r22, r18
 572:	02 c0       	rjmp	.+4      	; 0x578 <DIO_enuWriteChannel+0x98>
 574:	66 0f       	add	r22, r22
 576:	77 1f       	adc	r23, r23
 578:	8a 95       	dec	r24
 57a:	e2 f7       	brpl	.-8      	; 0x574 <DIO_enuWriteChannel+0x94>
 57c:	cb 01       	movw	r24, r22
 57e:	84 2b       	or	r24, r20
 580:	88 bb       	out	0x18, r24	; 24
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
 582:	84 e0       	ldi	r24, 0x04	; 4
 584:	08 95       	ret
                {
                    SET_BIT(DIO_PORTB_Reg,Local_u8Pin);
                }                          
            break;
            case DIO_PORTC:
                if(Copy_u8Level==DIO_CHANNEL_LOW)
 586:	61 11       	cpse	r22, r1
 588:	0f c0       	rjmp	.+30     	; 0x5a8 <DIO_enuWriteChannel+0xc8>
                {
                    CLR_BIT(DIO_PORTC_Reg,Local_u8Pin);
 58a:	45 b3       	in	r20, 0x15	; 21
 58c:	21 e0       	ldi	r18, 0x01	; 1
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	b9 01       	movw	r22, r18
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_enuWriteChannel+0xb8>
 594:	66 0f       	add	r22, r22
 596:	77 1f       	adc	r23, r23
 598:	8a 95       	dec	r24
 59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_enuWriteChannel+0xb4>
 59c:	cb 01       	movw	r24, r22
 59e:	80 95       	com	r24
 5a0:	84 23       	and	r24, r20
 5a2:	85 bb       	out	0x15, r24	; 21
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
 5a4:	84 e0       	ldi	r24, 0x04	; 4
 5a6:	08 95       	ret
                {
                    CLR_BIT(DIO_PORTC_Reg,Local_u8Pin);
                }
                else
                {
                    SET_BIT(DIO_PORTC_Reg,Local_u8Pin);
 5a8:	45 b3       	in	r20, 0x15	; 21
 5aa:	21 e0       	ldi	r18, 0x01	; 1
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	b9 01       	movw	r22, r18
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_enuWriteChannel+0xd6>
 5b2:	66 0f       	add	r22, r22
 5b4:	77 1f       	adc	r23, r23
 5b6:	8a 95       	dec	r24
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_enuWriteChannel+0xd2>
 5ba:	cb 01       	movw	r24, r22
 5bc:	84 2b       	or	r24, r20
 5be:	85 bb       	out	0x15, r24	; 21
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
 5c0:	84 e0       	ldi	r24, 0x04	; 4
 5c2:	08 95       	ret
                {
                    SET_BIT(DIO_PORTC_Reg,Local_u8Pin);
                }  
            break;
            case DIO_PORTD:
                if(Copy_u8Level==DIO_CHANNEL_LOW)
 5c4:	61 11       	cpse	r22, r1
 5c6:	0f c0       	rjmp	.+30     	; 0x5e6 <DIO_enuWriteChannel+0x106>
                {
                    CLR_BIT(DIO_PORTD_Reg,Local_u8Pin);
 5c8:	42 b3       	in	r20, 0x12	; 18
 5ca:	21 e0       	ldi	r18, 0x01	; 1
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	b9 01       	movw	r22, r18
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_enuWriteChannel+0xf6>
 5d2:	66 0f       	add	r22, r22
 5d4:	77 1f       	adc	r23, r23
 5d6:	8a 95       	dec	r24
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_enuWriteChannel+0xf2>
 5da:	cb 01       	movw	r24, r22
 5dc:	80 95       	com	r24
 5de:	84 23       	and	r24, r20
 5e0:	82 bb       	out	0x12, r24	; 18
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
 5e2:	84 e0       	ldi	r24, 0x04	; 4
 5e4:	08 95       	ret
                {
                    CLR_BIT(DIO_PORTD_Reg,Local_u8Pin);
                }
                else
                {
                    SET_BIT(DIO_PORTD_Reg,Local_u8Pin);
 5e6:	42 b3       	in	r20, 0x12	; 18
 5e8:	21 e0       	ldi	r18, 0x01	; 1
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	b9 01       	movw	r22, r18
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_enuWriteChannel+0x114>
 5f0:	66 0f       	add	r22, r22
 5f2:	77 1f       	adc	r23, r23
 5f4:	8a 95       	dec	r24
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_enuWriteChannel+0x110>
 5f8:	cb 01       	movw	r24, r22
 5fa:	84 2b       	or	r24, r20
 5fc:	82 bb       	out	0x12, r24	; 18
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
 5fe:	84 e0       	ldi	r24, 0x04	; 4
 600:	08 95       	ret
    if((Copy_u8ChannelId>31)||(Copy_u8ChannelId<0)){
        Local_u8Status = DIO_WRONGCHANNEL;
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	08 95       	ret
    }
    else if((Copy_u8Level>1)||(Copy_u8Level<0))
    {
        Local_u8Status = DIO_WRONGDIR;
 606:	85 e0       	ldi	r24, 0x05	; 5
 608:	08 95       	ret
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
 60a:	84 e0       	ldi	r24, 0x04	; 4
                /*DO NOTHING*/
            break;
        }   
    }  
    return Local_u8Status;
}
 60c:	08 95       	ret

0000060e <EXT_InterruptPirefralEnable>:
            default:
            break;
        }
    }
    return Loc_u8Status;
}
 60e:	64 30       	cpi	r22, 0x04	; 4
 610:	08 f0       	brcs	.+2      	; 0x614 <EXT_InterruptPirefralEnable+0x6>
 612:	68 c0       	rjmp	.+208    	; 0x6e4 <EXT_InterruptPirefralEnable+0xd6>
 614:	84 30       	cpi	r24, 0x04	; 4
 616:	08 f0       	brcs	.+2      	; 0x61a <EXT_InterruptPirefralEnable+0xc>
 618:	67 c0       	rjmp	.+206    	; 0x6e8 <EXT_InterruptPirefralEnable+0xda>
 61a:	81 30       	cpi	r24, 0x01	; 1
 61c:	61 f1       	breq	.+88     	; 0x676 <EXT_InterruptPirefralEnable+0x68>
 61e:	20 f0       	brcs	.+8      	; 0x628 <EXT_InterruptPirefralEnable+0x1a>
 620:	82 30       	cpi	r24, 0x02	; 2
 622:	09 f4       	brne	.+2      	; 0x626 <EXT_InterruptPirefralEnable+0x18>
 624:	4f c0       	rjmp	.+158    	; 0x6c4 <EXT_InterruptPirefralEnable+0xb6>
 626:	62 c0       	rjmp	.+196    	; 0x6ec <EXT_InterruptPirefralEnable+0xde>
 628:	61 30       	cpi	r22, 0x01	; 1
 62a:	61 f0       	breq	.+24     	; 0x644 <EXT_InterruptPirefralEnable+0x36>
 62c:	90 f0       	brcs	.+36     	; 0x652 <EXT_InterruptPirefralEnable+0x44>
 62e:	62 30       	cpi	r22, 0x02	; 2
 630:	b9 f0       	breq	.+46     	; 0x660 <EXT_InterruptPirefralEnable+0x52>
 632:	63 30       	cpi	r22, 0x03	; 3
 634:	d9 f4       	brne	.+54     	; 0x66c <EXT_InterruptPirefralEnable+0x5e>
 636:	85 b7       	in	r24, 0x35	; 53
 638:	87 7f       	andi	r24, 0xF7	; 247
 63a:	85 bf       	out	0x35, r24	; 53
 63c:	85 b7       	in	r24, 0x35	; 53
 63e:	84 60       	ori	r24, 0x04	; 4
 640:	85 bf       	out	0x35, r24	; 53
 642:	14 c0       	rjmp	.+40     	; 0x66c <EXT_InterruptPirefralEnable+0x5e>
 644:	85 b7       	in	r24, 0x35	; 53
 646:	88 60       	ori	r24, 0x08	; 8
 648:	85 bf       	out	0x35, r24	; 53
 64a:	85 b7       	in	r24, 0x35	; 53
 64c:	8b 7f       	andi	r24, 0xFB	; 251
 64e:	85 bf       	out	0x35, r24	; 53
 650:	0d c0       	rjmp	.+26     	; 0x66c <EXT_InterruptPirefralEnable+0x5e>
 652:	85 b7       	in	r24, 0x35	; 53
 654:	88 60       	ori	r24, 0x08	; 8
 656:	85 bf       	out	0x35, r24	; 53
 658:	85 b7       	in	r24, 0x35	; 53
 65a:	84 60       	ori	r24, 0x04	; 4
 65c:	85 bf       	out	0x35, r24	; 53
 65e:	06 c0       	rjmp	.+12     	; 0x66c <EXT_InterruptPirefralEnable+0x5e>
 660:	85 b7       	in	r24, 0x35	; 53
 662:	87 7f       	andi	r24, 0xF7	; 247
 664:	85 bf       	out	0x35, r24	; 53
 666:	85 b7       	in	r24, 0x35	; 53
 668:	8b 7f       	andi	r24, 0xFB	; 251
 66a:	85 bf       	out	0x35, r24	; 53
 66c:	8b b7       	in	r24, 0x3b	; 59
 66e:	80 64       	ori	r24, 0x40	; 64
 670:	8b bf       	out	0x3b, r24	; 59
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	08 95       	ret
 676:	61 30       	cpi	r22, 0x01	; 1
 678:	61 f0       	breq	.+24     	; 0x692 <EXT_InterruptPirefralEnable+0x84>
 67a:	90 f0       	brcs	.+36     	; 0x6a0 <EXT_InterruptPirefralEnable+0x92>
 67c:	62 30       	cpi	r22, 0x02	; 2
 67e:	b9 f0       	breq	.+46     	; 0x6ae <EXT_InterruptPirefralEnable+0xa0>
 680:	63 30       	cpi	r22, 0x03	; 3
 682:	d9 f4       	brne	.+54     	; 0x6ba <EXT_InterruptPirefralEnable+0xac>
 684:	85 b7       	in	r24, 0x35	; 53
 686:	87 7f       	andi	r24, 0xF7	; 247
 688:	85 bf       	out	0x35, r24	; 53
 68a:	85 b7       	in	r24, 0x35	; 53
 68c:	84 60       	ori	r24, 0x04	; 4
 68e:	85 bf       	out	0x35, r24	; 53
 690:	14 c0       	rjmp	.+40     	; 0x6ba <EXT_InterruptPirefralEnable+0xac>
 692:	85 b7       	in	r24, 0x35	; 53
 694:	88 60       	ori	r24, 0x08	; 8
 696:	85 bf       	out	0x35, r24	; 53
 698:	85 b7       	in	r24, 0x35	; 53
 69a:	8b 7f       	andi	r24, 0xFB	; 251
 69c:	85 bf       	out	0x35, r24	; 53
 69e:	0d c0       	rjmp	.+26     	; 0x6ba <EXT_InterruptPirefralEnable+0xac>
 6a0:	85 b7       	in	r24, 0x35	; 53
 6a2:	88 60       	ori	r24, 0x08	; 8
 6a4:	85 bf       	out	0x35, r24	; 53
 6a6:	85 b7       	in	r24, 0x35	; 53
 6a8:	84 60       	ori	r24, 0x04	; 4
 6aa:	85 bf       	out	0x35, r24	; 53
 6ac:	06 c0       	rjmp	.+12     	; 0x6ba <EXT_InterruptPirefralEnable+0xac>
 6ae:	85 b7       	in	r24, 0x35	; 53
 6b0:	87 7f       	andi	r24, 0xF7	; 247
 6b2:	85 bf       	out	0x35, r24	; 53
 6b4:	85 b7       	in	r24, 0x35	; 53
 6b6:	8b 7f       	andi	r24, 0xFB	; 251
 6b8:	85 bf       	out	0x35, r24	; 53
 6ba:	8b b7       	in	r24, 0x3b	; 59
 6bc:	80 68       	ori	r24, 0x80	; 128
 6be:	8b bf       	out	0x3b, r24	; 59
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	08 95       	ret
 6c4:	66 23       	and	r22, r22
 6c6:	31 f0       	breq	.+12     	; 0x6d4 <EXT_InterruptPirefralEnable+0xc6>
 6c8:	61 30       	cpi	r22, 0x01	; 1
 6ca:	39 f4       	brne	.+14     	; 0x6da <EXT_InterruptPirefralEnable+0xcc>
 6cc:	84 b7       	in	r24, 0x34	; 52
 6ce:	8f 7b       	andi	r24, 0xBF	; 191
 6d0:	84 bf       	out	0x34, r24	; 52
 6d2:	03 c0       	rjmp	.+6      	; 0x6da <EXT_InterruptPirefralEnable+0xcc>
 6d4:	84 b7       	in	r24, 0x34	; 52
 6d6:	80 64       	ori	r24, 0x40	; 64
 6d8:	84 bf       	out	0x34, r24	; 52
 6da:	8b b7       	in	r24, 0x3b	; 59
 6dc:	80 62       	ori	r24, 0x20	; 32
 6de:	8b bf       	out	0x3b, r24	; 59
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	08 95       	ret
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	08 95       	ret
 6e8:	82 e0       	ldi	r24, 0x02	; 2
 6ea:	08 95       	ret
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	08 95       	ret

000006f0 <EXTINT_voidSetCallBack>:

void EXTINT_voidSetCallBack(void(*Copy_pfun)(void),u8 Copy_u8ExtIntIndex)
{
	EXTINT_SetCallBackExtInt[Copy_u8ExtIntIndex] = Copy_pfun;
 6f0:	e6 2f       	mov	r30, r22
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	ee 0f       	add	r30, r30
 6f6:	ff 1f       	adc	r31, r31
 6f8:	e0 57       	subi	r30, 0x70	; 112
 6fa:	ff 4f       	sbci	r31, 0xFF	; 255
 6fc:	91 83       	std	Z+1, r25	; 0x01
 6fe:	80 83       	st	Z, r24
 700:	08 95       	ret

00000702 <__vector_1>:
}

void __vector_1(void)  __attribute__((signal));
void __vector_1(void){
 702:	1f 92       	push	r1
 704:	0f 92       	push	r0
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	0f 92       	push	r0
 70a:	11 24       	eor	r1, r1
 70c:	2f 93       	push	r18
 70e:	3f 93       	push	r19
 710:	4f 93       	push	r20
 712:	5f 93       	push	r21
 714:	6f 93       	push	r22
 716:	7f 93       	push	r23
 718:	8f 93       	push	r24
 71a:	9f 93       	push	r25
 71c:	af 93       	push	r26
 71e:	bf 93       	push	r27
 720:	ef 93       	push	r30
 722:	ff 93       	push	r31
    if(EXTINT_SetCallBackExtInt[EXT_0]!= NULL)
 724:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <EXTINT_SetCallBackExtInt>
 728:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <EXTINT_SetCallBackExtInt+0x1>
 72c:	30 97       	sbiw	r30, 0x00	; 0
 72e:	09 f0       	breq	.+2      	; 0x732 <__vector_1+0x30>
    {
        EXTINT_SetCallBackExtInt[EXT_0]();
 730:	09 95       	icall
    }
    else
    {
        /*DO NOTHING*/
    }
}
 732:	ff 91       	pop	r31
 734:	ef 91       	pop	r30
 736:	bf 91       	pop	r27
 738:	af 91       	pop	r26
 73a:	9f 91       	pop	r25
 73c:	8f 91       	pop	r24
 73e:	7f 91       	pop	r23
 740:	6f 91       	pop	r22
 742:	5f 91       	pop	r21
 744:	4f 91       	pop	r20
 746:	3f 91       	pop	r19
 748:	2f 91       	pop	r18
 74a:	0f 90       	pop	r0
 74c:	0f be       	out	0x3f, r0	; 63
 74e:	0f 90       	pop	r0
 750:	1f 90       	pop	r1
 752:	18 95       	reti

00000754 <__vector_2>:

void __vector_2(void)  __attribute__((signal));
void __vector_2(void){
 754:	1f 92       	push	r1
 756:	0f 92       	push	r0
 758:	0f b6       	in	r0, 0x3f	; 63
 75a:	0f 92       	push	r0
 75c:	11 24       	eor	r1, r1
 75e:	2f 93       	push	r18
 760:	3f 93       	push	r19
 762:	4f 93       	push	r20
 764:	5f 93       	push	r21
 766:	6f 93       	push	r22
 768:	7f 93       	push	r23
 76a:	8f 93       	push	r24
 76c:	9f 93       	push	r25
 76e:	af 93       	push	r26
 770:	bf 93       	push	r27
 772:	ef 93       	push	r30
 774:	ff 93       	push	r31
    if(EXTINT_SetCallBackExtInt[EXT_1]!= NULL)
 776:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <EXTINT_SetCallBackExtInt+0x2>
 77a:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <EXTINT_SetCallBackExtInt+0x3>
 77e:	30 97       	sbiw	r30, 0x00	; 0
 780:	09 f0       	breq	.+2      	; 0x784 <__vector_2+0x30>
    {
        EXTINT_SetCallBackExtInt[EXT_1]();
 782:	09 95       	icall
    }
    else
    {
        /*DO NOTHING*/
    }
}
 784:	ff 91       	pop	r31
 786:	ef 91       	pop	r30
 788:	bf 91       	pop	r27
 78a:	af 91       	pop	r26
 78c:	9f 91       	pop	r25
 78e:	8f 91       	pop	r24
 790:	7f 91       	pop	r23
 792:	6f 91       	pop	r22
 794:	5f 91       	pop	r21
 796:	4f 91       	pop	r20
 798:	3f 91       	pop	r19
 79a:	2f 91       	pop	r18
 79c:	0f 90       	pop	r0
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	0f 90       	pop	r0
 7a2:	1f 90       	pop	r1
 7a4:	18 95       	reti

000007a6 <__vector_3>:

void __vector_3(void)  __attribute__((signal));
void __vector_3(void){
 7a6:	1f 92       	push	r1
 7a8:	0f 92       	push	r0
 7aa:	0f b6       	in	r0, 0x3f	; 63
 7ac:	0f 92       	push	r0
 7ae:	11 24       	eor	r1, r1
 7b0:	2f 93       	push	r18
 7b2:	3f 93       	push	r19
 7b4:	4f 93       	push	r20
 7b6:	5f 93       	push	r21
 7b8:	6f 93       	push	r22
 7ba:	7f 93       	push	r23
 7bc:	8f 93       	push	r24
 7be:	9f 93       	push	r25
 7c0:	af 93       	push	r26
 7c2:	bf 93       	push	r27
 7c4:	ef 93       	push	r30
 7c6:	ff 93       	push	r31
    if(EXTINT_SetCallBackExtInt[EXT_2]!= NULL)
 7c8:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <EXTINT_SetCallBackExtInt+0x4>
 7cc:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <EXTINT_SetCallBackExtInt+0x5>
 7d0:	30 97       	sbiw	r30, 0x00	; 0
 7d2:	09 f0       	breq	.+2      	; 0x7d6 <__vector_3+0x30>
    {
        EXTINT_SetCallBackExtInt[EXT_2]();
 7d4:	09 95       	icall
    }
    else
    {
        /*DO NOTHING*/
    }    
 7d6:	ff 91       	pop	r31
 7d8:	ef 91       	pop	r30
 7da:	bf 91       	pop	r27
 7dc:	af 91       	pop	r26
 7de:	9f 91       	pop	r25
 7e0:	8f 91       	pop	r24
 7e2:	7f 91       	pop	r23
 7e4:	6f 91       	pop	r22
 7e6:	5f 91       	pop	r21
 7e8:	4f 91       	pop	r20
 7ea:	3f 91       	pop	r19
 7ec:	2f 91       	pop	r18
 7ee:	0f 90       	pop	r0
 7f0:	0f be       	out	0x3f, r0	; 63
 7f2:	0f 90       	pop	r0
 7f4:	1f 90       	pop	r1
 7f6:	18 95       	reti

000007f8 <GIE_globalInterruptEnable>:
 */
#include "Gie.h"
#include "Gie_prv.h"

void GIE_globalInterruptEnable(void){
    SET_BIT(SREG,SREG_globalInterruptEnable);  
 7f8:	8f b7       	in	r24, 0x3f	; 63
 7fa:	80 68       	ori	r24, 0x80	; 128
 7fc:	8f bf       	out	0x3f, r24	; 63
 7fe:	08 95       	ret

00000800 <PORT_VoidInit>:
	#define PORT_INPUT_FLOATING 0

	#undef PORT_INPUT_PULLUP
	#define PORT_INPUT_PULLUP 0
   
	DDRA_Reg = CONC(PORT_PA7_INTIAL_STATE,PORT_PA6_INTIAL_STATE,PORT_PA5_INTIAL_STATE,PORT_PA4_INTIAL_STATE,PORT_PA3_INTIAL_STATE,PORT_PA2_INTIAL_STATE,PORT_PA1_INTIAL_STATE,PORT_PA0_INTIAL_STATE);
 800:	8f ef       	ldi	r24, 0xFF	; 255
 802:	8a bb       	out	0x1a, r24	; 26
    
	DDRB_Reg = CONC(PORT_PB7_INTIAL_STATE,PORT_PB6_INTIAL_STATE,PORT_PB5_INTIAL_STATE,PORT_PB4_INTIAL_STATE,PORT_PB3_INTIAL_STATE,PORT_PB2_INTIAL_STATE,PORT_PB1_INTIAL_STATE,PORT_PB0_INTIAL_STATE);
 804:	87 bb       	out	0x17, r24	; 23
   
	DDRC_Reg = CONC(PORT_PC7_INTIAL_STATE,PORT_PC6_INTIAL_STATE,PORT_PC5_INTIAL_STATE,PORT_PC4_INTIAL_STATE,PORT_PC3_INTIAL_STATE,PORT_PC2_INTIAL_STATE,PORT_PC1_INTIAL_STATE,PORT_PC0_INTIAL_STATE);
 806:	84 bb       	out	0x14, r24	; 20
                  
	DDRD_Reg = CONC(PORT_PD7_INTIAL_STATE,PORT_PD6_INTIAL_STATE,PORT_PD5_INTIAL_STATE,PORT_PD4_INTIAL_STATE,PORT_PD3_INTIAL_STATE,PORT_PD2_INTIAL_STATE,PORT_PD1_INTIAL_STATE,PORT_PD0_INTIAL_STATE);	
 808:	8b e0       	ldi	r24, 0x0B	; 11
 80a:	81 bb       	out	0x11, r24	; 17

	#undef PORT_INPUT_PULLUP
	#define PORT_INPUT_PULLUP 1											 


	PORTA_Reg = CONC(PORT_PA7_INTIAL_STATE,PORT_PA6_INTIAL_STATE,PORT_PA5_INTIAL_STATE,PORT_PA4_INTIAL_STATE,PORT_PA3_INTIAL_STATE,PORT_PA2_INTIAL_STATE,PORT_PA1_INTIAL_STATE,PORT_PA0_INTIAL_STATE);
 80c:	1b ba       	out	0x1b, r1	; 27
	
    PORTB_Reg = CONC(PORT_PB7_INTIAL_STATE,PORT_PB6_INTIAL_STATE,PORT_PB5_INTIAL_STATE,PORT_PB4_INTIAL_STATE,PORT_PB3_INTIAL_STATE,PORT_PB2_INTIAL_STATE,PORT_PB1_INTIAL_STATE,PORT_PB0_INTIAL_STATE);
 80e:	18 ba       	out	0x18, r1	; 24

	PORTC_Reg = CONC(PORT_PC7_INTIAL_STATE,PORT_PC6_INTIAL_STATE,PORT_PC5_INTIAL_STATE,PORT_PC4_INTIAL_STATE,PORT_PC3_INTIAL_STATE,PORT_PC2_INTIAL_STATE,PORT_PC1_INTIAL_STATE,PORT_PC0_INTIAL_STATE);  
 810:	15 ba       	out	0x15, r1	; 21

 	PORTD_Reg = CONC(PORT_PD7_INTIAL_STATE,PORT_PD6_INTIAL_STATE,PORT_PD5_INTIAL_STATE,PORT_PD4_INTIAL_STATE,PORT_PD3_INTIAL_STATE,PORT_PD2_INTIAL_STATE,PORT_PD1_INTIAL_STATE,PORT_PD0_INTIAL_STATE);  
 812:	80 ef       	ldi	r24, 0xF0	; 240
 814:	82 bb       	out	0x12, r24	; 18
 816:	08 95       	ret

00000818 <Timer_voidInit>:
	}
	else{
		*Copy_pu8DutyCycle =(u8)(((u32)TIMER_u16OnPeriod * 100) / (TIMER_u16OnPeriod + TIMER_u16OffPeriod));
	}
	return Local_u8ReturnState;
}
 818:	89 b7       	in	r24, 0x39	; 57
 81a:	81 60       	ori	r24, 0x01	; 1
 81c:	89 bf       	out	0x39, r24	; 57
 81e:	89 b7       	in	r24, 0x39	; 57
 820:	8d 7f       	andi	r24, 0xFD	; 253
 822:	89 bf       	out	0x39, r24	; 57
 824:	12 be       	out	0x32, r1	; 50
 826:	83 b7       	in	r24, 0x33	; 51
 828:	8f 7b       	andi	r24, 0xBF	; 191
 82a:	83 bf       	out	0x33, r24	; 51
 82c:	83 b7       	in	r24, 0x33	; 51
 82e:	87 7f       	andi	r24, 0xF7	; 247
 830:	83 bf       	out	0x33, r24	; 51
 832:	83 b7       	in	r24, 0x33	; 51
 834:	80 62       	ori	r24, 0x20	; 32
 836:	83 bf       	out	0x33, r24	; 51
 838:	83 b7       	in	r24, 0x33	; 51
 83a:	8f 7e       	andi	r24, 0xEF	; 239
 83c:	83 bf       	out	0x33, r24	; 51
 83e:	83 b7       	in	r24, 0x33	; 51
 840:	81 60       	ori	r24, 0x01	; 1
 842:	83 bf       	out	0x33, r24	; 51
 844:	08 95       	ret

00000846 <Timer_voidGetTimer1CounterValue>:
void Timer_voidGetTimer1CounterValue(pu16  Copy_u16CounterValue)
{
	*Copy_u16CounterValue = Global_u8Counter;
 846:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <Global_u8Counter>
 84a:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <Global_u8Counter+0x1>
 84e:	fc 01       	movw	r30, r24
 850:	31 83       	std	Z+1, r19	; 0x01
 852:	20 83       	st	Z, r18
 854:	08 95       	ret

00000856 <__vector_11>:


/* ISR Function for Timer0 OVF */
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
 856:	1f 92       	push	r1
 858:	0f 92       	push	r0
 85a:	0f b6       	in	r0, 0x3f	; 63
 85c:	0f 92       	push	r0
 85e:	11 24       	eor	r1, r1
 860:	8f 93       	push	r24
 862:	9f 93       	push	r25
	
	Global_u8Counter++;
 864:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <Global_u8Counter>
 868:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <Global_u8Counter+0x1>
 86c:	01 96       	adiw	r24, 0x01	; 1
 86e:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <Global_u8Counter+0x1>
 872:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <Global_u8Counter>


}
 876:	9f 91       	pop	r25
 878:	8f 91       	pop	r24
 87a:	0f 90       	pop	r0
 87c:	0f be       	out	0x3f, r0	; 63
 87e:	0f 90       	pop	r0
 880:	1f 90       	pop	r1
 882:	18 95       	reti

00000884 <__cmpsf2>:
 884:	0e 94 b3 04 	call	0x966	; 0x966 <__fp_cmp>
 888:	08 f4       	brcc	.+2      	; 0x88c <__cmpsf2+0x8>
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	08 95       	ret

0000088e <__fixunssfsi>:
 88e:	0e 94 df 04 	call	0x9be	; 0x9be <__fp_splitA>
 892:	88 f0       	brcs	.+34     	; 0x8b6 <__fixunssfsi+0x28>
 894:	9f 57       	subi	r25, 0x7F	; 127
 896:	98 f0       	brcs	.+38     	; 0x8be <__fixunssfsi+0x30>
 898:	b9 2f       	mov	r27, r25
 89a:	99 27       	eor	r25, r25
 89c:	b7 51       	subi	r27, 0x17	; 23
 89e:	b0 f0       	brcs	.+44     	; 0x8cc <__fixunssfsi+0x3e>
 8a0:	e1 f0       	breq	.+56     	; 0x8da <__fixunssfsi+0x4c>
 8a2:	66 0f       	add	r22, r22
 8a4:	77 1f       	adc	r23, r23
 8a6:	88 1f       	adc	r24, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	1a f0       	brmi	.+6      	; 0x8b2 <__fixunssfsi+0x24>
 8ac:	ba 95       	dec	r27
 8ae:	c9 f7       	brne	.-14     	; 0x8a2 <__fixunssfsi+0x14>
 8b0:	14 c0       	rjmp	.+40     	; 0x8da <__fixunssfsi+0x4c>
 8b2:	b1 30       	cpi	r27, 0x01	; 1
 8b4:	91 f0       	breq	.+36     	; 0x8da <__fixunssfsi+0x4c>
 8b6:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fp_zero>
 8ba:	b1 e0       	ldi	r27, 0x01	; 1
 8bc:	08 95       	ret
 8be:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__fp_zero>
 8c2:	67 2f       	mov	r22, r23
 8c4:	78 2f       	mov	r23, r24
 8c6:	88 27       	eor	r24, r24
 8c8:	b8 5f       	subi	r27, 0xF8	; 248
 8ca:	39 f0       	breq	.+14     	; 0x8da <__fixunssfsi+0x4c>
 8cc:	b9 3f       	cpi	r27, 0xF9	; 249
 8ce:	cc f3       	brlt	.-14     	; 0x8c2 <__fixunssfsi+0x34>
 8d0:	86 95       	lsr	r24
 8d2:	77 95       	ror	r23
 8d4:	67 95       	ror	r22
 8d6:	b3 95       	inc	r27
 8d8:	d9 f7       	brne	.-10     	; 0x8d0 <__fixunssfsi+0x42>
 8da:	3e f4       	brtc	.+14     	; 0x8ea <__fixunssfsi+0x5c>
 8dc:	90 95       	com	r25
 8de:	80 95       	com	r24
 8e0:	70 95       	com	r23
 8e2:	61 95       	neg	r22
 8e4:	7f 4f       	sbci	r23, 0xFF	; 255
 8e6:	8f 4f       	sbci	r24, 0xFF	; 255
 8e8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ea:	08 95       	ret

000008ec <__floatunsisf>:
 8ec:	e8 94       	clt
 8ee:	09 c0       	rjmp	.+18     	; 0x902 <__floatsisf+0x12>

000008f0 <__floatsisf>:
 8f0:	97 fb       	bst	r25, 7
 8f2:	3e f4       	brtc	.+14     	; 0x902 <__floatsisf+0x12>
 8f4:	90 95       	com	r25
 8f6:	80 95       	com	r24
 8f8:	70 95       	com	r23
 8fa:	61 95       	neg	r22
 8fc:	7f 4f       	sbci	r23, 0xFF	; 255
 8fe:	8f 4f       	sbci	r24, 0xFF	; 255
 900:	9f 4f       	sbci	r25, 0xFF	; 255
 902:	99 23       	and	r25, r25
 904:	a9 f0       	breq	.+42     	; 0x930 <__floatsisf+0x40>
 906:	f9 2f       	mov	r31, r25
 908:	96 e9       	ldi	r25, 0x96	; 150
 90a:	bb 27       	eor	r27, r27
 90c:	93 95       	inc	r25
 90e:	f6 95       	lsr	r31
 910:	87 95       	ror	r24
 912:	77 95       	ror	r23
 914:	67 95       	ror	r22
 916:	b7 95       	ror	r27
 918:	f1 11       	cpse	r31, r1
 91a:	f8 cf       	rjmp	.-16     	; 0x90c <__floatsisf+0x1c>
 91c:	fa f4       	brpl	.+62     	; 0x95c <__floatsisf+0x6c>
 91e:	bb 0f       	add	r27, r27
 920:	11 f4       	brne	.+4      	; 0x926 <__floatsisf+0x36>
 922:	60 ff       	sbrs	r22, 0
 924:	1b c0       	rjmp	.+54     	; 0x95c <__floatsisf+0x6c>
 926:	6f 5f       	subi	r22, 0xFF	; 255
 928:	7f 4f       	sbci	r23, 0xFF	; 255
 92a:	8f 4f       	sbci	r24, 0xFF	; 255
 92c:	9f 4f       	sbci	r25, 0xFF	; 255
 92e:	16 c0       	rjmp	.+44     	; 0x95c <__floatsisf+0x6c>
 930:	88 23       	and	r24, r24
 932:	11 f0       	breq	.+4      	; 0x938 <__floatsisf+0x48>
 934:	96 e9       	ldi	r25, 0x96	; 150
 936:	11 c0       	rjmp	.+34     	; 0x95a <__floatsisf+0x6a>
 938:	77 23       	and	r23, r23
 93a:	21 f0       	breq	.+8      	; 0x944 <__floatsisf+0x54>
 93c:	9e e8       	ldi	r25, 0x8E	; 142
 93e:	87 2f       	mov	r24, r23
 940:	76 2f       	mov	r23, r22
 942:	05 c0       	rjmp	.+10     	; 0x94e <__floatsisf+0x5e>
 944:	66 23       	and	r22, r22
 946:	71 f0       	breq	.+28     	; 0x964 <__floatsisf+0x74>
 948:	96 e8       	ldi	r25, 0x86	; 134
 94a:	86 2f       	mov	r24, r22
 94c:	70 e0       	ldi	r23, 0x00	; 0
 94e:	60 e0       	ldi	r22, 0x00	; 0
 950:	2a f0       	brmi	.+10     	; 0x95c <__floatsisf+0x6c>
 952:	9a 95       	dec	r25
 954:	66 0f       	add	r22, r22
 956:	77 1f       	adc	r23, r23
 958:	88 1f       	adc	r24, r24
 95a:	da f7       	brpl	.-10     	; 0x952 <__floatsisf+0x62>
 95c:	88 0f       	add	r24, r24
 95e:	96 95       	lsr	r25
 960:	87 95       	ror	r24
 962:	97 f9       	bld	r25, 7
 964:	08 95       	ret

00000966 <__fp_cmp>:
 966:	99 0f       	add	r25, r25
 968:	00 08       	sbc	r0, r0
 96a:	55 0f       	add	r21, r21
 96c:	aa 0b       	sbc	r26, r26
 96e:	e0 e8       	ldi	r30, 0x80	; 128
 970:	fe ef       	ldi	r31, 0xFE	; 254
 972:	16 16       	cp	r1, r22
 974:	17 06       	cpc	r1, r23
 976:	e8 07       	cpc	r30, r24
 978:	f9 07       	cpc	r31, r25
 97a:	c0 f0       	brcs	.+48     	; 0x9ac <__fp_cmp+0x46>
 97c:	12 16       	cp	r1, r18
 97e:	13 06       	cpc	r1, r19
 980:	e4 07       	cpc	r30, r20
 982:	f5 07       	cpc	r31, r21
 984:	98 f0       	brcs	.+38     	; 0x9ac <__fp_cmp+0x46>
 986:	62 1b       	sub	r22, r18
 988:	73 0b       	sbc	r23, r19
 98a:	84 0b       	sbc	r24, r20
 98c:	95 0b       	sbc	r25, r21
 98e:	39 f4       	brne	.+14     	; 0x99e <__fp_cmp+0x38>
 990:	0a 26       	eor	r0, r26
 992:	61 f0       	breq	.+24     	; 0x9ac <__fp_cmp+0x46>
 994:	23 2b       	or	r18, r19
 996:	24 2b       	or	r18, r20
 998:	25 2b       	or	r18, r21
 99a:	21 f4       	brne	.+8      	; 0x9a4 <__fp_cmp+0x3e>
 99c:	08 95       	ret
 99e:	0a 26       	eor	r0, r26
 9a0:	09 f4       	brne	.+2      	; 0x9a4 <__fp_cmp+0x3e>
 9a2:	a1 40       	sbci	r26, 0x01	; 1
 9a4:	a6 95       	lsr	r26
 9a6:	8f ef       	ldi	r24, 0xFF	; 255
 9a8:	81 1d       	adc	r24, r1
 9aa:	81 1d       	adc	r24, r1
 9ac:	08 95       	ret

000009ae <__fp_split3>:
 9ae:	57 fd       	sbrc	r21, 7
 9b0:	90 58       	subi	r25, 0x80	; 128
 9b2:	44 0f       	add	r20, r20
 9b4:	55 1f       	adc	r21, r21
 9b6:	59 f0       	breq	.+22     	; 0x9ce <__fp_splitA+0x10>
 9b8:	5f 3f       	cpi	r21, 0xFF	; 255
 9ba:	71 f0       	breq	.+28     	; 0x9d8 <__fp_splitA+0x1a>
 9bc:	47 95       	ror	r20

000009be <__fp_splitA>:
 9be:	88 0f       	add	r24, r24
 9c0:	97 fb       	bst	r25, 7
 9c2:	99 1f       	adc	r25, r25
 9c4:	61 f0       	breq	.+24     	; 0x9de <__fp_splitA+0x20>
 9c6:	9f 3f       	cpi	r25, 0xFF	; 255
 9c8:	79 f0       	breq	.+30     	; 0x9e8 <__fp_splitA+0x2a>
 9ca:	87 95       	ror	r24
 9cc:	08 95       	ret
 9ce:	12 16       	cp	r1, r18
 9d0:	13 06       	cpc	r1, r19
 9d2:	14 06       	cpc	r1, r20
 9d4:	55 1f       	adc	r21, r21
 9d6:	f2 cf       	rjmp	.-28     	; 0x9bc <__fp_split3+0xe>
 9d8:	46 95       	lsr	r20
 9da:	f1 df       	rcall	.-30     	; 0x9be <__fp_splitA>
 9dc:	08 c0       	rjmp	.+16     	; 0x9ee <__fp_splitA+0x30>
 9de:	16 16       	cp	r1, r22
 9e0:	17 06       	cpc	r1, r23
 9e2:	18 06       	cpc	r1, r24
 9e4:	99 1f       	adc	r25, r25
 9e6:	f1 cf       	rjmp	.-30     	; 0x9ca <__fp_splitA+0xc>
 9e8:	86 95       	lsr	r24
 9ea:	71 05       	cpc	r23, r1
 9ec:	61 05       	cpc	r22, r1
 9ee:	08 94       	sec
 9f0:	08 95       	ret

000009f2 <__fp_zero>:
 9f2:	e8 94       	clt

000009f4 <__fp_szero>:
 9f4:	bb 27       	eor	r27, r27
 9f6:	66 27       	eor	r22, r22
 9f8:	77 27       	eor	r23, r23
 9fa:	cb 01       	movw	r24, r22
 9fc:	97 f9       	bld	r25, 7
 9fe:	08 95       	ret

00000a00 <__mulsf3>:
 a00:	0e 94 13 05 	call	0xa26	; 0xa26 <__mulsf3x>
 a04:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_round>
 a08:	0e 94 76 05 	call	0xaec	; 0xaec <__fp_pscA>
 a0c:	38 f0       	brcs	.+14     	; 0xa1c <__mulsf3+0x1c>
 a0e:	0e 94 7d 05 	call	0xafa	; 0xafa <__fp_pscB>
 a12:	20 f0       	brcs	.+8      	; 0xa1c <__mulsf3+0x1c>
 a14:	95 23       	and	r25, r21
 a16:	11 f0       	breq	.+4      	; 0xa1c <__mulsf3+0x1c>
 a18:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_inf>
 a1c:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_nan>
 a20:	11 24       	eor	r1, r1
 a22:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__fp_szero>

00000a26 <__mulsf3x>:
 a26:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__fp_split3>
 a2a:	70 f3       	brcs	.-36     	; 0xa08 <__mulsf3+0x8>

00000a2c <__mulsf3_pse>:
 a2c:	95 9f       	mul	r25, r21
 a2e:	c1 f3       	breq	.-16     	; 0xa20 <__mulsf3+0x20>
 a30:	95 0f       	add	r25, r21
 a32:	50 e0       	ldi	r21, 0x00	; 0
 a34:	55 1f       	adc	r21, r21
 a36:	62 9f       	mul	r22, r18
 a38:	f0 01       	movw	r30, r0
 a3a:	72 9f       	mul	r23, r18
 a3c:	bb 27       	eor	r27, r27
 a3e:	f0 0d       	add	r31, r0
 a40:	b1 1d       	adc	r27, r1
 a42:	63 9f       	mul	r22, r19
 a44:	aa 27       	eor	r26, r26
 a46:	f0 0d       	add	r31, r0
 a48:	b1 1d       	adc	r27, r1
 a4a:	aa 1f       	adc	r26, r26
 a4c:	64 9f       	mul	r22, r20
 a4e:	66 27       	eor	r22, r22
 a50:	b0 0d       	add	r27, r0
 a52:	a1 1d       	adc	r26, r1
 a54:	66 1f       	adc	r22, r22
 a56:	82 9f       	mul	r24, r18
 a58:	22 27       	eor	r18, r18
 a5a:	b0 0d       	add	r27, r0
 a5c:	a1 1d       	adc	r26, r1
 a5e:	62 1f       	adc	r22, r18
 a60:	73 9f       	mul	r23, r19
 a62:	b0 0d       	add	r27, r0
 a64:	a1 1d       	adc	r26, r1
 a66:	62 1f       	adc	r22, r18
 a68:	83 9f       	mul	r24, r19
 a6a:	a0 0d       	add	r26, r0
 a6c:	61 1d       	adc	r22, r1
 a6e:	22 1f       	adc	r18, r18
 a70:	74 9f       	mul	r23, r20
 a72:	33 27       	eor	r19, r19
 a74:	a0 0d       	add	r26, r0
 a76:	61 1d       	adc	r22, r1
 a78:	23 1f       	adc	r18, r19
 a7a:	84 9f       	mul	r24, r20
 a7c:	60 0d       	add	r22, r0
 a7e:	21 1d       	adc	r18, r1
 a80:	82 2f       	mov	r24, r18
 a82:	76 2f       	mov	r23, r22
 a84:	6a 2f       	mov	r22, r26
 a86:	11 24       	eor	r1, r1
 a88:	9f 57       	subi	r25, 0x7F	; 127
 a8a:	50 40       	sbci	r21, 0x00	; 0
 a8c:	9a f0       	brmi	.+38     	; 0xab4 <__mulsf3_pse+0x88>
 a8e:	f1 f0       	breq	.+60     	; 0xacc <__mulsf3_pse+0xa0>
 a90:	88 23       	and	r24, r24
 a92:	4a f0       	brmi	.+18     	; 0xaa6 <__mulsf3_pse+0x7a>
 a94:	ee 0f       	add	r30, r30
 a96:	ff 1f       	adc	r31, r31
 a98:	bb 1f       	adc	r27, r27
 a9a:	66 1f       	adc	r22, r22
 a9c:	77 1f       	adc	r23, r23
 a9e:	88 1f       	adc	r24, r24
 aa0:	91 50       	subi	r25, 0x01	; 1
 aa2:	50 40       	sbci	r21, 0x00	; 0
 aa4:	a9 f7       	brne	.-22     	; 0xa90 <__mulsf3_pse+0x64>
 aa6:	9e 3f       	cpi	r25, 0xFE	; 254
 aa8:	51 05       	cpc	r21, r1
 aaa:	80 f0       	brcs	.+32     	; 0xacc <__mulsf3_pse+0xa0>
 aac:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_inf>
 ab0:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__fp_szero>
 ab4:	5f 3f       	cpi	r21, 0xFF	; 255
 ab6:	e4 f3       	brlt	.-8      	; 0xab0 <__mulsf3_pse+0x84>
 ab8:	98 3e       	cpi	r25, 0xE8	; 232
 aba:	d4 f3       	brlt	.-12     	; 0xab0 <__mulsf3_pse+0x84>
 abc:	86 95       	lsr	r24
 abe:	77 95       	ror	r23
 ac0:	67 95       	ror	r22
 ac2:	b7 95       	ror	r27
 ac4:	f7 95       	ror	r31
 ac6:	e7 95       	ror	r30
 ac8:	9f 5f       	subi	r25, 0xFF	; 255
 aca:	c1 f7       	brne	.-16     	; 0xabc <__mulsf3_pse+0x90>
 acc:	fe 2b       	or	r31, r30
 ace:	88 0f       	add	r24, r24
 ad0:	91 1d       	adc	r25, r1
 ad2:	96 95       	lsr	r25
 ad4:	87 95       	ror	r24
 ad6:	97 f9       	bld	r25, 7
 ad8:	08 95       	ret

00000ada <__fp_inf>:
 ada:	97 f9       	bld	r25, 7
 adc:	9f 67       	ori	r25, 0x7F	; 127
 ade:	80 e8       	ldi	r24, 0x80	; 128
 ae0:	70 e0       	ldi	r23, 0x00	; 0
 ae2:	60 e0       	ldi	r22, 0x00	; 0
 ae4:	08 95       	ret

00000ae6 <__fp_nan>:
 ae6:	9f ef       	ldi	r25, 0xFF	; 255
 ae8:	80 ec       	ldi	r24, 0xC0	; 192
 aea:	08 95       	ret

00000aec <__fp_pscA>:
 aec:	00 24       	eor	r0, r0
 aee:	0a 94       	dec	r0
 af0:	16 16       	cp	r1, r22
 af2:	17 06       	cpc	r1, r23
 af4:	18 06       	cpc	r1, r24
 af6:	09 06       	cpc	r0, r25
 af8:	08 95       	ret

00000afa <__fp_pscB>:
 afa:	00 24       	eor	r0, r0
 afc:	0a 94       	dec	r0
 afe:	12 16       	cp	r1, r18
 b00:	13 06       	cpc	r1, r19
 b02:	14 06       	cpc	r1, r20
 b04:	05 06       	cpc	r0, r21
 b06:	08 95       	ret

00000b08 <__fp_round>:
 b08:	09 2e       	mov	r0, r25
 b0a:	03 94       	inc	r0
 b0c:	00 0c       	add	r0, r0
 b0e:	11 f4       	brne	.+4      	; 0xb14 <__fp_round+0xc>
 b10:	88 23       	and	r24, r24
 b12:	52 f0       	brmi	.+20     	; 0xb28 <__fp_round+0x20>
 b14:	bb 0f       	add	r27, r27
 b16:	40 f4       	brcc	.+16     	; 0xb28 <__fp_round+0x20>
 b18:	bf 2b       	or	r27, r31
 b1a:	11 f4       	brne	.+4      	; 0xb20 <__fp_round+0x18>
 b1c:	60 ff       	sbrs	r22, 0
 b1e:	04 c0       	rjmp	.+8      	; 0xb28 <__fp_round+0x20>
 b20:	6f 5f       	subi	r22, 0xFF	; 255
 b22:	7f 4f       	sbci	r23, 0xFF	; 255
 b24:	8f 4f       	sbci	r24, 0xFF	; 255
 b26:	9f 4f       	sbci	r25, 0xFF	; 255
 b28:	08 95       	ret

00000b2a <__udivmodsi4>:
 b2a:	a1 e2       	ldi	r26, 0x21	; 33
 b2c:	1a 2e       	mov	r1, r26
 b2e:	aa 1b       	sub	r26, r26
 b30:	bb 1b       	sub	r27, r27
 b32:	fd 01       	movw	r30, r26
 b34:	0d c0       	rjmp	.+26     	; 0xb50 <__udivmodsi4_ep>

00000b36 <__udivmodsi4_loop>:
 b36:	aa 1f       	adc	r26, r26
 b38:	bb 1f       	adc	r27, r27
 b3a:	ee 1f       	adc	r30, r30
 b3c:	ff 1f       	adc	r31, r31
 b3e:	a2 17       	cp	r26, r18
 b40:	b3 07       	cpc	r27, r19
 b42:	e4 07       	cpc	r30, r20
 b44:	f5 07       	cpc	r31, r21
 b46:	20 f0       	brcs	.+8      	; 0xb50 <__udivmodsi4_ep>
 b48:	a2 1b       	sub	r26, r18
 b4a:	b3 0b       	sbc	r27, r19
 b4c:	e4 0b       	sbc	r30, r20
 b4e:	f5 0b       	sbc	r31, r21

00000b50 <__udivmodsi4_ep>:
 b50:	66 1f       	adc	r22, r22
 b52:	77 1f       	adc	r23, r23
 b54:	88 1f       	adc	r24, r24
 b56:	99 1f       	adc	r25, r25
 b58:	1a 94       	dec	r1
 b5a:	69 f7       	brne	.-38     	; 0xb36 <__udivmodsi4_loop>
 b5c:	60 95       	com	r22
 b5e:	70 95       	com	r23
 b60:	80 95       	com	r24
 b62:	90 95       	com	r25
 b64:	9b 01       	movw	r18, r22
 b66:	ac 01       	movw	r20, r24
 b68:	bd 01       	movw	r22, r26
 b6a:	cf 01       	movw	r24, r30
 b6c:	08 95       	ret

00000b6e <__umulhisi3>:
 b6e:	a2 9f       	mul	r26, r18
 b70:	b0 01       	movw	r22, r0
 b72:	b3 9f       	mul	r27, r19
 b74:	c0 01       	movw	r24, r0
 b76:	a3 9f       	mul	r26, r19
 b78:	70 0d       	add	r23, r0
 b7a:	81 1d       	adc	r24, r1
 b7c:	11 24       	eor	r1, r1
 b7e:	91 1d       	adc	r25, r1
 b80:	b2 9f       	mul	r27, r18
 b82:	70 0d       	add	r23, r0
 b84:	81 1d       	adc	r24, r1
 b86:	11 24       	eor	r1, r1
 b88:	91 1d       	adc	r25, r1
 b8a:	08 95       	ret

00000b8c <_exit>:
 b8c:	f8 94       	cli

00000b8e <__stop_program>:
 b8e:	ff cf       	rjmp	.-2      	; 0xb8e <__stop_program>
