
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001340  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00001340  000013d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800084  00800084  000013f8  2**0
                  ALLOC
  3 .stab         00001ba8  00000000  00000000  000013f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00002fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00003528  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011b3  00000000  00000000  00003688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000728  00000000  00000000  0000483b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a16  00000000  00000000  00004f63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  0000597c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069f  00000000  00000000  00005dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cc7  00000000  00000000  0000645f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 45 02 	jmp	0x48a	; 0x48a <__vector_1>
       8:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__vector_2>
       c:	0c 94 97 02 	jmp	0x52e	; 0x52e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a2 05 	call	0xb44	; 0xb44 <main>
      8a:	0c 94 9e 09 	jmp	0x133c	; 0x133c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidInit>:
      92:	37 9a       	sbi	0x06, 7	; 6
      94:	86 b1       	in	r24, 0x06	; 6
      96:	87 60       	ori	r24, 0x07	; 7
      98:	86 b9       	out	0x06, r24	; 6
      9a:	3e 9a       	sbi	0x07, 6	; 7
      9c:	87 b1       	in	r24, 0x07	; 7
      9e:	87 b9       	out	0x07, r24	; 7
      a0:	35 9a       	sbi	0x06, 5	; 6
      a2:	80 b7       	in	r24, 0x30	; 48
      a4:	80 bf       	out	0x30, r24	; 48
      a6:	33 9a       	sbi	0x06, 3	; 6
      a8:	08 95       	ret

000000aa <ADC_read>:
      aa:	fb 01       	movw	r30, r22
      ac:	36 9a       	sbi	0x06, 6	; 6
      ae:	34 9b       	sbis	0x06, 4	; 6
      b0:	fe cf       	rjmp	.-4      	; 0xae <ADC_read+0x4>
      b2:	24 b1       	in	r18, 0x04	; 4
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	31 83       	std	Z+1, r19	; 0x01
      b8:	20 83       	st	Z, r18
      ba:	45 b1       	in	r20, 0x05	; 5
      bc:	94 2f       	mov	r25, r20
      be:	80 e0       	ldi	r24, 0x00	; 0
      c0:	82 0f       	add	r24, r18
      c2:	93 1f       	adc	r25, r19
      c4:	91 83       	std	Z+1, r25	; 0x01
      c6:	80 83       	st	Z, r24
      c8:	80 e0       	ldi	r24, 0x00	; 0
      ca:	08 95       	ret

000000cc <ADC_Disable>:
      cc:	36 98       	cbi	0x06, 6	; 6
      ce:	08 95       	ret

000000d0 <DIO_WritrPin>:


DIO_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
	u8 loc_pin_id =pin_id % 8;
      d0:	98 2f       	mov	r25, r24
      d2:	97 70       	andi	r25, 0x07	; 7

	u8 loc_port_num=pin_id/8;
      d4:	86 95       	lsr	r24
      d6:	86 95       	lsr	r24
      d8:	86 95       	lsr	r24
	switch(loc_port_num)
      da:	81 30       	cpi	r24, 0x01	; 1
      dc:	a9 f1       	breq	.+106    	; 0x148 <DIO_WritrPin+0x78>
      de:	81 30       	cpi	r24, 0x01	; 1
      e0:	38 f0       	brcs	.+14     	; 0xf0 <DIO_WritrPin+0x20>
      e2:	82 30       	cpi	r24, 0x02	; 2
      e4:	09 f4       	brne	.+2      	; 0xe8 <DIO_WritrPin+0x18>
      e6:	5c c0       	rjmp	.+184    	; 0x1a0 <DIO_WritrPin+0xd0>
      e8:	83 30       	cpi	r24, 0x03	; 3
      ea:	09 f0       	breq	.+2      	; 0xee <DIO_WritrPin+0x1e>
      ec:	b0 c0       	rjmp	.+352    	; 0x24e <DIO_WritrPin+0x17e>
      ee:	84 c0       	rjmp	.+264    	; 0x1f8 <DIO_WritrPin+0x128>
	{
		case u8PORTA:
		if (GET_BIT(DDRA,loc_pin_id)==PIN_OUTPUT)
      f0:	2a b3       	in	r18, 0x1a	; 26
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	09 2e       	mov	r0, r25
      f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_WritrPin+0x2c>
      f8:	35 95       	asr	r19
      fa:	27 95       	ror	r18
      fc:	0a 94       	dec	r0
      fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_WritrPin+0x28>
     100:	20 ff       	sbrs	r18, 0
     102:	a7 c0       	rjmp	.+334    	; 0x252 <DIO_WritrPin+0x182>
		{
			switch (level_value)
     104:	66 23       	and	r22, r22
     106:	89 f0       	breq	.+34     	; 0x12a <DIO_WritrPin+0x5a>
     108:	61 30       	cpi	r22, 0x01	; 1
     10a:	09 f0       	breq	.+2      	; 0x10e <DIO_WritrPin+0x3e>
     10c:	a4 c0       	rjmp	.+328    	; 0x256 <DIO_WritrPin+0x186>
			{
				case HIGH_LEVEL:
				SET_BIT(PORTA,loc_pin_id);
     10e:	4b b3       	in	r20, 0x1b	; 27
     110:	21 e0       	ldi	r18, 0x01	; 1
     112:	30 e0       	ldi	r19, 0x00	; 0
     114:	b9 01       	movw	r22, r18
     116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_WritrPin+0x4c>
     118:	66 0f       	add	r22, r22
     11a:	77 1f       	adc	r23, r23
     11c:	9a 95       	dec	r25
     11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_WritrPin+0x48>
     120:	cb 01       	movw	r24, r22
     122:	84 2b       	or	r24, r20
     124:	8b bb       	out	0x1b, r24	; 27



DIO_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     126:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (level_value)
			{
				case HIGH_LEVEL:
				SET_BIT(PORTA,loc_pin_id);
				break;
     128:	08 95       	ret
				case LOW_LEVEL:
				CLR_BIT(PORTA,loc_pin_id);
     12a:	4b b3       	in	r20, 0x1b	; 27
     12c:	21 e0       	ldi	r18, 0x01	; 1
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	b9 01       	movw	r22, r18
     132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_WritrPin+0x68>
     134:	66 0f       	add	r22, r22
     136:	77 1f       	adc	r23, r23
     138:	9a 95       	dec	r25
     13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_WritrPin+0x64>
     13c:	cb 01       	movw	r24, r22
     13e:	80 95       	com	r24
     140:	84 23       	and	r24, r20
     142:	8b bb       	out	0x1b, r24	; 27



DIO_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     144:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH_LEVEL:
				SET_BIT(PORTA,loc_pin_id);
				break;
				case LOW_LEVEL:
				CLR_BIT(PORTA,loc_pin_id);
				break;
     146:	08 95       	ret
		else
		{	ERROR_LOCRET=PIN_DIRECTION_ERROR;
		}
		break;
		case u8PORTB:
		if (GET_BIT(DDRB,loc_pin_id)==PIN_OUTPUT)
     148:	27 b3       	in	r18, 0x17	; 23
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	09 2e       	mov	r0, r25
     14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_WritrPin+0x84>
     150:	35 95       	asr	r19
     152:	27 95       	ror	r18
     154:	0a 94       	dec	r0
     156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_WritrPin+0x80>
     158:	20 ff       	sbrs	r18, 0
     15a:	7f c0       	rjmp	.+254    	; 0x25a <DIO_WritrPin+0x18a>
		{
			switch (level_value)
     15c:	66 23       	and	r22, r22
     15e:	89 f0       	breq	.+34     	; 0x182 <DIO_WritrPin+0xb2>
     160:	61 30       	cpi	r22, 0x01	; 1
     162:	09 f0       	breq	.+2      	; 0x166 <DIO_WritrPin+0x96>
     164:	7c c0       	rjmp	.+248    	; 0x25e <DIO_WritrPin+0x18e>
			{
				case HIGH_LEVEL :
				SET_BIT(PORTB,loc_pin_id);
     166:	48 b3       	in	r20, 0x18	; 24
     168:	21 e0       	ldi	r18, 0x01	; 1
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	b9 01       	movw	r22, r18
     16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_WritrPin+0xa4>
     170:	66 0f       	add	r22, r22
     172:	77 1f       	adc	r23, r23
     174:	9a 95       	dec	r25
     176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_WritrPin+0xa0>
     178:	cb 01       	movw	r24, r22
     17a:	84 2b       	or	r24, r20
     17c:	88 bb       	out	0x18, r24	; 24



DIO_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     17e:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (level_value)
			{
				case HIGH_LEVEL :
				SET_BIT(PORTB,loc_pin_id);
				break;
     180:	08 95       	ret
				case LOW_LEVEL : 
				CLR_BIT(PORTB,loc_pin_id);
     182:	48 b3       	in	r20, 0x18	; 24
     184:	21 e0       	ldi	r18, 0x01	; 1
     186:	30 e0       	ldi	r19, 0x00	; 0
     188:	b9 01       	movw	r22, r18
     18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_WritrPin+0xc0>
     18c:	66 0f       	add	r22, r22
     18e:	77 1f       	adc	r23, r23
     190:	9a 95       	dec	r25
     192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_WritrPin+0xbc>
     194:	cb 01       	movw	r24, r22
     196:	80 95       	com	r24
     198:	84 23       	and	r24, r20
     19a:	88 bb       	out	0x18, r24	; 24



DIO_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     19c:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH_LEVEL :
				SET_BIT(PORTB,loc_pin_id);
				break;
				case LOW_LEVEL : 
				CLR_BIT(PORTB,loc_pin_id);
				break;
     19e:	08 95       	ret
		{	ERROR_LOCRET=PIN_DIRECTION_ERROR;
		}
		break;
		
		case u8PORTC:
		if (GET_BIT(DDRC,loc_pin_id)==PIN_OUTPUT)
     1a0:	24 b3       	in	r18, 0x14	; 20
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	09 2e       	mov	r0, r25
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_WritrPin+0xdc>
     1a8:	35 95       	asr	r19
     1aa:	27 95       	ror	r18
     1ac:	0a 94       	dec	r0
     1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_WritrPin+0xd8>
     1b0:	20 ff       	sbrs	r18, 0
     1b2:	57 c0       	rjmp	.+174    	; 0x262 <DIO_WritrPin+0x192>
		{
			switch (level_value)
     1b4:	66 23       	and	r22, r22
     1b6:	89 f0       	breq	.+34     	; 0x1da <DIO_WritrPin+0x10a>
     1b8:	61 30       	cpi	r22, 0x01	; 1
     1ba:	09 f0       	breq	.+2      	; 0x1be <DIO_WritrPin+0xee>
     1bc:	54 c0       	rjmp	.+168    	; 0x266 <DIO_WritrPin+0x196>
			{
				case HIGH_LEVEL :
				SET_BIT(PORTC,loc_pin_id);
     1be:	45 b3       	in	r20, 0x15	; 21
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	b9 01       	movw	r22, r18
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_WritrPin+0xfc>
     1c8:	66 0f       	add	r22, r22
     1ca:	77 1f       	adc	r23, r23
     1cc:	9a 95       	dec	r25
     1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_WritrPin+0xf8>
     1d0:	cb 01       	movw	r24, r22
     1d2:	84 2b       	or	r24, r20
     1d4:	85 bb       	out	0x15, r24	; 21



DIO_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     1d6:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (level_value)
			{
				case HIGH_LEVEL :
				SET_BIT(PORTC,loc_pin_id);
				break;
     1d8:	08 95       	ret
				case  LOW_LEVEL :
				CLR_BIT(PORTC,loc_pin_id);
     1da:	45 b3       	in	r20, 0x15	; 21
     1dc:	21 e0       	ldi	r18, 0x01	; 1
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	b9 01       	movw	r22, r18
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_WritrPin+0x118>
     1e4:	66 0f       	add	r22, r22
     1e6:	77 1f       	adc	r23, r23
     1e8:	9a 95       	dec	r25
     1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_WritrPin+0x114>
     1ec:	cb 01       	movw	r24, r22
     1ee:	80 95       	com	r24
     1f0:	84 23       	and	r24, r20
     1f2:	85 bb       	out	0x15, r24	; 21



DIO_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     1f4:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH_LEVEL :
				SET_BIT(PORTC,loc_pin_id);
				break;
				case  LOW_LEVEL :
				CLR_BIT(PORTC,loc_pin_id);
				break;
     1f6:	08 95       	ret
		{	ERROR_LOCRET=PIN_DIRECTION_ERROR;
		}
		break;

		case u8PORTD:
		if (GET_BIT(DDRD,loc_pin_id)==PIN_OUTPUT)
     1f8:	21 b3       	in	r18, 0x11	; 17
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	09 2e       	mov	r0, r25
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_WritrPin+0x134>
     200:	35 95       	asr	r19
     202:	27 95       	ror	r18
     204:	0a 94       	dec	r0
     206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_WritrPin+0x130>
     208:	20 ff       	sbrs	r18, 0
     20a:	2f c0       	rjmp	.+94     	; 0x26a <DIO_WritrPin+0x19a>
		{
			switch (level_value)
     20c:	66 23       	and	r22, r22
     20e:	81 f0       	breq	.+32     	; 0x230 <DIO_WritrPin+0x160>
     210:	61 30       	cpi	r22, 0x01	; 1
     212:	69 f5       	brne	.+90     	; 0x26e <DIO_WritrPin+0x19e>
			{
				case HIGH_LEVEL:
				SET_BIT(PORTD,loc_pin_id);
     214:	42 b3       	in	r20, 0x12	; 18
     216:	21 e0       	ldi	r18, 0x01	; 1
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	b9 01       	movw	r22, r18
     21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_WritrPin+0x152>
     21e:	66 0f       	add	r22, r22
     220:	77 1f       	adc	r23, r23
     222:	9a 95       	dec	r25
     224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_WritrPin+0x14e>
     226:	cb 01       	movw	r24, r22
     228:	84 2b       	or	r24, r20
     22a:	82 bb       	out	0x12, r24	; 18



DIO_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     22c:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (level_value)
			{
				case HIGH_LEVEL:
				SET_BIT(PORTD,loc_pin_id);
				break;
     22e:	08 95       	ret
				case LOW_LEVEL:
				CLR_BIT(PORTD,loc_pin_id);
     230:	42 b3       	in	r20, 0x12	; 18
     232:	21 e0       	ldi	r18, 0x01	; 1
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	b9 01       	movw	r22, r18
     238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_WritrPin+0x16e>
     23a:	66 0f       	add	r22, r22
     23c:	77 1f       	adc	r23, r23
     23e:	9a 95       	dec	r25
     240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_WritrPin+0x16a>
     242:	cb 01       	movw	r24, r22
     244:	80 95       	com	r24
     246:	84 23       	and	r24, r20
     248:	82 bb       	out	0x12, r24	; 18



DIO_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     24a:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH_LEVEL:
				SET_BIT(PORTD,loc_pin_id);
				break;
				case LOW_LEVEL:
				CLR_BIT(PORTD,loc_pin_id);
				break;
     24c:	08 95       	ret



DIO_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	08 95       	ret
				CLR_BIT(PORTA,loc_pin_id);
				break;
			}
		}
		else
		{	ERROR_LOCRET=PIN_DIRECTION_ERROR;
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	08 95       	ret



DIO_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	08 95       	ret
				CLR_BIT(PORTB,loc_pin_id);
				break;
			}
		}
		else
		{	ERROR_LOCRET=PIN_DIRECTION_ERROR;
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	08 95       	ret



DIO_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	08 95       	ret
				CLR_BIT(PORTC,loc_pin_id);
				break;
			}
		}
		else
		{	ERROR_LOCRET=PIN_DIRECTION_ERROR;
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	08 95       	ret



DIO_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	08 95       	ret
				CLR_BIT(PORTD,loc_pin_id);
				break;
			}
		}
		else
		{	ERROR_LOCRET=PIN_DIRECTION_ERROR;
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	08 95       	ret



DIO_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     26e:	80 e0       	ldi	r24, 0x00	; 0
		{	ERROR_LOCRET=PIN_DIRECTION_ERROR;
		}
		break;
	}
	return ERROR_LOCRET;
}
     270:	08 95       	ret

00000272 <DIO_READ_PIN>:
DIO_ERROR_TYPES  DIO_READ_PIN(u8 pin_id,u8 *ptr_val)
{
	DIO_ERROR_TYPES ERROR_LOCRET=NO_ERROR;
	//u8 *ptr_val= ptr_val;

	u8 loc_pin_id =pin_id % 8;
     272:	98 2f       	mov	r25, r24
     274:	97 70       	andi	r25, 0x07	; 7
	u8 loc_port_num=pin_id/8;
     276:	86 95       	lsr	r24
     278:	86 95       	lsr	r24
     27a:	86 95       	lsr	r24
	
	switch(loc_port_num)
     27c:	81 30       	cpi	r24, 0x01	; 1
     27e:	f9 f0       	breq	.+62     	; 0x2be <DIO_READ_PIN+0x4c>
     280:	81 30       	cpi	r24, 0x01	; 1
     282:	30 f0       	brcs	.+12     	; 0x290 <DIO_READ_PIN+0x1e>
     284:	82 30       	cpi	r24, 0x02	; 2
     286:	99 f1       	breq	.+102    	; 0x2ee <DIO_READ_PIN+0x7c>
     288:	83 30       	cpi	r24, 0x03	; 3
     28a:	09 f0       	breq	.+2      	; 0x28e <DIO_READ_PIN+0x1c>
     28c:	60 c0       	rjmp	.+192    	; 0x34e <DIO_READ_PIN+0xdc>
     28e:	47 c0       	rjmp	.+142    	; 0x31e <DIO_READ_PIN+0xac>
	{
		case u8PORTA:
		if(GET_BIT(DDRA,loc_pin_id)==PIN_INPUT)
     290:	2a b3       	in	r18, 0x1a	; 26
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	09 2e       	mov	r0, r25
     296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_READ_PIN+0x2a>
     298:	35 95       	asr	r19
     29a:	27 95       	ror	r18
     29c:	0a 94       	dec	r0
     29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_READ_PIN+0x26>
     2a0:	20 fd       	sbrc	r18, 0
     2a2:	0f c0       	rjmp	.+30     	; 0x2c2 <DIO_READ_PIN+0x50>
		*ptr_val=(GET_BIT(PINA,loc_pin_id));
     2a4:	29 b3       	in	r18, 0x19	; 25
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	09 2e       	mov	r0, r25
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_READ_PIN+0x3e>
     2ac:	35 95       	asr	r19
     2ae:	27 95       	ror	r18
     2b0:	0a 94       	dec	r0
     2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_READ_PIN+0x3a>
     2b4:	21 70       	andi	r18, 0x01	; 1
     2b6:	fb 01       	movw	r30, r22
     2b8:	20 83       	st	Z, r18
	return ERROR_LOCRET;
}

DIO_ERROR_TYPES  DIO_READ_PIN(u8 pin_id,u8 *ptr_val)
{
	DIO_ERROR_TYPES ERROR_LOCRET=NO_ERROR;
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <DIO_READ_PIN+0x52>
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <DIO_READ_PIN+0x52>
	{
		case u8PORTA:
		if(GET_BIT(DDRA,loc_pin_id)==PIN_INPUT)
		*ptr_val=(GET_BIT(PINA,loc_pin_id));
		
		else   ERROR_LOCRET=PIN_DIRECTION_ERROR;
     2c2:	81 e0       	ldi	r24, 0x01	; 1
		
		case u8PORTB:
		if(GET_BIT(DDRB,loc_pin_id)==PIN_INPUT)
     2c4:	27 b3       	in	r18, 0x17	; 23
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	09 2e       	mov	r0, r25
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_READ_PIN+0x5e>
     2cc:	35 95       	asr	r19
     2ce:	27 95       	ror	r18
     2d0:	0a 94       	dec	r0
     2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_READ_PIN+0x5a>
     2d4:	20 fd       	sbrc	r18, 0
     2d6:	3d c0       	rjmp	.+122    	; 0x352 <DIO_READ_PIN+0xe0>
		*ptr_val=(GET_BIT(PINB,loc_pin_id));
     2d8:	26 b3       	in	r18, 0x16	; 22
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_READ_PIN+0x70>
     2de:	35 95       	asr	r19
     2e0:	27 95       	ror	r18
     2e2:	9a 95       	dec	r25
     2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_READ_PIN+0x6c>
     2e6:	21 70       	andi	r18, 0x01	; 1
     2e8:	fb 01       	movw	r30, r22
     2ea:	20 83       	st	Z, r18
     2ec:	08 95       	ret
		else   ERROR_LOCRET=PIN_DIRECTION_ERROR;
		
		break;
		
		case u8PORTC:
		if(GET_BIT(DDRC,loc_pin_id)==PIN_INPUT)
     2ee:	24 b3       	in	r18, 0x14	; 20
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	09 2e       	mov	r0, r25
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_READ_PIN+0x88>
     2f6:	35 95       	asr	r19
     2f8:	27 95       	ror	r18
     2fa:	0a 94       	dec	r0
     2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_READ_PIN+0x84>
     2fe:	20 fd       	sbrc	r18, 0
     300:	2a c0       	rjmp	.+84     	; 0x356 <DIO_READ_PIN+0xe4>
		*ptr_val=(GET_BIT(PINC,loc_pin_id));
     302:	23 b3       	in	r18, 0x13	; 19
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	a9 01       	movw	r20, r18
     308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_READ_PIN+0x9c>
     30a:	55 95       	asr	r21
     30c:	47 95       	ror	r20
     30e:	9a 95       	dec	r25
     310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_READ_PIN+0x98>
     312:	ca 01       	movw	r24, r20
     314:	81 70       	andi	r24, 0x01	; 1
     316:	fb 01       	movw	r30, r22
     318:	80 83       	st	Z, r24
	return ERROR_LOCRET;
}

DIO_ERROR_TYPES  DIO_READ_PIN(u8 pin_id,u8 *ptr_val)
{
	DIO_ERROR_TYPES ERROR_LOCRET=NO_ERROR;
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	08 95       	ret
		else   ERROR_LOCRET=PIN_DIRECTION_ERROR;
		
		break;
		
		case u8PORTD:
		if(GET_BIT(DDRD,loc_pin_id)==PIN_INPUT)
     31e:	21 b3       	in	r18, 0x11	; 17
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	09 2e       	mov	r0, r25
     324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_READ_PIN+0xb8>
     326:	35 95       	asr	r19
     328:	27 95       	ror	r18
     32a:	0a 94       	dec	r0
     32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_READ_PIN+0xb4>
     32e:	20 fd       	sbrc	r18, 0
     330:	14 c0       	rjmp	.+40     	; 0x35a <DIO_READ_PIN+0xe8>
		*ptr_val=(GET_BIT(PIND,loc_pin_id));
     332:	20 b3       	in	r18, 0x10	; 16
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	a9 01       	movw	r20, r18
     338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_READ_PIN+0xcc>
     33a:	55 95       	asr	r21
     33c:	47 95       	ror	r20
     33e:	9a 95       	dec	r25
     340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_READ_PIN+0xc8>
     342:	ca 01       	movw	r24, r20
     344:	81 70       	andi	r24, 0x01	; 1
     346:	fb 01       	movw	r30, r22
     348:	80 83       	st	Z, r24
	return ERROR_LOCRET;
}

DIO_ERROR_TYPES  DIO_READ_PIN(u8 pin_id,u8 *ptr_val)
{
	DIO_ERROR_TYPES ERROR_LOCRET=NO_ERROR;
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	08 95       	ret
		else   ERROR_LOCRET=PIN_DIRECTION_ERROR;
		
		break;
		
		default :
		ERROR_LOCRET = PORT_ERROR;
     34e:	83 e0       	ldi	r24, 0x03	; 3
     350:	08 95       	ret
		
		case u8PORTB:
		if(GET_BIT(DDRB,loc_pin_id)==PIN_INPUT)
		*ptr_val=(GET_BIT(PINB,loc_pin_id));
		
		else   ERROR_LOCRET=PIN_DIRECTION_ERROR;
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	08 95       	ret
		
		case u8PORTC:
		if(GET_BIT(DDRC,loc_pin_id)==PIN_INPUT)
		*ptr_val=(GET_BIT(PINC,loc_pin_id));
		
		else   ERROR_LOCRET=PIN_DIRECTION_ERROR;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	08 95       	ret
		
		case u8PORTD:
		if(GET_BIT(DDRD,loc_pin_id)==PIN_INPUT)
		*ptr_val=(GET_BIT(PIND,loc_pin_id));
		
		else   ERROR_LOCRET=PIN_DIRECTION_ERROR;
     35a:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	
	return ERROR_LOCRET;

}
     35c:	08 95       	ret

0000035e <DIO_WritePort>:

DIO_ERROR_TYPES  DIO_WritePort(u8 port_num,u8 port_value)
{
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
	
	switch(port_num)
     35e:	81 30       	cpi	r24, 0x01	; 1
     360:	51 f0       	breq	.+20     	; 0x376 <DIO_WritePort+0x18>
     362:	81 30       	cpi	r24, 0x01	; 1
     364:	28 f0       	brcs	.+10     	; 0x370 <DIO_WritePort+0x12>
     366:	82 30       	cpi	r24, 0x02	; 2
     368:	49 f0       	breq	.+18     	; 0x37c <DIO_WritePort+0x1e>
     36a:	83 30       	cpi	r24, 0x03	; 3
     36c:	69 f4       	brne	.+26     	; 0x388 <DIO_WritePort+0x2a>
     36e:	09 c0       	rjmp	.+18     	; 0x382 <DIO_WritePort+0x24>
	{
		case u8PORTA:
		PORTA = port_value;
     370:	6b bb       	out	0x1b, r22	; 27
}


DIO_ERROR_TYPES  DIO_WritePort(u8 port_num,u8 port_value)
{
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     372:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(port_num)
	{
		case u8PORTA:
		PORTA = port_value;
		break;
     374:	08 95       	ret
		
		case u8PORTB:
		PORTA = port_value;
     376:	6b bb       	out	0x1b, r22	; 27
}


DIO_ERROR_TYPES  DIO_WritePort(u8 port_num,u8 port_value)
{
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     378:	80 e0       	ldi	r24, 0x00	; 0
		PORTA = port_value;
		break;
		
		case u8PORTB:
		PORTA = port_value;
		break;
     37a:	08 95       	ret

		case u8PORTC:
		PORTC = port_value;
     37c:	65 bb       	out	0x15, r22	; 21
}


DIO_ERROR_TYPES  DIO_WritePort(u8 port_num,u8 port_value)
{
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     37e:	80 e0       	ldi	r24, 0x00	; 0
		PORTA = port_value;
		break;

		case u8PORTC:
		PORTC = port_value;
		break;
     380:	08 95       	ret

		case u8PORTD:
		PORTD = port_value;
     382:	62 bb       	out	0x12, r22	; 18
}


DIO_ERROR_TYPES  DIO_WritePort(u8 port_num,u8 port_value)
{
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     384:	80 e0       	ldi	r24, 0x00	; 0
		PORTC = port_value;
		break;

		case u8PORTD:
		PORTD = port_value;
		break;
     386:	08 95       	ret
		
		default:
		ERROR_LOCRET=PORT_ERROR;
     388:	83 e0       	ldi	r24, 0x03	; 3
		
	}
	return ERROR_LOCRET;
}
     38a:	08 95       	ret

0000038c <DIO_ReadPort>:
{
	
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
	
	//u8 *ptr_val =ptr_val;
	switch(port_num)
     38c:	81 30       	cpi	r24, 0x01	; 1
     38e:	61 f0       	breq	.+24     	; 0x3a8 <DIO_ReadPort+0x1c>
     390:	81 30       	cpi	r24, 0x01	; 1
     392:	28 f0       	brcs	.+10     	; 0x39e <DIO_ReadPort+0x12>
     394:	82 30       	cpi	r24, 0x02	; 2
     396:	69 f0       	breq	.+26     	; 0x3b2 <DIO_ReadPort+0x26>
     398:	83 30       	cpi	r24, 0x03	; 3
     39a:	a9 f4       	brne	.+42     	; 0x3c6 <DIO_ReadPort+0x3a>
     39c:	0f c0       	rjmp	.+30     	; 0x3bc <DIO_ReadPort+0x30>
	{
		case u8PORTA:
		*ptr_val=PINA;
     39e:	89 b3       	in	r24, 0x19	; 25
     3a0:	fb 01       	movw	r30, r22
     3a2:	80 83       	st	Z, r24
}

DIO_ERROR_TYPES  DIO_ReadPort(u8 port_num,u8 *ptr_val)
{
	
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     3a4:	80 e0       	ldi	r24, 0x00	; 0
	//u8 *ptr_val =ptr_val;
	switch(port_num)
	{
		case u8PORTA:
		*ptr_val=PINA;
		break;
     3a6:	08 95       	ret
		
		case u8PORTB:
		*ptr_val=PINB;
     3a8:	86 b3       	in	r24, 0x16	; 22
     3aa:	fb 01       	movw	r30, r22
     3ac:	80 83       	st	Z, r24
}

DIO_ERROR_TYPES  DIO_ReadPort(u8 port_num,u8 *ptr_val)
{
	
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     3ae:	80 e0       	ldi	r24, 0x00	; 0
		*ptr_val=PINA;
		break;
		
		case u8PORTB:
		*ptr_val=PINB;
		break;
     3b0:	08 95       	ret

		case u8PORTC:
		*ptr_val=PINC;
     3b2:	83 b3       	in	r24, 0x13	; 19
     3b4:	fb 01       	movw	r30, r22
     3b6:	80 83       	st	Z, r24
}

DIO_ERROR_TYPES  DIO_ReadPort(u8 port_num,u8 *ptr_val)
{
	
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     3b8:	80 e0       	ldi	r24, 0x00	; 0
		*ptr_val=PINB;
		break;

		case u8PORTC:
		*ptr_val=PINC;
		break;
     3ba:	08 95       	ret

		case u8PORTD:
		*ptr_val=PIND;
     3bc:	80 b3       	in	r24, 0x10	; 16
     3be:	fb 01       	movw	r30, r22
     3c0:	80 83       	st	Z, r24
}

DIO_ERROR_TYPES  DIO_ReadPort(u8 port_num,u8 *ptr_val)
{
	
	DIO_ERROR_TYPES ERROR_LOCRET =NO_ERROR;
     3c2:	80 e0       	ldi	r24, 0x00	; 0
		*ptr_val=PINC;
		break;

		case u8PORTD:
		*ptr_val=PIND;
		break;
     3c4:	08 95       	ret
		
		default:
		ERROR_LOCRET=PORT_ERROR;
     3c6:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ERROR_LOCRET;
     3c8:	08 95       	ret

000003ca <Global_Interrupt_EnablE>:
     3ca:	8f b7       	in	r24, 0x3f	; 63
     3cc:	80 68       	ori	r24, 0x80	; 128
     3ce:	8f bf       	out	0x3f, r24	; 63
     3d0:	08 95       	ret

000003d2 <extrnal_int_init>:
     3d2:	1f 93       	push	r17
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	16 2f       	mov	r17, r22
     3da:	ea 01       	movw	r28, r20
     3dc:	86 30       	cpi	r24, 0x06	; 6
     3de:	29 f0       	breq	.+10     	; 0x3ea <extrnal_int_init+0x18>
     3e0:	87 30       	cpi	r24, 0x07	; 7
     3e2:	91 f0       	breq	.+36     	; 0x408 <extrnal_int_init+0x36>
     3e4:	85 30       	cpi	r24, 0x05	; 5
     3e6:	a1 f5       	brne	.+104    	; 0x450 <extrnal_int_init+0x7e>
     3e8:	20 c0       	rjmp	.+64     	; 0x42a <extrnal_int_init+0x58>
     3ea:	8a e1       	ldi	r24, 0x1A	; 26
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	0e 94 09 06 	call	0xc12	; 0xc12 <Port_setPinDirection>
     3f2:	85 b7       	in	r24, 0x35	; 53
     3f4:	8c 7f       	andi	r24, 0xFC	; 252
     3f6:	85 bf       	out	0x35, r24	; 53
     3f8:	85 b7       	in	r24, 0x35	; 53
     3fa:	18 2b       	or	r17, r24
     3fc:	15 bf       	out	0x35, r17	; 53
     3fe:	d0 93 85 00 	sts	0x0085, r29
     402:	c0 93 84 00 	sts	0x0084, r28
     406:	24 c0       	rjmp	.+72     	; 0x450 <extrnal_int_init+0x7e>
     408:	8b e1       	ldi	r24, 0x1B	; 27
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	0e 94 09 06 	call	0xc12	; 0xc12 <Port_setPinDirection>
     410:	85 b7       	in	r24, 0x35	; 53
     412:	83 7f       	andi	r24, 0xF3	; 243
     414:	85 bf       	out	0x35, r24	; 53
     416:	85 b7       	in	r24, 0x35	; 53
     418:	11 0f       	add	r17, r17
     41a:	11 0f       	add	r17, r17
     41c:	18 2b       	or	r17, r24
     41e:	15 bf       	out	0x35, r17	; 53
     420:	d0 93 87 00 	sts	0x0087, r29
     424:	c0 93 86 00 	sts	0x0086, r28
     428:	13 c0       	rjmp	.+38     	; 0x450 <extrnal_int_init+0x7e>
     42a:	8b e1       	ldi	r24, 0x1B	; 27
     42c:	60 e0       	ldi	r22, 0x00	; 0
     42e:	0e 94 09 06 	call	0xc12	; 0xc12 <Port_setPinDirection>
     432:	12 30       	cpi	r17, 0x02	; 2
     434:	21 f4       	brne	.+8      	; 0x43e <extrnal_int_init+0x6c>
     436:	84 b7       	in	r24, 0x34	; 52
     438:	8f 7b       	andi	r24, 0xBF	; 191
     43a:	84 bf       	out	0x34, r24	; 52
     43c:	05 c0       	rjmp	.+10     	; 0x448 <extrnal_int_init+0x76>
     43e:	13 30       	cpi	r17, 0x03	; 3
     440:	19 f4       	brne	.+6      	; 0x448 <extrnal_int_init+0x76>
     442:	84 b7       	in	r24, 0x34	; 52
     444:	80 64       	ori	r24, 0x40	; 64
     446:	84 bf       	out	0x34, r24	; 52
     448:	d0 93 89 00 	sts	0x0089, r29
     44c:	c0 93 88 00 	sts	0x0088, r28
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	08 95       	ret

00000458 <Enable_EXT_INT>:
     458:	4b b7       	in	r20, 0x3b	; 59
     45a:	21 e0       	ldi	r18, 0x01	; 1
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	b9 01       	movw	r22, r18
     460:	02 c0       	rjmp	.+4      	; 0x466 <Enable_EXT_INT+0xe>
     462:	66 0f       	add	r22, r22
     464:	77 1f       	adc	r23, r23
     466:	8a 95       	dec	r24
     468:	e2 f7       	brpl	.-8      	; 0x462 <Enable_EXT_INT+0xa>
     46a:	cb 01       	movw	r24, r22
     46c:	84 2b       	or	r24, r20
     46e:	8b bf       	out	0x3b, r24	; 59
     470:	08 95       	ret

00000472 <Disable_EXT_INT>:
     472:	9b b7       	in	r25, 0x3b	; 59
     474:	21 e0       	ldi	r18, 0x01	; 1
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	02 c0       	rjmp	.+4      	; 0x47e <Disable_EXT_INT+0xc>
     47a:	22 0f       	add	r18, r18
     47c:	33 1f       	adc	r19, r19
     47e:	8a 95       	dec	r24
     480:	e2 f7       	brpl	.-8      	; 0x47a <Disable_EXT_INT+0x8>
     482:	20 95       	com	r18
     484:	92 23       	and	r25, r18
     486:	9b bf       	out	0x3b, r25	; 59
     488:	08 95       	ret

0000048a <__vector_1>:
     48a:	1f 92       	push	r1
     48c:	0f 92       	push	r0
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	0f 92       	push	r0
     492:	11 24       	eor	r1, r1
     494:	2f 93       	push	r18
     496:	3f 93       	push	r19
     498:	4f 93       	push	r20
     49a:	5f 93       	push	r21
     49c:	6f 93       	push	r22
     49e:	7f 93       	push	r23
     4a0:	8f 93       	push	r24
     4a2:	9f 93       	push	r25
     4a4:	af 93       	push	r26
     4a6:	bf 93       	push	r27
     4a8:	ef 93       	push	r30
     4aa:	ff 93       	push	r31
     4ac:	e0 91 84 00 	lds	r30, 0x0084
     4b0:	f0 91 85 00 	lds	r31, 0x0085
     4b4:	30 97       	sbiw	r30, 0x00	; 0
     4b6:	09 f0       	breq	.+2      	; 0x4ba <__vector_1+0x30>
     4b8:	09 95       	icall
     4ba:	ff 91       	pop	r31
     4bc:	ef 91       	pop	r30
     4be:	bf 91       	pop	r27
     4c0:	af 91       	pop	r26
     4c2:	9f 91       	pop	r25
     4c4:	8f 91       	pop	r24
     4c6:	7f 91       	pop	r23
     4c8:	6f 91       	pop	r22
     4ca:	5f 91       	pop	r21
     4cc:	4f 91       	pop	r20
     4ce:	3f 91       	pop	r19
     4d0:	2f 91       	pop	r18
     4d2:	0f 90       	pop	r0
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	0f 90       	pop	r0
     4d8:	1f 90       	pop	r1
     4da:	18 95       	reti

000004dc <__vector_2>:
     4dc:	1f 92       	push	r1
     4de:	0f 92       	push	r0
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	0f 92       	push	r0
     4e4:	11 24       	eor	r1, r1
     4e6:	2f 93       	push	r18
     4e8:	3f 93       	push	r19
     4ea:	4f 93       	push	r20
     4ec:	5f 93       	push	r21
     4ee:	6f 93       	push	r22
     4f0:	7f 93       	push	r23
     4f2:	8f 93       	push	r24
     4f4:	9f 93       	push	r25
     4f6:	af 93       	push	r26
     4f8:	bf 93       	push	r27
     4fa:	ef 93       	push	r30
     4fc:	ff 93       	push	r31
     4fe:	e0 91 86 00 	lds	r30, 0x0086
     502:	f0 91 87 00 	lds	r31, 0x0087
     506:	30 97       	sbiw	r30, 0x00	; 0
     508:	09 f0       	breq	.+2      	; 0x50c <__vector_2+0x30>
     50a:	09 95       	icall
     50c:	ff 91       	pop	r31
     50e:	ef 91       	pop	r30
     510:	bf 91       	pop	r27
     512:	af 91       	pop	r26
     514:	9f 91       	pop	r25
     516:	8f 91       	pop	r24
     518:	7f 91       	pop	r23
     51a:	6f 91       	pop	r22
     51c:	5f 91       	pop	r21
     51e:	4f 91       	pop	r20
     520:	3f 91       	pop	r19
     522:	2f 91       	pop	r18
     524:	0f 90       	pop	r0
     526:	0f be       	out	0x3f, r0	; 63
     528:	0f 90       	pop	r0
     52a:	1f 90       	pop	r1
     52c:	18 95       	reti

0000052e <__vector_3>:
     52e:	1f 92       	push	r1
     530:	0f 92       	push	r0
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	0f 92       	push	r0
     536:	11 24       	eor	r1, r1
     538:	2f 93       	push	r18
     53a:	3f 93       	push	r19
     53c:	4f 93       	push	r20
     53e:	5f 93       	push	r21
     540:	6f 93       	push	r22
     542:	7f 93       	push	r23
     544:	8f 93       	push	r24
     546:	9f 93       	push	r25
     548:	af 93       	push	r26
     54a:	bf 93       	push	r27
     54c:	ef 93       	push	r30
     54e:	ff 93       	push	r31
     550:	e0 91 88 00 	lds	r30, 0x0088
     554:	f0 91 89 00 	lds	r31, 0x0089
     558:	30 97       	sbiw	r30, 0x00	; 0
     55a:	09 f0       	breq	.+2      	; 0x55e <__vector_3+0x30>
     55c:	09 95       	icall
     55e:	ff 91       	pop	r31
     560:	ef 91       	pop	r30
     562:	bf 91       	pop	r27
     564:	af 91       	pop	r26
     566:	9f 91       	pop	r25
     568:	8f 91       	pop	r24
     56a:	7f 91       	pop	r23
     56c:	6f 91       	pop	r22
     56e:	5f 91       	pop	r21
     570:	4f 91       	pop	r20
     572:	3f 91       	pop	r19
     574:	2f 91       	pop	r18
     576:	0f 90       	pop	r0
     578:	0f be       	out	0x3f, r0	; 63
     57a:	0f 90       	pop	r0
     57c:	1f 90       	pop	r1
     57e:	18 95       	reti

00000580 <KEYPAD_WritrPins>:
  }   	
	return ERROR_KEYPAD_RET;

}
void KEYPAD_WritrPins(u8 value)
{		
     580:	cf 93       	push	r28
     582:	c8 2f       	mov	r28, r24
	DIO_WritrPin(KEY_RAW0,GET_BIT(value,0));
     584:	68 2f       	mov	r22, r24
     586:	61 70       	andi	r22, 0x01	; 1
     588:	80 e1       	ldi	r24, 0x10	; 16
     58a:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
	DIO_WritrPin(KEY_RAW1,GET_BIT(value,1));	
     58e:	6c 2f       	mov	r22, r28
     590:	66 95       	lsr	r22
     592:	61 70       	andi	r22, 0x01	; 1
     594:	81 e1       	ldi	r24, 0x11	; 17
     596:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
	DIO_WritrPin(KEY_RAW2,GET_BIT(value,2));
     59a:	6c 2f       	mov	r22, r28
     59c:	66 95       	lsr	r22
     59e:	66 95       	lsr	r22
     5a0:	61 70       	andi	r22, 0x01	; 1
     5a2:	82 e1       	ldi	r24, 0x12	; 18
     5a4:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
	DIO_WritrPin(KEY_RAW3,GET_BIT(value,3));
     5a8:	c6 95       	lsr	r28
     5aa:	c6 95       	lsr	r28
     5ac:	c6 95       	lsr	r28
     5ae:	6c 2f       	mov	r22, r28
     5b0:	61 70       	andi	r22, 0x01	; 1
     5b2:	83 e1       	ldi	r24, 0x13	; 19
     5b4:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
}
     5b8:	cf 91       	pop	r28
     5ba:	08 95       	ret

000005bc <KEYPAD_voidInit>:
#include "../../../HAL/KEYPAD/KEYPAD.h"


void KEYPAD_voidInit(void)
{
Port_setPinDirection(KEY_RAW0,PIN_OUTPUT);
     5bc:	80 e1       	ldi	r24, 0x10	; 16
     5be:	61 e0       	ldi	r22, 0x01	; 1
     5c0:	0e 94 09 06 	call	0xc12	; 0xc12 <Port_setPinDirection>
Port_setPinDirection(KEY_RAW1,PIN_OUTPUT);
     5c4:	81 e1       	ldi	r24, 0x11	; 17
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	0e 94 09 06 	call	0xc12	; 0xc12 <Port_setPinDirection>
Port_setPinDirection(KEY_RAW2,PIN_OUTPUT);
     5cc:	82 e1       	ldi	r24, 0x12	; 18
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	0e 94 09 06 	call	0xc12	; 0xc12 <Port_setPinDirection>
Port_setPinDirection(KEY_RAW3,PIN_OUTPUT);
     5d4:	83 e1       	ldi	r24, 0x13	; 19
     5d6:	61 e0       	ldi	r22, 0x01	; 1
     5d8:	0e 94 09 06 	call	0xc12	; 0xc12 <Port_setPinDirection>
Port_SetPinMode(KEY_COL0,PIN_IN_PULLUP);
     5dc:	84 e1       	ldi	r24, 0x14	; 20
     5de:	63 e0       	ldi	r22, 0x03	; 3
     5e0:	0e 94 a9 06 	call	0xd52	; 0xd52 <Port_SetPinMode>
Port_SetPinMode(KEY_COL1,PIN_IN_PULLUP);
     5e4:	85 e1       	ldi	r24, 0x15	; 21
     5e6:	63 e0       	ldi	r22, 0x03	; 3
     5e8:	0e 94 a9 06 	call	0xd52	; 0xd52 <Port_SetPinMode>
Port_SetPinMode(KEY_COL2,PIN_IN_PULLUP);
     5ec:	86 e1       	ldi	r24, 0x16	; 22
     5ee:	63 e0       	ldi	r22, 0x03	; 3
     5f0:	0e 94 a9 06 	call	0xd52	; 0xd52 <Port_SetPinMode>
Port_SetPinMode(KEY_COL3,PIN_IN_PULLUP);
     5f4:	87 e1       	ldi	r24, 0x17	; 23
     5f6:	63 e0       	ldi	r22, 0x03	; 3
     5f8:	0e 94 a9 06 	call	0xd52	; 0xd52 <Port_SetPinMode>

}
     5fc:	08 95       	ret

000005fe <KEYPAD_ReadPins>:
	DIO_WritrPin(KEY_RAW2,GET_BIT(value,2));
	DIO_WritrPin(KEY_RAW3,GET_BIT(value,3));
}

void KEYPAD_ReadPins(u8 *value)
{
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	0f 92       	push	r0
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	8c 01       	movw	r16, r24
	u8 loc_read=0;
     60e:	19 82       	std	Y+1, r1	; 0x01
	//u8 *temp=value;
	DIO_READ_PIN(KEY_COL0,&loc_read);
     610:	84 e1       	ldi	r24, 0x14	; 20
     612:	be 01       	movw	r22, r28
     614:	6f 5f       	subi	r22, 0xFF	; 255
     616:	7f 4f       	sbci	r23, 0xFF	; 255
     618:	0e 94 39 01 	call	0x272	; 0x272 <DIO_READ_PIN>
	*value=loc_read;
     61c:	89 81       	ldd	r24, Y+1	; 0x01
     61e:	f8 01       	movw	r30, r16
     620:	80 83       	st	Z, r24
	DIO_READ_PIN(KEY_COL1,&loc_read);
     622:	85 e1       	ldi	r24, 0x15	; 21
     624:	be 01       	movw	r22, r28
     626:	6f 5f       	subi	r22, 0xFF	; 255
     628:	7f 4f       	sbci	r23, 0xFF	; 255
     62a:	0e 94 39 01 	call	0x272	; 0x272 <DIO_READ_PIN>
	*value=(loc_read<<1);
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	88 0f       	add	r24, r24
     632:	f8 01       	movw	r30, r16
     634:	80 83       	st	Z, r24
	DIO_READ_PIN(KEY_COL2,&loc_read);
     636:	86 e1       	ldi	r24, 0x16	; 22
     638:	be 01       	movw	r22, r28
     63a:	6f 5f       	subi	r22, 0xFF	; 255
     63c:	7f 4f       	sbci	r23, 0xFF	; 255
     63e:	0e 94 39 01 	call	0x272	; 0x272 <DIO_READ_PIN>
	*value|=(loc_read<<2);
     642:	89 81       	ldd	r24, Y+1	; 0x01
     644:	88 0f       	add	r24, r24
     646:	88 0f       	add	r24, r24
     648:	f8 01       	movw	r30, r16
     64a:	90 81       	ld	r25, Z
     64c:	89 2b       	or	r24, r25
     64e:	80 83       	st	Z, r24
	DIO_READ_PIN(KEY_COL3,&loc_read);
     650:	87 e1       	ldi	r24, 0x17	; 23
     652:	be 01       	movw	r22, r28
     654:	6f 5f       	subi	r22, 0xFF	; 255
     656:	7f 4f       	sbci	r23, 0xFF	; 255
     658:	0e 94 39 01 	call	0x272	; 0x272 <DIO_READ_PIN>
	*value|=(loc_read<<3);
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	88 0f       	add	r24, r24
     660:	88 0f       	add	r24, r24
     662:	88 0f       	add	r24, r24
     664:	f8 01       	movw	r30, r16
     666:	90 81       	ld	r25, Z
     668:	89 2b       	or	r24, r25
     66a:	80 83       	st	Z, r24
	
     66c:	0f 90       	pop	r0
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	08 95       	ret

00000678 <KEYPAD_FindKey>:

	
//u8KEYPAD_SYMBOL[4]={0b1111,0b01111,0b1011,0b1101,0b1110};
	
ERROR_KEYPAD_STATUS KEYPAD_FindKey(u8 *Loc_keyPress)
{
     678:	6f 92       	push	r6
     67a:	7f 92       	push	r7
     67c:	8f 92       	push	r8
     67e:	9f 92       	push	r9
     680:	af 92       	push	r10
     682:	bf 92       	push	r11
     684:	cf 92       	push	r12
     686:	df 92       	push	r13
     688:	ef 92       	push	r14
     68a:	ff 92       	push	r15
     68c:	0f 93       	push	r16
     68e:	1f 93       	push	r17
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	0f 92       	push	r0
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	5c 01       	movw	r10, r24
  ERROR_KEYPAD_STATUS ERROR_KEYPAD_RET=ERROR_FREE;
  //u8 *Local_keypresed=Loc_keyPress;
  u8 temp=0b00;
     69c:	19 82       	std	Y+1, r1	; 0x01
  //u8 pin=0;
  u8 reg;
  for(u8 i=0;i<RAW_NUM;i++)
     69e:	80 91 60 00 	lds	r24, 0x0060
     6a2:	88 23       	and	r24, r24
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <KEYPAD_FindKey+0x30>
     6a6:	5f c0       	rjmp	.+190    	; 0x766 <KEYPAD_FindKey+0xee>
     6a8:	10 e0       	ldi	r17, 0x00	; 0
	
//u8KEYPAD_SYMBOL[4]={0b1111,0b01111,0b1011,0b1101,0b1110};
	
ERROR_KEYPAD_STATUS KEYPAD_FindKey(u8 *Loc_keyPress)
{
  ERROR_KEYPAD_STATUS ERROR_KEYPAD_RET=ERROR_FREE;
     6aa:	77 24       	eor	r7, r7
  for(u8 i=0;i<RAW_NUM;i++)
  {	  
	reg=0x0F;
	//pin=i;
//	 reg^=(1<<i);	  
  KEYPAD_WritrPins(TGLWITHOUTASSIGN_BIT(reg,i));
     6ac:	cc 24       	eor	r12, r12
     6ae:	dd 24       	eor	r13, r13
     6b0:	c3 94       	inc	r12
     6b2:	0f e0       	ldi	r16, 0x0F	; 15
	break;
	case 0b1101:	
	*Loc_keyPress=KEYPAD_SYMBOL[(4*i)+1];
	break;
	case 0b1011:	
	*Loc_keyPress=KEYPAD_SYMBOL[(4*i)+2];
     6b4:	0f 2e       	mov	r0, r31
     6b6:	f1 e6       	ldi	r31, 0x61	; 97
     6b8:	8f 2e       	mov	r8, r31
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	9f 2e       	mov	r9, r31
     6be:	f0 2d       	mov	r31, r0
	break;
	case 0b0111:	
	*Loc_keyPress=KEYPAD_SYMBOL[(4*i)+3];
	break;
	default:
	ERROR_KEYPAD_RET=NO_KEY_PRESSED;
     6c0:	66 24       	eor	r6, r6
     6c2:	63 94       	inc	r6
  for(u8 i=0;i<RAW_NUM;i++)
  {	  
	reg=0x0F;
	//pin=i;
//	 reg^=(1<<i);	  
  KEYPAD_WritrPins(TGLWITHOUTASSIGN_BIT(reg,i));
     6c4:	e1 2e       	mov	r14, r17
     6c6:	ff 24       	eor	r15, r15
     6c8:	c6 01       	movw	r24, r12
     6ca:	01 2e       	mov	r0, r17
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <KEYPAD_FindKey+0x5a>
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	0a 94       	dec	r0
     6d4:	e2 f7       	brpl	.-8      	; 0x6ce <KEYPAD_FindKey+0x56>
     6d6:	80 27       	eor	r24, r16
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 c0 02 	call	0x580	; 0x580 <KEYPAD_WritrPins>
  //KEYPAD_WritrPins((reg^=(1<<i)));
 // KEYPAD_WritrPins(0x0F & (0x0F<<i));
 // KEYPAD_WritrPins(0xFE);
  KEYPAD_ReadPins(&temp);
     6de:	ce 01       	movw	r24, r28
     6e0:	01 96       	adiw	r24, 0x01	; 1
     6e2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <KEYPAD_ReadPins>
  switch(temp)
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	8b 30       	cpi	r24, 0x0B	; 11
     6ea:	f9 f0       	breq	.+62     	; 0x72a <KEYPAD_FindKey+0xb2>
     6ec:	8c 30       	cpi	r24, 0x0C	; 12
     6ee:	18 f4       	brcc	.+6      	; 0x6f6 <KEYPAD_FindKey+0x7e>
     6f0:	87 30       	cpi	r24, 0x07	; 7
     6f2:	89 f5       	brne	.+98     	; 0x756 <KEYPAD_FindKey+0xde>
     6f4:	25 c0       	rjmp	.+74     	; 0x740 <KEYPAD_FindKey+0xc8>
     6f6:	8d 30       	cpi	r24, 0x0D	; 13
     6f8:	69 f0       	breq	.+26     	; 0x714 <KEYPAD_FindKey+0x9c>
     6fa:	8e 30       	cpi	r24, 0x0E	; 14
     6fc:	61 f5       	brne	.+88     	; 0x756 <KEYPAD_FindKey+0xde>
  {
	case 0b1110:	
	*Loc_keyPress=KEYPAD_SYMBOL[(4*i)+0]; 
     6fe:	f7 01       	movw	r30, r14
     700:	ee 0f       	add	r30, r30
     702:	ff 1f       	adc	r31, r31
     704:	ee 0f       	add	r30, r30
     706:	ff 1f       	adc	r31, r31
     708:	e8 0d       	add	r30, r8
     70a:	f9 1d       	adc	r31, r9
     70c:	80 81       	ld	r24, Z
     70e:	f5 01       	movw	r30, r10
     710:	80 83       	st	Z, r24
	break;
     712:	22 c0       	rjmp	.+68     	; 0x758 <KEYPAD_FindKey+0xe0>
	case 0b1101:	
	*Loc_keyPress=KEYPAD_SYMBOL[(4*i)+1];
     714:	f7 01       	movw	r30, r14
     716:	ee 0f       	add	r30, r30
     718:	ff 1f       	adc	r31, r31
     71a:	ee 0f       	add	r30, r30
     71c:	ff 1f       	adc	r31, r31
     71e:	e8 0d       	add	r30, r8
     720:	f9 1d       	adc	r31, r9
     722:	81 81       	ldd	r24, Z+1	; 0x01
     724:	f5 01       	movw	r30, r10
     726:	80 83       	st	Z, r24
	break;
     728:	17 c0       	rjmp	.+46     	; 0x758 <KEYPAD_FindKey+0xe0>
	case 0b1011:	
	*Loc_keyPress=KEYPAD_SYMBOL[(4*i)+2];
     72a:	f7 01       	movw	r30, r14
     72c:	ee 0f       	add	r30, r30
     72e:	ff 1f       	adc	r31, r31
     730:	ee 0f       	add	r30, r30
     732:	ff 1f       	adc	r31, r31
     734:	e8 0d       	add	r30, r8
     736:	f9 1d       	adc	r31, r9
     738:	82 81       	ldd	r24, Z+2	; 0x02
     73a:	f5 01       	movw	r30, r10
     73c:	80 83       	st	Z, r24
	break;
     73e:	0c c0       	rjmp	.+24     	; 0x758 <KEYPAD_FindKey+0xe0>
	case 0b0111:	
	*Loc_keyPress=KEYPAD_SYMBOL[(4*i)+3];
     740:	f7 01       	movw	r30, r14
     742:	ee 0f       	add	r30, r30
     744:	ff 1f       	adc	r31, r31
     746:	ee 0f       	add	r30, r30
     748:	ff 1f       	adc	r31, r31
     74a:	e8 0d       	add	r30, r8
     74c:	f9 1d       	adc	r31, r9
     74e:	83 81       	ldd	r24, Z+3	; 0x03
     750:	f5 01       	movw	r30, r10
     752:	80 83       	st	Z, r24
	break;
     754:	01 c0       	rjmp	.+2      	; 0x758 <KEYPAD_FindKey+0xe0>
	default:
	ERROR_KEYPAD_RET=NO_KEY_PRESSED;
     756:	76 2c       	mov	r7, r6
  ERROR_KEYPAD_STATUS ERROR_KEYPAD_RET=ERROR_FREE;
  //u8 *Local_keypresed=Loc_keyPress;
  u8 temp=0b00;
  //u8 pin=0;
  u8 reg;
  for(u8 i=0;i<RAW_NUM;i++)
     758:	1f 5f       	subi	r17, 0xFF	; 255
     75a:	80 91 60 00 	lds	r24, 0x0060
     75e:	18 17       	cp	r17, r24
     760:	08 f4       	brcc	.+2      	; 0x764 <KEYPAD_FindKey+0xec>
     762:	b0 cf       	rjmp	.-160    	; 0x6c4 <KEYPAD_FindKey+0x4c>
     764:	01 c0       	rjmp	.+2      	; 0x768 <KEYPAD_FindKey+0xf0>
	
//u8KEYPAD_SYMBOL[4]={0b1111,0b01111,0b1011,0b1101,0b1110};
	
ERROR_KEYPAD_STATUS KEYPAD_FindKey(u8 *Loc_keyPress)
{
  ERROR_KEYPAD_STATUS ERROR_KEYPAD_RET=ERROR_FREE;
     766:	77 24       	eor	r7, r7
	
   }
  }   	
	return ERROR_KEYPAD_RET;

}
     768:	87 2d       	mov	r24, r7
     76a:	0f 90       	pop	r0
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	ff 90       	pop	r15
     776:	ef 90       	pop	r14
     778:	df 90       	pop	r13
     77a:	cf 90       	pop	r12
     77c:	bf 90       	pop	r11
     77e:	af 90       	pop	r10
     780:	9f 90       	pop	r9
     782:	8f 90       	pop	r8
     784:	7f 90       	pop	r7
     786:	6f 90       	pop	r6
     788:	08 95       	ret

0000078a <LCD_voidWriteCharacter>:
     78a:	cf 93       	push	r28
     78c:	c8 2f       	mov	r28, r24
     78e:	89 e0       	ldi	r24, 0x09	; 9
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     796:	8a e0       	ldi	r24, 0x0A	; 10
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     79e:	6c 2f       	mov	r22, r28
     7a0:	61 70       	andi	r22, 0x01	; 1
     7a2:	80 e1       	ldi	r24, 0x10	; 16
     7a4:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     7a8:	6c 2f       	mov	r22, r28
     7aa:	66 95       	lsr	r22
     7ac:	61 70       	andi	r22, 0x01	; 1
     7ae:	81 e1       	ldi	r24, 0x11	; 17
     7b0:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     7b4:	6c 2f       	mov	r22, r28
     7b6:	66 95       	lsr	r22
     7b8:	66 95       	lsr	r22
     7ba:	61 70       	andi	r22, 0x01	; 1
     7bc:	82 e1       	ldi	r24, 0x12	; 18
     7be:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     7c2:	6c 2f       	mov	r22, r28
     7c4:	66 95       	lsr	r22
     7c6:	66 95       	lsr	r22
     7c8:	66 95       	lsr	r22
     7ca:	61 70       	andi	r22, 0x01	; 1
     7cc:	83 e1       	ldi	r24, 0x13	; 19
     7ce:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     7d2:	6c 2f       	mov	r22, r28
     7d4:	62 95       	swap	r22
     7d6:	6f 70       	andi	r22, 0x0F	; 15
     7d8:	61 70       	andi	r22, 0x01	; 1
     7da:	84 e1       	ldi	r24, 0x14	; 20
     7dc:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     7e0:	6c 2f       	mov	r22, r28
     7e2:	62 95       	swap	r22
     7e4:	66 95       	lsr	r22
     7e6:	67 70       	andi	r22, 0x07	; 7
     7e8:	61 70       	andi	r22, 0x01	; 1
     7ea:	85 e1       	ldi	r24, 0x15	; 21
     7ec:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     7f0:	6c 2f       	mov	r22, r28
     7f2:	62 95       	swap	r22
     7f4:	66 95       	lsr	r22
     7f6:	66 95       	lsr	r22
     7f8:	63 70       	andi	r22, 0x03	; 3
     7fa:	61 70       	andi	r22, 0x01	; 1
     7fc:	86 e1       	ldi	r24, 0x16	; 22
     7fe:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     802:	6c 2f       	mov	r22, r28
     804:	66 1f       	adc	r22, r22
     806:	66 27       	eor	r22, r22
     808:	66 1f       	adc	r22, r22
     80a:	87 e1       	ldi	r24, 0x17	; 23
     80c:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     810:	88 e0       	ldi	r24, 0x08	; 8
     812:	61 e0       	ldi	r22, 0x01	; 1
     814:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     818:	87 e8       	ldi	r24, 0x87	; 135
     81a:	93 e1       	ldi	r25, 0x13	; 19
     81c:	01 97       	sbiw	r24, 0x01	; 1
     81e:	f1 f7       	brne	.-4      	; 0x81c <LCD_voidWriteCharacter+0x92>
     820:	00 c0       	rjmp	.+0      	; 0x822 <LCD_voidWriteCharacter+0x98>
     822:	00 00       	nop
     824:	88 e0       	ldi	r24, 0x08	; 8
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     82c:	cf 91       	pop	r28
     82e:	08 95       	ret

00000830 <LCD_voidSendCommand>:
     830:	cf 93       	push	r28
     832:	c8 2f       	mov	r28, r24
     834:	8a e0       	ldi	r24, 0x0A	; 10
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     83c:	89 e0       	ldi	r24, 0x09	; 9
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     844:	6c 2f       	mov	r22, r28
     846:	61 70       	andi	r22, 0x01	; 1
     848:	80 e1       	ldi	r24, 0x10	; 16
     84a:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     84e:	6c 2f       	mov	r22, r28
     850:	66 95       	lsr	r22
     852:	61 70       	andi	r22, 0x01	; 1
     854:	81 e1       	ldi	r24, 0x11	; 17
     856:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     85a:	6c 2f       	mov	r22, r28
     85c:	66 95       	lsr	r22
     85e:	66 95       	lsr	r22
     860:	61 70       	andi	r22, 0x01	; 1
     862:	82 e1       	ldi	r24, 0x12	; 18
     864:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     868:	6c 2f       	mov	r22, r28
     86a:	66 95       	lsr	r22
     86c:	66 95       	lsr	r22
     86e:	66 95       	lsr	r22
     870:	61 70       	andi	r22, 0x01	; 1
     872:	83 e1       	ldi	r24, 0x13	; 19
     874:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     878:	6c 2f       	mov	r22, r28
     87a:	62 95       	swap	r22
     87c:	6f 70       	andi	r22, 0x0F	; 15
     87e:	61 70       	andi	r22, 0x01	; 1
     880:	84 e1       	ldi	r24, 0x14	; 20
     882:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     886:	6c 2f       	mov	r22, r28
     888:	62 95       	swap	r22
     88a:	66 95       	lsr	r22
     88c:	67 70       	andi	r22, 0x07	; 7
     88e:	61 70       	andi	r22, 0x01	; 1
     890:	85 e1       	ldi	r24, 0x15	; 21
     892:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     896:	6c 2f       	mov	r22, r28
     898:	62 95       	swap	r22
     89a:	66 95       	lsr	r22
     89c:	66 95       	lsr	r22
     89e:	63 70       	andi	r22, 0x03	; 3
     8a0:	61 70       	andi	r22, 0x01	; 1
     8a2:	86 e1       	ldi	r24, 0x16	; 22
     8a4:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     8a8:	6c 2f       	mov	r22, r28
     8aa:	66 1f       	adc	r22, r22
     8ac:	66 27       	eor	r22, r22
     8ae:	66 1f       	adc	r22, r22
     8b0:	87 e1       	ldi	r24, 0x17	; 23
     8b2:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     8b6:	88 e0       	ldi	r24, 0x08	; 8
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8be:	00 00       	nop
     8c0:	88 e0       	ldi	r24, 0x08	; 8
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     8c8:	81 e2       	ldi	r24, 0x21	; 33
     8ca:	8a 95       	dec	r24
     8cc:	f1 f7       	brne	.-4      	; 0x8ca <__stack+0x6b>
     8ce:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8d0:	83 ec       	ldi	r24, 0xC3	; 195
     8d2:	99 e0       	ldi	r25, 0x09	; 9
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	f1 f7       	brne	.-4      	; 0x8d4 <__stack+0x75>
     8d8:	00 c0       	rjmp	.+0      	; 0x8da <__stack+0x7b>
     8da:	00 00       	nop
     8dc:	cf 91       	pop	r28
     8de:	08 95       	ret

000008e0 <LCD_voidInit>:
     8e0:	80 e1       	ldi	r24, 0x10	; 16
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	0e 94 09 06 	call	0xc12	; 0xc12 <Port_setPinDirection>
     8e8:	81 e1       	ldi	r24, 0x11	; 17
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	0e 94 09 06 	call	0xc12	; 0xc12 <Port_setPinDirection>
     8f0:	82 e1       	ldi	r24, 0x12	; 18
     8f2:	61 e0       	ldi	r22, 0x01	; 1
     8f4:	0e 94 09 06 	call	0xc12	; 0xc12 <Port_setPinDirection>
     8f8:	83 e1       	ldi	r24, 0x13	; 19
     8fa:	61 e0       	ldi	r22, 0x01	; 1
     8fc:	0e 94 09 06 	call	0xc12	; 0xc12 <Port_setPinDirection>
     900:	84 e1       	ldi	r24, 0x14	; 20
     902:	61 e0       	ldi	r22, 0x01	; 1
     904:	0e 94 09 06 	call	0xc12	; 0xc12 <Port_setPinDirection>
     908:	85 e1       	ldi	r24, 0x15	; 21
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	0e 94 09 06 	call	0xc12	; 0xc12 <Port_setPinDirection>
     910:	86 e1       	ldi	r24, 0x16	; 22
     912:	61 e0       	ldi	r22, 0x01	; 1
     914:	0e 94 09 06 	call	0xc12	; 0xc12 <Port_setPinDirection>
     918:	87 e1       	ldi	r24, 0x17	; 23
     91a:	61 e0       	ldi	r22, 0x01	; 1
     91c:	0e 94 09 06 	call	0xc12	; 0xc12 <Port_setPinDirection>
     920:	8a e0       	ldi	r24, 0x0A	; 10
     922:	61 e0       	ldi	r22, 0x01	; 1
     924:	0e 94 09 06 	call	0xc12	; 0xc12 <Port_setPinDirection>
     928:	89 e0       	ldi	r24, 0x09	; 9
     92a:	61 e0       	ldi	r22, 0x01	; 1
     92c:	0e 94 09 06 	call	0xc12	; 0xc12 <Port_setPinDirection>
     930:	88 e0       	ldi	r24, 0x08	; 8
     932:	61 e0       	ldi	r22, 0x01	; 1
     934:	0e 94 09 06 	call	0xc12	; 0xc12 <Port_setPinDirection>
     938:	83 e0       	ldi	r24, 0x03	; 3
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_WritrPin>
     940:	87 e8       	ldi	r24, 0x87	; 135
     942:	93 e1       	ldi	r25, 0x13	; 19
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	f1 f7       	brne	.-4      	; 0x944 <LCD_voidInit+0x64>
     948:	00 c0       	rjmp	.+0      	; 0x94a <LCD_voidInit+0x6a>
     94a:	00 00       	nop
     94c:	88 e3       	ldi	r24, 0x38	; 56
     94e:	0e 94 18 04 	call	0x830	; 0x830 <LCD_voidSendCommand>
     952:	8e e0       	ldi	r24, 0x0E	; 14
     954:	0e 94 18 04 	call	0x830	; 0x830 <LCD_voidSendCommand>
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	0e 94 18 04 	call	0x830	; 0x830 <LCD_voidSendCommand>
     95e:	83 ef       	ldi	r24, 0xF3	; 243
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	01 97       	sbiw	r24, 0x01	; 1
     964:	f1 f7       	brne	.-4      	; 0x962 <LCD_voidInit+0x82>
     966:	00 c0       	rjmp	.+0      	; 0x968 <LCD_voidInit+0x88>
     968:	00 00       	nop
     96a:	86 e0       	ldi	r24, 0x06	; 6
     96c:	0e 94 18 04 	call	0x830	; 0x830 <LCD_voidSendCommand>
     970:	08 95       	ret

00000972 <LCD_voidCustomChar>:
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	06 2f       	mov	r16, r22
     97c:	17 2f       	mov	r17, r23
     97e:	88 30       	cpi	r24, 0x08	; 8
     980:	70 f4       	brcc	.+28     	; 0x99e <LCD_voidCustomChar+0x2c>
     982:	88 0f       	add	r24, r24
     984:	88 0f       	add	r24, r24
     986:	88 0f       	add	r24, r24
     988:	80 5c       	subi	r24, 0xC0	; 192
     98a:	0e 94 18 04 	call	0x830	; 0x830 <LCD_voidSendCommand>
     98e:	c0 2f       	mov	r28, r16
     990:	d1 2f       	mov	r29, r17
     992:	18 e0       	ldi	r17, 0x08	; 8
     994:	89 91       	ld	r24, Y+
     996:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_voidWriteCharacter>
     99a:	11 50       	subi	r17, 0x01	; 1
     99c:	d9 f7       	brne	.-10     	; 0x994 <LCD_voidCustomChar+0x22>
     99e:	80 e8       	ldi	r24, 0x80	; 128
     9a0:	0e 94 18 04 	call	0x830	; 0x830 <LCD_voidSendCommand>
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	08 95       	ret

000009ae <LCD_voidWriteString>:
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	ec 01       	movw	r28, r24
     9b4:	88 81       	ld	r24, Y
     9b6:	88 23       	and	r24, r24
     9b8:	31 f0       	breq	.+12     	; 0x9c6 <LCD_voidWriteString+0x18>
     9ba:	21 96       	adiw	r28, 0x01	; 1
     9bc:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_voidWriteCharacter>
     9c0:	89 91       	ld	r24, Y+
     9c2:	88 23       	and	r24, r24
     9c4:	d9 f7       	brne	.-10     	; 0x9bc <LCD_voidWriteString+0xe>
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <LCD_voidSetCursor>:
     9cc:	84 31       	cpi	r24, 0x14	; 20
     9ce:	a8 f4       	brcc	.+42     	; 0x9fa <LCD_voidSetCursor+0x2e>
     9d0:	64 30       	cpi	r22, 0x04	; 4
     9d2:	98 f4       	brcc	.+38     	; 0x9fa <LCD_voidSetCursor+0x2e>
     9d4:	61 30       	cpi	r22, 0x01	; 1
     9d6:	39 f0       	breq	.+14     	; 0x9e6 <LCD_voidSetCursor+0x1a>
     9d8:	61 30       	cpi	r22, 0x01	; 1
     9da:	58 f0       	brcs	.+22     	; 0x9f2 <LCD_voidSetCursor+0x26>
     9dc:	62 30       	cpi	r22, 0x02	; 2
     9de:	29 f0       	breq	.+10     	; 0x9ea <LCD_voidSetCursor+0x1e>
     9e0:	63 30       	cpi	r22, 0x03	; 3
     9e2:	41 f4       	brne	.+16     	; 0x9f4 <LCD_voidSetCursor+0x28>
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <LCD_voidSetCursor+0x22>
     9e6:	90 ec       	ldi	r25, 0xC0	; 192
     9e8:	05 c0       	rjmp	.+10     	; 0x9f4 <LCD_voidSetCursor+0x28>
     9ea:	94 e9       	ldi	r25, 0x94	; 148
     9ec:	03 c0       	rjmp	.+6      	; 0x9f4 <LCD_voidSetCursor+0x28>
     9ee:	94 ed       	ldi	r25, 0xD4	; 212
     9f0:	01 c0       	rjmp	.+2      	; 0x9f4 <LCD_voidSetCursor+0x28>
     9f2:	90 e8       	ldi	r25, 0x80	; 128
     9f4:	89 0f       	add	r24, r25
     9f6:	0e 94 18 04 	call	0x830	; 0x830 <LCD_voidSendCommand>
     9fa:	08 95       	ret

000009fc <LCD_voidClear>:
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	0e 94 18 04 	call	0x830	; 0x830 <LCD_voidSendCommand>
     a02:	08 95       	ret

00000a04 <Lcd_voidShiftRight>:
     a04:	8c e1       	ldi	r24, 0x1C	; 28
     a06:	0e 94 18 04 	call	0x830	; 0x830 <LCD_voidSendCommand>
     a0a:	08 95       	ret

00000a0c <Lcd_voidShiftLeft>:
     a0c:	88 e1       	ldi	r24, 0x18	; 24
     a0e:	0e 94 18 04 	call	0x830	; 0x830 <LCD_voidSendCommand>
     a12:	08 95       	ret

00000a14 <PTR_TO_FUN>:
	LCD_voidSetCursor(6,0);

}
void PTR_TO_FUN(void)
{
	TGL_BIT(PORTA,LED_PIN);
     a14:	9b b3       	in	r25, 0x1b	; 27
     a16:	84 e0       	ldi	r24, 0x04	; 4
     a18:	89 27       	eor	r24, r25
     a1a:	8b bb       	out	0x1b, r24	; 27
     a1c:	08 95       	ret

00000a1e <lcd_voidPrintFloat>:
	}	
}


lcd_voidPrintFloat(float Float_val )
{
     a1e:	cf 92       	push	r12
     a20:	df 92       	push	r13
     a22:	ef 92       	push	r14
     a24:	ff 92       	push	r15
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	6b 01       	movw	r12, r22
     a2c:	7c 01       	movw	r14, r24
	check=(GET_BIT(PORTA,2));
     a2e:	8b b3       	in	r24, 0x1b	; 27
     a30:	86 95       	lsr	r24
     a32:	86 95       	lsr	r24
     a34:	81 70       	andi	r24, 0x01	; 1
     a36:	80 93 8c 00 	sts	0x008C, r24
	u16 value_lcd=0;
	u8 val_2=0;
	if(check==1)
     a3a:	80 91 8c 00 	lds	r24, 0x008C
     a3e:	81 30       	cpi	r24, 0x01	; 1
     a40:	e9 f5       	brne	.+122    	; 0xabc <lcd_voidPrintFloat+0x9e>
	{
		value_lcd =(u16) Float_val;
     a42:	c7 01       	movw	r24, r14
     a44:	b6 01       	movw	r22, r12
     a46:	0e 94 6d 08 	call	0x10da	; 0x10da <__fixunssfsi>
     a4a:	dc 01       	movw	r26, r24
     a4c:	cb 01       	movw	r24, r22
     a4e:	ec 01       	movw	r28, r24
		LCD_voidWriteCharacter(value_lcd+'0');
     a50:	80 5d       	subi	r24, 0xD0	; 208
     a52:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_voidWriteCharacter>
		LCD_voidWriteCharacter('.');
     a56:	8e e2       	ldi	r24, 0x2E	; 46
     a58:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_voidWriteCharacter>
		Float_val=Float_val-value_lcd;
     a5c:	be 01       	movw	r22, r28
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 99 08 	call	0x1132	; 0x1132 <__floatunsisf>
     a66:	9b 01       	movw	r18, r22
     a68:	ac 01       	movw	r20, r24
     a6a:	c7 01       	movw	r24, r14
     a6c:	b6 01       	movw	r22, r12
     a6e:	0e 94 08 08 	call	0x1010	; 0x1010 <__subsf3>
		value_lcd=(u16)(Float_val*100);
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	48 ec       	ldi	r20, 0xC8	; 200
     a78:	52 e4       	ldi	r21, 0x42	; 66
     a7a:	0e 94 27 09 	call	0x124e	; 0x124e <__mulsf3>
     a7e:	46 2f       	mov	r20, r22
     a80:	57 2f       	mov	r21, r23
     a82:	68 2f       	mov	r22, r24
     a84:	79 2f       	mov	r23, r25
     a86:	cb 01       	movw	r24, r22
     a88:	ba 01       	movw	r22, r20
     a8a:	0e 94 6d 08 	call	0x10da	; 0x10da <__fixunssfsi>
     a8e:	dc 01       	movw	r26, r24
     a90:	cb 01       	movw	r24, r22
		val_2=value_lcd/10;
     a92:	6a e0       	ldi	r22, 0x0A	; 10
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	0e 94 8a 09 	call	0x1314	; 0x1314 <__udivmodhi4>
     a9a:	c8 2f       	mov	r28, r24
		LCD_voidWriteCharacter(val_2+'0');
     a9c:	86 2f       	mov	r24, r22
     a9e:	80 5d       	subi	r24, 0xD0	; 208
     aa0:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_voidWriteCharacter>
		value_lcd%=10;
		LCD_voidWriteCharacter(value_lcd+'0');
     aa4:	8c 2f       	mov	r24, r28
     aa6:	80 5d       	subi	r24, 0xD0	; 208
     aa8:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_voidWriteCharacter>
		LCD_voidWriteCharacter(' ');
     aac:	80 e2       	ldi	r24, 0x20	; 32
     aae:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_voidWriteCharacter>
		LCD_voidWriteString("V ");
     ab2:	85 e7       	ldi	r24, 0x75	; 117
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <LCD_voidWriteString>
     aba:	39 c0       	rjmp	.+114    	; 0xb2e <lcd_voidPrintFloat+0x110>
	}
	else
	{
		value_lcd =(u16) Float_val;
     abc:	c7 01       	movw	r24, r14
     abe:	b6 01       	movw	r22, r12
     ac0:	0e 94 6d 08 	call	0x10da	; 0x10da <__fixunssfsi>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	ec 01       	movw	r28, r24
		LCD_voidWriteCharacter(value_lcd+'0');
     aca:	80 5d       	subi	r24, 0xD0	; 208
     acc:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_voidWriteCharacter>
		Float_val=Float_val-value_lcd;
     ad0:	be 01       	movw	r22, r28
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 99 08 	call	0x1132	; 0x1132 <__floatunsisf>
     ada:	9b 01       	movw	r18, r22
     adc:	ac 01       	movw	r20, r24
     ade:	c7 01       	movw	r24, r14
     ae0:	b6 01       	movw	r22, r12
     ae2:	0e 94 08 08 	call	0x1010	; 0x1010 <__subsf3>
		value_lcd=(u16)(Float_val*100);
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	48 ec       	ldi	r20, 0xC8	; 200
     aec:	52 e4       	ldi	r21, 0x42	; 66
     aee:	0e 94 27 09 	call	0x124e	; 0x124e <__mulsf3>
     af2:	46 2f       	mov	r20, r22
     af4:	57 2f       	mov	r21, r23
     af6:	68 2f       	mov	r22, r24
     af8:	79 2f       	mov	r23, r25
     afa:	cb 01       	movw	r24, r22
     afc:	ba 01       	movw	r22, r20
     afe:	0e 94 6d 08 	call	0x10da	; 0x10da <__fixunssfsi>
     b02:	dc 01       	movw	r26, r24
     b04:	cb 01       	movw	r24, r22
		val_2=value_lcd/10;
     b06:	6a e0       	ldi	r22, 0x0A	; 10
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	0e 94 8a 09 	call	0x1314	; 0x1314 <__udivmodhi4>
     b0e:	c8 2f       	mov	r28, r24
		LCD_voidWriteCharacter(val_2+'0');
     b10:	86 2f       	mov	r24, r22
     b12:	80 5d       	subi	r24, 0xD0	; 208
     b14:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_voidWriteCharacter>
		value_lcd%=10;
		LCD_voidWriteCharacter(value_lcd+'0');
     b18:	8c 2f       	mov	r24, r28
     b1a:	80 5d       	subi	r24, 0xD0	; 208
     b1c:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_voidWriteCharacter>
		LCD_voidWriteCharacter(' ');
     b20:	80 e2       	ldi	r24, 0x20	; 32
     b22:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_voidWriteCharacter>
		LCD_voidWriteString("mv");
     b26:	88 e7       	ldi	r24, 0x78	; 120
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <LCD_voidWriteString>
	}
	LCD_voidSetCursor(6,0);
     b2e:	86 e0       	ldi	r24, 0x06	; 6
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	0e 94 e6 04 	call	0x9cc	; 0x9cc <LCD_voidSetCursor>

}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	df 90       	pop	r13
     b40:	cf 90       	pop	r12
     b42:	08 95       	ret

00000b44 <main>:
u16 previous_read=0;

void main(void)
{

	Global_Interrupt_EnablE();
     b44:	0e 94 e5 01 	call	0x3ca	; 0x3ca <Global_Interrupt_EnablE>
	Port_setPinDirection(LED_PIN,PIN_OUTPUT);
     b48:	82 e0       	ldi	r24, 0x02	; 2
     b4a:	61 e0       	ldi	r22, 0x01	; 1
     b4c:	0e 94 09 06 	call	0xc12	; 0xc12 <Port_setPinDirection>
	extrnal_int_init(EXT_INT0,INT_FALLING_EDGE,&PTR_TO_FUN);
     b50:	86 e0       	ldi	r24, 0x06	; 6
     b52:	62 e0       	ldi	r22, 0x02	; 2
     b54:	4a e0       	ldi	r20, 0x0A	; 10
     b56:	55 e0       	ldi	r21, 0x05	; 5
     b58:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <extrnal_int_init>
	Port_SetPinMode(PIN_ID26,PIN_IN_PULLUP);//	set INTERUPT0 PIN input pullup 
     b5c:	8a e1       	ldi	r24, 0x1A	; 26
     b5e:	63 e0       	ldi	r22, 0x03	; 3
     b60:	0e 94 a9 06 	call	0xd52	; 0xd52 <Port_SetPinMode>
	Enable_EXT_INT(EXT_INT0);	
     b64:	86 e0       	ldi	r24, 0x06	; 6
     b66:	0e 94 2c 02 	call	0x458	; 0x458 <Enable_EXT_INT>
	LCD_voidInit();
     b6a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <LCD_voidInit>
	ADC_voidInit();
     b6e:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidInit>
	LCD_voidWriteString("VOLT =");	
     b72:	8b e7       	ldi	r24, 0x7B	; 123
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 d7 04 	call	0x9ae	; 0x9ae <LCD_voidWriteString>
	while(1){
	ADC_read(ADC_CH0,&adc_read);
     b7a:	0d e8       	ldi	r16, 0x8D	; 141
     b7c:	10 e0       	ldi	r17, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	b8 01       	movw	r22, r16
     b82:	0e 94 55 00 	call	0xaa	; 0xaa <ADC_read>
	Float_val =(float)(adc_read*5)/1024; 
     b86:	c0 91 8d 00 	lds	r28, 0x008D
     b8a:	d0 91 8e 00 	lds	r29, 0x008E
     b8e:	be 01       	movw	r22, r28
     b90:	66 0f       	add	r22, r22
     b92:	77 1f       	adc	r23, r23
     b94:	66 0f       	add	r22, r22
     b96:	77 1f       	adc	r23, r23
     b98:	6c 0f       	add	r22, r28
     b9a:	7d 1f       	adc	r23, r29
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 99 08 	call	0x1132	; 0x1132 <__floatunsisf>
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	40 e8       	ldi	r20, 0x80	; 128
     baa:	5a e3       	ldi	r21, 0x3A	; 58
     bac:	0e 94 27 09 	call	0x124e	; 0x124e <__mulsf3>
     bb0:	e6 2f       	mov	r30, r22
     bb2:	f7 2f       	mov	r31, r23
     bb4:	46 2f       	mov	r20, r22
     bb6:	57 2f       	mov	r21, r23
     bb8:	68 2f       	mov	r22, r24
     bba:	79 2f       	mov	r23, r25
     bbc:	40 93 90 00 	sts	0x0090, r20
     bc0:	50 93 91 00 	sts	0x0091, r21
     bc4:	60 93 92 00 	sts	0x0092, r22
     bc8:	70 93 93 00 	sts	0x0093, r23
	if(previous_read !=adc_read)
     bcc:	20 91 8a 00 	lds	r18, 0x008A
     bd0:	30 91 8b 00 	lds	r19, 0x008B
     bd4:	c2 17       	cp	r28, r18
     bd6:	d3 07       	cpc	r29, r19
     bd8:	91 f2       	breq	.-92     	; 0xb7e <main+0x3a>
	{
		lcd_voidPrintFloat(Float_val);
     bda:	8e 2f       	mov	r24, r30
     bdc:	9f 2f       	mov	r25, r31
     bde:	a6 2f       	mov	r26, r22
     be0:	b7 2f       	mov	r27, r23
     be2:	bc 01       	movw	r22, r24
     be4:	cd 01       	movw	r24, r26
     be6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <lcd_voidPrintFloat>
		previous_read=adc_read;		
     bea:	80 91 8d 00 	lds	r24, 0x008D
     bee:	90 91 8e 00 	lds	r25, 0x008E
     bf2:	90 93 8b 00 	sts	0x008B, r25
     bf6:	80 93 8a 00 	sts	0x008A, r24
     bfa:	c1 cf       	rjmp	.-126    	; 0xb7e <main+0x3a>

00000bfc <Port_Init>:
    #define PIN_IN_PULLUP 0

    #undef  PIN_OUT_LOW
    #define PIN_OUT_LOW 1

    DDRA=CONC(PIN_ID7_MODE,PIN_ID6_MODE,PIN_ID5_MODE,PIN_ID4_MODE,PIN_ID3_MODE,PIN_ID2_MODE,PIN_ID1_MODE,PIN_ID0_MODE);
     bfc:	83 e0       	ldi	r24, 0x03	; 3
     bfe:	8a bb       	out	0x1a, r24	; 26
    DDRB=CONC(PIN_ID15_MODE,PIN_ID14_MODE,PIN_ID13_MODE,PIN_ID12_MODE,PIN_ID11_MODE,PIN_ID10_MODE,PIN_ID9_MODE,PIN_ID8_MODE);
     c00:	17 ba       	out	0x17, r1	; 23
    DDRC=CONC(PIN_ID23_MODE,PIN_ID22_MODE,PIN_ID21_MODE,PIN_ID20_MODE,PIN_ID19_MODE,PIN_ID18_MODE,PIN_ID17_MODE,PIN_ID16_MODE);
     c02:	14 ba       	out	0x14, r1	; 20
    DDRD=CONC(PIN_ID31_MODE,PIN_ID30_MODE,PIN_ID29_MODE,PIN_ID28_MODE,PIN_ID27_MODE,PIN_ID26_MODE,PIN_ID25_MODE,PIN_ID24_MODE);	
     c04:	11 ba       	out	0x11, r1	; 17
    #define PIN_IN_FLOAT 0

    #undef PIN_IN_PULLUP
    #define PIN_IN_PULLUP 1
	
    PORTA=CONC(PIN_ID7_MODE,PIN_ID6_MODE,PIN_ID5_MODE,PIN_ID4_MODE,PIN_ID3_MODE,PIN_ID2_MODE,PIN_ID1_MODE,PIN_ID0_MODE);
     c06:	89 e0       	ldi	r24, 0x09	; 9
     c08:	8b bb       	out	0x1b, r24	; 27
    PORTB=CONC(PIN_ID15_MODE,PIN_ID14_MODE,PIN_ID13_MODE,PIN_ID12_MODE,PIN_ID11_MODE,PIN_ID10_MODE,PIN_ID9_MODE,PIN_ID8_MODE);
     c0a:	18 ba       	out	0x18, r1	; 24
    PORTC=CONC(PIN_ID23_MODE,PIN_ID22_MODE,PIN_ID21_MODE,PIN_ID20_MODE,PIN_ID19_MODE,PIN_ID18_MODE,PIN_ID17_MODE,PIN_ID16_MODE);
     c0c:	15 ba       	out	0x15, r1	; 21
    PORTD=CONC(PIN_ID31_MODE,PIN_ID30_MODE,PIN_ID29_MODE,PIN_ID28_MODE,PIN_ID27_MODE,PIN_ID26_MODE,PIN_ID25_MODE,PIN_ID24_MODE);
     c0e:	12 ba       	out	0x12, r1	; 18

	#undef PIN_IN_PULLUP
	#define PIN_IN_PULLUP 3	


}
     c10:	08 95       	ret

00000c12 <Port_setPinDirection>:
ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)
{
	ERROR_TYPES ERROR_LOC_RET =OK;	
    u8 loc_pin_id =pin_id % 8;
     c12:	98 2f       	mov	r25, r24
     c14:	97 70       	andi	r25, 0x07	; 7

    u8 loc_port_num=pin_id/8;
     c16:	86 95       	lsr	r24
     c18:	86 95       	lsr	r24
     c1a:	86 95       	lsr	r24
    switch(loc_port_num)
     c1c:	81 30       	cpi	r24, 0x01	; 1
     c1e:	59 f1       	breq	.+86     	; 0xc76 <Port_setPinDirection+0x64>
     c20:	81 30       	cpi	r24, 0x01	; 1
     c22:	38 f0       	brcs	.+14     	; 0xc32 <Port_setPinDirection+0x20>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	09 f4       	brne	.+2      	; 0xc2a <Port_setPinDirection+0x18>
     c28:	48 c0       	rjmp	.+144    	; 0xcba <Port_setPinDirection+0xa8>
     c2a:	83 30       	cpi	r24, 0x03	; 3
     c2c:	09 f0       	breq	.+2      	; 0xc30 <Port_setPinDirection+0x1e>
     c2e:	87 c0       	rjmp	.+270    	; 0xd3e <Port_setPinDirection+0x12c>
     c30:	65 c0       	rjmp	.+202    	; 0xcfc <Port_setPinDirection+0xea>
    {
        case u8PORTA:

        if(pin_direction==PIN_OUTPUT)
     c32:	61 30       	cpi	r22, 0x01	; 1
     c34:	71 f4       	brne	.+28     	; 0xc52 <Port_setPinDirection+0x40>
        {
            SET_BIT(DDRA,loc_pin_id);
     c36:	4a b3       	in	r20, 0x1a	; 26
     c38:	21 e0       	ldi	r18, 0x01	; 1
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	b9 01       	movw	r22, r18
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <Port_setPinDirection+0x32>
     c40:	66 0f       	add	r22, r22
     c42:	77 1f       	adc	r23, r23
     c44:	9a 95       	dec	r25
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <Port_setPinDirection+0x2e>
     c48:	cb 01       	movw	r24, r22
     c4a:	84 2b       	or	r24, r20
     c4c:	8a bb       	out	0x1a, r24	; 26


}
ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)
{
	ERROR_TYPES ERROR_LOC_RET =OK;	
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	08 95       	ret

        if(pin_direction==PIN_OUTPUT)
        {
            SET_BIT(DDRA,loc_pin_id);
        }
        else if(pin_direction==PIN_INPUT)
     c52:	66 23       	and	r22, r22
     c54:	09 f0       	breq	.+2      	; 0xc58 <Port_setPinDirection+0x46>
     c56:	75 c0       	rjmp	.+234    	; 0xd42 <Port_setPinDirection+0x130>
        {
            CLR_BIT(DDRA,loc_pin_id);
     c58:	4a b3       	in	r20, 0x1a	; 26
     c5a:	21 e0       	ldi	r18, 0x01	; 1
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	b9 01       	movw	r22, r18
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <Port_setPinDirection+0x54>
     c62:	66 0f       	add	r22, r22
     c64:	77 1f       	adc	r23, r23
     c66:	9a 95       	dec	r25
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <Port_setPinDirection+0x50>
     c6a:	cb 01       	movw	r24, r22
     c6c:	80 95       	com	r24
     c6e:	84 23       	and	r24, r20
     c70:	8a bb       	out	0x1a, r24	; 26


}
ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)
{
	ERROR_TYPES ERROR_LOC_RET =OK;	
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	08 95       	ret
        {
            CLR_BIT(DDRA,loc_pin_id);
        } 
		break;     
        case u8PORTB:
        if(pin_direction==PIN_OUTPUT)
     c76:	61 30       	cpi	r22, 0x01	; 1
     c78:	71 f4       	brne	.+28     	; 0xc96 <Port_setPinDirection+0x84>
        {
           SET_BIT(DDRB,loc_pin_id);
     c7a:	47 b3       	in	r20, 0x17	; 23
     c7c:	21 e0       	ldi	r18, 0x01	; 1
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	b9 01       	movw	r22, r18
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <Port_setPinDirection+0x76>
     c84:	66 0f       	add	r22, r22
     c86:	77 1f       	adc	r23, r23
     c88:	9a 95       	dec	r25
     c8a:	e2 f7       	brpl	.-8      	; 0xc84 <Port_setPinDirection+0x72>
     c8c:	cb 01       	movw	r24, r22
     c8e:	84 2b       	or	r24, r20
     c90:	87 bb       	out	0x17, r24	; 23


}
ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)
{
	ERROR_TYPES ERROR_LOC_RET =OK;	
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	08 95       	ret
        case u8PORTB:
        if(pin_direction==PIN_OUTPUT)
        {
           SET_BIT(DDRB,loc_pin_id);
        }
        else if(pin_direction==PIN_INPUT)
     c96:	66 23       	and	r22, r22
     c98:	09 f0       	breq	.+2      	; 0xc9c <Port_setPinDirection+0x8a>
     c9a:	55 c0       	rjmp	.+170    	; 0xd46 <Port_setPinDirection+0x134>
        {
            CLR_BIT(DDRB,loc_pin_id);
     c9c:	47 b3       	in	r20, 0x17	; 23
     c9e:	21 e0       	ldi	r18, 0x01	; 1
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	b9 01       	movw	r22, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <Port_setPinDirection+0x98>
     ca6:	66 0f       	add	r22, r22
     ca8:	77 1f       	adc	r23, r23
     caa:	9a 95       	dec	r25
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <Port_setPinDirection+0x94>
     cae:	cb 01       	movw	r24, r22
     cb0:	80 95       	com	r24
     cb2:	84 23       	and	r24, r20
     cb4:	87 bb       	out	0x17, r24	; 23


}
ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)
{
	ERROR_TYPES ERROR_LOC_RET =OK;	
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	08 95       	ret
            CLR_BIT(DDRB,loc_pin_id);
        }
        break;
        case u8PORTC:

        if(pin_direction==PIN_OUTPUT)
     cba:	61 30       	cpi	r22, 0x01	; 1
     cbc:	71 f4       	brne	.+28     	; 0xcda <Port_setPinDirection+0xc8>
        {
            SET_BIT(DDRC,loc_pin_id);
     cbe:	44 b3       	in	r20, 0x14	; 20
     cc0:	21 e0       	ldi	r18, 0x01	; 1
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	b9 01       	movw	r22, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <Port_setPinDirection+0xba>
     cc8:	66 0f       	add	r22, r22
     cca:	77 1f       	adc	r23, r23
     ccc:	9a 95       	dec	r25
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <Port_setPinDirection+0xb6>
     cd0:	cb 01       	movw	r24, r22
     cd2:	84 2b       	or	r24, r20
     cd4:	84 bb       	out	0x14, r24	; 20


}
ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)
{
	ERROR_TYPES ERROR_LOC_RET =OK;	
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	08 95       	ret

        if(pin_direction==PIN_OUTPUT)
        {
            SET_BIT(DDRC,loc_pin_id);
        }
        else if(pin_direction==PIN_INPUT)
     cda:	66 23       	and	r22, r22
     cdc:	b1 f5       	brne	.+108    	; 0xd4a <Port_setPinDirection+0x138>
        {
            CLR_BIT(DDRC,loc_pin_id);
     cde:	44 b3       	in	r20, 0x14	; 20
     ce0:	21 e0       	ldi	r18, 0x01	; 1
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	b9 01       	movw	r22, r18
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <Port_setPinDirection+0xda>
     ce8:	66 0f       	add	r22, r22
     cea:	77 1f       	adc	r23, r23
     cec:	9a 95       	dec	r25
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <Port_setPinDirection+0xd6>
     cf0:	cb 01       	movw	r24, r22
     cf2:	80 95       	com	r24
     cf4:	84 23       	and	r24, r20
     cf6:	84 bb       	out	0x14, r24	; 20


}
ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)
{
	ERROR_TYPES ERROR_LOC_RET =OK;	
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	08 95       	ret
        {
            CLR_BIT(DDRC,loc_pin_id);
        }
        break;
        case u8PORTD:
        if(pin_direction==PIN_OUTPUT)
     cfc:	61 30       	cpi	r22, 0x01	; 1
     cfe:	71 f4       	brne	.+28     	; 0xd1c <Port_setPinDirection+0x10a>
        {
            SET_BIT(DDRD,loc_pin_id);
     d00:	41 b3       	in	r20, 0x11	; 17
     d02:	21 e0       	ldi	r18, 0x01	; 1
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	b9 01       	movw	r22, r18
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <Port_setPinDirection+0xfc>
     d0a:	66 0f       	add	r22, r22
     d0c:	77 1f       	adc	r23, r23
     d0e:	9a 95       	dec	r25
     d10:	e2 f7       	brpl	.-8      	; 0xd0a <Port_setPinDirection+0xf8>
     d12:	cb 01       	movw	r24, r22
     d14:	84 2b       	or	r24, r20
     d16:	81 bb       	out	0x11, r24	; 17


}
ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)
{
	ERROR_TYPES ERROR_LOC_RET =OK;	
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	08 95       	ret
        case u8PORTD:
        if(pin_direction==PIN_OUTPUT)
        {
            SET_BIT(DDRD,loc_pin_id);
        }
        else if(pin_direction==PIN_INPUT)
     d1c:	66 23       	and	r22, r22
     d1e:	b9 f4       	brne	.+46     	; 0xd4e <Port_setPinDirection+0x13c>
        {
            CLR_BIT(DDRD,loc_pin_id);
     d20:	41 b3       	in	r20, 0x11	; 17
     d22:	21 e0       	ldi	r18, 0x01	; 1
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	b9 01       	movw	r22, r18
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <Port_setPinDirection+0x11c>
     d2a:	66 0f       	add	r22, r22
     d2c:	77 1f       	adc	r23, r23
     d2e:	9a 95       	dec	r25
     d30:	e2 f7       	brpl	.-8      	; 0xd2a <Port_setPinDirection+0x118>
     d32:	cb 01       	movw	r24, r22
     d34:	80 95       	com	r24
     d36:	84 23       	and	r24, r20
     d38:	81 bb       	out	0x11, r24	; 17


}
ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)
{
	ERROR_TYPES ERROR_LOC_RET =OK;	
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	08 95       	ret
        {
            CLR_BIT(DDRD,loc_pin_id);
        }
        break;
    default:
	 ERROR_LOC_RET =PIN_DIR_ERROR;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	08 95       	ret


}
ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)
{
	ERROR_TYPES ERROR_LOC_RET =OK;	
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	08 95       	ret
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	08 95       	ret
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	08 95       	ret
     d4e:	80 e0       	ldi	r24, 0x00	; 0
    default:
	 ERROR_LOC_RET =PIN_DIR_ERROR;
		
    }
 return ERROR_LOC_RET;   
}
     d50:	08 95       	ret

00000d52 <Port_SetPinMode>:
ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
  ERROR_TYPES ERROR_LOC_RET =OK;
    u8 loc_Pin_id= pin_id % 8;
     d52:	98 2f       	mov	r25, r24
     d54:	97 70       	andi	r25, 0x07	; 7
    u8 loc_port_num=pin_id/8;
     d56:	86 95       	lsr	r24
     d58:	86 95       	lsr	r24
     d5a:	86 95       	lsr	r24
    switch(loc_port_num)
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	09 f4       	brne	.+2      	; 0xd62 <Port_SetPinMode+0x10>
     d60:	5a c0       	rjmp	.+180    	; 0xe16 <Port_SetPinMode+0xc4>
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	38 f0       	brcs	.+14     	; 0xd74 <Port_SetPinMode+0x22>
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	09 f4       	brne	.+2      	; 0xd6c <Port_SetPinMode+0x1a>
     d6a:	a6 c0       	rjmp	.+332    	; 0xeb8 <Port_SetPinMode+0x166>
     d6c:	83 30       	cpi	r24, 0x03	; 3
     d6e:	09 f0       	breq	.+2      	; 0xd72 <Port_SetPinMode+0x20>
     d70:	45 c1       	rjmp	.+650    	; 0xffc <Port_SetPinMode+0x2aa>
     d72:	f3 c0       	rjmp	.+486    	; 0xf5a <Port_SetPinMode+0x208>
    {
        case u8PORTA:
          switch(pin_mode){
     d74:	61 30       	cpi	r22, 0x01	; 1
     d76:	41 f0       	breq	.+16     	; 0xd88 <Port_SetPinMode+0x36>
     d78:	61 30       	cpi	r22, 0x01	; 1
     d7a:	a0 f0       	brcs	.+40     	; 0xda4 <Port_SetPinMode+0x52>
     d7c:	62 30       	cpi	r22, 0x02	; 2
     d7e:	29 f1       	breq	.+74     	; 0xdca <Port_SetPinMode+0x78>
     d80:	63 30       	cpi	r22, 0x03	; 3
     d82:	09 f0       	breq	.+2      	; 0xd86 <Port_SetPinMode+0x34>
     d84:	3d c1       	rjmp	.+634    	; 0x1000 <Port_SetPinMode+0x2ae>
     d86:	34 c0       	rjmp	.+104    	; 0xdf0 <Port_SetPinMode+0x9e>
            case PIN_OUT_HIGH:
				SET_BIT(DDRA,loc_Pin_id);
     d88:	8a b3       	in	r24, 0x1a	; 26
     d8a:	21 e0       	ldi	r18, 0x01	; 1
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	01 c0       	rjmp	.+2      	; 0xd92 <Port_SetPinMode+0x40>
     d90:	22 0f       	add	r18, r18
     d92:	9a 95       	dec	r25
     d94:	ea f7       	brpl	.-6      	; 0xd90 <Port_SetPinMode+0x3e>
     d96:	82 2b       	or	r24, r18
     d98:	8a bb       	out	0x1a, r24	; 26
				SET_BIT(PORTA,loc_Pin_id);
     d9a:	8b b3       	in	r24, 0x1b	; 27
     d9c:	28 2b       	or	r18, r24
     d9e:	2b bb       	out	0x1b, r18	; 27
    }
 return ERROR_LOC_RET;   
}
ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
  ERROR_TYPES ERROR_LOC_RET =OK;
     da0:	80 e0       	ldi	r24, 0x00	; 0
        case u8PORTA:
          switch(pin_mode){
            case PIN_OUT_HIGH:
				SET_BIT(DDRA,loc_Pin_id);
				SET_BIT(PORTA,loc_Pin_id);
				break;
     da2:	08 95       	ret
			case  PIN_OUT_LOW:
			    SET_BIT(DDRA,loc_Pin_id);
     da4:	4a b3       	in	r20, 0x1a	; 26
     da6:	21 e0       	ldi	r18, 0x01	; 1
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	b9 01       	movw	r22, r18
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <Port_SetPinMode+0x60>
     dae:	66 0f       	add	r22, r22
     db0:	77 1f       	adc	r23, r23
     db2:	9a 95       	dec	r25
     db4:	e2 f7       	brpl	.-8      	; 0xdae <Port_SetPinMode+0x5c>
     db6:	cb 01       	movw	r24, r22
     db8:	94 2f       	mov	r25, r20
     dba:	98 2b       	or	r25, r24
     dbc:	9a bb       	out	0x1a, r25	; 26
			    CLR_BIT(PORTA,loc_Pin_id);
     dbe:	2b b3       	in	r18, 0x1b	; 27
     dc0:	80 95       	com	r24
     dc2:	82 23       	and	r24, r18
     dc4:	8b bb       	out	0x1b, r24	; 27
    }
 return ERROR_LOC_RET;   
}
ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
  ERROR_TYPES ERROR_LOC_RET =OK;
     dc6:	80 e0       	ldi	r24, 0x00	; 0
				SET_BIT(PORTA,loc_Pin_id);
				break;
			case  PIN_OUT_LOW:
			    SET_BIT(DDRA,loc_Pin_id);
			    CLR_BIT(PORTA,loc_Pin_id);
			    break;	
     dc8:	08 95       	ret
            case   PIN_IN_FLOAT:
				CLR_BIT(DDRA,loc_Pin_id);
     dca:	4a b3       	in	r20, 0x1a	; 26
     dcc:	21 e0       	ldi	r18, 0x01	; 1
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	b9 01       	movw	r22, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <Port_SetPinMode+0x86>
     dd4:	66 0f       	add	r22, r22
     dd6:	77 1f       	adc	r23, r23
     dd8:	9a 95       	dec	r25
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <Port_SetPinMode+0x82>
     ddc:	cb 01       	movw	r24, r22
     dde:	80 95       	com	r24
     de0:	98 2f       	mov	r25, r24
     de2:	94 23       	and	r25, r20
     de4:	9a bb       	out	0x1a, r25	; 26
				CLR_BIT(PORTA,loc_Pin_id);                     
     de6:	9b b3       	in	r25, 0x1b	; 27
     de8:	89 23       	and	r24, r25
     dea:	8b bb       	out	0x1b, r24	; 27
    }
 return ERROR_LOC_RET;   
}
ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
  ERROR_TYPES ERROR_LOC_RET =OK;
     dec:	80 e0       	ldi	r24, 0x00	; 0
			    CLR_BIT(PORTA,loc_Pin_id);
			    break;	
            case   PIN_IN_FLOAT:
				CLR_BIT(DDRA,loc_Pin_id);
				CLR_BIT(PORTA,loc_Pin_id);                     
				break;
     dee:	08 95       	ret
            case   PIN_IN_PULLUP:
			    CLR_BIT(DDRA,loc_Pin_id);
     df0:	4a b3       	in	r20, 0x1a	; 26
     df2:	21 e0       	ldi	r18, 0x01	; 1
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	b9 01       	movw	r22, r18
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <Port_SetPinMode+0xac>
     dfa:	66 0f       	add	r22, r22
     dfc:	77 1f       	adc	r23, r23
     dfe:	9a 95       	dec	r25
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <Port_SetPinMode+0xa8>
     e02:	cb 01       	movw	r24, r22
     e04:	96 2f       	mov	r25, r22
     e06:	90 95       	com	r25
     e08:	94 23       	and	r25, r20
     e0a:	9a bb       	out	0x1a, r25	; 26
			    SET_BIT(PORTA,loc_Pin_id);                     
     e0c:	9b b3       	in	r25, 0x1b	; 27
     e0e:	89 2b       	or	r24, r25
     e10:	8b bb       	out	0x1b, r24	; 27
    }
 return ERROR_LOC_RET;   
}
ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
  ERROR_TYPES ERROR_LOC_RET =OK;
     e12:	80 e0       	ldi	r24, 0x00	; 0
				CLR_BIT(PORTA,loc_Pin_id);                     
				break;
            case   PIN_IN_PULLUP:
			    CLR_BIT(DDRA,loc_Pin_id);
			    SET_BIT(PORTA,loc_Pin_id);                     
			    break;   				         
     e14:	08 95       	ret
            default:
			ERROR_LOC_RET= PIN_MODE_ERROR;
		  }
		  break;			
        case u8PORTB:
          switch(pin_mode){
     e16:	61 30       	cpi	r22, 0x01	; 1
     e18:	41 f0       	breq	.+16     	; 0xe2a <Port_SetPinMode+0xd8>
     e1a:	61 30       	cpi	r22, 0x01	; 1
     e1c:	a0 f0       	brcs	.+40     	; 0xe46 <Port_SetPinMode+0xf4>
     e1e:	62 30       	cpi	r22, 0x02	; 2
     e20:	29 f1       	breq	.+74     	; 0xe6c <Port_SetPinMode+0x11a>
     e22:	63 30       	cpi	r22, 0x03	; 3
     e24:	09 f0       	breq	.+2      	; 0xe28 <Port_SetPinMode+0xd6>
     e26:	ee c0       	rjmp	.+476    	; 0x1004 <Port_SetPinMode+0x2b2>
     e28:	34 c0       	rjmp	.+104    	; 0xe92 <Port_SetPinMode+0x140>
		  
            case PIN_OUT_HIGH:
            SET_BIT(DDRB,loc_Pin_id);
     e2a:	87 b3       	in	r24, 0x17	; 23
     e2c:	21 e0       	ldi	r18, 0x01	; 1
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	01 c0       	rjmp	.+2      	; 0xe34 <Port_SetPinMode+0xe2>
     e32:	22 0f       	add	r18, r18
     e34:	9a 95       	dec	r25
     e36:	ea f7       	brpl	.-6      	; 0xe32 <Port_SetPinMode+0xe0>
     e38:	82 2b       	or	r24, r18
     e3a:	87 bb       	out	0x17, r24	; 23
            SET_BIT(PORTB,loc_Pin_id);
     e3c:	88 b3       	in	r24, 0x18	; 24
     e3e:	28 2b       	or	r18, r24
     e40:	28 bb       	out	0x18, r18	; 24
    }
 return ERROR_LOC_RET;   
}
ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
  ERROR_TYPES ERROR_LOC_RET =OK;
     e42:	80 e0       	ldi	r24, 0x00	; 0
          switch(pin_mode){
		  
            case PIN_OUT_HIGH:
            SET_BIT(DDRB,loc_Pin_id);
            SET_BIT(PORTB,loc_Pin_id);
            break;
     e44:	08 95       	ret
           case PIN_OUT_LOW:
            SET_BIT(DDRB,loc_Pin_id);
     e46:	47 b3       	in	r20, 0x17	; 23
     e48:	21 e0       	ldi	r18, 0x01	; 1
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	b9 01       	movw	r22, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <Port_SetPinMode+0x102>
     e50:	66 0f       	add	r22, r22
     e52:	77 1f       	adc	r23, r23
     e54:	9a 95       	dec	r25
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <Port_SetPinMode+0xfe>
     e58:	cb 01       	movw	r24, r22
     e5a:	94 2f       	mov	r25, r20
     e5c:	98 2b       	or	r25, r24
     e5e:	97 bb       	out	0x17, r25	; 23
            CLR_BIT(PORTB,loc_Pin_id);
     e60:	28 b3       	in	r18, 0x18	; 24
     e62:	80 95       	com	r24
     e64:	82 23       	and	r24, r18
     e66:	88 bb       	out	0x18, r24	; 24
    }
 return ERROR_LOC_RET;   
}
ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
  ERROR_TYPES ERROR_LOC_RET =OK;
     e68:	80 e0       	ldi	r24, 0x00	; 0
            SET_BIT(PORTB,loc_Pin_id);
            break;
           case PIN_OUT_LOW:
            SET_BIT(DDRB,loc_Pin_id);
            CLR_BIT(PORTB,loc_Pin_id);
            break;
     e6a:	08 95       	ret
            case   PIN_IN_FLOAT:
            CLR_BIT(DDRB,loc_Pin_id);
     e6c:	47 b3       	in	r20, 0x17	; 23
     e6e:	21 e0       	ldi	r18, 0x01	; 1
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	b9 01       	movw	r22, r18
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <Port_SetPinMode+0x128>
     e76:	66 0f       	add	r22, r22
     e78:	77 1f       	adc	r23, r23
     e7a:	9a 95       	dec	r25
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <Port_SetPinMode+0x124>
     e7e:	cb 01       	movw	r24, r22
     e80:	80 95       	com	r24
     e82:	98 2f       	mov	r25, r24
     e84:	94 23       	and	r25, r20
     e86:	97 bb       	out	0x17, r25	; 23
            CLR_BIT(PORTB,loc_Pin_id);                     
     e88:	98 b3       	in	r25, 0x18	; 24
     e8a:	89 23       	and	r24, r25
     e8c:	88 bb       	out	0x18, r24	; 24
    }
 return ERROR_LOC_RET;   
}
ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
  ERROR_TYPES ERROR_LOC_RET =OK;
     e8e:	80 e0       	ldi	r24, 0x00	; 0
            CLR_BIT(PORTB,loc_Pin_id);
            break;
            case   PIN_IN_FLOAT:
            CLR_BIT(DDRB,loc_Pin_id);
            CLR_BIT(PORTB,loc_Pin_id);                     
            break;
     e90:	08 95       	ret

            case   PIN_IN_PULLUP:
            CLR_BIT(DDRB,loc_Pin_id);
     e92:	47 b3       	in	r20, 0x17	; 23
     e94:	21 e0       	ldi	r18, 0x01	; 1
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	b9 01       	movw	r22, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <Port_SetPinMode+0x14e>
     e9c:	66 0f       	add	r22, r22
     e9e:	77 1f       	adc	r23, r23
     ea0:	9a 95       	dec	r25
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <Port_SetPinMode+0x14a>
     ea4:	cb 01       	movw	r24, r22
     ea6:	96 2f       	mov	r25, r22
     ea8:	90 95       	com	r25
     eaa:	94 23       	and	r25, r20
     eac:	97 bb       	out	0x17, r25	; 23
            SET_BIT(PORTB,loc_Pin_id);                     
     eae:	98 b3       	in	r25, 0x18	; 24
     eb0:	89 2b       	or	r24, r25
     eb2:	88 bb       	out	0x18, r24	; 24
    }
 return ERROR_LOC_RET;   
}
ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
  ERROR_TYPES ERROR_LOC_RET =OK;
     eb4:	80 e0       	ldi	r24, 0x00	; 0
            break;

            case   PIN_IN_PULLUP:
            CLR_BIT(DDRB,loc_Pin_id);
            SET_BIT(PORTB,loc_Pin_id);                     
            break;            
     eb6:	08 95       	ret
            default:
			ERROR_LOC_RET=PIN_MODE_ERROR;			  
		  }
		  break;			
        case u8PORTC:
          switch(pin_mode){
     eb8:	61 30       	cpi	r22, 0x01	; 1
     eba:	41 f0       	breq	.+16     	; 0xecc <Port_SetPinMode+0x17a>
     ebc:	61 30       	cpi	r22, 0x01	; 1
     ebe:	a0 f0       	brcs	.+40     	; 0xee8 <Port_SetPinMode+0x196>
     ec0:	62 30       	cpi	r22, 0x02	; 2
     ec2:	29 f1       	breq	.+74     	; 0xf0e <Port_SetPinMode+0x1bc>
     ec4:	63 30       	cpi	r22, 0x03	; 3
     ec6:	09 f0       	breq	.+2      	; 0xeca <Port_SetPinMode+0x178>
     ec8:	9f c0       	rjmp	.+318    	; 0x1008 <Port_SetPinMode+0x2b6>
     eca:	34 c0       	rjmp	.+104    	; 0xf34 <Port_SetPinMode+0x1e2>
            case PIN_OUT_HIGH:
            SET_BIT(DDRC,loc_Pin_id);
     ecc:	84 b3       	in	r24, 0x14	; 20
     ece:	21 e0       	ldi	r18, 0x01	; 1
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	01 c0       	rjmp	.+2      	; 0xed6 <Port_SetPinMode+0x184>
     ed4:	22 0f       	add	r18, r18
     ed6:	9a 95       	dec	r25
     ed8:	ea f7       	brpl	.-6      	; 0xed4 <Port_SetPinMode+0x182>
     eda:	82 2b       	or	r24, r18
     edc:	84 bb       	out	0x14, r24	; 20
            SET_BIT(PORTC,loc_Pin_id);
     ede:	85 b3       	in	r24, 0x15	; 21
     ee0:	28 2b       	or	r18, r24
     ee2:	25 bb       	out	0x15, r18	; 21
    }
 return ERROR_LOC_RET;   
}
ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
  ERROR_TYPES ERROR_LOC_RET =OK;
     ee4:	80 e0       	ldi	r24, 0x00	; 0
        case u8PORTC:
          switch(pin_mode){
            case PIN_OUT_HIGH:
            SET_BIT(DDRC,loc_Pin_id);
            SET_BIT(PORTC,loc_Pin_id);
            break;
     ee6:	08 95       	ret
		    case PIN_OUT_LOW:
            SET_BIT(DDRC,loc_Pin_id);
     ee8:	44 b3       	in	r20, 0x14	; 20
     eea:	21 e0       	ldi	r18, 0x01	; 1
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	b9 01       	movw	r22, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <Port_SetPinMode+0x1a4>
     ef2:	66 0f       	add	r22, r22
     ef4:	77 1f       	adc	r23, r23
     ef6:	9a 95       	dec	r25
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <Port_SetPinMode+0x1a0>
     efa:	cb 01       	movw	r24, r22
     efc:	94 2f       	mov	r25, r20
     efe:	98 2b       	or	r25, r24
     f00:	94 bb       	out	0x14, r25	; 20
            CLR_BIT(PORTC,loc_Pin_id);
     f02:	25 b3       	in	r18, 0x15	; 21
     f04:	80 95       	com	r24
     f06:	82 23       	and	r24, r18
     f08:	85 bb       	out	0x15, r24	; 21
    }
 return ERROR_LOC_RET;   
}
ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
  ERROR_TYPES ERROR_LOC_RET =OK;
     f0a:	80 e0       	ldi	r24, 0x00	; 0
            SET_BIT(PORTC,loc_Pin_id);
            break;
		    case PIN_OUT_LOW:
            SET_BIT(DDRC,loc_Pin_id);
            CLR_BIT(PORTC,loc_Pin_id);
            break;
     f0c:	08 95       	ret
            case   PIN_IN_FLOAT:
            CLR_BIT(DDRC,loc_Pin_id);
     f0e:	44 b3       	in	r20, 0x14	; 20
     f10:	21 e0       	ldi	r18, 0x01	; 1
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	b9 01       	movw	r22, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <Port_SetPinMode+0x1ca>
     f18:	66 0f       	add	r22, r22
     f1a:	77 1f       	adc	r23, r23
     f1c:	9a 95       	dec	r25
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <Port_SetPinMode+0x1c6>
     f20:	cb 01       	movw	r24, r22
     f22:	80 95       	com	r24
     f24:	98 2f       	mov	r25, r24
     f26:	94 23       	and	r25, r20
     f28:	94 bb       	out	0x14, r25	; 20
            CLR_BIT(PORTC,loc_Pin_id);                     
     f2a:	95 b3       	in	r25, 0x15	; 21
     f2c:	89 23       	and	r24, r25
     f2e:	85 bb       	out	0x15, r24	; 21
    }
 return ERROR_LOC_RET;   
}
ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
  ERROR_TYPES ERROR_LOC_RET =OK;
     f30:	80 e0       	ldi	r24, 0x00	; 0
            CLR_BIT(PORTC,loc_Pin_id);
            break;
            case   PIN_IN_FLOAT:
            CLR_BIT(DDRC,loc_Pin_id);
            CLR_BIT(PORTC,loc_Pin_id);                     
            break;
     f32:	08 95       	ret

            case   PIN_IN_PULLUP:
            CLR_BIT(DDRC,loc_Pin_id);
     f34:	44 b3       	in	r20, 0x14	; 20
     f36:	21 e0       	ldi	r18, 0x01	; 1
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	b9 01       	movw	r22, r18
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <Port_SetPinMode+0x1f0>
     f3e:	66 0f       	add	r22, r22
     f40:	77 1f       	adc	r23, r23
     f42:	9a 95       	dec	r25
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <Port_SetPinMode+0x1ec>
     f46:	cb 01       	movw	r24, r22
     f48:	96 2f       	mov	r25, r22
     f4a:	90 95       	com	r25
     f4c:	94 23       	and	r25, r20
     f4e:	94 bb       	out	0x14, r25	; 20
            SET_BIT(PORTC,loc_Pin_id);                     
     f50:	95 b3       	in	r25, 0x15	; 21
     f52:	89 2b       	or	r24, r25
     f54:	85 bb       	out	0x15, r24	; 21
    }
 return ERROR_LOC_RET;   
}
ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
  ERROR_TYPES ERROR_LOC_RET =OK;
     f56:	80 e0       	ldi	r24, 0x00	; 0
            break;

            case   PIN_IN_PULLUP:
            CLR_BIT(DDRC,loc_Pin_id);
            SET_BIT(PORTC,loc_Pin_id);                     
            break;            
     f58:	08 95       	ret
		  }
		  break;					 


        case u8PORTD:
          switch(pin_mode){
     f5a:	61 30       	cpi	r22, 0x01	; 1
     f5c:	41 f0       	breq	.+16     	; 0xf6e <Port_SetPinMode+0x21c>
     f5e:	61 30       	cpi	r22, 0x01	; 1
     f60:	a0 f0       	brcs	.+40     	; 0xf8a <Port_SetPinMode+0x238>
     f62:	62 30       	cpi	r22, 0x02	; 2
     f64:	29 f1       	breq	.+74     	; 0xfb0 <Port_SetPinMode+0x25e>
     f66:	63 30       	cpi	r22, 0x03	; 3
     f68:	09 f0       	breq	.+2      	; 0xf6c <Port_SetPinMode+0x21a>
     f6a:	50 c0       	rjmp	.+160    	; 0x100c <Port_SetPinMode+0x2ba>
     f6c:	34 c0       	rjmp	.+104    	; 0xfd6 <Port_SetPinMode+0x284>
            case PIN_OUT_HIGH:
            SET_BIT(DDRD,loc_Pin_id);
     f6e:	81 b3       	in	r24, 0x11	; 17
     f70:	21 e0       	ldi	r18, 0x01	; 1
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	01 c0       	rjmp	.+2      	; 0xf78 <Port_SetPinMode+0x226>
     f76:	22 0f       	add	r18, r18
     f78:	9a 95       	dec	r25
     f7a:	ea f7       	brpl	.-6      	; 0xf76 <Port_SetPinMode+0x224>
     f7c:	82 2b       	or	r24, r18
     f7e:	81 bb       	out	0x11, r24	; 17
            SET_BIT(PORTD,loc_Pin_id);
     f80:	82 b3       	in	r24, 0x12	; 18
     f82:	28 2b       	or	r18, r24
     f84:	22 bb       	out	0x12, r18	; 18
    }
 return ERROR_LOC_RET;   
}
ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
  ERROR_TYPES ERROR_LOC_RET =OK;
     f86:	80 e0       	ldi	r24, 0x00	; 0
        case u8PORTD:
          switch(pin_mode){
            case PIN_OUT_HIGH:
            SET_BIT(DDRD,loc_Pin_id);
            SET_BIT(PORTD,loc_Pin_id);
            break;
     f88:	08 95       	ret
            case PIN_OUT_LOW:
            SET_BIT(DDRD,loc_Pin_id);
     f8a:	41 b3       	in	r20, 0x11	; 17
     f8c:	21 e0       	ldi	r18, 0x01	; 1
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	b9 01       	movw	r22, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <Port_SetPinMode+0x246>
     f94:	66 0f       	add	r22, r22
     f96:	77 1f       	adc	r23, r23
     f98:	9a 95       	dec	r25
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <Port_SetPinMode+0x242>
     f9c:	cb 01       	movw	r24, r22
     f9e:	94 2f       	mov	r25, r20
     fa0:	98 2b       	or	r25, r24
     fa2:	91 bb       	out	0x11, r25	; 17
            CLR_BIT(PORTD,loc_Pin_id);
     fa4:	22 b3       	in	r18, 0x12	; 18
     fa6:	80 95       	com	r24
     fa8:	82 23       	and	r24, r18
     faa:	82 bb       	out	0x12, r24	; 18
    }
 return ERROR_LOC_RET;   
}
ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
  ERROR_TYPES ERROR_LOC_RET =OK;
     fac:	80 e0       	ldi	r24, 0x00	; 0
            SET_BIT(PORTD,loc_Pin_id);
            break;
            case PIN_OUT_LOW:
            SET_BIT(DDRD,loc_Pin_id);
            CLR_BIT(PORTD,loc_Pin_id);
            break;			
     fae:	08 95       	ret
            case PIN_IN_FLOAT:
            CLR_BIT(DDRD,loc_Pin_id);
     fb0:	41 b3       	in	r20, 0x11	; 17
     fb2:	21 e0       	ldi	r18, 0x01	; 1
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	b9 01       	movw	r22, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <Port_SetPinMode+0x26c>
     fba:	66 0f       	add	r22, r22
     fbc:	77 1f       	adc	r23, r23
     fbe:	9a 95       	dec	r25
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <Port_SetPinMode+0x268>
     fc2:	cb 01       	movw	r24, r22
     fc4:	80 95       	com	r24
     fc6:	98 2f       	mov	r25, r24
     fc8:	94 23       	and	r25, r20
     fca:	91 bb       	out	0x11, r25	; 17
            CLR_BIT(PORTD,loc_Pin_id);                     
     fcc:	92 b3       	in	r25, 0x12	; 18
     fce:	89 23       	and	r24, r25
     fd0:	82 bb       	out	0x12, r24	; 18
    }
 return ERROR_LOC_RET;   
}
ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
  ERROR_TYPES ERROR_LOC_RET =OK;
     fd2:	80 e0       	ldi	r24, 0x00	; 0
            CLR_BIT(PORTD,loc_Pin_id);
            break;			
            case PIN_IN_FLOAT:
            CLR_BIT(DDRD,loc_Pin_id);
            CLR_BIT(PORTD,loc_Pin_id);                     
            break;
     fd4:	08 95       	ret
            case PIN_IN_PULLUP:
            CLR_BIT(DDRD,loc_Pin_id);
     fd6:	41 b3       	in	r20, 0x11	; 17
     fd8:	21 e0       	ldi	r18, 0x01	; 1
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	b9 01       	movw	r22, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <Port_SetPinMode+0x292>
     fe0:	66 0f       	add	r22, r22
     fe2:	77 1f       	adc	r23, r23
     fe4:	9a 95       	dec	r25
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <Port_SetPinMode+0x28e>
     fe8:	cb 01       	movw	r24, r22
     fea:	96 2f       	mov	r25, r22
     fec:	90 95       	com	r25
     fee:	94 23       	and	r25, r20
     ff0:	91 bb       	out	0x11, r25	; 17
            SET_BIT(PORTD,loc_Pin_id);                     
     ff2:	92 b3       	in	r25, 0x12	; 18
     ff4:	89 2b       	or	r24, r25
     ff6:	82 bb       	out	0x12, r24	; 18
    }
 return ERROR_LOC_RET;   
}
ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
  ERROR_TYPES ERROR_LOC_RET =OK;
     ff8:	80 e0       	ldi	r24, 0x00	; 0
            CLR_BIT(PORTD,loc_Pin_id);                     
            break;
            case PIN_IN_PULLUP:
            CLR_BIT(DDRD,loc_Pin_id);
            SET_BIT(PORTD,loc_Pin_id);                     
            break;            
     ffa:	08 95       	ret
    }
 return ERROR_LOC_RET;   
}
ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
  ERROR_TYPES ERROR_LOC_RET =OK;
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	08 95       	ret
            case   PIN_IN_PULLUP:
			    CLR_BIT(DDRA,loc_Pin_id);
			    SET_BIT(PORTA,loc_Pin_id);                     
			    break;   				         
            default:
			ERROR_LOC_RET= PIN_MODE_ERROR;
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	08 95       	ret
            case   PIN_IN_PULLUP:
            CLR_BIT(DDRB,loc_Pin_id);
            SET_BIT(PORTB,loc_Pin_id);                     
            break;            
            default:
			ERROR_LOC_RET=PIN_MODE_ERROR;			  
    1004:	82 e0       	ldi	r24, 0x02	; 2
    1006:	08 95       	ret
            case   PIN_IN_PULLUP:
            CLR_BIT(DDRC,loc_Pin_id);
            SET_BIT(PORTC,loc_Pin_id);                     
            break;            
            default:
			ERROR_LOC_RET=PIN_MODE_ERROR;	
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	08 95       	ret
            case PIN_IN_PULLUP:
            CLR_BIT(DDRD,loc_Pin_id);
            SET_BIT(PORTD,loc_Pin_id);                     
            break;            
            default: 
			ERROR_LOC_RET=PIN_MODE_ERROR;	
    100c:	82 e0       	ldi	r24, 0x02	; 2

  //  }  

	return ERROR_LOC_RET;

    100e:	08 95       	ret

00001010 <__subsf3>:
    1010:	50 58       	subi	r21, 0x80	; 128

00001012 <__addsf3>:
    1012:	bb 27       	eor	r27, r27
    1014:	aa 27       	eor	r26, r26
    1016:	0e d0       	rcall	.+28     	; 0x1034 <__addsf3x>
    1018:	e0 c0       	rjmp	.+448    	; 0x11da <__fp_round>
    101a:	d1 d0       	rcall	.+418    	; 0x11be <__fp_pscA>
    101c:	30 f0       	brcs	.+12     	; 0x102a <__addsf3+0x18>
    101e:	d6 d0       	rcall	.+428    	; 0x11cc <__fp_pscB>
    1020:	20 f0       	brcs	.+8      	; 0x102a <__addsf3+0x18>
    1022:	31 f4       	brne	.+12     	; 0x1030 <__addsf3+0x1e>
    1024:	9f 3f       	cpi	r25, 0xFF	; 255
    1026:	11 f4       	brne	.+4      	; 0x102c <__addsf3+0x1a>
    1028:	1e f4       	brtc	.+6      	; 0x1030 <__addsf3+0x1e>
    102a:	c6 c0       	rjmp	.+396    	; 0x11b8 <__fp_nan>
    102c:	0e f4       	brtc	.+2      	; 0x1030 <__addsf3+0x1e>
    102e:	e0 95       	com	r30
    1030:	e7 fb       	bst	r30, 7
    1032:	bc c0       	rjmp	.+376    	; 0x11ac <__fp_inf>

00001034 <__addsf3x>:
    1034:	e9 2f       	mov	r30, r25
    1036:	e2 d0       	rcall	.+452    	; 0x11fc <__fp_split3>
    1038:	80 f3       	brcs	.-32     	; 0x101a <__addsf3+0x8>
    103a:	ba 17       	cp	r27, r26
    103c:	62 07       	cpc	r22, r18
    103e:	73 07       	cpc	r23, r19
    1040:	84 07       	cpc	r24, r20
    1042:	95 07       	cpc	r25, r21
    1044:	18 f0       	brcs	.+6      	; 0x104c <__addsf3x+0x18>
    1046:	71 f4       	brne	.+28     	; 0x1064 <__addsf3x+0x30>
    1048:	9e f5       	brtc	.+102    	; 0x10b0 <__addsf3x+0x7c>
    104a:	fa c0       	rjmp	.+500    	; 0x1240 <__fp_zero>
    104c:	0e f4       	brtc	.+2      	; 0x1050 <__addsf3x+0x1c>
    104e:	e0 95       	com	r30
    1050:	0b 2e       	mov	r0, r27
    1052:	ba 2f       	mov	r27, r26
    1054:	a0 2d       	mov	r26, r0
    1056:	0b 01       	movw	r0, r22
    1058:	b9 01       	movw	r22, r18
    105a:	90 01       	movw	r18, r0
    105c:	0c 01       	movw	r0, r24
    105e:	ca 01       	movw	r24, r20
    1060:	a0 01       	movw	r20, r0
    1062:	11 24       	eor	r1, r1
    1064:	ff 27       	eor	r31, r31
    1066:	59 1b       	sub	r21, r25
    1068:	99 f0       	breq	.+38     	; 0x1090 <__addsf3x+0x5c>
    106a:	59 3f       	cpi	r21, 0xF9	; 249
    106c:	50 f4       	brcc	.+20     	; 0x1082 <__addsf3x+0x4e>
    106e:	50 3e       	cpi	r21, 0xE0	; 224
    1070:	68 f1       	brcs	.+90     	; 0x10cc <__addsf3x+0x98>
    1072:	1a 16       	cp	r1, r26
    1074:	f0 40       	sbci	r31, 0x00	; 0
    1076:	a2 2f       	mov	r26, r18
    1078:	23 2f       	mov	r18, r19
    107a:	34 2f       	mov	r19, r20
    107c:	44 27       	eor	r20, r20
    107e:	58 5f       	subi	r21, 0xF8	; 248
    1080:	f3 cf       	rjmp	.-26     	; 0x1068 <__addsf3x+0x34>
    1082:	46 95       	lsr	r20
    1084:	37 95       	ror	r19
    1086:	27 95       	ror	r18
    1088:	a7 95       	ror	r26
    108a:	f0 40       	sbci	r31, 0x00	; 0
    108c:	53 95       	inc	r21
    108e:	c9 f7       	brne	.-14     	; 0x1082 <__addsf3x+0x4e>
    1090:	7e f4       	brtc	.+30     	; 0x10b0 <__addsf3x+0x7c>
    1092:	1f 16       	cp	r1, r31
    1094:	ba 0b       	sbc	r27, r26
    1096:	62 0b       	sbc	r22, r18
    1098:	73 0b       	sbc	r23, r19
    109a:	84 0b       	sbc	r24, r20
    109c:	ba f0       	brmi	.+46     	; 0x10cc <__addsf3x+0x98>
    109e:	91 50       	subi	r25, 0x01	; 1
    10a0:	a1 f0       	breq	.+40     	; 0x10ca <__addsf3x+0x96>
    10a2:	ff 0f       	add	r31, r31
    10a4:	bb 1f       	adc	r27, r27
    10a6:	66 1f       	adc	r22, r22
    10a8:	77 1f       	adc	r23, r23
    10aa:	88 1f       	adc	r24, r24
    10ac:	c2 f7       	brpl	.-16     	; 0x109e <__addsf3x+0x6a>
    10ae:	0e c0       	rjmp	.+28     	; 0x10cc <__addsf3x+0x98>
    10b0:	ba 0f       	add	r27, r26
    10b2:	62 1f       	adc	r22, r18
    10b4:	73 1f       	adc	r23, r19
    10b6:	84 1f       	adc	r24, r20
    10b8:	48 f4       	brcc	.+18     	; 0x10cc <__addsf3x+0x98>
    10ba:	87 95       	ror	r24
    10bc:	77 95       	ror	r23
    10be:	67 95       	ror	r22
    10c0:	b7 95       	ror	r27
    10c2:	f7 95       	ror	r31
    10c4:	9e 3f       	cpi	r25, 0xFE	; 254
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <__addsf3x+0x96>
    10c8:	b3 cf       	rjmp	.-154    	; 0x1030 <__addsf3+0x1e>
    10ca:	93 95       	inc	r25
    10cc:	88 0f       	add	r24, r24
    10ce:	08 f0       	brcs	.+2      	; 0x10d2 <__addsf3x+0x9e>
    10d0:	99 27       	eor	r25, r25
    10d2:	ee 0f       	add	r30, r30
    10d4:	97 95       	ror	r25
    10d6:	87 95       	ror	r24
    10d8:	08 95       	ret

000010da <__fixunssfsi>:
    10da:	98 d0       	rcall	.+304    	; 0x120c <__fp_splitA>
    10dc:	88 f0       	brcs	.+34     	; 0x1100 <__fixunssfsi+0x26>
    10de:	9f 57       	subi	r25, 0x7F	; 127
    10e0:	90 f0       	brcs	.+36     	; 0x1106 <__fixunssfsi+0x2c>
    10e2:	b9 2f       	mov	r27, r25
    10e4:	99 27       	eor	r25, r25
    10e6:	b7 51       	subi	r27, 0x17	; 23
    10e8:	a0 f0       	brcs	.+40     	; 0x1112 <__fixunssfsi+0x38>
    10ea:	d1 f0       	breq	.+52     	; 0x1120 <__fixunssfsi+0x46>
    10ec:	66 0f       	add	r22, r22
    10ee:	77 1f       	adc	r23, r23
    10f0:	88 1f       	adc	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	1a f0       	brmi	.+6      	; 0x10fc <__fixunssfsi+0x22>
    10f6:	ba 95       	dec	r27
    10f8:	c9 f7       	brne	.-14     	; 0x10ec <__fixunssfsi+0x12>
    10fa:	12 c0       	rjmp	.+36     	; 0x1120 <__fixunssfsi+0x46>
    10fc:	b1 30       	cpi	r27, 0x01	; 1
    10fe:	81 f0       	breq	.+32     	; 0x1120 <__fixunssfsi+0x46>
    1100:	9f d0       	rcall	.+318    	; 0x1240 <__fp_zero>
    1102:	b1 e0       	ldi	r27, 0x01	; 1
    1104:	08 95       	ret
    1106:	9c c0       	rjmp	.+312    	; 0x1240 <__fp_zero>
    1108:	67 2f       	mov	r22, r23
    110a:	78 2f       	mov	r23, r24
    110c:	88 27       	eor	r24, r24
    110e:	b8 5f       	subi	r27, 0xF8	; 248
    1110:	39 f0       	breq	.+14     	; 0x1120 <__fixunssfsi+0x46>
    1112:	b9 3f       	cpi	r27, 0xF9	; 249
    1114:	cc f3       	brlt	.-14     	; 0x1108 <__fixunssfsi+0x2e>
    1116:	86 95       	lsr	r24
    1118:	77 95       	ror	r23
    111a:	67 95       	ror	r22
    111c:	b3 95       	inc	r27
    111e:	d9 f7       	brne	.-10     	; 0x1116 <__fixunssfsi+0x3c>
    1120:	3e f4       	brtc	.+14     	; 0x1130 <__fixunssfsi+0x56>
    1122:	90 95       	com	r25
    1124:	80 95       	com	r24
    1126:	70 95       	com	r23
    1128:	61 95       	neg	r22
    112a:	7f 4f       	sbci	r23, 0xFF	; 255
    112c:	8f 4f       	sbci	r24, 0xFF	; 255
    112e:	9f 4f       	sbci	r25, 0xFF	; 255
    1130:	08 95       	ret

00001132 <__floatunsisf>:
    1132:	e8 94       	clt
    1134:	09 c0       	rjmp	.+18     	; 0x1148 <__floatsisf+0x12>

00001136 <__floatsisf>:
    1136:	97 fb       	bst	r25, 7
    1138:	3e f4       	brtc	.+14     	; 0x1148 <__floatsisf+0x12>
    113a:	90 95       	com	r25
    113c:	80 95       	com	r24
    113e:	70 95       	com	r23
    1140:	61 95       	neg	r22
    1142:	7f 4f       	sbci	r23, 0xFF	; 255
    1144:	8f 4f       	sbci	r24, 0xFF	; 255
    1146:	9f 4f       	sbci	r25, 0xFF	; 255
    1148:	99 23       	and	r25, r25
    114a:	a9 f0       	breq	.+42     	; 0x1176 <__floatsisf+0x40>
    114c:	f9 2f       	mov	r31, r25
    114e:	96 e9       	ldi	r25, 0x96	; 150
    1150:	bb 27       	eor	r27, r27
    1152:	93 95       	inc	r25
    1154:	f6 95       	lsr	r31
    1156:	87 95       	ror	r24
    1158:	77 95       	ror	r23
    115a:	67 95       	ror	r22
    115c:	b7 95       	ror	r27
    115e:	f1 11       	cpse	r31, r1
    1160:	f8 cf       	rjmp	.-16     	; 0x1152 <__floatsisf+0x1c>
    1162:	fa f4       	brpl	.+62     	; 0x11a2 <__floatsisf+0x6c>
    1164:	bb 0f       	add	r27, r27
    1166:	11 f4       	brne	.+4      	; 0x116c <__floatsisf+0x36>
    1168:	60 ff       	sbrs	r22, 0
    116a:	1b c0       	rjmp	.+54     	; 0x11a2 <__floatsisf+0x6c>
    116c:	6f 5f       	subi	r22, 0xFF	; 255
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	8f 4f       	sbci	r24, 0xFF	; 255
    1172:	9f 4f       	sbci	r25, 0xFF	; 255
    1174:	16 c0       	rjmp	.+44     	; 0x11a2 <__floatsisf+0x6c>
    1176:	88 23       	and	r24, r24
    1178:	11 f0       	breq	.+4      	; 0x117e <__floatsisf+0x48>
    117a:	96 e9       	ldi	r25, 0x96	; 150
    117c:	11 c0       	rjmp	.+34     	; 0x11a0 <__floatsisf+0x6a>
    117e:	77 23       	and	r23, r23
    1180:	21 f0       	breq	.+8      	; 0x118a <__floatsisf+0x54>
    1182:	9e e8       	ldi	r25, 0x8E	; 142
    1184:	87 2f       	mov	r24, r23
    1186:	76 2f       	mov	r23, r22
    1188:	05 c0       	rjmp	.+10     	; 0x1194 <__floatsisf+0x5e>
    118a:	66 23       	and	r22, r22
    118c:	71 f0       	breq	.+28     	; 0x11aa <__floatsisf+0x74>
    118e:	96 e8       	ldi	r25, 0x86	; 134
    1190:	86 2f       	mov	r24, r22
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	2a f0       	brmi	.+10     	; 0x11a2 <__floatsisf+0x6c>
    1198:	9a 95       	dec	r25
    119a:	66 0f       	add	r22, r22
    119c:	77 1f       	adc	r23, r23
    119e:	88 1f       	adc	r24, r24
    11a0:	da f7       	brpl	.-10     	; 0x1198 <__floatsisf+0x62>
    11a2:	88 0f       	add	r24, r24
    11a4:	96 95       	lsr	r25
    11a6:	87 95       	ror	r24
    11a8:	97 f9       	bld	r25, 7
    11aa:	08 95       	ret

000011ac <__fp_inf>:
    11ac:	97 f9       	bld	r25, 7
    11ae:	9f 67       	ori	r25, 0x7F	; 127
    11b0:	80 e8       	ldi	r24, 0x80	; 128
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	08 95       	ret

000011b8 <__fp_nan>:
    11b8:	9f ef       	ldi	r25, 0xFF	; 255
    11ba:	80 ec       	ldi	r24, 0xC0	; 192
    11bc:	08 95       	ret

000011be <__fp_pscA>:
    11be:	00 24       	eor	r0, r0
    11c0:	0a 94       	dec	r0
    11c2:	16 16       	cp	r1, r22
    11c4:	17 06       	cpc	r1, r23
    11c6:	18 06       	cpc	r1, r24
    11c8:	09 06       	cpc	r0, r25
    11ca:	08 95       	ret

000011cc <__fp_pscB>:
    11cc:	00 24       	eor	r0, r0
    11ce:	0a 94       	dec	r0
    11d0:	12 16       	cp	r1, r18
    11d2:	13 06       	cpc	r1, r19
    11d4:	14 06       	cpc	r1, r20
    11d6:	05 06       	cpc	r0, r21
    11d8:	08 95       	ret

000011da <__fp_round>:
    11da:	09 2e       	mov	r0, r25
    11dc:	03 94       	inc	r0
    11de:	00 0c       	add	r0, r0
    11e0:	11 f4       	brne	.+4      	; 0x11e6 <__fp_round+0xc>
    11e2:	88 23       	and	r24, r24
    11e4:	52 f0       	brmi	.+20     	; 0x11fa <__fp_round+0x20>
    11e6:	bb 0f       	add	r27, r27
    11e8:	40 f4       	brcc	.+16     	; 0x11fa <__fp_round+0x20>
    11ea:	bf 2b       	or	r27, r31
    11ec:	11 f4       	brne	.+4      	; 0x11f2 <__fp_round+0x18>
    11ee:	60 ff       	sbrs	r22, 0
    11f0:	04 c0       	rjmp	.+8      	; 0x11fa <__fp_round+0x20>
    11f2:	6f 5f       	subi	r22, 0xFF	; 255
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255
    11f6:	8f 4f       	sbci	r24, 0xFF	; 255
    11f8:	9f 4f       	sbci	r25, 0xFF	; 255
    11fa:	08 95       	ret

000011fc <__fp_split3>:
    11fc:	57 fd       	sbrc	r21, 7
    11fe:	90 58       	subi	r25, 0x80	; 128
    1200:	44 0f       	add	r20, r20
    1202:	55 1f       	adc	r21, r21
    1204:	59 f0       	breq	.+22     	; 0x121c <__fp_splitA+0x10>
    1206:	5f 3f       	cpi	r21, 0xFF	; 255
    1208:	71 f0       	breq	.+28     	; 0x1226 <__fp_splitA+0x1a>
    120a:	47 95       	ror	r20

0000120c <__fp_splitA>:
    120c:	88 0f       	add	r24, r24
    120e:	97 fb       	bst	r25, 7
    1210:	99 1f       	adc	r25, r25
    1212:	61 f0       	breq	.+24     	; 0x122c <__fp_splitA+0x20>
    1214:	9f 3f       	cpi	r25, 0xFF	; 255
    1216:	79 f0       	breq	.+30     	; 0x1236 <__fp_splitA+0x2a>
    1218:	87 95       	ror	r24
    121a:	08 95       	ret
    121c:	12 16       	cp	r1, r18
    121e:	13 06       	cpc	r1, r19
    1220:	14 06       	cpc	r1, r20
    1222:	55 1f       	adc	r21, r21
    1224:	f2 cf       	rjmp	.-28     	; 0x120a <__fp_split3+0xe>
    1226:	46 95       	lsr	r20
    1228:	f1 df       	rcall	.-30     	; 0x120c <__fp_splitA>
    122a:	08 c0       	rjmp	.+16     	; 0x123c <__fp_splitA+0x30>
    122c:	16 16       	cp	r1, r22
    122e:	17 06       	cpc	r1, r23
    1230:	18 06       	cpc	r1, r24
    1232:	99 1f       	adc	r25, r25
    1234:	f1 cf       	rjmp	.-30     	; 0x1218 <__fp_splitA+0xc>
    1236:	86 95       	lsr	r24
    1238:	71 05       	cpc	r23, r1
    123a:	61 05       	cpc	r22, r1
    123c:	08 94       	sec
    123e:	08 95       	ret

00001240 <__fp_zero>:
    1240:	e8 94       	clt

00001242 <__fp_szero>:
    1242:	bb 27       	eor	r27, r27
    1244:	66 27       	eor	r22, r22
    1246:	77 27       	eor	r23, r23
    1248:	cb 01       	movw	r24, r22
    124a:	97 f9       	bld	r25, 7
    124c:	08 95       	ret

0000124e <__mulsf3>:
    124e:	0b d0       	rcall	.+22     	; 0x1266 <__mulsf3x>
    1250:	c4 cf       	rjmp	.-120    	; 0x11da <__fp_round>
    1252:	b5 df       	rcall	.-150    	; 0x11be <__fp_pscA>
    1254:	28 f0       	brcs	.+10     	; 0x1260 <__mulsf3+0x12>
    1256:	ba df       	rcall	.-140    	; 0x11cc <__fp_pscB>
    1258:	18 f0       	brcs	.+6      	; 0x1260 <__mulsf3+0x12>
    125a:	95 23       	and	r25, r21
    125c:	09 f0       	breq	.+2      	; 0x1260 <__mulsf3+0x12>
    125e:	a6 cf       	rjmp	.-180    	; 0x11ac <__fp_inf>
    1260:	ab cf       	rjmp	.-170    	; 0x11b8 <__fp_nan>
    1262:	11 24       	eor	r1, r1
    1264:	ee cf       	rjmp	.-36     	; 0x1242 <__fp_szero>

00001266 <__mulsf3x>:
    1266:	ca df       	rcall	.-108    	; 0x11fc <__fp_split3>
    1268:	a0 f3       	brcs	.-24     	; 0x1252 <__mulsf3+0x4>

0000126a <__mulsf3_pse>:
    126a:	95 9f       	mul	r25, r21
    126c:	d1 f3       	breq	.-12     	; 0x1262 <__mulsf3+0x14>
    126e:	95 0f       	add	r25, r21
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	55 1f       	adc	r21, r21
    1274:	62 9f       	mul	r22, r18
    1276:	f0 01       	movw	r30, r0
    1278:	72 9f       	mul	r23, r18
    127a:	bb 27       	eor	r27, r27
    127c:	f0 0d       	add	r31, r0
    127e:	b1 1d       	adc	r27, r1
    1280:	63 9f       	mul	r22, r19
    1282:	aa 27       	eor	r26, r26
    1284:	f0 0d       	add	r31, r0
    1286:	b1 1d       	adc	r27, r1
    1288:	aa 1f       	adc	r26, r26
    128a:	64 9f       	mul	r22, r20
    128c:	66 27       	eor	r22, r22
    128e:	b0 0d       	add	r27, r0
    1290:	a1 1d       	adc	r26, r1
    1292:	66 1f       	adc	r22, r22
    1294:	82 9f       	mul	r24, r18
    1296:	22 27       	eor	r18, r18
    1298:	b0 0d       	add	r27, r0
    129a:	a1 1d       	adc	r26, r1
    129c:	62 1f       	adc	r22, r18
    129e:	73 9f       	mul	r23, r19
    12a0:	b0 0d       	add	r27, r0
    12a2:	a1 1d       	adc	r26, r1
    12a4:	62 1f       	adc	r22, r18
    12a6:	83 9f       	mul	r24, r19
    12a8:	a0 0d       	add	r26, r0
    12aa:	61 1d       	adc	r22, r1
    12ac:	22 1f       	adc	r18, r18
    12ae:	74 9f       	mul	r23, r20
    12b0:	33 27       	eor	r19, r19
    12b2:	a0 0d       	add	r26, r0
    12b4:	61 1d       	adc	r22, r1
    12b6:	23 1f       	adc	r18, r19
    12b8:	84 9f       	mul	r24, r20
    12ba:	60 0d       	add	r22, r0
    12bc:	21 1d       	adc	r18, r1
    12be:	82 2f       	mov	r24, r18
    12c0:	76 2f       	mov	r23, r22
    12c2:	6a 2f       	mov	r22, r26
    12c4:	11 24       	eor	r1, r1
    12c6:	9f 57       	subi	r25, 0x7F	; 127
    12c8:	50 40       	sbci	r21, 0x00	; 0
    12ca:	8a f0       	brmi	.+34     	; 0x12ee <__mulsf3_pse+0x84>
    12cc:	e1 f0       	breq	.+56     	; 0x1306 <__mulsf3_pse+0x9c>
    12ce:	88 23       	and	r24, r24
    12d0:	4a f0       	brmi	.+18     	; 0x12e4 <__mulsf3_pse+0x7a>
    12d2:	ee 0f       	add	r30, r30
    12d4:	ff 1f       	adc	r31, r31
    12d6:	bb 1f       	adc	r27, r27
    12d8:	66 1f       	adc	r22, r22
    12da:	77 1f       	adc	r23, r23
    12dc:	88 1f       	adc	r24, r24
    12de:	91 50       	subi	r25, 0x01	; 1
    12e0:	50 40       	sbci	r21, 0x00	; 0
    12e2:	a9 f7       	brne	.-22     	; 0x12ce <__mulsf3_pse+0x64>
    12e4:	9e 3f       	cpi	r25, 0xFE	; 254
    12e6:	51 05       	cpc	r21, r1
    12e8:	70 f0       	brcs	.+28     	; 0x1306 <__mulsf3_pse+0x9c>
    12ea:	60 cf       	rjmp	.-320    	; 0x11ac <__fp_inf>
    12ec:	aa cf       	rjmp	.-172    	; 0x1242 <__fp_szero>
    12ee:	5f 3f       	cpi	r21, 0xFF	; 255
    12f0:	ec f3       	brlt	.-6      	; 0x12ec <__mulsf3_pse+0x82>
    12f2:	98 3e       	cpi	r25, 0xE8	; 232
    12f4:	dc f3       	brlt	.-10     	; 0x12ec <__mulsf3_pse+0x82>
    12f6:	86 95       	lsr	r24
    12f8:	77 95       	ror	r23
    12fa:	67 95       	ror	r22
    12fc:	b7 95       	ror	r27
    12fe:	f7 95       	ror	r31
    1300:	e7 95       	ror	r30
    1302:	9f 5f       	subi	r25, 0xFF	; 255
    1304:	c1 f7       	brne	.-16     	; 0x12f6 <__mulsf3_pse+0x8c>
    1306:	fe 2b       	or	r31, r30
    1308:	88 0f       	add	r24, r24
    130a:	91 1d       	adc	r25, r1
    130c:	96 95       	lsr	r25
    130e:	87 95       	ror	r24
    1310:	97 f9       	bld	r25, 7
    1312:	08 95       	ret

00001314 <__udivmodhi4>:
    1314:	aa 1b       	sub	r26, r26
    1316:	bb 1b       	sub	r27, r27
    1318:	51 e1       	ldi	r21, 0x11	; 17
    131a:	07 c0       	rjmp	.+14     	; 0x132a <__udivmodhi4_ep>

0000131c <__udivmodhi4_loop>:
    131c:	aa 1f       	adc	r26, r26
    131e:	bb 1f       	adc	r27, r27
    1320:	a6 17       	cp	r26, r22
    1322:	b7 07       	cpc	r27, r23
    1324:	10 f0       	brcs	.+4      	; 0x132a <__udivmodhi4_ep>
    1326:	a6 1b       	sub	r26, r22
    1328:	b7 0b       	sbc	r27, r23

0000132a <__udivmodhi4_ep>:
    132a:	88 1f       	adc	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	5a 95       	dec	r21
    1330:	a9 f7       	brne	.-22     	; 0x131c <__udivmodhi4_loop>
    1332:	80 95       	com	r24
    1334:	90 95       	com	r25
    1336:	bc 01       	movw	r22, r24
    1338:	cd 01       	movw	r24, r26
    133a:	08 95       	ret

0000133c <_exit>:
    133c:	f8 94       	cli

0000133e <__stop_program>:
    133e:	ff cf       	rjmp	.-2      	; 0x133e <__stop_program>
