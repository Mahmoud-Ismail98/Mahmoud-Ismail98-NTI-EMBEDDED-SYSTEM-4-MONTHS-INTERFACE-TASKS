
ATMEGA32_DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000a10  00000aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800074  00800074  00000ab8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ae8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00000b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d36  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d8f  00000000  00000000  00002ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001503  00000000  00000000  00003861  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000614  00000000  00000000  00004d64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a75  00000000  00000000  00005378  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001af6  00000000  00000000  00005ded  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  000078e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__vector_1>
   8:	0c 94 88 03 	jmp	0x710	; 0x710 <__vector_2>
   c:	0c 94 b4 03 	jmp	0x768	; 0x768 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__vector_10>
  2c:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__vector_11>
  30:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 31 02 	call	0x462	; 0x462 <main>
  8a:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_voidWriteCharacter>:
	//LCD_voidSendCommand(0x14);   //INCREAMENT CURSOR TO RIGHT
}

void Lcd_voidShiftLeft(void)
{
	LCD_voidSendCommand(0x18);
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	89 e0       	ldi	r24, 0x09	; 9
  9a:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	8a e0       	ldi	r24, 0x0A	; 10
  a2:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
  a6:	6c 2f       	mov	r22, r28
  a8:	61 70       	andi	r22, 0x01	; 1
  aa:	80 e1       	ldi	r24, 0x10	; 16
  ac:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
  b0:	c1 fb       	bst	r28, 1
  b2:	66 27       	eor	r22, r22
  b4:	60 f9       	bld	r22, 0
  b6:	81 e1       	ldi	r24, 0x11	; 17
  b8:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
  bc:	c2 fb       	bst	r28, 2
  be:	66 27       	eor	r22, r22
  c0:	60 f9       	bld	r22, 0
  c2:	82 e1       	ldi	r24, 0x12	; 18
  c4:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
  c8:	c3 fb       	bst	r28, 3
  ca:	66 27       	eor	r22, r22
  cc:	60 f9       	bld	r22, 0
  ce:	83 e1       	ldi	r24, 0x13	; 19
  d0:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
  d4:	c4 fb       	bst	r28, 4
  d6:	66 27       	eor	r22, r22
  d8:	60 f9       	bld	r22, 0
  da:	84 e1       	ldi	r24, 0x14	; 20
  dc:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
  e0:	c5 fb       	bst	r28, 5
  e2:	66 27       	eor	r22, r22
  e4:	60 f9       	bld	r22, 0
  e6:	85 e1       	ldi	r24, 0x15	; 21
  e8:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
  ec:	c6 fb       	bst	r28, 6
  ee:	66 27       	eor	r22, r22
  f0:	60 f9       	bld	r22, 0
  f2:	86 e1       	ldi	r24, 0x16	; 22
  f4:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
  f8:	6c 2f       	mov	r22, r28
  fa:	66 1f       	adc	r22, r22
  fc:	66 27       	eor	r22, r22
  fe:	66 1f       	adc	r22, r22
 100:	87 e1       	ldi	r24, 0x17	; 23
 102:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	88 e0       	ldi	r24, 0x08	; 8
 10a:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	88 e0       	ldi	r24, 0x08	; 8
 112:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <LCD_voidSendCommand>:
 11a:	cf 93       	push	r28
 11c:	c8 2f       	mov	r28, r24
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	8a e0       	ldi	r24, 0x0A	; 10
 122:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	89 e0       	ldi	r24, 0x09	; 9
 12a:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
 12e:	6c 2f       	mov	r22, r28
 130:	61 70       	andi	r22, 0x01	; 1
 132:	80 e1       	ldi	r24, 0x10	; 16
 134:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
 138:	c1 fb       	bst	r28, 1
 13a:	66 27       	eor	r22, r22
 13c:	60 f9       	bld	r22, 0
 13e:	81 e1       	ldi	r24, 0x11	; 17
 140:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
 144:	c2 fb       	bst	r28, 2
 146:	66 27       	eor	r22, r22
 148:	60 f9       	bld	r22, 0
 14a:	82 e1       	ldi	r24, 0x12	; 18
 14c:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
 150:	c3 fb       	bst	r28, 3
 152:	66 27       	eor	r22, r22
 154:	60 f9       	bld	r22, 0
 156:	83 e1       	ldi	r24, 0x13	; 19
 158:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
 15c:	c4 fb       	bst	r28, 4
 15e:	66 27       	eor	r22, r22
 160:	60 f9       	bld	r22, 0
 162:	84 e1       	ldi	r24, 0x14	; 20
 164:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
 168:	c5 fb       	bst	r28, 5
 16a:	66 27       	eor	r22, r22
 16c:	60 f9       	bld	r22, 0
 16e:	85 e1       	ldi	r24, 0x15	; 21
 170:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
 174:	c6 fb       	bst	r28, 6
 176:	66 27       	eor	r22, r22
 178:	60 f9       	bld	r22, 0
 17a:	86 e1       	ldi	r24, 0x16	; 22
 17c:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
 180:	6c 2f       	mov	r22, r28
 182:	66 1f       	adc	r22, r22
 184:	66 27       	eor	r22, r22
 186:	66 1f       	adc	r22, r22
 188:	87 e1       	ldi	r24, 0x17	; 23
 18a:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	88 e0       	ldi	r24, 0x08	; 8
 192:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	8a 95       	dec	r24
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_voidSendCommand+0x7e>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_voidSendCommand+0x84>
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	88 e0       	ldi	r24, 0x08	; 8
 1a2:	0e 94 83 02 	call	0x506	; 0x506 <DIO_WritrPin>
 1a6:	87 ec       	ldi	r24, 0xC7	; 199
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_voidSendCommand+0x90>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <LCD_voidSendCommand+0x96>
 1b0:	00 00       	nop
 1b2:	8f e1       	ldi	r24, 0x1F	; 31
 1b4:	9e e4       	ldi	r25, 0x4E	; 78
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_voidSendCommand+0x9c>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_voidSendCommand+0xa2>
 1bc:	00 00       	nop
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <LCD_voidInit>:
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	80 e1       	ldi	r24, 0x10	; 16
 1c6:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Port_setPinDirection>
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	81 e1       	ldi	r24, 0x11	; 17
 1ce:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Port_setPinDirection>
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	82 e1       	ldi	r24, 0x12	; 18
 1d6:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Port_setPinDirection>
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	83 e1       	ldi	r24, 0x13	; 19
 1de:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Port_setPinDirection>
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	84 e1       	ldi	r24, 0x14	; 20
 1e6:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Port_setPinDirection>
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	85 e1       	ldi	r24, 0x15	; 21
 1ee:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Port_setPinDirection>
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	86 e1       	ldi	r24, 0x16	; 22
 1f6:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Port_setPinDirection>
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	87 e1       	ldi	r24, 0x17	; 23
 1fe:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Port_setPinDirection>
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	8a e0       	ldi	r24, 0x0A	; 10
 206:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Port_setPinDirection>
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	89 e0       	ldi	r24, 0x09	; 9
 20e:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Port_setPinDirection>
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	88 e0       	ldi	r24, 0x08	; 8
 216:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Port_setPinDirection>
 21a:	8f e0       	ldi	r24, 0x0F	; 15
 21c:	97 e2       	ldi	r25, 0x27	; 39
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <LCD_voidInit+0x5c>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LCD_voidInit+0x62>
 224:	00 00       	nop
 226:	8f e3       	ldi	r24, 0x3F	; 63
 228:	9c e9       	ldi	r25, 0x9C	; 156
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <LCD_voidInit+0x68>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_voidInit+0x6e>
 230:	00 00       	nop
 232:	88 e3       	ldi	r24, 0x38	; 56
 234:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_voidSendCommand>
 238:	8e e0       	ldi	r24, 0x0E	; 14
 23a:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_voidSendCommand>
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_voidSendCommand>
 244:	8f e9       	ldi	r24, 0x9F	; 159
 246:	9f e0       	ldi	r25, 0x0F	; 15
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <LCD_voidInit+0x86>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <LCD_voidInit+0x8c>
 24e:	00 00       	nop
 250:	8c e0       	ldi	r24, 0x0C	; 12
 252:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_voidSendCommand>
 256:	08 95       	ret

00000258 <LCD_voidWriteString>:
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	ec 01       	movw	r28, r24
 25e:	03 c0       	rjmp	.+6      	; 0x266 <LCD_voidWriteString+0xe>
 260:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidWriteCharacter>
 264:	21 96       	adiw	r28, 0x01	; 1
 266:	88 81       	ld	r24, Y
 268:	81 11       	cpse	r24, r1
 26a:	fa cf       	rjmp	.-12     	; 0x260 <LCD_voidWriteString+0x8>
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <LCD_voidSetCursor>:
 272:	84 31       	cpi	r24, 0x14	; 20
 274:	a8 f4       	brcc	.+42     	; 0x2a0 <LCD_voidSetCursor+0x2e>
 276:	64 30       	cpi	r22, 0x04	; 4
 278:	98 f4       	brcc	.+38     	; 0x2a0 <LCD_voidSetCursor+0x2e>
 27a:	61 30       	cpi	r22, 0x01	; 1
 27c:	39 f0       	breq	.+14     	; 0x28c <LCD_voidSetCursor+0x1a>
 27e:	60 f0       	brcs	.+24     	; 0x298 <LCD_voidSetCursor+0x26>
 280:	62 30       	cpi	r22, 0x02	; 2
 282:	31 f0       	breq	.+12     	; 0x290 <LCD_voidSetCursor+0x1e>
 284:	63 30       	cpi	r22, 0x03	; 3
 286:	31 f0       	breq	.+12     	; 0x294 <LCD_voidSetCursor+0x22>
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	07 c0       	rjmp	.+14     	; 0x29a <LCD_voidSetCursor+0x28>
 28c:	90 ec       	ldi	r25, 0xC0	; 192
 28e:	05 c0       	rjmp	.+10     	; 0x29a <LCD_voidSetCursor+0x28>
 290:	94 e9       	ldi	r25, 0x94	; 148
 292:	03 c0       	rjmp	.+6      	; 0x29a <LCD_voidSetCursor+0x28>
 294:	94 ed       	ldi	r25, 0xD4	; 212
 296:	01 c0       	rjmp	.+2      	; 0x29a <LCD_voidSetCursor+0x28>
 298:	90 e8       	ldi	r25, 0x80	; 128
 29a:	89 0f       	add	r24, r25
 29c:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_voidSendCommand>
 2a0:	08 95       	ret

000002a2 <lcd_voidSendNumber>:
}


void lcd_voidSendNumber   ( u16 *Copynum2)
{
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
	//Copynum=50;
u16	Copynum=*Copynum2;
 2a6:	fc 01       	movw	r30, r24
 2a8:	40 81       	ld	r20, Z
 2aa:	51 81       	ldd	r21, Z+1	; 0x01
u16 LOC_u64Reversed = 1 ;
if( Copynum == 0 ){ LCD_voidWriteCharacter('0'); }
 2ac:	41 15       	cp	r20, r1
 2ae:	51 05       	cpc	r21, r1
 2b0:	a9 f5       	brne	.+106    	; 0x31c <lcd_voidSendNumber+0x7a>
 2b2:	80 e3       	ldi	r24, 0x30	; 48
 2b4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidWriteCharacter>
 2b8:	63 c0       	rjmp	.+198    	; 0x380 <lcd_voidSendNumber+0xde>
else{
	while( Copynum != 0 ){
		LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copynum % 10 );
 2ba:	ce 01       	movw	r24, r28
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	cc 0f       	add	r28, r28
 2c2:	dd 1f       	adc	r29, r29
 2c4:	cc 0f       	add	r28, r28
 2c6:	dd 1f       	adc	r29, r29
 2c8:	cc 0f       	add	r28, r28
 2ca:	dd 1f       	adc	r29, r29
 2cc:	c8 0f       	add	r28, r24
 2ce:	d9 1f       	adc	r29, r25
 2d0:	9a 01       	movw	r18, r20
 2d2:	ad ec       	ldi	r26, 0xCD	; 205
 2d4:	bc ec       	ldi	r27, 0xCC	; 204
 2d6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__umulhisi3>
 2da:	96 95       	lsr	r25
 2dc:	87 95       	ror	r24
 2de:	96 95       	lsr	r25
 2e0:	87 95       	ror	r24
 2e2:	96 95       	lsr	r25
 2e4:	87 95       	ror	r24
 2e6:	9c 01       	movw	r18, r24
 2e8:	22 0f       	add	r18, r18
 2ea:	33 1f       	adc	r19, r19
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	82 0f       	add	r24, r18
 2fa:	93 1f       	adc	r25, r19
 2fc:	9a 01       	movw	r18, r20
 2fe:	28 1b       	sub	r18, r24
 300:	39 0b       	sbc	r19, r25
 302:	c2 0f       	add	r28, r18
 304:	d3 1f       	adc	r29, r19
		Copynum /= 10 ;
 306:	9a 01       	movw	r18, r20
 308:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__umulhisi3>
 30c:	ac 01       	movw	r20, r24
 30e:	56 95       	lsr	r21
 310:	47 95       	ror	r20
 312:	56 95       	lsr	r21
 314:	47 95       	ror	r20
 316:	56 95       	lsr	r21
 318:	47 95       	ror	r20
 31a:	02 c0       	rjmp	.+4      	; 0x320 <lcd_voidSendNumber+0x7e>
 31c:	c1 e0       	ldi	r28, 0x01	; 1
 31e:	d0 e0       	ldi	r29, 0x00	; 0
	//Copynum=50;
u16	Copynum=*Copynum2;
u16 LOC_u64Reversed = 1 ;
if( Copynum == 0 ){ LCD_voidWriteCharacter('0'); }
else{
	while( Copynum != 0 ){
 320:	41 15       	cp	r20, r1
 322:	51 05       	cpc	r21, r1
 324:	51 f6       	brne	.-108    	; 0x2ba <lcd_voidSendNumber+0x18>
 326:	29 c0       	rjmp	.+82     	; 0x37a <lcd_voidSendNumber+0xd8>
		LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copynum % 10 );
		Copynum /= 10 ;
	}
	while( LOC_u64Reversed != 1 ){
		LCD_voidWriteCharacter( ( LOC_u64Reversed % 10 ) + 48 );
 328:	9e 01       	movw	r18, r28
 32a:	ad ec       	ldi	r26, 0xCD	; 205
 32c:	bc ec       	ldi	r27, 0xCC	; 204
 32e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__umulhisi3>
 332:	96 95       	lsr	r25
 334:	87 95       	ror	r24
 336:	96 95       	lsr	r25
 338:	87 95       	ror	r24
 33a:	96 95       	lsr	r25
 33c:	87 95       	ror	r24
 33e:	9c 01       	movw	r18, r24
 340:	22 0f       	add	r18, r18
 342:	33 1f       	adc	r19, r19
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	82 0f       	add	r24, r18
 352:	93 1f       	adc	r25, r19
 354:	fe 01       	movw	r30, r28
 356:	e8 1b       	sub	r30, r24
 358:	f9 0b       	sbc	r31, r25
 35a:	cf 01       	movw	r24, r30
 35c:	80 5d       	subi	r24, 0xD0	; 208
 35e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidWriteCharacter>
		LOC_u64Reversed /= 10 ;
 362:	9e 01       	movw	r18, r28
 364:	ad ec       	ldi	r26, 0xCD	; 205
 366:	bc ec       	ldi	r27, 0xCC	; 204
 368:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__umulhisi3>
 36c:	ec 01       	movw	r28, r24
 36e:	d6 95       	lsr	r29
 370:	c7 95       	ror	r28
 372:	d6 95       	lsr	r29
 374:	c7 95       	ror	r28
 376:	d6 95       	lsr	r29
 378:	c7 95       	ror	r28
else{
	while( Copynum != 0 ){
		LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copynum % 10 );
		Copynum /= 10 ;
	}
	while( LOC_u64Reversed != 1 ){
 37a:	c1 30       	cpi	r28, 0x01	; 1
 37c:	d1 05       	cpc	r29, r1
 37e:	a1 f6       	brne	.-88     	; 0x328 <lcd_voidSendNumber+0x86>
		LCD_voidWriteCharacter( ( LOC_u64Reversed % 10 ) + 48 );
		LOC_u64Reversed /= 10 ;
	}
}

}
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <TIMER0_ISR_OV>:
volatile u16 min=0;
volatile u16 hours=0;

void TIMER0_ISR_OV(void)
{
	TGL_BIT(PORTA,PORTA_PIN0);
 386:	9b b3       	in	r25, 0x1b	; 27
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	89 27       	eor	r24, r25
 38c:	8b bb       	out	0x1b, r24	; 27
	sec++;
 38e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sec>
 392:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <sec+0x1>
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <sec+0x1>
 39c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <sec>
	TCNT0=0x00;
 3a0:	12 be       	out	0x32, r1	; 50
 3a2:	08 95       	ret

000003a4 <show_time>:
	
}
void show_time(void)
{
	LCD_voidSetCursor(0,1);
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 39 01 	call	0x272	; 0x272 <LCD_voidSetCursor>

	if (sec==60)
 3b0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sec>
 3b4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <sec+0x1>
 3b8:	cc 97       	sbiw	r24, 0x3c	; 60
 3ba:	69 f4       	brne	.+26     	; 0x3d6 <show_time+0x32>
	{
		sec=0;
 3bc:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <sec+0x1>
 3c0:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <sec>
		min++;
 3c4:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <min>
 3c8:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <min+0x1>
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <min+0x1>
 3d2:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <min>
	}
	//sec++;
	if (min==60)
 3d6:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <min>
 3da:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <min+0x1>
 3de:	cc 97       	sbiw	r24, 0x3c	; 60
 3e0:	69 f4       	brne	.+26     	; 0x3fc <show_time+0x58>
	{
		hours++;
 3e2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 3e6:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
 3f0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
		min==0;
 3f4:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <min>
 3f8:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <min+0x1>
	}
	if (hours<10)
 3fc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 400:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 404:	0a 97       	sbiw	r24, 0x0a	; 10
 406:	20 f4       	brcc	.+8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
	{
		LCD_voidWriteCharacter('0');
 408:	80 e3       	ldi	r24, 0x30	; 48
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidWriteCharacter>
	}
	lcd_voidSendNumber(&hours);
 410:	84 e7       	ldi	r24, 0x74	; 116
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_voidSendNumber>
	LCD_voidWriteCharacter(':');
 418:	8a e3       	ldi	r24, 0x3A	; 58
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidWriteCharacter>
	if (min<10)
 420:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <min>
 424:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <min+0x1>
 428:	0a 97       	sbiw	r24, 0x0a	; 10
 42a:	20 f4       	brcc	.+8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
	{
		LCD_voidWriteCharacter('0');
 42c:	80 e3       	ldi	r24, 0x30	; 48
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidWriteCharacter>
	}
	lcd_voidSendNumber(&min);
 434:	86 e7       	ldi	r24, 0x76	; 118
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_voidSendNumber>
	LCD_voidWriteCharacter(':');
 43c:	8a e3       	ldi	r24, 0x3A	; 58
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidWriteCharacter>
	if (sec<10)
 444:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sec>
 448:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <sec+0x1>
 44c:	0a 97       	sbiw	r24, 0x0a	; 10
 44e:	20 f4       	brcc	.+8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
	{
		LCD_voidWriteCharacter('0');
 450:	80 e3       	ldi	r24, 0x30	; 48
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidWriteCharacter>
	}
	lcd_voidSendNumber(&sec);
 458:	88 e7       	ldi	r24, 0x78	; 120
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_voidSendNumber>
 460:	08 95       	ret

00000462 <main>:
}
int main(void)
{	
	
	Port_setPinDirection(PORTA_PIN0,PIN_OUTPUT);
 462:	61 e0       	ldi	r22, 0x01	; 1
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Port_setPinDirection>
	Global_Interrupt_EnablE();
 46a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Global_Interrupt_EnablE>
	LCD_voidInit();
 46e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_voidInit>
	TIMER0_voidMode();
 472:	0e 94 b2 04 	call	0x964	; 0x964 <TIMER0_voidMode>
	TIMER0_SET_COUNTER(50);
 476:	82 e3       	ldi	r24, 0x32	; 50
 478:	0e 94 c4 04 	call	0x988	; 0x988 <TIMER0_SET_COUNTER>
	Timer0_EnableInterupt();
 47c:	0e 94 bb 04 	call	0x976	; 0x976 <Timer0_EnableInterupt>
	LCD_voidWriteString("stop watch");
 480:	80 e6       	ldi	r24, 0x60	; 96
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_voidWriteString>
	LCD_voidSetCursor(0,1);
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 39 01 	call	0x272	; 0x272 <LCD_voidSetCursor>
	LCD_voidWriteString("00:00:00");
 494:	8b e6       	ldi	r24, 0x6B	; 107
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_voidWriteString>
	Timer0SetCallBack(TIMER0_ISR_OV);
 49c:	83 ec       	ldi	r24, 0xC3	; 195
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	0e 94 bf 04 	call	0x97e	; 0x97e <Timer0SetCallBack>
	
	while(1)
	{
	   show_time();
 4a4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <show_time>
 4a8:	fd cf       	rjmp	.-6      	; 0x4a4 <main+0x42>

000004aa <__vector_16>:
	SFIOR|=(Free_Running_mode<<5);
	ADCSRA |= (1<<ADC_START_CONVERSATIONPin);		/*6 IS  Start_conversion_pin  */	
}
void __vector_16 (void)	__attribute__((signal)) ;
void __vector_16 (void)
{
 4aa:	1f 92       	push	r1
 4ac:	0f 92       	push	r0
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	0f 92       	push	r0
 4b2:	11 24       	eor	r1, r1
 4b4:	2f 93       	push	r18
 4b6:	3f 93       	push	r19
 4b8:	4f 93       	push	r20
 4ba:	5f 93       	push	r21
 4bc:	6f 93       	push	r22
 4be:	7f 93       	push	r23
 4c0:	8f 93       	push	r24
 4c2:	9f 93       	push	r25
 4c4:	af 93       	push	r26
 4c6:	bf 93       	push	r27
 4c8:	ef 93       	push	r30
 4ca:	ff 93       	push	r31
		u16 loc_AdcVal = (u16)ADCL ;
 4cc:	24 b1       	in	r18, 0x04	; 4
		loc_AdcVal = loc_AdcVal+(u16)ADCH*256 ;
 4ce:	85 b1       	in	r24, 0x05	; 5
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	98 2f       	mov	r25, r24
 4d4:	88 27       	eor	r24, r24
    	ADC_PTRTOFUN(loc_AdcVal);
 4d6:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <ADC_PTRTOFUN>
 4da:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <ADC_PTRTOFUN+0x1>
 4de:	82 0f       	add	r24, r18
 4e0:	91 1d       	adc	r25, r1
 4e2:	09 95       	icall
}
 4e4:	ff 91       	pop	r31
 4e6:	ef 91       	pop	r30
 4e8:	bf 91       	pop	r27
 4ea:	af 91       	pop	r26
 4ec:	9f 91       	pop	r25
 4ee:	8f 91       	pop	r24
 4f0:	7f 91       	pop	r23
 4f2:	6f 91       	pop	r22
 4f4:	5f 91       	pop	r21
 4f6:	4f 91       	pop	r20
 4f8:	3f 91       	pop	r19
 4fa:	2f 91       	pop	r18
 4fc:	0f 90       	pop	r0
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	0f 90       	pop	r0
 502:	1f 90       	pop	r1
 504:	18 95       	reti

00000506 <DIO_WritrPin>:
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
if (pin_id>31)  /*in case not valid pin id */
 506:	80 32       	cpi	r24, 0x20	; 32
 508:	08 f0       	brcs	.+2      	; 0x50c <DIO_WritrPin+0x6>
 50a:	be c0       	rjmp	.+380    	; 0x688 <DIO_WritrPin+0x182>
{
	ERROR_LOCRET=PIN_NUMBER_ERROR;
}
else	 /*case valid id pin*/
{	
	u8 loc_pin_id =pin_id % 8;
 50c:	98 2f       	mov	r25, r24
 50e:	97 70       	andi	r25, 0x07	; 7

	u8 loc_port_num=pin_id/8;
 510:	86 95       	lsr	r24
 512:	86 95       	lsr	r24
 514:	86 95       	lsr	r24
	switch(loc_port_num)
 516:	81 30       	cpi	r24, 0x01	; 1
 518:	a1 f1       	breq	.+104    	; 0x582 <DIO_WritrPin+0x7c>
 51a:	38 f0       	brcs	.+14     	; 0x52a <DIO_WritrPin+0x24>
 51c:	82 30       	cpi	r24, 0x02	; 2
 51e:	09 f4       	brne	.+2      	; 0x522 <DIO_WritrPin+0x1c>
 520:	5c c0       	rjmp	.+184    	; 0x5da <DIO_WritrPin+0xd4>
 522:	83 30       	cpi	r24, 0x03	; 3
 524:	09 f4       	brne	.+2      	; 0x528 <DIO_WritrPin+0x22>
 526:	85 c0       	rjmp	.+266    	; 0x632 <DIO_WritrPin+0x12c>
 528:	b1 c0       	rjmp	.+354    	; 0x68c <DIO_WritrPin+0x186>
	{
		case u8PORTA:
		if (GET_BIT(DDRA,loc_pin_id)==PIN_OUTPUT)
 52a:	2a b3       	in	r18, 0x1a	; 26
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	09 2e       	mov	r0, r25
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_WritrPin+0x30>
 532:	35 95       	asr	r19
 534:	27 95       	ror	r18
 536:	0a 94       	dec	r0
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_WritrPin+0x2c>
 53a:	20 ff       	sbrs	r18, 0
 53c:	a9 c0       	rjmp	.+338    	; 0x690 <DIO_WritrPin+0x18a>
		{
			switch (level_value)
 53e:	66 23       	and	r22, r22
 540:	89 f0       	breq	.+34     	; 0x564 <DIO_WritrPin+0x5e>
 542:	61 30       	cpi	r22, 0x01	; 1
 544:	09 f0       	breq	.+2      	; 0x548 <DIO_WritrPin+0x42>
 546:	a6 c0       	rjmp	.+332    	; 0x694 <DIO_WritrPin+0x18e>
			{
				case HIGH_LEVEL:
				SET_BIT(PORTA,loc_pin_id);
 548:	4b b3       	in	r20, 0x1b	; 27
 54a:	21 e0       	ldi	r18, 0x01	; 1
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	b9 01       	movw	r22, r18
 550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_WritrPin+0x50>
 552:	66 0f       	add	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	9a 95       	dec	r25
 558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_WritrPin+0x4c>
 55a:	cb 01       	movw	r24, r22
 55c:	84 2b       	or	r24, r20
 55e:	8b bb       	out	0x1b, r24	; 27
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 560:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (level_value)
			{
				case HIGH_LEVEL:
				SET_BIT(PORTA,loc_pin_id);
				break;
 562:	08 95       	ret
				case LOW_LEVEL:
				CLR_BIT(PORTA,loc_pin_id);
 564:	4b b3       	in	r20, 0x1b	; 27
 566:	21 e0       	ldi	r18, 0x01	; 1
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	b9 01       	movw	r22, r18
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_WritrPin+0x6c>
 56e:	66 0f       	add	r22, r22
 570:	77 1f       	adc	r23, r23
 572:	9a 95       	dec	r25
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_WritrPin+0x68>
 576:	cb 01       	movw	r24, r22
 578:	80 95       	com	r24
 57a:	84 23       	and	r24, r20
 57c:	8b bb       	out	0x1b, r24	; 27
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 57e:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH_LEVEL:
				SET_BIT(PORTA,loc_pin_id);
				break;
				case LOW_LEVEL:
				CLR_BIT(PORTA,loc_pin_id);
				break;
 580:	08 95       	ret
		else
		{	ERROR_LOCRET=PIN_DIR_ERROR;
		}
		break;
		case u8PORTB:
		if (GET_BIT(DDRB,loc_pin_id)==PIN_OUTPUT)
 582:	27 b3       	in	r18, 0x17	; 23
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	09 2e       	mov	r0, r25
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_WritrPin+0x88>
 58a:	35 95       	asr	r19
 58c:	27 95       	ror	r18
 58e:	0a 94       	dec	r0
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_WritrPin+0x84>
 592:	20 ff       	sbrs	r18, 0
 594:	81 c0       	rjmp	.+258    	; 0x698 <DIO_WritrPin+0x192>
		{
			switch (level_value)
 596:	66 23       	and	r22, r22
 598:	89 f0       	breq	.+34     	; 0x5bc <DIO_WritrPin+0xb6>
 59a:	61 30       	cpi	r22, 0x01	; 1
 59c:	09 f0       	breq	.+2      	; 0x5a0 <DIO_WritrPin+0x9a>
 59e:	7e c0       	rjmp	.+252    	; 0x69c <DIO_WritrPin+0x196>
			{
				case HIGH_LEVEL :
				SET_BIT(PORTB,loc_pin_id);
 5a0:	48 b3       	in	r20, 0x18	; 24
 5a2:	21 e0       	ldi	r18, 0x01	; 1
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	b9 01       	movw	r22, r18
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_WritrPin+0xa8>
 5aa:	66 0f       	add	r22, r22
 5ac:	77 1f       	adc	r23, r23
 5ae:	9a 95       	dec	r25
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_WritrPin+0xa4>
 5b2:	cb 01       	movw	r24, r22
 5b4:	84 2b       	or	r24, r20
 5b6:	88 bb       	out	0x18, r24	; 24
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 5b8:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (level_value)
			{
				case HIGH_LEVEL :
				SET_BIT(PORTB,loc_pin_id);
				break;
 5ba:	08 95       	ret
				case LOW_LEVEL : 
				CLR_BIT(PORTB,loc_pin_id);
 5bc:	48 b3       	in	r20, 0x18	; 24
 5be:	21 e0       	ldi	r18, 0x01	; 1
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	b9 01       	movw	r22, r18
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_WritrPin+0xc4>
 5c6:	66 0f       	add	r22, r22
 5c8:	77 1f       	adc	r23, r23
 5ca:	9a 95       	dec	r25
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_WritrPin+0xc0>
 5ce:	cb 01       	movw	r24, r22
 5d0:	80 95       	com	r24
 5d2:	84 23       	and	r24, r20
 5d4:	88 bb       	out	0x18, r24	; 24
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 5d6:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH_LEVEL :
				SET_BIT(PORTB,loc_pin_id);
				break;
				case LOW_LEVEL : 
				CLR_BIT(PORTB,loc_pin_id);
				break;
 5d8:	08 95       	ret
		{	ERROR_LOCRET=PIN_DIR_ERROR;
		}
		break;
		
		case u8PORTC:
		if (GET_BIT(DDRC,loc_pin_id)==PIN_OUTPUT)
 5da:	24 b3       	in	r18, 0x14	; 20
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	09 2e       	mov	r0, r25
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_WritrPin+0xe0>
 5e2:	35 95       	asr	r19
 5e4:	27 95       	ror	r18
 5e6:	0a 94       	dec	r0
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_WritrPin+0xdc>
 5ea:	20 ff       	sbrs	r18, 0
 5ec:	59 c0       	rjmp	.+178    	; 0x6a0 <DIO_WritrPin+0x19a>
		{
			switch (level_value)
 5ee:	66 23       	and	r22, r22
 5f0:	89 f0       	breq	.+34     	; 0x614 <DIO_WritrPin+0x10e>
 5f2:	61 30       	cpi	r22, 0x01	; 1
 5f4:	09 f0       	breq	.+2      	; 0x5f8 <DIO_WritrPin+0xf2>
 5f6:	56 c0       	rjmp	.+172    	; 0x6a4 <DIO_WritrPin+0x19e>
			{
				case HIGH_LEVEL :
				SET_BIT(PORTC,loc_pin_id);
 5f8:	45 b3       	in	r20, 0x15	; 21
 5fa:	21 e0       	ldi	r18, 0x01	; 1
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	b9 01       	movw	r22, r18
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_WritrPin+0x100>
 602:	66 0f       	add	r22, r22
 604:	77 1f       	adc	r23, r23
 606:	9a 95       	dec	r25
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_WritrPin+0xfc>
 60a:	cb 01       	movw	r24, r22
 60c:	84 2b       	or	r24, r20
 60e:	85 bb       	out	0x15, r24	; 21
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 610:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (level_value)
			{
				case HIGH_LEVEL :
				SET_BIT(PORTC,loc_pin_id);
				break;
 612:	08 95       	ret
				case  LOW_LEVEL :
				CLR_BIT(PORTC,loc_pin_id);
 614:	45 b3       	in	r20, 0x15	; 21
 616:	21 e0       	ldi	r18, 0x01	; 1
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	b9 01       	movw	r22, r18
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_WritrPin+0x11c>
 61e:	66 0f       	add	r22, r22
 620:	77 1f       	adc	r23, r23
 622:	9a 95       	dec	r25
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_WritrPin+0x118>
 626:	cb 01       	movw	r24, r22
 628:	80 95       	com	r24
 62a:	84 23       	and	r24, r20
 62c:	85 bb       	out	0x15, r24	; 21
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 62e:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH_LEVEL :
				SET_BIT(PORTC,loc_pin_id);
				break;
				case  LOW_LEVEL :
				CLR_BIT(PORTC,loc_pin_id);
				break;
 630:	08 95       	ret
		{	ERROR_LOCRET=PIN_DIR_ERROR;
		}
		break;

		case u8PORTD:
		if (GET_BIT(DDRD,loc_pin_id)==PIN_OUTPUT)
 632:	21 b3       	in	r18, 0x11	; 17
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	09 2e       	mov	r0, r25
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_WritrPin+0x138>
 63a:	35 95       	asr	r19
 63c:	27 95       	ror	r18
 63e:	0a 94       	dec	r0
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_WritrPin+0x134>
 642:	20 ff       	sbrs	r18, 0
 644:	31 c0       	rjmp	.+98     	; 0x6a8 <DIO_WritrPin+0x1a2>
		{
			switch (level_value)
 646:	66 23       	and	r22, r22
 648:	81 f0       	breq	.+32     	; 0x66a <DIO_WritrPin+0x164>
 64a:	61 30       	cpi	r22, 0x01	; 1
 64c:	79 f5       	brne	.+94     	; 0x6ac <DIO_WritrPin+0x1a6>
			{
				case HIGH_LEVEL:
				SET_BIT(PORTD,loc_pin_id);
 64e:	42 b3       	in	r20, 0x12	; 18
 650:	21 e0       	ldi	r18, 0x01	; 1
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	b9 01       	movw	r22, r18
 656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_WritrPin+0x156>
 658:	66 0f       	add	r22, r22
 65a:	77 1f       	adc	r23, r23
 65c:	9a 95       	dec	r25
 65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_WritrPin+0x152>
 660:	cb 01       	movw	r24, r22
 662:	84 2b       	or	r24, r20
 664:	82 bb       	out	0x12, r24	; 18
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 666:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (level_value)
			{
				case HIGH_LEVEL:
				SET_BIT(PORTD,loc_pin_id);
				break;
 668:	08 95       	ret
				case LOW_LEVEL:
				CLR_BIT(PORTD,loc_pin_id);
 66a:	42 b3       	in	r20, 0x12	; 18
 66c:	21 e0       	ldi	r18, 0x01	; 1
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	b9 01       	movw	r22, r18
 672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_WritrPin+0x172>
 674:	66 0f       	add	r22, r22
 676:	77 1f       	adc	r23, r23
 678:	9a 95       	dec	r25
 67a:	e2 f7       	brpl	.-8      	; 0x674 <DIO_WritrPin+0x16e>
 67c:	cb 01       	movw	r24, r22
 67e:	80 95       	com	r24
 680:	84 23       	and	r24, r20
 682:	82 bb       	out	0x12, r24	; 18
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 684:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH_LEVEL:
				SET_BIT(PORTD,loc_pin_id);
				break;
				case LOW_LEVEL:
				CLR_BIT(PORTD,loc_pin_id);
				break;
 686:	08 95       	ret
PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
if (pin_id>31)  /*in case not valid pin id */
{
	ERROR_LOCRET=PIN_NUMBER_ERROR;
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	08 95       	ret
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	08 95       	ret
				CLR_BIT(PORTA,loc_pin_id);
				break;
			}
		}
		else
		{	ERROR_LOCRET=PIN_DIR_ERROR;
 690:	82 e0       	ldi	r24, 0x02	; 2
 692:	08 95       	ret
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	08 95       	ret
				CLR_BIT(PORTB,loc_pin_id);
				break;
			}
		}
		else
		{	ERROR_LOCRET=PIN_DIR_ERROR;
 698:	82 e0       	ldi	r24, 0x02	; 2
 69a:	08 95       	ret
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	08 95       	ret
				CLR_BIT(PORTC,loc_pin_id);
				break;
			}
		}
		else
		{	ERROR_LOCRET=PIN_DIR_ERROR;
 6a0:	82 e0       	ldi	r24, 0x02	; 2
 6a2:	08 95       	ret
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	08 95       	ret
				CLR_BIT(PORTD,loc_pin_id);
				break;
			}
		}
		else
		{	ERROR_LOCRET=PIN_DIR_ERROR;
 6a8:	82 e0       	ldi	r24, 0x02	; 2
 6aa:	08 95       	ret
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 6ac:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}
}
	return ERROR_LOCRET;
}
 6ae:	08 95       	ret

000006b0 <Global_Interrupt_EnablE>:
	SET_BIT(GICR,X);
}

void Disable_EXT_INT(u8 X)
{
	CLR_BIT(GICR,X);
 6b0:	8f b7       	in	r24, 0x3f	; 63
 6b2:	80 68       	ori	r24, 0x80	; 128
 6b4:	8f bf       	out	0x3f, r24	; 63
 6b6:	08 95       	ret

000006b8 <__vector_1>:
Call_backFromExtISR[2]();
}
*/
/* Prototype for ISR of EXTI0 */
void __vector_1(void)			__attribute__((signal));
void __vector_1(void){
 6b8:	1f 92       	push	r1
 6ba:	0f 92       	push	r0
 6bc:	0f b6       	in	r0, 0x3f	; 63
 6be:	0f 92       	push	r0
 6c0:	11 24       	eor	r1, r1
 6c2:	2f 93       	push	r18
 6c4:	3f 93       	push	r19
 6c6:	4f 93       	push	r20
 6c8:	5f 93       	push	r21
 6ca:	6f 93       	push	r22
 6cc:	7f 93       	push	r23
 6ce:	8f 93       	push	r24
 6d0:	9f 93       	push	r25
 6d2:	af 93       	push	r26
 6d4:	bf 93       	push	r27
 6d6:	ef 93       	push	r30
 6d8:	ff 93       	push	r31
	if(Call_backFromExtISR[0] != NULL){
 6da:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <Call_backFromExtISR>
 6de:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <Call_backFromExtISR+0x1>
 6e2:	30 97       	sbiw	r30, 0x00	; 0
 6e4:	21 f0       	breq	.+8      	; 0x6ee <__vector_1+0x36>
		Call_backFromExtISR[0]();
 6e6:	09 95       	icall
		SET_BIT( GIFR , EXT_INT0 );		
 6e8:	8a b7       	in	r24, 0x3a	; 58
 6ea:	80 64       	ori	r24, 0x40	; 64
 6ec:	8a bf       	out	0x3a, r24	; 58
	}
}
 6ee:	ff 91       	pop	r31
 6f0:	ef 91       	pop	r30
 6f2:	bf 91       	pop	r27
 6f4:	af 91       	pop	r26
 6f6:	9f 91       	pop	r25
 6f8:	8f 91       	pop	r24
 6fa:	7f 91       	pop	r23
 6fc:	6f 91       	pop	r22
 6fe:	5f 91       	pop	r21
 700:	4f 91       	pop	r20
 702:	3f 91       	pop	r19
 704:	2f 91       	pop	r18
 706:	0f 90       	pop	r0
 708:	0f be       	out	0x3f, r0	; 63
 70a:	0f 90       	pop	r0
 70c:	1f 90       	pop	r1
 70e:	18 95       	reti

00000710 <__vector_2>:

/* Prototype for ISR of EXTI1 */
void __vector_2(void)			__attribute__((signal));
void __vector_2(void){
 710:	1f 92       	push	r1
 712:	0f 92       	push	r0
 714:	0f b6       	in	r0, 0x3f	; 63
 716:	0f 92       	push	r0
 718:	11 24       	eor	r1, r1
 71a:	2f 93       	push	r18
 71c:	3f 93       	push	r19
 71e:	4f 93       	push	r20
 720:	5f 93       	push	r21
 722:	6f 93       	push	r22
 724:	7f 93       	push	r23
 726:	8f 93       	push	r24
 728:	9f 93       	push	r25
 72a:	af 93       	push	r26
 72c:	bf 93       	push	r27
 72e:	ef 93       	push	r30
 730:	ff 93       	push	r31
	if(Call_backFromExtISR[1] != NULL){
 732:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <Call_backFromExtISR+0x2>
 736:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <Call_backFromExtISR+0x3>
 73a:	30 97       	sbiw	r30, 0x00	; 0
 73c:	21 f0       	breq	.+8      	; 0x746 <__vector_2+0x36>
		Call_backFromExtISR[1]();
 73e:	09 95       	icall
		SET_BIT( GIFR , EXT_INT1 );		
 740:	8a b7       	in	r24, 0x3a	; 58
 742:	80 68       	ori	r24, 0x80	; 128
 744:	8a bf       	out	0x3a, r24	; 58
	}
}
 746:	ff 91       	pop	r31
 748:	ef 91       	pop	r30
 74a:	bf 91       	pop	r27
 74c:	af 91       	pop	r26
 74e:	9f 91       	pop	r25
 750:	8f 91       	pop	r24
 752:	7f 91       	pop	r23
 754:	6f 91       	pop	r22
 756:	5f 91       	pop	r21
 758:	4f 91       	pop	r20
 75a:	3f 91       	pop	r19
 75c:	2f 91       	pop	r18
 75e:	0f 90       	pop	r0
 760:	0f be       	out	0x3f, r0	; 63
 762:	0f 90       	pop	r0
 764:	1f 90       	pop	r1
 766:	18 95       	reti

00000768 <__vector_3>:

/* Prototype for ISR of EXTI2 */
void __vector_3(void)			__attribute__((signal));
void __vector_3(void){
 768:	1f 92       	push	r1
 76a:	0f 92       	push	r0
 76c:	0f b6       	in	r0, 0x3f	; 63
 76e:	0f 92       	push	r0
 770:	11 24       	eor	r1, r1
 772:	2f 93       	push	r18
 774:	3f 93       	push	r19
 776:	4f 93       	push	r20
 778:	5f 93       	push	r21
 77a:	6f 93       	push	r22
 77c:	7f 93       	push	r23
 77e:	8f 93       	push	r24
 780:	9f 93       	push	r25
 782:	af 93       	push	r26
 784:	bf 93       	push	r27
 786:	ef 93       	push	r30
 788:	ff 93       	push	r31
	if(Call_backFromExtISR[2] != NULL){
 78a:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <Call_backFromExtISR+0x4>
 78e:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <Call_backFromExtISR+0x5>
 792:	30 97       	sbiw	r30, 0x00	; 0
 794:	09 f0       	breq	.+2      	; 0x798 <__vector_3+0x30>
		Call_backFromExtISR[2]();
 796:	09 95       	icall
	}
}
 798:	ff 91       	pop	r31
 79a:	ef 91       	pop	r30
 79c:	bf 91       	pop	r27
 79e:	af 91       	pop	r26
 7a0:	9f 91       	pop	r25
 7a2:	8f 91       	pop	r24
 7a4:	7f 91       	pop	r23
 7a6:	6f 91       	pop	r22
 7a8:	5f 91       	pop	r21
 7aa:	4f 91       	pop	r20
 7ac:	3f 91       	pop	r19
 7ae:	2f 91       	pop	r18
 7b0:	0f 90       	pop	r0
 7b2:	0f be       	out	0x3f, r0	; 63
 7b4:	0f 90       	pop	r0
 7b6:	1f 90       	pop	r1
 7b8:	18 95       	reti

000007ba <Port_setPinDirection>:

}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
if (pin_id>31)  /* in case not valid id pin */
 7ba:	80 32       	cpi	r24, 0x20	; 32
 7bc:	08 f0       	brcs	.+2      	; 0x7c0 <Port_setPinDirection+0x6>
 7be:	93 c0       	rjmp	.+294    	; 0x8e6 <__stack+0x87>
{
	ERROR_LOC_RET=PIN_NUMBER_ERROR;
} 
else           /*in case valid id pin */
{	
    u8 loc_pin_id =pin_id % 8;
 7c0:	98 2f       	mov	r25, r24
 7c2:	97 70       	andi	r25, 0x07	; 7
    u8 loc_port_num=pin_id/8;
 7c4:	86 95       	lsr	r24
 7c6:	86 95       	lsr	r24
 7c8:	86 95       	lsr	r24
    switch(loc_port_num)
 7ca:	81 30       	cpi	r24, 0x01	; 1
 7cc:	49 f1       	breq	.+82     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 7ce:	38 f0       	brcs	.+14     	; 0x7de <Port_setPinDirection+0x24>
 7d0:	82 30       	cpi	r24, 0x02	; 2
 7d2:	09 f4       	brne	.+2      	; 0x7d6 <Port_setPinDirection+0x1c>
 7d4:	46 c0       	rjmp	.+140    	; 0x862 <__stack+0x3>
 7d6:	83 30       	cpi	r24, 0x03	; 3
 7d8:	09 f4       	brne	.+2      	; 0x7dc <Port_setPinDirection+0x22>
 7da:	64 c0       	rjmp	.+200    	; 0x8a4 <__stack+0x45>
 7dc:	86 c0       	rjmp	.+268    	; 0x8ea <__stack+0x8b>
    {
        case u8PORTA:
        if(pin_direction==PIN_OUTPUT)
 7de:	61 30       	cpi	r22, 0x01	; 1
 7e0:	71 f4       	brne	.+28     	; 0x7fe <Port_setPinDirection+0x44>
        {
            SET_BIT(DDRA,loc_pin_id);   
 7e2:	4a b3       	in	r20, 0x1a	; 26
 7e4:	21 e0       	ldi	r18, 0x01	; 1
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	b9 01       	movw	r22, r18
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <Port_setPinDirection+0x36>
 7ec:	66 0f       	add	r22, r22
 7ee:	77 1f       	adc	r23, r23
 7f0:	9a 95       	dec	r25
 7f2:	e2 f7       	brpl	.-8      	; 0x7ec <Port_setPinDirection+0x32>
 7f4:	cb 01       	movw	r24, r22
 7f6:	84 2b       	or	r24, r20
 7f8:	8a bb       	out	0x1a, r24	; 26


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
 7fa:	80 e0       	ldi	r24, 0x00	; 0
 7fc:	08 95       	ret
        case u8PORTA:
        if(pin_direction==PIN_OUTPUT)
        {
            SET_BIT(DDRA,loc_pin_id);   
        }
        else if(pin_direction==PIN_INPUT)
 7fe:	61 11       	cpse	r22, r1
 800:	76 c0       	rjmp	.+236    	; 0x8ee <__stack+0x8f>
        {
            CLR_BIT(DDRA,loc_pin_id);
 802:	4a b3       	in	r20, 0x1a	; 26
 804:	21 e0       	ldi	r18, 0x01	; 1
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	b9 01       	movw	r22, r18
 80a:	02 c0       	rjmp	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80c:	66 0f       	add	r22, r22
 80e:	77 1f       	adc	r23, r23
 810:	9a 95       	dec	r25
 812:	e2 f7       	brpl	.-8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 814:	cb 01       	movw	r24, r22
 816:	80 95       	com	r24
 818:	84 23       	and	r24, r20
 81a:	8a bb       	out	0x1a, r24	; 26


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
 81c:	80 e0       	ldi	r24, 0x00	; 0
 81e:	08 95       	ret
        {
            CLR_BIT(DDRA,loc_pin_id);
        } 
		break;     
        case u8PORTB:
        if(pin_direction==PIN_OUTPUT)
 820:	61 30       	cpi	r22, 0x01	; 1
 822:	71 f4       	brne	.+28     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
        {
           SET_BIT(DDRB,loc_pin_id);
 824:	47 b3       	in	r20, 0x17	; 23
 826:	21 e0       	ldi	r18, 0x01	; 1
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	b9 01       	movw	r22, r18
 82c:	02 c0       	rjmp	.+4      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 82e:	66 0f       	add	r22, r22
 830:	77 1f       	adc	r23, r23
 832:	9a 95       	dec	r25
 834:	e2 f7       	brpl	.-8      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 836:	cb 01       	movw	r24, r22
 838:	84 2b       	or	r24, r20
 83a:	87 bb       	out	0x17, r24	; 23


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
 83c:	80 e0       	ldi	r24, 0x00	; 0
 83e:	08 95       	ret
        case u8PORTB:
        if(pin_direction==PIN_OUTPUT)
        {
           SET_BIT(DDRB,loc_pin_id);
        }
        else if(pin_direction==PIN_INPUT)
 840:	61 11       	cpse	r22, r1
 842:	57 c0       	rjmp	.+174    	; 0x8f2 <__stack+0x93>
        {
            CLR_BIT(DDRB,loc_pin_id);
 844:	47 b3       	in	r20, 0x17	; 23
 846:	21 e0       	ldi	r18, 0x01	; 1
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	b9 01       	movw	r22, r18
 84c:	02 c0       	rjmp	.+4      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 84e:	66 0f       	add	r22, r22
 850:	77 1f       	adc	r23, r23
 852:	9a 95       	dec	r25
 854:	e2 f7       	brpl	.-8      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 856:	cb 01       	movw	r24, r22
 858:	80 95       	com	r24
 85a:	84 23       	and	r24, r20
 85c:	87 bb       	out	0x17, r24	; 23


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	08 95       	ret
            CLR_BIT(DDRB,loc_pin_id);
        }
        break;
        case u8PORTC:

        if(pin_direction==PIN_OUTPUT)
 862:	61 30       	cpi	r22, 0x01	; 1
 864:	71 f4       	brne	.+28     	; 0x882 <__stack+0x23>
        {
            SET_BIT(DDRC,loc_pin_id);
 866:	44 b3       	in	r20, 0x14	; 20
 868:	21 e0       	ldi	r18, 0x01	; 1
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	b9 01       	movw	r22, r18
 86e:	02 c0       	rjmp	.+4      	; 0x874 <__stack+0x15>
 870:	66 0f       	add	r22, r22
 872:	77 1f       	adc	r23, r23
 874:	9a 95       	dec	r25
 876:	e2 f7       	brpl	.-8      	; 0x870 <__stack+0x11>
 878:	cb 01       	movw	r24, r22
 87a:	84 2b       	or	r24, r20
 87c:	84 bb       	out	0x14, r24	; 20


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	08 95       	ret

        if(pin_direction==PIN_OUTPUT)
        {
            SET_BIT(DDRC,loc_pin_id);
        }
        else if(pin_direction==PIN_INPUT)
 882:	61 11       	cpse	r22, r1
 884:	38 c0       	rjmp	.+112    	; 0x8f6 <__stack+0x97>
        {
            CLR_BIT(DDRC,loc_pin_id);
 886:	44 b3       	in	r20, 0x14	; 20
 888:	21 e0       	ldi	r18, 0x01	; 1
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	b9 01       	movw	r22, r18
 88e:	02 c0       	rjmp	.+4      	; 0x894 <__stack+0x35>
 890:	66 0f       	add	r22, r22
 892:	77 1f       	adc	r23, r23
 894:	9a 95       	dec	r25
 896:	e2 f7       	brpl	.-8      	; 0x890 <__stack+0x31>
 898:	cb 01       	movw	r24, r22
 89a:	80 95       	com	r24
 89c:	84 23       	and	r24, r20
 89e:	84 bb       	out	0x14, r24	; 20


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
 8a0:	80 e0       	ldi	r24, 0x00	; 0
 8a2:	08 95       	ret
        {
            CLR_BIT(DDRC,loc_pin_id);
        }
        break;
        case u8PORTD:
        if(pin_direction==PIN_OUTPUT)
 8a4:	61 30       	cpi	r22, 0x01	; 1
 8a6:	71 f4       	brne	.+28     	; 0x8c4 <__stack+0x65>
        {
            SET_BIT(DDRD,loc_pin_id);
 8a8:	41 b3       	in	r20, 0x11	; 17
 8aa:	21 e0       	ldi	r18, 0x01	; 1
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	b9 01       	movw	r22, r18
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <__stack+0x57>
 8b2:	66 0f       	add	r22, r22
 8b4:	77 1f       	adc	r23, r23
 8b6:	9a 95       	dec	r25
 8b8:	e2 f7       	brpl	.-8      	; 0x8b2 <__stack+0x53>
 8ba:	cb 01       	movw	r24, r22
 8bc:	84 2b       	or	r24, r20
 8be:	81 bb       	out	0x11, r24	; 17


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	08 95       	ret
        case u8PORTD:
        if(pin_direction==PIN_OUTPUT)
        {
            SET_BIT(DDRD,loc_pin_id);
        }
        else if(pin_direction==PIN_INPUT)
 8c4:	61 11       	cpse	r22, r1
 8c6:	19 c0       	rjmp	.+50     	; 0x8fa <__stack+0x9b>
        {
            CLR_BIT(DDRD,loc_pin_id);
 8c8:	41 b3       	in	r20, 0x11	; 17
 8ca:	21 e0       	ldi	r18, 0x01	; 1
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	b9 01       	movw	r22, r18
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <__stack+0x77>
 8d2:	66 0f       	add	r22, r22
 8d4:	77 1f       	adc	r23, r23
 8d6:	9a 95       	dec	r25
 8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <__stack+0x73>
 8da:	cb 01       	movw	r24, r22
 8dc:	80 95       	com	r24
 8de:	84 23       	and	r24, r20
 8e0:	81 bb       	out	0x11, r24	; 17


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
 8e2:	80 e0       	ldi	r24, 0x00	; 0
 8e4:	08 95       	ret
if (pin_id>31)  /* in case not valid id pin */
{
	ERROR_LOC_RET=PIN_NUMBER_ERROR;
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	08 95       	ret
        {
            CLR_BIT(DDRD,loc_pin_id);
        }
        break;
    default:
	 ERROR_LOC_RET =PIN_DIR_ERROR;
 8ea:	82 e0       	ldi	r24, 0x02	; 2
 8ec:	08 95       	ret


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	08 95       	ret
 8f2:	80 e0       	ldi	r24, 0x00	; 0
 8f4:	08 95       	ret
 8f6:	80 e0       	ldi	r24, 0x00	; 0
 8f8:	08 95       	ret
 8fa:	80 e0       	ldi	r24, 0x00	; 0
	 ERROR_LOC_RET =PIN_DIR_ERROR;
		
    }
}
 return ERROR_LOC_RET;   
}
 8fc:	08 95       	ret

000008fe <__vector_12>:
  //  tenuErrorStatus Local_u8ErrorState = no_error;
        SPI_COMPLETE_OPERATION_ISR_POINTER = ptrCallBackFunc;
}

void __vector_12(void) __attribute__((signal));
void __vector_12(void){
 8fe:	1f 92       	push	r1
 900:	0f 92       	push	r0
 902:	0f b6       	in	r0, 0x3f	; 63
 904:	0f 92       	push	r0
 906:	11 24       	eor	r1, r1
 908:	2f 93       	push	r18
 90a:	3f 93       	push	r19
 90c:	4f 93       	push	r20
 90e:	5f 93       	push	r21
 910:	6f 93       	push	r22
 912:	7f 93       	push	r23
 914:	8f 93       	push	r24
 916:	9f 93       	push	r25
 918:	af 93       	push	r26
 91a:	bf 93       	push	r27
 91c:	ef 93       	push	r30
 91e:	ff 93       	push	r31
    if (SPI_COMPLETE_OPERATION_ISR_POINTER != NULL){
 920:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <SPI_COMPLETE_OPERATION_ISR_POINTER>
 924:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <SPI_COMPLETE_OPERATION_ISR_POINTER+0x1>
 928:	30 97       	sbiw	r30, 0x00	; 0
 92a:	09 f0       	breq	.+2      	; 0x92e <__vector_12+0x30>
        SPI_COMPLETE_OPERATION_ISR_POINTER();
 92c:	09 95       	icall
    }
}
 92e:	ff 91       	pop	r31
 930:	ef 91       	pop	r30
 932:	bf 91       	pop	r27
 934:	af 91       	pop	r26
 936:	9f 91       	pop	r25
 938:	8f 91       	pop	r24
 93a:	7f 91       	pop	r23
 93c:	6f 91       	pop	r22
 93e:	5f 91       	pop	r21
 940:	4f 91       	pop	r20
 942:	3f 91       	pop	r19
 944:	2f 91       	pop	r18
 946:	0f 90       	pop	r0
 948:	0f be       	out	0x3f, r0	; 63
 94a:	0f 90       	pop	r0
 94c:	1f 90       	pop	r1
 94e:	18 95       	reti

00000950 <TIMER0_voidClockSelect>:
	TCNT0 = 20;
	TCCR0 = 0x00;
	TCCR0 = 0b00000101;	//normal mode with 1024 pre-scalar	
	while(!(TIFR & (1<<0)));	//wait until TOV0 flag is set
	TCCR0 = 0;		//turn off timer 0
	TIFR |= (1<<0);	//clear TOV0 flag
 950:	83 b7       	in	r24, 0x33	; 51
 952:	81 60       	ori	r24, 0x01	; 1
 954:	83 bf       	out	0x33, r24	; 51
 956:	83 b7       	in	r24, 0x33	; 51
 958:	8d 7f       	andi	r24, 0xFD	; 253
 95a:	83 bf       	out	0x33, r24	; 51
 95c:	83 b7       	in	r24, 0x33	; 51
 95e:	84 60       	ori	r24, 0x04	; 4
 960:	83 bf       	out	0x33, r24	; 51
 962:	08 95       	ret

00000964 <TIMER0_voidMode>:
 964:	0e 94 a8 04 	call	0x950	; 0x950 <TIMER0_voidClockSelect>
 968:	83 b7       	in	r24, 0x33	; 51
 96a:	8f 7b       	andi	r24, 0xBF	; 191
 96c:	83 bf       	out	0x33, r24	; 51
 96e:	83 b7       	in	r24, 0x33	; 51
 970:	87 7f       	andi	r24, 0xF7	; 247
 972:	83 bf       	out	0x33, r24	; 51
 974:	08 95       	ret

00000976 <Timer0_EnableInterupt>:
 976:	89 b7       	in	r24, 0x39	; 57
 978:	81 60       	ori	r24, 0x01	; 1
 97a:	89 bf       	out	0x39, r24	; 57
 97c:	08 95       	ret

0000097e <Timer0SetCallBack>:
 97e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <TIMER_pvTimer0+0x1>
 982:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <TIMER_pvTimer0>
 986:	08 95       	ret

00000988 <TIMER0_SET_COUNTER>:
 988:	82 bf       	out	0x32, r24	; 50
 98a:	08 95       	ret

0000098c <__vector_11>:


/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)	__attribute__((signal)) ;
void __vector_11 (void)
{
 98c:	1f 92       	push	r1
 98e:	0f 92       	push	r0
 990:	0f b6       	in	r0, 0x3f	; 63
 992:	0f 92       	push	r0
 994:	11 24       	eor	r1, r1
 996:	2f 93       	push	r18
 998:	3f 93       	push	r19
 99a:	4f 93       	push	r20
 99c:	5f 93       	push	r21
 99e:	6f 93       	push	r22
 9a0:	7f 93       	push	r23
 9a2:	8f 93       	push	r24
 9a4:	9f 93       	push	r25
 9a6:	af 93       	push	r26
 9a8:	bf 93       	push	r27
 9aa:	ef 93       	push	r30
 9ac:	ff 93       	push	r31
	TIMER_pvTimer0();
 9ae:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <TIMER_pvTimer0>
 9b2:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <TIMER_pvTimer0+0x1>
 9b6:	09 95       	icall
}
 9b8:	ff 91       	pop	r31
 9ba:	ef 91       	pop	r30
 9bc:	bf 91       	pop	r27
 9be:	af 91       	pop	r26
 9c0:	9f 91       	pop	r25
 9c2:	8f 91       	pop	r24
 9c4:	7f 91       	pop	r23
 9c6:	6f 91       	pop	r22
 9c8:	5f 91       	pop	r21
 9ca:	4f 91       	pop	r20
 9cc:	3f 91       	pop	r19
 9ce:	2f 91       	pop	r18
 9d0:	0f 90       	pop	r0
 9d2:	0f be       	out	0x3f, r0	; 63
 9d4:	0f 90       	pop	r0
 9d6:	1f 90       	pop	r1
 9d8:	18 95       	reti

000009da <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
 9da:	1f 92       	push	r1
 9dc:	0f 92       	push	r0
 9de:	0f b6       	in	r0, 0x3f	; 63
 9e0:	0f 92       	push	r0
 9e2:	11 24       	eor	r1, r1
	
}
 9e4:	0f 90       	pop	r0
 9e6:	0f be       	out	0x3f, r0	; 63
 9e8:	0f 90       	pop	r0
 9ea:	1f 90       	pop	r1
 9ec:	18 95       	reti

000009ee <__umulhisi3>:
 9ee:	a2 9f       	mul	r26, r18
 9f0:	b0 01       	movw	r22, r0
 9f2:	b3 9f       	mul	r27, r19
 9f4:	c0 01       	movw	r24, r0
 9f6:	a3 9f       	mul	r26, r19
 9f8:	70 0d       	add	r23, r0
 9fa:	81 1d       	adc	r24, r1
 9fc:	11 24       	eor	r1, r1
 9fe:	91 1d       	adc	r25, r1
 a00:	b2 9f       	mul	r27, r18
 a02:	70 0d       	add	r23, r0
 a04:	81 1d       	adc	r24, r1
 a06:	11 24       	eor	r1, r1
 a08:	91 1d       	adc	r25, r1
 a0a:	08 95       	ret

00000a0c <_exit>:
 a0c:	f8 94       	cli

00000a0e <__stop_program>:
 a0e:	ff cf       	rjmp	.-2      	; 0xa0e <__stop_program>
