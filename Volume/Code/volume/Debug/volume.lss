
volume.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000077c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  0000077c  00000810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800090  00800090  00000840  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000870  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001af8  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4c  00000000  00000000  0000254c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000105f  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000424  00000000  00000000  000040f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008fa  00000000  00000000  0000451c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001aed  00000000  00000000  00004e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  00006903  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_1>
   8:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_2>
   c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e9       	ldi	r26, 0x90	; 144
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 39       	cpi	r26, 0x98	; 152
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 64 03 	call	0x6c8	; 0x6c8 <main>
  8a:	0c 94 bc 03 	jmp	0x778	; 0x778 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidinit>:
    }
    return Loc_Status;
}

void ADC_Disable() {
    CLR_BIT(ADCSRA, ADCSRA_ADEN);
  92:	87 b1       	in	r24, 0x07	; 7
  94:	8f 77       	andi	r24, 0x7F	; 127
  96:	87 b9       	out	0x07, r24	; 7
  98:	87 b1       	in	r24, 0x07	; 7
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	87 b9       	out	0x07, r24	; 7
  9e:	87 b1       	in	r24, 0x07	; 7
  a0:	8f 7d       	andi	r24, 0xDF	; 223
  a2:	87 b9       	out	0x07, r24	; 7
  a4:	86 b1       	in	r24, 0x06	; 6
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	86 b9       	out	0x06, r24	; 6
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	86 b9       	out	0x06, r24	; 6
  b0:	86 b1       	in	r24, 0x06	; 6
  b2:	8e 7f       	andi	r24, 0xFE	; 254
  b4:	86 b9       	out	0x06, r24	; 6
  b6:	86 b1       	in	r24, 0x06	; 6
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	86 b9       	out	0x06, r24	; 6
  bc:	86 b1       	in	r24, 0x06	; 6
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	86 b9       	out	0x06, r24	; 6
  c2:	86 b1       	in	r24, 0x06	; 6
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	86 b9       	out	0x06, r24	; 6
  c8:	08 95       	ret

000000ca <ADC_AaynchStartConversion>:
  ca:	88 30       	cpi	r24, 0x08	; 8
  cc:	58 f4       	brcc	.+22     	; 0xe4 <ADC_AaynchStartConversion+0x1a>
  ce:	97 b1       	in	r25, 0x07	; 7
  d0:	90 7e       	andi	r25, 0xE0	; 224
  d2:	97 b9       	out	0x07, r25	; 7
  d4:	97 b1       	in	r25, 0x07	; 7
  d6:	89 2b       	or	r24, r25
  d8:	87 b9       	out	0x07, r24	; 7
  da:	86 b1       	in	r24, 0x06	; 6
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	86 b9       	out	0x06, r24	; 6
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	08 95       	ret
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	08 95       	ret

000000e8 <ADC_voidGetADCValue>:
// void ADC_voidSetCallBackHandler( void (*ADC_SetCallBackFunc)(u16 Copy_ADCValue)){
// 	ADC_SetCallBack = ADC_SetCallBackFunc;
// }
void ADC_voidGetADCValue(pu16 Add_pu16Value)
{
	*Add_pu16Value = Glob_u16Value;
  e8:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <Glob_u16Value>
  ec:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <Glob_u16Value+0x1>
  f0:	fc 01       	movw	r30, r24
  f2:	31 83       	std	Z+1, r19	; 0x01
  f4:	20 83       	st	Z, r18
  f6:	08 95       	ret

000000f8 <__vector_16>:
}

void __vector_16(void) __attribute__((signal));
void __vector_16(void) {
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
     Glob_u16Value = ADC;
 106:	84 b1       	in	r24, 0x04	; 4
 108:	95 b1       	in	r25, 0x05	; 5
 10a:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <Glob_u16Value+0x1>
 10e:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <Glob_u16Value>

 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <DIO_enuWriteChannel>:



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
    if((Copy_u8ChannelId>31)||(Copy_u8ChannelId<0)){
 120:	80 32       	cpi	r24, 0x20	; 32
 122:	08 f0       	brcs	.+2      	; 0x126 <DIO_enuWriteChannel+0x6>
 124:	8e c0       	rjmp	.+284    	; 0x242 <DIO_enuWriteChannel+0x122>
        Local_u8Status = DIO_WRONGCHANNEL;
    }
    else if((Copy_u8Level>1)||(Copy_u8Level<0))
 126:	62 30       	cpi	r22, 0x02	; 2
 128:	08 f0       	brcs	.+2      	; 0x12c <DIO_enuWriteChannel+0xc>
 12a:	8d c0       	rjmp	.+282    	; 0x246 <DIO_enuWriteChannel+0x126>
    {
        Local_u8Status = DIO_WRONGDIR;
	}
    else{
        u8 Local_u8Port = Copy_u8ChannelId/8;
 12c:	98 2f       	mov	r25, r24
 12e:	96 95       	lsr	r25
 130:	96 95       	lsr	r25
 132:	96 95       	lsr	r25
        u8 Local_u8Pin = Copy_u8ChannelId%8;
 134:	87 70       	andi	r24, 0x07	; 7
        switch(Local_u8Port)
 136:	91 30       	cpi	r25, 0x01	; 1
 138:	39 f1       	breq	.+78     	; 0x188 <DIO_enuWriteChannel+0x68>
 13a:	38 f0       	brcs	.+14     	; 0x14a <DIO_enuWriteChannel+0x2a>
 13c:	92 30       	cpi	r25, 0x02	; 2
 13e:	09 f4       	brne	.+2      	; 0x142 <DIO_enuWriteChannel+0x22>
 140:	42 c0       	rjmp	.+132    	; 0x1c6 <DIO_enuWriteChannel+0xa6>
 142:	93 30       	cpi	r25, 0x03	; 3
 144:	09 f4       	brne	.+2      	; 0x148 <DIO_enuWriteChannel+0x28>
 146:	5e c0       	rjmp	.+188    	; 0x204 <DIO_enuWriteChannel+0xe4>
 148:	80 c0       	rjmp	.+256    	; 0x24a <DIO_enuWriteChannel+0x12a>
        {
            case DIO_PORTA:
                if(Copy_u8Level==DIO_CHANNEL_LOW)
 14a:	61 11       	cpse	r22, r1
 14c:	0f c0       	rjmp	.+30     	; 0x16c <DIO_enuWriteChannel+0x4c>
                {
                    CLR_BIT(DIO_PORTA_Reg,Local_u8Pin);
 14e:	4b b3       	in	r20, 0x1b	; 27
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	b9 01       	movw	r22, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_enuWriteChannel+0x3c>
 158:	66 0f       	add	r22, r22
 15a:	77 1f       	adc	r23, r23
 15c:	8a 95       	dec	r24
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_enuWriteChannel+0x38>
 160:	cb 01       	movw	r24, r22
 162:	80 95       	com	r24
 164:	84 23       	and	r24, r20
 166:	8b bb       	out	0x1b, r24	; 27
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	08 95       	ret
                {
                    CLR_BIT(DIO_PORTA_Reg,Local_u8Pin);
                }
                else
                {
                    SET_BIT(DIO_PORTA_Reg,Local_u8Pin);
 16c:	4b b3       	in	r20, 0x1b	; 27
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	b9 01       	movw	r22, r18
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_enuWriteChannel+0x5a>
 176:	66 0f       	add	r22, r22
 178:	77 1f       	adc	r23, r23
 17a:	8a 95       	dec	r24
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_enuWriteChannel+0x56>
 17e:	cb 01       	movw	r24, r22
 180:	84 2b       	or	r24, r20
 182:	8b bb       	out	0x1b, r24	; 27
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
 184:	84 e0       	ldi	r24, 0x04	; 4
 186:	08 95       	ret
                {
                    SET_BIT(DIO_PORTA_Reg,Local_u8Pin);
                }   
            break;
            case DIO_PORTB:
                if(Copy_u8Level==DIO_CHANNEL_LOW)
 188:	61 11       	cpse	r22, r1
 18a:	0f c0       	rjmp	.+30     	; 0x1aa <DIO_enuWriteChannel+0x8a>
                {
                    CLR_BIT(DIO_PORTB_Reg,Local_u8Pin);
 18c:	48 b3       	in	r20, 0x18	; 24
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	b9 01       	movw	r22, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_enuWriteChannel+0x7a>
 196:	66 0f       	add	r22, r22
 198:	77 1f       	adc	r23, r23
 19a:	8a 95       	dec	r24
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_enuWriteChannel+0x76>
 19e:	cb 01       	movw	r24, r22
 1a0:	80 95       	com	r24
 1a2:	84 23       	and	r24, r20
 1a4:	88 bb       	out	0x18, r24	; 24
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
 1a6:	84 e0       	ldi	r24, 0x04	; 4
 1a8:	08 95       	ret
                {
                    CLR_BIT(DIO_PORTB_Reg,Local_u8Pin);
                }
                else
                {
                    SET_BIT(DIO_PORTB_Reg,Local_u8Pin);
 1aa:	48 b3       	in	r20, 0x18	; 24
 1ac:	21 e0       	ldi	r18, 0x01	; 1
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	b9 01       	movw	r22, r18
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_enuWriteChannel+0x98>
 1b4:	66 0f       	add	r22, r22
 1b6:	77 1f       	adc	r23, r23
 1b8:	8a 95       	dec	r24
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_enuWriteChannel+0x94>
 1bc:	cb 01       	movw	r24, r22
 1be:	84 2b       	or	r24, r20
 1c0:	88 bb       	out	0x18, r24	; 24
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	08 95       	ret
                {
                    SET_BIT(DIO_PORTB_Reg,Local_u8Pin);
                }                          
            break;
            case DIO_PORTC:
                if(Copy_u8Level==DIO_CHANNEL_LOW)
 1c6:	61 11       	cpse	r22, r1
 1c8:	0f c0       	rjmp	.+30     	; 0x1e8 <DIO_enuWriteChannel+0xc8>
                {
                    CLR_BIT(DIO_PORTC_Reg,Local_u8Pin);
 1ca:	45 b3       	in	r20, 0x15	; 21
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	b9 01       	movw	r22, r18
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_enuWriteChannel+0xb8>
 1d4:	66 0f       	add	r22, r22
 1d6:	77 1f       	adc	r23, r23
 1d8:	8a 95       	dec	r24
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_enuWriteChannel+0xb4>
 1dc:	cb 01       	movw	r24, r22
 1de:	80 95       	com	r24
 1e0:	84 23       	and	r24, r20
 1e2:	85 bb       	out	0x15, r24	; 21
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	08 95       	ret
                {
                    CLR_BIT(DIO_PORTC_Reg,Local_u8Pin);
                }
                else
                {
                    SET_BIT(DIO_PORTC_Reg,Local_u8Pin);
 1e8:	45 b3       	in	r20, 0x15	; 21
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	b9 01       	movw	r22, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_enuWriteChannel+0xd6>
 1f2:	66 0f       	add	r22, r22
 1f4:	77 1f       	adc	r23, r23
 1f6:	8a 95       	dec	r24
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_enuWriteChannel+0xd2>
 1fa:	cb 01       	movw	r24, r22
 1fc:	84 2b       	or	r24, r20
 1fe:	85 bb       	out	0x15, r24	; 21
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
 200:	84 e0       	ldi	r24, 0x04	; 4
 202:	08 95       	ret
                {
                    SET_BIT(DIO_PORTC_Reg,Local_u8Pin);
                }  
            break;
            case DIO_PORTD:
                if(Copy_u8Level==DIO_CHANNEL_LOW)
 204:	61 11       	cpse	r22, r1
 206:	0f c0       	rjmp	.+30     	; 0x226 <DIO_enuWriteChannel+0x106>
                {
                    CLR_BIT(DIO_PORTD_Reg,Local_u8Pin);
 208:	42 b3       	in	r20, 0x12	; 18
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	b9 01       	movw	r22, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_enuWriteChannel+0xf6>
 212:	66 0f       	add	r22, r22
 214:	77 1f       	adc	r23, r23
 216:	8a 95       	dec	r24
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_enuWriteChannel+0xf2>
 21a:	cb 01       	movw	r24, r22
 21c:	80 95       	com	r24
 21e:	84 23       	and	r24, r20
 220:	82 bb       	out	0x12, r24	; 18
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
 222:	84 e0       	ldi	r24, 0x04	; 4
 224:	08 95       	ret
                {
                    CLR_BIT(DIO_PORTD_Reg,Local_u8Pin);
                }
                else
                {
                    SET_BIT(DIO_PORTD_Reg,Local_u8Pin);
 226:	42 b3       	in	r20, 0x12	; 18
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	b9 01       	movw	r22, r18
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_enuWriteChannel+0x114>
 230:	66 0f       	add	r22, r22
 232:	77 1f       	adc	r23, r23
 234:	8a 95       	dec	r24
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_enuWriteChannel+0x110>
 238:	cb 01       	movw	r24, r22
 23a:	84 2b       	or	r24, r20
 23c:	82 bb       	out	0x12, r24	; 18
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
 23e:	84 e0       	ldi	r24, 0x04	; 4
 240:	08 95       	ret
    if((Copy_u8ChannelId>31)||(Copy_u8ChannelId<0)){
        Local_u8Status = DIO_WRONGCHANNEL;
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	08 95       	ret
    }
    else if((Copy_u8Level>1)||(Copy_u8Level<0))
    {
        Local_u8Status = DIO_WRONGDIR;
 246:	85 e0       	ldi	r24, 0x05	; 5
 248:	08 95       	ret
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
 24a:	84 e0       	ldi	r24, 0x04	; 4
                /*DO NOTHING*/
            break;
        }   
    }  
    return Local_u8Status;
}
 24c:	08 95       	ret

0000024e <__vector_1>:
{
	EXTINT_SetCallBackExtInt[Copy_u8ExtIntIndex] = Copy_pfun;
}

void __vector_1(void)  __attribute__((signal));
void __vector_1(void){
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
    if(EXTINT_SetCallBackExtInt[EXT_0]!= NULL)
 270:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__data_end>
 274:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <__data_end+0x1>
 278:	30 97       	sbiw	r30, 0x00	; 0
 27a:	09 f0       	breq	.+2      	; 0x27e <__vector_1+0x30>
    {
        EXTINT_SetCallBackExtInt[EXT_0]();
 27c:	09 95       	icall
    }
    else
    {
        /*DO NOTHING*/
    }
}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <__vector_2>:

void __vector_2(void)  __attribute__((signal));
void __vector_2(void){
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	4f 93       	push	r20
 2b0:	5f 93       	push	r21
 2b2:	6f 93       	push	r22
 2b4:	7f 93       	push	r23
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	af 93       	push	r26
 2bc:	bf 93       	push	r27
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
    if(EXTINT_SetCallBackExtInt[EXT_1]!= NULL)
 2c2:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <__data_end+0x2>
 2c6:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <__data_end+0x3>
 2ca:	30 97       	sbiw	r30, 0x00	; 0
 2cc:	09 f0       	breq	.+2      	; 0x2d0 <__vector_2+0x30>
    {
        EXTINT_SetCallBackExtInt[EXT_1]();
 2ce:	09 95       	icall
    }
    else
    {
        /*DO NOTHING*/
    }
}
 2d0:	ff 91       	pop	r31
 2d2:	ef 91       	pop	r30
 2d4:	bf 91       	pop	r27
 2d6:	af 91       	pop	r26
 2d8:	9f 91       	pop	r25
 2da:	8f 91       	pop	r24
 2dc:	7f 91       	pop	r23
 2de:	6f 91       	pop	r22
 2e0:	5f 91       	pop	r21
 2e2:	4f 91       	pop	r20
 2e4:	3f 91       	pop	r19
 2e6:	2f 91       	pop	r18
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <__vector_3>:

void __vector_3(void)  __attribute__((signal));
void __vector_3(void){
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	2f 93       	push	r18
 2fe:	3f 93       	push	r19
 300:	4f 93       	push	r20
 302:	5f 93       	push	r21
 304:	6f 93       	push	r22
 306:	7f 93       	push	r23
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
 30c:	af 93       	push	r26
 30e:	bf 93       	push	r27
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
    if(EXTINT_SetCallBackExtInt[EXT_2]!= NULL)
 314:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <__data_end+0x4>
 318:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <__data_end+0x5>
 31c:	30 97       	sbiw	r30, 0x00	; 0
 31e:	09 f0       	breq	.+2      	; 0x322 <__vector_3+0x30>
    {
        EXTINT_SetCallBackExtInt[EXT_2]();
 320:	09 95       	icall
    }
    else
    {
        /*DO NOTHING*/
    }    
 322:	ff 91       	pop	r31
 324:	ef 91       	pop	r30
 326:	bf 91       	pop	r27
 328:	af 91       	pop	r26
 32a:	9f 91       	pop	r25
 32c:	8f 91       	pop	r24
 32e:	7f 91       	pop	r23
 330:	6f 91       	pop	r22
 332:	5f 91       	pop	r21
 334:	4f 91       	pop	r20
 336:	3f 91       	pop	r19
 338:	2f 91       	pop	r18
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <GIE_globalInterruptEnable>:
 */
#include "Gie.h"
#include "Gie_prv.h"

void GIE_globalInterruptEnable(void){
    SET_BIT(SREG,SREG_globalInterruptEnable);  
 344:	8f b7       	in	r24, 0x3f	; 63
 346:	80 68       	ori	r24, 0x80	; 128
 348:	8f bf       	out	0x3f, r24	; 63
 34a:	08 95       	ret

0000034c <LCD_VoidSendDataBus>:
}


void LCD_Calculator_Init() {
    LCD_VoidInit();
    LCD_VoidClear();
 34c:	cf 93       	push	r28
 34e:	c8 2f       	mov	r28, r24
 350:	84 fb       	bst	r24, 4
 352:	66 27       	eor	r22, r22
 354:	60 f9       	bld	r22, 0
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	0e 94 90 00 	call	0x120	; 0x120 <DIO_enuWriteChannel>
 35c:	c5 fb       	bst	r28, 5
 35e:	66 27       	eor	r22, r22
 360:	60 f9       	bld	r22, 0
 362:	83 e0       	ldi	r24, 0x03	; 3
 364:	0e 94 90 00 	call	0x120	; 0x120 <DIO_enuWriteChannel>
 368:	c6 fb       	bst	r28, 6
 36a:	66 27       	eor	r22, r22
 36c:	60 f9       	bld	r22, 0
 36e:	84 e0       	ldi	r24, 0x04	; 4
 370:	0e 94 90 00 	call	0x120	; 0x120 <DIO_enuWriteChannel>
 374:	6c 2f       	mov	r22, r28
 376:	66 1f       	adc	r22, r22
 378:	66 27       	eor	r22, r22
 37a:	66 1f       	adc	r22, r22
 37c:	85 e0       	ldi	r24, 0x05	; 5
 37e:	0e 94 90 00 	call	0x120	; 0x120 <DIO_enuWriteChannel>
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0e 94 90 00 	call	0x120	; 0x120 <DIO_enuWriteChannel>
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	8a 95       	dec	r24
 38e:	f1 f7       	brne	.-4      	; 0x38c <LCD_VoidSendDataBus+0x40>
 390:	00 c0       	rjmp	.+0      	; 0x392 <LCD_VoidSendDataBus+0x46>
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	0e 94 90 00 	call	0x120	; 0x120 <DIO_enuWriteChannel>
 39a:	8f e8       	ldi	r24, 0x8F	; 143
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <LCD_VoidSendDataBus+0x52>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <LCD_VoidSendDataBus+0x58>
 3a4:	00 00       	nop
 3a6:	6c 2f       	mov	r22, r28
 3a8:	61 70       	andi	r22, 0x01	; 1
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	0e 94 90 00 	call	0x120	; 0x120 <DIO_enuWriteChannel>
 3b0:	c1 fb       	bst	r28, 1
 3b2:	66 27       	eor	r22, r22
 3b4:	60 f9       	bld	r22, 0
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	0e 94 90 00 	call	0x120	; 0x120 <DIO_enuWriteChannel>
 3bc:	c2 fb       	bst	r28, 2
 3be:	66 27       	eor	r22, r22
 3c0:	60 f9       	bld	r22, 0
 3c2:	84 e0       	ldi	r24, 0x04	; 4
 3c4:	0e 94 90 00 	call	0x120	; 0x120 <DIO_enuWriteChannel>
 3c8:	c3 fb       	bst	r28, 3
 3ca:	66 27       	eor	r22, r22
 3cc:	60 f9       	bld	r22, 0
 3ce:	85 e0       	ldi	r24, 0x05	; 5
 3d0:	0e 94 90 00 	call	0x120	; 0x120 <DIO_enuWriteChannel>
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 90 00 	call	0x120	; 0x120 <DIO_enuWriteChannel>
 3dc:	92 e0       	ldi	r25, 0x02	; 2
 3de:	9a 95       	dec	r25
 3e0:	f1 f7       	brne	.-4      	; 0x3de <LCD_VoidSendDataBus+0x92>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <LCD_VoidSendDataBus+0x98>
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 90 00 	call	0x120	; 0x120 <DIO_enuWriteChannel>
 3ec:	8f e8       	ldi	r24, 0x8F	; 143
 3ee:	91 e0       	ldi	r25, 0x01	; 1
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <LCD_VoidSendDataBus+0xa4>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <LCD_VoidSendDataBus+0xaa>
 3f6:	00 00       	nop
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <LCD_VoidInit>:
 3fc:	8f e3       	ldi	r24, 0x3F	; 63
 3fe:	9c e9       	ldi	r25, 0x9C	; 156
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 406:	00 00       	nop
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	0e 94 90 00 	call	0x120	; 0x120 <DIO_enuWriteChannel>
 410:	82 e0       	ldi	r24, 0x02	; 2
 412:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_VoidSendDataBus>
 416:	88 e2       	ldi	r24, 0x28	; 40
 418:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_VoidSendDataBus>
 41c:	8c e0       	ldi	r24, 0x0C	; 12
 41e:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_VoidSendDataBus>
 422:	86 e0       	ldi	r24, 0x06	; 6
 424:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_VoidSendDataBus>
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_VoidSendDataBus>
 42e:	8f e9       	ldi	r24, 0x9F	; 159
 430:	9f e0       	ldi	r25, 0x0F	; 15
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 438:	00 00       	nop
 43a:	08 95       	ret

0000043c <LCD_VOidSendChar>:
 43c:	cf 93       	push	r28
 43e:	c8 2f       	mov	r28, r24
 440:	61 e0       	ldi	r22, 0x01	; 1
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	0e 94 90 00 	call	0x120	; 0x120 <DIO_enuWriteChannel>
 448:	8c 2f       	mov	r24, r28
 44a:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_VoidSendDataBus>
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <LCD_VoidSendString>:
 452:	cf 92       	push	r12
 454:	df 92       	push	r13
 456:	ef 92       	push	r14
 458:	ff 92       	push	r15
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	ec 01       	movw	r28, r24
 460:	c1 2c       	mov	r12, r1
 462:	d1 2c       	mov	r13, r1
 464:	76 01       	movw	r14, r12
 466:	07 c0       	rjmp	.+14     	; 0x476 <LCD_VoidSendString+0x24>
 468:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_VOidSendChar>
 46c:	8f ef       	ldi	r24, 0xFF	; 255
 46e:	c8 1a       	sub	r12, r24
 470:	d8 0a       	sbc	r13, r24
 472:	e8 0a       	sbc	r14, r24
 474:	f8 0a       	sbc	r15, r24
 476:	fe 01       	movw	r30, r28
 478:	ec 0d       	add	r30, r12
 47a:	fd 1d       	adc	r31, r13
 47c:	80 81       	ld	r24, Z
 47e:	81 11       	cpse	r24, r1
 480:	f3 cf       	rjmp	.-26     	; 0x468 <LCD_VoidSendString+0x16>
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	ff 90       	pop	r15
 488:	ef 90       	pop	r14
 48a:	df 90       	pop	r13
 48c:	cf 90       	pop	r12
 48e:	08 95       	ret

00000490 <LCD_Goto_xy>:
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	d8 2f       	mov	r29, r24
 496:	c6 2f       	mov	r28, r22
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	0e 94 90 00 	call	0x120	; 0x120 <DIO_enuWriteChannel>
 4a0:	8d 2f       	mov	r24, r29
 4a2:	8c 0f       	add	r24, r28
 4a4:	80 58       	subi	r24, 0x80	; 128
 4a6:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_VoidSendDataBus>
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	08 95       	ret

000004b0 <LCD_VoidClear>:
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	0e 94 90 00 	call	0x120	; 0x120 <DIO_enuWriteChannel>
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_VoidSendDataBus>
 4be:	8f e9       	ldi	r24, 0x9F	; 159
 4c0:	9f e0       	ldi	r25, 0x0F	; 15
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <LCD_VoidClear+0x12>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <LCD_VoidClear+0x18>
 4c8:	00 00       	nop
 4ca:	80 e8       	ldi	r24, 0x80	; 128
 4cc:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_VoidSendDataBus>
 4d0:	08 95       	ret

000004d2 <LCD_VoidCreateSpectialChar>:
}

void LCD_VoidCreateSpectialChar(u8 Copy_u8Index, pu8 Copy_u8Data)
 {
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	8b 01       	movw	r16, r22

	Copy_u8Index *= 8;
 4da:	c8 2f       	mov	r28, r24
 4dc:	cc 0f       	add	r28, r28
 4de:	cc 0f       	add	r28, r28
 4e0:	cc 0f       	add	r28, r28
    DIO_enuWriteChannel(LCD_PIN_RS, LCD_PIN_LOW);
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	0e 94 90 00 	call	0x120	; 0x120 <DIO_enuWriteChannel>
    LCD_VoidSendDataBus(0x40+Copy_u8Index); // Send CGRAM address
 4ea:	80 e4       	ldi	r24, 0x40	; 64
 4ec:	8c 0f       	add	r24, r28
 4ee:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_VoidSendDataBus>
    DIO_enuWriteChannel(LCD_PIN_RS, LCD_PIN_HIGH);
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	0e 94 90 00 	call	0x120	; 0x120 <DIO_enuWriteChannel>
    for (u8 i = 0; i < 8; i++) {
 4fa:	c0 e0       	ldi	r28, 0x00	; 0
 4fc:	07 c0       	rjmp	.+14     	; 0x50c <LCD_VoidCreateSpectialChar+0x3a>
        LCD_VoidSendDataBus(Copy_u8Data[i]);
 4fe:	f8 01       	movw	r30, r16
 500:	ec 0f       	add	r30, r28
 502:	f1 1d       	adc	r31, r1
 504:	80 81       	ld	r24, Z
 506:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_VoidSendDataBus>

	Copy_u8Index *= 8;
    DIO_enuWriteChannel(LCD_PIN_RS, LCD_PIN_LOW);
    LCD_VoidSendDataBus(0x40+Copy_u8Index); // Send CGRAM address
    DIO_enuWriteChannel(LCD_PIN_RS, LCD_PIN_HIGH);
    for (u8 i = 0; i < 8; i++) {
 50a:	cf 5f       	subi	r28, 0xFF	; 255
 50c:	c8 30       	cpi	r28, 0x08	; 8
 50e:	b8 f3       	brcs	.-18     	; 0x4fe <LCD_VoidCreateSpectialChar+0x2c>
        LCD_VoidSendDataBus(Copy_u8Data[i]);
    }
 510:	cf 91       	pop	r28
 512:	1f 91       	pop	r17
 514:	0f 91       	pop	r16
 516:	08 95       	ret

00000518 <VolumeDisply>:
  0b00000,
  0b00000
};

void VolumeDisply(void)
{
 518:	0f 93       	push	r16
 51a:	1f 93       	push	r17
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	00 d0       	rcall	.+0      	; 0x522 <VolumeDisply+0xa>
 522:	00 d0       	rcall	.+0      	; 0x524 <VolumeDisply+0xc>
 524:	cd b7       	in	r28, 0x3d	; 61
 526:	de b7       	in	r29, 0x3e	; 62
    u32 Loc_u8Volume=0,Loc_u8ADCValue=0;
 528:	19 82       	std	Y+1, r1	; 0x01
 52a:	1a 82       	std	Y+2, r1	; 0x02
 52c:	1b 82       	std	Y+3, r1	; 0x03
 52e:	1c 82       	std	Y+4, r1	; 0x04
    ADC_voidGetADCValue(&Loc_u8ADCValue);
 530:	ce 01       	movw	r24, r28
 532:	01 96       	adiw	r24, 0x01	; 1
 534:	0e 94 74 00 	call	0xe8	; 0xe8 <ADC_voidGetADCValue>
    //ADC_StartConverstion(7,&Loc_u8ADCValue);
    Loc_u8Volume = (5000*Loc_u8ADCValue)/1024;
 538:	29 81       	ldd	r18, Y+1	; 0x01
 53a:	3a 81       	ldd	r19, Y+2	; 0x02
 53c:	4b 81       	ldd	r20, Y+3	; 0x03
 53e:	5c 81       	ldd	r21, Y+4	; 0x04
 540:	a8 e8       	ldi	r26, 0x88	; 136
 542:	b3 e1       	ldi	r27, 0x13	; 19
 544:	0e 94 a2 03 	call	0x744	; 0x744 <__muluhisi3>
 548:	dc 01       	movw	r26, r24
 54a:	cb 01       	movw	r24, r22
 54c:	07 2e       	mov	r0, r23
 54e:	7a e0       	ldi	r23, 0x0A	; 10
 550:	b6 95       	lsr	r27
 552:	a7 95       	ror	r26
 554:	97 95       	ror	r25
 556:	87 95       	ror	r24
 558:	7a 95       	dec	r23
 55a:	d1 f7       	brne	.-12     	; 0x550 <VolumeDisply+0x38>
 55c:	70 2d       	mov	r23, r0


       if(Loc_u8Volume==0)
 55e:	00 97       	sbiw	r24, 0x00	; 0
 560:	a1 05       	cpc	r26, r1
 562:	b1 05       	cpc	r27, r1
 564:	41 f4       	brne	.+16     	; 0x576 <VolumeDisply+0x5e>
    {
        
        LCD_Goto_xy(LCD_ROW_1,LCD_COL_10);
 566:	6a e0       	ldi	r22, 0x0A	; 10
 568:	80 e4       	ldi	r24, 0x40	; 64
 56a:	0e 94 48 02 	call	0x490	; 0x490 <LCD_Goto_xy>
        LCD_VOidSendChar(4);
 56e:	84 e0       	ldi	r24, 0x04	; 4
 570:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_VOidSendChar>
 574:	a0 c0       	rjmp	.+320    	; 0x6b6 <VolumeDisply+0x19e>

    }
    else if(Loc_u8Volume<=1000)
 576:	89 3e       	cpi	r24, 0xE9	; 233
 578:	23 e0       	ldi	r18, 0x03	; 3
 57a:	92 07       	cpc	r25, r18
 57c:	a1 05       	cpc	r26, r1
 57e:	b1 05       	cpc	r27, r1
 580:	e8 f4       	brcc	.+58     	; 0x5bc <VolumeDisply+0xa4>
    {
        
        LCD_Goto_xy(LCD_ROW_1,LCD_COL_10);
 582:	6a e0       	ldi	r22, 0x0A	; 10
 584:	80 e4       	ldi	r24, 0x40	; 64
 586:	0e 94 48 02 	call	0x490	; 0x490 <LCD_Goto_xy>
        LCD_VOidSendChar(0);
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_VOidSendChar>
        LCD_Goto_xy(LCD_ROW_1,LCD_COL_11);
 590:	6b e0       	ldi	r22, 0x0B	; 11
 592:	80 e4       	ldi	r24, 0x40	; 64
 594:	0e 94 48 02 	call	0x490	; 0x490 <LCD_Goto_xy>
        LCD_VOidSendChar(' ');
 598:	80 e2       	ldi	r24, 0x20	; 32
 59a:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_VOidSendChar>
        LCD_Goto_xy(LCD_ROW_1,LCD_COL_12);
 59e:	6c e0       	ldi	r22, 0x0C	; 12
 5a0:	80 e4       	ldi	r24, 0x40	; 64
 5a2:	0e 94 48 02 	call	0x490	; 0x490 <LCD_Goto_xy>
        LCD_VOidSendChar(' ');
 5a6:	80 e2       	ldi	r24, 0x20	; 32
 5a8:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_VOidSendChar>
        LCD_Goto_xy(LCD_ROW_1,LCD_COL_13);
 5ac:	6d e0       	ldi	r22, 0x0D	; 13
 5ae:	80 e4       	ldi	r24, 0x40	; 64
 5b0:	0e 94 48 02 	call	0x490	; 0x490 <LCD_Goto_xy>
        LCD_VOidSendChar(' ');
 5b4:	80 e2       	ldi	r24, 0x20	; 32
 5b6:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_VOidSendChar>
 5ba:	7d c0       	rjmp	.+250    	; 0x6b6 <VolumeDisply+0x19e>
    }
    else if((Loc_u8Volume>1000)&&(Loc_u8Volume<=2000))
 5bc:	8c 01       	movw	r16, r24
 5be:	9d 01       	movw	r18, r26
 5c0:	09 5e       	subi	r16, 0xE9	; 233
 5c2:	13 40       	sbci	r17, 0x03	; 3
 5c4:	21 09       	sbc	r18, r1
 5c6:	31 09       	sbc	r19, r1
 5c8:	08 3e       	cpi	r16, 0xE8	; 232
 5ca:	13 40       	sbci	r17, 0x03	; 3
 5cc:	21 05       	cpc	r18, r1
 5ce:	31 05       	cpc	r19, r1
 5d0:	e8 f4       	brcc	.+58     	; 0x60c <VolumeDisply+0xf4>
    {
        LCD_Goto_xy(LCD_ROW_1,LCD_COL_10);
 5d2:	6a e0       	ldi	r22, 0x0A	; 10
 5d4:	80 e4       	ldi	r24, 0x40	; 64
 5d6:	0e 94 48 02 	call	0x490	; 0x490 <LCD_Goto_xy>
        LCD_VOidSendChar(0);
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_VOidSendChar>
        LCD_Goto_xy(LCD_ROW_1,LCD_COL_11);
 5e0:	6b e0       	ldi	r22, 0x0B	; 11
 5e2:	80 e4       	ldi	r24, 0x40	; 64
 5e4:	0e 94 48 02 	call	0x490	; 0x490 <LCD_Goto_xy>
        LCD_VOidSendChar(1);
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_VOidSendChar>
        LCD_Goto_xy(LCD_ROW_1,LCD_COL_12);
 5ee:	6c e0       	ldi	r22, 0x0C	; 12
 5f0:	80 e4       	ldi	r24, 0x40	; 64
 5f2:	0e 94 48 02 	call	0x490	; 0x490 <LCD_Goto_xy>
        LCD_VOidSendChar(' ');
 5f6:	80 e2       	ldi	r24, 0x20	; 32
 5f8:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_VOidSendChar>
        LCD_Goto_xy(LCD_ROW_1,LCD_COL_13);
 5fc:	6d e0       	ldi	r22, 0x0D	; 13
 5fe:	80 e4       	ldi	r24, 0x40	; 64
 600:	0e 94 48 02 	call	0x490	; 0x490 <LCD_Goto_xy>
        LCD_VOidSendChar(' ');
 604:	80 e2       	ldi	r24, 0x20	; 32
 606:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_VOidSendChar>
 60a:	55 c0       	rjmp	.+170    	; 0x6b6 <VolumeDisply+0x19e>
    }
    else if((Loc_u8Volume>2000)&&(Loc_u8Volume<=3000))
 60c:	8c 01       	movw	r16, r24
 60e:	9d 01       	movw	r18, r26
 610:	01 5d       	subi	r16, 0xD1	; 209
 612:	17 40       	sbci	r17, 0x07	; 7
 614:	21 09       	sbc	r18, r1
 616:	31 09       	sbc	r19, r1
 618:	08 3e       	cpi	r16, 0xE8	; 232
 61a:	13 40       	sbci	r17, 0x03	; 3
 61c:	21 05       	cpc	r18, r1
 61e:	31 05       	cpc	r19, r1
 620:	e8 f4       	brcc	.+58     	; 0x65c <VolumeDisply+0x144>
    {
        LCD_Goto_xy(LCD_ROW_1,LCD_COL_10);
 622:	6a e0       	ldi	r22, 0x0A	; 10
 624:	80 e4       	ldi	r24, 0x40	; 64
 626:	0e 94 48 02 	call	0x490	; 0x490 <LCD_Goto_xy>
        LCD_VOidSendChar(0);
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_VOidSendChar>
        LCD_Goto_xy(LCD_ROW_1,LCD_COL_11);
 630:	6b e0       	ldi	r22, 0x0B	; 11
 632:	80 e4       	ldi	r24, 0x40	; 64
 634:	0e 94 48 02 	call	0x490	; 0x490 <LCD_Goto_xy>
        LCD_VOidSendChar(1);
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_VOidSendChar>
        LCD_Goto_xy(LCD_ROW_1,LCD_COL_12);
 63e:	6c e0       	ldi	r22, 0x0C	; 12
 640:	80 e4       	ldi	r24, 0x40	; 64
 642:	0e 94 48 02 	call	0x490	; 0x490 <LCD_Goto_xy>
        LCD_VOidSendChar(2);
 646:	82 e0       	ldi	r24, 0x02	; 2
 648:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_VOidSendChar>
        LCD_Goto_xy(LCD_ROW_1,LCD_COL_13);
 64c:	6d e0       	ldi	r22, 0x0D	; 13
 64e:	80 e4       	ldi	r24, 0x40	; 64
 650:	0e 94 48 02 	call	0x490	; 0x490 <LCD_Goto_xy>
        LCD_VOidSendChar(' ');
 654:	80 e2       	ldi	r24, 0x20	; 32
 656:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_VOidSendChar>
 65a:	2d c0       	rjmp	.+90     	; 0x6b6 <VolumeDisply+0x19e>
     
    }
    else if((Loc_u8Volume>3000)&&(Loc_u8Volume<=5000))
 65c:	89 5b       	subi	r24, 0xB9	; 185
 65e:	9b 40       	sbci	r25, 0x0B	; 11
 660:	a1 09       	sbc	r26, r1
 662:	b1 09       	sbc	r27, r1
 664:	80 3d       	cpi	r24, 0xD0	; 208
 666:	97 40       	sbci	r25, 0x07	; 7
 668:	a1 05       	cpc	r26, r1
 66a:	b1 05       	cpc	r27, r1
 66c:	e8 f4       	brcc	.+58     	; 0x6a8 <VolumeDisply+0x190>
    {
        LCD_Goto_xy(LCD_ROW_1,LCD_COL_10);
 66e:	6a e0       	ldi	r22, 0x0A	; 10
 670:	80 e4       	ldi	r24, 0x40	; 64
 672:	0e 94 48 02 	call	0x490	; 0x490 <LCD_Goto_xy>
        LCD_VOidSendChar(0);
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_VOidSendChar>
        LCD_Goto_xy(LCD_ROW_1,LCD_COL_11);
 67c:	6b e0       	ldi	r22, 0x0B	; 11
 67e:	80 e4       	ldi	r24, 0x40	; 64
 680:	0e 94 48 02 	call	0x490	; 0x490 <LCD_Goto_xy>
        LCD_VOidSendChar(1);
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_VOidSendChar>
        LCD_Goto_xy(LCD_ROW_1,LCD_COL_12);
 68a:	6c e0       	ldi	r22, 0x0C	; 12
 68c:	80 e4       	ldi	r24, 0x40	; 64
 68e:	0e 94 48 02 	call	0x490	; 0x490 <LCD_Goto_xy>
        LCD_VOidSendChar(2);
 692:	82 e0       	ldi	r24, 0x02	; 2
 694:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_VOidSendChar>
        LCD_Goto_xy(LCD_ROW_1,LCD_COL_13);
 698:	6d e0       	ldi	r22, 0x0D	; 13
 69a:	80 e4       	ldi	r24, 0x40	; 64
 69c:	0e 94 48 02 	call	0x490	; 0x490 <LCD_Goto_xy>
        LCD_VOidSendChar(3);
 6a0:	83 e0       	ldi	r24, 0x03	; 3
 6a2:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_VOidSendChar>
 6a6:	07 c0       	rjmp	.+14     	; 0x6b6 <VolumeDisply+0x19e>
    }
    else
    {
        LCD_Goto_xy(LCD_ROW_1,LCD_COL_14);
 6a8:	6e e0       	ldi	r22, 0x0E	; 14
 6aa:	80 e4       	ldi	r24, 0x40	; 64
 6ac:	0e 94 48 02 	call	0x490	; 0x490 <LCD_Goto_xy>
        LCD_VOidSendChar(4);
 6b0:	84 e0       	ldi	r24, 0x04	; 4
 6b2:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_VOidSendChar>
    }
}
 6b6:	0f 90       	pop	r0
 6b8:	0f 90       	pop	r0
 6ba:	0f 90       	pop	r0
 6bc:	0f 90       	pop	r0
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	1f 91       	pop	r17
 6c4:	0f 91       	pop	r16
 6c6:	08 95       	ret

000006c8 <main>:
int main(void)
{
   
    
    
    PORT_VoidInit();
 6c8:	0e 94 95 03 	call	0x72a	; 0x72a <PORT_VoidInit>
    ADC_voidinit();
 6cc:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidinit>
    LCD_VoidInit();
 6d0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_VoidInit>
    LCD_VoidClear();
 6d4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <LCD_VoidClear>
    GIE_globalInterruptEnable();
 6d8:	0e 94 a2 01 	call	0x344	; 0x344 <GIE_globalInterruptEnable>
    ADC_AaynchStartConversion(7);
 6dc:	87 e0       	ldi	r24, 0x07	; 7
 6de:	0e 94 65 00 	call	0xca	; 0xca <ADC_AaynchStartConversion>
    
    LCD_VoidCreateSpectialChar(0,ADC_Level_1);
 6e2:	60 e8       	ldi	r22, 0x80	; 128
 6e4:	70 e0       	ldi	r23, 0x00	; 0
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_VoidCreateSpectialChar>
    LCD_VoidCreateSpectialChar(1,ADC_Level_2);
 6ec:	68 e7       	ldi	r22, 0x78	; 120
 6ee:	70 e0       	ldi	r23, 0x00	; 0
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_VoidCreateSpectialChar>
    LCD_VoidCreateSpectialChar(2,ADC_Level_3);
 6f6:	60 e7       	ldi	r22, 0x70	; 112
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	82 e0       	ldi	r24, 0x02	; 2
 6fc:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_VoidCreateSpectialChar>
    LCD_VoidCreateSpectialChar(3,ADC_Level_4);
 700:	68 e6       	ldi	r22, 0x68	; 104
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	83 e0       	ldi	r24, 0x03	; 3
 706:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_VoidCreateSpectialChar>
    LCD_VoidCreateSpectialChar(4,ADC_Muted);
 70a:	60 e6       	ldi	r22, 0x60	; 96
 70c:	70 e0       	ldi	r23, 0x00	; 0
 70e:	84 e0       	ldi	r24, 0x04	; 4
 710:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_VoidCreateSpectialChar>
    LCD_Goto_xy(LCD_ROW_0,LCD_COL_0);
 714:	60 e0       	ldi	r22, 0x00	; 0
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	0e 94 48 02 	call	0x490	; 0x490 <LCD_Goto_xy>
    LCD_VoidSendString("Volume");
 71c:	88 e8       	ldi	r24, 0x88	; 136
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	0e 94 29 02 	call	0x452	; 0x452 <LCD_VoidSendString>
    while (1) 
    {
        VolumeDisply();
 724:	0e 94 8c 02 	call	0x518	; 0x518 <VolumeDisply>
 728:	fd cf       	rjmp	.-6      	; 0x724 <main+0x5c>

0000072a <PORT_VoidInit>:
	#define PORT_INPUT_FLOATING 0

	#undef PORT_INPUT_PULLUP
	#define PORT_INPUT_PULLUP 0
   
	DDRA_Reg = CONC(PORT_PA7_INTIAL_STATE,PORT_PA6_INTIAL_STATE,PORT_PA5_INTIAL_STATE,PORT_PA4_INTIAL_STATE,PORT_PA3_INTIAL_STATE,PORT_PA2_INTIAL_STATE,PORT_PA1_INTIAL_STATE,PORT_PA0_INTIAL_STATE);
 72a:	8f e3       	ldi	r24, 0x3F	; 63
 72c:	8a bb       	out	0x1a, r24	; 26
    
	DDRB_Reg = CONC(PORT_PB7_INTIAL_STATE,PORT_PB6_INTIAL_STATE,PORT_PB5_INTIAL_STATE,PORT_PB4_INTIAL_STATE,PORT_PB3_INTIAL_STATE,PORT_PB2_INTIAL_STATE,PORT_PB1_INTIAL_STATE,PORT_PB0_INTIAL_STATE);
 72e:	8f e0       	ldi	r24, 0x0F	; 15
 730:	87 bb       	out	0x17, r24	; 23
   
	DDRC_Reg = CONC(PORT_PC7_INTIAL_STATE,PORT_PC6_INTIAL_STATE,PORT_PC5_INTIAL_STATE,PORT_PC4_INTIAL_STATE,PORT_PC3_INTIAL_STATE,PORT_PC2_INTIAL_STATE,PORT_PC1_INTIAL_STATE,PORT_PC0_INTIAL_STATE);
 732:	8f ef       	ldi	r24, 0xFF	; 255
 734:	84 bb       	out	0x14, r24	; 20
                  
	DDRD_Reg = CONC(PORT_PD7_INTIAL_STATE,PORT_PD6_INTIAL_STATE,PORT_PD5_INTIAL_STATE,PORT_PD4_INTIAL_STATE,PORT_PD3_INTIAL_STATE,PORT_PD2_INTIAL_STATE,PORT_PD1_INTIAL_STATE,PORT_PD0_INTIAL_STATE);	
 736:	81 bb       	out	0x11, r24	; 17

	#undef PORT_INPUT_PULLUP
	#define PORT_INPUT_PULLUP 1											 


	PORTA_Reg = CONC(PORT_PA7_INTIAL_STATE,PORT_PA6_INTIAL_STATE,PORT_PA5_INTIAL_STATE,PORT_PA4_INTIAL_STATE,PORT_PA3_INTIAL_STATE,PORT_PA2_INTIAL_STATE,PORT_PA1_INTIAL_STATE,PORT_PA0_INTIAL_STATE);
 738:	1b ba       	out	0x1b, r1	; 27
	
    PORTB_Reg = CONC(PORT_PB7_INTIAL_STATE,PORT_PB6_INTIAL_STATE,PORT_PB5_INTIAL_STATE,PORT_PB4_INTIAL_STATE,PORT_PB3_INTIAL_STATE,PORT_PB2_INTIAL_STATE,PORT_PB1_INTIAL_STATE,PORT_PB0_INTIAL_STATE);
 73a:	90 ef       	ldi	r25, 0xF0	; 240
 73c:	98 bb       	out	0x18, r25	; 24

	PORTC_Reg = CONC(PORT_PC7_INTIAL_STATE,PORT_PC6_INTIAL_STATE,PORT_PC5_INTIAL_STATE,PORT_PC4_INTIAL_STATE,PORT_PC3_INTIAL_STATE,PORT_PC2_INTIAL_STATE,PORT_PC1_INTIAL_STATE,PORT_PC0_INTIAL_STATE);  
 73e:	15 ba       	out	0x15, r1	; 21

 	PORTD_Reg = CONC(PORT_PD7_INTIAL_STATE,PORT_PD6_INTIAL_STATE,PORT_PD5_INTIAL_STATE,PORT_PD4_INTIAL_STATE,PORT_PD3_INTIAL_STATE,PORT_PD2_INTIAL_STATE,PORT_PD1_INTIAL_STATE,PORT_PD0_INTIAL_STATE);  
 740:	82 bb       	out	0x12, r24	; 18
 742:	08 95       	ret

00000744 <__muluhisi3>:
 744:	0e 94 ad 03 	call	0x75a	; 0x75a <__umulhisi3>
 748:	a5 9f       	mul	r26, r21
 74a:	90 0d       	add	r25, r0
 74c:	b4 9f       	mul	r27, r20
 74e:	90 0d       	add	r25, r0
 750:	a4 9f       	mul	r26, r20
 752:	80 0d       	add	r24, r0
 754:	91 1d       	adc	r25, r1
 756:	11 24       	eor	r1, r1
 758:	08 95       	ret

0000075a <__umulhisi3>:
 75a:	a2 9f       	mul	r26, r18
 75c:	b0 01       	movw	r22, r0
 75e:	b3 9f       	mul	r27, r19
 760:	c0 01       	movw	r24, r0
 762:	a3 9f       	mul	r26, r19
 764:	70 0d       	add	r23, r0
 766:	81 1d       	adc	r24, r1
 768:	11 24       	eor	r1, r1
 76a:	91 1d       	adc	r25, r1
 76c:	b2 9f       	mul	r27, r18
 76e:	70 0d       	add	r23, r0
 770:	81 1d       	adc	r24, r1
 772:	11 24       	eor	r1, r1
 774:	91 1d       	adc	r25, r1
 776:	08 95       	ret

00000778 <_exit>:
 778:	f8 94       	cli

0000077a <__stop_program>:
 77a:	ff cf       	rjmp	.-2      	; 0x77a <__stop_program>
