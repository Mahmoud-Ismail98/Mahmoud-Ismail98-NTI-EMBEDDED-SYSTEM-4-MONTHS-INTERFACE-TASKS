
HAMADA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dd6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  00002dd6  00002e4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002370  00000000  00000000  00002ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ff8  00000000  00000000  00005218  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000064c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008109  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009da4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a191  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a95f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 2e 11 	call	0x225c	; 0x225c <main>
      7a:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae ea       	ldi	r26, 0xAE	; 174
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8e ea       	ldi	r24, 0xAE	; 174
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <PORT_voidInit>:
#include "../Include/PORT_private.h"
#include "../Include/PORT_config.h"


void PORT_voidInit(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	/* Initialization Direction for all Pins */
	// PORTA
	PORT_u8_DDRA_REG = CONC(PORT_u8_PA7_DIRECTION,PORT_u8_PA6_DIRECTION,PORT_u8_PA5_DIRECTION,PORT_u8_PA4_DIRECTION,
     b3e:	ea e3       	ldi	r30, 0x3A	; 58
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	8f ef       	ldi	r24, 0xFF	; 255
     b44:	80 83       	st	Z, r24
	                        PORT_u8_PA3_DIRECTION,PORT_u8_PA2_DIRECTION,PORT_u8_PA1_DIRECTION,PORT_u8_PA0_DIRECTION);
	// PORTB
	PORT_u8_DDRB_REG = CONC(PORT_u8_PB7_DIRECTION,PORT_u8_PB6_DIRECTION,PORT_u8_PB5_DIRECTION,PORT_u8_PB4_DIRECTION,
     b46:	e7 e3       	ldi	r30, 0x37	; 55
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
     b4c:	80 83       	st	Z, r24
	                        PORT_u8_PB3_DIRECTION,PORT_u8_PB2_DIRECTION,PORT_u8_PB1_DIRECTION,PORT_u8_PB0_DIRECTION);
	// PORTC
	PORT_u8_DDRC_REG = CONC(PORT_u8_PC7_DIRECTION,PORT_u8_PC6_DIRECTION,PORT_u8_PC5_DIRECTION,PORT_u8_PC4_DIRECTION,
     b4e:	e4 e3       	ldi	r30, 0x34	; 52
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
							PORT_u8_PC3_DIRECTION,PORT_u8_PC2_DIRECTION,PORT_u8_PC1_DIRECTION,PORT_u8_PC0_DIRECTION);
	// PORTD
	PORT_u8_DDRD_REG = CONC(PORT_u8_PD7_DIRECTION,PORT_u8_PD6_DIRECTION,PORT_u8_PD5_DIRECTION,PORT_u8_PD4_DIRECTION,
     b56:	e1 e3       	ldi	r30, 0x31	; 49
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	80 83       	st	Z, r24
							PORT_u8_PD3_DIRECTION,PORT_u8_PD2_DIRECTION,PORT_u8_PD1_DIRECTION,PORT_u8_PD0_DIRECTION);
					
	/* Initialization Value for all Pins  */
	// PORTA
	PORT_u8_PORTA_REG = CONC(PORT_u8_PA7_VALUE,PORT_u8_PA6_VALUE,PORT_u8_PA5_VALUE,PORT_u8_PA4_VALUE,
     b5e:	eb e3       	ldi	r30, 0x3B	; 59
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	10 82       	st	Z, r1
							 PORT_u8_PA3_VALUE,PORT_u8_PA2_VALUE,PORT_u8_PA1_VALUE,PORT_u8_PA0_VALUE);
	// PORTB
	PORT_u8_PORTB_REG = CONC(PORT_u8_PB7_VALUE,PORT_u8_PB6_VALUE,PORT_u8_PB5_VALUE,PORT_u8_PB4_VALUE,
     b64:	e8 e3       	ldi	r30, 0x38	; 56
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	10 82       	st	Z, r1
							 PORT_u8_PB3_VALUE,PORT_u8_PB2_VALUE,PORT_u8_PB1_VALUE,PORT_u8_PB0_VALUE);
	// PORTC
	PORT_u8_PORTC_REG = CONC(PORT_u8_PC7_VALUE,PORT_u8_PC6_VALUE,PORT_u8_PC5_VALUE,PORT_u8_PC4_VALUE,
     b6a:	e5 e3       	ldi	r30, 0x35	; 53
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	10 82       	st	Z, r1
							 PORT_u8_PC3_VALUE,PORT_u8_PC2_VALUE,PORT_u8_PC1_VALUE,PORT_u8_PC0_VALUE);
	// PORTD
	PORT_u8_PORTD_REG = CONC(PORT_u8_PD7_VALUE,PORT_u8_PD6_VALUE,PORT_u8_PD5_VALUE,PORT_u8_PD4_VALUE,
     b70:	e2 e3       	ldi	r30, 0x32	; 50
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	10 82       	st	Z, r1
							 PORT_u8_PD3_VALUE,PORT_u8_PD2_VALUE,PORT_u8_PD1_VALUE,PORT_u8_PD0_VALUE);
}
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <PORT_PortEnumSetPinDirection>:

PortEnum PORT_PortEnumSetPinDirection(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Direction)
{
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	2e 97       	sbiw	r28, 0x0e	; 14
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	cd bf       	out	0x3d, r28	; 61
     b90:	8a 83       	std	Y+2, r24	; 0x02
     b92:	6b 83       	std	Y+3, r22	; 0x03
     b94:	4c 83       	std	Y+4, r20	; 0x04
	PortEnum local_PortEnumErrorState = PORT_DIRECTION_OK;
     b96:	19 82       	std	Y+1, r1	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= PORT_u8_PORTD) && (copy_u8PinId <= PORT_u8_PIN7))
     b98:	8a 81       	ldd	r24, Y+2	; 0x02
     b9a:	84 30       	cpi	r24, 0x04	; 4
     b9c:	08 f0       	brcs	.+2      	; 0xba0 <PORT_PortEnumSetPinDirection+0x24>
     b9e:	05 c1       	rjmp	.+522    	; 0xdaa <PORT_PortEnumSetPinDirection+0x22e>
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	88 30       	cpi	r24, 0x08	; 8
     ba4:	08 f0       	brcs	.+2      	; 0xba8 <PORT_PortEnumSetPinDirection+0x2c>
     ba6:	01 c1       	rjmp	.+514    	; 0xdaa <PORT_PortEnumSetPinDirection+0x22e>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
     ba8:	8a 81       	ldd	r24, Y+2	; 0x02
     baa:	28 2f       	mov	r18, r24
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	3e 87       	std	Y+14, r19	; 0x0e
     bb0:	2d 87       	std	Y+13, r18	; 0x0d
     bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bb6:	81 30       	cpi	r24, 0x01	; 1
     bb8:	91 05       	cpc	r25, r1
     bba:	09 f4       	brne	.+2      	; 0xbbe <PORT_PortEnumSetPinDirection+0x42>
     bbc:	4f c0       	rjmp	.+158    	; 0xc5c <PORT_PortEnumSetPinDirection+0xe0>
     bbe:	2d 85       	ldd	r18, Y+13	; 0x0d
     bc0:	3e 85       	ldd	r19, Y+14	; 0x0e
     bc2:	22 30       	cpi	r18, 0x02	; 2
     bc4:	31 05       	cpc	r19, r1
     bc6:	2c f4       	brge	.+10     	; 0xbd2 <PORT_PortEnumSetPinDirection+0x56>
     bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bca:	9e 85       	ldd	r25, Y+14	; 0x0e
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	71 f0       	breq	.+28     	; 0xbec <PORT_PortEnumSetPinDirection+0x70>
     bd0:	ee c0       	rjmp	.+476    	; 0xdae <PORT_PortEnumSetPinDirection+0x232>
     bd2:	2d 85       	ldd	r18, Y+13	; 0x0d
     bd4:	3e 85       	ldd	r19, Y+14	; 0x0e
     bd6:	22 30       	cpi	r18, 0x02	; 2
     bd8:	31 05       	cpc	r19, r1
     bda:	09 f4       	brne	.+2      	; 0xbde <PORT_PortEnumSetPinDirection+0x62>
     bdc:	77 c0       	rjmp	.+238    	; 0xccc <PORT_PortEnumSetPinDirection+0x150>
     bde:	8d 85       	ldd	r24, Y+13	; 0x0d
     be0:	9e 85       	ldd	r25, Y+14	; 0x0e
     be2:	83 30       	cpi	r24, 0x03	; 3
     be4:	91 05       	cpc	r25, r1
     be6:	09 f4       	brne	.+2      	; 0xbea <PORT_PortEnumSetPinDirection+0x6e>
     be8:	a9 c0       	rjmp	.+338    	; 0xd3c <PORT_PortEnumSetPinDirection+0x1c0>
     bea:	e1 c0       	rjmp	.+450    	; 0xdae <PORT_PortEnumSetPinDirection+0x232>
		{
			case PORT_u8_PORTA:   // PORTA
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
     bec:	8c 81       	ldd	r24, Y+4	; 0x04
     bee:	28 2f       	mov	r18, r24
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	3c 87       	std	Y+12, r19	; 0x0c
     bf4:	2b 87       	std	Y+11, r18	; 0x0b
     bf6:	8b 85       	ldd	r24, Y+11	; 0x0b
     bf8:	9c 85       	ldd	r25, Y+12	; 0x0c
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	d1 f0       	breq	.+52     	; 0xc32 <PORT_PortEnumSetPinDirection+0xb6>
     bfe:	2b 85       	ldd	r18, Y+11	; 0x0b
     c00:	3c 85       	ldd	r19, Y+12	; 0x0c
     c02:	21 30       	cpi	r18, 0x01	; 1
     c04:	31 05       	cpc	r19, r1
     c06:	09 f0       	breq	.+2      	; 0xc0a <PORT_PortEnumSetPinDirection+0x8e>
     c08:	d2 c0       	rjmp	.+420    	; 0xdae <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRA_REG,copy_u8PinId);     break;
     c0a:	aa e3       	ldi	r26, 0x3A	; 58
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	ea e3       	ldi	r30, 0x3A	; 58
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	48 2f       	mov	r20, r24
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	28 2f       	mov	r18, r24
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	02 2e       	mov	r0, r18
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <PORT_PortEnumSetPinDirection+0xac>
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	0a 94       	dec	r0
     c2a:	e2 f7       	brpl	.-8      	; 0xc24 <PORT_PortEnumSetPinDirection+0xa8>
     c2c:	84 2b       	or	r24, r20
     c2e:	8c 93       	st	X, r24
     c30:	be c0       	rjmp	.+380    	; 0xdae <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRA_REG,copy_u8PinId);     break;
     c32:	aa e3       	ldi	r26, 0x3A	; 58
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	ea e3       	ldi	r30, 0x3A	; 58
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	48 2f       	mov	r20, r24
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	02 2e       	mov	r0, r18
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <PORT_PortEnumSetPinDirection+0xd4>
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <PORT_PortEnumSetPinDirection+0xd0>
     c54:	80 95       	com	r24
     c56:	84 23       	and	r24, r20
     c58:	8c 93       	st	X, r24
     c5a:	a9 c0       	rjmp	.+338    	; 0xdae <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTB:   // PORTB
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	28 2f       	mov	r18, r24
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	3a 87       	std	Y+10, r19	; 0x0a
     c64:	29 87       	std	Y+9, r18	; 0x09
     c66:	89 85       	ldd	r24, Y+9	; 0x09
     c68:	9a 85       	ldd	r25, Y+10	; 0x0a
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	d1 f0       	breq	.+52     	; 0xca2 <PORT_PortEnumSetPinDirection+0x126>
     c6e:	29 85       	ldd	r18, Y+9	; 0x09
     c70:	3a 85       	ldd	r19, Y+10	; 0x0a
     c72:	21 30       	cpi	r18, 0x01	; 1
     c74:	31 05       	cpc	r19, r1
     c76:	09 f0       	breq	.+2      	; 0xc7a <PORT_PortEnumSetPinDirection+0xfe>
     c78:	9a c0       	rjmp	.+308    	; 0xdae <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRB_REG,copy_u8PinId);     break;
     c7a:	a7 e3       	ldi	r26, 0x37	; 55
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e7 e3       	ldi	r30, 0x37	; 55
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	48 2f       	mov	r20, r24
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	02 2e       	mov	r0, r18
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <PORT_PortEnumSetPinDirection+0x11c>
     c94:	88 0f       	add	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	0a 94       	dec	r0
     c9a:	e2 f7       	brpl	.-8      	; 0xc94 <PORT_PortEnumSetPinDirection+0x118>
     c9c:	84 2b       	or	r24, r20
     c9e:	8c 93       	st	X, r24
     ca0:	86 c0       	rjmp	.+268    	; 0xdae <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRB_REG,copy_u8PinId);     break;
     ca2:	a7 e3       	ldi	r26, 0x37	; 55
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e7 e3       	ldi	r30, 0x37	; 55
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	48 2f       	mov	r20, r24
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	02 2e       	mov	r0, r18
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <PORT_PortEnumSetPinDirection+0x144>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	0a 94       	dec	r0
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <PORT_PortEnumSetPinDirection+0x140>
     cc4:	80 95       	com	r24
     cc6:	84 23       	and	r24, r20
     cc8:	8c 93       	st	X, r24
     cca:	71 c0       	rjmp	.+226    	; 0xdae <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTC:  // PORTC
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	38 87       	std	Y+8, r19	; 0x08
     cd4:	2f 83       	std	Y+7, r18	; 0x07
     cd6:	8f 81       	ldd	r24, Y+7	; 0x07
     cd8:	98 85       	ldd	r25, Y+8	; 0x08
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	d1 f0       	breq	.+52     	; 0xd12 <PORT_PortEnumSetPinDirection+0x196>
     cde:	2f 81       	ldd	r18, Y+7	; 0x07
     ce0:	38 85       	ldd	r19, Y+8	; 0x08
     ce2:	21 30       	cpi	r18, 0x01	; 1
     ce4:	31 05       	cpc	r19, r1
     ce6:	09 f0       	breq	.+2      	; 0xcea <PORT_PortEnumSetPinDirection+0x16e>
     ce8:	62 c0       	rjmp	.+196    	; 0xdae <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRC_REG,copy_u8PinId);     break;
     cea:	a4 e3       	ldi	r26, 0x34	; 52
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e4 e3       	ldi	r30, 0x34	; 52
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	48 2f       	mov	r20, r24
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	28 2f       	mov	r18, r24
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	02 2e       	mov	r0, r18
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <PORT_PortEnumSetPinDirection+0x18c>
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	0a 94       	dec	r0
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <PORT_PortEnumSetPinDirection+0x188>
     d0c:	84 2b       	or	r24, r20
     d0e:	8c 93       	st	X, r24
     d10:	4e c0       	rjmp	.+156    	; 0xdae <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRC_REG,copy_u8PinId);     break;
     d12:	a4 e3       	ldi	r26, 0x34	; 52
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e4 e3       	ldi	r30, 0x34	; 52
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	48 2f       	mov	r20, r24
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 2e       	mov	r0, r18
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <PORT_PortEnumSetPinDirection+0x1b4>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	0a 94       	dec	r0
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <PORT_PortEnumSetPinDirection+0x1b0>
     d34:	80 95       	com	r24
     d36:	84 23       	and	r24, r20
     d38:	8c 93       	st	X, r24
     d3a:	39 c0       	rjmp	.+114    	; 0xdae <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTD:  // PORTD
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
     d3c:	8c 81       	ldd	r24, Y+4	; 0x04
     d3e:	28 2f       	mov	r18, r24
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	3e 83       	std	Y+6, r19	; 0x06
     d44:	2d 83       	std	Y+5, r18	; 0x05
     d46:	8d 81       	ldd	r24, Y+5	; 0x05
     d48:	9e 81       	ldd	r25, Y+6	; 0x06
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	c9 f0       	breq	.+50     	; 0xd80 <PORT_PortEnumSetPinDirection+0x204>
     d4e:	2d 81       	ldd	r18, Y+5	; 0x05
     d50:	3e 81       	ldd	r19, Y+6	; 0x06
     d52:	21 30       	cpi	r18, 0x01	; 1
     d54:	31 05       	cpc	r19, r1
     d56:	59 f5       	brne	.+86     	; 0xdae <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRD_REG,copy_u8PinId);     break;
     d58:	a1 e3       	ldi	r26, 0x31	; 49
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e1 e3       	ldi	r30, 0x31	; 49
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	48 2f       	mov	r20, r24
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	02 2e       	mov	r0, r18
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <PORT_PortEnumSetPinDirection+0x1fa>
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	0a 94       	dec	r0
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <PORT_PortEnumSetPinDirection+0x1f6>
     d7a:	84 2b       	or	r24, r20
     d7c:	8c 93       	st	X, r24
     d7e:	17 c0       	rjmp	.+46     	; 0xdae <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRD_REG,copy_u8PinId);     break;
     d80:	a1 e3       	ldi	r26, 0x31	; 49
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e1 e3       	ldi	r30, 0x31	; 49
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	48 2f       	mov	r20, r24
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 2e       	mov	r0, r18
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <PORT_PortEnumSetPinDirection+0x222>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	0a 94       	dec	r0
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <PORT_PortEnumSetPinDirection+0x21e>
     da2:	80 95       	com	r24
     da4:	84 23       	and	r24, r20
     da6:	8c 93       	st	X, r24
     da8:	02 c0       	rjmp	.+4      	; 0xdae <PORT_PortEnumSetPinDirection+0x232>
			break;
		}
	}
	else
	{
		local_PortEnumErrorState = PORT_DIRECTION_NOK;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_PortEnumErrorState;
     dae:	89 81       	ldd	r24, Y+1	; 0x01
}
     db0:	2e 96       	adiw	r28, 0x0e	; 14
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <PORT_PortEnumSetPinMode>:


PortEnum PORT_PortEnumSetPinMode(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Mode)
{
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	2e 97       	sbiw	r28, 0x0e	; 14
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	8a 83       	std	Y+2, r24	; 0x02
     dd8:	6b 83       	std	Y+3, r22	; 0x03
     dda:	4c 83       	std	Y+4, r20	; 0x04
	PortEnum local_PortEnumErrorState = PORT_MODE_OK;
     ddc:	82 e0       	ldi	r24, 0x02	; 2
     dde:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= PORT_u8_PORTD) && (copy_u8PinId <= PORT_u8_PIN7))
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	84 30       	cpi	r24, 0x04	; 4
     de4:	08 f0       	brcs	.+2      	; 0xde8 <PORT_PortEnumSetPinMode+0x26>
     de6:	ee c1       	rjmp	.+988    	; 0x11c4 <PORT_PortEnumSetPinMode+0x402>
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	88 30       	cpi	r24, 0x08	; 8
     dec:	08 f0       	brcs	.+2      	; 0xdf0 <PORT_PortEnumSetPinMode+0x2e>
     dee:	ea c1       	rjmp	.+980    	; 0x11c4 <PORT_PortEnumSetPinMode+0x402>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	3e 87       	std	Y+14, r19	; 0x0e
     df8:	2d 87       	std	Y+13, r18	; 0x0d
     dfa:	8d 85       	ldd	r24, Y+13	; 0x0d
     dfc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	91 05       	cpc	r25, r1
     e02:	09 f4       	brne	.+2      	; 0xe06 <PORT_PortEnumSetPinMode+0x44>
     e04:	89 c0       	rjmp	.+274    	; 0xf18 <PORT_PortEnumSetPinMode+0x156>
     e06:	2d 85       	ldd	r18, Y+13	; 0x0d
     e08:	3e 85       	ldd	r19, Y+14	; 0x0e
     e0a:	22 30       	cpi	r18, 0x02	; 2
     e0c:	31 05       	cpc	r19, r1
     e0e:	2c f4       	brge	.+10     	; 0xe1a <PORT_PortEnumSetPinMode+0x58>
     e10:	8d 85       	ldd	r24, Y+13	; 0x0d
     e12:	9e 85       	ldd	r25, Y+14	; 0x0e
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	71 f0       	breq	.+28     	; 0xe34 <PORT_PortEnumSetPinMode+0x72>
     e18:	d7 c1       	rjmp	.+942    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
     e1a:	2d 85       	ldd	r18, Y+13	; 0x0d
     e1c:	3e 85       	ldd	r19, Y+14	; 0x0e
     e1e:	22 30       	cpi	r18, 0x02	; 2
     e20:	31 05       	cpc	r19, r1
     e22:	09 f4       	brne	.+2      	; 0xe26 <PORT_PortEnumSetPinMode+0x64>
     e24:	eb c0       	rjmp	.+470    	; 0xffc <PORT_PortEnumSetPinMode+0x23a>
     e26:	8d 85       	ldd	r24, Y+13	; 0x0d
     e28:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2a:	83 30       	cpi	r24, 0x03	; 3
     e2c:	91 05       	cpc	r25, r1
     e2e:	09 f4       	brne	.+2      	; 0xe32 <PORT_PortEnumSetPinMode+0x70>
     e30:	57 c1       	rjmp	.+686    	; 0x10e0 <PORT_PortEnumSetPinMode+0x31e>
     e32:	ca c1       	rjmp	.+916    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
		{
			case PORT_u8_PORTA:  // PORTA
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
     e34:	8c 81       	ldd	r24, Y+4	; 0x04
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	3c 87       	std	Y+12, r19	; 0x0c
     e3c:	2b 87       	std	Y+11, r18	; 0x0b
     e3e:	8b 85       	ldd	r24, Y+11	; 0x0b
     e40:	9c 85       	ldd	r25, Y+12	; 0x0c
     e42:	81 30       	cpi	r24, 0x01	; 1
     e44:	91 05       	cpc	r25, r1
     e46:	b1 f0       	breq	.+44     	; 0xe74 <PORT_PortEnumSetPinMode+0xb2>
     e48:	2b 85       	ldd	r18, Y+11	; 0x0b
     e4a:	3c 85       	ldd	r19, Y+12	; 0x0c
     e4c:	22 30       	cpi	r18, 0x02	; 2
     e4e:	31 05       	cpc	r19, r1
     e50:	2c f4       	brge	.+10     	; 0xe5c <PORT_PortEnumSetPinMode+0x9a>
     e52:	8b 85       	ldd	r24, Y+11	; 0x0b
     e54:	9c 85       	ldd	r25, Y+12	; 0x0c
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	09 f1       	breq	.+66     	; 0xe9c <PORT_PortEnumSetPinMode+0xda>
     e5a:	b6 c1       	rjmp	.+876    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
     e5c:	2b 85       	ldd	r18, Y+11	; 0x0b
     e5e:	3c 85       	ldd	r19, Y+12	; 0x0c
     e60:	22 30       	cpi	r18, 0x02	; 2
     e62:	31 05       	cpc	r19, r1
     e64:	81 f1       	breq	.+96     	; 0xec6 <PORT_PortEnumSetPinMode+0x104>
     e66:	8b 85       	ldd	r24, Y+11	; 0x0b
     e68:	9c 85       	ldd	r25, Y+12	; 0x0c
     e6a:	83 30       	cpi	r24, 0x03	; 3
     e6c:	91 05       	cpc	r25, r1
     e6e:	09 f4       	brne	.+2      	; 0xe72 <PORT_PortEnumSetPinMode+0xb0>
     e70:	3e c0       	rjmp	.+124    	; 0xeee <PORT_PortEnumSetPinMode+0x12c>
     e72:	aa c1       	rjmp	.+852    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
     e74:	ab e3       	ldi	r26, 0x3B	; 59
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	eb e3       	ldi	r30, 0x3B	; 59
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <PORT_PortEnumSetPinMode+0xd0>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <PORT_PortEnumSetPinMode+0xcc>
     e96:	84 2b       	or	r24, r20
     e98:	8c 93       	st	X, r24
     e9a:	96 c1       	rjmp	.+812    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
     e9c:	ab e3       	ldi	r26, 0x3B	; 59
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	eb e3       	ldi	r30, 0x3B	; 59
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 2e       	mov	r0, r18
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <PORT_PortEnumSetPinMode+0xf8>
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	0a 94       	dec	r0
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <PORT_PortEnumSetPinMode+0xf4>
     ebe:	80 95       	com	r24
     ec0:	84 23       	and	r24, r20
     ec2:	8c 93       	st	X, r24
     ec4:	81 c1       	rjmp	.+770    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
     ec6:	ab e3       	ldi	r26, 0x3B	; 59
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	eb e3       	ldi	r30, 0x3B	; 59
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 2e       	mov	r0, r18
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <PORT_PortEnumSetPinMode+0x122>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	0a 94       	dec	r0
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <PORT_PortEnumSetPinMode+0x11e>
     ee8:	84 2b       	or	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	6d c1       	rjmp	.+730    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
     eee:	ab e3       	ldi	r26, 0x3B	; 59
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	eb e3       	ldi	r30, 0x3B	; 59
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <PORT_PortEnumSetPinMode+0x14a>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <PORT_PortEnumSetPinMode+0x146>
     f10:	80 95       	com	r24
     f12:	84 23       	and	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	58 c1       	rjmp	.+688    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTB:  // PORTB
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
     f18:	8c 81       	ldd	r24, Y+4	; 0x04
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	3a 87       	std	Y+10, r19	; 0x0a
     f20:	29 87       	std	Y+9, r18	; 0x09
     f22:	89 85       	ldd	r24, Y+9	; 0x09
     f24:	9a 85       	ldd	r25, Y+10	; 0x0a
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	91 05       	cpc	r25, r1
     f2a:	b1 f0       	breq	.+44     	; 0xf58 <PORT_PortEnumSetPinMode+0x196>
     f2c:	29 85       	ldd	r18, Y+9	; 0x09
     f2e:	3a 85       	ldd	r19, Y+10	; 0x0a
     f30:	22 30       	cpi	r18, 0x02	; 2
     f32:	31 05       	cpc	r19, r1
     f34:	2c f4       	brge	.+10     	; 0xf40 <PORT_PortEnumSetPinMode+0x17e>
     f36:	89 85       	ldd	r24, Y+9	; 0x09
     f38:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	09 f1       	breq	.+66     	; 0xf80 <PORT_PortEnumSetPinMode+0x1be>
     f3e:	44 c1       	rjmp	.+648    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
     f40:	29 85       	ldd	r18, Y+9	; 0x09
     f42:	3a 85       	ldd	r19, Y+10	; 0x0a
     f44:	22 30       	cpi	r18, 0x02	; 2
     f46:	31 05       	cpc	r19, r1
     f48:	81 f1       	breq	.+96     	; 0xfaa <PORT_PortEnumSetPinMode+0x1e8>
     f4a:	89 85       	ldd	r24, Y+9	; 0x09
     f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <PORT_PortEnumSetPinMode+0x194>
     f54:	3e c0       	rjmp	.+124    	; 0xfd2 <PORT_PortEnumSetPinMode+0x210>
     f56:	38 c1       	rjmp	.+624    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
     f58:	a8 e3       	ldi	r26, 0x38	; 56
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e8 e3       	ldi	r30, 0x38	; 56
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	48 2f       	mov	r20, r24
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 2e       	mov	r0, r18
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <PORT_PortEnumSetPinMode+0x1b4>
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	0a 94       	dec	r0
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <PORT_PortEnumSetPinMode+0x1b0>
     f7a:	84 2b       	or	r24, r20
     f7c:	8c 93       	st	X, r24
     f7e:	24 c1       	rjmp	.+584    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
     f80:	a8 e3       	ldi	r26, 0x38	; 56
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e8 e3       	ldi	r30, 0x38	; 56
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <PORT_PortEnumSetPinMode+0x1dc>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <PORT_PortEnumSetPinMode+0x1d8>
     fa2:	80 95       	com	r24
     fa4:	84 23       	and	r24, r20
     fa6:	8c 93       	st	X, r24
     fa8:	0f c1       	rjmp	.+542    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
     faa:	a8 e3       	ldi	r26, 0x38	; 56
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e8 e3       	ldi	r30, 0x38	; 56
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <PORT_PortEnumSetPinMode+0x206>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <PORT_PortEnumSetPinMode+0x202>
     fcc:	84 2b       	or	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	fb c0       	rjmp	.+502    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
     fd2:	a8 e3       	ldi	r26, 0x38	; 56
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e8 e3       	ldi	r30, 0x38	; 56
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <PORT_PortEnumSetPinMode+0x22e>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <PORT_PortEnumSetPinMode+0x22a>
     ff4:	80 95       	com	r24
     ff6:	84 23       	and	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	e6 c0       	rjmp	.+460    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTC:  // PORTC
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	38 87       	std	Y+8, r19	; 0x08
    1004:	2f 83       	std	Y+7, r18	; 0x07
    1006:	8f 81       	ldd	r24, Y+7	; 0x07
    1008:	98 85       	ldd	r25, Y+8	; 0x08
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	91 05       	cpc	r25, r1
    100e:	b1 f0       	breq	.+44     	; 0x103c <PORT_PortEnumSetPinMode+0x27a>
    1010:	2f 81       	ldd	r18, Y+7	; 0x07
    1012:	38 85       	ldd	r19, Y+8	; 0x08
    1014:	22 30       	cpi	r18, 0x02	; 2
    1016:	31 05       	cpc	r19, r1
    1018:	2c f4       	brge	.+10     	; 0x1024 <PORT_PortEnumSetPinMode+0x262>
    101a:	8f 81       	ldd	r24, Y+7	; 0x07
    101c:	98 85       	ldd	r25, Y+8	; 0x08
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	09 f1       	breq	.+66     	; 0x1064 <PORT_PortEnumSetPinMode+0x2a2>
    1022:	d2 c0       	rjmp	.+420    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
    1024:	2f 81       	ldd	r18, Y+7	; 0x07
    1026:	38 85       	ldd	r19, Y+8	; 0x08
    1028:	22 30       	cpi	r18, 0x02	; 2
    102a:	31 05       	cpc	r19, r1
    102c:	81 f1       	breq	.+96     	; 0x108e <PORT_PortEnumSetPinMode+0x2cc>
    102e:	8f 81       	ldd	r24, Y+7	; 0x07
    1030:	98 85       	ldd	r25, Y+8	; 0x08
    1032:	83 30       	cpi	r24, 0x03	; 3
    1034:	91 05       	cpc	r25, r1
    1036:	09 f4       	brne	.+2      	; 0x103a <PORT_PortEnumSetPinMode+0x278>
    1038:	3e c0       	rjmp	.+124    	; 0x10b6 <PORT_PortEnumSetPinMode+0x2f4>
    103a:	c6 c0       	rjmp	.+396    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    103c:	a5 e3       	ldi	r26, 0x35	; 53
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e5 e3       	ldi	r30, 0x35	; 53
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <PORT_PortEnumSetPinMode+0x298>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <PORT_PortEnumSetPinMode+0x294>
    105e:	84 2b       	or	r24, r20
    1060:	8c 93       	st	X, r24
    1062:	b2 c0       	rjmp	.+356    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    1064:	a5 e3       	ldi	r26, 0x35	; 53
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e5 e3       	ldi	r30, 0x35	; 53
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <PORT_PortEnumSetPinMode+0x2c0>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <PORT_PortEnumSetPinMode+0x2bc>
    1086:	80 95       	com	r24
    1088:	84 23       	and	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	9d c0       	rjmp	.+314    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    108e:	a5 e3       	ldi	r26, 0x35	; 53
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e5 e3       	ldi	r30, 0x35	; 53
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 2e       	mov	r0, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <PORT_PortEnumSetPinMode+0x2ea>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <PORT_PortEnumSetPinMode+0x2e6>
    10b0:	84 2b       	or	r24, r20
    10b2:	8c 93       	st	X, r24
    10b4:	89 c0       	rjmp	.+274    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    10b6:	a5 e3       	ldi	r26, 0x35	; 53
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e5 e3       	ldi	r30, 0x35	; 53
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	48 2f       	mov	r20, r24
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 2e       	mov	r0, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <PORT_PortEnumSetPinMode+0x312>
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	0a 94       	dec	r0
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <PORT_PortEnumSetPinMode+0x30e>
    10d8:	80 95       	com	r24
    10da:	84 23       	and	r24, r20
    10dc:	8c 93       	st	X, r24
    10de:	74 c0       	rjmp	.+232    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTD:  // PORTD
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	3e 83       	std	Y+6, r19	; 0x06
    10e8:	2d 83       	std	Y+5, r18	; 0x05
    10ea:	8d 81       	ldd	r24, Y+5	; 0x05
    10ec:	9e 81       	ldd	r25, Y+6	; 0x06
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	91 05       	cpc	r25, r1
    10f2:	b1 f0       	breq	.+44     	; 0x1120 <PORT_PortEnumSetPinMode+0x35e>
    10f4:	2d 81       	ldd	r18, Y+5	; 0x05
    10f6:	3e 81       	ldd	r19, Y+6	; 0x06
    10f8:	22 30       	cpi	r18, 0x02	; 2
    10fa:	31 05       	cpc	r19, r1
    10fc:	2c f4       	brge	.+10     	; 0x1108 <PORT_PortEnumSetPinMode+0x346>
    10fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1100:	9e 81       	ldd	r25, Y+6	; 0x06
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	09 f1       	breq	.+66     	; 0x1148 <PORT_PortEnumSetPinMode+0x386>
    1106:	60 c0       	rjmp	.+192    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
    1108:	2d 81       	ldd	r18, Y+5	; 0x05
    110a:	3e 81       	ldd	r19, Y+6	; 0x06
    110c:	22 30       	cpi	r18, 0x02	; 2
    110e:	31 05       	cpc	r19, r1
    1110:	81 f1       	breq	.+96     	; 0x1172 <PORT_PortEnumSetPinMode+0x3b0>
    1112:	8d 81       	ldd	r24, Y+5	; 0x05
    1114:	9e 81       	ldd	r25, Y+6	; 0x06
    1116:	83 30       	cpi	r24, 0x03	; 3
    1118:	91 05       	cpc	r25, r1
    111a:	09 f4       	brne	.+2      	; 0x111e <PORT_PortEnumSetPinMode+0x35c>
    111c:	3e c0       	rjmp	.+124    	; 0x119a <PORT_PortEnumSetPinMode+0x3d8>
    111e:	54 c0       	rjmp	.+168    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    1120:	a2 e3       	ldi	r26, 0x32	; 50
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e2 e3       	ldi	r30, 0x32	; 50
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <PORT_PortEnumSetPinMode+0x37c>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <PORT_PortEnumSetPinMode+0x378>
    1142:	84 2b       	or	r24, r20
    1144:	8c 93       	st	X, r24
    1146:	40 c0       	rjmp	.+128    	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    1148:	a2 e3       	ldi	r26, 0x32	; 50
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e2 e3       	ldi	r30, 0x32	; 50
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <PORT_PortEnumSetPinMode+0x3a4>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <PORT_PortEnumSetPinMode+0x3a0>
    116a:	80 95       	com	r24
    116c:	84 23       	and	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	2b c0       	rjmp	.+86     	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    1172:	a2 e3       	ldi	r26, 0x32	; 50
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e2 e3       	ldi	r30, 0x32	; 50
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <PORT_PortEnumSetPinMode+0x3ce>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <PORT_PortEnumSetPinMode+0x3ca>
    1194:	84 2b       	or	r24, r20
    1196:	8c 93       	st	X, r24
    1198:	17 c0       	rjmp	.+46     	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    119a:	a2 e3       	ldi	r26, 0x32	; 50
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e2 e3       	ldi	r30, 0x32	; 50
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <PORT_PortEnumSetPinMode+0x3f6>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <PORT_PortEnumSetPinMode+0x3f2>
    11bc:	80 95       	com	r24
    11be:	84 23       	and	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <PORT_PortEnumSetPinMode+0x406>
			break;
		}
	}
	else
	{
		local_PortEnumErrorState = PORT_MODE_NOK;
    11c4:	83 e0       	ldi	r24, 0x03	; 3
    11c6:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_PortEnumErrorState;
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ca:	2e 96       	adiw	r28, 0x0e	; 14
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <DIO_DioEnumWriteChannel>:
#include "../Include/DIO_interface.h"
#include "../Include/DIO_private.h"
#include "../Include/DIO_config.h"

DioEnum DIO_DioEnumWriteChannel(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Level)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	2e 97       	sbiw	r28, 0x0e	; 14
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	8a 83       	std	Y+2, r24	; 0x02
    11f2:	6b 83       	std	Y+3, r22	; 0x03
    11f4:	4c 83       	std	Y+4, r20	; 0x04
	DioEnum local_DioEnumErrorState = DIO_WRITE_OK;
    11f6:	19 82       	std	Y+1, r1	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7))
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	84 30       	cpi	r24, 0x04	; 4
    11fc:	08 f0       	brcs	.+2      	; 0x1200 <DIO_DioEnumWriteChannel+0x24>
    11fe:	05 c1       	rjmp	.+522    	; 0x140a <DIO_DioEnumWriteChannel+0x22e>
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	88 30       	cpi	r24, 0x08	; 8
    1204:	08 f0       	brcs	.+2      	; 0x1208 <DIO_DioEnumWriteChannel+0x2c>
    1206:	01 c1       	rjmp	.+514    	; 0x140a <DIO_DioEnumWriteChannel+0x22e>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	3e 87       	std	Y+14, r19	; 0x0e
    1210:	2d 87       	std	Y+13, r18	; 0x0d
    1212:	8d 85       	ldd	r24, Y+13	; 0x0d
    1214:	9e 85       	ldd	r25, Y+14	; 0x0e
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	91 05       	cpc	r25, r1
    121a:	09 f4       	brne	.+2      	; 0x121e <DIO_DioEnumWriteChannel+0x42>
    121c:	4f c0       	rjmp	.+158    	; 0x12bc <DIO_DioEnumWriteChannel+0xe0>
    121e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1220:	3e 85       	ldd	r19, Y+14	; 0x0e
    1222:	22 30       	cpi	r18, 0x02	; 2
    1224:	31 05       	cpc	r19, r1
    1226:	2c f4       	brge	.+10     	; 0x1232 <DIO_DioEnumWriteChannel+0x56>
    1228:	8d 85       	ldd	r24, Y+13	; 0x0d
    122a:	9e 85       	ldd	r25, Y+14	; 0x0e
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	71 f0       	breq	.+28     	; 0x124c <DIO_DioEnumWriteChannel+0x70>
    1230:	ee c0       	rjmp	.+476    	; 0x140e <DIO_DioEnumWriteChannel+0x232>
    1232:	2d 85       	ldd	r18, Y+13	; 0x0d
    1234:	3e 85       	ldd	r19, Y+14	; 0x0e
    1236:	22 30       	cpi	r18, 0x02	; 2
    1238:	31 05       	cpc	r19, r1
    123a:	09 f4       	brne	.+2      	; 0x123e <DIO_DioEnumWriteChannel+0x62>
    123c:	77 c0       	rjmp	.+238    	; 0x132c <DIO_DioEnumWriteChannel+0x150>
    123e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1240:	9e 85       	ldd	r25, Y+14	; 0x0e
    1242:	83 30       	cpi	r24, 0x03	; 3
    1244:	91 05       	cpc	r25, r1
    1246:	09 f4       	brne	.+2      	; 0x124a <DIO_DioEnumWriteChannel+0x6e>
    1248:	a9 c0       	rjmp	.+338    	; 0x139c <DIO_DioEnumWriteChannel+0x1c0>
    124a:	e1 c0       	rjmp	.+450    	; 0x140e <DIO_DioEnumWriteChannel+0x232>
		{
			case DIO_u8_PORTA:  // PORTA
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    124c:	8c 81       	ldd	r24, Y+4	; 0x04
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	3c 87       	std	Y+12, r19	; 0x0c
    1254:	2b 87       	std	Y+11, r18	; 0x0b
    1256:	8b 85       	ldd	r24, Y+11	; 0x0b
    1258:	9c 85       	ldd	r25, Y+12	; 0x0c
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	d1 f0       	breq	.+52     	; 0x1292 <DIO_DioEnumWriteChannel+0xb6>
    125e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1260:	3c 85       	ldd	r19, Y+12	; 0x0c
    1262:	21 30       	cpi	r18, 0x01	; 1
    1264:	31 05       	cpc	r19, r1
    1266:	09 f0       	breq	.+2      	; 0x126a <DIO_DioEnumWriteChannel+0x8e>
    1268:	d2 c0       	rjmp	.+420    	; 0x140e <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,copy_u8PinId);     break;
    126a:	ab e3       	ldi	r26, 0x3B	; 59
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	eb e3       	ldi	r30, 0x3B	; 59
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_DioEnumWriteChannel+0xac>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_DioEnumWriteChannel+0xa8>
    128c:	84 2b       	or	r24, r20
    128e:	8c 93       	st	X, r24
    1290:	be c0       	rjmp	.+380    	; 0x140e <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,copy_u8PinId);     break;
    1292:	ab e3       	ldi	r26, 0x3B	; 59
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	eb e3       	ldi	r30, 0x3B	; 59
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_DioEnumWriteChannel+0xd4>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <DIO_DioEnumWriteChannel+0xd0>
    12b4:	80 95       	com	r24
    12b6:	84 23       	and	r24, r20
    12b8:	8c 93       	st	X, r24
    12ba:	a9 c0       	rjmp	.+338    	; 0x140e <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTB:  // PORTB
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    12bc:	8c 81       	ldd	r24, Y+4	; 0x04
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	3a 87       	std	Y+10, r19	; 0x0a
    12c4:	29 87       	std	Y+9, r18	; 0x09
    12c6:	89 85       	ldd	r24, Y+9	; 0x09
    12c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ca:	00 97       	sbiw	r24, 0x00	; 0
    12cc:	d1 f0       	breq	.+52     	; 0x1302 <DIO_DioEnumWriteChannel+0x126>
    12ce:	29 85       	ldd	r18, Y+9	; 0x09
    12d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    12d2:	21 30       	cpi	r18, 0x01	; 1
    12d4:	31 05       	cpc	r19, r1
    12d6:	09 f0       	breq	.+2      	; 0x12da <DIO_DioEnumWriteChannel+0xfe>
    12d8:	9a c0       	rjmp	.+308    	; 0x140e <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,copy_u8PinId);     break;
    12da:	a8 e3       	ldi	r26, 0x38	; 56
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e8 e3       	ldi	r30, 0x38	; 56
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	48 2f       	mov	r20, r24
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	02 2e       	mov	r0, r18
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <DIO_DioEnumWriteChannel+0x11c>
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	0a 94       	dec	r0
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <DIO_DioEnumWriteChannel+0x118>
    12fc:	84 2b       	or	r24, r20
    12fe:	8c 93       	st	X, r24
    1300:	86 c0       	rjmp	.+268    	; 0x140e <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,copy_u8PinId);     break;
    1302:	a8 e3       	ldi	r26, 0x38	; 56
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e8 e3       	ldi	r30, 0x38	; 56
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	48 2f       	mov	r20, r24
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 2e       	mov	r0, r18
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <DIO_DioEnumWriteChannel+0x144>
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	0a 94       	dec	r0
    1322:	e2 f7       	brpl	.-8      	; 0x131c <DIO_DioEnumWriteChannel+0x140>
    1324:	80 95       	com	r24
    1326:	84 23       	and	r24, r20
    1328:	8c 93       	st	X, r24
    132a:	71 c0       	rjmp	.+226    	; 0x140e <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTC:  // PORTC
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    132c:	8c 81       	ldd	r24, Y+4	; 0x04
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	38 87       	std	Y+8, r19	; 0x08
    1334:	2f 83       	std	Y+7, r18	; 0x07
    1336:	8f 81       	ldd	r24, Y+7	; 0x07
    1338:	98 85       	ldd	r25, Y+8	; 0x08
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	d1 f0       	breq	.+52     	; 0x1372 <DIO_DioEnumWriteChannel+0x196>
    133e:	2f 81       	ldd	r18, Y+7	; 0x07
    1340:	38 85       	ldd	r19, Y+8	; 0x08
    1342:	21 30       	cpi	r18, 0x01	; 1
    1344:	31 05       	cpc	r19, r1
    1346:	09 f0       	breq	.+2      	; 0x134a <DIO_DioEnumWriteChannel+0x16e>
    1348:	62 c0       	rjmp	.+196    	; 0x140e <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,copy_u8PinId);     break;
    134a:	a5 e3       	ldi	r26, 0x35	; 53
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e5 e3       	ldi	r30, 0x35	; 53
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_DioEnumWriteChannel+0x18c>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_DioEnumWriteChannel+0x188>
    136c:	84 2b       	or	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	4e c0       	rjmp	.+156    	; 0x140e <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,copy_u8PinId);     break;
    1372:	a5 e3       	ldi	r26, 0x35	; 53
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e5 e3       	ldi	r30, 0x35	; 53
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_DioEnumWriteChannel+0x1b4>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_DioEnumWriteChannel+0x1b0>
    1394:	80 95       	com	r24
    1396:	84 23       	and	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	39 c0       	rjmp	.+114    	; 0x140e <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTD:  // PORTD
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	3e 83       	std	Y+6, r19	; 0x06
    13a4:	2d 83       	std	Y+5, r18	; 0x05
    13a6:	8d 81       	ldd	r24, Y+5	; 0x05
    13a8:	9e 81       	ldd	r25, Y+6	; 0x06
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	c9 f0       	breq	.+50     	; 0x13e0 <DIO_DioEnumWriteChannel+0x204>
    13ae:	2d 81       	ldd	r18, Y+5	; 0x05
    13b0:	3e 81       	ldd	r19, Y+6	; 0x06
    13b2:	21 30       	cpi	r18, 0x01	; 1
    13b4:	31 05       	cpc	r19, r1
    13b6:	59 f5       	brne	.+86     	; 0x140e <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,copy_u8PinId);     break;
    13b8:	a2 e3       	ldi	r26, 0x32	; 50
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e2 e3       	ldi	r30, 0x32	; 50
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_DioEnumWriteChannel+0x1fa>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <DIO_DioEnumWriteChannel+0x1f6>
    13da:	84 2b       	or	r24, r20
    13dc:	8c 93       	st	X, r24
    13de:	17 c0       	rjmp	.+46     	; 0x140e <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,copy_u8PinId);     break;
    13e0:	a2 e3       	ldi	r26, 0x32	; 50
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e2 e3       	ldi	r30, 0x32	; 50
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_DioEnumWriteChannel+0x222>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_DioEnumWriteChannel+0x21e>
    1402:	80 95       	com	r24
    1404:	84 23       	and	r24, r20
    1406:	8c 93       	st	X, r24
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_DioEnumWriteChannel+0x232>
			break;
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_WRITE_NOK;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    140e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1410:	2e 96       	adiw	r28, 0x0e	; 14
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <DIO_DioEnumReadChannel>:

DioEnum DIO_DioEnumReadChannel(u8 copy_u8PortId,u8 copy_u8PinId,pu8 copy_pu8ReadChannel)
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	28 97       	sbiw	r28, 0x08	; 8
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	8b 83       	std	Y+3, r24	; 0x03
    1438:	6c 83       	std	Y+4, r22	; 0x04
    143a:	5e 83       	std	Y+6, r21	; 0x06
    143c:	4d 83       	std	Y+5, r20	; 0x05
	DioEnum local_DioEnumErrorState = DIO_READ_OK;
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	8a 83       	std	Y+2, r24	; 0x02
	/* local variable to store in value of the pin */
	u8 local_u8GetValue;
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7) && (copy_pu8ReadChannel != NULL))
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	84 30       	cpi	r24, 0x04	; 4
    1446:	08 f0       	brcs	.+2      	; 0x144a <DIO_DioEnumReadChannel+0x28>
    1448:	9f c0       	rjmp	.+318    	; 0x1588 <DIO_DioEnumReadChannel+0x166>
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	88 30       	cpi	r24, 0x08	; 8
    144e:	08 f0       	brcs	.+2      	; 0x1452 <DIO_DioEnumReadChannel+0x30>
    1450:	9b c0       	rjmp	.+310    	; 0x1588 <DIO_DioEnumReadChannel+0x166>
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	09 f4       	brne	.+2      	; 0x145c <DIO_DioEnumReadChannel+0x3a>
    145a:	96 c0       	rjmp	.+300    	; 0x1588 <DIO_DioEnumReadChannel+0x166>
	{
		/* step1: check about which port you want to read */
		switch(copy_u8PortId)
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	38 87       	std	Y+8, r19	; 0x08
    1464:	2f 83       	std	Y+7, r18	; 0x07
    1466:	4f 81       	ldd	r20, Y+7	; 0x07
    1468:	58 85       	ldd	r21, Y+8	; 0x08
    146a:	41 30       	cpi	r20, 0x01	; 1
    146c:	51 05       	cpc	r21, r1
    146e:	a9 f1       	breq	.+106    	; 0x14da <DIO_DioEnumReadChannel+0xb8>
    1470:	8f 81       	ldd	r24, Y+7	; 0x07
    1472:	98 85       	ldd	r25, Y+8	; 0x08
    1474:	82 30       	cpi	r24, 0x02	; 2
    1476:	91 05       	cpc	r25, r1
    1478:	34 f4       	brge	.+12     	; 0x1486 <DIO_DioEnumReadChannel+0x64>
    147a:	2f 81       	ldd	r18, Y+7	; 0x07
    147c:	38 85       	ldd	r19, Y+8	; 0x08
    147e:	21 15       	cp	r18, r1
    1480:	31 05       	cpc	r19, r1
    1482:	71 f0       	breq	.+28     	; 0x14a0 <DIO_DioEnumReadChannel+0x7e>
    1484:	83 c0       	rjmp	.+262    	; 0x158c <DIO_DioEnumReadChannel+0x16a>
    1486:	4f 81       	ldd	r20, Y+7	; 0x07
    1488:	58 85       	ldd	r21, Y+8	; 0x08
    148a:	42 30       	cpi	r20, 0x02	; 2
    148c:	51 05       	cpc	r21, r1
    148e:	09 f4       	brne	.+2      	; 0x1492 <DIO_DioEnumReadChannel+0x70>
    1490:	41 c0       	rjmp	.+130    	; 0x1514 <DIO_DioEnumReadChannel+0xf2>
    1492:	8f 81       	ldd	r24, Y+7	; 0x07
    1494:	98 85       	ldd	r25, Y+8	; 0x08
    1496:	83 30       	cpi	r24, 0x03	; 3
    1498:	91 05       	cpc	r25, r1
    149a:	09 f4       	brne	.+2      	; 0x149e <DIO_DioEnumReadChannel+0x7c>
    149c:	58 c0       	rjmp	.+176    	; 0x154e <DIO_DioEnumReadChannel+0x12c>
    149e:	76 c0       	rjmp	.+236    	; 0x158c <DIO_DioEnumReadChannel+0x16a>
		{
			case DIO_u8_PORTA:  // PORTA
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINA_REG,copy_u8PinId);
    14a0:	e9 e3       	ldi	r30, 0x39	; 57
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	8c 81       	ldd	r24, Y+4	; 0x04
    14ac:	88 2f       	mov	r24, r24
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	a9 01       	movw	r20, r18
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <DIO_DioEnumReadChannel+0x96>
    14b4:	55 95       	asr	r21
    14b6:	47 95       	ror	r20
    14b8:	8a 95       	dec	r24
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <DIO_DioEnumReadChannel+0x92>
    14bc:	ca 01       	movw	r24, r20
    14be:	81 70       	andi	r24, 0x01	; 1
    14c0:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	88 23       	and	r24, r24
    14c6:	21 f4       	brne	.+8      	; 0x14d0 <DIO_DioEnumReadChannel+0xae>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    14c8:	ed 81       	ldd	r30, Y+5	; 0x05
    14ca:	fe 81       	ldd	r31, Y+6	; 0x06
    14cc:	10 82       	st	Z, r1
    14ce:	5e c0       	rjmp	.+188    	; 0x158c <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    14d0:	ed 81       	ldd	r30, Y+5	; 0x05
    14d2:	fe 81       	ldd	r31, Y+6	; 0x06
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	80 83       	st	Z, r24
    14d8:	59 c0       	rjmp	.+178    	; 0x158c <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTB:  // PORTB
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINB_REG,copy_u8PinId);
    14da:	e6 e3       	ldi	r30, 0x36	; 54
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	88 2f       	mov	r24, r24
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	a9 01       	movw	r20, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <DIO_DioEnumReadChannel+0xd0>
    14ee:	55 95       	asr	r21
    14f0:	47 95       	ror	r20
    14f2:	8a 95       	dec	r24
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <DIO_DioEnumReadChannel+0xcc>
    14f6:	ca 01       	movw	r24, r20
    14f8:	81 70       	andi	r24, 0x01	; 1
    14fa:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	88 23       	and	r24, r24
    1500:	21 f4       	brne	.+8      	; 0x150a <DIO_DioEnumReadChannel+0xe8>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    1502:	ed 81       	ldd	r30, Y+5	; 0x05
    1504:	fe 81       	ldd	r31, Y+6	; 0x06
    1506:	10 82       	st	Z, r1
    1508:	41 c0       	rjmp	.+130    	; 0x158c <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    150a:	ed 81       	ldd	r30, Y+5	; 0x05
    150c:	fe 81       	ldd	r31, Y+6	; 0x06
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	80 83       	st	Z, r24
    1512:	3c c0       	rjmp	.+120    	; 0x158c <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTC:  // PORTC
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINC_REG,copy_u8PinId);
    1514:	e3 e3       	ldi	r30, 0x33	; 51
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	88 2f       	mov	r24, r24
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	a9 01       	movw	r20, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <DIO_DioEnumReadChannel+0x10a>
    1528:	55 95       	asr	r21
    152a:	47 95       	ror	r20
    152c:	8a 95       	dec	r24
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <DIO_DioEnumReadChannel+0x106>
    1530:	ca 01       	movw	r24, r20
    1532:	81 70       	andi	r24, 0x01	; 1
    1534:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	88 23       	and	r24, r24
    153a:	21 f4       	brne	.+8      	; 0x1544 <DIO_DioEnumReadChannel+0x122>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    153c:	ed 81       	ldd	r30, Y+5	; 0x05
    153e:	fe 81       	ldd	r31, Y+6	; 0x06
    1540:	10 82       	st	Z, r1
    1542:	24 c0       	rjmp	.+72     	; 0x158c <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    1544:	ed 81       	ldd	r30, Y+5	; 0x05
    1546:	fe 81       	ldd	r31, Y+6	; 0x06
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	80 83       	st	Z, r24
    154c:	1f c0       	rjmp	.+62     	; 0x158c <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTD:  // PORTD
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PIND_REG,copy_u8PinId);
    154e:	e0 e3       	ldi	r30, 0x30	; 48
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	8c 81       	ldd	r24, Y+4	; 0x04
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a9 01       	movw	r20, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_DioEnumReadChannel+0x144>
    1562:	55 95       	asr	r21
    1564:	47 95       	ror	r20
    1566:	8a 95       	dec	r24
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_DioEnumReadChannel+0x140>
    156a:	ca 01       	movw	r24, r20
    156c:	81 70       	andi	r24, 0x01	; 1
    156e:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	88 23       	and	r24, r24
    1574:	21 f4       	brne	.+8      	; 0x157e <DIO_DioEnumReadChannel+0x15c>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    1576:	ed 81       	ldd	r30, Y+5	; 0x05
    1578:	fe 81       	ldd	r31, Y+6	; 0x06
    157a:	10 82       	st	Z, r1
    157c:	07 c0       	rjmp	.+14     	; 0x158c <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    157e:	ed 81       	ldd	r30, Y+5	; 0x05
    1580:	fe 81       	ldd	r31, Y+6	; 0x06
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	80 83       	st	Z, r24
    1586:	02 c0       	rjmp	.+4      	; 0x158c <DIO_DioEnumReadChannel+0x16a>
			break;
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_READ_NOK;
    1588:	83 e0       	ldi	r24, 0x03	; 3
    158a:	8a 83       	std	Y+2, r24	; 0x02
	}
	return local_DioEnumErrorState;
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    158e:	28 96       	adiw	r28, 0x08	; 8
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <DIO_DioEnumWritePort>:

DioEnum DIO_DioEnumWritePort(u8 copy_u8PortId,u8 copy_u8Value)
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <DIO_DioEnumWritePort+0x6>
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <DIO_DioEnumWritePort+0x8>
    15a8:	0f 92       	push	r0
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	8a 83       	std	Y+2, r24	; 0x02
    15b0:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_WPORT_OK;
    15b2:	84 e0       	ldi	r24, 0x04	; 4
    15b4:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if(copy_u8PortId <= DIO_u8_PORTD)
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	84 30       	cpi	r24, 0x04	; 4
    15ba:	98 f5       	brcc	.+102    	; 0x1622 <DIO_DioEnumWritePort+0x82>
	{
		/* check about which port you want to write into the value */
		switch(copy_u8PortId)
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	3d 83       	std	Y+5, r19	; 0x05
    15c4:	2c 83       	std	Y+4, r18	; 0x04
    15c6:	8c 81       	ldd	r24, Y+4	; 0x04
    15c8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ca:	81 30       	cpi	r24, 0x01	; 1
    15cc:	91 05       	cpc	r25, r1
    15ce:	d1 f0       	breq	.+52     	; 0x1604 <DIO_DioEnumWritePort+0x64>
    15d0:	2c 81       	ldd	r18, Y+4	; 0x04
    15d2:	3d 81       	ldd	r19, Y+5	; 0x05
    15d4:	22 30       	cpi	r18, 0x02	; 2
    15d6:	31 05       	cpc	r19, r1
    15d8:	2c f4       	brge	.+10     	; 0x15e4 <DIO_DioEnumWritePort+0x44>
    15da:	8c 81       	ldd	r24, Y+4	; 0x04
    15dc:	9d 81       	ldd	r25, Y+5	; 0x05
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	61 f0       	breq	.+24     	; 0x15fa <DIO_DioEnumWritePort+0x5a>
    15e2:	21 c0       	rjmp	.+66     	; 0x1626 <DIO_DioEnumWritePort+0x86>
    15e4:	2c 81       	ldd	r18, Y+4	; 0x04
    15e6:	3d 81       	ldd	r19, Y+5	; 0x05
    15e8:	22 30       	cpi	r18, 0x02	; 2
    15ea:	31 05       	cpc	r19, r1
    15ec:	81 f0       	breq	.+32     	; 0x160e <DIO_DioEnumWritePort+0x6e>
    15ee:	8c 81       	ldd	r24, Y+4	; 0x04
    15f0:	9d 81       	ldd	r25, Y+5	; 0x05
    15f2:	83 30       	cpi	r24, 0x03	; 3
    15f4:	91 05       	cpc	r25, r1
    15f6:	81 f0       	breq	.+32     	; 0x1618 <DIO_DioEnumWritePort+0x78>
    15f8:	16 c0       	rjmp	.+44     	; 0x1626 <DIO_DioEnumWritePort+0x86>
		{
			case DIO_u8_PORTA: DIO_u8_PORTA_REG = copy_u8Value;      break;
    15fa:	eb e3       	ldi	r30, 0x3B	; 59
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	80 83       	st	Z, r24
    1602:	11 c0       	rjmp	.+34     	; 0x1626 <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTB: DIO_u8_PORTB_REG = copy_u8Value;      break;
    1604:	e8 e3       	ldi	r30, 0x38	; 56
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	80 83       	st	Z, r24
    160c:	0c c0       	rjmp	.+24     	; 0x1626 <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTC: DIO_u8_PORTC_REG = copy_u8Value;      break;
    160e:	e5 e3       	ldi	r30, 0x35	; 53
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	80 83       	st	Z, r24
    1616:	07 c0       	rjmp	.+14     	; 0x1626 <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTD: DIO_u8_PORTD_REG = copy_u8Value;      break;
    1618:	e2 e3       	ldi	r30, 0x32	; 50
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	80 83       	st	Z, r24
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <DIO_DioEnumWritePort+0x86>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_WPORT_NOK;
    1622:	85 e0       	ldi	r24, 0x05	; 5
    1624:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    1626:	89 81       	ldd	r24, Y+1	; 0x01
}
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <DIO_DioEnumReadPort>:

DioEnum DIO_DioEnumReadPort(u8 copy_u8PortId,pu8 copy_pu8ReadPort)
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	00 d0       	rcall	.+0      	; 0x163e <DIO_DioEnumReadPort+0x6>
    163e:	00 d0       	rcall	.+0      	; 0x1640 <DIO_DioEnumReadPort+0x8>
    1640:	00 d0       	rcall	.+0      	; 0x1642 <DIO_DioEnumReadPort+0xa>
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	8a 83       	std	Y+2, r24	; 0x02
    1648:	7c 83       	std	Y+4, r23	; 0x04
    164a:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_RPORT_OK;
    164c:	86 e0       	ldi	r24, 0x06	; 6
    164e:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_pu8ReadPort != NULL))
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	84 30       	cpi	r24, 0x04	; 4
    1654:	08 f0       	brcs	.+2      	; 0x1658 <DIO_DioEnumReadPort+0x20>
    1656:	3f c0       	rjmp	.+126    	; 0x16d6 <DIO_DioEnumReadPort+0x9e>
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	9c 81       	ldd	r25, Y+4	; 0x04
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	d9 f1       	breq	.+118    	; 0x16d6 <DIO_DioEnumReadPort+0x9e>
	{
		/* check about which port you want to read this value */
		switch(copy_u8PortId)
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	3e 83       	std	Y+6, r19	; 0x06
    1668:	2d 83       	std	Y+5, r18	; 0x05
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	9e 81       	ldd	r25, Y+6	; 0x06
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	91 05       	cpc	r25, r1
    1672:	e1 f0       	breq	.+56     	; 0x16ac <DIO_DioEnumReadPort+0x74>
    1674:	2d 81       	ldd	r18, Y+5	; 0x05
    1676:	3e 81       	ldd	r19, Y+6	; 0x06
    1678:	22 30       	cpi	r18, 0x02	; 2
    167a:	31 05       	cpc	r19, r1
    167c:	2c f4       	brge	.+10     	; 0x1688 <DIO_DioEnumReadPort+0x50>
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	9e 81       	ldd	r25, Y+6	; 0x06
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	61 f0       	breq	.+24     	; 0x169e <DIO_DioEnumReadPort+0x66>
    1686:	29 c0       	rjmp	.+82     	; 0x16da <DIO_DioEnumReadPort+0xa2>
    1688:	2d 81       	ldd	r18, Y+5	; 0x05
    168a:	3e 81       	ldd	r19, Y+6	; 0x06
    168c:	22 30       	cpi	r18, 0x02	; 2
    168e:	31 05       	cpc	r19, r1
    1690:	a1 f0       	breq	.+40     	; 0x16ba <DIO_DioEnumReadPort+0x82>
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	9e 81       	ldd	r25, Y+6	; 0x06
    1696:	83 30       	cpi	r24, 0x03	; 3
    1698:	91 05       	cpc	r25, r1
    169a:	b1 f0       	breq	.+44     	; 0x16c8 <DIO_DioEnumReadPort+0x90>
    169c:	1e c0       	rjmp	.+60     	; 0x16da <DIO_DioEnumReadPort+0xa2>
		{
			case DIO_u8_PORTA: *copy_pu8ReadPort = DIO_u8_PINA_REG;      break;
    169e:	e9 e3       	ldi	r30, 0x39	; 57
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	eb 81       	ldd	r30, Y+3	; 0x03
    16a6:	fc 81       	ldd	r31, Y+4	; 0x04
    16a8:	80 83       	st	Z, r24
    16aa:	17 c0       	rjmp	.+46     	; 0x16da <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTB: *copy_pu8ReadPort = DIO_u8_PINB_REG;      break;
    16ac:	e6 e3       	ldi	r30, 0x36	; 54
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	eb 81       	ldd	r30, Y+3	; 0x03
    16b4:	fc 81       	ldd	r31, Y+4	; 0x04
    16b6:	80 83       	st	Z, r24
    16b8:	10 c0       	rjmp	.+32     	; 0x16da <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTC: *copy_pu8ReadPort = DIO_u8_PINC_REG;      break;
    16ba:	e3 e3       	ldi	r30, 0x33	; 51
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	eb 81       	ldd	r30, Y+3	; 0x03
    16c2:	fc 81       	ldd	r31, Y+4	; 0x04
    16c4:	80 83       	st	Z, r24
    16c6:	09 c0       	rjmp	.+18     	; 0x16da <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTD: *copy_pu8ReadPort = DIO_u8_PIND_REG;      break;
    16c8:	e0 e3       	ldi	r30, 0x30	; 48
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	eb 81       	ldd	r30, Y+3	; 0x03
    16d0:	fc 81       	ldd	r31, Y+4	; 0x04
    16d2:	80 83       	st	Z, r24
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <DIO_DioEnumReadPort+0xa2>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_RPORT_NOK;
    16d6:	87 e0       	ldi	r24, 0x07	; 7
    16d8:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    16da:	89 81       	ldd	r24, Y+1	; 0x01
}
    16dc:	26 96       	adiw	r28, 0x06	; 6
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <DIO_DioEnumFlibChannel>:

DioEnum DIO_DioEnumFlibChannel(u8 copy_u8PortId,u8 copy_u8PinId)
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <DIO_DioEnumFlibChannel+0x6>
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <DIO_DioEnumFlibChannel+0x8>
    16f6:	0f 92       	push	r0
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	8a 83       	std	Y+2, r24	; 0x02
    16fe:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_FLIB_OK;
    1700:	88 e0       	ldi	r24, 0x08	; 8
    1702:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7))
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	84 30       	cpi	r24, 0x04	; 4
    1708:	08 f0       	brcs	.+2      	; 0x170c <DIO_DioEnumFlibChannel+0x1e>
    170a:	73 c0       	rjmp	.+230    	; 0x17f2 <DIO_DioEnumFlibChannel+0x104>
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	88 30       	cpi	r24, 0x08	; 8
    1710:	08 f0       	brcs	.+2      	; 0x1714 <DIO_DioEnumFlibChannel+0x26>
    1712:	6f c0       	rjmp	.+222    	; 0x17f2 <DIO_DioEnumFlibChannel+0x104>
	{
		/* check about which port you want to toggle your pins */
		switch(copy_u8PortId)
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	3d 83       	std	Y+5, r19	; 0x05
    171c:	2c 83       	std	Y+4, r18	; 0x04
    171e:	8c 81       	ldd	r24, Y+4	; 0x04
    1720:	9d 81       	ldd	r25, Y+5	; 0x05
    1722:	81 30       	cpi	r24, 0x01	; 1
    1724:	91 05       	cpc	r25, r1
    1726:	49 f1       	breq	.+82     	; 0x177a <DIO_DioEnumFlibChannel+0x8c>
    1728:	2c 81       	ldd	r18, Y+4	; 0x04
    172a:	3d 81       	ldd	r19, Y+5	; 0x05
    172c:	22 30       	cpi	r18, 0x02	; 2
    172e:	31 05       	cpc	r19, r1
    1730:	2c f4       	brge	.+10     	; 0x173c <DIO_DioEnumFlibChannel+0x4e>
    1732:	8c 81       	ldd	r24, Y+4	; 0x04
    1734:	9d 81       	ldd	r25, Y+5	; 0x05
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	61 f0       	breq	.+24     	; 0x1752 <DIO_DioEnumFlibChannel+0x64>
    173a:	5d c0       	rjmp	.+186    	; 0x17f6 <DIO_DioEnumFlibChannel+0x108>
    173c:	2c 81       	ldd	r18, Y+4	; 0x04
    173e:	3d 81       	ldd	r19, Y+5	; 0x05
    1740:	22 30       	cpi	r18, 0x02	; 2
    1742:	31 05       	cpc	r19, r1
    1744:	71 f1       	breq	.+92     	; 0x17a2 <DIO_DioEnumFlibChannel+0xb4>
    1746:	8c 81       	ldd	r24, Y+4	; 0x04
    1748:	9d 81       	ldd	r25, Y+5	; 0x05
    174a:	83 30       	cpi	r24, 0x03	; 3
    174c:	91 05       	cpc	r25, r1
    174e:	e9 f1       	breq	.+122    	; 0x17ca <DIO_DioEnumFlibChannel+0xdc>
    1750:	52 c0       	rjmp	.+164    	; 0x17f6 <DIO_DioEnumFlibChannel+0x108>
		{
			case DIO_u8_PORTA: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    1752:	ab e3       	ldi	r26, 0x3B	; 59
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	eb e3       	ldi	r30, 0x3B	; 59
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 2e       	mov	r0, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <DIO_DioEnumFlibChannel+0x82>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <DIO_DioEnumFlibChannel+0x7e>
    1774:	84 27       	eor	r24, r20
    1776:	8c 93       	st	X, r24
    1778:	3e c0       	rjmp	.+124    	; 0x17f6 <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTB: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    177a:	ab e3       	ldi	r26, 0x3B	; 59
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	eb e3       	ldi	r30, 0x3B	; 59
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 2e       	mov	r0, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <DIO_DioEnumFlibChannel+0xaa>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	0a 94       	dec	r0
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <DIO_DioEnumFlibChannel+0xa6>
    179c:	84 27       	eor	r24, r20
    179e:	8c 93       	st	X, r24
    17a0:	2a c0       	rjmp	.+84     	; 0x17f6 <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTC: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    17a2:	ab e3       	ldi	r26, 0x3B	; 59
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	eb e3       	ldi	r30, 0x3B	; 59
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <DIO_DioEnumFlibChannel+0xd2>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <DIO_DioEnumFlibChannel+0xce>
    17c4:	84 27       	eor	r24, r20
    17c6:	8c 93       	st	X, r24
    17c8:	16 c0       	rjmp	.+44     	; 0x17f6 <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTD: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    17ca:	ab e3       	ldi	r26, 0x3B	; 59
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	eb e3       	ldi	r30, 0x3B	; 59
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	48 2f       	mov	r20, r24
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <DIO_DioEnumFlibChannel+0xfa>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <DIO_DioEnumFlibChannel+0xf6>
    17ec:	84 27       	eor	r24, r20
    17ee:	8c 93       	st	X, r24
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <DIO_DioEnumFlibChannel+0x108>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_FLIB_NOK;
    17f2:	89 e0       	ldi	r24, 0x09	; 9
    17f4:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <LCD_voidInit>:
#include "../Include/LCD_config.h"
#define F_CPU    8000000UL
#include <util/delay.h>

void LCD_voidInit(void)
{
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    1810:	e8 97       	sbiw	r28, 0x38	; 56
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	de bf       	out	0x3e, r29	; 62
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	cd bf       	out	0x3d, r28	; 61
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	a8 e4       	ldi	r26, 0x48	; 72
    1822:	b2 e4       	ldi	r27, 0x42	; 66
    1824:	8d ab       	std	Y+53, r24	; 0x35
    1826:	9e ab       	std	Y+54, r25	; 0x36
    1828:	af ab       	std	Y+55, r26	; 0x37
    182a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182c:	6d a9       	ldd	r22, Y+53	; 0x35
    182e:	7e a9       	ldd	r23, Y+54	; 0x36
    1830:	8f a9       	ldd	r24, Y+55	; 0x37
    1832:	98 ad       	ldd	r25, Y+56	; 0x38
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	4a ef       	ldi	r20, 0xFA	; 250
    183a:	54 e4       	ldi	r21, 0x44	; 68
    183c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	89 ab       	std	Y+49, r24	; 0x31
    1846:	9a ab       	std	Y+50, r25	; 0x32
    1848:	ab ab       	std	Y+51, r26	; 0x33
    184a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    184c:	69 a9       	ldd	r22, Y+49	; 0x31
    184e:	7a a9       	ldd	r23, Y+50	; 0x32
    1850:	8b a9       	ldd	r24, Y+51	; 0x33
    1852:	9c a9       	ldd	r25, Y+52	; 0x34
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	40 e8       	ldi	r20, 0x80	; 128
    185a:	5f e3       	ldi	r21, 0x3F	; 63
    185c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1860:	88 23       	and	r24, r24
    1862:	2c f4       	brge	.+10     	; 0x186e <LCD_voidInit+0x66>
		__ticks = 1;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	98 ab       	std	Y+48, r25	; 0x30
    186a:	8f a7       	std	Y+47, r24	; 0x2f
    186c:	3f c0       	rjmp	.+126    	; 0x18ec <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    186e:	69 a9       	ldd	r22, Y+49	; 0x31
    1870:	7a a9       	ldd	r23, Y+50	; 0x32
    1872:	8b a9       	ldd	r24, Y+51	; 0x33
    1874:	9c a9       	ldd	r25, Y+52	; 0x34
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	3f ef       	ldi	r19, 0xFF	; 255
    187a:	4f e7       	ldi	r20, 0x7F	; 127
    187c:	57 e4       	ldi	r21, 0x47	; 71
    187e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1882:	18 16       	cp	r1, r24
    1884:	4c f5       	brge	.+82     	; 0x18d8 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1886:	6d a9       	ldd	r22, Y+53	; 0x35
    1888:	7e a9       	ldd	r23, Y+54	; 0x36
    188a:	8f a9       	ldd	r24, Y+55	; 0x37
    188c:	98 ad       	ldd	r25, Y+56	; 0x38
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e2       	ldi	r20, 0x20	; 32
    1894:	51 e4       	ldi	r21, 0x41	; 65
    1896:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	bc 01       	movw	r22, r24
    18a0:	cd 01       	movw	r24, r26
    18a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	98 ab       	std	Y+48, r25	; 0x30
    18ac:	8f a7       	std	Y+47, r24	; 0x2f
    18ae:	0f c0       	rjmp	.+30     	; 0x18ce <LCD_voidInit+0xc6>
    18b0:	88 ec       	ldi	r24, 0xC8	; 200
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	9e a7       	std	Y+46, r25	; 0x2e
    18b6:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    18ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <LCD_voidInit+0xb4>
    18c0:	9e a7       	std	Y+46, r25	; 0x2e
    18c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18c6:	98 a9       	ldd	r25, Y+48	; 0x30
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	98 ab       	std	Y+48, r25	; 0x30
    18cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    18d0:	98 a9       	ldd	r25, Y+48	; 0x30
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	69 f7       	brne	.-38     	; 0x18b0 <LCD_voidInit+0xa8>
    18d6:	14 c0       	rjmp	.+40     	; 0x1900 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d8:	69 a9       	ldd	r22, Y+49	; 0x31
    18da:	7a a9       	ldd	r23, Y+50	; 0x32
    18dc:	8b a9       	ldd	r24, Y+51	; 0x33
    18de:	9c a9       	ldd	r25, Y+52	; 0x34
    18e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	98 ab       	std	Y+48, r25	; 0x30
    18ea:	8f a7       	std	Y+47, r24	; 0x2f
    18ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ee:	98 a9       	ldd	r25, Y+48	; 0x30
    18f0:	9c a7       	std	Y+44, r25	; 0x2c
    18f2:	8b a7       	std	Y+43, r24	; 0x2b
    18f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    18f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	f1 f7       	brne	.-4      	; 0x18f8 <LCD_voidInit+0xf0>
    18fc:	9c a7       	std	Y+44, r25	; 0x2c
    18fe:	8b a7       	std	Y+43, r24	; 0x2b
    /* delay more than 30 msec */
    _delay_ms(50);
    LCD_voidSendCommand(LCD_u8_CURSOR_HOME);
    1900:	82 e0       	ldi	r24, 0x02	; 2
    1902:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <LCD_voidSendCommand>
    #if   LCD_u8_MODE == LCD_u8_MODE_8_BIT
        /* function set => call send_command func */
        LCD_voidSendCommand(LCD_u8_8B_Mode);
    #elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
        /* function set => call send_command func */
        LCD_voidSendCommand(LCD_u8_4B_Mode);
    1906:	88 e2       	ldi	r24, 0x28	; 40
    1908:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <LCD_voidSendCommand>
    #endif 
    /* display clear => call send_command func */
    LCD_voidSendCommand(LCD_u8_DISPLAY_CLEAR);
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <LCD_voidSendCommand>
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	a0 e8       	ldi	r26, 0x80	; 128
    1918:	b0 e4       	ldi	r27, 0x40	; 64
    191a:	8f a3       	std	Y+39, r24	; 0x27
    191c:	98 a7       	std	Y+40, r25	; 0x28
    191e:	a9 a7       	std	Y+41, r26	; 0x29
    1920:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1922:	6f a1       	ldd	r22, Y+39	; 0x27
    1924:	78 a5       	ldd	r23, Y+40	; 0x28
    1926:	89 a5       	ldd	r24, Y+41	; 0x29
    1928:	9a a5       	ldd	r25, Y+42	; 0x2a
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	4a ef       	ldi	r20, 0xFA	; 250
    1930:	54 e4       	ldi	r21, 0x44	; 68
    1932:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	8b a3       	std	Y+35, r24	; 0x23
    193c:	9c a3       	std	Y+36, r25	; 0x24
    193e:	ad a3       	std	Y+37, r26	; 0x25
    1940:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1942:	6b a1       	ldd	r22, Y+35	; 0x23
    1944:	7c a1       	ldd	r23, Y+36	; 0x24
    1946:	8d a1       	ldd	r24, Y+37	; 0x25
    1948:	9e a1       	ldd	r25, Y+38	; 0x26
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e8       	ldi	r20, 0x80	; 128
    1950:	5f e3       	ldi	r21, 0x3F	; 63
    1952:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1956:	88 23       	and	r24, r24
    1958:	2c f4       	brge	.+10     	; 0x1964 <LCD_voidInit+0x15c>
		__ticks = 1;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	9a a3       	std	Y+34, r25	; 0x22
    1960:	89 a3       	std	Y+33, r24	; 0x21
    1962:	3f c0       	rjmp	.+126    	; 0x19e2 <LCD_voidInit+0x1da>
	else if (__tmp > 65535)
    1964:	6b a1       	ldd	r22, Y+35	; 0x23
    1966:	7c a1       	ldd	r23, Y+36	; 0x24
    1968:	8d a1       	ldd	r24, Y+37	; 0x25
    196a:	9e a1       	ldd	r25, Y+38	; 0x26
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	3f ef       	ldi	r19, 0xFF	; 255
    1970:	4f e7       	ldi	r20, 0x7F	; 127
    1972:	57 e4       	ldi	r21, 0x47	; 71
    1974:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1978:	18 16       	cp	r1, r24
    197a:	4c f5       	brge	.+82     	; 0x19ce <LCD_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197c:	6f a1       	ldd	r22, Y+39	; 0x27
    197e:	78 a5       	ldd	r23, Y+40	; 0x28
    1980:	89 a5       	ldd	r24, Y+41	; 0x29
    1982:	9a a5       	ldd	r25, Y+42	; 0x2a
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e2       	ldi	r20, 0x20	; 32
    198a:	51 e4       	ldi	r21, 0x41	; 65
    198c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	9a a3       	std	Y+34, r25	; 0x22
    19a2:	89 a3       	std	Y+33, r24	; 0x21
    19a4:	0f c0       	rjmp	.+30     	; 0x19c4 <LCD_voidInit+0x1bc>
    19a6:	88 ec       	ldi	r24, 0xC8	; 200
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	98 a3       	std	Y+32, r25	; 0x20
    19ac:	8f 8f       	std	Y+31, r24	; 0x1f
    19ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19b0:	98 a1       	ldd	r25, Y+32	; 0x20
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <LCD_voidInit+0x1aa>
    19b6:	98 a3       	std	Y+32, r25	; 0x20
    19b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ba:	89 a1       	ldd	r24, Y+33	; 0x21
    19bc:	9a a1       	ldd	r25, Y+34	; 0x22
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	9a a3       	std	Y+34, r25	; 0x22
    19c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c4:	89 a1       	ldd	r24, Y+33	; 0x21
    19c6:	9a a1       	ldd	r25, Y+34	; 0x22
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	69 f7       	brne	.-38     	; 0x19a6 <LCD_voidInit+0x19e>
    19cc:	14 c0       	rjmp	.+40     	; 0x19f6 <LCD_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ce:	6b a1       	ldd	r22, Y+35	; 0x23
    19d0:	7c a1       	ldd	r23, Y+36	; 0x24
    19d2:	8d a1       	ldd	r24, Y+37	; 0x25
    19d4:	9e a1       	ldd	r25, Y+38	; 0x26
    19d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9a a3       	std	Y+34, r25	; 0x22
    19e0:	89 a3       	std	Y+33, r24	; 0x21
    19e2:	89 a1       	ldd	r24, Y+33	; 0x21
    19e4:	9a a1       	ldd	r25, Y+34	; 0x22
    19e6:	9e 8f       	std	Y+30, r25	; 0x1e
    19e8:	8d 8f       	std	Y+29, r24	; 0x1d
    19ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <LCD_voidInit+0x1e6>
    19f2:	9e 8f       	std	Y+30, r25	; 0x1e
    19f4:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(4);
    /* entry mode => call send_command func */
    LCD_voidSendCommand(LCD_u8_ENTRY_Mode);
    19f6:	86 e0       	ldi	r24, 0x06	; 6
    19f8:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <LCD_voidSendCommand>
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	a0 e8       	ldi	r26, 0x80	; 128
    1a02:	bf e3       	ldi	r27, 0x3F	; 63
    1a04:	89 8f       	std	Y+25, r24	; 0x19
    1a06:	9a 8f       	std	Y+26, r25	; 0x1a
    1a08:	ab 8f       	std	Y+27, r26	; 0x1b
    1a0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	4a ef       	ldi	r20, 0xFA	; 250
    1a1a:	54 e4       	ldi	r21, 0x44	; 68
    1a1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	8d 8b       	std	Y+21, r24	; 0x15
    1a26:	9e 8b       	std	Y+22, r25	; 0x16
    1a28:	af 8b       	std	Y+23, r26	; 0x17
    1a2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a30:	8f 89       	ldd	r24, Y+23	; 0x17
    1a32:	98 8d       	ldd	r25, Y+24	; 0x18
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e8       	ldi	r20, 0x80	; 128
    1a3a:	5f e3       	ldi	r21, 0x3F	; 63
    1a3c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a40:	88 23       	and	r24, r24
    1a42:	2c f4       	brge	.+10     	; 0x1a4e <LCD_voidInit+0x246>
		__ticks = 1;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9c 8b       	std	Y+20, r25	; 0x14
    1a4a:	8b 8b       	std	Y+19, r24	; 0x13
    1a4c:	3f c0       	rjmp	.+126    	; 0x1acc <LCD_voidInit+0x2c4>
	else if (__tmp > 65535)
    1a4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a50:	7e 89       	ldd	r23, Y+22	; 0x16
    1a52:	8f 89       	ldd	r24, Y+23	; 0x17
    1a54:	98 8d       	ldd	r25, Y+24	; 0x18
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	3f ef       	ldi	r19, 0xFF	; 255
    1a5a:	4f e7       	ldi	r20, 0x7F	; 127
    1a5c:	57 e4       	ldi	r21, 0x47	; 71
    1a5e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a62:	18 16       	cp	r1, r24
    1a64:	4c f5       	brge	.+82     	; 0x1ab8 <LCD_voidInit+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a66:	69 8d       	ldd	r22, Y+25	; 0x19
    1a68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e2       	ldi	r20, 0x20	; 32
    1a74:	51 e4       	ldi	r21, 0x41	; 65
    1a76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	bc 01       	movw	r22, r24
    1a80:	cd 01       	movw	r24, r26
    1a82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	9c 8b       	std	Y+20, r25	; 0x14
    1a8c:	8b 8b       	std	Y+19, r24	; 0x13
    1a8e:	0f c0       	rjmp	.+30     	; 0x1aae <LCD_voidInit+0x2a6>
    1a90:	88 ec       	ldi	r24, 0xC8	; 200
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	9a 8b       	std	Y+18, r25	; 0x12
    1a96:	89 8b       	std	Y+17, r24	; 0x11
    1a98:	89 89       	ldd	r24, Y+17	; 0x11
    1a9a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	f1 f7       	brne	.-4      	; 0x1a9c <LCD_voidInit+0x294>
    1aa0:	9a 8b       	std	Y+18, r25	; 0x12
    1aa2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa4:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa6:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	9c 8b       	std	Y+20, r25	; 0x14
    1aac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aae:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	69 f7       	brne	.-38     	; 0x1a90 <LCD_voidInit+0x288>
    1ab6:	14 c0       	rjmp	.+40     	; 0x1ae0 <LCD_voidInit+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aba:	7e 89       	ldd	r23, Y+22	; 0x16
    1abc:	8f 89       	ldd	r24, Y+23	; 0x17
    1abe:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	9c 8b       	std	Y+20, r25	; 0x14
    1aca:	8b 8b       	std	Y+19, r24	; 0x13
    1acc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ace:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad0:	98 8b       	std	Y+16, r25	; 0x10
    1ad2:	8f 87       	std	Y+15, r24	; 0x0f
    1ad4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ad6:	98 89       	ldd	r25, Y+16	; 0x10
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <LCD_voidInit+0x2d0>
    1adc:	98 8b       	std	Y+16, r25	; 0x10
    1ade:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    /* display cursor on/off control => call send_command func */
    LCD_voidSendCommand(LCD_u8_DISPLAY_CURSOR_ON);
    1ae0:	8c e0       	ldi	r24, 0x0C	; 12
    1ae2:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <LCD_voidSendCommand>
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	a0 e8       	ldi	r26, 0x80	; 128
    1aec:	bf e3       	ldi	r27, 0x3F	; 63
    1aee:	8b 87       	std	Y+11, r24	; 0x0b
    1af0:	9c 87       	std	Y+12, r25	; 0x0c
    1af2:	ad 87       	std	Y+13, r26	; 0x0d
    1af4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	4a ef       	ldi	r20, 0xFA	; 250
    1b04:	54 e4       	ldi	r21, 0x44	; 68
    1b06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	8f 83       	std	Y+7, r24	; 0x07
    1b10:	98 87       	std	Y+8, r25	; 0x08
    1b12:	a9 87       	std	Y+9, r26	; 0x09
    1b14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b16:	6f 81       	ldd	r22, Y+7	; 0x07
    1b18:	78 85       	ldd	r23, Y+8	; 0x08
    1b1a:	89 85       	ldd	r24, Y+9	; 0x09
    1b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e8       	ldi	r20, 0x80	; 128
    1b24:	5f e3       	ldi	r21, 0x3F	; 63
    1b26:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b2a:	88 23       	and	r24, r24
    1b2c:	2c f4       	brge	.+10     	; 0x1b38 <LCD_voidInit+0x330>
		__ticks = 1;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	9e 83       	std	Y+6, r25	; 0x06
    1b34:	8d 83       	std	Y+5, r24	; 0x05
    1b36:	3f c0       	rjmp	.+126    	; 0x1bb6 <LCD_voidInit+0x3ae>
	else if (__tmp > 65535)
    1b38:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3a:	78 85       	ldd	r23, Y+8	; 0x08
    1b3c:	89 85       	ldd	r24, Y+9	; 0x09
    1b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	3f ef       	ldi	r19, 0xFF	; 255
    1b44:	4f e7       	ldi	r20, 0x7F	; 127
    1b46:	57 e4       	ldi	r21, 0x47	; 71
    1b48:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b4c:	18 16       	cp	r1, r24
    1b4e:	4c f5       	brge	.+82     	; 0x1ba2 <LCD_voidInit+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e2       	ldi	r20, 0x20	; 32
    1b5e:	51 e4       	ldi	r21, 0x41	; 65
    1b60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	bc 01       	movw	r22, r24
    1b6a:	cd 01       	movw	r24, r26
    1b6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	9e 83       	std	Y+6, r25	; 0x06
    1b76:	8d 83       	std	Y+5, r24	; 0x05
    1b78:	0f c0       	rjmp	.+30     	; 0x1b98 <LCD_voidInit+0x390>
    1b7a:	88 ec       	ldi	r24, 0xC8	; 200
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	9c 83       	std	Y+4, r25	; 0x04
    1b80:	8b 83       	std	Y+3, r24	; 0x03
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	9c 81       	ldd	r25, Y+4	; 0x04
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <LCD_voidInit+0x37e>
    1b8a:	9c 83       	std	Y+4, r25	; 0x04
    1b8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b90:	9e 81       	ldd	r25, Y+6	; 0x06
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	9e 83       	std	Y+6, r25	; 0x06
    1b96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b98:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	69 f7       	brne	.-38     	; 0x1b7a <LCD_voidInit+0x372>
    1ba0:	14 c0       	rjmp	.+40     	; 0x1bca <LCD_voidInit+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba4:	78 85       	ldd	r23, Y+8	; 0x08
    1ba6:	89 85       	ldd	r24, Y+9	; 0x09
    1ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1baa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	9e 83       	std	Y+6, r25	; 0x06
    1bb4:	8d 83       	std	Y+5, r24	; 0x05
    1bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bba:	9a 83       	std	Y+2, r25	; 0x02
    1bbc:	89 83       	std	Y+1, r24	; 0x01
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <LCD_voidInit+0x3ba>
    1bc6:	9a 83       	std	Y+2, r25	; 0x02
    1bc8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
    1bca:	e8 96       	adiw	r28, 0x38	; 56
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 copy_u8Comand)
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	6d 97       	sbiw	r28, 0x1d	; 29
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	8d 8f       	std	Y+29, r24	; 0x1d
    /* write 0 to RS pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	40 e0       	ldi	r20, 0x00	; 0
    1bf8:	0e 94 ee 08 	call	0x11dc	; 0x11dc <DIO_DioEnumWriteChannel>
    /* write 0 to RW pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	61 e0       	ldi	r22, 0x01	; 1
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	0e 94 ee 08 	call	0x11dc	; 0x11dc <DIO_DioEnumWriteChannel>
    /* write 1 to enable pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	62 e0       	ldi	r22, 0x02	; 2
    1c0a:	41 e0       	ldi	r20, 0x01	; 1
    1c0c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <DIO_DioEnumWriteChannel>
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    #elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
        /* write the command to Data Port => 4_Bit high */
        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Comand);
    1c10:	83 e0       	ldi	r24, 0x03	; 3
    1c12:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1c14:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_DioEnumWritePort>
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	62 e0       	ldi	r22, 0x02	; 2
    1c1c:	40 e0       	ldi	r20, 0x00	; 0
    1c1e:	0e 94 ee 08 	call	0x11dc	; 0x11dc <DIO_DioEnumWriteChannel>
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	a0 e8       	ldi	r26, 0x80	; 128
    1c28:	bf e3       	ldi	r27, 0x3F	; 63
    1c2a:	89 8f       	std	Y+25, r24	; 0x19
    1c2c:	9a 8f       	std	Y+26, r25	; 0x1a
    1c2e:	ab 8f       	std	Y+27, r26	; 0x1b
    1c30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c32:	69 8d       	ldd	r22, Y+25	; 0x19
    1c34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	4a ef       	ldi	r20, 0xFA	; 250
    1c40:	54 e4       	ldi	r21, 0x44	; 68
    1c42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	8d 8b       	std	Y+21, r24	; 0x15
    1c4c:	9e 8b       	std	Y+22, r25	; 0x16
    1c4e:	af 8b       	std	Y+23, r26	; 0x17
    1c50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c52:	6d 89       	ldd	r22, Y+21	; 0x15
    1c54:	7e 89       	ldd	r23, Y+22	; 0x16
    1c56:	8f 89       	ldd	r24, Y+23	; 0x17
    1c58:	98 8d       	ldd	r25, Y+24	; 0x18
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e8       	ldi	r20, 0x80	; 128
    1c60:	5f e3       	ldi	r21, 0x3F	; 63
    1c62:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c66:	88 23       	and	r24, r24
    1c68:	2c f4       	brge	.+10     	; 0x1c74 <LCD_voidSendCommand+0x98>
		__ticks = 1;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	9c 8b       	std	Y+20, r25	; 0x14
    1c70:	8b 8b       	std	Y+19, r24	; 0x13
    1c72:	3f c0       	rjmp	.+126    	; 0x1cf2 <LCD_voidSendCommand+0x116>
	else if (__tmp > 65535)
    1c74:	6d 89       	ldd	r22, Y+21	; 0x15
    1c76:	7e 89       	ldd	r23, Y+22	; 0x16
    1c78:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	3f ef       	ldi	r19, 0xFF	; 255
    1c80:	4f e7       	ldi	r20, 0x7F	; 127
    1c82:	57 e4       	ldi	r21, 0x47	; 71
    1c84:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c88:	18 16       	cp	r1, r24
    1c8a:	4c f5       	brge	.+82     	; 0x1cde <LCD_voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e2       	ldi	r20, 0x20	; 32
    1c9a:	51 e4       	ldi	r21, 0x41	; 65
    1c9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	bc 01       	movw	r22, r24
    1ca6:	cd 01       	movw	r24, r26
    1ca8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	9c 8b       	std	Y+20, r25	; 0x14
    1cb2:	8b 8b       	std	Y+19, r24	; 0x13
    1cb4:	0f c0       	rjmp	.+30     	; 0x1cd4 <LCD_voidSendCommand+0xf8>
    1cb6:	88 ec       	ldi	r24, 0xC8	; 200
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	9a 8b       	std	Y+18, r25	; 0x12
    1cbc:	89 8b       	std	Y+17, r24	; 0x11
    1cbe:	89 89       	ldd	r24, Y+17	; 0x11
    1cc0:	9a 89       	ldd	r25, Y+18	; 0x12
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <LCD_voidSendCommand+0xe6>
    1cc6:	9a 8b       	std	Y+18, r25	; 0x12
    1cc8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cca:	8b 89       	ldd	r24, Y+19	; 0x13
    1ccc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	9c 8b       	std	Y+20, r25	; 0x14
    1cd2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	69 f7       	brne	.-38     	; 0x1cb6 <LCD_voidSendCommand+0xda>
    1cdc:	14 c0       	rjmp	.+40     	; 0x1d06 <LCD_voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cde:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	9c 8b       	std	Y+20, r25	; 0x14
    1cf0:	8b 8b       	std	Y+19, r24	; 0x13
    1cf2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf6:	98 8b       	std	Y+16, r25	; 0x10
    1cf8:	8f 87       	std	Y+15, r24	; 0x0f
    1cfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cfc:	98 89       	ldd	r25, Y+16	; 0x10
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <LCD_voidSendCommand+0x122>
    1d02:	98 8b       	std	Y+16, r25	; 0x10
    1d04:	8f 87       	std	Y+15, r24	; 0x0f
        /* delay 1msec */
        _delay_ms(1);
        /* write the command to Data Port => 4_Bit low */
        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Comand<<4);
    1d06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d08:	98 2f       	mov	r25, r24
    1d0a:	92 95       	swap	r25
    1d0c:	90 7f       	andi	r25, 0xF0	; 240
    1d0e:	83 e0       	ldi	r24, 0x03	; 3
    1d10:	69 2f       	mov	r22, r25
    1d12:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_DioEnumWritePort>
        /* set enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	62 e0       	ldi	r22, 0x02	; 2
    1d1a:	41 e0       	ldi	r20, 0x01	; 1
    1d1c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <DIO_DioEnumWriteChannel>
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	a0 e8       	ldi	r26, 0x80	; 128
    1d26:	bf e3       	ldi	r27, 0x3F	; 63
    1d28:	8b 87       	std	Y+11, r24	; 0x0b
    1d2a:	9c 87       	std	Y+12, r25	; 0x0c
    1d2c:	ad 87       	std	Y+13, r26	; 0x0d
    1d2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	4a ef       	ldi	r20, 0xFA	; 250
    1d3e:	54 e4       	ldi	r21, 0x44	; 68
    1d40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	8f 83       	std	Y+7, r24	; 0x07
    1d4a:	98 87       	std	Y+8, r25	; 0x08
    1d4c:	a9 87       	std	Y+9, r26	; 0x09
    1d4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d50:	6f 81       	ldd	r22, Y+7	; 0x07
    1d52:	78 85       	ldd	r23, Y+8	; 0x08
    1d54:	89 85       	ldd	r24, Y+9	; 0x09
    1d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e8       	ldi	r20, 0x80	; 128
    1d5e:	5f e3       	ldi	r21, 0x3F	; 63
    1d60:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d64:	88 23       	and	r24, r24
    1d66:	2c f4       	brge	.+10     	; 0x1d72 <LCD_voidSendCommand+0x196>
		__ticks = 1;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	9e 83       	std	Y+6, r25	; 0x06
    1d6e:	8d 83       	std	Y+5, r24	; 0x05
    1d70:	3f c0       	rjmp	.+126    	; 0x1df0 <LCD_voidSendCommand+0x214>
	else if (__tmp > 65535)
    1d72:	6f 81       	ldd	r22, Y+7	; 0x07
    1d74:	78 85       	ldd	r23, Y+8	; 0x08
    1d76:	89 85       	ldd	r24, Y+9	; 0x09
    1d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	3f ef       	ldi	r19, 0xFF	; 255
    1d7e:	4f e7       	ldi	r20, 0x7F	; 127
    1d80:	57 e4       	ldi	r21, 0x47	; 71
    1d82:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d86:	18 16       	cp	r1, r24
    1d88:	4c f5       	brge	.+82     	; 0x1ddc <LCD_voidSendCommand+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e2       	ldi	r20, 0x20	; 32
    1d98:	51 e4       	ldi	r21, 0x41	; 65
    1d9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	9e 83       	std	Y+6, r25	; 0x06
    1db0:	8d 83       	std	Y+5, r24	; 0x05
    1db2:	0f c0       	rjmp	.+30     	; 0x1dd2 <LCD_voidSendCommand+0x1f6>
    1db4:	88 ec       	ldi	r24, 0xC8	; 200
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9c 83       	std	Y+4, r25	; 0x04
    1dba:	8b 83       	std	Y+3, r24	; 0x03
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <LCD_voidSendCommand+0x1e4>
    1dc4:	9c 83       	std	Y+4, r25	; 0x04
    1dc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dca:	9e 81       	ldd	r25, Y+6	; 0x06
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	9e 83       	std	Y+6, r25	; 0x06
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	69 f7       	brne	.-38     	; 0x1db4 <LCD_voidSendCommand+0x1d8>
    1dda:	14 c0       	rjmp	.+40     	; 0x1e04 <LCD_voidSendCommand+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dde:	78 85       	ldd	r23, Y+8	; 0x08
    1de0:	89 85       	ldd	r24, Y+9	; 0x09
    1de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	9e 83       	std	Y+6, r25	; 0x06
    1dee:	8d 83       	std	Y+5, r24	; 0x05
    1df0:	8d 81       	ldd	r24, Y+5	; 0x05
    1df2:	9e 81       	ldd	r25, Y+6	; 0x06
    1df4:	9a 83       	std	Y+2, r25	; 0x02
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <LCD_voidSendCommand+0x220>
    1e00:	9a 83       	std	Y+2, r25	; 0x02
    1e02:	89 83       	std	Y+1, r24	; 0x01
        /* delay 1msec */
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	62 e0       	ldi	r22, 0x02	; 2
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    1e0a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <DIO_DioEnumWriteChannel>
    #endif 
}
    1e0e:	6d 96       	adiw	r28, 0x1d	; 29
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	08 95       	ret

00001e20 <LCD_voidDisplayCharacter>:

void LCD_voidDisplayCharacter(u8 copy_u8Data)
{
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	6d 97       	sbiw	r28, 0x1d	; 29
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	de bf       	out	0x3e, r29	; 62
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	8d 8f       	std	Y+29, r24	; 0x1d
    /* write 1 to RS pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	41 e0       	ldi	r20, 0x01	; 1
    1e3c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <DIO_DioEnumWriteChannel>
    /* write 0 to RW pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	61 e0       	ldi	r22, 0x01	; 1
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	0e 94 ee 08 	call	0x11dc	; 0x11dc <DIO_DioEnumWriteChannel>
    /* write 1 to enable pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	62 e0       	ldi	r22, 0x02	; 2
    1e4e:	41 e0       	ldi	r20, 0x01	; 1
    1e50:	0e 94 ee 08 	call	0x11dc	; 0x11dc <DIO_DioEnumWriteChannel>
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    #elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
        /* write the character to Data Port => 4_Bit high */
        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Data);
    1e54:	83 e0       	ldi	r24, 0x03	; 3
    1e56:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e58:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_DioEnumWritePort>
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	62 e0       	ldi	r22, 0x02	; 2
    1e60:	40 e0       	ldi	r20, 0x00	; 0
    1e62:	0e 94 ee 08 	call	0x11dc	; 0x11dc <DIO_DioEnumWriteChannel>
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	a0 e8       	ldi	r26, 0x80	; 128
    1e6c:	bf e3       	ldi	r27, 0x3F	; 63
    1e6e:	89 8f       	std	Y+25, r24	; 0x19
    1e70:	9a 8f       	std	Y+26, r25	; 0x1a
    1e72:	ab 8f       	std	Y+27, r26	; 0x1b
    1e74:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e76:	69 8d       	ldd	r22, Y+25	; 0x19
    1e78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	4a ef       	ldi	r20, 0xFA	; 250
    1e84:	54 e4       	ldi	r21, 0x44	; 68
    1e86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	8d 8b       	std	Y+21, r24	; 0x15
    1e90:	9e 8b       	std	Y+22, r25	; 0x16
    1e92:	af 8b       	std	Y+23, r26	; 0x17
    1e94:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e96:	6d 89       	ldd	r22, Y+21	; 0x15
    1e98:	7e 89       	ldd	r23, Y+22	; 0x16
    1e9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e8       	ldi	r20, 0x80	; 128
    1ea4:	5f e3       	ldi	r21, 0x3F	; 63
    1ea6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1eaa:	88 23       	and	r24, r24
    1eac:	2c f4       	brge	.+10     	; 0x1eb8 <LCD_voidDisplayCharacter+0x98>
		__ticks = 1;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	9c 8b       	std	Y+20, r25	; 0x14
    1eb4:	8b 8b       	std	Y+19, r24	; 0x13
    1eb6:	3f c0       	rjmp	.+126    	; 0x1f36 <LCD_voidDisplayCharacter+0x116>
	else if (__tmp > 65535)
    1eb8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eba:	7e 89       	ldd	r23, Y+22	; 0x16
    1ebc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ebe:	98 8d       	ldd	r25, Y+24	; 0x18
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	3f ef       	ldi	r19, 0xFF	; 255
    1ec4:	4f e7       	ldi	r20, 0x7F	; 127
    1ec6:	57 e4       	ldi	r21, 0x47	; 71
    1ec8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ecc:	18 16       	cp	r1, r24
    1ece:	4c f5       	brge	.+82     	; 0x1f22 <LCD_voidDisplayCharacter+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ed2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e2       	ldi	r20, 0x20	; 32
    1ede:	51 e4       	ldi	r21, 0x41	; 65
    1ee0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	bc 01       	movw	r22, r24
    1eea:	cd 01       	movw	r24, r26
    1eec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	9c 8b       	std	Y+20, r25	; 0x14
    1ef6:	8b 8b       	std	Y+19, r24	; 0x13
    1ef8:	0f c0       	rjmp	.+30     	; 0x1f18 <LCD_voidDisplayCharacter+0xf8>
    1efa:	88 ec       	ldi	r24, 0xC8	; 200
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	9a 8b       	std	Y+18, r25	; 0x12
    1f00:	89 8b       	std	Y+17, r24	; 0x11
    1f02:	89 89       	ldd	r24, Y+17	; 0x11
    1f04:	9a 89       	ldd	r25, Y+18	; 0x12
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <LCD_voidDisplayCharacter+0xe6>
    1f0a:	9a 8b       	std	Y+18, r25	; 0x12
    1f0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f10:	9c 89       	ldd	r25, Y+20	; 0x14
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	9c 8b       	std	Y+20, r25	; 0x14
    1f16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f18:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1c:	00 97       	sbiw	r24, 0x00	; 0
    1f1e:	69 f7       	brne	.-38     	; 0x1efa <LCD_voidDisplayCharacter+0xda>
    1f20:	14 c0       	rjmp	.+40     	; 0x1f4a <LCD_voidDisplayCharacter+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f22:	6d 89       	ldd	r22, Y+21	; 0x15
    1f24:	7e 89       	ldd	r23, Y+22	; 0x16
    1f26:	8f 89       	ldd	r24, Y+23	; 0x17
    1f28:	98 8d       	ldd	r25, Y+24	; 0x18
    1f2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	9c 8b       	std	Y+20, r25	; 0x14
    1f34:	8b 8b       	std	Y+19, r24	; 0x13
    1f36:	8b 89       	ldd	r24, Y+19	; 0x13
    1f38:	9c 89       	ldd	r25, Y+20	; 0x14
    1f3a:	98 8b       	std	Y+16, r25	; 0x10
    1f3c:	8f 87       	std	Y+15, r24	; 0x0f
    1f3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f40:	98 89       	ldd	r25, Y+16	; 0x10
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <LCD_voidDisplayCharacter+0x122>
    1f46:	98 8b       	std	Y+16, r25	; 0x10
    1f48:	8f 87       	std	Y+15, r24	; 0x0f
        /* delay 1msec */
        _delay_ms(1);
        /* write the character to Data Port => 4_Bit low */
        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Data<<4);
    1f4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f4c:	98 2f       	mov	r25, r24
    1f4e:	92 95       	swap	r25
    1f50:	90 7f       	andi	r25, 0xF0	; 240
    1f52:	83 e0       	ldi	r24, 0x03	; 3
    1f54:	69 2f       	mov	r22, r25
    1f56:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_DioEnumWritePort>
        /* set enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	62 e0       	ldi	r22, 0x02	; 2
    1f5e:	41 e0       	ldi	r20, 0x01	; 1
    1f60:	0e 94 ee 08 	call	0x11dc	; 0x11dc <DIO_DioEnumWriteChannel>
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	a0 e8       	ldi	r26, 0x80	; 128
    1f6a:	bf e3       	ldi	r27, 0x3F	; 63
    1f6c:	8b 87       	std	Y+11, r24	; 0x0b
    1f6e:	9c 87       	std	Y+12, r25	; 0x0c
    1f70:	ad 87       	std	Y+13, r26	; 0x0d
    1f72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	4a ef       	ldi	r20, 0xFA	; 250
    1f82:	54 e4       	ldi	r21, 0x44	; 68
    1f84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	8f 83       	std	Y+7, r24	; 0x07
    1f8e:	98 87       	std	Y+8, r25	; 0x08
    1f90:	a9 87       	std	Y+9, r26	; 0x09
    1f92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f94:	6f 81       	ldd	r22, Y+7	; 0x07
    1f96:	78 85       	ldd	r23, Y+8	; 0x08
    1f98:	89 85       	ldd	r24, Y+9	; 0x09
    1f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e8       	ldi	r20, 0x80	; 128
    1fa2:	5f e3       	ldi	r21, 0x3F	; 63
    1fa4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fa8:	88 23       	and	r24, r24
    1faa:	2c f4       	brge	.+10     	; 0x1fb6 <LCD_voidDisplayCharacter+0x196>
		__ticks = 1;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	9e 83       	std	Y+6, r25	; 0x06
    1fb2:	8d 83       	std	Y+5, r24	; 0x05
    1fb4:	3f c0       	rjmp	.+126    	; 0x2034 <LCD_voidDisplayCharacter+0x214>
	else if (__tmp > 65535)
    1fb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb8:	78 85       	ldd	r23, Y+8	; 0x08
    1fba:	89 85       	ldd	r24, Y+9	; 0x09
    1fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	3f ef       	ldi	r19, 0xFF	; 255
    1fc2:	4f e7       	ldi	r20, 0x7F	; 127
    1fc4:	57 e4       	ldi	r21, 0x47	; 71
    1fc6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fca:	18 16       	cp	r1, r24
    1fcc:	4c f5       	brge	.+82     	; 0x2020 <LCD_voidDisplayCharacter+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e2       	ldi	r20, 0x20	; 32
    1fdc:	51 e4       	ldi	r21, 0x41	; 65
    1fde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	bc 01       	movw	r22, r24
    1fe8:	cd 01       	movw	r24, r26
    1fea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	9e 83       	std	Y+6, r25	; 0x06
    1ff4:	8d 83       	std	Y+5, r24	; 0x05
    1ff6:	0f c0       	rjmp	.+30     	; 0x2016 <LCD_voidDisplayCharacter+0x1f6>
    1ff8:	88 ec       	ldi	r24, 0xC8	; 200
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	9c 83       	std	Y+4, r25	; 0x04
    1ffe:	8b 83       	std	Y+3, r24	; 0x03
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	9c 81       	ldd	r25, Y+4	; 0x04
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <LCD_voidDisplayCharacter+0x1e4>
    2008:	9c 83       	std	Y+4, r25	; 0x04
    200a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200c:	8d 81       	ldd	r24, Y+5	; 0x05
    200e:	9e 81       	ldd	r25, Y+6	; 0x06
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	9e 83       	std	Y+6, r25	; 0x06
    2014:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2016:	8d 81       	ldd	r24, Y+5	; 0x05
    2018:	9e 81       	ldd	r25, Y+6	; 0x06
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	69 f7       	brne	.-38     	; 0x1ff8 <LCD_voidDisplayCharacter+0x1d8>
    201e:	14 c0       	rjmp	.+40     	; 0x2048 <LCD_voidDisplayCharacter+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2020:	6f 81       	ldd	r22, Y+7	; 0x07
    2022:	78 85       	ldd	r23, Y+8	; 0x08
    2024:	89 85       	ldd	r24, Y+9	; 0x09
    2026:	9a 85       	ldd	r25, Y+10	; 0x0a
    2028:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	9e 83       	std	Y+6, r25	; 0x06
    2032:	8d 83       	std	Y+5, r24	; 0x05
    2034:	8d 81       	ldd	r24, Y+5	; 0x05
    2036:	9e 81       	ldd	r25, Y+6	; 0x06
    2038:	9a 83       	std	Y+2, r25	; 0x02
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	9a 81       	ldd	r25, Y+2	; 0x02
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <LCD_voidDisplayCharacter+0x220>
    2044:	9a 83       	std	Y+2, r25	; 0x02
    2046:	89 83       	std	Y+1, r24	; 0x01
        /* delay 1msec */
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	62 e0       	ldi	r22, 0x02	; 2
    204c:	40 e0       	ldi	r20, 0x00	; 0
    204e:	0e 94 ee 08 	call	0x11dc	; 0x11dc <DIO_DioEnumWriteChannel>
    #endif
}
    2052:	6d 96       	adiw	r28, 0x1d	; 29
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	de bf       	out	0x3e, r29	; 62
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	cd bf       	out	0x3d, r28	; 61
    205e:	cf 91       	pop	r28
    2060:	df 91       	pop	r29
    2062:	08 95       	ret

00002064 <LCD_voidCreateCustomCharacter>:

void LCD_voidCreateCustomCharacter(pu8 copy_pu8Character,u8 copy_u8PatternIndex,u8 copy_u8Row,u8 copy_u8Col)
{
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	27 97       	sbiw	r28, 0x07	; 7
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	f8 94       	cli
    2072:	de bf       	out	0x3e, r29	; 62
    2074:	0f be       	out	0x3f, r0	; 63
    2076:	cd bf       	out	0x3d, r28	; 61
    2078:	9c 83       	std	Y+4, r25	; 0x04
    207a:	8b 83       	std	Y+3, r24	; 0x03
    207c:	6d 83       	std	Y+5, r22	; 0x05
    207e:	4e 83       	std	Y+6, r20	; 0x06
    2080:	2f 83       	std	Y+7, r18	; 0x07
    u8 local_u8Count;
    /* to set CGRAM Address: 1- Index * 8 */
    u8 local_u8Adress = copy_u8PatternIndex * 8;
    2082:	8d 81       	ldd	r24, Y+5	; 0x05
    2084:	88 2f       	mov	r24, r24
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	88 0f       	add	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	89 83       	std	Y+1, r24	; 0x01
    /* 2- set the address in the last special character */
    LCD_voidSendCommand(local_u8Adress + 64);
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	80 5c       	subi	r24, 0xC0	; 192
    209a:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <LCD_voidSendCommand>
    /* to write the data to CGRAM or DDRAM */
    for(local_u8Count = 0;local_u8Count <8;local_u8Count++)
    209e:	1a 82       	std	Y+2, r1	; 0x02
    20a0:	0e c0       	rjmp	.+28     	; 0x20be <LCD_voidCreateCustomCharacter+0x5a>
    {
        LCD_voidDisplayCharacter(copy_pu8Character[local_u8Count]);
    20a2:	8a 81       	ldd	r24, Y+2	; 0x02
    20a4:	28 2f       	mov	r18, r24
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	9c 81       	ldd	r25, Y+4	; 0x04
    20ac:	fc 01       	movw	r30, r24
    20ae:	e2 0f       	add	r30, r18
    20b0:	f3 1f       	adc	r31, r19
    20b2:	80 81       	ld	r24, Z
    20b4:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_voidDisplayCharacter>
    /* to set CGRAM Address: 1- Index * 8 */
    u8 local_u8Adress = copy_u8PatternIndex * 8;
    /* 2- set the address in the last special character */
    LCD_voidSendCommand(local_u8Adress + 64);
    /* to write the data to CGRAM or DDRAM */
    for(local_u8Count = 0;local_u8Count <8;local_u8Count++)
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	8f 5f       	subi	r24, 0xFF	; 255
    20bc:	8a 83       	std	Y+2, r24	; 0x02
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	88 30       	cpi	r24, 0x08	; 8
    20c2:	78 f3       	brcs	.-34     	; 0x20a2 <LCD_voidCreateCustomCharacter+0x3e>
    {
        LCD_voidDisplayCharacter(copy_pu8Character[local_u8Count]);
    }
    /* set DDRAM address */
    LCD_voidGoToXY(copy_u8Row,copy_u8Col);
    20c4:	8e 81       	ldd	r24, Y+6	; 0x06
    20c6:	6f 81       	ldd	r22, Y+7	; 0x07
    20c8:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_voidGoToXY>
    /* display the pattern */
    LCD_voidDisplayCharacter(copy_u8PatternIndex);
    20cc:	8d 81       	ldd	r24, Y+5	; 0x05
    20ce:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_voidDisplayCharacter>
}
    20d2:	27 96       	adiw	r28, 0x07	; 7
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 copy_u8Row,u8 copy_u8Col)
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <LCD_voidGoToXY+0x6>
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	6a 83       	std	Y+2, r22	; 0x02
    /* to select the row and the column*/
    LCD_voidSendCommand(LCD_u8_ADRESS + copy_u8Row + copy_u8Col);
    20f2:	99 81       	ldd	r25, Y+1	; 0x01
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	89 0f       	add	r24, r25
    20f8:	80 58       	subi	r24, 0x80	; 128
    20fa:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <LCD_voidSendCommand>
}
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	08 95       	ret

00002108 <LCD_u8DisplayString>:

u8 LCD_u8DisplayString(pu8 copy_pu8String)
{
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	00 d0       	rcall	.+0      	; 0x210e <LCD_u8DisplayString+0x6>
    210e:	00 d0       	rcall	.+0      	; 0x2110 <LCD_u8DisplayString+0x8>
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	9c 83       	std	Y+4, r25	; 0x04
    2116:	8b 83       	std	Y+3, r24	; 0x03
    u8 local_u8ErrorState = STD_TYPES_OK;
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Count = 0;
    211c:	19 82       	std	Y+1, r1	; 0x01
    if(copy_pu8String != NULL)
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	d9 f0       	breq	.+54     	; 0x215c <LCD_u8DisplayString+0x54>
    2126:	0e c0       	rjmp	.+28     	; 0x2144 <LCD_u8DisplayString+0x3c>
    {
        /* check to the end of the string */
        while(copy_pu8String[local_u8Count] != '\0')
        {
            /* diplay the first character in the string */
           LCD_voidDisplayCharacter(copy_pu8String[local_u8Count]);
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	9c 81       	ldd	r25, Y+4	; 0x04
    2132:	fc 01       	movw	r30, r24
    2134:	e2 0f       	add	r30, r18
    2136:	f3 1f       	adc	r31, r19
    2138:	80 81       	ld	r24, Z
    213a:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_voidDisplayCharacter>
           local_u8Count++; 
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	8f 5f       	subi	r24, 0xFF	; 255
    2142:	89 83       	std	Y+1, r24	; 0x01
    u8 local_u8ErrorState = STD_TYPES_OK;
    u8 local_u8Count = 0;
    if(copy_pu8String != NULL)
    {
        /* check to the end of the string */
        while(copy_pu8String[local_u8Count] != '\0')
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	28 2f       	mov	r18, r24
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	9c 81       	ldd	r25, Y+4	; 0x04
    214e:	fc 01       	movw	r30, r24
    2150:	e2 0f       	add	r30, r18
    2152:	f3 1f       	adc	r31, r19
    2154:	80 81       	ld	r24, Z
    2156:	88 23       	and	r24, r24
    2158:	39 f7       	brne	.-50     	; 0x2128 <LCD_u8DisplayString+0x20>
    215a:	01 c0       	rjmp	.+2      	; 0x215e <LCD_u8DisplayString+0x56>
           local_u8Count++; 
        }
    }
    else
    {
        local_u8ErrorState = STD_TYPES_NOK;
    215c:	1a 82       	std	Y+2, r1	; 0x02
    }
    return local_u8ErrorState;
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <LCD_voidDisplayNumber>:

void LCD_voidDisplayNumber(u32 copy_u32Number)
{
    216e:	1f 93       	push	r17
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	00 d0       	rcall	.+0      	; 0x2176 <LCD_voidDisplayNumber+0x8>
    2176:	00 d0       	rcall	.+0      	; 0x2178 <LCD_voidDisplayNumber+0xa>
    2178:	0f 92       	push	r0
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	6a 83       	std	Y+2, r22	; 0x02
    2180:	7b 83       	std	Y+3, r23	; 0x03
    2182:	8c 83       	std	Y+4, r24	; 0x04
    2184:	9d 83       	std	Y+5, r25	; 0x05
    u8 local_u8Reserved = 1;
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	89 83       	std	Y+1, r24	; 0x01
    if(copy_u32Number == 0)
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	9b 81       	ldd	r25, Y+3	; 0x03
    218e:	ac 81       	ldd	r26, Y+4	; 0x04
    2190:	bd 81       	ldd	r27, Y+5	; 0x05
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	a1 05       	cpc	r26, r1
    2196:	b1 05       	cpc	r27, r1
    2198:	a1 f5       	brne	.+104    	; 0x2202 <LCD_voidDisplayNumber+0x94>
    {
        LCD_voidDisplayCharacter(0);   
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_voidDisplayCharacter>
    21a0:	4a c0       	rjmp	.+148    	; 0x2236 <LCD_voidDisplayNumber+0xc8>
    }
    else
    {
        while(copy_u32Number != 0)
        {
            local_u8Reserved = (local_u8Reserved * 10) + (copy_u32Number % 10);
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	88 2f       	mov	r24, r24
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	9c 01       	movw	r18, r24
    21aa:	22 0f       	add	r18, r18
    21ac:	33 1f       	adc	r19, r19
    21ae:	c9 01       	movw	r24, r18
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	82 0f       	add	r24, r18
    21ba:	93 1f       	adc	r25, r19
    21bc:	18 2f       	mov	r17, r24
    21be:	8a 81       	ldd	r24, Y+2	; 0x02
    21c0:	9b 81       	ldd	r25, Y+3	; 0x03
    21c2:	ac 81       	ldd	r26, Y+4	; 0x04
    21c4:	bd 81       	ldd	r27, Y+5	; 0x05
    21c6:	2a e0       	ldi	r18, 0x0A	; 10
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e0       	ldi	r20, 0x00	; 0
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	bc 01       	movw	r22, r24
    21d0:	cd 01       	movw	r24, r26
    21d2:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__udivmodsi4>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	81 0f       	add	r24, r17
    21dc:	89 83       	std	Y+1, r24	; 0x01
            copy_u32Number /= 10;
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	9b 81       	ldd	r25, Y+3	; 0x03
    21e2:	ac 81       	ldd	r26, Y+4	; 0x04
    21e4:	bd 81       	ldd	r27, Y+5	; 0x05
    21e6:	2a e0       	ldi	r18, 0x0A	; 10
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e0       	ldi	r20, 0x00	; 0
    21ec:	50 e0       	ldi	r21, 0x00	; 0
    21ee:	bc 01       	movw	r22, r24
    21f0:	cd 01       	movw	r24, r26
    21f2:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__udivmodsi4>
    21f6:	da 01       	movw	r26, r20
    21f8:	c9 01       	movw	r24, r18
    21fa:	8a 83       	std	Y+2, r24	; 0x02
    21fc:	9b 83       	std	Y+3, r25	; 0x03
    21fe:	ac 83       	std	Y+4, r26	; 0x04
    2200:	bd 83       	std	Y+5, r27	; 0x05
    {
        LCD_voidDisplayCharacter(0);   
    }
    else
    {
        while(copy_u32Number != 0)
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	9b 81       	ldd	r25, Y+3	; 0x03
    2206:	ac 81       	ldd	r26, Y+4	; 0x04
    2208:	bd 81       	ldd	r27, Y+5	; 0x05
    220a:	00 97       	sbiw	r24, 0x00	; 0
    220c:	a1 05       	cpc	r26, r1
    220e:	b1 05       	cpc	r27, r1
    2210:	41 f6       	brne	.-112    	; 0x21a2 <LCD_voidDisplayNumber+0x34>
            local_u8Reserved = (local_u8Reserved * 10) + (copy_u32Number % 10);
            copy_u32Number /= 10;
        }
        do
        {
            LCD_voidDisplayCharacter((local_u8Reserved % 10) + '0');
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	9a e0       	ldi	r25, 0x0A	; 10
    2216:	69 2f       	mov	r22, r25
    2218:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__udivmodqi4>
    221c:	89 2f       	mov	r24, r25
    221e:	80 5d       	subi	r24, 0xD0	; 208
    2220:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_voidDisplayCharacter>
            local_u8Reserved /= 10;
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	9a e0       	ldi	r25, 0x0A	; 10
    2228:	69 2f       	mov	r22, r25
    222a:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__udivmodqi4>
    222e:	89 83       	std	Y+1, r24	; 0x01
        }while(local_u8Reserved != 1);
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	81 30       	cpi	r24, 0x01	; 1
    2234:	71 f7       	brne	.-36     	; 0x2212 <LCD_voidDisplayNumber+0xa4>
    }
}
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	1f 91       	pop	r17
    2246:	08 95       	ret

00002248 <LCD_voidDisplayClear>:

void LCD_voidDisplayClear(void)
{
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(LCD_u8_DISPLAY_CLEAR);
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <LCD_voidSendCommand>
}
    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	08 95       	ret

0000225c <main>:
#include "../HAL/LCD/Include/LCD_interface.h"
#define F_CPU   8000000UL
#include <util/delay.h>

int main(void)
{
    225c:	0f 93       	push	r16
    225e:	1f 93       	push	r17
    2260:	df 93       	push	r29
    2262:	cf 93       	push	r28
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	c3 57       	subi	r28, 0x73	; 115
    226a:	d0 40       	sbci	r29, 0x00	; 0
    226c:	0f b6       	in	r0, 0x3f	; 63
    226e:	f8 94       	cli
    2270:	de bf       	out	0x3e, r29	; 62
    2272:	0f be       	out	0x3f, r0	; 63
    2274:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8CustArr[8] = {0x0E,0x0E,0x04,0x0E,0x15,0x04,0x0A,0x11};
    2276:	ce 01       	movw	r24, r28
    2278:	89 59       	subi	r24, 0x99	; 153
    227a:	9f 4f       	sbci	r25, 0xFF	; 255
    227c:	e1 96       	adiw	r28, 0x31	; 49
    227e:	9f af       	std	Y+63, r25	; 0x3f
    2280:	8e af       	std	Y+62, r24	; 0x3e
    2282:	e1 97       	sbiw	r28, 0x31	; 49
    2284:	86 eb       	ldi	r24, 0xB6	; 182
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	e3 96       	adiw	r28, 0x33	; 51
    228a:	9f af       	std	Y+63, r25	; 0x3f
    228c:	8e af       	std	Y+62, r24	; 0x3e
    228e:	e3 97       	sbiw	r28, 0x33	; 51
    2290:	98 e0       	ldi	r25, 0x08	; 8
    2292:	e4 96       	adiw	r28, 0x34	; 52
    2294:	9f af       	std	Y+63, r25	; 0x3f
    2296:	e4 97       	sbiw	r28, 0x34	; 52
    2298:	e3 96       	adiw	r28, 0x33	; 51
    229a:	ee ad       	ldd	r30, Y+62	; 0x3e
    229c:	ff ad       	ldd	r31, Y+63	; 0x3f
    229e:	e3 97       	sbiw	r28, 0x33	; 51
    22a0:	00 80       	ld	r0, Z
    22a2:	e3 96       	adiw	r28, 0x33	; 51
    22a4:	8e ad       	ldd	r24, Y+62	; 0x3e
    22a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    22a8:	e3 97       	sbiw	r28, 0x33	; 51
    22aa:	01 96       	adiw	r24, 0x01	; 1
    22ac:	e3 96       	adiw	r28, 0x33	; 51
    22ae:	9f af       	std	Y+63, r25	; 0x3f
    22b0:	8e af       	std	Y+62, r24	; 0x3e
    22b2:	e3 97       	sbiw	r28, 0x33	; 51
    22b4:	e1 96       	adiw	r28, 0x31	; 49
    22b6:	ee ad       	ldd	r30, Y+62	; 0x3e
    22b8:	ff ad       	ldd	r31, Y+63	; 0x3f
    22ba:	e1 97       	sbiw	r28, 0x31	; 49
    22bc:	00 82       	st	Z, r0
    22be:	e1 96       	adiw	r28, 0x31	; 49
    22c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    22c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    22c4:	e1 97       	sbiw	r28, 0x31	; 49
    22c6:	01 96       	adiw	r24, 0x01	; 1
    22c8:	e1 96       	adiw	r28, 0x31	; 49
    22ca:	9f af       	std	Y+63, r25	; 0x3f
    22cc:	8e af       	std	Y+62, r24	; 0x3e
    22ce:	e1 97       	sbiw	r28, 0x31	; 49
    22d0:	e4 96       	adiw	r28, 0x34	; 52
    22d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    22d4:	e4 97       	sbiw	r28, 0x34	; 52
    22d6:	91 50       	subi	r25, 0x01	; 1
    22d8:	e4 96       	adiw	r28, 0x34	; 52
    22da:	9f af       	std	Y+63, r25	; 0x3f
    22dc:	e4 97       	sbiw	r28, 0x34	; 52
    22de:	e4 96       	adiw	r28, 0x34	; 52
    22e0:	ef ad       	ldd	r30, Y+63	; 0x3f
    22e2:	e4 97       	sbiw	r28, 0x34	; 52
    22e4:	ee 23       	and	r30, r30
    22e6:	c1 f6       	brne	.-80     	; 0x2298 <main+0x3c>
	PORT_voidInit();
    22e8:	0e 94 9b 05 	call	0xb36	; 0xb36 <PORT_voidInit>
	LCD_voidInit();
    22ec:	0e 94 04 0c 	call	0x1808	; 0x1808 <LCD_voidInit>
	LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL0);
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	60 e0       	ldi	r22, 0x00	; 0
    22f4:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_voidGoToXY>
	LCD_u8DisplayString("________________");
    22f8:	80 e6       	ldi	r24, 0x60	; 96
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	0e 94 84 10 	call	0x2108	; 0x2108 <LCD_u8DisplayString>
	LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL0);
    2300:	80 e4       	ldi	r24, 0x40	; 64
    2302:	60 e0       	ldi	r22, 0x00	; 0
    2304:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_voidGoToXY>
	LCD_u8DisplayString("________________");
    2308:	80 e6       	ldi	r24, 0x60	; 96
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	0e 94 84 10 	call	0x2108	; 0x2108 <LCD_u8DisplayString>
		for(u8 iterator = 0;iterator < 32;iterator++)
    2310:	fe 01       	movw	r30, r28
    2312:	ea 59       	subi	r30, 0x9A	; 154
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	10 82       	st	Z, r1
    2318:	a6 c1       	rjmp	.+844    	; 0x2666 <main+0x40a>
		{
			if(iterator < 16)
    231a:	fe 01       	movw	r30, r28
    231c:	ea 59       	subi	r30, 0x9A	; 154
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	80 81       	ld	r24, Z
    2322:	80 31       	cpi	r24, 0x10	; 16
    2324:	08 f0       	brcs	.+2      	; 0x2328 <main+0xcc>
    2326:	c9 c0       	rjmp	.+402    	; 0x24ba <main+0x25e>
			{
				LCD_voidCreateCustomCharacter(local_u8CustArr,0,LCD_u8_ROW1,iterator);
    2328:	ce 01       	movw	r24, r28
    232a:	89 59       	subi	r24, 0x99	; 153
    232c:	9f 4f       	sbci	r25, 0xFF	; 255
    232e:	fe 01       	movw	r30, r28
    2330:	ea 59       	subi	r30, 0x9A	; 154
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	40 e0       	ldi	r20, 0x00	; 0
    2338:	20 81       	ld	r18, Z
    233a:	0e 94 32 10 	call	0x2064	; 0x2064 <LCD_voidCreateCustomCharacter>
    233e:	fe 01       	movw	r30, r28
    2340:	e1 5a       	subi	r30, 0xA1	; 161
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	a6 e1       	ldi	r26, 0x16	; 22
    234a:	b3 e4       	ldi	r27, 0x43	; 67
    234c:	80 83       	st	Z, r24
    234e:	91 83       	std	Z+1, r25	; 0x01
    2350:	a2 83       	std	Z+2, r26	; 0x02
    2352:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2354:	8e 01       	movw	r16, r28
    2356:	05 5a       	subi	r16, 0xA5	; 165
    2358:	1f 4f       	sbci	r17, 0xFF	; 255
    235a:	fe 01       	movw	r30, r28
    235c:	e1 5a       	subi	r30, 0xA1	; 161
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	60 81       	ld	r22, Z
    2362:	71 81       	ldd	r23, Z+1	; 0x01
    2364:	82 81       	ldd	r24, Z+2	; 0x02
    2366:	93 81       	ldd	r25, Z+3	; 0x03
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	4a ef       	ldi	r20, 0xFA	; 250
    236e:	54 e4       	ldi	r21, 0x44	; 68
    2370:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	f8 01       	movw	r30, r16
    237a:	80 83       	st	Z, r24
    237c:	91 83       	std	Z+1, r25	; 0x01
    237e:	a2 83       	std	Z+2, r26	; 0x02
    2380:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2382:	fe 01       	movw	r30, r28
    2384:	e5 5a       	subi	r30, 0xA5	; 165
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	60 81       	ld	r22, Z
    238a:	71 81       	ldd	r23, Z+1	; 0x01
    238c:	82 81       	ldd	r24, Z+2	; 0x02
    238e:	93 81       	ldd	r25, Z+3	; 0x03
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e8       	ldi	r20, 0x80	; 128
    2396:	5f e3       	ldi	r21, 0x3F	; 63
    2398:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    239c:	88 23       	and	r24, r24
    239e:	44 f4       	brge	.+16     	; 0x23b0 <main+0x154>
		__ticks = 1;
    23a0:	fe 01       	movw	r30, r28
    23a2:	e7 5a       	subi	r30, 0xA7	; 167
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	80 83       	st	Z, r24
    23ae:	64 c0       	rjmp	.+200    	; 0x2478 <main+0x21c>
	else if (__tmp > 65535)
    23b0:	fe 01       	movw	r30, r28
    23b2:	e5 5a       	subi	r30, 0xA5	; 165
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	60 81       	ld	r22, Z
    23b8:	71 81       	ldd	r23, Z+1	; 0x01
    23ba:	82 81       	ldd	r24, Z+2	; 0x02
    23bc:	93 81       	ldd	r25, Z+3	; 0x03
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	3f ef       	ldi	r19, 0xFF	; 255
    23c2:	4f e7       	ldi	r20, 0x7F	; 127
    23c4:	57 e4       	ldi	r21, 0x47	; 71
    23c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23ca:	18 16       	cp	r1, r24
    23cc:	0c f0       	brlt	.+2      	; 0x23d0 <main+0x174>
    23ce:	43 c0       	rjmp	.+134    	; 0x2456 <main+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d0:	fe 01       	movw	r30, r28
    23d2:	e1 5a       	subi	r30, 0xA1	; 161
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	60 81       	ld	r22, Z
    23d8:	71 81       	ldd	r23, Z+1	; 0x01
    23da:	82 81       	ldd	r24, Z+2	; 0x02
    23dc:	93 81       	ldd	r25, Z+3	; 0x03
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e2       	ldi	r20, 0x20	; 32
    23e4:	51 e4       	ldi	r21, 0x41	; 65
    23e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	8e 01       	movw	r16, r28
    23f0:	07 5a       	subi	r16, 0xA7	; 167
    23f2:	1f 4f       	sbci	r17, 0xFF	; 255
    23f4:	bc 01       	movw	r22, r24
    23f6:	cd 01       	movw	r24, r26
    23f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	f8 01       	movw	r30, r16
    2402:	91 83       	std	Z+1, r25	; 0x01
    2404:	80 83       	st	Z, r24
    2406:	1f c0       	rjmp	.+62     	; 0x2446 <main+0x1ea>
    2408:	fe 01       	movw	r30, r28
    240a:	e9 5a       	subi	r30, 0xA9	; 169
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	88 ec       	ldi	r24, 0xC8	; 200
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	80 83       	st	Z, r24
    2416:	fe 01       	movw	r30, r28
    2418:	e9 5a       	subi	r30, 0xA9	; 169
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	80 81       	ld	r24, Z
    241e:	91 81       	ldd	r25, Z+1	; 0x01
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	f1 f7       	brne	.-4      	; 0x2420 <main+0x1c4>
    2424:	fe 01       	movw	r30, r28
    2426:	e9 5a       	subi	r30, 0xA9	; 169
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	91 83       	std	Z+1, r25	; 0x01
    242c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242e:	de 01       	movw	r26, r28
    2430:	a7 5a       	subi	r26, 0xA7	; 167
    2432:	bf 4f       	sbci	r27, 0xFF	; 255
    2434:	fe 01       	movw	r30, r28
    2436:	e7 5a       	subi	r30, 0xA7	; 167
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	80 81       	ld	r24, Z
    243c:	91 81       	ldd	r25, Z+1	; 0x01
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	11 96       	adiw	r26, 0x01	; 1
    2442:	9c 93       	st	X, r25
    2444:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2446:	fe 01       	movw	r30, r28
    2448:	e7 5a       	subi	r30, 0xA7	; 167
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	80 81       	ld	r24, Z
    244e:	91 81       	ldd	r25, Z+1	; 0x01
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	d1 f6       	brne	.-76     	; 0x2408 <main+0x1ac>
    2454:	27 c0       	rjmp	.+78     	; 0x24a4 <main+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2456:	8e 01       	movw	r16, r28
    2458:	07 5a       	subi	r16, 0xA7	; 167
    245a:	1f 4f       	sbci	r17, 0xFF	; 255
    245c:	fe 01       	movw	r30, r28
    245e:	e5 5a       	subi	r30, 0xA5	; 165
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	60 81       	ld	r22, Z
    2464:	71 81       	ldd	r23, Z+1	; 0x01
    2466:	82 81       	ldd	r24, Z+2	; 0x02
    2468:	93 81       	ldd	r25, Z+3	; 0x03
    246a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	f8 01       	movw	r30, r16
    2474:	91 83       	std	Z+1, r25	; 0x01
    2476:	80 83       	st	Z, r24
    2478:	de 01       	movw	r26, r28
    247a:	ab 5a       	subi	r26, 0xAB	; 171
    247c:	bf 4f       	sbci	r27, 0xFF	; 255
    247e:	fe 01       	movw	r30, r28
    2480:	e7 5a       	subi	r30, 0xA7	; 167
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	80 81       	ld	r24, Z
    2486:	91 81       	ldd	r25, Z+1	; 0x01
    2488:	8d 93       	st	X+, r24
    248a:	9c 93       	st	X, r25
    248c:	fe 01       	movw	r30, r28
    248e:	eb 5a       	subi	r30, 0xAB	; 171
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	80 81       	ld	r24, Z
    2494:	91 81       	ldd	r25, Z+1	; 0x01
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <main+0x23a>
    249a:	fe 01       	movw	r30, r28
    249c:	eb 5a       	subi	r30, 0xAB	; 171
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	80 83       	st	Z, r24
				_delay_ms(150);
				LCD_voidGoToXY(LCD_u8_ROW1,iterator);
    24a4:	fe 01       	movw	r30, r28
    24a6:	ea 59       	subi	r30, 0x9A	; 154
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	60 81       	ld	r22, Z
    24ae:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_voidGoToXY>
				LCD_voidDisplayCharacter('_');
    24b2:	8f e5       	ldi	r24, 0x5F	; 95
    24b4:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_voidDisplayCharacter>
    24b8:	cd c0       	rjmp	.+410    	; 0x2654 <main+0x3f8>
			}
			else
			{
				LCD_voidCreateCustomCharacter(local_u8CustArr,0,LCD_u8_ROW2,iterator-16);
    24ba:	fe 01       	movw	r30, r28
    24bc:	ea 59       	subi	r30, 0x9A	; 154
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	80 81       	ld	r24, Z
    24c2:	28 2f       	mov	r18, r24
    24c4:	20 51       	subi	r18, 0x10	; 16
    24c6:	ce 01       	movw	r24, r28
    24c8:	89 59       	subi	r24, 0x99	; 153
    24ca:	9f 4f       	sbci	r25, 0xFF	; 255
    24cc:	60 e0       	ldi	r22, 0x00	; 0
    24ce:	40 e4       	ldi	r20, 0x40	; 64
    24d0:	0e 94 32 10 	call	0x2064	; 0x2064 <LCD_voidCreateCustomCharacter>
    24d4:	fe 01       	movw	r30, r28
    24d6:	ef 5a       	subi	r30, 0xAF	; 175
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	a6 e1       	ldi	r26, 0x16	; 22
    24e0:	b3 e4       	ldi	r27, 0x43	; 67
    24e2:	80 83       	st	Z, r24
    24e4:	91 83       	std	Z+1, r25	; 0x01
    24e6:	a2 83       	std	Z+2, r26	; 0x02
    24e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ea:	8e 01       	movw	r16, r28
    24ec:	03 5b       	subi	r16, 0xB3	; 179
    24ee:	1f 4f       	sbci	r17, 0xFF	; 255
    24f0:	fe 01       	movw	r30, r28
    24f2:	ef 5a       	subi	r30, 0xAF	; 175
    24f4:	ff 4f       	sbci	r31, 0xFF	; 255
    24f6:	60 81       	ld	r22, Z
    24f8:	71 81       	ldd	r23, Z+1	; 0x01
    24fa:	82 81       	ldd	r24, Z+2	; 0x02
    24fc:	93 81       	ldd	r25, Z+3	; 0x03
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	4a ef       	ldi	r20, 0xFA	; 250
    2504:	54 e4       	ldi	r21, 0x44	; 68
    2506:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	f8 01       	movw	r30, r16
    2510:	80 83       	st	Z, r24
    2512:	91 83       	std	Z+1, r25	; 0x01
    2514:	a2 83       	std	Z+2, r26	; 0x02
    2516:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2518:	fe 01       	movw	r30, r28
    251a:	e3 5b       	subi	r30, 0xB3	; 179
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	60 81       	ld	r22, Z
    2520:	71 81       	ldd	r23, Z+1	; 0x01
    2522:	82 81       	ldd	r24, Z+2	; 0x02
    2524:	93 81       	ldd	r25, Z+3	; 0x03
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	40 e8       	ldi	r20, 0x80	; 128
    252c:	5f e3       	ldi	r21, 0x3F	; 63
    252e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2532:	88 23       	and	r24, r24
    2534:	44 f4       	brge	.+16     	; 0x2546 <main+0x2ea>
		__ticks = 1;
    2536:	fe 01       	movw	r30, r28
    2538:	e5 5b       	subi	r30, 0xB5	; 181
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	91 83       	std	Z+1, r25	; 0x01
    2542:	80 83       	st	Z, r24
    2544:	64 c0       	rjmp	.+200    	; 0x260e <main+0x3b2>
	else if (__tmp > 65535)
    2546:	fe 01       	movw	r30, r28
    2548:	e3 5b       	subi	r30, 0xB3	; 179
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	60 81       	ld	r22, Z
    254e:	71 81       	ldd	r23, Z+1	; 0x01
    2550:	82 81       	ldd	r24, Z+2	; 0x02
    2552:	93 81       	ldd	r25, Z+3	; 0x03
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	3f ef       	ldi	r19, 0xFF	; 255
    2558:	4f e7       	ldi	r20, 0x7F	; 127
    255a:	57 e4       	ldi	r21, 0x47	; 71
    255c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2560:	18 16       	cp	r1, r24
    2562:	0c f0       	brlt	.+2      	; 0x2566 <main+0x30a>
    2564:	43 c0       	rjmp	.+134    	; 0x25ec <main+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2566:	fe 01       	movw	r30, r28
    2568:	ef 5a       	subi	r30, 0xAF	; 175
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	60 81       	ld	r22, Z
    256e:	71 81       	ldd	r23, Z+1	; 0x01
    2570:	82 81       	ldd	r24, Z+2	; 0x02
    2572:	93 81       	ldd	r25, Z+3	; 0x03
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e2       	ldi	r20, 0x20	; 32
    257a:	51 e4       	ldi	r21, 0x41	; 65
    257c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	8e 01       	movw	r16, r28
    2586:	05 5b       	subi	r16, 0xB5	; 181
    2588:	1f 4f       	sbci	r17, 0xFF	; 255
    258a:	bc 01       	movw	r22, r24
    258c:	cd 01       	movw	r24, r26
    258e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	f8 01       	movw	r30, r16
    2598:	91 83       	std	Z+1, r25	; 0x01
    259a:	80 83       	st	Z, r24
    259c:	1f c0       	rjmp	.+62     	; 0x25dc <main+0x380>
    259e:	fe 01       	movw	r30, r28
    25a0:	e7 5b       	subi	r30, 0xB7	; 183
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	88 ec       	ldi	r24, 0xC8	; 200
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	91 83       	std	Z+1, r25	; 0x01
    25aa:	80 83       	st	Z, r24
    25ac:	fe 01       	movw	r30, r28
    25ae:	e7 5b       	subi	r30, 0xB7	; 183
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	80 81       	ld	r24, Z
    25b4:	91 81       	ldd	r25, Z+1	; 0x01
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <main+0x35a>
    25ba:	fe 01       	movw	r30, r28
    25bc:	e7 5b       	subi	r30, 0xB7	; 183
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	91 83       	std	Z+1, r25	; 0x01
    25c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c4:	de 01       	movw	r26, r28
    25c6:	a5 5b       	subi	r26, 0xB5	; 181
    25c8:	bf 4f       	sbci	r27, 0xFF	; 255
    25ca:	fe 01       	movw	r30, r28
    25cc:	e5 5b       	subi	r30, 0xB5	; 181
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	80 81       	ld	r24, Z
    25d2:	91 81       	ldd	r25, Z+1	; 0x01
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	11 96       	adiw	r26, 0x01	; 1
    25d8:	9c 93       	st	X, r25
    25da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25dc:	fe 01       	movw	r30, r28
    25de:	e5 5b       	subi	r30, 0xB5	; 181
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	80 81       	ld	r24, Z
    25e4:	91 81       	ldd	r25, Z+1	; 0x01
    25e6:	00 97       	sbiw	r24, 0x00	; 0
    25e8:	d1 f6       	brne	.-76     	; 0x259e <main+0x342>
    25ea:	27 c0       	rjmp	.+78     	; 0x263a <main+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ec:	8e 01       	movw	r16, r28
    25ee:	05 5b       	subi	r16, 0xB5	; 181
    25f0:	1f 4f       	sbci	r17, 0xFF	; 255
    25f2:	fe 01       	movw	r30, r28
    25f4:	e3 5b       	subi	r30, 0xB3	; 179
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	60 81       	ld	r22, Z
    25fa:	71 81       	ldd	r23, Z+1	; 0x01
    25fc:	82 81       	ldd	r24, Z+2	; 0x02
    25fe:	93 81       	ldd	r25, Z+3	; 0x03
    2600:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	f8 01       	movw	r30, r16
    260a:	91 83       	std	Z+1, r25	; 0x01
    260c:	80 83       	st	Z, r24
    260e:	de 01       	movw	r26, r28
    2610:	a9 5b       	subi	r26, 0xB9	; 185
    2612:	bf 4f       	sbci	r27, 0xFF	; 255
    2614:	fe 01       	movw	r30, r28
    2616:	e5 5b       	subi	r30, 0xB5	; 181
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	80 81       	ld	r24, Z
    261c:	91 81       	ldd	r25, Z+1	; 0x01
    261e:	8d 93       	st	X+, r24
    2620:	9c 93       	st	X, r25
    2622:	fe 01       	movw	r30, r28
    2624:	e9 5b       	subi	r30, 0xB9	; 185
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	80 81       	ld	r24, Z
    262a:	91 81       	ldd	r25, Z+1	; 0x01
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <main+0x3d0>
    2630:	fe 01       	movw	r30, r28
    2632:	e9 5b       	subi	r30, 0xB9	; 185
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	91 83       	std	Z+1, r25	; 0x01
    2638:	80 83       	st	Z, r24
				_delay_ms(150);
				LCD_voidGoToXY(LCD_u8_ROW2,iterator-16);
    263a:	fe 01       	movw	r30, r28
    263c:	ea 59       	subi	r30, 0x9A	; 154
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	80 81       	ld	r24, Z
    2642:	98 2f       	mov	r25, r24
    2644:	90 51       	subi	r25, 0x10	; 16
    2646:	80 e4       	ldi	r24, 0x40	; 64
    2648:	69 2f       	mov	r22, r25
    264a:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_voidGoToXY>
				LCD_voidDisplayCharacter('_');
    264e:	8f e5       	ldi	r24, 0x5F	; 95
    2650:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_voidDisplayCharacter>
	LCD_voidInit();
	LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL0);
	LCD_u8DisplayString("________________");
	LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL0);
	LCD_u8DisplayString("________________");
		for(u8 iterator = 0;iterator < 32;iterator++)
    2654:	de 01       	movw	r26, r28
    2656:	aa 59       	subi	r26, 0x9A	; 154
    2658:	bf 4f       	sbci	r27, 0xFF	; 255
    265a:	fe 01       	movw	r30, r28
    265c:	ea 59       	subi	r30, 0x9A	; 154
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	80 81       	ld	r24, Z
    2662:	8f 5f       	subi	r24, 0xFF	; 255
    2664:	8c 93       	st	X, r24
    2666:	fe 01       	movw	r30, r28
    2668:	ea 59       	subi	r30, 0x9A	; 154
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	80 81       	ld	r24, Z
    266e:	80 32       	cpi	r24, 0x20	; 32
    2670:	08 f4       	brcc	.+2      	; 0x2674 <main+0x418>
    2672:	53 ce       	rjmp	.-858    	; 0x231a <main+0xbe>
				_delay_ms(150);
				LCD_voidGoToXY(LCD_u8_ROW2,iterator-16);
				LCD_voidDisplayCharacter('_');
			}
		}
		LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL0);
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	60 e0       	ldi	r22, 0x00	; 0
    2678:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_voidGoToXY>
		LCD_u8DisplayString("_______ ________");
    267c:	81 e7       	ldi	r24, 0x71	; 113
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	0e 94 84 10 	call	0x2108	; 0x2108 <LCD_u8DisplayString>
		LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL0);
    2684:	80 e4       	ldi	r24, 0x40	; 64
    2686:	60 e0       	ldi	r22, 0x00	; 0
    2688:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_voidGoToXY>
		LCD_u8DisplayString("________________");
    268c:	80 e6       	ldi	r24, 0x60	; 96
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	0e 94 84 10 	call	0x2108	; 0x2108 <LCD_u8DisplayString>
		for(u8 count = 0;count < 16;count++)
    2694:	fe 01       	movw	r30, r28
    2696:	eb 59       	subi	r30, 0x9B	; 155
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	10 82       	st	Z, r1
    269c:	37 c1       	rjmp	.+622    	; 0x290c <main+0x6b0>
		{
			if(count < 8)
    269e:	fe 01       	movw	r30, r28
    26a0:	eb 59       	subi	r30, 0x9B	; 155
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	80 81       	ld	r24, Z
    26a6:	88 30       	cpi	r24, 0x08	; 8
    26a8:	08 f0       	brcs	.+2      	; 0x26ac <main+0x450>
    26aa:	9b c0       	rjmp	.+310    	; 0x27e2 <main+0x586>
			{
				LCD_voidCreateCustomCharacter(local_u8CustArr,0,LCD_u8_ROW1,count);
    26ac:	ce 01       	movw	r24, r28
    26ae:	89 59       	subi	r24, 0x99	; 153
    26b0:	9f 4f       	sbci	r25, 0xFF	; 255
    26b2:	fe 01       	movw	r30, r28
    26b4:	eb 59       	subi	r30, 0x9B	; 155
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	60 e0       	ldi	r22, 0x00	; 0
    26ba:	40 e0       	ldi	r20, 0x00	; 0
    26bc:	20 81       	ld	r18, Z
    26be:	0e 94 32 10 	call	0x2064	; 0x2064 <LCD_voidCreateCustomCharacter>
    26c2:	fe 01       	movw	r30, r28
    26c4:	ed 5b       	subi	r30, 0xBD	; 189
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	a6 e1       	ldi	r26, 0x16	; 22
    26ce:	b3 e4       	ldi	r27, 0x43	; 67
    26d0:	80 83       	st	Z, r24
    26d2:	91 83       	std	Z+1, r25	; 0x01
    26d4:	a2 83       	std	Z+2, r26	; 0x02
    26d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d8:	8e 01       	movw	r16, r28
    26da:	01 5c       	subi	r16, 0xC1	; 193
    26dc:	1f 4f       	sbci	r17, 0xFF	; 255
    26de:	fe 01       	movw	r30, r28
    26e0:	ed 5b       	subi	r30, 0xBD	; 189
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	60 81       	ld	r22, Z
    26e6:	71 81       	ldd	r23, Z+1	; 0x01
    26e8:	82 81       	ldd	r24, Z+2	; 0x02
    26ea:	93 81       	ldd	r25, Z+3	; 0x03
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	4a ef       	ldi	r20, 0xFA	; 250
    26f2:	54 e4       	ldi	r21, 0x44	; 68
    26f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	f8 01       	movw	r30, r16
    26fe:	80 83       	st	Z, r24
    2700:	91 83       	std	Z+1, r25	; 0x01
    2702:	a2 83       	std	Z+2, r26	; 0x02
    2704:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2706:	fe 01       	movw	r30, r28
    2708:	ff 96       	adiw	r30, 0x3f	; 63
    270a:	60 81       	ld	r22, Z
    270c:	71 81       	ldd	r23, Z+1	; 0x01
    270e:	82 81       	ldd	r24, Z+2	; 0x02
    2710:	93 81       	ldd	r25, Z+3	; 0x03
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 e8       	ldi	r20, 0x80	; 128
    2718:	5f e3       	ldi	r21, 0x3F	; 63
    271a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    271e:	88 23       	and	r24, r24
    2720:	2c f4       	brge	.+10     	; 0x272c <main+0x4d0>
		__ticks = 1;
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	9e af       	std	Y+62, r25	; 0x3e
    2728:	8d af       	std	Y+61, r24	; 0x3d
    272a:	46 c0       	rjmp	.+140    	; 0x27b8 <main+0x55c>
	else if (__tmp > 65535)
    272c:	fe 01       	movw	r30, r28
    272e:	ff 96       	adiw	r30, 0x3f	; 63
    2730:	60 81       	ld	r22, Z
    2732:	71 81       	ldd	r23, Z+1	; 0x01
    2734:	82 81       	ldd	r24, Z+2	; 0x02
    2736:	93 81       	ldd	r25, Z+3	; 0x03
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	3f ef       	ldi	r19, 0xFF	; 255
    273c:	4f e7       	ldi	r20, 0x7F	; 127
    273e:	57 e4       	ldi	r21, 0x47	; 71
    2740:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2744:	18 16       	cp	r1, r24
    2746:	64 f5       	brge	.+88     	; 0x27a0 <main+0x544>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2748:	fe 01       	movw	r30, r28
    274a:	ed 5b       	subi	r30, 0xBD	; 189
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	60 81       	ld	r22, Z
    2750:	71 81       	ldd	r23, Z+1	; 0x01
    2752:	82 81       	ldd	r24, Z+2	; 0x02
    2754:	93 81       	ldd	r25, Z+3	; 0x03
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e2       	ldi	r20, 0x20	; 32
    275c:	51 e4       	ldi	r21, 0x41	; 65
    275e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9e af       	std	Y+62, r25	; 0x3e
    2774:	8d af       	std	Y+61, r24	; 0x3d
    2776:	0f c0       	rjmp	.+30     	; 0x2796 <main+0x53a>
    2778:	88 ec       	ldi	r24, 0xC8	; 200
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	9c af       	std	Y+60, r25	; 0x3c
    277e:	8b af       	std	Y+59, r24	; 0x3b
    2780:	8b ad       	ldd	r24, Y+59	; 0x3b
    2782:	9c ad       	ldd	r25, Y+60	; 0x3c
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <main+0x528>
    2788:	9c af       	std	Y+60, r25	; 0x3c
    278a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278c:	8d ad       	ldd	r24, Y+61	; 0x3d
    278e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	9e af       	std	Y+62, r25	; 0x3e
    2794:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2796:	8d ad       	ldd	r24, Y+61	; 0x3d
    2798:	9e ad       	ldd	r25, Y+62	; 0x3e
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	69 f7       	brne	.-38     	; 0x2778 <main+0x51c>
    279e:	16 c0       	rjmp	.+44     	; 0x27cc <main+0x570>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a0:	fe 01       	movw	r30, r28
    27a2:	ff 96       	adiw	r30, 0x3f	; 63
    27a4:	60 81       	ld	r22, Z
    27a6:	71 81       	ldd	r23, Z+1	; 0x01
    27a8:	82 81       	ldd	r24, Z+2	; 0x02
    27aa:	93 81       	ldd	r25, Z+3	; 0x03
    27ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	9e af       	std	Y+62, r25	; 0x3e
    27b6:	8d af       	std	Y+61, r24	; 0x3d
    27b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    27ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    27bc:	9a af       	std	Y+58, r25	; 0x3a
    27be:	89 af       	std	Y+57, r24	; 0x39
    27c0:	89 ad       	ldd	r24, Y+57	; 0x39
    27c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	f1 f7       	brne	.-4      	; 0x27c4 <main+0x568>
    27c8:	9a af       	std	Y+58, r25	; 0x3a
    27ca:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(150);
				LCD_voidGoToXY(LCD_u8_ROW1,count);
    27cc:	fe 01       	movw	r30, r28
    27ce:	eb 59       	subi	r30, 0x9B	; 155
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	60 81       	ld	r22, Z
    27d6:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_voidGoToXY>
				LCD_voidDisplayCharacter('_');
    27da:	8f e5       	ldi	r24, 0x5F	; 95
    27dc:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_voidDisplayCharacter>
    27e0:	8c c0       	rjmp	.+280    	; 0x28fa <main+0x69e>
			}
			else
			{
				LCD_voidCreateCustomCharacter(local_u8CustArr,0,LCD_u8_ROW2,count-1);
    27e2:	fe 01       	movw	r30, r28
    27e4:	eb 59       	subi	r30, 0x9B	; 155
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	80 81       	ld	r24, Z
    27ea:	28 2f       	mov	r18, r24
    27ec:	21 50       	subi	r18, 0x01	; 1
    27ee:	ce 01       	movw	r24, r28
    27f0:	89 59       	subi	r24, 0x99	; 153
    27f2:	9f 4f       	sbci	r25, 0xFF	; 255
    27f4:	60 e0       	ldi	r22, 0x00	; 0
    27f6:	40 e4       	ldi	r20, 0x40	; 64
    27f8:	0e 94 32 10 	call	0x2064	; 0x2064 <LCD_voidCreateCustomCharacter>
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	a6 e1       	ldi	r26, 0x16	; 22
    2802:	b3 e4       	ldi	r27, 0x43	; 67
    2804:	8d ab       	std	Y+53, r24	; 0x35
    2806:	9e ab       	std	Y+54, r25	; 0x36
    2808:	af ab       	std	Y+55, r26	; 0x37
    280a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    280c:	6d a9       	ldd	r22, Y+53	; 0x35
    280e:	7e a9       	ldd	r23, Y+54	; 0x36
    2810:	8f a9       	ldd	r24, Y+55	; 0x37
    2812:	98 ad       	ldd	r25, Y+56	; 0x38
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	4a ef       	ldi	r20, 0xFA	; 250
    281a:	54 e4       	ldi	r21, 0x44	; 68
    281c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	89 ab       	std	Y+49, r24	; 0x31
    2826:	9a ab       	std	Y+50, r25	; 0x32
    2828:	ab ab       	std	Y+51, r26	; 0x33
    282a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    282c:	69 a9       	ldd	r22, Y+49	; 0x31
    282e:	7a a9       	ldd	r23, Y+50	; 0x32
    2830:	8b a9       	ldd	r24, Y+51	; 0x33
    2832:	9c a9       	ldd	r25, Y+52	; 0x34
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	40 e8       	ldi	r20, 0x80	; 128
    283a:	5f e3       	ldi	r21, 0x3F	; 63
    283c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2840:	88 23       	and	r24, r24
    2842:	2c f4       	brge	.+10     	; 0x284e <main+0x5f2>
		__ticks = 1;
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	98 ab       	std	Y+48, r25	; 0x30
    284a:	8f a7       	std	Y+47, r24	; 0x2f
    284c:	3f c0       	rjmp	.+126    	; 0x28cc <main+0x670>
	else if (__tmp > 65535)
    284e:	69 a9       	ldd	r22, Y+49	; 0x31
    2850:	7a a9       	ldd	r23, Y+50	; 0x32
    2852:	8b a9       	ldd	r24, Y+51	; 0x33
    2854:	9c a9       	ldd	r25, Y+52	; 0x34
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	3f ef       	ldi	r19, 0xFF	; 255
    285a:	4f e7       	ldi	r20, 0x7F	; 127
    285c:	57 e4       	ldi	r21, 0x47	; 71
    285e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2862:	18 16       	cp	r1, r24
    2864:	4c f5       	brge	.+82     	; 0x28b8 <main+0x65c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2866:	6d a9       	ldd	r22, Y+53	; 0x35
    2868:	7e a9       	ldd	r23, Y+54	; 0x36
    286a:	8f a9       	ldd	r24, Y+55	; 0x37
    286c:	98 ad       	ldd	r25, Y+56	; 0x38
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	40 e2       	ldi	r20, 0x20	; 32
    2874:	51 e4       	ldi	r21, 0x41	; 65
    2876:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	bc 01       	movw	r22, r24
    2880:	cd 01       	movw	r24, r26
    2882:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	98 ab       	std	Y+48, r25	; 0x30
    288c:	8f a7       	std	Y+47, r24	; 0x2f
    288e:	0f c0       	rjmp	.+30     	; 0x28ae <main+0x652>
    2890:	88 ec       	ldi	r24, 0xC8	; 200
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	9e a7       	std	Y+46, r25	; 0x2e
    2896:	8d a7       	std	Y+45, r24	; 0x2d
    2898:	8d a5       	ldd	r24, Y+45	; 0x2d
    289a:	9e a5       	ldd	r25, Y+46	; 0x2e
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	f1 f7       	brne	.-4      	; 0x289c <main+0x640>
    28a0:	9e a7       	std	Y+46, r25	; 0x2e
    28a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    28a6:	98 a9       	ldd	r25, Y+48	; 0x30
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	98 ab       	std	Y+48, r25	; 0x30
    28ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    28b0:	98 a9       	ldd	r25, Y+48	; 0x30
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	69 f7       	brne	.-38     	; 0x2890 <main+0x634>
    28b6:	14 c0       	rjmp	.+40     	; 0x28e0 <main+0x684>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b8:	69 a9       	ldd	r22, Y+49	; 0x31
    28ba:	7a a9       	ldd	r23, Y+50	; 0x32
    28bc:	8b a9       	ldd	r24, Y+51	; 0x33
    28be:	9c a9       	ldd	r25, Y+52	; 0x34
    28c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	98 ab       	std	Y+48, r25	; 0x30
    28ca:	8f a7       	std	Y+47, r24	; 0x2f
    28cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ce:	98 a9       	ldd	r25, Y+48	; 0x30
    28d0:	9c a7       	std	Y+44, r25	; 0x2c
    28d2:	8b a7       	std	Y+43, r24	; 0x2b
    28d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    28d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	f1 f7       	brne	.-4      	; 0x28d8 <main+0x67c>
    28dc:	9c a7       	std	Y+44, r25	; 0x2c
    28de:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(150);
				LCD_voidGoToXY(LCD_u8_ROW2,count-1);
    28e0:	fe 01       	movw	r30, r28
    28e2:	eb 59       	subi	r30, 0x9B	; 155
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	80 81       	ld	r24, Z
    28e8:	98 2f       	mov	r25, r24
    28ea:	91 50       	subi	r25, 0x01	; 1
    28ec:	80 e4       	ldi	r24, 0x40	; 64
    28ee:	69 2f       	mov	r22, r25
    28f0:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_voidGoToXY>
				LCD_voidDisplayCharacter('_');
    28f4:	8f e5       	ldi	r24, 0x5F	; 95
    28f6:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_voidDisplayCharacter>
		}
		LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL0);
		LCD_u8DisplayString("_______ ________");
		LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL0);
		LCD_u8DisplayString("________________");
		for(u8 count = 0;count < 16;count++)
    28fa:	de 01       	movw	r26, r28
    28fc:	ab 59       	subi	r26, 0x9B	; 155
    28fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2900:	fe 01       	movw	r30, r28
    2902:	eb 59       	subi	r30, 0x9B	; 155
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	80 81       	ld	r24, Z
    2908:	8f 5f       	subi	r24, 0xFF	; 255
    290a:	8c 93       	st	X, r24
    290c:	fe 01       	movw	r30, r28
    290e:	eb 59       	subi	r30, 0x9B	; 155
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	80 81       	ld	r24, Z
    2914:	80 31       	cpi	r24, 0x10	; 16
    2916:	08 f4       	brcc	.+2      	; 0x291a <main+0x6be>
    2918:	c2 ce       	rjmp	.-636    	; 0x269e <main+0x442>
				_delay_ms(150);
				LCD_voidGoToXY(LCD_u8_ROW2,count-1);
				LCD_voidDisplayCharacter('_');
			}
		}
		LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL0);
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	60 e0       	ldi	r22, 0x00	; 0
    291e:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_voidGoToXY>
		LCD_u8DisplayString("_______ ________");
    2922:	81 e7       	ldi	r24, 0x71	; 113
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	0e 94 84 10 	call	0x2108	; 0x2108 <LCD_u8DisplayString>
		LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL0);
    292a:	80 e4       	ldi	r24, 0x40	; 64
    292c:	60 e0       	ldi	r22, 0x00	; 0
    292e:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_voidGoToXY>
		LCD_u8DisplayString("_______/________");
    2932:	82 e8       	ldi	r24, 0x82	; 130
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	0e 94 84 10 	call	0x2108	; 0x2108 <LCD_u8DisplayString>
		for(u8 count = 0;count < 16;count++)
    293a:	fe 01       	movw	r30, r28
    293c:	ec 59       	subi	r30, 0x9C	; 156
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	10 82       	st	Z, r1
    2942:	24 c1       	rjmp	.+584    	; 0x2b8c <main+0x930>
		{
			if(count < 8)
    2944:	fe 01       	movw	r30, r28
    2946:	ec 59       	subi	r30, 0x9C	; 156
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	80 81       	ld	r24, Z
    294c:	88 30       	cpi	r24, 0x08	; 8
    294e:	08 f0       	brcs	.+2      	; 0x2952 <main+0x6f6>
    2950:	88 c0       	rjmp	.+272    	; 0x2a62 <main+0x806>
			{
				LCD_voidCreateCustomCharacter(local_u8CustArr,0,LCD_u8_ROW2,count);
    2952:	ce 01       	movw	r24, r28
    2954:	89 59       	subi	r24, 0x99	; 153
    2956:	9f 4f       	sbci	r25, 0xFF	; 255
    2958:	fe 01       	movw	r30, r28
    295a:	ec 59       	subi	r30, 0x9C	; 156
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	60 e0       	ldi	r22, 0x00	; 0
    2960:	40 e4       	ldi	r20, 0x40	; 64
    2962:	20 81       	ld	r18, Z
    2964:	0e 94 32 10 	call	0x2064	; 0x2064 <LCD_voidCreateCustomCharacter>
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	a6 e1       	ldi	r26, 0x16	; 22
    296e:	b3 e4       	ldi	r27, 0x43	; 67
    2970:	8f a3       	std	Y+39, r24	; 0x27
    2972:	98 a7       	std	Y+40, r25	; 0x28
    2974:	a9 a7       	std	Y+41, r26	; 0x29
    2976:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2978:	6f a1       	ldd	r22, Y+39	; 0x27
    297a:	78 a5       	ldd	r23, Y+40	; 0x28
    297c:	89 a5       	ldd	r24, Y+41	; 0x29
    297e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	4a ef       	ldi	r20, 0xFA	; 250
    2986:	54 e4       	ldi	r21, 0x44	; 68
    2988:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	8b a3       	std	Y+35, r24	; 0x23
    2992:	9c a3       	std	Y+36, r25	; 0x24
    2994:	ad a3       	std	Y+37, r26	; 0x25
    2996:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2998:	6b a1       	ldd	r22, Y+35	; 0x23
    299a:	7c a1       	ldd	r23, Y+36	; 0x24
    299c:	8d a1       	ldd	r24, Y+37	; 0x25
    299e:	9e a1       	ldd	r25, Y+38	; 0x26
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	40 e8       	ldi	r20, 0x80	; 128
    29a6:	5f e3       	ldi	r21, 0x3F	; 63
    29a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29ac:	88 23       	and	r24, r24
    29ae:	2c f4       	brge	.+10     	; 0x29ba <main+0x75e>
		__ticks = 1;
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	9a a3       	std	Y+34, r25	; 0x22
    29b6:	89 a3       	std	Y+33, r24	; 0x21
    29b8:	3f c0       	rjmp	.+126    	; 0x2a38 <main+0x7dc>
	else if (__tmp > 65535)
    29ba:	6b a1       	ldd	r22, Y+35	; 0x23
    29bc:	7c a1       	ldd	r23, Y+36	; 0x24
    29be:	8d a1       	ldd	r24, Y+37	; 0x25
    29c0:	9e a1       	ldd	r25, Y+38	; 0x26
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	3f ef       	ldi	r19, 0xFF	; 255
    29c6:	4f e7       	ldi	r20, 0x7F	; 127
    29c8:	57 e4       	ldi	r21, 0x47	; 71
    29ca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29ce:	18 16       	cp	r1, r24
    29d0:	4c f5       	brge	.+82     	; 0x2a24 <main+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d2:	6f a1       	ldd	r22, Y+39	; 0x27
    29d4:	78 a5       	ldd	r23, Y+40	; 0x28
    29d6:	89 a5       	ldd	r24, Y+41	; 0x29
    29d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	40 e2       	ldi	r20, 0x20	; 32
    29e0:	51 e4       	ldi	r21, 0x41	; 65
    29e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	bc 01       	movw	r22, r24
    29ec:	cd 01       	movw	r24, r26
    29ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	9a a3       	std	Y+34, r25	; 0x22
    29f8:	89 a3       	std	Y+33, r24	; 0x21
    29fa:	0f c0       	rjmp	.+30     	; 0x2a1a <main+0x7be>
    29fc:	88 ec       	ldi	r24, 0xC8	; 200
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	98 a3       	std	Y+32, r25	; 0x20
    2a02:	8f 8f       	std	Y+31, r24	; 0x1f
    2a04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a06:	98 a1       	ldd	r25, Y+32	; 0x20
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	f1 f7       	brne	.-4      	; 0x2a08 <main+0x7ac>
    2a0c:	98 a3       	std	Y+32, r25	; 0x20
    2a0e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a10:	89 a1       	ldd	r24, Y+33	; 0x21
    2a12:	9a a1       	ldd	r25, Y+34	; 0x22
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	9a a3       	std	Y+34, r25	; 0x22
    2a18:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a1c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a1e:	00 97       	sbiw	r24, 0x00	; 0
    2a20:	69 f7       	brne	.-38     	; 0x29fc <main+0x7a0>
    2a22:	14 c0       	rjmp	.+40     	; 0x2a4c <main+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a24:	6b a1       	ldd	r22, Y+35	; 0x23
    2a26:	7c a1       	ldd	r23, Y+36	; 0x24
    2a28:	8d a1       	ldd	r24, Y+37	; 0x25
    2a2a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	9a a3       	std	Y+34, r25	; 0x22
    2a36:	89 a3       	std	Y+33, r24	; 0x21
    2a38:	89 a1       	ldd	r24, Y+33	; 0x21
    2a3a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a3c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a3e:	8d 8f       	std	Y+29, r24	; 0x1d
    2a40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	f1 f7       	brne	.-4      	; 0x2a44 <main+0x7e8>
    2a48:	9e 8f       	std	Y+30, r25	; 0x1e
    2a4a:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(150);
				LCD_voidGoToXY(LCD_u8_ROW2,count);
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	ec 59       	subi	r30, 0x9C	; 156
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	80 e4       	ldi	r24, 0x40	; 64
    2a54:	60 81       	ld	r22, Z
    2a56:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_voidGoToXY>
				LCD_voidDisplayCharacter('_');
    2a5a:	8f e5       	ldi	r24, 0x5F	; 95
    2a5c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_voidDisplayCharacter>
    2a60:	8c c0       	rjmp	.+280    	; 0x2b7a <main+0x91e>
			}
			else
			{
				LCD_voidCreateCustomCharacter(local_u8CustArr,0,LCD_u8_ROW1,count-1);
    2a62:	fe 01       	movw	r30, r28
    2a64:	ec 59       	subi	r30, 0x9C	; 156
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	80 81       	ld	r24, Z
    2a6a:	28 2f       	mov	r18, r24
    2a6c:	21 50       	subi	r18, 0x01	; 1
    2a6e:	ce 01       	movw	r24, r28
    2a70:	89 59       	subi	r24, 0x99	; 153
    2a72:	9f 4f       	sbci	r25, 0xFF	; 255
    2a74:	60 e0       	ldi	r22, 0x00	; 0
    2a76:	40 e0       	ldi	r20, 0x00	; 0
    2a78:	0e 94 32 10 	call	0x2064	; 0x2064 <LCD_voidCreateCustomCharacter>
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	a6 e1       	ldi	r26, 0x16	; 22
    2a82:	b3 e4       	ldi	r27, 0x43	; 67
    2a84:	89 8f       	std	Y+25, r24	; 0x19
    2a86:	9a 8f       	std	Y+26, r25	; 0x1a
    2a88:	ab 8f       	std	Y+27, r26	; 0x1b
    2a8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	4a ef       	ldi	r20, 0xFA	; 250
    2a9a:	54 e4       	ldi	r21, 0x44	; 68
    2a9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	8d 8b       	std	Y+21, r24	; 0x15
    2aa6:	9e 8b       	std	Y+22, r25	; 0x16
    2aa8:	af 8b       	std	Y+23, r26	; 0x17
    2aaa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2aac:	6d 89       	ldd	r22, Y+21	; 0x15
    2aae:	7e 89       	ldd	r23, Y+22	; 0x16
    2ab0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	40 e8       	ldi	r20, 0x80	; 128
    2aba:	5f e3       	ldi	r21, 0x3F	; 63
    2abc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ac0:	88 23       	and	r24, r24
    2ac2:	2c f4       	brge	.+10     	; 0x2ace <main+0x872>
		__ticks = 1;
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	9c 8b       	std	Y+20, r25	; 0x14
    2aca:	8b 8b       	std	Y+19, r24	; 0x13
    2acc:	3f c0       	rjmp	.+126    	; 0x2b4c <main+0x8f0>
	else if (__tmp > 65535)
    2ace:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	3f ef       	ldi	r19, 0xFF	; 255
    2ada:	4f e7       	ldi	r20, 0x7F	; 127
    2adc:	57 e4       	ldi	r21, 0x47	; 71
    2ade:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ae2:	18 16       	cp	r1, r24
    2ae4:	4c f5       	brge	.+82     	; 0x2b38 <main+0x8dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ae8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	40 e2       	ldi	r20, 0x20	; 32
    2af4:	51 e4       	ldi	r21, 0x41	; 65
    2af6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	bc 01       	movw	r22, r24
    2b00:	cd 01       	movw	r24, r26
    2b02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	9c 8b       	std	Y+20, r25	; 0x14
    2b0c:	8b 8b       	std	Y+19, r24	; 0x13
    2b0e:	0f c0       	rjmp	.+30     	; 0x2b2e <main+0x8d2>
    2b10:	88 ec       	ldi	r24, 0xC8	; 200
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	9a 8b       	std	Y+18, r25	; 0x12
    2b16:	89 8b       	std	Y+17, r24	; 0x11
    2b18:	89 89       	ldd	r24, Y+17	; 0x11
    2b1a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	f1 f7       	brne	.-4      	; 0x2b1c <main+0x8c0>
    2b20:	9a 8b       	std	Y+18, r25	; 0x12
    2b22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b24:	8b 89       	ldd	r24, Y+19	; 0x13
    2b26:	9c 89       	ldd	r25, Y+20	; 0x14
    2b28:	01 97       	sbiw	r24, 0x01	; 1
    2b2a:	9c 8b       	std	Y+20, r25	; 0x14
    2b2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b30:	9c 89       	ldd	r25, Y+20	; 0x14
    2b32:	00 97       	sbiw	r24, 0x00	; 0
    2b34:	69 f7       	brne	.-38     	; 0x2b10 <main+0x8b4>
    2b36:	14 c0       	rjmp	.+40     	; 0x2b60 <main+0x904>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b38:	6d 89       	ldd	r22, Y+21	; 0x15
    2b3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	9c 8b       	std	Y+20, r25	; 0x14
    2b4a:	8b 8b       	std	Y+19, r24	; 0x13
    2b4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b50:	98 8b       	std	Y+16, r25	; 0x10
    2b52:	8f 87       	std	Y+15, r24	; 0x0f
    2b54:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b56:	98 89       	ldd	r25, Y+16	; 0x10
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	f1 f7       	brne	.-4      	; 0x2b58 <main+0x8fc>
    2b5c:	98 8b       	std	Y+16, r25	; 0x10
    2b5e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(150);
				LCD_voidGoToXY(LCD_u8_ROW1,count-1);
    2b60:	fe 01       	movw	r30, r28
    2b62:	ec 59       	subi	r30, 0x9C	; 156
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	80 81       	ld	r24, Z
    2b68:	98 2f       	mov	r25, r24
    2b6a:	91 50       	subi	r25, 0x01	; 1
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	69 2f       	mov	r22, r25
    2b70:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_voidGoToXY>
				LCD_voidDisplayCharacter('_');
    2b74:	8f e5       	ldi	r24, 0x5F	; 95
    2b76:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_voidDisplayCharacter>
		}
		LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL0);
		LCD_u8DisplayString("_______ ________");
		LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL0);
		LCD_u8DisplayString("_______/________");
		for(u8 count = 0;count < 16;count++)
    2b7a:	de 01       	movw	r26, r28
    2b7c:	ac 59       	subi	r26, 0x9C	; 156
    2b7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b80:	fe 01       	movw	r30, r28
    2b82:	ec 59       	subi	r30, 0x9C	; 156
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	80 81       	ld	r24, Z
    2b88:	8f 5f       	subi	r24, 0xFF	; 255
    2b8a:	8c 93       	st	X, r24
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	ec 59       	subi	r30, 0x9C	; 156
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	80 81       	ld	r24, Z
    2b94:	80 31       	cpi	r24, 0x10	; 16
    2b96:	08 f4       	brcc	.+2      	; 0x2b9a <main+0x93e>
    2b98:	d5 ce       	rjmp	.-598    	; 0x2944 <main+0x6e8>
				_delay_ms(150);
				LCD_voidGoToXY(LCD_u8_ROW1,count-1);
				LCD_voidDisplayCharacter('_');
			}
		}
		LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL0);
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	60 e0       	ldi	r22, 0x00	; 0
    2b9e:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_voidGoToXY>
		LCD_u8DisplayString("____________|___");
    2ba2:	83 e9       	ldi	r24, 0x93	; 147
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	0e 94 84 10 	call	0x2108	; 0x2108 <LCD_u8DisplayString>
		LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL0);
    2baa:	80 e4       	ldi	r24, 0x40	; 64
    2bac:	60 e0       	ldi	r22, 0x00	; 0
    2bae:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_voidGoToXY>
		LCD_u8DisplayString("________________");
    2bb2:	80 e6       	ldi	r24, 0x60	; 96
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	0e 94 84 10 	call	0x2108	; 0x2108 <LCD_u8DisplayString>
		for(u8 count = 0;count < 13;count++)
    2bba:	fe 01       	movw	r30, r28
    2bbc:	ed 59       	subi	r30, 0x9D	; 157
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	10 82       	st	Z, r1
    2bc2:	90 c0       	rjmp	.+288    	; 0x2ce4 <main+0xa88>
		{
			LCD_voidCreateCustomCharacter(local_u8CustArr,0,LCD_u8_ROW1,count);
    2bc4:	ce 01       	movw	r24, r28
    2bc6:	89 59       	subi	r24, 0x99	; 153
    2bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bca:	fe 01       	movw	r30, r28
    2bcc:	ed 59       	subi	r30, 0x9D	; 157
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	60 e0       	ldi	r22, 0x00	; 0
    2bd2:	40 e0       	ldi	r20, 0x00	; 0
    2bd4:	20 81       	ld	r18, Z
    2bd6:	0e 94 32 10 	call	0x2064	; 0x2064 <LCD_voidCreateCustomCharacter>
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	a6 e1       	ldi	r26, 0x16	; 22
    2be0:	b3 e4       	ldi	r27, 0x43	; 67
    2be2:	8b 87       	std	Y+11, r24	; 0x0b
    2be4:	9c 87       	std	Y+12, r25	; 0x0c
    2be6:	ad 87       	std	Y+13, r26	; 0x0d
    2be8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	4a ef       	ldi	r20, 0xFA	; 250
    2bf8:	54 e4       	ldi	r21, 0x44	; 68
    2bfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	8f 83       	std	Y+7, r24	; 0x07
    2c04:	98 87       	std	Y+8, r25	; 0x08
    2c06:	a9 87       	std	Y+9, r26	; 0x09
    2c08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0c:	78 85       	ldd	r23, Y+8	; 0x08
    2c0e:	89 85       	ldd	r24, Y+9	; 0x09
    2c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	40 e8       	ldi	r20, 0x80	; 128
    2c18:	5f e3       	ldi	r21, 0x3F	; 63
    2c1a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c1e:	88 23       	and	r24, r24
    2c20:	2c f4       	brge	.+10     	; 0x2c2c <main+0x9d0>
		__ticks = 1;
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	9e 83       	std	Y+6, r25	; 0x06
    2c28:	8d 83       	std	Y+5, r24	; 0x05
    2c2a:	3f c0       	rjmp	.+126    	; 0x2caa <main+0xa4e>
	else if (__tmp > 65535)
    2c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2e:	78 85       	ldd	r23, Y+8	; 0x08
    2c30:	89 85       	ldd	r24, Y+9	; 0x09
    2c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	3f ef       	ldi	r19, 0xFF	; 255
    2c38:	4f e7       	ldi	r20, 0x7F	; 127
    2c3a:	57 e4       	ldi	r21, 0x47	; 71
    2c3c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c40:	18 16       	cp	r1, r24
    2c42:	4c f5       	brge	.+82     	; 0x2c96 <main+0xa3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e2       	ldi	r20, 0x20	; 32
    2c52:	51 e4       	ldi	r21, 0x41	; 65
    2c54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	bc 01       	movw	r22, r24
    2c5e:	cd 01       	movw	r24, r26
    2c60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	9e 83       	std	Y+6, r25	; 0x06
    2c6a:	8d 83       	std	Y+5, r24	; 0x05
    2c6c:	0f c0       	rjmp	.+30     	; 0x2c8c <main+0xa30>
    2c6e:	88 ec       	ldi	r24, 0xC8	; 200
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	9c 83       	std	Y+4, r25	; 0x04
    2c74:	8b 83       	std	Y+3, r24	; 0x03
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
    2c7c:	f1 f7       	brne	.-4      	; 0x2c7a <main+0xa1e>
    2c7e:	9c 83       	std	Y+4, r25	; 0x04
    2c80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c82:	8d 81       	ldd	r24, Y+5	; 0x05
    2c84:	9e 81       	ldd	r25, Y+6	; 0x06
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	9e 83       	std	Y+6, r25	; 0x06
    2c8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	69 f7       	brne	.-38     	; 0x2c6e <main+0xa12>
    2c94:	14 c0       	rjmp	.+40     	; 0x2cbe <main+0xa62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c96:	6f 81       	ldd	r22, Y+7	; 0x07
    2c98:	78 85       	ldd	r23, Y+8	; 0x08
    2c9a:	89 85       	ldd	r24, Y+9	; 0x09
    2c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	9e 83       	std	Y+6, r25	; 0x06
    2ca8:	8d 83       	std	Y+5, r24	; 0x05
    2caa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cac:	9e 81       	ldd	r25, Y+6	; 0x06
    2cae:	9a 83       	std	Y+2, r25	; 0x02
    2cb0:	89 83       	std	Y+1, r24	; 0x01
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb6:	01 97       	sbiw	r24, 0x01	; 1
    2cb8:	f1 f7       	brne	.-4      	; 0x2cb6 <main+0xa5a>
    2cba:	9a 83       	std	Y+2, r25	; 0x02
    2cbc:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(150);
			LCD_voidGoToXY(LCD_u8_ROW1,count);
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	ed 59       	subi	r30, 0x9D	; 157
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	60 81       	ld	r22, Z
    2cc8:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_voidGoToXY>
			LCD_voidDisplayCharacter('_');
    2ccc:	8f e5       	ldi	r24, 0x5F	; 95
    2cce:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_voidDisplayCharacter>
		}
		LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL0);
		LCD_u8DisplayString("____________|___");
		LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL0);
		LCD_u8DisplayString("________________");
		for(u8 count = 0;count < 13;count++)
    2cd2:	de 01       	movw	r26, r28
    2cd4:	ad 59       	subi	r26, 0x9D	; 157
    2cd6:	bf 4f       	sbci	r27, 0xFF	; 255
    2cd8:	fe 01       	movw	r30, r28
    2cda:	ed 59       	subi	r30, 0x9D	; 157
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	80 81       	ld	r24, Z
    2ce0:	8f 5f       	subi	r24, 0xFF	; 255
    2ce2:	8c 93       	st	X, r24
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	ed 59       	subi	r30, 0x9D	; 157
    2ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cea:	80 81       	ld	r24, Z
    2cec:	8d 30       	cpi	r24, 0x0D	; 13
    2cee:	08 f4       	brcc	.+2      	; 0x2cf2 <main+0xa96>
    2cf0:	69 cf       	rjmp	.-302    	; 0x2bc4 <main+0x968>
			LCD_voidCreateCustomCharacter(local_u8CustArr,0,LCD_u8_ROW1,count);
			_delay_ms(150);
			LCD_voidGoToXY(LCD_u8_ROW1,count);
			LCD_voidDisplayCharacter('_');
		}
		LCD_voidDisplayClear();
    2cf2:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_voidDisplayClear>
		LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL3);
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	63 e0       	ldi	r22, 0x03	; 3
    2cfa:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LCD_voidGoToXY>
		LCD_u8DisplayString("H A H A !");
    2cfe:	84 ea       	ldi	r24, 0xA4	; 164
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	0e 94 84 10 	call	0x2108	; 0x2108 <LCD_u8DisplayString>
    2d06:	ff cf       	rjmp	.-2      	; 0x2d06 <main+0xaaa>

00002d08 <__udivmodqi4>:
    2d08:	99 1b       	sub	r25, r25
    2d0a:	79 e0       	ldi	r23, 0x09	; 9
    2d0c:	04 c0       	rjmp	.+8      	; 0x2d16 <__udivmodqi4_ep>

00002d0e <__udivmodqi4_loop>:
    2d0e:	99 1f       	adc	r25, r25
    2d10:	96 17       	cp	r25, r22
    2d12:	08 f0       	brcs	.+2      	; 0x2d16 <__udivmodqi4_ep>
    2d14:	96 1b       	sub	r25, r22

00002d16 <__udivmodqi4_ep>:
    2d16:	88 1f       	adc	r24, r24
    2d18:	7a 95       	dec	r23
    2d1a:	c9 f7       	brne	.-14     	; 0x2d0e <__udivmodqi4_loop>
    2d1c:	80 95       	com	r24
    2d1e:	08 95       	ret

00002d20 <__udivmodsi4>:
    2d20:	a1 e2       	ldi	r26, 0x21	; 33
    2d22:	1a 2e       	mov	r1, r26
    2d24:	aa 1b       	sub	r26, r26
    2d26:	bb 1b       	sub	r27, r27
    2d28:	fd 01       	movw	r30, r26
    2d2a:	0d c0       	rjmp	.+26     	; 0x2d46 <__udivmodsi4_ep>

00002d2c <__udivmodsi4_loop>:
    2d2c:	aa 1f       	adc	r26, r26
    2d2e:	bb 1f       	adc	r27, r27
    2d30:	ee 1f       	adc	r30, r30
    2d32:	ff 1f       	adc	r31, r31
    2d34:	a2 17       	cp	r26, r18
    2d36:	b3 07       	cpc	r27, r19
    2d38:	e4 07       	cpc	r30, r20
    2d3a:	f5 07       	cpc	r31, r21
    2d3c:	20 f0       	brcs	.+8      	; 0x2d46 <__udivmodsi4_ep>
    2d3e:	a2 1b       	sub	r26, r18
    2d40:	b3 0b       	sbc	r27, r19
    2d42:	e4 0b       	sbc	r30, r20
    2d44:	f5 0b       	sbc	r31, r21

00002d46 <__udivmodsi4_ep>:
    2d46:	66 1f       	adc	r22, r22
    2d48:	77 1f       	adc	r23, r23
    2d4a:	88 1f       	adc	r24, r24
    2d4c:	99 1f       	adc	r25, r25
    2d4e:	1a 94       	dec	r1
    2d50:	69 f7       	brne	.-38     	; 0x2d2c <__udivmodsi4_loop>
    2d52:	60 95       	com	r22
    2d54:	70 95       	com	r23
    2d56:	80 95       	com	r24
    2d58:	90 95       	com	r25
    2d5a:	9b 01       	movw	r18, r22
    2d5c:	ac 01       	movw	r20, r24
    2d5e:	bd 01       	movw	r22, r26
    2d60:	cf 01       	movw	r24, r30
    2d62:	08 95       	ret

00002d64 <__prologue_saves__>:
    2d64:	2f 92       	push	r2
    2d66:	3f 92       	push	r3
    2d68:	4f 92       	push	r4
    2d6a:	5f 92       	push	r5
    2d6c:	6f 92       	push	r6
    2d6e:	7f 92       	push	r7
    2d70:	8f 92       	push	r8
    2d72:	9f 92       	push	r9
    2d74:	af 92       	push	r10
    2d76:	bf 92       	push	r11
    2d78:	cf 92       	push	r12
    2d7a:	df 92       	push	r13
    2d7c:	ef 92       	push	r14
    2d7e:	ff 92       	push	r15
    2d80:	0f 93       	push	r16
    2d82:	1f 93       	push	r17
    2d84:	cf 93       	push	r28
    2d86:	df 93       	push	r29
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
    2d8c:	ca 1b       	sub	r28, r26
    2d8e:	db 0b       	sbc	r29, r27
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	cd bf       	out	0x3d, r28	; 61
    2d9a:	09 94       	ijmp

00002d9c <__epilogue_restores__>:
    2d9c:	2a 88       	ldd	r2, Y+18	; 0x12
    2d9e:	39 88       	ldd	r3, Y+17	; 0x11
    2da0:	48 88       	ldd	r4, Y+16	; 0x10
    2da2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2da4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2da6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2da8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2daa:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dac:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dae:	b9 84       	ldd	r11, Y+9	; 0x09
    2db0:	c8 84       	ldd	r12, Y+8	; 0x08
    2db2:	df 80       	ldd	r13, Y+7	; 0x07
    2db4:	ee 80       	ldd	r14, Y+6	; 0x06
    2db6:	fd 80       	ldd	r15, Y+5	; 0x05
    2db8:	0c 81       	ldd	r16, Y+4	; 0x04
    2dba:	1b 81       	ldd	r17, Y+3	; 0x03
    2dbc:	aa 81       	ldd	r26, Y+2	; 0x02
    2dbe:	b9 81       	ldd	r27, Y+1	; 0x01
    2dc0:	ce 0f       	add	r28, r30
    2dc2:	d1 1d       	adc	r29, r1
    2dc4:	0f b6       	in	r0, 0x3f	; 63
    2dc6:	f8 94       	cli
    2dc8:	de bf       	out	0x3e, r29	; 62
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	cd bf       	out	0x3d, r28	; 61
    2dce:	ed 01       	movw	r28, r26
    2dd0:	08 95       	ret

00002dd2 <_exit>:
    2dd2:	f8 94       	cli

00002dd4 <__stop_program>:
    2dd4:	ff cf       	rjmp	.-2      	; 0x2dd4 <__stop_program>
