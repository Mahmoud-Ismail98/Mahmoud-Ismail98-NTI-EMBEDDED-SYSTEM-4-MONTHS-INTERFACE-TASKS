
LCD_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002536  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00002536  000025ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800070  00800070  000025da  2**0
                  ALLOC
  3 .stab         00001c14  00000000  00000000  000025dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ffd  00000000  00000000  000041f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000051ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000532d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000549d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000070e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000916d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000993b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 37       	cpi	r26, 0x71	; 113
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 99 12 	jmp	0x2532	; 0x2532 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7e 12 	jmp	0x24fc	; 0x24fc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7e 12 	jmp	0x24fc	; 0x24fc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include "../4-SERVICS/Std_types.h"
#include "../4-SERVICS/Bit_utils.h"
#include "../1-MCAL/01-DIO/DIO_Int.h"
#include "../2-HAL/LCD/LCD.h"
#include "util/delay.h"
int main (){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a4 97       	sbiw	r28, 0x24	; 36
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
MDIO_VidSetPortDirection(Port_B,0xFF);
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	6f ef       	ldi	r22, 0xFF	; 255
     b5e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <MDIO_VidSetPortDirection>
MDIO_VidSetPinDirection(Port_A,Pin_0,Pin_Output);
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	41 e0       	ldi	r20, 0x01	; 1
     b68:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <MDIO_VidSetPinDirection>
MDIO_VidSetPinDirection(Port_A,Pin_1,Pin_Output);
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	41 e0       	ldi	r20, 0x01	; 1
     b72:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <MDIO_VidSetPinDirection>
MDIO_VidSetPinDirection(Port_A,Pin_2,Pin_Output);
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	62 e0       	ldi	r22, 0x02	; 2
     b7a:	41 e0       	ldi	r20, 0x01	; 1
     b7c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <MDIO_VidSetPinDirection>
		 0b00000,
		 0b00000,
		 0b00000,
		 0b00000,
		 0b11111
};
     b80:	88 e0       	ldi	r24, 0x08	; 8
     b82:	fe 01       	movw	r30, r28
     b84:	70 96       	adiw	r30, 0x10	; 16
     b86:	df 01       	movw	r26, r30
     b88:	98 2f       	mov	r25, r24
     b8a:	1d 92       	st	X+, r1
     b8c:	9a 95       	dec	r25
     b8e:	e9 f7       	brne	.-6      	; 0xb8a <main+0x44>
     b90:	8f e1       	ldi	r24, 0x1F	; 31
     b92:	8f 8b       	std	Y+23, r24	; 0x17
		 0b01110,
		 0b10101,
		 0b01110,
		 0b10001,
		 0b00000
};
     b94:	de 01       	movw	r26, r28
     b96:	58 96       	adiw	r26, 0x18	; 24
     b98:	b9 a3       	std	Y+33, r27	; 0x21
     b9a:	a8 a3       	std	Y+32, r26	; 0x20
     b9c:	e8 e6       	ldi	r30, 0x68	; 104
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	fb a3       	std	Y+35, r31	; 0x23
     ba2:	ea a3       	std	Y+34, r30	; 0x22
     ba4:	f8 e0       	ldi	r31, 0x08	; 8
     ba6:	fc a3       	std	Y+36, r31	; 0x24
     ba8:	aa a1       	ldd	r26, Y+34	; 0x22
     baa:	bb a1       	ldd	r27, Y+35	; 0x23
     bac:	0c 90       	ld	r0, X
     bae:	ea a1       	ldd	r30, Y+34	; 0x22
     bb0:	fb a1       	ldd	r31, Y+35	; 0x23
     bb2:	31 96       	adiw	r30, 0x01	; 1
     bb4:	fb a3       	std	Y+35, r31	; 0x23
     bb6:	ea a3       	std	Y+34, r30	; 0x22
     bb8:	a8 a1       	ldd	r26, Y+32	; 0x20
     bba:	b9 a1       	ldd	r27, Y+33	; 0x21
     bbc:	0c 92       	st	X, r0
     bbe:	e8 a1       	ldd	r30, Y+32	; 0x20
     bc0:	f9 a1       	ldd	r31, Y+33	; 0x21
     bc2:	31 96       	adiw	r30, 0x01	; 1
     bc4:	f9 a3       	std	Y+33, r31	; 0x21
     bc6:	e8 a3       	std	Y+32, r30	; 0x20
     bc8:	fc a1       	ldd	r31, Y+36	; 0x24
     bca:	f1 50       	subi	r31, 0x01	; 1
     bcc:	fc a3       	std	Y+36, r31	; 0x24
     bce:	8c a1       	ldd	r24, Y+36	; 0x24
     bd0:	88 23       	and	r24, r24
     bd2:	51 f7       	brne	.-44     	; 0xba8 <main+0x62>
	CLCD_VoidInit();
     bd4:	0e 94 71 06 	call	0xce2	; 0xce2 <CLCD_VoidInit>


	while (1){
		for (u8 i=0; i<16 ; i++){
     bd8:	1f 86       	std	Y+15, r1	; 0x0f
     bda:	7e c0       	rjmp	.+252    	; 0xcd8 <main+0x192>
		CLCD_voidCreateSpeacialCharater(PAttern1,0,0,i);
     bdc:	ce 01       	movw	r24, r28
     bde:	48 96       	adiw	r24, 0x18	; 24
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	40 e0       	ldi	r20, 0x00	; 0
     be4:	2f 85       	ldd	r18, Y+15	; 0x0f
     be6:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <CLCD_voidCreateSpeacialCharater>
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	a0 ea       	ldi	r26, 0xA0	; 160
     bf0:	b2 e4       	ldi	r27, 0x42	; 66
     bf2:	8b 87       	std	Y+11, r24	; 0x0b
     bf4:	9c 87       	std	Y+12, r25	; 0x0c
     bf6:	ad 87       	std	Y+13, r26	; 0x0d
     bf8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
     bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
     bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     c00:	9e 85       	ldd	r25, Y+14	; 0x0e
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	4a ef       	ldi	r20, 0xFA	; 250
     c08:	54 e4       	ldi	r21, 0x44	; 68
     c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c0e:	dc 01       	movw	r26, r24
     c10:	cb 01       	movw	r24, r22
     c12:	8f 83       	std	Y+7, r24	; 0x07
     c14:	98 87       	std	Y+8, r25	; 0x08
     c16:	a9 87       	std	Y+9, r26	; 0x09
     c18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c1a:	6f 81       	ldd	r22, Y+7	; 0x07
     c1c:	78 85       	ldd	r23, Y+8	; 0x08
     c1e:	89 85       	ldd	r24, Y+9	; 0x09
     c20:	9a 85       	ldd	r25, Y+10	; 0x0a
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	40 e8       	ldi	r20, 0x80	; 128
     c28:	5f e3       	ldi	r21, 0x3F	; 63
     c2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c2e:	88 23       	and	r24, r24
     c30:	2c f4       	brge	.+10     	; 0xc3c <main+0xf6>
		__ticks = 1;
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	9e 83       	std	Y+6, r25	; 0x06
     c38:	8d 83       	std	Y+5, r24	; 0x05
     c3a:	3f c0       	rjmp	.+126    	; 0xcba <main+0x174>
	else if (__tmp > 65535)
     c3c:	6f 81       	ldd	r22, Y+7	; 0x07
     c3e:	78 85       	ldd	r23, Y+8	; 0x08
     c40:	89 85       	ldd	r24, Y+9	; 0x09
     c42:	9a 85       	ldd	r25, Y+10	; 0x0a
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	3f ef       	ldi	r19, 0xFF	; 255
     c48:	4f e7       	ldi	r20, 0x7F	; 127
     c4a:	57 e4       	ldi	r21, 0x47	; 71
     c4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c50:	18 16       	cp	r1, r24
     c52:	4c f5       	brge	.+82     	; 0xca6 <main+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c54:	6b 85       	ldd	r22, Y+11	; 0x0b
     c56:	7c 85       	ldd	r23, Y+12	; 0x0c
     c58:	8d 85       	ldd	r24, Y+13	; 0x0d
     c5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	40 e2       	ldi	r20, 0x20	; 32
     c62:	51 e4       	ldi	r21, 0x41	; 65
     c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	bc 01       	movw	r22, r24
     c6e:	cd 01       	movw	r24, r26
     c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	9e 83       	std	Y+6, r25	; 0x06
     c7a:	8d 83       	std	Y+5, r24	; 0x05
     c7c:	0f c0       	rjmp	.+30     	; 0xc9c <main+0x156>
     c7e:	88 ec       	ldi	r24, 0xC8	; 200
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	9c 83       	std	Y+4, r25	; 0x04
     c84:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	9c 81       	ldd	r25, Y+4	; 0x04
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <main+0x144>
     c8e:	9c 83       	std	Y+4, r25	; 0x04
     c90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c92:	8d 81       	ldd	r24, Y+5	; 0x05
     c94:	9e 81       	ldd	r25, Y+6	; 0x06
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	9e 83       	std	Y+6, r25	; 0x06
     c9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c9c:	8d 81       	ldd	r24, Y+5	; 0x05
     c9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ca0:	00 97       	sbiw	r24, 0x00	; 0
     ca2:	69 f7       	brne	.-38     	; 0xc7e <main+0x138>
     ca4:	14 c0       	rjmp	.+40     	; 0xcce <main+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ca6:	6f 81       	ldd	r22, Y+7	; 0x07
     ca8:	78 85       	ldd	r23, Y+8	; 0x08
     caa:	89 85       	ldd	r24, Y+9	; 0x09
     cac:	9a 85       	ldd	r25, Y+10	; 0x0a
     cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	9e 83       	std	Y+6, r25	; 0x06
     cb8:	8d 83       	std	Y+5, r24	; 0x05
     cba:	8d 81       	ldd	r24, Y+5	; 0x05
     cbc:	9e 81       	ldd	r25, Y+6	; 0x06
     cbe:	9a 83       	std	Y+2, r25	; 0x02
     cc0:	89 83       	std	Y+1, r24	; 0x01
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	9a 81       	ldd	r25, Y+2	; 0x02
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <main+0x180>
     cca:	9a 83       	std	Y+2, r25	; 0x02
     ccc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(80);
CLCD_voidClearDisplay();
     cce:	0e 94 19 0a 	call	0x1432	; 0x1432 <CLCD_voidClearDisplay>
};
	CLCD_VoidInit();


	while (1){
		for (u8 i=0; i<16 ; i++){
     cd2:	8f 85       	ldd	r24, Y+15	; 0x0f
     cd4:	8f 5f       	subi	r24, 0xFF	; 255
     cd6:	8f 87       	std	Y+15, r24	; 0x0f
     cd8:	8f 85       	ldd	r24, Y+15	; 0x0f
     cda:	80 31       	cpi	r24, 0x10	; 16
     cdc:	08 f4       	brcc	.+2      	; 0xce0 <main+0x19a>
     cde:	7e cf       	rjmp	.-260    	; 0xbdc <main+0x96>
     ce0:	7b cf       	rjmp	.-266    	; 0xbd8 <main+0x92>

00000ce2 <CLCD_VoidInit>:
#include "../LCD/lcd_prv.h"
#include "../LCD/LCD_cfg.h"
#include "../LCD/LCD.h"
#include "util/delay.h"

void CLCD_VoidInit(void){
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	e8 97       	sbiw	r28, 0x38	; 56
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	a8 ef       	ldi	r26, 0xF8	; 248
     cfc:	b1 e4       	ldi	r27, 0x41	; 65
     cfe:	8d ab       	std	Y+53, r24	; 0x35
     d00:	9e ab       	std	Y+54, r25	; 0x36
     d02:	af ab       	std	Y+55, r26	; 0x37
     d04:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d06:	6d a9       	ldd	r22, Y+53	; 0x35
     d08:	7e a9       	ldd	r23, Y+54	; 0x36
     d0a:	8f a9       	ldd	r24, Y+55	; 0x37
     d0c:	98 ad       	ldd	r25, Y+56	; 0x38
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	4a ef       	ldi	r20, 0xFA	; 250
     d14:	54 e4       	ldi	r21, 0x44	; 68
     d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d1a:	dc 01       	movw	r26, r24
     d1c:	cb 01       	movw	r24, r22
     d1e:	89 ab       	std	Y+49, r24	; 0x31
     d20:	9a ab       	std	Y+50, r25	; 0x32
     d22:	ab ab       	std	Y+51, r26	; 0x33
     d24:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d26:	69 a9       	ldd	r22, Y+49	; 0x31
     d28:	7a a9       	ldd	r23, Y+50	; 0x32
     d2a:	8b a9       	ldd	r24, Y+51	; 0x33
     d2c:	9c a9       	ldd	r25, Y+52	; 0x34
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	40 e8       	ldi	r20, 0x80	; 128
     d34:	5f e3       	ldi	r21, 0x3F	; 63
     d36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d3a:	88 23       	and	r24, r24
     d3c:	2c f4       	brge	.+10     	; 0xd48 <CLCD_VoidInit+0x66>
		__ticks = 1;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	98 ab       	std	Y+48, r25	; 0x30
     d44:	8f a7       	std	Y+47, r24	; 0x2f
     d46:	3f c0       	rjmp	.+126    	; 0xdc6 <CLCD_VoidInit+0xe4>
	else if (__tmp > 65535)
     d48:	69 a9       	ldd	r22, Y+49	; 0x31
     d4a:	7a a9       	ldd	r23, Y+50	; 0x32
     d4c:	8b a9       	ldd	r24, Y+51	; 0x33
     d4e:	9c a9       	ldd	r25, Y+52	; 0x34
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	3f ef       	ldi	r19, 0xFF	; 255
     d54:	4f e7       	ldi	r20, 0x7F	; 127
     d56:	57 e4       	ldi	r21, 0x47	; 71
     d58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d5c:	18 16       	cp	r1, r24
     d5e:	4c f5       	brge	.+82     	; 0xdb2 <CLCD_VoidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d60:	6d a9       	ldd	r22, Y+53	; 0x35
     d62:	7e a9       	ldd	r23, Y+54	; 0x36
     d64:	8f a9       	ldd	r24, Y+55	; 0x37
     d66:	98 ad       	ldd	r25, Y+56	; 0x38
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e2       	ldi	r20, 0x20	; 32
     d6e:	51 e4       	ldi	r21, 0x41	; 65
     d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d74:	dc 01       	movw	r26, r24
     d76:	cb 01       	movw	r24, r22
     d78:	bc 01       	movw	r22, r24
     d7a:	cd 01       	movw	r24, r26
     d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	98 ab       	std	Y+48, r25	; 0x30
     d86:	8f a7       	std	Y+47, r24	; 0x2f
     d88:	0f c0       	rjmp	.+30     	; 0xda8 <CLCD_VoidInit+0xc6>
     d8a:	88 ec       	ldi	r24, 0xC8	; 200
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9e a7       	std	Y+46, r25	; 0x2e
     d90:	8d a7       	std	Y+45, r24	; 0x2d
     d92:	8d a5       	ldd	r24, Y+45	; 0x2d
     d94:	9e a5       	ldd	r25, Y+46	; 0x2e
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	f1 f7       	brne	.-4      	; 0xd96 <CLCD_VoidInit+0xb4>
     d9a:	9e a7       	std	Y+46, r25	; 0x2e
     d9c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d9e:	8f a5       	ldd	r24, Y+47	; 0x2f
     da0:	98 a9       	ldd	r25, Y+48	; 0x30
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	98 ab       	std	Y+48, r25	; 0x30
     da6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da8:	8f a5       	ldd	r24, Y+47	; 0x2f
     daa:	98 a9       	ldd	r25, Y+48	; 0x30
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	69 f7       	brne	.-38     	; 0xd8a <CLCD_VoidInit+0xa8>
     db0:	14 c0       	rjmp	.+40     	; 0xdda <CLCD_VoidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db2:	69 a9       	ldd	r22, Y+49	; 0x31
     db4:	7a a9       	ldd	r23, Y+50	; 0x32
     db6:	8b a9       	ldd	r24, Y+51	; 0x33
     db8:	9c a9       	ldd	r25, Y+52	; 0x34
     dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	98 ab       	std	Y+48, r25	; 0x30
     dc4:	8f a7       	std	Y+47, r24	; 0x2f
     dc6:	8f a5       	ldd	r24, Y+47	; 0x2f
     dc8:	98 a9       	ldd	r25, Y+48	; 0x30
     dca:	9c a7       	std	Y+44, r25	; 0x2c
     dcc:	8b a7       	std	Y+43, r24	; 0x2b
     dce:	8b a5       	ldd	r24, Y+43	; 0x2b
     dd0:	9c a5       	ldd	r25, Y+44	; 0x2c
     dd2:	01 97       	sbiw	r24, 0x01	; 1
     dd4:	f1 f7       	brne	.-4      	; 0xdd2 <CLCD_VoidInit+0xf0>
     dd6:	9c a7       	std	Y+44, r25	; 0x2c
     dd8:	8b a7       	std	Y+43, r24	; 0x2b
/* Wait for more than 30ms*/
_delay_ms(31);
/* Function Set Command 2Lines ,5*8 Size */
CLCD_voidSendCommand(SET_FUNCTION_8BIT_5x8_TwoLine);
     dda:	88 e3       	ldi	r24, 0x38	; 56
     ddc:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidSendCommand>
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	a0 e8       	ldi	r26, 0x80	; 128
     de6:	bf e3       	ldi	r27, 0x3F	; 63
     de8:	8f a3       	std	Y+39, r24	; 0x27
     dea:	98 a7       	std	Y+40, r25	; 0x28
     dec:	a9 a7       	std	Y+41, r26	; 0x29
     dee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df0:	6f a1       	ldd	r22, Y+39	; 0x27
     df2:	78 a5       	ldd	r23, Y+40	; 0x28
     df4:	89 a5       	ldd	r24, Y+41	; 0x29
     df6:	9a a5       	ldd	r25, Y+42	; 0x2a
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	4a ef       	ldi	r20, 0xFA	; 250
     dfe:	54 e4       	ldi	r21, 0x44	; 68
     e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	8b a3       	std	Y+35, r24	; 0x23
     e0a:	9c a3       	std	Y+36, r25	; 0x24
     e0c:	ad a3       	std	Y+37, r26	; 0x25
     e0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e10:	6b a1       	ldd	r22, Y+35	; 0x23
     e12:	7c a1       	ldd	r23, Y+36	; 0x24
     e14:	8d a1       	ldd	r24, Y+37	; 0x25
     e16:	9e a1       	ldd	r25, Y+38	; 0x26
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e8       	ldi	r20, 0x80	; 128
     e1e:	5f e3       	ldi	r21, 0x3F	; 63
     e20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e24:	88 23       	and	r24, r24
     e26:	2c f4       	brge	.+10     	; 0xe32 <CLCD_VoidInit+0x150>
		__ticks = 1;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	9a a3       	std	Y+34, r25	; 0x22
     e2e:	89 a3       	std	Y+33, r24	; 0x21
     e30:	3f c0       	rjmp	.+126    	; 0xeb0 <CLCD_VoidInit+0x1ce>
	else if (__tmp > 65535)
     e32:	6b a1       	ldd	r22, Y+35	; 0x23
     e34:	7c a1       	ldd	r23, Y+36	; 0x24
     e36:	8d a1       	ldd	r24, Y+37	; 0x25
     e38:	9e a1       	ldd	r25, Y+38	; 0x26
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	3f ef       	ldi	r19, 0xFF	; 255
     e3e:	4f e7       	ldi	r20, 0x7F	; 127
     e40:	57 e4       	ldi	r21, 0x47	; 71
     e42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e46:	18 16       	cp	r1, r24
     e48:	4c f5       	brge	.+82     	; 0xe9c <CLCD_VoidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e4a:	6f a1       	ldd	r22, Y+39	; 0x27
     e4c:	78 a5       	ldd	r23, Y+40	; 0x28
     e4e:	89 a5       	ldd	r24, Y+41	; 0x29
     e50:	9a a5       	ldd	r25, Y+42	; 0x2a
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	40 e2       	ldi	r20, 0x20	; 32
     e58:	51 e4       	ldi	r21, 0x41	; 65
     e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	bc 01       	movw	r22, r24
     e64:	cd 01       	movw	r24, r26
     e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	9a a3       	std	Y+34, r25	; 0x22
     e70:	89 a3       	std	Y+33, r24	; 0x21
     e72:	0f c0       	rjmp	.+30     	; 0xe92 <CLCD_VoidInit+0x1b0>
     e74:	88 ec       	ldi	r24, 0xC8	; 200
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	98 a3       	std	Y+32, r25	; 0x20
     e7a:	8f 8f       	std	Y+31, r24	; 0x1f
     e7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e7e:	98 a1       	ldd	r25, Y+32	; 0x20
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	f1 f7       	brne	.-4      	; 0xe80 <CLCD_VoidInit+0x19e>
     e84:	98 a3       	std	Y+32, r25	; 0x20
     e86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e88:	89 a1       	ldd	r24, Y+33	; 0x21
     e8a:	9a a1       	ldd	r25, Y+34	; 0x22
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	9a a3       	std	Y+34, r25	; 0x22
     e90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e92:	89 a1       	ldd	r24, Y+33	; 0x21
     e94:	9a a1       	ldd	r25, Y+34	; 0x22
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	69 f7       	brne	.-38     	; 0xe74 <CLCD_VoidInit+0x192>
     e9a:	14 c0       	rjmp	.+40     	; 0xec4 <CLCD_VoidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e9c:	6b a1       	ldd	r22, Y+35	; 0x23
     e9e:	7c a1       	ldd	r23, Y+36	; 0x24
     ea0:	8d a1       	ldd	r24, Y+37	; 0x25
     ea2:	9e a1       	ldd	r25, Y+38	; 0x26
     ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	9a a3       	std	Y+34, r25	; 0x22
     eae:	89 a3       	std	Y+33, r24	; 0x21
     eb0:	89 a1       	ldd	r24, Y+33	; 0x21
     eb2:	9a a1       	ldd	r25, Y+34	; 0x22
     eb4:	9e 8f       	std	Y+30, r25	; 0x1e
     eb6:	8d 8f       	std	Y+29, r24	; 0x1d
     eb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eba:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	f1 f7       	brne	.-4      	; 0xebc <CLCD_VoidInit+0x1da>
     ec0:	9e 8f       	std	Y+30, r25	; 0x1e
     ec2:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(1);
/* Display_On_Off_Control : Display Enable */
CLCD_voidSendCommand(Display_On_Off_Control);
     ec4:	8c e0       	ldi	r24, 0x0C	; 12
     ec6:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidSendCommand>
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	a0 e8       	ldi	r26, 0x80	; 128
     ed0:	bf e3       	ldi	r27, 0x3F	; 63
     ed2:	89 8f       	std	Y+25, r24	; 0x19
     ed4:	9a 8f       	std	Y+26, r25	; 0x1a
     ed6:	ab 8f       	std	Y+27, r26	; 0x1b
     ed8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eda:	69 8d       	ldd	r22, Y+25	; 0x19
     edc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ede:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ee0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	4a ef       	ldi	r20, 0xFA	; 250
     ee8:	54 e4       	ldi	r21, 0x44	; 68
     eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	8d 8b       	std	Y+21, r24	; 0x15
     ef4:	9e 8b       	std	Y+22, r25	; 0x16
     ef6:	af 8b       	std	Y+23, r26	; 0x17
     ef8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     efa:	6d 89       	ldd	r22, Y+21	; 0x15
     efc:	7e 89       	ldd	r23, Y+22	; 0x16
     efe:	8f 89       	ldd	r24, Y+23	; 0x17
     f00:	98 8d       	ldd	r25, Y+24	; 0x18
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	40 e8       	ldi	r20, 0x80	; 128
     f08:	5f e3       	ldi	r21, 0x3F	; 63
     f0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f0e:	88 23       	and	r24, r24
     f10:	2c f4       	brge	.+10     	; 0xf1c <CLCD_VoidInit+0x23a>
		__ticks = 1;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	9c 8b       	std	Y+20, r25	; 0x14
     f18:	8b 8b       	std	Y+19, r24	; 0x13
     f1a:	3f c0       	rjmp	.+126    	; 0xf9a <CLCD_VoidInit+0x2b8>
	else if (__tmp > 65535)
     f1c:	6d 89       	ldd	r22, Y+21	; 0x15
     f1e:	7e 89       	ldd	r23, Y+22	; 0x16
     f20:	8f 89       	ldd	r24, Y+23	; 0x17
     f22:	98 8d       	ldd	r25, Y+24	; 0x18
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	3f ef       	ldi	r19, 0xFF	; 255
     f28:	4f e7       	ldi	r20, 0x7F	; 127
     f2a:	57 e4       	ldi	r21, 0x47	; 71
     f2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f30:	18 16       	cp	r1, r24
     f32:	4c f5       	brge	.+82     	; 0xf86 <CLCD_VoidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f34:	69 8d       	ldd	r22, Y+25	; 0x19
     f36:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f38:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 e2       	ldi	r20, 0x20	; 32
     f42:	51 e4       	ldi	r21, 0x41	; 65
     f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	bc 01       	movw	r22, r24
     f4e:	cd 01       	movw	r24, r26
     f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	9c 8b       	std	Y+20, r25	; 0x14
     f5a:	8b 8b       	std	Y+19, r24	; 0x13
     f5c:	0f c0       	rjmp	.+30     	; 0xf7c <CLCD_VoidInit+0x29a>
     f5e:	88 ec       	ldi	r24, 0xC8	; 200
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	9a 8b       	std	Y+18, r25	; 0x12
     f64:	89 8b       	std	Y+17, r24	; 0x11
     f66:	89 89       	ldd	r24, Y+17	; 0x11
     f68:	9a 89       	ldd	r25, Y+18	; 0x12
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	f1 f7       	brne	.-4      	; 0xf6a <CLCD_VoidInit+0x288>
     f6e:	9a 8b       	std	Y+18, r25	; 0x12
     f70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f72:	8b 89       	ldd	r24, Y+19	; 0x13
     f74:	9c 89       	ldd	r25, Y+20	; 0x14
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	9c 8b       	std	Y+20, r25	; 0x14
     f7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7c:	8b 89       	ldd	r24, Y+19	; 0x13
     f7e:	9c 89       	ldd	r25, Y+20	; 0x14
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	69 f7       	brne	.-38     	; 0xf5e <CLCD_VoidInit+0x27c>
     f84:	14 c0       	rjmp	.+40     	; 0xfae <CLCD_VoidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f86:	6d 89       	ldd	r22, Y+21	; 0x15
     f88:	7e 89       	ldd	r23, Y+22	; 0x16
     f8a:	8f 89       	ldd	r24, Y+23	; 0x17
     f8c:	98 8d       	ldd	r25, Y+24	; 0x18
     f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	9c 8b       	std	Y+20, r25	; 0x14
     f98:	8b 8b       	std	Y+19, r24	; 0x13
     f9a:	8b 89       	ldd	r24, Y+19	; 0x13
     f9c:	9c 89       	ldd	r25, Y+20	; 0x14
     f9e:	98 8b       	std	Y+16, r25	; 0x10
     fa0:	8f 87       	std	Y+15, r24	; 0x0f
     fa2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fa4:	98 89       	ldd	r25, Y+16	; 0x10
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <CLCD_VoidInit+0x2c4>
     faa:	98 8b       	std	Y+16, r25	; 0x10
     fac:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(1);
/* Clear Display */
CLCD_voidSendCommand(Display_clear);
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidSendCommand>
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a0 e8       	ldi	r26, 0x80	; 128
     fba:	bf e3       	ldi	r27, 0x3F	; 63
     fbc:	8b 87       	std	Y+11, r24	; 0x0b
     fbe:	9c 87       	std	Y+12, r25	; 0x0c
     fc0:	ad 87       	std	Y+13, r26	; 0x0d
     fc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fca:	9e 85       	ldd	r25, Y+14	; 0x0e
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	4a ef       	ldi	r20, 0xFA	; 250
     fd2:	54 e4       	ldi	r21, 0x44	; 68
     fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	8f 83       	std	Y+7, r24	; 0x07
     fde:	98 87       	std	Y+8, r25	; 0x08
     fe0:	a9 87       	std	Y+9, r26	; 0x09
     fe2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fe4:	6f 81       	ldd	r22, Y+7	; 0x07
     fe6:	78 85       	ldd	r23, Y+8	; 0x08
     fe8:	89 85       	ldd	r24, Y+9	; 0x09
     fea:	9a 85       	ldd	r25, Y+10	; 0x0a
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e8       	ldi	r20, 0x80	; 128
     ff2:	5f e3       	ldi	r21, 0x3F	; 63
     ff4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ff8:	88 23       	and	r24, r24
     ffa:	2c f4       	brge	.+10     	; 0x1006 <CLCD_VoidInit+0x324>
		__ticks = 1;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9e 83       	std	Y+6, r25	; 0x06
    1002:	8d 83       	std	Y+5, r24	; 0x05
    1004:	3f c0       	rjmp	.+126    	; 0x1084 <CLCD_VoidInit+0x3a2>
	else if (__tmp > 65535)
    1006:	6f 81       	ldd	r22, Y+7	; 0x07
    1008:	78 85       	ldd	r23, Y+8	; 0x08
    100a:	89 85       	ldd	r24, Y+9	; 0x09
    100c:	9a 85       	ldd	r25, Y+10	; 0x0a
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	3f ef       	ldi	r19, 0xFF	; 255
    1012:	4f e7       	ldi	r20, 0x7F	; 127
    1014:	57 e4       	ldi	r21, 0x47	; 71
    1016:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    101a:	18 16       	cp	r1, r24
    101c:	4c f5       	brge	.+82     	; 0x1070 <CLCD_VoidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    101e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1020:	7c 85       	ldd	r23, Y+12	; 0x0c
    1022:	8d 85       	ldd	r24, Y+13	; 0x0d
    1024:	9e 85       	ldd	r25, Y+14	; 0x0e
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e2       	ldi	r20, 0x20	; 32
    102c:	51 e4       	ldi	r21, 0x41	; 65
    102e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	bc 01       	movw	r22, r24
    1038:	cd 01       	movw	r24, r26
    103a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	9e 83       	std	Y+6, r25	; 0x06
    1044:	8d 83       	std	Y+5, r24	; 0x05
    1046:	0f c0       	rjmp	.+30     	; 0x1066 <CLCD_VoidInit+0x384>
    1048:	88 ec       	ldi	r24, 0xC8	; 200
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	9c 83       	std	Y+4, r25	; 0x04
    104e:	8b 83       	std	Y+3, r24	; 0x03
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <CLCD_VoidInit+0x372>
    1058:	9c 83       	std	Y+4, r25	; 0x04
    105a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	9e 83       	std	Y+6, r25	; 0x06
    1064:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1066:	8d 81       	ldd	r24, Y+5	; 0x05
    1068:	9e 81       	ldd	r25, Y+6	; 0x06
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	69 f7       	brne	.-38     	; 0x1048 <CLCD_VoidInit+0x366>
    106e:	14 c0       	rjmp	.+40     	; 0x1098 <CLCD_VoidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1070:	6f 81       	ldd	r22, Y+7	; 0x07
    1072:	78 85       	ldd	r23, Y+8	; 0x08
    1074:	89 85       	ldd	r24, Y+9	; 0x09
    1076:	9a 85       	ldd	r25, Y+10	; 0x0a
    1078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	9e 83       	std	Y+6, r25	; 0x06
    1082:	8d 83       	std	Y+5, r24	; 0x05
    1084:	8d 81       	ldd	r24, Y+5	; 0x05
    1086:	9e 81       	ldd	r25, Y+6	; 0x06
    1088:	9a 83       	std	Y+2, r25	; 0x02
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	f1 f7       	brne	.-4      	; 0x1090 <CLCD_VoidInit+0x3ae>
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1);


}
    1098:	e8 96       	adiw	r28, 0x38	; 56
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <CLCD_voidSendCommand>:
void CLCD_voidSendCommand(u8 Copy_u8Command){
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	2f 97       	sbiw	r28, 0x0f	; 15
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	8f 87       	std	Y+15, r24	; 0x0f
/*Set Rs Pin Low For Command */
MDIO_VidSetPinValue(LCDCTR_PORT,LCD_RS_PIN,Pin_Low);
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	61 e0       	ldi	r22, 0x01	; 1
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <MDIO_VidSetPinValue>
/* Set R/W Pin Low To Write For Command */
MDIO_VidSetPinValue(LCDCTR_PORT,LCD_RW_PIN,Pin_Low);
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	62 e0       	ldi	r22, 0x02	; 2
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <MDIO_VidSetPinValue>
/* Set Command To Data Pins */
MDIO_VidSetPortValue(LCDData_PORT,Copy_u8Command);
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	6f 85       	ldd	r22, Y+15	; 0x0f
    10d8:	0e 94 b3 11 	call	0x2366	; 0x2366 <MDIO_VidSetPortValue>
/* Set EN Pin High To Send Command*/
MDIO_VidSetPinValue(LCDCTR_PORT,LCD_EN_PIN,Pin_High);
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	60 e0       	ldi	r22, 0x00	; 0
    10e0:	41 e0       	ldi	r20, 0x01	; 1
    10e2:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <MDIO_VidSetPinValue>
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	a0 e0       	ldi	r26, 0x00	; 0
    10ec:	b0 e4       	ldi	r27, 0x40	; 64
    10ee:	8b 87       	std	Y+11, r24	; 0x0b
    10f0:	9c 87       	std	Y+12, r25	; 0x0c
    10f2:	ad 87       	std	Y+13, r26	; 0x0d
    10f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    10fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	4a ef       	ldi	r20, 0xFA	; 250
    1104:	54 e4       	ldi	r21, 0x44	; 68
    1106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	8f 83       	std	Y+7, r24	; 0x07
    1110:	98 87       	std	Y+8, r25	; 0x08
    1112:	a9 87       	std	Y+9, r26	; 0x09
    1114:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1116:	6f 81       	ldd	r22, Y+7	; 0x07
    1118:	78 85       	ldd	r23, Y+8	; 0x08
    111a:	89 85       	ldd	r24, Y+9	; 0x09
    111c:	9a 85       	ldd	r25, Y+10	; 0x0a
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	40 e8       	ldi	r20, 0x80	; 128
    1124:	5f e3       	ldi	r21, 0x3F	; 63
    1126:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    112a:	88 23       	and	r24, r24
    112c:	2c f4       	brge	.+10     	; 0x1138 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	9e 83       	std	Y+6, r25	; 0x06
    1134:	8d 83       	std	Y+5, r24	; 0x05
    1136:	3f c0       	rjmp	.+126    	; 0x11b6 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1138:	6f 81       	ldd	r22, Y+7	; 0x07
    113a:	78 85       	ldd	r23, Y+8	; 0x08
    113c:	89 85       	ldd	r24, Y+9	; 0x09
    113e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	3f ef       	ldi	r19, 0xFF	; 255
    1144:	4f e7       	ldi	r20, 0x7F	; 127
    1146:	57 e4       	ldi	r21, 0x47	; 71
    1148:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    114c:	18 16       	cp	r1, r24
    114e:	4c f5       	brge	.+82     	; 0x11a2 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1150:	6b 85       	ldd	r22, Y+11	; 0x0b
    1152:	7c 85       	ldd	r23, Y+12	; 0x0c
    1154:	8d 85       	ldd	r24, Y+13	; 0x0d
    1156:	9e 85       	ldd	r25, Y+14	; 0x0e
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e2       	ldi	r20, 0x20	; 32
    115e:	51 e4       	ldi	r21, 0x41	; 65
    1160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	bc 01       	movw	r22, r24
    116a:	cd 01       	movw	r24, r26
    116c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	9e 83       	std	Y+6, r25	; 0x06
    1176:	8d 83       	std	Y+5, r24	; 0x05
    1178:	0f c0       	rjmp	.+30     	; 0x1198 <CLCD_voidSendCommand+0xee>
    117a:	88 ec       	ldi	r24, 0xC8	; 200
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	9c 83       	std	Y+4, r25	; 0x04
    1180:	8b 83       	std	Y+3, r24	; 0x03
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	f1 f7       	brne	.-4      	; 0x1186 <CLCD_voidSendCommand+0xdc>
    118a:	9c 83       	std	Y+4, r25	; 0x04
    118c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118e:	8d 81       	ldd	r24, Y+5	; 0x05
    1190:	9e 81       	ldd	r25, Y+6	; 0x06
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	9e 83       	std	Y+6, r25	; 0x06
    1196:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	9e 81       	ldd	r25, Y+6	; 0x06
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	69 f7       	brne	.-38     	; 0x117a <CLCD_voidSendCommand+0xd0>
    11a0:	14 c0       	rjmp	.+40     	; 0x11ca <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a2:	6f 81       	ldd	r22, Y+7	; 0x07
    11a4:	78 85       	ldd	r23, Y+8	; 0x08
    11a6:	89 85       	ldd	r24, Y+9	; 0x09
    11a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	9e 83       	std	Y+6, r25	; 0x06
    11b4:	8d 83       	std	Y+5, r24	; 0x05
    11b6:	8d 81       	ldd	r24, Y+5	; 0x05
    11b8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ba:	9a 83       	std	Y+2, r25	; 0x02
    11bc:	89 83       	std	Y+1, r24	; 0x01
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	9a 81       	ldd	r25, Y+2	; 0x02
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <CLCD_voidSendCommand+0x118>
    11c6:	9a 83       	std	Y+2, r25	; 0x02
    11c8:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
MDIO_VidSetPinValue(LCDCTR_PORT,LCD_EN_PIN,Pin_Low);
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	40 e0       	ldi	r20, 0x00	; 0
    11d0:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <MDIO_VidSetPinValue>

}
    11d4:	2f 96       	adiw	r28, 0x0f	; 15
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <CLCD_voidSendData>:
void CLCD_voidSendData(u8 Copy_u8Data){
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	2f 97       	sbiw	r28, 0x0f	; 15
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set Rs Pin High For Data */
	MDIO_VidSetPinValue(LCDCTR_PORT,LCD_RS_PIN,Pin_High);
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	61 e0       	ldi	r22, 0x01	; 1
    1200:	41 e0       	ldi	r20, 0x01	; 1
    1202:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <MDIO_VidSetPinValue>
	/* Set R/W Pin Low To Write For Data */
	MDIO_VidSetPinValue(LCDCTR_PORT,LCD_RW_PIN,Pin_Low);
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	62 e0       	ldi	r22, 0x02	; 2
    120a:	40 e0       	ldi	r20, 0x00	; 0
    120c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <MDIO_VidSetPinValue>
	/* Set Data To Data Pins */
	MDIO_VidSetPortValue(LCDData_PORT,Copy_u8Data);
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	6f 85       	ldd	r22, Y+15	; 0x0f
    1214:	0e 94 b3 11 	call	0x2366	; 0x2366 <MDIO_VidSetPortValue>
	/* Set EN Pin High To Send Data*/
	MDIO_VidSetPinValue(LCDCTR_PORT,LCD_EN_PIN,Pin_High);
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	41 e0       	ldi	r20, 0x01	; 1
    121e:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <MDIO_VidSetPinValue>
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	a0 e0       	ldi	r26, 0x00	; 0
    1228:	b0 e4       	ldi	r27, 0x40	; 64
    122a:	8b 87       	std	Y+11, r24	; 0x0b
    122c:	9c 87       	std	Y+12, r25	; 0x0c
    122e:	ad 87       	std	Y+13, r26	; 0x0d
    1230:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1232:	6b 85       	ldd	r22, Y+11	; 0x0b
    1234:	7c 85       	ldd	r23, Y+12	; 0x0c
    1236:	8d 85       	ldd	r24, Y+13	; 0x0d
    1238:	9e 85       	ldd	r25, Y+14	; 0x0e
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	4a ef       	ldi	r20, 0xFA	; 250
    1240:	54 e4       	ldi	r21, 0x44	; 68
    1242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	8f 83       	std	Y+7, r24	; 0x07
    124c:	98 87       	std	Y+8, r25	; 0x08
    124e:	a9 87       	std	Y+9, r26	; 0x09
    1250:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1252:	6f 81       	ldd	r22, Y+7	; 0x07
    1254:	78 85       	ldd	r23, Y+8	; 0x08
    1256:	89 85       	ldd	r24, Y+9	; 0x09
    1258:	9a 85       	ldd	r25, Y+10	; 0x0a
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	40 e8       	ldi	r20, 0x80	; 128
    1260:	5f e3       	ldi	r21, 0x3F	; 63
    1262:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1266:	88 23       	and	r24, r24
    1268:	2c f4       	brge	.+10     	; 0x1274 <CLCD_voidSendData+0x8e>
		__ticks = 1;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	9e 83       	std	Y+6, r25	; 0x06
    1270:	8d 83       	std	Y+5, r24	; 0x05
    1272:	3f c0       	rjmp	.+126    	; 0x12f2 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1274:	6f 81       	ldd	r22, Y+7	; 0x07
    1276:	78 85       	ldd	r23, Y+8	; 0x08
    1278:	89 85       	ldd	r24, Y+9	; 0x09
    127a:	9a 85       	ldd	r25, Y+10	; 0x0a
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	3f ef       	ldi	r19, 0xFF	; 255
    1280:	4f e7       	ldi	r20, 0x7F	; 127
    1282:	57 e4       	ldi	r21, 0x47	; 71
    1284:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1288:	18 16       	cp	r1, r24
    128a:	4c f5       	brge	.+82     	; 0x12de <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128c:	6b 85       	ldd	r22, Y+11	; 0x0b
    128e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1290:	8d 85       	ldd	r24, Y+13	; 0x0d
    1292:	9e 85       	ldd	r25, Y+14	; 0x0e
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e2       	ldi	r20, 0x20	; 32
    129a:	51 e4       	ldi	r21, 0x41	; 65
    129c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	bc 01       	movw	r22, r24
    12a6:	cd 01       	movw	r24, r26
    12a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	9e 83       	std	Y+6, r25	; 0x06
    12b2:	8d 83       	std	Y+5, r24	; 0x05
    12b4:	0f c0       	rjmp	.+30     	; 0x12d4 <CLCD_voidSendData+0xee>
    12b6:	88 ec       	ldi	r24, 0xC8	; 200
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	9c 83       	std	Y+4, r25	; 0x04
    12bc:	8b 83       	std	Y+3, r24	; 0x03
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	f1 f7       	brne	.-4      	; 0x12c2 <CLCD_voidSendData+0xdc>
    12c6:	9c 83       	std	Y+4, r25	; 0x04
    12c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ca:	8d 81       	ldd	r24, Y+5	; 0x05
    12cc:	9e 81       	ldd	r25, Y+6	; 0x06
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	9e 83       	std	Y+6, r25	; 0x06
    12d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d4:	8d 81       	ldd	r24, Y+5	; 0x05
    12d6:	9e 81       	ldd	r25, Y+6	; 0x06
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	69 f7       	brne	.-38     	; 0x12b6 <CLCD_voidSendData+0xd0>
    12dc:	14 c0       	rjmp	.+40     	; 0x1306 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12de:	6f 81       	ldd	r22, Y+7	; 0x07
    12e0:	78 85       	ldd	r23, Y+8	; 0x08
    12e2:	89 85       	ldd	r24, Y+9	; 0x09
    12e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	9e 83       	std	Y+6, r25	; 0x06
    12f0:	8d 83       	std	Y+5, r24	; 0x05
    12f2:	8d 81       	ldd	r24, Y+5	; 0x05
    12f4:	9e 81       	ldd	r25, Y+6	; 0x06
    12f6:	9a 83       	std	Y+2, r25	; 0x02
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	9a 81       	ldd	r25, Y+2	; 0x02
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <CLCD_voidSendData+0x118>
    1302:	9a 83       	std	Y+2, r25	; 0x02
    1304:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_VidSetPinValue(LCDCTR_PORT,LCD_EN_PIN,Pin_Low);
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <MDIO_VidSetPinValue>

}
    1310:	2f 96       	adiw	r28, 0x0f	; 15
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <ClCD_voidSendString>:
void ClCD_voidSendString(const char* Copy_ChString ){
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	00 d0       	rcall	.+0      	; 0x1328 <ClCD_voidSendString+0x6>
    1328:	0f 92       	push	r0
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	9b 83       	std	Y+3, r25	; 0x03
    1330:	8a 83       	std	Y+2, r24	; 0x02
	u8 Iteration =0;
    1332:	19 82       	std	Y+1, r1	; 0x01
    1334:	0e c0       	rjmp	.+28     	; 0x1352 <ClCD_voidSendString+0x30>
	while (Copy_ChString[Iteration]!='\0')
     {
     CLCD_voidSendData(Copy_ChString[Iteration]);
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	9b 81       	ldd	r25, Y+3	; 0x03
    1340:	fc 01       	movw	r30, r24
    1342:	e2 0f       	add	r30, r18
    1344:	f3 1f       	adc	r31, r19
    1346:	80 81       	ld	r24, Z
    1348:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <CLCD_voidSendData>
     Iteration++;
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	8f 5f       	subi	r24, 0xFF	; 255
    1350:	89 83       	std	Y+1, r24	; 0x01
	MDIO_VidSetPinValue(LCDCTR_PORT,LCD_EN_PIN,Pin_Low);

}
void ClCD_voidSendString(const char* Copy_ChString ){
	u8 Iteration =0;
	while (Copy_ChString[Iteration]!='\0')
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	9b 81       	ldd	r25, Y+3	; 0x03
    135c:	fc 01       	movw	r30, r24
    135e:	e2 0f       	add	r30, r18
    1360:	f3 1f       	adc	r31, r19
    1362:	80 81       	ld	r24, Z
    1364:	88 23       	and	r24, r24
    1366:	39 f7       	brne	.-50     	; 0x1336 <ClCD_voidSendString+0x14>
     {
     CLCD_voidSendData(Copy_ChString[Iteration]);
     Iteration++;
	}
}
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <CLCD_voidGoToXY>:
void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos){
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <CLCD_voidGoToXY+0x6>
    137a:	0f 92       	push	r0
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	8a 83       	std	Y+2, r24	; 0x02
    1382:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress;
if (Copy_u8XPos == 0){
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	88 23       	and	r24, r24
    1388:	19 f4       	brne	.+6      	; 0x1390 <CLCD_voidGoToXY+0x1c>

	Local_u8Adress= Copy_u8YPos;
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	06 c0       	rjmp	.+12     	; 0x139c <CLCD_voidGoToXY+0x28>

}
else if (Copy_u8XPos == 1)
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	19 f4       	brne	.+6      	; 0x139c <CLCD_voidGoToXY+0x28>
{
	/* location At Secand line */
	Local_u8Adress = Copy_u8YPos + CGRAM_Address;
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	80 5c       	subi	r24, 0xC0	; 192
    139a:	89 83       	std	Y+1, r24	; 0x01
}
CLCD_voidSendCommand(Local_u8Adress + 128);
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	80 58       	subi	r24, 0x80	; 128
    13a0:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidSendCommand>
}
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <CLCD_voidCreateSpeacialCharater>:
void CLCD_voidCreateSpeacialCharater(u8* Copy_pu8Arr, u8 Copy_u8index,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	27 97       	sbiw	r28, 0x07	; 7
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	cd bf       	out	0x3d, r28	; 61
    13c4:	9c 83       	std	Y+4, r25	; 0x04
    13c6:	8b 83       	std	Y+3, r24	; 0x03
    13c8:	6d 83       	std	Y+5, r22	; 0x05
    13ca:	4e 83       	std	Y+6, r20	; 0x06
    13cc:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAdress = 0;
    13ce:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculate CGRAM Address  */
	 Local_u8CGRAMAdress = Copy_u8index * 8;
    13d0:	8d 81       	ldd	r24, Y+5	; 0x05
    13d2:	88 2f       	mov	r24, r24
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	8a 83       	std	Y+2, r24	; 0x02
	 /* Send CGRAM Adress command to LCD */
  CLCD_voidSendCommand(Local_u8CGRAMAdress + 64);
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	80 5c       	subi	r24, 0xC0	; 192
    13e8:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidSendCommand>
for (u8 Local_u8Iterator = 0; Local_u8Iterator < 8;Local_u8Iterator++ )
    13ec:	19 82       	std	Y+1, r1	; 0x01
    13ee:	0e c0       	rjmp	.+28     	; 0x140c <CLCD_voidCreateSpeacialCharater+0x5c>
{
	CLCD_voidSendData(Copy_pu8Arr[Local_u8Iterator]);
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	9c 81       	ldd	r25, Y+4	; 0x04
    13fa:	fc 01       	movw	r30, r24
    13fc:	e2 0f       	add	r30, r18
    13fe:	f3 1f       	adc	r31, r19
    1400:	80 81       	ld	r24, Z
    1402:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <CLCD_voidSendData>
	u8 Local_u8CGRAMAdress = 0;
	/* Calculate CGRAM Address  */
	 Local_u8CGRAMAdress = Copy_u8index * 8;
	 /* Send CGRAM Adress command to LCD */
  CLCD_voidSendCommand(Local_u8CGRAMAdress + 64);
for (u8 Local_u8Iterator = 0; Local_u8Iterator < 8;Local_u8Iterator++ )
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	8f 5f       	subi	r24, 0xFF	; 255
    140a:	89 83       	std	Y+1, r24	; 0x01
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	88 30       	cpi	r24, 0x08	; 8
    1410:	78 f3       	brcs	.-34     	; 0x13f0 <CLCD_voidCreateSpeacialCharater+0x40>
{
	CLCD_voidSendData(Copy_pu8Arr[Local_u8Iterator]);
}
CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1412:	8e 81       	ldd	r24, Y+6	; 0x06
    1414:	6f 81       	ldd	r22, Y+7	; 0x07
    1416:	0e 94 ba 09 	call	0x1374	; 0x1374 <CLCD_voidGoToXY>
CLCD_voidSendData(Copy_u8index);
    141a:	8d 81       	ldd	r24, Y+5	; 0x05
    141c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <CLCD_voidSendData>
}
    1420:	27 96       	adiw	r28, 0x07	; 7
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay(){
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(Display_clear);
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidSendCommand>
}
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <CLCD_VidSendNumber>:
u8 Global_u8Basyflag = 0;
void CLCD_VidSendNumber(u32 Copy_u32Data){
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <CLCD_VidSendNumber+0x6>
    144c:	00 d0       	rcall	.+0      	; 0x144e <CLCD_VidSendNumber+0x8>
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	69 83       	std	Y+1, r22	; 0x01
    1454:	7a 83       	std	Y+2, r23	; 0x02
    1456:	8b 83       	std	Y+3, r24	; 0x03
    1458:	9c 83       	std	Y+4, r25	; 0x04

	if (Copy_u32Data == 0 && Global_u8Basyflag == 0)
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	9a 81       	ldd	r25, Y+2	; 0x02
    145e:	ab 81       	ldd	r26, Y+3	; 0x03
    1460:	bc 81       	ldd	r27, Y+4	; 0x04
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	a1 05       	cpc	r26, r1
    1466:	b1 05       	cpc	r27, r1
    1468:	41 f4       	brne	.+16     	; 0x147a <CLCD_VidSendNumber+0x34>
    146a:	80 91 70 00 	lds	r24, 0x0070
    146e:	88 23       	and	r24, r24
    1470:	21 f4       	brne	.+8      	; 0x147a <CLCD_VidSendNumber+0x34>
	{
		CLCD_voidSendData('0');
    1472:	80 e3       	ldi	r24, 0x30	; 48
    1474:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <CLCD_voidSendData>
    1478:	2e c0       	rjmp	.+92     	; 0x14d6 <CLCD_VidSendNumber+0x90>
	}
	else
	{
		Global_u8Basyflag = 1;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	80 93 70 00 	sts	0x0070, r24
		if (Copy_u32Data!= 0)
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	9a 81       	ldd	r25, Y+2	; 0x02
    1484:	ab 81       	ldd	r26, Y+3	; 0x03
    1486:	bc 81       	ldd	r27, Y+4	; 0x04
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	a1 05       	cpc	r26, r1
    148c:	b1 05       	cpc	r27, r1
    148e:	19 f1       	breq	.+70     	; 0x14d6 <CLCD_VidSendNumber+0x90>
			{

			CLCD_VidSendNumber(Copy_u32Data/10);
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	9a 81       	ldd	r25, Y+2	; 0x02
    1494:	ab 81       	ldd	r26, Y+3	; 0x03
    1496:	bc 81       	ldd	r27, Y+4	; 0x04
    1498:	2a e0       	ldi	r18, 0x0A	; 10
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e0       	ldi	r20, 0x00	; 0
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	bc 01       	movw	r22, r24
    14a2:	cd 01       	movw	r24, r26
    14a4:	0e 94 40 12 	call	0x2480	; 0x2480 <__udivmodsi4>
    14a8:	da 01       	movw	r26, r20
    14aa:	c9 01       	movw	r24, r18
    14ac:	bc 01       	movw	r22, r24
    14ae:	cd 01       	movw	r24, r26
    14b0:	0e 94 23 0a 	call	0x1446	; 0x1446 <CLCD_VidSendNumber>
				CLCD_voidSendData (((Copy_u32Data % 10)+'0'));
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	ab 81       	ldd	r26, Y+3	; 0x03
    14ba:	bc 81       	ldd	r27, Y+4	; 0x04
    14bc:	2a e0       	ldi	r18, 0x0A	; 10
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	50 e0       	ldi	r21, 0x00	; 0
    14c4:	bc 01       	movw	r22, r24
    14c6:	cd 01       	movw	r24, r26
    14c8:	0e 94 40 12 	call	0x2480	; 0x2480 <__udivmodsi4>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	80 5d       	subi	r24, 0xD0	; 208
    14d2:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <CLCD_voidSendData>

			}
	}

	Global_u8Basyflag=0;
    14d6:	10 92 70 00 	sts	0x0070, r1
}
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <Port_VoidInit>:
#include "../../1-PORT/include/Port.h"
#include "../../1-PORT/include/Port_Prv.h"
#include "../../1-PORT/include/Port_Cfg.h"


void Port_VoidInit(void){
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62

#undef  PORT_u8Intput_Floating
#define PORT_u8Intput_Floating   0

	/* Set pins in DDR registers for data direction */
	DDRA= CONC(PORT_u8ModePin7,PORT_u8ModePin6,PORT_u8ModePin5,PORT_u8ModePin4,PORT_u8ModePin3,PORT_u8ModePin2,PORT_u8ModePin1,PORT_u8ModePin0);
    14f0:	ea e3       	ldi	r30, 0x3A	; 58
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	8f ef       	ldi	r24, 0xFF	; 255
    14f6:	80 83       	st	Z, r24
	DDRB= CONC(PORT_u8ModePin7,PORT_u8ModePin6,PORT_u8ModePin5,PORT_u8ModePin4,PORT_u8ModePin3,PORT_u8ModePin2,PORT_u8ModePin1,PORT_u8ModePin0);
    14f8:	e7 e3       	ldi	r30, 0x37	; 55
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	8f ef       	ldi	r24, 0xFF	; 255
    14fe:	80 83       	st	Z, r24
	DDRC= CONC(PORT_u8ModePin7,PORT_u8ModePin6,PORT_u8ModePin5,PORT_u8ModePin4,PORT_u8ModePin3,PORT_u8ModePin2,PORT_u8ModePin1,PORT_u8ModePin0);
    1500:	e4 e3       	ldi	r30, 0x34	; 52
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	8f ef       	ldi	r24, 0xFF	; 255
    1506:	80 83       	st	Z, r24
	DDRD= CONC(PORT_u8ModePin7,PORT_u8ModePin6,PORT_u8ModePin5,PORT_u8ModePin4,PORT_u8ModePin3,PORT_u8ModePin2,PORT_u8ModePin1,PORT_u8ModePin0);
    1508:	e1 e3       	ldi	r30, 0x31	; 49
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	8f ef       	ldi	r24, 0xFF	; 255
    150e:	80 83       	st	Z, r24

#undef  PORT_u8Intput_Floating
#define PORT_u8Intput_Floating    0

	/* Set pins in PORT registers for Moods */
	PORTA= CONC(PORT_u8ModePin7,PORT_u8ModePin6,PORT_u8ModePin5,PORT_u8ModePin4,PORT_u8ModePin3,PORT_u8ModePin2,PORT_u8ModePin1,PORT_u8ModePin0);
    1510:	eb e3       	ldi	r30, 0x3B	; 59
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	8f ef       	ldi	r24, 0xFF	; 255
    1516:	80 83       	st	Z, r24
	PORTB= CONC(PORT_u8ModePin7,PORT_u8ModePin6,PORT_u8ModePin5,PORT_u8ModePin4,PORT_u8ModePin3,PORT_u8ModePin2,PORT_u8ModePin1,PORT_u8ModePin0);
    1518:	e8 e3       	ldi	r30, 0x38	; 56
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	8f ef       	ldi	r24, 0xFF	; 255
    151e:	80 83       	st	Z, r24
	PORTC= CONC(PORT_u8ModePin7,PORT_u8ModePin6,PORT_u8ModePin5,PORT_u8ModePin4,PORT_u8ModePin3,PORT_u8ModePin2,PORT_u8ModePin1,PORT_u8ModePin0);
    1520:	e5 e3       	ldi	r30, 0x35	; 53
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	8f ef       	ldi	r24, 0xFF	; 255
    1526:	80 83       	st	Z, r24
	PORTD= CONC(PORT_u8ModePin7,PORT_u8ModePin6,PORT_u8ModePin5,PORT_u8ModePin4,PORT_u8ModePin3,PORT_u8ModePin2,PORT_u8ModePin1,PORT_u8ModePin0);
    1528:	e2 e3       	ldi	r30, 0x32	; 50
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	8f ef       	ldi	r24, 0xFF	; 255
    152e:	80 83       	st	Z, r24
#undef  PORT_u8Intput_Pullup
#define PORT_u8Intput_Pullup     2

#undef  PORT_u8Intput_Floating
#define PORT_u8Intput_Floating   3
}
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <Port_enuSetPinDirection>:


Port_tenuErrorStatus Port_enuSetPinDirection(u8 Copy_u8PinNum ,u8 Copy_u8PinDirection )
{
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	00 d0       	rcall	.+0      	; 0x153c <Port_enuSetPinDirection+0x6>
    153c:	00 d0       	rcall	.+0      	; 0x153e <Port_enuSetPinDirection+0x8>
    153e:	00 d0       	rcall	.+0      	; 0x1540 <Port_enuSetPinDirection+0xa>
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	8b 83       	std	Y+3, r24	; 0x03
    1546:	6c 83       	std	Y+4, r22	; 0x04

	u8 Copy_u8PortNum = Copy_u8PinNum / RIGESTER_SIZE;    // Port Number
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	86 95       	lsr	r24
    154c:	86 95       	lsr	r24
    154e:	86 95       	lsr	r24
    1550:	8a 83       	std	Y+2, r24	; 0x02
	Port_tenuErrorStatus Error_State = Port_EnmOk;
    1552:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PinNum > NUMBER_PINS ){
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	81 32       	cpi	r24, 0x21	; 33
    1558:	10 f0       	brcs	.+4      	; 0x155e <Port_enuSetPinDirection+0x28>
		Error_State = Port_EnmPinError;
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	89 83       	std	Y+1, r24	; 0x01
	}

	switch(Copy_u8PortNum)
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	3e 83       	std	Y+6, r19	; 0x06
    1566:	2d 83       	std	Y+5, r18	; 0x05
    1568:	8d 81       	ldd	r24, Y+5	; 0x05
    156a:	9e 81       	ldd	r25, Y+6	; 0x06
    156c:	81 30       	cpi	r24, 0x01	; 1
    156e:	91 05       	cpc	r25, r1
    1570:	09 f4       	brne	.+2      	; 0x1574 <Port_enuSetPinDirection+0x3e>
    1572:	49 c0       	rjmp	.+146    	; 0x1606 <Port_enuSetPinDirection+0xd0>
    1574:	2d 81       	ldd	r18, Y+5	; 0x05
    1576:	3e 81       	ldd	r19, Y+6	; 0x06
    1578:	22 30       	cpi	r18, 0x02	; 2
    157a:	31 05       	cpc	r19, r1
    157c:	2c f4       	brge	.+10     	; 0x1588 <Port_enuSetPinDirection+0x52>
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	9e 81       	ldd	r25, Y+6	; 0x06
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	71 f0       	breq	.+28     	; 0x15a2 <Port_enuSetPinDirection+0x6c>
    1586:	d5 c0       	rjmp	.+426    	; 0x1732 <Port_enuSetPinDirection+0x1fc>
    1588:	2d 81       	ldd	r18, Y+5	; 0x05
    158a:	3e 81       	ldd	r19, Y+6	; 0x06
    158c:	22 30       	cpi	r18, 0x02	; 2
    158e:	31 05       	cpc	r19, r1
    1590:	09 f4       	brne	.+2      	; 0x1594 <Port_enuSetPinDirection+0x5e>
    1592:	6b c0       	rjmp	.+214    	; 0x166a <Port_enuSetPinDirection+0x134>
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	9e 81       	ldd	r25, Y+6	; 0x06
    1598:	83 30       	cpi	r24, 0x03	; 3
    159a:	91 05       	cpc	r25, r1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <Port_enuSetPinDirection+0x6a>
    159e:	97 c0       	rjmp	.+302    	; 0x16ce <Port_enuSetPinDirection+0x198>
    15a0:	c8 c0       	rjmp	.+400    	; 0x1732 <Port_enuSetPinDirection+0x1fc>
	{
	case PORTA_REG :
	{
		if (Copy_u8PinDirection == OUTPUT){
    15a2:	8c 81       	ldd	r24, Y+4	; 0x04
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	a1 f4       	brne	.+40     	; 0x15d0 <Port_enuSetPinDirection+0x9a>
			SET_BIT(DDRA,Copy_u8PinNum);
    15a8:	aa e3       	ldi	r26, 0x3A	; 58
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	ea e3       	ldi	r30, 0x3A	; 58
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <Port_enuSetPinDirection+0x90>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <Port_enuSetPinDirection+0x8c>
    15ca:	84 2b       	or	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	b3 c0       	rjmp	.+358    	; 0x1736 <Port_enuSetPinDirection+0x200>
		}
		else if (Copy_u8PinDirection == INTPUT){
    15d0:	8c 81       	ldd	r24, Y+4	; 0x04
    15d2:	88 23       	and	r24, r24
    15d4:	a9 f4       	brne	.+42     	; 0x1600 <Port_enuSetPinDirection+0xca>
			CLR_BIT(DDRA,Copy_u8PinNum);
    15d6:	aa e3       	ldi	r26, 0x3A	; 58
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	ea e3       	ldi	r30, 0x3A	; 58
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	48 2f       	mov	r20, r24
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 2e       	mov	r0, r18
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <Port_enuSetPinDirection+0xbe>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	0a 94       	dec	r0
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <Port_enuSetPinDirection+0xba>
    15f8:	80 95       	com	r24
    15fa:	84 23       	and	r24, r20
    15fc:	8c 93       	st	X, r24
    15fe:	9b c0       	rjmp	.+310    	; 0x1736 <Port_enuSetPinDirection+0x200>
		}
		else {
			Error_State = Port_EnmDirectionError;
    1600:	84 e0       	ldi	r24, 0x04	; 4
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	98 c0       	rjmp	.+304    	; 0x1736 <Port_enuSetPinDirection+0x200>
	}break;


	case PORTB_REG:
	{
		if (Copy_u8PinDirection == OUTPUT){
    1606:	8c 81       	ldd	r24, Y+4	; 0x04
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	a1 f4       	brne	.+40     	; 0x1634 <Port_enuSetPinDirection+0xfe>
			SET_BIT(DDRB,Copy_u8PinNum);
    160c:	a7 e3       	ldi	r26, 0x37	; 55
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e7 e3       	ldi	r30, 0x37	; 55
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 2e       	mov	r0, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <Port_enuSetPinDirection+0xf4>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	0a 94       	dec	r0
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <Port_enuSetPinDirection+0xf0>
    162e:	84 2b       	or	r24, r20
    1630:	8c 93       	st	X, r24
    1632:	81 c0       	rjmp	.+258    	; 0x1736 <Port_enuSetPinDirection+0x200>
		}
		else if (Copy_u8PinDirection == INTPUT){
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	88 23       	and	r24, r24
    1638:	a9 f4       	brne	.+42     	; 0x1664 <Port_enuSetPinDirection+0x12e>
			CLR_BIT(DDRB,Copy_u8PinNum);
    163a:	a7 e3       	ldi	r26, 0x37	; 55
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e7 e3       	ldi	r30, 0x37	; 55
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	48 2f       	mov	r20, r24
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 2e       	mov	r0, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <Port_enuSetPinDirection+0x122>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <Port_enuSetPinDirection+0x11e>
    165c:	80 95       	com	r24
    165e:	84 23       	and	r24, r20
    1660:	8c 93       	st	X, r24
    1662:	69 c0       	rjmp	.+210    	; 0x1736 <Port_enuSetPinDirection+0x200>
		}
		else {
			Error_State = Port_EnmDirectionError;
    1664:	84 e0       	ldi	r24, 0x04	; 4
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	66 c0       	rjmp	.+204    	; 0x1736 <Port_enuSetPinDirection+0x200>
		}
	}break;
	case PORTC_REG :
	{
		if (Copy_u8PinDirection == OUTPUT){
    166a:	8c 81       	ldd	r24, Y+4	; 0x04
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	a1 f4       	brne	.+40     	; 0x1698 <Port_enuSetPinDirection+0x162>
			SET_BIT(DDRC,Copy_u8PinNum);
    1670:	a4 e3       	ldi	r26, 0x34	; 52
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e4 e3       	ldi	r30, 0x34	; 52
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	48 2f       	mov	r20, r24
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	02 2e       	mov	r0, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <Port_enuSetPinDirection+0x158>
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	0a 94       	dec	r0
    1690:	e2 f7       	brpl	.-8      	; 0x168a <Port_enuSetPinDirection+0x154>
    1692:	84 2b       	or	r24, r20
    1694:	8c 93       	st	X, r24
    1696:	4f c0       	rjmp	.+158    	; 0x1736 <Port_enuSetPinDirection+0x200>
		}
		else if (Copy_u8PinDirection == INTPUT){
    1698:	8c 81       	ldd	r24, Y+4	; 0x04
    169a:	88 23       	and	r24, r24
    169c:	a9 f4       	brne	.+42     	; 0x16c8 <Port_enuSetPinDirection+0x192>
			CLR_BIT(DDRC,Copy_u8PinNum);
    169e:	a4 e3       	ldi	r26, 0x34	; 52
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e4 e3       	ldi	r30, 0x34	; 52
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	48 2f       	mov	r20, r24
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	02 2e       	mov	r0, r18
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <Port_enuSetPinDirection+0x186>
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	0a 94       	dec	r0
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <Port_enuSetPinDirection+0x182>
    16c0:	80 95       	com	r24
    16c2:	84 23       	and	r24, r20
    16c4:	8c 93       	st	X, r24
    16c6:	37 c0       	rjmp	.+110    	; 0x1736 <Port_enuSetPinDirection+0x200>
		}
		else {
			Error_State = Port_EnmDirectionError;
    16c8:	84 e0       	ldi	r24, 0x04	; 4
    16ca:	89 83       	std	Y+1, r24	; 0x01
    16cc:	34 c0       	rjmp	.+104    	; 0x1736 <Port_enuSetPinDirection+0x200>
		}
	}break;
	case PORTD_REG:
	{
		if (Copy_u8PinDirection == OUTPUT){
    16ce:	8c 81       	ldd	r24, Y+4	; 0x04
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	a1 f4       	brne	.+40     	; 0x16fc <Port_enuSetPinDirection+0x1c6>
			SET_BIT(DDRD,Copy_u8PinNum);
    16d4:	a1 e3       	ldi	r26, 0x31	; 49
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e1 e3       	ldi	r30, 0x31	; 49
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <Port_enuSetPinDirection+0x1bc>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <Port_enuSetPinDirection+0x1b8>
    16f6:	84 2b       	or	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	1d c0       	rjmp	.+58     	; 0x1736 <Port_enuSetPinDirection+0x200>
		}
		else if (Copy_u8PinDirection == INTPUT){
    16fc:	8c 81       	ldd	r24, Y+4	; 0x04
    16fe:	88 23       	and	r24, r24
    1700:	a9 f4       	brne	.+42     	; 0x172c <Port_enuSetPinDirection+0x1f6>
			CLR_BIT(DDRD,Copy_u8PinNum);
    1702:	a1 e3       	ldi	r26, 0x31	; 49
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e1 e3       	ldi	r30, 0x31	; 49
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <Port_enuSetPinDirection+0x1ea>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <Port_enuSetPinDirection+0x1e6>
    1724:	80 95       	com	r24
    1726:	84 23       	and	r24, r20
    1728:	8c 93       	st	X, r24
    172a:	05 c0       	rjmp	.+10     	; 0x1736 <Port_enuSetPinDirection+0x200>
		}
		else {
			Error_State = Port_EnmDirectionError;
    172c:	84 e0       	ldi	r24, 0x04	; 4
    172e:	89 83       	std	Y+1, r24	; 0x01
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <Port_enuSetPinDirection+0x200>
		}
	} break;

	default : Error_State = Port_EnmPinError; break;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_State;
    1736:	89 81       	ldd	r24, Y+1	; 0x01

}
    1738:	26 96       	adiw	r28, 0x06	; 6
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <Port_enuSetPinMode>:
Port_tenuErrorStatus Port_enuSetPinMode(u8 Copy_u8PinNum ,u8 Copy_u8PinMode )
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	2f 97       	sbiw	r28, 0x0f	; 15
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	de bf       	out	0x3e, r29	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	8c 83       	std	Y+4, r24	; 0x04
    1760:	6d 83       	std	Y+5, r22	; 0x05

	u8 Copy_u8PortNum = Copy_u8PinNum / RIGESTER_SIZE;
    1762:	8c 81       	ldd	r24, Y+4	; 0x04
    1764:	86 95       	lsr	r24
    1766:	86 95       	lsr	r24
    1768:	86 95       	lsr	r24
    176a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Pin_NUM = Copy_u8PinNum % RIGESTER_SIZE;
    176c:	8c 81       	ldd	r24, Y+4	; 0x04
    176e:	87 70       	andi	r24, 0x07	; 7
    1770:	8a 83       	std	Y+2, r24	; 0x02
	Port_tenuErrorStatus Error_State = Port_EnmOk;
    1772:	19 82       	std	Y+1, r1	; 0x01

	// Check for valid pin number
	if (Copy_u8PinNum > NUMBER_PINS){
    1774:	8c 81       	ldd	r24, Y+4	; 0x04
    1776:	81 32       	cpi	r24, 0x21	; 33
    1778:	18 f0       	brcs	.+6      	; 0x1780 <Port_enuSetPinMode+0x36>
		Error_State = Port_EnmPinError;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	89 83       	std	Y+1, r24	; 0x01
    177e:	24 c3       	rjmp	.+1608   	; 0x1dc8 <Port_enuSetPinMode+0x67e>
	}
	else {
		switch(Copy_u8PortNum)
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	3f 87       	std	Y+15, r19	; 0x0f
    1788:	2e 87       	std	Y+14, r18	; 0x0e
    178a:	8e 85       	ldd	r24, Y+14	; 0x0e
    178c:	9f 85       	ldd	r25, Y+15	; 0x0f
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	91 05       	cpc	r25, r1
    1792:	09 f4       	brne	.+2      	; 0x1796 <Port_enuSetPinMode+0x4c>
    1794:	d7 c0       	rjmp	.+430    	; 0x1944 <Port_enuSetPinMode+0x1fa>
    1796:	2e 85       	ldd	r18, Y+14	; 0x0e
    1798:	3f 85       	ldd	r19, Y+15	; 0x0f
    179a:	22 30       	cpi	r18, 0x02	; 2
    179c:	31 05       	cpc	r19, r1
    179e:	2c f4       	brge	.+10     	; 0x17aa <Port_enuSetPinMode+0x60>
    17a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    17a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	71 f0       	breq	.+28     	; 0x17c4 <Port_enuSetPinMode+0x7a>
    17a8:	0d c3       	rjmp	.+1562   	; 0x1dc4 <Port_enuSetPinMode+0x67a>
    17aa:	2e 85       	ldd	r18, Y+14	; 0x0e
    17ac:	3f 85       	ldd	r19, Y+15	; 0x0f
    17ae:	22 30       	cpi	r18, 0x02	; 2
    17b0:	31 05       	cpc	r19, r1
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <Port_enuSetPinMode+0x6c>
    17b4:	87 c1       	rjmp	.+782    	; 0x1ac4 <Port_enuSetPinMode+0x37a>
    17b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    17b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    17ba:	83 30       	cpi	r24, 0x03	; 3
    17bc:	91 05       	cpc	r25, r1
    17be:	09 f4       	brne	.+2      	; 0x17c2 <Port_enuSetPinMode+0x78>
    17c0:	41 c2       	rjmp	.+1154   	; 0x1c44 <Port_enuSetPinMode+0x4fa>
    17c2:	00 c3       	rjmp	.+1536   	; 0x1dc4 <Port_enuSetPinMode+0x67a>
		{
		case PORTA_REG :
		{
			switch (Copy_u8PinMode)
    17c4:	8d 81       	ldd	r24, Y+5	; 0x05
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	3d 87       	std	Y+13, r19	; 0x0d
    17cc:	2c 87       	std	Y+12, r18	; 0x0c
    17ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    17d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	91 05       	cpc	r25, r1
    17d6:	b9 f0       	breq	.+46     	; 0x1806 <Port_enuSetPinMode+0xbc>
    17d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    17da:	3d 85       	ldd	r19, Y+13	; 0x0d
    17dc:	22 30       	cpi	r18, 0x02	; 2
    17de:	31 05       	cpc	r19, r1
    17e0:	2c f4       	brge	.+10     	; 0x17ec <Port_enuSetPinMode+0xa2>
    17e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    17e4:	9d 85       	ldd	r25, Y+13	; 0x0d
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	a1 f1       	breq	.+104    	; 0x1852 <Port_enuSetPinMode+0x108>
    17ea:	a9 c0       	rjmp	.+338    	; 0x193e <Port_enuSetPinMode+0x1f4>
    17ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    17ee:	3d 85       	ldd	r19, Y+13	; 0x0d
    17f0:	22 30       	cpi	r18, 0x02	; 2
    17f2:	31 05       	cpc	r19, r1
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <Port_enuSetPinMode+0xae>
    17f6:	54 c0       	rjmp	.+168    	; 0x18a0 <Port_enuSetPinMode+0x156>
    17f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    17fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    17fc:	83 30       	cpi	r24, 0x03	; 3
    17fe:	91 05       	cpc	r25, r1
    1800:	09 f4       	brne	.+2      	; 0x1804 <Port_enuSetPinMode+0xba>
    1802:	75 c0       	rjmp	.+234    	; 0x18ee <Port_enuSetPinMode+0x1a4>
    1804:	9c c0       	rjmp	.+312    	; 0x193e <Port_enuSetPinMode+0x1f4>
			{
			case PORT_u8Output_High :
			{
				SET_BIT(DDRA,Pin_NUM);
    1806:	aa e3       	ldi	r26, 0x3A	; 58
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	ea e3       	ldi	r30, 0x3A	; 58
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	48 2f       	mov	r20, r24
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <Port_enuSetPinMode+0xd8>
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	2a 95       	dec	r18
    1824:	e2 f7       	brpl	.-8      	; 0x181e <Port_enuSetPinMode+0xd4>
    1826:	84 2b       	or	r24, r20
    1828:	8c 93       	st	X, r24
				SET_BIT(PORTA,Pin_NUM);
    182a:	ab e3       	ldi	r26, 0x3B	; 59
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	eb e3       	ldi	r30, 0x3B	; 59
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	48 2f       	mov	r20, r24
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 2e       	mov	r0, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <Port_enuSetPinMode+0xfe>
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <Port_enuSetPinMode+0xfa>
    184c:	84 2b       	or	r24, r20
    184e:	8c 93       	st	X, r24
    1850:	bb c2       	rjmp	.+1398   	; 0x1dc8 <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Output_Low :
			{
				SET_BIT(DDRA,Pin_NUM);
    1852:	aa e3       	ldi	r26, 0x3A	; 58
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	ea e3       	ldi	r30, 0x3A	; 58
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	48 2f       	mov	r20, r24
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 c0       	rjmp	.+4      	; 0x186e <Port_enuSetPinMode+0x124>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	2a 95       	dec	r18
    1870:	e2 f7       	brpl	.-8      	; 0x186a <Port_enuSetPinMode+0x120>
    1872:	84 2b       	or	r24, r20
    1874:	8c 93       	st	X, r24
				CLR_BIT(PORTA,Pin_NUM);
    1876:	ab e3       	ldi	r26, 0x3B	; 59
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	eb e3       	ldi	r30, 0x3B	; 59
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	48 2f       	mov	r20, r24
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	02 2e       	mov	r0, r18
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <Port_enuSetPinMode+0x14a>
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	0a 94       	dec	r0
    1896:	e2 f7       	brpl	.-8      	; 0x1890 <Port_enuSetPinMode+0x146>
    1898:	80 95       	com	r24
    189a:	84 23       	and	r24, r20
    189c:	8c 93       	st	X, r24
    189e:	94 c2       	rjmp	.+1320   	; 0x1dc8 <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Intput_Pullup :
			{
				CLR_BIT(DDRA,Pin_NUM);
    18a0:	aa e3       	ldi	r26, 0x3A	; 58
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	ea e3       	ldi	r30, 0x3A	; 58
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	48 2f       	mov	r20, r24
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <Port_enuSetPinMode+0x172>
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	2a 95       	dec	r18
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <Port_enuSetPinMode+0x16e>
    18c0:	80 95       	com	r24
    18c2:	84 23       	and	r24, r20
    18c4:	8c 93       	st	X, r24
				SET_BIT(PORTA,Pin_NUM);
    18c6:	ab e3       	ldi	r26, 0x3B	; 59
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	eb e3       	ldi	r30, 0x3B	; 59
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	48 2f       	mov	r20, r24
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	02 2e       	mov	r0, r18
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <Port_enuSetPinMode+0x19a>
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	0a 94       	dec	r0
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <Port_enuSetPinMode+0x196>
    18e8:	84 2b       	or	r24, r20
    18ea:	8c 93       	st	X, r24
    18ec:	6d c2       	rjmp	.+1242   	; 0x1dc8 <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Intput_Floating :
			{
				CLR_BIT(DDRA,Pin_NUM);
    18ee:	aa e3       	ldi	r26, 0x3A	; 58
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	ea e3       	ldi	r30, 0x3A	; 58
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	48 2f       	mov	r20, r24
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	02 c0       	rjmp	.+4      	; 0x190a <Port_enuSetPinMode+0x1c0>
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	2a 95       	dec	r18
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <Port_enuSetPinMode+0x1bc>
    190e:	80 95       	com	r24
    1910:	84 23       	and	r24, r20
    1912:	8c 93       	st	X, r24
				CLR_BIT(PORTA,Pin_NUM);
    1914:	ab e3       	ldi	r26, 0x3B	; 59
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	eb e3       	ldi	r30, 0x3B	; 59
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	48 2f       	mov	r20, r24
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	02 2e       	mov	r0, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <Port_enuSetPinMode+0x1e8>
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	0a 94       	dec	r0
    1934:	e2 f7       	brpl	.-8      	; 0x192e <Port_enuSetPinMode+0x1e4>
    1936:	80 95       	com	r24
    1938:	84 23       	and	r24, r20
    193a:	8c 93       	st	X, r24
    193c:	45 c2       	rjmp	.+1162   	; 0x1dc8 <Port_enuSetPinMode+0x67e>
			}break;

			default:   Error_State = Port_EnmInvalidPinMode; break;
    193e:	82 e0       	ldi	r24, 0x02	; 2
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	42 c2       	rjmp	.+1156   	; 0x1dc8 <Port_enuSetPinMode+0x67e>
			}
		}break;
		case PORTB_REG :
		{
			switch (Copy_u8PinMode)
    1944:	8d 81       	ldd	r24, Y+5	; 0x05
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	3b 87       	std	Y+11, r19	; 0x0b
    194c:	2a 87       	std	Y+10, r18	; 0x0a
    194e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1950:	9b 85       	ldd	r25, Y+11	; 0x0b
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	91 05       	cpc	r25, r1
    1956:	b9 f0       	breq	.+46     	; 0x1986 <Port_enuSetPinMode+0x23c>
    1958:	2a 85       	ldd	r18, Y+10	; 0x0a
    195a:	3b 85       	ldd	r19, Y+11	; 0x0b
    195c:	22 30       	cpi	r18, 0x02	; 2
    195e:	31 05       	cpc	r19, r1
    1960:	2c f4       	brge	.+10     	; 0x196c <Port_enuSetPinMode+0x222>
    1962:	8a 85       	ldd	r24, Y+10	; 0x0a
    1964:	9b 85       	ldd	r25, Y+11	; 0x0b
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	a1 f1       	breq	.+104    	; 0x19d2 <Port_enuSetPinMode+0x288>
    196a:	a9 c0       	rjmp	.+338    	; 0x1abe <Port_enuSetPinMode+0x374>
    196c:	2a 85       	ldd	r18, Y+10	; 0x0a
    196e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1970:	22 30       	cpi	r18, 0x02	; 2
    1972:	31 05       	cpc	r19, r1
    1974:	09 f4       	brne	.+2      	; 0x1978 <Port_enuSetPinMode+0x22e>
    1976:	54 c0       	rjmp	.+168    	; 0x1a20 <Port_enuSetPinMode+0x2d6>
    1978:	8a 85       	ldd	r24, Y+10	; 0x0a
    197a:	9b 85       	ldd	r25, Y+11	; 0x0b
    197c:	83 30       	cpi	r24, 0x03	; 3
    197e:	91 05       	cpc	r25, r1
    1980:	09 f4       	brne	.+2      	; 0x1984 <Port_enuSetPinMode+0x23a>
    1982:	75 c0       	rjmp	.+234    	; 0x1a6e <Port_enuSetPinMode+0x324>
    1984:	9c c0       	rjmp	.+312    	; 0x1abe <Port_enuSetPinMode+0x374>
			{
			case PORT_u8Output_High :
			{
				SET_BIT(DDRB,Pin_NUM);
    1986:	a7 e3       	ldi	r26, 0x37	; 55
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e7 e3       	ldi	r30, 0x37	; 55
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	48 2f       	mov	r20, r24
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <Port_enuSetPinMode+0x258>
    199e:	88 0f       	add	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	2a 95       	dec	r18
    19a4:	e2 f7       	brpl	.-8      	; 0x199e <Port_enuSetPinMode+0x254>
    19a6:	84 2b       	or	r24, r20
    19a8:	8c 93       	st	X, r24
				SET_BIT(PORTB,Pin_NUM);
    19aa:	a8 e3       	ldi	r26, 0x38	; 56
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e8 e3       	ldi	r30, 0x38	; 56
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	48 2f       	mov	r20, r24
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	02 2e       	mov	r0, r18
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <Port_enuSetPinMode+0x27e>
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	0a 94       	dec	r0
    19ca:	e2 f7       	brpl	.-8      	; 0x19c4 <Port_enuSetPinMode+0x27a>
    19cc:	84 2b       	or	r24, r20
    19ce:	8c 93       	st	X, r24
    19d0:	fb c1       	rjmp	.+1014   	; 0x1dc8 <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Output_Low :
			{
				SET_BIT(DDRB,Pin_NUM);
    19d2:	a7 e3       	ldi	r26, 0x37	; 55
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e7 e3       	ldi	r30, 0x37	; 55
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <Port_enuSetPinMode+0x2a4>
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	2a 95       	dec	r18
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <Port_enuSetPinMode+0x2a0>
    19f2:	84 2b       	or	r24, r20
    19f4:	8c 93       	st	X, r24
				CLR_BIT(PORTB,Pin_NUM);
    19f6:	a8 e3       	ldi	r26, 0x38	; 56
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e8 e3       	ldi	r30, 0x38	; 56
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	48 2f       	mov	r20, r24
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	02 2e       	mov	r0, r18
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <Port_enuSetPinMode+0x2ca>
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	0a 94       	dec	r0
    1a16:	e2 f7       	brpl	.-8      	; 0x1a10 <Port_enuSetPinMode+0x2c6>
    1a18:	80 95       	com	r24
    1a1a:	84 23       	and	r24, r20
    1a1c:	8c 93       	st	X, r24
    1a1e:	d4 c1       	rjmp	.+936    	; 0x1dc8 <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Intput_Pullup :
			{
				CLR_BIT(DDRB,Pin_NUM);
    1a20:	a7 e3       	ldi	r26, 0x37	; 55
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e7 e3       	ldi	r30, 0x37	; 55
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <Port_enuSetPinMode+0x2f2>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	2a 95       	dec	r18
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <Port_enuSetPinMode+0x2ee>
    1a40:	80 95       	com	r24
    1a42:	84 23       	and	r24, r20
    1a44:	8c 93       	st	X, r24
				SET_BIT(PORTB,Pin_NUM);
    1a46:	a8 e3       	ldi	r26, 0x38	; 56
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e8 e3       	ldi	r30, 0x38	; 56
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	48 2f       	mov	r20, r24
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	02 2e       	mov	r0, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <Port_enuSetPinMode+0x31a>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	0a 94       	dec	r0
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <Port_enuSetPinMode+0x316>
    1a68:	84 2b       	or	r24, r20
    1a6a:	8c 93       	st	X, r24
    1a6c:	ad c1       	rjmp	.+858    	; 0x1dc8 <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Intput_Floating :
			{
				CLR_BIT(DDRB,Pin_NUM);
    1a6e:	a7 e3       	ldi	r26, 0x37	; 55
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e7 e3       	ldi	r30, 0x37	; 55
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	48 2f       	mov	r20, r24
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <Port_enuSetPinMode+0x340>
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	2a 95       	dec	r18
    1a8c:	e2 f7       	brpl	.-8      	; 0x1a86 <Port_enuSetPinMode+0x33c>
    1a8e:	80 95       	com	r24
    1a90:	84 23       	and	r24, r20
    1a92:	8c 93       	st	X, r24
				CLR_BIT(PORTB,Pin_NUM);
    1a94:	a8 e3       	ldi	r26, 0x38	; 56
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e8 e3       	ldi	r30, 0x38	; 56
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	48 2f       	mov	r20, r24
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	02 2e       	mov	r0, r18
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <Port_enuSetPinMode+0x368>
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	0a 94       	dec	r0
    1ab4:	e2 f7       	brpl	.-8      	; 0x1aae <Port_enuSetPinMode+0x364>
    1ab6:	80 95       	com	r24
    1ab8:	84 23       	and	r24, r20
    1aba:	8c 93       	st	X, r24
    1abc:	85 c1       	rjmp	.+778    	; 0x1dc8 <Port_enuSetPinMode+0x67e>
			}break;
			default:   Error_State = Port_EnmInvalidPinMode; break;
    1abe:	82 e0       	ldi	r24, 0x02	; 2
    1ac0:	89 83       	std	Y+1, r24	; 0x01
    1ac2:	82 c1       	rjmp	.+772    	; 0x1dc8 <Port_enuSetPinMode+0x67e>

			}
		}break;
		case PORTC_REG :
		{
			switch (Copy_u8PinMode)
    1ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	39 87       	std	Y+9, r19	; 0x09
    1acc:	28 87       	std	Y+8, r18	; 0x08
    1ace:	88 85       	ldd	r24, Y+8	; 0x08
    1ad0:	99 85       	ldd	r25, Y+9	; 0x09
    1ad2:	81 30       	cpi	r24, 0x01	; 1
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	b9 f0       	breq	.+46     	; 0x1b06 <Port_enuSetPinMode+0x3bc>
    1ad8:	28 85       	ldd	r18, Y+8	; 0x08
    1ada:	39 85       	ldd	r19, Y+9	; 0x09
    1adc:	22 30       	cpi	r18, 0x02	; 2
    1ade:	31 05       	cpc	r19, r1
    1ae0:	2c f4       	brge	.+10     	; 0x1aec <Port_enuSetPinMode+0x3a2>
    1ae2:	88 85       	ldd	r24, Y+8	; 0x08
    1ae4:	99 85       	ldd	r25, Y+9	; 0x09
    1ae6:	00 97       	sbiw	r24, 0x00	; 0
    1ae8:	a1 f1       	breq	.+104    	; 0x1b52 <Port_enuSetPinMode+0x408>
    1aea:	a9 c0       	rjmp	.+338    	; 0x1c3e <Port_enuSetPinMode+0x4f4>
    1aec:	28 85       	ldd	r18, Y+8	; 0x08
    1aee:	39 85       	ldd	r19, Y+9	; 0x09
    1af0:	22 30       	cpi	r18, 0x02	; 2
    1af2:	31 05       	cpc	r19, r1
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <Port_enuSetPinMode+0x3ae>
    1af6:	54 c0       	rjmp	.+168    	; 0x1ba0 <Port_enuSetPinMode+0x456>
    1af8:	88 85       	ldd	r24, Y+8	; 0x08
    1afa:	99 85       	ldd	r25, Y+9	; 0x09
    1afc:	83 30       	cpi	r24, 0x03	; 3
    1afe:	91 05       	cpc	r25, r1
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <Port_enuSetPinMode+0x3ba>
    1b02:	75 c0       	rjmp	.+234    	; 0x1bee <Port_enuSetPinMode+0x4a4>
    1b04:	9c c0       	rjmp	.+312    	; 0x1c3e <Port_enuSetPinMode+0x4f4>
			{
			case PORT_u8Output_High :
			{
				SET_BIT(DDRC,Pin_NUM);
    1b06:	a4 e3       	ldi	r26, 0x34	; 52
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e4 e3       	ldi	r30, 0x34	; 52
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	48 2f       	mov	r20, r24
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <Port_enuSetPinMode+0x3d8>
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	2a 95       	dec	r18
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <Port_enuSetPinMode+0x3d4>
    1b26:	84 2b       	or	r24, r20
    1b28:	8c 93       	st	X, r24
				SET_BIT(PORTC,Pin_NUM);
    1b2a:	a5 e3       	ldi	r26, 0x35	; 53
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e5 e3       	ldi	r30, 0x35	; 53
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	48 2f       	mov	r20, r24
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	02 2e       	mov	r0, r18
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <Port_enuSetPinMode+0x3fe>
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	0a 94       	dec	r0
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <Port_enuSetPinMode+0x3fa>
    1b4c:	84 2b       	or	r24, r20
    1b4e:	8c 93       	st	X, r24
    1b50:	3b c1       	rjmp	.+630    	; 0x1dc8 <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Output_Low :
			{
				SET_BIT(DDRC,Pin_NUM);
    1b52:	a4 e3       	ldi	r26, 0x34	; 52
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e4 e3       	ldi	r30, 0x34	; 52
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	48 2f       	mov	r20, r24
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <Port_enuSetPinMode+0x424>
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	2a 95       	dec	r18
    1b70:	e2 f7       	brpl	.-8      	; 0x1b6a <Port_enuSetPinMode+0x420>
    1b72:	84 2b       	or	r24, r20
    1b74:	8c 93       	st	X, r24
				CLR_BIT(PORTC,Pin_NUM);
    1b76:	a5 e3       	ldi	r26, 0x35	; 53
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e5 e3       	ldi	r30, 0x35	; 53
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	48 2f       	mov	r20, r24
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	02 2e       	mov	r0, r18
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <Port_enuSetPinMode+0x44a>
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	0a 94       	dec	r0
    1b96:	e2 f7       	brpl	.-8      	; 0x1b90 <Port_enuSetPinMode+0x446>
    1b98:	80 95       	com	r24
    1b9a:	84 23       	and	r24, r20
    1b9c:	8c 93       	st	X, r24
    1b9e:	14 c1       	rjmp	.+552    	; 0x1dc8 <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Intput_Pullup :
			{
				CLR_BIT(DDRC,Pin_NUM);
    1ba0:	a4 e3       	ldi	r26, 0x34	; 52
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e4 e3       	ldi	r30, 0x34	; 52
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	48 2f       	mov	r20, r24
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <Port_enuSetPinMode+0x472>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	2a 95       	dec	r18
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <Port_enuSetPinMode+0x46e>
    1bc0:	80 95       	com	r24
    1bc2:	84 23       	and	r24, r20
    1bc4:	8c 93       	st	X, r24
				SET_BIT(PORTC,Pin_NUM);
    1bc6:	a5 e3       	ldi	r26, 0x35	; 53
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e5 e3       	ldi	r30, 0x35	; 53
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	48 2f       	mov	r20, r24
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	02 2e       	mov	r0, r18
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <Port_enuSetPinMode+0x49a>
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	0a 94       	dec	r0
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <Port_enuSetPinMode+0x496>
    1be8:	84 2b       	or	r24, r20
    1bea:	8c 93       	st	X, r24
    1bec:	ed c0       	rjmp	.+474    	; 0x1dc8 <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Intput_Floating :
			{
				CLR_BIT(DDRC,Pin_NUM);
    1bee:	a4 e3       	ldi	r26, 0x34	; 52
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e4 e3       	ldi	r30, 0x34	; 52
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	48 2f       	mov	r20, r24
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <Port_enuSetPinMode+0x4c0>
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	2a 95       	dec	r18
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <Port_enuSetPinMode+0x4bc>
    1c0e:	80 95       	com	r24
    1c10:	84 23       	and	r24, r20
    1c12:	8c 93       	st	X, r24
				CLR_BIT(PORTC,Pin_NUM);
    1c14:	a5 e3       	ldi	r26, 0x35	; 53
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e5 e3       	ldi	r30, 0x35	; 53
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	48 2f       	mov	r20, r24
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	02 2e       	mov	r0, r18
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <Port_enuSetPinMode+0x4e8>
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	0a 94       	dec	r0
    1c34:	e2 f7       	brpl	.-8      	; 0x1c2e <Port_enuSetPinMode+0x4e4>
    1c36:	80 95       	com	r24
    1c38:	84 23       	and	r24, r20
    1c3a:	8c 93       	st	X, r24
    1c3c:	c5 c0       	rjmp	.+394    	; 0x1dc8 <Port_enuSetPinMode+0x67e>
			}break;
			default:   Error_State = Port_EnmInvalidPinMode; break;
    1c3e:	82 e0       	ldi	r24, 0x02	; 2
    1c40:	89 83       	std	Y+1, r24	; 0x01
    1c42:	c2 c0       	rjmp	.+388    	; 0x1dc8 <Port_enuSetPinMode+0x67e>
			}
		}break;
		case PORTD_REG :
		{
			switch (Copy_u8PinMode)
    1c44:	8d 81       	ldd	r24, Y+5	; 0x05
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	3f 83       	std	Y+7, r19	; 0x07
    1c4c:	2e 83       	std	Y+6, r18	; 0x06
    1c4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c50:	9f 81       	ldd	r25, Y+7	; 0x07
    1c52:	81 30       	cpi	r24, 0x01	; 1
    1c54:	91 05       	cpc	r25, r1
    1c56:	b9 f0       	breq	.+46     	; 0x1c86 <Port_enuSetPinMode+0x53c>
    1c58:	2e 81       	ldd	r18, Y+6	; 0x06
    1c5a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c5c:	22 30       	cpi	r18, 0x02	; 2
    1c5e:	31 05       	cpc	r19, r1
    1c60:	2c f4       	brge	.+10     	; 0x1c6c <Port_enuSetPinMode+0x522>
    1c62:	8e 81       	ldd	r24, Y+6	; 0x06
    1c64:	9f 81       	ldd	r25, Y+7	; 0x07
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	a1 f1       	breq	.+104    	; 0x1cd2 <Port_enuSetPinMode+0x588>
    1c6a:	a9 c0       	rjmp	.+338    	; 0x1dbe <Port_enuSetPinMode+0x674>
    1c6c:	2e 81       	ldd	r18, Y+6	; 0x06
    1c6e:	3f 81       	ldd	r19, Y+7	; 0x07
    1c70:	22 30       	cpi	r18, 0x02	; 2
    1c72:	31 05       	cpc	r19, r1
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <Port_enuSetPinMode+0x52e>
    1c76:	54 c0       	rjmp	.+168    	; 0x1d20 <Port_enuSetPinMode+0x5d6>
    1c78:	8e 81       	ldd	r24, Y+6	; 0x06
    1c7a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c7c:	83 30       	cpi	r24, 0x03	; 3
    1c7e:	91 05       	cpc	r25, r1
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <Port_enuSetPinMode+0x53a>
    1c82:	75 c0       	rjmp	.+234    	; 0x1d6e <Port_enuSetPinMode+0x624>
    1c84:	9c c0       	rjmp	.+312    	; 0x1dbe <Port_enuSetPinMode+0x674>
			{
			case PORT_u8Output_High :
			{
				SET_BIT(DDRD,Pin_NUM);
    1c86:	a1 e3       	ldi	r26, 0x31	; 49
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e1 e3       	ldi	r30, 0x31	; 49
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	48 2f       	mov	r20, r24
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <Port_enuSetPinMode+0x558>
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	2a 95       	dec	r18
    1ca4:	e2 f7       	brpl	.-8      	; 0x1c9e <Port_enuSetPinMode+0x554>
    1ca6:	84 2b       	or	r24, r20
    1ca8:	8c 93       	st	X, r24
				SET_BIT(PORTD,Pin_NUM);
    1caa:	a2 e3       	ldi	r26, 0x32	; 50
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e2 e3       	ldi	r30, 0x32	; 50
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	48 2f       	mov	r20, r24
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	02 2e       	mov	r0, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <Port_enuSetPinMode+0x57e>
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	0a 94       	dec	r0
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <Port_enuSetPinMode+0x57a>
    1ccc:	84 2b       	or	r24, r20
    1cce:	8c 93       	st	X, r24
    1cd0:	7b c0       	rjmp	.+246    	; 0x1dc8 <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Output_Low :
			{
				SET_BIT(DDRD,Pin_NUM);
    1cd2:	a1 e3       	ldi	r26, 0x31	; 49
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e1 e3       	ldi	r30, 0x31	; 49
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	48 2f       	mov	r20, r24
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <Port_enuSetPinMode+0x5a4>
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	2a 95       	dec	r18
    1cf0:	e2 f7       	brpl	.-8      	; 0x1cea <Port_enuSetPinMode+0x5a0>
    1cf2:	84 2b       	or	r24, r20
    1cf4:	8c 93       	st	X, r24
				CLR_BIT(PORTD,Pin_NUM);
    1cf6:	a2 e3       	ldi	r26, 0x32	; 50
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e2 e3       	ldi	r30, 0x32	; 50
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	48 2f       	mov	r20, r24
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 2e       	mov	r0, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <Port_enuSetPinMode+0x5ca>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <Port_enuSetPinMode+0x5c6>
    1d18:	80 95       	com	r24
    1d1a:	84 23       	and	r24, r20
    1d1c:	8c 93       	st	X, r24
    1d1e:	54 c0       	rjmp	.+168    	; 0x1dc8 <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Intput_Pullup :
			{
				CLR_BIT(DDRD,Pin_NUM);
    1d20:	a1 e3       	ldi	r26, 0x31	; 49
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e1 e3       	ldi	r30, 0x31	; 49
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	48 2f       	mov	r20, r24
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	28 2f       	mov	r18, r24
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <Port_enuSetPinMode+0x5f2>
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	2a 95       	dec	r18
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <Port_enuSetPinMode+0x5ee>
    1d40:	80 95       	com	r24
    1d42:	84 23       	and	r24, r20
    1d44:	8c 93       	st	X, r24
				SET_BIT(PORTD,Pin_NUM);
    1d46:	a2 e3       	ldi	r26, 0x32	; 50
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e2 e3       	ldi	r30, 0x32	; 50
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	48 2f       	mov	r20, r24
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	02 2e       	mov	r0, r18
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <Port_enuSetPinMode+0x61a>
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	0a 94       	dec	r0
    1d66:	e2 f7       	brpl	.-8      	; 0x1d60 <Port_enuSetPinMode+0x616>
    1d68:	84 2b       	or	r24, r20
    1d6a:	8c 93       	st	X, r24
    1d6c:	2d c0       	rjmp	.+90     	; 0x1dc8 <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Intput_Floating :
			{
				CLR_BIT(DDRD,Pin_NUM);
    1d6e:	a1 e3       	ldi	r26, 0x31	; 49
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e1 e3       	ldi	r30, 0x31	; 49
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	48 2f       	mov	r20, r24
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <Port_enuSetPinMode+0x640>
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	2a 95       	dec	r18
    1d8c:	e2 f7       	brpl	.-8      	; 0x1d86 <Port_enuSetPinMode+0x63c>
    1d8e:	80 95       	com	r24
    1d90:	84 23       	and	r24, r20
    1d92:	8c 93       	st	X, r24
				CLR_BIT(PORTD,Pin_NUM);
    1d94:	a2 e3       	ldi	r26, 0x32	; 50
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e2 e3       	ldi	r30, 0x32	; 50
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	48 2f       	mov	r20, r24
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	02 2e       	mov	r0, r18
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <Port_enuSetPinMode+0x668>
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	0a 94       	dec	r0
    1db4:	e2 f7       	brpl	.-8      	; 0x1dae <Port_enuSetPinMode+0x664>
    1db6:	80 95       	com	r24
    1db8:	84 23       	and	r24, r20
    1dba:	8c 93       	st	X, r24
    1dbc:	05 c0       	rjmp	.+10     	; 0x1dc8 <Port_enuSetPinMode+0x67e>
			}break;
			default:   Error_State = Port_EnmInvalidPinMode; break;
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <Port_enuSetPinMode+0x67e>
			}
		}break;
		default : Error_State =  Port_EnmInvalidPort; break;
    1dc4:	83 e0       	ldi	r24, 0x03	; 3
    1dc6:	89 83       	std	Y+1, r24	; 0x01


		}

	}
	return Error_State;
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01

}
    1dca:	2f 96       	adiw	r28, 0x0f	; 15
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	de bf       	out	0x3e, r29	; 62
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	cd bf       	out	0x3d, r28	; 61
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <MDIO_VidSetPinDirection>:


/*Main used Method*/
void MDIO_VidSetPinDirection(u8 Copy_u8Port,
							 u8 Copy_u8Pin ,
							 u8 Copy_u8Direction){
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	27 97       	sbiw	r28, 0x07	; 7
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	6a 83       	std	Y+2, r22	; 0x02
    1df4:	4b 83       	std	Y+3, r20	; 0x03

if (Copy_u8Direction == Pin_Input){
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	88 23       	and	r24, r24
    1dfa:	09 f0       	breq	.+2      	; 0x1dfe <MDIO_VidSetPinDirection+0x22>
    1dfc:	74 c0       	rjmp	.+232    	; 0x1ee6 <MDIO_VidSetPinDirection+0x10a>
   switch (Copy_u8Port) {
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	3f 83       	std	Y+7, r19	; 0x07
    1e06:	2e 83       	std	Y+6, r18	; 0x06
    1e08:	8e 81       	ldd	r24, Y+6	; 0x06
    1e0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	91 05       	cpc	r25, r1
    1e10:	59 f1       	breq	.+86     	; 0x1e68 <MDIO_VidSetPinDirection+0x8c>
    1e12:	2e 81       	ldd	r18, Y+6	; 0x06
    1e14:	3f 81       	ldd	r19, Y+7	; 0x07
    1e16:	22 30       	cpi	r18, 0x02	; 2
    1e18:	31 05       	cpc	r19, r1
    1e1a:	2c f4       	brge	.+10     	; 0x1e26 <MDIO_VidSetPinDirection+0x4a>
    1e1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e1e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	69 f0       	breq	.+26     	; 0x1e3e <MDIO_VidSetPinDirection+0x62>
    1e24:	d2 c0       	rjmp	.+420    	; 0x1fca <MDIO_VidSetPinDirection+0x1ee>
    1e26:	2e 81       	ldd	r18, Y+6	; 0x06
    1e28:	3f 81       	ldd	r19, Y+7	; 0x07
    1e2a:	22 30       	cpi	r18, 0x02	; 2
    1e2c:	31 05       	cpc	r19, r1
    1e2e:	89 f1       	breq	.+98     	; 0x1e92 <MDIO_VidSetPinDirection+0xb6>
    1e30:	8e 81       	ldd	r24, Y+6	; 0x06
    1e32:	9f 81       	ldd	r25, Y+7	; 0x07
    1e34:	83 30       	cpi	r24, 0x03	; 3
    1e36:	91 05       	cpc	r25, r1
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <MDIO_VidSetPinDirection+0x60>
    1e3a:	40 c0       	rjmp	.+128    	; 0x1ebc <MDIO_VidSetPinDirection+0xe0>
    1e3c:	c6 c0       	rjmp	.+396    	; 0x1fca <MDIO_VidSetPinDirection+0x1ee>
	   case Port_A : CLR_BIT(DDRA,Copy_u8Pin);break;
    1e3e:	aa e3       	ldi	r26, 0x3A	; 58
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	ea e3       	ldi	r30, 0x3A	; 58
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	48 2f       	mov	r20, r24
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	02 2e       	mov	r0, r18
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <MDIO_VidSetPinDirection+0x80>
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	0a 94       	dec	r0
    1e5e:	e2 f7       	brpl	.-8      	; 0x1e58 <MDIO_VidSetPinDirection+0x7c>
    1e60:	80 95       	com	r24
    1e62:	84 23       	and	r24, r20
    1e64:	8c 93       	st	X, r24
    1e66:	b1 c0       	rjmp	.+354    	; 0x1fca <MDIO_VidSetPinDirection+0x1ee>
	   case Port_B : CLR_BIT(DDRB,Copy_u8Pin);break;
    1e68:	a7 e3       	ldi	r26, 0x37	; 55
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e7 e3       	ldi	r30, 0x37	; 55
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	48 2f       	mov	r20, r24
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	02 2e       	mov	r0, r18
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <MDIO_VidSetPinDirection+0xaa>
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	0a 94       	dec	r0
    1e88:	e2 f7       	brpl	.-8      	; 0x1e82 <MDIO_VidSetPinDirection+0xa6>
    1e8a:	80 95       	com	r24
    1e8c:	84 23       	and	r24, r20
    1e8e:	8c 93       	st	X, r24
    1e90:	9c c0       	rjmp	.+312    	; 0x1fca <MDIO_VidSetPinDirection+0x1ee>
	   case Port_C : CLR_BIT(DDRC,Copy_u8Pin);break;
    1e92:	a4 e3       	ldi	r26, 0x34	; 52
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e4 e3       	ldi	r30, 0x34	; 52
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	48 2f       	mov	r20, r24
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	02 2e       	mov	r0, r18
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <MDIO_VidSetPinDirection+0xd4>
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	0a 94       	dec	r0
    1eb2:	e2 f7       	brpl	.-8      	; 0x1eac <MDIO_VidSetPinDirection+0xd0>
    1eb4:	80 95       	com	r24
    1eb6:	84 23       	and	r24, r20
    1eb8:	8c 93       	st	X, r24
    1eba:	87 c0       	rjmp	.+270    	; 0x1fca <MDIO_VidSetPinDirection+0x1ee>
	   case Port_D : CLR_BIT(DDRD,Copy_u8Pin);break;
    1ebc:	a1 e3       	ldi	r26, 0x31	; 49
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e1 e3       	ldi	r30, 0x31	; 49
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	48 2f       	mov	r20, r24
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	02 2e       	mov	r0, r18
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <MDIO_VidSetPinDirection+0xfe>
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	0a 94       	dec	r0
    1edc:	e2 f7       	brpl	.-8      	; 0x1ed6 <MDIO_VidSetPinDirection+0xfa>
    1ede:	80 95       	com	r24
    1ee0:	84 23       	and	r24, r20
    1ee2:	8c 93       	st	X, r24
    1ee4:	72 c0       	rjmp	.+228    	; 0x1fca <MDIO_VidSetPinDirection+0x1ee>
   }
	
}
else if (Copy_u8Direction == Pin_Output) {
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	81 30       	cpi	r24, 0x01	; 1
    1eea:	09 f0       	breq	.+2      	; 0x1eee <MDIO_VidSetPinDirection+0x112>
    1eec:	6e c0       	rjmp	.+220    	; 0x1fca <MDIO_VidSetPinDirection+0x1ee>
	
	switch (Copy_u8Port) {
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	3d 83       	std	Y+5, r19	; 0x05
    1ef6:	2c 83       	std	Y+4, r18	; 0x04
    1ef8:	8c 81       	ldd	r24, Y+4	; 0x04
    1efa:	9d 81       	ldd	r25, Y+5	; 0x05
    1efc:	81 30       	cpi	r24, 0x01	; 1
    1efe:	91 05       	cpc	r25, r1
    1f00:	49 f1       	breq	.+82     	; 0x1f54 <MDIO_VidSetPinDirection+0x178>
    1f02:	2c 81       	ldd	r18, Y+4	; 0x04
    1f04:	3d 81       	ldd	r19, Y+5	; 0x05
    1f06:	22 30       	cpi	r18, 0x02	; 2
    1f08:	31 05       	cpc	r19, r1
    1f0a:	2c f4       	brge	.+10     	; 0x1f16 <MDIO_VidSetPinDirection+0x13a>
    1f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	61 f0       	breq	.+24     	; 0x1f2c <MDIO_VidSetPinDirection+0x150>
    1f14:	5a c0       	rjmp	.+180    	; 0x1fca <MDIO_VidSetPinDirection+0x1ee>
    1f16:	2c 81       	ldd	r18, Y+4	; 0x04
    1f18:	3d 81       	ldd	r19, Y+5	; 0x05
    1f1a:	22 30       	cpi	r18, 0x02	; 2
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	71 f1       	breq	.+92     	; 0x1f7c <MDIO_VidSetPinDirection+0x1a0>
    1f20:	8c 81       	ldd	r24, Y+4	; 0x04
    1f22:	9d 81       	ldd	r25, Y+5	; 0x05
    1f24:	83 30       	cpi	r24, 0x03	; 3
    1f26:	91 05       	cpc	r25, r1
    1f28:	e9 f1       	breq	.+122    	; 0x1fa4 <MDIO_VidSetPinDirection+0x1c8>
    1f2a:	4f c0       	rjmp	.+158    	; 0x1fca <MDIO_VidSetPinDirection+0x1ee>
	   case Port_A : SET_BIT(DDRA,Copy_u8Pin);break;
    1f2c:	aa e3       	ldi	r26, 0x3A	; 58
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	ea e3       	ldi	r30, 0x3A	; 58
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	48 2f       	mov	r20, r24
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	28 2f       	mov	r18, r24
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	02 2e       	mov	r0, r18
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <MDIO_VidSetPinDirection+0x16e>
    1f46:	88 0f       	add	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	0a 94       	dec	r0
    1f4c:	e2 f7       	brpl	.-8      	; 0x1f46 <MDIO_VidSetPinDirection+0x16a>
    1f4e:	84 2b       	or	r24, r20
    1f50:	8c 93       	st	X, r24
    1f52:	3b c0       	rjmp	.+118    	; 0x1fca <MDIO_VidSetPinDirection+0x1ee>
	   case Port_B : SET_BIT(DDRB,Copy_u8Pin);break;
    1f54:	a7 e3       	ldi	r26, 0x37	; 55
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e7 e3       	ldi	r30, 0x37	; 55
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	48 2f       	mov	r20, r24
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	02 2e       	mov	r0, r18
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <MDIO_VidSetPinDirection+0x196>
    1f6e:	88 0f       	add	r24, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	0a 94       	dec	r0
    1f74:	e2 f7       	brpl	.-8      	; 0x1f6e <MDIO_VidSetPinDirection+0x192>
    1f76:	84 2b       	or	r24, r20
    1f78:	8c 93       	st	X, r24
    1f7a:	27 c0       	rjmp	.+78     	; 0x1fca <MDIO_VidSetPinDirection+0x1ee>
	   case Port_C : SET_BIT(DDRC,Copy_u8Pin);break;
    1f7c:	a4 e3       	ldi	r26, 0x34	; 52
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e4 e3       	ldi	r30, 0x34	; 52
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	48 2f       	mov	r20, r24
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	02 2e       	mov	r0, r18
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <MDIO_VidSetPinDirection+0x1be>
    1f96:	88 0f       	add	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	0a 94       	dec	r0
    1f9c:	e2 f7       	brpl	.-8      	; 0x1f96 <MDIO_VidSetPinDirection+0x1ba>
    1f9e:	84 2b       	or	r24, r20
    1fa0:	8c 93       	st	X, r24
    1fa2:	13 c0       	rjmp	.+38     	; 0x1fca <MDIO_VidSetPinDirection+0x1ee>
	   case Port_D : SET_BIT(DDRD,Copy_u8Pin);break;
    1fa4:	a1 e3       	ldi	r26, 0x31	; 49
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e1 e3       	ldi	r30, 0x31	; 49
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	48 2f       	mov	r20, r24
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	02 2e       	mov	r0, r18
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <MDIO_VidSetPinDirection+0x1e6>
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	0a 94       	dec	r0
    1fc4:	e2 f7       	brpl	.-8      	; 0x1fbe <MDIO_VidSetPinDirection+0x1e2>
    1fc6:	84 2b       	or	r24, r20
    1fc8:	8c 93       	st	X, r24
   }
	
}

}
    1fca:	27 96       	adiw	r28, 0x07	; 7
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	08 95       	ret

00001fdc <MDIO_VidSetPinValue>:
							   
							   
void MDIO_VidSetPinValue(u8 Copy_u8Port,
						 u8 Copy_u8Pin ,
						 u8 Copy_u8Value){
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	27 97       	sbiw	r28, 0x07	; 7
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	6a 83       	std	Y+2, r22	; 0x02
    1ff4:	4b 83       	std	Y+3, r20	; 0x03

if (Copy_u8Value == Pin_Low){
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	88 23       	and	r24, r24
    1ffa:	09 f0       	breq	.+2      	; 0x1ffe <MDIO_VidSetPinValue+0x22>
    1ffc:	74 c0       	rjmp	.+232    	; 0x20e6 <MDIO_VidSetPinValue+0x10a>
   switch (Copy_u8Port) {
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	3f 83       	std	Y+7, r19	; 0x07
    2006:	2e 83       	std	Y+6, r18	; 0x06
    2008:	8e 81       	ldd	r24, Y+6	; 0x06
    200a:	9f 81       	ldd	r25, Y+7	; 0x07
    200c:	81 30       	cpi	r24, 0x01	; 1
    200e:	91 05       	cpc	r25, r1
    2010:	59 f1       	breq	.+86     	; 0x2068 <MDIO_VidSetPinValue+0x8c>
    2012:	2e 81       	ldd	r18, Y+6	; 0x06
    2014:	3f 81       	ldd	r19, Y+7	; 0x07
    2016:	22 30       	cpi	r18, 0x02	; 2
    2018:	31 05       	cpc	r19, r1
    201a:	2c f4       	brge	.+10     	; 0x2026 <MDIO_VidSetPinValue+0x4a>
    201c:	8e 81       	ldd	r24, Y+6	; 0x06
    201e:	9f 81       	ldd	r25, Y+7	; 0x07
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	69 f0       	breq	.+26     	; 0x203e <MDIO_VidSetPinValue+0x62>
    2024:	d2 c0       	rjmp	.+420    	; 0x21ca <MDIO_VidSetPinValue+0x1ee>
    2026:	2e 81       	ldd	r18, Y+6	; 0x06
    2028:	3f 81       	ldd	r19, Y+7	; 0x07
    202a:	22 30       	cpi	r18, 0x02	; 2
    202c:	31 05       	cpc	r19, r1
    202e:	89 f1       	breq	.+98     	; 0x2092 <MDIO_VidSetPinValue+0xb6>
    2030:	8e 81       	ldd	r24, Y+6	; 0x06
    2032:	9f 81       	ldd	r25, Y+7	; 0x07
    2034:	83 30       	cpi	r24, 0x03	; 3
    2036:	91 05       	cpc	r25, r1
    2038:	09 f4       	brne	.+2      	; 0x203c <MDIO_VidSetPinValue+0x60>
    203a:	40 c0       	rjmp	.+128    	; 0x20bc <MDIO_VidSetPinValue+0xe0>
    203c:	c6 c0       	rjmp	.+396    	; 0x21ca <MDIO_VidSetPinValue+0x1ee>
	   case Port_A : CLR_BIT(PORTA,Copy_u8Pin);break;
    203e:	ab e3       	ldi	r26, 0x3B	; 59
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	eb e3       	ldi	r30, 0x3B	; 59
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	48 2f       	mov	r20, r24
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	28 2f       	mov	r18, r24
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	02 2e       	mov	r0, r18
    2056:	02 c0       	rjmp	.+4      	; 0x205c <MDIO_VidSetPinValue+0x80>
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	0a 94       	dec	r0
    205e:	e2 f7       	brpl	.-8      	; 0x2058 <MDIO_VidSetPinValue+0x7c>
    2060:	80 95       	com	r24
    2062:	84 23       	and	r24, r20
    2064:	8c 93       	st	X, r24
    2066:	b1 c0       	rjmp	.+354    	; 0x21ca <MDIO_VidSetPinValue+0x1ee>
	   case Port_B : CLR_BIT(PORTB,Copy_u8Pin);break;
    2068:	a8 e3       	ldi	r26, 0x38	; 56
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	e8 e3       	ldi	r30, 0x38	; 56
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	48 2f       	mov	r20, r24
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	28 2f       	mov	r18, r24
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	02 2e       	mov	r0, r18
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <MDIO_VidSetPinValue+0xaa>
    2082:	88 0f       	add	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	0a 94       	dec	r0
    2088:	e2 f7       	brpl	.-8      	; 0x2082 <MDIO_VidSetPinValue+0xa6>
    208a:	80 95       	com	r24
    208c:	84 23       	and	r24, r20
    208e:	8c 93       	st	X, r24
    2090:	9c c0       	rjmp	.+312    	; 0x21ca <MDIO_VidSetPinValue+0x1ee>
	   case Port_C : CLR_BIT(PORTC,Copy_u8Pin);break;
    2092:	a5 e3       	ldi	r26, 0x35	; 53
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e5 e3       	ldi	r30, 0x35	; 53
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	48 2f       	mov	r20, r24
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	02 2e       	mov	r0, r18
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <MDIO_VidSetPinValue+0xd4>
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	0a 94       	dec	r0
    20b2:	e2 f7       	brpl	.-8      	; 0x20ac <MDIO_VidSetPinValue+0xd0>
    20b4:	80 95       	com	r24
    20b6:	84 23       	and	r24, r20
    20b8:	8c 93       	st	X, r24
    20ba:	87 c0       	rjmp	.+270    	; 0x21ca <MDIO_VidSetPinValue+0x1ee>
	   case Port_D : CLR_BIT(PORTD,Copy_u8Pin);break;
    20bc:	a2 e3       	ldi	r26, 0x32	; 50
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	e2 e3       	ldi	r30, 0x32	; 50
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	48 2f       	mov	r20, r24
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	02 2e       	mov	r0, r18
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <MDIO_VidSetPinValue+0xfe>
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	0a 94       	dec	r0
    20dc:	e2 f7       	brpl	.-8      	; 0x20d6 <MDIO_VidSetPinValue+0xfa>
    20de:	80 95       	com	r24
    20e0:	84 23       	and	r24, r20
    20e2:	8c 93       	st	X, r24
    20e4:	72 c0       	rjmp	.+228    	; 0x21ca <MDIO_VidSetPinValue+0x1ee>
   }
	
   }
else if (Copy_u8Value == Pin_High) {
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	09 f0       	breq	.+2      	; 0x20ee <MDIO_VidSetPinValue+0x112>
    20ec:	6e c0       	rjmp	.+220    	; 0x21ca <MDIO_VidSetPinValue+0x1ee>
	
	switch (Copy_u8Port) {
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	3d 83       	std	Y+5, r19	; 0x05
    20f6:	2c 83       	std	Y+4, r18	; 0x04
    20f8:	8c 81       	ldd	r24, Y+4	; 0x04
    20fa:	9d 81       	ldd	r25, Y+5	; 0x05
    20fc:	81 30       	cpi	r24, 0x01	; 1
    20fe:	91 05       	cpc	r25, r1
    2100:	49 f1       	breq	.+82     	; 0x2154 <MDIO_VidSetPinValue+0x178>
    2102:	2c 81       	ldd	r18, Y+4	; 0x04
    2104:	3d 81       	ldd	r19, Y+5	; 0x05
    2106:	22 30       	cpi	r18, 0x02	; 2
    2108:	31 05       	cpc	r19, r1
    210a:	2c f4       	brge	.+10     	; 0x2116 <MDIO_VidSetPinValue+0x13a>
    210c:	8c 81       	ldd	r24, Y+4	; 0x04
    210e:	9d 81       	ldd	r25, Y+5	; 0x05
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	61 f0       	breq	.+24     	; 0x212c <MDIO_VidSetPinValue+0x150>
    2114:	5a c0       	rjmp	.+180    	; 0x21ca <MDIO_VidSetPinValue+0x1ee>
    2116:	2c 81       	ldd	r18, Y+4	; 0x04
    2118:	3d 81       	ldd	r19, Y+5	; 0x05
    211a:	22 30       	cpi	r18, 0x02	; 2
    211c:	31 05       	cpc	r19, r1
    211e:	71 f1       	breq	.+92     	; 0x217c <MDIO_VidSetPinValue+0x1a0>
    2120:	8c 81       	ldd	r24, Y+4	; 0x04
    2122:	9d 81       	ldd	r25, Y+5	; 0x05
    2124:	83 30       	cpi	r24, 0x03	; 3
    2126:	91 05       	cpc	r25, r1
    2128:	e9 f1       	breq	.+122    	; 0x21a4 <MDIO_VidSetPinValue+0x1c8>
    212a:	4f c0       	rjmp	.+158    	; 0x21ca <MDIO_VidSetPinValue+0x1ee>
	   case Port_A : SET_BIT(PORTA,Copy_u8Pin);break;
    212c:	ab e3       	ldi	r26, 0x3B	; 59
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	eb e3       	ldi	r30, 0x3B	; 59
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	48 2f       	mov	r20, r24
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	28 2f       	mov	r18, r24
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	02 2e       	mov	r0, r18
    2144:	02 c0       	rjmp	.+4      	; 0x214a <MDIO_VidSetPinValue+0x16e>
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	0a 94       	dec	r0
    214c:	e2 f7       	brpl	.-8      	; 0x2146 <MDIO_VidSetPinValue+0x16a>
    214e:	84 2b       	or	r24, r20
    2150:	8c 93       	st	X, r24
    2152:	3b c0       	rjmp	.+118    	; 0x21ca <MDIO_VidSetPinValue+0x1ee>
	   case Port_B : SET_BIT(PORTB,Copy_u8Pin);break;
    2154:	a8 e3       	ldi	r26, 0x38	; 56
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e8 e3       	ldi	r30, 0x38	; 56
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	48 2f       	mov	r20, r24
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	02 2e       	mov	r0, r18
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <MDIO_VidSetPinValue+0x196>
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	0a 94       	dec	r0
    2174:	e2 f7       	brpl	.-8      	; 0x216e <MDIO_VidSetPinValue+0x192>
    2176:	84 2b       	or	r24, r20
    2178:	8c 93       	st	X, r24
    217a:	27 c0       	rjmp	.+78     	; 0x21ca <MDIO_VidSetPinValue+0x1ee>
	   case Port_C : SET_BIT(PORTC,Copy_u8Pin);break;
    217c:	a5 e3       	ldi	r26, 0x35	; 53
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e5 e3       	ldi	r30, 0x35	; 53
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	48 2f       	mov	r20, r24
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	02 2e       	mov	r0, r18
    2194:	02 c0       	rjmp	.+4      	; 0x219a <MDIO_VidSetPinValue+0x1be>
    2196:	88 0f       	add	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	0a 94       	dec	r0
    219c:	e2 f7       	brpl	.-8      	; 0x2196 <MDIO_VidSetPinValue+0x1ba>
    219e:	84 2b       	or	r24, r20
    21a0:	8c 93       	st	X, r24
    21a2:	13 c0       	rjmp	.+38     	; 0x21ca <MDIO_VidSetPinValue+0x1ee>
	   case Port_D : SET_BIT(PORTD,Copy_u8Pin);break;
    21a4:	a2 e3       	ldi	r26, 0x32	; 50
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e2 e3       	ldi	r30, 0x32	; 50
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	48 2f       	mov	r20, r24
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	02 2e       	mov	r0, r18
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <MDIO_VidSetPinValue+0x1e6>
    21be:	88 0f       	add	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	0a 94       	dec	r0
    21c4:	e2 f7       	brpl	.-8      	; 0x21be <MDIO_VidSetPinValue+0x1e2>
    21c6:	84 2b       	or	r24, r20
    21c8:	8c 93       	st	X, r24
   }
	
}

}
    21ca:	27 96       	adiw	r28, 0x07	; 7
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <MDIO_VidGetPinValue>:

							   
void MDIO_VidGetPinValue(u8 Copy_u8Port,
						 u8 Copy_u8Pin ,
						 u8 *pu8Value){
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	00 d0       	rcall	.+0      	; 0x21e2 <MDIO_VidGetPinValue+0x6>
    21e2:	00 d0       	rcall	.+0      	; 0x21e4 <MDIO_VidGetPinValue+0x8>
    21e4:	00 d0       	rcall	.+0      	; 0x21e6 <MDIO_VidGetPinValue+0xa>
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	89 83       	std	Y+1, r24	; 0x01
    21ec:	6a 83       	std	Y+2, r22	; 0x02
    21ee:	5c 83       	std	Y+4, r21	; 0x04
    21f0:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_u8Port) {
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	28 2f       	mov	r18, r24
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	3e 83       	std	Y+6, r19	; 0x06
    21fa:	2d 83       	std	Y+5, r18	; 0x05
    21fc:	4d 81       	ldd	r20, Y+5	; 0x05
    21fe:	5e 81       	ldd	r21, Y+6	; 0x06
    2200:	41 30       	cpi	r20, 0x01	; 1
    2202:	51 05       	cpc	r21, r1
    2204:	59 f1       	breq	.+86     	; 0x225c <MDIO_VidGetPinValue+0x80>
    2206:	8d 81       	ldd	r24, Y+5	; 0x05
    2208:	9e 81       	ldd	r25, Y+6	; 0x06
    220a:	82 30       	cpi	r24, 0x02	; 2
    220c:	91 05       	cpc	r25, r1
    220e:	34 f4       	brge	.+12     	; 0x221c <MDIO_VidGetPinValue+0x40>
    2210:	2d 81       	ldd	r18, Y+5	; 0x05
    2212:	3e 81       	ldd	r19, Y+6	; 0x06
    2214:	21 15       	cp	r18, r1
    2216:	31 05       	cpc	r19, r1
    2218:	69 f0       	breq	.+26     	; 0x2234 <MDIO_VidGetPinValue+0x58>
    221a:	5b c0       	rjmp	.+182    	; 0x22d2 <MDIO_VidGetPinValue+0xf6>
    221c:	4d 81       	ldd	r20, Y+5	; 0x05
    221e:	5e 81       	ldd	r21, Y+6	; 0x06
    2220:	42 30       	cpi	r20, 0x02	; 2
    2222:	51 05       	cpc	r21, r1
    2224:	79 f1       	breq	.+94     	; 0x2284 <MDIO_VidGetPinValue+0xa8>
    2226:	8d 81       	ldd	r24, Y+5	; 0x05
    2228:	9e 81       	ldd	r25, Y+6	; 0x06
    222a:	83 30       	cpi	r24, 0x03	; 3
    222c:	91 05       	cpc	r25, r1
    222e:	09 f4       	brne	.+2      	; 0x2232 <MDIO_VidGetPinValue+0x56>
    2230:	3d c0       	rjmp	.+122    	; 0x22ac <MDIO_VidGetPinValue+0xd0>
    2232:	4f c0       	rjmp	.+158    	; 0x22d2 <MDIO_VidGetPinValue+0xf6>
		case Port_A : *pu8Value = GET_BIT(PINA,Copy_u8Pin);break;
    2234:	e9 e3       	ldi	r30, 0x39	; 57
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	88 2f       	mov	r24, r24
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	a9 01       	movw	r20, r18
    2246:	02 c0       	rjmp	.+4      	; 0x224c <MDIO_VidGetPinValue+0x70>
    2248:	55 95       	asr	r21
    224a:	47 95       	ror	r20
    224c:	8a 95       	dec	r24
    224e:	e2 f7       	brpl	.-8      	; 0x2248 <MDIO_VidGetPinValue+0x6c>
    2250:	ca 01       	movw	r24, r20
    2252:	81 70       	andi	r24, 0x01	; 1
    2254:	eb 81       	ldd	r30, Y+3	; 0x03
    2256:	fc 81       	ldd	r31, Y+4	; 0x04
    2258:	80 83       	st	Z, r24
    225a:	3b c0       	rjmp	.+118    	; 0x22d2 <MDIO_VidGetPinValue+0xf6>
		case Port_B : *pu8Value = GET_BIT(PINB,Copy_u8Pin);break;
    225c:	e6 e3       	ldi	r30, 0x36	; 54
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	88 2f       	mov	r24, r24
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	a9 01       	movw	r20, r18
    226e:	02 c0       	rjmp	.+4      	; 0x2274 <MDIO_VidGetPinValue+0x98>
    2270:	55 95       	asr	r21
    2272:	47 95       	ror	r20
    2274:	8a 95       	dec	r24
    2276:	e2 f7       	brpl	.-8      	; 0x2270 <MDIO_VidGetPinValue+0x94>
    2278:	ca 01       	movw	r24, r20
    227a:	81 70       	andi	r24, 0x01	; 1
    227c:	eb 81       	ldd	r30, Y+3	; 0x03
    227e:	fc 81       	ldd	r31, Y+4	; 0x04
    2280:	80 83       	st	Z, r24
    2282:	27 c0       	rjmp	.+78     	; 0x22d2 <MDIO_VidGetPinValue+0xf6>
		case Port_C : *pu8Value = GET_BIT(PINC,Copy_u8Pin);break;
    2284:	e3 e3       	ldi	r30, 0x33	; 51
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	28 2f       	mov	r18, r24
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	8a 81       	ldd	r24, Y+2	; 0x02
    2290:	88 2f       	mov	r24, r24
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	a9 01       	movw	r20, r18
    2296:	02 c0       	rjmp	.+4      	; 0x229c <MDIO_VidGetPinValue+0xc0>
    2298:	55 95       	asr	r21
    229a:	47 95       	ror	r20
    229c:	8a 95       	dec	r24
    229e:	e2 f7       	brpl	.-8      	; 0x2298 <MDIO_VidGetPinValue+0xbc>
    22a0:	ca 01       	movw	r24, r20
    22a2:	81 70       	andi	r24, 0x01	; 1
    22a4:	eb 81       	ldd	r30, Y+3	; 0x03
    22a6:	fc 81       	ldd	r31, Y+4	; 0x04
    22a8:	80 83       	st	Z, r24
    22aa:	13 c0       	rjmp	.+38     	; 0x22d2 <MDIO_VidGetPinValue+0xf6>
		case Port_D : *pu8Value = GET_BIT(PIND,Copy_u8Pin);break;		
    22ac:	e0 e3       	ldi	r30, 0x30	; 48
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	28 2f       	mov	r18, r24
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	8a 81       	ldd	r24, Y+2	; 0x02
    22b8:	88 2f       	mov	r24, r24
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	a9 01       	movw	r20, r18
    22be:	02 c0       	rjmp	.+4      	; 0x22c4 <MDIO_VidGetPinValue+0xe8>
    22c0:	55 95       	asr	r21
    22c2:	47 95       	ror	r20
    22c4:	8a 95       	dec	r24
    22c6:	e2 f7       	brpl	.-8      	; 0x22c0 <MDIO_VidGetPinValue+0xe4>
    22c8:	ca 01       	movw	r24, r20
    22ca:	81 70       	andi	r24, 0x01	; 1
    22cc:	eb 81       	ldd	r30, Y+3	; 0x03
    22ce:	fc 81       	ldd	r31, Y+4	; 0x04
    22d0:	80 83       	st	Z, r24
		
	}

}
    22d2:	26 96       	adiw	r28, 0x06	; 6
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	de bf       	out	0x3e, r29	; 62
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	cd bf       	out	0x3d, r28	; 61
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	08 95       	ret

000022e4 <MDIO_VidSetPortDirection>:

/*********************************************/
/* Methods on Port */


void MDIO_VidSetPortDirection(u8 Copy_u8Port,u8 Copy_u8Direction){
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	00 d0       	rcall	.+0      	; 0x22ea <MDIO_VidSetPortDirection+0x6>
    22ea:	00 d0       	rcall	.+0      	; 0x22ec <MDIO_VidSetPortDirection+0x8>
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	6a 83       	std	Y+2, r22	; 0x02

	switch (Copy_u8Port){
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	28 2f       	mov	r18, r24
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	3c 83       	std	Y+4, r19	; 0x04
    22fc:	2b 83       	std	Y+3, r18	; 0x03
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	9c 81       	ldd	r25, Y+4	; 0x04
    2302:	81 30       	cpi	r24, 0x01	; 1
    2304:	91 05       	cpc	r25, r1
    2306:	d1 f0       	breq	.+52     	; 0x233c <MDIO_VidSetPortDirection+0x58>
    2308:	2b 81       	ldd	r18, Y+3	; 0x03
    230a:	3c 81       	ldd	r19, Y+4	; 0x04
    230c:	22 30       	cpi	r18, 0x02	; 2
    230e:	31 05       	cpc	r19, r1
    2310:	2c f4       	brge	.+10     	; 0x231c <MDIO_VidSetPortDirection+0x38>
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	9c 81       	ldd	r25, Y+4	; 0x04
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	61 f0       	breq	.+24     	; 0x2332 <MDIO_VidSetPortDirection+0x4e>
    231a:	1e c0       	rjmp	.+60     	; 0x2358 <MDIO_VidSetPortDirection+0x74>
    231c:	2b 81       	ldd	r18, Y+3	; 0x03
    231e:	3c 81       	ldd	r19, Y+4	; 0x04
    2320:	22 30       	cpi	r18, 0x02	; 2
    2322:	31 05       	cpc	r19, r1
    2324:	81 f0       	breq	.+32     	; 0x2346 <MDIO_VidSetPortDirection+0x62>
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	83 30       	cpi	r24, 0x03	; 3
    232c:	91 05       	cpc	r25, r1
    232e:	81 f0       	breq	.+32     	; 0x2350 <MDIO_VidSetPortDirection+0x6c>
    2330:	13 c0       	rjmp	.+38     	; 0x2358 <MDIO_VidSetPortDirection+0x74>

	case Port_A : DDRA = Copy_u8Direction ; break;
    2332:	ea e3       	ldi	r30, 0x3A	; 58
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	80 83       	st	Z, r24
    233a:	0e c0       	rjmp	.+28     	; 0x2358 <MDIO_VidSetPortDirection+0x74>
	case Port_B : DDRB = Copy_u8Direction ; break;
    233c:	e7 e3       	ldi	r30, 0x37	; 55
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	8a 81       	ldd	r24, Y+2	; 0x02
    2342:	80 83       	st	Z, r24
    2344:	09 c0       	rjmp	.+18     	; 0x2358 <MDIO_VidSetPortDirection+0x74>
	case Port_C : DDRC = Copy_u8Direction ; break;
    2346:	e4 e3       	ldi	r30, 0x34	; 52
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	80 83       	st	Z, r24
    234e:	04 c0       	rjmp	.+8      	; 0x2358 <MDIO_VidSetPortDirection+0x74>
	case Port_D : DDRD = Copy_u8Direction ; break;
    2350:	e1 e3       	ldi	r30, 0x31	; 49
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	8a 81       	ldd	r24, Y+2	; 0x02
    2356:	80 83       	st	Z, r24

	}
}
    2358:	0f 90       	pop	r0
    235a:	0f 90       	pop	r0
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	cf 91       	pop	r28
    2362:	df 91       	pop	r29
    2364:	08 95       	ret

00002366 <MDIO_VidSetPortValue>:


void MDIO_VidSetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
    2366:	df 93       	push	r29
    2368:	cf 93       	push	r28
    236a:	00 d0       	rcall	.+0      	; 0x236c <MDIO_VidSetPortValue+0x6>
    236c:	00 d0       	rcall	.+0      	; 0x236e <MDIO_VidSetPortValue+0x8>
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	89 83       	std	Y+1, r24	; 0x01
    2374:	6a 83       	std	Y+2, r22	; 0x02

	switch (Copy_u8Port){
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	3c 83       	std	Y+4, r19	; 0x04
    237e:	2b 83       	std	Y+3, r18	; 0x03
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	9c 81       	ldd	r25, Y+4	; 0x04
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	91 05       	cpc	r25, r1
    2388:	d1 f0       	breq	.+52     	; 0x23be <MDIO_VidSetPortValue+0x58>
    238a:	2b 81       	ldd	r18, Y+3	; 0x03
    238c:	3c 81       	ldd	r19, Y+4	; 0x04
    238e:	22 30       	cpi	r18, 0x02	; 2
    2390:	31 05       	cpc	r19, r1
    2392:	2c f4       	brge	.+10     	; 0x239e <MDIO_VidSetPortValue+0x38>
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	9c 81       	ldd	r25, Y+4	; 0x04
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	61 f0       	breq	.+24     	; 0x23b4 <MDIO_VidSetPortValue+0x4e>
    239c:	1e c0       	rjmp	.+60     	; 0x23da <MDIO_VidSetPortValue+0x74>
    239e:	2b 81       	ldd	r18, Y+3	; 0x03
    23a0:	3c 81       	ldd	r19, Y+4	; 0x04
    23a2:	22 30       	cpi	r18, 0x02	; 2
    23a4:	31 05       	cpc	r19, r1
    23a6:	81 f0       	breq	.+32     	; 0x23c8 <MDIO_VidSetPortValue+0x62>
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	83 30       	cpi	r24, 0x03	; 3
    23ae:	91 05       	cpc	r25, r1
    23b0:	81 f0       	breq	.+32     	; 0x23d2 <MDIO_VidSetPortValue+0x6c>
    23b2:	13 c0       	rjmp	.+38     	; 0x23da <MDIO_VidSetPortValue+0x74>

	case Port_A : PORTA = Copy_u8Value ; break;
    23b4:	eb e3       	ldi	r30, 0x3B	; 59
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	80 83       	st	Z, r24
    23bc:	0e c0       	rjmp	.+28     	; 0x23da <MDIO_VidSetPortValue+0x74>
	case Port_B : PORTB = Copy_u8Value ; break;
    23be:	e8 e3       	ldi	r30, 0x38	; 56
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	80 83       	st	Z, r24
    23c6:	09 c0       	rjmp	.+18     	; 0x23da <MDIO_VidSetPortValue+0x74>
	case Port_C : PORTC = Copy_u8Value ; break;
    23c8:	e5 e3       	ldi	r30, 0x35	; 53
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	80 83       	st	Z, r24
    23d0:	04 c0       	rjmp	.+8      	; 0x23da <MDIO_VidSetPortValue+0x74>
	case Port_D : PORTD = Copy_u8Value ; break;
    23d2:	e2 e3       	ldi	r30, 0x32	; 50
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	80 83       	st	Z, r24

	}
}
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <MDIO_VidGetPortValue>:


void MDIO_VidGetPortValue(u8 Copy_u8Port,u8 *pu8Value){
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	00 d0       	rcall	.+0      	; 0x23ee <MDIO_VidGetPortValue+0x6>
    23ee:	00 d0       	rcall	.+0      	; 0x23f0 <MDIO_VidGetPortValue+0x8>
    23f0:	0f 92       	push	r0
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
    23f6:	89 83       	std	Y+1, r24	; 0x01
    23f8:	7b 83       	std	Y+3, r23	; 0x03
    23fa:	6a 83       	std	Y+2, r22	; 0x02

	switch (Copy_u8Port){
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	28 2f       	mov	r18, r24
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	3d 83       	std	Y+5, r19	; 0x05
    2404:	2c 83       	std	Y+4, r18	; 0x04
    2406:	8c 81       	ldd	r24, Y+4	; 0x04
    2408:	9d 81       	ldd	r25, Y+5	; 0x05
    240a:	81 30       	cpi	r24, 0x01	; 1
    240c:	91 05       	cpc	r25, r1
    240e:	e1 f0       	breq	.+56     	; 0x2448 <MDIO_VidGetPortValue+0x60>
    2410:	2c 81       	ldd	r18, Y+4	; 0x04
    2412:	3d 81       	ldd	r19, Y+5	; 0x05
    2414:	22 30       	cpi	r18, 0x02	; 2
    2416:	31 05       	cpc	r19, r1
    2418:	2c f4       	brge	.+10     	; 0x2424 <MDIO_VidGetPortValue+0x3c>
    241a:	8c 81       	ldd	r24, Y+4	; 0x04
    241c:	9d 81       	ldd	r25, Y+5	; 0x05
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	61 f0       	breq	.+24     	; 0x243a <MDIO_VidGetPortValue+0x52>
    2422:	26 c0       	rjmp	.+76     	; 0x2470 <MDIO_VidGetPortValue+0x88>
    2424:	2c 81       	ldd	r18, Y+4	; 0x04
    2426:	3d 81       	ldd	r19, Y+5	; 0x05
    2428:	22 30       	cpi	r18, 0x02	; 2
    242a:	31 05       	cpc	r19, r1
    242c:	a1 f0       	breq	.+40     	; 0x2456 <MDIO_VidGetPortValue+0x6e>
    242e:	8c 81       	ldd	r24, Y+4	; 0x04
    2430:	9d 81       	ldd	r25, Y+5	; 0x05
    2432:	83 30       	cpi	r24, 0x03	; 3
    2434:	91 05       	cpc	r25, r1
    2436:	b1 f0       	breq	.+44     	; 0x2464 <MDIO_VidGetPortValue+0x7c>
    2438:	1b c0       	rjmp	.+54     	; 0x2470 <MDIO_VidGetPortValue+0x88>

	case Port_A : *pu8Value = PINA ; break;
    243a:	e9 e3       	ldi	r30, 0x39	; 57
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	ea 81       	ldd	r30, Y+2	; 0x02
    2442:	fb 81       	ldd	r31, Y+3	; 0x03
    2444:	80 83       	st	Z, r24
    2446:	14 c0       	rjmp	.+40     	; 0x2470 <MDIO_VidGetPortValue+0x88>
	case Port_B : *pu8Value = PINB ; break;
    2448:	e6 e3       	ldi	r30, 0x36	; 54
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	ea 81       	ldd	r30, Y+2	; 0x02
    2450:	fb 81       	ldd	r31, Y+3	; 0x03
    2452:	80 83       	st	Z, r24
    2454:	0d c0       	rjmp	.+26     	; 0x2470 <MDIO_VidGetPortValue+0x88>
	case Port_C : *pu8Value = PINC ; break;
    2456:	e3 e3       	ldi	r30, 0x33	; 51
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	ea 81       	ldd	r30, Y+2	; 0x02
    245e:	fb 81       	ldd	r31, Y+3	; 0x03
    2460:	80 83       	st	Z, r24
    2462:	06 c0       	rjmp	.+12     	; 0x2470 <MDIO_VidGetPortValue+0x88>
	case Port_D : *pu8Value = PIND ; break;
    2464:	e0 e3       	ldi	r30, 0x30	; 48
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	ea 81       	ldd	r30, Y+2	; 0x02
    246c:	fb 81       	ldd	r31, Y+3	; 0x03
    246e:	80 83       	st	Z, r24

	}
}
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	08 95       	ret

00002480 <__udivmodsi4>:
    2480:	a1 e2       	ldi	r26, 0x21	; 33
    2482:	1a 2e       	mov	r1, r26
    2484:	aa 1b       	sub	r26, r26
    2486:	bb 1b       	sub	r27, r27
    2488:	fd 01       	movw	r30, r26
    248a:	0d c0       	rjmp	.+26     	; 0x24a6 <__udivmodsi4_ep>

0000248c <__udivmodsi4_loop>:
    248c:	aa 1f       	adc	r26, r26
    248e:	bb 1f       	adc	r27, r27
    2490:	ee 1f       	adc	r30, r30
    2492:	ff 1f       	adc	r31, r31
    2494:	a2 17       	cp	r26, r18
    2496:	b3 07       	cpc	r27, r19
    2498:	e4 07       	cpc	r30, r20
    249a:	f5 07       	cpc	r31, r21
    249c:	20 f0       	brcs	.+8      	; 0x24a6 <__udivmodsi4_ep>
    249e:	a2 1b       	sub	r26, r18
    24a0:	b3 0b       	sbc	r27, r19
    24a2:	e4 0b       	sbc	r30, r20
    24a4:	f5 0b       	sbc	r31, r21

000024a6 <__udivmodsi4_ep>:
    24a6:	66 1f       	adc	r22, r22
    24a8:	77 1f       	adc	r23, r23
    24aa:	88 1f       	adc	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	1a 94       	dec	r1
    24b0:	69 f7       	brne	.-38     	; 0x248c <__udivmodsi4_loop>
    24b2:	60 95       	com	r22
    24b4:	70 95       	com	r23
    24b6:	80 95       	com	r24
    24b8:	90 95       	com	r25
    24ba:	9b 01       	movw	r18, r22
    24bc:	ac 01       	movw	r20, r24
    24be:	bd 01       	movw	r22, r26
    24c0:	cf 01       	movw	r24, r30
    24c2:	08 95       	ret

000024c4 <__prologue_saves__>:
    24c4:	2f 92       	push	r2
    24c6:	3f 92       	push	r3
    24c8:	4f 92       	push	r4
    24ca:	5f 92       	push	r5
    24cc:	6f 92       	push	r6
    24ce:	7f 92       	push	r7
    24d0:	8f 92       	push	r8
    24d2:	9f 92       	push	r9
    24d4:	af 92       	push	r10
    24d6:	bf 92       	push	r11
    24d8:	cf 92       	push	r12
    24da:	df 92       	push	r13
    24dc:	ef 92       	push	r14
    24de:	ff 92       	push	r15
    24e0:	0f 93       	push	r16
    24e2:	1f 93       	push	r17
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	ca 1b       	sub	r28, r26
    24ee:	db 0b       	sbc	r29, r27
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	f8 94       	cli
    24f4:	de bf       	out	0x3e, r29	; 62
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	cd bf       	out	0x3d, r28	; 61
    24fa:	09 94       	ijmp

000024fc <__epilogue_restores__>:
    24fc:	2a 88       	ldd	r2, Y+18	; 0x12
    24fe:	39 88       	ldd	r3, Y+17	; 0x11
    2500:	48 88       	ldd	r4, Y+16	; 0x10
    2502:	5f 84       	ldd	r5, Y+15	; 0x0f
    2504:	6e 84       	ldd	r6, Y+14	; 0x0e
    2506:	7d 84       	ldd	r7, Y+13	; 0x0d
    2508:	8c 84       	ldd	r8, Y+12	; 0x0c
    250a:	9b 84       	ldd	r9, Y+11	; 0x0b
    250c:	aa 84       	ldd	r10, Y+10	; 0x0a
    250e:	b9 84       	ldd	r11, Y+9	; 0x09
    2510:	c8 84       	ldd	r12, Y+8	; 0x08
    2512:	df 80       	ldd	r13, Y+7	; 0x07
    2514:	ee 80       	ldd	r14, Y+6	; 0x06
    2516:	fd 80       	ldd	r15, Y+5	; 0x05
    2518:	0c 81       	ldd	r16, Y+4	; 0x04
    251a:	1b 81       	ldd	r17, Y+3	; 0x03
    251c:	aa 81       	ldd	r26, Y+2	; 0x02
    251e:	b9 81       	ldd	r27, Y+1	; 0x01
    2520:	ce 0f       	add	r28, r30
    2522:	d1 1d       	adc	r29, r1
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	de bf       	out	0x3e, r29	; 62
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	cd bf       	out	0x3d, r28	; 61
    252e:	ed 01       	movw	r28, r26
    2530:	08 95       	ret

00002532 <_exit>:
    2532:	f8 94       	cli

00002534 <__stop_program>:
    2534:	ff cf       	rjmp	.-2      	; 0x2534 <__stop_program>
