
KAYpad_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00800060  00002f62  00002ff6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800114  00800114  000030aa  2**0
                  ALLOC
  3 .stab         0000279c  00000000  00000000  000030ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fce  00000000  00000000  00005848  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006816  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006956  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000870f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000095fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a3a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a508  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a795  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 31       	cpi	r26, 0x14	; 20
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e1       	ldi	r26, 0x14	; 20
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 31       	cpi	r26, 0x15	; 21
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e6       	ldi	r26, 0x6A	; 106
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e6       	ldi	r24, 0x6A	; 106
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void CreateFrame(void);
void CreateFrame2(void);
void CreateFrame3(void);
void CreateFrame4(void);
void CreateFrame5(void);
int main(void) {
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c6 58       	subi	r28, 0x86	; 134
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	MDIO_VidSetPortDirection(Port_B,0xFF);
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	6f ef       	ldi	r22, 0xFF	; 255
     b64:	0e 94 88 16 	call	0x2d10	; 0x2d10 <MDIO_VidSetPortDirection>
	MDIO_VidSetPinDirection(Port_A,Pin_0,Pin_Output);
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	0e 94 04 14 	call	0x2808	; 0x2808 <MDIO_VidSetPinDirection>
	MDIO_VidSetPinDirection(Port_A,Pin_1,Pin_Output);
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	61 e0       	ldi	r22, 0x01	; 1
     b76:	41 e0       	ldi	r20, 0x01	; 1
     b78:	0e 94 04 14 	call	0x2808	; 0x2808 <MDIO_VidSetPinDirection>
	MDIO_VidSetPinDirection(Port_A,Pin_2,Pin_Output);
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	62 e0       	ldi	r22, 0x02	; 2
     b80:	41 e0       	ldi	r20, 0x01	; 1
     b82:	0e 94 04 14 	call	0x2808	; 0x2808 <MDIO_VidSetPinDirection>
 CLCD_VoidInit();
     b86:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <CLCD_VoidInit>
  CLCD_voidCreateSpeacialCharater(PATTERN , 0,0,0) ;
     b8a:	82 e7       	ldi	r24, 0x72	; 114
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	0e 94 52 13 	call	0x26a4	; 0x26a4 <CLCD_voidCreateSpeacialCharater>
	u8 characterToMove = 0;
     b98:	fe 01       	movw	r30, r28
     b9a:	ea 57       	subi	r30, 0x7A	; 122
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	10 82       	st	Z, r1

	while (1) {


		   CreateFrame();
     ba0:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CreateFrame>
		for (u8 column = 0; column < 15; column++) {
     ba4:	fe 01       	movw	r30, r28
     ba6:	eb 57       	subi	r30, 0x7B	; 123
     ba8:	ff 4f       	sbci	r31, 0xFF	; 255
     baa:	10 82       	st	Z, r1
     bac:	d8 c0       	rjmp	.+432    	; 0xd5e <main+0x218>

			if (column > 0 )
     bae:	fe 01       	movw	r30, r28
     bb0:	eb 57       	subi	r30, 0x7B	; 123
     bb2:	ff 4f       	sbci	r31, 0xFF	; 255
     bb4:	80 81       	ld	r24, Z
     bb6:	88 23       	and	r24, r24
     bb8:	59 f0       	breq	.+22     	; 0xbd0 <main+0x8a>
			{

				SendCharacter(0, column - 1, '_');
     bba:	fe 01       	movw	r30, r28
     bbc:	eb 57       	subi	r30, 0x7B	; 123
     bbe:	ff 4f       	sbci	r31, 0xFF	; 255
     bc0:	80 81       	ld	r24, Z
     bc2:	98 2f       	mov	r25, r24
     bc4:	91 50       	subi	r25, 0x01	; 1
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	69 2f       	mov	r22, r25
     bca:	4f e5       	ldi	r20, 0x5F	; 95
     bcc:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SendCharacter>
			}

			SendCharacter(0, column, characterToMove);
     bd0:	fe 01       	movw	r30, r28
     bd2:	eb 57       	subi	r30, 0x7B	; 123
     bd4:	ff 4f       	sbci	r31, 0xFF	; 255
     bd6:	de 01       	movw	r26, r28
     bd8:	aa 57       	subi	r26, 0x7A	; 122
     bda:	bf 4f       	sbci	r27, 0xFF	; 255
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	60 81       	ld	r22, Z
     be0:	4c 91       	ld	r20, X
     be2:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SendCharacter>
     be6:	fe 01       	movw	r30, r28
     be8:	e5 58       	subi	r30, 0x85	; 133
     bea:	ff 4f       	sbci	r31, 0xFF	; 255
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	a8 ec       	ldi	r26, 0xC8	; 200
     bf2:	b2 e4       	ldi	r27, 0x42	; 66
     bf4:	80 83       	st	Z, r24
     bf6:	91 83       	std	Z+1, r25	; 0x01
     bf8:	a2 83       	std	Z+2, r26	; 0x02
     bfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bfc:	8e 01       	movw	r16, r28
     bfe:	09 58       	subi	r16, 0x89	; 137
     c00:	1f 4f       	sbci	r17, 0xFF	; 255
     c02:	fe 01       	movw	r30, r28
     c04:	e5 58       	subi	r30, 0x85	; 133
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	60 81       	ld	r22, Z
     c0a:	71 81       	ldd	r23, Z+1	; 0x01
     c0c:	82 81       	ldd	r24, Z+2	; 0x02
     c0e:	93 81       	ldd	r25, Z+3	; 0x03
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	4a ef       	ldi	r20, 0xFA	; 250
     c16:	54 e4       	ldi	r21, 0x44	; 68
     c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	f8 01       	movw	r30, r16
     c22:	80 83       	st	Z, r24
     c24:	91 83       	std	Z+1, r25	; 0x01
     c26:	a2 83       	std	Z+2, r26	; 0x02
     c28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c2a:	fe 01       	movw	r30, r28
     c2c:	e9 58       	subi	r30, 0x89	; 137
     c2e:	ff 4f       	sbci	r31, 0xFF	; 255
     c30:	60 81       	ld	r22, Z
     c32:	71 81       	ldd	r23, Z+1	; 0x01
     c34:	82 81       	ldd	r24, Z+2	; 0x02
     c36:	93 81       	ldd	r25, Z+3	; 0x03
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	40 e8       	ldi	r20, 0x80	; 128
     c3e:	5f e3       	ldi	r21, 0x3F	; 63
     c40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c44:	88 23       	and	r24, r24
     c46:	44 f4       	brge	.+16     	; 0xc58 <main+0x112>
		__ticks = 1;
     c48:	fe 01       	movw	r30, r28
     c4a:	eb 58       	subi	r30, 0x8B	; 139
     c4c:	ff 4f       	sbci	r31, 0xFF	; 255
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	91 83       	std	Z+1, r25	; 0x01
     c54:	80 83       	st	Z, r24
     c56:	64 c0       	rjmp	.+200    	; 0xd20 <main+0x1da>
	else if (__tmp > 65535)
     c58:	fe 01       	movw	r30, r28
     c5a:	e9 58       	subi	r30, 0x89	; 137
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	60 81       	ld	r22, Z
     c60:	71 81       	ldd	r23, Z+1	; 0x01
     c62:	82 81       	ldd	r24, Z+2	; 0x02
     c64:	93 81       	ldd	r25, Z+3	; 0x03
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	3f ef       	ldi	r19, 0xFF	; 255
     c6a:	4f e7       	ldi	r20, 0x7F	; 127
     c6c:	57 e4       	ldi	r21, 0x47	; 71
     c6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c72:	18 16       	cp	r1, r24
     c74:	0c f0       	brlt	.+2      	; 0xc78 <main+0x132>
     c76:	43 c0       	rjmp	.+134    	; 0xcfe <main+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c78:	fe 01       	movw	r30, r28
     c7a:	e5 58       	subi	r30, 0x85	; 133
     c7c:	ff 4f       	sbci	r31, 0xFF	; 255
     c7e:	60 81       	ld	r22, Z
     c80:	71 81       	ldd	r23, Z+1	; 0x01
     c82:	82 81       	ldd	r24, Z+2	; 0x02
     c84:	93 81       	ldd	r25, Z+3	; 0x03
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e2       	ldi	r20, 0x20	; 32
     c8c:	51 e4       	ldi	r21, 0x41	; 65
     c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	8e 01       	movw	r16, r28
     c98:	0b 58       	subi	r16, 0x8B	; 139
     c9a:	1f 4f       	sbci	r17, 0xFF	; 255
     c9c:	bc 01       	movw	r22, r24
     c9e:	cd 01       	movw	r24, r26
     ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ca4:	dc 01       	movw	r26, r24
     ca6:	cb 01       	movw	r24, r22
     ca8:	f8 01       	movw	r30, r16
     caa:	91 83       	std	Z+1, r25	; 0x01
     cac:	80 83       	st	Z, r24
     cae:	1f c0       	rjmp	.+62     	; 0xcee <main+0x1a8>
     cb0:	fe 01       	movw	r30, r28
     cb2:	ed 58       	subi	r30, 0x8D	; 141
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	88 ec       	ldi	r24, 0xC8	; 200
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	91 83       	std	Z+1, r25	; 0x01
     cbc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cbe:	fe 01       	movw	r30, r28
     cc0:	ed 58       	subi	r30, 0x8D	; 141
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	80 81       	ld	r24, Z
     cc6:	91 81       	ldd	r25, Z+1	; 0x01
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <main+0x182>
     ccc:	fe 01       	movw	r30, r28
     cce:	ed 58       	subi	r30, 0x8D	; 141
     cd0:	ff 4f       	sbci	r31, 0xFF	; 255
     cd2:	91 83       	std	Z+1, r25	; 0x01
     cd4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cd6:	de 01       	movw	r26, r28
     cd8:	ab 58       	subi	r26, 0x8B	; 139
     cda:	bf 4f       	sbci	r27, 0xFF	; 255
     cdc:	fe 01       	movw	r30, r28
     cde:	eb 58       	subi	r30, 0x8B	; 139
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	80 81       	ld	r24, Z
     ce4:	91 81       	ldd	r25, Z+1	; 0x01
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	11 96       	adiw	r26, 0x01	; 1
     cea:	9c 93       	st	X, r25
     cec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cee:	fe 01       	movw	r30, r28
     cf0:	eb 58       	subi	r30, 0x8B	; 139
     cf2:	ff 4f       	sbci	r31, 0xFF	; 255
     cf4:	80 81       	ld	r24, Z
     cf6:	91 81       	ldd	r25, Z+1	; 0x01
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	d1 f6       	brne	.-76     	; 0xcb0 <main+0x16a>
     cfc:	27 c0       	rjmp	.+78     	; 0xd4c <main+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cfe:	8e 01       	movw	r16, r28
     d00:	0b 58       	subi	r16, 0x8B	; 139
     d02:	1f 4f       	sbci	r17, 0xFF	; 255
     d04:	fe 01       	movw	r30, r28
     d06:	e9 58       	subi	r30, 0x89	; 137
     d08:	ff 4f       	sbci	r31, 0xFF	; 255
     d0a:	60 81       	ld	r22, Z
     d0c:	71 81       	ldd	r23, Z+1	; 0x01
     d0e:	82 81       	ldd	r24, Z+2	; 0x02
     d10:	93 81       	ldd	r25, Z+3	; 0x03
     d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	f8 01       	movw	r30, r16
     d1c:	91 83       	std	Z+1, r25	; 0x01
     d1e:	80 83       	st	Z, r24
     d20:	de 01       	movw	r26, r28
     d22:	af 58       	subi	r26, 0x8F	; 143
     d24:	bf 4f       	sbci	r27, 0xFF	; 255
     d26:	fe 01       	movw	r30, r28
     d28:	eb 58       	subi	r30, 0x8B	; 139
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	80 81       	ld	r24, Z
     d2e:	91 81       	ldd	r25, Z+1	; 0x01
     d30:	8d 93       	st	X+, r24
     d32:	9c 93       	st	X, r25
     d34:	fe 01       	movw	r30, r28
     d36:	ef 58       	subi	r30, 0x8F	; 143
     d38:	ff 4f       	sbci	r31, 0xFF	; 255
     d3a:	80 81       	ld	r24, Z
     d3c:	91 81       	ldd	r25, Z+1	; 0x01
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <main+0x1f8>
     d42:	fe 01       	movw	r30, r28
     d44:	ef 58       	subi	r30, 0x8F	; 143
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	91 83       	std	Z+1, r25	; 0x01
     d4a:	80 83       	st	Z, r24

	while (1) {


		   CreateFrame();
		for (u8 column = 0; column < 15; column++) {
     d4c:	de 01       	movw	r26, r28
     d4e:	ab 57       	subi	r26, 0x7B	; 123
     d50:	bf 4f       	sbci	r27, 0xFF	; 255
     d52:	fe 01       	movw	r30, r28
     d54:	eb 57       	subi	r30, 0x7B	; 123
     d56:	ff 4f       	sbci	r31, 0xFF	; 255
     d58:	80 81       	ld	r24, Z
     d5a:	8f 5f       	subi	r24, 0xFF	; 255
     d5c:	8c 93       	st	X, r24
     d5e:	fe 01       	movw	r30, r28
     d60:	eb 57       	subi	r30, 0x7B	; 123
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	80 81       	ld	r24, Z
     d66:	8f 30       	cpi	r24, 0x0F	; 15
     d68:	08 f4       	brcc	.+2      	; 0xd6c <main+0x226>
     d6a:	21 cf       	rjmp	.-446    	; 0xbae <main+0x68>

			SendCharacter(0, column, characterToMove);
			_delay_ms(100);
		}

		CLCD_voidClearDisplay() ;
     d6c:	0e 94 93 13 	call	0x2726	; 0x2726 <CLCD_voidClearDisplay>
		CreateFrame();
     d70:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CreateFrame>



		for (u8 column = 0; column < 17; column++) {
     d74:	fe 01       	movw	r30, r28
     d76:	ec 57       	subi	r30, 0x7C	; 124
     d78:	ff 4f       	sbci	r31, 0xFF	; 255
     d7a:	10 82       	st	Z, r1
     d7c:	d8 c0       	rjmp	.+432    	; 0xf2e <main+0x3e8>

			if (column > 0) {
     d7e:	fe 01       	movw	r30, r28
     d80:	ec 57       	subi	r30, 0x7C	; 124
     d82:	ff 4f       	sbci	r31, 0xFF	; 255
     d84:	80 81       	ld	r24, Z
     d86:	88 23       	and	r24, r24
     d88:	59 f0       	breq	.+22     	; 0xda0 <main+0x25a>
				SendCharacter(1, column - 1, '_');
     d8a:	fe 01       	movw	r30, r28
     d8c:	ec 57       	subi	r30, 0x7C	; 124
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	80 81       	ld	r24, Z
     d92:	98 2f       	mov	r25, r24
     d94:	91 50       	subi	r25, 0x01	; 1
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	69 2f       	mov	r22, r25
     d9a:	4f e5       	ldi	r20, 0x5F	; 95
     d9c:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SendCharacter>
			}


			SendCharacter(1, column, characterToMove);
     da0:	fe 01       	movw	r30, r28
     da2:	ec 57       	subi	r30, 0x7C	; 124
     da4:	ff 4f       	sbci	r31, 0xFF	; 255
     da6:	de 01       	movw	r26, r28
     da8:	aa 57       	subi	r26, 0x7A	; 122
     daa:	bf 4f       	sbci	r27, 0xFF	; 255
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	60 81       	ld	r22, Z
     db0:	4c 91       	ld	r20, X
     db2:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SendCharacter>
     db6:	fe 01       	movw	r30, r28
     db8:	e3 59       	subi	r30, 0x93	; 147
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	a8 ec       	ldi	r26, 0xC8	; 200
     dc2:	b2 e4       	ldi	r27, 0x42	; 66
     dc4:	80 83       	st	Z, r24
     dc6:	91 83       	std	Z+1, r25	; 0x01
     dc8:	a2 83       	std	Z+2, r26	; 0x02
     dca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dcc:	8e 01       	movw	r16, r28
     dce:	07 59       	subi	r16, 0x97	; 151
     dd0:	1f 4f       	sbci	r17, 0xFF	; 255
     dd2:	fe 01       	movw	r30, r28
     dd4:	e3 59       	subi	r30, 0x93	; 147
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	60 81       	ld	r22, Z
     dda:	71 81       	ldd	r23, Z+1	; 0x01
     ddc:	82 81       	ldd	r24, Z+2	; 0x02
     dde:	93 81       	ldd	r25, Z+3	; 0x03
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	4a ef       	ldi	r20, 0xFA	; 250
     de6:	54 e4       	ldi	r21, 0x44	; 68
     de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	f8 01       	movw	r30, r16
     df2:	80 83       	st	Z, r24
     df4:	91 83       	std	Z+1, r25	; 0x01
     df6:	a2 83       	std	Z+2, r26	; 0x02
     df8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dfa:	fe 01       	movw	r30, r28
     dfc:	e7 59       	subi	r30, 0x97	; 151
     dfe:	ff 4f       	sbci	r31, 0xFF	; 255
     e00:	60 81       	ld	r22, Z
     e02:	71 81       	ldd	r23, Z+1	; 0x01
     e04:	82 81       	ldd	r24, Z+2	; 0x02
     e06:	93 81       	ldd	r25, Z+3	; 0x03
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	40 e8       	ldi	r20, 0x80	; 128
     e0e:	5f e3       	ldi	r21, 0x3F	; 63
     e10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e14:	88 23       	and	r24, r24
     e16:	44 f4       	brge	.+16     	; 0xe28 <main+0x2e2>
		__ticks = 1;
     e18:	fe 01       	movw	r30, r28
     e1a:	e9 59       	subi	r30, 0x99	; 153
     e1c:	ff 4f       	sbci	r31, 0xFF	; 255
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	91 83       	std	Z+1, r25	; 0x01
     e24:	80 83       	st	Z, r24
     e26:	64 c0       	rjmp	.+200    	; 0xef0 <main+0x3aa>
	else if (__tmp > 65535)
     e28:	fe 01       	movw	r30, r28
     e2a:	e7 59       	subi	r30, 0x97	; 151
     e2c:	ff 4f       	sbci	r31, 0xFF	; 255
     e2e:	60 81       	ld	r22, Z
     e30:	71 81       	ldd	r23, Z+1	; 0x01
     e32:	82 81       	ldd	r24, Z+2	; 0x02
     e34:	93 81       	ldd	r25, Z+3	; 0x03
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	3f ef       	ldi	r19, 0xFF	; 255
     e3a:	4f e7       	ldi	r20, 0x7F	; 127
     e3c:	57 e4       	ldi	r21, 0x47	; 71
     e3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e42:	18 16       	cp	r1, r24
     e44:	0c f0       	brlt	.+2      	; 0xe48 <main+0x302>
     e46:	43 c0       	rjmp	.+134    	; 0xece <main+0x388>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e48:	fe 01       	movw	r30, r28
     e4a:	e3 59       	subi	r30, 0x93	; 147
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	60 81       	ld	r22, Z
     e50:	71 81       	ldd	r23, Z+1	; 0x01
     e52:	82 81       	ldd	r24, Z+2	; 0x02
     e54:	93 81       	ldd	r25, Z+3	; 0x03
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	40 e2       	ldi	r20, 0x20	; 32
     e5c:	51 e4       	ldi	r21, 0x41	; 65
     e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	8e 01       	movw	r16, r28
     e68:	09 59       	subi	r16, 0x99	; 153
     e6a:	1f 4f       	sbci	r17, 0xFF	; 255
     e6c:	bc 01       	movw	r22, r24
     e6e:	cd 01       	movw	r24, r26
     e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	f8 01       	movw	r30, r16
     e7a:	91 83       	std	Z+1, r25	; 0x01
     e7c:	80 83       	st	Z, r24
     e7e:	1f c0       	rjmp	.+62     	; 0xebe <main+0x378>
     e80:	fe 01       	movw	r30, r28
     e82:	eb 59       	subi	r30, 0x9B	; 155
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	88 ec       	ldi	r24, 0xC8	; 200
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	91 83       	std	Z+1, r25	; 0x01
     e8c:	80 83       	st	Z, r24
     e8e:	fe 01       	movw	r30, r28
     e90:	eb 59       	subi	r30, 0x9B	; 155
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	80 81       	ld	r24, Z
     e96:	91 81       	ldd	r25, Z+1	; 0x01
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <main+0x352>
     e9c:	fe 01       	movw	r30, r28
     e9e:	eb 59       	subi	r30, 0x9B	; 155
     ea0:	ff 4f       	sbci	r31, 0xFF	; 255
     ea2:	91 83       	std	Z+1, r25	; 0x01
     ea4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea6:	de 01       	movw	r26, r28
     ea8:	a9 59       	subi	r26, 0x99	; 153
     eaa:	bf 4f       	sbci	r27, 0xFF	; 255
     eac:	fe 01       	movw	r30, r28
     eae:	e9 59       	subi	r30, 0x99	; 153
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	80 81       	ld	r24, Z
     eb4:	91 81       	ldd	r25, Z+1	; 0x01
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	11 96       	adiw	r26, 0x01	; 1
     eba:	9c 93       	st	X, r25
     ebc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ebe:	fe 01       	movw	r30, r28
     ec0:	e9 59       	subi	r30, 0x99	; 153
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	80 81       	ld	r24, Z
     ec6:	91 81       	ldd	r25, Z+1	; 0x01
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	d1 f6       	brne	.-76     	; 0xe80 <main+0x33a>
     ecc:	27 c0       	rjmp	.+78     	; 0xf1c <main+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ece:	8e 01       	movw	r16, r28
     ed0:	09 59       	subi	r16, 0x99	; 153
     ed2:	1f 4f       	sbci	r17, 0xFF	; 255
     ed4:	fe 01       	movw	r30, r28
     ed6:	e7 59       	subi	r30, 0x97	; 151
     ed8:	ff 4f       	sbci	r31, 0xFF	; 255
     eda:	60 81       	ld	r22, Z
     edc:	71 81       	ldd	r23, Z+1	; 0x01
     ede:	82 81       	ldd	r24, Z+2	; 0x02
     ee0:	93 81       	ldd	r25, Z+3	; 0x03
     ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	f8 01       	movw	r30, r16
     eec:	91 83       	std	Z+1, r25	; 0x01
     eee:	80 83       	st	Z, r24
     ef0:	de 01       	movw	r26, r28
     ef2:	ad 59       	subi	r26, 0x9D	; 157
     ef4:	bf 4f       	sbci	r27, 0xFF	; 255
     ef6:	fe 01       	movw	r30, r28
     ef8:	e9 59       	subi	r30, 0x99	; 153
     efa:	ff 4f       	sbci	r31, 0xFF	; 255
     efc:	80 81       	ld	r24, Z
     efe:	91 81       	ldd	r25, Z+1	; 0x01
     f00:	8d 93       	st	X+, r24
     f02:	9c 93       	st	X, r25
     f04:	fe 01       	movw	r30, r28
     f06:	ed 59       	subi	r30, 0x9D	; 157
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	f1 f7       	brne	.-4      	; 0xf0e <main+0x3c8>
     f12:	fe 01       	movw	r30, r28
     f14:	ed 59       	subi	r30, 0x9D	; 157
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	91 83       	std	Z+1, r25	; 0x01
     f1a:	80 83       	st	Z, r24
		CLCD_voidClearDisplay() ;
		CreateFrame();



		for (u8 column = 0; column < 17; column++) {
     f1c:	de 01       	movw	r26, r28
     f1e:	ac 57       	subi	r26, 0x7C	; 124
     f20:	bf 4f       	sbci	r27, 0xFF	; 255
     f22:	fe 01       	movw	r30, r28
     f24:	ec 57       	subi	r30, 0x7C	; 124
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	80 81       	ld	r24, Z
     f2a:	8f 5f       	subi	r24, 0xFF	; 255
     f2c:	8c 93       	st	X, r24
     f2e:	fe 01       	movw	r30, r28
     f30:	ec 57       	subi	r30, 0x7C	; 124
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	80 81       	ld	r24, Z
     f36:	81 31       	cpi	r24, 0x11	; 17
     f38:	08 f4       	brcc	.+2      	; 0xf3c <main+0x3f6>
     f3a:	21 cf       	rjmp	.-446    	; 0xd7e <main+0x238>


			_delay_ms(100);
		}

		CLCD_voidClearDisplay();
     f3c:	0e 94 93 13 	call	0x2726	; 0x2726 <CLCD_voidClearDisplay>
        CreateFrame2();
     f40:	0e 94 c9 0c 	call	0x1992	; 0x1992 <CreateFrame2>
      for (u8 column = 0; column <=8; column++) {
     f44:	fe 01       	movw	r30, r28
     f46:	ed 57       	subi	r30, 0x7D	; 125
     f48:	ff 4f       	sbci	r31, 0xFF	; 255
     f4a:	10 82       	st	Z, r1
     f4c:	d8 c0       	rjmp	.+432    	; 0x10fe <main+0x5b8>
	      if (column > 0) {
     f4e:	fe 01       	movw	r30, r28
     f50:	ed 57       	subi	r30, 0x7D	; 125
     f52:	ff 4f       	sbci	r31, 0xFF	; 255
     f54:	80 81       	ld	r24, Z
     f56:	88 23       	and	r24, r24
     f58:	59 f0       	breq	.+22     	; 0xf70 <main+0x42a>
	    	  SendCharacter(0, column - 1, '_');
     f5a:	fe 01       	movw	r30, r28
     f5c:	ed 57       	subi	r30, 0x7D	; 125
     f5e:	ff 4f       	sbci	r31, 0xFF	; 255
     f60:	80 81       	ld	r24, Z
     f62:	98 2f       	mov	r25, r24
     f64:	91 50       	subi	r25, 0x01	; 1
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	69 2f       	mov	r22, r25
     f6a:	4f e5       	ldi	r20, 0x5F	; 95
     f6c:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SendCharacter>
	      }

	      // Display the character at the new position
	      SendCharacter(0, column, characterToMove);
     f70:	fe 01       	movw	r30, r28
     f72:	ed 57       	subi	r30, 0x7D	; 125
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	de 01       	movw	r26, r28
     f78:	aa 57       	subi	r26, 0x7A	; 122
     f7a:	bf 4f       	sbci	r27, 0xFF	; 255
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	60 81       	ld	r22, Z
     f80:	4c 91       	ld	r20, X
     f82:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SendCharacter>
     f86:	fe 01       	movw	r30, r28
     f88:	e1 5a       	subi	r30, 0xA1	; 161
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	a8 ec       	ldi	r26, 0xC8	; 200
     f92:	b2 e4       	ldi	r27, 0x42	; 66
     f94:	80 83       	st	Z, r24
     f96:	91 83       	std	Z+1, r25	; 0x01
     f98:	a2 83       	std	Z+2, r26	; 0x02
     f9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f9c:	8e 01       	movw	r16, r28
     f9e:	05 5a       	subi	r16, 0xA5	; 165
     fa0:	1f 4f       	sbci	r17, 0xFF	; 255
     fa2:	fe 01       	movw	r30, r28
     fa4:	e1 5a       	subi	r30, 0xA1	; 161
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	60 81       	ld	r22, Z
     faa:	71 81       	ldd	r23, Z+1	; 0x01
     fac:	82 81       	ldd	r24, Z+2	; 0x02
     fae:	93 81       	ldd	r25, Z+3	; 0x03
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	4a ef       	ldi	r20, 0xFA	; 250
     fb6:	54 e4       	ldi	r21, 0x44	; 68
     fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	f8 01       	movw	r30, r16
     fc2:	80 83       	st	Z, r24
     fc4:	91 83       	std	Z+1, r25	; 0x01
     fc6:	a2 83       	std	Z+2, r26	; 0x02
     fc8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fca:	fe 01       	movw	r30, r28
     fcc:	e5 5a       	subi	r30, 0xA5	; 165
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	60 81       	ld	r22, Z
     fd2:	71 81       	ldd	r23, Z+1	; 0x01
     fd4:	82 81       	ldd	r24, Z+2	; 0x02
     fd6:	93 81       	ldd	r25, Z+3	; 0x03
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e8       	ldi	r20, 0x80	; 128
     fde:	5f e3       	ldi	r21, 0x3F	; 63
     fe0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fe4:	88 23       	and	r24, r24
     fe6:	44 f4       	brge	.+16     	; 0xff8 <main+0x4b2>
		__ticks = 1;
     fe8:	fe 01       	movw	r30, r28
     fea:	e7 5a       	subi	r30, 0xA7	; 167
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	91 83       	std	Z+1, r25	; 0x01
     ff4:	80 83       	st	Z, r24
     ff6:	64 c0       	rjmp	.+200    	; 0x10c0 <main+0x57a>
	else if (__tmp > 65535)
     ff8:	fe 01       	movw	r30, r28
     ffa:	e5 5a       	subi	r30, 0xA5	; 165
     ffc:	ff 4f       	sbci	r31, 0xFF	; 255
     ffe:	60 81       	ld	r22, Z
    1000:	71 81       	ldd	r23, Z+1	; 0x01
    1002:	82 81       	ldd	r24, Z+2	; 0x02
    1004:	93 81       	ldd	r25, Z+3	; 0x03
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	3f ef       	ldi	r19, 0xFF	; 255
    100a:	4f e7       	ldi	r20, 0x7F	; 127
    100c:	57 e4       	ldi	r21, 0x47	; 71
    100e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1012:	18 16       	cp	r1, r24
    1014:	0c f0       	brlt	.+2      	; 0x1018 <main+0x4d2>
    1016:	43 c0       	rjmp	.+134    	; 0x109e <main+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1018:	fe 01       	movw	r30, r28
    101a:	e1 5a       	subi	r30, 0xA1	; 161
    101c:	ff 4f       	sbci	r31, 0xFF	; 255
    101e:	60 81       	ld	r22, Z
    1020:	71 81       	ldd	r23, Z+1	; 0x01
    1022:	82 81       	ldd	r24, Z+2	; 0x02
    1024:	93 81       	ldd	r25, Z+3	; 0x03
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e2       	ldi	r20, 0x20	; 32
    102c:	51 e4       	ldi	r21, 0x41	; 65
    102e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	8e 01       	movw	r16, r28
    1038:	07 5a       	subi	r16, 0xA7	; 167
    103a:	1f 4f       	sbci	r17, 0xFF	; 255
    103c:	bc 01       	movw	r22, r24
    103e:	cd 01       	movw	r24, r26
    1040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	f8 01       	movw	r30, r16
    104a:	91 83       	std	Z+1, r25	; 0x01
    104c:	80 83       	st	Z, r24
    104e:	1f c0       	rjmp	.+62     	; 0x108e <main+0x548>
    1050:	fe 01       	movw	r30, r28
    1052:	e9 5a       	subi	r30, 0xA9	; 169
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	88 ec       	ldi	r24, 0xC8	; 200
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	91 83       	std	Z+1, r25	; 0x01
    105c:	80 83       	st	Z, r24
    105e:	fe 01       	movw	r30, r28
    1060:	e9 5a       	subi	r30, 0xA9	; 169
    1062:	ff 4f       	sbci	r31, 0xFF	; 255
    1064:	80 81       	ld	r24, Z
    1066:	91 81       	ldd	r25, Z+1	; 0x01
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <main+0x522>
    106c:	fe 01       	movw	r30, r28
    106e:	e9 5a       	subi	r30, 0xA9	; 169
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	91 83       	std	Z+1, r25	; 0x01
    1074:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1076:	de 01       	movw	r26, r28
    1078:	a7 5a       	subi	r26, 0xA7	; 167
    107a:	bf 4f       	sbci	r27, 0xFF	; 255
    107c:	fe 01       	movw	r30, r28
    107e:	e7 5a       	subi	r30, 0xA7	; 167
    1080:	ff 4f       	sbci	r31, 0xFF	; 255
    1082:	80 81       	ld	r24, Z
    1084:	91 81       	ldd	r25, Z+1	; 0x01
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	11 96       	adiw	r26, 0x01	; 1
    108a:	9c 93       	st	X, r25
    108c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    108e:	fe 01       	movw	r30, r28
    1090:	e7 5a       	subi	r30, 0xA7	; 167
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	80 81       	ld	r24, Z
    1096:	91 81       	ldd	r25, Z+1	; 0x01
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	d1 f6       	brne	.-76     	; 0x1050 <main+0x50a>
    109c:	27 c0       	rjmp	.+78     	; 0x10ec <main+0x5a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109e:	8e 01       	movw	r16, r28
    10a0:	07 5a       	subi	r16, 0xA7	; 167
    10a2:	1f 4f       	sbci	r17, 0xFF	; 255
    10a4:	fe 01       	movw	r30, r28
    10a6:	e5 5a       	subi	r30, 0xA5	; 165
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	60 81       	ld	r22, Z
    10ac:	71 81       	ldd	r23, Z+1	; 0x01
    10ae:	82 81       	ldd	r24, Z+2	; 0x02
    10b0:	93 81       	ldd	r25, Z+3	; 0x03
    10b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	f8 01       	movw	r30, r16
    10bc:	91 83       	std	Z+1, r25	; 0x01
    10be:	80 83       	st	Z, r24
    10c0:	de 01       	movw	r26, r28
    10c2:	ab 5a       	subi	r26, 0xAB	; 171
    10c4:	bf 4f       	sbci	r27, 0xFF	; 255
    10c6:	fe 01       	movw	r30, r28
    10c8:	e7 5a       	subi	r30, 0xA7	; 167
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	80 81       	ld	r24, Z
    10ce:	91 81       	ldd	r25, Z+1	; 0x01
    10d0:	8d 93       	st	X+, r24
    10d2:	9c 93       	st	X, r25
    10d4:	fe 01       	movw	r30, r28
    10d6:	eb 5a       	subi	r30, 0xAB	; 171
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	80 81       	ld	r24, Z
    10dc:	91 81       	ldd	r25, Z+1	; 0x01
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	f1 f7       	brne	.-4      	; 0x10de <main+0x598>
    10e2:	fe 01       	movw	r30, r28
    10e4:	eb 5a       	subi	r30, 0xAB	; 171
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	91 83       	std	Z+1, r25	; 0x01
    10ea:	80 83       	st	Z, r24
			_delay_ms(100);
		}

		CLCD_voidClearDisplay();
        CreateFrame2();
      for (u8 column = 0; column <=8; column++) {
    10ec:	de 01       	movw	r26, r28
    10ee:	ad 57       	subi	r26, 0x7D	; 125
    10f0:	bf 4f       	sbci	r27, 0xFF	; 255
    10f2:	fe 01       	movw	r30, r28
    10f4:	ed 57       	subi	r30, 0x7D	; 125
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	80 81       	ld	r24, Z
    10fa:	8f 5f       	subi	r24, 0xFF	; 255
    10fc:	8c 93       	st	X, r24
    10fe:	fe 01       	movw	r30, r28
    1100:	ed 57       	subi	r30, 0x7D	; 125
    1102:	ff 4f       	sbci	r31, 0xFF	; 255
    1104:	80 81       	ld	r24, Z
    1106:	89 30       	cpi	r24, 0x09	; 9
    1108:	08 f4       	brcc	.+2      	; 0x110c <main+0x5c6>
    110a:	21 cf       	rjmp	.-446    	; 0xf4e <main+0x408>


	      // Add a delay to control the speed of character movement
	      _delay_ms(100); // Adjust the delay as needed
      }
      CLCD_voidClearDisplay();
    110c:	0e 94 93 13 	call	0x2726	; 0x2726 <CLCD_voidClearDisplay>

	  for (u8 column = 8; column < 16; column++) {
    1110:	fe 01       	movw	r30, r28
    1112:	ee 57       	subi	r30, 0x7E	; 126
    1114:	ff 4f       	sbci	r31, 0xFF	; 255
    1116:	88 e0       	ldi	r24, 0x08	; 8
    1118:	80 83       	st	Z, r24
    111a:	d8 c0       	rjmp	.+432    	; 0x12cc <main+0x786>
		  // Clear the character at the previous position (if applicable)
		  if (column >= 8) {
    111c:	fe 01       	movw	r30, r28
    111e:	ee 57       	subi	r30, 0x7E	; 126
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	80 81       	ld	r24, Z
    1124:	88 30       	cpi	r24, 0x08	; 8
    1126:	58 f0       	brcs	.+22     	; 0x113e <main+0x5f8>
			  SendCharacter(1, column - 1, '_');
    1128:	fe 01       	movw	r30, r28
    112a:	ee 57       	subi	r30, 0x7E	; 126
    112c:	ff 4f       	sbci	r31, 0xFF	; 255
    112e:	80 81       	ld	r24, Z
    1130:	98 2f       	mov	r25, r24
    1132:	91 50       	subi	r25, 0x01	; 1
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	69 2f       	mov	r22, r25
    1138:	4f e5       	ldi	r20, 0x5F	; 95
    113a:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SendCharacter>
		  }

		  // Display the character at the new position
		  SendCharacter(1, column, characterToMove);
    113e:	fe 01       	movw	r30, r28
    1140:	ee 57       	subi	r30, 0x7E	; 126
    1142:	ff 4f       	sbci	r31, 0xFF	; 255
    1144:	de 01       	movw	r26, r28
    1146:	aa 57       	subi	r26, 0x7A	; 122
    1148:	bf 4f       	sbci	r27, 0xFF	; 255
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	60 81       	ld	r22, Z
    114e:	4c 91       	ld	r20, X
    1150:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SendCharacter>
    1154:	fe 01       	movw	r30, r28
    1156:	ef 5a       	subi	r30, 0xAF	; 175
    1158:	ff 4f       	sbci	r31, 0xFF	; 255
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a8 ec       	ldi	r26, 0xC8	; 200
    1160:	b2 e4       	ldi	r27, 0x42	; 66
    1162:	80 83       	st	Z, r24
    1164:	91 83       	std	Z+1, r25	; 0x01
    1166:	a2 83       	std	Z+2, r26	; 0x02
    1168:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    116a:	8e 01       	movw	r16, r28
    116c:	03 5b       	subi	r16, 0xB3	; 179
    116e:	1f 4f       	sbci	r17, 0xFF	; 255
    1170:	fe 01       	movw	r30, r28
    1172:	ef 5a       	subi	r30, 0xAF	; 175
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	60 81       	ld	r22, Z
    1178:	71 81       	ldd	r23, Z+1	; 0x01
    117a:	82 81       	ldd	r24, Z+2	; 0x02
    117c:	93 81       	ldd	r25, Z+3	; 0x03
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	4a ef       	ldi	r20, 0xFA	; 250
    1184:	54 e4       	ldi	r21, 0x44	; 68
    1186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	f8 01       	movw	r30, r16
    1190:	80 83       	st	Z, r24
    1192:	91 83       	std	Z+1, r25	; 0x01
    1194:	a2 83       	std	Z+2, r26	; 0x02
    1196:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1198:	fe 01       	movw	r30, r28
    119a:	e3 5b       	subi	r30, 0xB3	; 179
    119c:	ff 4f       	sbci	r31, 0xFF	; 255
    119e:	60 81       	ld	r22, Z
    11a0:	71 81       	ldd	r23, Z+1	; 0x01
    11a2:	82 81       	ldd	r24, Z+2	; 0x02
    11a4:	93 81       	ldd	r25, Z+3	; 0x03
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	40 e8       	ldi	r20, 0x80	; 128
    11ac:	5f e3       	ldi	r21, 0x3F	; 63
    11ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11b2:	88 23       	and	r24, r24
    11b4:	44 f4       	brge	.+16     	; 0x11c6 <main+0x680>
		__ticks = 1;
    11b6:	fe 01       	movw	r30, r28
    11b8:	e5 5b       	subi	r30, 0xB5	; 181
    11ba:	ff 4f       	sbci	r31, 0xFF	; 255
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	91 83       	std	Z+1, r25	; 0x01
    11c2:	80 83       	st	Z, r24
    11c4:	64 c0       	rjmp	.+200    	; 0x128e <main+0x748>
	else if (__tmp > 65535)
    11c6:	fe 01       	movw	r30, r28
    11c8:	e3 5b       	subi	r30, 0xB3	; 179
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	60 81       	ld	r22, Z
    11ce:	71 81       	ldd	r23, Z+1	; 0x01
    11d0:	82 81       	ldd	r24, Z+2	; 0x02
    11d2:	93 81       	ldd	r25, Z+3	; 0x03
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	3f ef       	ldi	r19, 0xFF	; 255
    11d8:	4f e7       	ldi	r20, 0x7F	; 127
    11da:	57 e4       	ldi	r21, 0x47	; 71
    11dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11e0:	18 16       	cp	r1, r24
    11e2:	0c f0       	brlt	.+2      	; 0x11e6 <main+0x6a0>
    11e4:	43 c0       	rjmp	.+134    	; 0x126c <main+0x726>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e6:	fe 01       	movw	r30, r28
    11e8:	ef 5a       	subi	r30, 0xAF	; 175
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	60 81       	ld	r22, Z
    11ee:	71 81       	ldd	r23, Z+1	; 0x01
    11f0:	82 81       	ldd	r24, Z+2	; 0x02
    11f2:	93 81       	ldd	r25, Z+3	; 0x03
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e2       	ldi	r20, 0x20	; 32
    11fa:	51 e4       	ldi	r21, 0x41	; 65
    11fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	8e 01       	movw	r16, r28
    1206:	05 5b       	subi	r16, 0xB5	; 181
    1208:	1f 4f       	sbci	r17, 0xFF	; 255
    120a:	bc 01       	movw	r22, r24
    120c:	cd 01       	movw	r24, r26
    120e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	f8 01       	movw	r30, r16
    1218:	91 83       	std	Z+1, r25	; 0x01
    121a:	80 83       	st	Z, r24
    121c:	1f c0       	rjmp	.+62     	; 0x125c <main+0x716>
    121e:	fe 01       	movw	r30, r28
    1220:	e7 5b       	subi	r30, 0xB7	; 183
    1222:	ff 4f       	sbci	r31, 0xFF	; 255
    1224:	88 ec       	ldi	r24, 0xC8	; 200
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	91 83       	std	Z+1, r25	; 0x01
    122a:	80 83       	st	Z, r24
    122c:	fe 01       	movw	r30, r28
    122e:	e7 5b       	subi	r30, 0xB7	; 183
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	80 81       	ld	r24, Z
    1234:	91 81       	ldd	r25, Z+1	; 0x01
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	f1 f7       	brne	.-4      	; 0x1236 <main+0x6f0>
    123a:	fe 01       	movw	r30, r28
    123c:	e7 5b       	subi	r30, 0xB7	; 183
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	91 83       	std	Z+1, r25	; 0x01
    1242:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1244:	de 01       	movw	r26, r28
    1246:	a5 5b       	subi	r26, 0xB5	; 181
    1248:	bf 4f       	sbci	r27, 0xFF	; 255
    124a:	fe 01       	movw	r30, r28
    124c:	e5 5b       	subi	r30, 0xB5	; 181
    124e:	ff 4f       	sbci	r31, 0xFF	; 255
    1250:	80 81       	ld	r24, Z
    1252:	91 81       	ldd	r25, Z+1	; 0x01
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	11 96       	adiw	r26, 0x01	; 1
    1258:	9c 93       	st	X, r25
    125a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    125c:	fe 01       	movw	r30, r28
    125e:	e5 5b       	subi	r30, 0xB5	; 181
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	80 81       	ld	r24, Z
    1264:	91 81       	ldd	r25, Z+1	; 0x01
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	d1 f6       	brne	.-76     	; 0x121e <main+0x6d8>
    126a:	27 c0       	rjmp	.+78     	; 0x12ba <main+0x774>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126c:	8e 01       	movw	r16, r28
    126e:	05 5b       	subi	r16, 0xB5	; 181
    1270:	1f 4f       	sbci	r17, 0xFF	; 255
    1272:	fe 01       	movw	r30, r28
    1274:	e3 5b       	subi	r30, 0xB3	; 179
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	60 81       	ld	r22, Z
    127a:	71 81       	ldd	r23, Z+1	; 0x01
    127c:	82 81       	ldd	r24, Z+2	; 0x02
    127e:	93 81       	ldd	r25, Z+3	; 0x03
    1280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	f8 01       	movw	r30, r16
    128a:	91 83       	std	Z+1, r25	; 0x01
    128c:	80 83       	st	Z, r24
    128e:	de 01       	movw	r26, r28
    1290:	a9 5b       	subi	r26, 0xB9	; 185
    1292:	bf 4f       	sbci	r27, 0xFF	; 255
    1294:	fe 01       	movw	r30, r28
    1296:	e5 5b       	subi	r30, 0xB5	; 181
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	80 81       	ld	r24, Z
    129c:	91 81       	ldd	r25, Z+1	; 0x01
    129e:	8d 93       	st	X+, r24
    12a0:	9c 93       	st	X, r25
    12a2:	fe 01       	movw	r30, r28
    12a4:	e9 5b       	subi	r30, 0xB9	; 185
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	80 81       	ld	r24, Z
    12aa:	91 81       	ldd	r25, Z+1	; 0x01
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <main+0x766>
    12b0:	fe 01       	movw	r30, r28
    12b2:	e9 5b       	subi	r30, 0xB9	; 185
    12b4:	ff 4f       	sbci	r31, 0xFF	; 255
    12b6:	91 83       	std	Z+1, r25	; 0x01
    12b8:	80 83       	st	Z, r24
	      // Add a delay to control the speed of character movement
	      _delay_ms(100); // Adjust the delay as needed
      }
      CLCD_voidClearDisplay();

	  for (u8 column = 8; column < 16; column++) {
    12ba:	de 01       	movw	r26, r28
    12bc:	ae 57       	subi	r26, 0x7E	; 126
    12be:	bf 4f       	sbci	r27, 0xFF	; 255
    12c0:	fe 01       	movw	r30, r28
    12c2:	ee 57       	subi	r30, 0x7E	; 126
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255
    12c6:	80 81       	ld	r24, Z
    12c8:	8f 5f       	subi	r24, 0xFF	; 255
    12ca:	8c 93       	st	X, r24
    12cc:	fe 01       	movw	r30, r28
    12ce:	ee 57       	subi	r30, 0x7E	; 126
    12d0:	ff 4f       	sbci	r31, 0xFF	; 255
    12d2:	80 81       	ld	r24, Z
    12d4:	80 31       	cpi	r24, 0x10	; 16
    12d6:	08 f4       	brcc	.+2      	; 0x12da <main+0x794>
    12d8:	21 cf       	rjmp	.-446    	; 0x111c <main+0x5d6>
		  SendCharacter(1, column, characterToMove);

		  // Add a delay to control the speed of character movement
		  _delay_ms(100); // Adjust the delay as needed
	  }
	  CLCD_voidClearDisplay();
    12da:	0e 94 93 13 	call	0x2726	; 0x2726 <CLCD_voidClearDisplay>

      CreateFrame3();
    12de:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <CreateFrame3>
     for (u8 column = 0; column <=8; column++) {
    12e2:	fe 01       	movw	r30, r28
    12e4:	ef 57       	subi	r30, 0x7F	; 127
    12e6:	ff 4f       	sbci	r31, 0xFF	; 255
    12e8:	10 82       	st	Z, r1
    12ea:	aa c0       	rjmp	.+340    	; 0x1440 <main+0x8fa>
	     // Clear the character at the previous position (if applicable)
	     if (column > 0) {
    12ec:	fe 01       	movw	r30, r28
    12ee:	ef 57       	subi	r30, 0x7F	; 127
    12f0:	ff 4f       	sbci	r31, 0xFF	; 255
    12f2:	80 81       	ld	r24, Z
    12f4:	88 23       	and	r24, r24
    12f6:	59 f0       	breq	.+22     	; 0x130e <main+0x7c8>
	    	 SendCharacter(1, column - 1, '_');
    12f8:	fe 01       	movw	r30, r28
    12fa:	ef 57       	subi	r30, 0x7F	; 127
    12fc:	ff 4f       	sbci	r31, 0xFF	; 255
    12fe:	80 81       	ld	r24, Z
    1300:	98 2f       	mov	r25, r24
    1302:	91 50       	subi	r25, 0x01	; 1
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	69 2f       	mov	r22, r25
    1308:	4f e5       	ldi	r20, 0x5F	; 95
    130a:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SendCharacter>
	     }

	     // Display the character at the new position
	     SendCharacter(1, column, characterToMove);
    130e:	fe 01       	movw	r30, r28
    1310:	ef 57       	subi	r30, 0x7F	; 127
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	de 01       	movw	r26, r28
    1316:	aa 57       	subi	r26, 0x7A	; 122
    1318:	bf 4f       	sbci	r27, 0xFF	; 255
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	60 81       	ld	r22, Z
    131e:	4c 91       	ld	r20, X
    1320:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SendCharacter>
    1324:	fe 01       	movw	r30, r28
    1326:	ed 5b       	subi	r30, 0xBD	; 189
    1328:	ff 4f       	sbci	r31, 0xFF	; 255
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	a8 ec       	ldi	r26, 0xC8	; 200
    1330:	b2 e4       	ldi	r27, 0x42	; 66
    1332:	80 83       	st	Z, r24
    1334:	91 83       	std	Z+1, r25	; 0x01
    1336:	a2 83       	std	Z+2, r26	; 0x02
    1338:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    133a:	8e 01       	movw	r16, r28
    133c:	01 5c       	subi	r16, 0xC1	; 193
    133e:	1f 4f       	sbci	r17, 0xFF	; 255
    1340:	fe 01       	movw	r30, r28
    1342:	ed 5b       	subi	r30, 0xBD	; 189
    1344:	ff 4f       	sbci	r31, 0xFF	; 255
    1346:	60 81       	ld	r22, Z
    1348:	71 81       	ldd	r23, Z+1	; 0x01
    134a:	82 81       	ldd	r24, Z+2	; 0x02
    134c:	93 81       	ldd	r25, Z+3	; 0x03
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	4a ef       	ldi	r20, 0xFA	; 250
    1354:	54 e4       	ldi	r21, 0x44	; 68
    1356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	f8 01       	movw	r30, r16
    1360:	80 83       	st	Z, r24
    1362:	91 83       	std	Z+1, r25	; 0x01
    1364:	a2 83       	std	Z+2, r26	; 0x02
    1366:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1368:	fe 01       	movw	r30, r28
    136a:	ff 96       	adiw	r30, 0x3f	; 63
    136c:	60 81       	ld	r22, Z
    136e:	71 81       	ldd	r23, Z+1	; 0x01
    1370:	82 81       	ldd	r24, Z+2	; 0x02
    1372:	93 81       	ldd	r25, Z+3	; 0x03
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	40 e8       	ldi	r20, 0x80	; 128
    137a:	5f e3       	ldi	r21, 0x3F	; 63
    137c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1380:	88 23       	and	r24, r24
    1382:	2c f4       	brge	.+10     	; 0x138e <main+0x848>
		__ticks = 1;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	9e af       	std	Y+62, r25	; 0x3e
    138a:	8d af       	std	Y+61, r24	; 0x3d
    138c:	46 c0       	rjmp	.+140    	; 0x141a <main+0x8d4>
	else if (__tmp > 65535)
    138e:	fe 01       	movw	r30, r28
    1390:	ff 96       	adiw	r30, 0x3f	; 63
    1392:	60 81       	ld	r22, Z
    1394:	71 81       	ldd	r23, Z+1	; 0x01
    1396:	82 81       	ldd	r24, Z+2	; 0x02
    1398:	93 81       	ldd	r25, Z+3	; 0x03
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	3f ef       	ldi	r19, 0xFF	; 255
    139e:	4f e7       	ldi	r20, 0x7F	; 127
    13a0:	57 e4       	ldi	r21, 0x47	; 71
    13a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13a6:	18 16       	cp	r1, r24
    13a8:	64 f5       	brge	.+88     	; 0x1402 <main+0x8bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13aa:	fe 01       	movw	r30, r28
    13ac:	ed 5b       	subi	r30, 0xBD	; 189
    13ae:	ff 4f       	sbci	r31, 0xFF	; 255
    13b0:	60 81       	ld	r22, Z
    13b2:	71 81       	ldd	r23, Z+1	; 0x01
    13b4:	82 81       	ldd	r24, Z+2	; 0x02
    13b6:	93 81       	ldd	r25, Z+3	; 0x03
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e2       	ldi	r20, 0x20	; 32
    13be:	51 e4       	ldi	r21, 0x41	; 65
    13c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	bc 01       	movw	r22, r24
    13ca:	cd 01       	movw	r24, r26
    13cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	9e af       	std	Y+62, r25	; 0x3e
    13d6:	8d af       	std	Y+61, r24	; 0x3d
    13d8:	0f c0       	rjmp	.+30     	; 0x13f8 <main+0x8b2>
    13da:	88 ec       	ldi	r24, 0xC8	; 200
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	9c af       	std	Y+60, r25	; 0x3c
    13e0:	8b af       	std	Y+59, r24	; 0x3b
    13e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    13e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	f1 f7       	brne	.-4      	; 0x13e6 <main+0x8a0>
    13ea:	9c af       	std	Y+60, r25	; 0x3c
    13ec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    13f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	9e af       	std	Y+62, r25	; 0x3e
    13f6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    13fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	69 f7       	brne	.-38     	; 0x13da <main+0x894>
    1400:	16 c0       	rjmp	.+44     	; 0x142e <main+0x8e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1402:	fe 01       	movw	r30, r28
    1404:	ff 96       	adiw	r30, 0x3f	; 63
    1406:	60 81       	ld	r22, Z
    1408:	71 81       	ldd	r23, Z+1	; 0x01
    140a:	82 81       	ldd	r24, Z+2	; 0x02
    140c:	93 81       	ldd	r25, Z+3	; 0x03
    140e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	9e af       	std	Y+62, r25	; 0x3e
    1418:	8d af       	std	Y+61, r24	; 0x3d
    141a:	8d ad       	ldd	r24, Y+61	; 0x3d
    141c:	9e ad       	ldd	r25, Y+62	; 0x3e
    141e:	9a af       	std	Y+58, r25	; 0x3a
    1420:	89 af       	std	Y+57, r24	; 0x39
    1422:	89 ad       	ldd	r24, Y+57	; 0x39
    1424:	9a ad       	ldd	r25, Y+58	; 0x3a
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <main+0x8e0>
    142a:	9a af       	std	Y+58, r25	; 0x3a
    142c:	89 af       	std	Y+57, r24	; 0x39
		  _delay_ms(100); // Adjust the delay as needed
	  }
	  CLCD_voidClearDisplay();

      CreateFrame3();
     for (u8 column = 0; column <=8; column++) {
    142e:	de 01       	movw	r26, r28
    1430:	af 57       	subi	r26, 0x7F	; 127
    1432:	bf 4f       	sbci	r27, 0xFF	; 255
    1434:	fe 01       	movw	r30, r28
    1436:	ef 57       	subi	r30, 0x7F	; 127
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	80 81       	ld	r24, Z
    143c:	8f 5f       	subi	r24, 0xFF	; 255
    143e:	8c 93       	st	X, r24
    1440:	fe 01       	movw	r30, r28
    1442:	ef 57       	subi	r30, 0x7F	; 127
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	80 81       	ld	r24, Z
    1448:	89 30       	cpi	r24, 0x09	; 9
    144a:	08 f4       	brcc	.+2      	; 0x144e <main+0x908>
    144c:	4f cf       	rjmp	.-354    	; 0x12ec <main+0x7a6>
	     SendCharacter(1, column, characterToMove);

	     // Add a delay to control the speed of character movement
	     _delay_ms(100); // Adjust the delay as needed
     }
     CLCD_voidClearDisplay();
    144e:	0e 94 93 13 	call	0x2726	; 0x2726 <CLCD_voidClearDisplay>

     CreateFrame4();
    1452:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <CreateFrame4>
     for (u8 column = 8; column < 16; column++) {
    1456:	fe 01       	movw	r30, r28
    1458:	e0 58       	subi	r30, 0x80	; 128
    145a:	ff 4f       	sbci	r31, 0xFF	; 255
    145c:	88 e0       	ldi	r24, 0x08	; 8
    145e:	80 83       	st	Z, r24
    1460:	97 c0       	rjmp	.+302    	; 0x1590 <main+0xa4a>
	     // Clear the character at the previous position (if applicable)
	     if (column >= 8) {
    1462:	fe 01       	movw	r30, r28
    1464:	e0 58       	subi	r30, 0x80	; 128
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	80 81       	ld	r24, Z
    146a:	88 30       	cpi	r24, 0x08	; 8
    146c:	58 f0       	brcs	.+22     	; 0x1484 <main+0x93e>
	    	 SendCharacter(0, column - 1, '_');
    146e:	fe 01       	movw	r30, r28
    1470:	e0 58       	subi	r30, 0x80	; 128
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	80 81       	ld	r24, Z
    1476:	98 2f       	mov	r25, r24
    1478:	91 50       	subi	r25, 0x01	; 1
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	69 2f       	mov	r22, r25
    147e:	4f e5       	ldi	r20, 0x5F	; 95
    1480:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SendCharacter>
	     }

	     // Display the character at the new position
	     SendCharacter(0, column, characterToMove);
    1484:	fe 01       	movw	r30, r28
    1486:	e0 58       	subi	r30, 0x80	; 128
    1488:	ff 4f       	sbci	r31, 0xFF	; 255
    148a:	de 01       	movw	r26, r28
    148c:	aa 57       	subi	r26, 0x7A	; 122
    148e:	bf 4f       	sbci	r27, 0xFF	; 255
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	60 81       	ld	r22, Z
    1494:	4c 91       	ld	r20, X
    1496:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SendCharacter>
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	a8 ec       	ldi	r26, 0xC8	; 200
    14a0:	b2 e4       	ldi	r27, 0x42	; 66
    14a2:	8d ab       	std	Y+53, r24	; 0x35
    14a4:	9e ab       	std	Y+54, r25	; 0x36
    14a6:	af ab       	std	Y+55, r26	; 0x37
    14a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14aa:	6d a9       	ldd	r22, Y+53	; 0x35
    14ac:	7e a9       	ldd	r23, Y+54	; 0x36
    14ae:	8f a9       	ldd	r24, Y+55	; 0x37
    14b0:	98 ad       	ldd	r25, Y+56	; 0x38
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	4a ef       	ldi	r20, 0xFA	; 250
    14b8:	54 e4       	ldi	r21, 0x44	; 68
    14ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	89 ab       	std	Y+49, r24	; 0x31
    14c4:	9a ab       	std	Y+50, r25	; 0x32
    14c6:	ab ab       	std	Y+51, r26	; 0x33
    14c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14ca:	69 a9       	ldd	r22, Y+49	; 0x31
    14cc:	7a a9       	ldd	r23, Y+50	; 0x32
    14ce:	8b a9       	ldd	r24, Y+51	; 0x33
    14d0:	9c a9       	ldd	r25, Y+52	; 0x34
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e8       	ldi	r20, 0x80	; 128
    14d8:	5f e3       	ldi	r21, 0x3F	; 63
    14da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14de:	88 23       	and	r24, r24
    14e0:	2c f4       	brge	.+10     	; 0x14ec <main+0x9a6>
		__ticks = 1;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	98 ab       	std	Y+48, r25	; 0x30
    14e8:	8f a7       	std	Y+47, r24	; 0x2f
    14ea:	3f c0       	rjmp	.+126    	; 0x156a <main+0xa24>
	else if (__tmp > 65535)
    14ec:	69 a9       	ldd	r22, Y+49	; 0x31
    14ee:	7a a9       	ldd	r23, Y+50	; 0x32
    14f0:	8b a9       	ldd	r24, Y+51	; 0x33
    14f2:	9c a9       	ldd	r25, Y+52	; 0x34
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	3f ef       	ldi	r19, 0xFF	; 255
    14f8:	4f e7       	ldi	r20, 0x7F	; 127
    14fa:	57 e4       	ldi	r21, 0x47	; 71
    14fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1500:	18 16       	cp	r1, r24
    1502:	4c f5       	brge	.+82     	; 0x1556 <main+0xa10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1504:	6d a9       	ldd	r22, Y+53	; 0x35
    1506:	7e a9       	ldd	r23, Y+54	; 0x36
    1508:	8f a9       	ldd	r24, Y+55	; 0x37
    150a:	98 ad       	ldd	r25, Y+56	; 0x38
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e2       	ldi	r20, 0x20	; 32
    1512:	51 e4       	ldi	r21, 0x41	; 65
    1514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	bc 01       	movw	r22, r24
    151e:	cd 01       	movw	r24, r26
    1520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	98 ab       	std	Y+48, r25	; 0x30
    152a:	8f a7       	std	Y+47, r24	; 0x2f
    152c:	0f c0       	rjmp	.+30     	; 0x154c <main+0xa06>
    152e:	88 ec       	ldi	r24, 0xC8	; 200
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	9e a7       	std	Y+46, r25	; 0x2e
    1534:	8d a7       	std	Y+45, r24	; 0x2d
    1536:	8d a5       	ldd	r24, Y+45	; 0x2d
    1538:	9e a5       	ldd	r25, Y+46	; 0x2e
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <main+0x9f4>
    153e:	9e a7       	std	Y+46, r25	; 0x2e
    1540:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1542:	8f a5       	ldd	r24, Y+47	; 0x2f
    1544:	98 a9       	ldd	r25, Y+48	; 0x30
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	98 ab       	std	Y+48, r25	; 0x30
    154a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154c:	8f a5       	ldd	r24, Y+47	; 0x2f
    154e:	98 a9       	ldd	r25, Y+48	; 0x30
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	69 f7       	brne	.-38     	; 0x152e <main+0x9e8>
    1554:	14 c0       	rjmp	.+40     	; 0x157e <main+0xa38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1556:	69 a9       	ldd	r22, Y+49	; 0x31
    1558:	7a a9       	ldd	r23, Y+50	; 0x32
    155a:	8b a9       	ldd	r24, Y+51	; 0x33
    155c:	9c a9       	ldd	r25, Y+52	; 0x34
    155e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	98 ab       	std	Y+48, r25	; 0x30
    1568:	8f a7       	std	Y+47, r24	; 0x2f
    156a:	8f a5       	ldd	r24, Y+47	; 0x2f
    156c:	98 a9       	ldd	r25, Y+48	; 0x30
    156e:	9c a7       	std	Y+44, r25	; 0x2c
    1570:	8b a7       	std	Y+43, r24	; 0x2b
    1572:	8b a5       	ldd	r24, Y+43	; 0x2b
    1574:	9c a5       	ldd	r25, Y+44	; 0x2c
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	f1 f7       	brne	.-4      	; 0x1576 <main+0xa30>
    157a:	9c a7       	std	Y+44, r25	; 0x2c
    157c:	8b a7       	std	Y+43, r24	; 0x2b
	     _delay_ms(100); // Adjust the delay as needed
     }
     CLCD_voidClearDisplay();

     CreateFrame4();
     for (u8 column = 8; column < 16; column++) {
    157e:	de 01       	movw	r26, r28
    1580:	a0 58       	subi	r26, 0x80	; 128
    1582:	bf 4f       	sbci	r27, 0xFF	; 255
    1584:	fe 01       	movw	r30, r28
    1586:	e0 58       	subi	r30, 0x80	; 128
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	80 81       	ld	r24, Z
    158c:	8f 5f       	subi	r24, 0xFF	; 255
    158e:	8c 93       	st	X, r24
    1590:	fe 01       	movw	r30, r28
    1592:	e0 58       	subi	r30, 0x80	; 128
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	80 81       	ld	r24, Z
    1598:	80 31       	cpi	r24, 0x10	; 16
    159a:	08 f4       	brcc	.+2      	; 0x159e <main+0xa58>
    159c:	62 cf       	rjmp	.-316    	; 0x1462 <main+0x91c>
	     SendCharacter(0, column, characterToMove);

	     // Add a delay to control the speed of character movement
	     _delay_ms(100); // Adjust the delay as needed
     }
     CLCD_voidClearDisplay();
    159e:	0e 94 93 13 	call	0x2726	; 0x2726 <CLCD_voidClearDisplay>
	 //CreateFrame5();
  for (u8 column = 0; column < 13; column++) {
    15a2:	fe 01       	movw	r30, r28
    15a4:	e1 58       	subi	r30, 0x81	; 129
    15a6:	ff 4f       	sbci	r31, 0xFF	; 255
    15a8:	10 82       	st	Z, r1
    15aa:	97 c0       	rjmp	.+302    	; 0x16da <main+0xb94>
	  /*Clear the character at the previous position (if applicable)*/

	  if (column > 0) {
    15ac:	fe 01       	movw	r30, r28
    15ae:	e1 58       	subi	r30, 0x81	; 129
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	80 81       	ld	r24, Z
    15b4:	88 23       	and	r24, r24
    15b6:	59 f0       	breq	.+22     	; 0x15ce <main+0xa88>
		  SendCharacter(0, column - 1, '_');
    15b8:	fe 01       	movw	r30, r28
    15ba:	e1 58       	subi	r30, 0x81	; 129
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	80 81       	ld	r24, Z
    15c0:	98 2f       	mov	r25, r24
    15c2:	91 50       	subi	r25, 0x01	; 1
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	69 2f       	mov	r22, r25
    15c8:	4f e5       	ldi	r20, 0x5F	; 95
    15ca:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SendCharacter>
	  }

	  // Display the character at the new position
	  SendCharacter(0, column, characterToMove);
    15ce:	fe 01       	movw	r30, r28
    15d0:	e1 58       	subi	r30, 0x81	; 129
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	de 01       	movw	r26, r28
    15d6:	aa 57       	subi	r26, 0x7A	; 122
    15d8:	bf 4f       	sbci	r27, 0xFF	; 255
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	60 81       	ld	r22, Z
    15de:	4c 91       	ld	r20, X
    15e0:	0e 94 ee 13 	call	0x27dc	; 0x27dc <SendCharacter>
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	aa ef       	ldi	r26, 0xFA	; 250
    15ea:	b3 e4       	ldi	r27, 0x43	; 67
    15ec:	8f a3       	std	Y+39, r24	; 0x27
    15ee:	98 a7       	std	Y+40, r25	; 0x28
    15f0:	a9 a7       	std	Y+41, r26	; 0x29
    15f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f4:	6f a1       	ldd	r22, Y+39	; 0x27
    15f6:	78 a5       	ldd	r23, Y+40	; 0x28
    15f8:	89 a5       	ldd	r24, Y+41	; 0x29
    15fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	4a ef       	ldi	r20, 0xFA	; 250
    1602:	54 e4       	ldi	r21, 0x44	; 68
    1604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	8b a3       	std	Y+35, r24	; 0x23
    160e:	9c a3       	std	Y+36, r25	; 0x24
    1610:	ad a3       	std	Y+37, r26	; 0x25
    1612:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1614:	6b a1       	ldd	r22, Y+35	; 0x23
    1616:	7c a1       	ldd	r23, Y+36	; 0x24
    1618:	8d a1       	ldd	r24, Y+37	; 0x25
    161a:	9e a1       	ldd	r25, Y+38	; 0x26
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	40 e8       	ldi	r20, 0x80	; 128
    1622:	5f e3       	ldi	r21, 0x3F	; 63
    1624:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1628:	88 23       	and	r24, r24
    162a:	2c f4       	brge	.+10     	; 0x1636 <main+0xaf0>
		__ticks = 1;
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	9a a3       	std	Y+34, r25	; 0x22
    1632:	89 a3       	std	Y+33, r24	; 0x21
    1634:	3f c0       	rjmp	.+126    	; 0x16b4 <main+0xb6e>
	else if (__tmp > 65535)
    1636:	6b a1       	ldd	r22, Y+35	; 0x23
    1638:	7c a1       	ldd	r23, Y+36	; 0x24
    163a:	8d a1       	ldd	r24, Y+37	; 0x25
    163c:	9e a1       	ldd	r25, Y+38	; 0x26
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	3f ef       	ldi	r19, 0xFF	; 255
    1642:	4f e7       	ldi	r20, 0x7F	; 127
    1644:	57 e4       	ldi	r21, 0x47	; 71
    1646:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    164a:	18 16       	cp	r1, r24
    164c:	4c f5       	brge	.+82     	; 0x16a0 <main+0xb5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    164e:	6f a1       	ldd	r22, Y+39	; 0x27
    1650:	78 a5       	ldd	r23, Y+40	; 0x28
    1652:	89 a5       	ldd	r24, Y+41	; 0x29
    1654:	9a a5       	ldd	r25, Y+42	; 0x2a
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	40 e2       	ldi	r20, 0x20	; 32
    165c:	51 e4       	ldi	r21, 0x41	; 65
    165e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	bc 01       	movw	r22, r24
    1668:	cd 01       	movw	r24, r26
    166a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	9a a3       	std	Y+34, r25	; 0x22
    1674:	89 a3       	std	Y+33, r24	; 0x21
    1676:	0f c0       	rjmp	.+30     	; 0x1696 <main+0xb50>
    1678:	88 ec       	ldi	r24, 0xC8	; 200
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	98 a3       	std	Y+32, r25	; 0x20
    167e:	8f 8f       	std	Y+31, r24	; 0x1f
    1680:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1682:	98 a1       	ldd	r25, Y+32	; 0x20
    1684:	01 97       	sbiw	r24, 0x01	; 1
    1686:	f1 f7       	brne	.-4      	; 0x1684 <main+0xb3e>
    1688:	98 a3       	std	Y+32, r25	; 0x20
    168a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168c:	89 a1       	ldd	r24, Y+33	; 0x21
    168e:	9a a1       	ldd	r25, Y+34	; 0x22
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	9a a3       	std	Y+34, r25	; 0x22
    1694:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1696:	89 a1       	ldd	r24, Y+33	; 0x21
    1698:	9a a1       	ldd	r25, Y+34	; 0x22
    169a:	00 97       	sbiw	r24, 0x00	; 0
    169c:	69 f7       	brne	.-38     	; 0x1678 <main+0xb32>
    169e:	14 c0       	rjmp	.+40     	; 0x16c8 <main+0xb82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a0:	6b a1       	ldd	r22, Y+35	; 0x23
    16a2:	7c a1       	ldd	r23, Y+36	; 0x24
    16a4:	8d a1       	ldd	r24, Y+37	; 0x25
    16a6:	9e a1       	ldd	r25, Y+38	; 0x26
    16a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	9a a3       	std	Y+34, r25	; 0x22
    16b2:	89 a3       	std	Y+33, r24	; 0x21
    16b4:	89 a1       	ldd	r24, Y+33	; 0x21
    16b6:	9a a1       	ldd	r25, Y+34	; 0x22
    16b8:	9e 8f       	std	Y+30, r25	; 0x1e
    16ba:	8d 8f       	std	Y+29, r24	; 0x1d
    16bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <main+0xb7a>
    16c4:	9e 8f       	std	Y+30, r25	; 0x1e
    16c6:	8d 8f       	std	Y+29, r24	; 0x1d
	     // Add a delay to control the speed of character movement
	     _delay_ms(100); // Adjust the delay as needed
     }
     CLCD_voidClearDisplay();
	 //CreateFrame5();
  for (u8 column = 0; column < 13; column++) {
    16c8:	de 01       	movw	r26, r28
    16ca:	a1 58       	subi	r26, 0x81	; 129
    16cc:	bf 4f       	sbci	r27, 0xFF	; 255
    16ce:	fe 01       	movw	r30, r28
    16d0:	e1 58       	subi	r30, 0x81	; 129
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 81       	ld	r24, Z
    16d6:	8f 5f       	subi	r24, 0xFF	; 255
    16d8:	8c 93       	st	X, r24
    16da:	fe 01       	movw	r30, r28
    16dc:	e1 58       	subi	r30, 0x81	; 129
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	80 81       	ld	r24, Z
    16e2:	8d 30       	cpi	r24, 0x0D	; 13
    16e4:	08 f4       	brcc	.+2      	; 0x16e8 <main+0xba2>
    16e6:	62 cf       	rjmp	.-316    	; 0x15ac <main+0xa66>
	  SendCharacter(0, column, characterToMove);

	  // Add a delay to control the speed of character movement
	  _delay_ms(500); // Adjust the delay as needed
  }
  CLCD_voidClearDisplay();
    16e8:	0e 94 93 13 	call	0x2726	; 0x2726 <CLCD_voidClearDisplay>
  CLCD_voidGoToXY(0,0);
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	0e 94 34 13 	call	0x2668	; 0x2668 <CLCD_voidGoToXY>
  ClCD_voidSendString("Game Over");
    16f4:	80 e6       	ldi	r24, 0x60	; 96
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	0e 94 0b 13 	call	0x2616	; 0x2616 <ClCD_voidSendString>
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e8       	ldi	r25, 0x80	; 128
    1700:	ab e3       	ldi	r26, 0x3B	; 59
    1702:	b5 e4       	ldi	r27, 0x45	; 69
    1704:	89 8f       	std	Y+25, r24	; 0x19
    1706:	9a 8f       	std	Y+26, r25	; 0x1a
    1708:	ab 8f       	std	Y+27, r26	; 0x1b
    170a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170c:	69 8d       	ldd	r22, Y+25	; 0x19
    170e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1710:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1712:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	4a ef       	ldi	r20, 0xFA	; 250
    171a:	54 e4       	ldi	r21, 0x44	; 68
    171c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	8d 8b       	std	Y+21, r24	; 0x15
    1726:	9e 8b       	std	Y+22, r25	; 0x16
    1728:	af 8b       	std	Y+23, r26	; 0x17
    172a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    172c:	6d 89       	ldd	r22, Y+21	; 0x15
    172e:	7e 89       	ldd	r23, Y+22	; 0x16
    1730:	8f 89       	ldd	r24, Y+23	; 0x17
    1732:	98 8d       	ldd	r25, Y+24	; 0x18
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	40 e8       	ldi	r20, 0x80	; 128
    173a:	5f e3       	ldi	r21, 0x3F	; 63
    173c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1740:	88 23       	and	r24, r24
    1742:	2c f4       	brge	.+10     	; 0x174e <main+0xc08>
		__ticks = 1;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	9c 8b       	std	Y+20, r25	; 0x14
    174a:	8b 8b       	std	Y+19, r24	; 0x13
    174c:	3f c0       	rjmp	.+126    	; 0x17cc <main+0xc86>
	else if (__tmp > 65535)
    174e:	6d 89       	ldd	r22, Y+21	; 0x15
    1750:	7e 89       	ldd	r23, Y+22	; 0x16
    1752:	8f 89       	ldd	r24, Y+23	; 0x17
    1754:	98 8d       	ldd	r25, Y+24	; 0x18
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	3f ef       	ldi	r19, 0xFF	; 255
    175a:	4f e7       	ldi	r20, 0x7F	; 127
    175c:	57 e4       	ldi	r21, 0x47	; 71
    175e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1762:	18 16       	cp	r1, r24
    1764:	4c f5       	brge	.+82     	; 0x17b8 <main+0xc72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1766:	69 8d       	ldd	r22, Y+25	; 0x19
    1768:	7a 8d       	ldd	r23, Y+26	; 0x1a
    176a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    176c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e2       	ldi	r20, 0x20	; 32
    1774:	51 e4       	ldi	r21, 0x41	; 65
    1776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	bc 01       	movw	r22, r24
    1780:	cd 01       	movw	r24, r26
    1782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	9c 8b       	std	Y+20, r25	; 0x14
    178c:	8b 8b       	std	Y+19, r24	; 0x13
    178e:	0f c0       	rjmp	.+30     	; 0x17ae <main+0xc68>
    1790:	88 ec       	ldi	r24, 0xC8	; 200
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	9a 8b       	std	Y+18, r25	; 0x12
    1796:	89 8b       	std	Y+17, r24	; 0x11
    1798:	89 89       	ldd	r24, Y+17	; 0x11
    179a:	9a 89       	ldd	r25, Y+18	; 0x12
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <main+0xc56>
    17a0:	9a 8b       	std	Y+18, r25	; 0x12
    17a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a4:	8b 89       	ldd	r24, Y+19	; 0x13
    17a6:	9c 89       	ldd	r25, Y+20	; 0x14
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	9c 8b       	std	Y+20, r25	; 0x14
    17ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ae:	8b 89       	ldd	r24, Y+19	; 0x13
    17b0:	9c 89       	ldd	r25, Y+20	; 0x14
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	69 f7       	brne	.-38     	; 0x1790 <main+0xc4a>
    17b6:	14 c0       	rjmp	.+40     	; 0x17e0 <main+0xc9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b8:	6d 89       	ldd	r22, Y+21	; 0x15
    17ba:	7e 89       	ldd	r23, Y+22	; 0x16
    17bc:	8f 89       	ldd	r24, Y+23	; 0x17
    17be:	98 8d       	ldd	r25, Y+24	; 0x18
    17c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	9c 8b       	std	Y+20, r25	; 0x14
    17ca:	8b 8b       	std	Y+19, r24	; 0x13
    17cc:	8b 89       	ldd	r24, Y+19	; 0x13
    17ce:	9c 89       	ldd	r25, Y+20	; 0x14
    17d0:	98 8b       	std	Y+16, r25	; 0x10
    17d2:	8f 87       	std	Y+15, r24	; 0x0f
    17d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d6:	98 89       	ldd	r25, Y+16	; 0x10
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	f1 f7       	brne	.-4      	; 0x17d8 <main+0xc92>
    17dc:	98 8b       	std	Y+16, r25	; 0x10
    17de:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(3000);
  CLCD_voidClearDisplay();
    17e0:	0e 94 93 13 	call	0x2726	; 0x2726 <CLCD_voidClearDisplay>
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	90 e8       	ldi	r25, 0x80	; 128
    17e8:	ab e3       	ldi	r26, 0x3B	; 59
    17ea:	b5 e4       	ldi	r27, 0x45	; 69
    17ec:	8b 87       	std	Y+11, r24	; 0x0b
    17ee:	9c 87       	std	Y+12, r25	; 0x0c
    17f0:	ad 87       	std	Y+13, r26	; 0x0d
    17f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	4a ef       	ldi	r20, 0xFA	; 250
    1802:	54 e4       	ldi	r21, 0x44	; 68
    1804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	8f 83       	std	Y+7, r24	; 0x07
    180e:	98 87       	std	Y+8, r25	; 0x08
    1810:	a9 87       	std	Y+9, r26	; 0x09
    1812:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1814:	6f 81       	ldd	r22, Y+7	; 0x07
    1816:	78 85       	ldd	r23, Y+8	; 0x08
    1818:	89 85       	ldd	r24, Y+9	; 0x09
    181a:	9a 85       	ldd	r25, Y+10	; 0x0a
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	40 e8       	ldi	r20, 0x80	; 128
    1822:	5f e3       	ldi	r21, 0x3F	; 63
    1824:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1828:	88 23       	and	r24, r24
    182a:	2c f4       	brge	.+10     	; 0x1836 <main+0xcf0>
		__ticks = 1;
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	9e 83       	std	Y+6, r25	; 0x06
    1832:	8d 83       	std	Y+5, r24	; 0x05
    1834:	3f c0       	rjmp	.+126    	; 0x18b4 <main+0xd6e>
	else if (__tmp > 65535)
    1836:	6f 81       	ldd	r22, Y+7	; 0x07
    1838:	78 85       	ldd	r23, Y+8	; 0x08
    183a:	89 85       	ldd	r24, Y+9	; 0x09
    183c:	9a 85       	ldd	r25, Y+10	; 0x0a
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	3f ef       	ldi	r19, 0xFF	; 255
    1842:	4f e7       	ldi	r20, 0x7F	; 127
    1844:	57 e4       	ldi	r21, 0x47	; 71
    1846:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    184a:	18 16       	cp	r1, r24
    184c:	4c f5       	brge	.+82     	; 0x18a0 <main+0xd5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    184e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1850:	7c 85       	ldd	r23, Y+12	; 0x0c
    1852:	8d 85       	ldd	r24, Y+13	; 0x0d
    1854:	9e 85       	ldd	r25, Y+14	; 0x0e
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	40 e2       	ldi	r20, 0x20	; 32
    185c:	51 e4       	ldi	r21, 0x41	; 65
    185e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	bc 01       	movw	r22, r24
    1868:	cd 01       	movw	r24, r26
    186a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	9e 83       	std	Y+6, r25	; 0x06
    1874:	8d 83       	std	Y+5, r24	; 0x05
    1876:	0f c0       	rjmp	.+30     	; 0x1896 <main+0xd50>
    1878:	88 ec       	ldi	r24, 0xC8	; 200
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	9c 83       	std	Y+4, r25	; 0x04
    187e:	8b 83       	std	Y+3, r24	; 0x03
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	9c 81       	ldd	r25, Y+4	; 0x04
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	f1 f7       	brne	.-4      	; 0x1884 <main+0xd3e>
    1888:	9c 83       	std	Y+4, r25	; 0x04
    188a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    188c:	8d 81       	ldd	r24, Y+5	; 0x05
    188e:	9e 81       	ldd	r25, Y+6	; 0x06
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	9e 83       	std	Y+6, r25	; 0x06
    1894:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1896:	8d 81       	ldd	r24, Y+5	; 0x05
    1898:	9e 81       	ldd	r25, Y+6	; 0x06
    189a:	00 97       	sbiw	r24, 0x00	; 0
    189c:	69 f7       	brne	.-38     	; 0x1878 <main+0xd32>
    189e:	80 c9       	rjmp	.-3328   	; 0xba0 <main+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a0:	6f 81       	ldd	r22, Y+7	; 0x07
    18a2:	78 85       	ldd	r23, Y+8	; 0x08
    18a4:	89 85       	ldd	r24, Y+9	; 0x09
    18a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	9e 83       	std	Y+6, r25	; 0x06
    18b2:	8d 83       	std	Y+5, r24	; 0x05
    18b4:	8d 81       	ldd	r24, Y+5	; 0x05
    18b6:	9e 81       	ldd	r25, Y+6	; 0x06
    18b8:	9a 83       	std	Y+2, r25	; 0x02
    18ba:	89 83       	std	Y+1, r24	; 0x01
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	9a 81       	ldd	r25, Y+2	; 0x02
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	f1 f7       	brne	.-4      	; 0x18c0 <main+0xd7a>
    18c4:	9a 83       	std	Y+2, r25	; 0x02
    18c6:	89 83       	std	Y+1, r24	; 0x01
    18c8:	6b c9       	rjmp	.-3370   	; 0xba0 <main+0x5a>

000018ca <CreateFrame>:
}



void CreateFrame(void)
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	a5 97       	sbiw	r28, 0x25	; 37
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
	u8 frame1[][15] = {
	{'_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'},
	{'_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'},
	};
    18de:	ce 01       	movw	r24, r28
    18e0:	03 96       	adiw	r24, 0x03	; 3
    18e2:	9a a3       	std	Y+34, r25	; 0x22
    18e4:	89 a3       	std	Y+33, r24	; 0x21
    18e6:	ea e7       	ldi	r30, 0x7A	; 122
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	fc a3       	std	Y+36, r31	; 0x24
    18ec:	eb a3       	std	Y+35, r30	; 0x23
    18ee:	fe e1       	ldi	r31, 0x1E	; 30
    18f0:	fd a3       	std	Y+37, r31	; 0x25
    18f2:	eb a1       	ldd	r30, Y+35	; 0x23
    18f4:	fc a1       	ldd	r31, Y+36	; 0x24
    18f6:	00 80       	ld	r0, Z
    18f8:	8b a1       	ldd	r24, Y+35	; 0x23
    18fa:	9c a1       	ldd	r25, Y+36	; 0x24
    18fc:	01 96       	adiw	r24, 0x01	; 1
    18fe:	9c a3       	std	Y+36, r25	; 0x24
    1900:	8b a3       	std	Y+35, r24	; 0x23
    1902:	e9 a1       	ldd	r30, Y+33	; 0x21
    1904:	fa a1       	ldd	r31, Y+34	; 0x22
    1906:	00 82       	st	Z, r0
    1908:	89 a1       	ldd	r24, Y+33	; 0x21
    190a:	9a a1       	ldd	r25, Y+34	; 0x22
    190c:	01 96       	adiw	r24, 0x01	; 1
    190e:	9a a3       	std	Y+34, r25	; 0x22
    1910:	89 a3       	std	Y+33, r24	; 0x21
    1912:	9d a1       	ldd	r25, Y+37	; 0x25
    1914:	91 50       	subi	r25, 0x01	; 1
    1916:	9d a3       	std	Y+37, r25	; 0x25
    1918:	ed a1       	ldd	r30, Y+37	; 0x25
    191a:	ee 23       	and	r30, r30
    191c:	51 f7       	brne	.-44     	; 0x18f2 <CreateFrame+0x28>

	for(u8 row_iterator = 0; row_iterator < 2; row_iterator++)
    191e:	1a 82       	std	Y+2, r1	; 0x02
    1920:	2c c0       	rjmp	.+88     	; 0x197a <CreateFrame+0xb0>
	{
		CLCD_voidGoToXY(row_iterator,0);
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	0e 94 34 13 	call	0x2668	; 0x2668 <CLCD_voidGoToXY>
		for(u8 column_iterator = 0; column_iterator < 16; column_iterator++)
    192a:	19 82       	std	Y+1, r1	; 0x01
    192c:	20 c0       	rjmp	.+64     	; 0x196e <CreateFrame+0xa4>
		{
			CLCD_voidSendData(*(*(frame1 + row_iterator) + column_iterator));
    192e:	ae 01       	movw	r20, r28
    1930:	4d 5f       	subi	r20, 0xFD	; 253
    1932:	5f 4f       	sbci	r21, 0xFF	; 255
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	c9 01       	movw	r24, r18
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	82 0f       	add	r24, r18
    1942:	93 1f       	adc	r25, r19
    1944:	9c 01       	movw	r18, r24
    1946:	22 0f       	add	r18, r18
    1948:	33 1f       	adc	r19, r19
    194a:	22 0f       	add	r18, r18
    194c:	33 1f       	adc	r19, r19
    194e:	28 0f       	add	r18, r24
    1950:	39 1f       	adc	r19, r25
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	88 2f       	mov	r24, r24
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	82 0f       	add	r24, r18
    195a:	93 1f       	adc	r25, r19
    195c:	fa 01       	movw	r30, r20
    195e:	e8 0f       	add	r30, r24
    1960:	f9 1f       	adc	r31, r25
    1962:	80 81       	ld	r24, Z
    1964:	0e 94 6d 12 	call	0x24da	; 0x24da <CLCD_voidSendData>
	};

	for(u8 row_iterator = 0; row_iterator < 2; row_iterator++)
	{
		CLCD_voidGoToXY(row_iterator,0);
		for(u8 column_iterator = 0; column_iterator < 16; column_iterator++)
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	8f 5f       	subi	r24, 0xFF	; 255
    196c:	89 83       	std	Y+1, r24	; 0x01
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	80 31       	cpi	r24, 0x10	; 16
    1972:	e8 f2       	brcs	.-70     	; 0x192e <CreateFrame+0x64>
	u8 frame1[][15] = {
	{'_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'},
	{'_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'},
	};

	for(u8 row_iterator = 0; row_iterator < 2; row_iterator++)
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	8f 5f       	subi	r24, 0xFF	; 255
    1978:	8a 83       	std	Y+2, r24	; 0x02
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	82 30       	cpi	r24, 0x02	; 2
    197e:	88 f2       	brcs	.-94     	; 0x1922 <CreateFrame+0x58>
		for(u8 column_iterator = 0; column_iterator < 16; column_iterator++)
		{
			CLCD_voidSendData(*(*(frame1 + row_iterator) + column_iterator));
		}
	}
}
    1980:	a5 96       	adiw	r28, 0x25	; 37
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <CreateFrame2>:
void CreateFrame2(void)
{
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	a4 97       	sbiw	r28, 0x24	; 36
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
	u8 frame1[][17] = {
		{'_','_','_','_','_','_','_','_','_','_','_','_','| '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	};
    19a6:	82 e2       	ldi	r24, 0x22	; 34
    19a8:	fe 01       	movw	r30, r28
    19aa:	33 96       	adiw	r30, 0x03	; 3
    19ac:	df 01       	movw	r26, r30
    19ae:	98 2f       	mov	r25, r24
    19b0:	1d 92       	st	X+, r1
    19b2:	9a 95       	dec	r25
    19b4:	e9 f7       	brne	.-6      	; 0x19b0 <CreateFrame2+0x1e>
    19b6:	8f e5       	ldi	r24, 0x5F	; 95
    19b8:	8b 83       	std	Y+3, r24	; 0x03
    19ba:	8f e5       	ldi	r24, 0x5F	; 95
    19bc:	8c 83       	std	Y+4, r24	; 0x04
    19be:	8f e5       	ldi	r24, 0x5F	; 95
    19c0:	8d 83       	std	Y+5, r24	; 0x05
    19c2:	8f e5       	ldi	r24, 0x5F	; 95
    19c4:	8e 83       	std	Y+6, r24	; 0x06
    19c6:	8f e5       	ldi	r24, 0x5F	; 95
    19c8:	8f 83       	std	Y+7, r24	; 0x07
    19ca:	8f e5       	ldi	r24, 0x5F	; 95
    19cc:	88 87       	std	Y+8, r24	; 0x08
    19ce:	8f e5       	ldi	r24, 0x5F	; 95
    19d0:	89 87       	std	Y+9, r24	; 0x09
    19d2:	8f e5       	ldi	r24, 0x5F	; 95
    19d4:	8a 87       	std	Y+10, r24	; 0x0a
    19d6:	8f e5       	ldi	r24, 0x5F	; 95
    19d8:	8b 87       	std	Y+11, r24	; 0x0b
    19da:	8f e5       	ldi	r24, 0x5F	; 95
    19dc:	8c 87       	std	Y+12, r24	; 0x0c
    19de:	8f e5       	ldi	r24, 0x5F	; 95
    19e0:	8d 87       	std	Y+13, r24	; 0x0d
    19e2:	8f e5       	ldi	r24, 0x5F	; 95
    19e4:	8e 87       	std	Y+14, r24	; 0x0e
    19e6:	80 e2       	ldi	r24, 0x20	; 32
    19e8:	8f 87       	std	Y+15, r24	; 0x0f
    19ea:	80 e2       	ldi	r24, 0x20	; 32
    19ec:	8c 8b       	std	Y+20, r24	; 0x14
    19ee:	80 e2       	ldi	r24, 0x20	; 32
    19f0:	8d 8b       	std	Y+21, r24	; 0x15
    19f2:	80 e2       	ldi	r24, 0x20	; 32
    19f4:	8e 8b       	std	Y+22, r24	; 0x16
    19f6:	80 e2       	ldi	r24, 0x20	; 32
    19f8:	8f 8b       	std	Y+23, r24	; 0x17
    19fa:	80 e2       	ldi	r24, 0x20	; 32
    19fc:	88 8f       	std	Y+24, r24	; 0x18
    19fe:	80 e2       	ldi	r24, 0x20	; 32
    1a00:	89 8f       	std	Y+25, r24	; 0x19
    1a02:	80 e2       	ldi	r24, 0x20	; 32
    1a04:	8a 8f       	std	Y+26, r24	; 0x1a
    1a06:	80 e2       	ldi	r24, 0x20	; 32
    1a08:	8b 8f       	std	Y+27, r24	; 0x1b
    1a0a:	80 e2       	ldi	r24, 0x20	; 32
    1a0c:	8c 8f       	std	Y+28, r24	; 0x1c
    1a0e:	80 e2       	ldi	r24, 0x20	; 32
    1a10:	8d 8f       	std	Y+29, r24	; 0x1d
    1a12:	80 e2       	ldi	r24, 0x20	; 32
    1a14:	8e 8f       	std	Y+30, r24	; 0x1e
    1a16:	80 e2       	ldi	r24, 0x20	; 32
    1a18:	8f 8f       	std	Y+31, r24	; 0x1f
    1a1a:	80 e2       	ldi	r24, 0x20	; 32
    1a1c:	88 a3       	std	Y+32, r24	; 0x20
    1a1e:	80 e2       	ldi	r24, 0x20	; 32
    1a20:	89 a3       	std	Y+33, r24	; 0x21
    1a22:	80 e2       	ldi	r24, 0x20	; 32
    1a24:	8a a3       	std	Y+34, r24	; 0x22
    1a26:	80 e2       	ldi	r24, 0x20	; 32
    1a28:	8b a3       	std	Y+35, r24	; 0x23
    1a2a:	80 e2       	ldi	r24, 0x20	; 32
    1a2c:	8c a3       	std	Y+36, r24	; 0x24

	for(u8 row_iterator = 0; row_iterator < 2; row_iterator++)
    1a2e:	1a 82       	std	Y+2, r1	; 0x02
    1a30:	29 c0       	rjmp	.+82     	; 0x1a84 <CreateFrame2+0xf2>
	{
		CLCD_voidGoToXY(row_iterator,0);
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	60 e0       	ldi	r22, 0x00	; 0
    1a36:	0e 94 34 13 	call	0x2668	; 0x2668 <CLCD_voidGoToXY>
		for(u8 column_iterator = 0; column_iterator < 16; column_iterator++)
    1a3a:	19 82       	std	Y+1, r1	; 0x01
    1a3c:	1d c0       	rjmp	.+58     	; 0x1a78 <CreateFrame2+0xe6>
		{
			CLCD_voidSendData(*(*(frame1 + row_iterator) + column_iterator));
    1a3e:	ae 01       	movw	r20, r28
    1a40:	4d 5f       	subi	r20, 0xFD	; 253
    1a42:	5f 4f       	sbci	r21, 0xFF	; 255
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	c9 01       	movw	r24, r18
    1a4c:	82 95       	swap	r24
    1a4e:	92 95       	swap	r25
    1a50:	90 7f       	andi	r25, 0xF0	; 240
    1a52:	98 27       	eor	r25, r24
    1a54:	80 7f       	andi	r24, 0xF0	; 240
    1a56:	98 27       	eor	r25, r24
    1a58:	28 0f       	add	r18, r24
    1a5a:	39 1f       	adc	r19, r25
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	88 2f       	mov	r24, r24
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	82 0f       	add	r24, r18
    1a64:	93 1f       	adc	r25, r19
    1a66:	fa 01       	movw	r30, r20
    1a68:	e8 0f       	add	r30, r24
    1a6a:	f9 1f       	adc	r31, r25
    1a6c:	80 81       	ld	r24, Z
    1a6e:	0e 94 6d 12 	call	0x24da	; 0x24da <CLCD_voidSendData>
	};

	for(u8 row_iterator = 0; row_iterator < 2; row_iterator++)
	{
		CLCD_voidGoToXY(row_iterator,0);
		for(u8 column_iterator = 0; column_iterator < 16; column_iterator++)
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	8f 5f       	subi	r24, 0xFF	; 255
    1a76:	89 83       	std	Y+1, r24	; 0x01
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	80 31       	cpi	r24, 0x10	; 16
    1a7c:	00 f3       	brcs	.-64     	; 0x1a3e <CreateFrame2+0xac>
	u8 frame1[][17] = {
		{'_','_','_','_','_','_','_','_','_','_','_','_','| '},
		{' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
	};

	for(u8 row_iterator = 0; row_iterator < 2; row_iterator++)
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	8f 5f       	subi	r24, 0xFF	; 255
    1a82:	8a 83       	std	Y+2, r24	; 0x02
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	82 30       	cpi	r24, 0x02	; 2
    1a88:	a0 f2       	brcs	.-88     	; 0x1a32 <CreateFrame2+0xa0>
		for(u8 column_iterator = 0; column_iterator < 16; column_iterator++)
		{
			CLCD_voidSendData(*(*(frame1 + row_iterator) + column_iterator));
		}
	}
}
    1a8a:	a4 96       	adiw	r28, 0x24	; 36
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <CreateFrame3>:
void CreateFrame3(void)
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	a4 97       	sbiw	r28, 0x24	; 36
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	de bf       	out	0x3e, r29	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	cd bf       	out	0x3d, r28	; 61
	u8 frame1[][17] = {
		{'_','_','_','_','_','_','_','_',' ',' ','_','_','_','_','_','_' },
		{'_','_','_','_','_','_','_','_','_','/','_','_','_','_','_','_','_'},
	};
    1ab0:	82 e2       	ldi	r24, 0x22	; 34
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	33 96       	adiw	r30, 0x03	; 3
    1ab6:	df 01       	movw	r26, r30
    1ab8:	98 2f       	mov	r25, r24
    1aba:	1d 92       	st	X+, r1
    1abc:	9a 95       	dec	r25
    1abe:	e9 f7       	brne	.-6      	; 0x1aba <CreateFrame3+0x1e>
    1ac0:	8f e5       	ldi	r24, 0x5F	; 95
    1ac2:	8b 83       	std	Y+3, r24	; 0x03
    1ac4:	8f e5       	ldi	r24, 0x5F	; 95
    1ac6:	8c 83       	std	Y+4, r24	; 0x04
    1ac8:	8f e5       	ldi	r24, 0x5F	; 95
    1aca:	8d 83       	std	Y+5, r24	; 0x05
    1acc:	8f e5       	ldi	r24, 0x5F	; 95
    1ace:	8e 83       	std	Y+6, r24	; 0x06
    1ad0:	8f e5       	ldi	r24, 0x5F	; 95
    1ad2:	8f 83       	std	Y+7, r24	; 0x07
    1ad4:	8f e5       	ldi	r24, 0x5F	; 95
    1ad6:	88 87       	std	Y+8, r24	; 0x08
    1ad8:	8f e5       	ldi	r24, 0x5F	; 95
    1ada:	89 87       	std	Y+9, r24	; 0x09
    1adc:	8f e5       	ldi	r24, 0x5F	; 95
    1ade:	8a 87       	std	Y+10, r24	; 0x0a
    1ae0:	80 e2       	ldi	r24, 0x20	; 32
    1ae2:	8b 87       	std	Y+11, r24	; 0x0b
    1ae4:	80 e2       	ldi	r24, 0x20	; 32
    1ae6:	8c 87       	std	Y+12, r24	; 0x0c
    1ae8:	8f e5       	ldi	r24, 0x5F	; 95
    1aea:	8d 87       	std	Y+13, r24	; 0x0d
    1aec:	8f e5       	ldi	r24, 0x5F	; 95
    1aee:	8e 87       	std	Y+14, r24	; 0x0e
    1af0:	8f e5       	ldi	r24, 0x5F	; 95
    1af2:	8f 87       	std	Y+15, r24	; 0x0f
    1af4:	8f e5       	ldi	r24, 0x5F	; 95
    1af6:	88 8b       	std	Y+16, r24	; 0x10
    1af8:	8f e5       	ldi	r24, 0x5F	; 95
    1afa:	89 8b       	std	Y+17, r24	; 0x11
    1afc:	8f e5       	ldi	r24, 0x5F	; 95
    1afe:	8a 8b       	std	Y+18, r24	; 0x12
    1b00:	8f e5       	ldi	r24, 0x5F	; 95
    1b02:	8c 8b       	std	Y+20, r24	; 0x14
    1b04:	8f e5       	ldi	r24, 0x5F	; 95
    1b06:	8d 8b       	std	Y+21, r24	; 0x15
    1b08:	8f e5       	ldi	r24, 0x5F	; 95
    1b0a:	8e 8b       	std	Y+22, r24	; 0x16
    1b0c:	8f e5       	ldi	r24, 0x5F	; 95
    1b0e:	8f 8b       	std	Y+23, r24	; 0x17
    1b10:	8f e5       	ldi	r24, 0x5F	; 95
    1b12:	88 8f       	std	Y+24, r24	; 0x18
    1b14:	8f e5       	ldi	r24, 0x5F	; 95
    1b16:	89 8f       	std	Y+25, r24	; 0x19
    1b18:	8f e5       	ldi	r24, 0x5F	; 95
    1b1a:	8a 8f       	std	Y+26, r24	; 0x1a
    1b1c:	8f e5       	ldi	r24, 0x5F	; 95
    1b1e:	8b 8f       	std	Y+27, r24	; 0x1b
    1b20:	8f e5       	ldi	r24, 0x5F	; 95
    1b22:	8c 8f       	std	Y+28, r24	; 0x1c
    1b24:	8f e2       	ldi	r24, 0x2F	; 47
    1b26:	8d 8f       	std	Y+29, r24	; 0x1d
    1b28:	8f e5       	ldi	r24, 0x5F	; 95
    1b2a:	8e 8f       	std	Y+30, r24	; 0x1e
    1b2c:	8f e5       	ldi	r24, 0x5F	; 95
    1b2e:	8f 8f       	std	Y+31, r24	; 0x1f
    1b30:	8f e5       	ldi	r24, 0x5F	; 95
    1b32:	88 a3       	std	Y+32, r24	; 0x20
    1b34:	8f e5       	ldi	r24, 0x5F	; 95
    1b36:	89 a3       	std	Y+33, r24	; 0x21
    1b38:	8f e5       	ldi	r24, 0x5F	; 95
    1b3a:	8a a3       	std	Y+34, r24	; 0x22
    1b3c:	8f e5       	ldi	r24, 0x5F	; 95
    1b3e:	8b a3       	std	Y+35, r24	; 0x23
    1b40:	8f e5       	ldi	r24, 0x5F	; 95
    1b42:	8c a3       	std	Y+36, r24	; 0x24

	for(u8 row_iterator = 0; row_iterator < 2; row_iterator++)
    1b44:	1a 82       	std	Y+2, r1	; 0x02
    1b46:	29 c0       	rjmp	.+82     	; 0x1b9a <CreateFrame3+0xfe>
	{
		CLCD_voidGoToXY(row_iterator,1);
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	61 e0       	ldi	r22, 0x01	; 1
    1b4c:	0e 94 34 13 	call	0x2668	; 0x2668 <CLCD_voidGoToXY>
		for(u8 column_iterator = 0; column_iterator < 16; column_iterator++)
    1b50:	19 82       	std	Y+1, r1	; 0x01
    1b52:	1d c0       	rjmp	.+58     	; 0x1b8e <CreateFrame3+0xf2>
		{
			CLCD_voidSendData(*(*(frame1 + row_iterator) + column_iterator));
    1b54:	ae 01       	movw	r20, r28
    1b56:	4d 5f       	subi	r20, 0xFD	; 253
    1b58:	5f 4f       	sbci	r21, 0xFF	; 255
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	c9 01       	movw	r24, r18
    1b62:	82 95       	swap	r24
    1b64:	92 95       	swap	r25
    1b66:	90 7f       	andi	r25, 0xF0	; 240
    1b68:	98 27       	eor	r25, r24
    1b6a:	80 7f       	andi	r24, 0xF0	; 240
    1b6c:	98 27       	eor	r25, r24
    1b6e:	28 0f       	add	r18, r24
    1b70:	39 1f       	adc	r19, r25
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	88 2f       	mov	r24, r24
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	82 0f       	add	r24, r18
    1b7a:	93 1f       	adc	r25, r19
    1b7c:	fa 01       	movw	r30, r20
    1b7e:	e8 0f       	add	r30, r24
    1b80:	f9 1f       	adc	r31, r25
    1b82:	80 81       	ld	r24, Z
    1b84:	0e 94 6d 12 	call	0x24da	; 0x24da <CLCD_voidSendData>
	};

	for(u8 row_iterator = 0; row_iterator < 2; row_iterator++)
	{
		CLCD_voidGoToXY(row_iterator,1);
		for(u8 column_iterator = 0; column_iterator < 16; column_iterator++)
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	8f 5f       	subi	r24, 0xFF	; 255
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	80 31       	cpi	r24, 0x10	; 16
    1b92:	00 f3       	brcs	.-64     	; 0x1b54 <CreateFrame3+0xb8>
	u8 frame1[][17] = {
		{'_','_','_','_','_','_','_','_',' ',' ','_','_','_','_','_','_' },
		{'_','_','_','_','_','_','_','_','_','/','_','_','_','_','_','_','_'},
	};

	for(u8 row_iterator = 0; row_iterator < 2; row_iterator++)
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	8f 5f       	subi	r24, 0xFF	; 255
    1b98:	8a 83       	std	Y+2, r24	; 0x02
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	82 30       	cpi	r24, 0x02	; 2
    1b9e:	a0 f2       	brcs	.-88     	; 0x1b48 <CreateFrame3+0xac>
		for(u8 column_iterator = 0; column_iterator < 16; column_iterator++)
		{
			CLCD_voidSendData(*(*(frame1 + row_iterator) + column_iterator));
		}
	}
}
    1ba0:	a4 96       	adiw	r28, 0x24	; 36
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <CreateFrame4>:
void CreateFrame4(void)
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	a5 97       	sbiw	r28, 0x25	; 37
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
	u8 frame1[][15] = {
		{'_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'},
		{'_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'},
	};
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	03 96       	adiw	r24, 0x03	; 3
    1bca:	9a a3       	std	Y+34, r25	; 0x22
    1bcc:	89 a3       	std	Y+33, r24	; 0x21
    1bce:	e8 e9       	ldi	r30, 0x98	; 152
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	fc a3       	std	Y+36, r31	; 0x24
    1bd4:	eb a3       	std	Y+35, r30	; 0x23
    1bd6:	fe e1       	ldi	r31, 0x1E	; 30
    1bd8:	fd a3       	std	Y+37, r31	; 0x25
    1bda:	eb a1       	ldd	r30, Y+35	; 0x23
    1bdc:	fc a1       	ldd	r31, Y+36	; 0x24
    1bde:	00 80       	ld	r0, Z
    1be0:	8b a1       	ldd	r24, Y+35	; 0x23
    1be2:	9c a1       	ldd	r25, Y+36	; 0x24
    1be4:	01 96       	adiw	r24, 0x01	; 1
    1be6:	9c a3       	std	Y+36, r25	; 0x24
    1be8:	8b a3       	std	Y+35, r24	; 0x23
    1bea:	e9 a1       	ldd	r30, Y+33	; 0x21
    1bec:	fa a1       	ldd	r31, Y+34	; 0x22
    1bee:	00 82       	st	Z, r0
    1bf0:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf2:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf4:	01 96       	adiw	r24, 0x01	; 1
    1bf6:	9a a3       	std	Y+34, r25	; 0x22
    1bf8:	89 a3       	std	Y+33, r24	; 0x21
    1bfa:	9d a1       	ldd	r25, Y+37	; 0x25
    1bfc:	91 50       	subi	r25, 0x01	; 1
    1bfe:	9d a3       	std	Y+37, r25	; 0x25
    1c00:	ed a1       	ldd	r30, Y+37	; 0x25
    1c02:	ee 23       	and	r30, r30
    1c04:	51 f7       	brne	.-44     	; 0x1bda <CreateFrame4+0x28>

	for(u8 row_iterator = 0; row_iterator < 2; row_iterator++)
    1c06:	1a 82       	std	Y+2, r1	; 0x02
    1c08:	2c c0       	rjmp	.+88     	; 0x1c62 <CreateFrame4+0xb0>
	{
		CLCD_voidGoToXY(row_iterator,0);
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	0e 94 34 13 	call	0x2668	; 0x2668 <CLCD_voidGoToXY>
		for(u8 column_iterator = 0; column_iterator < 16; column_iterator++)
    1c12:	19 82       	std	Y+1, r1	; 0x01
    1c14:	20 c0       	rjmp	.+64     	; 0x1c56 <CreateFrame4+0xa4>
		{
			CLCD_voidSendData(*(*(frame1 + row_iterator) + column_iterator));
    1c16:	ae 01       	movw	r20, r28
    1c18:	4d 5f       	subi	r20, 0xFD	; 253
    1c1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	c9 01       	movw	r24, r18
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	82 0f       	add	r24, r18
    1c2a:	93 1f       	adc	r25, r19
    1c2c:	9c 01       	movw	r18, r24
    1c2e:	22 0f       	add	r18, r18
    1c30:	33 1f       	adc	r19, r19
    1c32:	22 0f       	add	r18, r18
    1c34:	33 1f       	adc	r19, r19
    1c36:	28 0f       	add	r18, r24
    1c38:	39 1f       	adc	r19, r25
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	88 2f       	mov	r24, r24
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	82 0f       	add	r24, r18
    1c42:	93 1f       	adc	r25, r19
    1c44:	fa 01       	movw	r30, r20
    1c46:	e8 0f       	add	r30, r24
    1c48:	f9 1f       	adc	r31, r25
    1c4a:	80 81       	ld	r24, Z
    1c4c:	0e 94 6d 12 	call	0x24da	; 0x24da <CLCD_voidSendData>
	};

	for(u8 row_iterator = 0; row_iterator < 2; row_iterator++)
	{
		CLCD_voidGoToXY(row_iterator,0);
		for(u8 column_iterator = 0; column_iterator < 16; column_iterator++)
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	8f 5f       	subi	r24, 0xFF	; 255
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	80 31       	cpi	r24, 0x10	; 16
    1c5a:	e8 f2       	brcs	.-70     	; 0x1c16 <CreateFrame4+0x64>
	u8 frame1[][15] = {
		{'_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'},
		{'_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'},
	};

	for(u8 row_iterator = 0; row_iterator < 2; row_iterator++)
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	8f 5f       	subi	r24, 0xFF	; 255
    1c60:	8a 83       	std	Y+2, r24	; 0x02
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	82 30       	cpi	r24, 0x02	; 2
    1c66:	88 f2       	brcs	.-94     	; 0x1c0a <CreateFrame4+0x58>
		for(u8 column_iterator = 0; column_iterator < 16; column_iterator++)
		{
			CLCD_voidSendData(*(*(frame1 + row_iterator) + column_iterator));
		}
	}
}
    1c68:	a5 96       	adiw	r28, 0x25	; 37
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	cf 91       	pop	r28
    1c76:	df 91       	pop	r29
    1c78:	08 95       	ret

00001c7a <CreateFrame5>:


void CreateFrame5(void)
{
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	a5 97       	sbiw	r28, 0x25	; 37
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
	u8 frame1[][15] = {
		{'_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'},
		{'_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'},
	};
    1c8e:	ce 01       	movw	r24, r28
    1c90:	03 96       	adiw	r24, 0x03	; 3
    1c92:	9a a3       	std	Y+34, r25	; 0x22
    1c94:	89 a3       	std	Y+33, r24	; 0x21
    1c96:	e6 eb       	ldi	r30, 0xB6	; 182
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	fc a3       	std	Y+36, r31	; 0x24
    1c9c:	eb a3       	std	Y+35, r30	; 0x23
    1c9e:	fe e1       	ldi	r31, 0x1E	; 30
    1ca0:	fd a3       	std	Y+37, r31	; 0x25
    1ca2:	eb a1       	ldd	r30, Y+35	; 0x23
    1ca4:	fc a1       	ldd	r31, Y+36	; 0x24
    1ca6:	00 80       	ld	r0, Z
    1ca8:	8b a1       	ldd	r24, Y+35	; 0x23
    1caa:	9c a1       	ldd	r25, Y+36	; 0x24
    1cac:	01 96       	adiw	r24, 0x01	; 1
    1cae:	9c a3       	std	Y+36, r25	; 0x24
    1cb0:	8b a3       	std	Y+35, r24	; 0x23
    1cb2:	e9 a1       	ldd	r30, Y+33	; 0x21
    1cb4:	fa a1       	ldd	r31, Y+34	; 0x22
    1cb6:	00 82       	st	Z, r0
    1cb8:	89 a1       	ldd	r24, Y+33	; 0x21
    1cba:	9a a1       	ldd	r25, Y+34	; 0x22
    1cbc:	01 96       	adiw	r24, 0x01	; 1
    1cbe:	9a a3       	std	Y+34, r25	; 0x22
    1cc0:	89 a3       	std	Y+33, r24	; 0x21
    1cc2:	9d a1       	ldd	r25, Y+37	; 0x25
    1cc4:	91 50       	subi	r25, 0x01	; 1
    1cc6:	9d a3       	std	Y+37, r25	; 0x25
    1cc8:	ed a1       	ldd	r30, Y+37	; 0x25
    1cca:	ee 23       	and	r30, r30
    1ccc:	51 f7       	brne	.-44     	; 0x1ca2 <CreateFrame5+0x28>

	for(u8 row_iterator = 0; row_iterator < 2; row_iterator++)
    1cce:	1a 82       	std	Y+2, r1	; 0x02
    1cd0:	2c c0       	rjmp	.+88     	; 0x1d2a <CreateFrame5+0xb0>
	{
		CLCD_voidGoToXY(row_iterator,0);
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	60 e0       	ldi	r22, 0x00	; 0
    1cd6:	0e 94 34 13 	call	0x2668	; 0x2668 <CLCD_voidGoToXY>
		for(u8 column_iterator = 0; column_iterator < 16; column_iterator++)
    1cda:	19 82       	std	Y+1, r1	; 0x01
    1cdc:	20 c0       	rjmp	.+64     	; 0x1d1e <CreateFrame5+0xa4>
		{
			CLCD_voidSendData(*(*(frame1 + row_iterator) + column_iterator));
    1cde:	ae 01       	movw	r20, r28
    1ce0:	4d 5f       	subi	r20, 0xFD	; 253
    1ce2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	c9 01       	movw	r24, r18
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	82 0f       	add	r24, r18
    1cf2:	93 1f       	adc	r25, r19
    1cf4:	9c 01       	movw	r18, r24
    1cf6:	22 0f       	add	r18, r18
    1cf8:	33 1f       	adc	r19, r19
    1cfa:	22 0f       	add	r18, r18
    1cfc:	33 1f       	adc	r19, r19
    1cfe:	28 0f       	add	r18, r24
    1d00:	39 1f       	adc	r19, r25
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	88 2f       	mov	r24, r24
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	82 0f       	add	r24, r18
    1d0a:	93 1f       	adc	r25, r19
    1d0c:	fa 01       	movw	r30, r20
    1d0e:	e8 0f       	add	r30, r24
    1d10:	f9 1f       	adc	r31, r25
    1d12:	80 81       	ld	r24, Z
    1d14:	0e 94 6d 12 	call	0x24da	; 0x24da <CLCD_voidSendData>
	};

	for(u8 row_iterator = 0; row_iterator < 2; row_iterator++)
	{
		CLCD_voidGoToXY(row_iterator,0);
		for(u8 column_iterator = 0; column_iterator < 16; column_iterator++)
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	8f 5f       	subi	r24, 0xFF	; 255
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	80 31       	cpi	r24, 0x10	; 16
    1d22:	e8 f2       	brcs	.-70     	; 0x1cde <CreateFrame5+0x64>
	u8 frame1[][15] = {
		{'_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'},
		{'_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_'},
	};

	for(u8 row_iterator = 0; row_iterator < 2; row_iterator++)
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	8f 5f       	subi	r24, 0xFF	; 255
    1d28:	8a 83       	std	Y+2, r24	; 0x02
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	82 30       	cpi	r24, 0x02	; 2
    1d2e:	88 f2       	brcs	.-94     	; 0x1cd2 <CreateFrame5+0x58>
		for(u8 column_iterator = 0; column_iterator < 16; column_iterator++)
		{
			CLCD_voidSendData(*(*(frame1 + row_iterator) + column_iterator));
		}
	}
}
    1d30:	a5 96       	adiw	r28, 0x25	; 37
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <HKPD_voidKBPInit>:
#include "../../2-Kpad/include/Kpad_Prv.h"
#include "../../2-Kpad/include/Kpad_Cfg.h"
#include "util/delay.h"

void HKPD_voidKBPInit (void)
{
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
	MDIO_VidSetPinDirection(KPD_ROW_PORT,Row_0_Pin,Pin_Output) ;
    1d4a:	82 e0       	ldi	r24, 0x02	; 2
    1d4c:	65 e0       	ldi	r22, 0x05	; 5
    1d4e:	41 e0       	ldi	r20, 0x01	; 1
    1d50:	0e 94 04 14 	call	0x2808	; 0x2808 <MDIO_VidSetPinDirection>
	MDIO_VidSetPinDirection(KPD_ROW_PORT,Row_1_Pin,Pin_Output) ;
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	64 e0       	ldi	r22, 0x04	; 4
    1d58:	41 e0       	ldi	r20, 0x01	; 1
    1d5a:	0e 94 04 14 	call	0x2808	; 0x2808 <MDIO_VidSetPinDirection>
	MDIO_VidSetPinDirection(KPD_ROW_PORT,Row_2_Pin,Pin_Output) ;
    1d5e:	82 e0       	ldi	r24, 0x02	; 2
    1d60:	63 e0       	ldi	r22, 0x03	; 3
    1d62:	41 e0       	ldi	r20, 0x01	; 1
    1d64:	0e 94 04 14 	call	0x2808	; 0x2808 <MDIO_VidSetPinDirection>
	MDIO_VidSetPinDirection(KPD_ROW_PORT,Row_3_Pin,Pin_Output) ;
    1d68:	82 e0       	ldi	r24, 0x02	; 2
    1d6a:	62 e0       	ldi	r22, 0x02	; 2
    1d6c:	41 e0       	ldi	r20, 0x01	; 1
    1d6e:	0e 94 04 14 	call	0x2808	; 0x2808 <MDIO_VidSetPinDirection>


	MDIO_VidSetPinDirection(KPD_COL_PORT,Col_0_Pin,Pin_Input) ;
    1d72:	83 e0       	ldi	r24, 0x03	; 3
    1d74:	67 e0       	ldi	r22, 0x07	; 7
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	0e 94 04 14 	call	0x2808	; 0x2808 <MDIO_VidSetPinDirection>
	MDIO_VidSetPinDirection(KPD_COL_PORT,Col_1_Pin,Pin_Input) ;
    1d7c:	83 e0       	ldi	r24, 0x03	; 3
    1d7e:	66 e0       	ldi	r22, 0x06	; 6
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	0e 94 04 14 	call	0x2808	; 0x2808 <MDIO_VidSetPinDirection>
	MDIO_VidSetPinDirection(KPD_COL_PORT,Col_2_Pin,Pin_Input) ;
    1d86:	83 e0       	ldi	r24, 0x03	; 3
    1d88:	65 e0       	ldi	r22, 0x05	; 5
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	0e 94 04 14 	call	0x2808	; 0x2808 <MDIO_VidSetPinDirection>
	MDIO_VidSetPinDirection(KPD_COL_PORT,Col_3_Pin,Pin_Input) ;
    1d90:	83 e0       	ldi	r24, 0x03	; 3
    1d92:	64 e0       	ldi	r22, 0x04	; 4
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	0e 94 04 14 	call	0x2808	; 0x2808 <MDIO_VidSetPinDirection>

}
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <HKPD_u8GetPressedKey>:




u8 HKPD_u8GetPressedKey(void)
{
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	6b 97       	sbiw	r28, 0x1b	; 27
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
    u8 Col_State = 1;            // Initialize Col_State to 1 (assuming all columns are pulled high)
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	8a 8b       	std	Y+18, r24	; 0x12
    u8 Col_arr[] = {Col_0_Pin, Col_1_Pin, Col_2_Pin, Col_3_Pin};
    1db8:	87 e0       	ldi	r24, 0x07	; 7
    1dba:	8b 8b       	std	Y+19, r24	; 0x13
    1dbc:	86 e0       	ldi	r24, 0x06	; 6
    1dbe:	8c 8b       	std	Y+20, r24	; 0x14
    1dc0:	85 e0       	ldi	r24, 0x05	; 5
    1dc2:	8d 8b       	std	Y+21, r24	; 0x15
    1dc4:	84 e0       	ldi	r24, 0x04	; 4
    1dc6:	8e 8b       	std	Y+22, r24	; 0x16
    u8 Row_arr[] = {Row_0_Pin, Row_1_Pin, Row_2_Pin, Row_3_Pin};
    1dc8:	85 e0       	ldi	r24, 0x05	; 5
    1dca:	8f 8b       	std	Y+23, r24	; 0x17
    1dcc:	84 e0       	ldi	r24, 0x04	; 4
    1dce:	88 8f       	std	Y+24, r24	; 0x18
    1dd0:	83 e0       	ldi	r24, 0x03	; 3
    1dd2:	89 8f       	std	Y+25, r24	; 0x19
    1dd4:	82 e0       	ldi	r24, 0x02	; 2
    1dd6:	8a 8f       	std	Y+26, r24	; 0x1a
    u8 kay;
    for (u8 Row = 0; Row < 4; Row++)
    1dd8:	18 8a       	std	Y+16, r1	; 0x10
    1dda:	ed c0       	rjmp	.+474    	; 0x1fb6 <HKPD_u8GetPressedKey+0x216>
    {
        // Set the current row pin low (activate the row)
        MDIO_VidSetPinValue(KPD_ROW_PORT, Row_arr[Row], Pin_Low);
    1ddc:	88 89       	ldd	r24, Y+16	; 0x10
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	ce 01       	movw	r24, r28
    1de4:	47 96       	adiw	r24, 0x17	; 23
    1de6:	fc 01       	movw	r30, r24
    1de8:	e2 0f       	add	r30, r18
    1dea:	f3 1f       	adc	r31, r19
    1dec:	90 81       	ld	r25, Z
    1dee:	82 e0       	ldi	r24, 0x02	; 2
    1df0:	69 2f       	mov	r22, r25
    1df2:	40 e0       	ldi	r20, 0x00	; 0
    1df4:	0e 94 04 15 	call	0x2a08	; 0x2a08 <MDIO_VidSetPinValue>

        for (u8 Col = 0; Col < 4; Col++)
    1df8:	1f 86       	std	Y+15, r1	; 0x0f
    1dfa:	c8 c0       	rjmp	.+400    	; 0x1f8c <HKPD_u8GetPressedKey+0x1ec>
        {
            // Read the state of the current column
        	MDIO_VidGetPinValue(KPD_COL_PORT, Col_arr[Col], &Col_State);
    1dfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	ce 01       	movw	r24, r28
    1e04:	43 96       	adiw	r24, 0x13	; 19
    1e06:	fc 01       	movw	r30, r24
    1e08:	e2 0f       	add	r30, r18
    1e0a:	f3 1f       	adc	r31, r19
    1e0c:	90 81       	ld	r25, Z
    1e0e:	9e 01       	movw	r18, r28
    1e10:	2e 5e       	subi	r18, 0xEE	; 238
    1e12:	3f 4f       	sbci	r19, 0xFF	; 255
    1e14:	83 e0       	ldi	r24, 0x03	; 3
    1e16:	69 2f       	mov	r22, r25
    1e18:	a9 01       	movw	r20, r18
    1e1a:	0e 94 04 16 	call	0x2c08	; 0x2c08 <MDIO_VidGetPinValue>

            if (Col_State == 0)
    1e1e:	8a 89       	ldd	r24, Y+18	; 0x12
    1e20:	88 23       	and	r24, r24
    1e22:	09 f0       	breq	.+2      	; 0x1e26 <HKPD_u8GetPressedKey+0x86>
    1e24:	b0 c0       	rjmp	.+352    	; 0x1f86 <HKPD_u8GetPressedKey+0x1e6>
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	a8 e4       	ldi	r26, 0x48	; 72
    1e2c:	b2 e4       	ldi	r27, 0x42	; 66
    1e2e:	8b 87       	std	Y+11, r24	; 0x0b
    1e30:	9c 87       	std	Y+12, r25	; 0x0c
    1e32:	ad 87       	std	Y+13, r26	; 0x0d
    1e34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	4a ef       	ldi	r20, 0xFA	; 250
    1e44:	54 e4       	ldi	r21, 0x44	; 68
    1e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	8f 83       	std	Y+7, r24	; 0x07
    1e50:	98 87       	std	Y+8, r25	; 0x08
    1e52:	a9 87       	std	Y+9, r26	; 0x09
    1e54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e56:	6f 81       	ldd	r22, Y+7	; 0x07
    1e58:	78 85       	ldd	r23, Y+8	; 0x08
    1e5a:	89 85       	ldd	r24, Y+9	; 0x09
    1e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e8       	ldi	r20, 0x80	; 128
    1e64:	5f e3       	ldi	r21, 0x3F	; 63
    1e66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e6a:	88 23       	and	r24, r24
    1e6c:	2c f4       	brge	.+10     	; 0x1e78 <HKPD_u8GetPressedKey+0xd8>
		__ticks = 1;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	9e 83       	std	Y+6, r25	; 0x06
    1e74:	8d 83       	std	Y+5, r24	; 0x05
    1e76:	3f c0       	rjmp	.+126    	; 0x1ef6 <HKPD_u8GetPressedKey+0x156>
	else if (__tmp > 65535)
    1e78:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7a:	78 85       	ldd	r23, Y+8	; 0x08
    1e7c:	89 85       	ldd	r24, Y+9	; 0x09
    1e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	3f ef       	ldi	r19, 0xFF	; 255
    1e84:	4f e7       	ldi	r20, 0x7F	; 127
    1e86:	57 e4       	ldi	r21, 0x47	; 71
    1e88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e8c:	18 16       	cp	r1, r24
    1e8e:	4c f5       	brge	.+82     	; 0x1ee2 <HKPD_u8GetPressedKey+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e2       	ldi	r20, 0x20	; 32
    1e9e:	51 e4       	ldi	r21, 0x41	; 65
    1ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	bc 01       	movw	r22, r24
    1eaa:	cd 01       	movw	r24, r26
    1eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	9e 83       	std	Y+6, r25	; 0x06
    1eb6:	8d 83       	std	Y+5, r24	; 0x05
    1eb8:	0f c0       	rjmp	.+30     	; 0x1ed8 <HKPD_u8GetPressedKey+0x138>
    1eba:	88 ec       	ldi	r24, 0xC8	; 200
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9c 83       	std	Y+4, r25	; 0x04
    1ec0:	8b 83       	std	Y+3, r24	; 0x03
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <HKPD_u8GetPressedKey+0x126>
    1eca:	9c 83       	std	Y+4, r25	; 0x04
    1ecc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ece:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	9e 83       	std	Y+6, r25	; 0x06
    1ed6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eda:	9e 81       	ldd	r25, Y+6	; 0x06
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	69 f7       	brne	.-38     	; 0x1eba <HKPD_u8GetPressedKey+0x11a>
    1ee0:	14 c0       	rjmp	.+40     	; 0x1f0a <HKPD_u8GetPressedKey+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee4:	78 85       	ldd	r23, Y+8	; 0x08
    1ee6:	89 85       	ldd	r24, Y+9	; 0x09
    1ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
    1ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    1efa:	9a 83       	std	Y+2, r25	; 0x02
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	9a 81       	ldd	r25, Y+2	; 0x02
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <HKPD_u8GetPressedKey+0x162>
    1f06:	9a 83       	std	Y+2, r25	; 0x02
    1f08:	89 83       	std	Y+1, r24	; 0x01
            {
                // Debouncing and single press logic
                _delay_ms(50); // Debounce delay (adjust as needed)

                // Check the column state again after debounce
                MDIO_VidGetPinValue(KPD_COL_PORT, Col_arr[Col], &Col_State);
    1f0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	ce 01       	movw	r24, r28
    1f12:	43 96       	adiw	r24, 0x13	; 19
    1f14:	fc 01       	movw	r30, r24
    1f16:	e2 0f       	add	r30, r18
    1f18:	f3 1f       	adc	r31, r19
    1f1a:	90 81       	ld	r25, Z
    1f1c:	9e 01       	movw	r18, r28
    1f1e:	2e 5e       	subi	r18, 0xEE	; 238
    1f20:	3f 4f       	sbci	r19, 0xFF	; 255
    1f22:	83 e0       	ldi	r24, 0x03	; 3
    1f24:	69 2f       	mov	r22, r25
    1f26:	a9 01       	movw	r20, r18
    1f28:	0e 94 04 16 	call	0x2c08	; 0x2c08 <MDIO_VidGetPinValue>

                if (Col_State == 0)
    1f2c:	8a 89       	ldd	r24, Y+18	; 0x12
    1f2e:	88 23       	and	r24, r24
    1f30:	51 f5       	brne	.+84     	; 0x1f86 <HKPD_u8GetPressedKey+0x1e6>
                {
                    // Key pressed, map and return the key
                	MDIO_VidSetPinValue(KPD_ROW_PORT, Row_arr[Row], Pin_High);
    1f32:	88 89       	ldd	r24, Y+16	; 0x10
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	ce 01       	movw	r24, r28
    1f3a:	47 96       	adiw	r24, 0x17	; 23
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	e2 0f       	add	r30, r18
    1f40:	f3 1f       	adc	r31, r19
    1f42:	90 81       	ld	r25, Z
    1f44:	82 e0       	ldi	r24, 0x02	; 2
    1f46:	69 2f       	mov	r22, r25
    1f48:	41 e0       	ldi	r20, 0x01	; 1
    1f4a:	0e 94 04 15 	call	0x2a08	; 0x2a08 <MDIO_VidSetPinValue>
                	kay=KayPad_arr[Row][Col];
    1f4e:	88 89       	ldd	r24, Y+16	; 0x10
    1f50:	48 2f       	mov	r20, r24
    1f52:	50 e0       	ldi	r21, 0x00	; 0
    1f54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f56:	28 2f       	mov	r18, r24
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	ca 01       	movw	r24, r20
    1f5c:	88 0f       	add	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	82 0f       	add	r24, r18
    1f66:	93 1f       	adc	r25, r19
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	fc 01       	movw	r30, r24
    1f72:	ec 52       	subi	r30, 0x2C	; 44
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	80 81       	ld	r24, Z
    1f78:	91 81       	ldd	r25, Z+1	; 0x01
    1f7a:	a2 81       	ldd	r26, Z+2	; 0x02
    1f7c:	b3 81       	ldd	r27, Z+3	; 0x03
    1f7e:	89 8b       	std	Y+17, r24	; 0x11
                    return kay;
    1f80:	89 89       	ldd	r24, Y+17	; 0x11
    1f82:	8b 8f       	std	Y+27, r24	; 0x1b
    1f84:	1e c0       	rjmp	.+60     	; 0x1fc2 <HKPD_u8GetPressedKey+0x222>
    for (u8 Row = 0; Row < 4; Row++)
    {
        // Set the current row pin low (activate the row)
        MDIO_VidSetPinValue(KPD_ROW_PORT, Row_arr[Row], Pin_Low);

        for (u8 Col = 0; Col < 4; Col++)
    1f86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f88:	8f 5f       	subi	r24, 0xFF	; 255
    1f8a:	8f 87       	std	Y+15, r24	; 0x0f
    1f8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f8e:	84 30       	cpi	r24, 0x04	; 4
    1f90:	08 f4       	brcc	.+2      	; 0x1f94 <HKPD_u8GetPressedKey+0x1f4>
    1f92:	34 cf       	rjmp	.-408    	; 0x1dfc <HKPD_u8GetPressedKey+0x5c>
                }
            }
        }

        // Deactivate the row before moving to the next row
        MDIO_VidSetPinValue(KPD_ROW_PORT, Row_arr[Row], Pin_High);
    1f94:	88 89       	ldd	r24, Y+16	; 0x10
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	ce 01       	movw	r24, r28
    1f9c:	47 96       	adiw	r24, 0x17	; 23
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	e2 0f       	add	r30, r18
    1fa2:	f3 1f       	adc	r31, r19
    1fa4:	90 81       	ld	r25, Z
    1fa6:	82 e0       	ldi	r24, 0x02	; 2
    1fa8:	69 2f       	mov	r22, r25
    1faa:	41 e0       	ldi	r20, 0x01	; 1
    1fac:	0e 94 04 15 	call	0x2a08	; 0x2a08 <MDIO_VidSetPinValue>
{
    u8 Col_State = 1;            // Initialize Col_State to 1 (assuming all columns are pulled high)
    u8 Col_arr[] = {Col_0_Pin, Col_1_Pin, Col_2_Pin, Col_3_Pin};
    u8 Row_arr[] = {Row_0_Pin, Row_1_Pin, Row_2_Pin, Row_3_Pin};
    u8 kay;
    for (u8 Row = 0; Row < 4; Row++)
    1fb0:	88 89       	ldd	r24, Y+16	; 0x10
    1fb2:	8f 5f       	subi	r24, 0xFF	; 255
    1fb4:	88 8b       	std	Y+16, r24	; 0x10
    1fb6:	88 89       	ldd	r24, Y+16	; 0x10
    1fb8:	84 30       	cpi	r24, 0x04	; 4
    1fba:	08 f4       	brcc	.+2      	; 0x1fbe <HKPD_u8GetPressedKey+0x21e>
    1fbc:	0f cf       	rjmp	.-482    	; 0x1ddc <HKPD_u8GetPressedKey+0x3c>
        // Deactivate the row before moving to the next row
        MDIO_VidSetPinValue(KPD_ROW_PORT, Row_arr[Row], Pin_High);
    }

    // No key was pressed
    return kay;
    1fbe:	89 89       	ldd	r24, Y+17	; 0x11
    1fc0:	8b 8f       	std	Y+27, r24	; 0x1b
    1fc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
}
    1fc4:	6b 96       	adiw	r28, 0x1b	; 27
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <CLCD_VoidInit>:
#include "util/delay.h"
#include "../1-LCD/lcd_prv.h"
#include "../1-LCD/LCD.h"
#include "../1-LCD/LCD_cfg.h"

void CLCD_VoidInit(void){
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	e8 97       	sbiw	r28, 0x38	; 56
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	a8 ef       	ldi	r26, 0xF8	; 248
    1ff0:	b1 e4       	ldi	r27, 0x41	; 65
    1ff2:	8d ab       	std	Y+53, r24	; 0x35
    1ff4:	9e ab       	std	Y+54, r25	; 0x36
    1ff6:	af ab       	std	Y+55, r26	; 0x37
    1ff8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffa:	6d a9       	ldd	r22, Y+53	; 0x35
    1ffc:	7e a9       	ldd	r23, Y+54	; 0x36
    1ffe:	8f a9       	ldd	r24, Y+55	; 0x37
    2000:	98 ad       	ldd	r25, Y+56	; 0x38
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	4a ef       	ldi	r20, 0xFA	; 250
    2008:	54 e4       	ldi	r21, 0x44	; 68
    200a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	89 ab       	std	Y+49, r24	; 0x31
    2014:	9a ab       	std	Y+50, r25	; 0x32
    2016:	ab ab       	std	Y+51, r26	; 0x33
    2018:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    201a:	69 a9       	ldd	r22, Y+49	; 0x31
    201c:	7a a9       	ldd	r23, Y+50	; 0x32
    201e:	8b a9       	ldd	r24, Y+51	; 0x33
    2020:	9c a9       	ldd	r25, Y+52	; 0x34
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e8       	ldi	r20, 0x80	; 128
    2028:	5f e3       	ldi	r21, 0x3F	; 63
    202a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    202e:	88 23       	and	r24, r24
    2030:	2c f4       	brge	.+10     	; 0x203c <CLCD_VoidInit+0x66>
		__ticks = 1;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	98 ab       	std	Y+48, r25	; 0x30
    2038:	8f a7       	std	Y+47, r24	; 0x2f
    203a:	3f c0       	rjmp	.+126    	; 0x20ba <CLCD_VoidInit+0xe4>
	else if (__tmp > 65535)
    203c:	69 a9       	ldd	r22, Y+49	; 0x31
    203e:	7a a9       	ldd	r23, Y+50	; 0x32
    2040:	8b a9       	ldd	r24, Y+51	; 0x33
    2042:	9c a9       	ldd	r25, Y+52	; 0x34
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	3f ef       	ldi	r19, 0xFF	; 255
    2048:	4f e7       	ldi	r20, 0x7F	; 127
    204a:	57 e4       	ldi	r21, 0x47	; 71
    204c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2050:	18 16       	cp	r1, r24
    2052:	4c f5       	brge	.+82     	; 0x20a6 <CLCD_VoidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2054:	6d a9       	ldd	r22, Y+53	; 0x35
    2056:	7e a9       	ldd	r23, Y+54	; 0x36
    2058:	8f a9       	ldd	r24, Y+55	; 0x37
    205a:	98 ad       	ldd	r25, Y+56	; 0x38
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e2       	ldi	r20, 0x20	; 32
    2062:	51 e4       	ldi	r21, 0x41	; 65
    2064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	bc 01       	movw	r22, r24
    206e:	cd 01       	movw	r24, r26
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	98 ab       	std	Y+48, r25	; 0x30
    207a:	8f a7       	std	Y+47, r24	; 0x2f
    207c:	0f c0       	rjmp	.+30     	; 0x209c <CLCD_VoidInit+0xc6>
    207e:	88 ec       	ldi	r24, 0xC8	; 200
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	9e a7       	std	Y+46, r25	; 0x2e
    2084:	8d a7       	std	Y+45, r24	; 0x2d
    2086:	8d a5       	ldd	r24, Y+45	; 0x2d
    2088:	9e a5       	ldd	r25, Y+46	; 0x2e
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <CLCD_VoidInit+0xb4>
    208e:	9e a7       	std	Y+46, r25	; 0x2e
    2090:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2092:	8f a5       	ldd	r24, Y+47	; 0x2f
    2094:	98 a9       	ldd	r25, Y+48	; 0x30
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	98 ab       	std	Y+48, r25	; 0x30
    209a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209c:	8f a5       	ldd	r24, Y+47	; 0x2f
    209e:	98 a9       	ldd	r25, Y+48	; 0x30
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	69 f7       	brne	.-38     	; 0x207e <CLCD_VoidInit+0xa8>
    20a4:	14 c0       	rjmp	.+40     	; 0x20ce <CLCD_VoidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a6:	69 a9       	ldd	r22, Y+49	; 0x31
    20a8:	7a a9       	ldd	r23, Y+50	; 0x32
    20aa:	8b a9       	ldd	r24, Y+51	; 0x33
    20ac:	9c a9       	ldd	r25, Y+52	; 0x34
    20ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	98 ab       	std	Y+48, r25	; 0x30
    20b8:	8f a7       	std	Y+47, r24	; 0x2f
    20ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    20bc:	98 a9       	ldd	r25, Y+48	; 0x30
    20be:	9c a7       	std	Y+44, r25	; 0x2c
    20c0:	8b a7       	std	Y+43, r24	; 0x2b
    20c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    20c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <CLCD_VoidInit+0xf0>
    20ca:	9c a7       	std	Y+44, r25	; 0x2c
    20cc:	8b a7       	std	Y+43, r24	; 0x2b
/* Wait for more than 30ms*/
_delay_ms(31);
/* Function Set Command 2Lines ,5*8 Size */
CLCD_voidSendCommand(SET_FUNCTION_8BIT_5x8_TwoLine);
    20ce:	88 e3       	ldi	r24, 0x38	; 56
    20d0:	0e 94 cf 11 	call	0x239e	; 0x239e <CLCD_voidSendCommand>
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	a0 e8       	ldi	r26, 0x80	; 128
    20da:	bf e3       	ldi	r27, 0x3F	; 63
    20dc:	8f a3       	std	Y+39, r24	; 0x27
    20de:	98 a7       	std	Y+40, r25	; 0x28
    20e0:	a9 a7       	std	Y+41, r26	; 0x29
    20e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e4:	6f a1       	ldd	r22, Y+39	; 0x27
    20e6:	78 a5       	ldd	r23, Y+40	; 0x28
    20e8:	89 a5       	ldd	r24, Y+41	; 0x29
    20ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	4a ef       	ldi	r20, 0xFA	; 250
    20f2:	54 e4       	ldi	r21, 0x44	; 68
    20f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	8b a3       	std	Y+35, r24	; 0x23
    20fe:	9c a3       	std	Y+36, r25	; 0x24
    2100:	ad a3       	std	Y+37, r26	; 0x25
    2102:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2104:	6b a1       	ldd	r22, Y+35	; 0x23
    2106:	7c a1       	ldd	r23, Y+36	; 0x24
    2108:	8d a1       	ldd	r24, Y+37	; 0x25
    210a:	9e a1       	ldd	r25, Y+38	; 0x26
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e8       	ldi	r20, 0x80	; 128
    2112:	5f e3       	ldi	r21, 0x3F	; 63
    2114:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2118:	88 23       	and	r24, r24
    211a:	2c f4       	brge	.+10     	; 0x2126 <CLCD_VoidInit+0x150>
		__ticks = 1;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9a a3       	std	Y+34, r25	; 0x22
    2122:	89 a3       	std	Y+33, r24	; 0x21
    2124:	3f c0       	rjmp	.+126    	; 0x21a4 <CLCD_VoidInit+0x1ce>
	else if (__tmp > 65535)
    2126:	6b a1       	ldd	r22, Y+35	; 0x23
    2128:	7c a1       	ldd	r23, Y+36	; 0x24
    212a:	8d a1       	ldd	r24, Y+37	; 0x25
    212c:	9e a1       	ldd	r25, Y+38	; 0x26
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	3f ef       	ldi	r19, 0xFF	; 255
    2132:	4f e7       	ldi	r20, 0x7F	; 127
    2134:	57 e4       	ldi	r21, 0x47	; 71
    2136:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    213a:	18 16       	cp	r1, r24
    213c:	4c f5       	brge	.+82     	; 0x2190 <CLCD_VoidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213e:	6f a1       	ldd	r22, Y+39	; 0x27
    2140:	78 a5       	ldd	r23, Y+40	; 0x28
    2142:	89 a5       	ldd	r24, Y+41	; 0x29
    2144:	9a a5       	ldd	r25, Y+42	; 0x2a
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e2       	ldi	r20, 0x20	; 32
    214c:	51 e4       	ldi	r21, 0x41	; 65
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9a a3       	std	Y+34, r25	; 0x22
    2164:	89 a3       	std	Y+33, r24	; 0x21
    2166:	0f c0       	rjmp	.+30     	; 0x2186 <CLCD_VoidInit+0x1b0>
    2168:	88 ec       	ldi	r24, 0xC8	; 200
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	98 a3       	std	Y+32, r25	; 0x20
    216e:	8f 8f       	std	Y+31, r24	; 0x1f
    2170:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2172:	98 a1       	ldd	r25, Y+32	; 0x20
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <CLCD_VoidInit+0x19e>
    2178:	98 a3       	std	Y+32, r25	; 0x20
    217a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217c:	89 a1       	ldd	r24, Y+33	; 0x21
    217e:	9a a1       	ldd	r25, Y+34	; 0x22
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	9a a3       	std	Y+34, r25	; 0x22
    2184:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2186:	89 a1       	ldd	r24, Y+33	; 0x21
    2188:	9a a1       	ldd	r25, Y+34	; 0x22
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	69 f7       	brne	.-38     	; 0x2168 <CLCD_VoidInit+0x192>
    218e:	14 c0       	rjmp	.+40     	; 0x21b8 <CLCD_VoidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2190:	6b a1       	ldd	r22, Y+35	; 0x23
    2192:	7c a1       	ldd	r23, Y+36	; 0x24
    2194:	8d a1       	ldd	r24, Y+37	; 0x25
    2196:	9e a1       	ldd	r25, Y+38	; 0x26
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9a a3       	std	Y+34, r25	; 0x22
    21a2:	89 a3       	std	Y+33, r24	; 0x21
    21a4:	89 a1       	ldd	r24, Y+33	; 0x21
    21a6:	9a a1       	ldd	r25, Y+34	; 0x22
    21a8:	9e 8f       	std	Y+30, r25	; 0x1e
    21aa:	8d 8f       	std	Y+29, r24	; 0x1d
    21ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <CLCD_VoidInit+0x1da>
    21b4:	9e 8f       	std	Y+30, r25	; 0x1e
    21b6:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(1);
/* Display_On_Off_Control : Display Enable */
CLCD_voidSendCommand(Display_On_Off_Control);
    21b8:	8c e0       	ldi	r24, 0x0C	; 12
    21ba:	0e 94 cf 11 	call	0x239e	; 0x239e <CLCD_voidSendCommand>
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	a0 e8       	ldi	r26, 0x80	; 128
    21c4:	bf e3       	ldi	r27, 0x3F	; 63
    21c6:	89 8f       	std	Y+25, r24	; 0x19
    21c8:	9a 8f       	std	Y+26, r25	; 0x1a
    21ca:	ab 8f       	std	Y+27, r26	; 0x1b
    21cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ce:	69 8d       	ldd	r22, Y+25	; 0x19
    21d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	4a ef       	ldi	r20, 0xFA	; 250
    21dc:	54 e4       	ldi	r21, 0x44	; 68
    21de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	8d 8b       	std	Y+21, r24	; 0x15
    21e8:	9e 8b       	std	Y+22, r25	; 0x16
    21ea:	af 8b       	std	Y+23, r26	; 0x17
    21ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21ee:	6d 89       	ldd	r22, Y+21	; 0x15
    21f0:	7e 89       	ldd	r23, Y+22	; 0x16
    21f2:	8f 89       	ldd	r24, Y+23	; 0x17
    21f4:	98 8d       	ldd	r25, Y+24	; 0x18
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e8       	ldi	r20, 0x80	; 128
    21fc:	5f e3       	ldi	r21, 0x3F	; 63
    21fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2202:	88 23       	and	r24, r24
    2204:	2c f4       	brge	.+10     	; 0x2210 <CLCD_VoidInit+0x23a>
		__ticks = 1;
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	9c 8b       	std	Y+20, r25	; 0x14
    220c:	8b 8b       	std	Y+19, r24	; 0x13
    220e:	3f c0       	rjmp	.+126    	; 0x228e <CLCD_VoidInit+0x2b8>
	else if (__tmp > 65535)
    2210:	6d 89       	ldd	r22, Y+21	; 0x15
    2212:	7e 89       	ldd	r23, Y+22	; 0x16
    2214:	8f 89       	ldd	r24, Y+23	; 0x17
    2216:	98 8d       	ldd	r25, Y+24	; 0x18
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	3f ef       	ldi	r19, 0xFF	; 255
    221c:	4f e7       	ldi	r20, 0x7F	; 127
    221e:	57 e4       	ldi	r21, 0x47	; 71
    2220:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2224:	18 16       	cp	r1, r24
    2226:	4c f5       	brge	.+82     	; 0x227a <CLCD_VoidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2228:	69 8d       	ldd	r22, Y+25	; 0x19
    222a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    222c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    222e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e2       	ldi	r20, 0x20	; 32
    2236:	51 e4       	ldi	r21, 0x41	; 65
    2238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	bc 01       	movw	r22, r24
    2242:	cd 01       	movw	r24, r26
    2244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	9c 8b       	std	Y+20, r25	; 0x14
    224e:	8b 8b       	std	Y+19, r24	; 0x13
    2250:	0f c0       	rjmp	.+30     	; 0x2270 <CLCD_VoidInit+0x29a>
    2252:	88 ec       	ldi	r24, 0xC8	; 200
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	9a 8b       	std	Y+18, r25	; 0x12
    2258:	89 8b       	std	Y+17, r24	; 0x11
    225a:	89 89       	ldd	r24, Y+17	; 0x11
    225c:	9a 89       	ldd	r25, Y+18	; 0x12
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <CLCD_VoidInit+0x288>
    2262:	9a 8b       	std	Y+18, r25	; 0x12
    2264:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2266:	8b 89       	ldd	r24, Y+19	; 0x13
    2268:	9c 89       	ldd	r25, Y+20	; 0x14
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	9c 8b       	std	Y+20, r25	; 0x14
    226e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2270:	8b 89       	ldd	r24, Y+19	; 0x13
    2272:	9c 89       	ldd	r25, Y+20	; 0x14
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	69 f7       	brne	.-38     	; 0x2252 <CLCD_VoidInit+0x27c>
    2278:	14 c0       	rjmp	.+40     	; 0x22a2 <CLCD_VoidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227a:	6d 89       	ldd	r22, Y+21	; 0x15
    227c:	7e 89       	ldd	r23, Y+22	; 0x16
    227e:	8f 89       	ldd	r24, Y+23	; 0x17
    2280:	98 8d       	ldd	r25, Y+24	; 0x18
    2282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	9c 8b       	std	Y+20, r25	; 0x14
    228c:	8b 8b       	std	Y+19, r24	; 0x13
    228e:	8b 89       	ldd	r24, Y+19	; 0x13
    2290:	9c 89       	ldd	r25, Y+20	; 0x14
    2292:	98 8b       	std	Y+16, r25	; 0x10
    2294:	8f 87       	std	Y+15, r24	; 0x0f
    2296:	8f 85       	ldd	r24, Y+15	; 0x0f
    2298:	98 89       	ldd	r25, Y+16	; 0x10
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	f1 f7       	brne	.-4      	; 0x229a <CLCD_VoidInit+0x2c4>
    229e:	98 8b       	std	Y+16, r25	; 0x10
    22a0:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(1);
/* Clear Display */
CLCD_voidSendCommand(Display_clear);
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	0e 94 cf 11 	call	0x239e	; 0x239e <CLCD_voidSendCommand>
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	a0 e8       	ldi	r26, 0x80	; 128
    22ae:	bf e3       	ldi	r27, 0x3F	; 63
    22b0:	8b 87       	std	Y+11, r24	; 0x0b
    22b2:	9c 87       	std	Y+12, r25	; 0x0c
    22b4:	ad 87       	std	Y+13, r26	; 0x0d
    22b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    22bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22be:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	4a ef       	ldi	r20, 0xFA	; 250
    22c6:	54 e4       	ldi	r21, 0x44	; 68
    22c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	8f 83       	std	Y+7, r24	; 0x07
    22d2:	98 87       	std	Y+8, r25	; 0x08
    22d4:	a9 87       	std	Y+9, r26	; 0x09
    22d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22d8:	6f 81       	ldd	r22, Y+7	; 0x07
    22da:	78 85       	ldd	r23, Y+8	; 0x08
    22dc:	89 85       	ldd	r24, Y+9	; 0x09
    22de:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e8       	ldi	r20, 0x80	; 128
    22e6:	5f e3       	ldi	r21, 0x3F	; 63
    22e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ec:	88 23       	and	r24, r24
    22ee:	2c f4       	brge	.+10     	; 0x22fa <CLCD_VoidInit+0x324>
		__ticks = 1;
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	9e 83       	std	Y+6, r25	; 0x06
    22f6:	8d 83       	std	Y+5, r24	; 0x05
    22f8:	3f c0       	rjmp	.+126    	; 0x2378 <CLCD_VoidInit+0x3a2>
	else if (__tmp > 65535)
    22fa:	6f 81       	ldd	r22, Y+7	; 0x07
    22fc:	78 85       	ldd	r23, Y+8	; 0x08
    22fe:	89 85       	ldd	r24, Y+9	; 0x09
    2300:	9a 85       	ldd	r25, Y+10	; 0x0a
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	3f ef       	ldi	r19, 0xFF	; 255
    2306:	4f e7       	ldi	r20, 0x7F	; 127
    2308:	57 e4       	ldi	r21, 0x47	; 71
    230a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    230e:	18 16       	cp	r1, r24
    2310:	4c f5       	brge	.+82     	; 0x2364 <CLCD_VoidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2312:	6b 85       	ldd	r22, Y+11	; 0x0b
    2314:	7c 85       	ldd	r23, Y+12	; 0x0c
    2316:	8d 85       	ldd	r24, Y+13	; 0x0d
    2318:	9e 85       	ldd	r25, Y+14	; 0x0e
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e2       	ldi	r20, 0x20	; 32
    2320:	51 e4       	ldi	r21, 0x41	; 65
    2322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	bc 01       	movw	r22, r24
    232c:	cd 01       	movw	r24, r26
    232e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	9e 83       	std	Y+6, r25	; 0x06
    2338:	8d 83       	std	Y+5, r24	; 0x05
    233a:	0f c0       	rjmp	.+30     	; 0x235a <CLCD_VoidInit+0x384>
    233c:	88 ec       	ldi	r24, 0xC8	; 200
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	9c 83       	std	Y+4, r25	; 0x04
    2342:	8b 83       	std	Y+3, r24	; 0x03
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	9c 81       	ldd	r25, Y+4	; 0x04
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	f1 f7       	brne	.-4      	; 0x2348 <CLCD_VoidInit+0x372>
    234c:	9c 83       	std	Y+4, r25	; 0x04
    234e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2350:	8d 81       	ldd	r24, Y+5	; 0x05
    2352:	9e 81       	ldd	r25, Y+6	; 0x06
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	9e 83       	std	Y+6, r25	; 0x06
    2358:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235a:	8d 81       	ldd	r24, Y+5	; 0x05
    235c:	9e 81       	ldd	r25, Y+6	; 0x06
    235e:	00 97       	sbiw	r24, 0x00	; 0
    2360:	69 f7       	brne	.-38     	; 0x233c <CLCD_VoidInit+0x366>
    2362:	14 c0       	rjmp	.+40     	; 0x238c <CLCD_VoidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2364:	6f 81       	ldd	r22, Y+7	; 0x07
    2366:	78 85       	ldd	r23, Y+8	; 0x08
    2368:	89 85       	ldd	r24, Y+9	; 0x09
    236a:	9a 85       	ldd	r25, Y+10	; 0x0a
    236c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	9e 83       	std	Y+6, r25	; 0x06
    2376:	8d 83       	std	Y+5, r24	; 0x05
    2378:	8d 81       	ldd	r24, Y+5	; 0x05
    237a:	9e 81       	ldd	r25, Y+6	; 0x06
    237c:	9a 83       	std	Y+2, r25	; 0x02
    237e:	89 83       	std	Y+1, r24	; 0x01
    2380:	89 81       	ldd	r24, Y+1	; 0x01
    2382:	9a 81       	ldd	r25, Y+2	; 0x02
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	f1 f7       	brne	.-4      	; 0x2384 <CLCD_VoidInit+0x3ae>
    2388:	9a 83       	std	Y+2, r25	; 0x02
    238a:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1);


}
    238c:	e8 96       	adiw	r28, 0x38	; 56
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	08 95       	ret

0000239e <CLCD_voidSendCommand>:
void CLCD_voidSendCommand(u8 Copy_u8Command){
    239e:	df 93       	push	r29
    23a0:	cf 93       	push	r28
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	2f 97       	sbiw	r28, 0x0f	; 15
    23a8:	0f b6       	in	r0, 0x3f	; 63
    23aa:	f8 94       	cli
    23ac:	de bf       	out	0x3e, r29	; 62
    23ae:	0f be       	out	0x3f, r0	; 63
    23b0:	cd bf       	out	0x3d, r28	; 61
    23b2:	8f 87       	std	Y+15, r24	; 0x0f
/*Set Rs Pin Low For Command */
MDIO_VidSetPinValue(LCDCTR_PORT,LCD_RS_PIN,Pin_Low);
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	61 e0       	ldi	r22, 0x01	; 1
    23b8:	40 e0       	ldi	r20, 0x00	; 0
    23ba:	0e 94 04 15 	call	0x2a08	; 0x2a08 <MDIO_VidSetPinValue>
/* Set R/W Pin Low To Write For Command */
MDIO_VidSetPinValue(LCDCTR_PORT,LCD_RW_PIN,Pin_Low);
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	62 e0       	ldi	r22, 0x02	; 2
    23c2:	40 e0       	ldi	r20, 0x00	; 0
    23c4:	0e 94 04 15 	call	0x2a08	; 0x2a08 <MDIO_VidSetPinValue>
/* Set Command To Data Pins */
MDIO_VidSetPortValue(LCDData_PORT,Copy_u8Command);
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	6f 85       	ldd	r22, Y+15	; 0x0f
    23cc:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <MDIO_VidSetPortValue>
/* Set EN Pin High To Send Command*/
MDIO_VidSetPinValue(LCDCTR_PORT,LCD_EN_PIN,Pin_High);
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	60 e0       	ldi	r22, 0x00	; 0
    23d4:	41 e0       	ldi	r20, 0x01	; 1
    23d6:	0e 94 04 15 	call	0x2a08	; 0x2a08 <MDIO_VidSetPinValue>
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	a0 e0       	ldi	r26, 0x00	; 0
    23e0:	b0 e4       	ldi	r27, 0x40	; 64
    23e2:	8b 87       	std	Y+11, r24	; 0x0b
    23e4:	9c 87       	std	Y+12, r25	; 0x0c
    23e6:	ad 87       	std	Y+13, r26	; 0x0d
    23e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	4a ef       	ldi	r20, 0xFA	; 250
    23f8:	54 e4       	ldi	r21, 0x44	; 68
    23fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	8f 83       	std	Y+7, r24	; 0x07
    2404:	98 87       	std	Y+8, r25	; 0x08
    2406:	a9 87       	std	Y+9, r26	; 0x09
    2408:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    240a:	6f 81       	ldd	r22, Y+7	; 0x07
    240c:	78 85       	ldd	r23, Y+8	; 0x08
    240e:	89 85       	ldd	r24, Y+9	; 0x09
    2410:	9a 85       	ldd	r25, Y+10	; 0x0a
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e8       	ldi	r20, 0x80	; 128
    2418:	5f e3       	ldi	r21, 0x3F	; 63
    241a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    241e:	88 23       	and	r24, r24
    2420:	2c f4       	brge	.+10     	; 0x242c <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	9e 83       	std	Y+6, r25	; 0x06
    2428:	8d 83       	std	Y+5, r24	; 0x05
    242a:	3f c0       	rjmp	.+126    	; 0x24aa <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    242c:	6f 81       	ldd	r22, Y+7	; 0x07
    242e:	78 85       	ldd	r23, Y+8	; 0x08
    2430:	89 85       	ldd	r24, Y+9	; 0x09
    2432:	9a 85       	ldd	r25, Y+10	; 0x0a
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	3f ef       	ldi	r19, 0xFF	; 255
    2438:	4f e7       	ldi	r20, 0x7F	; 127
    243a:	57 e4       	ldi	r21, 0x47	; 71
    243c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2440:	18 16       	cp	r1, r24
    2442:	4c f5       	brge	.+82     	; 0x2496 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2444:	6b 85       	ldd	r22, Y+11	; 0x0b
    2446:	7c 85       	ldd	r23, Y+12	; 0x0c
    2448:	8d 85       	ldd	r24, Y+13	; 0x0d
    244a:	9e 85       	ldd	r25, Y+14	; 0x0e
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e2       	ldi	r20, 0x20	; 32
    2452:	51 e4       	ldi	r21, 0x41	; 65
    2454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	bc 01       	movw	r22, r24
    245e:	cd 01       	movw	r24, r26
    2460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	9e 83       	std	Y+6, r25	; 0x06
    246a:	8d 83       	std	Y+5, r24	; 0x05
    246c:	0f c0       	rjmp	.+30     	; 0x248c <CLCD_voidSendCommand+0xee>
    246e:	88 ec       	ldi	r24, 0xC8	; 200
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	9c 83       	std	Y+4, r25	; 0x04
    2474:	8b 83       	std	Y+3, r24	; 0x03
    2476:	8b 81       	ldd	r24, Y+3	; 0x03
    2478:	9c 81       	ldd	r25, Y+4	; 0x04
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	f1 f7       	brne	.-4      	; 0x247a <CLCD_voidSendCommand+0xdc>
    247e:	9c 83       	std	Y+4, r25	; 0x04
    2480:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2482:	8d 81       	ldd	r24, Y+5	; 0x05
    2484:	9e 81       	ldd	r25, Y+6	; 0x06
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	9e 83       	std	Y+6, r25	; 0x06
    248a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248c:	8d 81       	ldd	r24, Y+5	; 0x05
    248e:	9e 81       	ldd	r25, Y+6	; 0x06
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	69 f7       	brne	.-38     	; 0x246e <CLCD_voidSendCommand+0xd0>
    2494:	14 c0       	rjmp	.+40     	; 0x24be <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2496:	6f 81       	ldd	r22, Y+7	; 0x07
    2498:	78 85       	ldd	r23, Y+8	; 0x08
    249a:	89 85       	ldd	r24, Y+9	; 0x09
    249c:	9a 85       	ldd	r25, Y+10	; 0x0a
    249e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	9e 83       	std	Y+6, r25	; 0x06
    24a8:	8d 83       	std	Y+5, r24	; 0x05
    24aa:	8d 81       	ldd	r24, Y+5	; 0x05
    24ac:	9e 81       	ldd	r25, Y+6	; 0x06
    24ae:	9a 83       	std	Y+2, r25	; 0x02
    24b0:	89 83       	std	Y+1, r24	; 0x01
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	9a 81       	ldd	r25, Y+2	; 0x02
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <CLCD_voidSendCommand+0x118>
    24ba:	9a 83       	std	Y+2, r25	; 0x02
    24bc:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
MDIO_VidSetPinValue(LCDCTR_PORT,LCD_EN_PIN,Pin_Low);
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	60 e0       	ldi	r22, 0x00	; 0
    24c2:	40 e0       	ldi	r20, 0x00	; 0
    24c4:	0e 94 04 15 	call	0x2a08	; 0x2a08 <MDIO_VidSetPinValue>

}
    24c8:	2f 96       	adiw	r28, 0x0f	; 15
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	de bf       	out	0x3e, r29	; 62
    24d0:	0f be       	out	0x3f, r0	; 63
    24d2:	cd bf       	out	0x3d, r28	; 61
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	08 95       	ret

000024da <CLCD_voidSendData>:
void CLCD_voidSendData(u8 Copy_u8Data){
    24da:	df 93       	push	r29
    24dc:	cf 93       	push	r28
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	2f 97       	sbiw	r28, 0x0f	; 15
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	f8 94       	cli
    24e8:	de bf       	out	0x3e, r29	; 62
    24ea:	0f be       	out	0x3f, r0	; 63
    24ec:	cd bf       	out	0x3d, r28	; 61
    24ee:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set Rs Pin High For Data */
	MDIO_VidSetPinValue(LCDCTR_PORT,LCD_RS_PIN,Pin_High);
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	61 e0       	ldi	r22, 0x01	; 1
    24f4:	41 e0       	ldi	r20, 0x01	; 1
    24f6:	0e 94 04 15 	call	0x2a08	; 0x2a08 <MDIO_VidSetPinValue>
	/* Set R/W Pin Low To Write For Data */
	MDIO_VidSetPinValue(LCDCTR_PORT,LCD_RW_PIN,Pin_Low);
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	62 e0       	ldi	r22, 0x02	; 2
    24fe:	40 e0       	ldi	r20, 0x00	; 0
    2500:	0e 94 04 15 	call	0x2a08	; 0x2a08 <MDIO_VidSetPinValue>
	/* Set Data To Data Pins */
	MDIO_VidSetPortValue(LCDData_PORT,Copy_u8Data);
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	6f 85       	ldd	r22, Y+15	; 0x0f
    2508:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <MDIO_VidSetPortValue>
	/* Set EN Pin High To Send Data*/
	MDIO_VidSetPinValue(LCDCTR_PORT,LCD_EN_PIN,Pin_High);
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	60 e0       	ldi	r22, 0x00	; 0
    2510:	41 e0       	ldi	r20, 0x01	; 1
    2512:	0e 94 04 15 	call	0x2a08	; 0x2a08 <MDIO_VidSetPinValue>
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	a0 e0       	ldi	r26, 0x00	; 0
    251c:	b0 e4       	ldi	r27, 0x40	; 64
    251e:	8b 87       	std	Y+11, r24	; 0x0b
    2520:	9c 87       	std	Y+12, r25	; 0x0c
    2522:	ad 87       	std	Y+13, r26	; 0x0d
    2524:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2526:	6b 85       	ldd	r22, Y+11	; 0x0b
    2528:	7c 85       	ldd	r23, Y+12	; 0x0c
    252a:	8d 85       	ldd	r24, Y+13	; 0x0d
    252c:	9e 85       	ldd	r25, Y+14	; 0x0e
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	4a ef       	ldi	r20, 0xFA	; 250
    2534:	54 e4       	ldi	r21, 0x44	; 68
    2536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	8f 83       	std	Y+7, r24	; 0x07
    2540:	98 87       	std	Y+8, r25	; 0x08
    2542:	a9 87       	std	Y+9, r26	; 0x09
    2544:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2546:	6f 81       	ldd	r22, Y+7	; 0x07
    2548:	78 85       	ldd	r23, Y+8	; 0x08
    254a:	89 85       	ldd	r24, Y+9	; 0x09
    254c:	9a 85       	ldd	r25, Y+10	; 0x0a
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e8       	ldi	r20, 0x80	; 128
    2554:	5f e3       	ldi	r21, 0x3F	; 63
    2556:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    255a:	88 23       	and	r24, r24
    255c:	2c f4       	brge	.+10     	; 0x2568 <CLCD_voidSendData+0x8e>
		__ticks = 1;
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	9e 83       	std	Y+6, r25	; 0x06
    2564:	8d 83       	std	Y+5, r24	; 0x05
    2566:	3f c0       	rjmp	.+126    	; 0x25e6 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    2568:	6f 81       	ldd	r22, Y+7	; 0x07
    256a:	78 85       	ldd	r23, Y+8	; 0x08
    256c:	89 85       	ldd	r24, Y+9	; 0x09
    256e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	3f ef       	ldi	r19, 0xFF	; 255
    2574:	4f e7       	ldi	r20, 0x7F	; 127
    2576:	57 e4       	ldi	r21, 0x47	; 71
    2578:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    257c:	18 16       	cp	r1, r24
    257e:	4c f5       	brge	.+82     	; 0x25d2 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2580:	6b 85       	ldd	r22, Y+11	; 0x0b
    2582:	7c 85       	ldd	r23, Y+12	; 0x0c
    2584:	8d 85       	ldd	r24, Y+13	; 0x0d
    2586:	9e 85       	ldd	r25, Y+14	; 0x0e
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e2       	ldi	r20, 0x20	; 32
    258e:	51 e4       	ldi	r21, 0x41	; 65
    2590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	bc 01       	movw	r22, r24
    259a:	cd 01       	movw	r24, r26
    259c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	9e 83       	std	Y+6, r25	; 0x06
    25a6:	8d 83       	std	Y+5, r24	; 0x05
    25a8:	0f c0       	rjmp	.+30     	; 0x25c8 <CLCD_voidSendData+0xee>
    25aa:	88 ec       	ldi	r24, 0xC8	; 200
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	9c 83       	std	Y+4, r25	; 0x04
    25b0:	8b 83       	std	Y+3, r24	; 0x03
    25b2:	8b 81       	ldd	r24, Y+3	; 0x03
    25b4:	9c 81       	ldd	r25, Y+4	; 0x04
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <CLCD_voidSendData+0xdc>
    25ba:	9c 83       	std	Y+4, r25	; 0x04
    25bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25be:	8d 81       	ldd	r24, Y+5	; 0x05
    25c0:	9e 81       	ldd	r25, Y+6	; 0x06
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	9e 83       	std	Y+6, r25	; 0x06
    25c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ca:	9e 81       	ldd	r25, Y+6	; 0x06
    25cc:	00 97       	sbiw	r24, 0x00	; 0
    25ce:	69 f7       	brne	.-38     	; 0x25aa <CLCD_voidSendData+0xd0>
    25d0:	14 c0       	rjmp	.+40     	; 0x25fa <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d2:	6f 81       	ldd	r22, Y+7	; 0x07
    25d4:	78 85       	ldd	r23, Y+8	; 0x08
    25d6:	89 85       	ldd	r24, Y+9	; 0x09
    25d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	9e 83       	std	Y+6, r25	; 0x06
    25e4:	8d 83       	std	Y+5, r24	; 0x05
    25e6:	8d 81       	ldd	r24, Y+5	; 0x05
    25e8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ea:	9a 83       	std	Y+2, r25	; 0x02
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	9a 81       	ldd	r25, Y+2	; 0x02
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	f1 f7       	brne	.-4      	; 0x25f2 <CLCD_voidSendData+0x118>
    25f6:	9a 83       	std	Y+2, r25	; 0x02
    25f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_VidSetPinValue(LCDCTR_PORT,LCD_EN_PIN,Pin_Low);
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	60 e0       	ldi	r22, 0x00	; 0
    25fe:	40 e0       	ldi	r20, 0x00	; 0
    2600:	0e 94 04 15 	call	0x2a08	; 0x2a08 <MDIO_VidSetPinValue>

}
    2604:	2f 96       	adiw	r28, 0x0f	; 15
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <ClCD_voidSendString>:
void ClCD_voidSendString(const char* Copy_ChString ){
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	00 d0       	rcall	.+0      	; 0x261c <ClCD_voidSendString+0x6>
    261c:	0f 92       	push	r0
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	9b 83       	std	Y+3, r25	; 0x03
    2624:	8a 83       	std	Y+2, r24	; 0x02
	u8 Iteration =0;
    2626:	19 82       	std	Y+1, r1	; 0x01
    2628:	0e c0       	rjmp	.+28     	; 0x2646 <ClCD_voidSendString+0x30>
	while (Copy_ChString[Iteration]!='\0')
     {
     CLCD_voidSendData(Copy_ChString[Iteration]);
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	9b 81       	ldd	r25, Y+3	; 0x03
    2634:	fc 01       	movw	r30, r24
    2636:	e2 0f       	add	r30, r18
    2638:	f3 1f       	adc	r31, r19
    263a:	80 81       	ld	r24, Z
    263c:	0e 94 6d 12 	call	0x24da	; 0x24da <CLCD_voidSendData>
     Iteration++;
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	8f 5f       	subi	r24, 0xFF	; 255
    2644:	89 83       	std	Y+1, r24	; 0x01
	MDIO_VidSetPinValue(LCDCTR_PORT,LCD_EN_PIN,Pin_Low);

}
void ClCD_voidSendString(const char* Copy_ChString ){
	u8 Iteration =0;
	while (Copy_ChString[Iteration]!='\0')
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	28 2f       	mov	r18, r24
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	8a 81       	ldd	r24, Y+2	; 0x02
    264e:	9b 81       	ldd	r25, Y+3	; 0x03
    2650:	fc 01       	movw	r30, r24
    2652:	e2 0f       	add	r30, r18
    2654:	f3 1f       	adc	r31, r19
    2656:	80 81       	ld	r24, Z
    2658:	88 23       	and	r24, r24
    265a:	39 f7       	brne	.-50     	; 0x262a <ClCD_voidSendString+0x14>
     {
     CLCD_voidSendData(Copy_ChString[Iteration]);
     Iteration++;
	}
}
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <CLCD_voidGoToXY>:
void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos){
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	00 d0       	rcall	.+0      	; 0x266e <CLCD_voidGoToXY+0x6>
    266e:	0f 92       	push	r0
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	8a 83       	std	Y+2, r24	; 0x02
    2676:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress;
if (Copy_u8XPos == 0){
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	88 23       	and	r24, r24
    267c:	19 f4       	brne	.+6      	; 0x2684 <CLCD_voidGoToXY+0x1c>

	Local_u8Adress= Copy_u8YPos;
    267e:	8b 81       	ldd	r24, Y+3	; 0x03
    2680:	89 83       	std	Y+1, r24	; 0x01
    2682:	06 c0       	rjmp	.+12     	; 0x2690 <CLCD_voidGoToXY+0x28>

}
else if (Copy_u8XPos == 1)
    2684:	8a 81       	ldd	r24, Y+2	; 0x02
    2686:	81 30       	cpi	r24, 0x01	; 1
    2688:	19 f4       	brne	.+6      	; 0x2690 <CLCD_voidGoToXY+0x28>
{
	/* location At Secand line */
	Local_u8Adress = Copy_u8YPos + CGRAM_Address;
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	80 5c       	subi	r24, 0xC0	; 192
    268e:	89 83       	std	Y+1, r24	; 0x01
}
CLCD_voidSendCommand(Local_u8Adress + 128);
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	80 58       	subi	r24, 0x80	; 128
    2694:	0e 94 cf 11 	call	0x239e	; 0x239e <CLCD_voidSendCommand>
}
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	08 95       	ret

000026a4 <CLCD_voidCreateSpeacialCharater>:
void CLCD_voidCreateSpeacialCharater(u8* Copy_pu8Arr, u8 Copy_u8index,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
    26ac:	27 97       	sbiw	r28, 0x07	; 7
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	de bf       	out	0x3e, r29	; 62
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	cd bf       	out	0x3d, r28	; 61
    26b8:	9c 83       	std	Y+4, r25	; 0x04
    26ba:	8b 83       	std	Y+3, r24	; 0x03
    26bc:	6d 83       	std	Y+5, r22	; 0x05
    26be:	4e 83       	std	Y+6, r20	; 0x06
    26c0:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAdress = 0;
    26c2:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculate CGRAM Address  */
	 Local_u8CGRAMAdress = Copy_u8index * 8;
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	88 2f       	mov	r24, r24
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	88 0f       	add	r24, r24
    26cc:	99 1f       	adc	r25, r25
    26ce:	88 0f       	add	r24, r24
    26d0:	99 1f       	adc	r25, r25
    26d2:	88 0f       	add	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	8a 83       	std	Y+2, r24	; 0x02
	 /* Send CGRAM Adress command to LCD */
  CLCD_voidSendCommand(Local_u8CGRAMAdress + 64);
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	80 5c       	subi	r24, 0xC0	; 192
    26dc:	0e 94 cf 11 	call	0x239e	; 0x239e <CLCD_voidSendCommand>
for (u8 Local_u8Iterator = 0; Local_u8Iterator < 8;Local_u8Iterator++ )
    26e0:	19 82       	std	Y+1, r1	; 0x01
    26e2:	0e c0       	rjmp	.+28     	; 0x2700 <CLCD_voidCreateSpeacialCharater+0x5c>
{
	CLCD_voidSendData(Copy_pu8Arr[Local_u8Iterator]);
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	28 2f       	mov	r18, r24
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	9c 81       	ldd	r25, Y+4	; 0x04
    26ee:	fc 01       	movw	r30, r24
    26f0:	e2 0f       	add	r30, r18
    26f2:	f3 1f       	adc	r31, r19
    26f4:	80 81       	ld	r24, Z
    26f6:	0e 94 6d 12 	call	0x24da	; 0x24da <CLCD_voidSendData>
	u8 Local_u8CGRAMAdress = 0;
	/* Calculate CGRAM Address  */
	 Local_u8CGRAMAdress = Copy_u8index * 8;
	 /* Send CGRAM Adress command to LCD */
  CLCD_voidSendCommand(Local_u8CGRAMAdress + 64);
for (u8 Local_u8Iterator = 0; Local_u8Iterator < 8;Local_u8Iterator++ )
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	8f 5f       	subi	r24, 0xFF	; 255
    26fe:	89 83       	std	Y+1, r24	; 0x01
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	88 30       	cpi	r24, 0x08	; 8
    2704:	78 f3       	brcs	.-34     	; 0x26e4 <CLCD_voidCreateSpeacialCharater+0x40>
{
	CLCD_voidSendData(Copy_pu8Arr[Local_u8Iterator]);
}
CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    2706:	8e 81       	ldd	r24, Y+6	; 0x06
    2708:	6f 81       	ldd	r22, Y+7	; 0x07
    270a:	0e 94 34 13 	call	0x2668	; 0x2668 <CLCD_voidGoToXY>
CLCD_voidSendData(Copy_u8index);
    270e:	8d 81       	ldd	r24, Y+5	; 0x05
    2710:	0e 94 6d 12 	call	0x24da	; 0x24da <CLCD_voidSendData>
}
    2714:	27 96       	adiw	r28, 0x07	; 7
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	cf 91       	pop	r28
    2722:	df 91       	pop	r29
    2724:	08 95       	ret

00002726 <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay(){
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(Display_clear);
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	0e 94 cf 11 	call	0x239e	; 0x239e <CLCD_voidSendCommand>
}
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <CLCD_VidSendNumber>:
u8 Global_u8Basyflag = 0;
void CLCD_VidSendNumber(u32 Copy_u32Data){
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	00 d0       	rcall	.+0      	; 0x2740 <CLCD_VidSendNumber+0x6>
    2740:	00 d0       	rcall	.+0      	; 0x2742 <CLCD_VidSendNumber+0x8>
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	69 83       	std	Y+1, r22	; 0x01
    2748:	7a 83       	std	Y+2, r23	; 0x02
    274a:	8b 83       	std	Y+3, r24	; 0x03
    274c:	9c 83       	std	Y+4, r25	; 0x04

	if (Copy_u32Data == 0 && Global_u8Basyflag == 0)
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	9a 81       	ldd	r25, Y+2	; 0x02
    2752:	ab 81       	ldd	r26, Y+3	; 0x03
    2754:	bc 81       	ldd	r27, Y+4	; 0x04
    2756:	00 97       	sbiw	r24, 0x00	; 0
    2758:	a1 05       	cpc	r26, r1
    275a:	b1 05       	cpc	r27, r1
    275c:	41 f4       	brne	.+16     	; 0x276e <CLCD_VidSendNumber+0x34>
    275e:	80 91 14 01 	lds	r24, 0x0114
    2762:	88 23       	and	r24, r24
    2764:	21 f4       	brne	.+8      	; 0x276e <CLCD_VidSendNumber+0x34>
	{
		CLCD_voidSendData('0');
    2766:	80 e3       	ldi	r24, 0x30	; 48
    2768:	0e 94 6d 12 	call	0x24da	; 0x24da <CLCD_voidSendData>
    276c:	2e c0       	rjmp	.+92     	; 0x27ca <CLCD_VidSendNumber+0x90>
	}
	else
	{
		Global_u8Basyflag = 1;
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	80 93 14 01 	sts	0x0114, r24
		if (Copy_u32Data!= 0)
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	9a 81       	ldd	r25, Y+2	; 0x02
    2778:	ab 81       	ldd	r26, Y+3	; 0x03
    277a:	bc 81       	ldd	r27, Y+4	; 0x04
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	a1 05       	cpc	r26, r1
    2780:	b1 05       	cpc	r27, r1
    2782:	19 f1       	breq	.+70     	; 0x27ca <CLCD_VidSendNumber+0x90>
			{

			CLCD_VidSendNumber(Copy_u32Data/10);
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	9a 81       	ldd	r25, Y+2	; 0x02
    2788:	ab 81       	ldd	r26, Y+3	; 0x03
    278a:	bc 81       	ldd	r27, Y+4	; 0x04
    278c:	2a e0       	ldi	r18, 0x0A	; 10
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	bc 01       	movw	r22, r24
    2796:	cd 01       	movw	r24, r26
    2798:	0e 94 56 17 	call	0x2eac	; 0x2eac <__udivmodsi4>
    279c:	da 01       	movw	r26, r20
    279e:	c9 01       	movw	r24, r18
    27a0:	bc 01       	movw	r22, r24
    27a2:	cd 01       	movw	r24, r26
    27a4:	0e 94 9d 13 	call	0x273a	; 0x273a <CLCD_VidSendNumber>
				CLCD_voidSendData (((Copy_u32Data % 10)+'0'));
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	9a 81       	ldd	r25, Y+2	; 0x02
    27ac:	ab 81       	ldd	r26, Y+3	; 0x03
    27ae:	bc 81       	ldd	r27, Y+4	; 0x04
    27b0:	2a e0       	ldi	r18, 0x0A	; 10
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	50 e0       	ldi	r21, 0x00	; 0
    27b8:	bc 01       	movw	r22, r24
    27ba:	cd 01       	movw	r24, r26
    27bc:	0e 94 56 17 	call	0x2eac	; 0x2eac <__udivmodsi4>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	80 5d       	subi	r24, 0xD0	; 208
    27c6:	0e 94 6d 12 	call	0x24da	; 0x24da <CLCD_voidSendData>

			}
	}

	Global_u8Basyflag=0;
    27ca:	10 92 14 01 	sts	0x0114, r1
}
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <SendCharacter>:



void SendCharacter(u8 row, u8 column, u8 character) {
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	00 d0       	rcall	.+0      	; 0x27e2 <SendCharacter+0x6>
    27e2:	0f 92       	push	r0
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
    27e8:	89 83       	std	Y+1, r24	; 0x01
    27ea:	6a 83       	std	Y+2, r22	; 0x02
    27ec:	4b 83       	std	Y+3, r20	; 0x03
	CLCD_voidGoToXY(row, column);
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	6a 81       	ldd	r22, Y+2	; 0x02
    27f2:	0e 94 34 13 	call	0x2668	; 0x2668 <CLCD_voidGoToXY>
	CLCD_voidSendData(character);
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	0e 94 6d 12 	call	0x24da	; 0x24da <CLCD_voidSendData>
}
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	cf 91       	pop	r28
    2804:	df 91       	pop	r29
    2806:	08 95       	ret

00002808 <MDIO_VidSetPinDirection>:


/*Main used Method*/
void MDIO_VidSetPinDirection(u8 Copy_u8Port,
							 u8 Copy_u8Pin ,
							 u8 Copy_u8Direction){
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
    2810:	27 97       	sbiw	r28, 0x07	; 7
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	de bf       	out	0x3e, r29	; 62
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	cd bf       	out	0x3d, r28	; 61
    281c:	89 83       	std	Y+1, r24	; 0x01
    281e:	6a 83       	std	Y+2, r22	; 0x02
    2820:	4b 83       	std	Y+3, r20	; 0x03

if (Copy_u8Direction == Pin_Input){
    2822:	8b 81       	ldd	r24, Y+3	; 0x03
    2824:	88 23       	and	r24, r24
    2826:	09 f0       	breq	.+2      	; 0x282a <MDIO_VidSetPinDirection+0x22>
    2828:	74 c0       	rjmp	.+232    	; 0x2912 <MDIO_VidSetPinDirection+0x10a>
   switch (Copy_u8Port) {
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	28 2f       	mov	r18, r24
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	3f 83       	std	Y+7, r19	; 0x07
    2832:	2e 83       	std	Y+6, r18	; 0x06
    2834:	8e 81       	ldd	r24, Y+6	; 0x06
    2836:	9f 81       	ldd	r25, Y+7	; 0x07
    2838:	81 30       	cpi	r24, 0x01	; 1
    283a:	91 05       	cpc	r25, r1
    283c:	59 f1       	breq	.+86     	; 0x2894 <MDIO_VidSetPinDirection+0x8c>
    283e:	2e 81       	ldd	r18, Y+6	; 0x06
    2840:	3f 81       	ldd	r19, Y+7	; 0x07
    2842:	22 30       	cpi	r18, 0x02	; 2
    2844:	31 05       	cpc	r19, r1
    2846:	2c f4       	brge	.+10     	; 0x2852 <MDIO_VidSetPinDirection+0x4a>
    2848:	8e 81       	ldd	r24, Y+6	; 0x06
    284a:	9f 81       	ldd	r25, Y+7	; 0x07
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	69 f0       	breq	.+26     	; 0x286a <MDIO_VidSetPinDirection+0x62>
    2850:	d2 c0       	rjmp	.+420    	; 0x29f6 <MDIO_VidSetPinDirection+0x1ee>
    2852:	2e 81       	ldd	r18, Y+6	; 0x06
    2854:	3f 81       	ldd	r19, Y+7	; 0x07
    2856:	22 30       	cpi	r18, 0x02	; 2
    2858:	31 05       	cpc	r19, r1
    285a:	89 f1       	breq	.+98     	; 0x28be <MDIO_VidSetPinDirection+0xb6>
    285c:	8e 81       	ldd	r24, Y+6	; 0x06
    285e:	9f 81       	ldd	r25, Y+7	; 0x07
    2860:	83 30       	cpi	r24, 0x03	; 3
    2862:	91 05       	cpc	r25, r1
    2864:	09 f4       	brne	.+2      	; 0x2868 <MDIO_VidSetPinDirection+0x60>
    2866:	40 c0       	rjmp	.+128    	; 0x28e8 <MDIO_VidSetPinDirection+0xe0>
    2868:	c6 c0       	rjmp	.+396    	; 0x29f6 <MDIO_VidSetPinDirection+0x1ee>
	   case Port_A : CLR_BIT(DDRA,Copy_u8Pin);break;
    286a:	aa e3       	ldi	r26, 0x3A	; 58
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	ea e3       	ldi	r30, 0x3A	; 58
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	48 2f       	mov	r20, r24
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	28 2f       	mov	r18, r24
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	02 2e       	mov	r0, r18
    2882:	02 c0       	rjmp	.+4      	; 0x2888 <MDIO_VidSetPinDirection+0x80>
    2884:	88 0f       	add	r24, r24
    2886:	99 1f       	adc	r25, r25
    2888:	0a 94       	dec	r0
    288a:	e2 f7       	brpl	.-8      	; 0x2884 <MDIO_VidSetPinDirection+0x7c>
    288c:	80 95       	com	r24
    288e:	84 23       	and	r24, r20
    2890:	8c 93       	st	X, r24
    2892:	b1 c0       	rjmp	.+354    	; 0x29f6 <MDIO_VidSetPinDirection+0x1ee>
	   case Port_B : CLR_BIT(DDRB,Copy_u8Pin);break;
    2894:	a7 e3       	ldi	r26, 0x37	; 55
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	e7 e3       	ldi	r30, 0x37	; 55
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	48 2f       	mov	r20, r24
    28a0:	8a 81       	ldd	r24, Y+2	; 0x02
    28a2:	28 2f       	mov	r18, r24
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	02 2e       	mov	r0, r18
    28ac:	02 c0       	rjmp	.+4      	; 0x28b2 <MDIO_VidSetPinDirection+0xaa>
    28ae:	88 0f       	add	r24, r24
    28b0:	99 1f       	adc	r25, r25
    28b2:	0a 94       	dec	r0
    28b4:	e2 f7       	brpl	.-8      	; 0x28ae <MDIO_VidSetPinDirection+0xa6>
    28b6:	80 95       	com	r24
    28b8:	84 23       	and	r24, r20
    28ba:	8c 93       	st	X, r24
    28bc:	9c c0       	rjmp	.+312    	; 0x29f6 <MDIO_VidSetPinDirection+0x1ee>
	   case Port_C : CLR_BIT(DDRC,Copy_u8Pin);break;
    28be:	a4 e3       	ldi	r26, 0x34	; 52
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	e4 e3       	ldi	r30, 0x34	; 52
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	48 2f       	mov	r20, r24
    28ca:	8a 81       	ldd	r24, Y+2	; 0x02
    28cc:	28 2f       	mov	r18, r24
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	02 2e       	mov	r0, r18
    28d6:	02 c0       	rjmp	.+4      	; 0x28dc <MDIO_VidSetPinDirection+0xd4>
    28d8:	88 0f       	add	r24, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	0a 94       	dec	r0
    28de:	e2 f7       	brpl	.-8      	; 0x28d8 <MDIO_VidSetPinDirection+0xd0>
    28e0:	80 95       	com	r24
    28e2:	84 23       	and	r24, r20
    28e4:	8c 93       	st	X, r24
    28e6:	87 c0       	rjmp	.+270    	; 0x29f6 <MDIO_VidSetPinDirection+0x1ee>
	   case Port_D : CLR_BIT(DDRD,Copy_u8Pin);break;
    28e8:	a1 e3       	ldi	r26, 0x31	; 49
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	e1 e3       	ldi	r30, 0x31	; 49
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	48 2f       	mov	r20, r24
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	28 2f       	mov	r18, r24
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	02 2e       	mov	r0, r18
    2900:	02 c0       	rjmp	.+4      	; 0x2906 <MDIO_VidSetPinDirection+0xfe>
    2902:	88 0f       	add	r24, r24
    2904:	99 1f       	adc	r25, r25
    2906:	0a 94       	dec	r0
    2908:	e2 f7       	brpl	.-8      	; 0x2902 <MDIO_VidSetPinDirection+0xfa>
    290a:	80 95       	com	r24
    290c:	84 23       	and	r24, r20
    290e:	8c 93       	st	X, r24
    2910:	72 c0       	rjmp	.+228    	; 0x29f6 <MDIO_VidSetPinDirection+0x1ee>
   }
	
}
else if (Copy_u8Direction == Pin_Output) {
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	81 30       	cpi	r24, 0x01	; 1
    2916:	09 f0       	breq	.+2      	; 0x291a <MDIO_VidSetPinDirection+0x112>
    2918:	6e c0       	rjmp	.+220    	; 0x29f6 <MDIO_VidSetPinDirection+0x1ee>
	
	switch (Copy_u8Port) {
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	28 2f       	mov	r18, r24
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	3d 83       	std	Y+5, r19	; 0x05
    2922:	2c 83       	std	Y+4, r18	; 0x04
    2924:	8c 81       	ldd	r24, Y+4	; 0x04
    2926:	9d 81       	ldd	r25, Y+5	; 0x05
    2928:	81 30       	cpi	r24, 0x01	; 1
    292a:	91 05       	cpc	r25, r1
    292c:	49 f1       	breq	.+82     	; 0x2980 <MDIO_VidSetPinDirection+0x178>
    292e:	2c 81       	ldd	r18, Y+4	; 0x04
    2930:	3d 81       	ldd	r19, Y+5	; 0x05
    2932:	22 30       	cpi	r18, 0x02	; 2
    2934:	31 05       	cpc	r19, r1
    2936:	2c f4       	brge	.+10     	; 0x2942 <MDIO_VidSetPinDirection+0x13a>
    2938:	8c 81       	ldd	r24, Y+4	; 0x04
    293a:	9d 81       	ldd	r25, Y+5	; 0x05
    293c:	00 97       	sbiw	r24, 0x00	; 0
    293e:	61 f0       	breq	.+24     	; 0x2958 <MDIO_VidSetPinDirection+0x150>
    2940:	5a c0       	rjmp	.+180    	; 0x29f6 <MDIO_VidSetPinDirection+0x1ee>
    2942:	2c 81       	ldd	r18, Y+4	; 0x04
    2944:	3d 81       	ldd	r19, Y+5	; 0x05
    2946:	22 30       	cpi	r18, 0x02	; 2
    2948:	31 05       	cpc	r19, r1
    294a:	71 f1       	breq	.+92     	; 0x29a8 <MDIO_VidSetPinDirection+0x1a0>
    294c:	8c 81       	ldd	r24, Y+4	; 0x04
    294e:	9d 81       	ldd	r25, Y+5	; 0x05
    2950:	83 30       	cpi	r24, 0x03	; 3
    2952:	91 05       	cpc	r25, r1
    2954:	e9 f1       	breq	.+122    	; 0x29d0 <MDIO_VidSetPinDirection+0x1c8>
    2956:	4f c0       	rjmp	.+158    	; 0x29f6 <MDIO_VidSetPinDirection+0x1ee>
	   case Port_A : SET_BIT(DDRA,Copy_u8Pin);break;
    2958:	aa e3       	ldi	r26, 0x3A	; 58
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	ea e3       	ldi	r30, 0x3A	; 58
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	48 2f       	mov	r20, r24
    2964:	8a 81       	ldd	r24, Y+2	; 0x02
    2966:	28 2f       	mov	r18, r24
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	02 2e       	mov	r0, r18
    2970:	02 c0       	rjmp	.+4      	; 0x2976 <MDIO_VidSetPinDirection+0x16e>
    2972:	88 0f       	add	r24, r24
    2974:	99 1f       	adc	r25, r25
    2976:	0a 94       	dec	r0
    2978:	e2 f7       	brpl	.-8      	; 0x2972 <MDIO_VidSetPinDirection+0x16a>
    297a:	84 2b       	or	r24, r20
    297c:	8c 93       	st	X, r24
    297e:	3b c0       	rjmp	.+118    	; 0x29f6 <MDIO_VidSetPinDirection+0x1ee>
	   case Port_B : SET_BIT(DDRB,Copy_u8Pin);break;
    2980:	a7 e3       	ldi	r26, 0x37	; 55
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	e7 e3       	ldi	r30, 0x37	; 55
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	80 81       	ld	r24, Z
    298a:	48 2f       	mov	r20, r24
    298c:	8a 81       	ldd	r24, Y+2	; 0x02
    298e:	28 2f       	mov	r18, r24
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	02 2e       	mov	r0, r18
    2998:	02 c0       	rjmp	.+4      	; 0x299e <MDIO_VidSetPinDirection+0x196>
    299a:	88 0f       	add	r24, r24
    299c:	99 1f       	adc	r25, r25
    299e:	0a 94       	dec	r0
    29a0:	e2 f7       	brpl	.-8      	; 0x299a <MDIO_VidSetPinDirection+0x192>
    29a2:	84 2b       	or	r24, r20
    29a4:	8c 93       	st	X, r24
    29a6:	27 c0       	rjmp	.+78     	; 0x29f6 <MDIO_VidSetPinDirection+0x1ee>
	   case Port_C : SET_BIT(DDRC,Copy_u8Pin);break;
    29a8:	a4 e3       	ldi	r26, 0x34	; 52
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	e4 e3       	ldi	r30, 0x34	; 52
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	48 2f       	mov	r20, r24
    29b4:	8a 81       	ldd	r24, Y+2	; 0x02
    29b6:	28 2f       	mov	r18, r24
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	02 2e       	mov	r0, r18
    29c0:	02 c0       	rjmp	.+4      	; 0x29c6 <MDIO_VidSetPinDirection+0x1be>
    29c2:	88 0f       	add	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	0a 94       	dec	r0
    29c8:	e2 f7       	brpl	.-8      	; 0x29c2 <MDIO_VidSetPinDirection+0x1ba>
    29ca:	84 2b       	or	r24, r20
    29cc:	8c 93       	st	X, r24
    29ce:	13 c0       	rjmp	.+38     	; 0x29f6 <MDIO_VidSetPinDirection+0x1ee>
	   case Port_D : SET_BIT(DDRD,Copy_u8Pin);break;
    29d0:	a1 e3       	ldi	r26, 0x31	; 49
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	e1 e3       	ldi	r30, 0x31	; 49
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	48 2f       	mov	r20, r24
    29dc:	8a 81       	ldd	r24, Y+2	; 0x02
    29de:	28 2f       	mov	r18, r24
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	02 2e       	mov	r0, r18
    29e8:	02 c0       	rjmp	.+4      	; 0x29ee <MDIO_VidSetPinDirection+0x1e6>
    29ea:	88 0f       	add	r24, r24
    29ec:	99 1f       	adc	r25, r25
    29ee:	0a 94       	dec	r0
    29f0:	e2 f7       	brpl	.-8      	; 0x29ea <MDIO_VidSetPinDirection+0x1e2>
    29f2:	84 2b       	or	r24, r20
    29f4:	8c 93       	st	X, r24
   }
	
}

}
    29f6:	27 96       	adiw	r28, 0x07	; 7
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	f8 94       	cli
    29fc:	de bf       	out	0x3e, r29	; 62
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	cd bf       	out	0x3d, r28	; 61
    2a02:	cf 91       	pop	r28
    2a04:	df 91       	pop	r29
    2a06:	08 95       	ret

00002a08 <MDIO_VidSetPinValue>:
							   
							   
void MDIO_VidSetPinValue(u8 Copy_u8Port,
						 u8 Copy_u8Pin ,
						 u8 Copy_u8Value){
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
    2a10:	27 97       	sbiw	r28, 0x07	; 7
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	f8 94       	cli
    2a16:	de bf       	out	0x3e, r29	; 62
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	cd bf       	out	0x3d, r28	; 61
    2a1c:	89 83       	std	Y+1, r24	; 0x01
    2a1e:	6a 83       	std	Y+2, r22	; 0x02
    2a20:	4b 83       	std	Y+3, r20	; 0x03

if (Copy_u8Value == Pin_Low){
    2a22:	8b 81       	ldd	r24, Y+3	; 0x03
    2a24:	88 23       	and	r24, r24
    2a26:	09 f0       	breq	.+2      	; 0x2a2a <MDIO_VidSetPinValue+0x22>
    2a28:	74 c0       	rjmp	.+232    	; 0x2b12 <MDIO_VidSetPinValue+0x10a>
   switch (Copy_u8Port) {
    2a2a:	89 81       	ldd	r24, Y+1	; 0x01
    2a2c:	28 2f       	mov	r18, r24
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	3f 83       	std	Y+7, r19	; 0x07
    2a32:	2e 83       	std	Y+6, r18	; 0x06
    2a34:	8e 81       	ldd	r24, Y+6	; 0x06
    2a36:	9f 81       	ldd	r25, Y+7	; 0x07
    2a38:	81 30       	cpi	r24, 0x01	; 1
    2a3a:	91 05       	cpc	r25, r1
    2a3c:	59 f1       	breq	.+86     	; 0x2a94 <MDIO_VidSetPinValue+0x8c>
    2a3e:	2e 81       	ldd	r18, Y+6	; 0x06
    2a40:	3f 81       	ldd	r19, Y+7	; 0x07
    2a42:	22 30       	cpi	r18, 0x02	; 2
    2a44:	31 05       	cpc	r19, r1
    2a46:	2c f4       	brge	.+10     	; 0x2a52 <MDIO_VidSetPinValue+0x4a>
    2a48:	8e 81       	ldd	r24, Y+6	; 0x06
    2a4a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a4c:	00 97       	sbiw	r24, 0x00	; 0
    2a4e:	69 f0       	breq	.+26     	; 0x2a6a <MDIO_VidSetPinValue+0x62>
    2a50:	d2 c0       	rjmp	.+420    	; 0x2bf6 <MDIO_VidSetPinValue+0x1ee>
    2a52:	2e 81       	ldd	r18, Y+6	; 0x06
    2a54:	3f 81       	ldd	r19, Y+7	; 0x07
    2a56:	22 30       	cpi	r18, 0x02	; 2
    2a58:	31 05       	cpc	r19, r1
    2a5a:	89 f1       	breq	.+98     	; 0x2abe <MDIO_VidSetPinValue+0xb6>
    2a5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a5e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a60:	83 30       	cpi	r24, 0x03	; 3
    2a62:	91 05       	cpc	r25, r1
    2a64:	09 f4       	brne	.+2      	; 0x2a68 <MDIO_VidSetPinValue+0x60>
    2a66:	40 c0       	rjmp	.+128    	; 0x2ae8 <MDIO_VidSetPinValue+0xe0>
    2a68:	c6 c0       	rjmp	.+396    	; 0x2bf6 <MDIO_VidSetPinValue+0x1ee>
	   case Port_A : CLR_BIT(PORTA,Copy_u8Pin);break;
    2a6a:	ab e3       	ldi	r26, 0x3B	; 59
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	eb e3       	ldi	r30, 0x3B	; 59
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	48 2f       	mov	r20, r24
    2a76:	8a 81       	ldd	r24, Y+2	; 0x02
    2a78:	28 2f       	mov	r18, r24
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	02 2e       	mov	r0, r18
    2a82:	02 c0       	rjmp	.+4      	; 0x2a88 <MDIO_VidSetPinValue+0x80>
    2a84:	88 0f       	add	r24, r24
    2a86:	99 1f       	adc	r25, r25
    2a88:	0a 94       	dec	r0
    2a8a:	e2 f7       	brpl	.-8      	; 0x2a84 <MDIO_VidSetPinValue+0x7c>
    2a8c:	80 95       	com	r24
    2a8e:	84 23       	and	r24, r20
    2a90:	8c 93       	st	X, r24
    2a92:	b1 c0       	rjmp	.+354    	; 0x2bf6 <MDIO_VidSetPinValue+0x1ee>
	   case Port_B : CLR_BIT(PORTB,Copy_u8Pin);break;
    2a94:	a8 e3       	ldi	r26, 0x38	; 56
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	e8 e3       	ldi	r30, 0x38	; 56
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z
    2a9e:	48 2f       	mov	r20, r24
    2aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa2:	28 2f       	mov	r18, r24
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	02 2e       	mov	r0, r18
    2aac:	02 c0       	rjmp	.+4      	; 0x2ab2 <MDIO_VidSetPinValue+0xaa>
    2aae:	88 0f       	add	r24, r24
    2ab0:	99 1f       	adc	r25, r25
    2ab2:	0a 94       	dec	r0
    2ab4:	e2 f7       	brpl	.-8      	; 0x2aae <MDIO_VidSetPinValue+0xa6>
    2ab6:	80 95       	com	r24
    2ab8:	84 23       	and	r24, r20
    2aba:	8c 93       	st	X, r24
    2abc:	9c c0       	rjmp	.+312    	; 0x2bf6 <MDIO_VidSetPinValue+0x1ee>
	   case Port_C : CLR_BIT(PORTC,Copy_u8Pin);break;
    2abe:	a5 e3       	ldi	r26, 0x35	; 53
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	e5 e3       	ldi	r30, 0x35	; 53
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	48 2f       	mov	r20, r24
    2aca:	8a 81       	ldd	r24, Y+2	; 0x02
    2acc:	28 2f       	mov	r18, r24
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	02 2e       	mov	r0, r18
    2ad6:	02 c0       	rjmp	.+4      	; 0x2adc <MDIO_VidSetPinValue+0xd4>
    2ad8:	88 0f       	add	r24, r24
    2ada:	99 1f       	adc	r25, r25
    2adc:	0a 94       	dec	r0
    2ade:	e2 f7       	brpl	.-8      	; 0x2ad8 <MDIO_VidSetPinValue+0xd0>
    2ae0:	80 95       	com	r24
    2ae2:	84 23       	and	r24, r20
    2ae4:	8c 93       	st	X, r24
    2ae6:	87 c0       	rjmp	.+270    	; 0x2bf6 <MDIO_VidSetPinValue+0x1ee>
	   case Port_D : CLR_BIT(PORTD,Copy_u8Pin);break;
    2ae8:	a2 e3       	ldi	r26, 0x32	; 50
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	e2 e3       	ldi	r30, 0x32	; 50
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
    2af2:	48 2f       	mov	r20, r24
    2af4:	8a 81       	ldd	r24, Y+2	; 0x02
    2af6:	28 2f       	mov	r18, r24
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	02 2e       	mov	r0, r18
    2b00:	02 c0       	rjmp	.+4      	; 0x2b06 <MDIO_VidSetPinValue+0xfe>
    2b02:	88 0f       	add	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	0a 94       	dec	r0
    2b08:	e2 f7       	brpl	.-8      	; 0x2b02 <MDIO_VidSetPinValue+0xfa>
    2b0a:	80 95       	com	r24
    2b0c:	84 23       	and	r24, r20
    2b0e:	8c 93       	st	X, r24
    2b10:	72 c0       	rjmp	.+228    	; 0x2bf6 <MDIO_VidSetPinValue+0x1ee>
   }
	
   }
else if (Copy_u8Value == Pin_High) {
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	81 30       	cpi	r24, 0x01	; 1
    2b16:	09 f0       	breq	.+2      	; 0x2b1a <MDIO_VidSetPinValue+0x112>
    2b18:	6e c0       	rjmp	.+220    	; 0x2bf6 <MDIO_VidSetPinValue+0x1ee>
	
	switch (Copy_u8Port) {
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	28 2f       	mov	r18, r24
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	3d 83       	std	Y+5, r19	; 0x05
    2b22:	2c 83       	std	Y+4, r18	; 0x04
    2b24:	8c 81       	ldd	r24, Y+4	; 0x04
    2b26:	9d 81       	ldd	r25, Y+5	; 0x05
    2b28:	81 30       	cpi	r24, 0x01	; 1
    2b2a:	91 05       	cpc	r25, r1
    2b2c:	49 f1       	breq	.+82     	; 0x2b80 <MDIO_VidSetPinValue+0x178>
    2b2e:	2c 81       	ldd	r18, Y+4	; 0x04
    2b30:	3d 81       	ldd	r19, Y+5	; 0x05
    2b32:	22 30       	cpi	r18, 0x02	; 2
    2b34:	31 05       	cpc	r19, r1
    2b36:	2c f4       	brge	.+10     	; 0x2b42 <MDIO_VidSetPinValue+0x13a>
    2b38:	8c 81       	ldd	r24, Y+4	; 0x04
    2b3a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	61 f0       	breq	.+24     	; 0x2b58 <MDIO_VidSetPinValue+0x150>
    2b40:	5a c0       	rjmp	.+180    	; 0x2bf6 <MDIO_VidSetPinValue+0x1ee>
    2b42:	2c 81       	ldd	r18, Y+4	; 0x04
    2b44:	3d 81       	ldd	r19, Y+5	; 0x05
    2b46:	22 30       	cpi	r18, 0x02	; 2
    2b48:	31 05       	cpc	r19, r1
    2b4a:	71 f1       	breq	.+92     	; 0x2ba8 <MDIO_VidSetPinValue+0x1a0>
    2b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b50:	83 30       	cpi	r24, 0x03	; 3
    2b52:	91 05       	cpc	r25, r1
    2b54:	e9 f1       	breq	.+122    	; 0x2bd0 <MDIO_VidSetPinValue+0x1c8>
    2b56:	4f c0       	rjmp	.+158    	; 0x2bf6 <MDIO_VidSetPinValue+0x1ee>
	   case Port_A : SET_BIT(PORTA,Copy_u8Pin);break;
    2b58:	ab e3       	ldi	r26, 0x3B	; 59
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	eb e3       	ldi	r30, 0x3B	; 59
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	48 2f       	mov	r20, r24
    2b64:	8a 81       	ldd	r24, Y+2	; 0x02
    2b66:	28 2f       	mov	r18, r24
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	02 2e       	mov	r0, r18
    2b70:	02 c0       	rjmp	.+4      	; 0x2b76 <MDIO_VidSetPinValue+0x16e>
    2b72:	88 0f       	add	r24, r24
    2b74:	99 1f       	adc	r25, r25
    2b76:	0a 94       	dec	r0
    2b78:	e2 f7       	brpl	.-8      	; 0x2b72 <MDIO_VidSetPinValue+0x16a>
    2b7a:	84 2b       	or	r24, r20
    2b7c:	8c 93       	st	X, r24
    2b7e:	3b c0       	rjmp	.+118    	; 0x2bf6 <MDIO_VidSetPinValue+0x1ee>
	   case Port_B : SET_BIT(PORTB,Copy_u8Pin);break;
    2b80:	a8 e3       	ldi	r26, 0x38	; 56
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	e8 e3       	ldi	r30, 0x38	; 56
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	80 81       	ld	r24, Z
    2b8a:	48 2f       	mov	r20, r24
    2b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8e:	28 2f       	mov	r18, r24
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	02 2e       	mov	r0, r18
    2b98:	02 c0       	rjmp	.+4      	; 0x2b9e <MDIO_VidSetPinValue+0x196>
    2b9a:	88 0f       	add	r24, r24
    2b9c:	99 1f       	adc	r25, r25
    2b9e:	0a 94       	dec	r0
    2ba0:	e2 f7       	brpl	.-8      	; 0x2b9a <MDIO_VidSetPinValue+0x192>
    2ba2:	84 2b       	or	r24, r20
    2ba4:	8c 93       	st	X, r24
    2ba6:	27 c0       	rjmp	.+78     	; 0x2bf6 <MDIO_VidSetPinValue+0x1ee>
	   case Port_C : SET_BIT(PORTC,Copy_u8Pin);break;
    2ba8:	a5 e3       	ldi	r26, 0x35	; 53
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	e5 e3       	ldi	r30, 0x35	; 53
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	80 81       	ld	r24, Z
    2bb2:	48 2f       	mov	r20, r24
    2bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	02 2e       	mov	r0, r18
    2bc0:	02 c0       	rjmp	.+4      	; 0x2bc6 <MDIO_VidSetPinValue+0x1be>
    2bc2:	88 0f       	add	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	0a 94       	dec	r0
    2bc8:	e2 f7       	brpl	.-8      	; 0x2bc2 <MDIO_VidSetPinValue+0x1ba>
    2bca:	84 2b       	or	r24, r20
    2bcc:	8c 93       	st	X, r24
    2bce:	13 c0       	rjmp	.+38     	; 0x2bf6 <MDIO_VidSetPinValue+0x1ee>
	   case Port_D : SET_BIT(PORTD,Copy_u8Pin);break;
    2bd0:	a2 e3       	ldi	r26, 0x32	; 50
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	e2 e3       	ldi	r30, 0x32	; 50
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	48 2f       	mov	r20, r24
    2bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bde:	28 2f       	mov	r18, r24
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	02 2e       	mov	r0, r18
    2be8:	02 c0       	rjmp	.+4      	; 0x2bee <MDIO_VidSetPinValue+0x1e6>
    2bea:	88 0f       	add	r24, r24
    2bec:	99 1f       	adc	r25, r25
    2bee:	0a 94       	dec	r0
    2bf0:	e2 f7       	brpl	.-8      	; 0x2bea <MDIO_VidSetPinValue+0x1e2>
    2bf2:	84 2b       	or	r24, r20
    2bf4:	8c 93       	st	X, r24
   }
	
}

}
    2bf6:	27 96       	adiw	r28, 0x07	; 7
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	f8 94       	cli
    2bfc:	de bf       	out	0x3e, r29	; 62
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	cd bf       	out	0x3d, r28	; 61
    2c02:	cf 91       	pop	r28
    2c04:	df 91       	pop	r29
    2c06:	08 95       	ret

00002c08 <MDIO_VidGetPinValue>:

							   
void MDIO_VidGetPinValue(u8 Copy_u8Port,
						 u8 Copy_u8Pin ,
						 u8 *pu8Value){
    2c08:	df 93       	push	r29
    2c0a:	cf 93       	push	r28
    2c0c:	00 d0       	rcall	.+0      	; 0x2c0e <MDIO_VidGetPinValue+0x6>
    2c0e:	00 d0       	rcall	.+0      	; 0x2c10 <MDIO_VidGetPinValue+0x8>
    2c10:	00 d0       	rcall	.+0      	; 0x2c12 <MDIO_VidGetPinValue+0xa>
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	89 83       	std	Y+1, r24	; 0x01
    2c18:	6a 83       	std	Y+2, r22	; 0x02
    2c1a:	5c 83       	std	Y+4, r21	; 0x04
    2c1c:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_u8Port) {
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	28 2f       	mov	r18, r24
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	3e 83       	std	Y+6, r19	; 0x06
    2c26:	2d 83       	std	Y+5, r18	; 0x05
    2c28:	4d 81       	ldd	r20, Y+5	; 0x05
    2c2a:	5e 81       	ldd	r21, Y+6	; 0x06
    2c2c:	41 30       	cpi	r20, 0x01	; 1
    2c2e:	51 05       	cpc	r21, r1
    2c30:	59 f1       	breq	.+86     	; 0x2c88 <MDIO_VidGetPinValue+0x80>
    2c32:	8d 81       	ldd	r24, Y+5	; 0x05
    2c34:	9e 81       	ldd	r25, Y+6	; 0x06
    2c36:	82 30       	cpi	r24, 0x02	; 2
    2c38:	91 05       	cpc	r25, r1
    2c3a:	34 f4       	brge	.+12     	; 0x2c48 <MDIO_VidGetPinValue+0x40>
    2c3c:	2d 81       	ldd	r18, Y+5	; 0x05
    2c3e:	3e 81       	ldd	r19, Y+6	; 0x06
    2c40:	21 15       	cp	r18, r1
    2c42:	31 05       	cpc	r19, r1
    2c44:	69 f0       	breq	.+26     	; 0x2c60 <MDIO_VidGetPinValue+0x58>
    2c46:	5b c0       	rjmp	.+182    	; 0x2cfe <MDIO_VidGetPinValue+0xf6>
    2c48:	4d 81       	ldd	r20, Y+5	; 0x05
    2c4a:	5e 81       	ldd	r21, Y+6	; 0x06
    2c4c:	42 30       	cpi	r20, 0x02	; 2
    2c4e:	51 05       	cpc	r21, r1
    2c50:	79 f1       	breq	.+94     	; 0x2cb0 <MDIO_VidGetPinValue+0xa8>
    2c52:	8d 81       	ldd	r24, Y+5	; 0x05
    2c54:	9e 81       	ldd	r25, Y+6	; 0x06
    2c56:	83 30       	cpi	r24, 0x03	; 3
    2c58:	91 05       	cpc	r25, r1
    2c5a:	09 f4       	brne	.+2      	; 0x2c5e <MDIO_VidGetPinValue+0x56>
    2c5c:	3d c0       	rjmp	.+122    	; 0x2cd8 <MDIO_VidGetPinValue+0xd0>
    2c5e:	4f c0       	rjmp	.+158    	; 0x2cfe <MDIO_VidGetPinValue+0xf6>
		case Port_A : *pu8Value = GET_BIT(PINA,Copy_u8Pin);break;
    2c60:	e9 e3       	ldi	r30, 0x39	; 57
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	80 81       	ld	r24, Z
    2c66:	28 2f       	mov	r18, r24
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6c:	88 2f       	mov	r24, r24
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	a9 01       	movw	r20, r18
    2c72:	02 c0       	rjmp	.+4      	; 0x2c78 <MDIO_VidGetPinValue+0x70>
    2c74:	55 95       	asr	r21
    2c76:	47 95       	ror	r20
    2c78:	8a 95       	dec	r24
    2c7a:	e2 f7       	brpl	.-8      	; 0x2c74 <MDIO_VidGetPinValue+0x6c>
    2c7c:	ca 01       	movw	r24, r20
    2c7e:	81 70       	andi	r24, 0x01	; 1
    2c80:	eb 81       	ldd	r30, Y+3	; 0x03
    2c82:	fc 81       	ldd	r31, Y+4	; 0x04
    2c84:	80 83       	st	Z, r24
    2c86:	3b c0       	rjmp	.+118    	; 0x2cfe <MDIO_VidGetPinValue+0xf6>
		case Port_B : *pu8Value = GET_BIT(PINB,Copy_u8Pin);break;
    2c88:	e6 e3       	ldi	r30, 0x36	; 54
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	80 81       	ld	r24, Z
    2c8e:	28 2f       	mov	r18, r24
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	8a 81       	ldd	r24, Y+2	; 0x02
    2c94:	88 2f       	mov	r24, r24
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	a9 01       	movw	r20, r18
    2c9a:	02 c0       	rjmp	.+4      	; 0x2ca0 <MDIO_VidGetPinValue+0x98>
    2c9c:	55 95       	asr	r21
    2c9e:	47 95       	ror	r20
    2ca0:	8a 95       	dec	r24
    2ca2:	e2 f7       	brpl	.-8      	; 0x2c9c <MDIO_VidGetPinValue+0x94>
    2ca4:	ca 01       	movw	r24, r20
    2ca6:	81 70       	andi	r24, 0x01	; 1
    2ca8:	eb 81       	ldd	r30, Y+3	; 0x03
    2caa:	fc 81       	ldd	r31, Y+4	; 0x04
    2cac:	80 83       	st	Z, r24
    2cae:	27 c0       	rjmp	.+78     	; 0x2cfe <MDIO_VidGetPinValue+0xf6>
		case Port_C : *pu8Value = GET_BIT(PINC,Copy_u8Pin);break;
    2cb0:	e3 e3       	ldi	r30, 0x33	; 51
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	80 81       	ld	r24, Z
    2cb6:	28 2f       	mov	r18, r24
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbc:	88 2f       	mov	r24, r24
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	a9 01       	movw	r20, r18
    2cc2:	02 c0       	rjmp	.+4      	; 0x2cc8 <MDIO_VidGetPinValue+0xc0>
    2cc4:	55 95       	asr	r21
    2cc6:	47 95       	ror	r20
    2cc8:	8a 95       	dec	r24
    2cca:	e2 f7       	brpl	.-8      	; 0x2cc4 <MDIO_VidGetPinValue+0xbc>
    2ccc:	ca 01       	movw	r24, r20
    2cce:	81 70       	andi	r24, 0x01	; 1
    2cd0:	eb 81       	ldd	r30, Y+3	; 0x03
    2cd2:	fc 81       	ldd	r31, Y+4	; 0x04
    2cd4:	80 83       	st	Z, r24
    2cd6:	13 c0       	rjmp	.+38     	; 0x2cfe <MDIO_VidGetPinValue+0xf6>
		case Port_D : *pu8Value = GET_BIT(PIND,Copy_u8Pin);break;		
    2cd8:	e0 e3       	ldi	r30, 0x30	; 48
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	80 81       	ld	r24, Z
    2cde:	28 2f       	mov	r18, r24
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce4:	88 2f       	mov	r24, r24
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	a9 01       	movw	r20, r18
    2cea:	02 c0       	rjmp	.+4      	; 0x2cf0 <MDIO_VidGetPinValue+0xe8>
    2cec:	55 95       	asr	r21
    2cee:	47 95       	ror	r20
    2cf0:	8a 95       	dec	r24
    2cf2:	e2 f7       	brpl	.-8      	; 0x2cec <MDIO_VidGetPinValue+0xe4>
    2cf4:	ca 01       	movw	r24, r20
    2cf6:	81 70       	andi	r24, 0x01	; 1
    2cf8:	eb 81       	ldd	r30, Y+3	; 0x03
    2cfa:	fc 81       	ldd	r31, Y+4	; 0x04
    2cfc:	80 83       	st	Z, r24
		
	}

}
    2cfe:	26 96       	adiw	r28, 0x06	; 6
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	de bf       	out	0x3e, r29	; 62
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	cd bf       	out	0x3d, r28	; 61
    2d0a:	cf 91       	pop	r28
    2d0c:	df 91       	pop	r29
    2d0e:	08 95       	ret

00002d10 <MDIO_VidSetPortDirection>:

/*********************************************/
/* Methods on Port */


void MDIO_VidSetPortDirection(u8 Copy_u8Port,u8 Copy_u8Direction){
    2d10:	df 93       	push	r29
    2d12:	cf 93       	push	r28
    2d14:	00 d0       	rcall	.+0      	; 0x2d16 <MDIO_VidSetPortDirection+0x6>
    2d16:	00 d0       	rcall	.+0      	; 0x2d18 <MDIO_VidSetPortDirection+0x8>
    2d18:	cd b7       	in	r28, 0x3d	; 61
    2d1a:	de b7       	in	r29, 0x3e	; 62
    2d1c:	89 83       	std	Y+1, r24	; 0x01
    2d1e:	6a 83       	std	Y+2, r22	; 0x02

	switch (Copy_u8Port){
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	28 2f       	mov	r18, r24
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	3c 83       	std	Y+4, r19	; 0x04
    2d28:	2b 83       	std	Y+3, r18	; 0x03
    2d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d2e:	81 30       	cpi	r24, 0x01	; 1
    2d30:	91 05       	cpc	r25, r1
    2d32:	d1 f0       	breq	.+52     	; 0x2d68 <MDIO_VidSetPortDirection+0x58>
    2d34:	2b 81       	ldd	r18, Y+3	; 0x03
    2d36:	3c 81       	ldd	r19, Y+4	; 0x04
    2d38:	22 30       	cpi	r18, 0x02	; 2
    2d3a:	31 05       	cpc	r19, r1
    2d3c:	2c f4       	brge	.+10     	; 0x2d48 <MDIO_VidSetPortDirection+0x38>
    2d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d40:	9c 81       	ldd	r25, Y+4	; 0x04
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	61 f0       	breq	.+24     	; 0x2d5e <MDIO_VidSetPortDirection+0x4e>
    2d46:	1e c0       	rjmp	.+60     	; 0x2d84 <MDIO_VidSetPortDirection+0x74>
    2d48:	2b 81       	ldd	r18, Y+3	; 0x03
    2d4a:	3c 81       	ldd	r19, Y+4	; 0x04
    2d4c:	22 30       	cpi	r18, 0x02	; 2
    2d4e:	31 05       	cpc	r19, r1
    2d50:	81 f0       	breq	.+32     	; 0x2d72 <MDIO_VidSetPortDirection+0x62>
    2d52:	8b 81       	ldd	r24, Y+3	; 0x03
    2d54:	9c 81       	ldd	r25, Y+4	; 0x04
    2d56:	83 30       	cpi	r24, 0x03	; 3
    2d58:	91 05       	cpc	r25, r1
    2d5a:	81 f0       	breq	.+32     	; 0x2d7c <MDIO_VidSetPortDirection+0x6c>
    2d5c:	13 c0       	rjmp	.+38     	; 0x2d84 <MDIO_VidSetPortDirection+0x74>

	case Port_A : DDRA = Copy_u8Direction ; break;
    2d5e:	ea e3       	ldi	r30, 0x3A	; 58
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	8a 81       	ldd	r24, Y+2	; 0x02
    2d64:	80 83       	st	Z, r24
    2d66:	0e c0       	rjmp	.+28     	; 0x2d84 <MDIO_VidSetPortDirection+0x74>
	case Port_B : DDRB = Copy_u8Direction ; break;
    2d68:	e7 e3       	ldi	r30, 0x37	; 55
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6e:	80 83       	st	Z, r24
    2d70:	09 c0       	rjmp	.+18     	; 0x2d84 <MDIO_VidSetPortDirection+0x74>
	case Port_C : DDRC = Copy_u8Direction ; break;
    2d72:	e4 e3       	ldi	r30, 0x34	; 52
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	8a 81       	ldd	r24, Y+2	; 0x02
    2d78:	80 83       	st	Z, r24
    2d7a:	04 c0       	rjmp	.+8      	; 0x2d84 <MDIO_VidSetPortDirection+0x74>
	case Port_D : DDRD = Copy_u8Direction ; break;
    2d7c:	e1 e3       	ldi	r30, 0x31	; 49
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	8a 81       	ldd	r24, Y+2	; 0x02
    2d82:	80 83       	st	Z, r24

	}
}
    2d84:	0f 90       	pop	r0
    2d86:	0f 90       	pop	r0
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	08 95       	ret

00002d92 <MDIO_VidSetPortValue>:


void MDIO_VidSetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
    2d92:	df 93       	push	r29
    2d94:	cf 93       	push	r28
    2d96:	00 d0       	rcall	.+0      	; 0x2d98 <MDIO_VidSetPortValue+0x6>
    2d98:	00 d0       	rcall	.+0      	; 0x2d9a <MDIO_VidSetPortValue+0x8>
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
    2d9e:	89 83       	std	Y+1, r24	; 0x01
    2da0:	6a 83       	std	Y+2, r22	; 0x02

	switch (Copy_u8Port){
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	28 2f       	mov	r18, r24
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	3c 83       	std	Y+4, r19	; 0x04
    2daa:	2b 83       	std	Y+3, r18	; 0x03
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	9c 81       	ldd	r25, Y+4	; 0x04
    2db0:	81 30       	cpi	r24, 0x01	; 1
    2db2:	91 05       	cpc	r25, r1
    2db4:	d1 f0       	breq	.+52     	; 0x2dea <MDIO_VidSetPortValue+0x58>
    2db6:	2b 81       	ldd	r18, Y+3	; 0x03
    2db8:	3c 81       	ldd	r19, Y+4	; 0x04
    2dba:	22 30       	cpi	r18, 0x02	; 2
    2dbc:	31 05       	cpc	r19, r1
    2dbe:	2c f4       	brge	.+10     	; 0x2dca <MDIO_VidSetPortValue+0x38>
    2dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc4:	00 97       	sbiw	r24, 0x00	; 0
    2dc6:	61 f0       	breq	.+24     	; 0x2de0 <MDIO_VidSetPortValue+0x4e>
    2dc8:	1e c0       	rjmp	.+60     	; 0x2e06 <MDIO_VidSetPortValue+0x74>
    2dca:	2b 81       	ldd	r18, Y+3	; 0x03
    2dcc:	3c 81       	ldd	r19, Y+4	; 0x04
    2dce:	22 30       	cpi	r18, 0x02	; 2
    2dd0:	31 05       	cpc	r19, r1
    2dd2:	81 f0       	breq	.+32     	; 0x2df4 <MDIO_VidSetPortValue+0x62>
    2dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd8:	83 30       	cpi	r24, 0x03	; 3
    2dda:	91 05       	cpc	r25, r1
    2ddc:	81 f0       	breq	.+32     	; 0x2dfe <MDIO_VidSetPortValue+0x6c>
    2dde:	13 c0       	rjmp	.+38     	; 0x2e06 <MDIO_VidSetPortValue+0x74>

	case Port_A : PORTA = Copy_u8Value ; break;
    2de0:	eb e3       	ldi	r30, 0x3B	; 59
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	8a 81       	ldd	r24, Y+2	; 0x02
    2de6:	80 83       	st	Z, r24
    2de8:	0e c0       	rjmp	.+28     	; 0x2e06 <MDIO_VidSetPortValue+0x74>
	case Port_B : PORTB = Copy_u8Value ; break;
    2dea:	e8 e3       	ldi	r30, 0x38	; 56
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	8a 81       	ldd	r24, Y+2	; 0x02
    2df0:	80 83       	st	Z, r24
    2df2:	09 c0       	rjmp	.+18     	; 0x2e06 <MDIO_VidSetPortValue+0x74>
	case Port_C : PORTC = Copy_u8Value ; break;
    2df4:	e5 e3       	ldi	r30, 0x35	; 53
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfa:	80 83       	st	Z, r24
    2dfc:	04 c0       	rjmp	.+8      	; 0x2e06 <MDIO_VidSetPortValue+0x74>
	case Port_D : PORTD = Copy_u8Value ; break;
    2dfe:	e2 e3       	ldi	r30, 0x32	; 50
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	8a 81       	ldd	r24, Y+2	; 0x02
    2e04:	80 83       	st	Z, r24

	}
}
    2e06:	0f 90       	pop	r0
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	08 95       	ret

00002e14 <MDIO_VidGetPortValue>:


void MDIO_VidGetPortValue(u8 Copy_u8Port,u8 *pu8Value){
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	00 d0       	rcall	.+0      	; 0x2e1a <MDIO_VidGetPortValue+0x6>
    2e1a:	00 d0       	rcall	.+0      	; 0x2e1c <MDIO_VidGetPortValue+0x8>
    2e1c:	0f 92       	push	r0
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
    2e22:	89 83       	std	Y+1, r24	; 0x01
    2e24:	7b 83       	std	Y+3, r23	; 0x03
    2e26:	6a 83       	std	Y+2, r22	; 0x02

	switch (Copy_u8Port){
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	28 2f       	mov	r18, r24
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	3d 83       	std	Y+5, r19	; 0x05
    2e30:	2c 83       	std	Y+4, r18	; 0x04
    2e32:	8c 81       	ldd	r24, Y+4	; 0x04
    2e34:	9d 81       	ldd	r25, Y+5	; 0x05
    2e36:	81 30       	cpi	r24, 0x01	; 1
    2e38:	91 05       	cpc	r25, r1
    2e3a:	e1 f0       	breq	.+56     	; 0x2e74 <MDIO_VidGetPortValue+0x60>
    2e3c:	2c 81       	ldd	r18, Y+4	; 0x04
    2e3e:	3d 81       	ldd	r19, Y+5	; 0x05
    2e40:	22 30       	cpi	r18, 0x02	; 2
    2e42:	31 05       	cpc	r19, r1
    2e44:	2c f4       	brge	.+10     	; 0x2e50 <MDIO_VidGetPortValue+0x3c>
    2e46:	8c 81       	ldd	r24, Y+4	; 0x04
    2e48:	9d 81       	ldd	r25, Y+5	; 0x05
    2e4a:	00 97       	sbiw	r24, 0x00	; 0
    2e4c:	61 f0       	breq	.+24     	; 0x2e66 <MDIO_VidGetPortValue+0x52>
    2e4e:	26 c0       	rjmp	.+76     	; 0x2e9c <MDIO_VidGetPortValue+0x88>
    2e50:	2c 81       	ldd	r18, Y+4	; 0x04
    2e52:	3d 81       	ldd	r19, Y+5	; 0x05
    2e54:	22 30       	cpi	r18, 0x02	; 2
    2e56:	31 05       	cpc	r19, r1
    2e58:	a1 f0       	breq	.+40     	; 0x2e82 <MDIO_VidGetPortValue+0x6e>
    2e5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e5c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e5e:	83 30       	cpi	r24, 0x03	; 3
    2e60:	91 05       	cpc	r25, r1
    2e62:	b1 f0       	breq	.+44     	; 0x2e90 <MDIO_VidGetPortValue+0x7c>
    2e64:	1b c0       	rjmp	.+54     	; 0x2e9c <MDIO_VidGetPortValue+0x88>

	case Port_A : *pu8Value = PINA ; break;
    2e66:	e9 e3       	ldi	r30, 0x39	; 57
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	80 81       	ld	r24, Z
    2e6c:	ea 81       	ldd	r30, Y+2	; 0x02
    2e6e:	fb 81       	ldd	r31, Y+3	; 0x03
    2e70:	80 83       	st	Z, r24
    2e72:	14 c0       	rjmp	.+40     	; 0x2e9c <MDIO_VidGetPortValue+0x88>
	case Port_B : *pu8Value = PINB ; break;
    2e74:	e6 e3       	ldi	r30, 0x36	; 54
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	80 81       	ld	r24, Z
    2e7a:	ea 81       	ldd	r30, Y+2	; 0x02
    2e7c:	fb 81       	ldd	r31, Y+3	; 0x03
    2e7e:	80 83       	st	Z, r24
    2e80:	0d c0       	rjmp	.+26     	; 0x2e9c <MDIO_VidGetPortValue+0x88>
	case Port_C : *pu8Value = PINC ; break;
    2e82:	e3 e3       	ldi	r30, 0x33	; 51
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	80 81       	ld	r24, Z
    2e88:	ea 81       	ldd	r30, Y+2	; 0x02
    2e8a:	fb 81       	ldd	r31, Y+3	; 0x03
    2e8c:	80 83       	st	Z, r24
    2e8e:	06 c0       	rjmp	.+12     	; 0x2e9c <MDIO_VidGetPortValue+0x88>
	case Port_D : *pu8Value = PIND ; break;
    2e90:	e0 e3       	ldi	r30, 0x30	; 48
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	80 81       	ld	r24, Z
    2e96:	ea 81       	ldd	r30, Y+2	; 0x02
    2e98:	fb 81       	ldd	r31, Y+3	; 0x03
    2e9a:	80 83       	st	Z, r24

	}
}
    2e9c:	0f 90       	pop	r0
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	0f 90       	pop	r0
    2ea4:	0f 90       	pop	r0
    2ea6:	cf 91       	pop	r28
    2ea8:	df 91       	pop	r29
    2eaa:	08 95       	ret

00002eac <__udivmodsi4>:
    2eac:	a1 e2       	ldi	r26, 0x21	; 33
    2eae:	1a 2e       	mov	r1, r26
    2eb0:	aa 1b       	sub	r26, r26
    2eb2:	bb 1b       	sub	r27, r27
    2eb4:	fd 01       	movw	r30, r26
    2eb6:	0d c0       	rjmp	.+26     	; 0x2ed2 <__udivmodsi4_ep>

00002eb8 <__udivmodsi4_loop>:
    2eb8:	aa 1f       	adc	r26, r26
    2eba:	bb 1f       	adc	r27, r27
    2ebc:	ee 1f       	adc	r30, r30
    2ebe:	ff 1f       	adc	r31, r31
    2ec0:	a2 17       	cp	r26, r18
    2ec2:	b3 07       	cpc	r27, r19
    2ec4:	e4 07       	cpc	r30, r20
    2ec6:	f5 07       	cpc	r31, r21
    2ec8:	20 f0       	brcs	.+8      	; 0x2ed2 <__udivmodsi4_ep>
    2eca:	a2 1b       	sub	r26, r18
    2ecc:	b3 0b       	sbc	r27, r19
    2ece:	e4 0b       	sbc	r30, r20
    2ed0:	f5 0b       	sbc	r31, r21

00002ed2 <__udivmodsi4_ep>:
    2ed2:	66 1f       	adc	r22, r22
    2ed4:	77 1f       	adc	r23, r23
    2ed6:	88 1f       	adc	r24, r24
    2ed8:	99 1f       	adc	r25, r25
    2eda:	1a 94       	dec	r1
    2edc:	69 f7       	brne	.-38     	; 0x2eb8 <__udivmodsi4_loop>
    2ede:	60 95       	com	r22
    2ee0:	70 95       	com	r23
    2ee2:	80 95       	com	r24
    2ee4:	90 95       	com	r25
    2ee6:	9b 01       	movw	r18, r22
    2ee8:	ac 01       	movw	r20, r24
    2eea:	bd 01       	movw	r22, r26
    2eec:	cf 01       	movw	r24, r30
    2eee:	08 95       	ret

00002ef0 <__prologue_saves__>:
    2ef0:	2f 92       	push	r2
    2ef2:	3f 92       	push	r3
    2ef4:	4f 92       	push	r4
    2ef6:	5f 92       	push	r5
    2ef8:	6f 92       	push	r6
    2efa:	7f 92       	push	r7
    2efc:	8f 92       	push	r8
    2efe:	9f 92       	push	r9
    2f00:	af 92       	push	r10
    2f02:	bf 92       	push	r11
    2f04:	cf 92       	push	r12
    2f06:	df 92       	push	r13
    2f08:	ef 92       	push	r14
    2f0a:	ff 92       	push	r15
    2f0c:	0f 93       	push	r16
    2f0e:	1f 93       	push	r17
    2f10:	cf 93       	push	r28
    2f12:	df 93       	push	r29
    2f14:	cd b7       	in	r28, 0x3d	; 61
    2f16:	de b7       	in	r29, 0x3e	; 62
    2f18:	ca 1b       	sub	r28, r26
    2f1a:	db 0b       	sbc	r29, r27
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	f8 94       	cli
    2f20:	de bf       	out	0x3e, r29	; 62
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	cd bf       	out	0x3d, r28	; 61
    2f26:	09 94       	ijmp

00002f28 <__epilogue_restores__>:
    2f28:	2a 88       	ldd	r2, Y+18	; 0x12
    2f2a:	39 88       	ldd	r3, Y+17	; 0x11
    2f2c:	48 88       	ldd	r4, Y+16	; 0x10
    2f2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f30:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f32:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f34:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f36:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f38:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f3a:	b9 84       	ldd	r11, Y+9	; 0x09
    2f3c:	c8 84       	ldd	r12, Y+8	; 0x08
    2f3e:	df 80       	ldd	r13, Y+7	; 0x07
    2f40:	ee 80       	ldd	r14, Y+6	; 0x06
    2f42:	fd 80       	ldd	r15, Y+5	; 0x05
    2f44:	0c 81       	ldd	r16, Y+4	; 0x04
    2f46:	1b 81       	ldd	r17, Y+3	; 0x03
    2f48:	aa 81       	ldd	r26, Y+2	; 0x02
    2f4a:	b9 81       	ldd	r27, Y+1	; 0x01
    2f4c:	ce 0f       	add	r28, r30
    2f4e:	d1 1d       	adc	r29, r1
    2f50:	0f b6       	in	r0, 0x3f	; 63
    2f52:	f8 94       	cli
    2f54:	de bf       	out	0x3e, r29	; 62
    2f56:	0f be       	out	0x3f, r0	; 63
    2f58:	cd bf       	out	0x3d, r28	; 61
    2f5a:	ed 01       	movw	r28, r26
    2f5c:	08 95       	ret

00002f5e <_exit>:
    2f5e:	f8 94       	cli

00002f60 <__stop_program>:
    2f60:	ff cf       	rjmp	.-2      	; 0x2f60 <__stop_program>
