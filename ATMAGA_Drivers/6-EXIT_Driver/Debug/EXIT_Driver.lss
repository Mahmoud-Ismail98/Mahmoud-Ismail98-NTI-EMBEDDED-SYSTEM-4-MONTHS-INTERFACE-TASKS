
EXIT_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00001568  2**0
                  ALLOC
  2 .stab         00001c08  00000000  00000000  00001568  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001116  00000000  00000000  00003170  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__vector_1>
       8:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__vector_2>
       c:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__vector_3>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a6 36       	cpi	r26, 0x66	; 102
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
      74:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "../1-MCAL/5-EXIT/include/EXIT_Cfg.h"
#include"../1-MCAL/5-EXIT/include/EXIT.h"
#include "util/delay.h"
void INT0_ISR(void);

int main (){
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	cd b7       	in	r28, 0x3d	; 61
      82:	de b7       	in	r29, 0x3e	; 62
Port_VoidInit();
      84:	0e 94 fe 05 	call	0xbfc	; 0xbfc <Port_VoidInit>
Port_enuSetPinMode(PIN26,PORT_u8Intput_Pullup);
      88:	8a e1       	ldi	r24, 0x1A	; 26
      8a:	62 e0       	ldi	r22, 0x02	; 2
      8c:	0e 94 2f 07 	call	0xe5e	; 0xe5e <Port_enuSetPinMode>
EXTI_voidInt0Init();
      90:	0e 94 5c 00 	call	0xb8	; 0xb8 <EXTI_voidInt0Init>
EXTI_voidInt0SetCallBack(&INT0_ISR);
      94:	81 e5       	ldi	r24, 0x51	; 81
      96:	90 e0       	ldi	r25, 0x00	; 0
      98:	0e 94 44 02 	call	0x488	; 0x488 <EXTI_voidInt0SetCallBack>
GIE_VidInit();
      9c:	0e 94 13 03 	call	0x626	; 0x626 <GIE_VidInit>
      a0:	ff cf       	rjmp	.-2      	; 0xa0 <main+0x24>

000000a2 <INT0_ISR>:
while (1)
{

}
}
void INT0_ISR(void){
      a2:	df 93       	push	r29
      a4:	cf 93       	push	r28
      a6:	cd b7       	in	r28, 0x3d	; 61
      a8:	de b7       	in	r29, 0x3e	; 62
	Dio_enuWritechannal(DIO_Channal1,DIO_HIGH);
      aa:	81 e0       	ldi	r24, 0x01	; 1
      ac:	61 e0       	ldi	r22, 0x01	; 1
      ae:	0e 94 21 03 	call	0x642	; 0x642 <Dio_enuWritechannal>
}
      b2:	cf 91       	pop	r28
      b4:	df 91       	pop	r29
      b6:	08 95       	ret

000000b8 <EXTI_voidInt0Init>:
/* Global Pointer To Function To Hold INT1 ISR Address */
void (*Global_pvINT1NotFunction)(void)= NULL;
/* Global Pointer To Function To Hold INT2 ISR Address */
void (*Global_pvINT2NotFunction)(void)= NULL;

void EXTI_voidInt0Init(void){
      b8:	df 93       	push	r29
      ba:	cf 93       	push	r28
      bc:	cd b7       	in	r28, 0x3d	; 61
      be:	de b7       	in	r29, 0x3e	; 62
          #if EXTI_INT0 == FALLIND_EDGE
			SET_BIT(MCUCR,MCUCR_ISC01);
      c0:	a5 e5       	ldi	r26, 0x55	; 85
      c2:	b0 e0       	ldi	r27, 0x00	; 0
      c4:	e5 e5       	ldi	r30, 0x55	; 85
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	80 81       	ld	r24, Z
      ca:	82 60       	ori	r24, 0x02	; 2
      cc:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC00);
      ce:	a5 e5       	ldi	r26, 0x55	; 85
      d0:	b0 e0       	ldi	r27, 0x00	; 0
      d2:	e5 e5       	ldi	r30, 0x55	; 85
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	80 81       	ld	r24, Z
      d8:	8e 7f       	andi	r24, 0xFE	; 254
      da:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
			SET_BIT(MCUCR,MCUCR_ISC00);
           #endif
	/* check peripheral interrrupt enable initial state */
#if EXTI_INT0_State == ENABLE
	      SET_BIT(GICR,GICR_INT0);
      dc:	ab e5       	ldi	r26, 0x5B	; 91
      de:	b0 e0       	ldi	r27, 0x00	; 0
      e0:	eb e5       	ldi	r30, 0x5B	; 91
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 64       	ori	r24, 0x40	; 64
      e8:	8c 93       	st	X, r24
#elif EXTI_INT1_State == DISABLE
	      CLR_BIT(GICR,GICR_INT0);
#endif
}
      ea:	cf 91       	pop	r28
      ec:	df 91       	pop	r29
      ee:	08 95       	ret

000000f0 <EXTI_voidInt1Init>:
void EXTI_voidInt1Init(void){
      f0:	df 93       	push	r29
      f2:	cf 93       	push	r28
      f4:	cd b7       	in	r28, 0x3d	; 61
      f6:	de b7       	in	r29, 0x3e	; 62
        #elif EXTI_INT1 == FALLIND_EDGE
		SET_BIT(MCUCR,MCUCR_ISC11);
		CLR_BIT(MCUCR,MCUCR_ISC10);

        #elif EXTI_INT1 == RISING_EDGE
		SET_BIT(MCUCR,MCUCR_ISC11);
      f8:	a5 e5       	ldi	r26, 0x55	; 85
      fa:	b0 e0       	ldi	r27, 0x00	; 0
      fc:	e5 e5       	ldi	r30, 0x55	; 85
      fe:	f0 e0       	ldi	r31, 0x00	; 0
     100:	80 81       	ld	r24, Z
     102:	88 60       	ori	r24, 0x08	; 8
     104:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC10);
     106:	a5 e5       	ldi	r26, 0x55	; 85
     108:	b0 e0       	ldi	r27, 0x00	; 0
     10a:	e5 e5       	ldi	r30, 0x55	; 85
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	80 81       	ld	r24, Z
     110:	84 60       	ori	r24, 0x04	; 4
     112:	8c 93       	st	X, r24
        #endif
		/* check peripheral interrrupt enable initial state */
#if EXTI_INT1_State == ENABLE
			SET_BIT(GICR,GICR_INT1);
#elif  EXTI_INT1_State == DISABLE
			CLR_BIT(GICR,GICR_INT1);
     114:	ab e5       	ldi	r26, 0x5B	; 91
     116:	b0 e0       	ldi	r27, 0x00	; 0
     118:	eb e5       	ldi	r30, 0x5B	; 91
     11a:	f0 e0       	ldi	r31, 0x00	; 0
     11c:	80 81       	ld	r24, Z
     11e:	8f 77       	andi	r24, 0x7F	; 127
     120:	8c 93       	st	X, r24
#endif
}
     122:	cf 91       	pop	r28
     124:	df 91       	pop	r29
     126:	08 95       	ret

00000128 <EXTI_voidInt2Init>:
void EXTI_voidInt2Init(void){
     128:	df 93       	push	r29
     12a:	cf 93       	push	r28
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
       #if EXTI_INT2 == FALLIND_EDGE
		CLR_BIT(MCUCSR,MCUCSR_ISC2);
     130:	a4 e5       	ldi	r26, 0x54	; 84
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	e4 e5       	ldi	r30, 0x54	; 84
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	8f 7b       	andi	r24, 0xBF	; 191
     13c:	8c 93       	st	X, r24
        #endif
		/* check peripheral interrrupt enable initial state */
#if EXTI_INT2_State == ENABLE
		SET_BIT(GICR,GICR_INT2);
#elif  EXTI_INT2_State == DISABLE
		CLR_BIT(GICR,GICR_INT2);
     13e:	ab e5       	ldi	r26, 0x5B	; 91
     140:	b0 e0       	ldi	r27, 0x00	; 0
     142:	eb e5       	ldi	r30, 0x5B	; 91
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	8f 7d       	andi	r24, 0xDF	; 223
     14a:	8c 93       	st	X, r24
#endif
}
     14c:	cf 91       	pop	r28
     14e:	df 91       	pop	r29
     150:	08 95       	ret

00000152 <EXTI_voidSetInt0SenseControl>:
EXIT_tenuErrorStatus EXTI_voidSetInt0SenseControl(u8 Copy_u8SenseControl){
     152:	df 93       	push	r29
     154:	cf 93       	push	r28
     156:	00 d0       	rcall	.+0      	; 0x158 <EXTI_voidSetInt0SenseControl+0x6>
     158:	00 d0       	rcall	.+0      	; 0x15a <EXTI_voidSetInt0SenseControl+0x8>
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
     15e:	8a 83       	std	Y+2, r24	; 0x02
	u8 State_u8Error = EXIT_EnmOk;
     160:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8SenseControl){
     162:	8a 81       	ldd	r24, Y+2	; 0x02
     164:	28 2f       	mov	r18, r24
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	3c 83       	std	Y+4, r19	; 0x04
     16a:	2b 83       	std	Y+3, r18	; 0x03
     16c:	8b 81       	ldd	r24, Y+3	; 0x03
     16e:	9c 81       	ldd	r25, Y+4	; 0x04
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	91 05       	cpc	r25, r1
     174:	09 f4       	brne	.+2      	; 0x178 <EXTI_voidSetInt0SenseControl+0x26>
     176:	41 c0       	rjmp	.+130    	; 0x1fa <EXTI_voidSetInt0SenseControl+0xa8>
     178:	2b 81       	ldd	r18, Y+3	; 0x03
     17a:	3c 81       	ldd	r19, Y+4	; 0x04
     17c:	22 30       	cpi	r18, 0x02	; 2
     17e:	31 05       	cpc	r19, r1
     180:	2c f4       	brge	.+10     	; 0x18c <EXTI_voidSetInt0SenseControl+0x3a>
     182:	8b 81       	ldd	r24, Y+3	; 0x03
     184:	9c 81       	ldd	r25, Y+4	; 0x04
     186:	00 97       	sbiw	r24, 0x00	; 0
     188:	49 f1       	breq	.+82     	; 0x1dc <EXTI_voidSetInt0SenseControl+0x8a>
     18a:	46 c0       	rjmp	.+140    	; 0x218 <EXTI_voidSetInt0SenseControl+0xc6>
     18c:	2b 81       	ldd	r18, Y+3	; 0x03
     18e:	3c 81       	ldd	r19, Y+4	; 0x04
     190:	22 30       	cpi	r18, 0x02	; 2
     192:	31 05       	cpc	r19, r1
     194:	a1 f0       	breq	.+40     	; 0x1be <EXTI_voidSetInt0SenseControl+0x6c>
     196:	8b 81       	ldd	r24, Y+3	; 0x03
     198:	9c 81       	ldd	r25, Y+4	; 0x04
     19a:	83 30       	cpi	r24, 0x03	; 3
     19c:	91 05       	cpc	r25, r1
     19e:	e1 f5       	brne	.+120    	; 0x218 <EXTI_voidSetInt0SenseControl+0xc6>
	case Low:
		CLR_BIT(MCUCR,MCUCR_ISC00);
     1a0:	a5 e5       	ldi	r26, 0x55	; 85
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	e5 e5       	ldi	r30, 0x55	; 85
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	8e 7f       	andi	r24, 0xFE	; 254
     1ac:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC01);
     1ae:	a5 e5       	ldi	r26, 0x55	; 85
     1b0:	b0 e0       	ldi	r27, 0x00	; 0
     1b2:	e5 e5       	ldi	r30, 0x55	; 85
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	8d 7f       	andi	r24, 0xFD	; 253
     1ba:	8c 93       	st	X, r24
     1bc:	2f c0       	rjmp	.+94     	; 0x21c <EXTI_voidSetInt0SenseControl+0xca>
		break;
	case ON_CHANGE:
		SET_BIT(MCUCR,MCUCR_ISC00);
     1be:	a5 e5       	ldi	r26, 0x55	; 85
     1c0:	b0 e0       	ldi	r27, 0x00	; 0
     1c2:	e5 e5       	ldi	r30, 0x55	; 85
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	80 81       	ld	r24, Z
     1c8:	81 60       	ori	r24, 0x01	; 1
     1ca:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC01);
     1cc:	a5 e5       	ldi	r26, 0x55	; 85
     1ce:	b0 e0       	ldi	r27, 0x00	; 0
     1d0:	e5 e5       	ldi	r30, 0x55	; 85
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	8d 7f       	andi	r24, 0xFD	; 253
     1d8:	8c 93       	st	X, r24
     1da:	20 c0       	rjmp	.+64     	; 0x21c <EXTI_voidSetInt0SenseControl+0xca>
	    break;
	case FALLIND_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC01);
     1dc:	a5 e5       	ldi	r26, 0x55	; 85
     1de:	b0 e0       	ldi	r27, 0x00	; 0
     1e0:	e5 e5       	ldi	r30, 0x55	; 85
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	82 60       	ori	r24, 0x02	; 2
     1e8:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC00);
     1ea:	a5 e5       	ldi	r26, 0x55	; 85
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	e5 e5       	ldi	r30, 0x55	; 85
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	8e 7f       	andi	r24, 0xFE	; 254
     1f6:	8c 93       	st	X, r24
     1f8:	11 c0       	rjmp	.+34     	; 0x21c <EXTI_voidSetInt0SenseControl+0xca>
	    break;
	case RISING_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC01);
     1fa:	a5 e5       	ldi	r26, 0x55	; 85
     1fc:	b0 e0       	ldi	r27, 0x00	; 0
     1fe:	e5 e5       	ldi	r30, 0x55	; 85
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	80 81       	ld	r24, Z
     204:	82 60       	ori	r24, 0x02	; 2
     206:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC00);
     208:	a5 e5       	ldi	r26, 0x55	; 85
     20a:	b0 e0       	ldi	r27, 0x00	; 0
     20c:	e5 e5       	ldi	r30, 0x55	; 85
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	81 60       	ori	r24, 0x01	; 1
     214:	8c 93       	st	X, r24
     216:	02 c0       	rjmp	.+4      	; 0x21c <EXTI_voidSetInt0SenseControl+0xca>
		break;
	default: State_u8Error = EXIT_EnmControlLevelError;
     218:	82 e0       	ldi	r24, 0x02	; 2
     21a:	89 83       	std	Y+1, r24	; 0x01

	}
	return State_u8Error;
     21c:	89 81       	ldd	r24, Y+1	; 0x01
}
     21e:	0f 90       	pop	r0
     220:	0f 90       	pop	r0
     222:	0f 90       	pop	r0
     224:	0f 90       	pop	r0
     226:	cf 91       	pop	r28
     228:	df 91       	pop	r29
     22a:	08 95       	ret

0000022c <EXTI_voidSetInt1SenseControl>:
EXIT_tenuErrorStatus EXTI_voidSetInt1SenseControl(u8 Copy_u8SenseControl){
     22c:	df 93       	push	r29
     22e:	cf 93       	push	r28
     230:	00 d0       	rcall	.+0      	; 0x232 <EXTI_voidSetInt1SenseControl+0x6>
     232:	00 d0       	rcall	.+0      	; 0x234 <EXTI_voidSetInt1SenseControl+0x8>
     234:	cd b7       	in	r28, 0x3d	; 61
     236:	de b7       	in	r29, 0x3e	; 62
     238:	8a 83       	std	Y+2, r24	; 0x02
	u8 State_u8Error = EXIT_EnmOk;
     23a:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8SenseControl){
     23c:	8a 81       	ldd	r24, Y+2	; 0x02
     23e:	28 2f       	mov	r18, r24
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	3c 83       	std	Y+4, r19	; 0x04
     244:	2b 83       	std	Y+3, r18	; 0x03
     246:	8b 81       	ldd	r24, Y+3	; 0x03
     248:	9c 81       	ldd	r25, Y+4	; 0x04
     24a:	81 30       	cpi	r24, 0x01	; 1
     24c:	91 05       	cpc	r25, r1
     24e:	09 f4       	brne	.+2      	; 0x252 <EXTI_voidSetInt1SenseControl+0x26>
     250:	41 c0       	rjmp	.+130    	; 0x2d4 <EXTI_voidSetInt1SenseControl+0xa8>
     252:	2b 81       	ldd	r18, Y+3	; 0x03
     254:	3c 81       	ldd	r19, Y+4	; 0x04
     256:	22 30       	cpi	r18, 0x02	; 2
     258:	31 05       	cpc	r19, r1
     25a:	2c f4       	brge	.+10     	; 0x266 <EXTI_voidSetInt1SenseControl+0x3a>
     25c:	8b 81       	ldd	r24, Y+3	; 0x03
     25e:	9c 81       	ldd	r25, Y+4	; 0x04
     260:	00 97       	sbiw	r24, 0x00	; 0
     262:	49 f1       	breq	.+82     	; 0x2b6 <EXTI_voidSetInt1SenseControl+0x8a>
     264:	46 c0       	rjmp	.+140    	; 0x2f2 <EXTI_voidSetInt1SenseControl+0xc6>
     266:	2b 81       	ldd	r18, Y+3	; 0x03
     268:	3c 81       	ldd	r19, Y+4	; 0x04
     26a:	22 30       	cpi	r18, 0x02	; 2
     26c:	31 05       	cpc	r19, r1
     26e:	a1 f0       	breq	.+40     	; 0x298 <EXTI_voidSetInt1SenseControl+0x6c>
     270:	8b 81       	ldd	r24, Y+3	; 0x03
     272:	9c 81       	ldd	r25, Y+4	; 0x04
     274:	83 30       	cpi	r24, 0x03	; 3
     276:	91 05       	cpc	r25, r1
     278:	e1 f5       	brne	.+120    	; 0x2f2 <EXTI_voidSetInt1SenseControl+0xc6>
	case Low:
		CLR_BIT(MCUCR,MCUCR_ISC10);
     27a:	a5 e5       	ldi	r26, 0x55	; 85
     27c:	b0 e0       	ldi	r27, 0x00	; 0
     27e:	e5 e5       	ldi	r30, 0x55	; 85
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	8b 7f       	andi	r24, 0xFB	; 251
     286:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC11);
     288:	a5 e5       	ldi	r26, 0x55	; 85
     28a:	b0 e0       	ldi	r27, 0x00	; 0
     28c:	e5 e5       	ldi	r30, 0x55	; 85
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	80 81       	ld	r24, Z
     292:	87 7f       	andi	r24, 0xF7	; 247
     294:	8c 93       	st	X, r24
     296:	2f c0       	rjmp	.+94     	; 0x2f6 <EXTI_voidSetInt1SenseControl+0xca>
		break;
	case ON_CHANGE:
		SET_BIT(MCUCR,MCUCR_ISC10);
     298:	a5 e5       	ldi	r26, 0x55	; 85
     29a:	b0 e0       	ldi	r27, 0x00	; 0
     29c:	e5 e5       	ldi	r30, 0x55	; 85
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	80 81       	ld	r24, Z
     2a2:	84 60       	ori	r24, 0x04	; 4
     2a4:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC11);
     2a6:	a5 e5       	ldi	r26, 0x55	; 85
     2a8:	b0 e0       	ldi	r27, 0x00	; 0
     2aa:	e5 e5       	ldi	r30, 0x55	; 85
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	87 7f       	andi	r24, 0xF7	; 247
     2b2:	8c 93       	st	X, r24
     2b4:	20 c0       	rjmp	.+64     	; 0x2f6 <EXTI_voidSetInt1SenseControl+0xca>
	    break;
	case FALLIND_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC11);
     2b6:	a5 e5       	ldi	r26, 0x55	; 85
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	e5 e5       	ldi	r30, 0x55	; 85
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	80 81       	ld	r24, Z
     2c0:	88 60       	ori	r24, 0x08	; 8
     2c2:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC10);
     2c4:	a5 e5       	ldi	r26, 0x55	; 85
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	e5 e5       	ldi	r30, 0x55	; 85
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	8b 7f       	andi	r24, 0xFB	; 251
     2d0:	8c 93       	st	X, r24
     2d2:	11 c0       	rjmp	.+34     	; 0x2f6 <EXTI_voidSetInt1SenseControl+0xca>
	    break;
	case RISING_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC11);
     2d4:	a5 e5       	ldi	r26, 0x55	; 85
     2d6:	b0 e0       	ldi	r27, 0x00	; 0
     2d8:	e5 e5       	ldi	r30, 0x55	; 85
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	80 81       	ld	r24, Z
     2de:	88 60       	ori	r24, 0x08	; 8
     2e0:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC10);
     2e2:	a5 e5       	ldi	r26, 0x55	; 85
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	e5 e5       	ldi	r30, 0x55	; 85
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	80 81       	ld	r24, Z
     2ec:	84 60       	ori	r24, 0x04	; 4
     2ee:	8c 93       	st	X, r24
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <EXTI_voidSetInt1SenseControl+0xca>
		break;
	default: State_u8Error = EXIT_EnmControlLevelError;
     2f2:	82 e0       	ldi	r24, 0x02	; 2
     2f4:	89 83       	std	Y+1, r24	; 0x01
	}
	return State_u8Error;
     2f6:	89 81       	ldd	r24, Y+1	; 0x01
}
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	cf 91       	pop	r28
     302:	df 91       	pop	r29
     304:	08 95       	ret

00000306 <EXTI_voidSetInt2SenseControl>:
EXIT_tenuErrorStatus EXTI_voidSetInt2SenseControl(u8 Copy_u8SenseControl){
     306:	df 93       	push	r29
     308:	cf 93       	push	r28
     30a:	00 d0       	rcall	.+0      	; 0x30c <EXTI_voidSetInt2SenseControl+0x6>
     30c:	00 d0       	rcall	.+0      	; 0x30e <EXTI_voidSetInt2SenseControl+0x8>
     30e:	cd b7       	in	r28, 0x3d	; 61
     310:	de b7       	in	r29, 0x3e	; 62
     312:	8a 83       	std	Y+2, r24	; 0x02
	u8 State_u8Error = EXIT_EnmOk;
     314:	19 82       	std	Y+1, r1	; 0x01
		switch (Copy_u8SenseControl){
     316:	8a 81       	ldd	r24, Y+2	; 0x02
     318:	28 2f       	mov	r18, r24
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	3c 83       	std	Y+4, r19	; 0x04
     31e:	2b 83       	std	Y+3, r18	; 0x03
     320:	8b 81       	ldd	r24, Y+3	; 0x03
     322:	9c 81       	ldd	r25, Y+4	; 0x04
     324:	00 97       	sbiw	r24, 0x00	; 0
     326:	31 f0       	breq	.+12     	; 0x334 <EXTI_voidSetInt2SenseControl+0x2e>
     328:	2b 81       	ldd	r18, Y+3	; 0x03
     32a:	3c 81       	ldd	r19, Y+4	; 0x04
     32c:	21 30       	cpi	r18, 0x01	; 1
     32e:	31 05       	cpc	r19, r1
     330:	49 f0       	breq	.+18     	; 0x344 <EXTI_voidSetInt2SenseControl+0x3e>
     332:	10 c0       	rjmp	.+32     	; 0x354 <EXTI_voidSetInt2SenseControl+0x4e>
		case FALLIND_EDGE:
			CLR_BIT(MCUCSR,MCUCSR_ISC2);
     334:	a4 e5       	ldi	r26, 0x54	; 84
     336:	b0 e0       	ldi	r27, 0x00	; 0
     338:	e4 e5       	ldi	r30, 0x54	; 84
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	8f 7b       	andi	r24, 0xBF	; 191
     340:	8c 93       	st	X, r24
     342:	0a c0       	rjmp	.+20     	; 0x358 <EXTI_voidSetInt2SenseControl+0x52>
		    break;
		case RISING_EDGE:
			SET_BIT(MCUCSR,MCUCSR_ISC2);
     344:	a4 e5       	ldi	r26, 0x54	; 84
     346:	b0 e0       	ldi	r27, 0x00	; 0
     348:	e4 e5       	ldi	r30, 0x54	; 84
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 81       	ld	r24, Z
     34e:	80 64       	ori	r24, 0x40	; 64
     350:	8c 93       	st	X, r24
     352:	02 c0       	rjmp	.+4      	; 0x358 <EXTI_voidSetInt2SenseControl+0x52>
			break;
		default: State_u8Error = EXIT_EnmControlLevelError;
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	89 83       	std	Y+1, r24	; 0x01
		}
		return State_u8Error;
     358:	89 81       	ldd	r24, Y+1	; 0x01
}
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	cf 91       	pop	r28
     364:	df 91       	pop	r29
     366:	08 95       	ret

00000368 <EXTI_voidInt0Control>:
EXIT_tenuErrorStatus EXTI_voidInt0Control(u8 Copy_u8Int0State){
     368:	df 93       	push	r29
     36a:	cf 93       	push	r28
     36c:	00 d0       	rcall	.+0      	; 0x36e <EXTI_voidInt0Control+0x6>
     36e:	00 d0       	rcall	.+0      	; 0x370 <EXTI_voidInt0Control+0x8>
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	8a 83       	std	Y+2, r24	; 0x02
	u8 State_u8Error = EXIT_EnmOk;
     376:	19 82       	std	Y+1, r1	; 0x01
			switch (Copy_u8Int0State){
     378:	8a 81       	ldd	r24, Y+2	; 0x02
     37a:	28 2f       	mov	r18, r24
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	3c 83       	std	Y+4, r19	; 0x04
     380:	2b 83       	std	Y+3, r18	; 0x03
     382:	8b 81       	ldd	r24, Y+3	; 0x03
     384:	9c 81       	ldd	r25, Y+4	; 0x04
     386:	00 97       	sbiw	r24, 0x00	; 0
     388:	69 f0       	breq	.+26     	; 0x3a4 <EXTI_voidInt0Control+0x3c>
     38a:	2b 81       	ldd	r18, Y+3	; 0x03
     38c:	3c 81       	ldd	r19, Y+4	; 0x04
     38e:	21 30       	cpi	r18, 0x01	; 1
     390:	31 05       	cpc	r19, r1
     392:	81 f4       	brne	.+32     	; 0x3b4 <EXTI_voidInt0Control+0x4c>
			case ENABLE:
				SET_BIT(GICR,GICR_INT0);
     394:	ab e5       	ldi	r26, 0x5B	; 91
     396:	b0 e0       	ldi	r27, 0x00	; 0
     398:	eb e5       	ldi	r30, 0x5B	; 91
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	80 81       	ld	r24, Z
     39e:	80 64       	ori	r24, 0x40	; 64
     3a0:	8c 93       	st	X, r24
     3a2:	0a c0       	rjmp	.+20     	; 0x3b8 <EXTI_voidInt0Control+0x50>
			    break;
			case DISENABLE:
				CLR_BIT(GICR,GICR_INT0);
     3a4:	ab e5       	ldi	r26, 0x5B	; 91
     3a6:	b0 e0       	ldi	r27, 0x00	; 0
     3a8:	eb e5       	ldi	r30, 0x5B	; 91
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	8f 7b       	andi	r24, 0xBF	; 191
     3b0:	8c 93       	st	X, r24
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <EXTI_voidInt0Control+0x50>
				break;
			default: State_u8Error = EXIT_EnmControlError;
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	89 83       	std	Y+1, r24	; 0x01
			}
		return State_u8Error;
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
}
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	cf 91       	pop	r28
     3c4:	df 91       	pop	r29
     3c6:	08 95       	ret

000003c8 <EXTI_voidInt1Control>:
EXIT_tenuErrorStatus EXTI_voidInt1Control(u8 Copy_u8Int1State){
     3c8:	df 93       	push	r29
     3ca:	cf 93       	push	r28
     3cc:	00 d0       	rcall	.+0      	; 0x3ce <EXTI_voidInt1Control+0x6>
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <EXTI_voidInt1Control+0x8>
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	8a 83       	std	Y+2, r24	; 0x02
	u8 State_u8Error = EXIT_EnmOk;
     3d6:	19 82       	std	Y+1, r1	; 0x01
				switch (Copy_u8Int1State){
     3d8:	8a 81       	ldd	r24, Y+2	; 0x02
     3da:	28 2f       	mov	r18, r24
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	3c 83       	std	Y+4, r19	; 0x04
     3e0:	2b 83       	std	Y+3, r18	; 0x03
     3e2:	8b 81       	ldd	r24, Y+3	; 0x03
     3e4:	9c 81       	ldd	r25, Y+4	; 0x04
     3e6:	00 97       	sbiw	r24, 0x00	; 0
     3e8:	69 f0       	breq	.+26     	; 0x404 <EXTI_voidInt1Control+0x3c>
     3ea:	2b 81       	ldd	r18, Y+3	; 0x03
     3ec:	3c 81       	ldd	r19, Y+4	; 0x04
     3ee:	21 30       	cpi	r18, 0x01	; 1
     3f0:	31 05       	cpc	r19, r1
     3f2:	81 f4       	brne	.+32     	; 0x414 <EXTI_voidInt1Control+0x4c>
				case ENABLE:
					SET_BIT(GICR,GICR_INT1);
     3f4:	ab e5       	ldi	r26, 0x5B	; 91
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	eb e5       	ldi	r30, 0x5B	; 91
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	80 81       	ld	r24, Z
     3fe:	80 68       	ori	r24, 0x80	; 128
     400:	8c 93       	st	X, r24
     402:	0a c0       	rjmp	.+20     	; 0x418 <EXTI_voidInt1Control+0x50>
				    break;
				case DISENABLE:
					CLR_BIT(GICR,GICR_INT1);
     404:	ab e5       	ldi	r26, 0x5B	; 91
     406:	b0 e0       	ldi	r27, 0x00	; 0
     408:	eb e5       	ldi	r30, 0x5B	; 91
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	8f 77       	andi	r24, 0x7F	; 127
     410:	8c 93       	st	X, r24
     412:	02 c0       	rjmp	.+4      	; 0x418 <EXTI_voidInt1Control+0x50>
					break;
				default: State_u8Error = EXIT_EnmControlError;
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	89 83       	std	Y+1, r24	; 0x01
				}
			return State_u8Error;
     418:	89 81       	ldd	r24, Y+1	; 0x01
}
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	cf 91       	pop	r28
     424:	df 91       	pop	r29
     426:	08 95       	ret

00000428 <EXTI_voidInt2Control>:
EXIT_tenuErrorStatus EXTI_voidInt2Control(u8 Copy_u8Int2State){
     428:	df 93       	push	r29
     42a:	cf 93       	push	r28
     42c:	00 d0       	rcall	.+0      	; 0x42e <EXTI_voidInt2Control+0x6>
     42e:	00 d0       	rcall	.+0      	; 0x430 <EXTI_voidInt2Control+0x8>
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	8a 83       	std	Y+2, r24	; 0x02
	u8 State_u8Error = EXIT_EnmOk;
     436:	19 82       	std	Y+1, r1	; 0x01
				switch (Copy_u8Int2State){
     438:	8a 81       	ldd	r24, Y+2	; 0x02
     43a:	28 2f       	mov	r18, r24
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	3c 83       	std	Y+4, r19	; 0x04
     440:	2b 83       	std	Y+3, r18	; 0x03
     442:	8b 81       	ldd	r24, Y+3	; 0x03
     444:	9c 81       	ldd	r25, Y+4	; 0x04
     446:	00 97       	sbiw	r24, 0x00	; 0
     448:	69 f0       	breq	.+26     	; 0x464 <EXTI_voidInt2Control+0x3c>
     44a:	2b 81       	ldd	r18, Y+3	; 0x03
     44c:	3c 81       	ldd	r19, Y+4	; 0x04
     44e:	21 30       	cpi	r18, 0x01	; 1
     450:	31 05       	cpc	r19, r1
     452:	81 f4       	brne	.+32     	; 0x474 <EXTI_voidInt2Control+0x4c>
				case ENABLE:
					SET_BIT(GICR,GICR_INT2);
     454:	ab e5       	ldi	r26, 0x5B	; 91
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	eb e5       	ldi	r30, 0x5B	; 91
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	80 81       	ld	r24, Z
     45e:	80 62       	ori	r24, 0x20	; 32
     460:	8c 93       	st	X, r24
     462:	0a c0       	rjmp	.+20     	; 0x478 <EXTI_voidInt2Control+0x50>
				    break;
				case DISENABLE:
					CLR_BIT(GICR,GICR_INT2);
     464:	ab e5       	ldi	r26, 0x5B	; 91
     466:	b0 e0       	ldi	r27, 0x00	; 0
     468:	eb e5       	ldi	r30, 0x5B	; 91
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	8f 7d       	andi	r24, 0xDF	; 223
     470:	8c 93       	st	X, r24
     472:	02 c0       	rjmp	.+4      	; 0x478 <EXTI_voidInt2Control+0x50>
					break;
				default: State_u8Error = EXIT_EnmControlError;
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	89 83       	std	Y+1, r24	; 0x01
				}
			return State_u8Error;
     478:	89 81       	ldd	r24, Y+1	; 0x01
}
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	cf 91       	pop	r28
     484:	df 91       	pop	r29
     486:	08 95       	ret

00000488 <EXTI_voidInt0SetCallBack>:
void EXTI_voidInt0SetCallBack(void (*Copy_pvNotificationFunction)(void)){
     488:	df 93       	push	r29
     48a:	cf 93       	push	r28
     48c:	00 d0       	rcall	.+0      	; 0x48e <EXTI_voidInt0SetCallBack+0x6>
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	9a 83       	std	Y+2, r25	; 0x02
     494:	89 83       	std	Y+1, r24	; 0x01
	Global_pvINT0NotFunction = Copy_pvNotificationFunction;
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	9a 81       	ldd	r25, Y+2	; 0x02
     49a:	90 93 61 00 	sts	0x0061, r25
     49e:	80 93 60 00 	sts	0x0060, r24
}
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	cf 91       	pop	r28
     4a8:	df 91       	pop	r29
     4aa:	08 95       	ret

000004ac <EXTI_voidInt1SetCallBack>:
void EXTI_voidInt1SetCallBack(void (*Copy_pvNotificationFunction)(void)){
     4ac:	df 93       	push	r29
     4ae:	cf 93       	push	r28
     4b0:	00 d0       	rcall	.+0      	; 0x4b2 <EXTI_voidInt1SetCallBack+0x6>
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
     4b6:	9a 83       	std	Y+2, r25	; 0x02
     4b8:	89 83       	std	Y+1, r24	; 0x01
	Global_pvINT1NotFunction = Copy_pvNotificationFunction;
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	9a 81       	ldd	r25, Y+2	; 0x02
     4be:	90 93 63 00 	sts	0x0063, r25
     4c2:	80 93 62 00 	sts	0x0062, r24
}
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	cf 91       	pop	r28
     4cc:	df 91       	pop	r29
     4ce:	08 95       	ret

000004d0 <EXTI_voidInt2SetCallBack>:
void EXTI_voidInt2SetCallBack(void (*Copy_pvNotificationFunction)(void)){
     4d0:	df 93       	push	r29
     4d2:	cf 93       	push	r28
     4d4:	00 d0       	rcall	.+0      	; 0x4d6 <EXTI_voidInt2SetCallBack+0x6>
     4d6:	cd b7       	in	r28, 0x3d	; 61
     4d8:	de b7       	in	r29, 0x3e	; 62
     4da:	9a 83       	std	Y+2, r25	; 0x02
     4dc:	89 83       	std	Y+1, r24	; 0x01
	Global_pvINT2NotFunction = Copy_pvNotificationFunction;
     4de:	89 81       	ldd	r24, Y+1	; 0x01
     4e0:	9a 81       	ldd	r25, Y+2	; 0x02
     4e2:	90 93 65 00 	sts	0x0065, r25
     4e6:	80 93 64 00 	sts	0x0064, r24
}
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	cf 91       	pop	r28
     4f0:	df 91       	pop	r29
     4f2:	08 95       	ret

000004f4 <__vector_1>:
 void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
     4f4:	1f 92       	push	r1
     4f6:	0f 92       	push	r0
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	0f 92       	push	r0
     4fc:	11 24       	eor	r1, r1
     4fe:	2f 93       	push	r18
     500:	3f 93       	push	r19
     502:	4f 93       	push	r20
     504:	5f 93       	push	r21
     506:	6f 93       	push	r22
     508:	7f 93       	push	r23
     50a:	8f 93       	push	r24
     50c:	9f 93       	push	r25
     50e:	af 93       	push	r26
     510:	bf 93       	push	r27
     512:	ef 93       	push	r30
     514:	ff 93       	push	r31
     516:	df 93       	push	r29
     518:	cf 93       	push	r28
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvINT0NotFunction != NULL){
     51e:	80 91 60 00 	lds	r24, 0x0060
     522:	90 91 61 00 	lds	r25, 0x0061
     526:	00 97       	sbiw	r24, 0x00	; 0
     528:	29 f0       	breq	.+10     	; 0x534 <__vector_1+0x40>
		Global_pvINT0NotFunction();
     52a:	e0 91 60 00 	lds	r30, 0x0060
     52e:	f0 91 61 00 	lds	r31, 0x0061
     532:	09 95       	icall
	}
}
     534:	cf 91       	pop	r28
     536:	df 91       	pop	r29
     538:	ff 91       	pop	r31
     53a:	ef 91       	pop	r30
     53c:	bf 91       	pop	r27
     53e:	af 91       	pop	r26
     540:	9f 91       	pop	r25
     542:	8f 91       	pop	r24
     544:	7f 91       	pop	r23
     546:	6f 91       	pop	r22
     548:	5f 91       	pop	r21
     54a:	4f 91       	pop	r20
     54c:	3f 91       	pop	r19
     54e:	2f 91       	pop	r18
     550:	0f 90       	pop	r0
     552:	0f be       	out	0x3f, r0	; 63
     554:	0f 90       	pop	r0
     556:	1f 90       	pop	r1
     558:	18 95       	reti

0000055a <__vector_2>:
 void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
     55a:	1f 92       	push	r1
     55c:	0f 92       	push	r0
     55e:	0f b6       	in	r0, 0x3f	; 63
     560:	0f 92       	push	r0
     562:	11 24       	eor	r1, r1
     564:	2f 93       	push	r18
     566:	3f 93       	push	r19
     568:	4f 93       	push	r20
     56a:	5f 93       	push	r21
     56c:	6f 93       	push	r22
     56e:	7f 93       	push	r23
     570:	8f 93       	push	r24
     572:	9f 93       	push	r25
     574:	af 93       	push	r26
     576:	bf 93       	push	r27
     578:	ef 93       	push	r30
     57a:	ff 93       	push	r31
     57c:	df 93       	push	r29
     57e:	cf 93       	push	r28
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvINT1NotFunction != NULL){
     584:	80 91 62 00 	lds	r24, 0x0062
     588:	90 91 63 00 	lds	r25, 0x0063
     58c:	00 97       	sbiw	r24, 0x00	; 0
     58e:	29 f0       	breq	.+10     	; 0x59a <__vector_2+0x40>
		Global_pvINT1NotFunction();
     590:	e0 91 62 00 	lds	r30, 0x0062
     594:	f0 91 63 00 	lds	r31, 0x0063
     598:	09 95       	icall
	}
}
     59a:	cf 91       	pop	r28
     59c:	df 91       	pop	r29
     59e:	ff 91       	pop	r31
     5a0:	ef 91       	pop	r30
     5a2:	bf 91       	pop	r27
     5a4:	af 91       	pop	r26
     5a6:	9f 91       	pop	r25
     5a8:	8f 91       	pop	r24
     5aa:	7f 91       	pop	r23
     5ac:	6f 91       	pop	r22
     5ae:	5f 91       	pop	r21
     5b0:	4f 91       	pop	r20
     5b2:	3f 91       	pop	r19
     5b4:	2f 91       	pop	r18
     5b6:	0f 90       	pop	r0
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	0f 90       	pop	r0
     5bc:	1f 90       	pop	r1
     5be:	18 95       	reti

000005c0 <__vector_3>:
 void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
     5c0:	1f 92       	push	r1
     5c2:	0f 92       	push	r0
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	0f 92       	push	r0
     5c8:	11 24       	eor	r1, r1
     5ca:	2f 93       	push	r18
     5cc:	3f 93       	push	r19
     5ce:	4f 93       	push	r20
     5d0:	5f 93       	push	r21
     5d2:	6f 93       	push	r22
     5d4:	7f 93       	push	r23
     5d6:	8f 93       	push	r24
     5d8:	9f 93       	push	r25
     5da:	af 93       	push	r26
     5dc:	bf 93       	push	r27
     5de:	ef 93       	push	r30
     5e0:	ff 93       	push	r31
     5e2:	df 93       	push	r29
     5e4:	cf 93       	push	r28
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvINT2NotFunction != NULL){
     5ea:	80 91 64 00 	lds	r24, 0x0064
     5ee:	90 91 65 00 	lds	r25, 0x0065
     5f2:	00 97       	sbiw	r24, 0x00	; 0
     5f4:	29 f0       	breq	.+10     	; 0x600 <__vector_3+0x40>
		Global_pvINT2NotFunction();
     5f6:	e0 91 64 00 	lds	r30, 0x0064
     5fa:	f0 91 65 00 	lds	r31, 0x0065
     5fe:	09 95       	icall
	}
}
     600:	cf 91       	pop	r28
     602:	df 91       	pop	r29
     604:	ff 91       	pop	r31
     606:	ef 91       	pop	r30
     608:	bf 91       	pop	r27
     60a:	af 91       	pop	r26
     60c:	9f 91       	pop	r25
     60e:	8f 91       	pop	r24
     610:	7f 91       	pop	r23
     612:	6f 91       	pop	r22
     614:	5f 91       	pop	r21
     616:	4f 91       	pop	r20
     618:	3f 91       	pop	r19
     61a:	2f 91       	pop	r18
     61c:	0f 90       	pop	r0
     61e:	0f be       	out	0x3f, r0	; 63
     620:	0f 90       	pop	r0
     622:	1f 90       	pop	r1
     624:	18 95       	reti

00000626 <GIE_VidInit>:
#include "../../../4-SERVICS/Bit_utils.h"
#include "../../../4-SERVICS/Std_types.h"
#include "../../4-GIE/Include/GIE.h"
#include "../../4-GIE/Include/GIE_Cfg.h"
#include "../../4-GIE/Include/GIE_Prv.h"
void GIE_VidInit(void){
     626:	df 93       	push	r29
     628:	cf 93       	push	r28
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62

switch (GIE_STATE){
case GIE_ENABLE: SET_BIT(SREG,SREG_I);break;
     62e:	af e5       	ldi	r26, 0x5F	; 95
     630:	b0 e0       	ldi	r27, 0x00	; 0
     632:	ef e5       	ldi	r30, 0x5F	; 95
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	80 81       	ld	r24, Z
     638:	80 68       	ori	r24, 0x80	; 128
     63a:	8c 93       	st	X, r24
case GIE_DIABLE: CLR_BIT(SREG,SREG_I);break;
default : /* do nothig */ break;
}
}
     63c:	cf 91       	pop	r28
     63e:	df 91       	pop	r29
     640:	08 95       	ret

00000642 <Dio_enuWritechannal>:
#include "../../2-DIO/include/DIO.h"
#include "../../2-DIO/include/DIO_Cfg.h"
#include "../../2-DIO/include/DIO_Prv.h"

Dio_tenuErrorStatus Dio_enuWritechannal(u8 Copy_u8ChannalId , u8 Copy_u8Level)
{
     642:	df 93       	push	r29
     644:	cf 93       	push	r28
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
     64a:	27 97       	sbiw	r28, 0x07	; 7
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	de bf       	out	0x3e, r29	; 62
     652:	0f be       	out	0x3f, r0	; 63
     654:	cd bf       	out	0x3d, r28	; 61
     656:	8c 83       	std	Y+4, r24	; 0x04
     658:	6d 83       	std	Y+5, r22	; 0x05
      // set the number of port
	u8 Copy_u8PortId = Copy_u8ChannalId / RIGESTER_SIZE;
     65a:	8c 81       	ldd	r24, Y+4	; 0x04
     65c:	86 95       	lsr	r24
     65e:	86 95       	lsr	r24
     660:	86 95       	lsr	r24
     662:	8b 83       	std	Y+3, r24	; 0x03
	 // set the number of Channals
	u8 ChannalId = Copy_u8ChannalId % RIGESTER_SIZE;
     664:	8c 81       	ldd	r24, Y+4	; 0x04
     666:	87 70       	andi	r24, 0x07	; 7
     668:	8a 83       	std	Y+2, r24	; 0x02

	Dio_tenuErrorStatus Error_state = Dio_EnmDioOk;
     66a:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8ChannalId > NUMBER_CHANNALS )
     66c:	8c 81       	ldd	r24, Y+4	; 0x04
     66e:	81 32       	cpi	r24, 0x21	; 33
     670:	10 f0       	brcs	.+4      	; 0x676 <Dio_enuWritechannal+0x34>
	{
		Error_state = Dio_EnmChannalIdError;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	89 83       	std	Y+1, r24	; 0x01
	}
	switch(Copy_u8PortId)
     676:	8b 81       	ldd	r24, Y+3	; 0x03
     678:	28 2f       	mov	r18, r24
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	3f 83       	std	Y+7, r19	; 0x07
     67e:	2e 83       	std	Y+6, r18	; 0x06
     680:	8e 81       	ldd	r24, Y+6	; 0x06
     682:	9f 81       	ldd	r25, Y+7	; 0x07
     684:	81 30       	cpi	r24, 0x01	; 1
     686:	91 05       	cpc	r25, r1
     688:	09 f4       	brne	.+2      	; 0x68c <Dio_enuWritechannal+0x4a>
     68a:	49 c0       	rjmp	.+146    	; 0x71e <Dio_enuWritechannal+0xdc>
     68c:	2e 81       	ldd	r18, Y+6	; 0x06
     68e:	3f 81       	ldd	r19, Y+7	; 0x07
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 05       	cpc	r19, r1
     694:	2c f4       	brge	.+10     	; 0x6a0 <Dio_enuWritechannal+0x5e>
     696:	8e 81       	ldd	r24, Y+6	; 0x06
     698:	9f 81       	ldd	r25, Y+7	; 0x07
     69a:	00 97       	sbiw	r24, 0x00	; 0
     69c:	71 f0       	breq	.+28     	; 0x6ba <Dio_enuWritechannal+0x78>
     69e:	d5 c0       	rjmp	.+426    	; 0x84a <Dio_enuWritechannal+0x208>
     6a0:	2e 81       	ldd	r18, Y+6	; 0x06
     6a2:	3f 81       	ldd	r19, Y+7	; 0x07
     6a4:	22 30       	cpi	r18, 0x02	; 2
     6a6:	31 05       	cpc	r19, r1
     6a8:	09 f4       	brne	.+2      	; 0x6ac <Dio_enuWritechannal+0x6a>
     6aa:	6b c0       	rjmp	.+214    	; 0x782 <Dio_enuWritechannal+0x140>
     6ac:	8e 81       	ldd	r24, Y+6	; 0x06
     6ae:	9f 81       	ldd	r25, Y+7	; 0x07
     6b0:	83 30       	cpi	r24, 0x03	; 3
     6b2:	91 05       	cpc	r25, r1
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <Dio_enuWritechannal+0x76>
     6b6:	97 c0       	rjmp	.+302    	; 0x7e6 <Dio_enuWritechannal+0x1a4>
     6b8:	c8 c0       	rjmp	.+400    	; 0x84a <Dio_enuWritechannal+0x208>
		{
		case PORTA_REG :
		{
	if (Copy_u8Level ==  DIO_HIGH ) {
     6ba:	8d 81       	ldd	r24, Y+5	; 0x05
     6bc:	81 30       	cpi	r24, 0x01	; 1
     6be:	a1 f4       	brne	.+40     	; 0x6e8 <Dio_enuWritechannal+0xa6>
	        // Set the specified pin to HIGH.
	        SET_BIT(PORTA, ChannalId);
     6c0:	ab e3       	ldi	r26, 0x3B	; 59
     6c2:	b0 e0       	ldi	r27, 0x00	; 0
     6c4:	eb e3       	ldi	r30, 0x3B	; 59
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	48 2f       	mov	r20, r24
     6cc:	8a 81       	ldd	r24, Y+2	; 0x02
     6ce:	28 2f       	mov	r18, r24
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	02 2e       	mov	r0, r18
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <Dio_enuWritechannal+0x9c>
     6da:	88 0f       	add	r24, r24
     6dc:	99 1f       	adc	r25, r25
     6de:	0a 94       	dec	r0
     6e0:	e2 f7       	brpl	.-8      	; 0x6da <Dio_enuWritechannal+0x98>
     6e2:	84 2b       	or	r24, r20
     6e4:	8c 93       	st	X, r24
     6e6:	b3 c0       	rjmp	.+358    	; 0x84e <Dio_enuWritechannal+0x20c>
	    }
	else if (Copy_u8Level == DIO_LOW) {
     6e8:	8d 81       	ldd	r24, Y+5	; 0x05
     6ea:	88 23       	and	r24, r24
     6ec:	a9 f4       	brne	.+42     	; 0x718 <Dio_enuWritechannal+0xd6>
	        // Set the specified pin to LOW.
	        CLR_BIT(PORTA, ChannalId);
     6ee:	ab e3       	ldi	r26, 0x3B	; 59
     6f0:	b0 e0       	ldi	r27, 0x00	; 0
     6f2:	eb e3       	ldi	r30, 0x3B	; 59
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	80 81       	ld	r24, Z
     6f8:	48 2f       	mov	r20, r24
     6fa:	8a 81       	ldd	r24, Y+2	; 0x02
     6fc:	28 2f       	mov	r18, r24
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	02 2e       	mov	r0, r18
     706:	02 c0       	rjmp	.+4      	; 0x70c <Dio_enuWritechannal+0xca>
     708:	88 0f       	add	r24, r24
     70a:	99 1f       	adc	r25, r25
     70c:	0a 94       	dec	r0
     70e:	e2 f7       	brpl	.-8      	; 0x708 <Dio_enuWritechannal+0xc6>
     710:	80 95       	com	r24
     712:	84 23       	and	r24, r20
     714:	8c 93       	st	X, r24
     716:	9b c0       	rjmp	.+310    	; 0x84e <Dio_enuWritechannal+0x20c>
	    }
	else {
	        // Handle an invalid level (it's neither HIGH nor LOW).
	    	Error_state = Dio_EnmChannalLevelError;
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	89 83       	std	Y+1, r24	; 0x01
     71c:	98 c0       	rjmp	.+304    	; 0x84e <Dio_enuWritechannal+0x20c>

	    }
		}break;
		case PORTB_REG :
				{
			if (Copy_u8Level ==  DIO_HIGH ) {
     71e:	8d 81       	ldd	r24, Y+5	; 0x05
     720:	81 30       	cpi	r24, 0x01	; 1
     722:	a1 f4       	brne	.+40     	; 0x74c <Dio_enuWritechannal+0x10a>
			        // Set the specified pin to HIGH.
			        SET_BIT(PORTB,ChannalId);
     724:	a8 e3       	ldi	r26, 0x38	; 56
     726:	b0 e0       	ldi	r27, 0x00	; 0
     728:	e8 e3       	ldi	r30, 0x38	; 56
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	80 81       	ld	r24, Z
     72e:	48 2f       	mov	r20, r24
     730:	8a 81       	ldd	r24, Y+2	; 0x02
     732:	28 2f       	mov	r18, r24
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	02 2e       	mov	r0, r18
     73c:	02 c0       	rjmp	.+4      	; 0x742 <Dio_enuWritechannal+0x100>
     73e:	88 0f       	add	r24, r24
     740:	99 1f       	adc	r25, r25
     742:	0a 94       	dec	r0
     744:	e2 f7       	brpl	.-8      	; 0x73e <Dio_enuWritechannal+0xfc>
     746:	84 2b       	or	r24, r20
     748:	8c 93       	st	X, r24
     74a:	81 c0       	rjmp	.+258    	; 0x84e <Dio_enuWritechannal+0x20c>
			    }
			else if (Copy_u8Level == DIO_LOW) {
     74c:	8d 81       	ldd	r24, Y+5	; 0x05
     74e:	88 23       	and	r24, r24
     750:	a9 f4       	brne	.+42     	; 0x77c <Dio_enuWritechannal+0x13a>
			        // Set the specified pin to LOW.
			        CLR_BIT(PORTB, ChannalId);
     752:	a8 e3       	ldi	r26, 0x38	; 56
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	e8 e3       	ldi	r30, 0x38	; 56
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 81       	ld	r24, Z
     75c:	48 2f       	mov	r20, r24
     75e:	8a 81       	ldd	r24, Y+2	; 0x02
     760:	28 2f       	mov	r18, r24
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	02 2e       	mov	r0, r18
     76a:	02 c0       	rjmp	.+4      	; 0x770 <Dio_enuWritechannal+0x12e>
     76c:	88 0f       	add	r24, r24
     76e:	99 1f       	adc	r25, r25
     770:	0a 94       	dec	r0
     772:	e2 f7       	brpl	.-8      	; 0x76c <Dio_enuWritechannal+0x12a>
     774:	80 95       	com	r24
     776:	84 23       	and	r24, r20
     778:	8c 93       	st	X, r24
     77a:	69 c0       	rjmp	.+210    	; 0x84e <Dio_enuWritechannal+0x20c>
			    }
			else {
			        // Handle an invalid level (it's neither HIGH nor LOW).
			    	Error_state = Dio_EnmChannalLevelError;
     77c:	82 e0       	ldi	r24, 0x02	; 2
     77e:	89 83       	std	Y+1, r24	; 0x01
     780:	66 c0       	rjmp	.+204    	; 0x84e <Dio_enuWritechannal+0x20c>

			    }
				}break;
		case PORTC_REG :
						{
					if (Copy_u8Level ==  DIO_HIGH ) {
     782:	8d 81       	ldd	r24, Y+5	; 0x05
     784:	81 30       	cpi	r24, 0x01	; 1
     786:	a1 f4       	brne	.+40     	; 0x7b0 <Dio_enuWritechannal+0x16e>
					        // Set the specified pin to HIGH.
					        SET_BIT(PORTC, ChannalId);
     788:	a5 e3       	ldi	r26, 0x35	; 53
     78a:	b0 e0       	ldi	r27, 0x00	; 0
     78c:	e5 e3       	ldi	r30, 0x35	; 53
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	80 81       	ld	r24, Z
     792:	48 2f       	mov	r20, r24
     794:	8a 81       	ldd	r24, Y+2	; 0x02
     796:	28 2f       	mov	r18, r24
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	02 2e       	mov	r0, r18
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <Dio_enuWritechannal+0x164>
     7a2:	88 0f       	add	r24, r24
     7a4:	99 1f       	adc	r25, r25
     7a6:	0a 94       	dec	r0
     7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <Dio_enuWritechannal+0x160>
     7aa:	84 2b       	or	r24, r20
     7ac:	8c 93       	st	X, r24
     7ae:	4f c0       	rjmp	.+158    	; 0x84e <Dio_enuWritechannal+0x20c>
					    }
					else if (Copy_u8Level == DIO_LOW) {
     7b0:	8d 81       	ldd	r24, Y+5	; 0x05
     7b2:	88 23       	and	r24, r24
     7b4:	a9 f4       	brne	.+42     	; 0x7e0 <Dio_enuWritechannal+0x19e>
					        // Set the specified pin to LOW.
					        CLR_BIT(PORTC, ChannalId);
     7b6:	a5 e3       	ldi	r26, 0x35	; 53
     7b8:	b0 e0       	ldi	r27, 0x00	; 0
     7ba:	e5 e3       	ldi	r30, 0x35	; 53
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	80 81       	ld	r24, Z
     7c0:	48 2f       	mov	r20, r24
     7c2:	8a 81       	ldd	r24, Y+2	; 0x02
     7c4:	28 2f       	mov	r18, r24
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	02 2e       	mov	r0, r18
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <Dio_enuWritechannal+0x192>
     7d0:	88 0f       	add	r24, r24
     7d2:	99 1f       	adc	r25, r25
     7d4:	0a 94       	dec	r0
     7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <Dio_enuWritechannal+0x18e>
     7d8:	80 95       	com	r24
     7da:	84 23       	and	r24, r20
     7dc:	8c 93       	st	X, r24
     7de:	37 c0       	rjmp	.+110    	; 0x84e <Dio_enuWritechannal+0x20c>
					    }
					else {
					        // Handle an invalid level (it's neither HIGH nor LOW).
					    	Error_state = Dio_EnmChannalLevelError;
     7e0:	82 e0       	ldi	r24, 0x02	; 2
     7e2:	89 83       	std	Y+1, r24	; 0x01
     7e4:	34 c0       	rjmp	.+104    	; 0x84e <Dio_enuWritechannal+0x20c>
					    }
						}break;
		case PORTD_REG :
						{
					if (Copy_u8Level ==  DIO_HIGH ) {
     7e6:	8d 81       	ldd	r24, Y+5	; 0x05
     7e8:	81 30       	cpi	r24, 0x01	; 1
     7ea:	a1 f4       	brne	.+40     	; 0x814 <Dio_enuWritechannal+0x1d2>
					        // Set the specified pin to HIGH.
					        SET_BIT(PORTD, ChannalId);
     7ec:	a2 e3       	ldi	r26, 0x32	; 50
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	e2 e3       	ldi	r30, 0x32	; 50
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	80 81       	ld	r24, Z
     7f6:	48 2f       	mov	r20, r24
     7f8:	8a 81       	ldd	r24, Y+2	; 0x02
     7fa:	28 2f       	mov	r18, r24
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	02 2e       	mov	r0, r18
     804:	02 c0       	rjmp	.+4      	; 0x80a <Dio_enuWritechannal+0x1c8>
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	0a 94       	dec	r0
     80c:	e2 f7       	brpl	.-8      	; 0x806 <Dio_enuWritechannal+0x1c4>
     80e:	84 2b       	or	r24, r20
     810:	8c 93       	st	X, r24
     812:	1d c0       	rjmp	.+58     	; 0x84e <Dio_enuWritechannal+0x20c>
					    }
					else if (Copy_u8Level == DIO_LOW) {
     814:	8d 81       	ldd	r24, Y+5	; 0x05
     816:	88 23       	and	r24, r24
     818:	a9 f4       	brne	.+42     	; 0x844 <Dio_enuWritechannal+0x202>
					        // Set the specified pin to LOW.
					        CLR_BIT(PORTD, ChannalId);
     81a:	a2 e3       	ldi	r26, 0x32	; 50
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e2 e3       	ldi	r30, 0x32	; 50
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	80 81       	ld	r24, Z
     824:	48 2f       	mov	r20, r24
     826:	8a 81       	ldd	r24, Y+2	; 0x02
     828:	28 2f       	mov	r18, r24
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	02 2e       	mov	r0, r18
     832:	02 c0       	rjmp	.+4      	; 0x838 <Dio_enuWritechannal+0x1f6>
     834:	88 0f       	add	r24, r24
     836:	99 1f       	adc	r25, r25
     838:	0a 94       	dec	r0
     83a:	e2 f7       	brpl	.-8      	; 0x834 <Dio_enuWritechannal+0x1f2>
     83c:	80 95       	com	r24
     83e:	84 23       	and	r24, r20
     840:	8c 93       	st	X, r24
     842:	05 c0       	rjmp	.+10     	; 0x84e <Dio_enuWritechannal+0x20c>
					    }
					else {
					        // Handle an invalid level (it's neither HIGH nor LOW).
					    	Error_state = Dio_EnmChannalLevelError;
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	89 83       	std	Y+1, r24	; 0x01
     848:	02 c0       	rjmp	.+4      	; 0x84e <Dio_enuWritechannal+0x20c>

					    }
						}break;
		default : Error_state = Dio_EnmInvalidPortID;break;
     84a:	83 e0       	ldi	r24, 0x03	; 3
     84c:	89 83       	std	Y+1, r24	; 0x01
		}
	return Error_state;
     84e:	89 81       	ldd	r24, Y+1	; 0x01

}
     850:	27 96       	adiw	r28, 0x07	; 7
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
     85c:	cf 91       	pop	r28
     85e:	df 91       	pop	r29
     860:	08 95       	ret

00000862 <Dio_enuReadchannal>:
Dio_tenuErrorStatus Dio_enuReadchannal(u8 Copy_u8ChannalId , pu8 Add_pu8ChannelLevel)
{
     862:	df 93       	push	r29
     864:	cf 93       	push	r28
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	28 97       	sbiw	r28, 0x08	; 8
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	de bf       	out	0x3e, r29	; 62
     872:	0f be       	out	0x3f, r0	; 63
     874:	cd bf       	out	0x3d, r28	; 61
     876:	8c 83       	std	Y+4, r24	; 0x04
     878:	7e 83       	std	Y+6, r23	; 0x06
     87a:	6d 83       	std	Y+5, r22	; 0x05
	// set the number of port
		u8 Copy_u8PortId = Copy_u8ChannalId / RIGESTER_SIZE;
     87c:	8c 81       	ldd	r24, Y+4	; 0x04
     87e:	86 95       	lsr	r24
     880:	86 95       	lsr	r24
     882:	86 95       	lsr	r24
     884:	8b 83       	std	Y+3, r24	; 0x03
		 // set the number of Channals
		u8 ChannalId = Copy_u8ChannalId % RIGESTER_SIZE;
     886:	8c 81       	ldd	r24, Y+4	; 0x04
     888:	87 70       	andi	r24, 0x07	; 7
     88a:	8a 83       	std	Y+2, r24	; 0x02

		Dio_tenuErrorStatus Error_state = Dio_EnmDioOk;
     88c:	19 82       	std	Y+1, r1	; 0x01
			if (Copy_u8ChannalId > NUMBER_CHANNALS )
     88e:	8c 81       	ldd	r24, Y+4	; 0x04
     890:	81 32       	cpi	r24, 0x21	; 33
     892:	10 f0       	brcs	.+4      	; 0x898 <Dio_enuReadchannal+0x36>
			{
				Error_state = Dio_EnmChannalIdError;
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	89 83       	std	Y+1, r24	; 0x01
			}

			switch(Copy_u8PortId)
     898:	8b 81       	ldd	r24, Y+3	; 0x03
     89a:	28 2f       	mov	r18, r24
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	38 87       	std	Y+8, r19	; 0x08
     8a0:	2f 83       	std	Y+7, r18	; 0x07
     8a2:	4f 81       	ldd	r20, Y+7	; 0x07
     8a4:	58 85       	ldd	r21, Y+8	; 0x08
     8a6:	41 30       	cpi	r20, 0x01	; 1
     8a8:	51 05       	cpc	r21, r1
     8aa:	59 f1       	breq	.+86     	; 0x902 <Dio_enuReadchannal+0xa0>
     8ac:	8f 81       	ldd	r24, Y+7	; 0x07
     8ae:	98 85       	ldd	r25, Y+8	; 0x08
     8b0:	82 30       	cpi	r24, 0x02	; 2
     8b2:	91 05       	cpc	r25, r1
     8b4:	34 f4       	brge	.+12     	; 0x8c2 <Dio_enuReadchannal+0x60>
     8b6:	2f 81       	ldd	r18, Y+7	; 0x07
     8b8:	38 85       	ldd	r19, Y+8	; 0x08
     8ba:	21 15       	cp	r18, r1
     8bc:	31 05       	cpc	r19, r1
     8be:	69 f0       	breq	.+26     	; 0x8da <Dio_enuReadchannal+0x78>
     8c0:	5c c0       	rjmp	.+184    	; 0x97a <Dio_enuReadchannal+0x118>
     8c2:	4f 81       	ldd	r20, Y+7	; 0x07
     8c4:	58 85       	ldd	r21, Y+8	; 0x08
     8c6:	42 30       	cpi	r20, 0x02	; 2
     8c8:	51 05       	cpc	r21, r1
     8ca:	79 f1       	breq	.+94     	; 0x92a <Dio_enuReadchannal+0xc8>
     8cc:	8f 81       	ldd	r24, Y+7	; 0x07
     8ce:	98 85       	ldd	r25, Y+8	; 0x08
     8d0:	83 30       	cpi	r24, 0x03	; 3
     8d2:	91 05       	cpc	r25, r1
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <Dio_enuReadchannal+0x76>
     8d6:	3d c0       	rjmp	.+122    	; 0x952 <Dio_enuReadchannal+0xf0>
     8d8:	50 c0       	rjmp	.+160    	; 0x97a <Dio_enuReadchannal+0x118>
					{
					case PORTA_REG :
					{
					  *Add_pu8ChannelLevel= GET_BIT(PINA,ChannalId);
     8da:	e9 e3       	ldi	r30, 0x39	; 57
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	80 81       	ld	r24, Z
     8e0:	28 2f       	mov	r18, r24
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	8a 81       	ldd	r24, Y+2	; 0x02
     8e6:	88 2f       	mov	r24, r24
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	a9 01       	movw	r20, r18
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <Dio_enuReadchannal+0x90>
     8ee:	55 95       	asr	r21
     8f0:	47 95       	ror	r20
     8f2:	8a 95       	dec	r24
     8f4:	e2 f7       	brpl	.-8      	; 0x8ee <Dio_enuReadchannal+0x8c>
     8f6:	ca 01       	movw	r24, r20
     8f8:	81 70       	andi	r24, 0x01	; 1
     8fa:	ed 81       	ldd	r30, Y+5	; 0x05
     8fc:	fe 81       	ldd	r31, Y+6	; 0x06
     8fe:	80 83       	st	Z, r24
     900:	3e c0       	rjmp	.+124    	; 0x97e <Dio_enuReadchannal+0x11c>
					}break;
					case PORTB_REG :
					{
					  *Add_pu8ChannelLevel= GET_BIT(PINB,ChannalId);
     902:	e6 e3       	ldi	r30, 0x36	; 54
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	80 81       	ld	r24, Z
     908:	28 2f       	mov	r18, r24
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	8a 81       	ldd	r24, Y+2	; 0x02
     90e:	88 2f       	mov	r24, r24
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	a9 01       	movw	r20, r18
     914:	02 c0       	rjmp	.+4      	; 0x91a <Dio_enuReadchannal+0xb8>
     916:	55 95       	asr	r21
     918:	47 95       	ror	r20
     91a:	8a 95       	dec	r24
     91c:	e2 f7       	brpl	.-8      	; 0x916 <Dio_enuReadchannal+0xb4>
     91e:	ca 01       	movw	r24, r20
     920:	81 70       	andi	r24, 0x01	; 1
     922:	ed 81       	ldd	r30, Y+5	; 0x05
     924:	fe 81       	ldd	r31, Y+6	; 0x06
     926:	80 83       	st	Z, r24
     928:	2a c0       	rjmp	.+84     	; 0x97e <Dio_enuReadchannal+0x11c>
					}break;
					case PORTC_REG :
					{
					  *Add_pu8ChannelLevel= GET_BIT(PINC,ChannalId);
     92a:	e3 e3       	ldi	r30, 0x33	; 51
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	80 81       	ld	r24, Z
     930:	28 2f       	mov	r18, r24
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	8a 81       	ldd	r24, Y+2	; 0x02
     936:	88 2f       	mov	r24, r24
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	a9 01       	movw	r20, r18
     93c:	02 c0       	rjmp	.+4      	; 0x942 <Dio_enuReadchannal+0xe0>
     93e:	55 95       	asr	r21
     940:	47 95       	ror	r20
     942:	8a 95       	dec	r24
     944:	e2 f7       	brpl	.-8      	; 0x93e <Dio_enuReadchannal+0xdc>
     946:	ca 01       	movw	r24, r20
     948:	81 70       	andi	r24, 0x01	; 1
     94a:	ed 81       	ldd	r30, Y+5	; 0x05
     94c:	fe 81       	ldd	r31, Y+6	; 0x06
     94e:	80 83       	st	Z, r24
     950:	16 c0       	rjmp	.+44     	; 0x97e <Dio_enuReadchannal+0x11c>
					}break;
					case PORTD_REG :
					{
					  *Add_pu8ChannelLevel= GET_BIT(PIND,ChannalId);
     952:	e0 e3       	ldi	r30, 0x30	; 48
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	80 81       	ld	r24, Z
     958:	28 2f       	mov	r18, r24
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	8a 81       	ldd	r24, Y+2	; 0x02
     95e:	88 2f       	mov	r24, r24
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a9 01       	movw	r20, r18
     964:	02 c0       	rjmp	.+4      	; 0x96a <Dio_enuReadchannal+0x108>
     966:	55 95       	asr	r21
     968:	47 95       	ror	r20
     96a:	8a 95       	dec	r24
     96c:	e2 f7       	brpl	.-8      	; 0x966 <Dio_enuReadchannal+0x104>
     96e:	ca 01       	movw	r24, r20
     970:	81 70       	andi	r24, 0x01	; 1
     972:	ed 81       	ldd	r30, Y+5	; 0x05
     974:	fe 81       	ldd	r31, Y+6	; 0x06
     976:	80 83       	st	Z, r24
     978:	02 c0       	rjmp	.+4      	; 0x97e <Dio_enuReadchannal+0x11c>
					}break;
					default : Error_state = Dio_EnmInvalidPortID;break;
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	89 83       	std	Y+1, r24	; 0x01

				}
			return Error_state;
     97e:	89 81       	ldd	r24, Y+1	; 0x01

}
     980:	28 96       	adiw	r28, 0x08	; 8
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	f8 94       	cli
     986:	de bf       	out	0x3e, r29	; 62
     988:	0f be       	out	0x3f, r0	; 63
     98a:	cd bf       	out	0x3d, r28	; 61
     98c:	cf 91       	pop	r28
     98e:	df 91       	pop	r29
     990:	08 95       	ret

00000992 <Dio_enuWritePort>:
Dio_tenuErrorStatus Dio_enuWritePort(u8 Copy_u8PortId , u8 Copy_u8Value)
{
     992:	df 93       	push	r29
     994:	cf 93       	push	r28
     996:	00 d0       	rcall	.+0      	; 0x998 <Dio_enuWritePort+0x6>
     998:	00 d0       	rcall	.+0      	; 0x99a <Dio_enuWritePort+0x8>
     99a:	0f 92       	push	r0
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
     9a0:	8a 83       	std	Y+2, r24	; 0x02
     9a2:	6b 83       	std	Y+3, r22	; 0x03
	Dio_tenuErrorStatus Error_state = Dio_EnmDioOk;
     9a4:	19 82       	std	Y+1, r1	; 0x01
		if (Copy_u8PortId > NUMBER_PORTS )
     9a6:	8a 81       	ldd	r24, Y+2	; 0x02
     9a8:	85 30       	cpi	r24, 0x05	; 5
     9aa:	10 f0       	brcs	.+4      	; 0x9b0 <Dio_enuWritePort+0x1e>
		{
			Error_state = Dio_EnmInvalidPortID;
     9ac:	83 e0       	ldi	r24, 0x03	; 3
     9ae:	89 83       	std	Y+1, r24	; 0x01
		}
		switch(Copy_u8PortId)
     9b0:	8a 81       	ldd	r24, Y+2	; 0x02
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	3d 83       	std	Y+5, r19	; 0x05
     9b8:	2c 83       	std	Y+4, r18	; 0x04
     9ba:	8c 81       	ldd	r24, Y+4	; 0x04
     9bc:	9d 81       	ldd	r25, Y+5	; 0x05
     9be:	81 30       	cpi	r24, 0x01	; 1
     9c0:	91 05       	cpc	r25, r1
     9c2:	d1 f0       	breq	.+52     	; 0x9f8 <Dio_enuWritePort+0x66>
     9c4:	2c 81       	ldd	r18, Y+4	; 0x04
     9c6:	3d 81       	ldd	r19, Y+5	; 0x05
     9c8:	22 30       	cpi	r18, 0x02	; 2
     9ca:	31 05       	cpc	r19, r1
     9cc:	2c f4       	brge	.+10     	; 0x9d8 <Dio_enuWritePort+0x46>
     9ce:	8c 81       	ldd	r24, Y+4	; 0x04
     9d0:	9d 81       	ldd	r25, Y+5	; 0x05
     9d2:	00 97       	sbiw	r24, 0x00	; 0
     9d4:	61 f0       	breq	.+24     	; 0x9ee <Dio_enuWritePort+0x5c>
     9d6:	1f c0       	rjmp	.+62     	; 0xa16 <Dio_enuWritePort+0x84>
     9d8:	2c 81       	ldd	r18, Y+4	; 0x04
     9da:	3d 81       	ldd	r19, Y+5	; 0x05
     9dc:	22 30       	cpi	r18, 0x02	; 2
     9de:	31 05       	cpc	r19, r1
     9e0:	81 f0       	breq	.+32     	; 0xa02 <Dio_enuWritePort+0x70>
     9e2:	8c 81       	ldd	r24, Y+4	; 0x04
     9e4:	9d 81       	ldd	r25, Y+5	; 0x05
     9e6:	83 30       	cpi	r24, 0x03	; 3
     9e8:	91 05       	cpc	r25, r1
     9ea:	81 f0       	breq	.+32     	; 0xa0c <Dio_enuWritePort+0x7a>
     9ec:	14 c0       	rjmp	.+40     	; 0xa16 <Dio_enuWritePort+0x84>
			{
			case PORTA_REG :ASSIGN_REG( PORTA , Copy_u8Value);break;
     9ee:	eb e3       	ldi	r30, 0x3B	; 59
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	8b 81       	ldd	r24, Y+3	; 0x03
     9f4:	80 83       	st	Z, r24
     9f6:	11 c0       	rjmp	.+34     	; 0xa1a <Dio_enuWritePort+0x88>
			case PORTB_REG :ASSIGN_REG( PORTB , Copy_u8Value);break;
     9f8:	e8 e3       	ldi	r30, 0x38	; 56
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	80 83       	st	Z, r24
     a00:	0c c0       	rjmp	.+24     	; 0xa1a <Dio_enuWritePort+0x88>
			case PORTC_REG :ASSIGN_REG(PORTC , Copy_u8Value);break;
     a02:	e5 e3       	ldi	r30, 0x35	; 53
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	8b 81       	ldd	r24, Y+3	; 0x03
     a08:	80 83       	st	Z, r24
     a0a:	07 c0       	rjmp	.+14     	; 0xa1a <Dio_enuWritePort+0x88>
			case PORTD_REG :ASSIGN_REG( PORTD , Copy_u8Value);break;
     a0c:	e2 e3       	ldi	r30, 0x32	; 50
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	80 83       	st	Z, r24
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <Dio_enuWritePort+0x88>
			default : Error_state = Dio_EnmInvalidPortID;break;
     a16:	83 e0       	ldi	r24, 0x03	; 3
     a18:	89 83       	std	Y+1, r24	; 0x01
			}
		return Error_state;
     a1a:	89 81       	ldd	r24, Y+1	; 0x01

}
     a1c:	0f 90       	pop	r0
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	cf 91       	pop	r28
     a28:	df 91       	pop	r29
     a2a:	08 95       	ret

00000a2c <Dio_enuReadPort>:
Dio_tenuErrorStatus Dio_enuReadPort(u8 Copy_u8PortId ,  pu8 Add_puPortValue)
{
     a2c:	df 93       	push	r29
     a2e:	cf 93       	push	r28
     a30:	00 d0       	rcall	.+0      	; 0xa32 <Dio_enuReadPort+0x6>
     a32:	00 d0       	rcall	.+0      	; 0xa34 <Dio_enuReadPort+0x8>
     a34:	00 d0       	rcall	.+0      	; 0xa36 <Dio_enuReadPort+0xa>
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
     a3a:	8a 83       	std	Y+2, r24	; 0x02
     a3c:	7c 83       	std	Y+4, r23	; 0x04
     a3e:	6b 83       	std	Y+3, r22	; 0x03
	Dio_tenuErrorStatus Error_state = Dio_EnmDioOk;
     a40:	19 82       	std	Y+1, r1	; 0x01
			if (Copy_u8PortId > NUMBER_PORTS )
     a42:	8a 81       	ldd	r24, Y+2	; 0x02
     a44:	85 30       	cpi	r24, 0x05	; 5
     a46:	10 f0       	brcs	.+4      	; 0xa4c <Dio_enuReadPort+0x20>
			{
				Error_state = Dio_EnmInvalidPortID;
     a48:	83 e0       	ldi	r24, 0x03	; 3
     a4a:	89 83       	std	Y+1, r24	; 0x01
			}
			switch(Copy_u8PortId)
     a4c:	8a 81       	ldd	r24, Y+2	; 0x02
     a4e:	28 2f       	mov	r18, r24
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	3e 83       	std	Y+6, r19	; 0x06
     a54:	2d 83       	std	Y+5, r18	; 0x05
     a56:	8d 81       	ldd	r24, Y+5	; 0x05
     a58:	9e 81       	ldd	r25, Y+6	; 0x06
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	91 05       	cpc	r25, r1
     a5e:	e1 f0       	breq	.+56     	; 0xa98 <Dio_enuReadPort+0x6c>
     a60:	2d 81       	ldd	r18, Y+5	; 0x05
     a62:	3e 81       	ldd	r19, Y+6	; 0x06
     a64:	22 30       	cpi	r18, 0x02	; 2
     a66:	31 05       	cpc	r19, r1
     a68:	2c f4       	brge	.+10     	; 0xa74 <Dio_enuReadPort+0x48>
     a6a:	8d 81       	ldd	r24, Y+5	; 0x05
     a6c:	9e 81       	ldd	r25, Y+6	; 0x06
     a6e:	00 97       	sbiw	r24, 0x00	; 0
     a70:	61 f0       	breq	.+24     	; 0xa8a <Dio_enuReadPort+0x5e>
     a72:	27 c0       	rjmp	.+78     	; 0xac2 <Dio_enuReadPort+0x96>
     a74:	2d 81       	ldd	r18, Y+5	; 0x05
     a76:	3e 81       	ldd	r19, Y+6	; 0x06
     a78:	22 30       	cpi	r18, 0x02	; 2
     a7a:	31 05       	cpc	r19, r1
     a7c:	a1 f0       	breq	.+40     	; 0xaa6 <Dio_enuReadPort+0x7a>
     a7e:	8d 81       	ldd	r24, Y+5	; 0x05
     a80:	9e 81       	ldd	r25, Y+6	; 0x06
     a82:	83 30       	cpi	r24, 0x03	; 3
     a84:	91 05       	cpc	r25, r1
     a86:	b1 f0       	breq	.+44     	; 0xab4 <Dio_enuReadPort+0x88>
     a88:	1c c0       	rjmp	.+56     	; 0xac2 <Dio_enuReadPort+0x96>
								{
								case PORTA_REG :
								{
								  *Add_puPortValue= PINA;
     a8a:	e9 e3       	ldi	r30, 0x39	; 57
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 81       	ld	r24, Z
     a90:	eb 81       	ldd	r30, Y+3	; 0x03
     a92:	fc 81       	ldd	r31, Y+4	; 0x04
     a94:	80 83       	st	Z, r24
     a96:	17 c0       	rjmp	.+46     	; 0xac6 <Dio_enuReadPort+0x9a>
								}break;
								case PORTB_REG :
								{
								  *Add_puPortValue= PINB;
     a98:	e6 e3       	ldi	r30, 0x36	; 54
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	80 81       	ld	r24, Z
     a9e:	eb 81       	ldd	r30, Y+3	; 0x03
     aa0:	fc 81       	ldd	r31, Y+4	; 0x04
     aa2:	80 83       	st	Z, r24
     aa4:	10 c0       	rjmp	.+32     	; 0xac6 <Dio_enuReadPort+0x9a>
								}break;
								case PORTC_REG :
								{
								  *Add_puPortValue= PINC;
     aa6:	e3 e3       	ldi	r30, 0x33	; 51
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	80 81       	ld	r24, Z
     aac:	eb 81       	ldd	r30, Y+3	; 0x03
     aae:	fc 81       	ldd	r31, Y+4	; 0x04
     ab0:	80 83       	st	Z, r24
     ab2:	09 c0       	rjmp	.+18     	; 0xac6 <Dio_enuReadPort+0x9a>
								}break;
								case PORTD_REG :
								{
								  *Add_puPortValue= PIND;
     ab4:	e0 e3       	ldi	r30, 0x30	; 48
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	80 81       	ld	r24, Z
     aba:	eb 81       	ldd	r30, Y+3	; 0x03
     abc:	fc 81       	ldd	r31, Y+4	; 0x04
     abe:	80 83       	st	Z, r24
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <Dio_enuReadPort+0x9a>
								}break;
								default : Error_state = Dio_EnmInvalidPortID;break;
     ac2:	83 e0       	ldi	r24, 0x03	; 3
     ac4:	89 83       	std	Y+1, r24	; 0x01

							}
						return Error_state;
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ac8:	26 96       	adiw	r28, 0x06	; 6
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	cd bf       	out	0x3d, r28	; 61
     ad4:	cf 91       	pop	r28
     ad6:	df 91       	pop	r29
     ad8:	08 95       	ret

00000ada <Dio_enuFlipChannel>:
Dio_tenuErrorStatus Dio_enuFlipChannel(u8 Copy_u8ChannalId)
{
     ada:	df 93       	push	r29
     adc:	cf 93       	push	r28
     ade:	00 d0       	rcall	.+0      	; 0xae0 <Dio_enuFlipChannel+0x6>
     ae0:	00 d0       	rcall	.+0      	; 0xae2 <Dio_enuFlipChannel+0x8>
     ae2:	00 d0       	rcall	.+0      	; 0xae4 <Dio_enuFlipChannel+0xa>
     ae4:	cd b7       	in	r28, 0x3d	; 61
     ae6:	de b7       	in	r29, 0x3e	; 62
     ae8:	8c 83       	std	Y+4, r24	; 0x04
	        // set the number of port
			u8 Copy_u8PortId = Copy_u8ChannalId / RIGESTER_SIZE;
     aea:	8c 81       	ldd	r24, Y+4	; 0x04
     aec:	86 95       	lsr	r24
     aee:	86 95       	lsr	r24
     af0:	86 95       	lsr	r24
     af2:	8b 83       	std	Y+3, r24	; 0x03
			 // set the number of Channals
			u8 ChannalId = Copy_u8ChannalId % RIGESTER_SIZE;
     af4:	8c 81       	ldd	r24, Y+4	; 0x04
     af6:	87 70       	andi	r24, 0x07	; 7
     af8:	8a 83       	std	Y+2, r24	; 0x02

			Dio_tenuErrorStatus Error_state = Dio_EnmDioOk;
     afa:	19 82       	std	Y+1, r1	; 0x01

			if (Copy_u8ChannalId > NUMBER_CHANNALS )
     afc:	8c 81       	ldd	r24, Y+4	; 0x04
     afe:	81 32       	cpi	r24, 0x21	; 33
     b00:	10 f0       	brcs	.+4      	; 0xb06 <Dio_enuFlipChannel+0x2c>
				{
					Error_state = Dio_EnmChannalIdError;
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	89 83       	std	Y+1, r24	; 0x01
				}
				switch(Copy_u8PortId)
     b06:	8b 81       	ldd	r24, Y+3	; 0x03
     b08:	28 2f       	mov	r18, r24
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	3e 83       	std	Y+6, r19	; 0x06
     b0e:	2d 83       	std	Y+5, r18	; 0x05
     b10:	8d 81       	ldd	r24, Y+5	; 0x05
     b12:	9e 81       	ldd	r25, Y+6	; 0x06
     b14:	81 30       	cpi	r24, 0x01	; 1
     b16:	91 05       	cpc	r25, r1
     b18:	49 f1       	breq	.+82     	; 0xb6c <Dio_enuFlipChannel+0x92>
     b1a:	2d 81       	ldd	r18, Y+5	; 0x05
     b1c:	3e 81       	ldd	r19, Y+6	; 0x06
     b1e:	22 30       	cpi	r18, 0x02	; 2
     b20:	31 05       	cpc	r19, r1
     b22:	2c f4       	brge	.+10     	; 0xb2e <Dio_enuFlipChannel+0x54>
     b24:	8d 81       	ldd	r24, Y+5	; 0x05
     b26:	9e 81       	ldd	r25, Y+6	; 0x06
     b28:	00 97       	sbiw	r24, 0x00	; 0
     b2a:	61 f0       	breq	.+24     	; 0xb44 <Dio_enuFlipChannel+0x6a>
     b2c:	5b c0       	rjmp	.+182    	; 0xbe4 <Dio_enuFlipChannel+0x10a>
     b2e:	2d 81       	ldd	r18, Y+5	; 0x05
     b30:	3e 81       	ldd	r19, Y+6	; 0x06
     b32:	22 30       	cpi	r18, 0x02	; 2
     b34:	31 05       	cpc	r19, r1
     b36:	71 f1       	breq	.+92     	; 0xb94 <Dio_enuFlipChannel+0xba>
     b38:	8d 81       	ldd	r24, Y+5	; 0x05
     b3a:	9e 81       	ldd	r25, Y+6	; 0x06
     b3c:	83 30       	cpi	r24, 0x03	; 3
     b3e:	91 05       	cpc	r25, r1
     b40:	e9 f1       	breq	.+122    	; 0xbbc <Dio_enuFlipChannel+0xe2>
     b42:	50 c0       	rjmp	.+160    	; 0xbe4 <Dio_enuFlipChannel+0x10a>
				{
				case PORTA_REG : TGL_BIT(PORTA,ChannalId);break;
     b44:	ab e3       	ldi	r26, 0x3B	; 59
     b46:	b0 e0       	ldi	r27, 0x00	; 0
     b48:	eb e3       	ldi	r30, 0x3B	; 59
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	80 81       	ld	r24, Z
     b4e:	48 2f       	mov	r20, r24
     b50:	8a 81       	ldd	r24, Y+2	; 0x02
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	02 2e       	mov	r0, r18
     b5c:	02 c0       	rjmp	.+4      	; 0xb62 <Dio_enuFlipChannel+0x88>
     b5e:	88 0f       	add	r24, r24
     b60:	99 1f       	adc	r25, r25
     b62:	0a 94       	dec	r0
     b64:	e2 f7       	brpl	.-8      	; 0xb5e <Dio_enuFlipChannel+0x84>
     b66:	84 27       	eor	r24, r20
     b68:	8c 93       	st	X, r24
     b6a:	3e c0       	rjmp	.+124    	; 0xbe8 <Dio_enuFlipChannel+0x10e>
								case PORTB_REG : TGL_BIT(PORTA,ChannalId);break;
     b6c:	ab e3       	ldi	r26, 0x3B	; 59
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	eb e3       	ldi	r30, 0x3B	; 59
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	48 2f       	mov	r20, r24
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	02 2e       	mov	r0, r18
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <Dio_enuFlipChannel+0xb0>
     b86:	88 0f       	add	r24, r24
     b88:	99 1f       	adc	r25, r25
     b8a:	0a 94       	dec	r0
     b8c:	e2 f7       	brpl	.-8      	; 0xb86 <Dio_enuFlipChannel+0xac>
     b8e:	84 27       	eor	r24, r20
     b90:	8c 93       	st	X, r24
     b92:	2a c0       	rjmp	.+84     	; 0xbe8 <Dio_enuFlipChannel+0x10e>
								case PORTC_REG : TGL_BIT(PORTA,ChannalId);break;
     b94:	ab e3       	ldi	r26, 0x3B	; 59
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	eb e3       	ldi	r30, 0x3B	; 59
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	48 2f       	mov	r20, r24
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	28 2f       	mov	r18, r24
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	02 2e       	mov	r0, r18
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <Dio_enuFlipChannel+0xd8>
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	0a 94       	dec	r0
     bb4:	e2 f7       	brpl	.-8      	; 0xbae <Dio_enuFlipChannel+0xd4>
     bb6:	84 27       	eor	r24, r20
     bb8:	8c 93       	st	X, r24
     bba:	16 c0       	rjmp	.+44     	; 0xbe8 <Dio_enuFlipChannel+0x10e>
								case PORTD_REG : TGL_BIT(PORTA,ChannalId);break;
     bbc:	ab e3       	ldi	r26, 0x3B	; 59
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	eb e3       	ldi	r30, 0x3B	; 59
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	48 2f       	mov	r20, r24
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	02 2e       	mov	r0, r18
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <Dio_enuFlipChannel+0x100>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	0a 94       	dec	r0
     bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <Dio_enuFlipChannel+0xfc>
     bde:	84 27       	eor	r24, r20
     be0:	8c 93       	st	X, r24
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <Dio_enuFlipChannel+0x10e>
								default :  Error_state = Dio_EnmInvalidPortID;
     be4:	83 e0       	ldi	r24, 0x03	; 3
     be6:	89 83       	std	Y+1, r24	; 0x01
								}

            return Error_state;
     be8:	89 81       	ldd	r24, Y+1	; 0x01
}
     bea:	26 96       	adiw	r28, 0x06	; 6
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <Port_VoidInit>:
#include "../../1-PORT/include/Port.h"
#include "../../1-PORT/include/Port_Prv.h"
#include "../../1-PORT/include/Port_Cfg.h"


void Port_VoidInit(void){
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62

#undef  PORT_u8Intput_Floating
#define PORT_u8Intput_Floating   0

	/* Set pins in DDR registers for data direction */
	DDRA= CONC(PORT_u8ModePin7,PORT_u8ModePin6,PORT_u8ModePin5,PORT_u8ModePin4,PORT_u8ModePin3,PORT_u8ModePin2,PORT_u8ModePin1,PORT_u8ModePin0);
     c04:	ea e3       	ldi	r30, 0x3A	; 58
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	8f ef       	ldi	r24, 0xFF	; 255
     c0a:	80 83       	st	Z, r24
	DDRB= CONC(PORT_u8ModePin7,PORT_u8ModePin6,PORT_u8ModePin5,PORT_u8ModePin4,PORT_u8ModePin3,PORT_u8ModePin2,PORT_u8ModePin1,PORT_u8ModePin0);
     c0c:	e7 e3       	ldi	r30, 0x37	; 55
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	8f ef       	ldi	r24, 0xFF	; 255
     c12:	80 83       	st	Z, r24
	DDRC= CONC(PORT_u8ModePin7,PORT_u8ModePin6,PORT_u8ModePin5,PORT_u8ModePin4,PORT_u8ModePin3,PORT_u8ModePin2,PORT_u8ModePin1,PORT_u8ModePin0);
     c14:	e4 e3       	ldi	r30, 0x34	; 52
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	80 83       	st	Z, r24
	DDRD= CONC(PORT_u8ModePin7,PORT_u8ModePin6,PORT_u8ModePin5,PORT_u8ModePin4,PORT_u8ModePin3,PORT_u8ModePin2,PORT_u8ModePin1,PORT_u8ModePin0);
     c1c:	e1 e3       	ldi	r30, 0x31	; 49
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	8f ef       	ldi	r24, 0xFF	; 255
     c22:	80 83       	st	Z, r24

#undef  PORT_u8Intput_Floating
#define PORT_u8Intput_Floating    0

	/* Set pins in PORT registers for Moods */
	PORTA= CONC(PORT_u8ModePin7,PORT_u8ModePin6,PORT_u8ModePin5,PORT_u8ModePin4,PORT_u8ModePin3,PORT_u8ModePin2,PORT_u8ModePin1,PORT_u8ModePin0);
     c24:	eb e3       	ldi	r30, 0x3B	; 59
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	88 ef       	ldi	r24, 0xF8	; 248
     c2a:	80 83       	st	Z, r24
	PORTB= CONC(PORT_u8ModePin7,PORT_u8ModePin6,PORT_u8ModePin5,PORT_u8ModePin4,PORT_u8ModePin3,PORT_u8ModePin2,PORT_u8ModePin1,PORT_u8ModePin0);
     c2c:	e8 e3       	ldi	r30, 0x38	; 56
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	88 ef       	ldi	r24, 0xF8	; 248
     c32:	80 83       	st	Z, r24
	PORTC= CONC(PORT_u8ModePin7,PORT_u8ModePin6,PORT_u8ModePin5,PORT_u8ModePin4,PORT_u8ModePin3,PORT_u8ModePin2,PORT_u8ModePin1,PORT_u8ModePin0);
     c34:	e5 e3       	ldi	r30, 0x35	; 53
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	88 ef       	ldi	r24, 0xF8	; 248
     c3a:	80 83       	st	Z, r24
	PORTD= CONC(PORT_u8ModePin7,PORT_u8ModePin6,PORT_u8ModePin5,PORT_u8ModePin4,PORT_u8ModePin3,PORT_u8ModePin2,PORT_u8ModePin1,PORT_u8ModePin0);
     c3c:	e2 e3       	ldi	r30, 0x32	; 50
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	88 ef       	ldi	r24, 0xF8	; 248
     c42:	80 83       	st	Z, r24
#undef  PORT_u8Intput_Pullup
#define PORT_u8Intput_Pullup     2

#undef  PORT_u8Intput_Floating
#define PORT_u8Intput_Floating   3
}
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	08 95       	ret

00000c4a <Port_enuSetPinDirection>:


Port_tenuErrorStatus Port_enuSetPinDirection(u8 Copy_u8PinNum ,u8 Copy_u8PinDirection )
{
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <Port_enuSetPinDirection+0x6>
     c50:	00 d0       	rcall	.+0      	; 0xc52 <Port_enuSetPinDirection+0x8>
     c52:	00 d0       	rcall	.+0      	; 0xc54 <Port_enuSetPinDirection+0xa>
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	8b 83       	std	Y+3, r24	; 0x03
     c5a:	6c 83       	std	Y+4, r22	; 0x04

	u8 Copy_u8PortNum = Copy_u8PinNum / RIGESTER_SIZE;    // Port Number
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	86 95       	lsr	r24
     c60:	86 95       	lsr	r24
     c62:	86 95       	lsr	r24
     c64:	8a 83       	std	Y+2, r24	; 0x02
	Port_tenuErrorStatus Error_State = Port_EnmOk;
     c66:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PinNum > NUMBER_PINS ){
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	81 32       	cpi	r24, 0x21	; 33
     c6c:	10 f0       	brcs	.+4      	; 0xc72 <Port_enuSetPinDirection+0x28>
		Error_State = Port_EnmPinError;
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	89 83       	std	Y+1, r24	; 0x01
	}

	switch(Copy_u8PortNum)
     c72:	8a 81       	ldd	r24, Y+2	; 0x02
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	3e 83       	std	Y+6, r19	; 0x06
     c7a:	2d 83       	std	Y+5, r18	; 0x05
     c7c:	8d 81       	ldd	r24, Y+5	; 0x05
     c7e:	9e 81       	ldd	r25, Y+6	; 0x06
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	91 05       	cpc	r25, r1
     c84:	09 f4       	brne	.+2      	; 0xc88 <Port_enuSetPinDirection+0x3e>
     c86:	49 c0       	rjmp	.+146    	; 0xd1a <Port_enuSetPinDirection+0xd0>
     c88:	2d 81       	ldd	r18, Y+5	; 0x05
     c8a:	3e 81       	ldd	r19, Y+6	; 0x06
     c8c:	22 30       	cpi	r18, 0x02	; 2
     c8e:	31 05       	cpc	r19, r1
     c90:	2c f4       	brge	.+10     	; 0xc9c <Port_enuSetPinDirection+0x52>
     c92:	8d 81       	ldd	r24, Y+5	; 0x05
     c94:	9e 81       	ldd	r25, Y+6	; 0x06
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	71 f0       	breq	.+28     	; 0xcb6 <Port_enuSetPinDirection+0x6c>
     c9a:	d5 c0       	rjmp	.+426    	; 0xe46 <Port_enuSetPinDirection+0x1fc>
     c9c:	2d 81       	ldd	r18, Y+5	; 0x05
     c9e:	3e 81       	ldd	r19, Y+6	; 0x06
     ca0:	22 30       	cpi	r18, 0x02	; 2
     ca2:	31 05       	cpc	r19, r1
     ca4:	09 f4       	brne	.+2      	; 0xca8 <Port_enuSetPinDirection+0x5e>
     ca6:	6b c0       	rjmp	.+214    	; 0xd7e <Port_enuSetPinDirection+0x134>
     ca8:	8d 81       	ldd	r24, Y+5	; 0x05
     caa:	9e 81       	ldd	r25, Y+6	; 0x06
     cac:	83 30       	cpi	r24, 0x03	; 3
     cae:	91 05       	cpc	r25, r1
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <Port_enuSetPinDirection+0x6a>
     cb2:	97 c0       	rjmp	.+302    	; 0xde2 <Port_enuSetPinDirection+0x198>
     cb4:	c8 c0       	rjmp	.+400    	; 0xe46 <Port_enuSetPinDirection+0x1fc>
	{
	case PORTA_REG :
	{
		if (Copy_u8PinDirection == OUTPUT){
     cb6:	8c 81       	ldd	r24, Y+4	; 0x04
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <Port_enuSetPinDirection+0x9a>
			SET_BIT(DDRA,Copy_u8PinNum);
     cbc:	aa e3       	ldi	r26, 0x3A	; 58
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	ea e3       	ldi	r30, 0x3A	; 58
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <Port_enuSetPinDirection+0x90>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <Port_enuSetPinDirection+0x8c>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	b3 c0       	rjmp	.+358    	; 0xe4a <Port_enuSetPinDirection+0x200>
		}
		else if (Copy_u8PinDirection == INTPUT){
     ce4:	8c 81       	ldd	r24, Y+4	; 0x04
     ce6:	88 23       	and	r24, r24
     ce8:	a9 f4       	brne	.+42     	; 0xd14 <Port_enuSetPinDirection+0xca>
			CLR_BIT(DDRA,Copy_u8PinNum);
     cea:	aa e3       	ldi	r26, 0x3A	; 58
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	ea e3       	ldi	r30, 0x3A	; 58
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	48 2f       	mov	r20, r24
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	28 2f       	mov	r18, r24
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	02 2e       	mov	r0, r18
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <Port_enuSetPinDirection+0xbe>
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	0a 94       	dec	r0
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <Port_enuSetPinDirection+0xba>
     d0c:	80 95       	com	r24
     d0e:	84 23       	and	r24, r20
     d10:	8c 93       	st	X, r24
     d12:	9b c0       	rjmp	.+310    	; 0xe4a <Port_enuSetPinDirection+0x200>
		}
		else {
			Error_State = Port_EnmDirectionError;
     d14:	84 e0       	ldi	r24, 0x04	; 4
     d16:	89 83       	std	Y+1, r24	; 0x01
     d18:	98 c0       	rjmp	.+304    	; 0xe4a <Port_enuSetPinDirection+0x200>
	}break;


	case PORTB_REG:
	{
		if (Copy_u8PinDirection == OUTPUT){
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	a1 f4       	brne	.+40     	; 0xd48 <Port_enuSetPinDirection+0xfe>
			SET_BIT(DDRB,Copy_u8PinNum);
     d20:	a7 e3       	ldi	r26, 0x37	; 55
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e7 e3       	ldi	r30, 0x37	; 55
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	48 2f       	mov	r20, r24
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	02 2e       	mov	r0, r18
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <Port_enuSetPinDirection+0xf4>
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	0a 94       	dec	r0
     d40:	e2 f7       	brpl	.-8      	; 0xd3a <Port_enuSetPinDirection+0xf0>
     d42:	84 2b       	or	r24, r20
     d44:	8c 93       	st	X, r24
     d46:	81 c0       	rjmp	.+258    	; 0xe4a <Port_enuSetPinDirection+0x200>
		}
		else if (Copy_u8PinDirection == INTPUT){
     d48:	8c 81       	ldd	r24, Y+4	; 0x04
     d4a:	88 23       	and	r24, r24
     d4c:	a9 f4       	brne	.+42     	; 0xd78 <Port_enuSetPinDirection+0x12e>
			CLR_BIT(DDRB,Copy_u8PinNum);
     d4e:	a7 e3       	ldi	r26, 0x37	; 55
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e7 e3       	ldi	r30, 0x37	; 55
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	48 2f       	mov	r20, r24
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	02 2e       	mov	r0, r18
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <Port_enuSetPinDirection+0x122>
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	0a 94       	dec	r0
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <Port_enuSetPinDirection+0x11e>
     d70:	80 95       	com	r24
     d72:	84 23       	and	r24, r20
     d74:	8c 93       	st	X, r24
     d76:	69 c0       	rjmp	.+210    	; 0xe4a <Port_enuSetPinDirection+0x200>
		}
		else {
			Error_State = Port_EnmDirectionError;
     d78:	84 e0       	ldi	r24, 0x04	; 4
     d7a:	89 83       	std	Y+1, r24	; 0x01
     d7c:	66 c0       	rjmp	.+204    	; 0xe4a <Port_enuSetPinDirection+0x200>
		}
	}break;
	case PORTC_REG :
	{
		if (Copy_u8PinDirection == OUTPUT){
     d7e:	8c 81       	ldd	r24, Y+4	; 0x04
     d80:	81 30       	cpi	r24, 0x01	; 1
     d82:	a1 f4       	brne	.+40     	; 0xdac <Port_enuSetPinDirection+0x162>
			SET_BIT(DDRC,Copy_u8PinNum);
     d84:	a4 e3       	ldi	r26, 0x34	; 52
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e4 e3       	ldi	r30, 0x34	; 52
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	48 2f       	mov	r20, r24
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	02 2e       	mov	r0, r18
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <Port_enuSetPinDirection+0x158>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	0a 94       	dec	r0
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <Port_enuSetPinDirection+0x154>
     da6:	84 2b       	or	r24, r20
     da8:	8c 93       	st	X, r24
     daa:	4f c0       	rjmp	.+158    	; 0xe4a <Port_enuSetPinDirection+0x200>
		}
		else if (Copy_u8PinDirection == INTPUT){
     dac:	8c 81       	ldd	r24, Y+4	; 0x04
     dae:	88 23       	and	r24, r24
     db0:	a9 f4       	brne	.+42     	; 0xddc <Port_enuSetPinDirection+0x192>
			CLR_BIT(DDRC,Copy_u8PinNum);
     db2:	a4 e3       	ldi	r26, 0x34	; 52
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e4 e3       	ldi	r30, 0x34	; 52
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <Port_enuSetPinDirection+0x186>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <Port_enuSetPinDirection+0x182>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	37 c0       	rjmp	.+110    	; 0xe4a <Port_enuSetPinDirection+0x200>
		}
		else {
			Error_State = Port_EnmDirectionError;
     ddc:	84 e0       	ldi	r24, 0x04	; 4
     dde:	89 83       	std	Y+1, r24	; 0x01
     de0:	34 c0       	rjmp	.+104    	; 0xe4a <Port_enuSetPinDirection+0x200>
		}
	}break;
	case PORTD_REG:
	{
		if (Copy_u8PinDirection == OUTPUT){
     de2:	8c 81       	ldd	r24, Y+4	; 0x04
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	a1 f4       	brne	.+40     	; 0xe10 <Port_enuSetPinDirection+0x1c6>
			SET_BIT(DDRD,Copy_u8PinNum);
     de8:	a1 e3       	ldi	r26, 0x31	; 49
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e1 e3       	ldi	r30, 0x31	; 49
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	48 2f       	mov	r20, r24
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	02 2e       	mov	r0, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <Port_enuSetPinDirection+0x1bc>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	0a 94       	dec	r0
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <Port_enuSetPinDirection+0x1b8>
     e0a:	84 2b       	or	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	1d c0       	rjmp	.+58     	; 0xe4a <Port_enuSetPinDirection+0x200>
		}
		else if (Copy_u8PinDirection == INTPUT){
     e10:	8c 81       	ldd	r24, Y+4	; 0x04
     e12:	88 23       	and	r24, r24
     e14:	a9 f4       	brne	.+42     	; 0xe40 <Port_enuSetPinDirection+0x1f6>
			CLR_BIT(DDRD,Copy_u8PinNum);
     e16:	a1 e3       	ldi	r26, 0x31	; 49
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e1 e3       	ldi	r30, 0x31	; 49
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <Port_enuSetPinDirection+0x1ea>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <Port_enuSetPinDirection+0x1e6>
     e38:	80 95       	com	r24
     e3a:	84 23       	and	r24, r20
     e3c:	8c 93       	st	X, r24
     e3e:	05 c0       	rjmp	.+10     	; 0xe4a <Port_enuSetPinDirection+0x200>
		}
		else {
			Error_State = Port_EnmDirectionError;
     e40:	84 e0       	ldi	r24, 0x04	; 4
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <Port_enuSetPinDirection+0x200>
		}
	} break;

	default : Error_State = Port_EnmPinError; break;
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_State;
     e4a:	89 81       	ldd	r24, Y+1	; 0x01

}
     e4c:	26 96       	adiw	r28, 0x06	; 6
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <Port_enuSetPinMode>:
Port_tenuErrorStatus Port_enuSetPinMode(u8 Copy_u8PinNum ,u8 Copy_u8PinMode )
{
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	2f 97       	sbiw	r28, 0x0f	; 15
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	8c 83       	std	Y+4, r24	; 0x04
     e74:	6d 83       	std	Y+5, r22	; 0x05

	u8 Copy_u8PortNum = Copy_u8PinNum / RIGESTER_SIZE;
     e76:	8c 81       	ldd	r24, Y+4	; 0x04
     e78:	86 95       	lsr	r24
     e7a:	86 95       	lsr	r24
     e7c:	86 95       	lsr	r24
     e7e:	8b 83       	std	Y+3, r24	; 0x03
	u8 Pin_NUM = Copy_u8PinNum % RIGESTER_SIZE;
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	87 70       	andi	r24, 0x07	; 7
     e84:	8a 83       	std	Y+2, r24	; 0x02
	Port_tenuErrorStatus Error_State = Port_EnmOk;
     e86:	19 82       	std	Y+1, r1	; 0x01

	// Check for valid pin number
	if (Copy_u8PinNum > NUMBER_PINS){
     e88:	8c 81       	ldd	r24, Y+4	; 0x04
     e8a:	81 32       	cpi	r24, 0x21	; 33
     e8c:	18 f0       	brcs	.+6      	; 0xe94 <Port_enuSetPinMode+0x36>
		Error_State = Port_EnmPinError;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	24 c3       	rjmp	.+1608   	; 0x14dc <Port_enuSetPinMode+0x67e>
	}
	else {
		switch(Copy_u8PortNum)
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	3f 87       	std	Y+15, r19	; 0x0f
     e9c:	2e 87       	std	Y+14, r18	; 0x0e
     e9e:	8e 85       	ldd	r24, Y+14	; 0x0e
     ea0:	9f 85       	ldd	r25, Y+15	; 0x0f
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	91 05       	cpc	r25, r1
     ea6:	09 f4       	brne	.+2      	; 0xeaa <Port_enuSetPinMode+0x4c>
     ea8:	d7 c0       	rjmp	.+430    	; 0x1058 <Port_enuSetPinMode+0x1fa>
     eaa:	2e 85       	ldd	r18, Y+14	; 0x0e
     eac:	3f 85       	ldd	r19, Y+15	; 0x0f
     eae:	22 30       	cpi	r18, 0x02	; 2
     eb0:	31 05       	cpc	r19, r1
     eb2:	2c f4       	brge	.+10     	; 0xebe <Port_enuSetPinMode+0x60>
     eb4:	8e 85       	ldd	r24, Y+14	; 0x0e
     eb6:	9f 85       	ldd	r25, Y+15	; 0x0f
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	71 f0       	breq	.+28     	; 0xed8 <Port_enuSetPinMode+0x7a>
     ebc:	0d c3       	rjmp	.+1562   	; 0x14d8 <Port_enuSetPinMode+0x67a>
     ebe:	2e 85       	ldd	r18, Y+14	; 0x0e
     ec0:	3f 85       	ldd	r19, Y+15	; 0x0f
     ec2:	22 30       	cpi	r18, 0x02	; 2
     ec4:	31 05       	cpc	r19, r1
     ec6:	09 f4       	brne	.+2      	; 0xeca <Port_enuSetPinMode+0x6c>
     ec8:	87 c1       	rjmp	.+782    	; 0x11d8 <Port_enuSetPinMode+0x37a>
     eca:	8e 85       	ldd	r24, Y+14	; 0x0e
     ecc:	9f 85       	ldd	r25, Y+15	; 0x0f
     ece:	83 30       	cpi	r24, 0x03	; 3
     ed0:	91 05       	cpc	r25, r1
     ed2:	09 f4       	brne	.+2      	; 0xed6 <Port_enuSetPinMode+0x78>
     ed4:	41 c2       	rjmp	.+1154   	; 0x1358 <Port_enuSetPinMode+0x4fa>
     ed6:	00 c3       	rjmp	.+1536   	; 0x14d8 <Port_enuSetPinMode+0x67a>
		{
		case PORTA_REG :
		{
			switch (Copy_u8PinMode)
     ed8:	8d 81       	ldd	r24, Y+5	; 0x05
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	3d 87       	std	Y+13, r19	; 0x0d
     ee0:	2c 87       	std	Y+12, r18	; 0x0c
     ee2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ee4:	9d 85       	ldd	r25, Y+13	; 0x0d
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	91 05       	cpc	r25, r1
     eea:	b9 f0       	breq	.+46     	; 0xf1a <Port_enuSetPinMode+0xbc>
     eec:	2c 85       	ldd	r18, Y+12	; 0x0c
     eee:	3d 85       	ldd	r19, Y+13	; 0x0d
     ef0:	22 30       	cpi	r18, 0x02	; 2
     ef2:	31 05       	cpc	r19, r1
     ef4:	2c f4       	brge	.+10     	; 0xf00 <Port_enuSetPinMode+0xa2>
     ef6:	8c 85       	ldd	r24, Y+12	; 0x0c
     ef8:	9d 85       	ldd	r25, Y+13	; 0x0d
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	a1 f1       	breq	.+104    	; 0xf66 <Port_enuSetPinMode+0x108>
     efe:	a9 c0       	rjmp	.+338    	; 0x1052 <Port_enuSetPinMode+0x1f4>
     f00:	2c 85       	ldd	r18, Y+12	; 0x0c
     f02:	3d 85       	ldd	r19, Y+13	; 0x0d
     f04:	22 30       	cpi	r18, 0x02	; 2
     f06:	31 05       	cpc	r19, r1
     f08:	09 f4       	brne	.+2      	; 0xf0c <Port_enuSetPinMode+0xae>
     f0a:	54 c0       	rjmp	.+168    	; 0xfb4 <Port_enuSetPinMode+0x156>
     f0c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f0e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f10:	83 30       	cpi	r24, 0x03	; 3
     f12:	91 05       	cpc	r25, r1
     f14:	09 f4       	brne	.+2      	; 0xf18 <Port_enuSetPinMode+0xba>
     f16:	75 c0       	rjmp	.+234    	; 0x1002 <Port_enuSetPinMode+0x1a4>
     f18:	9c c0       	rjmp	.+312    	; 0x1052 <Port_enuSetPinMode+0x1f4>
			{
			case PORT_u8Output_High :
			{
				SET_BIT(DDRA,Pin_NUM);
     f1a:	aa e3       	ldi	r26, 0x3A	; 58
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	ea e3       	ldi	r30, 0x3A	; 58
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <Port_enuSetPinMode+0xd8>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	2a 95       	dec	r18
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <Port_enuSetPinMode+0xd4>
     f3a:	84 2b       	or	r24, r20
     f3c:	8c 93       	st	X, r24
				SET_BIT(PORTA,Pin_NUM);
     f3e:	ab e3       	ldi	r26, 0x3B	; 59
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	eb e3       	ldi	r30, 0x3B	; 59
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <Port_enuSetPinMode+0xfe>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <Port_enuSetPinMode+0xfa>
     f60:	84 2b       	or	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	bb c2       	rjmp	.+1398   	; 0x14dc <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Output_Low :
			{
				SET_BIT(DDRA,Pin_NUM);
     f66:	aa e3       	ldi	r26, 0x3A	; 58
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	ea e3       	ldi	r30, 0x3A	; 58
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <Port_enuSetPinMode+0x124>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	2a 95       	dec	r18
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <Port_enuSetPinMode+0x120>
     f86:	84 2b       	or	r24, r20
     f88:	8c 93       	st	X, r24
				CLR_BIT(PORTA,Pin_NUM);
     f8a:	ab e3       	ldi	r26, 0x3B	; 59
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	eb e3       	ldi	r30, 0x3B	; 59
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <Port_enuSetPinMode+0x14a>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <Port_enuSetPinMode+0x146>
     fac:	80 95       	com	r24
     fae:	84 23       	and	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	94 c2       	rjmp	.+1320   	; 0x14dc <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Intput_Pullup :
			{
				CLR_BIT(DDRA,Pin_NUM);
     fb4:	aa e3       	ldi	r26, 0x3A	; 58
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	ea e3       	ldi	r30, 0x3A	; 58
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <Port_enuSetPinMode+0x172>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	2a 95       	dec	r18
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <Port_enuSetPinMode+0x16e>
     fd4:	80 95       	com	r24
     fd6:	84 23       	and	r24, r20
     fd8:	8c 93       	st	X, r24
				SET_BIT(PORTA,Pin_NUM);
     fda:	ab e3       	ldi	r26, 0x3B	; 59
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	eb e3       	ldi	r30, 0x3B	; 59
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <Port_enuSetPinMode+0x19a>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <Port_enuSetPinMode+0x196>
     ffc:	84 2b       	or	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	6d c2       	rjmp	.+1242   	; 0x14dc <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Intput_Floating :
			{
				CLR_BIT(DDRA,Pin_NUM);
    1002:	aa e3       	ldi	r26, 0x3A	; 58
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	ea e3       	ldi	r30, 0x3A	; 58
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 c0       	rjmp	.+4      	; 0x101e <Port_enuSetPinMode+0x1c0>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	2a 95       	dec	r18
    1020:	e2 f7       	brpl	.-8      	; 0x101a <Port_enuSetPinMode+0x1bc>
    1022:	80 95       	com	r24
    1024:	84 23       	and	r24, r20
    1026:	8c 93       	st	X, r24
				CLR_BIT(PORTA,Pin_NUM);
    1028:	ab e3       	ldi	r26, 0x3B	; 59
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	eb e3       	ldi	r30, 0x3B	; 59
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <Port_enuSetPinMode+0x1e8>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <Port_enuSetPinMode+0x1e4>
    104a:	80 95       	com	r24
    104c:	84 23       	and	r24, r20
    104e:	8c 93       	st	X, r24
    1050:	45 c2       	rjmp	.+1162   	; 0x14dc <Port_enuSetPinMode+0x67e>
			}break;

			default:   Error_State = Port_EnmInvalidPinMode; break;
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	42 c2       	rjmp	.+1156   	; 0x14dc <Port_enuSetPinMode+0x67e>
			}
		}break;
		case PORTB_REG :
		{
			switch (Copy_u8PinMode)
    1058:	8d 81       	ldd	r24, Y+5	; 0x05
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	3b 87       	std	Y+11, r19	; 0x0b
    1060:	2a 87       	std	Y+10, r18	; 0x0a
    1062:	8a 85       	ldd	r24, Y+10	; 0x0a
    1064:	9b 85       	ldd	r25, Y+11	; 0x0b
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	91 05       	cpc	r25, r1
    106a:	b9 f0       	breq	.+46     	; 0x109a <Port_enuSetPinMode+0x23c>
    106c:	2a 85       	ldd	r18, Y+10	; 0x0a
    106e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1070:	22 30       	cpi	r18, 0x02	; 2
    1072:	31 05       	cpc	r19, r1
    1074:	2c f4       	brge	.+10     	; 0x1080 <Port_enuSetPinMode+0x222>
    1076:	8a 85       	ldd	r24, Y+10	; 0x0a
    1078:	9b 85       	ldd	r25, Y+11	; 0x0b
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	a1 f1       	breq	.+104    	; 0x10e6 <Port_enuSetPinMode+0x288>
    107e:	a9 c0       	rjmp	.+338    	; 0x11d2 <Port_enuSetPinMode+0x374>
    1080:	2a 85       	ldd	r18, Y+10	; 0x0a
    1082:	3b 85       	ldd	r19, Y+11	; 0x0b
    1084:	22 30       	cpi	r18, 0x02	; 2
    1086:	31 05       	cpc	r19, r1
    1088:	09 f4       	brne	.+2      	; 0x108c <Port_enuSetPinMode+0x22e>
    108a:	54 c0       	rjmp	.+168    	; 0x1134 <Port_enuSetPinMode+0x2d6>
    108c:	8a 85       	ldd	r24, Y+10	; 0x0a
    108e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1090:	83 30       	cpi	r24, 0x03	; 3
    1092:	91 05       	cpc	r25, r1
    1094:	09 f4       	brne	.+2      	; 0x1098 <Port_enuSetPinMode+0x23a>
    1096:	75 c0       	rjmp	.+234    	; 0x1182 <Port_enuSetPinMode+0x324>
    1098:	9c c0       	rjmp	.+312    	; 0x11d2 <Port_enuSetPinMode+0x374>
			{
			case PORT_u8Output_High :
			{
				SET_BIT(DDRB,Pin_NUM);
    109a:	a7 e3       	ldi	r26, 0x37	; 55
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e7 e3       	ldi	r30, 0x37	; 55
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <Port_enuSetPinMode+0x258>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	2a 95       	dec	r18
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <Port_enuSetPinMode+0x254>
    10ba:	84 2b       	or	r24, r20
    10bc:	8c 93       	st	X, r24
				SET_BIT(PORTB,Pin_NUM);
    10be:	a8 e3       	ldi	r26, 0x38	; 56
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e8 e3       	ldi	r30, 0x38	; 56
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 2e       	mov	r0, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <Port_enuSetPinMode+0x27e>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	0a 94       	dec	r0
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <Port_enuSetPinMode+0x27a>
    10e0:	84 2b       	or	r24, r20
    10e2:	8c 93       	st	X, r24
    10e4:	fb c1       	rjmp	.+1014   	; 0x14dc <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Output_Low :
			{
				SET_BIT(DDRB,Pin_NUM);
    10e6:	a7 e3       	ldi	r26, 0x37	; 55
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e7 e3       	ldi	r30, 0x37	; 55
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	48 2f       	mov	r20, r24
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <Port_enuSetPinMode+0x2a4>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	2a 95       	dec	r18
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <Port_enuSetPinMode+0x2a0>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
				CLR_BIT(PORTB,Pin_NUM);
    110a:	a8 e3       	ldi	r26, 0x38	; 56
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	48 2f       	mov	r20, r24
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 2e       	mov	r0, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <Port_enuSetPinMode+0x2ca>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	0a 94       	dec	r0
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <Port_enuSetPinMode+0x2c6>
    112c:	80 95       	com	r24
    112e:	84 23       	and	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	d4 c1       	rjmp	.+936    	; 0x14dc <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Intput_Pullup :
			{
				CLR_BIT(DDRB,Pin_NUM);
    1134:	a7 e3       	ldi	r26, 0x37	; 55
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e7 e3       	ldi	r30, 0x37	; 55
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <Port_enuSetPinMode+0x2f2>
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	2a 95       	dec	r18
    1152:	e2 f7       	brpl	.-8      	; 0x114c <Port_enuSetPinMode+0x2ee>
    1154:	80 95       	com	r24
    1156:	84 23       	and	r24, r20
    1158:	8c 93       	st	X, r24
				SET_BIT(PORTB,Pin_NUM);
    115a:	a8 e3       	ldi	r26, 0x38	; 56
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e8 e3       	ldi	r30, 0x38	; 56
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 2e       	mov	r0, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <Port_enuSetPinMode+0x31a>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	0a 94       	dec	r0
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <Port_enuSetPinMode+0x316>
    117c:	84 2b       	or	r24, r20
    117e:	8c 93       	st	X, r24
    1180:	ad c1       	rjmp	.+858    	; 0x14dc <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Intput_Floating :
			{
				CLR_BIT(DDRB,Pin_NUM);
    1182:	a7 e3       	ldi	r26, 0x37	; 55
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e7 e3       	ldi	r30, 0x37	; 55
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 c0       	rjmp	.+4      	; 0x119e <Port_enuSetPinMode+0x340>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	2a 95       	dec	r18
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <Port_enuSetPinMode+0x33c>
    11a2:	80 95       	com	r24
    11a4:	84 23       	and	r24, r20
    11a6:	8c 93       	st	X, r24
				CLR_BIT(PORTB,Pin_NUM);
    11a8:	a8 e3       	ldi	r26, 0x38	; 56
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e8 e3       	ldi	r30, 0x38	; 56
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <Port_enuSetPinMode+0x368>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <Port_enuSetPinMode+0x364>
    11ca:	80 95       	com	r24
    11cc:	84 23       	and	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	85 c1       	rjmp	.+778    	; 0x14dc <Port_enuSetPinMode+0x67e>
			}break;
			default:   Error_State = Port_EnmInvalidPinMode; break;
    11d2:	82 e0       	ldi	r24, 0x02	; 2
    11d4:	89 83       	std	Y+1, r24	; 0x01
    11d6:	82 c1       	rjmp	.+772    	; 0x14dc <Port_enuSetPinMode+0x67e>

			}
		}break;
		case PORTC_REG :
		{
			switch (Copy_u8PinMode)
    11d8:	8d 81       	ldd	r24, Y+5	; 0x05
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	39 87       	std	Y+9, r19	; 0x09
    11e0:	28 87       	std	Y+8, r18	; 0x08
    11e2:	88 85       	ldd	r24, Y+8	; 0x08
    11e4:	99 85       	ldd	r25, Y+9	; 0x09
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	91 05       	cpc	r25, r1
    11ea:	b9 f0       	breq	.+46     	; 0x121a <Port_enuSetPinMode+0x3bc>
    11ec:	28 85       	ldd	r18, Y+8	; 0x08
    11ee:	39 85       	ldd	r19, Y+9	; 0x09
    11f0:	22 30       	cpi	r18, 0x02	; 2
    11f2:	31 05       	cpc	r19, r1
    11f4:	2c f4       	brge	.+10     	; 0x1200 <Port_enuSetPinMode+0x3a2>
    11f6:	88 85       	ldd	r24, Y+8	; 0x08
    11f8:	99 85       	ldd	r25, Y+9	; 0x09
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	a1 f1       	breq	.+104    	; 0x1266 <Port_enuSetPinMode+0x408>
    11fe:	a9 c0       	rjmp	.+338    	; 0x1352 <Port_enuSetPinMode+0x4f4>
    1200:	28 85       	ldd	r18, Y+8	; 0x08
    1202:	39 85       	ldd	r19, Y+9	; 0x09
    1204:	22 30       	cpi	r18, 0x02	; 2
    1206:	31 05       	cpc	r19, r1
    1208:	09 f4       	brne	.+2      	; 0x120c <Port_enuSetPinMode+0x3ae>
    120a:	54 c0       	rjmp	.+168    	; 0x12b4 <Port_enuSetPinMode+0x456>
    120c:	88 85       	ldd	r24, Y+8	; 0x08
    120e:	99 85       	ldd	r25, Y+9	; 0x09
    1210:	83 30       	cpi	r24, 0x03	; 3
    1212:	91 05       	cpc	r25, r1
    1214:	09 f4       	brne	.+2      	; 0x1218 <Port_enuSetPinMode+0x3ba>
    1216:	75 c0       	rjmp	.+234    	; 0x1302 <Port_enuSetPinMode+0x4a4>
    1218:	9c c0       	rjmp	.+312    	; 0x1352 <Port_enuSetPinMode+0x4f4>
			{
			case PORT_u8Output_High :
			{
				SET_BIT(DDRC,Pin_NUM);
    121a:	a4 e3       	ldi	r26, 0x34	; 52
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e4 e3       	ldi	r30, 0x34	; 52
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <Port_enuSetPinMode+0x3d8>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	2a 95       	dec	r18
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <Port_enuSetPinMode+0x3d4>
    123a:	84 2b       	or	r24, r20
    123c:	8c 93       	st	X, r24
				SET_BIT(PORTC,Pin_NUM);
    123e:	a5 e3       	ldi	r26, 0x35	; 53
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e5 e3       	ldi	r30, 0x35	; 53
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <Port_enuSetPinMode+0x3fe>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <Port_enuSetPinMode+0x3fa>
    1260:	84 2b       	or	r24, r20
    1262:	8c 93       	st	X, r24
    1264:	3b c1       	rjmp	.+630    	; 0x14dc <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Output_Low :
			{
				SET_BIT(DDRC,Pin_NUM);
    1266:	a4 e3       	ldi	r26, 0x34	; 52
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e4 e3       	ldi	r30, 0x34	; 52
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	48 2f       	mov	r20, r24
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <Port_enuSetPinMode+0x424>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	2a 95       	dec	r18
    1284:	e2 f7       	brpl	.-8      	; 0x127e <Port_enuSetPinMode+0x420>
    1286:	84 2b       	or	r24, r20
    1288:	8c 93       	st	X, r24
				CLR_BIT(PORTC,Pin_NUM);
    128a:	a5 e3       	ldi	r26, 0x35	; 53
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e5 e3       	ldi	r30, 0x35	; 53
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	48 2f       	mov	r20, r24
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 2e       	mov	r0, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <Port_enuSetPinMode+0x44a>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	0a 94       	dec	r0
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <Port_enuSetPinMode+0x446>
    12ac:	80 95       	com	r24
    12ae:	84 23       	and	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	14 c1       	rjmp	.+552    	; 0x14dc <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Intput_Pullup :
			{
				CLR_BIT(DDRC,Pin_NUM);
    12b4:	a4 e3       	ldi	r26, 0x34	; 52
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e4 e3       	ldi	r30, 0x34	; 52
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <Port_enuSetPinMode+0x472>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	2a 95       	dec	r18
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <Port_enuSetPinMode+0x46e>
    12d4:	80 95       	com	r24
    12d6:	84 23       	and	r24, r20
    12d8:	8c 93       	st	X, r24
				SET_BIT(PORTC,Pin_NUM);
    12da:	a5 e3       	ldi	r26, 0x35	; 53
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e5 e3       	ldi	r30, 0x35	; 53
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	48 2f       	mov	r20, r24
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	02 2e       	mov	r0, r18
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <Port_enuSetPinMode+0x49a>
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	0a 94       	dec	r0
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <Port_enuSetPinMode+0x496>
    12fc:	84 2b       	or	r24, r20
    12fe:	8c 93       	st	X, r24
    1300:	ed c0       	rjmp	.+474    	; 0x14dc <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Intput_Floating :
			{
				CLR_BIT(DDRC,Pin_NUM);
    1302:	a4 e3       	ldi	r26, 0x34	; 52
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e4 e3       	ldi	r30, 0x34	; 52
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	48 2f       	mov	r20, r24
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 c0       	rjmp	.+4      	; 0x131e <Port_enuSetPinMode+0x4c0>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	2a 95       	dec	r18
    1320:	e2 f7       	brpl	.-8      	; 0x131a <Port_enuSetPinMode+0x4bc>
    1322:	80 95       	com	r24
    1324:	84 23       	and	r24, r20
    1326:	8c 93       	st	X, r24
				CLR_BIT(PORTC,Pin_NUM);
    1328:	a5 e3       	ldi	r26, 0x35	; 53
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e5 e3       	ldi	r30, 0x35	; 53
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <Port_enuSetPinMode+0x4e8>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <Port_enuSetPinMode+0x4e4>
    134a:	80 95       	com	r24
    134c:	84 23       	and	r24, r20
    134e:	8c 93       	st	X, r24
    1350:	c5 c0       	rjmp	.+394    	; 0x14dc <Port_enuSetPinMode+0x67e>
			}break;
			default:   Error_State = Port_EnmInvalidPinMode; break;
    1352:	82 e0       	ldi	r24, 0x02	; 2
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	c2 c0       	rjmp	.+388    	; 0x14dc <Port_enuSetPinMode+0x67e>
			}
		}break;
		case PORTD_REG :
		{
			switch (Copy_u8PinMode)
    1358:	8d 81       	ldd	r24, Y+5	; 0x05
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	3f 83       	std	Y+7, r19	; 0x07
    1360:	2e 83       	std	Y+6, r18	; 0x06
    1362:	8e 81       	ldd	r24, Y+6	; 0x06
    1364:	9f 81       	ldd	r25, Y+7	; 0x07
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	91 05       	cpc	r25, r1
    136a:	b9 f0       	breq	.+46     	; 0x139a <Port_enuSetPinMode+0x53c>
    136c:	2e 81       	ldd	r18, Y+6	; 0x06
    136e:	3f 81       	ldd	r19, Y+7	; 0x07
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	2c f4       	brge	.+10     	; 0x1380 <Port_enuSetPinMode+0x522>
    1376:	8e 81       	ldd	r24, Y+6	; 0x06
    1378:	9f 81       	ldd	r25, Y+7	; 0x07
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	a1 f1       	breq	.+104    	; 0x13e6 <Port_enuSetPinMode+0x588>
    137e:	a9 c0       	rjmp	.+338    	; 0x14d2 <Port_enuSetPinMode+0x674>
    1380:	2e 81       	ldd	r18, Y+6	; 0x06
    1382:	3f 81       	ldd	r19, Y+7	; 0x07
    1384:	22 30       	cpi	r18, 0x02	; 2
    1386:	31 05       	cpc	r19, r1
    1388:	09 f4       	brne	.+2      	; 0x138c <Port_enuSetPinMode+0x52e>
    138a:	54 c0       	rjmp	.+168    	; 0x1434 <Port_enuSetPinMode+0x5d6>
    138c:	8e 81       	ldd	r24, Y+6	; 0x06
    138e:	9f 81       	ldd	r25, Y+7	; 0x07
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	91 05       	cpc	r25, r1
    1394:	09 f4       	brne	.+2      	; 0x1398 <Port_enuSetPinMode+0x53a>
    1396:	75 c0       	rjmp	.+234    	; 0x1482 <Port_enuSetPinMode+0x624>
    1398:	9c c0       	rjmp	.+312    	; 0x14d2 <Port_enuSetPinMode+0x674>
			{
			case PORT_u8Output_High :
			{
				SET_BIT(DDRD,Pin_NUM);
    139a:	a1 e3       	ldi	r26, 0x31	; 49
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e1 e3       	ldi	r30, 0x31	; 49
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <Port_enuSetPinMode+0x558>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	2a 95       	dec	r18
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <Port_enuSetPinMode+0x554>
    13ba:	84 2b       	or	r24, r20
    13bc:	8c 93       	st	X, r24
				SET_BIT(PORTD,Pin_NUM);
    13be:	a2 e3       	ldi	r26, 0x32	; 50
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e2 e3       	ldi	r30, 0x32	; 50
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	48 2f       	mov	r20, r24
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 2e       	mov	r0, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <Port_enuSetPinMode+0x57e>
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	0a 94       	dec	r0
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <Port_enuSetPinMode+0x57a>
    13e0:	84 2b       	or	r24, r20
    13e2:	8c 93       	st	X, r24
    13e4:	7b c0       	rjmp	.+246    	; 0x14dc <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Output_Low :
			{
				SET_BIT(DDRD,Pin_NUM);
    13e6:	a1 e3       	ldi	r26, 0x31	; 49
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e1 e3       	ldi	r30, 0x31	; 49
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <Port_enuSetPinMode+0x5a4>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	2a 95       	dec	r18
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <Port_enuSetPinMode+0x5a0>
    1406:	84 2b       	or	r24, r20
    1408:	8c 93       	st	X, r24
				CLR_BIT(PORTD,Pin_NUM);
    140a:	a2 e3       	ldi	r26, 0x32	; 50
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e2 e3       	ldi	r30, 0x32	; 50
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <Port_enuSetPinMode+0x5ca>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <Port_enuSetPinMode+0x5c6>
    142c:	80 95       	com	r24
    142e:	84 23       	and	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	54 c0       	rjmp	.+168    	; 0x14dc <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Intput_Pullup :
			{
				CLR_BIT(DDRD,Pin_NUM);
    1434:	a1 e3       	ldi	r26, 0x31	; 49
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e1 e3       	ldi	r30, 0x31	; 49
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <Port_enuSetPinMode+0x5f2>
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	2a 95       	dec	r18
    1452:	e2 f7       	brpl	.-8      	; 0x144c <Port_enuSetPinMode+0x5ee>
    1454:	80 95       	com	r24
    1456:	84 23       	and	r24, r20
    1458:	8c 93       	st	X, r24
				SET_BIT(PORTD,Pin_NUM);
    145a:	a2 e3       	ldi	r26, 0x32	; 50
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e2 e3       	ldi	r30, 0x32	; 50
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <Port_enuSetPinMode+0x61a>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <Port_enuSetPinMode+0x616>
    147c:	84 2b       	or	r24, r20
    147e:	8c 93       	st	X, r24
    1480:	2d c0       	rjmp	.+90     	; 0x14dc <Port_enuSetPinMode+0x67e>
			}break;
			case PORT_u8Intput_Floating :
			{
				CLR_BIT(DDRD,Pin_NUM);
    1482:	a1 e3       	ldi	r26, 0x31	; 49
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e1 e3       	ldi	r30, 0x31	; 49
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 c0       	rjmp	.+4      	; 0x149e <Port_enuSetPinMode+0x640>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	2a 95       	dec	r18
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <Port_enuSetPinMode+0x63c>
    14a2:	80 95       	com	r24
    14a4:	84 23       	and	r24, r20
    14a6:	8c 93       	st	X, r24
				CLR_BIT(PORTD,Pin_NUM);
    14a8:	a2 e3       	ldi	r26, 0x32	; 50
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e2 e3       	ldi	r30, 0x32	; 50
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	48 2f       	mov	r20, r24
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 2e       	mov	r0, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <Port_enuSetPinMode+0x668>
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	0a 94       	dec	r0
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <Port_enuSetPinMode+0x664>
    14ca:	80 95       	com	r24
    14cc:	84 23       	and	r24, r20
    14ce:	8c 93       	st	X, r24
    14d0:	05 c0       	rjmp	.+10     	; 0x14dc <Port_enuSetPinMode+0x67e>
			}break;
			default:   Error_State = Port_EnmInvalidPinMode; break;
    14d2:	82 e0       	ldi	r24, 0x02	; 2
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <Port_enuSetPinMode+0x67e>
			}
		}break;
		default : Error_State =  Port_EnmInvalidPort; break;
    14d8:	83 e0       	ldi	r24, 0x03	; 3
    14da:	89 83       	std	Y+1, r24	; 0x01


		}

	}
	return Error_State;
    14dc:	89 81       	ldd	r24, Y+1	; 0x01

}
    14de:	2f 96       	adiw	r28, 0x0f	; 15
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <_exit>:
    14f0:	f8 94       	cli

000014f2 <__stop_program>:
    14f2:	ff cf       	rjmp	.-2      	; 0x14f2 <__stop_program>
