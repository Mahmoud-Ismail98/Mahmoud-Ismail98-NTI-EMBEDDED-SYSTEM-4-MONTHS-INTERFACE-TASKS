
NTI_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ea2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00005ea2  00005f36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  0080009c  0080009c  00005f72  2**0
                  ALLOC
  3 .stab         00006c9c  00000000  00000000  00005f74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000335b  00000000  00000000  0000cc10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000ff6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ad  00000000  00000000  000100eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000022c4  00000000  00000000  00010298  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000125b  00000000  00000000  0001255c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001055  00000000  00000000  000137b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0001480c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ca  00000000  00000000  000149ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ca  00000000  00000000  00014c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015540  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <__vector_1>
       8:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <__vector_2>
       c:	0c 94 30 1b 	jmp	0x3660	; 0x3660 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__vector_6>
      1c:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <__vector_7>
      20:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <__vector_8>
      24:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 b2 20 	jmp	0x4164	; 0x4164 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	fe e5       	ldi	r31, 0x5E	; 94
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3b       	cpi	r26, 0xB7	; 183
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <main>
      8a:	0c 94 4f 2f 	jmp	0x5e9e	; 0x5e9e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 18 2f 	jmp	0x5e30	; 0x5e30 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e7       	ldi	r26, 0x7B	; 123
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 34 2f 	jmp	0x5e68	; 0x5e68 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 40 2f 	jmp	0x5e80	; 0x5e80 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 40 2f 	jmp	0x5e80	; 0x5e80 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 18 2f 	jmp	0x5e30	; 0x5e30 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e7       	ldi	r24, 0x7B	; 123
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 34 2f 	jmp	0x5e68	; 0x5e68 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 20 2f 	jmp	0x5e40	; 0x5e40 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e7       	ldi	r22, 0x7B	; 123
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3c 2f 	jmp	0x5e78	; 0x5e78 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 40 2f 	jmp	0x5e80	; 0x5e80 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 40 2f 	jmp	0x5e80	; 0x5e80 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 40 2f 	jmp	0x5e80	; 0x5e80 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 40 2f 	jmp	0x5e80	; 0x5e80 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 28 2f 	jmp	0x5e50	; 0x5e50 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 44 2f 	jmp	0x5e88	; 0x5e88 <__epilogue_restores__+0x20>

000009b2 <__pack_f>:
     9b2:	df 92       	push	r13
     9b4:	ef 92       	push	r14
     9b6:	ff 92       	push	r15
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	fc 01       	movw	r30, r24
     9be:	e4 80       	ldd	r14, Z+4	; 0x04
     9c0:	f5 80       	ldd	r15, Z+5	; 0x05
     9c2:	06 81       	ldd	r16, Z+6	; 0x06
     9c4:	17 81       	ldd	r17, Z+7	; 0x07
     9c6:	d1 80       	ldd	r13, Z+1	; 0x01
     9c8:	80 81       	ld	r24, Z
     9ca:	82 30       	cpi	r24, 0x02	; 2
     9cc:	48 f4       	brcc	.+18     	; 0x9e0 <__pack_f+0x2e>
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e1       	ldi	r26, 0x10	; 16
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	e8 2a       	or	r14, r24
     9d8:	f9 2a       	or	r15, r25
     9da:	0a 2b       	or	r16, r26
     9dc:	1b 2b       	or	r17, r27
     9de:	a5 c0       	rjmp	.+330    	; 0xb2a <__pack_f+0x178>
     9e0:	84 30       	cpi	r24, 0x04	; 4
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <__pack_f+0x34>
     9e4:	9f c0       	rjmp	.+318    	; 0xb24 <__pack_f+0x172>
     9e6:	82 30       	cpi	r24, 0x02	; 2
     9e8:	21 f4       	brne	.+8      	; 0x9f2 <__pack_f+0x40>
     9ea:	ee 24       	eor	r14, r14
     9ec:	ff 24       	eor	r15, r15
     9ee:	87 01       	movw	r16, r14
     9f0:	05 c0       	rjmp	.+10     	; 0x9fc <__pack_f+0x4a>
     9f2:	e1 14       	cp	r14, r1
     9f4:	f1 04       	cpc	r15, r1
     9f6:	01 05       	cpc	r16, r1
     9f8:	11 05       	cpc	r17, r1
     9fa:	19 f4       	brne	.+6      	; 0xa02 <__pack_f+0x50>
     9fc:	e0 e0       	ldi	r30, 0x00	; 0
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	96 c0       	rjmp	.+300    	; 0xb2e <__pack_f+0x17c>
     a02:	62 81       	ldd	r22, Z+2	; 0x02
     a04:	73 81       	ldd	r23, Z+3	; 0x03
     a06:	9f ef       	ldi	r25, 0xFF	; 255
     a08:	62 38       	cpi	r22, 0x82	; 130
     a0a:	79 07       	cpc	r23, r25
     a0c:	0c f0       	brlt	.+2      	; 0xa10 <__pack_f+0x5e>
     a0e:	5b c0       	rjmp	.+182    	; 0xac6 <__pack_f+0x114>
     a10:	22 e8       	ldi	r18, 0x82	; 130
     a12:	3f ef       	ldi	r19, 0xFF	; 255
     a14:	26 1b       	sub	r18, r22
     a16:	37 0b       	sbc	r19, r23
     a18:	2a 31       	cpi	r18, 0x1A	; 26
     a1a:	31 05       	cpc	r19, r1
     a1c:	2c f0       	brlt	.+10     	; 0xa28 <__pack_f+0x76>
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	2a c0       	rjmp	.+84     	; 0xa7c <__pack_f+0xca>
     a28:	b8 01       	movw	r22, r16
     a2a:	a7 01       	movw	r20, r14
     a2c:	02 2e       	mov	r0, r18
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0x86>
     a30:	76 95       	lsr	r23
     a32:	67 95       	ror	r22
     a34:	57 95       	ror	r21
     a36:	47 95       	ror	r20
     a38:	0a 94       	dec	r0
     a3a:	d2 f7       	brpl	.-12     	; 0xa30 <__pack_f+0x7e>
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	04 c0       	rjmp	.+8      	; 0xa4e <__pack_f+0x9c>
     a46:	88 0f       	add	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	aa 1f       	adc	r26, r26
     a4c:	bb 1f       	adc	r27, r27
     a4e:	2a 95       	dec	r18
     a50:	d2 f7       	brpl	.-12     	; 0xa46 <__pack_f+0x94>
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	a1 09       	sbc	r26, r1
     a56:	b1 09       	sbc	r27, r1
     a58:	8e 21       	and	r24, r14
     a5a:	9f 21       	and	r25, r15
     a5c:	a0 23       	and	r26, r16
     a5e:	b1 23       	and	r27, r17
     a60:	00 97       	sbiw	r24, 0x00	; 0
     a62:	a1 05       	cpc	r26, r1
     a64:	b1 05       	cpc	r27, r1
     a66:	21 f0       	breq	.+8      	; 0xa70 <__pack_f+0xbe>
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	9a 01       	movw	r18, r20
     a72:	ab 01       	movw	r20, r22
     a74:	28 2b       	or	r18, r24
     a76:	39 2b       	or	r19, r25
     a78:	4a 2b       	or	r20, r26
     a7a:	5b 2b       	or	r21, r27
     a7c:	da 01       	movw	r26, r20
     a7e:	c9 01       	movw	r24, r18
     a80:	8f 77       	andi	r24, 0x7F	; 127
     a82:	90 70       	andi	r25, 0x00	; 0
     a84:	a0 70       	andi	r26, 0x00	; 0
     a86:	b0 70       	andi	r27, 0x00	; 0
     a88:	80 34       	cpi	r24, 0x40	; 64
     a8a:	91 05       	cpc	r25, r1
     a8c:	a1 05       	cpc	r26, r1
     a8e:	b1 05       	cpc	r27, r1
     a90:	39 f4       	brne	.+14     	; 0xaa0 <__pack_f+0xee>
     a92:	27 ff       	sbrs	r18, 7
     a94:	09 c0       	rjmp	.+18     	; 0xaa8 <__pack_f+0xf6>
     a96:	20 5c       	subi	r18, 0xC0	; 192
     a98:	3f 4f       	sbci	r19, 0xFF	; 255
     a9a:	4f 4f       	sbci	r20, 0xFF	; 255
     a9c:	5f 4f       	sbci	r21, 0xFF	; 255
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0xf6>
     aa0:	21 5c       	subi	r18, 0xC1	; 193
     aa2:	3f 4f       	sbci	r19, 0xFF	; 255
     aa4:	4f 4f       	sbci	r20, 0xFF	; 255
     aa6:	5f 4f       	sbci	r21, 0xFF	; 255
     aa8:	e0 e0       	ldi	r30, 0x00	; 0
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	20 30       	cpi	r18, 0x00	; 0
     aae:	a0 e0       	ldi	r26, 0x00	; 0
     ab0:	3a 07       	cpc	r19, r26
     ab2:	a0 e0       	ldi	r26, 0x00	; 0
     ab4:	4a 07       	cpc	r20, r26
     ab6:	a0 e4       	ldi	r26, 0x40	; 64
     ab8:	5a 07       	cpc	r21, r26
     aba:	10 f0       	brcs	.+4      	; 0xac0 <__pack_f+0x10e>
     abc:	e1 e0       	ldi	r30, 0x01	; 1
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	79 01       	movw	r14, r18
     ac2:	8a 01       	movw	r16, r20
     ac4:	27 c0       	rjmp	.+78     	; 0xb14 <__pack_f+0x162>
     ac6:	60 38       	cpi	r22, 0x80	; 128
     ac8:	71 05       	cpc	r23, r1
     aca:	64 f5       	brge	.+88     	; 0xb24 <__pack_f+0x172>
     acc:	fb 01       	movw	r30, r22
     ace:	e1 58       	subi	r30, 0x81	; 129
     ad0:	ff 4f       	sbci	r31, 0xFF	; 255
     ad2:	d8 01       	movw	r26, r16
     ad4:	c7 01       	movw	r24, r14
     ad6:	8f 77       	andi	r24, 0x7F	; 127
     ad8:	90 70       	andi	r25, 0x00	; 0
     ada:	a0 70       	andi	r26, 0x00	; 0
     adc:	b0 70       	andi	r27, 0x00	; 0
     ade:	80 34       	cpi	r24, 0x40	; 64
     ae0:	91 05       	cpc	r25, r1
     ae2:	a1 05       	cpc	r26, r1
     ae4:	b1 05       	cpc	r27, r1
     ae6:	39 f4       	brne	.+14     	; 0xaf6 <__pack_f+0x144>
     ae8:	e7 fe       	sbrs	r14, 7
     aea:	0d c0       	rjmp	.+26     	; 0xb06 <__pack_f+0x154>
     aec:	80 e4       	ldi	r24, 0x40	; 64
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	a0 e0       	ldi	r26, 0x00	; 0
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	04 c0       	rjmp	.+8      	; 0xafe <__pack_f+0x14c>
     af6:	8f e3       	ldi	r24, 0x3F	; 63
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	e8 0e       	add	r14, r24
     b00:	f9 1e       	adc	r15, r25
     b02:	0a 1f       	adc	r16, r26
     b04:	1b 1f       	adc	r17, r27
     b06:	17 ff       	sbrs	r17, 7
     b08:	05 c0       	rjmp	.+10     	; 0xb14 <__pack_f+0x162>
     b0a:	16 95       	lsr	r17
     b0c:	07 95       	ror	r16
     b0e:	f7 94       	ror	r15
     b10:	e7 94       	ror	r14
     b12:	31 96       	adiw	r30, 0x01	; 1
     b14:	87 e0       	ldi	r24, 0x07	; 7
     b16:	16 95       	lsr	r17
     b18:	07 95       	ror	r16
     b1a:	f7 94       	ror	r15
     b1c:	e7 94       	ror	r14
     b1e:	8a 95       	dec	r24
     b20:	d1 f7       	brne	.-12     	; 0xb16 <__pack_f+0x164>
     b22:	05 c0       	rjmp	.+10     	; 0xb2e <__pack_f+0x17c>
     b24:	ee 24       	eor	r14, r14
     b26:	ff 24       	eor	r15, r15
     b28:	87 01       	movw	r16, r14
     b2a:	ef ef       	ldi	r30, 0xFF	; 255
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	6e 2f       	mov	r22, r30
     b30:	67 95       	ror	r22
     b32:	66 27       	eor	r22, r22
     b34:	67 95       	ror	r22
     b36:	90 2f       	mov	r25, r16
     b38:	9f 77       	andi	r25, 0x7F	; 127
     b3a:	d7 94       	ror	r13
     b3c:	dd 24       	eor	r13, r13
     b3e:	d7 94       	ror	r13
     b40:	8e 2f       	mov	r24, r30
     b42:	86 95       	lsr	r24
     b44:	49 2f       	mov	r20, r25
     b46:	46 2b       	or	r20, r22
     b48:	58 2f       	mov	r21, r24
     b4a:	5d 29       	or	r21, r13
     b4c:	b7 01       	movw	r22, r14
     b4e:	ca 01       	movw	r24, r20
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	ff 90       	pop	r15
     b56:	ef 90       	pop	r14
     b58:	df 90       	pop	r13
     b5a:	08 95       	ret

00000b5c <__unpack_f>:
     b5c:	fc 01       	movw	r30, r24
     b5e:	db 01       	movw	r26, r22
     b60:	40 81       	ld	r20, Z
     b62:	51 81       	ldd	r21, Z+1	; 0x01
     b64:	22 81       	ldd	r18, Z+2	; 0x02
     b66:	62 2f       	mov	r22, r18
     b68:	6f 77       	andi	r22, 0x7F	; 127
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	22 1f       	adc	r18, r18
     b6e:	22 27       	eor	r18, r18
     b70:	22 1f       	adc	r18, r18
     b72:	93 81       	ldd	r25, Z+3	; 0x03
     b74:	89 2f       	mov	r24, r25
     b76:	88 0f       	add	r24, r24
     b78:	82 2b       	or	r24, r18
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	99 1f       	adc	r25, r25
     b80:	99 27       	eor	r25, r25
     b82:	99 1f       	adc	r25, r25
     b84:	11 96       	adiw	r26, 0x01	; 1
     b86:	9c 93       	st	X, r25
     b88:	11 97       	sbiw	r26, 0x01	; 1
     b8a:	21 15       	cp	r18, r1
     b8c:	31 05       	cpc	r19, r1
     b8e:	a9 f5       	brne	.+106    	; 0xbfa <__unpack_f+0x9e>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	11 f4       	brne	.+4      	; 0xb9e <__unpack_f+0x42>
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	37 c0       	rjmp	.+110    	; 0xc0c <__unpack_f+0xb0>
     b9e:	82 e8       	ldi	r24, 0x82	; 130
     ba0:	9f ef       	ldi	r25, 0xFF	; 255
     ba2:	13 96       	adiw	r26, 0x03	; 3
     ba4:	9c 93       	st	X, r25
     ba6:	8e 93       	st	-X, r24
     ba8:	12 97       	sbiw	r26, 0x02	; 2
     baa:	9a 01       	movw	r18, r20
     bac:	ab 01       	movw	r20, r22
     bae:	67 e0       	ldi	r22, 0x07	; 7
     bb0:	22 0f       	add	r18, r18
     bb2:	33 1f       	adc	r19, r19
     bb4:	44 1f       	adc	r20, r20
     bb6:	55 1f       	adc	r21, r21
     bb8:	6a 95       	dec	r22
     bba:	d1 f7       	brne	.-12     	; 0xbb0 <__unpack_f+0x54>
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	0d c0       	rjmp	.+26     	; 0xbdc <__unpack_f+0x80>
     bc2:	22 0f       	add	r18, r18
     bc4:	33 1f       	adc	r19, r19
     bc6:	44 1f       	adc	r20, r20
     bc8:	55 1f       	adc	r21, r21
     bca:	12 96       	adiw	r26, 0x02	; 2
     bcc:	8d 91       	ld	r24, X+
     bce:	9c 91       	ld	r25, X
     bd0:	13 97       	sbiw	r26, 0x03	; 3
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	13 96       	adiw	r26, 0x03	; 3
     bd6:	9c 93       	st	X, r25
     bd8:	8e 93       	st	-X, r24
     bda:	12 97       	sbiw	r26, 0x02	; 2
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	38 07       	cpc	r19, r24
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	48 07       	cpc	r20, r24
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	58 07       	cpc	r21, r24
     bea:	58 f3       	brcs	.-42     	; 0xbc2 <__unpack_f+0x66>
     bec:	14 96       	adiw	r26, 0x04	; 4
     bee:	2d 93       	st	X+, r18
     bf0:	3d 93       	st	X+, r19
     bf2:	4d 93       	st	X+, r20
     bf4:	5c 93       	st	X, r21
     bf6:	17 97       	sbiw	r26, 0x07	; 7
     bf8:	08 95       	ret
     bfa:	2f 3f       	cpi	r18, 0xFF	; 255
     bfc:	31 05       	cpc	r19, r1
     bfe:	79 f4       	brne	.+30     	; 0xc1e <__unpack_f+0xc2>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	19 f4       	brne	.+6      	; 0xc10 <__unpack_f+0xb4>
     c0a:	84 e0       	ldi	r24, 0x04	; 4
     c0c:	8c 93       	st	X, r24
     c0e:	08 95       	ret
     c10:	64 ff       	sbrs	r22, 4
     c12:	03 c0       	rjmp	.+6      	; 0xc1a <__unpack_f+0xbe>
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	8c 93       	st	X, r24
     c18:	12 c0       	rjmp	.+36     	; 0xc3e <__unpack_f+0xe2>
     c1a:	1c 92       	st	X, r1
     c1c:	10 c0       	rjmp	.+32     	; 0xc3e <__unpack_f+0xe2>
     c1e:	2f 57       	subi	r18, 0x7F	; 127
     c20:	30 40       	sbci	r19, 0x00	; 0
     c22:	13 96       	adiw	r26, 0x03	; 3
     c24:	3c 93       	st	X, r19
     c26:	2e 93       	st	-X, r18
     c28:	12 97       	sbiw	r26, 0x02	; 2
     c2a:	83 e0       	ldi	r24, 0x03	; 3
     c2c:	8c 93       	st	X, r24
     c2e:	87 e0       	ldi	r24, 0x07	; 7
     c30:	44 0f       	add	r20, r20
     c32:	55 1f       	adc	r21, r21
     c34:	66 1f       	adc	r22, r22
     c36:	77 1f       	adc	r23, r23
     c38:	8a 95       	dec	r24
     c3a:	d1 f7       	brne	.-12     	; 0xc30 <__unpack_f+0xd4>
     c3c:	70 64       	ori	r23, 0x40	; 64
     c3e:	14 96       	adiw	r26, 0x04	; 4
     c40:	4d 93       	st	X+, r20
     c42:	5d 93       	st	X+, r21
     c44:	6d 93       	st	X+, r22
     c46:	7c 93       	st	X, r23
     c48:	17 97       	sbiw	r26, 0x07	; 7
     c4a:	08 95       	ret

00000c4c <__fpcmp_parts_f>:
     c4c:	1f 93       	push	r17
     c4e:	dc 01       	movw	r26, r24
     c50:	fb 01       	movw	r30, r22
     c52:	9c 91       	ld	r25, X
     c54:	92 30       	cpi	r25, 0x02	; 2
     c56:	08 f4       	brcc	.+2      	; 0xc5a <__fpcmp_parts_f+0xe>
     c58:	47 c0       	rjmp	.+142    	; 0xce8 <__fpcmp_parts_f+0x9c>
     c5a:	80 81       	ld	r24, Z
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	08 f4       	brcc	.+2      	; 0xc62 <__fpcmp_parts_f+0x16>
     c60:	43 c0       	rjmp	.+134    	; 0xce8 <__fpcmp_parts_f+0x9c>
     c62:	94 30       	cpi	r25, 0x04	; 4
     c64:	51 f4       	brne	.+20     	; 0xc7a <__fpcmp_parts_f+0x2e>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	84 30       	cpi	r24, 0x04	; 4
     c6c:	99 f5       	brne	.+102    	; 0xcd4 <__fpcmp_parts_f+0x88>
     c6e:	81 81       	ldd	r24, Z+1	; 0x01
     c70:	68 2f       	mov	r22, r24
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	61 1b       	sub	r22, r17
     c76:	71 09       	sbc	r23, r1
     c78:	3f c0       	rjmp	.+126    	; 0xcf8 <__fpcmp_parts_f+0xac>
     c7a:	84 30       	cpi	r24, 0x04	; 4
     c7c:	21 f0       	breq	.+8      	; 0xc86 <__fpcmp_parts_f+0x3a>
     c7e:	92 30       	cpi	r25, 0x02	; 2
     c80:	31 f4       	brne	.+12     	; 0xc8e <__fpcmp_parts_f+0x42>
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	b9 f1       	breq	.+110    	; 0xcf4 <__fpcmp_parts_f+0xa8>
     c86:	81 81       	ldd	r24, Z+1	; 0x01
     c88:	88 23       	and	r24, r24
     c8a:	89 f1       	breq	.+98     	; 0xcee <__fpcmp_parts_f+0xa2>
     c8c:	2d c0       	rjmp	.+90     	; 0xce8 <__fpcmp_parts_f+0x9c>
     c8e:	11 96       	adiw	r26, 0x01	; 1
     c90:	1c 91       	ld	r17, X
     c92:	11 97       	sbiw	r26, 0x01	; 1
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	f1 f0       	breq	.+60     	; 0xcd4 <__fpcmp_parts_f+0x88>
     c98:	81 81       	ldd	r24, Z+1	; 0x01
     c9a:	18 17       	cp	r17, r24
     c9c:	d9 f4       	brne	.+54     	; 0xcd4 <__fpcmp_parts_f+0x88>
     c9e:	12 96       	adiw	r26, 0x02	; 2
     ca0:	2d 91       	ld	r18, X+
     ca2:	3c 91       	ld	r19, X
     ca4:	13 97       	sbiw	r26, 0x03	; 3
     ca6:	82 81       	ldd	r24, Z+2	; 0x02
     ca8:	93 81       	ldd	r25, Z+3	; 0x03
     caa:	82 17       	cp	r24, r18
     cac:	93 07       	cpc	r25, r19
     cae:	94 f0       	brlt	.+36     	; 0xcd4 <__fpcmp_parts_f+0x88>
     cb0:	28 17       	cp	r18, r24
     cb2:	39 07       	cpc	r19, r25
     cb4:	bc f0       	brlt	.+46     	; 0xce4 <__fpcmp_parts_f+0x98>
     cb6:	14 96       	adiw	r26, 0x04	; 4
     cb8:	8d 91       	ld	r24, X+
     cba:	9d 91       	ld	r25, X+
     cbc:	0d 90       	ld	r0, X+
     cbe:	bc 91       	ld	r27, X
     cc0:	a0 2d       	mov	r26, r0
     cc2:	24 81       	ldd	r18, Z+4	; 0x04
     cc4:	35 81       	ldd	r19, Z+5	; 0x05
     cc6:	46 81       	ldd	r20, Z+6	; 0x06
     cc8:	57 81       	ldd	r21, Z+7	; 0x07
     cca:	28 17       	cp	r18, r24
     ccc:	39 07       	cpc	r19, r25
     cce:	4a 07       	cpc	r20, r26
     cd0:	5b 07       	cpc	r21, r27
     cd2:	18 f4       	brcc	.+6      	; 0xcda <__fpcmp_parts_f+0x8e>
     cd4:	11 23       	and	r17, r17
     cd6:	41 f0       	breq	.+16     	; 0xce8 <__fpcmp_parts_f+0x9c>
     cd8:	0a c0       	rjmp	.+20     	; 0xcee <__fpcmp_parts_f+0xa2>
     cda:	82 17       	cp	r24, r18
     cdc:	93 07       	cpc	r25, r19
     cde:	a4 07       	cpc	r26, r20
     ce0:	b5 07       	cpc	r27, r21
     ce2:	40 f4       	brcc	.+16     	; 0xcf4 <__fpcmp_parts_f+0xa8>
     ce4:	11 23       	and	r17, r17
     ce6:	19 f0       	breq	.+6      	; 0xcee <__fpcmp_parts_f+0xa2>
     ce8:	61 e0       	ldi	r22, 0x01	; 1
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	05 c0       	rjmp	.+10     	; 0xcf8 <__fpcmp_parts_f+0xac>
     cee:	6f ef       	ldi	r22, 0xFF	; 255
     cf0:	7f ef       	ldi	r23, 0xFF	; 255
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <__fpcmp_parts_f+0xac>
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	cb 01       	movw	r24, r22
     cfa:	1f 91       	pop	r17
     cfc:	08 95       	ret

00000cfe <WATCHDOGTIMER_Init>:
#include"../includes/WatchDogTimer.h"
#include"../includes/WatchDogTimer_cfg.h"
#include"../includes/WatchDogTimer_prv.h"
#include "../../../Services/Bit_utils.h"
#include "../../../Services/Std_types.h"
void WATCHDOGTIMER_Init(){
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
	/*set prescaler*/
#if WATCHDOGTIMER_PRESCALER==KWDT16K
		CLR_BIT(WDTCR,WDP2);
     d06:	a1 e4       	ldi	r26, 0x41	; 65
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e1 e4       	ldi	r30, 0x41	; 65
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	8b 7f       	andi	r24, 0xFB	; 251
     d12:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDP1);
     d14:	a1 e4       	ldi	r26, 0x41	; 65
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e1 e4       	ldi	r30, 0x41	; 65
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	8d 7f       	andi	r24, 0xFD	; 253
     d20:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDP0);
     d22:	a1 e4       	ldi	r26, 0x41	; 65
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e1 e4       	ldi	r30, 0x41	; 65
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	8e 7f       	andi	r24, 0xFE	; 254
     d2e:	8c 93       	st	X, r24
		#error "Wrong prescaler reference Chosen"
	#endif



}
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	08 95       	ret

00000d36 <WATCHDOGTIMER_Enable>:
void WATCHDOGTIMER_Enable(){
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDE);
     d3e:	a1 e4       	ldi	r26, 0x41	; 65
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e1 e4       	ldi	r30, 0x41	; 65
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	88 60       	ori	r24, 0x08	; 8
     d4a:	8c 93       	st	X, r24
}
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <WATCHDOGTIMER_Disable>:
void WATCHDOGTIMER_Disable(){
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
	/* MUST WRITE 1 AT BOTH BIT 4 AND 3 AT THE SAME LINE, THE AFTER 4 CLK CYCLES BIT 3
	 * IS AUTOMATICALLY CLEARED
	 */
	WDTCR = (1<<WDE) | (1<<WDTOE);
     d5a:	e1 e4       	ldi	r30, 0x41	; 65
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	88 e1       	ldi	r24, 0x18	; 24
     d60:	80 83       	st	Z, r24
	WDTCR = 0x00;
     d62:	e1 e4       	ldi	r30, 0x41	; 65
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	10 82       	st	Z, r1
}
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <USART_Init>:
#include "../includes/USART.h"
#include "../../../Services/Bit_utils.h"
#include "../../../MCAL/PORT/includes/PORT.h"
#include <util/delay.h>

void USART_Init(){
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	0f 92       	push	r0
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62

	//local variable to equal UCSRC reg to write all values at one time
	u8 Loc_UCSRC=0;
     d78:	19 82       	std	Y+1, r1	; 0x01

		/*Select Mode*/
	#if USART_OPERATING_MODE==USART_ASYNCHRONOUS_MODE
		CLR_BIT(Loc_UCSRC,6);
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	8f 7b       	andi	r24, 0xBF	; 191
     d7e:	89 83       	std	Y+1, r24	; 0x01
		/*Select Parity*/
	#if USART_PARITY_MODE==USART_PARITY_DISABLED
		CLR_BIT(Loc_UCSRC,4);
		CLR_BIT(Loc_UCSRC,5);
	#elif USART_PARITY_MODE==USART_PARITY_EVEN
		CLR_BIT(Loc_UCSRC,4);
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	8f 7e       	andi	r24, 0xEF	; 239
     d84:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Loc_UCSRC,5);
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	80 62       	ori	r24, 0x20	; 32
     d8a:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Loc_UCSRC,5);
	#endif

		/*Select Stop Bits*/
	#if USART_STOP_MODE==USART_ONE_STOP_BIT
		CLR_BIT(Loc_UCSRC,3);
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	87 7f       	andi	r24, 0xF7	; 247
     d90:	89 83       	std	Y+1, r24	; 0x01
	#elif USART_DATA_SIZE==USART_SEVEN_DATA_BITS
		CLR_BIT(Loc_UCSRC,1);
		SET_BIT(Loc_UCSRC,2);
		CLR_BIT(UCSRB,2);
	#elif USART_DATA_SIZE==USART_EIGHT_DATA_BITS
		SET_BIT(Loc_UCSRC,1);
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	82 60       	ori	r24, 0x02	; 2
     d96:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Loc_UCSRC,2);
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	84 60       	ori	r24, 0x04	; 4
     d9c:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,2);
     d9e:	aa e2       	ldi	r26, 0x2A	; 42
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	ea e2       	ldi	r30, 0x2A	; 42
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	8b 7f       	andi	r24, 0xFB	; 251
     daa:	8c 93       	st	X, r24
		SET_BIT(Loc_UCSRC,2);
		SET_BIT(UCSRB,2);
	#endif

		/*Set Bit 7 in Local Variable*/
		SET_BIT(Loc_UCSRC,7);
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	80 68       	ori	r24, 0x80	; 128
     db0:	89 83       	std	Y+1, r24	; 0x01
		UCSRC=Loc_UCSRC;
     db2:	e0 e4       	ldi	r30, 0x40	; 64
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	80 83       	st	Z, r24

		/*SETTING THE BAUD RATE*/
		UBRRL=USART_BAUD_RATE;
     dba:	e9 e2       	ldi	r30, 0x29	; 41
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	88 e6       	ldi	r24, 0x68	; 104
     dc0:	80 83       	st	Z, r24

		/*Enable RXEN and TXEN*/
		SET_BIT(UCSRB,3);
     dc2:	aa e2       	ldi	r26, 0x2A	; 42
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	ea e2       	ldi	r30, 0x2A	; 42
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	88 60       	ori	r24, 0x08	; 8
     dce:	8c 93       	st	X, r24
		SET_BIT(UCSRB,4);
     dd0:	aa e2       	ldi	r26, 0x2A	; 42
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	ea e2       	ldi	r30, 0x2A	; 42
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	80 61       	ori	r24, 0x10	; 16
     ddc:	8c 93       	st	X, r24

		Port_enuSetPinDirection(24,PORT_u8INPUT); //pin D0 RX
     dde:	88 e1       	ldi	r24, 0x18	; 24
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
		Port_enuSetPinDirection(25,PORT_u8OUTPUT); //pin D1 TX
     de6:	89 e1       	ldi	r24, 0x19	; 25
     de8:	61 e0       	ldi	r22, 0x01	; 1
     dea:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
	}
     dee:	0f 90       	pop	r0
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <USART_SendChar>:

void USART_SendChar(u8 TransmittedChar){
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	0f 92       	push	r0
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	89 83       	std	Y+1, r24	; 0x01
	/*Poll on UDRE Flag*/
		while(GET_BIT(UCSRA,5)==0);
     e02:	eb e2       	ldi	r30, 0x2B	; 43
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	82 95       	swap	r24
     e0a:	86 95       	lsr	r24
     e0c:	87 70       	andi	r24, 0x07	; 7
     e0e:	88 2f       	mov	r24, r24
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	81 70       	andi	r24, 0x01	; 1
     e14:	90 70       	andi	r25, 0x00	; 0
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	a1 f3       	breq	.-24     	; 0xe02 <USART_SendChar+0xc>
		//Send Value to UDR
		UDR=TransmittedChar;
     e1a:	ec e2       	ldi	r30, 0x2C	; 44
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	80 83       	st	Z, r24
}
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <USART_ReceiveChar>:
u8 USART_ReceiveChar(){
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62


	/*Poll on RXC Flag*/

	while(GET_BIT(UCSRA,7)==0);
     e32:	eb e2       	ldi	r30, 0x2B	; 43
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	88 23       	and	r24, r24
     e3a:	dc f7       	brge	.-10     	; 0xe32 <USART_ReceiveChar+0x8>

	//Save UDR Content
	return UDR;
     e3c:	ec e2       	ldi	r30, 0x2C	; 44
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
}
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <USART_SendString>:
void USART_SendString(pu8 P_TransmittedString){
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	61 97       	sbiw	r28, 0x11	; 17
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	99 8b       	std	Y+17, r25	; 0x11
     e5e:	88 8b       	std	Y+16, r24	; 0x10

	u8 Loc_Counter=0;
     e60:	1f 86       	std	Y+15, r1	; 0x0f
     e62:	80 c0       	rjmp	.+256    	; 0xf64 <USART_SendString+0x11c>

		while(P_TransmittedString[Loc_Counter]!='\0')
		{
			USART_SendChar(P_TransmittedString[Loc_Counter]);
     e64:	8f 85       	ldd	r24, Y+15	; 0x0f
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	88 89       	ldd	r24, Y+16	; 0x10
     e6c:	99 89       	ldd	r25, Y+17	; 0x11
     e6e:	fc 01       	movw	r30, r24
     e70:	e2 0f       	add	r30, r18
     e72:	f3 1f       	adc	r31, r19
     e74:	80 81       	ld	r24, Z
     e76:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <USART_SendChar>
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	a8 e4       	ldi	r26, 0x48	; 72
     e80:	b2 e4       	ldi	r27, 0x42	; 66
     e82:	8b 87       	std	Y+11, r24	; 0x0b
     e84:	9c 87       	std	Y+12, r25	; 0x0c
     e86:	ad 87       	std	Y+13, r26	; 0x0d
     e88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e90:	9e 85       	ldd	r25, Y+14	; 0x0e
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	4a e7       	ldi	r20, 0x7A	; 122
     e98:	55 e4       	ldi	r21, 0x45	; 69
     e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	8f 83       	std	Y+7, r24	; 0x07
     ea4:	98 87       	std	Y+8, r25	; 0x08
     ea6:	a9 87       	std	Y+9, r26	; 0x09
     ea8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eaa:	6f 81       	ldd	r22, Y+7	; 0x07
     eac:	78 85       	ldd	r23, Y+8	; 0x08
     eae:	89 85       	ldd	r24, Y+9	; 0x09
     eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e8       	ldi	r20, 0x80	; 128
     eb8:	5f e3       	ldi	r21, 0x3F	; 63
     eba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ebe:	88 23       	and	r24, r24
     ec0:	2c f4       	brge	.+10     	; 0xecc <USART_SendString+0x84>
		__ticks = 1;
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	9e 83       	std	Y+6, r25	; 0x06
     ec8:	8d 83       	std	Y+5, r24	; 0x05
     eca:	3f c0       	rjmp	.+126    	; 0xf4a <USART_SendString+0x102>
	else if (__tmp > 65535)
     ecc:	6f 81       	ldd	r22, Y+7	; 0x07
     ece:	78 85       	ldd	r23, Y+8	; 0x08
     ed0:	89 85       	ldd	r24, Y+9	; 0x09
     ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	3f ef       	ldi	r19, 0xFF	; 255
     ed8:	4f e7       	ldi	r20, 0x7F	; 127
     eda:	57 e4       	ldi	r21, 0x47	; 71
     edc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ee0:	18 16       	cp	r1, r24
     ee2:	4c f5       	brge	.+82     	; 0xf36 <USART_SendString+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eea:	9e 85       	ldd	r25, Y+14	; 0x0e
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	40 e2       	ldi	r20, 0x20	; 32
     ef2:	51 e4       	ldi	r21, 0x41	; 65
     ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	bc 01       	movw	r22, r24
     efe:	cd 01       	movw	r24, r26
     f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	9e 83       	std	Y+6, r25	; 0x06
     f0a:	8d 83       	std	Y+5, r24	; 0x05
     f0c:	0f c0       	rjmp	.+30     	; 0xf2c <USART_SendString+0xe4>
     f0e:	80 e9       	ldi	r24, 0x90	; 144
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	9c 83       	std	Y+4, r25	; 0x04
     f14:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	9c 81       	ldd	r25, Y+4	; 0x04
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <USART_SendString+0xd2>
     f1e:	9c 83       	std	Y+4, r25	; 0x04
     f20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f22:	8d 81       	ldd	r24, Y+5	; 0x05
     f24:	9e 81       	ldd	r25, Y+6	; 0x06
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	9e 83       	std	Y+6, r25	; 0x06
     f2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f2c:	8d 81       	ldd	r24, Y+5	; 0x05
     f2e:	9e 81       	ldd	r25, Y+6	; 0x06
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	69 f7       	brne	.-38     	; 0xf0e <USART_SendString+0xc6>
     f34:	14 c0       	rjmp	.+40     	; 0xf5e <USART_SendString+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f36:	6f 81       	ldd	r22, Y+7	; 0x07
     f38:	78 85       	ldd	r23, Y+8	; 0x08
     f3a:	89 85       	ldd	r24, Y+9	; 0x09
     f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	9e 83       	std	Y+6, r25	; 0x06
     f48:	8d 83       	std	Y+5, r24	; 0x05
     f4a:	8d 81       	ldd	r24, Y+5	; 0x05
     f4c:	9e 81       	ldd	r25, Y+6	; 0x06
     f4e:	9a 83       	std	Y+2, r25	; 0x02
     f50:	89 83       	std	Y+1, r24	; 0x01
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	9a 81       	ldd	r25, Y+2	; 0x02
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	f1 f7       	brne	.-4      	; 0xf56 <USART_SendString+0x10e>
     f5a:	9a 83       	std	Y+2, r25	; 0x02
     f5c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
			Loc_Counter++;
     f5e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f60:	8f 5f       	subi	r24, 0xFF	; 255
     f62:	8f 87       	std	Y+15, r24	; 0x0f
}
void USART_SendString(pu8 P_TransmittedString){

	u8 Loc_Counter=0;

		while(P_TransmittedString[Loc_Counter]!='\0')
     f64:	8f 85       	ldd	r24, Y+15	; 0x0f
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	88 89       	ldd	r24, Y+16	; 0x10
     f6c:	99 89       	ldd	r25, Y+17	; 0x11
     f6e:	fc 01       	movw	r30, r24
     f70:	e2 0f       	add	r30, r18
     f72:	f3 1f       	adc	r31, r19
     f74:	80 81       	ld	r24, Z
     f76:	88 23       	and	r24, r24
     f78:	09 f0       	breq	.+2      	; 0xf7c <USART_SendString+0x134>
     f7a:	74 cf       	rjmp	.-280    	; 0xe64 <USART_SendString+0x1c>
			USART_SendChar(P_TransmittedString[Loc_Counter]);
			_delay_ms(50);
			Loc_Counter++;
		}

}
     f7c:	61 96       	adiw	r28, 0x11	; 17
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <USART_ReceiveString>:
void USART_ReceiveString (pu8 P_ReceiveString){
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	00 d0       	rcall	.+0      	; 0xf98 <USART_ReceiveString+0xa>
     f98:	0f 92       	push	r0
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	9b 83       	std	Y+3, r25	; 0x03
     fa0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_Counter=0;
     fa2:	19 82       	std	Y+1, r1	; 0x01

		while(1)
			{
				//Receive
			P_ReceiveString[Loc_Counter]=USART_ReceiveChar();
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	9b 81       	ldd	r25, Y+3	; 0x03
     fae:	8c 01       	movw	r16, r24
     fb0:	02 0f       	add	r16, r18
     fb2:	13 1f       	adc	r17, r19
     fb4:	0e 94 15 07 	call	0xe2a	; 0xe2a <USART_ReceiveChar>
     fb8:	f8 01       	movw	r30, r16
     fba:	80 83       	st	Z, r24

			if(P_ReceiveString[Loc_Counter]==' ')
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	9b 81       	ldd	r25, Y+3	; 0x03
     fc6:	fc 01       	movw	r30, r24
     fc8:	e2 0f       	add	r30, r18
     fca:	f3 1f       	adc	r31, r19
     fcc:	80 81       	ld	r24, Z
     fce:	80 32       	cpi	r24, 0x20	; 32
     fd0:	21 f0       	breq	.+8      	; 0xfda <USART_ReceiveString+0x4c>
			{
				break;
			}
			Loc_Counter++;
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	8f 5f       	subi	r24, 0xFF	; 255
     fd6:	89 83       	std	Y+1, r24	; 0x01
     fd8:	e5 cf       	rjmp	.-54     	; 0xfa4 <USART_ReceiveString+0x16>
			}
	}
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	08 95       	ret

00000fea <Timer2Init>:
u8  Timer2u8RemainingTicks= 0;

void (*Timer2voidCallBack) (void) = NULL;


void Timer2Init() {
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62

	#if	TIMER2_MODE		==		NORMAL
	CLR_BIT(TCCR2,WGM21); CLR_BIT(TCCR2,WGM20);
     ff2:	a5 e4       	ldi	r26, 0x45	; 69
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e5 e4       	ldi	r30, 0x45	; 69
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	87 7f       	andi	r24, 0xF7	; 247
     ffe:	8c 93       	st	X, r24
    1000:	a5 e4       	ldi	r26, 0x45	; 69
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e5 e4       	ldi	r30, 0x45	; 69
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8f 7b       	andi	r24, 0xBF	; 191
    100c:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TOIE2);
    100e:	a9 e5       	ldi	r26, 0x59	; 89
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e9 e5       	ldi	r30, 0x59	; 89
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	80 64       	ori	r24, 0x40	; 64
    101a:	8c 93       	st	X, r24
	#elif		TIMER2_MODE		==		CTC
	SET_BIT(TCCR2,WGM21); CLR_BIT(TCCR2,WGM20);
	SET_BIT(TIMSK,OCIE2);
	#endif
	SET_BIT(SREG,1);
    101c:	af e5       	ldi	r26, 0x5F	; 95
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	ef e5       	ldi	r30, 0x5F	; 95
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	82 60       	ori	r24, 0x02	; 2
    1028:	8c 93       	st	X, r24

}
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <Timer2SetTime>:


void  Timer2SetTime(u32 Local_u32_DesiredTime)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	2c 97       	sbiw	r28, 0x0c	; 12
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	69 87       	std	Y+9, r22	; 0x09
    1046:	7a 87       	std	Y+10, r23	; 0x0a
    1048:	8b 87       	std	Y+11, r24	; 0x0b
    104a:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_u32_TickTime =0;
    104c:	1d 82       	std	Y+5, r1	; 0x05
    104e:	1e 82       	std	Y+6, r1	; 0x06
    1050:	1f 82       	std	Y+7, r1	; 0x07
    1052:	18 86       	std	Y+8, r1	; 0x08
	u32 Local_u32_NumberOfTicks=0;
    1054:	19 82       	std	Y+1, r1	; 0x01
    1056:	1a 82       	std	Y+2, r1	; 0x02
    1058:	1b 82       	std	Y+3, r1	; 0x03
    105a:	1c 82       	std	Y+4, r1	; 0x04
	Local_u32_TickTime		=	MTIMER2_PRESCALER/CRYSTALFREQUENCY;
    105c:	1d 82       	std	Y+5, r1	; 0x05
    105e:	1e 82       	std	Y+6, r1	; 0x06
    1060:	1f 82       	std	Y+7, r1	; 0x07
    1062:	18 86       	std	Y+8, r1	; 0x08
	 Local_u32_NumberOfTicks =	((Local_u32_DesiredTime*1000)/Local_u32_TickTime);
    1064:	89 85       	ldd	r24, Y+9	; 0x09
    1066:	9a 85       	ldd	r25, Y+10	; 0x0a
    1068:	ab 85       	ldd	r26, Y+11	; 0x0b
    106a:	bc 85       	ldd	r27, Y+12	; 0x0c
    106c:	28 ee       	ldi	r18, 0xE8	; 232
    106e:	33 e0       	ldi	r19, 0x03	; 3
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	bc 01       	movw	r22, r24
    1076:	cd 01       	movw	r24, r26
    1078:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <__mulsi3>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	2d 81       	ldd	r18, Y+5	; 0x05
    1082:	3e 81       	ldd	r19, Y+6	; 0x06
    1084:	4f 81       	ldd	r20, Y+7	; 0x07
    1086:	58 85       	ldd	r21, Y+8	; 0x08
    1088:	bc 01       	movw	r22, r24
    108a:	cd 01       	movw	r24, r26
    108c:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <__udivmodsi4>
    1090:	da 01       	movw	r26, r20
    1092:	c9 01       	movw	r24, r18
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	9a 83       	std	Y+2, r25	; 0x02
    1098:	ab 83       	std	Y+3, r26	; 0x03
    109a:	bc 83       	std	Y+4, r27	; 0x04
	#if	TIMER2_MODE		==		NORMAL
	Timer2u32NumberofOVFs		=	Local_u32_NumberOfTicks/256;
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	9a 81       	ldd	r25, Y+2	; 0x02
    10a0:	ab 81       	ldd	r26, Y+3	; 0x03
    10a2:	bc 81       	ldd	r27, Y+4	; 0x04
    10a4:	89 2f       	mov	r24, r25
    10a6:	9a 2f       	mov	r25, r26
    10a8:	ab 2f       	mov	r26, r27
    10aa:	bb 27       	eor	r27, r27
    10ac:	80 93 9c 00 	sts	0x009C, r24
    10b0:	90 93 9d 00 	sts	0x009D, r25
    10b4:	a0 93 9e 00 	sts	0x009E, r26
    10b8:	b0 93 9f 00 	sts	0x009F, r27
	Timer2u8RemainingTicks			=	Local_u32_NumberOfTicks%256;
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	80 93 a4 00 	sts	0x00A4, r24
	if (Timer2u8RemainingTicks != 0)
    10c2:	80 91 a4 00 	lds	r24, 0x00A4
    10c6:	88 23       	and	r24, r24
    10c8:	c9 f0       	breq	.+50     	; 0x10fc <Timer2SetTime+0xcc>
	{
		TCNT2 = 256 - Timer2u8RemainingTicks;
    10ca:	e4 e4       	ldi	r30, 0x44	; 68
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 91 a4 00 	lds	r24, 0x00A4
    10d2:	81 95       	neg	r24
    10d4:	80 83       	st	Z, r24
		Timer2u32NumberofOVFs++;
    10d6:	80 91 9c 00 	lds	r24, 0x009C
    10da:	90 91 9d 00 	lds	r25, 0x009D
    10de:	a0 91 9e 00 	lds	r26, 0x009E
    10e2:	b0 91 9f 00 	lds	r27, 0x009F
    10e6:	01 96       	adiw	r24, 0x01	; 1
    10e8:	a1 1d       	adc	r26, r1
    10ea:	b1 1d       	adc	r27, r1
    10ec:	80 93 9c 00 	sts	0x009C, r24
    10f0:	90 93 9d 00 	sts	0x009D, r25
    10f4:	a0 93 9e 00 	sts	0x009E, r26
    10f8:	b0 93 9f 00 	sts	0x009F, r27
	}
	Timer2u32NumOfCompareMatches = Local_u32_NumberOfTicks/ Local_u8_Division_Factor;
	OCR2 = Local_u8_Division_Factor-1;
	#endif

}
    10fc:	2c 96       	adiw	r28, 0x0c	; 12
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <Timer2Start>:


void Timer2Start()
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
	#elif MTIMER2_PRESCALER	==		PRESCALER_64
	CLR_BIT(TCCR2,CS22); SET_BIT(TCCR2,CS21);	SET_BIT(TCCR2,CS20);
	#elif MTIMER2_PRESCALER	==		PRESCALER_256
	SET_BIT(TCCR2,CS22); CLR_BIT(TCCR2,CS21);	SET_BIT(TCCR2,CS20);
	#elif MTIMER2_PRESCALER	==		PRESCALER_1024
	SET_BIT(TCCR2,CS22); SET_BIT(TCCR2,CS21);	SET_BIT(TCCR2,CS20);
    1116:	a5 e4       	ldi	r26, 0x45	; 69
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e5 e4       	ldi	r30, 0x45	; 69
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	84 60       	ori	r24, 0x04	; 4
    1122:	8c 93       	st	X, r24
    1124:	a5 e4       	ldi	r26, 0x45	; 69
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e5 e4       	ldi	r30, 0x45	; 69
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	82 60       	ori	r24, 0x02	; 2
    1130:	8c 93       	st	X, r24
    1132:	a5 e4       	ldi	r26, 0x45	; 69
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e5 e4       	ldi	r30, 0x45	; 69
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	81 60       	ori	r24, 0x01	; 1
    113e:	8c 93       	st	X, r24
	#endif
}
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <Timer2Stop>:

void Timer2Stop()
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2,CS22);
    114e:	a5 e4       	ldi	r26, 0x45	; 69
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e5 e4       	ldi	r30, 0x45	; 69
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	8b 7f       	andi	r24, 0xFB	; 251
    115a:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS21);
    115c:	a5 e4       	ldi	r26, 0x45	; 69
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e5 e4       	ldi	r30, 0x45	; 69
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	8d 7f       	andi	r24, 0xFD	; 253
    1168:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS20);
    116a:	a5 e4       	ldi	r26, 0x45	; 69
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e5 e4       	ldi	r30, 0x45	; 69
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	8e 7f       	andi	r24, 0xFE	; 254
    1176:	8c 93       	st	X, r24
}
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <PWM2Init>:


void PWM2Init()
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
	Port_enuSetPinDirection(31,PORT_u8OUTPUT);
    1186:	8f e1       	ldi	r24, 0x1F	; 31
    1188:	61 e0       	ldi	r22, 0x01	; 1
    118a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>


	#if	PWM2_MODE		==		FAST_PWM
	SET_BIT(TCCR2,WGM21);
    118e:	a5 e4       	ldi	r26, 0x45	; 69
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e5 e4       	ldi	r30, 0x45	; 69
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	88 60       	ori	r24, 0x08	; 8
    119a:	8c 93       	st	X, r24
	SET_BIT(TCCR2,WGM20);
    119c:	a5 e4       	ldi	r26, 0x45	; 69
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e5 e4       	ldi	r30, 0x45	; 69
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	80 64       	ori	r24, 0x40	; 64
    11a8:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,WGM21);
	SET_BIT(TCCR2,WGM20);
	#endif

	#if	OUTPUT_MODE		==		NON_INVERTED
	SET_BIT(TCCR2,COM21);
    11aa:	a5 e4       	ldi	r26, 0x45	; 69
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e5 e4       	ldi	r30, 0x45	; 69
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	80 62       	ori	r24, 0x20	; 32
    11b6:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,COM20);
    11b8:	a5 e4       	ldi	r26, 0x45	; 69
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e5 e4       	ldi	r30, 0x45	; 69
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	8f 7e       	andi	r24, 0xEF	; 239
    11c4:	8c 93       	st	X, r24
	#elif OUTPUT_MODE		==		INVERTED
	SET_BIT(TCCR2,COM21);
	SET_BIT(TCCR2,COM20);
	#endif

}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <PWM2SetDutyCycle>:

void PWM2SetDutyCycle(u8 Local_u8DesiredDutyCycle)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	0f 92       	push	r0
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	89 83       	std	Y+1, r24	; 0x01
	#if	OUTPUT_MODE	==	NON_INVERTED

	if(Local_u8DesiredDutyCycle == 0)
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	88 23       	and	r24, r24
    11dc:	f1 f4       	brne	.+60     	; 0x121a <PWM2SetDutyCycle+0x4e>
	{
		SET_BIT(TCCR2,COM21);
    11de:	a5 e4       	ldi	r26, 0x45	; 69
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e4       	ldi	r30, 0x45	; 69
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	80 62       	ori	r24, 0x20	; 32
    11ea:	8c 93       	st	X, r24
		SET_BIT(TCCR2,COM20);
    11ec:	a5 e4       	ldi	r26, 0x45	; 69
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e5 e4       	ldi	r30, 0x45	; 69
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	80 61       	ori	r24, 0x10	; 16
    11f8:	8c 93       	st	X, r24
		OCR2 = (255 -((Local_u8DesiredDutyCycle *256)/100));
    11fa:	e3 e4       	ldi	r30, 0x43	; 67
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	98 2f       	mov	r25, r24
    1206:	88 27       	eor	r24, r24
    1208:	24 e6       	ldi	r18, 0x64	; 100
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	b9 01       	movw	r22, r18
    120e:	0e 94 b4 2e 	call	0x5d68	; 0x5d68 <__divmodhi4>
    1212:	cb 01       	movw	r24, r22
    1214:	80 95       	com	r24
    1216:	80 83       	st	Z, r24
    1218:	1d c0       	rjmp	.+58     	; 0x1254 <PWM2SetDutyCycle+0x88>
	}
	else
	{
		SET_BIT(TCCR2,COM21);
    121a:	a5 e4       	ldi	r26, 0x45	; 69
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e5 e4       	ldi	r30, 0x45	; 69
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	80 62       	ori	r24, 0x20	; 32
    1226:	8c 93       	st	X, r24
		CLR_BIT(TCCR2,COM20);
    1228:	a5 e4       	ldi	r26, 0x45	; 69
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e5 e4       	ldi	r30, 0x45	; 69
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	8f 7e       	andi	r24, 0xEF	; 239
    1234:	8c 93       	st	X, r24
		OCR2 = (((Local_u8DesiredDutyCycle *256) /100) - 1);
    1236:	e3 e4       	ldi	r30, 0x43	; 67
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	98 2f       	mov	r25, r24
    1242:	88 27       	eor	r24, r24
    1244:	24 e6       	ldi	r18, 0x64	; 100
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	b9 01       	movw	r22, r18
    124a:	0e 94 b4 2e 	call	0x5d68	; 0x5d68 <__divmodhi4>
    124e:	cb 01       	movw	r24, r22
    1250:	81 50       	subi	r24, 0x01	; 1
    1252:	80 83       	st	Z, r24
		SET_BIT(TCCR2,COM20);
		OCR2 = (255 - ((Local_u8_DesiredDutyCycle *256)/100));
	}
	#endif

}
    1254:	0f 90       	pop	r0
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <PWM2Start>:

void PWM2Start()
{
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
	Timer2Start();
    1264:	0e 94 87 08 	call	0x110e	; 0x110e <Timer2Start>
	Port_enuSetPinDirection(31,PORT_u8OUTPUT);
    1268:	8f e1       	ldi	r24, 0x1F	; 31
    126a:	61 e0       	ldi	r22, 0x01	; 1
    126c:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
}
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <PWM2Stop>:

void PWM2Stop()
{
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
	Timer2Stop();
    127e:	0e 94 a3 08 	call	0x1146	; 0x1146 <Timer2Stop>

}
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <Timer2SetCallBack>:




void Timer2SetCallBack	(void (*Local_void_ptr) (void))
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	00 d0       	rcall	.+0      	; 0x128e <Timer2SetCallBack+0x6>
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	9a 83       	std	Y+2, r25	; 0x02
    1294:	89 83       	std	Y+1, r24	; 0x01
	Timer2voidCallBack = Local_void_ptr;
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	9a 81       	ldd	r25, Y+2	; 0x02
    129a:	90 93 a6 00 	sts	0x00A6, r25
    129e:	80 93 a5 00 	sts	0x00A5, r24
}
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <Timer1_Init>:
void (*GLOB_VidTimer1OVFPtrCallBack)(void) = NULL;
void (*GLOB_VidTimer1OCAPtrCallBack)(void) = NULL;
void (*GLOB_VidTimer1OCBPtrCallBack)(void) = NULL;
void (*GLOB_VidTimer1CaptureEventPtrCallBack)(void) = NULL;
void Timer1_Init(void)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, WGM12);
	CLR_BIT(TCCR1A, WGM11);
	CLR_BIT(TCCR1A, WGM10);

#elif MODE == FAST_PWM_ICR1
	SET_BIT(TCCR1B, WGM13);
    12b4:	ae e4       	ldi	r26, 0x4E	; 78
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	ee e4       	ldi	r30, 0x4E	; 78
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	80 61       	ori	r24, 0x10	; 16
    12c0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    12c2:	ae e4       	ldi	r26, 0x4E	; 78
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	ee e4       	ldi	r30, 0x4E	; 78
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	88 60       	ori	r24, 0x08	; 8
    12ce:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    12d0:	af e4       	ldi	r26, 0x4F	; 79
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ef e4       	ldi	r30, 0x4F	; 79
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	82 60       	ori	r24, 0x02	; 2
    12dc:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM10);
    12de:	af e4       	ldi	r26, 0x4F	; 79
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	ef e4       	ldi	r30, 0x4F	; 79
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	8e 7f       	andi	r24, 0xFE	; 254
    12ea:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1A0);
#elif OC1A_FAST_PWM == TOGGLE_OC1A
	CLR_BIT(TCCR1A, COM1A1);
	SET_BIT(TCCR1A, COM1A0);
#elif OC1A_FAST_PWM == NON_INVERTED_OC1A
	SET_BIT(TCCR1A, COM1A1);
    12ec:	af e4       	ldi	r26, 0x4F	; 79
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ef e4       	ldi	r30, 0x4F	; 79
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	80 68       	ori	r24, 0x80	; 128
    12f8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1A0);
    12fa:	af e4       	ldi	r26, 0x4F	; 79
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	ef e4       	ldi	r30, 0x4F	; 79
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8f 7b       	andi	r24, 0xBF	; 191
    1306:	8c 93       	st	X, r24
#endif
#if OC1B_FAST_PWM == DISCONNECT_OC1B
	CLR_BIT(TCCR1A, COM1B1);
	CLR_BIT(TCCR1A, COM1B0);
#elif OC1B_FAST_PWM == NON_INVERTED_OC1B
	SET_BIT(TCCR1A, COM1B1);
    1308:	af e4       	ldi	r26, 0x4F	; 79
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	ef e4       	ldi	r30, 0x4F	; 79
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	80 62       	ori	r24, 0x20	; 32
    1314:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1B0);
    1316:	af e4       	ldi	r26, 0x4F	; 79
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	ef e4       	ldi	r30, 0x4F	; 79
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	8f 7e       	andi	r24, 0xEF	; 239
    1322:	8c 93       	st	X, r24
#elif CLOCK_SELECT == PRESCALER_8
	CLR_BIT(TCCR1B, CS12);
	SET_BIT(TCCR1B, CS11);
	CLR_BIT(TCCR1B, CS10);
#elif CLOCK_SELECT == PRESCALER_64
	CLR_BIT(TCCR1B, CS12);
    1324:	ae e4       	ldi	r26, 0x4E	; 78
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	ee e4       	ldi	r30, 0x4E	; 78
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	8b 7f       	andi	r24, 0xFB	; 251
    1330:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    1332:	ae e4       	ldi	r26, 0x4E	; 78
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	ee e4       	ldi	r30, 0x4E	; 78
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	82 60       	ori	r24, 0x02	; 2
    133e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS10);
    1340:	ae e4       	ldi	r26, 0x4E	; 78
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	ee e4       	ldi	r30, 0x4E	; 78
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	81 60       	ori	r24, 0x01	; 1
    134c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
	SET_BIT(TCCR1B, CS10);
#else
#error "Incorrect clock selection"
#endif
}
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <Timer1_Preload>:

void Timer1_Preload(const u16 LOC_U16Value)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	00 d0       	rcall	.+0      	; 0x135a <Timer1_Preload+0x6>
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	9a 83       	std	Y+2, r25	; 0x02
    1360:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = LOC_U16Value;
    1362:	ec e4       	ldi	r30, 0x4C	; 76
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	9a 81       	ldd	r25, Y+2	; 0x02
    136a:	91 83       	std	Z+1, r25	; 0x01
    136c:	80 83       	st	Z, r24

}
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <Timer1_SetCounterTOP>:

void Timer1_SetCounterTOP(const u16 LOC_U16Value)
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	00 d0       	rcall	.+0      	; 0x137e <Timer1_SetCounterTOP+0x6>
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	9a 83       	std	Y+2, r25	; 0x02
    1384:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_U16Value >= MINIMUM_RESOLUTION)
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	9a 81       	ldd	r25, Y+2	; 0x02
    138a:	83 30       	cpi	r24, 0x03	; 3
    138c:	91 05       	cpc	r25, r1
    138e:	30 f0       	brcs	.+12     	; 0x139c <Timer1_SetCounterTOP+0x24>
#if MODE == CTC_OCR1A || MODE == FAST_PWM_OCR1A || MODE == PHASE_CORRECT_OCR1A \
		|| MODE == PHASE_AND_FREQUENCY_CORRECT_OCR1A
		OCR1A = LOC_U16Value;
#elif MODE == CTC_ICR1 || MODE == FAST_PWM_ICR1 || MODE == PHASE_CORRECT_ICR1 \
		|| MODE == PHASE_AND_FREQUENCY_CORRECT_ICR1
		ICR1 = LOC_U16Value;
    1390:	e6 e4       	ldi	r30, 0x46	; 70
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	9a 81       	ldd	r25, Y+2	; 0x02
    1398:	91 83       	std	Z+1, r25	; 0x01
    139a:	80 83       	st	Z, r24
#else
#error "Invalid mode of operation for timer1"
#endif
	}

}
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <Timer1_SetOCACompareValue>:

void Timer1_SetOCACompareValue( u16 LOC_U16Value)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <Timer1_SetOCACompareValue+0x6>
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	89 83       	std	Y+1, r24	; 0x01
#if MODE == CTC_OCR1A || MODE == PHASE_AND_FREQUENCY_CORRECT_OCR1A || MODE == \
		PHASE_CORRECT_OCR1A
	/* Trying to set the OCR1A value as a compare value while using OCR1A as a TOP */
#else
	OCR1A = LOC_U16Value;
    13b4:	ea e4       	ldi	r30, 0x4A	; 74
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	9a 81       	ldd	r25, Y+2	; 0x02
    13bc:	91 83       	std	Z+1, r25	; 0x01
    13be:	80 83       	st	Z, r24

#endif
}
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <Timer1_SetOCBCompareValue>:

void Timer1_SetOCBCompareValue( u16 LOC_U16Value)
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <Timer1_SetOCBCompareValue+0x6>
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	9a 83       	std	Y+2, r25	; 0x02
    13d6:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = LOC_U16Value;
    13d8:	e8 e4       	ldi	r30, 0x48	; 72
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	9a 81       	ldd	r25, Y+2	; 0x02
    13e0:	91 83       	std	Z+1, r25	; 0x01
    13e2:	80 83       	st	Z, r24

}
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <Timer1_OC1ASetDutyCycle>:

void Timer1_OC1ASetDutyCycle( f32 LOC_F32DutyCycle)
{
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	00 d0       	rcall	.+0      	; 0x13f4 <Timer1_OC1ASetDutyCycle+0x6>
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <Timer1_OC1ASetDutyCycle+0x8>
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	69 83       	std	Y+1, r22	; 0x01
    13fc:	7a 83       	std	Y+2, r23	; 0x02
    13fe:	8b 83       	std	Y+3, r24	; 0x03
    1400:	9c 83       	std	Y+4, r25	; 0x04
	if (LOC_F32DutyCycle >= MINIMUM_DUTYCYCLE && LOC_F32DutyCycle <= MAXIMUM_DUTYCYCLE && 1024 >= MINIMUM_RESOLUTION)
    1402:	69 81       	ldd	r22, Y+1	; 0x01
    1404:	7a 81       	ldd	r23, Y+2	; 0x02
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e0       	ldi	r20, 0x00	; 0
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    1416:	88 23       	and	r24, r24
    1418:	74 f1       	brlt	.+92     	; 0x1476 <Timer1_OC1ASetDutyCycle+0x88>
    141a:	69 81       	ldd	r22, Y+1	; 0x01
    141c:	7a 81       	ldd	r23, Y+2	; 0x02
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	9c 81       	ldd	r25, Y+4	; 0x04
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	48 ec       	ldi	r20, 0xC8	; 200
    1428:	52 e4       	ldi	r21, 0x42	; 66
    142a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    142e:	18 16       	cp	r1, r24
    1430:	14 f1       	brlt	.+68     	; 0x1476 <Timer1_OC1ASetDutyCycle+0x88>
	{
		Timer1_SetCounterTOP(1024);
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	94 e0       	ldi	r25, 0x04	; 4
    1436:	0e 94 bc 09 	call	0x1378	; 0x1378 <Timer1_SetCounterTOP>
		Timer1_SetOCACompareValue( ( LOC_F32DutyCycle / 100 ) * ( 1024 ) );
    143a:	69 81       	ldd	r22, Y+1	; 0x01
    143c:	7a 81       	ldd	r23, Y+2	; 0x02
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	9c 81       	ldd	r25, Y+4	; 0x04
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	48 ec       	ldi	r20, 0xC8	; 200
    1448:	52 e4       	ldi	r21, 0x42	; 66
    144a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	bc 01       	movw	r22, r24
    1454:	cd 01       	movw	r24, r26
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e8       	ldi	r20, 0x80	; 128
    145c:	54 e4       	ldi	r21, 0x44	; 68
    145e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <Timer1_SetOCACompareValue>
	}
	else
	{

	}
}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <Timer1_OC1BSetDutyCycle>:

void Timer1_OC1BSetDutyCycle( f32 LOC_F32DutyCycle)
{
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	00 d0       	rcall	.+0      	; 0x148a <Timer1_OC1BSetDutyCycle+0x6>
    148a:	00 d0       	rcall	.+0      	; 0x148c <Timer1_OC1BSetDutyCycle+0x8>
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	69 83       	std	Y+1, r22	; 0x01
    1492:	7a 83       	std	Y+2, r23	; 0x02
    1494:	8b 83       	std	Y+3, r24	; 0x03
    1496:	9c 83       	std	Y+4, r25	; 0x04
	if (LOC_F32DutyCycle <= MAXIMUM_DUTYCYCLE && 1024 >= MINIMUM_RESOLUTION)
    1498:	69 81       	ldd	r22, Y+1	; 0x01
    149a:	7a 81       	ldd	r23, Y+2	; 0x02
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	9c 81       	ldd	r25, Y+4	; 0x04
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	48 ec       	ldi	r20, 0xC8	; 200
    14a6:	52 e4       	ldi	r21, 0x42	; 66
    14a8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    14ac:	18 16       	cp	r1, r24
    14ae:	14 f1       	brlt	.+68     	; 0x14f4 <Timer1_OC1BSetDutyCycle+0x70>
	{
		Timer1_SetCounterTOP(1024);
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	94 e0       	ldi	r25, 0x04	; 4
    14b4:	0e 94 bc 09 	call	0x1378	; 0x1378 <Timer1_SetCounterTOP>
		Timer1_SetOCBCompareValue( ( LOC_F32DutyCycle / 100 ) * ( 1024 ) );
    14b8:	69 81       	ldd	r22, Y+1	; 0x01
    14ba:	7a 81       	ldd	r23, Y+2	; 0x02
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	9c 81       	ldd	r25, Y+4	; 0x04
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	48 ec       	ldi	r20, 0xC8	; 200
    14c6:	52 e4       	ldi	r21, 0x42	; 66
    14c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	bc 01       	movw	r22, r24
    14d2:	cd 01       	movw	r24, r26
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e8       	ldi	r20, 0x80	; 128
    14da:	54 e4       	ldi	r21, 0x44	; 68
    14dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	bc 01       	movw	r22, r24
    14e6:	cd 01       	movw	r24, r26
    14e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	0e 94 e5 09 	call	0x13ca	; 0x13ca <Timer1_SetOCBCompareValue>

	}
	else
	{
	}
}
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <Timer1_GetCounterValue>:

void Timer1_GetCounterValue(u16* const LOC_U16Value)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	00 d0       	rcall	.+0      	; 0x1508 <Timer1_GetCounterValue+0x6>
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	9a 83       	std	Y+2, r25	; 0x02
    150e:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_U16Value != NULL)
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	9a 81       	ldd	r25, Y+2	; 0x02
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	41 f0       	breq	.+16     	; 0x1528 <Timer1_GetCounterValue+0x26>
	{
		*LOC_U16Value = TCNT1;
    1518:	ec e4       	ldi	r30, 0x4C	; 76
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	91 81       	ldd	r25, Z+1	; 0x01
    1520:	e9 81       	ldd	r30, Y+1	; 0x01
    1522:	fa 81       	ldd	r31, Y+2	; 0x02
    1524:	91 83       	std	Z+1, r25	; 0x01
    1526:	80 83       	st	Z, r24
	}
	else
	{

	}
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <Timer1_EnableNoiseCanceler>:

void Timer1_EnableNoiseCanceler()
{
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, ICNC1);
    153a:	ae e4       	ldi	r26, 0x4E	; 78
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	ee e4       	ldi	r30, 0x4E	; 78
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	80 68       	ori	r24, 0x80	; 128
    1546:	8c 93       	st	X, r24

}
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <Timer1_DisableNoiseCanceler>:

void Timer1_DisableNoiseCanceler()
{
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B, ICNC1);
    1556:	ae e4       	ldi	r26, 0x4E	; 78
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	ee e4       	ldi	r30, 0x4E	; 78
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	8f 77       	andi	r24, 0x7F	; 127
    1562:	8c 93       	st	X, r24
}
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <Timer1_ICEdgeSelect>:

void Timer1_ICEdgeSelect(const u8 LOC_U8Edge)
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	00 d0       	rcall	.+0      	; 0x1570 <Timer1_ICEdgeSelect+0x6>
    1570:	0f 92       	push	r0
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	89 83       	std	Y+1, r24	; 0x01
	switch (LOC_U8Edge)
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	3b 83       	std	Y+3, r19	; 0x03
    1580:	2a 83       	std	Y+2, r18	; 0x02
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	9b 81       	ldd	r25, Y+3	; 0x03
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	31 f0       	breq	.+12     	; 0x1596 <Timer1_ICEdgeSelect+0x2c>
    158a:	2a 81       	ldd	r18, Y+2	; 0x02
    158c:	3b 81       	ldd	r19, Y+3	; 0x03
    158e:	21 30       	cpi	r18, 0x01	; 1
    1590:	31 05       	cpc	r19, r1
    1592:	49 f0       	breq	.+18     	; 0x15a6 <Timer1_ICEdgeSelect+0x3c>
    1594:	0f c0       	rjmp	.+30     	; 0x15b4 <Timer1_ICEdgeSelect+0x4a>
	{
		case FALLING_EDGE:
		CLR_BIT(TCCR1B, ICES1);
    1596:	ae e4       	ldi	r26, 0x4E	; 78
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	ee e4       	ldi	r30, 0x4E	; 78
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	8f 7b       	andi	r24, 0xBF	; 191
    15a2:	8c 93       	st	X, r24
    15a4:	07 c0       	rjmp	.+14     	; 0x15b4 <Timer1_ICEdgeSelect+0x4a>
		break;

		case RISING_EDGE:
		SET_BIT(TCCR1B, ICES1);
    15a6:	ae e4       	ldi	r26, 0x4E	; 78
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	ee e4       	ldi	r30, 0x4E	; 78
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	80 64       	ori	r24, 0x40	; 64
    15b2:	8c 93       	st	X, r24
		default:{
			////
		}

	}
}
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <Timer1_GetCapturedValue>:

void Timer1_GetCapturedValue(u16* const LOC_U16Value)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <Timer1_GetCapturedValue+0x6>
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	9a 83       	std	Y+2, r25	; 0x02
    15cc:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_U16Value != NULL)
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	9a 81       	ldd	r25, Y+2	; 0x02
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	41 f0       	breq	.+16     	; 0x15e6 <Timer1_GetCapturedValue+0x26>
	{

		*LOC_U16Value = ICR1;
    15d6:	e6 e4       	ldi	r30, 0x46	; 70
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	91 81       	ldd	r25, Z+1	; 0x01
    15de:	e9 81       	ldd	r30, Y+1	; 0x01
    15e0:	fa 81       	ldd	r31, Y+2	; 0x02
    15e2:	91 83       	std	Z+1, r25	; 0x01
    15e4:	80 83       	st	Z, r24
	}
	else
	{

	}
}
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <Timer1_EnableOVFInterrupt>:

void Timer1_EnableOVFInterrupt()
{
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TOIE1);
    15f8:	a9 e5       	ldi	r26, 0x59	; 89
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e9 e5       	ldi	r30, 0x59	; 89
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	84 60       	ori	r24, 0x04	; 4
    1604:	8c 93       	st	X, r24
}
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <Timer1_DisableOVFInterrupt>:

void Timer1_DisableOVFInterrupt()
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE1);
    1614:	a9 e5       	ldi	r26, 0x59	; 89
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e9 e5       	ldi	r30, 0x59	; 89
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	8b 7f       	andi	r24, 0xFB	; 251
    1620:	8c 93       	st	X, r24
}
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <Timer1_OCAEnableInterrupt>:

void Timer1_OCAEnableInterrupt()
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, OCIE1A);
    1630:	a9 e5       	ldi	r26, 0x59	; 89
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e9 e5       	ldi	r30, 0x59	; 89
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	80 61       	ori	r24, 0x10	; 16
    163c:	8c 93       	st	X, r24
}
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <Timer1_OCADisableInterrupt>:

void Timer1_OCADisableInterrupt()
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, OCIE1A);
    164c:	a9 e5       	ldi	r26, 0x59	; 89
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e9 e5       	ldi	r30, 0x59	; 89
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	8f 7e       	andi	r24, 0xEF	; 239
    1658:	8c 93       	st	X, r24

}
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <Timer1_OCBEnableInterrupt>:

void Timer1_OCBEnableInterrupt()
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, OCIE1B);
    1668:	a9 e5       	ldi	r26, 0x59	; 89
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e9 e5       	ldi	r30, 0x59	; 89
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	88 60       	ori	r24, 0x08	; 8
    1674:	8c 93       	st	X, r24
}
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <Timer1_OCBDisableInterrupt>:

void Timer1_OCBDisableInterrupt()
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, OCIE1B);
    1684:	a9 e5       	ldi	r26, 0x59	; 89
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e9 e5       	ldi	r30, 0x59	; 89
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	87 7f       	andi	r24, 0xF7	; 247
    1690:	8c 93       	st	X, r24

}
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <Timer1_CaptureEventEnableInterrupt>:

void Timer1_CaptureEventEnableInterrupt()
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TICIE1);
    16a0:	a9 e5       	ldi	r26, 0x59	; 89
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e9 e5       	ldi	r30, 0x59	; 89
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	80 62       	ori	r24, 0x20	; 32
    16ac:	8c 93       	st	X, r24

}
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <Timer1_CaptureEventDisableInterrupt>:

void Timer1_CaptureEventDisableInterrupt()
{
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, TICIE1);
    16bc:	a9 e5       	ldi	r26, 0x59	; 89
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e9 e5       	ldi	r30, 0x59	; 89
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	8f 7d       	andi	r24, 0xDF	; 223
    16c8:	8c 93       	st	X, r24

}
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <Timer1_OVFPollingOnFlag>:

void Timer1_OVFPollingOnFlag()
{
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
	/* Wait until flag is fired */
	while ( !GET_BIT(TIFR, TOV1) );
    16d8:	e8 e5       	ldi	r30, 0x58	; 88
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	86 95       	lsr	r24
    16e0:	86 95       	lsr	r24
    16e2:	88 2f       	mov	r24, r24
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	81 70       	andi	r24, 0x01	; 1
    16e8:	90 70       	andi	r25, 0x00	; 0
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	a9 f3       	breq	.-22     	; 0x16d8 <Timer1_OVFPollingOnFlag+0x8>
	/* Clear flag */
	SET_BIT(TIFR, TOV1);
    16ee:	a8 e5       	ldi	r26, 0x58	; 88
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e8 e5       	ldi	r30, 0x58	; 88
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	84 60       	ori	r24, 0x04	; 4
    16fa:	8c 93       	st	X, r24
}
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <Timer1_OCAPollingOnFlag>:

void Timer1_OCAPollingOnFlag()
{
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
	/* Wait until flag is fired */
	while ( !GET_BIT(TIFR, OCF1A) );
    170a:	e8 e5       	ldi	r30, 0x58	; 88
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	82 95       	swap	r24
    1712:	8f 70       	andi	r24, 0x0F	; 15
    1714:	88 2f       	mov	r24, r24
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	81 70       	andi	r24, 0x01	; 1
    171a:	90 70       	andi	r25, 0x00	; 0
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	a9 f3       	breq	.-22     	; 0x170a <Timer1_OCAPollingOnFlag+0x8>
	/* Clear flag */
	SET_BIT(TIFR, OCF1A);
    1720:	a8 e5       	ldi	r26, 0x58	; 88
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e8 e5       	ldi	r30, 0x58	; 88
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	80 61       	ori	r24, 0x10	; 16
    172c:	8c 93       	st	X, r24

}
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <Timer1_OCBPollingOnFlag>:

void Timer1_OCBPollingOnFlag()
{
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
	/* Wait until flag is fired */
	while ( !GET_BIT(TIFR, OCF1B) );
    173c:	e8 e5       	ldi	r30, 0x58	; 88
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	86 95       	lsr	r24
    1744:	86 95       	lsr	r24
    1746:	86 95       	lsr	r24
    1748:	88 2f       	mov	r24, r24
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	81 70       	andi	r24, 0x01	; 1
    174e:	90 70       	andi	r25, 0x00	; 0
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	a1 f3       	breq	.-24     	; 0x173c <Timer1_OCBPollingOnFlag+0x8>
	/* Clear flag */
	SET_BIT(TIFR, OCF1B);
    1754:	a8 e5       	ldi	r26, 0x58	; 88
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e8 e5       	ldi	r30, 0x58	; 88
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	88 60       	ori	r24, 0x08	; 8
    1760:	8c 93       	st	X, r24

}
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <Timer1_CaptureEventPollingOnFlag>:

void Timer1_CaptureEventPollingOnFlag()
{
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
	/* Wait until flag is fired */
	while ( !GET_BIT(TIFR, ICF1) );
    1770:	e8 e5       	ldi	r30, 0x58	; 88
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	82 95       	swap	r24
    1778:	86 95       	lsr	r24
    177a:	87 70       	andi	r24, 0x07	; 7
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	81 70       	andi	r24, 0x01	; 1
    1782:	90 70       	andi	r25, 0x00	; 0
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	a1 f3       	breq	.-24     	; 0x1770 <Timer1_CaptureEventPollingOnFlag+0x8>
	/* Clear flag */
	SET_BIT(TIFR, ICF1);
    1788:	a8 e5       	ldi	r26, 0x58	; 88
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e8 e5       	ldi	r30, 0x58	; 88
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	80 62       	ori	r24, 0x20	; 32
    1794:	8c 93       	st	X, r24

}
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <Timer1_OVFSetCallBack>:

void Timer1_OVFSetCallBack( void (*ptrToFun)(void) )
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <Timer1_OVFSetCallBack+0x6>
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	9a 83       	std	Y+2, r25	; 0x02
    17a8:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFun != NULL)
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	9a 81       	ldd	r25, Y+2	; 0x02
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	31 f0       	breq	.+12     	; 0x17be <Timer1_OVFSetCallBack+0x22>
	{
		GLOB_VidTimer1OVFPtrCallBack = ptrToFun;
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	9a 81       	ldd	r25, Y+2	; 0x02
    17b6:	90 93 a8 00 	sts	0x00A8, r25
    17ba:	80 93 a7 00 	sts	0x00A7, r24

	}
	else
	{
	}
}
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <Timer1_OCASetCallBack>:

void Timer1_OCASetCallBack( void (*ptrToFun)(void) ){
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <Timer1_OCASetCallBack+0x6>
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	9a 83       	std	Y+2, r25	; 0x02
    17d4:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFun != NULL)
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	9a 81       	ldd	r25, Y+2	; 0x02
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	31 f0       	breq	.+12     	; 0x17ea <Timer1_OCASetCallBack+0x22>
	{
		GLOB_VidTimer1OCAPtrCallBack = ptrToFun;
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	9a 81       	ldd	r25, Y+2	; 0x02
    17e2:	90 93 aa 00 	sts	0x00AA, r25
    17e6:	80 93 a9 00 	sts	0x00A9, r24
	}
	else
	{

	}
}
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <Timer1_OCBSetCallBack>:

void Timer1_OCBSetCallBack( void (*ptrToFun)(void) ){
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <Timer1_OCBSetCallBack+0x6>
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	9a 83       	std	Y+2, r25	; 0x02
    1800:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFun != NULL)
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	9a 81       	ldd	r25, Y+2	; 0x02
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	31 f0       	breq	.+12     	; 0x1816 <Timer1_OCBSetCallBack+0x22>
	{
		GLOB_VidTimer1OCBPtrCallBack = ptrToFun;
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	9a 81       	ldd	r25, Y+2	; 0x02
    180e:	90 93 ac 00 	sts	0x00AC, r25
    1812:	80 93 ab 00 	sts	0x00AB, r24

	}
	else
	{
	}
}
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <Timer1_CaptureEventSetCallBack>:

void Timer1_CaptureEventSetCallBack( void (*ptrToFun)(void) )
{
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	00 d0       	rcall	.+0      	; 0x1826 <Timer1_CaptureEventSetCallBack+0x6>
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	9a 83       	std	Y+2, r25	; 0x02
    182c:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFun != NULL)
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	9a 81       	ldd	r25, Y+2	; 0x02
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	31 f0       	breq	.+12     	; 0x1842 <Timer1_CaptureEventSetCallBack+0x22>
	{
		GLOB_VidTimer1CaptureEventPtrCallBack = ptrToFun;
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	90 93 ae 00 	sts	0x00AE, r25
    183e:	80 93 ad 00 	sts	0x00AD, r24
	}
	else
	{

	}
}
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <Timer1_ResetPrescaler>:

void Timer1_ResetPrescaler(void)
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SFIOR, PSR10);
    1854:	a0 e5       	ldi	r26, 0x50	; 80
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e0 e5       	ldi	r30, 0x50	; 80
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	81 60       	ori	r24, 0x01	; 1
    1860:	8c 93       	st	X, r24

}
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <MPWM1Init>:
void MPWM1Init(){
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
	Port_enuSetPinDirection(29,PORT_u8OUTPUT);
    1870:	8d e1       	ldi	r24, 0x1D	; 29
    1872:	61 e0       	ldi	r22, 0x01	; 1
    1874:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
	SET_BIT(TCCR1A,COM1A1);
    1878:	af e4       	ldi	r26, 0x4F	; 79
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	ef e4       	ldi	r30, 0x4F	; 79
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	80 68       	ori	r24, 0x80	; 128
    1884:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,COM1A0);
    1886:	af e4       	ldi	r26, 0x4F	; 79
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	ef e4       	ldi	r30, 0x4F	; 79
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	8f 7b       	andi	r24, 0xBF	; 191
    1892:	8c 93       	st	X, r24
	Timer1_Init();
    1894:	0e 94 56 09 	call	0x12ac	; 0x12ac <Timer1_Init>
}
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <MPWM1SetDutyCycle>:
void MPWM1SetDutyCycle(f32 Local_f32DesiredDutyCycle){
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <MPWM1SetDutyCycle+0x6>
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <MPWM1SetDutyCycle+0x8>
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	69 83       	std	Y+1, r22	; 0x01
    18ac:	7a 83       	std	Y+2, r23	; 0x02
    18ae:	8b 83       	std	Y+3, r24	; 0x03
    18b0:	9c 83       	std	Y+4, r25	; 0x04
Timer1_OC1ASetDutyCycle(Local_f32DesiredDutyCycle);
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	9a 81       	ldd	r25, Y+2	; 0x02
    18b6:	ab 81       	ldd	r26, Y+3	; 0x03
    18b8:	bc 81       	ldd	r27, Y+4	; 0x04
    18ba:	bc 01       	movw	r22, r24
    18bc:	cd 01       	movw	r24, r26
    18be:	0e 94 f7 09 	call	0x13ee	; 0x13ee <Timer1_OC1ASetDutyCycle>
}
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <MPWM1SetFrequency>:

void MPWM1SetFrequency(u16 Local_u16DesiredFrequency)
{
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	00 d0       	rcall	.+0      	; 0x18da <MPWM1SetFrequency+0xa>
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	9a 83       	std	Y+2, r25	; 0x02
    18e0:	89 83       	std	Y+1, r24	; 0x01

	ICR1 = (CRYSTALFREQUENCY) / (Local_u16DesiredFrequency * CLOCK_SELECT);
    18e2:	06 e4       	ldi	r16, 0x46	; 70
    18e4:	10 e0       	ldi	r17, 0x00	; 0
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ea:	00 24       	eor	r0, r0
    18ec:	96 95       	lsr	r25
    18ee:	87 95       	ror	r24
    18f0:	07 94       	ror	r0
    18f2:	96 95       	lsr	r25
    18f4:	87 95       	ror	r24
    18f6:	07 94       	ror	r0
    18f8:	98 2f       	mov	r25, r24
    18fa:	80 2d       	mov	r24, r0
    18fc:	9c 01       	movw	r18, r24
    18fe:	40 e0       	ldi	r20, 0x00	; 0
    1900:	50 e0       	ldi	r21, 0x00	; 0
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	94 e2       	ldi	r25, 0x24	; 36
    1906:	a4 ef       	ldi	r26, 0xF4	; 244
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	bc 01       	movw	r22, r24
    190c:	cd 01       	movw	r24, r26
    190e:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <__divmodsi4>
    1912:	da 01       	movw	r26, r20
    1914:	c9 01       	movw	r24, r18
    1916:	f8 01       	movw	r30, r16
    1918:	91 83       	std	Z+1, r25	; 0x01
    191a:	80 83       	st	Z, r24
}
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	08 95       	ret

0000192a <MPWM1Start>:
void MPWM1Start()
{
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
	#if		CLOCK_SELECT == PRESCALER_64
	CLR_BIT(TCCR1B,CS12);
    1932:	ae e4       	ldi	r26, 0x4E	; 78
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	ee e4       	ldi	r30, 0x4E	; 78
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	8b 7f       	andi	r24, 0xFB	; 251
    193e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    1940:	ae e4       	ldi	r26, 0x4E	; 78
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	ee e4       	ldi	r30, 0x4E	; 78
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	82 60       	ori	r24, 0x02	; 2
    194c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS10);
    194e:	ae e4       	ldi	r26, 0x4E	; 78
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	ee e4       	ldi	r30, 0x4E	; 78
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	81 60       	ori	r24, 0x01	; 1
    195a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS11);
	SET_BIT(TCCR1B,CS10);

	#endif

}
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <MPWM1Stop>:
void MPWM1Stop()
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,CS12);
    196a:	ae e4       	ldi	r26, 0x4E	; 78
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	ee e4       	ldi	r30, 0x4E	; 78
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	8b 7f       	andi	r24, 0xFB	; 251
    1976:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS11);
    1978:	ae e4       	ldi	r26, 0x4E	; 78
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	ee e4       	ldi	r30, 0x4E	; 78
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	8d 7f       	andi	r24, 0xFD	; 253
    1984:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS10);
    1986:	ae e4       	ldi	r26, 0x4E	; 78
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	ee e4       	ldi	r30, 0x4E	; 78
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	8e 7f       	andi	r24, 0xFE	; 254
    1992:	8c 93       	st	X, r24
}
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <__vector_9>:

void __vector_9(void)
{
    199a:	1f 92       	push	r1
    199c:	0f 92       	push	r0
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	0f 92       	push	r0
    19a2:	11 24       	eor	r1, r1
    19a4:	2f 93       	push	r18
    19a6:	3f 93       	push	r19
    19a8:	4f 93       	push	r20
    19aa:	5f 93       	push	r21
    19ac:	6f 93       	push	r22
    19ae:	7f 93       	push	r23
    19b0:	8f 93       	push	r24
    19b2:	9f 93       	push	r25
    19b4:	af 93       	push	r26
    19b6:	bf 93       	push	r27
    19b8:	ef 93       	push	r30
    19ba:	ff 93       	push	r31
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
	if (GLOB_VidTimer1OVFPtrCallBack != NULL)
    19c4:	80 91 a7 00 	lds	r24, 0x00A7
    19c8:	90 91 a8 00 	lds	r25, 0x00A8
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	29 f0       	breq	.+10     	; 0x19da <__vector_9+0x40>
	{
		(*GLOB_VidTimer1OVFPtrCallBack)();
    19d0:	e0 91 a7 00 	lds	r30, 0x00A7
    19d4:	f0 91 a8 00 	lds	r31, 0x00A8
    19d8:	09 95       	icall
	}
}
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	ff 91       	pop	r31
    19e0:	ef 91       	pop	r30
    19e2:	bf 91       	pop	r27
    19e4:	af 91       	pop	r26
    19e6:	9f 91       	pop	r25
    19e8:	8f 91       	pop	r24
    19ea:	7f 91       	pop	r23
    19ec:	6f 91       	pop	r22
    19ee:	5f 91       	pop	r21
    19f0:	4f 91       	pop	r20
    19f2:	3f 91       	pop	r19
    19f4:	2f 91       	pop	r18
    19f6:	0f 90       	pop	r0
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	0f 90       	pop	r0
    19fc:	1f 90       	pop	r1
    19fe:	18 95       	reti

00001a00 <__vector_8>:

void __vector_8(void)
{
    1a00:	1f 92       	push	r1
    1a02:	0f 92       	push	r0
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	0f 92       	push	r0
    1a08:	11 24       	eor	r1, r1
    1a0a:	2f 93       	push	r18
    1a0c:	3f 93       	push	r19
    1a0e:	4f 93       	push	r20
    1a10:	5f 93       	push	r21
    1a12:	6f 93       	push	r22
    1a14:	7f 93       	push	r23
    1a16:	8f 93       	push	r24
    1a18:	9f 93       	push	r25
    1a1a:	af 93       	push	r26
    1a1c:	bf 93       	push	r27
    1a1e:	ef 93       	push	r30
    1a20:	ff 93       	push	r31
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
	if (GLOB_VidTimer1OCBPtrCallBack != NULL)
    1a2a:	80 91 ab 00 	lds	r24, 0x00AB
    1a2e:	90 91 ac 00 	lds	r25, 0x00AC
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	29 f0       	breq	.+10     	; 0x1a40 <__vector_8+0x40>
	{
		(*GLOB_VidTimer1OCBPtrCallBack)();
    1a36:	e0 91 ab 00 	lds	r30, 0x00AB
    1a3a:	f0 91 ac 00 	lds	r31, 0x00AC
    1a3e:	09 95       	icall
	}
}
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	ff 91       	pop	r31
    1a46:	ef 91       	pop	r30
    1a48:	bf 91       	pop	r27
    1a4a:	af 91       	pop	r26
    1a4c:	9f 91       	pop	r25
    1a4e:	8f 91       	pop	r24
    1a50:	7f 91       	pop	r23
    1a52:	6f 91       	pop	r22
    1a54:	5f 91       	pop	r21
    1a56:	4f 91       	pop	r20
    1a58:	3f 91       	pop	r19
    1a5a:	2f 91       	pop	r18
    1a5c:	0f 90       	pop	r0
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	0f 90       	pop	r0
    1a62:	1f 90       	pop	r1
    1a64:	18 95       	reti

00001a66 <__vector_7>:

void __vector_7(void)
{
    1a66:	1f 92       	push	r1
    1a68:	0f 92       	push	r0
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	0f 92       	push	r0
    1a6e:	11 24       	eor	r1, r1
    1a70:	2f 93       	push	r18
    1a72:	3f 93       	push	r19
    1a74:	4f 93       	push	r20
    1a76:	5f 93       	push	r21
    1a78:	6f 93       	push	r22
    1a7a:	7f 93       	push	r23
    1a7c:	8f 93       	push	r24
    1a7e:	9f 93       	push	r25
    1a80:	af 93       	push	r26
    1a82:	bf 93       	push	r27
    1a84:	ef 93       	push	r30
    1a86:	ff 93       	push	r31
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
	if (GLOB_VidTimer1OCAPtrCallBack != NULL)
    1a90:	80 91 a9 00 	lds	r24, 0x00A9
    1a94:	90 91 aa 00 	lds	r25, 0x00AA
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	29 f0       	breq	.+10     	; 0x1aa6 <__vector_7+0x40>
	{
		(*GLOB_VidTimer1OCAPtrCallBack)();
    1a9c:	e0 91 a9 00 	lds	r30, 0x00A9
    1aa0:	f0 91 aa 00 	lds	r31, 0x00AA
    1aa4:	09 95       	icall
	}
}
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	ff 91       	pop	r31
    1aac:	ef 91       	pop	r30
    1aae:	bf 91       	pop	r27
    1ab0:	af 91       	pop	r26
    1ab2:	9f 91       	pop	r25
    1ab4:	8f 91       	pop	r24
    1ab6:	7f 91       	pop	r23
    1ab8:	6f 91       	pop	r22
    1aba:	5f 91       	pop	r21
    1abc:	4f 91       	pop	r20
    1abe:	3f 91       	pop	r19
    1ac0:	2f 91       	pop	r18
    1ac2:	0f 90       	pop	r0
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	0f 90       	pop	r0
    1ac8:	1f 90       	pop	r1
    1aca:	18 95       	reti

00001acc <__vector_6>:

void __vector_6(void)
{
    1acc:	1f 92       	push	r1
    1ace:	0f 92       	push	r0
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	0f 92       	push	r0
    1ad4:	11 24       	eor	r1, r1
    1ad6:	2f 93       	push	r18
    1ad8:	3f 93       	push	r19
    1ada:	4f 93       	push	r20
    1adc:	5f 93       	push	r21
    1ade:	6f 93       	push	r22
    1ae0:	7f 93       	push	r23
    1ae2:	8f 93       	push	r24
    1ae4:	9f 93       	push	r25
    1ae6:	af 93       	push	r26
    1ae8:	bf 93       	push	r27
    1aea:	ef 93       	push	r30
    1aec:	ff 93       	push	r31
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
	if (GLOB_VidTimer1CaptureEventPtrCallBack != NULL)
    1af6:	80 91 ad 00 	lds	r24, 0x00AD
    1afa:	90 91 ae 00 	lds	r25, 0x00AE
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	29 f0       	breq	.+10     	; 0x1b0c <__vector_6+0x40>
	{
		(*GLOB_VidTimer1CaptureEventPtrCallBack)();
    1b02:	e0 91 ad 00 	lds	r30, 0x00AD
    1b06:	f0 91 ae 00 	lds	r31, 0x00AE
    1b0a:	09 95       	icall
	}
}
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	ff 91       	pop	r31
    1b12:	ef 91       	pop	r30
    1b14:	bf 91       	pop	r27
    1b16:	af 91       	pop	r26
    1b18:	9f 91       	pop	r25
    1b1a:	8f 91       	pop	r24
    1b1c:	7f 91       	pop	r23
    1b1e:	6f 91       	pop	r22
    1b20:	5f 91       	pop	r21
    1b22:	4f 91       	pop	r20
    1b24:	3f 91       	pop	r19
    1b26:	2f 91       	pop	r18
    1b28:	0f 90       	pop	r0
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	0f 90       	pop	r0
    1b2e:	1f 90       	pop	r1
    1b30:	18 95       	reti

00001b32 <SPI_MasterInit>:
#include "../includes/SPI_prv.h"

void (*ptr)(void) = NULL;

void SPI_MasterInit()
{
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62

	/*Set SS / MOSI / SCK  as output pins for master*/

		Port_enuSetPinDirection(12,PORT_u8OUTPUT);		//SS
    1b3a:	8c e0       	ldi	r24, 0x0C	; 12
    1b3c:	61 e0       	ldi	r22, 0x01	; 1
    1b3e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
		Port_enuSetPinDirection(13,PORT_u8OUTPUT);		//MOSI
    1b42:	8d e0       	ldi	r24, 0x0D	; 13
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
		Port_enuSetPinDirection(14,PORT_u8INPUT);        //MISO
    1b4a:	8e e0       	ldi	r24, 0x0E	; 14
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
		Port_enuSetPinDirection(15,PORT_u8OUTPUT);		//SCK
    1b52:	8f e0       	ldi	r24, 0x0F	; 15
    1b54:	61 e0       	ldi	r22, 0x01	; 1
    1b56:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>

		/*set SS to high */
		Dio_enuWriteChannel(12,DIO_u8LEVEL_HIGH);
    1b5a:	8c e0       	ldi	r24, 0x0C	; 12
    1b5c:	61 e0       	ldi	r22, 0x01	; 1
    1b5e:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>

	//Set Data Order

#if SPI_DORD_MODE==SPI_DORD_MSB_FIRST
	CLR_BIT(SPCR,5);
    1b62:	ad e2       	ldi	r26, 0x2D	; 45
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	ed e2       	ldi	r30, 0x2D	; 45
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	8f 7d       	andi	r24, 0xDF	; 223
    1b6e:	8c 93       	st	X, r24
	SET_BIT(SPCR,5);
#endif

	//Set Clock Polarity
#if SPI_POLARITY_MODE==SPI_POL_ACTIVE_HIGH
	CLR_BIT(SPCR,3);
    1b70:	ad e2       	ldi	r26, 0x2D	; 45
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	ed e2       	ldi	r30, 0x2D	; 45
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	87 7f       	andi	r24, 0xF7	; 247
    1b7c:	8c 93       	st	X, r24
	SET_BIT(SPCR,3);
#endif

	//Set Clock Phase
#if SPI_PHASE_MODE==SPI_PHASE_SAMPLE_AT_LEADING
	CLR_BIT(SPCR,2);
    1b7e:	ad e2       	ldi	r26, 0x2D	; 45
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	ed e2       	ldi	r30, 0x2D	; 45
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	8b 7f       	andi	r24, 0xFB	; 251
    1b8a:	8c 93       	st	X, r24
	SET_BIT(SPCR,2);
#endif

	//Set Interrupt Mode
#if SPI_INTERRUPT_MODE==SPI_INTERRUPT_OFF
	CLR_BIT(SPCR,7);
    1b8c:	ad e2       	ldi	r26, 0x2D	; 45
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	ed e2       	ldi	r30, 0x2D	; 45
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	8f 77       	andi	r24, 0x7F	; 127
    1b98:	8c 93       	st	X, r24

//Set Clock

//Set Double Speed Bit Mode
#if SPI_DOUBLE_SPEED_MODE==SPI_DOUBLE_SPEED_OFF
	CLR_BIT(SPSR,0);
    1b9a:	ae e2       	ldi	r26, 0x2E	; 46
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	ee e2       	ldi	r30, 0x2E	; 46
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	8e 7f       	andi	r24, 0xFE	; 254
    1ba6:	8c 93       	st	X, r24
#elif SPI_DOUBLE_SPEED_MODE==SPI_DOUBLE_SPEED_ON
	SET_BIT(SPSR,0);
#endif


	SPCR&=(~CLOCK_MASK);
    1ba8:	ad e2       	ldi	r26, 0x2D	; 45
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	ed e2       	ldi	r30, 0x2D	; 45
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	8c 7f       	andi	r24, 0xFC	; 252
    1bb4:	8c 93       	st	X, r24
	SPCR|=SPI_CLOCK_MODE;
    1bb6:	ad e2       	ldi	r26, 0x2D	; 45
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	ed e2       	ldi	r30, 0x2D	; 45
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	83 60       	ori	r24, 0x03	; 3
    1bc2:	8c 93       	st	X, r24

	//Set Mode as Master
	SET_BIT(SPCR,4);
    1bc4:	ad e2       	ldi	r26, 0x2D	; 45
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	ed e2       	ldi	r30, 0x2D	; 45
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	80 61       	ori	r24, 0x10	; 16
    1bd0:	8c 93       	st	X, r24

	//Enable SPI
	SET_BIT(SPCR,6);
    1bd2:	ad e2       	ldi	r26, 0x2D	; 45
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	ed e2       	ldi	r30, 0x2D	; 45
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	80 64       	ori	r24, 0x40	; 64
    1bde:	8c 93       	st	X, r24

}
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <SPI_SlaveInit>:
void SPI_SlaveInit()
{
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62

	/*Set SS / MOSI / SCK  as output pins for SLAVE*/
			//Port_enuSetPinMode(12,PORT_u8INPUT_PULLUP);
			Port_enuSetPinDirection(12,PORT_u8INPUT);		//SS
    1bee:	8c e0       	ldi	r24, 0x0C	; 12
    1bf0:	60 e0       	ldi	r22, 0x00	; 0
    1bf2:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
			Port_enuSetPinDirection(13,PORT_u8INPUT);		//MOSI
    1bf6:	8d e0       	ldi	r24, 0x0D	; 13
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
			Port_enuSetPinDirection(14,PORT_u8OUTPUT);        //MISO
    1bfe:	8e e0       	ldi	r24, 0x0E	; 14
    1c00:	61 e0       	ldi	r22, 0x01	; 1
    1c02:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
			Port_enuSetPinDirection(15,PORT_u8INPUT);		//SCK
    1c06:	8f e0       	ldi	r24, 0x0F	; 15
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>



	//Set Data Order
#if SPI_DORD_MODE==SPI_DORD_MSB_FIRST
	CLR_BIT(SPCR,5);
    1c0e:	ad e2       	ldi	r26, 0x2D	; 45
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	ed e2       	ldi	r30, 0x2D	; 45
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	8f 7d       	andi	r24, 0xDF	; 223
    1c1a:	8c 93       	st	X, r24
	SET_BIT(SPCR,5);
#endif

	//Set Clock Polarity
#if SPI_POLARITY_MODE==SPI_POL_ACTIVE_HIGH
	CLR_BIT(SPCR,3);
    1c1c:	ad e2       	ldi	r26, 0x2D	; 45
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	ed e2       	ldi	r30, 0x2D	; 45
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	87 7f       	andi	r24, 0xF7	; 247
    1c28:	8c 93       	st	X, r24
	SET_BIT(SPCR,3);
#endif

	//Set Clock Phase
#if SPI_PHASE_MODE==SPI_PHASE_SAMPLE_AT_LEADING
	CLR_BIT(SPCR,2);
    1c2a:	ad e2       	ldi	r26, 0x2D	; 45
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	ed e2       	ldi	r30, 0x2D	; 45
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	8b 7f       	andi	r24, 0xFB	; 251
    1c36:	8c 93       	st	X, r24
	SET_BIT(SPCR,2);
#endif

	//Set Interrupt Mode
#if SPI_INTERRUPT_MODE==SPI_INTERRUPT_OFF
	CLR_BIT(SPCR,7);
    1c38:	ad e2       	ldi	r26, 0x2D	; 45
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	ed e2       	ldi	r30, 0x2D	; 45
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	8f 77       	andi	r24, 0x7F	; 127
    1c44:	8c 93       	st	X, r24
#elif SPI_INTERRUPT_MODE==SPI_INTERRUPT_ON
	SET_BIT(SPCR,7);
#endif

	//Set Mode as Slave
	CLR_BIT(SPCR,4);
    1c46:	ad e2       	ldi	r26, 0x2D	; 45
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	ed e2       	ldi	r30, 0x2D	; 45
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	8f 7e       	andi	r24, 0xEF	; 239
    1c52:	8c 93       	st	X, r24

	//Enable SPI
	SET_BIT(SPCR,6);
    1c54:	ad e2       	ldi	r26, 0x2D	; 45
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	ed e2       	ldi	r30, 0x2D	; 45
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	80 64       	ori	r24, 0x40	; 64
    1c60:	8c 93       	st	X, r24

}
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <SPI_Send>:

void SPI_Send(u8 Copy_u8TransmittedValue)
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	0f 92       	push	r0
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	89 83       	std	Y+1, r24	; 0x01
	//Put Data in SPDR
	SPDR=Copy_u8TransmittedValue;
    1c74:	ef e2       	ldi	r30, 0x2F	; 47
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	80 83       	st	Z, r24
	//Poll On SPIF Flag
	while(!(SPSR & (1<<SPIF)));
    1c7c:	ee e2       	ldi	r30, 0x2E	; 46
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	88 23       	and	r24, r24
    1c84:	dc f7       	brge	.-10     	; 0x1c7c <SPI_Send+0x14>
	//return SPDR;
}
    1c86:	0f 90       	pop	r0
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <SPI_Receive>:
u8 SPI_Receive(){
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62

		//Poll On SPIF Flag
	while(!(SPSR & (1<<SPIF)));
    1c96:	ee e2       	ldi	r30, 0x2E	; 46
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	88 23       	and	r24, r24
    1c9e:	dc f7       	brge	.-10     	; 0x1c96 <SPI_Receive+0x8>
		return SPDR;
    1ca0:	ef e2       	ldi	r30, 0x2F	; 47
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
}
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <SPI_SendString>:

void SPI_SendString(pu8 P_TransmittedString){
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	61 97       	sbiw	r28, 0x11	; 17
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	99 8b       	std	Y+17, r25	; 0x11
    1cc2:	88 8b       	std	Y+16, r24	; 0x10
	u8 Loc_Counter=0;
    1cc4:	1f 86       	std	Y+15, r1	; 0x0f
    1cc6:	80 c0       	rjmp	.+256    	; 0x1dc8 <SPI_SendString+0x11c>
		while(P_TransmittedString[Loc_Counter]!='\0')
		{
			SPI_Send(P_TransmittedString[Loc_Counter]);
    1cc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	88 89       	ldd	r24, Y+16	; 0x10
    1cd0:	99 89       	ldd	r25, Y+17	; 0x11
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	e2 0f       	add	r30, r18
    1cd6:	f3 1f       	adc	r31, r19
    1cd8:	80 81       	ld	r24, Z
    1cda:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <SPI_Send>
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	a0 ea       	ldi	r26, 0xA0	; 160
    1ce4:	b0 e4       	ldi	r27, 0x40	; 64
    1ce6:	8b 87       	std	Y+11, r24	; 0x0b
    1ce8:	9c 87       	std	Y+12, r25	; 0x0c
    1cea:	ad 87       	std	Y+13, r26	; 0x0d
    1cec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	4a e7       	ldi	r20, 0x7A	; 122
    1cfc:	55 e4       	ldi	r21, 0x45	; 69
    1cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	8f 83       	std	Y+7, r24	; 0x07
    1d08:	98 87       	std	Y+8, r25	; 0x08
    1d0a:	a9 87       	std	Y+9, r26	; 0x09
    1d0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d10:	78 85       	ldd	r23, Y+8	; 0x08
    1d12:	89 85       	ldd	r24, Y+9	; 0x09
    1d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e8       	ldi	r20, 0x80	; 128
    1d1c:	5f e3       	ldi	r21, 0x3F	; 63
    1d1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d22:	88 23       	and	r24, r24
    1d24:	2c f4       	brge	.+10     	; 0x1d30 <SPI_SendString+0x84>
		__ticks = 1;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
    1d2e:	3f c0       	rjmp	.+126    	; 0x1dae <SPI_SendString+0x102>
	else if (__tmp > 65535)
    1d30:	6f 81       	ldd	r22, Y+7	; 0x07
    1d32:	78 85       	ldd	r23, Y+8	; 0x08
    1d34:	89 85       	ldd	r24, Y+9	; 0x09
    1d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	3f ef       	ldi	r19, 0xFF	; 255
    1d3c:	4f e7       	ldi	r20, 0x7F	; 127
    1d3e:	57 e4       	ldi	r21, 0x47	; 71
    1d40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d44:	18 16       	cp	r1, r24
    1d46:	4c f5       	brge	.+82     	; 0x1d9a <SPI_SendString+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e2       	ldi	r20, 0x20	; 32
    1d56:	51 e4       	ldi	r21, 0x41	; 65
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	bc 01       	movw	r22, r24
    1d62:	cd 01       	movw	r24, r26
    1d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9e 83       	std	Y+6, r25	; 0x06
    1d6e:	8d 83       	std	Y+5, r24	; 0x05
    1d70:	0f c0       	rjmp	.+30     	; 0x1d90 <SPI_SendString+0xe4>
    1d72:	80 e9       	ldi	r24, 0x90	; 144
    1d74:	91 e0       	ldi	r25, 0x01	; 1
    1d76:	9c 83       	std	Y+4, r25	; 0x04
    1d78:	8b 83       	std	Y+3, r24	; 0x03
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <SPI_SendString+0xd2>
    1d82:	9c 83       	std	Y+4, r25	; 0x04
    1d84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d86:	8d 81       	ldd	r24, Y+5	; 0x05
    1d88:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	9e 83       	std	Y+6, r25	; 0x06
    1d8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	9e 81       	ldd	r25, Y+6	; 0x06
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	69 f7       	brne	.-38     	; 0x1d72 <SPI_SendString+0xc6>
    1d98:	14 c0       	rjmp	.+40     	; 0x1dc2 <SPI_SendString+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9c:	78 85       	ldd	r23, Y+8	; 0x08
    1d9e:	89 85       	ldd	r24, Y+9	; 0x09
    1da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	9e 83       	std	Y+6, r25	; 0x06
    1dac:	8d 83       	std	Y+5, r24	; 0x05
    1dae:	8d 81       	ldd	r24, Y+5	; 0x05
    1db0:	9e 81       	ldd	r25, Y+6	; 0x06
    1db2:	9a 83       	std	Y+2, r25	; 0x02
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <SPI_SendString+0x10e>
    1dbe:	9a 83       	std	Y+2, r25	; 0x02
    1dc0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(5);
			Loc_Counter++;
    1dc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc4:	8f 5f       	subi	r24, 0xFF	; 255
    1dc6:	8f 87       	std	Y+15, r24	; 0x0f
		return SPDR;
}

void SPI_SendString(pu8 P_TransmittedString){
	u8 Loc_Counter=0;
		while(P_TransmittedString[Loc_Counter]!='\0')
    1dc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dca:	28 2f       	mov	r18, r24
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	88 89       	ldd	r24, Y+16	; 0x10
    1dd0:	99 89       	ldd	r25, Y+17	; 0x11
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	e2 0f       	add	r30, r18
    1dd6:	f3 1f       	adc	r31, r19
    1dd8:	80 81       	ld	r24, Z
    1dda:	88 23       	and	r24, r24
    1ddc:	09 f0       	breq	.+2      	; 0x1de0 <SPI_SendString+0x134>
    1dde:	74 cf       	rjmp	.-280    	; 0x1cc8 <SPI_SendString+0x1c>
			SPI_Send(P_TransmittedString[Loc_Counter]);
			_delay_ms(5);
			Loc_Counter++;
		}

}
    1de0:	61 96       	adiw	r28, 0x11	; 17
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <SPI_ReceiveString>:

void SPI_ReceiveString (pu8 P_ReceiveString){
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <SPI_ReceiveString+0x6>
    1df8:	00 d0       	rcall	.+0      	; 0x1dfa <SPI_ReceiveString+0x8>
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	9c 83       	std	Y+4, r25	; 0x04
    1e00:	8b 83       	std	Y+3, r24	; 0x03

	u8 Local_u8Current =0;
    1e02:	1a 82       	std	Y+2, r1	; 0x02
		u8 Local_u8Counter =0;
    1e04:	19 82       	std	Y+1, r1	; 0x01
		 while(1)
		 {
			 (Local_u8Current)=SPI_Receive();
    1e06:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <SPI_Receive>
    1e0a:	8a 83       	std	Y+2, r24	; 0x02
			 if(Local_u8Current == ' ')
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	80 32       	cpi	r24, 0x20	; 32
    1e10:	81 f4       	brne	.+32     	; 0x1e32 <SPI_ReceiveString+0x40>
			 {
				 P_ReceiveString[Local_u8Counter] ='\0';
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	e2 0f       	add	r30, r18
    1e20:	f3 1f       	adc	r31, r19
    1e22:	10 82       	st	Z, r1
			 P_ReceiveString[Local_u8Counter] = Local_u8Current;
			 Local_u8Counter++;
		 }


	}
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret
			 if(Local_u8Current == ' ')
			 {
				 P_ReceiveString[Local_u8Counter] ='\0';
				 break;
			 }
			 P_ReceiveString[Local_u8Counter] = Local_u8Current;
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	e2 0f       	add	r30, r18
    1e40:	f3 1f       	adc	r31, r19
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	80 83       	st	Z, r24
			 Local_u8Counter++;
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	8f 5f       	subi	r24, 0xFF	; 255
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	dc cf       	rjmp	.-72     	; 0x1e06 <SPI_ReceiveString+0x14>

00001e4e <__vector_12>:
	}




void __vector_12(void) {
    1e4e:	1f 92       	push	r1
    1e50:	0f 92       	push	r0
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	0f 92       	push	r0
    1e56:	11 24       	eor	r1, r1
    1e58:	2f 93       	push	r18
    1e5a:	3f 93       	push	r19
    1e5c:	4f 93       	push	r20
    1e5e:	5f 93       	push	r21
    1e60:	6f 93       	push	r22
    1e62:	7f 93       	push	r23
    1e64:	8f 93       	push	r24
    1e66:	9f 93       	push	r25
    1e68:	af 93       	push	r26
    1e6a:	bf 93       	push	r27
    1e6c:	ef 93       	push	r30
    1e6e:	ff 93       	push	r31
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
	if (ptr != NULL) {
    1e78:	80 91 af 00 	lds	r24, 0x00AF
    1e7c:	90 91 b0 00 	lds	r25, 0x00B0
    1e80:	00 97       	sbiw	r24, 0x00	; 0
    1e82:	29 f0       	breq	.+10     	; 0x1e8e <__vector_12+0x40>
		ptr();
    1e84:	e0 91 af 00 	lds	r30, 0x00AF
    1e88:	f0 91 b0 00 	lds	r31, 0x00B0
    1e8c:	09 95       	icall
	}
}
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	ff 91       	pop	r31
    1e94:	ef 91       	pop	r30
    1e96:	bf 91       	pop	r27
    1e98:	af 91       	pop	r26
    1e9a:	9f 91       	pop	r25
    1e9c:	8f 91       	pop	r24
    1e9e:	7f 91       	pop	r23
    1ea0:	6f 91       	pop	r22
    1ea2:	5f 91       	pop	r21
    1ea4:	4f 91       	pop	r20
    1ea6:	3f 91       	pop	r19
    1ea8:	2f 91       	pop	r18
    1eaa:	0f 90       	pop	r0
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	0f 90       	pop	r0
    1eb0:	1f 90       	pop	r1
    1eb2:	18 95       	reti

00001eb4 <SPI_voidCallBack>:

void SPI_voidCallBack( void (*Copy_pvoidCallBack) (void)){
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	00 d0       	rcall	.+0      	; 0x1eba <SPI_voidCallBack+0x6>
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	9a 83       	std	Y+2, r25	; 0x02
    1ec0:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pvoidCallBack != NULL) {
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	31 f0       	breq	.+12     	; 0x1ed6 <SPI_voidCallBack+0x22>
		ptr = Copy_pvoidCallBack;
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ece:	90 93 b0 00 	sts	0x00B0, r25
    1ed2:	80 93 af 00 	sts	0x00AF, r24
		}

}
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <Port_Init>:
#include"../includes/PORT.h"
#include"../includes/PORT_cfg.h"


void Port_Init(void)
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
#define PORT_u8INPUT_FLOATING	0

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		0

	DDRA = CONC(PORT_u8MODE_PIN7,PORT_u8MODE_PIN6,PORT_u8MODE_PIN5,PORT_u8MODE_PIN4,PORT_u8MODE_PIN3,PORT_u8MODE_PIN2,PORT_u8MODE_PIN1,PORT_u8MODE_PIN0);
    1ee8:	ea e3       	ldi	r30, 0x3A	; 58
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	8e e0       	ldi	r24, 0x0E	; 14
    1eee:	80 83       	st	Z, r24
	DDRB = CONC(PORT_u8MODE_PIN15,PORT_u8MODE_PIN14,PORT_u8MODE_PIN13,PORT_u8MODE_PIN12,PORT_u8MODE_PIN11,PORT_u8MODE_PIN10,PORT_u8MODE_PIN9,PORT_u8MODE_PIN8);
    1ef0:	e7 e3       	ldi	r30, 0x37	; 55
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	8f e0       	ldi	r24, 0x0F	; 15
    1ef6:	80 83       	st	Z, r24
	DDRC = CONC(PORT_u8MODE_PIN23,PORT_u8MODE_PIN22,PORT_u8MODE_PIN21,PORT_u8MODE_PIN20,PORT_u8MODE_PIN19,PORT_u8MODE_PIN18,PORT_u8MODE_PIN17,PORT_u8MODE_PIN16);
    1ef8:	e4 e3       	ldi	r30, 0x34	; 52
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	10 82       	st	Z, r1
	DDRD = CONC(PORT_u8MODE_PIN31,PORT_u8MODE_PIN30,PORT_u8MODE_PIN29,PORT_u8MODE_PIN28,PORT_u8MODE_PIN27,PORT_u8MODE_PIN26,PORT_u8MODE_PIN25,PORT_u8MODE_PIN24);
    1efe:	e1 e3       	ldi	r30, 0x31	; 49
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	84 e0       	ldi	r24, 0x04	; 4
    1f04:	80 83       	st	Z, r24
#define PORT_u8OUTPUT_LOW		0

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		1

	PORTA = CONC(PORT_u8MODE_PIN7,PORT_u8MODE_PIN6,PORT_u8MODE_PIN5,PORT_u8MODE_PIN4,PORT_u8MODE_PIN3,PORT_u8MODE_PIN2,PORT_u8MODE_PIN1,PORT_u8MODE_PIN0);
    1f06:	eb e3       	ldi	r30, 0x3B	; 59
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	8e e0       	ldi	r24, 0x0E	; 14
    1f0c:	80 83       	st	Z, r24
	PORTB = CONC(PORT_u8MODE_PIN15,PORT_u8MODE_PIN14,PORT_u8MODE_PIN13,PORT_u8MODE_PIN12,PORT_u8MODE_PIN11,PORT_u8MODE_PIN10,PORT_u8MODE_PIN9,PORT_u8MODE_PIN8);
    1f0e:	e8 e3       	ldi	r30, 0x38	; 56
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	8f e0       	ldi	r24, 0x0F	; 15
    1f14:	80 83       	st	Z, r24
	PORTC = CONC(PORT_u8MODE_PIN23,PORT_u8MODE_PIN22,PORT_u8MODE_PIN21,PORT_u8MODE_PIN20,PORT_u8MODE_PIN19,PORT_u8MODE_PIN18,PORT_u8MODE_PIN17,PORT_u8MODE_PIN16);
    1f16:	e5 e3       	ldi	r30, 0x35	; 53
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	10 82       	st	Z, r1
	PORTD = CONC(PORT_u8MODE_PIN31,PORT_u8MODE_PIN30,PORT_u8MODE_PIN29,PORT_u8MODE_PIN28,PORT_u8MODE_PIN27,PORT_u8MODE_PIN26,PORT_u8MODE_PIN25,PORT_u8MODE_PIN24);
    1f1c:	e2 e3       	ldi	r30, 0x32	; 50
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	84 e0       	ldi	r24, 0x04	; 4
    1f22:	80 83       	st	Z, r24
//re-defining again to their initial
#define PORT_u8OUTPUT_LOW 		0
#define PORT_u8INPUT_FLOATING 	2
#define PORT_u8INPUT_PULLUP 	3

}
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <Port_enuSetPinDirection>:

Port_EnumErrorStatus Port_enuSetPinDirection(u8 Copy_u8PinNum , u8 Copy_u8PinDirection) {
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
    1f32:	27 97       	sbiw	r28, 0x07	; 7
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	de bf       	out	0x3e, r29	; 62
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	cd bf       	out	0x3d, r28	; 61
    1f3e:	8c 83       	std	Y+4, r24	; 0x04
    1f40:	6d 83       	std	Y+5, r22	; 0x05

	Port_EnumErrorStatus LOC_EnumReturn = Ok;
    1f42:	1b 82       	std	Y+3, r1	; 0x03
	u8 LOC_u8Port;
	u8 LOC_u8Pin;


	if (Copy_u8PinNum>PORT_u8TOTALNUMBER_OF_PINS) {
    1f44:	8c 81       	ldd	r24, Y+4	; 0x04
    1f46:	80 32       	cpi	r24, 0x20	; 32
    1f48:	18 f0       	brcs	.+6      	; 0x1f50 <Port_enuSetPinDirection+0x26>
		LOC_EnumReturn = PinError;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	8b 83       	std	Y+3, r24	; 0x03
    1f4e:	df c0       	rjmp	.+446    	; 0x210e <Port_enuSetPinDirection+0x1e4>
			}

	 else if (Copy_u8PinDirection>PORT_u8NUMBER_OF_DIRECTION) {
    1f50:	8d 81       	ldd	r24, Y+5	; 0x05
    1f52:	82 30       	cpi	r24, 0x02	; 2
    1f54:	18 f0       	brcs	.+6      	; 0x1f5c <Port_enuSetPinDirection+0x32>
		 LOC_EnumReturn = ModeError;
    1f56:	82 e0       	ldi	r24, 0x02	; 2
    1f58:	8b 83       	std	Y+3, r24	; 0x03
    1f5a:	d9 c0       	rjmp	.+434    	; 0x210e <Port_enuSetPinDirection+0x1e4>
	        }

	 else {
		 //no error so the input is correct so we proceed//
		LOC_u8Port = Copy_u8PinNum / PORT_u8REGISTER_SIZE; //to know which port
    1f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5e:	86 95       	lsr	r24
    1f60:	86 95       	lsr	r24
    1f62:	86 95       	lsr	r24
    1f64:	8a 83       	std	Y+2, r24	; 0x02
		LOC_u8Pin = Copy_u8PinNum % PORT_u8REGISTER_SIZE; //to know which pin
    1f66:	8c 81       	ldd	r24, Y+4	; 0x04
    1f68:	87 70       	andi	r24, 0x07	; 7
    1f6a:	89 83       	std	Y+1, r24	; 0x01
//if Pin direction is not set, it's cleared
		switch (LOC_u8Port) {
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	28 2f       	mov	r18, r24
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	3f 83       	std	Y+7, r19	; 0x07
    1f74:	2e 83       	std	Y+6, r18	; 0x06
    1f76:	8e 81       	ldd	r24, Y+6	; 0x06
    1f78:	9f 81       	ldd	r25, Y+7	; 0x07
    1f7a:	81 30       	cpi	r24, 0x01	; 1
    1f7c:	91 05       	cpc	r25, r1
    1f7e:	09 f4       	brne	.+2      	; 0x1f82 <Port_enuSetPinDirection+0x58>
    1f80:	43 c0       	rjmp	.+134    	; 0x2008 <Port_enuSetPinDirection+0xde>
    1f82:	2e 81       	ldd	r18, Y+6	; 0x06
    1f84:	3f 81       	ldd	r19, Y+7	; 0x07
    1f86:	22 30       	cpi	r18, 0x02	; 2
    1f88:	31 05       	cpc	r19, r1
    1f8a:	2c f4       	brge	.+10     	; 0x1f96 <Port_enuSetPinDirection+0x6c>
    1f8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	71 f0       	breq	.+28     	; 0x1fb0 <Port_enuSetPinDirection+0x86>
    1f94:	bc c0       	rjmp	.+376    	; 0x210e <Port_enuSetPinDirection+0x1e4>
    1f96:	2e 81       	ldd	r18, Y+6	; 0x06
    1f98:	3f 81       	ldd	r19, Y+7	; 0x07
    1f9a:	22 30       	cpi	r18, 0x02	; 2
    1f9c:	31 05       	cpc	r19, r1
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <Port_enuSetPinDirection+0x78>
    1fa0:	5f c0       	rjmp	.+190    	; 0x2060 <Port_enuSetPinDirection+0x136>
    1fa2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa4:	9f 81       	ldd	r25, Y+7	; 0x07
    1fa6:	83 30       	cpi	r24, 0x03	; 3
    1fa8:	91 05       	cpc	r25, r1
    1faa:	09 f4       	brne	.+2      	; 0x1fae <Port_enuSetPinDirection+0x84>
    1fac:	85 c0       	rjmp	.+266    	; 0x20b8 <Port_enuSetPinDirection+0x18e>
    1fae:	af c0       	rjmp	.+350    	; 0x210e <Port_enuSetPinDirection+0x1e4>
		case PORT_u8PORTA:

			if (Copy_u8PinDirection == PORT_u8OUTPUT) {
    1fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb2:	81 30       	cpi	r24, 0x01	; 1
    1fb4:	a1 f4       	brne	.+40     	; 0x1fde <Port_enuSetPinDirection+0xb4>
				SET_BIT(DDRA, LOC_u8Pin);
    1fb6:	aa e3       	ldi	r26, 0x3A	; 58
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	ea e3       	ldi	r30, 0x3A	; 58
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	48 2f       	mov	r20, r24
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	02 2e       	mov	r0, r18
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <Port_enuSetPinDirection+0xaa>
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	0a 94       	dec	r0
    1fd6:	e2 f7       	brpl	.-8      	; 0x1fd0 <Port_enuSetPinDirection+0xa6>
    1fd8:	84 2b       	or	r24, r20
    1fda:	8c 93       	st	X, r24
    1fdc:	98 c0       	rjmp	.+304    	; 0x210e <Port_enuSetPinDirection+0x1e4>
			} else {
				CLR_BIT(DDRA, LOC_u8Pin);
    1fde:	aa e3       	ldi	r26, 0x3A	; 58
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	ea e3       	ldi	r30, 0x3A	; 58
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	48 2f       	mov	r20, r24
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	28 2f       	mov	r18, r24
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	02 2e       	mov	r0, r18
    1ff6:	02 c0       	rjmp	.+4      	; 0x1ffc <Port_enuSetPinDirection+0xd2>
    1ff8:	88 0f       	add	r24, r24
    1ffa:	99 1f       	adc	r25, r25
    1ffc:	0a 94       	dec	r0
    1ffe:	e2 f7       	brpl	.-8      	; 0x1ff8 <Port_enuSetPinDirection+0xce>
    2000:	80 95       	com	r24
    2002:	84 23       	and	r24, r20
    2004:	8c 93       	st	X, r24
    2006:	83 c0       	rjmp	.+262    	; 0x210e <Port_enuSetPinDirection+0x1e4>
			}
			break;
		case PORT_u8PORTB:


			if (Copy_u8PinDirection == PORT_u8OUTPUT) {
    2008:	8d 81       	ldd	r24, Y+5	; 0x05
    200a:	81 30       	cpi	r24, 0x01	; 1
    200c:	a1 f4       	brne	.+40     	; 0x2036 <Port_enuSetPinDirection+0x10c>
				SET_BIT(DDRB, LOC_u8Pin);
    200e:	a7 e3       	ldi	r26, 0x37	; 55
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	e7 e3       	ldi	r30, 0x37	; 55
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	48 2f       	mov	r20, r24
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	02 2e       	mov	r0, r18
    2026:	02 c0       	rjmp	.+4      	; 0x202c <Port_enuSetPinDirection+0x102>
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	0a 94       	dec	r0
    202e:	e2 f7       	brpl	.-8      	; 0x2028 <Port_enuSetPinDirection+0xfe>
    2030:	84 2b       	or	r24, r20
    2032:	8c 93       	st	X, r24
    2034:	6c c0       	rjmp	.+216    	; 0x210e <Port_enuSetPinDirection+0x1e4>
			} else {
				CLR_BIT(DDRB, LOC_u8Pin);
    2036:	a7 e3       	ldi	r26, 0x37	; 55
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	e7 e3       	ldi	r30, 0x37	; 55
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	48 2f       	mov	r20, r24
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	28 2f       	mov	r18, r24
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	02 2e       	mov	r0, r18
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <Port_enuSetPinDirection+0x12a>
    2050:	88 0f       	add	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	0a 94       	dec	r0
    2056:	e2 f7       	brpl	.-8      	; 0x2050 <Port_enuSetPinDirection+0x126>
    2058:	80 95       	com	r24
    205a:	84 23       	and	r24, r20
    205c:	8c 93       	st	X, r24
    205e:	57 c0       	rjmp	.+174    	; 0x210e <Port_enuSetPinDirection+0x1e4>

			break;

		case PORT_u8PORTC:

			if (Copy_u8PinDirection == PORT_u8OUTPUT) {
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
    2062:	81 30       	cpi	r24, 0x01	; 1
    2064:	a1 f4       	brne	.+40     	; 0x208e <Port_enuSetPinDirection+0x164>
				SET_BIT(DDRC, LOC_u8Pin);
    2066:	a4 e3       	ldi	r26, 0x34	; 52
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e4 e3       	ldi	r30, 0x34	; 52
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	48 2f       	mov	r20, r24
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	28 2f       	mov	r18, r24
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	02 2e       	mov	r0, r18
    207e:	02 c0       	rjmp	.+4      	; 0x2084 <Port_enuSetPinDirection+0x15a>
    2080:	88 0f       	add	r24, r24
    2082:	99 1f       	adc	r25, r25
    2084:	0a 94       	dec	r0
    2086:	e2 f7       	brpl	.-8      	; 0x2080 <Port_enuSetPinDirection+0x156>
    2088:	84 2b       	or	r24, r20
    208a:	8c 93       	st	X, r24
    208c:	40 c0       	rjmp	.+128    	; 0x210e <Port_enuSetPinDirection+0x1e4>
			} else {
				CLR_BIT(DDRC, LOC_u8Pin);
    208e:	a4 e3       	ldi	r26, 0x34	; 52
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	e4 e3       	ldi	r30, 0x34	; 52
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	48 2f       	mov	r20, r24
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	28 2f       	mov	r18, r24
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	02 2e       	mov	r0, r18
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <Port_enuSetPinDirection+0x182>
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	0a 94       	dec	r0
    20ae:	e2 f7       	brpl	.-8      	; 0x20a8 <Port_enuSetPinDirection+0x17e>
    20b0:	80 95       	com	r24
    20b2:	84 23       	and	r24, r20
    20b4:	8c 93       	st	X, r24
    20b6:	2b c0       	rjmp	.+86     	; 0x210e <Port_enuSetPinDirection+0x1e4>

			break;

		case PORT_u8PORTD:

			if (Copy_u8PinDirection == PORT_u8OUTPUT) {
    20b8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ba:	81 30       	cpi	r24, 0x01	; 1
    20bc:	a1 f4       	brne	.+40     	; 0x20e6 <Port_enuSetPinDirection+0x1bc>
				SET_BIT(DDRD, LOC_u8Pin);
    20be:	a1 e3       	ldi	r26, 0x31	; 49
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	e1 e3       	ldi	r30, 0x31	; 49
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	48 2f       	mov	r20, r24
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	28 2f       	mov	r18, r24
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	02 2e       	mov	r0, r18
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <Port_enuSetPinDirection+0x1b2>
    20d8:	88 0f       	add	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	0a 94       	dec	r0
    20de:	e2 f7       	brpl	.-8      	; 0x20d8 <Port_enuSetPinDirection+0x1ae>
    20e0:	84 2b       	or	r24, r20
    20e2:	8c 93       	st	X, r24
    20e4:	14 c0       	rjmp	.+40     	; 0x210e <Port_enuSetPinDirection+0x1e4>
			} else {
				CLR_BIT(DDRD, LOC_u8Pin);
    20e6:	a1 e3       	ldi	r26, 0x31	; 49
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e1 e3       	ldi	r30, 0x31	; 49
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	48 2f       	mov	r20, r24
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	02 2e       	mov	r0, r18
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <Port_enuSetPinDirection+0x1da>
    2100:	88 0f       	add	r24, r24
    2102:	99 1f       	adc	r25, r25
    2104:	0a 94       	dec	r0
    2106:	e2 f7       	brpl	.-8      	; 0x2100 <Port_enuSetPinDirection+0x1d6>
    2108:	80 95       	com	r24
    210a:	84 23       	and	r24, r20
    210c:	8c 93       	st	X, r24
			break;
		}
	}

	/*RETURN ERROR TYPE*/
	return LOC_EnumReturn;
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2110:	27 96       	adiw	r28, 0x07	; 7
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	f8 94       	cli
    2116:	de bf       	out	0x3e, r29	; 62
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	cd bf       	out	0x3d, r28	; 61
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <Port_enuSetPinMode>:


Port_EnumErrorStatus Port_enuSetPinMode(u8 Copy_u8PinNum, u8 Copy_u8PinMode) {
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	2f 97       	sbiw	r28, 0x0f	; 15
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	f8 94       	cli
    2130:	de bf       	out	0x3e, r29	; 62
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	cd bf       	out	0x3d, r28	; 61
    2136:	8c 83       	std	Y+4, r24	; 0x04
    2138:	6d 83       	std	Y+5, r22	; 0x05

	Port_EnumErrorStatus LOC_EnumReturn = Ok;
    213a:	1b 82       	std	Y+3, r1	; 0x03
	u8 LOC_u8Port;
	u8 LOC_u8Pin;

	if (Copy_u8PinNum > PORT_u8TOTALNUMBER_OF_PINS) {
    213c:	8c 81       	ldd	r24, Y+4	; 0x04
    213e:	80 32       	cpi	r24, 0x20	; 32
    2140:	18 f0       	brcs	.+6      	; 0x2148 <Port_enuSetPinMode+0x26>
		LOC_EnumReturn = PinError;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	8b 83       	std	Y+3, r24	; 0x03
    2146:	27 c3       	rjmp	.+1614   	; 0x2796 <Port_enuSetPinMode+0x674>

	} else if (Copy_u8PinMode > PORT_u8INPUT_PULLUP) {
    2148:	8d 81       	ldd	r24, Y+5	; 0x05
    214a:	84 30       	cpi	r24, 0x04	; 4
    214c:	18 f0       	brcs	.+6      	; 0x2154 <Port_enuSetPinMode+0x32>
		LOC_EnumReturn = ModeError;
    214e:	82 e0       	ldi	r24, 0x02	; 2
    2150:	8b 83       	std	Y+3, r24	; 0x03
    2152:	21 c3       	rjmp	.+1602   	; 0x2796 <Port_enuSetPinMode+0x674>
	} else {

		LOC_u8Port = Copy_u8PinNum / PORT_u8REGISTER_SIZE; //TO GET PORT EX: (31/8=3, WHICH 3 IS PORTD)
    2154:	8c 81       	ldd	r24, Y+4	; 0x04
    2156:	86 95       	lsr	r24
    2158:	86 95       	lsr	r24
    215a:	86 95       	lsr	r24
    215c:	8a 83       	std	Y+2, r24	; 0x02
		LOC_u8Pin = Copy_u8PinNum % PORT_u8REGISTER_SIZE; //TO GET WHICH PIN EX: (31%8=7, WHICH 7 IS PIN7)
    215e:	8c 81       	ldd	r24, Y+4	; 0x04
    2160:	87 70       	andi	r24, 0x07	; 7
    2162:	89 83       	std	Y+1, r24	; 0x01

		switch (LOC_u8Port) {
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	3f 87       	std	Y+15, r19	; 0x0f
    216c:	2e 87       	std	Y+14, r18	; 0x0e
    216e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2170:	9f 85       	ldd	r25, Y+15	; 0x0f
    2172:	81 30       	cpi	r24, 0x01	; 1
    2174:	91 05       	cpc	r25, r1
    2176:	09 f4       	brne	.+2      	; 0x217a <Port_enuSetPinMode+0x58>
    2178:	d5 c0       	rjmp	.+426    	; 0x2324 <Port_enuSetPinMode+0x202>
    217a:	2e 85       	ldd	r18, Y+14	; 0x0e
    217c:	3f 85       	ldd	r19, Y+15	; 0x0f
    217e:	22 30       	cpi	r18, 0x02	; 2
    2180:	31 05       	cpc	r19, r1
    2182:	2c f4       	brge	.+10     	; 0x218e <Port_enuSetPinMode+0x6c>
    2184:	8e 85       	ldd	r24, Y+14	; 0x0e
    2186:	9f 85       	ldd	r25, Y+15	; 0x0f
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	71 f0       	breq	.+28     	; 0x21a8 <Port_enuSetPinMode+0x86>
    218c:	04 c3       	rjmp	.+1544   	; 0x2796 <Port_enuSetPinMode+0x674>
    218e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2190:	3f 85       	ldd	r19, Y+15	; 0x0f
    2192:	22 30       	cpi	r18, 0x02	; 2
    2194:	31 05       	cpc	r19, r1
    2196:	09 f4       	brne	.+2      	; 0x219a <Port_enuSetPinMode+0x78>
    2198:	83 c1       	rjmp	.+774    	; 0x24a0 <Port_enuSetPinMode+0x37e>
    219a:	8e 85       	ldd	r24, Y+14	; 0x0e
    219c:	9f 85       	ldd	r25, Y+15	; 0x0f
    219e:	83 30       	cpi	r24, 0x03	; 3
    21a0:	91 05       	cpc	r25, r1
    21a2:	09 f4       	brne	.+2      	; 0x21a6 <Port_enuSetPinMode+0x84>
    21a4:	3b c2       	rjmp	.+1142   	; 0x261c <Port_enuSetPinMode+0x4fa>
    21a6:	f7 c2       	rjmp	.+1518   	; 0x2796 <Port_enuSetPinMode+0x674>


		case PORT_u8PORTA:
			switch (Copy_u8PinMode) {
    21a8:	8d 81       	ldd	r24, Y+5	; 0x05
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	3d 87       	std	Y+13, r19	; 0x0d
    21b0:	2c 87       	std	Y+12, r18	; 0x0c
    21b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    21b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    21b6:	81 30       	cpi	r24, 0x01	; 1
    21b8:	91 05       	cpc	r25, r1
    21ba:	09 f4       	brne	.+2      	; 0x21be <Port_enuSetPinMode+0x9c>
    21bc:	3e c0       	rjmp	.+124    	; 0x223a <Port_enuSetPinMode+0x118>
    21be:	2c 85       	ldd	r18, Y+12	; 0x0c
    21c0:	3d 85       	ldd	r19, Y+13	; 0x0d
    21c2:	22 30       	cpi	r18, 0x02	; 2
    21c4:	31 05       	cpc	r19, r1
    21c6:	2c f4       	brge	.+10     	; 0x21d2 <Port_enuSetPinMode+0xb0>
    21c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    21ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	71 f0       	breq	.+28     	; 0x21ec <Port_enuSetPinMode+0xca>
    21d0:	e2 c2       	rjmp	.+1476   	; 0x2796 <Port_enuSetPinMode+0x674>
    21d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    21d4:	3d 85       	ldd	r19, Y+13	; 0x0d
    21d6:	22 30       	cpi	r18, 0x02	; 2
    21d8:	31 05       	cpc	r19, r1
    21da:	09 f4       	brne	.+2      	; 0x21de <Port_enuSetPinMode+0xbc>
    21dc:	54 c0       	rjmp	.+168    	; 0x2286 <Port_enuSetPinMode+0x164>
    21de:	8c 85       	ldd	r24, Y+12	; 0x0c
    21e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    21e2:	83 30       	cpi	r24, 0x03	; 3
    21e4:	91 05       	cpc	r25, r1
    21e6:	09 f4       	brne	.+2      	; 0x21ea <Port_enuSetPinMode+0xc8>
    21e8:	76 c0       	rjmp	.+236    	; 0x22d6 <Port_enuSetPinMode+0x1b4>
    21ea:	d5 c2       	rjmp	.+1450   	; 0x2796 <Port_enuSetPinMode+0x674>
			case PORT_u8OUTPUT_LOW:
				SET_BIT(DDRA, LOC_u8Pin);
    21ec:	aa e3       	ldi	r26, 0x3A	; 58
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	ea e3       	ldi	r30, 0x3A	; 58
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	48 2f       	mov	r20, r24
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <Port_enuSetPinMode+0xe6>
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	2a 95       	dec	r18
    220a:	e2 f7       	brpl	.-8      	; 0x2204 <Port_enuSetPinMode+0xe2>
    220c:	84 2b       	or	r24, r20
    220e:	8c 93       	st	X, r24
				CLR_BIT(PORTA, LOC_u8Pin);
    2210:	ab e3       	ldi	r26, 0x3B	; 59
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	eb e3       	ldi	r30, 0x3B	; 59
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	48 2f       	mov	r20, r24
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	28 2f       	mov	r18, r24
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	02 2e       	mov	r0, r18
    2228:	02 c0       	rjmp	.+4      	; 0x222e <Port_enuSetPinMode+0x10c>
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	0a 94       	dec	r0
    2230:	e2 f7       	brpl	.-8      	; 0x222a <Port_enuSetPinMode+0x108>
    2232:	80 95       	com	r24
    2234:	84 23       	and	r24, r20
    2236:	8c 93       	st	X, r24
    2238:	ae c2       	rjmp	.+1372   	; 0x2796 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8OUTPUT_HIGH:
				SET_BIT(DDRA, LOC_u8Pin);
    223a:	aa e3       	ldi	r26, 0x3A	; 58
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	ea e3       	ldi	r30, 0x3A	; 58
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	48 2f       	mov	r20, r24
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <Port_enuSetPinMode+0x134>
    2252:	88 0f       	add	r24, r24
    2254:	99 1f       	adc	r25, r25
    2256:	2a 95       	dec	r18
    2258:	e2 f7       	brpl	.-8      	; 0x2252 <Port_enuSetPinMode+0x130>
    225a:	84 2b       	or	r24, r20
    225c:	8c 93       	st	X, r24
				SET_BIT(PORTA, LOC_u8Pin);
    225e:	ab e3       	ldi	r26, 0x3B	; 59
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	eb e3       	ldi	r30, 0x3B	; 59
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	48 2f       	mov	r20, r24
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	28 2f       	mov	r18, r24
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	02 2e       	mov	r0, r18
    2276:	02 c0       	rjmp	.+4      	; 0x227c <Port_enuSetPinMode+0x15a>
    2278:	88 0f       	add	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	0a 94       	dec	r0
    227e:	e2 f7       	brpl	.-8      	; 0x2278 <Port_enuSetPinMode+0x156>
    2280:	84 2b       	or	r24, r20
    2282:	8c 93       	st	X, r24
    2284:	88 c2       	rjmp	.+1296   	; 0x2796 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_FLOATING:
				CLR_BIT(DDRA, LOC_u8Pin);
    2286:	aa e3       	ldi	r26, 0x3A	; 58
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	ea e3       	ldi	r30, 0x3A	; 58
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	48 2f       	mov	r20, r24
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <Port_enuSetPinMode+0x180>
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	2a 95       	dec	r18
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <Port_enuSetPinMode+0x17c>
    22a6:	80 95       	com	r24
    22a8:	84 23       	and	r24, r20
    22aa:	8c 93       	st	X, r24
				CLR_BIT(PORTA, LOC_u8Pin);
    22ac:	ab e3       	ldi	r26, 0x3B	; 59
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	eb e3       	ldi	r30, 0x3B	; 59
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	48 2f       	mov	r20, r24
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	02 2e       	mov	r0, r18
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <Port_enuSetPinMode+0x1a8>
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	0a 94       	dec	r0
    22cc:	e2 f7       	brpl	.-8      	; 0x22c6 <Port_enuSetPinMode+0x1a4>
    22ce:	80 95       	com	r24
    22d0:	84 23       	and	r24, r20
    22d2:	8c 93       	st	X, r24
    22d4:	60 c2       	rjmp	.+1216   	; 0x2796 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_PULLUP:
				CLR_BIT(DDRA, LOC_u8Pin);
    22d6:	aa e3       	ldi	r26, 0x3A	; 58
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	ea e3       	ldi	r30, 0x3A	; 58
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	48 2f       	mov	r20, r24
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	28 2f       	mov	r18, r24
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <Port_enuSetPinMode+0x1d0>
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	2a 95       	dec	r18
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <Port_enuSetPinMode+0x1cc>
    22f6:	80 95       	com	r24
    22f8:	84 23       	and	r24, r20
    22fa:	8c 93       	st	X, r24
				SET_BIT(PORTA, LOC_u8Pin);
    22fc:	ab e3       	ldi	r26, 0x3B	; 59
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	eb e3       	ldi	r30, 0x3B	; 59
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	48 2f       	mov	r20, r24
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	02 2e       	mov	r0, r18
    2314:	02 c0       	rjmp	.+4      	; 0x231a <Port_enuSetPinMode+0x1f8>
    2316:	88 0f       	add	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	0a 94       	dec	r0
    231c:	e2 f7       	brpl	.-8      	; 0x2316 <Port_enuSetPinMode+0x1f4>
    231e:	84 2b       	or	r24, r20
    2320:	8c 93       	st	X, r24
    2322:	39 c2       	rjmp	.+1138   	; 0x2796 <Port_enuSetPinMode+0x674>
				break;
			}
			break;

		case PORT_u8PORTB:
			switch (Copy_u8PinMode) {
    2324:	8d 81       	ldd	r24, Y+5	; 0x05
    2326:	28 2f       	mov	r18, r24
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	3b 87       	std	Y+11, r19	; 0x0b
    232c:	2a 87       	std	Y+10, r18	; 0x0a
    232e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2330:	9b 85       	ldd	r25, Y+11	; 0x0b
    2332:	81 30       	cpi	r24, 0x01	; 1
    2334:	91 05       	cpc	r25, r1
    2336:	09 f4       	brne	.+2      	; 0x233a <Port_enuSetPinMode+0x218>
    2338:	3e c0       	rjmp	.+124    	; 0x23b6 <Port_enuSetPinMode+0x294>
    233a:	2a 85       	ldd	r18, Y+10	; 0x0a
    233c:	3b 85       	ldd	r19, Y+11	; 0x0b
    233e:	22 30       	cpi	r18, 0x02	; 2
    2340:	31 05       	cpc	r19, r1
    2342:	2c f4       	brge	.+10     	; 0x234e <Port_enuSetPinMode+0x22c>
    2344:	8a 85       	ldd	r24, Y+10	; 0x0a
    2346:	9b 85       	ldd	r25, Y+11	; 0x0b
    2348:	00 97       	sbiw	r24, 0x00	; 0
    234a:	71 f0       	breq	.+28     	; 0x2368 <Port_enuSetPinMode+0x246>
    234c:	24 c2       	rjmp	.+1096   	; 0x2796 <Port_enuSetPinMode+0x674>
    234e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2350:	3b 85       	ldd	r19, Y+11	; 0x0b
    2352:	22 30       	cpi	r18, 0x02	; 2
    2354:	31 05       	cpc	r19, r1
    2356:	09 f4       	brne	.+2      	; 0x235a <Port_enuSetPinMode+0x238>
    2358:	54 c0       	rjmp	.+168    	; 0x2402 <Port_enuSetPinMode+0x2e0>
    235a:	8a 85       	ldd	r24, Y+10	; 0x0a
    235c:	9b 85       	ldd	r25, Y+11	; 0x0b
    235e:	83 30       	cpi	r24, 0x03	; 3
    2360:	91 05       	cpc	r25, r1
    2362:	09 f4       	brne	.+2      	; 0x2366 <Port_enuSetPinMode+0x244>
    2364:	76 c0       	rjmp	.+236    	; 0x2452 <Port_enuSetPinMode+0x330>
    2366:	17 c2       	rjmp	.+1070   	; 0x2796 <Port_enuSetPinMode+0x674>
			case PORT_u8OUTPUT_LOW:
				SET_BIT(DDRB, LOC_u8Pin);
    2368:	a7 e3       	ldi	r26, 0x37	; 55
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	e7 e3       	ldi	r30, 0x37	; 55
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	48 2f       	mov	r20, r24
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	28 2f       	mov	r18, r24
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <Port_enuSetPinMode+0x262>
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	2a 95       	dec	r18
    2386:	e2 f7       	brpl	.-8      	; 0x2380 <Port_enuSetPinMode+0x25e>
    2388:	84 2b       	or	r24, r20
    238a:	8c 93       	st	X, r24
				CLR_BIT(PORTB, LOC_u8Pin);
    238c:	a8 e3       	ldi	r26, 0x38	; 56
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e8 e3       	ldi	r30, 0x38	; 56
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	48 2f       	mov	r20, r24
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	28 2f       	mov	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	02 2e       	mov	r0, r18
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <Port_enuSetPinMode+0x288>
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	0a 94       	dec	r0
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <Port_enuSetPinMode+0x284>
    23ae:	80 95       	com	r24
    23b0:	84 23       	and	r24, r20
    23b2:	8c 93       	st	X, r24
    23b4:	f0 c1       	rjmp	.+992    	; 0x2796 <Port_enuSetPinMode+0x674>
				break;
			case PORT_u8OUTPUT_HIGH:
				SET_BIT(DDRB, LOC_u8Pin);
    23b6:	a7 e3       	ldi	r26, 0x37	; 55
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e7 e3       	ldi	r30, 0x37	; 55
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	48 2f       	mov	r20, r24
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	28 2f       	mov	r18, r24
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <Port_enuSetPinMode+0x2b0>
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	2a 95       	dec	r18
    23d4:	e2 f7       	brpl	.-8      	; 0x23ce <Port_enuSetPinMode+0x2ac>
    23d6:	84 2b       	or	r24, r20
    23d8:	8c 93       	st	X, r24
				SET_BIT(PORTB, LOC_u8Pin);
    23da:	a8 e3       	ldi	r26, 0x38	; 56
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e8 e3       	ldi	r30, 0x38	; 56
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	48 2f       	mov	r20, r24
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	28 2f       	mov	r18, r24
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	02 2e       	mov	r0, r18
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <Port_enuSetPinMode+0x2d6>
    23f4:	88 0f       	add	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	0a 94       	dec	r0
    23fa:	e2 f7       	brpl	.-8      	; 0x23f4 <Port_enuSetPinMode+0x2d2>
    23fc:	84 2b       	or	r24, r20
    23fe:	8c 93       	st	X, r24
    2400:	ca c1       	rjmp	.+916    	; 0x2796 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_FLOATING:
				CLR_BIT(DDRB, LOC_u8Pin);
    2402:	a7 e3       	ldi	r26, 0x37	; 55
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e7 e3       	ldi	r30, 0x37	; 55
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	48 2f       	mov	r20, r24
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	28 2f       	mov	r18, r24
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	02 c0       	rjmp	.+4      	; 0x241e <Port_enuSetPinMode+0x2fc>
    241a:	88 0f       	add	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	2a 95       	dec	r18
    2420:	e2 f7       	brpl	.-8      	; 0x241a <Port_enuSetPinMode+0x2f8>
    2422:	80 95       	com	r24
    2424:	84 23       	and	r24, r20
    2426:	8c 93       	st	X, r24
				CLR_BIT(PORTB, LOC_u8Pin);
    2428:	a8 e3       	ldi	r26, 0x38	; 56
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	e8 e3       	ldi	r30, 0x38	; 56
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 81       	ld	r24, Z
    2432:	48 2f       	mov	r20, r24
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	28 2f       	mov	r18, r24
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	02 2e       	mov	r0, r18
    2440:	02 c0       	rjmp	.+4      	; 0x2446 <Port_enuSetPinMode+0x324>
    2442:	88 0f       	add	r24, r24
    2444:	99 1f       	adc	r25, r25
    2446:	0a 94       	dec	r0
    2448:	e2 f7       	brpl	.-8      	; 0x2442 <Port_enuSetPinMode+0x320>
    244a:	80 95       	com	r24
    244c:	84 23       	and	r24, r20
    244e:	8c 93       	st	X, r24
    2450:	a2 c1       	rjmp	.+836    	; 0x2796 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_PULLUP:
				CLR_BIT(DDRB, LOC_u8Pin);
    2452:	a7 e3       	ldi	r26, 0x37	; 55
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	e7 e3       	ldi	r30, 0x37	; 55
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	48 2f       	mov	r20, r24
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	28 2f       	mov	r18, r24
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	02 c0       	rjmp	.+4      	; 0x246e <Port_enuSetPinMode+0x34c>
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	2a 95       	dec	r18
    2470:	e2 f7       	brpl	.-8      	; 0x246a <Port_enuSetPinMode+0x348>
    2472:	80 95       	com	r24
    2474:	84 23       	and	r24, r20
    2476:	8c 93       	st	X, r24
				SET_BIT(PORTB, LOC_u8Pin);
    2478:	a8 e3       	ldi	r26, 0x38	; 56
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e8 e3       	ldi	r30, 0x38	; 56
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	48 2f       	mov	r20, r24
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	28 2f       	mov	r18, r24
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	02 2e       	mov	r0, r18
    2490:	02 c0       	rjmp	.+4      	; 0x2496 <Port_enuSetPinMode+0x374>
    2492:	88 0f       	add	r24, r24
    2494:	99 1f       	adc	r25, r25
    2496:	0a 94       	dec	r0
    2498:	e2 f7       	brpl	.-8      	; 0x2492 <Port_enuSetPinMode+0x370>
    249a:	84 2b       	or	r24, r20
    249c:	8c 93       	st	X, r24
    249e:	7b c1       	rjmp	.+758    	; 0x2796 <Port_enuSetPinMode+0x674>
				break;
			}
			break;

		case PORT_u8PORTC:
			switch (Copy_u8PinMode) {
    24a0:	8d 81       	ldd	r24, Y+5	; 0x05
    24a2:	28 2f       	mov	r18, r24
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	39 87       	std	Y+9, r19	; 0x09
    24a8:	28 87       	std	Y+8, r18	; 0x08
    24aa:	88 85       	ldd	r24, Y+8	; 0x08
    24ac:	99 85       	ldd	r25, Y+9	; 0x09
    24ae:	81 30       	cpi	r24, 0x01	; 1
    24b0:	91 05       	cpc	r25, r1
    24b2:	09 f4       	brne	.+2      	; 0x24b6 <Port_enuSetPinMode+0x394>
    24b4:	3e c0       	rjmp	.+124    	; 0x2532 <Port_enuSetPinMode+0x410>
    24b6:	28 85       	ldd	r18, Y+8	; 0x08
    24b8:	39 85       	ldd	r19, Y+9	; 0x09
    24ba:	22 30       	cpi	r18, 0x02	; 2
    24bc:	31 05       	cpc	r19, r1
    24be:	2c f4       	brge	.+10     	; 0x24ca <Port_enuSetPinMode+0x3a8>
    24c0:	88 85       	ldd	r24, Y+8	; 0x08
    24c2:	99 85       	ldd	r25, Y+9	; 0x09
    24c4:	00 97       	sbiw	r24, 0x00	; 0
    24c6:	71 f0       	breq	.+28     	; 0x24e4 <Port_enuSetPinMode+0x3c2>
    24c8:	66 c1       	rjmp	.+716    	; 0x2796 <Port_enuSetPinMode+0x674>
    24ca:	28 85       	ldd	r18, Y+8	; 0x08
    24cc:	39 85       	ldd	r19, Y+9	; 0x09
    24ce:	22 30       	cpi	r18, 0x02	; 2
    24d0:	31 05       	cpc	r19, r1
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <Port_enuSetPinMode+0x3b4>
    24d4:	54 c0       	rjmp	.+168    	; 0x257e <Port_enuSetPinMode+0x45c>
    24d6:	88 85       	ldd	r24, Y+8	; 0x08
    24d8:	99 85       	ldd	r25, Y+9	; 0x09
    24da:	83 30       	cpi	r24, 0x03	; 3
    24dc:	91 05       	cpc	r25, r1
    24de:	09 f4       	brne	.+2      	; 0x24e2 <Port_enuSetPinMode+0x3c0>
    24e0:	76 c0       	rjmp	.+236    	; 0x25ce <Port_enuSetPinMode+0x4ac>
    24e2:	59 c1       	rjmp	.+690    	; 0x2796 <Port_enuSetPinMode+0x674>
			case PORT_u8OUTPUT_LOW:
				SET_BIT(DDRC, LOC_u8Pin);
    24e4:	a4 e3       	ldi	r26, 0x34	; 52
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e4 e3       	ldi	r30, 0x34	; 52
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	48 2f       	mov	r20, r24
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	28 2f       	mov	r18, r24
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	02 c0       	rjmp	.+4      	; 0x2500 <Port_enuSetPinMode+0x3de>
    24fc:	88 0f       	add	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	2a 95       	dec	r18
    2502:	e2 f7       	brpl	.-8      	; 0x24fc <Port_enuSetPinMode+0x3da>
    2504:	84 2b       	or	r24, r20
    2506:	8c 93       	st	X, r24
				CLR_BIT(PORTC, LOC_u8Pin);
    2508:	a5 e3       	ldi	r26, 0x35	; 53
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	e5 e3       	ldi	r30, 0x35	; 53
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	48 2f       	mov	r20, r24
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	02 2e       	mov	r0, r18
    2520:	02 c0       	rjmp	.+4      	; 0x2526 <Port_enuSetPinMode+0x404>
    2522:	88 0f       	add	r24, r24
    2524:	99 1f       	adc	r25, r25
    2526:	0a 94       	dec	r0
    2528:	e2 f7       	brpl	.-8      	; 0x2522 <Port_enuSetPinMode+0x400>
    252a:	80 95       	com	r24
    252c:	84 23       	and	r24, r20
    252e:	8c 93       	st	X, r24
    2530:	32 c1       	rjmp	.+612    	; 0x2796 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8OUTPUT_HIGH:
				SET_BIT(DDRC, LOC_u8Pin);
    2532:	a4 e3       	ldi	r26, 0x34	; 52
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	e4 e3       	ldi	r30, 0x34	; 52
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	48 2f       	mov	r20, r24
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	28 2f       	mov	r18, r24
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	02 c0       	rjmp	.+4      	; 0x254e <Port_enuSetPinMode+0x42c>
    254a:	88 0f       	add	r24, r24
    254c:	99 1f       	adc	r25, r25
    254e:	2a 95       	dec	r18
    2550:	e2 f7       	brpl	.-8      	; 0x254a <Port_enuSetPinMode+0x428>
    2552:	84 2b       	or	r24, r20
    2554:	8c 93       	st	X, r24
				SET_BIT(PORTC, LOC_u8Pin);
    2556:	a5 e3       	ldi	r26, 0x35	; 53
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	e5 e3       	ldi	r30, 0x35	; 53
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	48 2f       	mov	r20, r24
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	28 2f       	mov	r18, r24
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	02 2e       	mov	r0, r18
    256e:	02 c0       	rjmp	.+4      	; 0x2574 <Port_enuSetPinMode+0x452>
    2570:	88 0f       	add	r24, r24
    2572:	99 1f       	adc	r25, r25
    2574:	0a 94       	dec	r0
    2576:	e2 f7       	brpl	.-8      	; 0x2570 <Port_enuSetPinMode+0x44e>
    2578:	84 2b       	or	r24, r20
    257a:	8c 93       	st	X, r24
    257c:	0c c1       	rjmp	.+536    	; 0x2796 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_FLOATING:
				CLR_BIT(DDRC, LOC_u8Pin);
    257e:	a4 e3       	ldi	r26, 0x34	; 52
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	e4 e3       	ldi	r30, 0x34	; 52
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	48 2f       	mov	r20, r24
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	28 2f       	mov	r18, r24
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	02 c0       	rjmp	.+4      	; 0x259a <Port_enuSetPinMode+0x478>
    2596:	88 0f       	add	r24, r24
    2598:	99 1f       	adc	r25, r25
    259a:	2a 95       	dec	r18
    259c:	e2 f7       	brpl	.-8      	; 0x2596 <Port_enuSetPinMode+0x474>
    259e:	80 95       	com	r24
    25a0:	84 23       	and	r24, r20
    25a2:	8c 93       	st	X, r24
				CLR_BIT(PORTC, LOC_u8Pin);
    25a4:	a5 e3       	ldi	r26, 0x35	; 53
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	e5 e3       	ldi	r30, 0x35	; 53
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	48 2f       	mov	r20, r24
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	28 2f       	mov	r18, r24
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	02 2e       	mov	r0, r18
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <Port_enuSetPinMode+0x4a0>
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	0a 94       	dec	r0
    25c4:	e2 f7       	brpl	.-8      	; 0x25be <Port_enuSetPinMode+0x49c>
    25c6:	80 95       	com	r24
    25c8:	84 23       	and	r24, r20
    25ca:	8c 93       	st	X, r24
    25cc:	e4 c0       	rjmp	.+456    	; 0x2796 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_PULLUP:
				CLR_BIT(DDRC, LOC_u8Pin);
    25ce:	a4 e3       	ldi	r26, 0x34	; 52
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	e4 e3       	ldi	r30, 0x34	; 52
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	48 2f       	mov	r20, r24
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	28 2f       	mov	r18, r24
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	02 c0       	rjmp	.+4      	; 0x25ea <Port_enuSetPinMode+0x4c8>
    25e6:	88 0f       	add	r24, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	2a 95       	dec	r18
    25ec:	e2 f7       	brpl	.-8      	; 0x25e6 <Port_enuSetPinMode+0x4c4>
    25ee:	80 95       	com	r24
    25f0:	84 23       	and	r24, r20
    25f2:	8c 93       	st	X, r24
				SET_BIT(PORTC, LOC_u8Pin);
    25f4:	a5 e3       	ldi	r26, 0x35	; 53
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	e5 e3       	ldi	r30, 0x35	; 53
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	48 2f       	mov	r20, r24
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	28 2f       	mov	r18, r24
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	02 2e       	mov	r0, r18
    260c:	02 c0       	rjmp	.+4      	; 0x2612 <Port_enuSetPinMode+0x4f0>
    260e:	88 0f       	add	r24, r24
    2610:	99 1f       	adc	r25, r25
    2612:	0a 94       	dec	r0
    2614:	e2 f7       	brpl	.-8      	; 0x260e <Port_enuSetPinMode+0x4ec>
    2616:	84 2b       	or	r24, r20
    2618:	8c 93       	st	X, r24
    261a:	bd c0       	rjmp	.+378    	; 0x2796 <Port_enuSetPinMode+0x674>

			break;

		case PORT_u8PORTD:

			switch (Copy_u8PinMode) {
    261c:	8d 81       	ldd	r24, Y+5	; 0x05
    261e:	28 2f       	mov	r18, r24
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	3f 83       	std	Y+7, r19	; 0x07
    2624:	2e 83       	std	Y+6, r18	; 0x06
    2626:	8e 81       	ldd	r24, Y+6	; 0x06
    2628:	9f 81       	ldd	r25, Y+7	; 0x07
    262a:	81 30       	cpi	r24, 0x01	; 1
    262c:	91 05       	cpc	r25, r1
    262e:	09 f4       	brne	.+2      	; 0x2632 <Port_enuSetPinMode+0x510>
    2630:	3e c0       	rjmp	.+124    	; 0x26ae <Port_enuSetPinMode+0x58c>
    2632:	2e 81       	ldd	r18, Y+6	; 0x06
    2634:	3f 81       	ldd	r19, Y+7	; 0x07
    2636:	22 30       	cpi	r18, 0x02	; 2
    2638:	31 05       	cpc	r19, r1
    263a:	2c f4       	brge	.+10     	; 0x2646 <Port_enuSetPinMode+0x524>
    263c:	8e 81       	ldd	r24, Y+6	; 0x06
    263e:	9f 81       	ldd	r25, Y+7	; 0x07
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	71 f0       	breq	.+28     	; 0x2660 <Port_enuSetPinMode+0x53e>
    2644:	a8 c0       	rjmp	.+336    	; 0x2796 <Port_enuSetPinMode+0x674>
    2646:	2e 81       	ldd	r18, Y+6	; 0x06
    2648:	3f 81       	ldd	r19, Y+7	; 0x07
    264a:	22 30       	cpi	r18, 0x02	; 2
    264c:	31 05       	cpc	r19, r1
    264e:	09 f4       	brne	.+2      	; 0x2652 <Port_enuSetPinMode+0x530>
    2650:	54 c0       	rjmp	.+168    	; 0x26fa <Port_enuSetPinMode+0x5d8>
    2652:	8e 81       	ldd	r24, Y+6	; 0x06
    2654:	9f 81       	ldd	r25, Y+7	; 0x07
    2656:	83 30       	cpi	r24, 0x03	; 3
    2658:	91 05       	cpc	r25, r1
    265a:	09 f4       	brne	.+2      	; 0x265e <Port_enuSetPinMode+0x53c>
    265c:	76 c0       	rjmp	.+236    	; 0x274a <Port_enuSetPinMode+0x628>
    265e:	9b c0       	rjmp	.+310    	; 0x2796 <Port_enuSetPinMode+0x674>

			case PORT_u8OUTPUT_LOW:
				SET_BIT(DDRD, LOC_u8Pin);
    2660:	a1 e3       	ldi	r26, 0x31	; 49
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	e1 e3       	ldi	r30, 0x31	; 49
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	48 2f       	mov	r20, r24
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	28 2f       	mov	r18, r24
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	02 c0       	rjmp	.+4      	; 0x267c <Port_enuSetPinMode+0x55a>
    2678:	88 0f       	add	r24, r24
    267a:	99 1f       	adc	r25, r25
    267c:	2a 95       	dec	r18
    267e:	e2 f7       	brpl	.-8      	; 0x2678 <Port_enuSetPinMode+0x556>
    2680:	84 2b       	or	r24, r20
    2682:	8c 93       	st	X, r24
				CLR_BIT(PORTD, LOC_u8Pin);
    2684:	a2 e3       	ldi	r26, 0x32	; 50
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	e2 e3       	ldi	r30, 0x32	; 50
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	48 2f       	mov	r20, r24
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	28 2f       	mov	r18, r24
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	02 2e       	mov	r0, r18
    269c:	02 c0       	rjmp	.+4      	; 0x26a2 <Port_enuSetPinMode+0x580>
    269e:	88 0f       	add	r24, r24
    26a0:	99 1f       	adc	r25, r25
    26a2:	0a 94       	dec	r0
    26a4:	e2 f7       	brpl	.-8      	; 0x269e <Port_enuSetPinMode+0x57c>
    26a6:	80 95       	com	r24
    26a8:	84 23       	and	r24, r20
    26aa:	8c 93       	st	X, r24
    26ac:	74 c0       	rjmp	.+232    	; 0x2796 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8OUTPUT_HIGH:
				SET_BIT(DDRD, LOC_u8Pin);
    26ae:	a1 e3       	ldi	r26, 0x31	; 49
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	e1 e3       	ldi	r30, 0x31	; 49
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	48 2f       	mov	r20, r24
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	28 2f       	mov	r18, r24
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	02 c0       	rjmp	.+4      	; 0x26ca <Port_enuSetPinMode+0x5a8>
    26c6:	88 0f       	add	r24, r24
    26c8:	99 1f       	adc	r25, r25
    26ca:	2a 95       	dec	r18
    26cc:	e2 f7       	brpl	.-8      	; 0x26c6 <Port_enuSetPinMode+0x5a4>
    26ce:	84 2b       	or	r24, r20
    26d0:	8c 93       	st	X, r24
				SET_BIT(PORTD, LOC_u8Pin);
    26d2:	a2 e3       	ldi	r26, 0x32	; 50
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	e2 e3       	ldi	r30, 0x32	; 50
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	48 2f       	mov	r20, r24
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	28 2f       	mov	r18, r24
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	02 2e       	mov	r0, r18
    26ea:	02 c0       	rjmp	.+4      	; 0x26f0 <Port_enuSetPinMode+0x5ce>
    26ec:	88 0f       	add	r24, r24
    26ee:	99 1f       	adc	r25, r25
    26f0:	0a 94       	dec	r0
    26f2:	e2 f7       	brpl	.-8      	; 0x26ec <Port_enuSetPinMode+0x5ca>
    26f4:	84 2b       	or	r24, r20
    26f6:	8c 93       	st	X, r24
    26f8:	4e c0       	rjmp	.+156    	; 0x2796 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_FLOATING:
				CLR_BIT(DDRD, LOC_u8Pin);
    26fa:	a1 e3       	ldi	r26, 0x31	; 49
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	e1 e3       	ldi	r30, 0x31	; 49
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	48 2f       	mov	r20, r24
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	28 2f       	mov	r18, r24
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <Port_enuSetPinMode+0x5f4>
    2712:	88 0f       	add	r24, r24
    2714:	99 1f       	adc	r25, r25
    2716:	2a 95       	dec	r18
    2718:	e2 f7       	brpl	.-8      	; 0x2712 <Port_enuSetPinMode+0x5f0>
    271a:	80 95       	com	r24
    271c:	84 23       	and	r24, r20
    271e:	8c 93       	st	X, r24
				CLR_BIT(PORTD, LOC_u8Pin);
    2720:	a2 e3       	ldi	r26, 0x32	; 50
    2722:	b0 e0       	ldi	r27, 0x00	; 0
    2724:	e2 e3       	ldi	r30, 0x32	; 50
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	80 81       	ld	r24, Z
    272a:	48 2f       	mov	r20, r24
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	28 2f       	mov	r18, r24
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	02 2e       	mov	r0, r18
    2738:	02 c0       	rjmp	.+4      	; 0x273e <Port_enuSetPinMode+0x61c>
    273a:	88 0f       	add	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	0a 94       	dec	r0
    2740:	e2 f7       	brpl	.-8      	; 0x273a <Port_enuSetPinMode+0x618>
    2742:	80 95       	com	r24
    2744:	84 23       	and	r24, r20
    2746:	8c 93       	st	X, r24
    2748:	26 c0       	rjmp	.+76     	; 0x2796 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_PULLUP:
				CLR_BIT(DDRD, LOC_u8Pin);
    274a:	a1 e3       	ldi	r26, 0x31	; 49
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	e1 e3       	ldi	r30, 0x31	; 49
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	48 2f       	mov	r20, r24
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	28 2f       	mov	r18, r24
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <Port_enuSetPinMode+0x644>
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	2a 95       	dec	r18
    2768:	e2 f7       	brpl	.-8      	; 0x2762 <Port_enuSetPinMode+0x640>
    276a:	80 95       	com	r24
    276c:	84 23       	and	r24, r20
    276e:	8c 93       	st	X, r24
				SET_BIT(PORTD, LOC_u8Pin);
    2770:	a2 e3       	ldi	r26, 0x32	; 50
    2772:	b0 e0       	ldi	r27, 0x00	; 0
    2774:	e2 e3       	ldi	r30, 0x32	; 50
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	48 2f       	mov	r20, r24
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	28 2f       	mov	r18, r24
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	02 2e       	mov	r0, r18
    2788:	02 c0       	rjmp	.+4      	; 0x278e <Port_enuSetPinMode+0x66c>
    278a:	88 0f       	add	r24, r24
    278c:	99 1f       	adc	r25, r25
    278e:	0a 94       	dec	r0
    2790:	e2 f7       	brpl	.-8      	; 0x278a <Port_enuSetPinMode+0x668>
    2792:	84 2b       	or	r24, r20
    2794:	8c 93       	st	X, r24

			break;
		}
	}

	return LOC_EnumReturn;
    2796:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2798:	2f 96       	adiw	r28, 0x0f	; 15
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <TWI_Master_Init>:

#include "../includes/I2C.h"
#include <util/delay.h>


void TWI_Master_Init(u8 SelfSlaveAddress){
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
    27b2:	2f 97       	sbiw	r28, 0x0f	; 15
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	cd bf       	out	0x3d, r28	; 61
    27be:	8f 87       	std	Y+15, r24	; 0x0f

CLR_BIT(TWCR,TWEN); // TWI INIT
    27c0:	a6 e5       	ldi	r26, 0x56	; 86
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	e6 e5       	ldi	r30, 0x56	; 86
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	8b 7f       	andi	r24, 0xFB	; 251
    27cc:	8c 93       	st	X, r24

TWBR = 12; //TO GET FREQUENCY 400KHZ
    27ce:	e0 e2       	ldi	r30, 0x20	; 32
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	8c e0       	ldi	r24, 0x0C	; 12
    27d4:	80 83       	st	Z, r24

	//Prescaler for bit rate selection

		CLR_BIT(TWSR,0);
    27d6:	a1 e2       	ldi	r26, 0x21	; 33
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	e1 e2       	ldi	r30, 0x21	; 33
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	8e 7f       	andi	r24, 0xFE	; 254
    27e2:	8c 93       	st	X, r24
		CLR_BIT(TWSR,1);
    27e4:	a1 e2       	ldi	r26, 0x21	; 33
    27e6:	b0 e0       	ldi	r27, 0x00	; 0
    27e8:	e1 e2       	ldi	r30, 0x21	; 33
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	8d 7f       	andi	r24, 0xFD	; 253
    27f0:	8c 93       	st	X, r24
		//SELF SLAVE ADRESS INCASE THE MASTER IS TURNED TO SLAVE
		TWAR&=TWI_TWAR_ADD_MASK;
    27f2:	a2 e2       	ldi	r26, 0x22	; 34
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	e2 e2       	ldi	r30, 0x22	; 34
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	81 70       	andi	r24, 0x01	; 1
    27fe:	8c 93       	st	X, r24
		TWAR|=(SelfSlaveAddress<<1);
    2800:	a2 e2       	ldi	r26, 0x22	; 34
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	e2 e2       	ldi	r30, 0x22	; 34
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	28 2f       	mov	r18, r24
    280c:	8f 85       	ldd	r24, Y+15	; 0x0f
    280e:	88 2f       	mov	r24, r24
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	88 0f       	add	r24, r24
    2814:	99 1f       	adc	r25, r25
    2816:	82 2b       	or	r24, r18
    2818:	8c 93       	st	X, r24
		//ENABLE TWI
		SET_BIT(TWCR,TWEN);
    281a:	a6 e5       	ldi	r26, 0x56	; 86
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	e6 e5       	ldi	r30, 0x56	; 86
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	84 60       	ori	r24, 0x04	; 4
    2826:	8c 93       	st	X, r24
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	a0 e2       	ldi	r26, 0x20	; 32
    282e:	b1 e4       	ldi	r27, 0x41	; 65
    2830:	8b 87       	std	Y+11, r24	; 0x0b
    2832:	9c 87       	std	Y+12, r25	; 0x0c
    2834:	ad 87       	std	Y+13, r26	; 0x0d
    2836:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2838:	6b 85       	ldd	r22, Y+11	; 0x0b
    283a:	7c 85       	ldd	r23, Y+12	; 0x0c
    283c:	8d 85       	ldd	r24, Y+13	; 0x0d
    283e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	4a e7       	ldi	r20, 0x7A	; 122
    2846:	55 e4       	ldi	r21, 0x45	; 69
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	8f 83       	std	Y+7, r24	; 0x07
    2852:	98 87       	std	Y+8, r25	; 0x08
    2854:	a9 87       	std	Y+9, r26	; 0x09
    2856:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2858:	6f 81       	ldd	r22, Y+7	; 0x07
    285a:	78 85       	ldd	r23, Y+8	; 0x08
    285c:	89 85       	ldd	r24, Y+9	; 0x09
    285e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e8       	ldi	r20, 0x80	; 128
    2866:	5f e3       	ldi	r21, 0x3F	; 63
    2868:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    286c:	88 23       	and	r24, r24
    286e:	2c f4       	brge	.+10     	; 0x287a <TWI_Master_Init+0xd0>
		__ticks = 1;
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	9e 83       	std	Y+6, r25	; 0x06
    2876:	8d 83       	std	Y+5, r24	; 0x05
    2878:	3f c0       	rjmp	.+126    	; 0x28f8 <TWI_Master_Init+0x14e>
	else if (__tmp > 65535)
    287a:	6f 81       	ldd	r22, Y+7	; 0x07
    287c:	78 85       	ldd	r23, Y+8	; 0x08
    287e:	89 85       	ldd	r24, Y+9	; 0x09
    2880:	9a 85       	ldd	r25, Y+10	; 0x0a
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	3f ef       	ldi	r19, 0xFF	; 255
    2886:	4f e7       	ldi	r20, 0x7F	; 127
    2888:	57 e4       	ldi	r21, 0x47	; 71
    288a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    288e:	18 16       	cp	r1, r24
    2890:	4c f5       	brge	.+82     	; 0x28e4 <TWI_Master_Init+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2892:	6b 85       	ldd	r22, Y+11	; 0x0b
    2894:	7c 85       	ldd	r23, Y+12	; 0x0c
    2896:	8d 85       	ldd	r24, Y+13	; 0x0d
    2898:	9e 85       	ldd	r25, Y+14	; 0x0e
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e2       	ldi	r20, 0x20	; 32
    28a0:	51 e4       	ldi	r21, 0x41	; 65
    28a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	bc 01       	movw	r22, r24
    28ac:	cd 01       	movw	r24, r26
    28ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	9e 83       	std	Y+6, r25	; 0x06
    28b8:	8d 83       	std	Y+5, r24	; 0x05
    28ba:	0f c0       	rjmp	.+30     	; 0x28da <TWI_Master_Init+0x130>
    28bc:	80 e9       	ldi	r24, 0x90	; 144
    28be:	91 e0       	ldi	r25, 0x01	; 1
    28c0:	9c 83       	std	Y+4, r25	; 0x04
    28c2:	8b 83       	std	Y+3, r24	; 0x03
    28c4:	8b 81       	ldd	r24, Y+3	; 0x03
    28c6:	9c 81       	ldd	r25, Y+4	; 0x04
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <TWI_Master_Init+0x11e>
    28cc:	9c 83       	std	Y+4, r25	; 0x04
    28ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d0:	8d 81       	ldd	r24, Y+5	; 0x05
    28d2:	9e 81       	ldd	r25, Y+6	; 0x06
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	9e 83       	std	Y+6, r25	; 0x06
    28d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28da:	8d 81       	ldd	r24, Y+5	; 0x05
    28dc:	9e 81       	ldd	r25, Y+6	; 0x06
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	69 f7       	brne	.-38     	; 0x28bc <TWI_Master_Init+0x112>
    28e2:	14 c0       	rjmp	.+40     	; 0x290c <TWI_Master_Init+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e4:	6f 81       	ldd	r22, Y+7	; 0x07
    28e6:	78 85       	ldd	r23, Y+8	; 0x08
    28e8:	89 85       	ldd	r24, Y+9	; 0x09
    28ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	9e 83       	std	Y+6, r25	; 0x06
    28f6:	8d 83       	std	Y+5, r24	; 0x05
    28f8:	8d 81       	ldd	r24, Y+5	; 0x05
    28fa:	9e 81       	ldd	r25, Y+6	; 0x06
    28fc:	9a 83       	std	Y+2, r25	; 0x02
    28fe:	89 83       	std	Y+1, r24	; 0x01
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	9a 81       	ldd	r25, Y+2	; 0x02
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <TWI_Master_Init+0x15a>
    2908:	9a 83       	std	Y+2, r25	; 0x02
    290a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);

}
    290c:	2f 96       	adiw	r28, 0x0f	; 15
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	08 95       	ret

0000291e <TWI_Slave_Init>:
void TWI_Slave_Init(u8 SlaveAddress){
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	cd b7       	in	r28, 0x3d	; 61
    2924:	de b7       	in	r29, 0x3e	; 62
    2926:	2f 97       	sbiw	r28, 0x0f	; 15
    2928:	0f b6       	in	r0, 0x3f	; 63
    292a:	f8 94       	cli
    292c:	de bf       	out	0x3e, r29	; 62
    292e:	0f be       	out	0x3f, r0	; 63
    2930:	cd bf       	out	0x3d, r28	; 61
    2932:	8f 87       	std	Y+15, r24	; 0x0f
			CLR_BIT(TWCR,TWEN);
    2934:	a6 e5       	ldi	r26, 0x56	; 86
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	e6 e5       	ldi	r30, 0x56	; 86
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	8b 7f       	andi	r24, 0xFB	; 251
    2940:	8c 93       	st	X, r24
			SET_BIT(TWCR,TWEA);
    2942:	a6 e5       	ldi	r26, 0x56	; 86
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	e6 e5       	ldi	r30, 0x56	; 86
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	80 64       	ori	r24, 0x40	; 64
    294e:	8c 93       	st	X, r24
			TWAR&=TWI_TWAR_ADD_MASK;
    2950:	a2 e2       	ldi	r26, 0x22	; 34
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	e2 e2       	ldi	r30, 0x22	; 34
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	81 70       	andi	r24, 0x01	; 1
    295c:	8c 93       	st	X, r24
			TWAR|=(SlaveAddress<<1);
    295e:	a2 e2       	ldi	r26, 0x22	; 34
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	e2 e2       	ldi	r30, 0x22	; 34
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	28 2f       	mov	r18, r24
    296a:	8f 85       	ldd	r24, Y+15	; 0x0f
    296c:	88 2f       	mov	r24, r24
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	88 0f       	add	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	82 2b       	or	r24, r18
    2976:	8c 93       	st	X, r24
			SET_BIT(TWCR,2);
    2978:	a6 e5       	ldi	r26, 0x56	; 86
    297a:	b0 e0       	ldi	r27, 0x00	; 0
    297c:	e6 e5       	ldi	r30, 0x56	; 86
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	80 81       	ld	r24, Z
    2982:	84 60       	ori	r24, 0x04	; 4
    2984:	8c 93       	st	X, r24
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	a0 e2       	ldi	r26, 0x20	; 32
    298c:	b1 e4       	ldi	r27, 0x41	; 65
    298e:	8b 87       	std	Y+11, r24	; 0x0b
    2990:	9c 87       	std	Y+12, r25	; 0x0c
    2992:	ad 87       	std	Y+13, r26	; 0x0d
    2994:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2996:	6b 85       	ldd	r22, Y+11	; 0x0b
    2998:	7c 85       	ldd	r23, Y+12	; 0x0c
    299a:	8d 85       	ldd	r24, Y+13	; 0x0d
    299c:	9e 85       	ldd	r25, Y+14	; 0x0e
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	4a e7       	ldi	r20, 0x7A	; 122
    29a4:	55 e4       	ldi	r21, 0x45	; 69
    29a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	8f 83       	std	Y+7, r24	; 0x07
    29b0:	98 87       	std	Y+8, r25	; 0x08
    29b2:	a9 87       	std	Y+9, r26	; 0x09
    29b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29b6:	6f 81       	ldd	r22, Y+7	; 0x07
    29b8:	78 85       	ldd	r23, Y+8	; 0x08
    29ba:	89 85       	ldd	r24, Y+9	; 0x09
    29bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	40 e8       	ldi	r20, 0x80	; 128
    29c4:	5f e3       	ldi	r21, 0x3F	; 63
    29c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ca:	88 23       	and	r24, r24
    29cc:	2c f4       	brge	.+10     	; 0x29d8 <TWI_Slave_Init+0xba>
		__ticks = 1;
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	9e 83       	std	Y+6, r25	; 0x06
    29d4:	8d 83       	std	Y+5, r24	; 0x05
    29d6:	3f c0       	rjmp	.+126    	; 0x2a56 <TWI_Slave_Init+0x138>
	else if (__tmp > 65535)
    29d8:	6f 81       	ldd	r22, Y+7	; 0x07
    29da:	78 85       	ldd	r23, Y+8	; 0x08
    29dc:	89 85       	ldd	r24, Y+9	; 0x09
    29de:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	3f ef       	ldi	r19, 0xFF	; 255
    29e4:	4f e7       	ldi	r20, 0x7F	; 127
    29e6:	57 e4       	ldi	r21, 0x47	; 71
    29e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29ec:	18 16       	cp	r1, r24
    29ee:	4c f5       	brge	.+82     	; 0x2a42 <TWI_Slave_Init+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	40 e2       	ldi	r20, 0x20	; 32
    29fe:	51 e4       	ldi	r21, 0x41	; 65
    2a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	bc 01       	movw	r22, r24
    2a0a:	cd 01       	movw	r24, r26
    2a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	9e 83       	std	Y+6, r25	; 0x06
    2a16:	8d 83       	std	Y+5, r24	; 0x05
    2a18:	0f c0       	rjmp	.+30     	; 0x2a38 <TWI_Slave_Init+0x11a>
    2a1a:	80 e9       	ldi	r24, 0x90	; 144
    2a1c:	91 e0       	ldi	r25, 0x01	; 1
    2a1e:	9c 83       	std	Y+4, r25	; 0x04
    2a20:	8b 83       	std	Y+3, r24	; 0x03
    2a22:	8b 81       	ldd	r24, Y+3	; 0x03
    2a24:	9c 81       	ldd	r25, Y+4	; 0x04
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	f1 f7       	brne	.-4      	; 0x2a26 <TWI_Slave_Init+0x108>
    2a2a:	9c 83       	std	Y+4, r25	; 0x04
    2a2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a30:	9e 81       	ldd	r25, Y+6	; 0x06
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	9e 83       	std	Y+6, r25	; 0x06
    2a36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a38:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3c:	00 97       	sbiw	r24, 0x00	; 0
    2a3e:	69 f7       	brne	.-38     	; 0x2a1a <TWI_Slave_Init+0xfc>
    2a40:	14 c0       	rjmp	.+40     	; 0x2a6a <TWI_Slave_Init+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a42:	6f 81       	ldd	r22, Y+7	; 0x07
    2a44:	78 85       	ldd	r23, Y+8	; 0x08
    2a46:	89 85       	ldd	r24, Y+9	; 0x09
    2a48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4e:	dc 01       	movw	r26, r24
    2a50:	cb 01       	movw	r24, r22
    2a52:	9e 83       	std	Y+6, r25	; 0x06
    2a54:	8d 83       	std	Y+5, r24	; 0x05
    2a56:	8d 81       	ldd	r24, Y+5	; 0x05
    2a58:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5a:	9a 83       	std	Y+2, r25	; 0x02
    2a5c:	89 83       	std	Y+1, r24	; 0x01
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	9a 81       	ldd	r25, Y+2	; 0x02
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	f1 f7       	brne	.-4      	; 0x2a62 <TWI_Slave_Init+0x144>
    2a66:	9a 83       	std	Y+2, r25	; 0x02
    2a68:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
}
    2a6a:	2f 96       	adiw	r28, 0x0f	; 15
    2a6c:	0f b6       	in	r0, 0x3f	; 63
    2a6e:	f8 94       	cli
    2a70:	de bf       	out	0x3e, r29	; 62
    2a72:	0f be       	out	0x3f, r0	; 63
    2a74:	cd bf       	out	0x3d, r28	; 61
    2a76:	cf 91       	pop	r28
    2a78:	df 91       	pop	r29
    2a7a:	08 95       	ret

00002a7c <TWI_SendData>:


void TWI_SendData(u8 SlaveAdress ,u8 Transmitted_data){
    2a7c:	df 93       	push	r29
    2a7e:	cf 93       	push	r28
    2a80:	00 d0       	rcall	.+0      	; 0x2a82 <TWI_SendData+0x6>
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
    2a86:	89 83       	std	Y+1, r24	; 0x01
    2a88:	6a 83       	std	Y+2, r22	; 0x02
	// Send START condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    2a8a:	e6 e5       	ldi	r30, 0x56	; 86
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	84 ea       	ldi	r24, 0xA4	; 164
    2a90:	80 83       	st	Z, r24

	/*Wait for TWINT Flag set. This indicates
	 *that the START condition has been
	 *transmitted
	 */
	while (!(TWCR & (1<<TWINT)));
    2a92:	e6 e5       	ldi	r30, 0x56	; 86
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 81       	ld	r24, Z
    2a98:	88 23       	and	r24, r24
    2a9a:	dc f7       	brge	.-10     	; 0x2a92 <TWI_SendData+0x16>

	/*Load SLA_W into TWDR Register. Clear
	TWINT bit in TWCR to start transmission
	of address
	*/
	TWDR = (SlaveAdress<<1);
    2a9c:	e3 e2       	ldi	r30, 0x23	; 35
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
    2aa2:	88 0f       	add	r24, r24
    2aa4:	80 83       	st	Z, r24

	TWCR = (1<<TWINT) | (1<<TWEN);
    2aa6:	e6 e5       	ldi	r30, 0x56	; 86
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	84 e8       	ldi	r24, 0x84	; 132
    2aac:	80 83       	st	Z, r24

	/*Wait for TWINT Flag set. This indicates
	that the SLA+W has been transmitted,
	and ACK/NACK has been received.
	 */
	while (!(TWCR & (1<<TWINT)));
    2aae:	e6 e5       	ldi	r30, 0x56	; 86
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	88 23       	and	r24, r24
    2ab6:	dc f7       	brge	.-10     	; 0x2aae <TWI_SendData+0x32>
	TWDR =Transmitted_data;
    2ab8:	e3 e2       	ldi	r30, 0x23	; 35
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	8a 81       	ldd	r24, Y+2	; 0x02
    2abe:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2ac0:	e6 e5       	ldi	r30, 0x56	; 86
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	84 e8       	ldi	r24, 0x84	; 132
    2ac6:	80 83       	st	Z, r24


	while (!(TWCR & (1<<TWINT)));
    2ac8:	e6 e5       	ldi	r30, 0x56	; 86
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	80 81       	ld	r24, Z
    2ace:	88 23       	and	r24, r24
    2ad0:	dc f7       	brge	.-10     	; 0x2ac8 <TWI_SendData+0x4c>

	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    2ad2:	e6 e5       	ldi	r30, 0x56	; 86
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	84 e9       	ldi	r24, 0x94	; 148
    2ad8:	80 83       	st	Z, r24

}
    2ada:	0f 90       	pop	r0
    2adc:	0f 90       	pop	r0
    2ade:	cf 91       	pop	r28
    2ae0:	df 91       	pop	r29
    2ae2:	08 95       	ret

00002ae4 <TWI_ReadData>:


void TWI_ReadData(u8 SlaveAdress ,pu8 Recieved_data){
    2ae4:	df 93       	push	r29
    2ae6:	cf 93       	push	r28
    2ae8:	00 d0       	rcall	.+0      	; 0x2aea <TWI_ReadData+0x6>
    2aea:	0f 92       	push	r0
    2aec:	cd b7       	in	r28, 0x3d	; 61
    2aee:	de b7       	in	r29, 0x3e	; 62
    2af0:	89 83       	std	Y+1, r24	; 0x01
    2af2:	7b 83       	std	Y+3, r23	; 0x03
    2af4:	6a 83       	std	Y+2, r22	; 0x02
	// Send START condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    2af6:	e6 e5       	ldi	r30, 0x56	; 86
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	84 ea       	ldi	r24, 0xA4	; 164
    2afc:	80 83       	st	Z, r24

	/*Wait for TWINT Flag set. This indicates
	 *that the START condition has been
	 *transmitted
	 */
	while (!(TWCR & (1<<TWINT)));
    2afe:	e6 e5       	ldi	r30, 0x56	; 86
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	80 81       	ld	r24, Z
    2b04:	88 23       	and	r24, r24
    2b06:	dc f7       	brge	.-10     	; 0x2afe <TWI_ReadData+0x1a>
	*/
	/*Load SLA_R into TWDR Register. Clear
	TWINT bit in TWCR to start transmission
	of address
	*/
	TWDR = ((SlaveAdress<<1)|0x01);
    2b08:	e3 e2       	ldi	r30, 0x23	; 35
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	88 2f       	mov	r24, r24
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	88 0f       	add	r24, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	81 60       	ori	r24, 0x01	; 1
    2b18:	80 83       	st	Z, r24

	TWCR = (1<<TWINT) | (1<<TWEN);
    2b1a:	e6 e5       	ldi	r30, 0x56	; 86
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	84 e8       	ldi	r24, 0x84	; 132
    2b20:	80 83       	st	Z, r24

	/*Wait for TWINT Flag set. This indicates
	that the SLA+W has been transmitted,
	and ACK/NACK has been received.
	 */
	while (!(TWCR & (1<<TWINT)));
    2b22:	e6 e5       	ldi	r30, 0x56	; 86
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	80 81       	ld	r24, Z
    2b28:	88 23       	and	r24, r24
    2b2a:	dc f7       	brge	.-10     	; 0x2b22 <TWI_ReadData+0x3e>

	*Recieved_data = TWDR ;
    2b2c:	e3 e2       	ldi	r30, 0x23	; 35
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	ea 81       	ldd	r30, Y+2	; 0x02
    2b34:	fb 81       	ldd	r31, Y+3	; 0x03
    2b36:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b38:	e6 e5       	ldi	r30, 0x56	; 86
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	84 e8       	ldi	r24, 0x84	; 132
    2b3e:	80 83       	st	Z, r24


	while (!(TWCR & (1<<TWINT)));
    2b40:	e6 e5       	ldi	r30, 0x56	; 86
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	80 81       	ld	r24, Z
    2b46:	88 23       	and	r24, r24
    2b48:	dc f7       	brge	.-10     	; 0x2b40 <TWI_ReadData+0x5c>

	if ((TWSR & 0xF8) != TWI_STATUS_CODE_DATA_SENT_ACK)
    2b4a:	e1 e2       	ldi	r30, 0x21	; 33
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	88 2f       	mov	r24, r24
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	88 7f       	andi	r24, 0xF8	; 248
    2b56:	90 70       	andi	r25, 0x00	; 0
    2b58:	88 32       	cpi	r24, 0x28	; 40
    2b5a:	91 05       	cpc	r25, r1
    2b5c:	21 f0       	breq	.+8      	; 0x2b66 <TWI_ReadData+0x82>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    2b5e:	e6 e5       	ldi	r30, 0x56	; 86
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	84 e9       	ldi	r24, 0x94	; 148
    2b64:	80 83       	st	Z, r24

}
    2b66:	0f 90       	pop	r0
    2b68:	0f 90       	pop	r0
    2b6a:	0f 90       	pop	r0
    2b6c:	cf 91       	pop	r28
    2b6e:	df 91       	pop	r29
    2b70:	08 95       	ret

00002b72 <TWI_SendStart>:

void TWI_SendStart(){
    2b72:	df 93       	push	r29
    2b74:	cf 93       	push	r28
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	2e 97       	sbiw	r28, 0x0e	; 14
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	f8 94       	cli
    2b80:	de bf       	out	0x3e, r29	; 62
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	cd bf       	out	0x3d, r28	; 61
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    2b86:	e6 e5       	ldi	r30, 0x56	; 86
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	84 ea       	ldi	r24, 0xA4	; 164
    2b8c:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));
    2b8e:	e6 e5       	ldi	r30, 0x56	; 86
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	88 23       	and	r24, r24
    2b96:	dc f7       	brge	.-10     	; 0x2b8e <TWI_SendStart+0x1c>
    2b98:	80 e0       	ldi	r24, 0x00	; 0
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	a0 e2       	ldi	r26, 0x20	; 32
    2b9e:	b1 e4       	ldi	r27, 0x41	; 65
    2ba0:	8b 87       	std	Y+11, r24	; 0x0b
    2ba2:	9c 87       	std	Y+12, r25	; 0x0c
    2ba4:	ad 87       	std	Y+13, r26	; 0x0d
    2ba6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2baa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	4a e7       	ldi	r20, 0x7A	; 122
    2bb6:	55 e4       	ldi	r21, 0x45	; 69
    2bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	8f 83       	std	Y+7, r24	; 0x07
    2bc2:	98 87       	std	Y+8, r25	; 0x08
    2bc4:	a9 87       	std	Y+9, r26	; 0x09
    2bc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bca:	78 85       	ldd	r23, Y+8	; 0x08
    2bcc:	89 85       	ldd	r24, Y+9	; 0x09
    2bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	40 e8       	ldi	r20, 0x80	; 128
    2bd6:	5f e3       	ldi	r21, 0x3F	; 63
    2bd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bdc:	88 23       	and	r24, r24
    2bde:	2c f4       	brge	.+10     	; 0x2bea <TWI_SendStart+0x78>
		__ticks = 1;
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	9e 83       	std	Y+6, r25	; 0x06
    2be6:	8d 83       	std	Y+5, r24	; 0x05
    2be8:	3f c0       	rjmp	.+126    	; 0x2c68 <TWI_SendStart+0xf6>
	else if (__tmp > 65535)
    2bea:	6f 81       	ldd	r22, Y+7	; 0x07
    2bec:	78 85       	ldd	r23, Y+8	; 0x08
    2bee:	89 85       	ldd	r24, Y+9	; 0x09
    2bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	3f ef       	ldi	r19, 0xFF	; 255
    2bf6:	4f e7       	ldi	r20, 0x7F	; 127
    2bf8:	57 e4       	ldi	r21, 0x47	; 71
    2bfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bfe:	18 16       	cp	r1, r24
    2c00:	4c f5       	brge	.+82     	; 0x2c54 <TWI_SendStart+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	40 e2       	ldi	r20, 0x20	; 32
    2c10:	51 e4       	ldi	r21, 0x41	; 65
    2c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	bc 01       	movw	r22, r24
    2c1c:	cd 01       	movw	r24, r26
    2c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	9e 83       	std	Y+6, r25	; 0x06
    2c28:	8d 83       	std	Y+5, r24	; 0x05
    2c2a:	0f c0       	rjmp	.+30     	; 0x2c4a <TWI_SendStart+0xd8>
    2c2c:	80 e9       	ldi	r24, 0x90	; 144
    2c2e:	91 e0       	ldi	r25, 0x01	; 1
    2c30:	9c 83       	std	Y+4, r25	; 0x04
    2c32:	8b 83       	std	Y+3, r24	; 0x03
    2c34:	8b 81       	ldd	r24, Y+3	; 0x03
    2c36:	9c 81       	ldd	r25, Y+4	; 0x04
    2c38:	01 97       	sbiw	r24, 0x01	; 1
    2c3a:	f1 f7       	brne	.-4      	; 0x2c38 <TWI_SendStart+0xc6>
    2c3c:	9c 83       	std	Y+4, r25	; 0x04
    2c3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c40:	8d 81       	ldd	r24, Y+5	; 0x05
    2c42:	9e 81       	ldd	r25, Y+6	; 0x06
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	9e 83       	std	Y+6, r25	; 0x06
    2c48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4e:	00 97       	sbiw	r24, 0x00	; 0
    2c50:	69 f7       	brne	.-38     	; 0x2c2c <TWI_SendStart+0xba>
    2c52:	14 c0       	rjmp	.+40     	; 0x2c7c <TWI_SendStart+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c54:	6f 81       	ldd	r22, Y+7	; 0x07
    2c56:	78 85       	ldd	r23, Y+8	; 0x08
    2c58:	89 85       	ldd	r24, Y+9	; 0x09
    2c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	9e 83       	std	Y+6, r25	; 0x06
    2c66:	8d 83       	std	Y+5, r24	; 0x05
    2c68:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6c:	9a 83       	std	Y+2, r25	; 0x02
    2c6e:	89 83       	std	Y+1, r24	; 0x01
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	9a 81       	ldd	r25, Y+2	; 0x02
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	f1 f7       	brne	.-4      	; 0x2c74 <TWI_SendStart+0x102>
    2c78:	9a 83       	std	Y+2, r25	; 0x02
    2c7a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2c7c:	2e 96       	adiw	r28, 0x0e	; 14
    2c7e:	0f b6       	in	r0, 0x3f	; 63
    2c80:	f8 94       	cli
    2c82:	de bf       	out	0x3e, r29	; 62
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	cd bf       	out	0x3d, r28	; 61
    2c88:	cf 91       	pop	r28
    2c8a:	df 91       	pop	r29
    2c8c:	08 95       	ret

00002c8e <TWI_SendRepeatedStart>:
void TWI_SendRepeatedStart(){
    2c8e:	df 93       	push	r29
    2c90:	cf 93       	push	r28
    2c92:	cd b7       	in	r28, 0x3d	; 61
    2c94:	de b7       	in	r29, 0x3e	; 62

	TWI_SendStart();
    2c96:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <TWI_SendStart>
}
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <TWI_SendStopCondition>:

void TWI_SendStopCondition(){
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62
    2ca8:	2e 97       	sbiw	r28, 0x0e	; 14
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	f8 94       	cli
    2cae:	de bf       	out	0x3e, r29	; 62
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	cd bf       	out	0x3d, r28	; 61

	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    2cb4:	e6 e5       	ldi	r30, 0x56	; 86
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	84 e9       	ldi	r24, 0x94	; 148
    2cba:	80 83       	st	Z, r24
			//WAIT ON FLAG TO BE HIGH//
			while(GET_BIT(TWCR,7)==0);
    2cbc:	e6 e5       	ldi	r30, 0x56	; 86
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	88 23       	and	r24, r24
    2cc4:	dc f7       	brge	.-10     	; 0x2cbc <TWI_SendStopCondition+0x1c>
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	a0 e2       	ldi	r26, 0x20	; 32
    2ccc:	b1 e4       	ldi	r27, 0x41	; 65
    2cce:	8b 87       	std	Y+11, r24	; 0x0b
    2cd0:	9c 87       	std	Y+12, r25	; 0x0c
    2cd2:	ad 87       	std	Y+13, r26	; 0x0d
    2cd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	4a e7       	ldi	r20, 0x7A	; 122
    2ce4:	55 e4       	ldi	r21, 0x45	; 69
    2ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	8f 83       	std	Y+7, r24	; 0x07
    2cf0:	98 87       	std	Y+8, r25	; 0x08
    2cf2:	a9 87       	std	Y+9, r26	; 0x09
    2cf4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf8:	78 85       	ldd	r23, Y+8	; 0x08
    2cfa:	89 85       	ldd	r24, Y+9	; 0x09
    2cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	40 e8       	ldi	r20, 0x80	; 128
    2d04:	5f e3       	ldi	r21, 0x3F	; 63
    2d06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d0a:	88 23       	and	r24, r24
    2d0c:	2c f4       	brge	.+10     	; 0x2d18 <TWI_SendStopCondition+0x78>
		__ticks = 1;
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	9e 83       	std	Y+6, r25	; 0x06
    2d14:	8d 83       	std	Y+5, r24	; 0x05
    2d16:	3f c0       	rjmp	.+126    	; 0x2d96 <TWI_SendStopCondition+0xf6>
	else if (__tmp > 65535)
    2d18:	6f 81       	ldd	r22, Y+7	; 0x07
    2d1a:	78 85       	ldd	r23, Y+8	; 0x08
    2d1c:	89 85       	ldd	r24, Y+9	; 0x09
    2d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	3f ef       	ldi	r19, 0xFF	; 255
    2d24:	4f e7       	ldi	r20, 0x7F	; 127
    2d26:	57 e4       	ldi	r21, 0x47	; 71
    2d28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d2c:	18 16       	cp	r1, r24
    2d2e:	4c f5       	brge	.+82     	; 0x2d82 <TWI_SendStopCondition+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	40 e2       	ldi	r20, 0x20	; 32
    2d3e:	51 e4       	ldi	r21, 0x41	; 65
    2d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	bc 01       	movw	r22, r24
    2d4a:	cd 01       	movw	r24, r26
    2d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	9e 83       	std	Y+6, r25	; 0x06
    2d56:	8d 83       	std	Y+5, r24	; 0x05
    2d58:	0f c0       	rjmp	.+30     	; 0x2d78 <TWI_SendStopCondition+0xd8>
    2d5a:	80 e9       	ldi	r24, 0x90	; 144
    2d5c:	91 e0       	ldi	r25, 0x01	; 1
    2d5e:	9c 83       	std	Y+4, r25	; 0x04
    2d60:	8b 83       	std	Y+3, r24	; 0x03
    2d62:	8b 81       	ldd	r24, Y+3	; 0x03
    2d64:	9c 81       	ldd	r25, Y+4	; 0x04
    2d66:	01 97       	sbiw	r24, 0x01	; 1
    2d68:	f1 f7       	brne	.-4      	; 0x2d66 <TWI_SendStopCondition+0xc6>
    2d6a:	9c 83       	std	Y+4, r25	; 0x04
    2d6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d70:	9e 81       	ldd	r25, Y+6	; 0x06
    2d72:	01 97       	sbiw	r24, 0x01	; 1
    2d74:	9e 83       	std	Y+6, r25	; 0x06
    2d76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d78:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7c:	00 97       	sbiw	r24, 0x00	; 0
    2d7e:	69 f7       	brne	.-38     	; 0x2d5a <TWI_SendStopCondition+0xba>
    2d80:	14 c0       	rjmp	.+40     	; 0x2daa <TWI_SendStopCondition+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d82:	6f 81       	ldd	r22, Y+7	; 0x07
    2d84:	78 85       	ldd	r23, Y+8	; 0x08
    2d86:	89 85       	ldd	r24, Y+9	; 0x09
    2d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	9e 83       	std	Y+6, r25	; 0x06
    2d94:	8d 83       	std	Y+5, r24	; 0x05
    2d96:	8d 81       	ldd	r24, Y+5	; 0x05
    2d98:	9e 81       	ldd	r25, Y+6	; 0x06
    2d9a:	9a 83       	std	Y+2, r25	; 0x02
    2d9c:	89 83       	std	Y+1, r24	; 0x01
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
    2da0:	9a 81       	ldd	r25, Y+2	; 0x02
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	f1 f7       	brne	.-4      	; 0x2da2 <TWI_SendStopCondition+0x102>
    2da6:	9a 83       	std	Y+2, r25	; 0x02
    2da8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);

}
    2daa:	2e 96       	adiw	r28, 0x0e	; 14
    2dac:	0f b6       	in	r0, 0x3f	; 63
    2dae:	f8 94       	cli
    2db0:	de bf       	out	0x3e, r29	; 62
    2db2:	0f be       	out	0x3f, r0	; 63
    2db4:	cd bf       	out	0x3d, r28	; 61
    2db6:	cf 91       	pop	r28
    2db8:	df 91       	pop	r29
    2dba:	08 95       	ret

00002dbc <TWI_SendAdressWithWrite>:
void TWI_SendAdressWithWrite(u8 SlaveAdress){
    2dbc:	df 93       	push	r29
    2dbe:	cf 93       	push	r28
    2dc0:	cd b7       	in	r28, 0x3d	; 61
    2dc2:	de b7       	in	r29, 0x3e	; 62
    2dc4:	2f 97       	sbiw	r28, 0x0f	; 15
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	f8 94       	cli
    2dca:	de bf       	out	0x3e, r29	; 62
    2dcc:	0f be       	out	0x3f, r0	; 63
    2dce:	cd bf       	out	0x3d, r28	; 61
    2dd0:	8f 87       	std	Y+15, r24	; 0x0f
	/*Load SLA_W into TWDR Register. Clear
		TWINT bit in TWCR to start transmission
		of address
		*/
		TWDR = (SlaveAdress<<1);
    2dd2:	e3 e2       	ldi	r30, 0x23	; 35
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dd8:	88 0f       	add	r24, r24
    2dda:	80 83       	st	Z, r24

		TWCR = (1<<TWINT) | (1<<TWEN);
    2ddc:	e6 e5       	ldi	r30, 0x56	; 86
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	84 e8       	ldi	r24, 0x84	; 132
    2de2:	80 83       	st	Z, r24

		/*Wait for TWINT Flag set. This indicates
		that the SLA+W has been transmitted,
		and ACK/NACK has been received.
		 */
		while (!(TWCR & (1<<TWINT)));
    2de4:	e6 e5       	ldi	r30, 0x56	; 86
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	80 81       	ld	r24, Z
    2dea:	88 23       	and	r24, r24
    2dec:	dc f7       	brge	.-10     	; 0x2de4 <TWI_SendAdressWithWrite+0x28>
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	a0 e2       	ldi	r26, 0x20	; 32
    2df4:	b1 e4       	ldi	r27, 0x41	; 65
    2df6:	8b 87       	std	Y+11, r24	; 0x0b
    2df8:	9c 87       	std	Y+12, r25	; 0x0c
    2dfa:	ad 87       	std	Y+13, r26	; 0x0d
    2dfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	4a e7       	ldi	r20, 0x7A	; 122
    2e0c:	55 e4       	ldi	r21, 0x45	; 69
    2e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	8f 83       	std	Y+7, r24	; 0x07
    2e18:	98 87       	std	Y+8, r25	; 0x08
    2e1a:	a9 87       	std	Y+9, r26	; 0x09
    2e1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e20:	78 85       	ldd	r23, Y+8	; 0x08
    2e22:	89 85       	ldd	r24, Y+9	; 0x09
    2e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	40 e8       	ldi	r20, 0x80	; 128
    2e2c:	5f e3       	ldi	r21, 0x3F	; 63
    2e2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e32:	88 23       	and	r24, r24
    2e34:	2c f4       	brge	.+10     	; 0x2e40 <TWI_SendAdressWithWrite+0x84>
		__ticks = 1;
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	9e 83       	std	Y+6, r25	; 0x06
    2e3c:	8d 83       	std	Y+5, r24	; 0x05
    2e3e:	3f c0       	rjmp	.+126    	; 0x2ebe <TWI_SendAdressWithWrite+0x102>
	else if (__tmp > 65535)
    2e40:	6f 81       	ldd	r22, Y+7	; 0x07
    2e42:	78 85       	ldd	r23, Y+8	; 0x08
    2e44:	89 85       	ldd	r24, Y+9	; 0x09
    2e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	3f ef       	ldi	r19, 0xFF	; 255
    2e4c:	4f e7       	ldi	r20, 0x7F	; 127
    2e4e:	57 e4       	ldi	r21, 0x47	; 71
    2e50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e54:	18 16       	cp	r1, r24
    2e56:	4c f5       	brge	.+82     	; 0x2eaa <TWI_SendAdressWithWrite+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e2       	ldi	r20, 0x20	; 32
    2e66:	51 e4       	ldi	r21, 0x41	; 65
    2e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	bc 01       	movw	r22, r24
    2e72:	cd 01       	movw	r24, r26
    2e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	9e 83       	std	Y+6, r25	; 0x06
    2e7e:	8d 83       	std	Y+5, r24	; 0x05
    2e80:	0f c0       	rjmp	.+30     	; 0x2ea0 <TWI_SendAdressWithWrite+0xe4>
    2e82:	80 e9       	ldi	r24, 0x90	; 144
    2e84:	91 e0       	ldi	r25, 0x01	; 1
    2e86:	9c 83       	std	Y+4, r25	; 0x04
    2e88:	8b 83       	std	Y+3, r24	; 0x03
    2e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	f1 f7       	brne	.-4      	; 0x2e8e <TWI_SendAdressWithWrite+0xd2>
    2e92:	9c 83       	std	Y+4, r25	; 0x04
    2e94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e96:	8d 81       	ldd	r24, Y+5	; 0x05
    2e98:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	9e 83       	std	Y+6, r25	; 0x06
    2e9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea4:	00 97       	sbiw	r24, 0x00	; 0
    2ea6:	69 f7       	brne	.-38     	; 0x2e82 <TWI_SendAdressWithWrite+0xc6>
    2ea8:	14 c0       	rjmp	.+40     	; 0x2ed2 <TWI_SendAdressWithWrite+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2eac:	78 85       	ldd	r23, Y+8	; 0x08
    2eae:	89 85       	ldd	r24, Y+9	; 0x09
    2eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	9e 83       	std	Y+6, r25	; 0x06
    2ebc:	8d 83       	std	Y+5, r24	; 0x05
    2ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec2:	9a 83       	std	Y+2, r25	; 0x02
    2ec4:	89 83       	std	Y+1, r24	; 0x01
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	f1 f7       	brne	.-4      	; 0x2eca <TWI_SendAdressWithWrite+0x10e>
    2ece:	9a 83       	std	Y+2, r25	; 0x02
    2ed0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);

}
    2ed2:	2f 96       	adiw	r28, 0x0f	; 15
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	f8 94       	cli
    2ed8:	de bf       	out	0x3e, r29	; 62
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	cd bf       	out	0x3d, r28	; 61
    2ede:	cf 91       	pop	r28
    2ee0:	df 91       	pop	r29
    2ee2:	08 95       	ret

00002ee4 <TWI_SendAdressWithRead>:

void TWI_SendAdressWithRead(u8 SlaveAdress){
    2ee4:	df 93       	push	r29
    2ee6:	cf 93       	push	r28
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
    2eec:	2f 97       	sbiw	r28, 0x0f	; 15
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	8f 87       	std	Y+15, r24	; 0x0f
	/*Load SLA_R into TWDR Register. Clear
	TWINT bit in TWCR to start transmission
	of address
	*/
	TWDR = ((SlaveAdress<<1)|0x01);
    2efa:	e3 e2       	ldi	r30, 0x23	; 35
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f00:	88 2f       	mov	r24, r24
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	88 0f       	add	r24, r24
    2f06:	99 1f       	adc	r25, r25
    2f08:	81 60       	ori	r24, 0x01	; 1
    2f0a:	80 83       	st	Z, r24

	TWCR = (1<<TWINT) | (1<<TWEN);
    2f0c:	e6 e5       	ldi	r30, 0x56	; 86
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	84 e8       	ldi	r24, 0x84	; 132
    2f12:	80 83       	st	Z, r24

	/*Wait for TWINT Flag set. This indicates
	that the SLA+W has been transmitted,
	and ACK/NACK has been received.
	 */
	while (!(TWCR & (1<<TWINT)));
    2f14:	e6 e5       	ldi	r30, 0x56	; 86
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	88 23       	and	r24, r24
    2f1c:	dc f7       	brge	.-10     	; 0x2f14 <TWI_SendAdressWithRead+0x30>
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	a0 e2       	ldi	r26, 0x20	; 32
    2f24:	b1 e4       	ldi	r27, 0x41	; 65
    2f26:	8b 87       	std	Y+11, r24	; 0x0b
    2f28:	9c 87       	std	Y+12, r25	; 0x0c
    2f2a:	ad 87       	std	Y+13, r26	; 0x0d
    2f2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	4a e7       	ldi	r20, 0x7A	; 122
    2f3c:	55 e4       	ldi	r21, 0x45	; 69
    2f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	8f 83       	std	Y+7, r24	; 0x07
    2f48:	98 87       	std	Y+8, r25	; 0x08
    2f4a:	a9 87       	std	Y+9, r26	; 0x09
    2f4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f50:	78 85       	ldd	r23, Y+8	; 0x08
    2f52:	89 85       	ldd	r24, Y+9	; 0x09
    2f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e8       	ldi	r20, 0x80	; 128
    2f5c:	5f e3       	ldi	r21, 0x3F	; 63
    2f5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f62:	88 23       	and	r24, r24
    2f64:	2c f4       	brge	.+10     	; 0x2f70 <TWI_SendAdressWithRead+0x8c>
		__ticks = 1;
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	9e 83       	std	Y+6, r25	; 0x06
    2f6c:	8d 83       	std	Y+5, r24	; 0x05
    2f6e:	3f c0       	rjmp	.+126    	; 0x2fee <TWI_SendAdressWithRead+0x10a>
	else if (__tmp > 65535)
    2f70:	6f 81       	ldd	r22, Y+7	; 0x07
    2f72:	78 85       	ldd	r23, Y+8	; 0x08
    2f74:	89 85       	ldd	r24, Y+9	; 0x09
    2f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	3f ef       	ldi	r19, 0xFF	; 255
    2f7c:	4f e7       	ldi	r20, 0x7F	; 127
    2f7e:	57 e4       	ldi	r21, 0x47	; 71
    2f80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f84:	18 16       	cp	r1, r24
    2f86:	4c f5       	brge	.+82     	; 0x2fda <TWI_SendAdressWithRead+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	40 e2       	ldi	r20, 0x20	; 32
    2f96:	51 e4       	ldi	r21, 0x41	; 65
    2f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	bc 01       	movw	r22, r24
    2fa2:	cd 01       	movw	r24, r26
    2fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa8:	dc 01       	movw	r26, r24
    2faa:	cb 01       	movw	r24, r22
    2fac:	9e 83       	std	Y+6, r25	; 0x06
    2fae:	8d 83       	std	Y+5, r24	; 0x05
    2fb0:	0f c0       	rjmp	.+30     	; 0x2fd0 <TWI_SendAdressWithRead+0xec>
    2fb2:	80 e9       	ldi	r24, 0x90	; 144
    2fb4:	91 e0       	ldi	r25, 0x01	; 1
    2fb6:	9c 83       	std	Y+4, r25	; 0x04
    2fb8:	8b 83       	std	Y+3, r24	; 0x03
    2fba:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	f1 f7       	brne	.-4      	; 0x2fbe <TWI_SendAdressWithRead+0xda>
    2fc2:	9c 83       	std	Y+4, r25	; 0x04
    2fc4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fca:	01 97       	sbiw	r24, 0x01	; 1
    2fcc:	9e 83       	std	Y+6, r25	; 0x06
    2fce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd4:	00 97       	sbiw	r24, 0x00	; 0
    2fd6:	69 f7       	brne	.-38     	; 0x2fb2 <TWI_SendAdressWithRead+0xce>
    2fd8:	14 c0       	rjmp	.+40     	; 0x3002 <TWI_SendAdressWithRead+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fda:	6f 81       	ldd	r22, Y+7	; 0x07
    2fdc:	78 85       	ldd	r23, Y+8	; 0x08
    2fde:	89 85       	ldd	r24, Y+9	; 0x09
    2fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	9e 83       	std	Y+6, r25	; 0x06
    2fec:	8d 83       	std	Y+5, r24	; 0x05
    2fee:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff2:	9a 83       	std	Y+2, r25	; 0x02
    2ff4:	89 83       	std	Y+1, r24	; 0x01
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffa:	01 97       	sbiw	r24, 0x01	; 1
    2ffc:	f1 f7       	brne	.-4      	; 0x2ffa <TWI_SendAdressWithRead+0x116>
    2ffe:	9a 83       	std	Y+2, r25	; 0x02
    3000:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    3002:	2f 96       	adiw	r28, 0x0f	; 15
    3004:	0f b6       	in	r0, 0x3f	; 63
    3006:	f8 94       	cli
    3008:	de bf       	out	0x3e, r29	; 62
    300a:	0f be       	out	0x3f, r0	; 63
    300c:	cd bf       	out	0x3d, r28	; 61
    300e:	cf 91       	pop	r28
    3010:	df 91       	pop	r29
    3012:	08 95       	ret

00003014 <TWI_SendDataOnly>:
void TWI_SendDataOnly(u8 Transmitted_data){
    3014:	df 93       	push	r29
    3016:	cf 93       	push	r28
    3018:	cd b7       	in	r28, 0x3d	; 61
    301a:	de b7       	in	r29, 0x3e	; 62
    301c:	2f 97       	sbiw	r28, 0x0f	; 15
    301e:	0f b6       	in	r0, 0x3f	; 63
    3020:	f8 94       	cli
    3022:	de bf       	out	0x3e, r29	; 62
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	cd bf       	out	0x3d, r28	; 61
    3028:	8f 87       	std	Y+15, r24	; 0x0f
	TWDR =Transmitted_data;
    302a:	e3 e2       	ldi	r30, 0x23	; 35
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3030:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3032:	e6 e5       	ldi	r30, 0x56	; 86
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	84 e8       	ldi	r24, 0x84	; 132
    3038:	80 83       	st	Z, r24

	while (!(TWCR & (1<<TWINT)));
    303a:	e6 e5       	ldi	r30, 0x56	; 86
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	80 81       	ld	r24, Z
    3040:	88 23       	and	r24, r24
    3042:	dc f7       	brge	.-10     	; 0x303a <TWI_SendDataOnly+0x26>
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	a0 e2       	ldi	r26, 0x20	; 32
    304a:	b1 e4       	ldi	r27, 0x41	; 65
    304c:	8b 87       	std	Y+11, r24	; 0x0b
    304e:	9c 87       	std	Y+12, r25	; 0x0c
    3050:	ad 87       	std	Y+13, r26	; 0x0d
    3052:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3054:	6b 85       	ldd	r22, Y+11	; 0x0b
    3056:	7c 85       	ldd	r23, Y+12	; 0x0c
    3058:	8d 85       	ldd	r24, Y+13	; 0x0d
    305a:	9e 85       	ldd	r25, Y+14	; 0x0e
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	4a e7       	ldi	r20, 0x7A	; 122
    3062:	55 e4       	ldi	r21, 0x45	; 69
    3064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	8f 83       	std	Y+7, r24	; 0x07
    306e:	98 87       	std	Y+8, r25	; 0x08
    3070:	a9 87       	std	Y+9, r26	; 0x09
    3072:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3074:	6f 81       	ldd	r22, Y+7	; 0x07
    3076:	78 85       	ldd	r23, Y+8	; 0x08
    3078:	89 85       	ldd	r24, Y+9	; 0x09
    307a:	9a 85       	ldd	r25, Y+10	; 0x0a
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	40 e8       	ldi	r20, 0x80	; 128
    3082:	5f e3       	ldi	r21, 0x3F	; 63
    3084:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3088:	88 23       	and	r24, r24
    308a:	2c f4       	brge	.+10     	; 0x3096 <TWI_SendDataOnly+0x82>
		__ticks = 1;
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	9e 83       	std	Y+6, r25	; 0x06
    3092:	8d 83       	std	Y+5, r24	; 0x05
    3094:	3f c0       	rjmp	.+126    	; 0x3114 <TWI_SendDataOnly+0x100>
	else if (__tmp > 65535)
    3096:	6f 81       	ldd	r22, Y+7	; 0x07
    3098:	78 85       	ldd	r23, Y+8	; 0x08
    309a:	89 85       	ldd	r24, Y+9	; 0x09
    309c:	9a 85       	ldd	r25, Y+10	; 0x0a
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	3f ef       	ldi	r19, 0xFF	; 255
    30a2:	4f e7       	ldi	r20, 0x7F	; 127
    30a4:	57 e4       	ldi	r21, 0x47	; 71
    30a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30aa:	18 16       	cp	r1, r24
    30ac:	4c f5       	brge	.+82     	; 0x3100 <TWI_SendDataOnly+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    30b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	40 e2       	ldi	r20, 0x20	; 32
    30bc:	51 e4       	ldi	r21, 0x41	; 65
    30be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	bc 01       	movw	r22, r24
    30c8:	cd 01       	movw	r24, r26
    30ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	9e 83       	std	Y+6, r25	; 0x06
    30d4:	8d 83       	std	Y+5, r24	; 0x05
    30d6:	0f c0       	rjmp	.+30     	; 0x30f6 <TWI_SendDataOnly+0xe2>
    30d8:	80 e9       	ldi	r24, 0x90	; 144
    30da:	91 e0       	ldi	r25, 0x01	; 1
    30dc:	9c 83       	std	Y+4, r25	; 0x04
    30de:	8b 83       	std	Y+3, r24	; 0x03
    30e0:	8b 81       	ldd	r24, Y+3	; 0x03
    30e2:	9c 81       	ldd	r25, Y+4	; 0x04
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	f1 f7       	brne	.-4      	; 0x30e4 <TWI_SendDataOnly+0xd0>
    30e8:	9c 83       	std	Y+4, r25	; 0x04
    30ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ec:	8d 81       	ldd	r24, Y+5	; 0x05
    30ee:	9e 81       	ldd	r25, Y+6	; 0x06
    30f0:	01 97       	sbiw	r24, 0x01	; 1
    30f2:	9e 83       	std	Y+6, r25	; 0x06
    30f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f6:	8d 81       	ldd	r24, Y+5	; 0x05
    30f8:	9e 81       	ldd	r25, Y+6	; 0x06
    30fa:	00 97       	sbiw	r24, 0x00	; 0
    30fc:	69 f7       	brne	.-38     	; 0x30d8 <TWI_SendDataOnly+0xc4>
    30fe:	14 c0       	rjmp	.+40     	; 0x3128 <TWI_SendDataOnly+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3100:	6f 81       	ldd	r22, Y+7	; 0x07
    3102:	78 85       	ldd	r23, Y+8	; 0x08
    3104:	89 85       	ldd	r24, Y+9	; 0x09
    3106:	9a 85       	ldd	r25, Y+10	; 0x0a
    3108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	9e 83       	std	Y+6, r25	; 0x06
    3112:	8d 83       	std	Y+5, r24	; 0x05
    3114:	8d 81       	ldd	r24, Y+5	; 0x05
    3116:	9e 81       	ldd	r25, Y+6	; 0x06
    3118:	9a 83       	std	Y+2, r25	; 0x02
    311a:	89 83       	std	Y+1, r24	; 0x01
    311c:	89 81       	ldd	r24, Y+1	; 0x01
    311e:	9a 81       	ldd	r25, Y+2	; 0x02
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	f1 f7       	brne	.-4      	; 0x3120 <TWI_SendDataOnly+0x10c>
    3124:	9a 83       	std	Y+2, r25	; 0x02
    3126:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10);

}
    3128:	2f 96       	adiw	r28, 0x0f	; 15
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	f8 94       	cli
    312e:	de bf       	out	0x3e, r29	; 62
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	cd bf       	out	0x3d, r28	; 61
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	08 95       	ret

0000313a <GIEMode>:
 *  Created on: Oct 21, 2022
 *      Author: Ismail
 */
#include "../includes/GIE_prv.h"
#include "../includes/GIE.h"
void GIEMode(u8 LocalGIE_Mode){
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	00 d0       	rcall	.+0      	; 0x3140 <GIEMode+0x6>
    3140:	0f 92       	push	r0
    3142:	cd b7       	in	r28, 0x3d	; 61
    3144:	de b7       	in	r29, 0x3e	; 62
    3146:	89 83       	std	Y+1, r24	; 0x01
	switch (LocalGIE_Mode){
    3148:	89 81       	ldd	r24, Y+1	; 0x01
    314a:	28 2f       	mov	r18, r24
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	3b 83       	std	Y+3, r19	; 0x03
    3150:	2a 83       	std	Y+2, r18	; 0x02
    3152:	8a 81       	ldd	r24, Y+2	; 0x02
    3154:	9b 81       	ldd	r25, Y+3	; 0x03
    3156:	00 97       	sbiw	r24, 0x00	; 0
    3158:	69 f0       	breq	.+26     	; 0x3174 <GIEMode+0x3a>
    315a:	2a 81       	ldd	r18, Y+2	; 0x02
    315c:	3b 81       	ldd	r19, Y+3	; 0x03
    315e:	21 30       	cpi	r18, 0x01	; 1
    3160:	31 05       	cpc	r19, r1
    3162:	81 f4       	brne	.+32     	; 0x3184 <GIEMode+0x4a>
	case GIE_ENABLE:
		SET_BIT(SREG,7);
    3164:	af e5       	ldi	r26, 0x5F	; 95
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	ef e5       	ldi	r30, 0x5F	; 95
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	80 68       	ori	r24, 0x80	; 128
    3170:	8c 93       	st	X, r24
    3172:	0f c0       	rjmp	.+30     	; 0x3192 <GIEMode+0x58>
		break;
	case GIE_DISABLE:
		CLR_BIT(SREG,7);
    3174:	af e5       	ldi	r26, 0x5F	; 95
    3176:	b0 e0       	ldi	r27, 0x00	; 0
    3178:	ef e5       	ldi	r30, 0x5F	; 95
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	80 81       	ld	r24, Z
    317e:	8f 77       	andi	r24, 0x7F	; 127
    3180:	8c 93       	st	X, r24
    3182:	07 c0       	rjmp	.+14     	; 0x3192 <GIEMode+0x58>
		break;
	default:
		CLR_BIT(SREG,7);
    3184:	af e5       	ldi	r26, 0x5F	; 95
    3186:	b0 e0       	ldi	r27, 0x00	; 0
    3188:	ef e5       	ldi	r30, 0x5F	; 95
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	80 81       	ld	r24, Z
    318e:	8f 77       	andi	r24, 0x7F	; 127
    3190:	8c 93       	st	X, r24
		break;
	}
}
    3192:	0f 90       	pop	r0
    3194:	0f 90       	pop	r0
    3196:	0f 90       	pop	r0
    3198:	cf 91       	pop	r28
    319a:	df 91       	pop	r29
    319c:	08 95       	ret

0000319e <EXIT0_Init>:
#include"../includes/EXIT.h"
#include"../includes/EXIT_cfg.h"



void EXIT0_Init(){
    319e:	df 93       	push	r29
    31a0:	cf 93       	push	r28
    31a2:	cd b7       	in	r28, 0x3d	; 61
    31a4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif EXIT_SENSE_CONTROL_STATE==EXIT_ANY_LOGICAL_CHANGE
	SET_BIT(MCUCR,0);
	CLR_BIT(MCUCR,1);
#elif EXIT_SENSE_CONTROL_STATE==EXIT_RISING_EDGE
	CLR_BIT(MCUCR,0);
    31a6:	a5 e5       	ldi	r26, 0x55	; 85
    31a8:	b0 e0       	ldi	r27, 0x00	; 0
    31aa:	e5 e5       	ldi	r30, 0x55	; 85
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	80 81       	ld	r24, Z
    31b0:	8e 7f       	andi	r24, 0xFE	; 254
    31b2:	8c 93       	st	X, r24
	SET_BIT(MCUCR,0);
    31b4:	a5 e5       	ldi	r26, 0x55	; 85
    31b6:	b0 e0       	ldi	r27, 0x00	; 0
    31b8:	e5 e5       	ldi	r30, 0x55	; 85
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	80 81       	ld	r24, Z
    31be:	81 60       	ori	r24, 0x01	; 1
    31c0:	8c 93       	st	X, r24
#elif EXIT_SENSE_CONTROL_STATE==EXIT_FALLING_EDGE
	SET_BIT(MCUCR,0);
	SET_BIT(MCUCR,0);
#endif
/*enable interrupt on int0*/
	SET_BIT(GICR,6);
    31c2:	ab e5       	ldi	r26, 0x5B	; 91
    31c4:	b0 e0       	ldi	r27, 0x00	; 0
    31c6:	eb e5       	ldi	r30, 0x5B	; 91
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	80 64       	ori	r24, 0x40	; 64
    31ce:	8c 93       	st	X, r24

}
    31d0:	cf 91       	pop	r28
    31d2:	df 91       	pop	r29
    31d4:	08 95       	ret

000031d6 <EXIT0_Disable>:
void EXIT0_Disable(){
    31d6:	df 93       	push	r29
    31d8:	cf 93       	push	r28
    31da:	cd b7       	in	r28, 0x3d	; 61
    31dc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,6);
    31de:	ab e5       	ldi	r26, 0x5B	; 91
    31e0:	b0 e0       	ldi	r27, 0x00	; 0
    31e2:	eb e5       	ldi	r30, 0x5B	; 91
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	80 81       	ld	r24, Z
    31e8:	8f 7b       	andi	r24, 0xBF	; 191
    31ea:	8c 93       	st	X, r24


}
    31ec:	cf 91       	pop	r28
    31ee:	df 91       	pop	r29
    31f0:	08 95       	ret

000031f2 <EXIT1_Init>:
void EXIT1_Init(){
    31f2:	df 93       	push	r29
    31f4:	cf 93       	push	r28
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif EXIT_SENSE_CONTROL_STATE==EXIT_ANY_LOGICAL_CHANGE
	SET_BIT(MCUCR,0);
	CLR_BIT(MCUCR,1);
#elif EXIT_SENSE_CONTROL_STATE==EXIT_RISING_EDGE
	CLR_BIT(MCUCR,0);
    31fa:	a5 e5       	ldi	r26, 0x55	; 85
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	e5 e5       	ldi	r30, 0x55	; 85
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 81       	ld	r24, Z
    3204:	8e 7f       	andi	r24, 0xFE	; 254
    3206:	8c 93       	st	X, r24
	SET_BIT(MCUCR,0);
    3208:	a5 e5       	ldi	r26, 0x55	; 85
    320a:	b0 e0       	ldi	r27, 0x00	; 0
    320c:	e5 e5       	ldi	r30, 0x55	; 85
    320e:	f0 e0       	ldi	r31, 0x00	; 0
    3210:	80 81       	ld	r24, Z
    3212:	81 60       	ori	r24, 0x01	; 1
    3214:	8c 93       	st	X, r24
#elif EXIT_SENSE_CONTROL_STATE==EXIT_FALLING_EDGE
	SET_BIT(MCUCR,0);
	SET_BIT(MCUCR,0);
#endif
/*enable interrupt on int1*/
	SET_BIT(GICR,7);
    3216:	ab e5       	ldi	r26, 0x5B	; 91
    3218:	b0 e0       	ldi	r27, 0x00	; 0
    321a:	eb e5       	ldi	r30, 0x5B	; 91
    321c:	f0 e0       	ldi	r31, 0x00	; 0
    321e:	80 81       	ld	r24, Z
    3220:	80 68       	ori	r24, 0x80	; 128
    3222:	8c 93       	st	X, r24


}
    3224:	cf 91       	pop	r28
    3226:	df 91       	pop	r29
    3228:	08 95       	ret

0000322a <EXIT_Set_Sense_Control>:
void EXIT_Set_Sense_Control(u8 Copy_u8Interrupt_ID, u8 Copy_u8Mode){
    322a:	df 93       	push	r29
    322c:	cf 93       	push	r28
    322e:	cd b7       	in	r28, 0x3d	; 61
    3230:	de b7       	in	r29, 0x3e	; 62
    3232:	28 97       	sbiw	r28, 0x08	; 8
    3234:	0f b6       	in	r0, 0x3f	; 63
    3236:	f8 94       	cli
    3238:	de bf       	out	0x3e, r29	; 62
    323a:	0f be       	out	0x3f, r0	; 63
    323c:	cd bf       	out	0x3d, r28	; 61
    323e:	89 83       	std	Y+1, r24	; 0x01
    3240:	6a 83       	std	Y+2, r22	; 0x02

if(Copy_u8Interrupt_ID == EXTI_LINE0){
    3242:	89 81       	ldd	r24, Y+1	; 0x01
    3244:	88 23       	and	r24, r24
    3246:	09 f0       	breq	.+2      	; 0x324a <EXIT_Set_Sense_Control+0x20>
    3248:	61 c0       	rjmp	.+194    	; 0x330c <EXIT_Set_Sense_Control+0xe2>
	switch (Copy_u8Mode){
    324a:	8a 81       	ldd	r24, Y+2	; 0x02
    324c:	28 2f       	mov	r18, r24
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	38 87       	std	Y+8, r19	; 0x08
    3252:	2f 83       	std	Y+7, r18	; 0x07
    3254:	8f 81       	ldd	r24, Y+7	; 0x07
    3256:	98 85       	ldd	r25, Y+8	; 0x08
    3258:	81 30       	cpi	r24, 0x01	; 1
    325a:	91 05       	cpc	r25, r1
    325c:	21 f1       	breq	.+72     	; 0x32a6 <EXIT_Set_Sense_Control+0x7c>
    325e:	2f 81       	ldd	r18, Y+7	; 0x07
    3260:	38 85       	ldd	r19, Y+8	; 0x08
    3262:	22 30       	cpi	r18, 0x02	; 2
    3264:	31 05       	cpc	r19, r1
    3266:	2c f4       	brge	.+10     	; 0x3272 <EXIT_Set_Sense_Control+0x48>
    3268:	8f 81       	ldd	r24, Y+7	; 0x07
    326a:	98 85       	ldd	r25, Y+8	; 0x08
    326c:	00 97       	sbiw	r24, 0x00	; 0
    326e:	61 f0       	breq	.+24     	; 0x3288 <EXIT_Set_Sense_Control+0x5e>
    3270:	46 c0       	rjmp	.+140    	; 0x32fe <EXIT_Set_Sense_Control+0xd4>
    3272:	2f 81       	ldd	r18, Y+7	; 0x07
    3274:	38 85       	ldd	r19, Y+8	; 0x08
    3276:	22 30       	cpi	r18, 0x02	; 2
    3278:	31 05       	cpc	r19, r1
    327a:	21 f1       	breq	.+72     	; 0x32c4 <EXIT_Set_Sense_Control+0x9a>
    327c:	8f 81       	ldd	r24, Y+7	; 0x07
    327e:	98 85       	ldd	r25, Y+8	; 0x08
    3280:	83 30       	cpi	r24, 0x03	; 3
    3282:	91 05       	cpc	r25, r1
    3284:	71 f1       	breq	.+92     	; 0x32e2 <EXIT_Set_Sense_Control+0xb8>
    3286:	3b c0       	rjmp	.+118    	; 0x32fe <EXIT_Set_Sense_Control+0xd4>
	case EXIT_LOW_LEVEL:
		CLR_BIT(MCUCR,0);
    3288:	a5 e5       	ldi	r26, 0x55	; 85
    328a:	b0 e0       	ldi	r27, 0x00	; 0
    328c:	e5 e5       	ldi	r30, 0x55	; 85
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	80 81       	ld	r24, Z
    3292:	8e 7f       	andi	r24, 0xFE	; 254
    3294:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,1);
    3296:	a5 e5       	ldi	r26, 0x55	; 85
    3298:	b0 e0       	ldi	r27, 0x00	; 0
    329a:	e5 e5       	ldi	r30, 0x55	; 85
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	80 81       	ld	r24, Z
    32a0:	8d 7f       	andi	r24, 0xFD	; 253
    32a2:	8c 93       	st	X, r24
    32a4:	2c c0       	rjmp	.+88     	; 0x32fe <EXIT_Set_Sense_Control+0xd4>

		break;
	case EXIT_ANY_LOGICAL_CHANGE :
	SET_BIT(MCUCR,0);
    32a6:	a5 e5       	ldi	r26, 0x55	; 85
    32a8:	b0 e0       	ldi	r27, 0x00	; 0
    32aa:	e5 e5       	ldi	r30, 0x55	; 85
    32ac:	f0 e0       	ldi	r31, 0x00	; 0
    32ae:	80 81       	ld	r24, Z
    32b0:	81 60       	ori	r24, 0x01	; 1
    32b2:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,1);
    32b4:	a5 e5       	ldi	r26, 0x55	; 85
    32b6:	b0 e0       	ldi	r27, 0x00	; 0
    32b8:	e5 e5       	ldi	r30, 0x55	; 85
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	80 81       	ld	r24, Z
    32be:	8d 7f       	andi	r24, 0xFD	; 253
    32c0:	8c 93       	st	X, r24
    32c2:	1d c0       	rjmp	.+58     	; 0x32fe <EXIT_Set_Sense_Control+0xd4>
	break;
	case EXIT_RISING_EDGE:
		CLR_BIT(MCUCR,0);
    32c4:	a5 e5       	ldi	r26, 0x55	; 85
    32c6:	b0 e0       	ldi	r27, 0x00	; 0
    32c8:	e5 e5       	ldi	r30, 0x55	; 85
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	80 81       	ld	r24, Z
    32ce:	8e 7f       	andi	r24, 0xFE	; 254
    32d0:	8c 93       	st	X, r24
		SET_BIT(MCUCR,0);
    32d2:	a5 e5       	ldi	r26, 0x55	; 85
    32d4:	b0 e0       	ldi	r27, 0x00	; 0
    32d6:	e5 e5       	ldi	r30, 0x55	; 85
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	80 81       	ld	r24, Z
    32dc:	81 60       	ori	r24, 0x01	; 1
    32de:	8c 93       	st	X, r24
    32e0:	0e c0       	rjmp	.+28     	; 0x32fe <EXIT_Set_Sense_Control+0xd4>
	break;
	case EXIT_FALLING_EDGE:
		SET_BIT(MCUCR,0);
    32e2:	a5 e5       	ldi	r26, 0x55	; 85
    32e4:	b0 e0       	ldi	r27, 0x00	; 0
    32e6:	e5 e5       	ldi	r30, 0x55	; 85
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	80 81       	ld	r24, Z
    32ec:	81 60       	ori	r24, 0x01	; 1
    32ee:	8c 93       	st	X, r24
		SET_BIT(MCUCR,0);
    32f0:	a5 e5       	ldi	r26, 0x55	; 85
    32f2:	b0 e0       	ldi	r27, 0x00	; 0
    32f4:	e5 e5       	ldi	r30, 0x55	; 85
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	80 81       	ld	r24, Z
    32fa:	81 60       	ori	r24, 0x01	; 1
    32fc:	8c 93       	st	X, r24
	break;
	default:
		/*wrong  number passed */
		break;
	}
	SET_BIT(GICR,6);
    32fe:	ab e5       	ldi	r26, 0x5B	; 91
    3300:	b0 e0       	ldi	r27, 0x00	; 0
    3302:	eb e5       	ldi	r30, 0x5B	; 91
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	80 81       	ld	r24, Z
    3308:	80 64       	ori	r24, 0x40	; 64
    330a:	8c 93       	st	X, r24
}

if(Copy_u8Interrupt_ID == EXTI_LINE1){
    330c:	89 81       	ldd	r24, Y+1	; 0x01
    330e:	81 30       	cpi	r24, 0x01	; 1
    3310:	09 f0       	breq	.+2      	; 0x3314 <EXIT_Set_Sense_Control+0xea>
    3312:	61 c0       	rjmp	.+194    	; 0x33d6 <EXIT_Set_Sense_Control+0x1ac>
	switch (Copy_u8Mode){
    3314:	8a 81       	ldd	r24, Y+2	; 0x02
    3316:	28 2f       	mov	r18, r24
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	3e 83       	std	Y+6, r19	; 0x06
    331c:	2d 83       	std	Y+5, r18	; 0x05
    331e:	8d 81       	ldd	r24, Y+5	; 0x05
    3320:	9e 81       	ldd	r25, Y+6	; 0x06
    3322:	81 30       	cpi	r24, 0x01	; 1
    3324:	91 05       	cpc	r25, r1
    3326:	21 f1       	breq	.+72     	; 0x3370 <EXIT_Set_Sense_Control+0x146>
    3328:	2d 81       	ldd	r18, Y+5	; 0x05
    332a:	3e 81       	ldd	r19, Y+6	; 0x06
    332c:	22 30       	cpi	r18, 0x02	; 2
    332e:	31 05       	cpc	r19, r1
    3330:	2c f4       	brge	.+10     	; 0x333c <EXIT_Set_Sense_Control+0x112>
    3332:	8d 81       	ldd	r24, Y+5	; 0x05
    3334:	9e 81       	ldd	r25, Y+6	; 0x06
    3336:	00 97       	sbiw	r24, 0x00	; 0
    3338:	61 f0       	breq	.+24     	; 0x3352 <EXIT_Set_Sense_Control+0x128>
    333a:	46 c0       	rjmp	.+140    	; 0x33c8 <EXIT_Set_Sense_Control+0x19e>
    333c:	2d 81       	ldd	r18, Y+5	; 0x05
    333e:	3e 81       	ldd	r19, Y+6	; 0x06
    3340:	22 30       	cpi	r18, 0x02	; 2
    3342:	31 05       	cpc	r19, r1
    3344:	21 f1       	breq	.+72     	; 0x338e <EXIT_Set_Sense_Control+0x164>
    3346:	8d 81       	ldd	r24, Y+5	; 0x05
    3348:	9e 81       	ldd	r25, Y+6	; 0x06
    334a:	83 30       	cpi	r24, 0x03	; 3
    334c:	91 05       	cpc	r25, r1
    334e:	71 f1       	breq	.+92     	; 0x33ac <EXIT_Set_Sense_Control+0x182>
    3350:	3b c0       	rjmp	.+118    	; 0x33c8 <EXIT_Set_Sense_Control+0x19e>
	case EXIT_LOW_LEVEL:
		CLR_BIT(MCUCR,0);
    3352:	a5 e5       	ldi	r26, 0x55	; 85
    3354:	b0 e0       	ldi	r27, 0x00	; 0
    3356:	e5 e5       	ldi	r30, 0x55	; 85
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	80 81       	ld	r24, Z
    335c:	8e 7f       	andi	r24, 0xFE	; 254
    335e:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,1);
    3360:	a5 e5       	ldi	r26, 0x55	; 85
    3362:	b0 e0       	ldi	r27, 0x00	; 0
    3364:	e5 e5       	ldi	r30, 0x55	; 85
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	80 81       	ld	r24, Z
    336a:	8d 7f       	andi	r24, 0xFD	; 253
    336c:	8c 93       	st	X, r24
    336e:	2c c0       	rjmp	.+88     	; 0x33c8 <EXIT_Set_Sense_Control+0x19e>
		break;
	case EXIT_ANY_LOGICAL_CHANGE :
	SET_BIT(MCUCR,0);
    3370:	a5 e5       	ldi	r26, 0x55	; 85
    3372:	b0 e0       	ldi	r27, 0x00	; 0
    3374:	e5 e5       	ldi	r30, 0x55	; 85
    3376:	f0 e0       	ldi	r31, 0x00	; 0
    3378:	80 81       	ld	r24, Z
    337a:	81 60       	ori	r24, 0x01	; 1
    337c:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,1);
    337e:	a5 e5       	ldi	r26, 0x55	; 85
    3380:	b0 e0       	ldi	r27, 0x00	; 0
    3382:	e5 e5       	ldi	r30, 0x55	; 85
    3384:	f0 e0       	ldi	r31, 0x00	; 0
    3386:	80 81       	ld	r24, Z
    3388:	8d 7f       	andi	r24, 0xFD	; 253
    338a:	8c 93       	st	X, r24
    338c:	1d c0       	rjmp	.+58     	; 0x33c8 <EXIT_Set_Sense_Control+0x19e>
	break;
	case EXIT_RISING_EDGE:
		CLR_BIT(MCUCR,0);
    338e:	a5 e5       	ldi	r26, 0x55	; 85
    3390:	b0 e0       	ldi	r27, 0x00	; 0
    3392:	e5 e5       	ldi	r30, 0x55	; 85
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	80 81       	ld	r24, Z
    3398:	8e 7f       	andi	r24, 0xFE	; 254
    339a:	8c 93       	st	X, r24
		SET_BIT(MCUCR,0);
    339c:	a5 e5       	ldi	r26, 0x55	; 85
    339e:	b0 e0       	ldi	r27, 0x00	; 0
    33a0:	e5 e5       	ldi	r30, 0x55	; 85
    33a2:	f0 e0       	ldi	r31, 0x00	; 0
    33a4:	80 81       	ld	r24, Z
    33a6:	81 60       	ori	r24, 0x01	; 1
    33a8:	8c 93       	st	X, r24
    33aa:	0e c0       	rjmp	.+28     	; 0x33c8 <EXIT_Set_Sense_Control+0x19e>
	break;
	case EXIT_FALLING_EDGE:
		SET_BIT(MCUCR,0);
    33ac:	a5 e5       	ldi	r26, 0x55	; 85
    33ae:	b0 e0       	ldi	r27, 0x00	; 0
    33b0:	e5 e5       	ldi	r30, 0x55	; 85
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	80 81       	ld	r24, Z
    33b6:	81 60       	ori	r24, 0x01	; 1
    33b8:	8c 93       	st	X, r24
		SET_BIT(MCUCR,0);
    33ba:	a5 e5       	ldi	r26, 0x55	; 85
    33bc:	b0 e0       	ldi	r27, 0x00	; 0
    33be:	e5 e5       	ldi	r30, 0x55	; 85
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	80 81       	ld	r24, Z
    33c4:	81 60       	ori	r24, 0x01	; 1
    33c6:	8c 93       	st	X, r24
	break;
	default:
		/*wrong  number passed */
		break;
	}
	SET_BIT(GICR,7);
    33c8:	ab e5       	ldi	r26, 0x5B	; 91
    33ca:	b0 e0       	ldi	r27, 0x00	; 0
    33cc:	eb e5       	ldi	r30, 0x5B	; 91
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	80 81       	ld	r24, Z
    33d2:	80 68       	ori	r24, 0x80	; 128
    33d4:	8c 93       	st	X, r24
}
if(Copy_u8Interrupt_ID == EXTI_LINE1){
    33d6:	89 81       	ldd	r24, Y+1	; 0x01
    33d8:	81 30       	cpi	r24, 0x01	; 1
    33da:	09 f0       	breq	.+2      	; 0x33de <EXIT_Set_Sense_Control+0x1b4>
    33dc:	61 c0       	rjmp	.+194    	; 0x34a0 <EXIT_Set_Sense_Control+0x276>
	switch (Copy_u8Mode){
    33de:	8a 81       	ldd	r24, Y+2	; 0x02
    33e0:	28 2f       	mov	r18, r24
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	3c 83       	std	Y+4, r19	; 0x04
    33e6:	2b 83       	std	Y+3, r18	; 0x03
    33e8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ea:	9c 81       	ldd	r25, Y+4	; 0x04
    33ec:	81 30       	cpi	r24, 0x01	; 1
    33ee:	91 05       	cpc	r25, r1
    33f0:	21 f1       	breq	.+72     	; 0x343a <EXIT_Set_Sense_Control+0x210>
    33f2:	2b 81       	ldd	r18, Y+3	; 0x03
    33f4:	3c 81       	ldd	r19, Y+4	; 0x04
    33f6:	22 30       	cpi	r18, 0x02	; 2
    33f8:	31 05       	cpc	r19, r1
    33fa:	2c f4       	brge	.+10     	; 0x3406 <EXIT_Set_Sense_Control+0x1dc>
    33fc:	8b 81       	ldd	r24, Y+3	; 0x03
    33fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3400:	00 97       	sbiw	r24, 0x00	; 0
    3402:	61 f0       	breq	.+24     	; 0x341c <EXIT_Set_Sense_Control+0x1f2>
    3404:	46 c0       	rjmp	.+140    	; 0x3492 <EXIT_Set_Sense_Control+0x268>
    3406:	2b 81       	ldd	r18, Y+3	; 0x03
    3408:	3c 81       	ldd	r19, Y+4	; 0x04
    340a:	22 30       	cpi	r18, 0x02	; 2
    340c:	31 05       	cpc	r19, r1
    340e:	21 f1       	breq	.+72     	; 0x3458 <EXIT_Set_Sense_Control+0x22e>
    3410:	8b 81       	ldd	r24, Y+3	; 0x03
    3412:	9c 81       	ldd	r25, Y+4	; 0x04
    3414:	83 30       	cpi	r24, 0x03	; 3
    3416:	91 05       	cpc	r25, r1
    3418:	71 f1       	breq	.+92     	; 0x3476 <EXIT_Set_Sense_Control+0x24c>
    341a:	3b c0       	rjmp	.+118    	; 0x3492 <EXIT_Set_Sense_Control+0x268>
	case EXIT_LOW_LEVEL:
		CLR_BIT(MCUCR,0);
    341c:	a5 e5       	ldi	r26, 0x55	; 85
    341e:	b0 e0       	ldi	r27, 0x00	; 0
    3420:	e5 e5       	ldi	r30, 0x55	; 85
    3422:	f0 e0       	ldi	r31, 0x00	; 0
    3424:	80 81       	ld	r24, Z
    3426:	8e 7f       	andi	r24, 0xFE	; 254
    3428:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,1);
    342a:	a5 e5       	ldi	r26, 0x55	; 85
    342c:	b0 e0       	ldi	r27, 0x00	; 0
    342e:	e5 e5       	ldi	r30, 0x55	; 85
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	80 81       	ld	r24, Z
    3434:	8d 7f       	andi	r24, 0xFD	; 253
    3436:	8c 93       	st	X, r24
    3438:	2c c0       	rjmp	.+88     	; 0x3492 <EXIT_Set_Sense_Control+0x268>
		break;
	case EXIT_ANY_LOGICAL_CHANGE :
	SET_BIT(MCUCR,0);
    343a:	a5 e5       	ldi	r26, 0x55	; 85
    343c:	b0 e0       	ldi	r27, 0x00	; 0
    343e:	e5 e5       	ldi	r30, 0x55	; 85
    3440:	f0 e0       	ldi	r31, 0x00	; 0
    3442:	80 81       	ld	r24, Z
    3444:	81 60       	ori	r24, 0x01	; 1
    3446:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,1);
    3448:	a5 e5       	ldi	r26, 0x55	; 85
    344a:	b0 e0       	ldi	r27, 0x00	; 0
    344c:	e5 e5       	ldi	r30, 0x55	; 85
    344e:	f0 e0       	ldi	r31, 0x00	; 0
    3450:	80 81       	ld	r24, Z
    3452:	8d 7f       	andi	r24, 0xFD	; 253
    3454:	8c 93       	st	X, r24
    3456:	1d c0       	rjmp	.+58     	; 0x3492 <EXIT_Set_Sense_Control+0x268>
	break;
	case EXIT_RISING_EDGE:
		CLR_BIT(MCUCR,0);
    3458:	a5 e5       	ldi	r26, 0x55	; 85
    345a:	b0 e0       	ldi	r27, 0x00	; 0
    345c:	e5 e5       	ldi	r30, 0x55	; 85
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	80 81       	ld	r24, Z
    3462:	8e 7f       	andi	r24, 0xFE	; 254
    3464:	8c 93       	st	X, r24
		SET_BIT(MCUCR,0);
    3466:	a5 e5       	ldi	r26, 0x55	; 85
    3468:	b0 e0       	ldi	r27, 0x00	; 0
    346a:	e5 e5       	ldi	r30, 0x55	; 85
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	80 81       	ld	r24, Z
    3470:	81 60       	ori	r24, 0x01	; 1
    3472:	8c 93       	st	X, r24
    3474:	0e c0       	rjmp	.+28     	; 0x3492 <EXIT_Set_Sense_Control+0x268>
	break;
	case EXIT_FALLING_EDGE:
		SET_BIT(MCUCR,0);
    3476:	a5 e5       	ldi	r26, 0x55	; 85
    3478:	b0 e0       	ldi	r27, 0x00	; 0
    347a:	e5 e5       	ldi	r30, 0x55	; 85
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	80 81       	ld	r24, Z
    3480:	81 60       	ori	r24, 0x01	; 1
    3482:	8c 93       	st	X, r24
		SET_BIT(MCUCR,0);
    3484:	a5 e5       	ldi	r26, 0x55	; 85
    3486:	b0 e0       	ldi	r27, 0x00	; 0
    3488:	e5 e5       	ldi	r30, 0x55	; 85
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	80 81       	ld	r24, Z
    348e:	81 60       	ori	r24, 0x01	; 1
    3490:	8c 93       	st	X, r24
	break;
	default:
		/*wrong  number passed */
		break;
	}
	SET_BIT(GICR,5);
    3492:	ab e5       	ldi	r26, 0x5B	; 91
    3494:	b0 e0       	ldi	r27, 0x00	; 0
    3496:	eb e5       	ldi	r30, 0x5B	; 91
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	80 81       	ld	r24, Z
    349c:	80 62       	ori	r24, 0x20	; 32
    349e:	8c 93       	st	X, r24
}

}
    34a0:	28 96       	adiw	r28, 0x08	; 8
    34a2:	0f b6       	in	r0, 0x3f	; 63
    34a4:	f8 94       	cli
    34a6:	de bf       	out	0x3e, r29	; 62
    34a8:	0f be       	out	0x3f, r0	; 63
    34aa:	cd bf       	out	0x3d, r28	; 61
    34ac:	cf 91       	pop	r28
    34ae:	df 91       	pop	r29
    34b0:	08 95       	ret

000034b2 <EXIT2_Init>:
void EXIT2_Init(){
    34b2:	df 93       	push	r29
    34b4:	cf 93       	push	r28
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62

#if EXIT_SENSE_CONTROL_STATE==EXIT_RISING_EDGE
	CLR_BIT(MCUCSR,0);
    34ba:	a4 e5       	ldi	r26, 0x54	; 84
    34bc:	b0 e0       	ldi	r27, 0x00	; 0
    34be:	e4 e5       	ldi	r30, 0x54	; 84
    34c0:	f0 e0       	ldi	r31, 0x00	; 0
    34c2:	80 81       	ld	r24, Z
    34c4:	8e 7f       	andi	r24, 0xFE	; 254
    34c6:	8c 93       	st	X, r24
#elif EXIT_SENSE_CONTROL_STATE==EXIT_FALLING_EDGE
	SET_BIT(MCUCSR,0);
#endif
/*enable interrupt on int2*/
	SET_BIT(GICR,5);
    34c8:	ab e5       	ldi	r26, 0x5B	; 91
    34ca:	b0 e0       	ldi	r27, 0x00	; 0
    34cc:	eb e5       	ldi	r30, 0x5B	; 91
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
    34d0:	80 81       	ld	r24, Z
    34d2:	80 62       	ori	r24, 0x20	; 32
    34d4:	8c 93       	st	X, r24
}
    34d6:	cf 91       	pop	r28
    34d8:	df 91       	pop	r29
    34da:	08 95       	ret

000034dc <EXTI_voidClearFlag>:

void EXTI_voidClearFlag(u8 Copy_u8Line) {
    34dc:	df 93       	push	r29
    34de:	cf 93       	push	r28
    34e0:	00 d0       	rcall	.+0      	; 0x34e2 <EXTI_voidClearFlag+0x6>
    34e2:	0f 92       	push	r0
    34e4:	cd b7       	in	r28, 0x3d	; 61
    34e6:	de b7       	in	r29, 0x3e	; 62
    34e8:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Line) {
    34ea:	89 81       	ldd	r24, Y+1	; 0x01
    34ec:	28 2f       	mov	r18, r24
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	3b 83       	std	Y+3, r19	; 0x03
    34f2:	2a 83       	std	Y+2, r18	; 0x02
    34f4:	8a 81       	ldd	r24, Y+2	; 0x02
    34f6:	9b 81       	ldd	r25, Y+3	; 0x03
    34f8:	81 30       	cpi	r24, 0x01	; 1
    34fa:	91 05       	cpc	r25, r1
    34fc:	89 f0       	breq	.+34     	; 0x3520 <EXTI_voidClearFlag+0x44>
    34fe:	2a 81       	ldd	r18, Y+2	; 0x02
    3500:	3b 81       	ldd	r19, Y+3	; 0x03
    3502:	22 30       	cpi	r18, 0x02	; 2
    3504:	31 05       	cpc	r19, r1
    3506:	a1 f0       	breq	.+40     	; 0x3530 <EXTI_voidClearFlag+0x54>
    3508:	8a 81       	ldd	r24, Y+2	; 0x02
    350a:	9b 81       	ldd	r25, Y+3	; 0x03
    350c:	00 97       	sbiw	r24, 0x00	; 0
    350e:	b9 f4       	brne	.+46     	; 0x353e <EXTI_voidClearFlag+0x62>
	case EXTI_LINE0:
		SET_BIT(GIFR, GIFR_INTF0_BIT);
    3510:	aa e5       	ldi	r26, 0x5A	; 90
    3512:	b0 e0       	ldi	r27, 0x00	; 0
    3514:	ea e5       	ldi	r30, 0x5A	; 90
    3516:	f0 e0       	ldi	r31, 0x00	; 0
    3518:	80 81       	ld	r24, Z
    351a:	80 64       	ori	r24, 0x40	; 64
    351c:	8c 93       	st	X, r24
    351e:	0f c0       	rjmp	.+30     	; 0x353e <EXTI_voidClearFlag+0x62>
		break;
	case EXTI_LINE1:
		SET_BIT(GIFR, GIFR_INTF1_BIT);
    3520:	aa e5       	ldi	r26, 0x5A	; 90
    3522:	b0 e0       	ldi	r27, 0x00	; 0
    3524:	ea e5       	ldi	r30, 0x5A	; 90
    3526:	f0 e0       	ldi	r31, 0x00	; 0
    3528:	80 81       	ld	r24, Z
    352a:	80 68       	ori	r24, 0x80	; 128
    352c:	8c 93       	st	X, r24
    352e:	07 c0       	rjmp	.+14     	; 0x353e <EXTI_voidClearFlag+0x62>
		break;
	case EXTI_LINE2:
		SET_BIT(GICR, GICR_INT2_BIT);
    3530:	ab e5       	ldi	r26, 0x5B	; 91
    3532:	b0 e0       	ldi	r27, 0x00	; 0
    3534:	eb e5       	ldi	r30, 0x5B	; 91
    3536:	f0 e0       	ldi	r31, 0x00	; 0
    3538:	80 81       	ld	r24, Z
    353a:	80 62       	ori	r24, 0x20	; 32
    353c:	8c 93       	st	X, r24
		break;
	}
}
    353e:	0f 90       	pop	r0
    3540:	0f 90       	pop	r0
    3542:	0f 90       	pop	r0
    3544:	cf 91       	pop	r28
    3546:	df 91       	pop	r29
    3548:	08 95       	ret

0000354a <EXTI_voidCallBack>:
void EXTI_voidCallBack(void (*Copy_pvoidCallBack)(void), u8 Copy_u8EXTILine) {
    354a:	df 93       	push	r29
    354c:	cf 93       	push	r28
    354e:	00 d0       	rcall	.+0      	; 0x3550 <EXTI_voidCallBack+0x6>
    3550:	0f 92       	push	r0
    3552:	cd b7       	in	r28, 0x3d	; 61
    3554:	de b7       	in	r29, 0x3e	; 62
    3556:	9a 83       	std	Y+2, r25	; 0x02
    3558:	89 83       	std	Y+1, r24	; 0x01
    355a:	6b 83       	std	Y+3, r22	; 0x03

	if (Copy_pvoidCallBack != NULL) {
    355c:	89 81       	ldd	r24, Y+1	; 0x01
    355e:	9a 81       	ldd	r25, Y+2	; 0x02
    3560:	00 97       	sbiw	r24, 0x00	; 0
    3562:	61 f0       	breq	.+24     	; 0x357c <EXTI_voidCallBack+0x32>
		gptr[Copy_u8EXTILine] = Copy_pvoidCallBack;
    3564:	8b 81       	ldd	r24, Y+3	; 0x03
    3566:	88 2f       	mov	r24, r24
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	88 0f       	add	r24, r24
    356c:	99 1f       	adc	r25, r25
    356e:	fc 01       	movw	r30, r24
    3570:	ef 54       	subi	r30, 0x4F	; 79
    3572:	ff 4f       	sbci	r31, 0xFF	; 255
    3574:	89 81       	ldd	r24, Y+1	; 0x01
    3576:	9a 81       	ldd	r25, Y+2	; 0x02
    3578:	91 83       	std	Z+1, r25	; 0x01
    357a:	80 83       	st	Z, r24
	}
}
    357c:	0f 90       	pop	r0
    357e:	0f 90       	pop	r0
    3580:	0f 90       	pop	r0
    3582:	cf 91       	pop	r28
    3584:	df 91       	pop	r29
    3586:	08 95       	ret

00003588 <__vector_1>:

void __vector_1(void) {
    3588:	1f 92       	push	r1
    358a:	0f 92       	push	r0
    358c:	0f b6       	in	r0, 0x3f	; 63
    358e:	0f 92       	push	r0
    3590:	11 24       	eor	r1, r1
    3592:	2f 93       	push	r18
    3594:	3f 93       	push	r19
    3596:	4f 93       	push	r20
    3598:	5f 93       	push	r21
    359a:	6f 93       	push	r22
    359c:	7f 93       	push	r23
    359e:	8f 93       	push	r24
    35a0:	9f 93       	push	r25
    35a2:	af 93       	push	r26
    35a4:	bf 93       	push	r27
    35a6:	ef 93       	push	r30
    35a8:	ff 93       	push	r31
    35aa:	df 93       	push	r29
    35ac:	cf 93       	push	r28
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
	if (gptr[0] != NULL) {
    35b2:	80 91 b1 00 	lds	r24, 0x00B1
    35b6:	90 91 b2 00 	lds	r25, 0x00B2
    35ba:	00 97       	sbiw	r24, 0x00	; 0
    35bc:	41 f0       	breq	.+16     	; 0x35ce <__vector_1+0x46>
		gptr[0]();
    35be:	e0 91 b1 00 	lds	r30, 0x00B1
    35c2:	f0 91 b2 00 	lds	r31, 0x00B2
    35c6:	09 95       	icall
		EXTI_voidClearFlag(EXTI_LINE0);
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <EXTI_voidClearFlag>
	}
}
    35ce:	cf 91       	pop	r28
    35d0:	df 91       	pop	r29
    35d2:	ff 91       	pop	r31
    35d4:	ef 91       	pop	r30
    35d6:	bf 91       	pop	r27
    35d8:	af 91       	pop	r26
    35da:	9f 91       	pop	r25
    35dc:	8f 91       	pop	r24
    35de:	7f 91       	pop	r23
    35e0:	6f 91       	pop	r22
    35e2:	5f 91       	pop	r21
    35e4:	4f 91       	pop	r20
    35e6:	3f 91       	pop	r19
    35e8:	2f 91       	pop	r18
    35ea:	0f 90       	pop	r0
    35ec:	0f be       	out	0x3f, r0	; 63
    35ee:	0f 90       	pop	r0
    35f0:	1f 90       	pop	r1
    35f2:	18 95       	reti

000035f4 <__vector_2>:

void __vector_2(void) {
    35f4:	1f 92       	push	r1
    35f6:	0f 92       	push	r0
    35f8:	0f b6       	in	r0, 0x3f	; 63
    35fa:	0f 92       	push	r0
    35fc:	11 24       	eor	r1, r1
    35fe:	2f 93       	push	r18
    3600:	3f 93       	push	r19
    3602:	4f 93       	push	r20
    3604:	5f 93       	push	r21
    3606:	6f 93       	push	r22
    3608:	7f 93       	push	r23
    360a:	8f 93       	push	r24
    360c:	9f 93       	push	r25
    360e:	af 93       	push	r26
    3610:	bf 93       	push	r27
    3612:	ef 93       	push	r30
    3614:	ff 93       	push	r31
    3616:	df 93       	push	r29
    3618:	cf 93       	push	r28
    361a:	cd b7       	in	r28, 0x3d	; 61
    361c:	de b7       	in	r29, 0x3e	; 62
	if (gptr[1] != NULL) {
    361e:	80 91 b3 00 	lds	r24, 0x00B3
    3622:	90 91 b4 00 	lds	r25, 0x00B4
    3626:	00 97       	sbiw	r24, 0x00	; 0
    3628:	41 f0       	breq	.+16     	; 0x363a <__vector_2+0x46>
		gptr[1]();
    362a:	e0 91 b3 00 	lds	r30, 0x00B3
    362e:	f0 91 b4 00 	lds	r31, 0x00B4
    3632:	09 95       	icall
		EXTI_voidClearFlag(EXTI_LINE1);
    3634:	81 e0       	ldi	r24, 0x01	; 1
    3636:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <EXTI_voidClearFlag>
	}
}
    363a:	cf 91       	pop	r28
    363c:	df 91       	pop	r29
    363e:	ff 91       	pop	r31
    3640:	ef 91       	pop	r30
    3642:	bf 91       	pop	r27
    3644:	af 91       	pop	r26
    3646:	9f 91       	pop	r25
    3648:	8f 91       	pop	r24
    364a:	7f 91       	pop	r23
    364c:	6f 91       	pop	r22
    364e:	5f 91       	pop	r21
    3650:	4f 91       	pop	r20
    3652:	3f 91       	pop	r19
    3654:	2f 91       	pop	r18
    3656:	0f 90       	pop	r0
    3658:	0f be       	out	0x3f, r0	; 63
    365a:	0f 90       	pop	r0
    365c:	1f 90       	pop	r1
    365e:	18 95       	reti

00003660 <__vector_3>:

void __vector_3(void) {
    3660:	1f 92       	push	r1
    3662:	0f 92       	push	r0
    3664:	0f b6       	in	r0, 0x3f	; 63
    3666:	0f 92       	push	r0
    3668:	11 24       	eor	r1, r1
    366a:	2f 93       	push	r18
    366c:	3f 93       	push	r19
    366e:	4f 93       	push	r20
    3670:	5f 93       	push	r21
    3672:	6f 93       	push	r22
    3674:	7f 93       	push	r23
    3676:	8f 93       	push	r24
    3678:	9f 93       	push	r25
    367a:	af 93       	push	r26
    367c:	bf 93       	push	r27
    367e:	ef 93       	push	r30
    3680:	ff 93       	push	r31
    3682:	df 93       	push	r29
    3684:	cf 93       	push	r28
    3686:	cd b7       	in	r28, 0x3d	; 61
    3688:	de b7       	in	r29, 0x3e	; 62
	if (gptr[2] != NULL) {
    368a:	80 91 b5 00 	lds	r24, 0x00B5
    368e:	90 91 b6 00 	lds	r25, 0x00B6
    3692:	00 97       	sbiw	r24, 0x00	; 0
    3694:	41 f0       	breq	.+16     	; 0x36a6 <__vector_3+0x46>
		gptr[2]();
    3696:	e0 91 b5 00 	lds	r30, 0x00B5
    369a:	f0 91 b6 00 	lds	r31, 0x00B6
    369e:	09 95       	icall
		EXTI_voidClearFlag(EXTI_LINE2);
    36a0:	82 e0       	ldi	r24, 0x02	; 2
    36a2:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <EXTI_voidClearFlag>

	}
}
    36a6:	cf 91       	pop	r28
    36a8:	df 91       	pop	r29
    36aa:	ff 91       	pop	r31
    36ac:	ef 91       	pop	r30
    36ae:	bf 91       	pop	r27
    36b0:	af 91       	pop	r26
    36b2:	9f 91       	pop	r25
    36b4:	8f 91       	pop	r24
    36b6:	7f 91       	pop	r23
    36b8:	6f 91       	pop	r22
    36ba:	5f 91       	pop	r21
    36bc:	4f 91       	pop	r20
    36be:	3f 91       	pop	r19
    36c0:	2f 91       	pop	r18
    36c2:	0f 90       	pop	r0
    36c4:	0f be       	out	0x3f, r0	; 63
    36c6:	0f 90       	pop	r0
    36c8:	1f 90       	pop	r1
    36ca:	18 95       	reti

000036cc <Dio_enuWriteChannel>:
#include"../includes/DIO_prv.h"
#include"../includes/DIO_cfg.h" //THIS FILE IS INCLUDED INCASE THE DRIVER IS CONFIGURABLE IN THE FUTURE.

/*Channel is the pin */

Dio_EnumErrorState  Dio_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    36cc:	df 93       	push	r29
    36ce:	cf 93       	push	r28
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
    36d4:	2f 97       	sbiw	r28, 0x0f	; 15
    36d6:	0f b6       	in	r0, 0x3f	; 63
    36d8:	f8 94       	cli
    36da:	de bf       	out	0x3e, r29	; 62
    36dc:	0f be       	out	0x3f, r0	; 63
    36de:	cd bf       	out	0x3d, r28	; 61
    36e0:	8c 83       	std	Y+4, r24	; 0x04
    36e2:	6d 83       	std	Y+5, r22	; 0x05
	Dio_EnumErrorState LOCEnumReturnState = Dio_Ok;
    36e4:	1b 82       	std	Y+3, r1	; 0x03
	u8 LOC_u8Port;
	u8 LOC_u8Pin;
	if (Copy_u8ChannelId > DIO_u8MAXNUMBER_OF_PINS){
    36e6:	8c 81       	ldd	r24, Y+4	; 0x04
    36e8:	80 32       	cpi	r24, 0x20	; 32
    36ea:	18 f0       	brcs	.+6      	; 0x36f2 <Dio_enuWriteChannel+0x26>
		LOCEnumReturnState =Dio_ChannelError;
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	8b 83       	std	Y+3, r24	; 0x03
    36f0:	6b c1       	rjmp	.+726    	; 0x39c8 <Dio_enuWriteChannel+0x2fc>
	}
	else if(Copy_u8Level>DIO_u8MAXNUMBER_OF_LEVELS){
    36f2:	8d 81       	ldd	r24, Y+5	; 0x05
    36f4:	82 30       	cpi	r24, 0x02	; 2
    36f6:	18 f0       	brcs	.+6      	; 0x36fe <Dio_enuWriteChannel+0x32>
		LOCEnumReturnState= Dio_LevelError;
    36f8:	82 e0       	ldi	r24, 0x02	; 2
    36fa:	8b 83       	std	Y+3, r24	; 0x03
    36fc:	65 c1       	rjmp	.+714    	; 0x39c8 <Dio_enuWriteChannel+0x2fc>
	}
	else{
		LOC_u8Port = Copy_u8ChannelId / DIO_u8REGISTER_SIZE;
    36fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3700:	86 95       	lsr	r24
    3702:	86 95       	lsr	r24
    3704:	86 95       	lsr	r24
    3706:	8a 83       	std	Y+2, r24	; 0x02
		LOC_u8Pin = Copy_u8ChannelId % DIO_u8REGISTER_SIZE;
    3708:	8c 81       	ldd	r24, Y+4	; 0x04
    370a:	87 70       	andi	r24, 0x07	; 7
    370c:	89 83       	std	Y+1, r24	; 0x01


	switch (LOC_u8Port) {
    370e:	8a 81       	ldd	r24, Y+2	; 0x02
    3710:	28 2f       	mov	r18, r24
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	3f 87       	std	Y+15, r19	; 0x0f
    3716:	2e 87       	std	Y+14, r18	; 0x0e
    3718:	4e 85       	ldd	r20, Y+14	; 0x0e
    371a:	5f 85       	ldd	r21, Y+15	; 0x0f
    371c:	41 30       	cpi	r20, 0x01	; 1
    371e:	51 05       	cpc	r21, r1
    3720:	09 f4       	brne	.+2      	; 0x3724 <Dio_enuWriteChannel+0x58>
    3722:	67 c0       	rjmp	.+206    	; 0x37f2 <Dio_enuWriteChannel+0x126>
    3724:	8e 85       	ldd	r24, Y+14	; 0x0e
    3726:	9f 85       	ldd	r25, Y+15	; 0x0f
    3728:	82 30       	cpi	r24, 0x02	; 2
    372a:	91 05       	cpc	r25, r1
    372c:	34 f4       	brge	.+12     	; 0x373a <Dio_enuWriteChannel+0x6e>
    372e:	2e 85       	ldd	r18, Y+14	; 0x0e
    3730:	3f 85       	ldd	r19, Y+15	; 0x0f
    3732:	21 15       	cp	r18, r1
    3734:	31 05       	cpc	r19, r1
    3736:	71 f0       	breq	.+28     	; 0x3754 <Dio_enuWriteChannel+0x88>
    3738:	47 c1       	rjmp	.+654    	; 0x39c8 <Dio_enuWriteChannel+0x2fc>
    373a:	4e 85       	ldd	r20, Y+14	; 0x0e
    373c:	5f 85       	ldd	r21, Y+15	; 0x0f
    373e:	42 30       	cpi	r20, 0x02	; 2
    3740:	51 05       	cpc	r21, r1
    3742:	09 f4       	brne	.+2      	; 0x3746 <Dio_enuWriteChannel+0x7a>
    3744:	a5 c0       	rjmp	.+330    	; 0x3890 <Dio_enuWriteChannel+0x1c4>
    3746:	8e 85       	ldd	r24, Y+14	; 0x0e
    3748:	9f 85       	ldd	r25, Y+15	; 0x0f
    374a:	83 30       	cpi	r24, 0x03	; 3
    374c:	91 05       	cpc	r25, r1
    374e:	09 f4       	brne	.+2      	; 0x3752 <Dio_enuWriteChannel+0x86>
    3750:	ee c0       	rjmp	.+476    	; 0x392e <Dio_enuWriteChannel+0x262>
    3752:	3a c1       	rjmp	.+628    	; 0x39c8 <Dio_enuWriteChannel+0x2fc>

			case DIO_u8PORTA:
				if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
    3754:	ea e3       	ldi	r30, 0x3A	; 58
    3756:	f0 e0       	ldi	r31, 0x00	; 0
    3758:	80 81       	ld	r24, Z
    375a:	28 2f       	mov	r18, r24
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	89 81       	ldd	r24, Y+1	; 0x01
    3760:	88 2f       	mov	r24, r24
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	a9 01       	movw	r20, r18
    3766:	02 c0       	rjmp	.+4      	; 0x376c <Dio_enuWriteChannel+0xa0>
    3768:	55 95       	asr	r21
    376a:	47 95       	ror	r20
    376c:	8a 95       	dec	r24
    376e:	e2 f7       	brpl	.-8      	; 0x3768 <Dio_enuWriteChannel+0x9c>
    3770:	ca 01       	movw	r24, r20
    3772:	81 70       	andi	r24, 0x01	; 1
    3774:	90 70       	andi	r25, 0x00	; 0
    3776:	88 23       	and	r24, r24
    3778:	c9 f1       	breq	.+114    	; 0x37ec <Dio_enuWriteChannel+0x120>
					switch (Copy_u8Level) {
    377a:	8d 81       	ldd	r24, Y+5	; 0x05
    377c:	28 2f       	mov	r18, r24
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	3d 87       	std	Y+13, r19	; 0x0d
    3782:	2c 87       	std	Y+12, r18	; 0x0c
    3784:	4c 85       	ldd	r20, Y+12	; 0x0c
    3786:	5d 85       	ldd	r21, Y+13	; 0x0d
    3788:	41 15       	cp	r20, r1
    378a:	51 05       	cpc	r21, r1
    378c:	d1 f0       	breq	.+52     	; 0x37c2 <Dio_enuWriteChannel+0xf6>
    378e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3790:	9d 85       	ldd	r25, Y+13	; 0x0d
    3792:	81 30       	cpi	r24, 0x01	; 1
    3794:	91 05       	cpc	r25, r1
    3796:	09 f0       	breq	.+2      	; 0x379a <Dio_enuWriteChannel+0xce>
    3798:	17 c1       	rjmp	.+558    	; 0x39c8 <Dio_enuWriteChannel+0x2fc>

					case DIO_u8LEVEL_HIGH:
						SET_BIT(PORTA, LOC_u8Pin);
    379a:	ab e3       	ldi	r26, 0x3B	; 59
    379c:	b0 e0       	ldi	r27, 0x00	; 0
    379e:	eb e3       	ldi	r30, 0x3B	; 59
    37a0:	f0 e0       	ldi	r31, 0x00	; 0
    37a2:	80 81       	ld	r24, Z
    37a4:	48 2f       	mov	r20, r24
    37a6:	89 81       	ldd	r24, Y+1	; 0x01
    37a8:	28 2f       	mov	r18, r24
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	02 2e       	mov	r0, r18
    37b2:	02 c0       	rjmp	.+4      	; 0x37b8 <Dio_enuWriteChannel+0xec>
    37b4:	88 0f       	add	r24, r24
    37b6:	99 1f       	adc	r25, r25
    37b8:	0a 94       	dec	r0
    37ba:	e2 f7       	brpl	.-8      	; 0x37b4 <Dio_enuWriteChannel+0xe8>
    37bc:	84 2b       	or	r24, r20
    37be:	8c 93       	st	X, r24
    37c0:	03 c1       	rjmp	.+518    	; 0x39c8 <Dio_enuWriteChannel+0x2fc>
						break;

					case DIO_u8LEVEL_LOW:
						CLR_BIT(PORTA, LOC_u8Pin);
    37c2:	ab e3       	ldi	r26, 0x3B	; 59
    37c4:	b0 e0       	ldi	r27, 0x00	; 0
    37c6:	eb e3       	ldi	r30, 0x3B	; 59
    37c8:	f0 e0       	ldi	r31, 0x00	; 0
    37ca:	80 81       	ld	r24, Z
    37cc:	48 2f       	mov	r20, r24
    37ce:	89 81       	ldd	r24, Y+1	; 0x01
    37d0:	28 2f       	mov	r18, r24
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	81 e0       	ldi	r24, 0x01	; 1
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	02 2e       	mov	r0, r18
    37da:	02 c0       	rjmp	.+4      	; 0x37e0 <Dio_enuWriteChannel+0x114>
    37dc:	88 0f       	add	r24, r24
    37de:	99 1f       	adc	r25, r25
    37e0:	0a 94       	dec	r0
    37e2:	e2 f7       	brpl	.-8      	; 0x37dc <Dio_enuWriteChannel+0x110>
    37e4:	80 95       	com	r24
    37e6:	84 23       	and	r24, r20
    37e8:	8c 93       	st	X, r24
    37ea:	ee c0       	rjmp	.+476    	; 0x39c8 <Dio_enuWriteChannel+0x2fc>
						break;

					}
				} else {
					LOCEnumReturnState = Dio_DirectionError;
    37ec:	83 e0       	ldi	r24, 0x03	; 3
    37ee:	8b 83       	std	Y+3, r24	; 0x03
    37f0:	eb c0       	rjmp	.+470    	; 0x39c8 <Dio_enuWriteChannel+0x2fc>
				}
				break;
			case DIO_u8PORTB:
							if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
    37f2:	e7 e3       	ldi	r30, 0x37	; 55
    37f4:	f0 e0       	ldi	r31, 0x00	; 0
    37f6:	80 81       	ld	r24, Z
    37f8:	28 2f       	mov	r18, r24
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	89 81       	ldd	r24, Y+1	; 0x01
    37fe:	88 2f       	mov	r24, r24
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	a9 01       	movw	r20, r18
    3804:	02 c0       	rjmp	.+4      	; 0x380a <Dio_enuWriteChannel+0x13e>
    3806:	55 95       	asr	r21
    3808:	47 95       	ror	r20
    380a:	8a 95       	dec	r24
    380c:	e2 f7       	brpl	.-8      	; 0x3806 <Dio_enuWriteChannel+0x13a>
    380e:	ca 01       	movw	r24, r20
    3810:	81 70       	andi	r24, 0x01	; 1
    3812:	90 70       	andi	r25, 0x00	; 0
    3814:	88 23       	and	r24, r24
    3816:	c9 f1       	breq	.+114    	; 0x388a <Dio_enuWriteChannel+0x1be>
								switch (Copy_u8Level) {
    3818:	8d 81       	ldd	r24, Y+5	; 0x05
    381a:	28 2f       	mov	r18, r24
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	3b 87       	std	Y+11, r19	; 0x0b
    3820:	2a 87       	std	Y+10, r18	; 0x0a
    3822:	4a 85       	ldd	r20, Y+10	; 0x0a
    3824:	5b 85       	ldd	r21, Y+11	; 0x0b
    3826:	41 15       	cp	r20, r1
    3828:	51 05       	cpc	r21, r1
    382a:	d1 f0       	breq	.+52     	; 0x3860 <Dio_enuWriteChannel+0x194>
    382c:	8a 85       	ldd	r24, Y+10	; 0x0a
    382e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3830:	81 30       	cpi	r24, 0x01	; 1
    3832:	91 05       	cpc	r25, r1
    3834:	09 f0       	breq	.+2      	; 0x3838 <Dio_enuWriteChannel+0x16c>
    3836:	c8 c0       	rjmp	.+400    	; 0x39c8 <Dio_enuWriteChannel+0x2fc>

								case DIO_u8LEVEL_HIGH:
									SET_BIT(PORTB, LOC_u8Pin);
    3838:	a8 e3       	ldi	r26, 0x38	; 56
    383a:	b0 e0       	ldi	r27, 0x00	; 0
    383c:	e8 e3       	ldi	r30, 0x38	; 56
    383e:	f0 e0       	ldi	r31, 0x00	; 0
    3840:	80 81       	ld	r24, Z
    3842:	48 2f       	mov	r20, r24
    3844:	89 81       	ldd	r24, Y+1	; 0x01
    3846:	28 2f       	mov	r18, r24
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	02 2e       	mov	r0, r18
    3850:	02 c0       	rjmp	.+4      	; 0x3856 <Dio_enuWriteChannel+0x18a>
    3852:	88 0f       	add	r24, r24
    3854:	99 1f       	adc	r25, r25
    3856:	0a 94       	dec	r0
    3858:	e2 f7       	brpl	.-8      	; 0x3852 <Dio_enuWriteChannel+0x186>
    385a:	84 2b       	or	r24, r20
    385c:	8c 93       	st	X, r24
    385e:	b4 c0       	rjmp	.+360    	; 0x39c8 <Dio_enuWriteChannel+0x2fc>
									break;

								case DIO_u8LEVEL_LOW:
									CLR_BIT(PORTB, LOC_u8Pin);
    3860:	a8 e3       	ldi	r26, 0x38	; 56
    3862:	b0 e0       	ldi	r27, 0x00	; 0
    3864:	e8 e3       	ldi	r30, 0x38	; 56
    3866:	f0 e0       	ldi	r31, 0x00	; 0
    3868:	80 81       	ld	r24, Z
    386a:	48 2f       	mov	r20, r24
    386c:	89 81       	ldd	r24, Y+1	; 0x01
    386e:	28 2f       	mov	r18, r24
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	02 2e       	mov	r0, r18
    3878:	02 c0       	rjmp	.+4      	; 0x387e <Dio_enuWriteChannel+0x1b2>
    387a:	88 0f       	add	r24, r24
    387c:	99 1f       	adc	r25, r25
    387e:	0a 94       	dec	r0
    3880:	e2 f7       	brpl	.-8      	; 0x387a <Dio_enuWriteChannel+0x1ae>
    3882:	80 95       	com	r24
    3884:	84 23       	and	r24, r20
    3886:	8c 93       	st	X, r24
    3888:	9f c0       	rjmp	.+318    	; 0x39c8 <Dio_enuWriteChannel+0x2fc>
									break;

								}
							} else {
								LOCEnumReturnState = Dio_DirectionError;
    388a:	83 e0       	ldi	r24, 0x03	; 3
    388c:	8b 83       	std	Y+3, r24	; 0x03
    388e:	9c c0       	rjmp	.+312    	; 0x39c8 <Dio_enuWriteChannel+0x2fc>
							}
							break;

			case DIO_u8PORTC:
							if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
    3890:	e4 e3       	ldi	r30, 0x34	; 52
    3892:	f0 e0       	ldi	r31, 0x00	; 0
    3894:	80 81       	ld	r24, Z
    3896:	28 2f       	mov	r18, r24
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	89 81       	ldd	r24, Y+1	; 0x01
    389c:	88 2f       	mov	r24, r24
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	a9 01       	movw	r20, r18
    38a2:	02 c0       	rjmp	.+4      	; 0x38a8 <Dio_enuWriteChannel+0x1dc>
    38a4:	55 95       	asr	r21
    38a6:	47 95       	ror	r20
    38a8:	8a 95       	dec	r24
    38aa:	e2 f7       	brpl	.-8      	; 0x38a4 <Dio_enuWriteChannel+0x1d8>
    38ac:	ca 01       	movw	r24, r20
    38ae:	81 70       	andi	r24, 0x01	; 1
    38b0:	90 70       	andi	r25, 0x00	; 0
    38b2:	88 23       	and	r24, r24
    38b4:	c9 f1       	breq	.+114    	; 0x3928 <Dio_enuWriteChannel+0x25c>
								switch (Copy_u8Level) {
    38b6:	8d 81       	ldd	r24, Y+5	; 0x05
    38b8:	28 2f       	mov	r18, r24
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	39 87       	std	Y+9, r19	; 0x09
    38be:	28 87       	std	Y+8, r18	; 0x08
    38c0:	48 85       	ldd	r20, Y+8	; 0x08
    38c2:	59 85       	ldd	r21, Y+9	; 0x09
    38c4:	41 15       	cp	r20, r1
    38c6:	51 05       	cpc	r21, r1
    38c8:	d1 f0       	breq	.+52     	; 0x38fe <Dio_enuWriteChannel+0x232>
    38ca:	88 85       	ldd	r24, Y+8	; 0x08
    38cc:	99 85       	ldd	r25, Y+9	; 0x09
    38ce:	81 30       	cpi	r24, 0x01	; 1
    38d0:	91 05       	cpc	r25, r1
    38d2:	09 f0       	breq	.+2      	; 0x38d6 <Dio_enuWriteChannel+0x20a>
    38d4:	79 c0       	rjmp	.+242    	; 0x39c8 <Dio_enuWriteChannel+0x2fc>

								case DIO_u8LEVEL_HIGH:
									SET_BIT(PORTC, LOC_u8Pin);
    38d6:	a5 e3       	ldi	r26, 0x35	; 53
    38d8:	b0 e0       	ldi	r27, 0x00	; 0
    38da:	e5 e3       	ldi	r30, 0x35	; 53
    38dc:	f0 e0       	ldi	r31, 0x00	; 0
    38de:	80 81       	ld	r24, Z
    38e0:	48 2f       	mov	r20, r24
    38e2:	89 81       	ldd	r24, Y+1	; 0x01
    38e4:	28 2f       	mov	r18, r24
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	02 2e       	mov	r0, r18
    38ee:	02 c0       	rjmp	.+4      	; 0x38f4 <Dio_enuWriteChannel+0x228>
    38f0:	88 0f       	add	r24, r24
    38f2:	99 1f       	adc	r25, r25
    38f4:	0a 94       	dec	r0
    38f6:	e2 f7       	brpl	.-8      	; 0x38f0 <Dio_enuWriteChannel+0x224>
    38f8:	84 2b       	or	r24, r20
    38fa:	8c 93       	st	X, r24
    38fc:	65 c0       	rjmp	.+202    	; 0x39c8 <Dio_enuWriteChannel+0x2fc>
									break;

								case DIO_u8LEVEL_LOW:
									CLR_BIT(PORTC, LOC_u8Pin);
    38fe:	a5 e3       	ldi	r26, 0x35	; 53
    3900:	b0 e0       	ldi	r27, 0x00	; 0
    3902:	e5 e3       	ldi	r30, 0x35	; 53
    3904:	f0 e0       	ldi	r31, 0x00	; 0
    3906:	80 81       	ld	r24, Z
    3908:	48 2f       	mov	r20, r24
    390a:	89 81       	ldd	r24, Y+1	; 0x01
    390c:	28 2f       	mov	r18, r24
    390e:	30 e0       	ldi	r19, 0x00	; 0
    3910:	81 e0       	ldi	r24, 0x01	; 1
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	02 2e       	mov	r0, r18
    3916:	02 c0       	rjmp	.+4      	; 0x391c <Dio_enuWriteChannel+0x250>
    3918:	88 0f       	add	r24, r24
    391a:	99 1f       	adc	r25, r25
    391c:	0a 94       	dec	r0
    391e:	e2 f7       	brpl	.-8      	; 0x3918 <Dio_enuWriteChannel+0x24c>
    3920:	80 95       	com	r24
    3922:	84 23       	and	r24, r20
    3924:	8c 93       	st	X, r24
    3926:	50 c0       	rjmp	.+160    	; 0x39c8 <Dio_enuWriteChannel+0x2fc>
									break;

								}
							} else {
								LOCEnumReturnState = Dio_DirectionError;
    3928:	83 e0       	ldi	r24, 0x03	; 3
    392a:	8b 83       	std	Y+3, r24	; 0x03
    392c:	4d c0       	rjmp	.+154    	; 0x39c8 <Dio_enuWriteChannel+0x2fc>
							}
							break;
			case DIO_u8PORTD:
							if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
    392e:	e1 e3       	ldi	r30, 0x31	; 49
    3930:	f0 e0       	ldi	r31, 0x00	; 0
    3932:	80 81       	ld	r24, Z
    3934:	28 2f       	mov	r18, r24
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	89 81       	ldd	r24, Y+1	; 0x01
    393a:	88 2f       	mov	r24, r24
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	a9 01       	movw	r20, r18
    3940:	02 c0       	rjmp	.+4      	; 0x3946 <Dio_enuWriteChannel+0x27a>
    3942:	55 95       	asr	r21
    3944:	47 95       	ror	r20
    3946:	8a 95       	dec	r24
    3948:	e2 f7       	brpl	.-8      	; 0x3942 <Dio_enuWriteChannel+0x276>
    394a:	ca 01       	movw	r24, r20
    394c:	81 70       	andi	r24, 0x01	; 1
    394e:	90 70       	andi	r25, 0x00	; 0
    3950:	88 23       	and	r24, r24
    3952:	c1 f1       	breq	.+112    	; 0x39c4 <Dio_enuWriteChannel+0x2f8>
								switch (Copy_u8Level) {
    3954:	8d 81       	ldd	r24, Y+5	; 0x05
    3956:	28 2f       	mov	r18, r24
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	3f 83       	std	Y+7, r19	; 0x07
    395c:	2e 83       	std	Y+6, r18	; 0x06
    395e:	4e 81       	ldd	r20, Y+6	; 0x06
    3960:	5f 81       	ldd	r21, Y+7	; 0x07
    3962:	41 15       	cp	r20, r1
    3964:	51 05       	cpc	r21, r1
    3966:	c9 f0       	breq	.+50     	; 0x399a <Dio_enuWriteChannel+0x2ce>
    3968:	8e 81       	ldd	r24, Y+6	; 0x06
    396a:	9f 81       	ldd	r25, Y+7	; 0x07
    396c:	81 30       	cpi	r24, 0x01	; 1
    396e:	91 05       	cpc	r25, r1
    3970:	59 f5       	brne	.+86     	; 0x39c8 <Dio_enuWriteChannel+0x2fc>

								case DIO_u8LEVEL_HIGH:
									SET_BIT(PORTD, LOC_u8Pin);
    3972:	a2 e3       	ldi	r26, 0x32	; 50
    3974:	b0 e0       	ldi	r27, 0x00	; 0
    3976:	e2 e3       	ldi	r30, 0x32	; 50
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	80 81       	ld	r24, Z
    397c:	48 2f       	mov	r20, r24
    397e:	89 81       	ldd	r24, Y+1	; 0x01
    3980:	28 2f       	mov	r18, r24
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	02 2e       	mov	r0, r18
    398a:	02 c0       	rjmp	.+4      	; 0x3990 <Dio_enuWriteChannel+0x2c4>
    398c:	88 0f       	add	r24, r24
    398e:	99 1f       	adc	r25, r25
    3990:	0a 94       	dec	r0
    3992:	e2 f7       	brpl	.-8      	; 0x398c <Dio_enuWriteChannel+0x2c0>
    3994:	84 2b       	or	r24, r20
    3996:	8c 93       	st	X, r24
    3998:	17 c0       	rjmp	.+46     	; 0x39c8 <Dio_enuWriteChannel+0x2fc>
									break;

								case DIO_u8LEVEL_LOW:
									CLR_BIT(PORTD, LOC_u8Pin);
    399a:	a2 e3       	ldi	r26, 0x32	; 50
    399c:	b0 e0       	ldi	r27, 0x00	; 0
    399e:	e2 e3       	ldi	r30, 0x32	; 50
    39a0:	f0 e0       	ldi	r31, 0x00	; 0
    39a2:	80 81       	ld	r24, Z
    39a4:	48 2f       	mov	r20, r24
    39a6:	89 81       	ldd	r24, Y+1	; 0x01
    39a8:	28 2f       	mov	r18, r24
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	02 2e       	mov	r0, r18
    39b2:	02 c0       	rjmp	.+4      	; 0x39b8 <Dio_enuWriteChannel+0x2ec>
    39b4:	88 0f       	add	r24, r24
    39b6:	99 1f       	adc	r25, r25
    39b8:	0a 94       	dec	r0
    39ba:	e2 f7       	brpl	.-8      	; 0x39b4 <Dio_enuWriteChannel+0x2e8>
    39bc:	80 95       	com	r24
    39be:	84 23       	and	r24, r20
    39c0:	8c 93       	st	X, r24
    39c2:	02 c0       	rjmp	.+4      	; 0x39c8 <Dio_enuWriteChannel+0x2fc>
									break;

								}
							} else {
								LOCEnumReturnState = Dio_DirectionError;
    39c4:	83 e0       	ldi	r24, 0x03	; 3
    39c6:	8b 83       	std	Y+3, r24	; 0x03
							}
							break;
	}
	}
return LOCEnumReturnState;
    39c8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    39ca:	2f 96       	adiw	r28, 0x0f	; 15
    39cc:	0f b6       	in	r0, 0x3f	; 63
    39ce:	f8 94       	cli
    39d0:	de bf       	out	0x3e, r29	; 62
    39d2:	0f be       	out	0x3f, r0	; 63
    39d4:	cd bf       	out	0x3d, r28	; 61
    39d6:	cf 91       	pop	r28
    39d8:	df 91       	pop	r29
    39da:	08 95       	ret

000039dc <Dio_enuReadChannel>:
Dio_EnumErrorState  Dio_enuReadChannel(u8 Copy_u8ChannelId , pu8 Add_pu8ChannelLevel){
    39dc:	df 93       	push	r29
    39de:	cf 93       	push	r28
    39e0:	cd b7       	in	r28, 0x3d	; 61
    39e2:	de b7       	in	r29, 0x3e	; 62
    39e4:	28 97       	sbiw	r28, 0x08	; 8
    39e6:	0f b6       	in	r0, 0x3f	; 63
    39e8:	f8 94       	cli
    39ea:	de bf       	out	0x3e, r29	; 62
    39ec:	0f be       	out	0x3f, r0	; 63
    39ee:	cd bf       	out	0x3d, r28	; 61
    39f0:	8c 83       	std	Y+4, r24	; 0x04
    39f2:	7e 83       	std	Y+6, r23	; 0x06
    39f4:	6d 83       	std	Y+5, r22	; 0x05

	Dio_EnumErrorState LOCEnumReturnState = Dio_Ok;
    39f6:	1b 82       	std	Y+3, r1	; 0x03
		u8 LOC_u8Pin;
		u8 LOC_u8Port;
	if (Add_pu8ChannelLevel== NULL){
    39f8:	8d 81       	ldd	r24, Y+5	; 0x05
    39fa:	9e 81       	ldd	r25, Y+6	; 0x06
    39fc:	00 97       	sbiw	r24, 0x00	; 0
    39fe:	19 f4       	brne	.+6      	; 0x3a06 <Dio_enuReadChannel+0x2a>
		LOCEnumReturnState =Dio_NullPointerError;
    3a00:	84 e0       	ldi	r24, 0x04	; 4
    3a02:	8b 83       	std	Y+3, r24	; 0x03
    3a04:	d8 c0       	rjmp	.+432    	; 0x3bb6 <Dio_enuReadChannel+0x1da>
	}
	else if (Copy_u8ChannelId > DIO_u8MAXNUMBER_OF_PINS){
    3a06:	8c 81       	ldd	r24, Y+4	; 0x04
    3a08:	80 32       	cpi	r24, 0x20	; 32
    3a0a:	18 f0       	brcs	.+6      	; 0x3a12 <Dio_enuReadChannel+0x36>
		LOCEnumReturnState =Dio_ChannelError;
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	8b 83       	std	Y+3, r24	; 0x03
    3a10:	d2 c0       	rjmp	.+420    	; 0x3bb6 <Dio_enuReadChannel+0x1da>
	}
	else{

		LOC_u8Port = Copy_u8ChannelId / DIO_u8REGISTER_SIZE;
    3a12:	8c 81       	ldd	r24, Y+4	; 0x04
    3a14:	86 95       	lsr	r24
    3a16:	86 95       	lsr	r24
    3a18:	86 95       	lsr	r24
    3a1a:	89 83       	std	Y+1, r24	; 0x01
		LOC_u8Pin = Copy_u8ChannelId % DIO_u8REGISTER_SIZE;
    3a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a1e:	87 70       	andi	r24, 0x07	; 7
    3a20:	8a 83       	std	Y+2, r24	; 0x02

		switch (LOC_u8Port){
    3a22:	89 81       	ldd	r24, Y+1	; 0x01
    3a24:	28 2f       	mov	r18, r24
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	38 87       	std	Y+8, r19	; 0x08
    3a2a:	2f 83       	std	Y+7, r18	; 0x07
    3a2c:	4f 81       	ldd	r20, Y+7	; 0x07
    3a2e:	58 85       	ldd	r21, Y+8	; 0x08
    3a30:	41 30       	cpi	r20, 0x01	; 1
    3a32:	51 05       	cpc	r21, r1
    3a34:	09 f4       	brne	.+2      	; 0x3a38 <Dio_enuReadChannel+0x5c>
    3a36:	42 c0       	rjmp	.+132    	; 0x3abc <Dio_enuReadChannel+0xe0>
    3a38:	8f 81       	ldd	r24, Y+7	; 0x07
    3a3a:	98 85       	ldd	r25, Y+8	; 0x08
    3a3c:	82 30       	cpi	r24, 0x02	; 2
    3a3e:	91 05       	cpc	r25, r1
    3a40:	34 f4       	brge	.+12     	; 0x3a4e <Dio_enuReadChannel+0x72>
    3a42:	2f 81       	ldd	r18, Y+7	; 0x07
    3a44:	38 85       	ldd	r19, Y+8	; 0x08
    3a46:	21 15       	cp	r18, r1
    3a48:	31 05       	cpc	r19, r1
    3a4a:	71 f0       	breq	.+28     	; 0x3a68 <Dio_enuReadChannel+0x8c>
    3a4c:	b4 c0       	rjmp	.+360    	; 0x3bb6 <Dio_enuReadChannel+0x1da>
    3a4e:	4f 81       	ldd	r20, Y+7	; 0x07
    3a50:	58 85       	ldd	r21, Y+8	; 0x08
    3a52:	42 30       	cpi	r20, 0x02	; 2
    3a54:	51 05       	cpc	r21, r1
    3a56:	09 f4       	brne	.+2      	; 0x3a5a <Dio_enuReadChannel+0x7e>
    3a58:	5b c0       	rjmp	.+182    	; 0x3b10 <Dio_enuReadChannel+0x134>
    3a5a:	8f 81       	ldd	r24, Y+7	; 0x07
    3a5c:	98 85       	ldd	r25, Y+8	; 0x08
    3a5e:	83 30       	cpi	r24, 0x03	; 3
    3a60:	91 05       	cpc	r25, r1
    3a62:	09 f4       	brne	.+2      	; 0x3a66 <Dio_enuReadChannel+0x8a>
    3a64:	7f c0       	rjmp	.+254    	; 0x3b64 <Dio_enuReadChannel+0x188>
    3a66:	a7 c0       	rjmp	.+334    	; 0x3bb6 <Dio_enuReadChannel+0x1da>
		case DIO_u8PORTA :
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8INPUT) {
    3a68:	ea e3       	ldi	r30, 0x3A	; 58
    3a6a:	f0 e0       	ldi	r31, 0x00	; 0
    3a6c:	80 81       	ld	r24, Z
    3a6e:	28 2f       	mov	r18, r24
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	8a 81       	ldd	r24, Y+2	; 0x02
    3a74:	88 2f       	mov	r24, r24
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	a9 01       	movw	r20, r18
    3a7a:	02 c0       	rjmp	.+4      	; 0x3a80 <Dio_enuReadChannel+0xa4>
    3a7c:	55 95       	asr	r21
    3a7e:	47 95       	ror	r20
    3a80:	8a 95       	dec	r24
    3a82:	e2 f7       	brpl	.-8      	; 0x3a7c <Dio_enuReadChannel+0xa0>
    3a84:	ca 01       	movw	r24, r20
    3a86:	81 70       	andi	r24, 0x01	; 1
    3a88:	90 70       	andi	r25, 0x00	; 0
    3a8a:	00 97       	sbiw	r24, 0x00	; 0
    3a8c:	a1 f4       	brne	.+40     	; 0x3ab6 <Dio_enuReadChannel+0xda>

					*Add_pu8ChannelLevel = GET_BIT(PINA, LOC_u8Pin);
    3a8e:	e9 e3       	ldi	r30, 0x39	; 57
    3a90:	f0 e0       	ldi	r31, 0x00	; 0
    3a92:	80 81       	ld	r24, Z
    3a94:	28 2f       	mov	r18, r24
    3a96:	30 e0       	ldi	r19, 0x00	; 0
    3a98:	8a 81       	ldd	r24, Y+2	; 0x02
    3a9a:	88 2f       	mov	r24, r24
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	a9 01       	movw	r20, r18
    3aa0:	02 c0       	rjmp	.+4      	; 0x3aa6 <Dio_enuReadChannel+0xca>
    3aa2:	55 95       	asr	r21
    3aa4:	47 95       	ror	r20
    3aa6:	8a 95       	dec	r24
    3aa8:	e2 f7       	brpl	.-8      	; 0x3aa2 <Dio_enuReadChannel+0xc6>
    3aaa:	ca 01       	movw	r24, r20
    3aac:	81 70       	andi	r24, 0x01	; 1
    3aae:	ed 81       	ldd	r30, Y+5	; 0x05
    3ab0:	fe 81       	ldd	r31, Y+6	; 0x06
    3ab2:	80 83       	st	Z, r24
    3ab4:	80 c0       	rjmp	.+256    	; 0x3bb6 <Dio_enuReadChannel+0x1da>
				}
			else {
							LOCEnumReturnState = Dio_DirectionError;
    3ab6:	83 e0       	ldi	r24, 0x03	; 3
    3ab8:	8b 83       	std	Y+3, r24	; 0x03
    3aba:	7d c0       	rjmp	.+250    	; 0x3bb6 <Dio_enuReadChannel+0x1da>
						}
						break;
		case DIO_u8PORTB :
					if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8INPUT) {
    3abc:	e7 e3       	ldi	r30, 0x37	; 55
    3abe:	f0 e0       	ldi	r31, 0x00	; 0
    3ac0:	80 81       	ld	r24, Z
    3ac2:	28 2f       	mov	r18, r24
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac8:	88 2f       	mov	r24, r24
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	a9 01       	movw	r20, r18
    3ace:	02 c0       	rjmp	.+4      	; 0x3ad4 <Dio_enuReadChannel+0xf8>
    3ad0:	55 95       	asr	r21
    3ad2:	47 95       	ror	r20
    3ad4:	8a 95       	dec	r24
    3ad6:	e2 f7       	brpl	.-8      	; 0x3ad0 <Dio_enuReadChannel+0xf4>
    3ad8:	ca 01       	movw	r24, r20
    3ada:	81 70       	andi	r24, 0x01	; 1
    3adc:	90 70       	andi	r25, 0x00	; 0
    3ade:	00 97       	sbiw	r24, 0x00	; 0
    3ae0:	a1 f4       	brne	.+40     	; 0x3b0a <Dio_enuReadChannel+0x12e>

							*Add_pu8ChannelLevel = GET_BIT(PINB, LOC_u8Pin);
    3ae2:	e6 e3       	ldi	r30, 0x36	; 54
    3ae4:	f0 e0       	ldi	r31, 0x00	; 0
    3ae6:	80 81       	ld	r24, Z
    3ae8:	28 2f       	mov	r18, r24
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	8a 81       	ldd	r24, Y+2	; 0x02
    3aee:	88 2f       	mov	r24, r24
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	a9 01       	movw	r20, r18
    3af4:	02 c0       	rjmp	.+4      	; 0x3afa <Dio_enuReadChannel+0x11e>
    3af6:	55 95       	asr	r21
    3af8:	47 95       	ror	r20
    3afa:	8a 95       	dec	r24
    3afc:	e2 f7       	brpl	.-8      	; 0x3af6 <Dio_enuReadChannel+0x11a>
    3afe:	ca 01       	movw	r24, r20
    3b00:	81 70       	andi	r24, 0x01	; 1
    3b02:	ed 81       	ldd	r30, Y+5	; 0x05
    3b04:	fe 81       	ldd	r31, Y+6	; 0x06
    3b06:	80 83       	st	Z, r24
    3b08:	56 c0       	rjmp	.+172    	; 0x3bb6 <Dio_enuReadChannel+0x1da>
						}
					else {
									LOCEnumReturnState = Dio_DirectionError;
    3b0a:	83 e0       	ldi	r24, 0x03	; 3
    3b0c:	8b 83       	std	Y+3, r24	; 0x03
    3b0e:	53 c0       	rjmp	.+166    	; 0x3bb6 <Dio_enuReadChannel+0x1da>
								}
								break;
		case DIO_u8PORTC :
					if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8INPUT) {
    3b10:	e4 e3       	ldi	r30, 0x34	; 52
    3b12:	f0 e0       	ldi	r31, 0x00	; 0
    3b14:	80 81       	ld	r24, Z
    3b16:	28 2f       	mov	r18, r24
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b1c:	88 2f       	mov	r24, r24
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	a9 01       	movw	r20, r18
    3b22:	02 c0       	rjmp	.+4      	; 0x3b28 <Dio_enuReadChannel+0x14c>
    3b24:	55 95       	asr	r21
    3b26:	47 95       	ror	r20
    3b28:	8a 95       	dec	r24
    3b2a:	e2 f7       	brpl	.-8      	; 0x3b24 <Dio_enuReadChannel+0x148>
    3b2c:	ca 01       	movw	r24, r20
    3b2e:	81 70       	andi	r24, 0x01	; 1
    3b30:	90 70       	andi	r25, 0x00	; 0
    3b32:	00 97       	sbiw	r24, 0x00	; 0
    3b34:	a1 f4       	brne	.+40     	; 0x3b5e <Dio_enuReadChannel+0x182>

							*Add_pu8ChannelLevel = GET_BIT(PINC, LOC_u8Pin);
    3b36:	e3 e3       	ldi	r30, 0x33	; 51
    3b38:	f0 e0       	ldi	r31, 0x00	; 0
    3b3a:	80 81       	ld	r24, Z
    3b3c:	28 2f       	mov	r18, r24
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	8a 81       	ldd	r24, Y+2	; 0x02
    3b42:	88 2f       	mov	r24, r24
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	a9 01       	movw	r20, r18
    3b48:	02 c0       	rjmp	.+4      	; 0x3b4e <Dio_enuReadChannel+0x172>
    3b4a:	55 95       	asr	r21
    3b4c:	47 95       	ror	r20
    3b4e:	8a 95       	dec	r24
    3b50:	e2 f7       	brpl	.-8      	; 0x3b4a <Dio_enuReadChannel+0x16e>
    3b52:	ca 01       	movw	r24, r20
    3b54:	81 70       	andi	r24, 0x01	; 1
    3b56:	ed 81       	ldd	r30, Y+5	; 0x05
    3b58:	fe 81       	ldd	r31, Y+6	; 0x06
    3b5a:	80 83       	st	Z, r24
    3b5c:	2c c0       	rjmp	.+88     	; 0x3bb6 <Dio_enuReadChannel+0x1da>
						}
					else {
									LOCEnumReturnState = Dio_DirectionError;
    3b5e:	83 e0       	ldi	r24, 0x03	; 3
    3b60:	8b 83       	std	Y+3, r24	; 0x03
    3b62:	29 c0       	rjmp	.+82     	; 0x3bb6 <Dio_enuReadChannel+0x1da>
								}
								break;

		case DIO_u8PORTD :
					if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8INPUT) {
    3b64:	e1 e3       	ldi	r30, 0x31	; 49
    3b66:	f0 e0       	ldi	r31, 0x00	; 0
    3b68:	80 81       	ld	r24, Z
    3b6a:	28 2f       	mov	r18, r24
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b70:	88 2f       	mov	r24, r24
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	a9 01       	movw	r20, r18
    3b76:	02 c0       	rjmp	.+4      	; 0x3b7c <Dio_enuReadChannel+0x1a0>
    3b78:	55 95       	asr	r21
    3b7a:	47 95       	ror	r20
    3b7c:	8a 95       	dec	r24
    3b7e:	e2 f7       	brpl	.-8      	; 0x3b78 <Dio_enuReadChannel+0x19c>
    3b80:	ca 01       	movw	r24, r20
    3b82:	81 70       	andi	r24, 0x01	; 1
    3b84:	90 70       	andi	r25, 0x00	; 0
    3b86:	00 97       	sbiw	r24, 0x00	; 0
    3b88:	a1 f4       	brne	.+40     	; 0x3bb2 <Dio_enuReadChannel+0x1d6>

							*Add_pu8ChannelLevel = GET_BIT(PIND, LOC_u8Pin);
    3b8a:	e0 e3       	ldi	r30, 0x30	; 48
    3b8c:	f0 e0       	ldi	r31, 0x00	; 0
    3b8e:	80 81       	ld	r24, Z
    3b90:	28 2f       	mov	r18, r24
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	8a 81       	ldd	r24, Y+2	; 0x02
    3b96:	88 2f       	mov	r24, r24
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	a9 01       	movw	r20, r18
    3b9c:	02 c0       	rjmp	.+4      	; 0x3ba2 <Dio_enuReadChannel+0x1c6>
    3b9e:	55 95       	asr	r21
    3ba0:	47 95       	ror	r20
    3ba2:	8a 95       	dec	r24
    3ba4:	e2 f7       	brpl	.-8      	; 0x3b9e <Dio_enuReadChannel+0x1c2>
    3ba6:	ca 01       	movw	r24, r20
    3ba8:	81 70       	andi	r24, 0x01	; 1
    3baa:	ed 81       	ldd	r30, Y+5	; 0x05
    3bac:	fe 81       	ldd	r31, Y+6	; 0x06
    3bae:	80 83       	st	Z, r24
    3bb0:	02 c0       	rjmp	.+4      	; 0x3bb6 <Dio_enuReadChannel+0x1da>
						}
					else {
									LOCEnumReturnState = Dio_DirectionError;
    3bb2:	83 e0       	ldi	r24, 0x03	; 3
    3bb4:	8b 83       	std	Y+3, r24	; 0x03


		}
	}

return LOCEnumReturnState;
    3bb6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3bb8:	28 96       	adiw	r28, 0x08	; 8
    3bba:	0f b6       	in	r0, 0x3f	; 63
    3bbc:	f8 94       	cli
    3bbe:	de bf       	out	0x3e, r29	; 62
    3bc0:	0f be       	out	0x3f, r0	; 63
    3bc2:	cd bf       	out	0x3d, r28	; 61
    3bc4:	cf 91       	pop	r28
    3bc6:	df 91       	pop	r29
    3bc8:	08 95       	ret

00003bca <Dio_enuWritePort>:
Dio_EnumErrorState  Dio_enuWritePort(u8 Copy_u8PortId , u8 Copy_u8Value){
    3bca:	df 93       	push	r29
    3bcc:	cf 93       	push	r28
    3bce:	00 d0       	rcall	.+0      	; 0x3bd0 <Dio_enuWritePort+0x6>
    3bd0:	00 d0       	rcall	.+0      	; 0x3bd2 <Dio_enuWritePort+0x8>
    3bd2:	0f 92       	push	r0
    3bd4:	cd b7       	in	r28, 0x3d	; 61
    3bd6:	de b7       	in	r29, 0x3e	; 62
    3bd8:	8a 83       	std	Y+2, r24	; 0x02
    3bda:	6b 83       	std	Y+3, r22	; 0x03
	Dio_EnumErrorState LOCEnumReturnState = Dio_Ok;
    3bdc:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortId > DIO_u8MAXNUMBER_OF_PORTS ){
    3bde:	8a 81       	ldd	r24, Y+2	; 0x02
    3be0:	84 30       	cpi	r24, 0x04	; 4
    3be2:	18 f0       	brcs	.+6      	; 0x3bea <Dio_enuWritePort+0x20>
		LOCEnumReturnState = Dio_PortRangeError;
    3be4:	85 e0       	ldi	r24, 0x05	; 5
    3be6:	89 83       	std	Y+1, r24	; 0x01
    3be8:	32 c0       	rjmp	.+100    	; 0x3c4e <Dio_enuWritePort+0x84>
	}
	else {
		switch (Copy_u8PortId){
    3bea:	8a 81       	ldd	r24, Y+2	; 0x02
    3bec:	28 2f       	mov	r18, r24
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	3d 83       	std	Y+5, r19	; 0x05
    3bf2:	2c 83       	std	Y+4, r18	; 0x04
    3bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    3bf6:	9d 81       	ldd	r25, Y+5	; 0x05
    3bf8:	81 30       	cpi	r24, 0x01	; 1
    3bfa:	91 05       	cpc	r25, r1
    3bfc:	d1 f0       	breq	.+52     	; 0x3c32 <Dio_enuWritePort+0x68>
    3bfe:	2c 81       	ldd	r18, Y+4	; 0x04
    3c00:	3d 81       	ldd	r19, Y+5	; 0x05
    3c02:	22 30       	cpi	r18, 0x02	; 2
    3c04:	31 05       	cpc	r19, r1
    3c06:	2c f4       	brge	.+10     	; 0x3c12 <Dio_enuWritePort+0x48>
    3c08:	8c 81       	ldd	r24, Y+4	; 0x04
    3c0a:	9d 81       	ldd	r25, Y+5	; 0x05
    3c0c:	00 97       	sbiw	r24, 0x00	; 0
    3c0e:	61 f0       	breq	.+24     	; 0x3c28 <Dio_enuWritePort+0x5e>
    3c10:	1e c0       	rjmp	.+60     	; 0x3c4e <Dio_enuWritePort+0x84>
    3c12:	2c 81       	ldd	r18, Y+4	; 0x04
    3c14:	3d 81       	ldd	r19, Y+5	; 0x05
    3c16:	22 30       	cpi	r18, 0x02	; 2
    3c18:	31 05       	cpc	r19, r1
    3c1a:	81 f0       	breq	.+32     	; 0x3c3c <Dio_enuWritePort+0x72>
    3c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    3c1e:	9d 81       	ldd	r25, Y+5	; 0x05
    3c20:	83 30       	cpi	r24, 0x03	; 3
    3c22:	91 05       	cpc	r25, r1
    3c24:	81 f0       	breq	.+32     	; 0x3c46 <Dio_enuWritePort+0x7c>
    3c26:	13 c0       	rjmp	.+38     	; 0x3c4e <Dio_enuWritePort+0x84>
			case DIO_u8PORTA:
							ASSIGN_REG(PORTA, Copy_u8Value);
    3c28:	eb e3       	ldi	r30, 0x3B	; 59
    3c2a:	f0 e0       	ldi	r31, 0x00	; 0
    3c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c2e:	80 83       	st	Z, r24
    3c30:	0e c0       	rjmp	.+28     	; 0x3c4e <Dio_enuWritePort+0x84>
							break;
			case DIO_u8PORTB:
							ASSIGN_REG(PORTB, Copy_u8Value);
    3c32:	e8 e3       	ldi	r30, 0x38	; 56
    3c34:	f0 e0       	ldi	r31, 0x00	; 0
    3c36:	8b 81       	ldd	r24, Y+3	; 0x03
    3c38:	80 83       	st	Z, r24
    3c3a:	09 c0       	rjmp	.+18     	; 0x3c4e <Dio_enuWritePort+0x84>
							break;
			case DIO_u8PORTC:
							ASSIGN_REG(PORTC, Copy_u8Value);
    3c3c:	e5 e3       	ldi	r30, 0x35	; 53
    3c3e:	f0 e0       	ldi	r31, 0x00	; 0
    3c40:	8b 81       	ldd	r24, Y+3	; 0x03
    3c42:	80 83       	st	Z, r24
    3c44:	04 c0       	rjmp	.+8      	; 0x3c4e <Dio_enuWritePort+0x84>
							break;
			case DIO_u8PORTD:
						ASSIGN_REG(PORTD, Copy_u8Value);
    3c46:	e2 e3       	ldi	r30, 0x32	; 50
    3c48:	f0 e0       	ldi	r31, 0x00	; 0
    3c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4c:	80 83       	st	Z, r24


	}

}
	return LOCEnumReturnState;
    3c4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c50:	0f 90       	pop	r0
    3c52:	0f 90       	pop	r0
    3c54:	0f 90       	pop	r0
    3c56:	0f 90       	pop	r0
    3c58:	0f 90       	pop	r0
    3c5a:	cf 91       	pop	r28
    3c5c:	df 91       	pop	r29
    3c5e:	08 95       	ret

00003c60 <Dio_enuReadPort>:
Dio_EnumErrorState  Dio_enuReadPort(u8 Copy_u8PortId , pu8 Add_pu8PortValue){
    3c60:	df 93       	push	r29
    3c62:	cf 93       	push	r28
    3c64:	00 d0       	rcall	.+0      	; 0x3c66 <Dio_enuReadPort+0x6>
    3c66:	00 d0       	rcall	.+0      	; 0x3c68 <Dio_enuReadPort+0x8>
    3c68:	00 d0       	rcall	.+0      	; 0x3c6a <Dio_enuReadPort+0xa>
    3c6a:	cd b7       	in	r28, 0x3d	; 61
    3c6c:	de b7       	in	r29, 0x3e	; 62
    3c6e:	8a 83       	std	Y+2, r24	; 0x02
    3c70:	7c 83       	std	Y+4, r23	; 0x04
    3c72:	6b 83       	std	Y+3, r22	; 0x03
	Dio_EnumErrorState LOCEnumReturnState = Dio_Ok;
    3c74:	19 82       	std	Y+1, r1	; 0x01
		if (Copy_u8PortId > DIO_u8MAXNUMBER_OF_PORTS ){
    3c76:	8a 81       	ldd	r24, Y+2	; 0x02
    3c78:	84 30       	cpi	r24, 0x04	; 4
    3c7a:	10 f0       	brcs	.+4      	; 0x3c80 <Dio_enuReadPort+0x20>
			LOCEnumReturnState = Dio_PortRangeError;
    3c7c:	85 e0       	ldi	r24, 0x05	; 5
    3c7e:	89 83       	std	Y+1, r24	; 0x01
		}
		if(Add_pu8PortValue == NULL){
    3c80:	8b 81       	ldd	r24, Y+3	; 0x03
    3c82:	9c 81       	ldd	r25, Y+4	; 0x04
    3c84:	00 97       	sbiw	r24, 0x00	; 0
    3c86:	19 f4       	brne	.+6      	; 0x3c8e <Dio_enuReadPort+0x2e>
			LOCEnumReturnState = Dio_NullPointerError;
    3c88:	84 e0       	ldi	r24, 0x04	; 4
    3c8a:	89 83       	std	Y+1, r24	; 0x01
    3c8c:	3a c0       	rjmp	.+116    	; 0x3d02 <Dio_enuReadPort+0xa2>
		}
		else {
			switch (Copy_u8PortId){
    3c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c90:	28 2f       	mov	r18, r24
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	3e 83       	std	Y+6, r19	; 0x06
    3c96:	2d 83       	std	Y+5, r18	; 0x05
    3c98:	8d 81       	ldd	r24, Y+5	; 0x05
    3c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c9c:	81 30       	cpi	r24, 0x01	; 1
    3c9e:	91 05       	cpc	r25, r1
    3ca0:	e1 f0       	breq	.+56     	; 0x3cda <Dio_enuReadPort+0x7a>
    3ca2:	2d 81       	ldd	r18, Y+5	; 0x05
    3ca4:	3e 81       	ldd	r19, Y+6	; 0x06
    3ca6:	22 30       	cpi	r18, 0x02	; 2
    3ca8:	31 05       	cpc	r19, r1
    3caa:	2c f4       	brge	.+10     	; 0x3cb6 <Dio_enuReadPort+0x56>
    3cac:	8d 81       	ldd	r24, Y+5	; 0x05
    3cae:	9e 81       	ldd	r25, Y+6	; 0x06
    3cb0:	00 97       	sbiw	r24, 0x00	; 0
    3cb2:	61 f0       	breq	.+24     	; 0x3ccc <Dio_enuReadPort+0x6c>
    3cb4:	26 c0       	rjmp	.+76     	; 0x3d02 <Dio_enuReadPort+0xa2>
    3cb6:	2d 81       	ldd	r18, Y+5	; 0x05
    3cb8:	3e 81       	ldd	r19, Y+6	; 0x06
    3cba:	22 30       	cpi	r18, 0x02	; 2
    3cbc:	31 05       	cpc	r19, r1
    3cbe:	a1 f0       	breq	.+40     	; 0x3ce8 <Dio_enuReadPort+0x88>
    3cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    3cc4:	83 30       	cpi	r24, 0x03	; 3
    3cc6:	91 05       	cpc	r25, r1
    3cc8:	b1 f0       	breq	.+44     	; 0x3cf6 <Dio_enuReadPort+0x96>
    3cca:	1b c0       	rjmp	.+54     	; 0x3d02 <Dio_enuReadPort+0xa2>
				case DIO_u8PORTA:
					*Add_pu8PortValue = PINA;
    3ccc:	e9 e3       	ldi	r30, 0x39	; 57
    3cce:	f0 e0       	ldi	r31, 0x00	; 0
    3cd0:	80 81       	ld	r24, Z
    3cd2:	eb 81       	ldd	r30, Y+3	; 0x03
    3cd4:	fc 81       	ldd	r31, Y+4	; 0x04
    3cd6:	80 83       	st	Z, r24
    3cd8:	14 c0       	rjmp	.+40     	; 0x3d02 <Dio_enuReadPort+0xa2>
								break;
				case DIO_u8PORTB:
					*Add_pu8PortValue = PINB;
    3cda:	e6 e3       	ldi	r30, 0x36	; 54
    3cdc:	f0 e0       	ldi	r31, 0x00	; 0
    3cde:	80 81       	ld	r24, Z
    3ce0:	eb 81       	ldd	r30, Y+3	; 0x03
    3ce2:	fc 81       	ldd	r31, Y+4	; 0x04
    3ce4:	80 83       	st	Z, r24
    3ce6:	0d c0       	rjmp	.+26     	; 0x3d02 <Dio_enuReadPort+0xa2>
								break;
				case DIO_u8PORTC:
					*Add_pu8PortValue = PINC;
    3ce8:	e3 e3       	ldi	r30, 0x33	; 51
    3cea:	f0 e0       	ldi	r31, 0x00	; 0
    3cec:	80 81       	ld	r24, Z
    3cee:	eb 81       	ldd	r30, Y+3	; 0x03
    3cf0:	fc 81       	ldd	r31, Y+4	; 0x04
    3cf2:	80 83       	st	Z, r24
    3cf4:	06 c0       	rjmp	.+12     	; 0x3d02 <Dio_enuReadPort+0xa2>
								break;
				case DIO_u8PORTD:
					*Add_pu8PortValue = PIND;
    3cf6:	e0 e3       	ldi	r30, 0x30	; 48
    3cf8:	f0 e0       	ldi	r31, 0x00	; 0
    3cfa:	80 81       	ld	r24, Z
    3cfc:	eb 81       	ldd	r30, Y+3	; 0x03
    3cfe:	fc 81       	ldd	r31, Y+4	; 0x04
    3d00:	80 83       	st	Z, r24


		}

	}
		return LOCEnumReturnState;
    3d02:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d04:	26 96       	adiw	r28, 0x06	; 6
    3d06:	0f b6       	in	r0, 0x3f	; 63
    3d08:	f8 94       	cli
    3d0a:	de bf       	out	0x3e, r29	; 62
    3d0c:	0f be       	out	0x3f, r0	; 63
    3d0e:	cd bf       	out	0x3d, r28	; 61
    3d10:	cf 91       	pop	r28
    3d12:	df 91       	pop	r29
    3d14:	08 95       	ret

00003d16 <Dio_enuFlipChannel>:
Dio_EnumErrorState  Dio_enuFlipChannel(u8 Copy_u8ChannelId ){
    3d16:	df 93       	push	r29
    3d18:	cf 93       	push	r28
    3d1a:	00 d0       	rcall	.+0      	; 0x3d1c <Dio_enuFlipChannel+0x6>
    3d1c:	00 d0       	rcall	.+0      	; 0x3d1e <Dio_enuFlipChannel+0x8>
    3d1e:	00 d0       	rcall	.+0      	; 0x3d20 <Dio_enuFlipChannel+0xa>
    3d20:	cd b7       	in	r28, 0x3d	; 61
    3d22:	de b7       	in	r29, 0x3e	; 62
    3d24:	8c 83       	std	Y+4, r24	; 0x04

	Dio_EnumErrorState LOCEnumReturnState = Dio_Ok;
    3d26:	1b 82       	std	Y+3, r1	; 0x03
		u8 LOC_u8Pin;
		u8 LOC_u8Port;
 if (Copy_u8ChannelId > DIO_u8MAXNUMBER_OF_PINS){
    3d28:	8c 81       	ldd	r24, Y+4	; 0x04
    3d2a:	80 32       	cpi	r24, 0x20	; 32
    3d2c:	18 f0       	brcs	.+6      	; 0x3d34 <Dio_enuFlipChannel+0x1e>
			LOCEnumReturnState =Dio_ChannelError;
    3d2e:	81 e0       	ldi	r24, 0x01	; 1
    3d30:	8b 83       	std	Y+3, r24	; 0x03
    3d32:	c8 c0       	rjmp	.+400    	; 0x3ec4 <Dio_enuFlipChannel+0x1ae>
		}
		else{
			LOC_u8Port = Copy_u8ChannelId / DIO_u8REGISTER_SIZE;
    3d34:	8c 81       	ldd	r24, Y+4	; 0x04
    3d36:	86 95       	lsr	r24
    3d38:	86 95       	lsr	r24
    3d3a:	86 95       	lsr	r24
    3d3c:	89 83       	std	Y+1, r24	; 0x01
			LOC_u8Pin = Copy_u8ChannelId % DIO_u8REGISTER_SIZE;
    3d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d40:	87 70       	andi	r24, 0x07	; 7
    3d42:	8a 83       	std	Y+2, r24	; 0x02
			switch (LOC_u8Port) {
    3d44:	89 81       	ldd	r24, Y+1	; 0x01
    3d46:	28 2f       	mov	r18, r24
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	3e 83       	std	Y+6, r19	; 0x06
    3d4c:	2d 83       	std	Y+5, r18	; 0x05
    3d4e:	4d 81       	ldd	r20, Y+5	; 0x05
    3d50:	5e 81       	ldd	r21, Y+6	; 0x06
    3d52:	41 30       	cpi	r20, 0x01	; 1
    3d54:	51 05       	cpc	r21, r1
    3d56:	09 f4       	brne	.+2      	; 0x3d5a <Dio_enuFlipChannel+0x44>
    3d58:	40 c0       	rjmp	.+128    	; 0x3dda <Dio_enuFlipChannel+0xc4>
    3d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d5e:	82 30       	cpi	r24, 0x02	; 2
    3d60:	91 05       	cpc	r25, r1
    3d62:	34 f4       	brge	.+12     	; 0x3d70 <Dio_enuFlipChannel+0x5a>
    3d64:	2d 81       	ldd	r18, Y+5	; 0x05
    3d66:	3e 81       	ldd	r19, Y+6	; 0x06
    3d68:	21 15       	cp	r18, r1
    3d6a:	31 05       	cpc	r19, r1
    3d6c:	71 f0       	breq	.+28     	; 0x3d8a <Dio_enuFlipChannel+0x74>
    3d6e:	aa c0       	rjmp	.+340    	; 0x3ec4 <Dio_enuFlipChannel+0x1ae>
    3d70:	4d 81       	ldd	r20, Y+5	; 0x05
    3d72:	5e 81       	ldd	r21, Y+6	; 0x06
    3d74:	42 30       	cpi	r20, 0x02	; 2
    3d76:	51 05       	cpc	r21, r1
    3d78:	09 f4       	brne	.+2      	; 0x3d7c <Dio_enuFlipChannel+0x66>
    3d7a:	57 c0       	rjmp	.+174    	; 0x3e2a <Dio_enuFlipChannel+0x114>
    3d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d80:	83 30       	cpi	r24, 0x03	; 3
    3d82:	91 05       	cpc	r25, r1
    3d84:	09 f4       	brne	.+2      	; 0x3d88 <Dio_enuFlipChannel+0x72>
    3d86:	78 c0       	rjmp	.+240    	; 0x3e78 <Dio_enuFlipChannel+0x162>
    3d88:	9d c0       	rjmp	.+314    	; 0x3ec4 <Dio_enuFlipChannel+0x1ae>

					case DIO_u8PORTA:
						if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
    3d8a:	ea e3       	ldi	r30, 0x3A	; 58
    3d8c:	f0 e0       	ldi	r31, 0x00	; 0
    3d8e:	80 81       	ld	r24, Z
    3d90:	28 2f       	mov	r18, r24
    3d92:	30 e0       	ldi	r19, 0x00	; 0
    3d94:	8a 81       	ldd	r24, Y+2	; 0x02
    3d96:	88 2f       	mov	r24, r24
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	a9 01       	movw	r20, r18
    3d9c:	02 c0       	rjmp	.+4      	; 0x3da2 <Dio_enuFlipChannel+0x8c>
    3d9e:	55 95       	asr	r21
    3da0:	47 95       	ror	r20
    3da2:	8a 95       	dec	r24
    3da4:	e2 f7       	brpl	.-8      	; 0x3d9e <Dio_enuFlipChannel+0x88>
    3da6:	ca 01       	movw	r24, r20
    3da8:	81 70       	andi	r24, 0x01	; 1
    3daa:	90 70       	andi	r25, 0x00	; 0
    3dac:	88 23       	and	r24, r24
    3dae:	09 f4       	brne	.+2      	; 0x3db2 <Dio_enuFlipChannel+0x9c>
    3db0:	89 c0       	rjmp	.+274    	; 0x3ec4 <Dio_enuFlipChannel+0x1ae>
							TGL_BIT(PORTA,LOC_u8Pin);
    3db2:	ab e3       	ldi	r26, 0x3B	; 59
    3db4:	b0 e0       	ldi	r27, 0x00	; 0
    3db6:	eb e3       	ldi	r30, 0x3B	; 59
    3db8:	f0 e0       	ldi	r31, 0x00	; 0
    3dba:	80 81       	ld	r24, Z
    3dbc:	48 2f       	mov	r20, r24
    3dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc0:	28 2f       	mov	r18, r24
    3dc2:	30 e0       	ldi	r19, 0x00	; 0
    3dc4:	81 e0       	ldi	r24, 0x01	; 1
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	02 2e       	mov	r0, r18
    3dca:	02 c0       	rjmp	.+4      	; 0x3dd0 <Dio_enuFlipChannel+0xba>
    3dcc:	88 0f       	add	r24, r24
    3dce:	99 1f       	adc	r25, r25
    3dd0:	0a 94       	dec	r0
    3dd2:	e2 f7       	brpl	.-8      	; 0x3dcc <Dio_enuFlipChannel+0xb6>
    3dd4:	84 27       	eor	r24, r20
    3dd6:	8c 93       	st	X, r24
    3dd8:	75 c0       	rjmp	.+234    	; 0x3ec4 <Dio_enuFlipChannel+0x1ae>

						}
						break;

					case DIO_u8PORTB:
						if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
    3dda:	e7 e3       	ldi	r30, 0x37	; 55
    3ddc:	f0 e0       	ldi	r31, 0x00	; 0
    3dde:	80 81       	ld	r24, Z
    3de0:	28 2f       	mov	r18, r24
    3de2:	30 e0       	ldi	r19, 0x00	; 0
    3de4:	8a 81       	ldd	r24, Y+2	; 0x02
    3de6:	88 2f       	mov	r24, r24
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	a9 01       	movw	r20, r18
    3dec:	02 c0       	rjmp	.+4      	; 0x3df2 <Dio_enuFlipChannel+0xdc>
    3dee:	55 95       	asr	r21
    3df0:	47 95       	ror	r20
    3df2:	8a 95       	dec	r24
    3df4:	e2 f7       	brpl	.-8      	; 0x3dee <Dio_enuFlipChannel+0xd8>
    3df6:	ca 01       	movw	r24, r20
    3df8:	81 70       	andi	r24, 0x01	; 1
    3dfa:	90 70       	andi	r25, 0x00	; 0
    3dfc:	88 23       	and	r24, r24
    3dfe:	09 f4       	brne	.+2      	; 0x3e02 <Dio_enuFlipChannel+0xec>
    3e00:	61 c0       	rjmp	.+194    	; 0x3ec4 <Dio_enuFlipChannel+0x1ae>
							TGL_BIT(PORTB,LOC_u8Pin);
    3e02:	a8 e3       	ldi	r26, 0x38	; 56
    3e04:	b0 e0       	ldi	r27, 0x00	; 0
    3e06:	e8 e3       	ldi	r30, 0x38	; 56
    3e08:	f0 e0       	ldi	r31, 0x00	; 0
    3e0a:	80 81       	ld	r24, Z
    3e0c:	48 2f       	mov	r20, r24
    3e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e10:	28 2f       	mov	r18, r24
    3e12:	30 e0       	ldi	r19, 0x00	; 0
    3e14:	81 e0       	ldi	r24, 0x01	; 1
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	02 2e       	mov	r0, r18
    3e1a:	02 c0       	rjmp	.+4      	; 0x3e20 <Dio_enuFlipChannel+0x10a>
    3e1c:	88 0f       	add	r24, r24
    3e1e:	99 1f       	adc	r25, r25
    3e20:	0a 94       	dec	r0
    3e22:	e2 f7       	brpl	.-8      	; 0x3e1c <Dio_enuFlipChannel+0x106>
    3e24:	84 27       	eor	r24, r20
    3e26:	8c 93       	st	X, r24
    3e28:	4d c0       	rjmp	.+154    	; 0x3ec4 <Dio_enuFlipChannel+0x1ae>
						}
						break;

					case DIO_u8PORTC:

						if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
    3e2a:	e4 e3       	ldi	r30, 0x34	; 52
    3e2c:	f0 e0       	ldi	r31, 0x00	; 0
    3e2e:	80 81       	ld	r24, Z
    3e30:	28 2f       	mov	r18, r24
    3e32:	30 e0       	ldi	r19, 0x00	; 0
    3e34:	8a 81       	ldd	r24, Y+2	; 0x02
    3e36:	88 2f       	mov	r24, r24
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	a9 01       	movw	r20, r18
    3e3c:	02 c0       	rjmp	.+4      	; 0x3e42 <Dio_enuFlipChannel+0x12c>
    3e3e:	55 95       	asr	r21
    3e40:	47 95       	ror	r20
    3e42:	8a 95       	dec	r24
    3e44:	e2 f7       	brpl	.-8      	; 0x3e3e <Dio_enuFlipChannel+0x128>
    3e46:	ca 01       	movw	r24, r20
    3e48:	81 70       	andi	r24, 0x01	; 1
    3e4a:	90 70       	andi	r25, 0x00	; 0
    3e4c:	88 23       	and	r24, r24
    3e4e:	d1 f1       	breq	.+116    	; 0x3ec4 <Dio_enuFlipChannel+0x1ae>
							TGL_BIT(PORTC,LOC_u8Pin);
    3e50:	a5 e3       	ldi	r26, 0x35	; 53
    3e52:	b0 e0       	ldi	r27, 0x00	; 0
    3e54:	e5 e3       	ldi	r30, 0x35	; 53
    3e56:	f0 e0       	ldi	r31, 0x00	; 0
    3e58:	80 81       	ld	r24, Z
    3e5a:	48 2f       	mov	r20, r24
    3e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e5e:	28 2f       	mov	r18, r24
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	81 e0       	ldi	r24, 0x01	; 1
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	02 2e       	mov	r0, r18
    3e68:	02 c0       	rjmp	.+4      	; 0x3e6e <Dio_enuFlipChannel+0x158>
    3e6a:	88 0f       	add	r24, r24
    3e6c:	99 1f       	adc	r25, r25
    3e6e:	0a 94       	dec	r0
    3e70:	e2 f7       	brpl	.-8      	; 0x3e6a <Dio_enuFlipChannel+0x154>
    3e72:	84 27       	eor	r24, r20
    3e74:	8c 93       	st	X, r24
    3e76:	26 c0       	rjmp	.+76     	; 0x3ec4 <Dio_enuFlipChannel+0x1ae>
						}
						break;

					case DIO_u8PORTD:

						if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
    3e78:	e1 e3       	ldi	r30, 0x31	; 49
    3e7a:	f0 e0       	ldi	r31, 0x00	; 0
    3e7c:	80 81       	ld	r24, Z
    3e7e:	28 2f       	mov	r18, r24
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	8a 81       	ldd	r24, Y+2	; 0x02
    3e84:	88 2f       	mov	r24, r24
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	a9 01       	movw	r20, r18
    3e8a:	02 c0       	rjmp	.+4      	; 0x3e90 <Dio_enuFlipChannel+0x17a>
    3e8c:	55 95       	asr	r21
    3e8e:	47 95       	ror	r20
    3e90:	8a 95       	dec	r24
    3e92:	e2 f7       	brpl	.-8      	; 0x3e8c <Dio_enuFlipChannel+0x176>
    3e94:	ca 01       	movw	r24, r20
    3e96:	81 70       	andi	r24, 0x01	; 1
    3e98:	90 70       	andi	r25, 0x00	; 0
    3e9a:	88 23       	and	r24, r24
    3e9c:	99 f0       	breq	.+38     	; 0x3ec4 <Dio_enuFlipChannel+0x1ae>
							TGL_BIT(PORTD,LOC_u8Pin);
    3e9e:	a2 e3       	ldi	r26, 0x32	; 50
    3ea0:	b0 e0       	ldi	r27, 0x00	; 0
    3ea2:	e2 e3       	ldi	r30, 0x32	; 50
    3ea4:	f0 e0       	ldi	r31, 0x00	; 0
    3ea6:	80 81       	ld	r24, Z
    3ea8:	48 2f       	mov	r20, r24
    3eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    3eac:	28 2f       	mov	r18, r24
    3eae:	30 e0       	ldi	r19, 0x00	; 0
    3eb0:	81 e0       	ldi	r24, 0x01	; 1
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	02 2e       	mov	r0, r18
    3eb6:	02 c0       	rjmp	.+4      	; 0x3ebc <Dio_enuFlipChannel+0x1a6>
    3eb8:	88 0f       	add	r24, r24
    3eba:	99 1f       	adc	r25, r25
    3ebc:	0a 94       	dec	r0
    3ebe:	e2 f7       	brpl	.-8      	; 0x3eb8 <Dio_enuFlipChannel+0x1a2>
    3ec0:	84 27       	eor	r24, r20
    3ec2:	8c 93       	st	X, r24
						}
						break;
			}

		}
	return LOCEnumReturnState;
    3ec4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3ec6:	26 96       	adiw	r28, 0x06	; 6
    3ec8:	0f b6       	in	r0, 0x3f	; 63
    3eca:	f8 94       	cli
    3ecc:	de bf       	out	0x3e, r29	; 62
    3ece:	0f be       	out	0x3f, r0	; 63
    3ed0:	cd bf       	out	0x3d, r28	; 61
    3ed2:	cf 91       	pop	r28
    3ed4:	df 91       	pop	r29
    3ed6:	08 95       	ret

00003ed8 <DIO_SetNibbleValue>:
Dio_EnumErrorState  DIO_SetNibbleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value){
    3ed8:	df 93       	push	r29
    3eda:	cf 93       	push	r28
    3edc:	cd b7       	in	r28, 0x3d	; 61
    3ede:	de b7       	in	r29, 0x3e	; 62
    3ee0:	27 97       	sbiw	r28, 0x07	; 7
    3ee2:	0f b6       	in	r0, 0x3f	; 63
    3ee4:	f8 94       	cli
    3ee6:	de bf       	out	0x3e, r29	; 62
    3ee8:	0f be       	out	0x3f, r0	; 63
    3eea:	cd bf       	out	0x3d, r28	; 61
    3eec:	8b 83       	std	Y+3, r24	; 0x03
    3eee:	6c 83       	std	Y+4, r22	; 0x04
    3ef0:	4d 83       	std	Y+5, r20	; 0x05
	Dio_EnumErrorState LOCEnumReturnState = Dio_Ok;
    3ef2:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8Value =Copy_u8Value;
    3ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ef6:	89 83       	std	Y+1, r24	; 0x01
		 Loc_u8Value=((Loc_u8Value&(0x0F))<<Copy_u8PinStart);
    3ef8:	89 81       	ldd	r24, Y+1	; 0x01
    3efa:	88 2f       	mov	r24, r24
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	9c 01       	movw	r18, r24
    3f00:	2f 70       	andi	r18, 0x0F	; 15
    3f02:	30 70       	andi	r19, 0x00	; 0
    3f04:	8b 81       	ldd	r24, Y+3	; 0x03
    3f06:	88 2f       	mov	r24, r24
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	a9 01       	movw	r20, r18
    3f0c:	02 c0       	rjmp	.+4      	; 0x3f12 <DIO_SetNibbleValue+0x3a>
    3f0e:	44 0f       	add	r20, r20
    3f10:	55 1f       	adc	r21, r21
    3f12:	8a 95       	dec	r24
    3f14:	e2 f7       	brpl	.-8      	; 0x3f0e <DIO_SetNibbleValue+0x36>
    3f16:	ca 01       	movw	r24, r20
    3f18:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PinStart<=4)&&(Copy_u8PinStart>=0)){
    3f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f1c:	85 30       	cpi	r24, 0x05	; 5
    3f1e:	08 f0       	brcs	.+2      	; 0x3f22 <DIO_SetNibbleValue+0x4a>
    3f20:	99 c0       	rjmp	.+306    	; 0x4054 <DIO_SetNibbleValue+0x17c>
		switch (Copy_u8PortNumber){
    3f22:	8c 81       	ldd	r24, Y+4	; 0x04
    3f24:	28 2f       	mov	r18, r24
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	3f 83       	std	Y+7, r19	; 0x07
    3f2a:	2e 83       	std	Y+6, r18	; 0x06
    3f2c:	4e 81       	ldd	r20, Y+6	; 0x06
    3f2e:	5f 81       	ldd	r21, Y+7	; 0x07
    3f30:	41 30       	cpi	r20, 0x01	; 1
    3f32:	51 05       	cpc	r21, r1
    3f34:	a9 f1       	breq	.+106    	; 0x3fa0 <DIO_SetNibbleValue+0xc8>
    3f36:	8e 81       	ldd	r24, Y+6	; 0x06
    3f38:	9f 81       	ldd	r25, Y+7	; 0x07
    3f3a:	82 30       	cpi	r24, 0x02	; 2
    3f3c:	91 05       	cpc	r25, r1
    3f3e:	34 f4       	brge	.+12     	; 0x3f4c <DIO_SetNibbleValue+0x74>
    3f40:	2e 81       	ldd	r18, Y+6	; 0x06
    3f42:	3f 81       	ldd	r19, Y+7	; 0x07
    3f44:	21 15       	cp	r18, r1
    3f46:	31 05       	cpc	r19, r1
    3f48:	71 f0       	breq	.+28     	; 0x3f66 <DIO_SetNibbleValue+0x8e>
    3f4a:	81 c0       	rjmp	.+258    	; 0x404e <DIO_SetNibbleValue+0x176>
    3f4c:	4e 81       	ldd	r20, Y+6	; 0x06
    3f4e:	5f 81       	ldd	r21, Y+7	; 0x07
    3f50:	42 30       	cpi	r20, 0x02	; 2
    3f52:	51 05       	cpc	r21, r1
    3f54:	09 f4       	brne	.+2      	; 0x3f58 <DIO_SetNibbleValue+0x80>
    3f56:	41 c0       	rjmp	.+130    	; 0x3fda <DIO_SetNibbleValue+0x102>
    3f58:	8e 81       	ldd	r24, Y+6	; 0x06
    3f5a:	9f 81       	ldd	r25, Y+7	; 0x07
    3f5c:	83 30       	cpi	r24, 0x03	; 3
    3f5e:	91 05       	cpc	r25, r1
    3f60:	09 f4       	brne	.+2      	; 0x3f64 <DIO_SetNibbleValue+0x8c>
    3f62:	58 c0       	rjmp	.+176    	; 0x4014 <DIO_SetNibbleValue+0x13c>
    3f64:	74 c0       	rjmp	.+232    	; 0x404e <DIO_SetNibbleValue+0x176>
		case DIO_u8PORTA :
			//mask port A
			PORTA&=(~((0x0F)<<Copy_u8PinStart));
    3f66:	ab e3       	ldi	r26, 0x3B	; 59
    3f68:	b0 e0       	ldi	r27, 0x00	; 0
    3f6a:	eb e3       	ldi	r30, 0x3B	; 59
    3f6c:	f0 e0       	ldi	r31, 0x00	; 0
    3f6e:	80 81       	ld	r24, Z
    3f70:	48 2f       	mov	r20, r24
    3f72:	8b 81       	ldd	r24, Y+3	; 0x03
    3f74:	28 2f       	mov	r18, r24
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	8f e0       	ldi	r24, 0x0F	; 15
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	02 2e       	mov	r0, r18
    3f7e:	02 c0       	rjmp	.+4      	; 0x3f84 <DIO_SetNibbleValue+0xac>
    3f80:	88 0f       	add	r24, r24
    3f82:	99 1f       	adc	r25, r25
    3f84:	0a 94       	dec	r0
    3f86:	e2 f7       	brpl	.-8      	; 0x3f80 <DIO_SetNibbleValue+0xa8>
    3f88:	80 95       	com	r24
    3f8a:	84 23       	and	r24, r20
    3f8c:	8c 93       	st	X, r24
			PORTA|=Loc_u8Value;
    3f8e:	ab e3       	ldi	r26, 0x3B	; 59
    3f90:	b0 e0       	ldi	r27, 0x00	; 0
    3f92:	eb e3       	ldi	r30, 0x3B	; 59
    3f94:	f0 e0       	ldi	r31, 0x00	; 0
    3f96:	90 81       	ld	r25, Z
    3f98:	89 81       	ldd	r24, Y+1	; 0x01
    3f9a:	89 2b       	or	r24, r25
    3f9c:	8c 93       	st	X, r24
    3f9e:	5c c0       	rjmp	.+184    	; 0x4058 <DIO_SetNibbleValue+0x180>
			break;
			case DIO_u8PORTB:
				PORTB&=(~(0X0F<<Copy_u8PinStart));
    3fa0:	a8 e3       	ldi	r26, 0x38	; 56
    3fa2:	b0 e0       	ldi	r27, 0x00	; 0
    3fa4:	e8 e3       	ldi	r30, 0x38	; 56
    3fa6:	f0 e0       	ldi	r31, 0x00	; 0
    3fa8:	80 81       	ld	r24, Z
    3faa:	48 2f       	mov	r20, r24
    3fac:	8b 81       	ldd	r24, Y+3	; 0x03
    3fae:	28 2f       	mov	r18, r24
    3fb0:	30 e0       	ldi	r19, 0x00	; 0
    3fb2:	8f e0       	ldi	r24, 0x0F	; 15
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	02 2e       	mov	r0, r18
    3fb8:	02 c0       	rjmp	.+4      	; 0x3fbe <DIO_SetNibbleValue+0xe6>
    3fba:	88 0f       	add	r24, r24
    3fbc:	99 1f       	adc	r25, r25
    3fbe:	0a 94       	dec	r0
    3fc0:	e2 f7       	brpl	.-8      	; 0x3fba <DIO_SetNibbleValue+0xe2>
    3fc2:	80 95       	com	r24
    3fc4:	84 23       	and	r24, r20
    3fc6:	8c 93       	st	X, r24
				PORTB|=Loc_u8Value;
    3fc8:	a8 e3       	ldi	r26, 0x38	; 56
    3fca:	b0 e0       	ldi	r27, 0x00	; 0
    3fcc:	e8 e3       	ldi	r30, 0x38	; 56
    3fce:	f0 e0       	ldi	r31, 0x00	; 0
    3fd0:	90 81       	ld	r25, Z
    3fd2:	89 81       	ldd	r24, Y+1	; 0x01
    3fd4:	89 2b       	or	r24, r25
    3fd6:	8c 93       	st	X, r24
    3fd8:	3f c0       	rjmp	.+126    	; 0x4058 <DIO_SetNibbleValue+0x180>
			break;
			case DIO_u8PORTC:
				PORTC&=(~(0X0F<<Copy_u8PinStart));
    3fda:	a5 e3       	ldi	r26, 0x35	; 53
    3fdc:	b0 e0       	ldi	r27, 0x00	; 0
    3fde:	e5 e3       	ldi	r30, 0x35	; 53
    3fe0:	f0 e0       	ldi	r31, 0x00	; 0
    3fe2:	80 81       	ld	r24, Z
    3fe4:	48 2f       	mov	r20, r24
    3fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe8:	28 2f       	mov	r18, r24
    3fea:	30 e0       	ldi	r19, 0x00	; 0
    3fec:	8f e0       	ldi	r24, 0x0F	; 15
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	02 2e       	mov	r0, r18
    3ff2:	02 c0       	rjmp	.+4      	; 0x3ff8 <DIO_SetNibbleValue+0x120>
    3ff4:	88 0f       	add	r24, r24
    3ff6:	99 1f       	adc	r25, r25
    3ff8:	0a 94       	dec	r0
    3ffa:	e2 f7       	brpl	.-8      	; 0x3ff4 <DIO_SetNibbleValue+0x11c>
    3ffc:	80 95       	com	r24
    3ffe:	84 23       	and	r24, r20
    4000:	8c 93       	st	X, r24
				PORTC|=Loc_u8Value;
    4002:	a5 e3       	ldi	r26, 0x35	; 53
    4004:	b0 e0       	ldi	r27, 0x00	; 0
    4006:	e5 e3       	ldi	r30, 0x35	; 53
    4008:	f0 e0       	ldi	r31, 0x00	; 0
    400a:	90 81       	ld	r25, Z
    400c:	89 81       	ldd	r24, Y+1	; 0x01
    400e:	89 2b       	or	r24, r25
    4010:	8c 93       	st	X, r24
    4012:	22 c0       	rjmp	.+68     	; 0x4058 <DIO_SetNibbleValue+0x180>
			break;
			case DIO_u8PORTD:
				PORTD&=(~(0X0F<<Copy_u8PinStart));
    4014:	a2 e3       	ldi	r26, 0x32	; 50
    4016:	b0 e0       	ldi	r27, 0x00	; 0
    4018:	e2 e3       	ldi	r30, 0x32	; 50
    401a:	f0 e0       	ldi	r31, 0x00	; 0
    401c:	80 81       	ld	r24, Z
    401e:	48 2f       	mov	r20, r24
    4020:	8b 81       	ldd	r24, Y+3	; 0x03
    4022:	28 2f       	mov	r18, r24
    4024:	30 e0       	ldi	r19, 0x00	; 0
    4026:	8f e0       	ldi	r24, 0x0F	; 15
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	02 2e       	mov	r0, r18
    402c:	02 c0       	rjmp	.+4      	; 0x4032 <DIO_SetNibbleValue+0x15a>
    402e:	88 0f       	add	r24, r24
    4030:	99 1f       	adc	r25, r25
    4032:	0a 94       	dec	r0
    4034:	e2 f7       	brpl	.-8      	; 0x402e <DIO_SetNibbleValue+0x156>
    4036:	80 95       	com	r24
    4038:	84 23       	and	r24, r20
    403a:	8c 93       	st	X, r24
				PORTD|=Loc_u8Value;
    403c:	a2 e3       	ldi	r26, 0x32	; 50
    403e:	b0 e0       	ldi	r27, 0x00	; 0
    4040:	e2 e3       	ldi	r30, 0x32	; 50
    4042:	f0 e0       	ldi	r31, 0x00	; 0
    4044:	90 81       	ld	r25, Z
    4046:	89 81       	ldd	r24, Y+1	; 0x01
    4048:	89 2b       	or	r24, r25
    404a:	8c 93       	st	X, r24
    404c:	05 c0       	rjmp	.+10     	; 0x4058 <DIO_SetNibbleValue+0x180>
			break;
			default:{
				LOCEnumReturnState= Dio_PortRangeError;
    404e:	85 e0       	ldi	r24, 0x05	; 5
    4050:	8a 83       	std	Y+2, r24	; 0x02
    4052:	02 c0       	rjmp	.+4      	; 0x4058 <DIO_SetNibbleValue+0x180>

		}
		}
		else{
			/*wrong PINStartNumber*/
			LOCEnumReturnState= Dio_ChannelError;
    4054:	81 e0       	ldi	r24, 0x01	; 1
    4056:	8a 83       	std	Y+2, r24	; 0x02
		}


return LOCEnumReturnState;
    4058:	8a 81       	ldd	r24, Y+2	; 0x02
}
    405a:	27 96       	adiw	r28, 0x07	; 7
    405c:	0f b6       	in	r0, 0x3f	; 63
    405e:	f8 94       	cli
    4060:	de bf       	out	0x3e, r29	; 62
    4062:	0f be       	out	0x3f, r0	; 63
    4064:	cd bf       	out	0x3d, r28	; 61
    4066:	cf 91       	pop	r28
    4068:	df 91       	pop	r29
    406a:	08 95       	ret

0000406c <ADC_Init>:
	 * 1-Set Channel
	 * 2-Start Conversion
	 * 3-Poll on ADIF flag
	 * 4-Return ADC value
	 */
void ADC_Init(void){
    406c:	df 93       	push	r29
    406e:	cf 93       	push	r28
    4070:	cd b7       	in	r28, 0x3d	; 61
    4072:	de b7       	in	r29, 0x3e	; 62
		//Set Vreference
	#if ADC_SET_VREF==VREF_AREF_PIN
		CLR_BIT(ADMUX,REFS0);
		CLR_BIT(ADMUX,REFS1);
	#elif ADC_SET_VREF==VREF_AVCC_PIN
		SET_BIT(ADMUX,REFS0);
    4074:	a7 e2       	ldi	r26, 0x27	; 39
    4076:	b0 e0       	ldi	r27, 0x00	; 0
    4078:	e7 e2       	ldi	r30, 0x27	; 39
    407a:	f0 e0       	ldi	r31, 0x00	; 0
    407c:	80 81       	ld	r24, Z
    407e:	80 64       	ori	r24, 0x40	; 64
    4080:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
    4082:	a7 e2       	ldi	r26, 0x27	; 39
    4084:	b0 e0       	ldi	r27, 0x00	; 0
    4086:	e7 e2       	ldi	r30, 0x27	; 39
    4088:	f0 e0       	ldi	r31, 0x00	; 0
    408a:	80 81       	ld	r24, Z
    408c:	8f 77       	andi	r24, 0x7F	; 127
    408e:	8c 93       	st	X, r24
	#elif ADC_SET_PRESCALAR==PRESCALER_DIVIDE_BY_4
	CLR_BIT(ADCSRA,ADPS0);
	SET_BIT(ADCSRA,ADPS1);
	CLR_BIT(ADCSRA,ADPS2);
	#elif ADC_SET_PRESCALAR==PRESCALER_DIVIDE_BY_8
	SET_BIT(ADCSRA,ADPS0);
    4090:	a6 e2       	ldi	r26, 0x26	; 38
    4092:	b0 e0       	ldi	r27, 0x00	; 0
    4094:	e6 e2       	ldi	r30, 0x26	; 38
    4096:	f0 e0       	ldi	r31, 0x00	; 0
    4098:	80 81       	ld	r24, Z
    409a:	81 60       	ori	r24, 0x01	; 1
    409c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
    409e:	a6 e2       	ldi	r26, 0x26	; 38
    40a0:	b0 e0       	ldi	r27, 0x00	; 0
    40a2:	e6 e2       	ldi	r30, 0x26	; 38
    40a4:	f0 e0       	ldi	r31, 0x00	; 0
    40a6:	80 81       	ld	r24, Z
    40a8:	82 60       	ori	r24, 0x02	; 2
    40aa:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADPS2);
    40ac:	a6 e2       	ldi	r26, 0x26	; 38
    40ae:	b0 e0       	ldi	r27, 0x00	; 0
    40b0:	e6 e2       	ldi	r30, 0x26	; 38
    40b2:	f0 e0       	ldi	r31, 0x00	; 0
    40b4:	80 81       	ld	r24, Z
    40b6:	8b 7f       	andi	r24, 0xFB	; 251
    40b8:	8c 93       	st	X, r24
	#error"Wrong Prescalar Chosen"
	#endif

	//RIGHT/Adjust
	#if ADC_SET_ADJUST_LEVEL==ADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,ADLAR);
    40ba:	a7 e2       	ldi	r26, 0x27	; 39
    40bc:	b0 e0       	ldi	r27, 0x00	; 0
    40be:	e7 e2       	ldi	r30, 0x27	; 39
    40c0:	f0 e0       	ldi	r31, 0x00	; 0
    40c2:	80 81       	ld	r24, Z
    40c4:	8f 7d       	andi	r24, 0xDF	; 223
    40c6:	8c 93       	st	X, r24
	#elif ADC_SET_ADJUST_LEVEL==ADC_LEFT_ADJUST
	SET_BIT(ADMUX,ADLAR);
	#endif
	/*Enable ADC*/
	SET_BIT(ADCSRA,ADEN);
    40c8:	a6 e2       	ldi	r26, 0x26	; 38
    40ca:	b0 e0       	ldi	r27, 0x00	; 0
    40cc:	e6 e2       	ldi	r30, 0x26	; 38
    40ce:	f0 e0       	ldi	r31, 0x00	; 0
    40d0:	80 81       	ld	r24, Z
    40d2:	80 68       	ori	r24, 0x80	; 128
    40d4:	8c 93       	st	X, r24
	}
    40d6:	cf 91       	pop	r28
    40d8:	df 91       	pop	r29
    40da:	08 95       	ret

000040dc <ADC_StartConversion>:

u16 ADC_StartConversion(u8 Copy_u8ADC_Channel)
	{
    40dc:	df 93       	push	r29
    40de:	cf 93       	push	r28
    40e0:	00 d0       	rcall	.+0      	; 0x40e2 <ADC_StartConversion+0x6>
    40e2:	cd b7       	in	r28, 0x3d	; 61
    40e4:	de b7       	in	r29, 0x3e	; 62
    40e6:	8a 83       	std	Y+2, r24	; 0x02
		//Set Channel
		u8 Loc_u8ADC_Channel;
		 Loc_u8ADC_Channel =Copy_u8ADC_Channel&ADC_CHANNEL_INPUT_MASK;
    40e8:	8a 81       	ldd	r24, Y+2	; 0x02
    40ea:	8f 71       	andi	r24, 0x1F	; 31
    40ec:	89 83       	std	Y+1, r24	; 0x01
		ADMUX&=ADC_ADMUX_REG_MASK;
    40ee:	a7 e2       	ldi	r26, 0x27	; 39
    40f0:	b0 e0       	ldi	r27, 0x00	; 0
    40f2:	e7 e2       	ldi	r30, 0x27	; 39
    40f4:	f0 e0       	ldi	r31, 0x00	; 0
    40f6:	80 81       	ld	r24, Z
    40f8:	80 7e       	andi	r24, 0xE0	; 224
    40fa:	8c 93       	st	X, r24
		ADMUX|=Loc_u8ADC_Channel;
    40fc:	a7 e2       	ldi	r26, 0x27	; 39
    40fe:	b0 e0       	ldi	r27, 0x00	; 0
    4100:	e7 e2       	ldi	r30, 0x27	; 39
    4102:	f0 e0       	ldi	r31, 0x00	; 0
    4104:	90 81       	ld	r25, Z
    4106:	89 81       	ldd	r24, Y+1	; 0x01
    4108:	89 2b       	or	r24, r25
    410a:	8c 93       	st	X, r24
		//set global Interrupt enable flag
		GIEMode(GIE_ENABLE);
    410c:	81 e0       	ldi	r24, 0x01	; 1
    410e:	0e 94 9d 18 	call	0x313a	; 0x313a <GIEMode>

		//Start Conversion
		SET_BIT(ADCSRA,ADSC);
    4112:	a6 e2       	ldi	r26, 0x26	; 38
    4114:	b0 e0       	ldi	r27, 0x00	; 0
    4116:	e6 e2       	ldi	r30, 0x26	; 38
    4118:	f0 e0       	ldi	r31, 0x00	; 0
    411a:	80 81       	ld	r24, Z
    411c:	80 64       	ori	r24, 0x40	; 64
    411e:	8c 93       	st	X, r24

		//Poll on the Flag the flag is 1 when conversion is done
		while(GET_BIT(ADCSRA,ADIF)==0);
    4120:	e6 e2       	ldi	r30, 0x26	; 38
    4122:	f0 e0       	ldi	r31, 0x00	; 0
    4124:	80 81       	ld	r24, Z
    4126:	82 95       	swap	r24
    4128:	8f 70       	andi	r24, 0x0F	; 15
    412a:	88 2f       	mov	r24, r24
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	81 70       	andi	r24, 0x01	; 1
    4130:	90 70       	andi	r25, 0x00	; 0
    4132:	00 97       	sbiw	r24, 0x00	; 0
    4134:	a9 f3       	breq	.-22     	; 0x4120 <ADC_StartConversion+0x44>

		//Conversion finished
		return ADCLH;
    4136:	e4 e2       	ldi	r30, 0x24	; 36
    4138:	f0 e0       	ldi	r31, 0x00	; 0
    413a:	80 81       	ld	r24, Z
    413c:	91 81       	ldd	r25, Z+1	; 0x01
	}
    413e:	0f 90       	pop	r0
    4140:	0f 90       	pop	r0
    4142:	cf 91       	pop	r28
    4144:	df 91       	pop	r29
    4146:	08 95       	ret

00004148 <ADC_Stop>:

void ADC_Stop(void){
    4148:	df 93       	push	r29
    414a:	cf 93       	push	r28
    414c:	cd b7       	in	r28, 0x3d	; 61
    414e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADMUX,ADEN);
    4150:	a7 e2       	ldi	r26, 0x27	; 39
    4152:	b0 e0       	ldi	r27, 0x00	; 0
    4154:	e7 e2       	ldi	r30, 0x27	; 39
    4156:	f0 e0       	ldi	r31, 0x00	; 0
    4158:	80 81       	ld	r24, Z
    415a:	8f 77       	andi	r24, 0x7F	; 127
    415c:	8c 93       	st	X, r24
}
    415e:	cf 91       	pop	r28
    4160:	df 91       	pop	r29
    4162:	08 95       	ret

00004164 <__vector_16>:
void __vector_16(void){
    4164:	1f 92       	push	r1
    4166:	0f 92       	push	r0
    4168:	0f b6       	in	r0, 0x3f	; 63
    416a:	0f 92       	push	r0
    416c:	11 24       	eor	r1, r1
    416e:	8f 93       	push	r24
    4170:	af 93       	push	r26
    4172:	bf 93       	push	r27
    4174:	ef 93       	push	r30
    4176:	ff 93       	push	r31
    4178:	df 93       	push	r29
    417a:	cf 93       	push	r28
    417c:	cd b7       	in	r28, 0x3d	; 61
    417e:	de b7       	in	r29, 0x3e	; 62

 SET_BIT(ADCSRA ,ADSC);
    4180:	a6 e2       	ldi	r26, 0x26	; 38
    4182:	b0 e0       	ldi	r27, 0x00	; 0
    4184:	e6 e2       	ldi	r30, 0x26	; 38
    4186:	f0 e0       	ldi	r31, 0x00	; 0
    4188:	80 81       	ld	r24, Z
    418a:	80 64       	ori	r24, 0x40	; 64
    418c:	8c 93       	st	X, r24
}
    418e:	cf 91       	pop	r28
    4190:	df 91       	pop	r29
    4192:	ff 91       	pop	r31
    4194:	ef 91       	pop	r30
    4196:	bf 91       	pop	r27
    4198:	af 91       	pop	r26
    419a:	8f 91       	pop	r24
    419c:	0f 90       	pop	r0
    419e:	0f be       	out	0x3f, r0	; 63
    41a0:	0f 90       	pop	r0
    41a2:	1f 90       	pop	r1
    41a4:	18 95       	reti

000041a6 <SEVENSEGMENT_Init>:
#include "../includes/SevenSegment.h"
#include "../includes/SevenSegment_cfg.h"
#include "../includes/SevenSegment_prv.h"
#include"../../../MCAL/PORT/includes/PORT.h"
#include"../../../MCAL/DIO/includes/DIO.h"
void SEVENSEGMENT_Init(SevenSeg_t* Ptr_SevenSegObj){
    41a6:	df 93       	push	r29
    41a8:	cf 93       	push	r28
    41aa:	00 d0       	rcall	.+0      	; 0x41ac <SEVENSEGMENT_Init+0x6>
    41ac:	00 d0       	rcall	.+0      	; 0x41ae <SEVENSEGMENT_Init+0x8>
    41ae:	cd b7       	in	r28, 0x3d	; 61
    41b0:	de b7       	in	r29, 0x3e	; 62
    41b2:	9c 83       	std	Y+4, r25	; 0x04
    41b4:	8b 83       	std	Y+3, r24	; 0x03
	u8 pinSegement;
	u8 pinButton;
	for(pinSegement=1; pinSegement<9;pinSegement++){
    41b6:	81 e0       	ldi	r24, 0x01	; 1
    41b8:	8a 83       	std	Y+2, r24	; 0x02
    41ba:	07 c0       	rjmp	.+14     	; 0x41ca <SEVENSEGMENT_Init+0x24>
		Port_enuSetPinDirection(pinSegement,PORT_u8OUTPUT);
    41bc:	8a 81       	ldd	r24, Y+2	; 0x02
    41be:	61 e0       	ldi	r22, 0x01	; 1
    41c0:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
#include"../../../MCAL/PORT/includes/PORT.h"
#include"../../../MCAL/DIO/includes/DIO.h"
void SEVENSEGMENT_Init(SevenSeg_t* Ptr_SevenSegObj){
	u8 pinSegement;
	u8 pinButton;
	for(pinSegement=1; pinSegement<9;pinSegement++){
    41c4:	8a 81       	ldd	r24, Y+2	; 0x02
    41c6:	8f 5f       	subi	r24, 0xFF	; 255
    41c8:	8a 83       	std	Y+2, r24	; 0x02
    41ca:	8a 81       	ldd	r24, Y+2	; 0x02
    41cc:	89 30       	cpi	r24, 0x09	; 9
    41ce:	b0 f3       	brcs	.-20     	; 0x41bc <SEVENSEGMENT_Init+0x16>
		Port_enuSetPinDirection(pinSegement,PORT_u8OUTPUT);
		}
		for(pinButton=26; pinButton<29;pinButton++){
    41d0:	8a e1       	ldi	r24, 0x1A	; 26
    41d2:	89 83       	std	Y+1, r24	; 0x01
    41d4:	07 c0       	rjmp	.+14     	; 0x41e4 <SEVENSEGMENT_Init+0x3e>
			Port_enuSetPinDirection(pinButton,PORT_u8INPUT);
    41d6:	89 81       	ldd	r24, Y+1	; 0x01
    41d8:	60 e0       	ldi	r22, 0x00	; 0
    41da:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
	u8 pinSegement;
	u8 pinButton;
	for(pinSegement=1; pinSegement<9;pinSegement++){
		Port_enuSetPinDirection(pinSegement,PORT_u8OUTPUT);
		}
		for(pinButton=26; pinButton<29;pinButton++){
    41de:	89 81       	ldd	r24, Y+1	; 0x01
    41e0:	8f 5f       	subi	r24, 0xFF	; 255
    41e2:	89 83       	std	Y+1, r24	; 0x01
    41e4:	89 81       	ldd	r24, Y+1	; 0x01
    41e6:	8d 31       	cpi	r24, 0x1D	; 29
    41e8:	b0 f3       	brcs	.-20     	; 0x41d6 <SEVENSEGMENT_Init+0x30>
			Port_enuSetPinDirection(pinButton,PORT_u8INPUT);
			}

		for(pinSegement=1; pinSegement<9;pinSegement++){
    41ea:	81 e0       	ldi	r24, 0x01	; 1
    41ec:	8a 83       	std	Y+2, r24	; 0x02
    41ee:	07 c0       	rjmp	.+14     	; 0x41fe <SEVENSEGMENT_Init+0x58>
			Port_enuSetPinMode(pinSegement,PORT_u8OUTPUT_HIGH);
    41f0:	8a 81       	ldd	r24, Y+2	; 0x02
    41f2:	61 e0       	ldi	r22, 0x01	; 1
    41f4:	0e 94 91 10 	call	0x2122	; 0x2122 <Port_enuSetPinMode>
		}
		for(pinButton=26; pinButton<29;pinButton++){
			Port_enuSetPinDirection(pinButton,PORT_u8INPUT);
			}

		for(pinSegement=1; pinSegement<9;pinSegement++){
    41f8:	8a 81       	ldd	r24, Y+2	; 0x02
    41fa:	8f 5f       	subi	r24, 0xFF	; 255
    41fc:	8a 83       	std	Y+2, r24	; 0x02
    41fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4200:	89 30       	cpi	r24, 0x09	; 9
    4202:	b0 f3       	brcs	.-20     	; 0x41f0 <SEVENSEGMENT_Init+0x4a>
			Port_enuSetPinMode(pinSegement,PORT_u8OUTPUT_HIGH);
		}
		for(pinButton=26; pinButton<29;pinButton++){
    4204:	8a e1       	ldi	r24, 0x1A	; 26
    4206:	89 83       	std	Y+1, r24	; 0x01
    4208:	07 c0       	rjmp	.+14     	; 0x4218 <SEVENSEGMENT_Init+0x72>
			Port_enuSetPinMode(pinButton,PORT_u8INPUT_PULLUP);
    420a:	89 81       	ldd	r24, Y+1	; 0x01
    420c:	63 e0       	ldi	r22, 0x03	; 3
    420e:	0e 94 91 10 	call	0x2122	; 0x2122 <Port_enuSetPinMode>
			}

		for(pinSegement=1; pinSegement<9;pinSegement++){
			Port_enuSetPinMode(pinSegement,PORT_u8OUTPUT_HIGH);
		}
		for(pinButton=26; pinButton<29;pinButton++){
    4212:	89 81       	ldd	r24, Y+1	; 0x01
    4214:	8f 5f       	subi	r24, 0xFF	; 255
    4216:	89 83       	std	Y+1, r24	; 0x01
    4218:	89 81       	ldd	r24, Y+1	; 0x01
    421a:	8d 31       	cpi	r24, 0x1D	; 29
    421c:	b0 f3       	brcs	.-20     	; 0x420a <SEVENSEGMENT_Init+0x64>
			Port_enuSetPinMode(pinButton,PORT_u8INPUT_PULLUP);
			}
}
    421e:	0f 90       	pop	r0
    4220:	0f 90       	pop	r0
    4222:	0f 90       	pop	r0
    4224:	0f 90       	pop	r0
    4226:	cf 91       	pop	r28
    4228:	df 91       	pop	r29
    422a:	08 95       	ret

0000422c <SEVENSEGMENT_SetMode>:
void SEVENSEGMENT_SetMode(SevenSeg_t* Ptr_SevenSegObj,u8 Copy_u8SevenSegMode){
    422c:	df 93       	push	r29
    422e:	cf 93       	push	r28
    4230:	00 d0       	rcall	.+0      	; 0x4232 <SEVENSEGMENT_SetMode+0x6>
    4232:	0f 92       	push	r0
    4234:	cd b7       	in	r28, 0x3d	; 61
    4236:	de b7       	in	r29, 0x3e	; 62
    4238:	9a 83       	std	Y+2, r25	; 0x02
    423a:	89 83       	std	Y+1, r24	; 0x01
    423c:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_u8SevenSegMode==SEVEN_SEG_ON){
    423e:	8b 81       	ldd	r24, Y+3	; 0x03
    4240:	81 30       	cpi	r24, 0x01	; 1
    4242:	39 f4       	brne	.+14     	; 0x4252 <SEVENSEGMENT_SetMode+0x26>

		Dio_enuWriteChannel(Ptr_SevenSegObj->PinEn,DIO_u8LEVEL_HIGH);
    4244:	e9 81       	ldd	r30, Y+1	; 0x01
    4246:	fa 81       	ldd	r31, Y+2	; 0x02
    4248:	81 81       	ldd	r24, Z+1	; 0x01
    424a:	61 e0       	ldi	r22, 0x01	; 1
    424c:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>
    4250:	09 c0       	rjmp	.+18     	; 0x4264 <SEVENSEGMENT_SetMode+0x38>
	}
	else if(Copy_u8SevenSegMode==SEVEN_SEG_OFF){
    4252:	8b 81       	ldd	r24, Y+3	; 0x03
    4254:	88 23       	and	r24, r24
    4256:	31 f4       	brne	.+12     	; 0x4264 <SEVENSEGMENT_SetMode+0x38>
		Dio_enuWriteChannel(Ptr_SevenSegObj->PinEn,DIO_u8LEVEL_LOW);
    4258:	e9 81       	ldd	r30, Y+1	; 0x01
    425a:	fa 81       	ldd	r31, Y+2	; 0x02
    425c:	81 81       	ldd	r24, Z+1	; 0x01
    425e:	60 e0       	ldi	r22, 0x00	; 0
    4260:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>
	else {

		// wrong Mode ordered
	}

}
    4264:	0f 90       	pop	r0
    4266:	0f 90       	pop	r0
    4268:	0f 90       	pop	r0
    426a:	cf 91       	pop	r28
    426c:	df 91       	pop	r29
    426e:	08 95       	ret

00004270 <LCDInit4BitMode>:
 *  Created on: Oct 21, 2023
 *      Author: Ismail
 */
#include "../includes/LCD.h"
#include <util/delay.h>
void LCDInit4BitMode(){
    4270:	0f 93       	push	r16
    4272:	1f 93       	push	r17
    4274:	df 93       	push	r29
    4276:	cf 93       	push	r28
    4278:	cd b7       	in	r28, 0x3d	; 61
    427a:	de b7       	in	r29, 0x3e	; 62
    427c:	c6 54       	subi	r28, 0x46	; 70
    427e:	d0 40       	sbci	r29, 0x00	; 0
    4280:	0f b6       	in	r0, 0x3f	; 63
    4282:	f8 94       	cli
    4284:	de bf       	out	0x3e, r29	; 62
    4286:	0f be       	out	0x3f, r0	; 63
    4288:	cd bf       	out	0x3d, r28	; 61
    428a:	fe 01       	movw	r30, r28
    428c:	ed 5b       	subi	r30, 0xBD	; 189
    428e:	ff 4f       	sbci	r31, 0xFF	; 255
    4290:	80 e0       	ldi	r24, 0x00	; 0
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	a0 ef       	ldi	r26, 0xF0	; 240
    4296:	b1 e4       	ldi	r27, 0x41	; 65
    4298:	80 83       	st	Z, r24
    429a:	91 83       	std	Z+1, r25	; 0x01
    429c:	a2 83       	std	Z+2, r26	; 0x02
    429e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42a0:	8e 01       	movw	r16, r28
    42a2:	01 5c       	subi	r16, 0xC1	; 193
    42a4:	1f 4f       	sbci	r17, 0xFF	; 255
    42a6:	fe 01       	movw	r30, r28
    42a8:	ed 5b       	subi	r30, 0xBD	; 189
    42aa:	ff 4f       	sbci	r31, 0xFF	; 255
    42ac:	60 81       	ld	r22, Z
    42ae:	71 81       	ldd	r23, Z+1	; 0x01
    42b0:	82 81       	ldd	r24, Z+2	; 0x02
    42b2:	93 81       	ldd	r25, Z+3	; 0x03
    42b4:	20 e0       	ldi	r18, 0x00	; 0
    42b6:	30 e0       	ldi	r19, 0x00	; 0
    42b8:	4a e7       	ldi	r20, 0x7A	; 122
    42ba:	55 e4       	ldi	r21, 0x45	; 69
    42bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42c0:	dc 01       	movw	r26, r24
    42c2:	cb 01       	movw	r24, r22
    42c4:	f8 01       	movw	r30, r16
    42c6:	80 83       	st	Z, r24
    42c8:	91 83       	std	Z+1, r25	; 0x01
    42ca:	a2 83       	std	Z+2, r26	; 0x02
    42cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42ce:	fe 01       	movw	r30, r28
    42d0:	ff 96       	adiw	r30, 0x3f	; 63
    42d2:	60 81       	ld	r22, Z
    42d4:	71 81       	ldd	r23, Z+1	; 0x01
    42d6:	82 81       	ldd	r24, Z+2	; 0x02
    42d8:	93 81       	ldd	r25, Z+3	; 0x03
    42da:	20 e0       	ldi	r18, 0x00	; 0
    42dc:	30 e0       	ldi	r19, 0x00	; 0
    42de:	40 e8       	ldi	r20, 0x80	; 128
    42e0:	5f e3       	ldi	r21, 0x3F	; 63
    42e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42e6:	88 23       	and	r24, r24
    42e8:	2c f4       	brge	.+10     	; 0x42f4 <LCDInit4BitMode+0x84>
		__ticks = 1;
    42ea:	81 e0       	ldi	r24, 0x01	; 1
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	9e af       	std	Y+62, r25	; 0x3e
    42f0:	8d af       	std	Y+61, r24	; 0x3d
    42f2:	46 c0       	rjmp	.+140    	; 0x4380 <LCDInit4BitMode+0x110>
	else if (__tmp > 65535)
    42f4:	fe 01       	movw	r30, r28
    42f6:	ff 96       	adiw	r30, 0x3f	; 63
    42f8:	60 81       	ld	r22, Z
    42fa:	71 81       	ldd	r23, Z+1	; 0x01
    42fc:	82 81       	ldd	r24, Z+2	; 0x02
    42fe:	93 81       	ldd	r25, Z+3	; 0x03
    4300:	20 e0       	ldi	r18, 0x00	; 0
    4302:	3f ef       	ldi	r19, 0xFF	; 255
    4304:	4f e7       	ldi	r20, 0x7F	; 127
    4306:	57 e4       	ldi	r21, 0x47	; 71
    4308:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    430c:	18 16       	cp	r1, r24
    430e:	64 f5       	brge	.+88     	; 0x4368 <LCDInit4BitMode+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4310:	fe 01       	movw	r30, r28
    4312:	ed 5b       	subi	r30, 0xBD	; 189
    4314:	ff 4f       	sbci	r31, 0xFF	; 255
    4316:	60 81       	ld	r22, Z
    4318:	71 81       	ldd	r23, Z+1	; 0x01
    431a:	82 81       	ldd	r24, Z+2	; 0x02
    431c:	93 81       	ldd	r25, Z+3	; 0x03
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	30 e0       	ldi	r19, 0x00	; 0
    4322:	40 e2       	ldi	r20, 0x20	; 32
    4324:	51 e4       	ldi	r21, 0x41	; 65
    4326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    432a:	dc 01       	movw	r26, r24
    432c:	cb 01       	movw	r24, r22
    432e:	bc 01       	movw	r22, r24
    4330:	cd 01       	movw	r24, r26
    4332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4336:	dc 01       	movw	r26, r24
    4338:	cb 01       	movw	r24, r22
    433a:	9e af       	std	Y+62, r25	; 0x3e
    433c:	8d af       	std	Y+61, r24	; 0x3d
    433e:	0f c0       	rjmp	.+30     	; 0x435e <LCDInit4BitMode+0xee>
    4340:	80 e9       	ldi	r24, 0x90	; 144
    4342:	91 e0       	ldi	r25, 0x01	; 1
    4344:	9c af       	std	Y+60, r25	; 0x3c
    4346:	8b af       	std	Y+59, r24	; 0x3b
    4348:	8b ad       	ldd	r24, Y+59	; 0x3b
    434a:	9c ad       	ldd	r25, Y+60	; 0x3c
    434c:	01 97       	sbiw	r24, 0x01	; 1
    434e:	f1 f7       	brne	.-4      	; 0x434c <LCDInit4BitMode+0xdc>
    4350:	9c af       	std	Y+60, r25	; 0x3c
    4352:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4354:	8d ad       	ldd	r24, Y+61	; 0x3d
    4356:	9e ad       	ldd	r25, Y+62	; 0x3e
    4358:	01 97       	sbiw	r24, 0x01	; 1
    435a:	9e af       	std	Y+62, r25	; 0x3e
    435c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    435e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4360:	9e ad       	ldd	r25, Y+62	; 0x3e
    4362:	00 97       	sbiw	r24, 0x00	; 0
    4364:	69 f7       	brne	.-38     	; 0x4340 <LCDInit4BitMode+0xd0>
    4366:	16 c0       	rjmp	.+44     	; 0x4394 <LCDInit4BitMode+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4368:	fe 01       	movw	r30, r28
    436a:	ff 96       	adiw	r30, 0x3f	; 63
    436c:	60 81       	ld	r22, Z
    436e:	71 81       	ldd	r23, Z+1	; 0x01
    4370:	82 81       	ldd	r24, Z+2	; 0x02
    4372:	93 81       	ldd	r25, Z+3	; 0x03
    4374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4378:	dc 01       	movw	r26, r24
    437a:	cb 01       	movw	r24, r22
    437c:	9e af       	std	Y+62, r25	; 0x3e
    437e:	8d af       	std	Y+61, r24	; 0x3d
    4380:	8d ad       	ldd	r24, Y+61	; 0x3d
    4382:	9e ad       	ldd	r25, Y+62	; 0x3e
    4384:	9a af       	std	Y+58, r25	; 0x3a
    4386:	89 af       	std	Y+57, r24	; 0x39
    4388:	89 ad       	ldd	r24, Y+57	; 0x39
    438a:	9a ad       	ldd	r25, Y+58	; 0x3a
    438c:	01 97       	sbiw	r24, 0x01	; 1
    438e:	f1 f7       	brne	.-4      	; 0x438c <LCDInit4BitMode+0x11c>
    4390:	9a af       	std	Y+58, r25	; 0x3a
    4392:	89 af       	std	Y+57, r24	; 0x39
_delay_ms(30);

//SET DIRECTION OF THE used PINS
//PORTB PIN0 to pin3 DROM 8 -11 FOR DATA, RS =PA3 ,E= PA2

Port_enuSetPinDirection(4,PORT_u8OUTPUT);
    4394:	84 e0       	ldi	r24, 0x04	; 4
    4396:	61 e0       	ldi	r22, 0x01	; 1
    4398:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
Port_enuSetPinDirection(5,PORT_u8OUTPUT);
    439c:	85 e0       	ldi	r24, 0x05	; 5
    439e:	61 e0       	ldi	r22, 0x01	; 1
    43a0:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
Port_enuSetPinDirection(6,PORT_u8OUTPUT);
    43a4:	86 e0       	ldi	r24, 0x06	; 6
    43a6:	61 e0       	ldi	r22, 0x01	; 1
    43a8:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
Port_enuSetPinDirection(7,PORT_u8OUTPUT);
    43ac:	87 e0       	ldi	r24, 0x07	; 7
    43ae:	61 e0       	ldi	r22, 0x01	; 1
    43b0:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>

//SET DIRECTION OF THE CONTROL PINS
Port_enuSetPinDirection(RS,PORT_u8OUTPUT);
    43b4:	88 e0       	ldi	r24, 0x08	; 8
    43b6:	61 e0       	ldi	r22, 0x01	; 1
    43b8:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
Port_enuSetPinDirection(RW,PORT_u8OUTPUT);
    43bc:	89 e0       	ldi	r24, 0x09	; 9
    43be:	61 e0       	ldi	r22, 0x01	; 1
    43c0:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
Port_enuSetPinDirection(E,PORT_u8OUTPUT);
    43c4:	8a e0       	ldi	r24, 0x0A	; 10
    43c6:	61 e0       	ldi	r22, 0x01	; 1
    43c8:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>

//START OF THE INTIALIZATION SEQUENCE
//SEND FUNCTION SET COMMAND
DIO_SetNibbleValue(LCD_PIN_START,DATA_PORT,FUNCTION_SET_MODE_COMMAND>>4);
    43cc:	84 e0       	ldi	r24, 0x04	; 4
    43ce:	60 e0       	ldi	r22, 0x00	; 0
    43d0:	42 e0       	ldi	r20, 0x02	; 2
    43d2:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <DIO_SetNibbleValue>
//SEND THE FALLING EDGE ENABLE
Dio_enuWriteChannel(E,DIO_u8LEVEL_HIGH);
    43d6:	8a e0       	ldi	r24, 0x0A	; 10
    43d8:	61 e0       	ldi	r22, 0x01	; 1
    43da:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>
    43de:	80 e0       	ldi	r24, 0x00	; 0
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	a0 e0       	ldi	r26, 0x00	; 0
    43e4:	b0 e4       	ldi	r27, 0x40	; 64
    43e6:	8d ab       	std	Y+53, r24	; 0x35
    43e8:	9e ab       	std	Y+54, r25	; 0x36
    43ea:	af ab       	std	Y+55, r26	; 0x37
    43ec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43ee:	6d a9       	ldd	r22, Y+53	; 0x35
    43f0:	7e a9       	ldd	r23, Y+54	; 0x36
    43f2:	8f a9       	ldd	r24, Y+55	; 0x37
    43f4:	98 ad       	ldd	r25, Y+56	; 0x38
    43f6:	20 e0       	ldi	r18, 0x00	; 0
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	4a e7       	ldi	r20, 0x7A	; 122
    43fc:	55 e4       	ldi	r21, 0x45	; 69
    43fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4402:	dc 01       	movw	r26, r24
    4404:	cb 01       	movw	r24, r22
    4406:	89 ab       	std	Y+49, r24	; 0x31
    4408:	9a ab       	std	Y+50, r25	; 0x32
    440a:	ab ab       	std	Y+51, r26	; 0x33
    440c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    440e:	69 a9       	ldd	r22, Y+49	; 0x31
    4410:	7a a9       	ldd	r23, Y+50	; 0x32
    4412:	8b a9       	ldd	r24, Y+51	; 0x33
    4414:	9c a9       	ldd	r25, Y+52	; 0x34
    4416:	20 e0       	ldi	r18, 0x00	; 0
    4418:	30 e0       	ldi	r19, 0x00	; 0
    441a:	40 e8       	ldi	r20, 0x80	; 128
    441c:	5f e3       	ldi	r21, 0x3F	; 63
    441e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4422:	88 23       	and	r24, r24
    4424:	2c f4       	brge	.+10     	; 0x4430 <LCDInit4BitMode+0x1c0>
		__ticks = 1;
    4426:	81 e0       	ldi	r24, 0x01	; 1
    4428:	90 e0       	ldi	r25, 0x00	; 0
    442a:	98 ab       	std	Y+48, r25	; 0x30
    442c:	8f a7       	std	Y+47, r24	; 0x2f
    442e:	3f c0       	rjmp	.+126    	; 0x44ae <LCDInit4BitMode+0x23e>
	else if (__tmp > 65535)
    4430:	69 a9       	ldd	r22, Y+49	; 0x31
    4432:	7a a9       	ldd	r23, Y+50	; 0x32
    4434:	8b a9       	ldd	r24, Y+51	; 0x33
    4436:	9c a9       	ldd	r25, Y+52	; 0x34
    4438:	20 e0       	ldi	r18, 0x00	; 0
    443a:	3f ef       	ldi	r19, 0xFF	; 255
    443c:	4f e7       	ldi	r20, 0x7F	; 127
    443e:	57 e4       	ldi	r21, 0x47	; 71
    4440:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4444:	18 16       	cp	r1, r24
    4446:	4c f5       	brge	.+82     	; 0x449a <LCDInit4BitMode+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4448:	6d a9       	ldd	r22, Y+53	; 0x35
    444a:	7e a9       	ldd	r23, Y+54	; 0x36
    444c:	8f a9       	ldd	r24, Y+55	; 0x37
    444e:	98 ad       	ldd	r25, Y+56	; 0x38
    4450:	20 e0       	ldi	r18, 0x00	; 0
    4452:	30 e0       	ldi	r19, 0x00	; 0
    4454:	40 e2       	ldi	r20, 0x20	; 32
    4456:	51 e4       	ldi	r21, 0x41	; 65
    4458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    445c:	dc 01       	movw	r26, r24
    445e:	cb 01       	movw	r24, r22
    4460:	bc 01       	movw	r22, r24
    4462:	cd 01       	movw	r24, r26
    4464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4468:	dc 01       	movw	r26, r24
    446a:	cb 01       	movw	r24, r22
    446c:	98 ab       	std	Y+48, r25	; 0x30
    446e:	8f a7       	std	Y+47, r24	; 0x2f
    4470:	0f c0       	rjmp	.+30     	; 0x4490 <LCDInit4BitMode+0x220>
    4472:	80 e9       	ldi	r24, 0x90	; 144
    4474:	91 e0       	ldi	r25, 0x01	; 1
    4476:	9e a7       	std	Y+46, r25	; 0x2e
    4478:	8d a7       	std	Y+45, r24	; 0x2d
    447a:	8d a5       	ldd	r24, Y+45	; 0x2d
    447c:	9e a5       	ldd	r25, Y+46	; 0x2e
    447e:	01 97       	sbiw	r24, 0x01	; 1
    4480:	f1 f7       	brne	.-4      	; 0x447e <LCDInit4BitMode+0x20e>
    4482:	9e a7       	std	Y+46, r25	; 0x2e
    4484:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4486:	8f a5       	ldd	r24, Y+47	; 0x2f
    4488:	98 a9       	ldd	r25, Y+48	; 0x30
    448a:	01 97       	sbiw	r24, 0x01	; 1
    448c:	98 ab       	std	Y+48, r25	; 0x30
    448e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4490:	8f a5       	ldd	r24, Y+47	; 0x2f
    4492:	98 a9       	ldd	r25, Y+48	; 0x30
    4494:	00 97       	sbiw	r24, 0x00	; 0
    4496:	69 f7       	brne	.-38     	; 0x4472 <LCDInit4BitMode+0x202>
    4498:	14 c0       	rjmp	.+40     	; 0x44c2 <LCDInit4BitMode+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    449a:	69 a9       	ldd	r22, Y+49	; 0x31
    449c:	7a a9       	ldd	r23, Y+50	; 0x32
    449e:	8b a9       	ldd	r24, Y+51	; 0x33
    44a0:	9c a9       	ldd	r25, Y+52	; 0x34
    44a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44a6:	dc 01       	movw	r26, r24
    44a8:	cb 01       	movw	r24, r22
    44aa:	98 ab       	std	Y+48, r25	; 0x30
    44ac:	8f a7       	std	Y+47, r24	; 0x2f
    44ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    44b0:	98 a9       	ldd	r25, Y+48	; 0x30
    44b2:	9c a7       	std	Y+44, r25	; 0x2c
    44b4:	8b a7       	std	Y+43, r24	; 0x2b
    44b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    44b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    44ba:	01 97       	sbiw	r24, 0x01	; 1
    44bc:	f1 f7       	brne	.-4      	; 0x44ba <LCDInit4BitMode+0x24a>
    44be:	9c a7       	std	Y+44, r25	; 0x2c
    44c0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
Dio_enuWriteChannel(E,DIO_u8LEVEL_LOW);
    44c2:	8a e0       	ldi	r24, 0x0A	; 10
    44c4:	60 e0       	ldi	r22, 0x00	; 0
    44c6:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>

LCD_WriteCommand4Bit(FUNCTION_SET_MODE_COMMAND);
    44ca:	88 e2       	ldi	r24, 0x28	; 40
    44cc:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <LCD_WriteCommand4Bit>
    44d0:	80 e0       	ldi	r24, 0x00	; 0
    44d2:	90 e0       	ldi	r25, 0x00	; 0
    44d4:	a0 e8       	ldi	r26, 0x80	; 128
    44d6:	bf e3       	ldi	r27, 0x3F	; 63
    44d8:	8f a3       	std	Y+39, r24	; 0x27
    44da:	98 a7       	std	Y+40, r25	; 0x28
    44dc:	a9 a7       	std	Y+41, r26	; 0x29
    44de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44e0:	6f a1       	ldd	r22, Y+39	; 0x27
    44e2:	78 a5       	ldd	r23, Y+40	; 0x28
    44e4:	89 a5       	ldd	r24, Y+41	; 0x29
    44e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    44e8:	20 e0       	ldi	r18, 0x00	; 0
    44ea:	30 e0       	ldi	r19, 0x00	; 0
    44ec:	4a e7       	ldi	r20, 0x7A	; 122
    44ee:	55 e4       	ldi	r21, 0x45	; 69
    44f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44f4:	dc 01       	movw	r26, r24
    44f6:	cb 01       	movw	r24, r22
    44f8:	8b a3       	std	Y+35, r24	; 0x23
    44fa:	9c a3       	std	Y+36, r25	; 0x24
    44fc:	ad a3       	std	Y+37, r26	; 0x25
    44fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4500:	6b a1       	ldd	r22, Y+35	; 0x23
    4502:	7c a1       	ldd	r23, Y+36	; 0x24
    4504:	8d a1       	ldd	r24, Y+37	; 0x25
    4506:	9e a1       	ldd	r25, Y+38	; 0x26
    4508:	20 e0       	ldi	r18, 0x00	; 0
    450a:	30 e0       	ldi	r19, 0x00	; 0
    450c:	40 e8       	ldi	r20, 0x80	; 128
    450e:	5f e3       	ldi	r21, 0x3F	; 63
    4510:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4514:	88 23       	and	r24, r24
    4516:	2c f4       	brge	.+10     	; 0x4522 <LCDInit4BitMode+0x2b2>
		__ticks = 1;
    4518:	81 e0       	ldi	r24, 0x01	; 1
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	9a a3       	std	Y+34, r25	; 0x22
    451e:	89 a3       	std	Y+33, r24	; 0x21
    4520:	3f c0       	rjmp	.+126    	; 0x45a0 <LCDInit4BitMode+0x330>
	else if (__tmp > 65535)
    4522:	6b a1       	ldd	r22, Y+35	; 0x23
    4524:	7c a1       	ldd	r23, Y+36	; 0x24
    4526:	8d a1       	ldd	r24, Y+37	; 0x25
    4528:	9e a1       	ldd	r25, Y+38	; 0x26
    452a:	20 e0       	ldi	r18, 0x00	; 0
    452c:	3f ef       	ldi	r19, 0xFF	; 255
    452e:	4f e7       	ldi	r20, 0x7F	; 127
    4530:	57 e4       	ldi	r21, 0x47	; 71
    4532:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4536:	18 16       	cp	r1, r24
    4538:	4c f5       	brge	.+82     	; 0x458c <LCDInit4BitMode+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    453a:	6f a1       	ldd	r22, Y+39	; 0x27
    453c:	78 a5       	ldd	r23, Y+40	; 0x28
    453e:	89 a5       	ldd	r24, Y+41	; 0x29
    4540:	9a a5       	ldd	r25, Y+42	; 0x2a
    4542:	20 e0       	ldi	r18, 0x00	; 0
    4544:	30 e0       	ldi	r19, 0x00	; 0
    4546:	40 e2       	ldi	r20, 0x20	; 32
    4548:	51 e4       	ldi	r21, 0x41	; 65
    454a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    454e:	dc 01       	movw	r26, r24
    4550:	cb 01       	movw	r24, r22
    4552:	bc 01       	movw	r22, r24
    4554:	cd 01       	movw	r24, r26
    4556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    455a:	dc 01       	movw	r26, r24
    455c:	cb 01       	movw	r24, r22
    455e:	9a a3       	std	Y+34, r25	; 0x22
    4560:	89 a3       	std	Y+33, r24	; 0x21
    4562:	0f c0       	rjmp	.+30     	; 0x4582 <LCDInit4BitMode+0x312>
    4564:	80 e9       	ldi	r24, 0x90	; 144
    4566:	91 e0       	ldi	r25, 0x01	; 1
    4568:	98 a3       	std	Y+32, r25	; 0x20
    456a:	8f 8f       	std	Y+31, r24	; 0x1f
    456c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    456e:	98 a1       	ldd	r25, Y+32	; 0x20
    4570:	01 97       	sbiw	r24, 0x01	; 1
    4572:	f1 f7       	brne	.-4      	; 0x4570 <LCDInit4BitMode+0x300>
    4574:	98 a3       	std	Y+32, r25	; 0x20
    4576:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4578:	89 a1       	ldd	r24, Y+33	; 0x21
    457a:	9a a1       	ldd	r25, Y+34	; 0x22
    457c:	01 97       	sbiw	r24, 0x01	; 1
    457e:	9a a3       	std	Y+34, r25	; 0x22
    4580:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4582:	89 a1       	ldd	r24, Y+33	; 0x21
    4584:	9a a1       	ldd	r25, Y+34	; 0x22
    4586:	00 97       	sbiw	r24, 0x00	; 0
    4588:	69 f7       	brne	.-38     	; 0x4564 <LCDInit4BitMode+0x2f4>
    458a:	14 c0       	rjmp	.+40     	; 0x45b4 <LCDInit4BitMode+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    458c:	6b a1       	ldd	r22, Y+35	; 0x23
    458e:	7c a1       	ldd	r23, Y+36	; 0x24
    4590:	8d a1       	ldd	r24, Y+37	; 0x25
    4592:	9e a1       	ldd	r25, Y+38	; 0x26
    4594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4598:	dc 01       	movw	r26, r24
    459a:	cb 01       	movw	r24, r22
    459c:	9a a3       	std	Y+34, r25	; 0x22
    459e:	89 a3       	std	Y+33, r24	; 0x21
    45a0:	89 a1       	ldd	r24, Y+33	; 0x21
    45a2:	9a a1       	ldd	r25, Y+34	; 0x22
    45a4:	9e 8f       	std	Y+30, r25	; 0x1e
    45a6:	8d 8f       	std	Y+29, r24	; 0x1d
    45a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45ac:	01 97       	sbiw	r24, 0x01	; 1
    45ae:	f1 f7       	brne	.-4      	; 0x45ac <LCDInit4BitMode+0x33c>
    45b0:	9e 8f       	std	Y+30, r25	; 0x1e
    45b2:	8d 8f       	std	Y+29, r24	; 0x1d
//SEND DISPLAY CONTROL COMMAND
_delay_ms(1); //SHOULD BE 39US
LCD_WriteCommand4Bit(DISPALY_ON_OFF_COMMAND);
    45b4:	8e e0       	ldi	r24, 0x0E	; 14
    45b6:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <LCD_WriteCommand4Bit>
    45ba:	80 e0       	ldi	r24, 0x00	; 0
    45bc:	90 e0       	ldi	r25, 0x00	; 0
    45be:	a0 e8       	ldi	r26, 0x80	; 128
    45c0:	bf e3       	ldi	r27, 0x3F	; 63
    45c2:	89 8f       	std	Y+25, r24	; 0x19
    45c4:	9a 8f       	std	Y+26, r25	; 0x1a
    45c6:	ab 8f       	std	Y+27, r26	; 0x1b
    45c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45ca:	69 8d       	ldd	r22, Y+25	; 0x19
    45cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45d2:	20 e0       	ldi	r18, 0x00	; 0
    45d4:	30 e0       	ldi	r19, 0x00	; 0
    45d6:	4a e7       	ldi	r20, 0x7A	; 122
    45d8:	55 e4       	ldi	r21, 0x45	; 69
    45da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45de:	dc 01       	movw	r26, r24
    45e0:	cb 01       	movw	r24, r22
    45e2:	8d 8b       	std	Y+21, r24	; 0x15
    45e4:	9e 8b       	std	Y+22, r25	; 0x16
    45e6:	af 8b       	std	Y+23, r26	; 0x17
    45e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45ea:	6d 89       	ldd	r22, Y+21	; 0x15
    45ec:	7e 89       	ldd	r23, Y+22	; 0x16
    45ee:	8f 89       	ldd	r24, Y+23	; 0x17
    45f0:	98 8d       	ldd	r25, Y+24	; 0x18
    45f2:	20 e0       	ldi	r18, 0x00	; 0
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	40 e8       	ldi	r20, 0x80	; 128
    45f8:	5f e3       	ldi	r21, 0x3F	; 63
    45fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45fe:	88 23       	and	r24, r24
    4600:	2c f4       	brge	.+10     	; 0x460c <LCDInit4BitMode+0x39c>
		__ticks = 1;
    4602:	81 e0       	ldi	r24, 0x01	; 1
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	9c 8b       	std	Y+20, r25	; 0x14
    4608:	8b 8b       	std	Y+19, r24	; 0x13
    460a:	3f c0       	rjmp	.+126    	; 0x468a <LCDInit4BitMode+0x41a>
	else if (__tmp > 65535)
    460c:	6d 89       	ldd	r22, Y+21	; 0x15
    460e:	7e 89       	ldd	r23, Y+22	; 0x16
    4610:	8f 89       	ldd	r24, Y+23	; 0x17
    4612:	98 8d       	ldd	r25, Y+24	; 0x18
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	3f ef       	ldi	r19, 0xFF	; 255
    4618:	4f e7       	ldi	r20, 0x7F	; 127
    461a:	57 e4       	ldi	r21, 0x47	; 71
    461c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4620:	18 16       	cp	r1, r24
    4622:	4c f5       	brge	.+82     	; 0x4676 <LCDInit4BitMode+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4624:	69 8d       	ldd	r22, Y+25	; 0x19
    4626:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4628:	8b 8d       	ldd	r24, Y+27	; 0x1b
    462a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    462c:	20 e0       	ldi	r18, 0x00	; 0
    462e:	30 e0       	ldi	r19, 0x00	; 0
    4630:	40 e2       	ldi	r20, 0x20	; 32
    4632:	51 e4       	ldi	r21, 0x41	; 65
    4634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4638:	dc 01       	movw	r26, r24
    463a:	cb 01       	movw	r24, r22
    463c:	bc 01       	movw	r22, r24
    463e:	cd 01       	movw	r24, r26
    4640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4644:	dc 01       	movw	r26, r24
    4646:	cb 01       	movw	r24, r22
    4648:	9c 8b       	std	Y+20, r25	; 0x14
    464a:	8b 8b       	std	Y+19, r24	; 0x13
    464c:	0f c0       	rjmp	.+30     	; 0x466c <LCDInit4BitMode+0x3fc>
    464e:	80 e9       	ldi	r24, 0x90	; 144
    4650:	91 e0       	ldi	r25, 0x01	; 1
    4652:	9a 8b       	std	Y+18, r25	; 0x12
    4654:	89 8b       	std	Y+17, r24	; 0x11
    4656:	89 89       	ldd	r24, Y+17	; 0x11
    4658:	9a 89       	ldd	r25, Y+18	; 0x12
    465a:	01 97       	sbiw	r24, 0x01	; 1
    465c:	f1 f7       	brne	.-4      	; 0x465a <LCDInit4BitMode+0x3ea>
    465e:	9a 8b       	std	Y+18, r25	; 0x12
    4660:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4662:	8b 89       	ldd	r24, Y+19	; 0x13
    4664:	9c 89       	ldd	r25, Y+20	; 0x14
    4666:	01 97       	sbiw	r24, 0x01	; 1
    4668:	9c 8b       	std	Y+20, r25	; 0x14
    466a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    466c:	8b 89       	ldd	r24, Y+19	; 0x13
    466e:	9c 89       	ldd	r25, Y+20	; 0x14
    4670:	00 97       	sbiw	r24, 0x00	; 0
    4672:	69 f7       	brne	.-38     	; 0x464e <LCDInit4BitMode+0x3de>
    4674:	14 c0       	rjmp	.+40     	; 0x469e <LCDInit4BitMode+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4676:	6d 89       	ldd	r22, Y+21	; 0x15
    4678:	7e 89       	ldd	r23, Y+22	; 0x16
    467a:	8f 89       	ldd	r24, Y+23	; 0x17
    467c:	98 8d       	ldd	r25, Y+24	; 0x18
    467e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4682:	dc 01       	movw	r26, r24
    4684:	cb 01       	movw	r24, r22
    4686:	9c 8b       	std	Y+20, r25	; 0x14
    4688:	8b 8b       	std	Y+19, r24	; 0x13
    468a:	8b 89       	ldd	r24, Y+19	; 0x13
    468c:	9c 89       	ldd	r25, Y+20	; 0x14
    468e:	98 8b       	std	Y+16, r25	; 0x10
    4690:	8f 87       	std	Y+15, r24	; 0x0f
    4692:	8f 85       	ldd	r24, Y+15	; 0x0f
    4694:	98 89       	ldd	r25, Y+16	; 0x10
    4696:	01 97       	sbiw	r24, 0x01	; 1
    4698:	f1 f7       	brne	.-4      	; 0x4696 <LCDInit4BitMode+0x426>
    469a:	98 8b       	std	Y+16, r25	; 0x10
    469c:	8f 87       	std	Y+15, r24	; 0x0f
//SEND CLEAR COMMAND
_delay_ms(1); //SHOULD BE 39US
LCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    469e:	81 e0       	ldi	r24, 0x01	; 1
    46a0:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <LCD_WriteCommand4Bit>
    46a4:	80 e0       	ldi	r24, 0x00	; 0
    46a6:	90 e0       	ldi	r25, 0x00	; 0
    46a8:	a0 e0       	ldi	r26, 0x00	; 0
    46aa:	b0 e4       	ldi	r27, 0x40	; 64
    46ac:	8b 87       	std	Y+11, r24	; 0x0b
    46ae:	9c 87       	std	Y+12, r25	; 0x0c
    46b0:	ad 87       	std	Y+13, r26	; 0x0d
    46b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    46b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    46b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    46ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    46bc:	20 e0       	ldi	r18, 0x00	; 0
    46be:	30 e0       	ldi	r19, 0x00	; 0
    46c0:	4a e7       	ldi	r20, 0x7A	; 122
    46c2:	55 e4       	ldi	r21, 0x45	; 69
    46c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46c8:	dc 01       	movw	r26, r24
    46ca:	cb 01       	movw	r24, r22
    46cc:	8f 83       	std	Y+7, r24	; 0x07
    46ce:	98 87       	std	Y+8, r25	; 0x08
    46d0:	a9 87       	std	Y+9, r26	; 0x09
    46d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46d4:	6f 81       	ldd	r22, Y+7	; 0x07
    46d6:	78 85       	ldd	r23, Y+8	; 0x08
    46d8:	89 85       	ldd	r24, Y+9	; 0x09
    46da:	9a 85       	ldd	r25, Y+10	; 0x0a
    46dc:	20 e0       	ldi	r18, 0x00	; 0
    46de:	30 e0       	ldi	r19, 0x00	; 0
    46e0:	40 e8       	ldi	r20, 0x80	; 128
    46e2:	5f e3       	ldi	r21, 0x3F	; 63
    46e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46e8:	88 23       	and	r24, r24
    46ea:	2c f4       	brge	.+10     	; 0x46f6 <LCDInit4BitMode+0x486>
		__ticks = 1;
    46ec:	81 e0       	ldi	r24, 0x01	; 1
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	9e 83       	std	Y+6, r25	; 0x06
    46f2:	8d 83       	std	Y+5, r24	; 0x05
    46f4:	3f c0       	rjmp	.+126    	; 0x4774 <LCDInit4BitMode+0x504>
	else if (__tmp > 65535)
    46f6:	6f 81       	ldd	r22, Y+7	; 0x07
    46f8:	78 85       	ldd	r23, Y+8	; 0x08
    46fa:	89 85       	ldd	r24, Y+9	; 0x09
    46fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    46fe:	20 e0       	ldi	r18, 0x00	; 0
    4700:	3f ef       	ldi	r19, 0xFF	; 255
    4702:	4f e7       	ldi	r20, 0x7F	; 127
    4704:	57 e4       	ldi	r21, 0x47	; 71
    4706:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    470a:	18 16       	cp	r1, r24
    470c:	4c f5       	brge	.+82     	; 0x4760 <LCDInit4BitMode+0x4f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    470e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4710:	7c 85       	ldd	r23, Y+12	; 0x0c
    4712:	8d 85       	ldd	r24, Y+13	; 0x0d
    4714:	9e 85       	ldd	r25, Y+14	; 0x0e
    4716:	20 e0       	ldi	r18, 0x00	; 0
    4718:	30 e0       	ldi	r19, 0x00	; 0
    471a:	40 e2       	ldi	r20, 0x20	; 32
    471c:	51 e4       	ldi	r21, 0x41	; 65
    471e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4722:	dc 01       	movw	r26, r24
    4724:	cb 01       	movw	r24, r22
    4726:	bc 01       	movw	r22, r24
    4728:	cd 01       	movw	r24, r26
    472a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    472e:	dc 01       	movw	r26, r24
    4730:	cb 01       	movw	r24, r22
    4732:	9e 83       	std	Y+6, r25	; 0x06
    4734:	8d 83       	std	Y+5, r24	; 0x05
    4736:	0f c0       	rjmp	.+30     	; 0x4756 <LCDInit4BitMode+0x4e6>
    4738:	80 e9       	ldi	r24, 0x90	; 144
    473a:	91 e0       	ldi	r25, 0x01	; 1
    473c:	9c 83       	std	Y+4, r25	; 0x04
    473e:	8b 83       	std	Y+3, r24	; 0x03
    4740:	8b 81       	ldd	r24, Y+3	; 0x03
    4742:	9c 81       	ldd	r25, Y+4	; 0x04
    4744:	01 97       	sbiw	r24, 0x01	; 1
    4746:	f1 f7       	brne	.-4      	; 0x4744 <LCDInit4BitMode+0x4d4>
    4748:	9c 83       	std	Y+4, r25	; 0x04
    474a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    474c:	8d 81       	ldd	r24, Y+5	; 0x05
    474e:	9e 81       	ldd	r25, Y+6	; 0x06
    4750:	01 97       	sbiw	r24, 0x01	; 1
    4752:	9e 83       	std	Y+6, r25	; 0x06
    4754:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4756:	8d 81       	ldd	r24, Y+5	; 0x05
    4758:	9e 81       	ldd	r25, Y+6	; 0x06
    475a:	00 97       	sbiw	r24, 0x00	; 0
    475c:	69 f7       	brne	.-38     	; 0x4738 <LCDInit4BitMode+0x4c8>
    475e:	14 c0       	rjmp	.+40     	; 0x4788 <LCDInit4BitMode+0x518>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4760:	6f 81       	ldd	r22, Y+7	; 0x07
    4762:	78 85       	ldd	r23, Y+8	; 0x08
    4764:	89 85       	ldd	r24, Y+9	; 0x09
    4766:	9a 85       	ldd	r25, Y+10	; 0x0a
    4768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    476c:	dc 01       	movw	r26, r24
    476e:	cb 01       	movw	r24, r22
    4770:	9e 83       	std	Y+6, r25	; 0x06
    4772:	8d 83       	std	Y+5, r24	; 0x05
    4774:	8d 81       	ldd	r24, Y+5	; 0x05
    4776:	9e 81       	ldd	r25, Y+6	; 0x06
    4778:	9a 83       	std	Y+2, r25	; 0x02
    477a:	89 83       	std	Y+1, r24	; 0x01
    477c:	89 81       	ldd	r24, Y+1	; 0x01
    477e:	9a 81       	ldd	r25, Y+2	; 0x02
    4780:	01 97       	sbiw	r24, 0x01	; 1
    4782:	f1 f7       	brne	.-4      	; 0x4780 <LCDInit4BitMode+0x510>
    4784:	9a 83       	std	Y+2, r25	; 0x02
    4786:	89 83       	std	Y+1, r24	; 0x01
//SEND ENRTYMODE COMMAND
_delay_ms(2);
LCD_WriteCommand4Bit(ENTRY_MODE_COMMAND);
    4788:	86 e0       	ldi	r24, 0x06	; 6
    478a:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <LCD_WriteCommand4Bit>
}
    478e:	ca 5b       	subi	r28, 0xBA	; 186
    4790:	df 4f       	sbci	r29, 0xFF	; 255
    4792:	0f b6       	in	r0, 0x3f	; 63
    4794:	f8 94       	cli
    4796:	de bf       	out	0x3e, r29	; 62
    4798:	0f be       	out	0x3f, r0	; 63
    479a:	cd bf       	out	0x3d, r28	; 61
    479c:	cf 91       	pop	r28
    479e:	df 91       	pop	r29
    47a0:	1f 91       	pop	r17
    47a2:	0f 91       	pop	r16
    47a4:	08 95       	ret

000047a6 <LCD_WriteCommand4Bit>:
void LCD_WriteCommand4Bit(u8 Copy_u8Command){
    47a6:	df 93       	push	r29
    47a8:	cf 93       	push	r28
    47aa:	cd b7       	in	r28, 0x3d	; 61
    47ac:	de b7       	in	r29, 0x3e	; 62
    47ae:	6d 97       	sbiw	r28, 0x1d	; 29
    47b0:	0f b6       	in	r0, 0x3f	; 63
    47b2:	f8 94       	cli
    47b4:	de bf       	out	0x3e, r29	; 62
    47b6:	0f be       	out	0x3f, r0	; 63
    47b8:	cd bf       	out	0x3d, r28	; 61
    47ba:	8d 8f       	std	Y+29, r24	; 0x1d
	//SET RW TO ZERO
	Dio_enuWriteChannel(RW,DIO_u8LEVEL_LOW);
    47bc:	89 e0       	ldi	r24, 0x09	; 9
    47be:	60 e0       	ldi	r22, 0x00	; 0
    47c0:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>
	//SET RS TO ZERO
	Dio_enuWriteChannel(RS,DIO_u8LEVEL_LOW);
    47c4:	88 e0       	ldi	r24, 0x08	; 8
    47c6:	60 e0       	ldi	r22, 0x00	; 0
    47c8:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>
	//set high nibble value of command
	DIO_SetNibbleValue(LCD_PIN_START,DATA_PORT,Copy_u8Command>>4);
    47cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47ce:	98 2f       	mov	r25, r24
    47d0:	92 95       	swap	r25
    47d2:	9f 70       	andi	r25, 0x0F	; 15
    47d4:	84 e0       	ldi	r24, 0x04	; 4
    47d6:	60 e0       	ldi	r22, 0x00	; 0
    47d8:	49 2f       	mov	r20, r25
    47da:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <DIO_SetNibbleValue>
	//SEND THE FALLING EDGE ENABLE
	Dio_enuWriteChannel(E,DIO_u8LEVEL_HIGH);
    47de:	8a e0       	ldi	r24, 0x0A	; 10
    47e0:	61 e0       	ldi	r22, 0x01	; 1
    47e2:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>
    47e6:	80 e0       	ldi	r24, 0x00	; 0
    47e8:	90 e0       	ldi	r25, 0x00	; 0
    47ea:	a0 e0       	ldi	r26, 0x00	; 0
    47ec:	b0 e4       	ldi	r27, 0x40	; 64
    47ee:	89 8f       	std	Y+25, r24	; 0x19
    47f0:	9a 8f       	std	Y+26, r25	; 0x1a
    47f2:	ab 8f       	std	Y+27, r26	; 0x1b
    47f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47f6:	69 8d       	ldd	r22, Y+25	; 0x19
    47f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47fe:	20 e0       	ldi	r18, 0x00	; 0
    4800:	30 e0       	ldi	r19, 0x00	; 0
    4802:	4a e7       	ldi	r20, 0x7A	; 122
    4804:	55 e4       	ldi	r21, 0x45	; 69
    4806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    480a:	dc 01       	movw	r26, r24
    480c:	cb 01       	movw	r24, r22
    480e:	8d 8b       	std	Y+21, r24	; 0x15
    4810:	9e 8b       	std	Y+22, r25	; 0x16
    4812:	af 8b       	std	Y+23, r26	; 0x17
    4814:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4816:	6d 89       	ldd	r22, Y+21	; 0x15
    4818:	7e 89       	ldd	r23, Y+22	; 0x16
    481a:	8f 89       	ldd	r24, Y+23	; 0x17
    481c:	98 8d       	ldd	r25, Y+24	; 0x18
    481e:	20 e0       	ldi	r18, 0x00	; 0
    4820:	30 e0       	ldi	r19, 0x00	; 0
    4822:	40 e8       	ldi	r20, 0x80	; 128
    4824:	5f e3       	ldi	r21, 0x3F	; 63
    4826:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    482a:	88 23       	and	r24, r24
    482c:	2c f4       	brge	.+10     	; 0x4838 <LCD_WriteCommand4Bit+0x92>
		__ticks = 1;
    482e:	81 e0       	ldi	r24, 0x01	; 1
    4830:	90 e0       	ldi	r25, 0x00	; 0
    4832:	9c 8b       	std	Y+20, r25	; 0x14
    4834:	8b 8b       	std	Y+19, r24	; 0x13
    4836:	3f c0       	rjmp	.+126    	; 0x48b6 <LCD_WriteCommand4Bit+0x110>
	else if (__tmp > 65535)
    4838:	6d 89       	ldd	r22, Y+21	; 0x15
    483a:	7e 89       	ldd	r23, Y+22	; 0x16
    483c:	8f 89       	ldd	r24, Y+23	; 0x17
    483e:	98 8d       	ldd	r25, Y+24	; 0x18
    4840:	20 e0       	ldi	r18, 0x00	; 0
    4842:	3f ef       	ldi	r19, 0xFF	; 255
    4844:	4f e7       	ldi	r20, 0x7F	; 127
    4846:	57 e4       	ldi	r21, 0x47	; 71
    4848:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    484c:	18 16       	cp	r1, r24
    484e:	4c f5       	brge	.+82     	; 0x48a2 <LCD_WriteCommand4Bit+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4850:	69 8d       	ldd	r22, Y+25	; 0x19
    4852:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4854:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4856:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4858:	20 e0       	ldi	r18, 0x00	; 0
    485a:	30 e0       	ldi	r19, 0x00	; 0
    485c:	40 e2       	ldi	r20, 0x20	; 32
    485e:	51 e4       	ldi	r21, 0x41	; 65
    4860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4864:	dc 01       	movw	r26, r24
    4866:	cb 01       	movw	r24, r22
    4868:	bc 01       	movw	r22, r24
    486a:	cd 01       	movw	r24, r26
    486c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4870:	dc 01       	movw	r26, r24
    4872:	cb 01       	movw	r24, r22
    4874:	9c 8b       	std	Y+20, r25	; 0x14
    4876:	8b 8b       	std	Y+19, r24	; 0x13
    4878:	0f c0       	rjmp	.+30     	; 0x4898 <LCD_WriteCommand4Bit+0xf2>
    487a:	80 e9       	ldi	r24, 0x90	; 144
    487c:	91 e0       	ldi	r25, 0x01	; 1
    487e:	9a 8b       	std	Y+18, r25	; 0x12
    4880:	89 8b       	std	Y+17, r24	; 0x11
    4882:	89 89       	ldd	r24, Y+17	; 0x11
    4884:	9a 89       	ldd	r25, Y+18	; 0x12
    4886:	01 97       	sbiw	r24, 0x01	; 1
    4888:	f1 f7       	brne	.-4      	; 0x4886 <LCD_WriteCommand4Bit+0xe0>
    488a:	9a 8b       	std	Y+18, r25	; 0x12
    488c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    488e:	8b 89       	ldd	r24, Y+19	; 0x13
    4890:	9c 89       	ldd	r25, Y+20	; 0x14
    4892:	01 97       	sbiw	r24, 0x01	; 1
    4894:	9c 8b       	std	Y+20, r25	; 0x14
    4896:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4898:	8b 89       	ldd	r24, Y+19	; 0x13
    489a:	9c 89       	ldd	r25, Y+20	; 0x14
    489c:	00 97       	sbiw	r24, 0x00	; 0
    489e:	69 f7       	brne	.-38     	; 0x487a <LCD_WriteCommand4Bit+0xd4>
    48a0:	14 c0       	rjmp	.+40     	; 0x48ca <LCD_WriteCommand4Bit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48a2:	6d 89       	ldd	r22, Y+21	; 0x15
    48a4:	7e 89       	ldd	r23, Y+22	; 0x16
    48a6:	8f 89       	ldd	r24, Y+23	; 0x17
    48a8:	98 8d       	ldd	r25, Y+24	; 0x18
    48aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48ae:	dc 01       	movw	r26, r24
    48b0:	cb 01       	movw	r24, r22
    48b2:	9c 8b       	std	Y+20, r25	; 0x14
    48b4:	8b 8b       	std	Y+19, r24	; 0x13
    48b6:	8b 89       	ldd	r24, Y+19	; 0x13
    48b8:	9c 89       	ldd	r25, Y+20	; 0x14
    48ba:	98 8b       	std	Y+16, r25	; 0x10
    48bc:	8f 87       	std	Y+15, r24	; 0x0f
    48be:	8f 85       	ldd	r24, Y+15	; 0x0f
    48c0:	98 89       	ldd	r25, Y+16	; 0x10
    48c2:	01 97       	sbiw	r24, 0x01	; 1
    48c4:	f1 f7       	brne	.-4      	; 0x48c2 <LCD_WriteCommand4Bit+0x11c>
    48c6:	98 8b       	std	Y+16, r25	; 0x10
    48c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	Dio_enuWriteChannel(E,DIO_u8LEVEL_LOW);
    48ca:	8a e0       	ldi	r24, 0x0A	; 10
    48cc:	60 e0       	ldi	r22, 0x00	; 0
    48ce:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>
	//set LOW nibble value of command
	DIO_SetNibbleValue(LCD_PIN_START,DATA_PORT,Copy_u8Command);
    48d2:	84 e0       	ldi	r24, 0x04	; 4
    48d4:	60 e0       	ldi	r22, 0x00	; 0
    48d6:	4d 8d       	ldd	r20, Y+29	; 0x1d
    48d8:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <DIO_SetNibbleValue>
	//SEND THE FALLING EDGE ENABLE
	Dio_enuWriteChannel(E,DIO_u8LEVEL_HIGH);
    48dc:	8a e0       	ldi	r24, 0x0A	; 10
    48de:	61 e0       	ldi	r22, 0x01	; 1
    48e0:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>
    48e4:	80 e0       	ldi	r24, 0x00	; 0
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	a0 e0       	ldi	r26, 0x00	; 0
    48ea:	b0 e4       	ldi	r27, 0x40	; 64
    48ec:	8b 87       	std	Y+11, r24	; 0x0b
    48ee:	9c 87       	std	Y+12, r25	; 0x0c
    48f0:	ad 87       	std	Y+13, r26	; 0x0d
    48f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    48f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    48f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    48fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    48fc:	20 e0       	ldi	r18, 0x00	; 0
    48fe:	30 e0       	ldi	r19, 0x00	; 0
    4900:	4a e7       	ldi	r20, 0x7A	; 122
    4902:	55 e4       	ldi	r21, 0x45	; 69
    4904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4908:	dc 01       	movw	r26, r24
    490a:	cb 01       	movw	r24, r22
    490c:	8f 83       	std	Y+7, r24	; 0x07
    490e:	98 87       	std	Y+8, r25	; 0x08
    4910:	a9 87       	std	Y+9, r26	; 0x09
    4912:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4914:	6f 81       	ldd	r22, Y+7	; 0x07
    4916:	78 85       	ldd	r23, Y+8	; 0x08
    4918:	89 85       	ldd	r24, Y+9	; 0x09
    491a:	9a 85       	ldd	r25, Y+10	; 0x0a
    491c:	20 e0       	ldi	r18, 0x00	; 0
    491e:	30 e0       	ldi	r19, 0x00	; 0
    4920:	40 e8       	ldi	r20, 0x80	; 128
    4922:	5f e3       	ldi	r21, 0x3F	; 63
    4924:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4928:	88 23       	and	r24, r24
    492a:	2c f4       	brge	.+10     	; 0x4936 <LCD_WriteCommand4Bit+0x190>
		__ticks = 1;
    492c:	81 e0       	ldi	r24, 0x01	; 1
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	9e 83       	std	Y+6, r25	; 0x06
    4932:	8d 83       	std	Y+5, r24	; 0x05
    4934:	3f c0       	rjmp	.+126    	; 0x49b4 <LCD_WriteCommand4Bit+0x20e>
	else if (__tmp > 65535)
    4936:	6f 81       	ldd	r22, Y+7	; 0x07
    4938:	78 85       	ldd	r23, Y+8	; 0x08
    493a:	89 85       	ldd	r24, Y+9	; 0x09
    493c:	9a 85       	ldd	r25, Y+10	; 0x0a
    493e:	20 e0       	ldi	r18, 0x00	; 0
    4940:	3f ef       	ldi	r19, 0xFF	; 255
    4942:	4f e7       	ldi	r20, 0x7F	; 127
    4944:	57 e4       	ldi	r21, 0x47	; 71
    4946:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    494a:	18 16       	cp	r1, r24
    494c:	4c f5       	brge	.+82     	; 0x49a0 <LCD_WriteCommand4Bit+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    494e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4950:	7c 85       	ldd	r23, Y+12	; 0x0c
    4952:	8d 85       	ldd	r24, Y+13	; 0x0d
    4954:	9e 85       	ldd	r25, Y+14	; 0x0e
    4956:	20 e0       	ldi	r18, 0x00	; 0
    4958:	30 e0       	ldi	r19, 0x00	; 0
    495a:	40 e2       	ldi	r20, 0x20	; 32
    495c:	51 e4       	ldi	r21, 0x41	; 65
    495e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4962:	dc 01       	movw	r26, r24
    4964:	cb 01       	movw	r24, r22
    4966:	bc 01       	movw	r22, r24
    4968:	cd 01       	movw	r24, r26
    496a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    496e:	dc 01       	movw	r26, r24
    4970:	cb 01       	movw	r24, r22
    4972:	9e 83       	std	Y+6, r25	; 0x06
    4974:	8d 83       	std	Y+5, r24	; 0x05
    4976:	0f c0       	rjmp	.+30     	; 0x4996 <LCD_WriteCommand4Bit+0x1f0>
    4978:	80 e9       	ldi	r24, 0x90	; 144
    497a:	91 e0       	ldi	r25, 0x01	; 1
    497c:	9c 83       	std	Y+4, r25	; 0x04
    497e:	8b 83       	std	Y+3, r24	; 0x03
    4980:	8b 81       	ldd	r24, Y+3	; 0x03
    4982:	9c 81       	ldd	r25, Y+4	; 0x04
    4984:	01 97       	sbiw	r24, 0x01	; 1
    4986:	f1 f7       	brne	.-4      	; 0x4984 <LCD_WriteCommand4Bit+0x1de>
    4988:	9c 83       	std	Y+4, r25	; 0x04
    498a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    498c:	8d 81       	ldd	r24, Y+5	; 0x05
    498e:	9e 81       	ldd	r25, Y+6	; 0x06
    4990:	01 97       	sbiw	r24, 0x01	; 1
    4992:	9e 83       	std	Y+6, r25	; 0x06
    4994:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4996:	8d 81       	ldd	r24, Y+5	; 0x05
    4998:	9e 81       	ldd	r25, Y+6	; 0x06
    499a:	00 97       	sbiw	r24, 0x00	; 0
    499c:	69 f7       	brne	.-38     	; 0x4978 <LCD_WriteCommand4Bit+0x1d2>
    499e:	14 c0       	rjmp	.+40     	; 0x49c8 <LCD_WriteCommand4Bit+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49a0:	6f 81       	ldd	r22, Y+7	; 0x07
    49a2:	78 85       	ldd	r23, Y+8	; 0x08
    49a4:	89 85       	ldd	r24, Y+9	; 0x09
    49a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    49a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ac:	dc 01       	movw	r26, r24
    49ae:	cb 01       	movw	r24, r22
    49b0:	9e 83       	std	Y+6, r25	; 0x06
    49b2:	8d 83       	std	Y+5, r24	; 0x05
    49b4:	8d 81       	ldd	r24, Y+5	; 0x05
    49b6:	9e 81       	ldd	r25, Y+6	; 0x06
    49b8:	9a 83       	std	Y+2, r25	; 0x02
    49ba:	89 83       	std	Y+1, r24	; 0x01
    49bc:	89 81       	ldd	r24, Y+1	; 0x01
    49be:	9a 81       	ldd	r25, Y+2	; 0x02
    49c0:	01 97       	sbiw	r24, 0x01	; 1
    49c2:	f1 f7       	brne	.-4      	; 0x49c0 <LCD_WriteCommand4Bit+0x21a>
    49c4:	9a 83       	std	Y+2, r25	; 0x02
    49c6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		Dio_enuWriteChannel(E,DIO_u8LEVEL_LOW);
    49c8:	8a e0       	ldi	r24, 0x0A	; 10
    49ca:	60 e0       	ldi	r22, 0x00	; 0
    49cc:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>
}
    49d0:	6d 96       	adiw	r28, 0x1d	; 29
    49d2:	0f b6       	in	r0, 0x3f	; 63
    49d4:	f8 94       	cli
    49d6:	de bf       	out	0x3e, r29	; 62
    49d8:	0f be       	out	0x3f, r0	; 63
    49da:	cd bf       	out	0x3d, r28	; 61
    49dc:	cf 91       	pop	r28
    49de:	df 91       	pop	r29
    49e0:	08 95       	ret

000049e2 <LCD_WriteChar4Bit>:

/*sending this function an integer from 0 to 7 prints custom char stored in cgram*/
void LCD_WriteChar4Bit(u8 Copy_u8Data){
    49e2:	df 93       	push	r29
    49e4:	cf 93       	push	r28
    49e6:	cd b7       	in	r28, 0x3d	; 61
    49e8:	de b7       	in	r29, 0x3e	; 62
    49ea:	6d 97       	sbiw	r28, 0x1d	; 29
    49ec:	0f b6       	in	r0, 0x3f	; 63
    49ee:	f8 94       	cli
    49f0:	de bf       	out	0x3e, r29	; 62
    49f2:	0f be       	out	0x3f, r0	; 63
    49f4:	cd bf       	out	0x3d, r28	; 61
    49f6:	8d 8f       	std	Y+29, r24	; 0x1d
	//SET RW TO low
	Dio_enuWriteChannel(RW,DIO_u8LEVEL_LOW);
    49f8:	89 e0       	ldi	r24, 0x09	; 9
    49fa:	60 e0       	ldi	r22, 0x00	; 0
    49fc:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>
	//SET RS TO high
	Dio_enuWriteChannel(RS,DIO_u8LEVEL_HIGH);
    4a00:	88 e0       	ldi	r24, 0x08	; 8
    4a02:	61 e0       	ldi	r22, 0x01	; 1
    4a04:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>
	//set high nibble value of DATA
	DIO_SetNibbleValue(LCD_PIN_START,DATA_PORT,Copy_u8Data>>4);
    4a08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a0a:	98 2f       	mov	r25, r24
    4a0c:	92 95       	swap	r25
    4a0e:	9f 70       	andi	r25, 0x0F	; 15
    4a10:	84 e0       	ldi	r24, 0x04	; 4
    4a12:	60 e0       	ldi	r22, 0x00	; 0
    4a14:	49 2f       	mov	r20, r25
    4a16:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <DIO_SetNibbleValue>
	//SEND THE FALLING EDGE ENABLE
	Dio_enuWriteChannel(E,DIO_u8LEVEL_HIGH);
    4a1a:	8a e0       	ldi	r24, 0x0A	; 10
    4a1c:	61 e0       	ldi	r22, 0x01	; 1
    4a1e:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>
    4a22:	80 e0       	ldi	r24, 0x00	; 0
    4a24:	90 e0       	ldi	r25, 0x00	; 0
    4a26:	a0 e0       	ldi	r26, 0x00	; 0
    4a28:	b0 e4       	ldi	r27, 0x40	; 64
    4a2a:	89 8f       	std	Y+25, r24	; 0x19
    4a2c:	9a 8f       	std	Y+26, r25	; 0x1a
    4a2e:	ab 8f       	std	Y+27, r26	; 0x1b
    4a30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a32:	69 8d       	ldd	r22, Y+25	; 0x19
    4a34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a3a:	20 e0       	ldi	r18, 0x00	; 0
    4a3c:	30 e0       	ldi	r19, 0x00	; 0
    4a3e:	4a e7       	ldi	r20, 0x7A	; 122
    4a40:	55 e4       	ldi	r21, 0x45	; 69
    4a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a46:	dc 01       	movw	r26, r24
    4a48:	cb 01       	movw	r24, r22
    4a4a:	8d 8b       	std	Y+21, r24	; 0x15
    4a4c:	9e 8b       	std	Y+22, r25	; 0x16
    4a4e:	af 8b       	std	Y+23, r26	; 0x17
    4a50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4a52:	6d 89       	ldd	r22, Y+21	; 0x15
    4a54:	7e 89       	ldd	r23, Y+22	; 0x16
    4a56:	8f 89       	ldd	r24, Y+23	; 0x17
    4a58:	98 8d       	ldd	r25, Y+24	; 0x18
    4a5a:	20 e0       	ldi	r18, 0x00	; 0
    4a5c:	30 e0       	ldi	r19, 0x00	; 0
    4a5e:	40 e8       	ldi	r20, 0x80	; 128
    4a60:	5f e3       	ldi	r21, 0x3F	; 63
    4a62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a66:	88 23       	and	r24, r24
    4a68:	2c f4       	brge	.+10     	; 0x4a74 <LCD_WriteChar4Bit+0x92>
		__ticks = 1;
    4a6a:	81 e0       	ldi	r24, 0x01	; 1
    4a6c:	90 e0       	ldi	r25, 0x00	; 0
    4a6e:	9c 8b       	std	Y+20, r25	; 0x14
    4a70:	8b 8b       	std	Y+19, r24	; 0x13
    4a72:	3f c0       	rjmp	.+126    	; 0x4af2 <LCD_WriteChar4Bit+0x110>
	else if (__tmp > 65535)
    4a74:	6d 89       	ldd	r22, Y+21	; 0x15
    4a76:	7e 89       	ldd	r23, Y+22	; 0x16
    4a78:	8f 89       	ldd	r24, Y+23	; 0x17
    4a7a:	98 8d       	ldd	r25, Y+24	; 0x18
    4a7c:	20 e0       	ldi	r18, 0x00	; 0
    4a7e:	3f ef       	ldi	r19, 0xFF	; 255
    4a80:	4f e7       	ldi	r20, 0x7F	; 127
    4a82:	57 e4       	ldi	r21, 0x47	; 71
    4a84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a88:	18 16       	cp	r1, r24
    4a8a:	4c f5       	brge	.+82     	; 0x4ade <LCD_WriteChar4Bit+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a8c:	69 8d       	ldd	r22, Y+25	; 0x19
    4a8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a94:	20 e0       	ldi	r18, 0x00	; 0
    4a96:	30 e0       	ldi	r19, 0x00	; 0
    4a98:	40 e2       	ldi	r20, 0x20	; 32
    4a9a:	51 e4       	ldi	r21, 0x41	; 65
    4a9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aa0:	dc 01       	movw	r26, r24
    4aa2:	cb 01       	movw	r24, r22
    4aa4:	bc 01       	movw	r22, r24
    4aa6:	cd 01       	movw	r24, r26
    4aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aac:	dc 01       	movw	r26, r24
    4aae:	cb 01       	movw	r24, r22
    4ab0:	9c 8b       	std	Y+20, r25	; 0x14
    4ab2:	8b 8b       	std	Y+19, r24	; 0x13
    4ab4:	0f c0       	rjmp	.+30     	; 0x4ad4 <LCD_WriteChar4Bit+0xf2>
    4ab6:	80 e9       	ldi	r24, 0x90	; 144
    4ab8:	91 e0       	ldi	r25, 0x01	; 1
    4aba:	9a 8b       	std	Y+18, r25	; 0x12
    4abc:	89 8b       	std	Y+17, r24	; 0x11
    4abe:	89 89       	ldd	r24, Y+17	; 0x11
    4ac0:	9a 89       	ldd	r25, Y+18	; 0x12
    4ac2:	01 97       	sbiw	r24, 0x01	; 1
    4ac4:	f1 f7       	brne	.-4      	; 0x4ac2 <LCD_WriteChar4Bit+0xe0>
    4ac6:	9a 8b       	std	Y+18, r25	; 0x12
    4ac8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aca:	8b 89       	ldd	r24, Y+19	; 0x13
    4acc:	9c 89       	ldd	r25, Y+20	; 0x14
    4ace:	01 97       	sbiw	r24, 0x01	; 1
    4ad0:	9c 8b       	std	Y+20, r25	; 0x14
    4ad2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ad4:	8b 89       	ldd	r24, Y+19	; 0x13
    4ad6:	9c 89       	ldd	r25, Y+20	; 0x14
    4ad8:	00 97       	sbiw	r24, 0x00	; 0
    4ada:	69 f7       	brne	.-38     	; 0x4ab6 <LCD_WriteChar4Bit+0xd4>
    4adc:	14 c0       	rjmp	.+40     	; 0x4b06 <LCD_WriteChar4Bit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ade:	6d 89       	ldd	r22, Y+21	; 0x15
    4ae0:	7e 89       	ldd	r23, Y+22	; 0x16
    4ae2:	8f 89       	ldd	r24, Y+23	; 0x17
    4ae4:	98 8d       	ldd	r25, Y+24	; 0x18
    4ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aea:	dc 01       	movw	r26, r24
    4aec:	cb 01       	movw	r24, r22
    4aee:	9c 8b       	std	Y+20, r25	; 0x14
    4af0:	8b 8b       	std	Y+19, r24	; 0x13
    4af2:	8b 89       	ldd	r24, Y+19	; 0x13
    4af4:	9c 89       	ldd	r25, Y+20	; 0x14
    4af6:	98 8b       	std	Y+16, r25	; 0x10
    4af8:	8f 87       	std	Y+15, r24	; 0x0f
    4afa:	8f 85       	ldd	r24, Y+15	; 0x0f
    4afc:	98 89       	ldd	r25, Y+16	; 0x10
    4afe:	01 97       	sbiw	r24, 0x01	; 1
    4b00:	f1 f7       	brne	.-4      	; 0x4afe <LCD_WriteChar4Bit+0x11c>
    4b02:	98 8b       	std	Y+16, r25	; 0x10
    4b04:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	Dio_enuWriteChannel(E,DIO_u8LEVEL_LOW);
    4b06:	8a e0       	ldi	r24, 0x0A	; 10
    4b08:	60 e0       	ldi	r22, 0x00	; 0
    4b0a:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>
	//set LOW nibble value of DATA
	DIO_SetNibbleValue(LCD_PIN_START,DATA_PORT,Copy_u8Data);
    4b0e:	84 e0       	ldi	r24, 0x04	; 4
    4b10:	60 e0       	ldi	r22, 0x00	; 0
    4b12:	4d 8d       	ldd	r20, Y+29	; 0x1d
    4b14:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <DIO_SetNibbleValue>
	//SEND THE FALLING EDGE ENABLE
	Dio_enuWriteChannel(E,DIO_u8LEVEL_HIGH);
    4b18:	8a e0       	ldi	r24, 0x0A	; 10
    4b1a:	61 e0       	ldi	r22, 0x01	; 1
    4b1c:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>
    4b20:	80 e0       	ldi	r24, 0x00	; 0
    4b22:	90 e0       	ldi	r25, 0x00	; 0
    4b24:	a0 e0       	ldi	r26, 0x00	; 0
    4b26:	b0 e4       	ldi	r27, 0x40	; 64
    4b28:	8b 87       	std	Y+11, r24	; 0x0b
    4b2a:	9c 87       	std	Y+12, r25	; 0x0c
    4b2c:	ad 87       	std	Y+13, r26	; 0x0d
    4b2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b30:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b32:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b34:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b36:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b38:	20 e0       	ldi	r18, 0x00	; 0
    4b3a:	30 e0       	ldi	r19, 0x00	; 0
    4b3c:	4a e7       	ldi	r20, 0x7A	; 122
    4b3e:	55 e4       	ldi	r21, 0x45	; 69
    4b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b44:	dc 01       	movw	r26, r24
    4b46:	cb 01       	movw	r24, r22
    4b48:	8f 83       	std	Y+7, r24	; 0x07
    4b4a:	98 87       	std	Y+8, r25	; 0x08
    4b4c:	a9 87       	std	Y+9, r26	; 0x09
    4b4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b50:	6f 81       	ldd	r22, Y+7	; 0x07
    4b52:	78 85       	ldd	r23, Y+8	; 0x08
    4b54:	89 85       	ldd	r24, Y+9	; 0x09
    4b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b58:	20 e0       	ldi	r18, 0x00	; 0
    4b5a:	30 e0       	ldi	r19, 0x00	; 0
    4b5c:	40 e8       	ldi	r20, 0x80	; 128
    4b5e:	5f e3       	ldi	r21, 0x3F	; 63
    4b60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b64:	88 23       	and	r24, r24
    4b66:	2c f4       	brge	.+10     	; 0x4b72 <LCD_WriteChar4Bit+0x190>
		__ticks = 1;
    4b68:	81 e0       	ldi	r24, 0x01	; 1
    4b6a:	90 e0       	ldi	r25, 0x00	; 0
    4b6c:	9e 83       	std	Y+6, r25	; 0x06
    4b6e:	8d 83       	std	Y+5, r24	; 0x05
    4b70:	3f c0       	rjmp	.+126    	; 0x4bf0 <LCD_WriteChar4Bit+0x20e>
	else if (__tmp > 65535)
    4b72:	6f 81       	ldd	r22, Y+7	; 0x07
    4b74:	78 85       	ldd	r23, Y+8	; 0x08
    4b76:	89 85       	ldd	r24, Y+9	; 0x09
    4b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b7a:	20 e0       	ldi	r18, 0x00	; 0
    4b7c:	3f ef       	ldi	r19, 0xFF	; 255
    4b7e:	4f e7       	ldi	r20, 0x7F	; 127
    4b80:	57 e4       	ldi	r21, 0x47	; 71
    4b82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b86:	18 16       	cp	r1, r24
    4b88:	4c f5       	brge	.+82     	; 0x4bdc <LCD_WriteChar4Bit+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b92:	20 e0       	ldi	r18, 0x00	; 0
    4b94:	30 e0       	ldi	r19, 0x00	; 0
    4b96:	40 e2       	ldi	r20, 0x20	; 32
    4b98:	51 e4       	ldi	r21, 0x41	; 65
    4b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b9e:	dc 01       	movw	r26, r24
    4ba0:	cb 01       	movw	r24, r22
    4ba2:	bc 01       	movw	r22, r24
    4ba4:	cd 01       	movw	r24, r26
    4ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4baa:	dc 01       	movw	r26, r24
    4bac:	cb 01       	movw	r24, r22
    4bae:	9e 83       	std	Y+6, r25	; 0x06
    4bb0:	8d 83       	std	Y+5, r24	; 0x05
    4bb2:	0f c0       	rjmp	.+30     	; 0x4bd2 <LCD_WriteChar4Bit+0x1f0>
    4bb4:	80 e9       	ldi	r24, 0x90	; 144
    4bb6:	91 e0       	ldi	r25, 0x01	; 1
    4bb8:	9c 83       	std	Y+4, r25	; 0x04
    4bba:	8b 83       	std	Y+3, r24	; 0x03
    4bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    4bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    4bc0:	01 97       	sbiw	r24, 0x01	; 1
    4bc2:	f1 f7       	brne	.-4      	; 0x4bc0 <LCD_WriteChar4Bit+0x1de>
    4bc4:	9c 83       	std	Y+4, r25	; 0x04
    4bc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    4bca:	9e 81       	ldd	r25, Y+6	; 0x06
    4bcc:	01 97       	sbiw	r24, 0x01	; 1
    4bce:	9e 83       	std	Y+6, r25	; 0x06
    4bd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    4bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    4bd6:	00 97       	sbiw	r24, 0x00	; 0
    4bd8:	69 f7       	brne	.-38     	; 0x4bb4 <LCD_WriteChar4Bit+0x1d2>
    4bda:	14 c0       	rjmp	.+40     	; 0x4c04 <LCD_WriteChar4Bit+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    4bde:	78 85       	ldd	r23, Y+8	; 0x08
    4be0:	89 85       	ldd	r24, Y+9	; 0x09
    4be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4be8:	dc 01       	movw	r26, r24
    4bea:	cb 01       	movw	r24, r22
    4bec:	9e 83       	std	Y+6, r25	; 0x06
    4bee:	8d 83       	std	Y+5, r24	; 0x05
    4bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    4bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    4bf4:	9a 83       	std	Y+2, r25	; 0x02
    4bf6:	89 83       	std	Y+1, r24	; 0x01
    4bf8:	89 81       	ldd	r24, Y+1	; 0x01
    4bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    4bfc:	01 97       	sbiw	r24, 0x01	; 1
    4bfe:	f1 f7       	brne	.-4      	; 0x4bfc <LCD_WriteChar4Bit+0x21a>
    4c00:	9a 83       	std	Y+2, r25	; 0x02
    4c02:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		Dio_enuWriteChannel(E,DIO_u8LEVEL_LOW);
    4c04:	8a e0       	ldi	r24, 0x0A	; 10
    4c06:	60 e0       	ldi	r22, 0x00	; 0
    4c08:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>
}
    4c0c:	6d 96       	adiw	r28, 0x1d	; 29
    4c0e:	0f b6       	in	r0, 0x3f	; 63
    4c10:	f8 94       	cli
    4c12:	de bf       	out	0x3e, r29	; 62
    4c14:	0f be       	out	0x3f, r0	; 63
    4c16:	cd bf       	out	0x3d, r28	; 61
    4c18:	cf 91       	pop	r28
    4c1a:	df 91       	pop	r29
    4c1c:	08 95       	ret

00004c1e <LCD_WriteString>:
void LCD_WriteString(u8 *u8Copy_u8String){
    4c1e:	df 93       	push	r29
    4c20:	cf 93       	push	r28
    4c22:	00 d0       	rcall	.+0      	; 0x4c24 <LCD_WriteString+0x6>
    4c24:	00 d0       	rcall	.+0      	; 0x4c26 <LCD_WriteString+0x8>
    4c26:	cd b7       	in	r28, 0x3d	; 61
    4c28:	de b7       	in	r29, 0x3e	; 62
    4c2a:	9c 83       	std	Y+4, r25	; 0x04
    4c2c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Loc_u8Counter=0;
    4c2e:	1a 82       	std	Y+2, r1	; 0x02
	u8 Copy_u8Data_SizeofString =0;
    4c30:	19 82       	std	Y+1, r1	; 0x01
	for (Loc_u8Counter = 0; u8Copy_u8String[Loc_u8Counter] != '\0'; Loc_u8Counter++){
    4c32:	1a 82       	std	Y+2, r1	; 0x02
    4c34:	06 c0       	rjmp	.+12     	; 0x4c42 <LCD_WriteString+0x24>
		Copy_u8Data_SizeofString =Loc_u8Counter+1;
    4c36:	8a 81       	ldd	r24, Y+2	; 0x02
    4c38:	8f 5f       	subi	r24, 0xFF	; 255
    4c3a:	89 83       	std	Y+1, r24	; 0x01
		Dio_enuWriteChannel(E,DIO_u8LEVEL_LOW);
}
void LCD_WriteString(u8 *u8Copy_u8String){
	u8 Loc_u8Counter=0;
	u8 Copy_u8Data_SizeofString =0;
	for (Loc_u8Counter = 0; u8Copy_u8String[Loc_u8Counter] != '\0'; Loc_u8Counter++){
    4c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c3e:	8f 5f       	subi	r24, 0xFF	; 255
    4c40:	8a 83       	std	Y+2, r24	; 0x02
    4c42:	8a 81       	ldd	r24, Y+2	; 0x02
    4c44:	28 2f       	mov	r18, r24
    4c46:	30 e0       	ldi	r19, 0x00	; 0
    4c48:	8b 81       	ldd	r24, Y+3	; 0x03
    4c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    4c4c:	fc 01       	movw	r30, r24
    4c4e:	e2 0f       	add	r30, r18
    4c50:	f3 1f       	adc	r31, r19
    4c52:	80 81       	ld	r24, Z
    4c54:	88 23       	and	r24, r24
    4c56:	79 f7       	brne	.-34     	; 0x4c36 <LCD_WriteString+0x18>
		Copy_u8Data_SizeofString =Loc_u8Counter+1;
	}
	if(Copy_u8Data_SizeofString>32){
    4c58:	89 81       	ldd	r24, Y+1	; 0x01
    4c5a:	81 32       	cpi	r24, 0x21	; 33
    4c5c:	90 f5       	brcc	.+100    	; 0x4cc2 <LCD_WriteString+0xa4>
	//print error

	}
	else{
	Loc_u8Counter =0;
    4c5e:	1a 82       	std	Y+2, r1	; 0x02
    4c60:	2d c0       	rjmp	.+90     	; 0x4cbc <LCD_WriteString+0x9e>
	while(Copy_u8Data_SizeofString>0){
		if(Loc_u8Counter<LCD_LINE_LENGTH){
    4c62:	8a 81       	ldd	r24, Y+2	; 0x02
    4c64:	80 31       	cpi	r24, 0x10	; 16
    4c66:	90 f4       	brcc	.+36     	; 0x4c8c <LCD_WriteString+0x6e>
			LCD_WriteChar4Bit(u8Copy_u8String[Loc_u8Counter]);
    4c68:	8a 81       	ldd	r24, Y+2	; 0x02
    4c6a:	28 2f       	mov	r18, r24
    4c6c:	30 e0       	ldi	r19, 0x00	; 0
    4c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c70:	9c 81       	ldd	r25, Y+4	; 0x04
    4c72:	fc 01       	movw	r30, r24
    4c74:	e2 0f       	add	r30, r18
    4c76:	f3 1f       	adc	r31, r19
    4c78:	80 81       	ld	r24, Z
    4c7a:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <LCD_WriteChar4Bit>
		     Loc_u8Counter++;
    4c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c80:	8f 5f       	subi	r24, 0xFF	; 255
    4c82:	8a 83       	std	Y+2, r24	; 0x02
			 Copy_u8Data_SizeofString--;
    4c84:	89 81       	ldd	r24, Y+1	; 0x01
    4c86:	81 50       	subi	r24, 0x01	; 1
    4c88:	89 83       	std	Y+1, r24	; 0x01
    4c8a:	18 c0       	rjmp	.+48     	; 0x4cbc <LCD_WriteString+0x9e>
		}
		else{
			 LCD_SetCursorPosition(LCD_LINE_1, Loc_u8Counter-LCD_LINE_LENGTH);
    4c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c8e:	98 2f       	mov	r25, r24
    4c90:	90 51       	subi	r25, 0x10	; 16
    4c92:	81 e0       	ldi	r24, 0x01	; 1
    4c94:	69 2f       	mov	r22, r25
    4c96:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <LCD_SetCursorPosition>
			 LCD_WriteChar4Bit(u8Copy_u8String[Loc_u8Counter]);
    4c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c9c:	28 2f       	mov	r18, r24
    4c9e:	30 e0       	ldi	r19, 0x00	; 0
    4ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    4ca4:	fc 01       	movw	r30, r24
    4ca6:	e2 0f       	add	r30, r18
    4ca8:	f3 1f       	adc	r31, r19
    4caa:	80 81       	ld	r24, Z
    4cac:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <LCD_WriteChar4Bit>
			 Loc_u8Counter++;
    4cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    4cb2:	8f 5f       	subi	r24, 0xFF	; 255
    4cb4:	8a 83       	std	Y+2, r24	; 0x02
			 Copy_u8Data_SizeofString--;
    4cb6:	89 81       	ldd	r24, Y+1	; 0x01
    4cb8:	81 50       	subi	r24, 0x01	; 1
    4cba:	89 83       	std	Y+1, r24	; 0x01
	//print error

	}
	else{
	Loc_u8Counter =0;
	while(Copy_u8Data_SizeofString>0){
    4cbc:	89 81       	ldd	r24, Y+1	; 0x01
    4cbe:	88 23       	and	r24, r24
    4cc0:	81 f6       	brne	.-96     	; 0x4c62 <LCD_WriteString+0x44>
			 Copy_u8Data_SizeofString--;
		}
	}
	}

}
    4cc2:	0f 90       	pop	r0
    4cc4:	0f 90       	pop	r0
    4cc6:	0f 90       	pop	r0
    4cc8:	0f 90       	pop	r0
    4cca:	cf 91       	pop	r28
    4ccc:	df 91       	pop	r29
    4cce:	08 95       	ret

00004cd0 <LCD_SetCursorPosition>:
void LCD_SetCursorPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    4cd0:	df 93       	push	r29
    4cd2:	cf 93       	push	r28
    4cd4:	00 d0       	rcall	.+0      	; 0x4cd6 <LCD_SetCursorPosition+0x6>
    4cd6:	cd b7       	in	r28, 0x3d	; 61
    4cd8:	de b7       	in	r29, 0x3e	; 62
    4cda:	89 83       	std	Y+1, r24	; 0x01
    4cdc:	6a 83       	std	Y+2, r22	; 0x02
if((Copy_u8LineNumber==LCD_LINE_0)||(Copy_u8LineNumber==LCD_LINE_1))
    4cde:	89 81       	ldd	r24, Y+1	; 0x01
    4ce0:	88 23       	and	r24, r24
    4ce2:	19 f0       	breq	.+6      	; 0x4cea <LCD_SetCursorPosition+0x1a>
    4ce4:	89 81       	ldd	r24, Y+1	; 0x01
    4ce6:	81 30       	cpi	r24, 0x01	; 1
    4ce8:	79 f4       	brne	.+30     	; 0x4d08 <LCD_SetCursorPosition+0x38>
{
	if(Copy_u8PositionNumber<16)
    4cea:	8a 81       	ldd	r24, Y+2	; 0x02
    4cec:	80 31       	cpi	r24, 0x10	; 16
    4cee:	60 f4       	brcc	.+24     	; 0x4d08 <LCD_SetCursorPosition+0x38>
	{
		if(Copy_u8LineNumber==LCD_LINE_0)
    4cf0:	89 81       	ldd	r24, Y+1	; 0x01
    4cf2:	88 23       	and	r24, r24
    4cf4:	29 f4       	brne	.+10     	; 0x4d00 <LCD_SetCursorPosition+0x30>
		{
			LCD_WriteCommand4Bit(Copy_u8PositionNumber+LCD_LINE0_OFFSET);
    4cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    4cf8:	80 58       	subi	r24, 0x80	; 128
    4cfa:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <LCD_WriteCommand4Bit>
    4cfe:	04 c0       	rjmp	.+8      	; 0x4d08 <LCD_SetCursorPosition+0x38>
		}
		else
		{
			LCD_WriteCommand4Bit(Copy_u8PositionNumber+LCD_LINE1_OFFSET);
    4d00:	8a 81       	ldd	r24, Y+2	; 0x02
    4d02:	80 54       	subi	r24, 0x40	; 64
    4d04:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <LCD_WriteCommand4Bit>
}
else
{
	//Wrong Line Chosen
}
}
    4d08:	0f 90       	pop	r0
    4d0a:	0f 90       	pop	r0
    4d0c:	cf 91       	pop	r28
    4d0e:	df 91       	pop	r29
    4d10:	08 95       	ret

00004d12 <LCD_WriteNumber>:
void LCD_WriteNumber(u32 Copy_u32Number)
	{
    4d12:	0f 93       	push	r16
    4d14:	1f 93       	push	r17
    4d16:	df 93       	push	r29
    4d18:	cf 93       	push	r28
    4d1a:	cd b7       	in	r28, 0x3d	; 61
    4d1c:	de b7       	in	r29, 0x3e	; 62
    4d1e:	60 97       	sbiw	r28, 0x10	; 16
    4d20:	0f b6       	in	r0, 0x3f	; 63
    4d22:	f8 94       	cli
    4d24:	de bf       	out	0x3e, r29	; 62
    4d26:	0f be       	out	0x3f, r0	; 63
    4d28:	cd bf       	out	0x3d, r28	; 61
    4d2a:	6d 87       	std	Y+13, r22	; 0x0d
    4d2c:	7e 87       	std	Y+14, r23	; 0x0e
    4d2e:	8f 87       	std	Y+15, r24	; 0x0f
    4d30:	98 8b       	std	Y+16, r25	; 0x10
		which is 10 digits
		 */
		u8 Loc_u8Arr_Digits[10];

		/*Define a Local Counter to traverse the array*/
		u8 Loc_Counter=0;
    4d32:	1a 82       	std	Y+2, r1	; 0x02

		/*Check on the upcoming number*/
		if(Copy_u32Number>0)
    4d34:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d36:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d38:	af 85       	ldd	r26, Y+15	; 0x0f
    4d3a:	b8 89       	ldd	r27, Y+16	; 0x10
    4d3c:	00 97       	sbiw	r24, 0x00	; 0
    4d3e:	a1 05       	cpc	r26, r1
    4d40:	b1 05       	cpc	r27, r1
    4d42:	09 f4       	brne	.+2      	; 0x4d46 <LCD_WriteNumber+0x34>
    4d44:	4f c0       	rjmp	.+158    	; 0x4de4 <LCD_WriteNumber+0xd2>
    4d46:	2d c0       	rjmp	.+90     	; 0x4da2 <LCD_WriteNumber+0x90>
			/*Parsing the number into the array*/
			while(Copy_u32Number!=0) //Exit Condition means number is done parsing
			{
				//Extract the Least Significant Digit and Put it in the
				//Array
				Loc_u8Arr_Digits[Loc_Counter]=Copy_u32Number%10 ;
    4d48:	8a 81       	ldd	r24, Y+2	; 0x02
    4d4a:	08 2f       	mov	r16, r24
    4d4c:	10 e0       	ldi	r17, 0x00	; 0
    4d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d50:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d52:	af 85       	ldd	r26, Y+15	; 0x0f
    4d54:	b8 89       	ldd	r27, Y+16	; 0x10
    4d56:	2a e0       	ldi	r18, 0x0A	; 10
    4d58:	30 e0       	ldi	r19, 0x00	; 0
    4d5a:	40 e0       	ldi	r20, 0x00	; 0
    4d5c:	50 e0       	ldi	r21, 0x00	; 0
    4d5e:	bc 01       	movw	r22, r24
    4d60:	cd 01       	movw	r24, r26
    4d62:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <__udivmodsi4>
    4d66:	dc 01       	movw	r26, r24
    4d68:	cb 01       	movw	r24, r22
    4d6a:	28 2f       	mov	r18, r24
    4d6c:	ce 01       	movw	r24, r28
    4d6e:	03 96       	adiw	r24, 0x03	; 3
    4d70:	fc 01       	movw	r30, r24
    4d72:	e0 0f       	add	r30, r16
    4d74:	f1 1f       	adc	r31, r17
    4d76:	20 83       	st	Z, r18

				//Removing the Extracted digit from the number
				Copy_u32Number=Copy_u32Number/10 ;
    4d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d7c:	af 85       	ldd	r26, Y+15	; 0x0f
    4d7e:	b8 89       	ldd	r27, Y+16	; 0x10
    4d80:	2a e0       	ldi	r18, 0x0A	; 10
    4d82:	30 e0       	ldi	r19, 0x00	; 0
    4d84:	40 e0       	ldi	r20, 0x00	; 0
    4d86:	50 e0       	ldi	r21, 0x00	; 0
    4d88:	bc 01       	movw	r22, r24
    4d8a:	cd 01       	movw	r24, r26
    4d8c:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <__udivmodsi4>
    4d90:	da 01       	movw	r26, r20
    4d92:	c9 01       	movw	r24, r18
    4d94:	8d 87       	std	Y+13, r24	; 0x0d
    4d96:	9e 87       	std	Y+14, r25	; 0x0e
    4d98:	af 87       	std	Y+15, r26	; 0x0f
    4d9a:	b8 8b       	std	Y+16, r27	; 0x10

				//Increasing the counter so the digits are saved in next array element
				Loc_Counter++;
    4d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d9e:	8f 5f       	subi	r24, 0xFF	; 255
    4da0:	8a 83       	std	Y+2, r24	; 0x02

		/*Check on the upcoming number*/
		if(Copy_u32Number>0)
		{
			/*Parsing the number into the array*/
			while(Copy_u32Number!=0) //Exit Condition means number is done parsing
    4da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4da6:	af 85       	ldd	r26, Y+15	; 0x0f
    4da8:	b8 89       	ldd	r27, Y+16	; 0x10
    4daa:	00 97       	sbiw	r24, 0x00	; 0
    4dac:	a1 05       	cpc	r26, r1
    4dae:	b1 05       	cpc	r27, r1
    4db0:	59 f6       	brne	.-106    	; 0x4d48 <LCD_WriteNumber+0x36>
			//in the array but backwards

			//Take Care Loc_forCounter is signed
			//because we are decrementing it
			s8 Loc_forCounter;
			for(Loc_forCounter=Loc_Counter-1;Loc_forCounter>=0;Loc_forCounter--)
    4db2:	8a 81       	ldd	r24, Y+2	; 0x02
    4db4:	81 50       	subi	r24, 0x01	; 1
    4db6:	89 83       	std	Y+1, r24	; 0x01
    4db8:	11 c0       	rjmp	.+34     	; 0x4ddc <LCD_WriteNumber+0xca>
			{
				//Write the digits to the screen in their right order
				//Notice the addition of the number to the ASCII Code
				//of the number 0 because our Function takes ASCII of character
				//to Print on the LCD
				LCD_WriteChar4Bit(Loc_u8Arr_Digits[Loc_forCounter]+'0');
    4dba:	89 81       	ldd	r24, Y+1	; 0x01
    4dbc:	28 2f       	mov	r18, r24
    4dbe:	33 27       	eor	r19, r19
    4dc0:	27 fd       	sbrc	r18, 7
    4dc2:	30 95       	com	r19
    4dc4:	ce 01       	movw	r24, r28
    4dc6:	03 96       	adiw	r24, 0x03	; 3
    4dc8:	fc 01       	movw	r30, r24
    4dca:	e2 0f       	add	r30, r18
    4dcc:	f3 1f       	adc	r31, r19
    4dce:	80 81       	ld	r24, Z
    4dd0:	80 5d       	subi	r24, 0xD0	; 208
    4dd2:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <LCD_WriteChar4Bit>
			//in the array but backwards

			//Take Care Loc_forCounter is signed
			//because we are decrementing it
			s8 Loc_forCounter;
			for(Loc_forCounter=Loc_Counter-1;Loc_forCounter>=0;Loc_forCounter--)
    4dd6:	89 81       	ldd	r24, Y+1	; 0x01
    4dd8:	81 50       	subi	r24, 0x01	; 1
    4dda:	89 83       	std	Y+1, r24	; 0x01
    4ddc:	89 81       	ldd	r24, Y+1	; 0x01
    4dde:	88 23       	and	r24, r24
    4de0:	64 f7       	brge	.-40     	; 0x4dba <LCD_WriteNumber+0xa8>
    4de2:	03 c0       	rjmp	.+6      	; 0x4dea <LCD_WriteNumber+0xd8>

		}
		else
		{
			/*if the number is zero so we have to send ASCII Code of Zero*/
			LCD_WriteChar4Bit('0');
    4de4:	80 e3       	ldi	r24, 0x30	; 48
    4de6:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <LCD_WriteChar4Bit>
		}

	}
    4dea:	60 96       	adiw	r28, 0x10	; 16
    4dec:	0f b6       	in	r0, 0x3f	; 63
    4dee:	f8 94       	cli
    4df0:	de bf       	out	0x3e, r29	; 62
    4df2:	0f be       	out	0x3f, r0	; 63
    4df4:	cd bf       	out	0x3d, r28	; 61
    4df6:	cf 91       	pop	r28
    4df8:	df 91       	pop	r29
    4dfa:	1f 91       	pop	r17
    4dfc:	0f 91       	pop	r16
    4dfe:	08 95       	ret

00004e00 <LCD_CustomChar>:
void LCD_CustomChar (pu8 AddCustomChar,u8 index)
{
    4e00:	df 93       	push	r29
    4e02:	cf 93       	push	r28
    4e04:	00 d0       	rcall	.+0      	; 0x4e06 <LCD_CustomChar+0x6>
    4e06:	00 d0       	rcall	.+0      	; 0x4e08 <LCD_CustomChar+0x8>
    4e08:	cd b7       	in	r28, 0x3d	; 61
    4e0a:	de b7       	in	r29, 0x3e	; 62
    4e0c:	9b 83       	std	Y+3, r25	; 0x03
    4e0e:	8a 83       	std	Y+2, r24	; 0x02
    4e10:	6c 83       	std	Y+4, r22	; 0x04
    u8 Localu8Counter;
    if(index<8)
    4e12:	8c 81       	ldd	r24, Y+4	; 0x04
    4e14:	88 30       	cpi	r24, 0x08	; 8
    4e16:	f8 f4       	brcc	.+62     	; 0x4e56 <LCD_CustomChar+0x56>
    {
    	LCD_WriteCommand4Bit (0x40 + (index*8));  /* Command 0x40 and onwards forces
    4e18:	8c 81       	ldd	r24, Y+4	; 0x04
    4e1a:	88 2f       	mov	r24, r24
    4e1c:	90 e0       	ldi	r25, 0x00	; 0
    4e1e:	08 96       	adiw	r24, 0x08	; 8
    4e20:	88 0f       	add	r24, r24
    4e22:	99 1f       	adc	r25, r25
    4e24:	88 0f       	add	r24, r24
    4e26:	99 1f       	adc	r25, r25
    4e28:	88 0f       	add	r24, r24
    4e2a:	99 1f       	adc	r25, r25
    4e2c:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <LCD_WriteCommand4Bit>
                                       	   	   	   	    CGRAM address */
       for(Localu8Counter=0;Localu8Counter<8;Localu8Counter++)  /* Write 8 arrays values for generation of 1 character */
    4e30:	19 82       	std	Y+1, r1	; 0x01
    4e32:	0e c0       	rjmp	.+28     	; 0x4e50 <LCD_CustomChar+0x50>
    	   LCD_WriteChar4Bit(AddCustomChar[Localu8Counter]);
    4e34:	89 81       	ldd	r24, Y+1	; 0x01
    4e36:	28 2f       	mov	r18, r24
    4e38:	30 e0       	ldi	r19, 0x00	; 0
    4e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    4e3e:	fc 01       	movw	r30, r24
    4e40:	e2 0f       	add	r30, r18
    4e42:	f3 1f       	adc	r31, r19
    4e44:	80 81       	ld	r24, Z
    4e46:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <LCD_WriteChar4Bit>
    u8 Localu8Counter;
    if(index<8)
    {
    	LCD_WriteCommand4Bit (0x40 + (index*8));  /* Command 0x40 and onwards forces
                                       	   	   	   	    CGRAM address */
       for(Localu8Counter=0;Localu8Counter<8;Localu8Counter++)  /* Write 8 arrays values for generation of 1 character */
    4e4a:	89 81       	ldd	r24, Y+1	; 0x01
    4e4c:	8f 5f       	subi	r24, 0xFF	; 255
    4e4e:	89 83       	std	Y+1, r24	; 0x01
    4e50:	89 81       	ldd	r24, Y+1	; 0x01
    4e52:	88 30       	cpi	r24, 0x08	; 8
    4e54:	78 f3       	brcs	.-34     	; 0x4e34 <LCD_CustomChar+0x34>
    	   LCD_WriteChar4Bit(AddCustomChar[Localu8Counter]);
    }
}
    4e56:	0f 90       	pop	r0
    4e58:	0f 90       	pop	r0
    4e5a:	0f 90       	pop	r0
    4e5c:	0f 90       	pop	r0
    4e5e:	cf 91       	pop	r28
    4e60:	df 91       	pop	r29
    4e62:	08 95       	ret

00004e64 <KeyPadInit>:
#define c1 SBIT(PINC, 4)
#define c2 SBIT(PINC, 5)
#define c3 SBIT(PINC, 6)
#define c4 SBIT(PINC, 7)

void KeyPadInit(void){
    4e64:	df 93       	push	r29
    4e66:	cf 93       	push	r28
    4e68:	cd b7       	in	r28, 0x3d	; 61
    4e6a:	de b7       	in	r29, 0x3e	; 62

	/*Set Columns Pins Direction Output*/
	Port_enuSetPinDirection(27,PORT_u8OUTPUT);
    4e6c:	8b e1       	ldi	r24, 0x1B	; 27
    4e6e:	61 e0       	ldi	r22, 0x01	; 1
    4e70:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
	Port_enuSetPinDirection(28,PORT_u8OUTPUT);
    4e74:	8c e1       	ldi	r24, 0x1C	; 28
    4e76:	61 e0       	ldi	r22, 0x01	; 1
    4e78:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
	Port_enuSetPinDirection(29,PORT_u8OUTPUT);
    4e7c:	8d e1       	ldi	r24, 0x1D	; 29
    4e7e:	61 e0       	ldi	r22, 0x01	; 1
    4e80:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
	Port_enuSetPinDirection(30,PORT_u8OUTPUT);
    4e84:	8e e1       	ldi	r24, 0x1E	; 30
    4e86:	61 e0       	ldi	r22, 0x01	; 1
    4e88:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>

		/*Set Row Pins Direction Input*/
	Port_enuSetPinDirection(18,PORT_u8INPUT);
    4e8c:	82 e1       	ldi	r24, 0x12	; 18
    4e8e:	60 e0       	ldi	r22, 0x00	; 0
    4e90:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
	Port_enuSetPinDirection(19,PORT_u8INPUT);
    4e94:	83 e1       	ldi	r24, 0x13	; 19
    4e96:	60 e0       	ldi	r22, 0x00	; 0
    4e98:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
	Port_enuSetPinDirection(20,PORT_u8INPUT);
    4e9c:	84 e1       	ldi	r24, 0x14	; 20
    4e9e:	60 e0       	ldi	r22, 0x00	; 0
    4ea0:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>
	Port_enuSetPinDirection(21,PORT_u8INPUT);
    4ea4:	85 e1       	ldi	r24, 0x15	; 21
    4ea6:	60 e0       	ldi	r22, 0x00	; 0
    4ea8:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <Port_enuSetPinDirection>

		/*Activate Pull up Resistor */
	Port_enuSetPinMode(18,PORT_u8INPUT_PULLUP);
    4eac:	82 e1       	ldi	r24, 0x12	; 18
    4eae:	63 e0       	ldi	r22, 0x03	; 3
    4eb0:	0e 94 91 10 	call	0x2122	; 0x2122 <Port_enuSetPinMode>
	Port_enuSetPinMode(19,PORT_u8INPUT_PULLUP);
    4eb4:	83 e1       	ldi	r24, 0x13	; 19
    4eb6:	63 e0       	ldi	r22, 0x03	; 3
    4eb8:	0e 94 91 10 	call	0x2122	; 0x2122 <Port_enuSetPinMode>
	Port_enuSetPinMode(20,PORT_u8INPUT_PULLUP);
    4ebc:	84 e1       	ldi	r24, 0x14	; 20
    4ebe:	63 e0       	ldi	r22, 0x03	; 3
    4ec0:	0e 94 91 10 	call	0x2122	; 0x2122 <Port_enuSetPinMode>
	Port_enuSetPinMode(21,PORT_u8INPUT_PULLUP);
    4ec4:	85 e1       	ldi	r24, 0x15	; 21
    4ec6:	63 e0       	ldi	r22, 0x03	; 3
    4ec8:	0e 94 91 10 	call	0x2122	; 0x2122 <Port_enuSetPinMode>
	/*DEACTIVATE COULMNS*/
	Dio_enuWriteChannel(27,DIO_u8LEVEL_HIGH);
    4ecc:	8b e1       	ldi	r24, 0x1B	; 27
    4ece:	61 e0       	ldi	r22, 0x01	; 1
    4ed0:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>
	Dio_enuWriteChannel(28,DIO_u8LEVEL_HIGH);
    4ed4:	8c e1       	ldi	r24, 0x1C	; 28
    4ed6:	61 e0       	ldi	r22, 0x01	; 1
    4ed8:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>
	Dio_enuWriteChannel(29,DIO_u8LEVEL_HIGH);
    4edc:	8d e1       	ldi	r24, 0x1D	; 29
    4ede:	61 e0       	ldi	r22, 0x01	; 1
    4ee0:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>
	Dio_enuWriteChannel(30,DIO_u8LEVEL_HIGH);
    4ee4:	8e e1       	ldi	r24, 0x1E	; 30
    4ee6:	61 e0       	ldi	r22, 0x01	; 1
    4ee8:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>

}
    4eec:	cf 91       	pop	r28
    4eee:	df 91       	pop	r29
    4ef0:	08 95       	ret

00004ef2 <KeyPad_GetPressedButton>:
void KeyPad_GetPressedButton(u8 *u8PtrToPressedButton){
    4ef2:	df 93       	push	r29
    4ef4:	cf 93       	push	r28
    4ef6:	00 d0       	rcall	.+0      	; 0x4ef8 <KeyPad_GetPressedButton+0x6>
    4ef8:	00 d0       	rcall	.+0      	; 0x4efa <KeyPad_GetPressedButton+0x8>
    4efa:	00 d0       	rcall	.+0      	; 0x4efc <KeyPad_GetPressedButton+0xa>
    4efc:	cd b7       	in	r28, 0x3d	; 61
    4efe:	de b7       	in	r29, 0x3e	; 62
    4f00:	9e 83       	std	Y+6, r25	; 0x06
    4f02:	8d 83       	std	Y+5, r24	; 0x05

	 u8 Local_ColCount, Local_RowCount;
	    u8 rowVal;
	    u8 flag = 0;
    4f04:	19 82       	std	Y+1, r1	; 0x01
	    if (u8PtrToPressedButton != NULL)
    4f06:	8d 81       	ldd	r24, Y+5	; 0x05
    4f08:	9e 81       	ldd	r25, Y+6	; 0x06
    4f0a:	00 97       	sbiw	r24, 0x00	; 0
    4f0c:	09 f4       	brne	.+2      	; 0x4f10 <KeyPad_GetPressedButton+0x1e>
    4f0e:	50 c0       	rjmp	.+160    	; 0x4fb0 <KeyPad_GetPressedButton+0xbe>
	    {
	        for (Local_ColCount = 0; Local_ColCount < KEYPADSIZE; Local_ColCount++)
    4f10:	1b 82       	std	Y+3, r1	; 0x03
    4f12:	4a c0       	rjmp	.+148    	; 0x4fa8 <KeyPad_GetPressedButton+0xb6>
	        {
	            //activate current column
	        	Dio_enuWriteChannel((u8ColArr[Local_ColCount]), DIO_u8LEVEL_LOW);
    4f14:	8b 81       	ldd	r24, Y+3	; 0x03
    4f16:	88 2f       	mov	r24, r24
    4f18:	90 e0       	ldi	r25, 0x00	; 0
    4f1a:	fc 01       	movw	r30, r24
    4f1c:	ed 56       	subi	r30, 0x6D	; 109
    4f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f20:	80 81       	ld	r24, Z
    4f22:	60 e0       	ldi	r22, 0x00	; 0
    4f24:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>
	            for (Local_RowCount = 0; Local_RowCount < KEYPADSIZE; Local_RowCount++)
    4f28:	1a 82       	std	Y+2, r1	; 0x02
    4f2a:	16 c0       	rjmp	.+44     	; 0x4f58 <KeyPad_GetPressedButton+0x66>
	            {
	                //check row value if it is 0 then this column and row is connected
	            	Dio_enuReadChannel((u8RowArr[Local_RowCount]), &rowVal);
    4f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f2e:	88 2f       	mov	r24, r24
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	fc 01       	movw	r30, r24
    4f34:	e9 56       	subi	r30, 0x69	; 105
    4f36:	ff 4f       	sbci	r31, 0xFF	; 255
    4f38:	80 81       	ld	r24, Z
    4f3a:	9e 01       	movw	r18, r28
    4f3c:	2c 5f       	subi	r18, 0xFC	; 252
    4f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    4f40:	b9 01       	movw	r22, r18
    4f42:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <Dio_enuReadChannel>
	                if (rowVal == 0)
    4f46:	8c 81       	ldd	r24, Y+4	; 0x04
    4f48:	88 23       	and	r24, r24
    4f4a:	19 f4       	brne	.+6      	; 0x4f52 <KeyPad_GetPressedButton+0x60>
	                {
	                    flag = 1;
    4f4c:	81 e0       	ldi	r24, 0x01	; 1
    4f4e:	89 83       	std	Y+1, r24	; 0x01
    4f50:	06 c0       	rjmp	.+12     	; 0x4f5e <KeyPad_GetPressedButton+0x6c>
	    {
	        for (Local_ColCount = 0; Local_ColCount < KEYPADSIZE; Local_ColCount++)
	        {
	            //activate current column
	        	Dio_enuWriteChannel((u8ColArr[Local_ColCount]), DIO_u8LEVEL_LOW);
	            for (Local_RowCount = 0; Local_RowCount < KEYPADSIZE; Local_RowCount++)
    4f52:	8a 81       	ldd	r24, Y+2	; 0x02
    4f54:	8f 5f       	subi	r24, 0xFF	; 255
    4f56:	8a 83       	std	Y+2, r24	; 0x02
    4f58:	8a 81       	ldd	r24, Y+2	; 0x02
    4f5a:	84 30       	cpi	r24, 0x04	; 4
    4f5c:	38 f3       	brcs	.-50     	; 0x4f2c <KeyPad_GetPressedButton+0x3a>
	                    break;
	                }
	            }
	            //if the inner row loop has broken and flag is set,
	            //place value in return pointer and exit outer column loop.
	            if (flag == 1)
    4f5e:	89 81       	ldd	r24, Y+1	; 0x01
    4f60:	81 30       	cpi	r24, 0x01	; 1
    4f62:	a9 f4       	brne	.+42     	; 0x4f8e <KeyPad_GetPressedButton+0x9c>
	            {
	                *u8PtrToPressedButton = KeyPadSwitchValues[Local_ColCount][Local_RowCount];
    4f64:	8b 81       	ldd	r24, Y+3	; 0x03
    4f66:	48 2f       	mov	r20, r24
    4f68:	50 e0       	ldi	r21, 0x00	; 0
    4f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f6c:	28 2f       	mov	r18, r24
    4f6e:	30 e0       	ldi	r19, 0x00	; 0
    4f70:	ca 01       	movw	r24, r20
    4f72:	88 0f       	add	r24, r24
    4f74:	99 1f       	adc	r25, r25
    4f76:	88 0f       	add	r24, r24
    4f78:	99 1f       	adc	r25, r25
    4f7a:	82 0f       	add	r24, r18
    4f7c:	93 1f       	adc	r25, r19
    4f7e:	fc 01       	movw	r30, r24
    4f80:	ed 57       	subi	r30, 0x7D	; 125
    4f82:	ff 4f       	sbci	r31, 0xFF	; 255
    4f84:	80 81       	ld	r24, Z
    4f86:	ed 81       	ldd	r30, Y+5	; 0x05
    4f88:	fe 81       	ldd	r31, Y+6	; 0x06
    4f8a:	80 83       	st	Z, r24
    4f8c:	11 c0       	rjmp	.+34     	; 0x4fb0 <KeyPad_GetPressedButton+0xbe>
	                break;
	            }
	            //deactivate current column.
	            Dio_enuWriteChannel(u8ColArr[Local_ColCount], DIO_u8LEVEL_HIGH);
    4f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f90:	88 2f       	mov	r24, r24
    4f92:	90 e0       	ldi	r25, 0x00	; 0
    4f94:	fc 01       	movw	r30, r24
    4f96:	ed 56       	subi	r30, 0x6D	; 109
    4f98:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9a:	80 81       	ld	r24, Z
    4f9c:	61 e0       	ldi	r22, 0x01	; 1
    4f9e:	0e 94 66 1b 	call	0x36cc	; 0x36cc <Dio_enuWriteChannel>
	 u8 Local_ColCount, Local_RowCount;
	    u8 rowVal;
	    u8 flag = 0;
	    if (u8PtrToPressedButton != NULL)
	    {
	        for (Local_ColCount = 0; Local_ColCount < KEYPADSIZE; Local_ColCount++)
    4fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    4fa4:	8f 5f       	subi	r24, 0xFF	; 255
    4fa6:	8b 83       	std	Y+3, r24	; 0x03
    4fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    4faa:	84 30       	cpi	r24, 0x04	; 4
    4fac:	08 f4       	brcc	.+2      	; 0x4fb0 <KeyPad_GetPressedButton+0xbe>
    4fae:	b2 cf       	rjmp	.-156    	; 0x4f14 <KeyPad_GetPressedButton+0x22>
	    }




}
    4fb0:	26 96       	adiw	r28, 0x06	; 6
    4fb2:	0f b6       	in	r0, 0x3f	; 63
    4fb4:	f8 94       	cli
    4fb6:	de bf       	out	0x3e, r29	; 62
    4fb8:	0f be       	out	0x3f, r0	; 63
    4fba:	cd bf       	out	0x3d, r28	; 61
    4fbc:	cf 91       	pop	r28
    4fbe:	df 91       	pop	r29
    4fc0:	08 95       	ret

00004fc2 <keypressed>:



u8 keypressed(void)
  {
    4fc2:	0f 93       	push	r16
    4fc4:	1f 93       	push	r17
    4fc6:	df 93       	push	r29
    4fc8:	cf 93       	push	r28
    4fca:	cd b7       	in	r28, 0x3d	; 61
    4fcc:	de b7       	in	r29, 0x3e	; 62
    4fce:	c1 56       	subi	r28, 0x61	; 97
    4fd0:	d0 40       	sbci	r29, 0x00	; 0
    4fd2:	0f b6       	in	r0, 0x3f	; 63
    4fd4:	f8 94       	cli
    4fd6:	de bf       	out	0x3e, r29	; 62
    4fd8:	0f be       	out	0x3f, r0	; 63
    4fda:	cd bf       	out	0x3d, r28	; 61

   DDRC=0b00001111;
    4fdc:	e4 e3       	ldi	r30, 0x34	; 52
    4fde:	f0 e0       	ldi	r31, 0x00	; 0
    4fe0:	8f e0       	ldi	r24, 0x0F	; 15
    4fe2:	80 83       	st	Z, r24
   PORTC=0b11110000;
    4fe4:	e5 e3       	ldi	r30, 0x35	; 53
    4fe6:	f0 e0       	ldi	r31, 0x00	; 0
    4fe8:	80 ef       	ldi	r24, 0xF0	; 240
    4fea:	80 83       	st	Z, r24

   while (1)
    {
     r1=0;     r2=1;     r3=1;     r4=1;
    4fec:	e5 e3       	ldi	r30, 0x35	; 53
    4fee:	f0 e0       	ldi	r31, 0x00	; 0
    4ff0:	80 81       	ld	r24, Z
    4ff2:	8e 7f       	andi	r24, 0xFE	; 254
    4ff4:	80 83       	st	Z, r24
    4ff6:	e5 e3       	ldi	r30, 0x35	; 53
    4ff8:	f0 e0       	ldi	r31, 0x00	; 0
    4ffa:	80 81       	ld	r24, Z
    4ffc:	82 60       	ori	r24, 0x02	; 2
    4ffe:	80 83       	st	Z, r24
    5000:	e5 e3       	ldi	r30, 0x35	; 53
    5002:	f0 e0       	ldi	r31, 0x00	; 0
    5004:	80 81       	ld	r24, Z
    5006:	84 60       	ori	r24, 0x04	; 4
    5008:	80 83       	st	Z, r24
    500a:	e5 e3       	ldi	r30, 0x35	; 53
    500c:	f0 e0       	ldi	r31, 0x00	; 0
    500e:	80 81       	ld	r24, Z
    5010:	88 60       	ori	r24, 0x08	; 8
    5012:	80 83       	st	Z, r24
    5014:	fe 01       	movw	r30, r28
    5016:	e3 5a       	subi	r30, 0xA3	; 163
    5018:	ff 4f       	sbci	r31, 0xFF	; 255
    501a:	80 e0       	ldi	r24, 0x00	; 0
    501c:	90 e0       	ldi	r25, 0x00	; 0
    501e:	a8 e4       	ldi	r26, 0x48	; 72
    5020:	b2 e4       	ldi	r27, 0x42	; 66
    5022:	80 83       	st	Z, r24
    5024:	91 83       	std	Z+1, r25	; 0x01
    5026:	a2 83       	std	Z+2, r26	; 0x02
    5028:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    502a:	8e 01       	movw	r16, r28
    502c:	07 5a       	subi	r16, 0xA7	; 167
    502e:	1f 4f       	sbci	r17, 0xFF	; 255
    5030:	fe 01       	movw	r30, r28
    5032:	e3 5a       	subi	r30, 0xA3	; 163
    5034:	ff 4f       	sbci	r31, 0xFF	; 255
    5036:	60 81       	ld	r22, Z
    5038:	71 81       	ldd	r23, Z+1	; 0x01
    503a:	82 81       	ldd	r24, Z+2	; 0x02
    503c:	93 81       	ldd	r25, Z+3	; 0x03
    503e:	2b ea       	ldi	r18, 0xAB	; 171
    5040:	3a ea       	ldi	r19, 0xAA	; 170
    5042:	4a ea       	ldi	r20, 0xAA	; 170
    5044:	50 e4       	ldi	r21, 0x40	; 64
    5046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    504a:	dc 01       	movw	r26, r24
    504c:	cb 01       	movw	r24, r22
    504e:	f8 01       	movw	r30, r16
    5050:	80 83       	st	Z, r24
    5052:	91 83       	std	Z+1, r25	; 0x01
    5054:	a2 83       	std	Z+2, r26	; 0x02
    5056:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5058:	fe 01       	movw	r30, r28
    505a:	e7 5a       	subi	r30, 0xA7	; 167
    505c:	ff 4f       	sbci	r31, 0xFF	; 255
    505e:	60 81       	ld	r22, Z
    5060:	71 81       	ldd	r23, Z+1	; 0x01
    5062:	82 81       	ldd	r24, Z+2	; 0x02
    5064:	93 81       	ldd	r25, Z+3	; 0x03
    5066:	20 e0       	ldi	r18, 0x00	; 0
    5068:	30 e0       	ldi	r19, 0x00	; 0
    506a:	40 e8       	ldi	r20, 0x80	; 128
    506c:	5f e3       	ldi	r21, 0x3F	; 63
    506e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5072:	88 23       	and	r24, r24
    5074:	34 f4       	brge	.+12     	; 0x5082 <keypressed+0xc0>
		__ticks = 1;
    5076:	fe 01       	movw	r30, r28
    5078:	e8 5a       	subi	r30, 0xA8	; 168
    507a:	ff 4f       	sbci	r31, 0xFF	; 255
    507c:	81 e0       	ldi	r24, 0x01	; 1
    507e:	80 83       	st	Z, r24
    5080:	e0 c0       	rjmp	.+448    	; 0x5242 <keypressed+0x280>
	else if (__tmp > 255)
    5082:	fe 01       	movw	r30, r28
    5084:	e7 5a       	subi	r30, 0xA7	; 167
    5086:	ff 4f       	sbci	r31, 0xFF	; 255
    5088:	60 81       	ld	r22, Z
    508a:	71 81       	ldd	r23, Z+1	; 0x01
    508c:	82 81       	ldd	r24, Z+2	; 0x02
    508e:	93 81       	ldd	r25, Z+3	; 0x03
    5090:	20 e0       	ldi	r18, 0x00	; 0
    5092:	30 e0       	ldi	r19, 0x00	; 0
    5094:	4f e7       	ldi	r20, 0x7F	; 127
    5096:	53 e4       	ldi	r21, 0x43	; 67
    5098:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    509c:	18 16       	cp	r1, r24
    509e:	0c f0       	brlt	.+2      	; 0x50a2 <keypressed+0xe0>
    50a0:	c0 c0       	rjmp	.+384    	; 0x5222 <keypressed+0x260>
	{
		_delay_ms(__us / 1000.0);
    50a2:	fe 01       	movw	r30, r28
    50a4:	e3 5a       	subi	r30, 0xA3	; 163
    50a6:	ff 4f       	sbci	r31, 0xFF	; 255
    50a8:	60 81       	ld	r22, Z
    50aa:	71 81       	ldd	r23, Z+1	; 0x01
    50ac:	82 81       	ldd	r24, Z+2	; 0x02
    50ae:	93 81       	ldd	r25, Z+3	; 0x03
    50b0:	20 e0       	ldi	r18, 0x00	; 0
    50b2:	30 e0       	ldi	r19, 0x00	; 0
    50b4:	4a e7       	ldi	r20, 0x7A	; 122
    50b6:	54 e4       	ldi	r21, 0x44	; 68
    50b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    50bc:	dc 01       	movw	r26, r24
    50be:	cb 01       	movw	r24, r22
    50c0:	fe 01       	movw	r30, r28
    50c2:	ec 5a       	subi	r30, 0xAC	; 172
    50c4:	ff 4f       	sbci	r31, 0xFF	; 255
    50c6:	80 83       	st	Z, r24
    50c8:	91 83       	std	Z+1, r25	; 0x01
    50ca:	a2 83       	std	Z+2, r26	; 0x02
    50cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50ce:	8e 01       	movw	r16, r28
    50d0:	00 5b       	subi	r16, 0xB0	; 176
    50d2:	1f 4f       	sbci	r17, 0xFF	; 255
    50d4:	fe 01       	movw	r30, r28
    50d6:	ec 5a       	subi	r30, 0xAC	; 172
    50d8:	ff 4f       	sbci	r31, 0xFF	; 255
    50da:	60 81       	ld	r22, Z
    50dc:	71 81       	ldd	r23, Z+1	; 0x01
    50de:	82 81       	ldd	r24, Z+2	; 0x02
    50e0:	93 81       	ldd	r25, Z+3	; 0x03
    50e2:	20 e0       	ldi	r18, 0x00	; 0
    50e4:	30 e0       	ldi	r19, 0x00	; 0
    50e6:	4a e7       	ldi	r20, 0x7A	; 122
    50e8:	55 e4       	ldi	r21, 0x45	; 69
    50ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50ee:	dc 01       	movw	r26, r24
    50f0:	cb 01       	movw	r24, r22
    50f2:	f8 01       	movw	r30, r16
    50f4:	80 83       	st	Z, r24
    50f6:	91 83       	std	Z+1, r25	; 0x01
    50f8:	a2 83       	std	Z+2, r26	; 0x02
    50fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50fc:	fe 01       	movw	r30, r28
    50fe:	e0 5b       	subi	r30, 0xB0	; 176
    5100:	ff 4f       	sbci	r31, 0xFF	; 255
    5102:	60 81       	ld	r22, Z
    5104:	71 81       	ldd	r23, Z+1	; 0x01
    5106:	82 81       	ldd	r24, Z+2	; 0x02
    5108:	93 81       	ldd	r25, Z+3	; 0x03
    510a:	20 e0       	ldi	r18, 0x00	; 0
    510c:	30 e0       	ldi	r19, 0x00	; 0
    510e:	40 e8       	ldi	r20, 0x80	; 128
    5110:	5f e3       	ldi	r21, 0x3F	; 63
    5112:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5116:	88 23       	and	r24, r24
    5118:	44 f4       	brge	.+16     	; 0x512a <keypressed+0x168>
		__ticks = 1;
    511a:	fe 01       	movw	r30, r28
    511c:	e2 5b       	subi	r30, 0xB2	; 178
    511e:	ff 4f       	sbci	r31, 0xFF	; 255
    5120:	81 e0       	ldi	r24, 0x01	; 1
    5122:	90 e0       	ldi	r25, 0x00	; 0
    5124:	91 83       	std	Z+1, r25	; 0x01
    5126:	80 83       	st	Z, r24
    5128:	64 c0       	rjmp	.+200    	; 0x51f2 <keypressed+0x230>
	else if (__tmp > 65535)
    512a:	fe 01       	movw	r30, r28
    512c:	e0 5b       	subi	r30, 0xB0	; 176
    512e:	ff 4f       	sbci	r31, 0xFF	; 255
    5130:	60 81       	ld	r22, Z
    5132:	71 81       	ldd	r23, Z+1	; 0x01
    5134:	82 81       	ldd	r24, Z+2	; 0x02
    5136:	93 81       	ldd	r25, Z+3	; 0x03
    5138:	20 e0       	ldi	r18, 0x00	; 0
    513a:	3f ef       	ldi	r19, 0xFF	; 255
    513c:	4f e7       	ldi	r20, 0x7F	; 127
    513e:	57 e4       	ldi	r21, 0x47	; 71
    5140:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5144:	18 16       	cp	r1, r24
    5146:	0c f0       	brlt	.+2      	; 0x514a <keypressed+0x188>
    5148:	43 c0       	rjmp	.+134    	; 0x51d0 <keypressed+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    514a:	fe 01       	movw	r30, r28
    514c:	ec 5a       	subi	r30, 0xAC	; 172
    514e:	ff 4f       	sbci	r31, 0xFF	; 255
    5150:	60 81       	ld	r22, Z
    5152:	71 81       	ldd	r23, Z+1	; 0x01
    5154:	82 81       	ldd	r24, Z+2	; 0x02
    5156:	93 81       	ldd	r25, Z+3	; 0x03
    5158:	20 e0       	ldi	r18, 0x00	; 0
    515a:	30 e0       	ldi	r19, 0x00	; 0
    515c:	40 e2       	ldi	r20, 0x20	; 32
    515e:	51 e4       	ldi	r21, 0x41	; 65
    5160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5164:	dc 01       	movw	r26, r24
    5166:	cb 01       	movw	r24, r22
    5168:	8e 01       	movw	r16, r28
    516a:	02 5b       	subi	r16, 0xB2	; 178
    516c:	1f 4f       	sbci	r17, 0xFF	; 255
    516e:	bc 01       	movw	r22, r24
    5170:	cd 01       	movw	r24, r26
    5172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5176:	dc 01       	movw	r26, r24
    5178:	cb 01       	movw	r24, r22
    517a:	f8 01       	movw	r30, r16
    517c:	91 83       	std	Z+1, r25	; 0x01
    517e:	80 83       	st	Z, r24
    5180:	1f c0       	rjmp	.+62     	; 0x51c0 <keypressed+0x1fe>
    5182:	fe 01       	movw	r30, r28
    5184:	e4 5b       	subi	r30, 0xB4	; 180
    5186:	ff 4f       	sbci	r31, 0xFF	; 255
    5188:	80 e9       	ldi	r24, 0x90	; 144
    518a:	91 e0       	ldi	r25, 0x01	; 1
    518c:	91 83       	std	Z+1, r25	; 0x01
    518e:	80 83       	st	Z, r24
    5190:	fe 01       	movw	r30, r28
    5192:	e4 5b       	subi	r30, 0xB4	; 180
    5194:	ff 4f       	sbci	r31, 0xFF	; 255
    5196:	80 81       	ld	r24, Z
    5198:	91 81       	ldd	r25, Z+1	; 0x01
    519a:	01 97       	sbiw	r24, 0x01	; 1
    519c:	f1 f7       	brne	.-4      	; 0x519a <keypressed+0x1d8>
    519e:	fe 01       	movw	r30, r28
    51a0:	e4 5b       	subi	r30, 0xB4	; 180
    51a2:	ff 4f       	sbci	r31, 0xFF	; 255
    51a4:	91 83       	std	Z+1, r25	; 0x01
    51a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51a8:	de 01       	movw	r26, r28
    51aa:	a2 5b       	subi	r26, 0xB2	; 178
    51ac:	bf 4f       	sbci	r27, 0xFF	; 255
    51ae:	fe 01       	movw	r30, r28
    51b0:	e2 5b       	subi	r30, 0xB2	; 178
    51b2:	ff 4f       	sbci	r31, 0xFF	; 255
    51b4:	80 81       	ld	r24, Z
    51b6:	91 81       	ldd	r25, Z+1	; 0x01
    51b8:	01 97       	sbiw	r24, 0x01	; 1
    51ba:	11 96       	adiw	r26, 0x01	; 1
    51bc:	9c 93       	st	X, r25
    51be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51c0:	fe 01       	movw	r30, r28
    51c2:	e2 5b       	subi	r30, 0xB2	; 178
    51c4:	ff 4f       	sbci	r31, 0xFF	; 255
    51c6:	80 81       	ld	r24, Z
    51c8:	91 81       	ldd	r25, Z+1	; 0x01
    51ca:	00 97       	sbiw	r24, 0x00	; 0
    51cc:	d1 f6       	brne	.-76     	; 0x5182 <keypressed+0x1c0>
    51ce:	4b c0       	rjmp	.+150    	; 0x5266 <keypressed+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51d0:	8e 01       	movw	r16, r28
    51d2:	02 5b       	subi	r16, 0xB2	; 178
    51d4:	1f 4f       	sbci	r17, 0xFF	; 255
    51d6:	fe 01       	movw	r30, r28
    51d8:	e0 5b       	subi	r30, 0xB0	; 176
    51da:	ff 4f       	sbci	r31, 0xFF	; 255
    51dc:	60 81       	ld	r22, Z
    51de:	71 81       	ldd	r23, Z+1	; 0x01
    51e0:	82 81       	ldd	r24, Z+2	; 0x02
    51e2:	93 81       	ldd	r25, Z+3	; 0x03
    51e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51e8:	dc 01       	movw	r26, r24
    51ea:	cb 01       	movw	r24, r22
    51ec:	f8 01       	movw	r30, r16
    51ee:	91 83       	std	Z+1, r25	; 0x01
    51f0:	80 83       	st	Z, r24
    51f2:	de 01       	movw	r26, r28
    51f4:	a6 5b       	subi	r26, 0xB6	; 182
    51f6:	bf 4f       	sbci	r27, 0xFF	; 255
    51f8:	fe 01       	movw	r30, r28
    51fa:	e2 5b       	subi	r30, 0xB2	; 178
    51fc:	ff 4f       	sbci	r31, 0xFF	; 255
    51fe:	80 81       	ld	r24, Z
    5200:	91 81       	ldd	r25, Z+1	; 0x01
    5202:	11 96       	adiw	r26, 0x01	; 1
    5204:	9c 93       	st	X, r25
    5206:	8e 93       	st	-X, r24
    5208:	fe 01       	movw	r30, r28
    520a:	e6 5b       	subi	r30, 0xB6	; 182
    520c:	ff 4f       	sbci	r31, 0xFF	; 255
    520e:	80 81       	ld	r24, Z
    5210:	91 81       	ldd	r25, Z+1	; 0x01
    5212:	01 97       	sbiw	r24, 0x01	; 1
    5214:	f1 f7       	brne	.-4      	; 0x5212 <keypressed+0x250>
    5216:	fe 01       	movw	r30, r28
    5218:	e6 5b       	subi	r30, 0xB6	; 182
    521a:	ff 4f       	sbci	r31, 0xFF	; 255
    521c:	91 83       	std	Z+1, r25	; 0x01
    521e:	80 83       	st	Z, r24
    5220:	22 c0       	rjmp	.+68     	; 0x5266 <keypressed+0x2a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5222:	8e 01       	movw	r16, r28
    5224:	08 5a       	subi	r16, 0xA8	; 168
    5226:	1f 4f       	sbci	r17, 0xFF	; 255
    5228:	fe 01       	movw	r30, r28
    522a:	e7 5a       	subi	r30, 0xA7	; 167
    522c:	ff 4f       	sbci	r31, 0xFF	; 255
    522e:	60 81       	ld	r22, Z
    5230:	71 81       	ldd	r23, Z+1	; 0x01
    5232:	82 81       	ldd	r24, Z+2	; 0x02
    5234:	93 81       	ldd	r25, Z+3	; 0x03
    5236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    523a:	dc 01       	movw	r26, r24
    523c:	cb 01       	movw	r24, r22
    523e:	f8 01       	movw	r30, r16
    5240:	80 83       	st	Z, r24
    5242:	de 01       	movw	r26, r28
    5244:	a7 5b       	subi	r26, 0xB7	; 183
    5246:	bf 4f       	sbci	r27, 0xFF	; 255
    5248:	fe 01       	movw	r30, r28
    524a:	e8 5a       	subi	r30, 0xA8	; 168
    524c:	ff 4f       	sbci	r31, 0xFF	; 255
    524e:	80 81       	ld	r24, Z
    5250:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5252:	fe 01       	movw	r30, r28
    5254:	e7 5b       	subi	r30, 0xB7	; 183
    5256:	ff 4f       	sbci	r31, 0xFF	; 255
    5258:	80 81       	ld	r24, Z
    525a:	8a 95       	dec	r24
    525c:	f1 f7       	brne	.-4      	; 0x525a <keypressed+0x298>
    525e:	fe 01       	movw	r30, r28
    5260:	e7 5b       	subi	r30, 0xB7	; 183
    5262:	ff 4f       	sbci	r31, 0xFF	; 255
    5264:	80 83       	st	Z, r24
     _delay_us(50);
     if (c1==0){while (c1==0);return ('7');}
    5266:	e3 e3       	ldi	r30, 0x33	; 51
    5268:	f0 e0       	ldi	r31, 0x00	; 0
    526a:	80 81       	ld	r24, Z
    526c:	80 71       	andi	r24, 0x10	; 16
    526e:	88 23       	and	r24, r24
    5270:	59 f4       	brne	.+22     	; 0x5288 <keypressed+0x2c6>
    5272:	e3 e3       	ldi	r30, 0x33	; 51
    5274:	f0 e0       	ldi	r31, 0x00	; 0
    5276:	80 81       	ld	r24, Z
    5278:	80 71       	andi	r24, 0x10	; 16
    527a:	88 23       	and	r24, r24
    527c:	d1 f3       	breq	.-12     	; 0x5272 <keypressed+0x2b0>
    527e:	f7 e3       	ldi	r31, 0x37	; 55
    5280:	a2 96       	adiw	r28, 0x22	; 34
    5282:	ff af       	std	Y+63, r31	; 0x3f
    5284:	a2 97       	sbiw	r28, 0x22	; 34
    5286:	94 c3       	rjmp	.+1832   	; 0x59b0 <keypressed+0x9ee>
     if(c2==0){while (c2==0); return ('8');}
    5288:	e3 e3       	ldi	r30, 0x33	; 51
    528a:	f0 e0       	ldi	r31, 0x00	; 0
    528c:	80 81       	ld	r24, Z
    528e:	80 72       	andi	r24, 0x20	; 32
    5290:	88 23       	and	r24, r24
    5292:	59 f4       	brne	.+22     	; 0x52aa <keypressed+0x2e8>
    5294:	e3 e3       	ldi	r30, 0x33	; 51
    5296:	f0 e0       	ldi	r31, 0x00	; 0
    5298:	80 81       	ld	r24, Z
    529a:	80 72       	andi	r24, 0x20	; 32
    529c:	88 23       	and	r24, r24
    529e:	d1 f3       	breq	.-12     	; 0x5294 <keypressed+0x2d2>
    52a0:	88 e3       	ldi	r24, 0x38	; 56
    52a2:	a2 96       	adiw	r28, 0x22	; 34
    52a4:	8f af       	std	Y+63, r24	; 0x3f
    52a6:	a2 97       	sbiw	r28, 0x22	; 34
    52a8:	83 c3       	rjmp	.+1798   	; 0x59b0 <keypressed+0x9ee>
     if (c3==0){while (c3==0); return ('9');}
    52aa:	e3 e3       	ldi	r30, 0x33	; 51
    52ac:	f0 e0       	ldi	r31, 0x00	; 0
    52ae:	80 81       	ld	r24, Z
    52b0:	80 74       	andi	r24, 0x40	; 64
    52b2:	88 23       	and	r24, r24
    52b4:	59 f4       	brne	.+22     	; 0x52cc <keypressed+0x30a>
    52b6:	e3 e3       	ldi	r30, 0x33	; 51
    52b8:	f0 e0       	ldi	r31, 0x00	; 0
    52ba:	80 81       	ld	r24, Z
    52bc:	80 74       	andi	r24, 0x40	; 64
    52be:	88 23       	and	r24, r24
    52c0:	d1 f3       	breq	.-12     	; 0x52b6 <keypressed+0x2f4>
    52c2:	e9 e3       	ldi	r30, 0x39	; 57
    52c4:	a2 96       	adiw	r28, 0x22	; 34
    52c6:	ef af       	std	Y+63, r30	; 0x3f
    52c8:	a2 97       	sbiw	r28, 0x22	; 34
    52ca:	72 c3       	rjmp	.+1764   	; 0x59b0 <keypressed+0x9ee>
     if(c4==0){while (c4==0);return ('/');}
    52cc:	e3 e3       	ldi	r30, 0x33	; 51
    52ce:	f0 e0       	ldi	r31, 0x00	; 0
    52d0:	80 81       	ld	r24, Z
    52d2:	80 78       	andi	r24, 0x80	; 128
    52d4:	88 23       	and	r24, r24
    52d6:	59 f4       	brne	.+22     	; 0x52ee <keypressed+0x32c>
    52d8:	e3 e3       	ldi	r30, 0x33	; 51
    52da:	f0 e0       	ldi	r31, 0x00	; 0
    52dc:	80 81       	ld	r24, Z
    52de:	80 78       	andi	r24, 0x80	; 128
    52e0:	88 23       	and	r24, r24
    52e2:	d1 f3       	breq	.-12     	; 0x52d8 <keypressed+0x316>
    52e4:	ff e2       	ldi	r31, 0x2F	; 47
    52e6:	a2 96       	adiw	r28, 0x22	; 34
    52e8:	ff af       	std	Y+63, r31	; 0x3f
    52ea:	a2 97       	sbiw	r28, 0x22	; 34
    52ec:	61 c3       	rjmp	.+1730   	; 0x59b0 <keypressed+0x9ee>

     r1=1;     r2=0;     r3=1;     r4=1;
    52ee:	e5 e3       	ldi	r30, 0x35	; 53
    52f0:	f0 e0       	ldi	r31, 0x00	; 0
    52f2:	80 81       	ld	r24, Z
    52f4:	81 60       	ori	r24, 0x01	; 1
    52f6:	80 83       	st	Z, r24
    52f8:	e5 e3       	ldi	r30, 0x35	; 53
    52fa:	f0 e0       	ldi	r31, 0x00	; 0
    52fc:	80 81       	ld	r24, Z
    52fe:	8d 7f       	andi	r24, 0xFD	; 253
    5300:	80 83       	st	Z, r24
    5302:	e5 e3       	ldi	r30, 0x35	; 53
    5304:	f0 e0       	ldi	r31, 0x00	; 0
    5306:	80 81       	ld	r24, Z
    5308:	84 60       	ori	r24, 0x04	; 4
    530a:	80 83       	st	Z, r24
    530c:	e5 e3       	ldi	r30, 0x35	; 53
    530e:	f0 e0       	ldi	r31, 0x00	; 0
    5310:	80 81       	ld	r24, Z
    5312:	88 60       	ori	r24, 0x08	; 8
    5314:	80 83       	st	Z, r24
    5316:	fe 01       	movw	r30, r28
    5318:	eb 5b       	subi	r30, 0xBB	; 187
    531a:	ff 4f       	sbci	r31, 0xFF	; 255
    531c:	80 e0       	ldi	r24, 0x00	; 0
    531e:	90 e0       	ldi	r25, 0x00	; 0
    5320:	a8 e4       	ldi	r26, 0x48	; 72
    5322:	b2 e4       	ldi	r27, 0x42	; 66
    5324:	80 83       	st	Z, r24
    5326:	91 83       	std	Z+1, r25	; 0x01
    5328:	a2 83       	std	Z+2, r26	; 0x02
    532a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    532c:	8e 01       	movw	r16, r28
    532e:	0f 5b       	subi	r16, 0xBF	; 191
    5330:	1f 4f       	sbci	r17, 0xFF	; 255
    5332:	fe 01       	movw	r30, r28
    5334:	eb 5b       	subi	r30, 0xBB	; 187
    5336:	ff 4f       	sbci	r31, 0xFF	; 255
    5338:	60 81       	ld	r22, Z
    533a:	71 81       	ldd	r23, Z+1	; 0x01
    533c:	82 81       	ldd	r24, Z+2	; 0x02
    533e:	93 81       	ldd	r25, Z+3	; 0x03
    5340:	2b ea       	ldi	r18, 0xAB	; 171
    5342:	3a ea       	ldi	r19, 0xAA	; 170
    5344:	4a ea       	ldi	r20, 0xAA	; 170
    5346:	50 e4       	ldi	r21, 0x40	; 64
    5348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    534c:	dc 01       	movw	r26, r24
    534e:	cb 01       	movw	r24, r22
    5350:	f8 01       	movw	r30, r16
    5352:	80 83       	st	Z, r24
    5354:	91 83       	std	Z+1, r25	; 0x01
    5356:	a2 83       	std	Z+2, r26	; 0x02
    5358:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    535a:	fe 01       	movw	r30, r28
    535c:	ef 5b       	subi	r30, 0xBF	; 191
    535e:	ff 4f       	sbci	r31, 0xFF	; 255
    5360:	60 81       	ld	r22, Z
    5362:	71 81       	ldd	r23, Z+1	; 0x01
    5364:	82 81       	ldd	r24, Z+2	; 0x02
    5366:	93 81       	ldd	r25, Z+3	; 0x03
    5368:	20 e0       	ldi	r18, 0x00	; 0
    536a:	30 e0       	ldi	r19, 0x00	; 0
    536c:	40 e8       	ldi	r20, 0x80	; 128
    536e:	5f e3       	ldi	r21, 0x3F	; 63
    5370:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5374:	88 23       	and	r24, r24
    5376:	34 f4       	brge	.+12     	; 0x5384 <keypressed+0x3c2>
		__ticks = 1;
    5378:	81 e0       	ldi	r24, 0x01	; 1
    537a:	fe 01       	movw	r30, r28
    537c:	e0 5c       	subi	r30, 0xC0	; 192
    537e:	ff 4f       	sbci	r31, 0xFF	; 255
    5380:	80 83       	st	Z, r24
    5382:	9d c0       	rjmp	.+314    	; 0x54be <keypressed+0x4fc>
	else if (__tmp > 255)
    5384:	fe 01       	movw	r30, r28
    5386:	ef 5b       	subi	r30, 0xBF	; 191
    5388:	ff 4f       	sbci	r31, 0xFF	; 255
    538a:	60 81       	ld	r22, Z
    538c:	71 81       	ldd	r23, Z+1	; 0x01
    538e:	82 81       	ldd	r24, Z+2	; 0x02
    5390:	93 81       	ldd	r25, Z+3	; 0x03
    5392:	20 e0       	ldi	r18, 0x00	; 0
    5394:	30 e0       	ldi	r19, 0x00	; 0
    5396:	4f e7       	ldi	r20, 0x7F	; 127
    5398:	53 e4       	ldi	r21, 0x43	; 67
    539a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    539e:	18 16       	cp	r1, r24
    53a0:	0c f0       	brlt	.+2      	; 0x53a4 <keypressed+0x3e2>
    53a2:	7e c0       	rjmp	.+252    	; 0x54a0 <keypressed+0x4de>
	{
		_delay_ms(__us / 1000.0);
    53a4:	fe 01       	movw	r30, r28
    53a6:	eb 5b       	subi	r30, 0xBB	; 187
    53a8:	ff 4f       	sbci	r31, 0xFF	; 255
    53aa:	60 81       	ld	r22, Z
    53ac:	71 81       	ldd	r23, Z+1	; 0x01
    53ae:	82 81       	ldd	r24, Z+2	; 0x02
    53b0:	93 81       	ldd	r25, Z+3	; 0x03
    53b2:	20 e0       	ldi	r18, 0x00	; 0
    53b4:	30 e0       	ldi	r19, 0x00	; 0
    53b6:	4a e7       	ldi	r20, 0x7A	; 122
    53b8:	54 e4       	ldi	r21, 0x44	; 68
    53ba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    53be:	dc 01       	movw	r26, r24
    53c0:	cb 01       	movw	r24, r22
    53c2:	8c af       	std	Y+60, r24	; 0x3c
    53c4:	9d af       	std	Y+61, r25	; 0x3d
    53c6:	ae af       	std	Y+62, r26	; 0x3e
    53c8:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53ca:	6c ad       	ldd	r22, Y+60	; 0x3c
    53cc:	7d ad       	ldd	r23, Y+61	; 0x3d
    53ce:	8e ad       	ldd	r24, Y+62	; 0x3e
    53d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    53d2:	20 e0       	ldi	r18, 0x00	; 0
    53d4:	30 e0       	ldi	r19, 0x00	; 0
    53d6:	4a e7       	ldi	r20, 0x7A	; 122
    53d8:	55 e4       	ldi	r21, 0x45	; 69
    53da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53de:	dc 01       	movw	r26, r24
    53e0:	cb 01       	movw	r24, r22
    53e2:	88 af       	std	Y+56, r24	; 0x38
    53e4:	99 af       	std	Y+57, r25	; 0x39
    53e6:	aa af       	std	Y+58, r26	; 0x3a
    53e8:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    53ea:	68 ad       	ldd	r22, Y+56	; 0x38
    53ec:	79 ad       	ldd	r23, Y+57	; 0x39
    53ee:	8a ad       	ldd	r24, Y+58	; 0x3a
    53f0:	9b ad       	ldd	r25, Y+59	; 0x3b
    53f2:	20 e0       	ldi	r18, 0x00	; 0
    53f4:	30 e0       	ldi	r19, 0x00	; 0
    53f6:	40 e8       	ldi	r20, 0x80	; 128
    53f8:	5f e3       	ldi	r21, 0x3F	; 63
    53fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53fe:	88 23       	and	r24, r24
    5400:	2c f4       	brge	.+10     	; 0x540c <keypressed+0x44a>
		__ticks = 1;
    5402:	81 e0       	ldi	r24, 0x01	; 1
    5404:	90 e0       	ldi	r25, 0x00	; 0
    5406:	9f ab       	std	Y+55, r25	; 0x37
    5408:	8e ab       	std	Y+54, r24	; 0x36
    540a:	3f c0       	rjmp	.+126    	; 0x548a <keypressed+0x4c8>
	else if (__tmp > 65535)
    540c:	68 ad       	ldd	r22, Y+56	; 0x38
    540e:	79 ad       	ldd	r23, Y+57	; 0x39
    5410:	8a ad       	ldd	r24, Y+58	; 0x3a
    5412:	9b ad       	ldd	r25, Y+59	; 0x3b
    5414:	20 e0       	ldi	r18, 0x00	; 0
    5416:	3f ef       	ldi	r19, 0xFF	; 255
    5418:	4f e7       	ldi	r20, 0x7F	; 127
    541a:	57 e4       	ldi	r21, 0x47	; 71
    541c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5420:	18 16       	cp	r1, r24
    5422:	4c f5       	brge	.+82     	; 0x5476 <keypressed+0x4b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5424:	6c ad       	ldd	r22, Y+60	; 0x3c
    5426:	7d ad       	ldd	r23, Y+61	; 0x3d
    5428:	8e ad       	ldd	r24, Y+62	; 0x3e
    542a:	9f ad       	ldd	r25, Y+63	; 0x3f
    542c:	20 e0       	ldi	r18, 0x00	; 0
    542e:	30 e0       	ldi	r19, 0x00	; 0
    5430:	40 e2       	ldi	r20, 0x20	; 32
    5432:	51 e4       	ldi	r21, 0x41	; 65
    5434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5438:	dc 01       	movw	r26, r24
    543a:	cb 01       	movw	r24, r22
    543c:	bc 01       	movw	r22, r24
    543e:	cd 01       	movw	r24, r26
    5440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5444:	dc 01       	movw	r26, r24
    5446:	cb 01       	movw	r24, r22
    5448:	9f ab       	std	Y+55, r25	; 0x37
    544a:	8e ab       	std	Y+54, r24	; 0x36
    544c:	0f c0       	rjmp	.+30     	; 0x546c <keypressed+0x4aa>
    544e:	80 e9       	ldi	r24, 0x90	; 144
    5450:	91 e0       	ldi	r25, 0x01	; 1
    5452:	9d ab       	std	Y+53, r25	; 0x35
    5454:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5456:	8c a9       	ldd	r24, Y+52	; 0x34
    5458:	9d a9       	ldd	r25, Y+53	; 0x35
    545a:	01 97       	sbiw	r24, 0x01	; 1
    545c:	f1 f7       	brne	.-4      	; 0x545a <keypressed+0x498>
    545e:	9d ab       	std	Y+53, r25	; 0x35
    5460:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5462:	8e a9       	ldd	r24, Y+54	; 0x36
    5464:	9f a9       	ldd	r25, Y+55	; 0x37
    5466:	01 97       	sbiw	r24, 0x01	; 1
    5468:	9f ab       	std	Y+55, r25	; 0x37
    546a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    546c:	8e a9       	ldd	r24, Y+54	; 0x36
    546e:	9f a9       	ldd	r25, Y+55	; 0x37
    5470:	00 97       	sbiw	r24, 0x00	; 0
    5472:	69 f7       	brne	.-38     	; 0x544e <keypressed+0x48c>
    5474:	2d c0       	rjmp	.+90     	; 0x54d0 <keypressed+0x50e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5476:	68 ad       	ldd	r22, Y+56	; 0x38
    5478:	79 ad       	ldd	r23, Y+57	; 0x39
    547a:	8a ad       	ldd	r24, Y+58	; 0x3a
    547c:	9b ad       	ldd	r25, Y+59	; 0x3b
    547e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5482:	dc 01       	movw	r26, r24
    5484:	cb 01       	movw	r24, r22
    5486:	9f ab       	std	Y+55, r25	; 0x37
    5488:	8e ab       	std	Y+54, r24	; 0x36
    548a:	8e a9       	ldd	r24, Y+54	; 0x36
    548c:	9f a9       	ldd	r25, Y+55	; 0x37
    548e:	9b ab       	std	Y+51, r25	; 0x33
    5490:	8a ab       	std	Y+50, r24	; 0x32
    5492:	8a a9       	ldd	r24, Y+50	; 0x32
    5494:	9b a9       	ldd	r25, Y+51	; 0x33
    5496:	01 97       	sbiw	r24, 0x01	; 1
    5498:	f1 f7       	brne	.-4      	; 0x5496 <keypressed+0x4d4>
    549a:	9b ab       	std	Y+51, r25	; 0x33
    549c:	8a ab       	std	Y+50, r24	; 0x32
    549e:	18 c0       	rjmp	.+48     	; 0x54d0 <keypressed+0x50e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    54a0:	fe 01       	movw	r30, r28
    54a2:	ef 5b       	subi	r30, 0xBF	; 191
    54a4:	ff 4f       	sbci	r31, 0xFF	; 255
    54a6:	60 81       	ld	r22, Z
    54a8:	71 81       	ldd	r23, Z+1	; 0x01
    54aa:	82 81       	ldd	r24, Z+2	; 0x02
    54ac:	93 81       	ldd	r25, Z+3	; 0x03
    54ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54b2:	dc 01       	movw	r26, r24
    54b4:	cb 01       	movw	r24, r22
    54b6:	fe 01       	movw	r30, r28
    54b8:	e0 5c       	subi	r30, 0xC0	; 192
    54ba:	ff 4f       	sbci	r31, 0xFF	; 255
    54bc:	80 83       	st	Z, r24
    54be:	fe 01       	movw	r30, r28
    54c0:	e0 5c       	subi	r30, 0xC0	; 192
    54c2:	ff 4f       	sbci	r31, 0xFF	; 255
    54c4:	80 81       	ld	r24, Z
    54c6:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    54c8:	89 a9       	ldd	r24, Y+49	; 0x31
    54ca:	8a 95       	dec	r24
    54cc:	f1 f7       	brne	.-4      	; 0x54ca <keypressed+0x508>
    54ce:	89 ab       	std	Y+49, r24	; 0x31
     _delay_us(50);
     if (c1==0){while (c1==0); return ('4');}
    54d0:	e3 e3       	ldi	r30, 0x33	; 51
    54d2:	f0 e0       	ldi	r31, 0x00	; 0
    54d4:	80 81       	ld	r24, Z
    54d6:	80 71       	andi	r24, 0x10	; 16
    54d8:	88 23       	and	r24, r24
    54da:	59 f4       	brne	.+22     	; 0x54f2 <keypressed+0x530>
    54dc:	e3 e3       	ldi	r30, 0x33	; 51
    54de:	f0 e0       	ldi	r31, 0x00	; 0
    54e0:	80 81       	ld	r24, Z
    54e2:	80 71       	andi	r24, 0x10	; 16
    54e4:	88 23       	and	r24, r24
    54e6:	d1 f3       	breq	.-12     	; 0x54dc <keypressed+0x51a>
    54e8:	f4 e3       	ldi	r31, 0x34	; 52
    54ea:	a2 96       	adiw	r28, 0x22	; 34
    54ec:	ff af       	std	Y+63, r31	; 0x3f
    54ee:	a2 97       	sbiw	r28, 0x22	; 34
    54f0:	5f c2       	rjmp	.+1214   	; 0x59b0 <keypressed+0x9ee>
     if(c2==0){while (c2==0); return ('5');}
    54f2:	e3 e3       	ldi	r30, 0x33	; 51
    54f4:	f0 e0       	ldi	r31, 0x00	; 0
    54f6:	80 81       	ld	r24, Z
    54f8:	80 72       	andi	r24, 0x20	; 32
    54fa:	88 23       	and	r24, r24
    54fc:	59 f4       	brne	.+22     	; 0x5514 <keypressed+0x552>
    54fe:	e3 e3       	ldi	r30, 0x33	; 51
    5500:	f0 e0       	ldi	r31, 0x00	; 0
    5502:	80 81       	ld	r24, Z
    5504:	80 72       	andi	r24, 0x20	; 32
    5506:	88 23       	and	r24, r24
    5508:	d1 f3       	breq	.-12     	; 0x54fe <keypressed+0x53c>
    550a:	85 e3       	ldi	r24, 0x35	; 53
    550c:	a2 96       	adiw	r28, 0x22	; 34
    550e:	8f af       	std	Y+63, r24	; 0x3f
    5510:	a2 97       	sbiw	r28, 0x22	; 34
    5512:	4e c2       	rjmp	.+1180   	; 0x59b0 <keypressed+0x9ee>
     if(c3==0){while (c3==0); return ('6');}
    5514:	e3 e3       	ldi	r30, 0x33	; 51
    5516:	f0 e0       	ldi	r31, 0x00	; 0
    5518:	80 81       	ld	r24, Z
    551a:	80 74       	andi	r24, 0x40	; 64
    551c:	88 23       	and	r24, r24
    551e:	59 f4       	brne	.+22     	; 0x5536 <keypressed+0x574>
    5520:	e3 e3       	ldi	r30, 0x33	; 51
    5522:	f0 e0       	ldi	r31, 0x00	; 0
    5524:	80 81       	ld	r24, Z
    5526:	80 74       	andi	r24, 0x40	; 64
    5528:	88 23       	and	r24, r24
    552a:	d1 f3       	breq	.-12     	; 0x5520 <keypressed+0x55e>
    552c:	e6 e3       	ldi	r30, 0x36	; 54
    552e:	a2 96       	adiw	r28, 0x22	; 34
    5530:	ef af       	std	Y+63, r30	; 0x3f
    5532:	a2 97       	sbiw	r28, 0x22	; 34
    5534:	3d c2       	rjmp	.+1146   	; 0x59b0 <keypressed+0x9ee>
     if(c4==0){while (c4==0); return ('*');}
    5536:	e3 e3       	ldi	r30, 0x33	; 51
    5538:	f0 e0       	ldi	r31, 0x00	; 0
    553a:	80 81       	ld	r24, Z
    553c:	80 78       	andi	r24, 0x80	; 128
    553e:	88 23       	and	r24, r24
    5540:	59 f4       	brne	.+22     	; 0x5558 <keypressed+0x596>
    5542:	e3 e3       	ldi	r30, 0x33	; 51
    5544:	f0 e0       	ldi	r31, 0x00	; 0
    5546:	80 81       	ld	r24, Z
    5548:	80 78       	andi	r24, 0x80	; 128
    554a:	88 23       	and	r24, r24
    554c:	d1 f3       	breq	.-12     	; 0x5542 <keypressed+0x580>
    554e:	fa e2       	ldi	r31, 0x2A	; 42
    5550:	a2 96       	adiw	r28, 0x22	; 34
    5552:	ff af       	std	Y+63, r31	; 0x3f
    5554:	a2 97       	sbiw	r28, 0x22	; 34
    5556:	2c c2       	rjmp	.+1112   	; 0x59b0 <keypressed+0x9ee>

     r1=1;     r2=1;     r3=0;     r4=1;
    5558:	e5 e3       	ldi	r30, 0x35	; 53
    555a:	f0 e0       	ldi	r31, 0x00	; 0
    555c:	80 81       	ld	r24, Z
    555e:	81 60       	ori	r24, 0x01	; 1
    5560:	80 83       	st	Z, r24
    5562:	e5 e3       	ldi	r30, 0x35	; 53
    5564:	f0 e0       	ldi	r31, 0x00	; 0
    5566:	80 81       	ld	r24, Z
    5568:	82 60       	ori	r24, 0x02	; 2
    556a:	80 83       	st	Z, r24
    556c:	e5 e3       	ldi	r30, 0x35	; 53
    556e:	f0 e0       	ldi	r31, 0x00	; 0
    5570:	80 81       	ld	r24, Z
    5572:	8b 7f       	andi	r24, 0xFB	; 251
    5574:	80 83       	st	Z, r24
    5576:	e5 e3       	ldi	r30, 0x35	; 53
    5578:	f0 e0       	ldi	r31, 0x00	; 0
    557a:	80 81       	ld	r24, Z
    557c:	88 60       	ori	r24, 0x08	; 8
    557e:	80 83       	st	Z, r24
    5580:	80 e0       	ldi	r24, 0x00	; 0
    5582:	90 e0       	ldi	r25, 0x00	; 0
    5584:	a8 e4       	ldi	r26, 0x48	; 72
    5586:	b2 e4       	ldi	r27, 0x42	; 66
    5588:	8d a7       	std	Y+45, r24	; 0x2d
    558a:	9e a7       	std	Y+46, r25	; 0x2e
    558c:	af a7       	std	Y+47, r26	; 0x2f
    558e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5590:	6d a5       	ldd	r22, Y+45	; 0x2d
    5592:	7e a5       	ldd	r23, Y+46	; 0x2e
    5594:	8f a5       	ldd	r24, Y+47	; 0x2f
    5596:	98 a9       	ldd	r25, Y+48	; 0x30
    5598:	2b ea       	ldi	r18, 0xAB	; 171
    559a:	3a ea       	ldi	r19, 0xAA	; 170
    559c:	4a ea       	ldi	r20, 0xAA	; 170
    559e:	50 e4       	ldi	r21, 0x40	; 64
    55a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55a4:	dc 01       	movw	r26, r24
    55a6:	cb 01       	movw	r24, r22
    55a8:	89 a7       	std	Y+41, r24	; 0x29
    55aa:	9a a7       	std	Y+42, r25	; 0x2a
    55ac:	ab a7       	std	Y+43, r26	; 0x2b
    55ae:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    55b0:	69 a5       	ldd	r22, Y+41	; 0x29
    55b2:	7a a5       	ldd	r23, Y+42	; 0x2a
    55b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    55b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    55b8:	20 e0       	ldi	r18, 0x00	; 0
    55ba:	30 e0       	ldi	r19, 0x00	; 0
    55bc:	40 e8       	ldi	r20, 0x80	; 128
    55be:	5f e3       	ldi	r21, 0x3F	; 63
    55c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55c4:	88 23       	and	r24, r24
    55c6:	1c f4       	brge	.+6      	; 0x55ce <keypressed+0x60c>
		__ticks = 1;
    55c8:	81 e0       	ldi	r24, 0x01	; 1
    55ca:	88 a7       	std	Y+40, r24	; 0x28
    55cc:	91 c0       	rjmp	.+290    	; 0x56f0 <keypressed+0x72e>
	else if (__tmp > 255)
    55ce:	69 a5       	ldd	r22, Y+41	; 0x29
    55d0:	7a a5       	ldd	r23, Y+42	; 0x2a
    55d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    55d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    55d6:	20 e0       	ldi	r18, 0x00	; 0
    55d8:	30 e0       	ldi	r19, 0x00	; 0
    55da:	4f e7       	ldi	r20, 0x7F	; 127
    55dc:	53 e4       	ldi	r21, 0x43	; 67
    55de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55e2:	18 16       	cp	r1, r24
    55e4:	0c f0       	brlt	.+2      	; 0x55e8 <keypressed+0x626>
    55e6:	7b c0       	rjmp	.+246    	; 0x56de <keypressed+0x71c>
	{
		_delay_ms(__us / 1000.0);
    55e8:	6d a5       	ldd	r22, Y+45	; 0x2d
    55ea:	7e a5       	ldd	r23, Y+46	; 0x2e
    55ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    55ee:	98 a9       	ldd	r25, Y+48	; 0x30
    55f0:	20 e0       	ldi	r18, 0x00	; 0
    55f2:	30 e0       	ldi	r19, 0x00	; 0
    55f4:	4a e7       	ldi	r20, 0x7A	; 122
    55f6:	54 e4       	ldi	r21, 0x44	; 68
    55f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    55fc:	dc 01       	movw	r26, r24
    55fe:	cb 01       	movw	r24, r22
    5600:	8c a3       	std	Y+36, r24	; 0x24
    5602:	9d a3       	std	Y+37, r25	; 0x25
    5604:	ae a3       	std	Y+38, r26	; 0x26
    5606:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5608:	6c a1       	ldd	r22, Y+36	; 0x24
    560a:	7d a1       	ldd	r23, Y+37	; 0x25
    560c:	8e a1       	ldd	r24, Y+38	; 0x26
    560e:	9f a1       	ldd	r25, Y+39	; 0x27
    5610:	20 e0       	ldi	r18, 0x00	; 0
    5612:	30 e0       	ldi	r19, 0x00	; 0
    5614:	4a e7       	ldi	r20, 0x7A	; 122
    5616:	55 e4       	ldi	r21, 0x45	; 69
    5618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    561c:	dc 01       	movw	r26, r24
    561e:	cb 01       	movw	r24, r22
    5620:	88 a3       	std	Y+32, r24	; 0x20
    5622:	99 a3       	std	Y+33, r25	; 0x21
    5624:	aa a3       	std	Y+34, r26	; 0x22
    5626:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    5628:	68 a1       	ldd	r22, Y+32	; 0x20
    562a:	79 a1       	ldd	r23, Y+33	; 0x21
    562c:	8a a1       	ldd	r24, Y+34	; 0x22
    562e:	9b a1       	ldd	r25, Y+35	; 0x23
    5630:	20 e0       	ldi	r18, 0x00	; 0
    5632:	30 e0       	ldi	r19, 0x00	; 0
    5634:	40 e8       	ldi	r20, 0x80	; 128
    5636:	5f e3       	ldi	r21, 0x3F	; 63
    5638:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    563c:	88 23       	and	r24, r24
    563e:	2c f4       	brge	.+10     	; 0x564a <keypressed+0x688>
		__ticks = 1;
    5640:	81 e0       	ldi	r24, 0x01	; 1
    5642:	90 e0       	ldi	r25, 0x00	; 0
    5644:	9f 8f       	std	Y+31, r25	; 0x1f
    5646:	8e 8f       	std	Y+30, r24	; 0x1e
    5648:	3f c0       	rjmp	.+126    	; 0x56c8 <keypressed+0x706>
	else if (__tmp > 65535)
    564a:	68 a1       	ldd	r22, Y+32	; 0x20
    564c:	79 a1       	ldd	r23, Y+33	; 0x21
    564e:	8a a1       	ldd	r24, Y+34	; 0x22
    5650:	9b a1       	ldd	r25, Y+35	; 0x23
    5652:	20 e0       	ldi	r18, 0x00	; 0
    5654:	3f ef       	ldi	r19, 0xFF	; 255
    5656:	4f e7       	ldi	r20, 0x7F	; 127
    5658:	57 e4       	ldi	r21, 0x47	; 71
    565a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    565e:	18 16       	cp	r1, r24
    5660:	4c f5       	brge	.+82     	; 0x56b4 <keypressed+0x6f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5662:	6c a1       	ldd	r22, Y+36	; 0x24
    5664:	7d a1       	ldd	r23, Y+37	; 0x25
    5666:	8e a1       	ldd	r24, Y+38	; 0x26
    5668:	9f a1       	ldd	r25, Y+39	; 0x27
    566a:	20 e0       	ldi	r18, 0x00	; 0
    566c:	30 e0       	ldi	r19, 0x00	; 0
    566e:	40 e2       	ldi	r20, 0x20	; 32
    5670:	51 e4       	ldi	r21, 0x41	; 65
    5672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5676:	dc 01       	movw	r26, r24
    5678:	cb 01       	movw	r24, r22
    567a:	bc 01       	movw	r22, r24
    567c:	cd 01       	movw	r24, r26
    567e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5682:	dc 01       	movw	r26, r24
    5684:	cb 01       	movw	r24, r22
    5686:	9f 8f       	std	Y+31, r25	; 0x1f
    5688:	8e 8f       	std	Y+30, r24	; 0x1e
    568a:	0f c0       	rjmp	.+30     	; 0x56aa <keypressed+0x6e8>
    568c:	80 e9       	ldi	r24, 0x90	; 144
    568e:	91 e0       	ldi	r25, 0x01	; 1
    5690:	9d 8f       	std	Y+29, r25	; 0x1d
    5692:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5694:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5696:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5698:	01 97       	sbiw	r24, 0x01	; 1
    569a:	f1 f7       	brne	.-4      	; 0x5698 <keypressed+0x6d6>
    569c:	9d 8f       	std	Y+29, r25	; 0x1d
    569e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    56a2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    56a4:	01 97       	sbiw	r24, 0x01	; 1
    56a6:	9f 8f       	std	Y+31, r25	; 0x1f
    56a8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    56ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    56ae:	00 97       	sbiw	r24, 0x00	; 0
    56b0:	69 f7       	brne	.-38     	; 0x568c <keypressed+0x6ca>
    56b2:	24 c0       	rjmp	.+72     	; 0x56fc <keypressed+0x73a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56b4:	68 a1       	ldd	r22, Y+32	; 0x20
    56b6:	79 a1       	ldd	r23, Y+33	; 0x21
    56b8:	8a a1       	ldd	r24, Y+34	; 0x22
    56ba:	9b a1       	ldd	r25, Y+35	; 0x23
    56bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56c0:	dc 01       	movw	r26, r24
    56c2:	cb 01       	movw	r24, r22
    56c4:	9f 8f       	std	Y+31, r25	; 0x1f
    56c6:	8e 8f       	std	Y+30, r24	; 0x1e
    56c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    56ca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    56cc:	9b 8f       	std	Y+27, r25	; 0x1b
    56ce:	8a 8f       	std	Y+26, r24	; 0x1a
    56d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    56d2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    56d4:	01 97       	sbiw	r24, 0x01	; 1
    56d6:	f1 f7       	brne	.-4      	; 0x56d4 <keypressed+0x712>
    56d8:	9b 8f       	std	Y+27, r25	; 0x1b
    56da:	8a 8f       	std	Y+26, r24	; 0x1a
    56dc:	0f c0       	rjmp	.+30     	; 0x56fc <keypressed+0x73a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    56de:	69 a5       	ldd	r22, Y+41	; 0x29
    56e0:	7a a5       	ldd	r23, Y+42	; 0x2a
    56e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    56e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    56e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56ea:	dc 01       	movw	r26, r24
    56ec:	cb 01       	movw	r24, r22
    56ee:	88 a7       	std	Y+40, r24	; 0x28
    56f0:	88 a5       	ldd	r24, Y+40	; 0x28
    56f2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    56f4:	89 8d       	ldd	r24, Y+25	; 0x19
    56f6:	8a 95       	dec	r24
    56f8:	f1 f7       	brne	.-4      	; 0x56f6 <keypressed+0x734>
    56fa:	89 8f       	std	Y+25, r24	; 0x19
     _delay_us(50);
     if (c1==0){while (c1==0); return ('1');}
    56fc:	e3 e3       	ldi	r30, 0x33	; 51
    56fe:	f0 e0       	ldi	r31, 0x00	; 0
    5700:	80 81       	ld	r24, Z
    5702:	80 71       	andi	r24, 0x10	; 16
    5704:	88 23       	and	r24, r24
    5706:	59 f4       	brne	.+22     	; 0x571e <keypressed+0x75c>
    5708:	e3 e3       	ldi	r30, 0x33	; 51
    570a:	f0 e0       	ldi	r31, 0x00	; 0
    570c:	80 81       	ld	r24, Z
    570e:	80 71       	andi	r24, 0x10	; 16
    5710:	88 23       	and	r24, r24
    5712:	d1 f3       	breq	.-12     	; 0x5708 <keypressed+0x746>
    5714:	81 e3       	ldi	r24, 0x31	; 49
    5716:	a2 96       	adiw	r28, 0x22	; 34
    5718:	8f af       	std	Y+63, r24	; 0x3f
    571a:	a2 97       	sbiw	r28, 0x22	; 34
    571c:	49 c1       	rjmp	.+658    	; 0x59b0 <keypressed+0x9ee>
     if (c2==0){while (c2==0); return ('2');}
    571e:	e3 e3       	ldi	r30, 0x33	; 51
    5720:	f0 e0       	ldi	r31, 0x00	; 0
    5722:	80 81       	ld	r24, Z
    5724:	80 72       	andi	r24, 0x20	; 32
    5726:	88 23       	and	r24, r24
    5728:	59 f4       	brne	.+22     	; 0x5740 <keypressed+0x77e>
    572a:	e3 e3       	ldi	r30, 0x33	; 51
    572c:	f0 e0       	ldi	r31, 0x00	; 0
    572e:	80 81       	ld	r24, Z
    5730:	80 72       	andi	r24, 0x20	; 32
    5732:	88 23       	and	r24, r24
    5734:	d1 f3       	breq	.-12     	; 0x572a <keypressed+0x768>
    5736:	e2 e3       	ldi	r30, 0x32	; 50
    5738:	a2 96       	adiw	r28, 0x22	; 34
    573a:	ef af       	std	Y+63, r30	; 0x3f
    573c:	a2 97       	sbiw	r28, 0x22	; 34
    573e:	38 c1       	rjmp	.+624    	; 0x59b0 <keypressed+0x9ee>
     if (c3==0){while (c3==0); return ('3');}
    5740:	e3 e3       	ldi	r30, 0x33	; 51
    5742:	f0 e0       	ldi	r31, 0x00	; 0
    5744:	80 81       	ld	r24, Z
    5746:	80 74       	andi	r24, 0x40	; 64
    5748:	88 23       	and	r24, r24
    574a:	59 f4       	brne	.+22     	; 0x5762 <keypressed+0x7a0>
    574c:	e3 e3       	ldi	r30, 0x33	; 51
    574e:	f0 e0       	ldi	r31, 0x00	; 0
    5750:	80 81       	ld	r24, Z
    5752:	80 74       	andi	r24, 0x40	; 64
    5754:	88 23       	and	r24, r24
    5756:	d1 f3       	breq	.-12     	; 0x574c <keypressed+0x78a>
    5758:	f3 e3       	ldi	r31, 0x33	; 51
    575a:	a2 96       	adiw	r28, 0x22	; 34
    575c:	ff af       	std	Y+63, r31	; 0x3f
    575e:	a2 97       	sbiw	r28, 0x22	; 34
    5760:	27 c1       	rjmp	.+590    	; 0x59b0 <keypressed+0x9ee>
     if (c4==0){while (c4==0); return ('-');}
    5762:	e3 e3       	ldi	r30, 0x33	; 51
    5764:	f0 e0       	ldi	r31, 0x00	; 0
    5766:	80 81       	ld	r24, Z
    5768:	80 78       	andi	r24, 0x80	; 128
    576a:	88 23       	and	r24, r24
    576c:	59 f4       	brne	.+22     	; 0x5784 <keypressed+0x7c2>
    576e:	e3 e3       	ldi	r30, 0x33	; 51
    5770:	f0 e0       	ldi	r31, 0x00	; 0
    5772:	80 81       	ld	r24, Z
    5774:	80 78       	andi	r24, 0x80	; 128
    5776:	88 23       	and	r24, r24
    5778:	d1 f3       	breq	.-12     	; 0x576e <keypressed+0x7ac>
    577a:	8d e2       	ldi	r24, 0x2D	; 45
    577c:	a2 96       	adiw	r28, 0x22	; 34
    577e:	8f af       	std	Y+63, r24	; 0x3f
    5780:	a2 97       	sbiw	r28, 0x22	; 34
    5782:	16 c1       	rjmp	.+556    	; 0x59b0 <keypressed+0x9ee>

     r1=1;     r2=1;     r3=1;     r4=0;
    5784:	e5 e3       	ldi	r30, 0x35	; 53
    5786:	f0 e0       	ldi	r31, 0x00	; 0
    5788:	80 81       	ld	r24, Z
    578a:	81 60       	ori	r24, 0x01	; 1
    578c:	80 83       	st	Z, r24
    578e:	e5 e3       	ldi	r30, 0x35	; 53
    5790:	f0 e0       	ldi	r31, 0x00	; 0
    5792:	80 81       	ld	r24, Z
    5794:	82 60       	ori	r24, 0x02	; 2
    5796:	80 83       	st	Z, r24
    5798:	e5 e3       	ldi	r30, 0x35	; 53
    579a:	f0 e0       	ldi	r31, 0x00	; 0
    579c:	80 81       	ld	r24, Z
    579e:	84 60       	ori	r24, 0x04	; 4
    57a0:	80 83       	st	Z, r24
    57a2:	e5 e3       	ldi	r30, 0x35	; 53
    57a4:	f0 e0       	ldi	r31, 0x00	; 0
    57a6:	80 81       	ld	r24, Z
    57a8:	87 7f       	andi	r24, 0xF7	; 247
    57aa:	80 83       	st	Z, r24
    57ac:	80 e0       	ldi	r24, 0x00	; 0
    57ae:	90 e0       	ldi	r25, 0x00	; 0
    57b0:	a8 e4       	ldi	r26, 0x48	; 72
    57b2:	b2 e4       	ldi	r27, 0x42	; 66
    57b4:	8d 8b       	std	Y+21, r24	; 0x15
    57b6:	9e 8b       	std	Y+22, r25	; 0x16
    57b8:	af 8b       	std	Y+23, r26	; 0x17
    57ba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    57bc:	6d 89       	ldd	r22, Y+21	; 0x15
    57be:	7e 89       	ldd	r23, Y+22	; 0x16
    57c0:	8f 89       	ldd	r24, Y+23	; 0x17
    57c2:	98 8d       	ldd	r25, Y+24	; 0x18
    57c4:	2b ea       	ldi	r18, 0xAB	; 171
    57c6:	3a ea       	ldi	r19, 0xAA	; 170
    57c8:	4a ea       	ldi	r20, 0xAA	; 170
    57ca:	50 e4       	ldi	r21, 0x40	; 64
    57cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57d0:	dc 01       	movw	r26, r24
    57d2:	cb 01       	movw	r24, r22
    57d4:	89 8b       	std	Y+17, r24	; 0x11
    57d6:	9a 8b       	std	Y+18, r25	; 0x12
    57d8:	ab 8b       	std	Y+19, r26	; 0x13
    57da:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    57dc:	69 89       	ldd	r22, Y+17	; 0x11
    57de:	7a 89       	ldd	r23, Y+18	; 0x12
    57e0:	8b 89       	ldd	r24, Y+19	; 0x13
    57e2:	9c 89       	ldd	r25, Y+20	; 0x14
    57e4:	20 e0       	ldi	r18, 0x00	; 0
    57e6:	30 e0       	ldi	r19, 0x00	; 0
    57e8:	40 e8       	ldi	r20, 0x80	; 128
    57ea:	5f e3       	ldi	r21, 0x3F	; 63
    57ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57f0:	88 23       	and	r24, r24
    57f2:	1c f4       	brge	.+6      	; 0x57fa <keypressed+0x838>
		__ticks = 1;
    57f4:	81 e0       	ldi	r24, 0x01	; 1
    57f6:	88 8b       	std	Y+16, r24	; 0x10
    57f8:	91 c0       	rjmp	.+290    	; 0x591c <keypressed+0x95a>
	else if (__tmp > 255)
    57fa:	69 89       	ldd	r22, Y+17	; 0x11
    57fc:	7a 89       	ldd	r23, Y+18	; 0x12
    57fe:	8b 89       	ldd	r24, Y+19	; 0x13
    5800:	9c 89       	ldd	r25, Y+20	; 0x14
    5802:	20 e0       	ldi	r18, 0x00	; 0
    5804:	30 e0       	ldi	r19, 0x00	; 0
    5806:	4f e7       	ldi	r20, 0x7F	; 127
    5808:	53 e4       	ldi	r21, 0x43	; 67
    580a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    580e:	18 16       	cp	r1, r24
    5810:	0c f0       	brlt	.+2      	; 0x5814 <keypressed+0x852>
    5812:	7b c0       	rjmp	.+246    	; 0x590a <keypressed+0x948>
	{
		_delay_ms(__us / 1000.0);
    5814:	6d 89       	ldd	r22, Y+21	; 0x15
    5816:	7e 89       	ldd	r23, Y+22	; 0x16
    5818:	8f 89       	ldd	r24, Y+23	; 0x17
    581a:	98 8d       	ldd	r25, Y+24	; 0x18
    581c:	20 e0       	ldi	r18, 0x00	; 0
    581e:	30 e0       	ldi	r19, 0x00	; 0
    5820:	4a e7       	ldi	r20, 0x7A	; 122
    5822:	54 e4       	ldi	r21, 0x44	; 68
    5824:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5828:	dc 01       	movw	r26, r24
    582a:	cb 01       	movw	r24, r22
    582c:	8c 87       	std	Y+12, r24	; 0x0c
    582e:	9d 87       	std	Y+13, r25	; 0x0d
    5830:	ae 87       	std	Y+14, r26	; 0x0e
    5832:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5834:	6c 85       	ldd	r22, Y+12	; 0x0c
    5836:	7d 85       	ldd	r23, Y+13	; 0x0d
    5838:	8e 85       	ldd	r24, Y+14	; 0x0e
    583a:	9f 85       	ldd	r25, Y+15	; 0x0f
    583c:	20 e0       	ldi	r18, 0x00	; 0
    583e:	30 e0       	ldi	r19, 0x00	; 0
    5840:	4a e7       	ldi	r20, 0x7A	; 122
    5842:	55 e4       	ldi	r21, 0x45	; 69
    5844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5848:	dc 01       	movw	r26, r24
    584a:	cb 01       	movw	r24, r22
    584c:	88 87       	std	Y+8, r24	; 0x08
    584e:	99 87       	std	Y+9, r25	; 0x09
    5850:	aa 87       	std	Y+10, r26	; 0x0a
    5852:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5854:	68 85       	ldd	r22, Y+8	; 0x08
    5856:	79 85       	ldd	r23, Y+9	; 0x09
    5858:	8a 85       	ldd	r24, Y+10	; 0x0a
    585a:	9b 85       	ldd	r25, Y+11	; 0x0b
    585c:	20 e0       	ldi	r18, 0x00	; 0
    585e:	30 e0       	ldi	r19, 0x00	; 0
    5860:	40 e8       	ldi	r20, 0x80	; 128
    5862:	5f e3       	ldi	r21, 0x3F	; 63
    5864:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5868:	88 23       	and	r24, r24
    586a:	2c f4       	brge	.+10     	; 0x5876 <keypressed+0x8b4>
		__ticks = 1;
    586c:	81 e0       	ldi	r24, 0x01	; 1
    586e:	90 e0       	ldi	r25, 0x00	; 0
    5870:	9f 83       	std	Y+7, r25	; 0x07
    5872:	8e 83       	std	Y+6, r24	; 0x06
    5874:	3f c0       	rjmp	.+126    	; 0x58f4 <keypressed+0x932>
	else if (__tmp > 65535)
    5876:	68 85       	ldd	r22, Y+8	; 0x08
    5878:	79 85       	ldd	r23, Y+9	; 0x09
    587a:	8a 85       	ldd	r24, Y+10	; 0x0a
    587c:	9b 85       	ldd	r25, Y+11	; 0x0b
    587e:	20 e0       	ldi	r18, 0x00	; 0
    5880:	3f ef       	ldi	r19, 0xFF	; 255
    5882:	4f e7       	ldi	r20, 0x7F	; 127
    5884:	57 e4       	ldi	r21, 0x47	; 71
    5886:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    588a:	18 16       	cp	r1, r24
    588c:	4c f5       	brge	.+82     	; 0x58e0 <keypressed+0x91e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    588e:	6c 85       	ldd	r22, Y+12	; 0x0c
    5890:	7d 85       	ldd	r23, Y+13	; 0x0d
    5892:	8e 85       	ldd	r24, Y+14	; 0x0e
    5894:	9f 85       	ldd	r25, Y+15	; 0x0f
    5896:	20 e0       	ldi	r18, 0x00	; 0
    5898:	30 e0       	ldi	r19, 0x00	; 0
    589a:	40 e2       	ldi	r20, 0x20	; 32
    589c:	51 e4       	ldi	r21, 0x41	; 65
    589e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58a2:	dc 01       	movw	r26, r24
    58a4:	cb 01       	movw	r24, r22
    58a6:	bc 01       	movw	r22, r24
    58a8:	cd 01       	movw	r24, r26
    58aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58ae:	dc 01       	movw	r26, r24
    58b0:	cb 01       	movw	r24, r22
    58b2:	9f 83       	std	Y+7, r25	; 0x07
    58b4:	8e 83       	std	Y+6, r24	; 0x06
    58b6:	0f c0       	rjmp	.+30     	; 0x58d6 <keypressed+0x914>
    58b8:	80 e9       	ldi	r24, 0x90	; 144
    58ba:	91 e0       	ldi	r25, 0x01	; 1
    58bc:	9d 83       	std	Y+5, r25	; 0x05
    58be:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    58c0:	8c 81       	ldd	r24, Y+4	; 0x04
    58c2:	9d 81       	ldd	r25, Y+5	; 0x05
    58c4:	01 97       	sbiw	r24, 0x01	; 1
    58c6:	f1 f7       	brne	.-4      	; 0x58c4 <keypressed+0x902>
    58c8:	9d 83       	std	Y+5, r25	; 0x05
    58ca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58cc:	8e 81       	ldd	r24, Y+6	; 0x06
    58ce:	9f 81       	ldd	r25, Y+7	; 0x07
    58d0:	01 97       	sbiw	r24, 0x01	; 1
    58d2:	9f 83       	std	Y+7, r25	; 0x07
    58d4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58d6:	8e 81       	ldd	r24, Y+6	; 0x06
    58d8:	9f 81       	ldd	r25, Y+7	; 0x07
    58da:	00 97       	sbiw	r24, 0x00	; 0
    58dc:	69 f7       	brne	.-38     	; 0x58b8 <keypressed+0x8f6>
    58de:	24 c0       	rjmp	.+72     	; 0x5928 <keypressed+0x966>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58e0:	68 85       	ldd	r22, Y+8	; 0x08
    58e2:	79 85       	ldd	r23, Y+9	; 0x09
    58e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    58e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    58e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58ec:	dc 01       	movw	r26, r24
    58ee:	cb 01       	movw	r24, r22
    58f0:	9f 83       	std	Y+7, r25	; 0x07
    58f2:	8e 83       	std	Y+6, r24	; 0x06
    58f4:	8e 81       	ldd	r24, Y+6	; 0x06
    58f6:	9f 81       	ldd	r25, Y+7	; 0x07
    58f8:	9b 83       	std	Y+3, r25	; 0x03
    58fa:	8a 83       	std	Y+2, r24	; 0x02
    58fc:	8a 81       	ldd	r24, Y+2	; 0x02
    58fe:	9b 81       	ldd	r25, Y+3	; 0x03
    5900:	01 97       	sbiw	r24, 0x01	; 1
    5902:	f1 f7       	brne	.-4      	; 0x5900 <keypressed+0x93e>
    5904:	9b 83       	std	Y+3, r25	; 0x03
    5906:	8a 83       	std	Y+2, r24	; 0x02
    5908:	0f c0       	rjmp	.+30     	; 0x5928 <keypressed+0x966>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    590a:	69 89       	ldd	r22, Y+17	; 0x11
    590c:	7a 89       	ldd	r23, Y+18	; 0x12
    590e:	8b 89       	ldd	r24, Y+19	; 0x13
    5910:	9c 89       	ldd	r25, Y+20	; 0x14
    5912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5916:	dc 01       	movw	r26, r24
    5918:	cb 01       	movw	r24, r22
    591a:	88 8b       	std	Y+16, r24	; 0x10
    591c:	88 89       	ldd	r24, Y+16	; 0x10
    591e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5920:	89 81       	ldd	r24, Y+1	; 0x01
    5922:	8a 95       	dec	r24
    5924:	f1 f7       	brne	.-4      	; 0x5922 <keypressed+0x960>
    5926:	89 83       	std	Y+1, r24	; 0x01
     _delay_us(50);
     if (c1==0){while (c1==0); return ('C');}
    5928:	e3 e3       	ldi	r30, 0x33	; 51
    592a:	f0 e0       	ldi	r31, 0x00	; 0
    592c:	80 81       	ld	r24, Z
    592e:	80 71       	andi	r24, 0x10	; 16
    5930:	88 23       	and	r24, r24
    5932:	59 f4       	brne	.+22     	; 0x594a <keypressed+0x988>
    5934:	e3 e3       	ldi	r30, 0x33	; 51
    5936:	f0 e0       	ldi	r31, 0x00	; 0
    5938:	80 81       	ld	r24, Z
    593a:	80 71       	andi	r24, 0x10	; 16
    593c:	88 23       	and	r24, r24
    593e:	d1 f3       	breq	.-12     	; 0x5934 <keypressed+0x972>
    5940:	e3 e4       	ldi	r30, 0x43	; 67
    5942:	a2 96       	adiw	r28, 0x22	; 34
    5944:	ef af       	std	Y+63, r30	; 0x3f
    5946:	a2 97       	sbiw	r28, 0x22	; 34
    5948:	33 c0       	rjmp	.+102    	; 0x59b0 <keypressed+0x9ee>
     if (c2==0){while (c2==0); return ('0');}
    594a:	e3 e3       	ldi	r30, 0x33	; 51
    594c:	f0 e0       	ldi	r31, 0x00	; 0
    594e:	80 81       	ld	r24, Z
    5950:	80 72       	andi	r24, 0x20	; 32
    5952:	88 23       	and	r24, r24
    5954:	59 f4       	brne	.+22     	; 0x596c <keypressed+0x9aa>
    5956:	e3 e3       	ldi	r30, 0x33	; 51
    5958:	f0 e0       	ldi	r31, 0x00	; 0
    595a:	80 81       	ld	r24, Z
    595c:	80 72       	andi	r24, 0x20	; 32
    595e:	88 23       	and	r24, r24
    5960:	d1 f3       	breq	.-12     	; 0x5956 <keypressed+0x994>
    5962:	f0 e3       	ldi	r31, 0x30	; 48
    5964:	a2 96       	adiw	r28, 0x22	; 34
    5966:	ff af       	std	Y+63, r31	; 0x3f
    5968:	a2 97       	sbiw	r28, 0x22	; 34
    596a:	22 c0       	rjmp	.+68     	; 0x59b0 <keypressed+0x9ee>
     if (c3==0){while (c3==0); return ('=');}
    596c:	e3 e3       	ldi	r30, 0x33	; 51
    596e:	f0 e0       	ldi	r31, 0x00	; 0
    5970:	80 81       	ld	r24, Z
    5972:	80 74       	andi	r24, 0x40	; 64
    5974:	88 23       	and	r24, r24
    5976:	59 f4       	brne	.+22     	; 0x598e <keypressed+0x9cc>
    5978:	e3 e3       	ldi	r30, 0x33	; 51
    597a:	f0 e0       	ldi	r31, 0x00	; 0
    597c:	80 81       	ld	r24, Z
    597e:	80 74       	andi	r24, 0x40	; 64
    5980:	88 23       	and	r24, r24
    5982:	d1 f3       	breq	.-12     	; 0x5978 <keypressed+0x9b6>
    5984:	8d e3       	ldi	r24, 0x3D	; 61
    5986:	a2 96       	adiw	r28, 0x22	; 34
    5988:	8f af       	std	Y+63, r24	; 0x3f
    598a:	a2 97       	sbiw	r28, 0x22	; 34
    598c:	11 c0       	rjmp	.+34     	; 0x59b0 <keypressed+0x9ee>
     if (c4==0){while (c4==0); return ('+');}
    598e:	e3 e3       	ldi	r30, 0x33	; 51
    5990:	f0 e0       	ldi	r31, 0x00	; 0
    5992:	80 81       	ld	r24, Z
    5994:	80 78       	andi	r24, 0x80	; 128
    5996:	88 23       	and	r24, r24
    5998:	09 f0       	breq	.+2      	; 0x599c <keypressed+0x9da>
    599a:	28 cb       	rjmp	.-2480   	; 0x4fec <keypressed+0x2a>
    599c:	e3 e3       	ldi	r30, 0x33	; 51
    599e:	f0 e0       	ldi	r31, 0x00	; 0
    59a0:	80 81       	ld	r24, Z
    59a2:	80 78       	andi	r24, 0x80	; 128
    59a4:	88 23       	and	r24, r24
    59a6:	d1 f3       	breq	.-12     	; 0x599c <keypressed+0x9da>
    59a8:	eb e2       	ldi	r30, 0x2B	; 43
    59aa:	a2 96       	adiw	r28, 0x22	; 34
    59ac:	ef af       	std	Y+63, r30	; 0x3f
    59ae:	a2 97       	sbiw	r28, 0x22	; 34
     }
    59b0:	a2 96       	adiw	r28, 0x22	; 34
    59b2:	8f ad       	ldd	r24, Y+63	; 0x3f
    59b4:	a2 97       	sbiw	r28, 0x22	; 34

  }
    59b6:	cf 59       	subi	r28, 0x9F	; 159
    59b8:	df 4f       	sbci	r29, 0xFF	; 255
    59ba:	0f b6       	in	r0, 0x3f	; 63
    59bc:	f8 94       	cli
    59be:	de bf       	out	0x3e, r29	; 62
    59c0:	0f be       	out	0x3f, r0	; 63
    59c2:	cd bf       	out	0x3d, r28	; 61
    59c4:	cf 91       	pop	r28
    59c6:	df 91       	pop	r29
    59c8:	1f 91       	pop	r17
    59ca:	0f 91       	pop	r16
    59cc:	08 95       	ret

000059ce <EEPROM_ReadByte>:
 */


#include <util/delay.h>
#include "../includes/EEPROM.h"
void EEPROM_ReadByte(u8 Copy_u8BlockNo, u8 Copy_u8ByteAddress){
    59ce:	df 93       	push	r29
    59d0:	cf 93       	push	r28
    59d2:	00 d0       	rcall	.+0      	; 0x59d4 <EEPROM_ReadByte+0x6>
    59d4:	cd b7       	in	r28, 0x3d	; 61
    59d6:	de b7       	in	r29, 0x3e	; 62
    59d8:	89 83       	std	Y+1, r24	; 0x01
    59da:	6a 83       	std	Y+2, r22	; 0x02

	TWI_SendStart();
    59dc:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <TWI_SendStart>
		TWI_SendAdressWithWrite(EEPROM_FIXED_SLAVE_ADDRESS);
    59e0:	80 e5       	ldi	r24, 0x50	; 80
    59e2:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <TWI_SendAdressWithWrite>
		TWI_SendDataOnly(Copy_u8ByteAddress);
    59e6:	8a 81       	ldd	r24, Y+2	; 0x02
    59e8:	0e 94 0a 18 	call	0x3014	; 0x3014 <TWI_SendDataOnly>
		TWI_SendRepeatedStart();
    59ec:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <TWI_SendRepeatedStart>
		TWI_SendAdressWithRead(Copy_u8ByteAddress);
    59f0:	8a 81       	ldd	r24, Y+2	; 0x02
    59f2:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <TWI_SendAdressWithRead>
		TWI_SendStopCondition();
    59f6:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <TWI_SendStopCondition>
}
    59fa:	0f 90       	pop	r0
    59fc:	0f 90       	pop	r0
    59fe:	cf 91       	pop	r28
    5a00:	df 91       	pop	r29
    5a02:	08 95       	ret

00005a04 <EEPROM_WriteByte>:
void EEPROM_WriteByte(u8 Copy_u8ByteAddress, u8 Transmitted_data){
    5a04:	df 93       	push	r29
    5a06:	cf 93       	push	r28
    5a08:	00 d0       	rcall	.+0      	; 0x5a0a <EEPROM_WriteByte+0x6>
    5a0a:	cd b7       	in	r28, 0x3d	; 61
    5a0c:	de b7       	in	r29, 0x3e	; 62
    5a0e:	89 83       	std	Y+1, r24	; 0x01
    5a10:	6a 83       	std	Y+2, r22	; 0x02

	TWI_SendStart();
    5a12:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <TWI_SendStart>
	TWI_SendAdressWithWrite(EEPROM_FIXED_SLAVE_ADDRESS);
    5a16:	80 e5       	ldi	r24, 0x50	; 80
    5a18:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <TWI_SendAdressWithWrite>
	TWI_SendDataOnly(Copy_u8ByteAddress);
    5a1c:	89 81       	ldd	r24, Y+1	; 0x01
    5a1e:	0e 94 0a 18 	call	0x3014	; 0x3014 <TWI_SendDataOnly>
	TWI_SendDataOnly(Transmitted_data);
    5a22:	8a 81       	ldd	r24, Y+2	; 0x02
    5a24:	0e 94 0a 18 	call	0x3014	; 0x3014 <TWI_SendDataOnly>
	TWI_SendStopCondition();
    5a28:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <TWI_SendStopCondition>
}
    5a2c:	0f 90       	pop	r0
    5a2e:	0f 90       	pop	r0
    5a30:	cf 91       	pop	r28
    5a32:	df 91       	pop	r29
    5a34:	08 95       	ret

00005a36 <main>:
return 0;
}
*/


int main(){
    5a36:	df 93       	push	r29
    5a38:	cf 93       	push	r28
    5a3a:	cd b7       	in	r28, 0x3d	; 61
    5a3c:	de b7       	in	r29, 0x3e	; 62


	return 0;
    5a3e:	80 e0       	ldi	r24, 0x00	; 0
    5a40:	90 e0       	ldi	r25, 0x00	; 0
}
    5a42:	cf 91       	pop	r28
    5a44:	df 91       	pop	r29
    5a46:	08 95       	ret

00005a48 <GetNumber>:

/* this application is simple calculator on keypad 4*4
*/

u16 GetNumber(u8 charcter)
{
    5a48:	df 93       	push	r29
    5a4a:	cf 93       	push	r28
    5a4c:	00 d0       	rcall	.+0      	; 0x5a4e <GetNumber+0x6>
    5a4e:	00 d0       	rcall	.+0      	; 0x5a50 <GetNumber+0x8>
    5a50:	cd b7       	in	r28, 0x3d	; 61
    5a52:	de b7       	in	r29, 0x3e	; 62
    5a54:	8a 83       	std	Y+2, r24	; 0x02
    u8 num = 0;
    5a56:	19 82       	std	Y+1, r1	; 0x01
    switch(charcter)
    5a58:	8a 81       	ldd	r24, Y+2	; 0x02
    5a5a:	28 2f       	mov	r18, r24
    5a5c:	30 e0       	ldi	r19, 0x00	; 0
    5a5e:	3c 83       	std	Y+4, r19	; 0x04
    5a60:	2b 83       	std	Y+3, r18	; 0x03
    5a62:	8b 81       	ldd	r24, Y+3	; 0x03
    5a64:	9c 81       	ldd	r25, Y+4	; 0x04
    5a66:	85 33       	cpi	r24, 0x35	; 53
    5a68:	91 05       	cpc	r25, r1
    5a6a:	09 f4       	brne	.+2      	; 0x5a6e <GetNumber+0x26>
    5a6c:	54 c0       	rjmp	.+168    	; 0x5b16 <GetNumber+0xce>
    5a6e:	2b 81       	ldd	r18, Y+3	; 0x03
    5a70:	3c 81       	ldd	r19, Y+4	; 0x04
    5a72:	26 33       	cpi	r18, 0x36	; 54
    5a74:	31 05       	cpc	r19, r1
    5a76:	0c f5       	brge	.+66     	; 0x5aba <GetNumber+0x72>
    5a78:	8b 81       	ldd	r24, Y+3	; 0x03
    5a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    5a7c:	82 33       	cpi	r24, 0x32	; 50
    5a7e:	91 05       	cpc	r25, r1
    5a80:	09 f4       	brne	.+2      	; 0x5a84 <GetNumber+0x3c>
    5a82:	40 c0       	rjmp	.+128    	; 0x5b04 <GetNumber+0xbc>
    5a84:	2b 81       	ldd	r18, Y+3	; 0x03
    5a86:	3c 81       	ldd	r19, Y+4	; 0x04
    5a88:	23 33       	cpi	r18, 0x33	; 51
    5a8a:	31 05       	cpc	r19, r1
    5a8c:	5c f4       	brge	.+22     	; 0x5aa4 <GetNumber+0x5c>
    5a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    5a90:	9c 81       	ldd	r25, Y+4	; 0x04
    5a92:	80 33       	cpi	r24, 0x30	; 48
    5a94:	91 05       	cpc	r25, r1
    5a96:	89 f1       	breq	.+98     	; 0x5afa <GetNumber+0xb2>
    5a98:	2b 81       	ldd	r18, Y+3	; 0x03
    5a9a:	3c 81       	ldd	r19, Y+4	; 0x04
    5a9c:	21 33       	cpi	r18, 0x31	; 49
    5a9e:	31 05       	cpc	r19, r1
    5aa0:	71 f1       	breq	.+92     	; 0x5afe <GetNumber+0xb6>
    5aa2:	4e c0       	rjmp	.+156    	; 0x5b40 <GetNumber+0xf8>
    5aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    5aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    5aa8:	83 33       	cpi	r24, 0x33	; 51
    5aaa:	91 05       	cpc	r25, r1
    5aac:	71 f1       	breq	.+92     	; 0x5b0a <GetNumber+0xc2>
    5aae:	2b 81       	ldd	r18, Y+3	; 0x03
    5ab0:	3c 81       	ldd	r19, Y+4	; 0x04
    5ab2:	24 33       	cpi	r18, 0x34	; 52
    5ab4:	31 05       	cpc	r19, r1
    5ab6:	61 f1       	breq	.+88     	; 0x5b10 <GetNumber+0xc8>
    5ab8:	43 c0       	rjmp	.+134    	; 0x5b40 <GetNumber+0xf8>
    5aba:	8b 81       	ldd	r24, Y+3	; 0x03
    5abc:	9c 81       	ldd	r25, Y+4	; 0x04
    5abe:	88 33       	cpi	r24, 0x38	; 56
    5ac0:	91 05       	cpc	r25, r1
    5ac2:	91 f1       	breq	.+100    	; 0x5b28 <GetNumber+0xe0>
    5ac4:	2b 81       	ldd	r18, Y+3	; 0x03
    5ac6:	3c 81       	ldd	r19, Y+4	; 0x04
    5ac8:	29 33       	cpi	r18, 0x39	; 57
    5aca:	31 05       	cpc	r19, r1
    5acc:	5c f4       	brge	.+22     	; 0x5ae4 <GetNumber+0x9c>
    5ace:	8b 81       	ldd	r24, Y+3	; 0x03
    5ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    5ad2:	86 33       	cpi	r24, 0x36	; 54
    5ad4:	91 05       	cpc	r25, r1
    5ad6:	11 f1       	breq	.+68     	; 0x5b1c <GetNumber+0xd4>
    5ad8:	2b 81       	ldd	r18, Y+3	; 0x03
    5ada:	3c 81       	ldd	r19, Y+4	; 0x04
    5adc:	27 33       	cpi	r18, 0x37	; 55
    5ade:	31 05       	cpc	r19, r1
    5ae0:	01 f1       	breq	.+64     	; 0x5b22 <GetNumber+0xda>
    5ae2:	2e c0       	rjmp	.+92     	; 0x5b40 <GetNumber+0xf8>
    5ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    5ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    5ae8:	89 33       	cpi	r24, 0x39	; 57
    5aea:	91 05       	cpc	r25, r1
    5aec:	01 f1       	breq	.+64     	; 0x5b2e <GetNumber+0xe6>
    5aee:	2b 81       	ldd	r18, Y+3	; 0x03
    5af0:	3c 81       	ldd	r19, Y+4	; 0x04
    5af2:	23 34       	cpi	r18, 0x43	; 67
    5af4:	31 05       	cpc	r19, r1
    5af6:	f1 f0       	breq	.+60     	; 0x5b34 <GetNumber+0xec>
    5af8:	23 c0       	rjmp	.+70     	; 0x5b40 <GetNumber+0xf8>
    {
    case '0':
        num = 0;
    5afa:	19 82       	std	Y+1, r1	; 0x01
    5afc:	27 c0       	rjmp	.+78     	; 0x5b4c <GetNumber+0x104>
        break;
    case '1':
        num = 1;
    5afe:	81 e0       	ldi	r24, 0x01	; 1
    5b00:	89 83       	std	Y+1, r24	; 0x01
    5b02:	24 c0       	rjmp	.+72     	; 0x5b4c <GetNumber+0x104>
        break;
    case '2':
        num = 2;
    5b04:	82 e0       	ldi	r24, 0x02	; 2
    5b06:	89 83       	std	Y+1, r24	; 0x01
    5b08:	21 c0       	rjmp	.+66     	; 0x5b4c <GetNumber+0x104>
        break;
    case '3':
        num = 3;
    5b0a:	83 e0       	ldi	r24, 0x03	; 3
    5b0c:	89 83       	std	Y+1, r24	; 0x01
    5b0e:	1e c0       	rjmp	.+60     	; 0x5b4c <GetNumber+0x104>
        break;
    case '4':
        num = 4;
    5b10:	84 e0       	ldi	r24, 0x04	; 4
    5b12:	89 83       	std	Y+1, r24	; 0x01
    5b14:	1b c0       	rjmp	.+54     	; 0x5b4c <GetNumber+0x104>
        break;
    case '5':
        num = 5;
    5b16:	85 e0       	ldi	r24, 0x05	; 5
    5b18:	89 83       	std	Y+1, r24	; 0x01
    5b1a:	18 c0       	rjmp	.+48     	; 0x5b4c <GetNumber+0x104>
        break;
    case '6':
        num = 6;
    5b1c:	86 e0       	ldi	r24, 0x06	; 6
    5b1e:	89 83       	std	Y+1, r24	; 0x01
    5b20:	15 c0       	rjmp	.+42     	; 0x5b4c <GetNumber+0x104>
        break;
    case '7':
        num = 7;
    5b22:	87 e0       	ldi	r24, 0x07	; 7
    5b24:	89 83       	std	Y+1, r24	; 0x01
    5b26:	12 c0       	rjmp	.+36     	; 0x5b4c <GetNumber+0x104>
        break;
    case '8':
        num = 8;
    5b28:	88 e0       	ldi	r24, 0x08	; 8
    5b2a:	89 83       	std	Y+1, r24	; 0x01
    5b2c:	0f c0       	rjmp	.+30     	; 0x5b4c <GetNumber+0x104>
        break;
    case '9':
        num = 9;
    5b2e:	89 e0       	ldi	r24, 0x09	; 9
    5b30:	89 83       	std	Y+1, r24	; 0x01
    5b32:	0c c0       	rjmp	.+24     	; 0x5b4c <GetNumber+0x104>
        break;
    case 'C':
        LCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    5b34:	81 e0       	ldi	r24, 0x01	; 1
    5b36:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <LCD_WriteCommand4Bit>
        num = Error;
    5b3a:	8d e0       	ldi	r24, 0x0D	; 13
    5b3c:	89 83       	std	Y+1, r24	; 0x01
    5b3e:	06 c0       	rjmp	.+12     	; 0x5b4c <GetNumber+0x104>
        break;  //this is used as a clear screen and then reset by setting error
    default:
        DispError(0);
    5b40:	80 e0       	ldi	r24, 0x00	; 0
    5b42:	90 e0       	ldi	r25, 0x00	; 0
    5b44:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <DispError>
        num = Error;
    5b48:	8d e0       	ldi	r24, 0x0D	; 13
    5b4a:	89 83       	std	Y+1, r24	; 0x01
        break;       //it means wrong input
    }
    return num;
    5b4c:	89 81       	ldd	r24, Y+1	; 0x01
    5b4e:	88 2f       	mov	r24, r24
    5b50:	90 e0       	ldi	r25, 0x00	; 0
}
    5b52:	0f 90       	pop	r0
    5b54:	0f 90       	pop	r0
    5b56:	0f 90       	pop	r0
    5b58:	0f 90       	pop	r0
    5b5a:	cf 91       	pop	r28
    5b5c:	df 91       	pop	r29
    5b5e:	08 95       	ret

00005b60 <GetOperation>:

u8 GetOperation(u8 fun)            //detects the errors in function
{
    5b60:	df 93       	push	r29
    5b62:	cf 93       	push	r28
    5b64:	00 d0       	rcall	.+0      	; 0x5b66 <GetOperation+0x6>
    5b66:	cd b7       	in	r28, 0x3d	; 61
    5b68:	de b7       	in	r29, 0x3e	; 62
    5b6a:	89 83       	std	Y+1, r24	; 0x01
    if(fun=='C')                   //if clear screen then clear the LCD and reset
    5b6c:	89 81       	ldd	r24, Y+1	; 0x01
    5b6e:	83 34       	cpi	r24, 0x43	; 67
    5b70:	31 f4       	brne	.+12     	; 0x5b7e <GetOperation+0x1e>
    {
    	LCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    5b72:	81 e0       	ldi	r24, 0x01	; 1
    5b74:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <LCD_WriteCommand4Bit>
        return 'e';
    5b78:	85 e6       	ldi	r24, 0x65	; 101
    5b7a:	8a 83       	std	Y+2, r24	; 0x02
    5b7c:	15 c0       	rjmp	.+42     	; 0x5ba8 <GetOperation+0x48>
    }
    if( fun != '+' && fun != '-' && fun != '*' && fun != '/' )  //if input is not from allowed functions then show error
    5b7e:	89 81       	ldd	r24, Y+1	; 0x01
    5b80:	8b 32       	cpi	r24, 0x2B	; 43
    5b82:	81 f0       	breq	.+32     	; 0x5ba4 <GetOperation+0x44>
    5b84:	89 81       	ldd	r24, Y+1	; 0x01
    5b86:	8d 32       	cpi	r24, 0x2D	; 45
    5b88:	69 f0       	breq	.+26     	; 0x5ba4 <GetOperation+0x44>
    5b8a:	89 81       	ldd	r24, Y+1	; 0x01
    5b8c:	8a 32       	cpi	r24, 0x2A	; 42
    5b8e:	51 f0       	breq	.+20     	; 0x5ba4 <GetOperation+0x44>
    5b90:	89 81       	ldd	r24, Y+1	; 0x01
    5b92:	8f 32       	cpi	r24, 0x2F	; 47
    5b94:	39 f0       	breq	.+14     	; 0x5ba4 <GetOperation+0x44>
    {
        DispError(1);
    5b96:	81 e0       	ldi	r24, 0x01	; 1
    5b98:	90 e0       	ldi	r25, 0x00	; 0
    5b9a:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <DispError>
        return 'e';
    5b9e:	85 e6       	ldi	r24, 0x65	; 101
    5ba0:	8a 83       	std	Y+2, r24	; 0x02
    5ba2:	02 c0       	rjmp	.+4      	; 0x5ba8 <GetOperation+0x48>
    }
    return fun;                        //function is correct so return the correct function
    5ba4:	89 81       	ldd	r24, Y+1	; 0x01
    5ba6:	8a 83       	std	Y+2, r24	; 0x02
    5ba8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5baa:	0f 90       	pop	r0
    5bac:	0f 90       	pop	r0
    5bae:	cf 91       	pop	r28
    5bb0:	df 91       	pop	r29
    5bb2:	08 95       	ret

00005bb4 <DispError>:


void DispError(u16 numb)           //displays different error messages
{
    5bb4:	df 93       	push	r29
    5bb6:	cf 93       	push	r28
    5bb8:	cd b7       	in	r28, 0x3d	; 61
    5bba:	de b7       	in	r29, 0x3e	; 62
    5bbc:	a9 97       	sbiw	r28, 0x29	; 41
    5bbe:	0f b6       	in	r0, 0x3f	; 63
    5bc0:	f8 94       	cli
    5bc2:	de bf       	out	0x3e, r29	; 62
    5bc4:	0f be       	out	0x3f, r0	; 63
    5bc6:	cd bf       	out	0x3d, r28	; 61
    5bc8:	9d 8f       	std	Y+29, r25	; 0x1d
    5bca:	8c 8f       	std	Y+28, r24	; 0x1c
	u8 msg1[] = {"Wrong Input"};
    5bcc:	ce 01       	movw	r24, r28
    5bce:	01 96       	adiw	r24, 0x01	; 1
    5bd0:	9f 8f       	std	Y+31, r25	; 0x1f
    5bd2:	8e 8f       	std	Y+30, r24	; 0x1e
    5bd4:	e0 e6       	ldi	r30, 0x60	; 96
    5bd6:	f0 e0       	ldi	r31, 0x00	; 0
    5bd8:	f9 a3       	std	Y+33, r31	; 0x21
    5bda:	e8 a3       	std	Y+32, r30	; 0x20
    5bdc:	fc e0       	ldi	r31, 0x0C	; 12
    5bde:	fa a3       	std	Y+34, r31	; 0x22
    5be0:	e8 a1       	ldd	r30, Y+32	; 0x20
    5be2:	f9 a1       	ldd	r31, Y+33	; 0x21
    5be4:	00 80       	ld	r0, Z
    5be6:	88 a1       	ldd	r24, Y+32	; 0x20
    5be8:	99 a1       	ldd	r25, Y+33	; 0x21
    5bea:	01 96       	adiw	r24, 0x01	; 1
    5bec:	99 a3       	std	Y+33, r25	; 0x21
    5bee:	88 a3       	std	Y+32, r24	; 0x20
    5bf0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5bf2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5bf4:	00 82       	st	Z, r0
    5bf6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5bf8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5bfa:	01 96       	adiw	r24, 0x01	; 1
    5bfc:	9f 8f       	std	Y+31, r25	; 0x1f
    5bfe:	8e 8f       	std	Y+30, r24	; 0x1e
    5c00:	9a a1       	ldd	r25, Y+34	; 0x22
    5c02:	91 50       	subi	r25, 0x01	; 1
    5c04:	9a a3       	std	Y+34, r25	; 0x22
    5c06:	ea a1       	ldd	r30, Y+34	; 0x22
    5c08:	ee 23       	and	r30, r30
    5c0a:	51 f7       	brne	.-44     	; 0x5be0 <DispError+0x2c>
	u8 msg2[] = {"Wrong Function"};
    5c0c:	ce 01       	movw	r24, r28
    5c0e:	0d 96       	adiw	r24, 0x0d	; 13
    5c10:	9c a3       	std	Y+36, r25	; 0x24
    5c12:	8b a3       	std	Y+35, r24	; 0x23
    5c14:	ec e6       	ldi	r30, 0x6C	; 108
    5c16:	f0 e0       	ldi	r31, 0x00	; 0
    5c18:	fe a3       	std	Y+38, r31	; 0x26
    5c1a:	ed a3       	std	Y+37, r30	; 0x25
    5c1c:	ff e0       	ldi	r31, 0x0F	; 15
    5c1e:	ff a3       	std	Y+39, r31	; 0x27
    5c20:	ed a1       	ldd	r30, Y+37	; 0x25
    5c22:	fe a1       	ldd	r31, Y+38	; 0x26
    5c24:	00 80       	ld	r0, Z
    5c26:	8d a1       	ldd	r24, Y+37	; 0x25
    5c28:	9e a1       	ldd	r25, Y+38	; 0x26
    5c2a:	01 96       	adiw	r24, 0x01	; 1
    5c2c:	9e a3       	std	Y+38, r25	; 0x26
    5c2e:	8d a3       	std	Y+37, r24	; 0x25
    5c30:	eb a1       	ldd	r30, Y+35	; 0x23
    5c32:	fc a1       	ldd	r31, Y+36	; 0x24
    5c34:	00 82       	st	Z, r0
    5c36:	8b a1       	ldd	r24, Y+35	; 0x23
    5c38:	9c a1       	ldd	r25, Y+36	; 0x24
    5c3a:	01 96       	adiw	r24, 0x01	; 1
    5c3c:	9c a3       	std	Y+36, r25	; 0x24
    5c3e:	8b a3       	std	Y+35, r24	; 0x23
    5c40:	9f a1       	ldd	r25, Y+39	; 0x27
    5c42:	91 50       	subi	r25, 0x01	; 1
    5c44:	9f a3       	std	Y+39, r25	; 0x27
    5c46:	ef a1       	ldd	r30, Y+39	; 0x27
    5c48:	ee 23       	and	r30, r30
    5c4a:	51 f7       	brne	.-44     	; 0x5c20 <DispError+0x6c>

 	LCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);            //clear display
    5c4c:	81 e0       	ldi	r24, 0x01	; 1
    5c4e:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <LCD_WriteCommand4Bit>
    switch(numb)
    5c52:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5c54:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5c56:	99 a7       	std	Y+41, r25	; 0x29
    5c58:	88 a7       	std	Y+40, r24	; 0x28
    5c5a:	e8 a5       	ldd	r30, Y+40	; 0x28
    5c5c:	f9 a5       	ldd	r31, Y+41	; 0x29
    5c5e:	30 97       	sbiw	r30, 0x00	; 0
    5c60:	31 f0       	breq	.+12     	; 0x5c6e <DispError+0xba>
    5c62:	88 a5       	ldd	r24, Y+40	; 0x28
    5c64:	99 a5       	ldd	r25, Y+41	; 0x29
    5c66:	81 30       	cpi	r24, 0x01	; 1
    5c68:	91 05       	cpc	r25, r1
    5c6a:	31 f0       	breq	.+12     	; 0x5c78 <DispError+0xc4>
    5c6c:	0a c0       	rjmp	.+20     	; 0x5c82 <DispError+0xce>
    {
    case 0:
        LCD_WriteString(msg1);
    5c6e:	ce 01       	movw	r24, r28
    5c70:	01 96       	adiw	r24, 0x01	; 1
    5c72:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <LCD_WriteString>
    5c76:	09 c0       	rjmp	.+18     	; 0x5c8a <DispError+0xd6>
        break;
    case 1:
    	LCD_WriteString(msg2);
    5c78:	ce 01       	movw	r24, r28
    5c7a:	0d 96       	adiw	r24, 0x0d	; 13
    5c7c:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <LCD_WriteString>
    5c80:	04 c0       	rjmp	.+8      	; 0x5c8a <DispError+0xd6>
        break;
    default:
    	LCD_WriteString(msg1);
    5c82:	ce 01       	movw	r24, r28
    5c84:	01 96       	adiw	r24, 0x01	; 1
    5c86:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <LCD_WriteString>
        break;
    }
}
    5c8a:	a9 96       	adiw	r28, 0x29	; 41
    5c8c:	0f b6       	in	r0, 0x3f	; 63
    5c8e:	f8 94       	cli
    5c90:	de bf       	out	0x3e, r29	; 62
    5c92:	0f be       	out	0x3f, r0	; 63
    5c94:	cd bf       	out	0x3d, r28	; 61
    5c96:	cf 91       	pop	r28
    5c98:	df 91       	pop	r29
    5c9a:	08 95       	ret

00005c9c <DispNumber>:

void DispNumber(s16 numb)            //displays number on LCD
{
    5c9c:	df 93       	push	r29
    5c9e:	cf 93       	push	r28
    5ca0:	00 d0       	rcall	.+0      	; 0x5ca2 <DispNumber+0x6>
    5ca2:	00 d0       	rcall	.+0      	; 0x5ca4 <DispNumber+0x8>
    5ca4:	cd b7       	in	r28, 0x3d	; 61
    5ca6:	de b7       	in	r29, 0x3e	; 62
    5ca8:	9c 83       	std	Y+4, r25	; 0x04
    5caa:	8b 83       	std	Y+3, r24	; 0x03
    u8 UnitDigit  = 0;  //It will contain unit digit of numb
    5cac:	1a 82       	std	Y+2, r1	; 0x02
    u8 TenthDigit = 0;  //It will contain 10th position digit of numb
    5cae:	19 82       	std	Y+1, r1	; 0x01

    if(numb<0)    {
    5cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    5cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    5cb4:	99 23       	and	r25, r25
    5cb6:	54 f4       	brge	.+20     	; 0x5ccc <DispNumber+0x30>
        numb = -1*numb;          // Make number positive
    5cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    5cba:	9c 81       	ldd	r25, Y+4	; 0x04
    5cbc:	90 95       	com	r25
    5cbe:	81 95       	neg	r24
    5cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    5cc2:	9c 83       	std	Y+4, r25	; 0x04
    5cc4:	8b 83       	std	Y+3, r24	; 0x03
        LCD_WriteChar4Bit('-');   // Display a negative sign on LCD
    5cc6:	8d e2       	ldi	r24, 0x2D	; 45
    5cc8:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <LCD_WriteChar4Bit>
    }
    TenthDigit = (numb/10);                    // Find out Tenth Digit
    5ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    5cce:	9c 81       	ldd	r25, Y+4	; 0x04
    5cd0:	2a e0       	ldi	r18, 0x0A	; 10
    5cd2:	30 e0       	ldi	r19, 0x00	; 0
    5cd4:	b9 01       	movw	r22, r18
    5cd6:	0e 94 b4 2e 	call	0x5d68	; 0x5d68 <__divmodhi4>
    5cda:	cb 01       	movw	r24, r22
    5cdc:	89 83       	std	Y+1, r24	; 0x01

    if( TenthDigit != 0)                    // If it is zero, then don't display
    5cde:	89 81       	ldd	r24, Y+1	; 0x01
    5ce0:	88 23       	and	r24, r24
    5ce2:	21 f0       	breq	.+8      	; 0x5cec <DispNumber+0x50>
    	LCD_WriteChar4Bit(TenthDigit+0x30);    // Make Char of TenthDigit and then display it on LCD
    5ce4:	89 81       	ldd	r24, Y+1	; 0x01
    5ce6:	80 5d       	subi	r24, 0xD0	; 208
    5ce8:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <LCD_WriteChar4Bit>
		UnitDigit = numb - TenthDigit*10;
    5cec:	89 81       	ldd	r24, Y+1	; 0x01
    5cee:	88 2f       	mov	r24, r24
    5cf0:	90 e0       	ldi	r25, 0x00	; 0
    5cf2:	9c 01       	movw	r18, r24
    5cf4:	22 0f       	add	r18, r18
    5cf6:	33 1f       	adc	r19, r19
    5cf8:	c9 01       	movw	r24, r18
    5cfa:	88 0f       	add	r24, r24
    5cfc:	99 1f       	adc	r25, r25
    5cfe:	88 0f       	add	r24, r24
    5d00:	99 1f       	adc	r25, r25
    5d02:	82 0f       	add	r24, r18
    5d04:	93 1f       	adc	r25, r19
    5d06:	90 95       	com	r25
    5d08:	81 95       	neg	r24
    5d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d0c:	98 2f       	mov	r25, r24
    5d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    5d10:	89 0f       	add	r24, r25
    5d12:	8a 83       	std	Y+2, r24	; 0x02
		LCD_WriteChar4Bit(UnitDigit+0x30);    // Make Char of UnitDigit and then display it on LCD
    5d14:	8a 81       	ldd	r24, Y+2	; 0x02
    5d16:	80 5d       	subi	r24, 0xD0	; 208
    5d18:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <LCD_WriteChar4Bit>
}
    5d1c:	0f 90       	pop	r0
    5d1e:	0f 90       	pop	r0
    5d20:	0f 90       	pop	r0
    5d22:	0f 90       	pop	r0
    5d24:	cf 91       	pop	r28
    5d26:	df 91       	pop	r29
    5d28:	08 95       	ret

00005d2a <__mulsi3>:
    5d2a:	62 9f       	mul	r22, r18
    5d2c:	d0 01       	movw	r26, r0
    5d2e:	73 9f       	mul	r23, r19
    5d30:	f0 01       	movw	r30, r0
    5d32:	82 9f       	mul	r24, r18
    5d34:	e0 0d       	add	r30, r0
    5d36:	f1 1d       	adc	r31, r1
    5d38:	64 9f       	mul	r22, r20
    5d3a:	e0 0d       	add	r30, r0
    5d3c:	f1 1d       	adc	r31, r1
    5d3e:	92 9f       	mul	r25, r18
    5d40:	f0 0d       	add	r31, r0
    5d42:	83 9f       	mul	r24, r19
    5d44:	f0 0d       	add	r31, r0
    5d46:	74 9f       	mul	r23, r20
    5d48:	f0 0d       	add	r31, r0
    5d4a:	65 9f       	mul	r22, r21
    5d4c:	f0 0d       	add	r31, r0
    5d4e:	99 27       	eor	r25, r25
    5d50:	72 9f       	mul	r23, r18
    5d52:	b0 0d       	add	r27, r0
    5d54:	e1 1d       	adc	r30, r1
    5d56:	f9 1f       	adc	r31, r25
    5d58:	63 9f       	mul	r22, r19
    5d5a:	b0 0d       	add	r27, r0
    5d5c:	e1 1d       	adc	r30, r1
    5d5e:	f9 1f       	adc	r31, r25
    5d60:	bd 01       	movw	r22, r26
    5d62:	cf 01       	movw	r24, r30
    5d64:	11 24       	eor	r1, r1
    5d66:	08 95       	ret

00005d68 <__divmodhi4>:
    5d68:	97 fb       	bst	r25, 7
    5d6a:	09 2e       	mov	r0, r25
    5d6c:	07 26       	eor	r0, r23
    5d6e:	0a d0       	rcall	.+20     	; 0x5d84 <__divmodhi4_neg1>
    5d70:	77 fd       	sbrc	r23, 7
    5d72:	04 d0       	rcall	.+8      	; 0x5d7c <__divmodhi4_neg2>
    5d74:	49 d0       	rcall	.+146    	; 0x5e08 <__udivmodhi4>
    5d76:	06 d0       	rcall	.+12     	; 0x5d84 <__divmodhi4_neg1>
    5d78:	00 20       	and	r0, r0
    5d7a:	1a f4       	brpl	.+6      	; 0x5d82 <__divmodhi4_exit>

00005d7c <__divmodhi4_neg2>:
    5d7c:	70 95       	com	r23
    5d7e:	61 95       	neg	r22
    5d80:	7f 4f       	sbci	r23, 0xFF	; 255

00005d82 <__divmodhi4_exit>:
    5d82:	08 95       	ret

00005d84 <__divmodhi4_neg1>:
    5d84:	f6 f7       	brtc	.-4      	; 0x5d82 <__divmodhi4_exit>
    5d86:	90 95       	com	r25
    5d88:	81 95       	neg	r24
    5d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d8c:	08 95       	ret

00005d8e <__udivmodsi4>:
    5d8e:	a1 e2       	ldi	r26, 0x21	; 33
    5d90:	1a 2e       	mov	r1, r26
    5d92:	aa 1b       	sub	r26, r26
    5d94:	bb 1b       	sub	r27, r27
    5d96:	fd 01       	movw	r30, r26
    5d98:	0d c0       	rjmp	.+26     	; 0x5db4 <__udivmodsi4_ep>

00005d9a <__udivmodsi4_loop>:
    5d9a:	aa 1f       	adc	r26, r26
    5d9c:	bb 1f       	adc	r27, r27
    5d9e:	ee 1f       	adc	r30, r30
    5da0:	ff 1f       	adc	r31, r31
    5da2:	a2 17       	cp	r26, r18
    5da4:	b3 07       	cpc	r27, r19
    5da6:	e4 07       	cpc	r30, r20
    5da8:	f5 07       	cpc	r31, r21
    5daa:	20 f0       	brcs	.+8      	; 0x5db4 <__udivmodsi4_ep>
    5dac:	a2 1b       	sub	r26, r18
    5dae:	b3 0b       	sbc	r27, r19
    5db0:	e4 0b       	sbc	r30, r20
    5db2:	f5 0b       	sbc	r31, r21

00005db4 <__udivmodsi4_ep>:
    5db4:	66 1f       	adc	r22, r22
    5db6:	77 1f       	adc	r23, r23
    5db8:	88 1f       	adc	r24, r24
    5dba:	99 1f       	adc	r25, r25
    5dbc:	1a 94       	dec	r1
    5dbe:	69 f7       	brne	.-38     	; 0x5d9a <__udivmodsi4_loop>
    5dc0:	60 95       	com	r22
    5dc2:	70 95       	com	r23
    5dc4:	80 95       	com	r24
    5dc6:	90 95       	com	r25
    5dc8:	9b 01       	movw	r18, r22
    5dca:	ac 01       	movw	r20, r24
    5dcc:	bd 01       	movw	r22, r26
    5dce:	cf 01       	movw	r24, r30
    5dd0:	08 95       	ret

00005dd2 <__divmodsi4>:
    5dd2:	97 fb       	bst	r25, 7
    5dd4:	09 2e       	mov	r0, r25
    5dd6:	05 26       	eor	r0, r21
    5dd8:	0e d0       	rcall	.+28     	; 0x5df6 <__divmodsi4_neg1>
    5dda:	57 fd       	sbrc	r21, 7
    5ddc:	04 d0       	rcall	.+8      	; 0x5de6 <__divmodsi4_neg2>
    5dde:	d7 df       	rcall	.-82     	; 0x5d8e <__udivmodsi4>
    5de0:	0a d0       	rcall	.+20     	; 0x5df6 <__divmodsi4_neg1>
    5de2:	00 1c       	adc	r0, r0
    5de4:	38 f4       	brcc	.+14     	; 0x5df4 <__divmodsi4_exit>

00005de6 <__divmodsi4_neg2>:
    5de6:	50 95       	com	r21
    5de8:	40 95       	com	r20
    5dea:	30 95       	com	r19
    5dec:	21 95       	neg	r18
    5dee:	3f 4f       	sbci	r19, 0xFF	; 255
    5df0:	4f 4f       	sbci	r20, 0xFF	; 255
    5df2:	5f 4f       	sbci	r21, 0xFF	; 255

00005df4 <__divmodsi4_exit>:
    5df4:	08 95       	ret

00005df6 <__divmodsi4_neg1>:
    5df6:	f6 f7       	brtc	.-4      	; 0x5df4 <__divmodsi4_exit>
    5df8:	90 95       	com	r25
    5dfa:	80 95       	com	r24
    5dfc:	70 95       	com	r23
    5dfe:	61 95       	neg	r22
    5e00:	7f 4f       	sbci	r23, 0xFF	; 255
    5e02:	8f 4f       	sbci	r24, 0xFF	; 255
    5e04:	9f 4f       	sbci	r25, 0xFF	; 255
    5e06:	08 95       	ret

00005e08 <__udivmodhi4>:
    5e08:	aa 1b       	sub	r26, r26
    5e0a:	bb 1b       	sub	r27, r27
    5e0c:	51 e1       	ldi	r21, 0x11	; 17
    5e0e:	07 c0       	rjmp	.+14     	; 0x5e1e <__udivmodhi4_ep>

00005e10 <__udivmodhi4_loop>:
    5e10:	aa 1f       	adc	r26, r26
    5e12:	bb 1f       	adc	r27, r27
    5e14:	a6 17       	cp	r26, r22
    5e16:	b7 07       	cpc	r27, r23
    5e18:	10 f0       	brcs	.+4      	; 0x5e1e <__udivmodhi4_ep>
    5e1a:	a6 1b       	sub	r26, r22
    5e1c:	b7 0b       	sbc	r27, r23

00005e1e <__udivmodhi4_ep>:
    5e1e:	88 1f       	adc	r24, r24
    5e20:	99 1f       	adc	r25, r25
    5e22:	5a 95       	dec	r21
    5e24:	a9 f7       	brne	.-22     	; 0x5e10 <__udivmodhi4_loop>
    5e26:	80 95       	com	r24
    5e28:	90 95       	com	r25
    5e2a:	bc 01       	movw	r22, r24
    5e2c:	cd 01       	movw	r24, r26
    5e2e:	08 95       	ret

00005e30 <__prologue_saves__>:
    5e30:	2f 92       	push	r2
    5e32:	3f 92       	push	r3
    5e34:	4f 92       	push	r4
    5e36:	5f 92       	push	r5
    5e38:	6f 92       	push	r6
    5e3a:	7f 92       	push	r7
    5e3c:	8f 92       	push	r8
    5e3e:	9f 92       	push	r9
    5e40:	af 92       	push	r10
    5e42:	bf 92       	push	r11
    5e44:	cf 92       	push	r12
    5e46:	df 92       	push	r13
    5e48:	ef 92       	push	r14
    5e4a:	ff 92       	push	r15
    5e4c:	0f 93       	push	r16
    5e4e:	1f 93       	push	r17
    5e50:	cf 93       	push	r28
    5e52:	df 93       	push	r29
    5e54:	cd b7       	in	r28, 0x3d	; 61
    5e56:	de b7       	in	r29, 0x3e	; 62
    5e58:	ca 1b       	sub	r28, r26
    5e5a:	db 0b       	sbc	r29, r27
    5e5c:	0f b6       	in	r0, 0x3f	; 63
    5e5e:	f8 94       	cli
    5e60:	de bf       	out	0x3e, r29	; 62
    5e62:	0f be       	out	0x3f, r0	; 63
    5e64:	cd bf       	out	0x3d, r28	; 61
    5e66:	09 94       	ijmp

00005e68 <__epilogue_restores__>:
    5e68:	2a 88       	ldd	r2, Y+18	; 0x12
    5e6a:	39 88       	ldd	r3, Y+17	; 0x11
    5e6c:	48 88       	ldd	r4, Y+16	; 0x10
    5e6e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5e70:	6e 84       	ldd	r6, Y+14	; 0x0e
    5e72:	7d 84       	ldd	r7, Y+13	; 0x0d
    5e74:	8c 84       	ldd	r8, Y+12	; 0x0c
    5e76:	9b 84       	ldd	r9, Y+11	; 0x0b
    5e78:	aa 84       	ldd	r10, Y+10	; 0x0a
    5e7a:	b9 84       	ldd	r11, Y+9	; 0x09
    5e7c:	c8 84       	ldd	r12, Y+8	; 0x08
    5e7e:	df 80       	ldd	r13, Y+7	; 0x07
    5e80:	ee 80       	ldd	r14, Y+6	; 0x06
    5e82:	fd 80       	ldd	r15, Y+5	; 0x05
    5e84:	0c 81       	ldd	r16, Y+4	; 0x04
    5e86:	1b 81       	ldd	r17, Y+3	; 0x03
    5e88:	aa 81       	ldd	r26, Y+2	; 0x02
    5e8a:	b9 81       	ldd	r27, Y+1	; 0x01
    5e8c:	ce 0f       	add	r28, r30
    5e8e:	d1 1d       	adc	r29, r1
    5e90:	0f b6       	in	r0, 0x3f	; 63
    5e92:	f8 94       	cli
    5e94:	de bf       	out	0x3e, r29	; 62
    5e96:	0f be       	out	0x3f, r0	; 63
    5e98:	cd bf       	out	0x3d, r28	; 61
    5e9a:	ed 01       	movw	r28, r26
    5e9c:	08 95       	ret

00005e9e <_exit>:
    5e9e:	f8 94       	cli

00005ea0 <__stop_program>:
    5ea0:	ff cf       	rjmp	.-2      	; 0x5ea0 <__stop_program>
