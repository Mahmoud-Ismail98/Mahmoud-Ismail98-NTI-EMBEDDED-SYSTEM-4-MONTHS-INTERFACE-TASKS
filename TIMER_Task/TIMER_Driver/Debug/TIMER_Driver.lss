
TIMER_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002892  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  00002892  00002926  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  008000ea  008000ea  000029b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000029b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000029e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00002a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002805  00000000  00000000  00002c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d7e  00000000  00000000  00005479  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ead  00000000  00000000  000061f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007e8  00000000  00000000  000080a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001304  00000000  00000000  0000888c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000101b  00000000  00000000  00009b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000abab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__vector_1>
       8:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__vector_2>
       c:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	aa ee       	ldi	r26, 0xEA	; 234
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 31       	cpi	r26, 0x10	; 16
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 47 14 	jmp	0x288e	; 0x288e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
	'1','2','3','-',
	'c','0','=','+',
};

int main(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	
    PORT_voidInit();
      9a:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <PORT_voidInit>
	GIE_status(GIE_ENABLE);
      9e:	80 e0       	ldi	r24, 0x00	; 0
      a0:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <GIE_status>
	TIMER0_init();
      a4:	0e 94 1f 10 	call	0x203e	; 0x203e <TIMER0_init>
	LCD_vidInit();
      a8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LCD_vidInit>
	TIMER0_setcallBack(timeOut);
      ac:	80 e0       	ldi	r24, 0x00	; 0
      ae:	91 e0       	ldi	r25, 0x01	; 1
      b0:	0e 94 87 11 	call	0x230e	; 0x230e <TIMER0_setcallBack>
    while (1) 
    {
		timerTask();
      b4:	0e 94 0d 01 	call	0x21a	; 0x21a <timerTask>
    }
      b8:	fd cf       	rjmp	.-6      	; 0xb4 <main+0x22>

000000ba <alarm_count>:
}



void alarm_count(void)
{
      ba:	ef 92       	push	r14
      bc:	ff 92       	push	r15
      be:	0f 93       	push	r16
      c0:	1f 93       	push	r17
      c2:	cf 93       	push	r28
      c4:	df 93       	push	r29
      c6:	00 d0       	rcall	.+0      	; 0xc8 <alarm_count+0xe>
      c8:	00 d0       	rcall	.+0      	; 0xca <alarm_count+0x10>
      ca:	cd b7       	in	r28, 0x3d	; 61
      cc:	de b7       	in	r29, 0x3e	; 62
	LCD_vidClrDisplay();
      ce:	0e 94 9e 0c 	call	0x193c	; 0x193c <LCD_vidClrDisplay>
	LCD_vidDisplayString("Count Down");
      d2:	84 e7       	ldi	r24, 0x74	; 116
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_vidDisplayString>
	gl_u32_alarmstate = atoi(gl_u8_buff);
      da:	8b e0       	ldi	r24, 0x0B	; 11
      dc:	91 e0       	ldi	r25, 0x01	; 1
      de:	0e 94 21 14 	call	0x2842	; 0x2842 <atoi>
      e2:	09 2e       	mov	r0, r25
      e4:	00 0c       	add	r0, r0
      e6:	aa 0b       	sbc	r26, r26
      e8:	bb 0b       	sbc	r27, r27
      ea:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <gl_u32_alarmstate>
      ee:	90 93 ee 00 	sts	0x00EE, r25	; 0x8000ee <gl_u32_alarmstate+0x1>
      f2:	a0 93 ef 00 	sts	0x00EF, r26	; 0x8000ef <gl_u32_alarmstate+0x2>
      f6:	b0 93 f0 00 	sts	0x00F0, r27	; 0x8000f0 <gl_u32_alarmstate+0x3>
	u32 loc_counter   = 0;
      fa:	19 82       	std	Y+1, r1	; 0x01
      fc:	1a 82       	std	Y+2, r1	; 0x02
      fe:	1b 82       	std	Y+3, r1	; 0x03
     100:	1c 82       	std	Y+4, r1	; 0x04
	TIMER0_setTimeAndStart(1,TIME_IN_SECOND,TIMER_RUN_ASYNCH);
     102:	21 e0       	ldi	r18, 0x01	; 1
     104:	42 e0       	ldi	r20, 0x02	; 2
     106:	61 e0       	ldi	r22, 0x01	; 1
     108:	70 e0       	ldi	r23, 0x00	; 0
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	0e 94 65 10 	call	0x20ca	; 0x20ca <TIMER0_setTimeAndStart>
	while(loc_counter <= gl_u32_alarmstate)
     112:	39 c0       	rjmp	.+114    	; 0x186 <alarm_count+0xcc>
	{
		if( gl_u8_timeout == TRUE)
     114:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <__data_end>
     118:	81 30       	cpi	r24, 0x01	; 1
     11a:	a9 f5       	brne	.+106    	; 0x186 <alarm_count+0xcc>
		{
			
			LCD_vidGoToXY(3,0);
     11c:	60 e0       	ldi	r22, 0x00	; 0
     11e:	83 e0       	ldi	r24, 0x03	; 3
     120:	0e 94 aa 0b 	call	0x1754	; 0x1754 <LCD_vidGoToXY>
			LCD_vidDisplayNumber(gl_u32_alarmstate-loc_counter);
     124:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <gl_u32_alarmstate>
     128:	30 91 ee 00 	lds	r19, 0x00EE	; 0x8000ee <gl_u32_alarmstate+0x1>
     12c:	40 91 ef 00 	lds	r20, 0x00EF	; 0x8000ef <gl_u32_alarmstate+0x2>
     130:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <gl_u32_alarmstate+0x3>
     134:	89 81       	ldd	r24, Y+1	; 0x01
     136:	9a 81       	ldd	r25, Y+2	; 0x02
     138:	ab 81       	ldd	r26, Y+3	; 0x03
     13a:	bc 81       	ldd	r27, Y+4	; 0x04
     13c:	79 01       	movw	r14, r18
     13e:	8a 01       	movw	r16, r20
     140:	e8 1a       	sub	r14, r24
     142:	f9 0a       	sbc	r15, r25
     144:	0a 0b       	sbc	r16, r26
     146:	1b 0b       	sbc	r17, r27
     148:	d8 01       	movw	r26, r16
     14a:	c7 01       	movw	r24, r14
     14c:	bc 01       	movw	r22, r24
     14e:	cd 01       	movw	r24, r26
     150:	0e 94 00 0c 	call	0x1800	; 0x1800 <LCD_vidDisplayNumber>
			LCD_vidDisplayString("            ");
     154:	8f e7       	ldi	r24, 0x7F	; 127
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_vidDisplayString>
			loc_counter++;
     15c:	89 81       	ldd	r24, Y+1	; 0x01
     15e:	9a 81       	ldd	r25, Y+2	; 0x02
     160:	ab 81       	ldd	r26, Y+3	; 0x03
     162:	bc 81       	ldd	r27, Y+4	; 0x04
     164:	01 96       	adiw	r24, 0x01	; 1
     166:	a1 1d       	adc	r26, r1
     168:	b1 1d       	adc	r27, r1
     16a:	89 83       	std	Y+1, r24	; 0x01
     16c:	9a 83       	std	Y+2, r25	; 0x02
     16e:	ab 83       	std	Y+3, r26	; 0x03
     170:	bc 83       	std	Y+4, r27	; 0x04
			gl_u8_timeout = FALSE;
     172:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__data_end>
			TIMER0_setTimeAndStart(1,TIME_IN_SECOND,TIMER_RUN_ASYNCH);
     176:	21 e0       	ldi	r18, 0x01	; 1
     178:	42 e0       	ldi	r20, 0x02	; 2
     17a:	61 e0       	ldi	r22, 0x01	; 1
     17c:	70 e0       	ldi	r23, 0x00	; 0
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 65 10 	call	0x20ca	; 0x20ca <TIMER0_setTimeAndStart>
	LCD_vidClrDisplay();
	LCD_vidDisplayString("Count Down");
	gl_u32_alarmstate = atoi(gl_u8_buff);
	u32 loc_counter   = 0;
	TIMER0_setTimeAndStart(1,TIME_IN_SECOND,TIMER_RUN_ASYNCH);
	while(loc_counter <= gl_u32_alarmstate)
     186:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <gl_u32_alarmstate>
     18a:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <gl_u32_alarmstate+0x1>
     18e:	a0 91 ef 00 	lds	r26, 0x00EF	; 0x8000ef <gl_u32_alarmstate+0x2>
     192:	b0 91 f0 00 	lds	r27, 0x00F0	; 0x8000f0 <gl_u32_alarmstate+0x3>
     196:	29 81       	ldd	r18, Y+1	; 0x01
     198:	3a 81       	ldd	r19, Y+2	; 0x02
     19a:	4b 81       	ldd	r20, Y+3	; 0x03
     19c:	5c 81       	ldd	r21, Y+4	; 0x04
     19e:	82 17       	cp	r24, r18
     1a0:	93 07       	cpc	r25, r19
     1a2:	a4 07       	cpc	r26, r20
     1a4:	b5 07       	cpc	r27, r21
     1a6:	08 f0       	brcs	.+2      	; 0x1aa <alarm_count+0xf0>
     1a8:	b5 cf       	rjmp	.-150    	; 0x114 <alarm_count+0x5a>
			
		}		
		
	}
	
	LCD_vidClrDisplay();
     1aa:	0e 94 9e 0c 	call	0x193c	; 0x193c <LCD_vidClrDisplay>
	DIO_enu_WriteChannel(DIO_PORTC_PIN6,DIO_PIN_LEVEL_HIGH);
     1ae:	61 e0       	ldi	r22, 0x01	; 1
     1b0:	86 e1       	ldi	r24, 0x16	; 22
     1b2:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
	LCD_vidDisplayString("TIME OUT ");
     1b6:	8c e8       	ldi	r24, 0x8C	; 140
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_vidDisplayString>
	gl_u8_timeout = FALSE;
     1be:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__data_end>
	TIMER0_setTimeAndStart(3,TIME_IN_SECOND,TIMER_RUN_ASYNCH);
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	42 e0       	ldi	r20, 0x02	; 2
     1c6:	63 e0       	ldi	r22, 0x03	; 3
     1c8:	70 e0       	ldi	r23, 0x00	; 0
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 65 10 	call	0x20ca	; 0x20ca <TIMER0_setTimeAndStart>
	while(gl_u8_timeout == FALSE);
     1d2:	00 00       	nop
     1d4:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <__data_end>
     1d8:	88 23       	and	r24, r24
     1da:	e1 f3       	breq	.-8      	; 0x1d4 <alarm_count+0x11a>
	DIO_enu_WriteChannel(DIO_PORTC_PIN6,DIO_PIN_LEVEL_LOW);
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	86 e1       	ldi	r24, 0x16	; 22
     1e0:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
	gl_u8_timeout = FALSE;
     1e4:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__data_end>
	
}
     1e8:	00 00       	nop
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
     1f8:	0f 91       	pop	r16
     1fa:	ff 90       	pop	r15
     1fc:	ef 90       	pop	r14
     1fe:	08 95       	ret

00000200 <timeOut>:


void timeOut(void)
{
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
	gl_u8_timeout = TRUE;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__data_end>
	TIMER0_stop();
     20e:	0e 94 42 10 	call	0x2084	; 0x2084 <TIMER0_stop>
}
     212:	00 00       	nop
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	08 95       	ret

0000021a <timerTask>:


void timerTask(void)
{
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	1f 92       	push	r1
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
	KEYPAD_enu_PressedKey_t loc_enum_pressedKey = KEY_NOTHING;
     224:	80 e1       	ldi	r24, 0x10	; 16
     226:	89 83       	std	Y+1, r24	; 0x01
	switch(gl_u8_app_state)
     228:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <gl_u8_app_state>
     22c:	88 2f       	mov	r24, r24
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	91 05       	cpc	r25, r1
     234:	09 f4       	brne	.+2      	; 0x238 <timerTask+0x1e>
     236:	67 c0       	rjmp	.+206    	; 0x306 <timerTask+0xec>
     238:	82 30       	cpi	r24, 0x02	; 2
     23a:	91 05       	cpc	r25, r1
     23c:	1c f4       	brge	.+6      	; 0x244 <timerTask+0x2a>
     23e:	89 2b       	or	r24, r25
     240:	49 f0       	breq	.+18     	; 0x254 <timerTask+0x3a>
			clock_start();
			gl_u8_lock_state =FALSE;
			gl_u8_app_state = APP_READ_CHOICE;
			break;
		}
}
     242:	b8 c0       	rjmp	.+368    	; 0x3b4 <timerTask+0x19a>


void timerTask(void)
{
	KEYPAD_enu_PressedKey_t loc_enum_pressedKey = KEY_NOTHING;
	switch(gl_u8_app_state)
     244:	82 30       	cpi	r24, 0x02	; 2
     246:	91 05       	cpc	r25, r1
     248:	09 f4       	brne	.+2      	; 0x24c <timerTask+0x32>
     24a:	a1 c0       	rjmp	.+322    	; 0x38e <timerTask+0x174>
     24c:	03 97       	sbiw	r24, 0x03	; 3
     24e:	09 f4       	brne	.+2      	; 0x252 <timerTask+0x38>
     250:	97 c0       	rjmp	.+302    	; 0x380 <timerTask+0x166>
			clock_start();
			gl_u8_lock_state =FALSE;
			gl_u8_app_state = APP_READ_CHOICE;
			break;
		}
}
     252:	b0 c0       	rjmp	.+352    	; 0x3b4 <timerTask+0x19a>
	KEYPAD_enu_PressedKey_t loc_enum_pressedKey = KEY_NOTHING;
	switch(gl_u8_app_state)
		{
			case APP_READ_CHOICE:
			{
				if(gl_u8_lock_state == FALSE)
     254:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <gl_u8_lock_state>
     258:	88 23       	and	r24, r24
     25a:	c9 f4       	brne	.+50     	; 0x28e <timerTask+0x74>
				{
				  LCD_vidClrDisplay();
     25c:	0e 94 9e 0c 	call	0x193c	; 0x193c <LCD_vidClrDisplay>
				  LCD_vidDisplayString("Enter Your Choice");
     260:	86 e9       	ldi	r24, 0x96	; 150
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_vidDisplayString>
				  LCD_vidGoToXY(1,0);
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <LCD_vidGoToXY>
				  LCD_vidDisplayString("1-Alarm");
     270:	88 ea       	ldi	r24, 0xA8	; 168
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_vidDisplayString>
				  LCD_vidGoToXY(2,0);
     278:	60 e0       	ldi	r22, 0x00	; 0
     27a:	82 e0       	ldi	r24, 0x02	; 2
     27c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <LCD_vidGoToXY>
				  LCD_vidDisplayString("2-Clock");
     280:	80 eb       	ldi	r24, 0xB0	; 176
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_vidDisplayString>
				  gl_u8_lock_state = TRUE ;	
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <gl_u8_lock_state>
				}
				
				loc_enum_pressedKey = KEYPAD_GetKey();
     28e:	0e 94 11 03 	call	0x622	; 0x622 <KEYPAD_GetKey>
     292:	89 83       	std	Y+1, r24	; 0x01
				if( loc_enum_pressedKey != KEY_NOTHING)
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	80 31       	cpi	r24, 0x10	; 16
     298:	09 f4       	brne	.+2      	; 0x29c <timerTask+0x82>
     29a:	89 c0       	rjmp	.+274    	; 0x3ae <timerTask+0x194>
				{
					LCD_vidGoToXY(3,0);
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	83 e0       	ldi	r24, 0x03	; 3
     2a0:	0e 94 aa 0b 	call	0x1754	; 0x1754 <LCD_vidGoToXY>
					if(loc_enum_pressedKey == 8)
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	88 30       	cpi	r24, 0x08	; 8
     2a8:	99 f4       	brne	.+38     	; 0x2d0 <timerTask+0xb6>
					{
						LCD_vidDisplayCharacter(gl_u8_char_array[loc_enum_pressedKey]);
     2aa:	89 81       	ldd	r24, Y+1	; 0x01
     2ac:	88 2f       	mov	r24, r24
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	80 5a       	subi	r24, 0xA0	; 160
     2b2:	9f 4f       	sbci	r25, 0xFF	; 255
     2b4:	fc 01       	movw	r30, r24
     2b6:	80 81       	ld	r24, Z
     2b8:	0e 94 84 08 	call	0x1108	; 0x1108 <LCD_vidDisplayCharacter>
						LCD_vidDisplayString("    ");
     2bc:	88 eb       	ldi	r24, 0xB8	; 184
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_vidDisplayString>
						gl_u8_app_state  = ALARM_CHOICE;
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <gl_u8_app_state>
						gl_u8_lock_state = FALSE;
     2ca:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <gl_u8_lock_state>
				}
				else
				{
					// do nothing
				}
				break;
     2ce:	6f c0       	rjmp	.+222    	; 0x3ae <timerTask+0x194>
						LCD_vidDisplayString("    ");
						gl_u8_app_state  = ALARM_CHOICE;
						gl_u8_lock_state = FALSE;
						
					}
					else if (loc_enum_pressedKey == 9)
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	89 30       	cpi	r24, 0x09	; 9
     2d4:	99 f4       	brne	.+38     	; 0x2fc <timerTask+0xe2>
					{
						LCD_vidDisplayCharacter(gl_u8_char_array[loc_enum_pressedKey]);
     2d6:	89 81       	ldd	r24, Y+1	; 0x01
     2d8:	88 2f       	mov	r24, r24
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	80 5a       	subi	r24, 0xA0	; 160
     2de:	9f 4f       	sbci	r25, 0xFF	; 255
     2e0:	fc 01       	movw	r30, r24
     2e2:	80 81       	ld	r24, Z
     2e4:	0e 94 84 08 	call	0x1108	; 0x1108 <LCD_vidDisplayCharacter>
						LCD_vidDisplayString("    ");
     2e8:	88 eb       	ldi	r24, 0xB8	; 184
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_vidDisplayString>
						gl_u8_app_state  = CLOCK_CHOICE;
     2f0:	82 e0       	ldi	r24, 0x02	; 2
     2f2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <gl_u8_app_state>
						gl_u8_lock_state = FALSE;
     2f6:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <gl_u8_lock_state>
				}
				else
				{
					// do nothing
				}
				break;
     2fa:	59 c0       	rjmp	.+178    	; 0x3ae <timerTask+0x194>
						gl_u8_lock_state = FALSE;
					}
					else
					{
						
						LCD_vidDisplayString("ERROR");
     2fc:	8d eb       	ldi	r24, 0xBD	; 189
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_vidDisplayString>
				}
				else
				{
					// do nothing
				}
				break;
     304:	54 c0       	rjmp	.+168    	; 0x3ae <timerTask+0x194>
			}
			case ALARM_CHOICE:
			{
				if(gl_u8_lock_state == FALSE)
     306:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <gl_u8_lock_state>
     30a:	88 23       	and	r24, r24
     30c:	69 f4       	brne	.+26     	; 0x328 <timerTask+0x10e>
				{
					LCD_vidClrDisplay();
     30e:	0e 94 9e 0c 	call	0x193c	; 0x193c <LCD_vidClrDisplay>
					LCD_vidDisplayString("Enter Time In second");
     312:	83 ec       	ldi	r24, 0xC3	; 195
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_vidDisplayString>
					LCD_vidGoToXY(2,0);
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	82 e0       	ldi	r24, 0x02	; 2
     31e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <LCD_vidGoToXY>
					gl_u8_lock_state = TRUE;
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <gl_u8_lock_state>
				}
					loc_enum_pressedKey = KEYPAD_GetKey();
     328:	0e 94 11 03 	call	0x622	; 0x622 <KEYPAD_GetKey>
     32c:	89 83       	std	Y+1, r24	; 0x01
					if(loc_enum_pressedKey == 14)
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	8e 30       	cpi	r24, 0x0E	; 14
     332:	31 f4       	brne	.+12     	; 0x340 <timerTask+0x126>
					{
						gl_u8_app_state = ALARM_COUNT;
     334:	83 e0       	ldi	r24, 0x03	; 3
     336:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <gl_u8_app_state>
						gl_u8_lock_state = FALSE;
     33a:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <gl_u8_lock_state>
					{
						LCD_vidDisplayCharacter(gl_u8_char_array[loc_enum_pressedKey]);
						gl_u8_buff[gl_u8_buffCount++]=gl_u8_char_array[loc_enum_pressedKey];
					}
				
				break;
     33e:	39 c0       	rjmp	.+114    	; 0x3b2 <timerTask+0x198>
					if(loc_enum_pressedKey == 14)
					{
						gl_u8_app_state = ALARM_COUNT;
						gl_u8_lock_state = FALSE;
					}
					else if ( loc_enum_pressedKey == KEY_NOTHING)
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	80 31       	cpi	r24, 0x10	; 16
     344:	b1 f1       	breq	.+108    	; 0x3b2 <timerTask+0x198>
					{
						
					}
					else
					{
						LCD_vidDisplayCharacter(gl_u8_char_array[loc_enum_pressedKey]);
     346:	89 81       	ldd	r24, Y+1	; 0x01
     348:	88 2f       	mov	r24, r24
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	80 5a       	subi	r24, 0xA0	; 160
     34e:	9f 4f       	sbci	r25, 0xFF	; 255
     350:	fc 01       	movw	r30, r24
     352:	80 81       	ld	r24, Z
     354:	0e 94 84 08 	call	0x1108	; 0x1108 <LCD_vidDisplayCharacter>
						gl_u8_buff[gl_u8_buffCount++]=gl_u8_char_array[loc_enum_pressedKey];
     358:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <gl_u8_buffCount>
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	98 0f       	add	r25, r24
     360:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <gl_u8_buffCount>
     364:	88 2f       	mov	r24, r24
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	29 81       	ldd	r18, Y+1	; 0x01
     36a:	22 2f       	mov	r18, r18
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	20 5a       	subi	r18, 0xA0	; 160
     370:	3f 4f       	sbci	r19, 0xFF	; 255
     372:	f9 01       	movw	r30, r18
     374:	20 81       	ld	r18, Z
     376:	85 5f       	subi	r24, 0xF5	; 245
     378:	9e 4f       	sbci	r25, 0xFE	; 254
     37a:	fc 01       	movw	r30, r24
     37c:	20 83       	st	Z, r18
					}
				
				break;
     37e:	19 c0       	rjmp	.+50     	; 0x3b2 <timerTask+0x198>
			}
			
			case ALARM_COUNT:
			alarm_count();
     380:	0e 94 5d 00 	call	0xba	; 0xba <alarm_count>
			gl_u8_app_state = APP_READ_CHOICE;
     384:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <gl_u8_app_state>
			gl_u8_lock_state =FALSE;
     388:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <gl_u8_lock_state>
			break;
     38c:	13 c0       	rjmp	.+38     	; 0x3b4 <timerTask+0x19a>
			
			case CLOCK_CHOICE:
			if(gl_u8_lock_state == FALSE)
     38e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <gl_u8_lock_state>
     392:	88 23       	and	r24, r24
     394:	29 f4       	brne	.+10     	; 0x3a0 <timerTask+0x186>
			{
				LCD_vidClrDisplay();
     396:	0e 94 9e 0c 	call	0x193c	; 0x193c <LCD_vidClrDisplay>
				gl_u8_lock_state =TRUE;
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <gl_u8_lock_state>
			}
			clock_start();
     3a0:	0e 94 df 01 	call	0x3be	; 0x3be <clock_start>
			gl_u8_lock_state =FALSE;
     3a4:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <gl_u8_lock_state>
			gl_u8_app_state = APP_READ_CHOICE;
     3a8:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <gl_u8_app_state>
			break;
     3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <timerTask+0x19a>
				}
				else
				{
					// do nothing
				}
				break;
     3ae:	00 00       	nop
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <timerTask+0x19a>
					{
						LCD_vidDisplayCharacter(gl_u8_char_array[loc_enum_pressedKey]);
						gl_u8_buff[gl_u8_buffCount++]=gl_u8_char_array[loc_enum_pressedKey];
					}
				
				break;
     3b2:	00 00       	nop
			clock_start();
			gl_u8_lock_state =FALSE;
			gl_u8_app_state = APP_READ_CHOICE;
			break;
		}
}
     3b4:	00 00       	nop
     3b6:	0f 90       	pop	r0
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <clock_start>:

void clock_start(void)
{
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	00 d0       	rcall	.+0      	; 0x3c4 <clock_start+0x6>
     3c4:	00 d0       	rcall	.+0      	; 0x3c6 <clock_start+0x8>
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
	u8 loc_lock = 0;
     3ca:	19 82       	std	Y+1, r1	; 0x01
	u8 sec=0,min=0,h =0;
     3cc:	1a 82       	std	Y+2, r1	; 0x02
     3ce:	1b 82       	std	Y+3, r1	; 0x03
     3d0:	1c 82       	std	Y+4, r1	; 0x04
	LCD_vidDisplayString("HH:MM:SS");
     3d2:	88 ed       	ldi	r24, 0xD8	; 216
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_vidDisplayString>
	LCD_vidGoToXY(1,0);
     3da:	60 e0       	ldi	r22, 0x00	; 0
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	0e 94 aa 0b 	call	0x1754	; 0x1754 <LCD_vidGoToXY>
	LCD_vidDisplayString("  :  :  ");
     3e2:	81 ee       	ldi	r24, 0xE1	; 225
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_vidDisplayString>
	
	while(KEYPAD_GetKey() != 12)
     3ea:	78 c0       	rjmp	.+240    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
	{
		if(gl_u8_timeout == FALSE && loc_lock == 0)
     3ec:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <__data_end>
     3f0:	88 23       	and	r24, r24
     3f2:	09 f0       	breq	.+2      	; 0x3f6 <clock_start+0x38>
     3f4:	5a c0       	rjmp	.+180    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	88 23       	and	r24, r24
     3fa:	09 f0       	breq	.+2      	; 0x3fe <clock_start+0x40>
     3fc:	56 c0       	rjmp	.+172    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
		{
			LCD_vidGoToXY(1,0);
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	0e 94 aa 0b 	call	0x1754	; 0x1754 <LCD_vidGoToXY>
			if(h<10)
     406:	8c 81       	ldd	r24, Y+4	; 0x04
     408:	8a 30       	cpi	r24, 0x0A	; 10
     40a:	48 f4       	brcc	.+18     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
			{
				if(h==0)
     40c:	8c 81       	ldd	r24, Y+4	; 0x04
     40e:	88 23       	and	r24, r24
     410:	19 f4       	brne	.+6      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
				LCD_vidDisplayCharacter('0');
     412:	80 e3       	ldi	r24, 0x30	; 48
     414:	0e 94 84 08 	call	0x1108	; 0x1108 <LCD_vidDisplayCharacter>
				LCD_vidDisplayCharacter('0');
     418:	80 e3       	ldi	r24, 0x30	; 48
     41a:	0e 94 84 08 	call	0x1108	; 0x1108 <LCD_vidDisplayCharacter>
			}
			LCD_vidDisplayNumber(h);
     41e:	8c 81       	ldd	r24, Y+4	; 0x04
     420:	88 2f       	mov	r24, r24
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	a0 e0       	ldi	r26, 0x00	; 0
     426:	b0 e0       	ldi	r27, 0x00	; 0
     428:	bc 01       	movw	r22, r24
     42a:	cd 01       	movw	r24, r26
     42c:	0e 94 00 0c 	call	0x1800	; 0x1800 <LCD_vidDisplayNumber>
			LCD_vidGoToXY(1,3);
     430:	63 e0       	ldi	r22, 0x03	; 3
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	0e 94 aa 0b 	call	0x1754	; 0x1754 <LCD_vidGoToXY>
			if(min<10)
     438:	8b 81       	ldd	r24, Y+3	; 0x03
     43a:	8a 30       	cpi	r24, 0x0A	; 10
     43c:	48 f4       	brcc	.+18     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
			{
				if(min==0)
     43e:	8b 81       	ldd	r24, Y+3	; 0x03
     440:	88 23       	and	r24, r24
     442:	19 f4       	brne	.+6      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
				LCD_vidDisplayCharacter('0');
     444:	80 e3       	ldi	r24, 0x30	; 48
     446:	0e 94 84 08 	call	0x1108	; 0x1108 <LCD_vidDisplayCharacter>
				LCD_vidDisplayCharacter('0');
     44a:	80 e3       	ldi	r24, 0x30	; 48
     44c:	0e 94 84 08 	call	0x1108	; 0x1108 <LCD_vidDisplayCharacter>
			}
			LCD_vidDisplayNumber(min);
     450:	8b 81       	ldd	r24, Y+3	; 0x03
     452:	88 2f       	mov	r24, r24
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	a0 e0       	ldi	r26, 0x00	; 0
     458:	b0 e0       	ldi	r27, 0x00	; 0
     45a:	bc 01       	movw	r22, r24
     45c:	cd 01       	movw	r24, r26
     45e:	0e 94 00 0c 	call	0x1800	; 0x1800 <LCD_vidDisplayNumber>
			LCD_vidGoToXY(1,6);
     462:	66 e0       	ldi	r22, 0x06	; 6
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	0e 94 aa 0b 	call	0x1754	; 0x1754 <LCD_vidGoToXY>
			if(sec<10)
     46a:	8a 81       	ldd	r24, Y+2	; 0x02
     46c:	8a 30       	cpi	r24, 0x0A	; 10
     46e:	48 f4       	brcc	.+18     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
			{
				if(sec==0)
     470:	8a 81       	ldd	r24, Y+2	; 0x02
     472:	88 23       	and	r24, r24
     474:	19 f4       	brne	.+6      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
				LCD_vidDisplayCharacter('0');
     476:	80 e3       	ldi	r24, 0x30	; 48
     478:	0e 94 84 08 	call	0x1108	; 0x1108 <LCD_vidDisplayCharacter>
				LCD_vidDisplayCharacter('0');
     47c:	80 e3       	ldi	r24, 0x30	; 48
     47e:	0e 94 84 08 	call	0x1108	; 0x1108 <LCD_vidDisplayCharacter>
			}
			LCD_vidDisplayNumber(sec);
     482:	8a 81       	ldd	r24, Y+2	; 0x02
     484:	88 2f       	mov	r24, r24
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	a0 e0       	ldi	r26, 0x00	; 0
     48a:	b0 e0       	ldi	r27, 0x00	; 0
     48c:	bc 01       	movw	r22, r24
     48e:	cd 01       	movw	r24, r26
     490:	0e 94 00 0c 	call	0x1800	; 0x1800 <LCD_vidDisplayNumber>
			loc_lock = 1 ;
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	89 83       	std	Y+1, r24	; 0x01
			TIMER0_setTimeAndStart(1,TIME_IN_SECOND,TIMER_RUN_ASYNCH);
     498:	21 e0       	ldi	r18, 0x01	; 1
     49a:	42 e0       	ldi	r20, 0x02	; 2
     49c:	61 e0       	ldi	r22, 0x01	; 1
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 65 10 	call	0x20ca	; 0x20ca <TIMER0_setTimeAndStart>
     4a8:	19 c0       	rjmp	.+50     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
		}
		else if (gl_u8_timeout == TRUE)
     4aa:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <__data_end>
     4ae:	81 30       	cpi	r24, 0x01	; 1
     4b0:	a9 f4       	brne	.+42     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
		{
			gl_u8_timeout = FALSE;
     4b2:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__data_end>
			loc_lock = 0;
     4b6:	19 82       	std	Y+1, r1	; 0x01
			sec++;
     4b8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ba:	8f 5f       	subi	r24, 0xFF	; 255
     4bc:	8a 83       	std	Y+2, r24	; 0x02
			if(sec == 60)
     4be:	8a 81       	ldd	r24, Y+2	; 0x02
     4c0:	8c 33       	cpi	r24, 0x3C	; 60
     4c2:	29 f4       	brne	.+10     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
			{
				sec = 0;
     4c4:	1a 82       	std	Y+2, r1	; 0x02
				min++;
     4c6:	8b 81       	ldd	r24, Y+3	; 0x03
     4c8:	8f 5f       	subi	r24, 0xFF	; 255
     4ca:	8b 83       	std	Y+3, r24	; 0x03
     4cc:	07 c0       	rjmp	.+14     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
			}
			else if (min == 60)
     4ce:	8b 81       	ldd	r24, Y+3	; 0x03
     4d0:	8c 33       	cpi	r24, 0x3C	; 60
     4d2:	21 f4       	brne	.+8      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
			{
				min = 0;
     4d4:	1b 82       	std	Y+3, r1	; 0x03
				h++;
     4d6:	8c 81       	ldd	r24, Y+4	; 0x04
     4d8:	8f 5f       	subi	r24, 0xFF	; 255
     4da:	8c 83       	std	Y+4, r24	; 0x04
	u8 sec=0,min=0,h =0;
	LCD_vidDisplayString("HH:MM:SS");
	LCD_vidGoToXY(1,0);
	LCD_vidDisplayString("  :  :  ");
	
	while(KEYPAD_GetKey() != 12)
     4dc:	0e 94 11 03 	call	0x622	; 0x622 <KEYPAD_GetKey>
     4e0:	8c 30       	cpi	r24, 0x0C	; 12
     4e2:	09 f0       	breq	.+2      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
     4e4:	83 cf       	rjmp	.-250    	; 0x3ec <clock_start+0x2e>
			}
			
		}
	}
	
     4e6:	00 00       	nop
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <KEYPAD_writeRows>:
#define COL_2_PATTERN    0x0B
#define COL_3_PATTERN    0x07


static void KEYPAD_writeRows(u8 arg_u8_pattern)
{
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	1f 92       	push	r1
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	89 83       	std	Y+1, r24	; 0x01
	DIO_enu_WriteChannel(KEYPAD_ROW_0_PIN,GET_BIT(arg_u8_pattern,0));
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	81 70       	andi	r24, 0x01	; 1
     506:	68 2f       	mov	r22, r24
     508:	85 e1       	ldi	r24, 0x15	; 21
     50a:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
	DIO_enu_WriteChannel(KEYPAD_ROW_1_PIN,GET_BIT(arg_u8_pattern,1));
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	86 95       	lsr	r24
     512:	81 70       	andi	r24, 0x01	; 1
     514:	68 2f       	mov	r22, r24
     516:	84 e1       	ldi	r24, 0x14	; 20
     518:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
	DIO_enu_WriteChannel(KEYPAD_ROW_2_PIN,GET_BIT(arg_u8_pattern,2));
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	86 95       	lsr	r24
     520:	86 95       	lsr	r24
     522:	81 70       	andi	r24, 0x01	; 1
     524:	68 2f       	mov	r22, r24
     526:	83 e1       	ldi	r24, 0x13	; 19
     528:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
	DIO_enu_WriteChannel(KEYPAD_ROW_3_PIN,GET_BIT(arg_u8_pattern,3));
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	86 95       	lsr	r24
     530:	86 95       	lsr	r24
     532:	86 95       	lsr	r24
     534:	81 70       	andi	r24, 0x01	; 1
     536:	68 2f       	mov	r22, r24
     538:	82 e1       	ldi	r24, 0x12	; 18
     53a:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
}
     53e:	00 00       	nop
     540:	0f 90       	pop	r0
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <KEYPAD_readCols>:
static void KEYPAD_readCols(u8 *arg_u8_col)
{
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	00 d0       	rcall	.+0      	; 0x54e <KEYPAD_readCols+0x6>
     54e:	1f 92       	push	r1
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	9b 83       	std	Y+3, r25	; 0x03
     556:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_u8_temp = FALSE;
     558:	19 82       	std	Y+1, r1	; 0x01
	*arg_u8_col     = FALSE;
     55a:	8a 81       	ldd	r24, Y+2	; 0x02
     55c:	9b 81       	ldd	r25, Y+3	; 0x03
     55e:	fc 01       	movw	r30, r24
     560:	10 82       	st	Z, r1
	
	DIO_enu_ReadChannel(KEYPAD_COL_0_PIN,&loc_u8_temp);
     562:	ce 01       	movw	r24, r28
     564:	01 96       	adiw	r24, 0x01	; 1
     566:	bc 01       	movw	r22, r24
     568:	8f e1       	ldi	r24, 0x1F	; 31
     56a:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <DIO_enu_ReadChannel>
	*arg_u8_col |= (loc_u8_temp << 0);
     56e:	8a 81       	ldd	r24, Y+2	; 0x02
     570:	9b 81       	ldd	r25, Y+3	; 0x03
     572:	fc 01       	movw	r30, r24
     574:	90 81       	ld	r25, Z
     576:	89 81       	ldd	r24, Y+1	; 0x01
     578:	29 2f       	mov	r18, r25
     57a:	28 2b       	or	r18, r24
     57c:	8a 81       	ldd	r24, Y+2	; 0x02
     57e:	9b 81       	ldd	r25, Y+3	; 0x03
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
	
	DIO_enu_ReadChannel(KEYPAD_COL_1_PIN,&loc_u8_temp);
     584:	ce 01       	movw	r24, r28
     586:	01 96       	adiw	r24, 0x01	; 1
     588:	bc 01       	movw	r22, r24
     58a:	8e e1       	ldi	r24, 0x1E	; 30
     58c:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <DIO_enu_ReadChannel>
	*arg_u8_col |= loc_u8_temp << 1;
     590:	8a 81       	ldd	r24, Y+2	; 0x02
     592:	9b 81       	ldd	r25, Y+3	; 0x03
     594:	fc 01       	movw	r30, r24
     596:	80 81       	ld	r24, Z
     598:	28 2f       	mov	r18, r24
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	88 2f       	mov	r24, r24
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	88 0f       	add	r24, r24
     5a2:	99 1f       	adc	r25, r25
     5a4:	82 2b       	or	r24, r18
     5a6:	28 2f       	mov	r18, r24
     5a8:	8a 81       	ldd	r24, Y+2	; 0x02
     5aa:	9b 81       	ldd	r25, Y+3	; 0x03
     5ac:	fc 01       	movw	r30, r24
     5ae:	20 83       	st	Z, r18
	
	DIO_enu_ReadChannel(KEYPAD_COL_2_PIN,&loc_u8_temp);
     5b0:	ce 01       	movw	r24, r28
     5b2:	01 96       	adiw	r24, 0x01	; 1
     5b4:	bc 01       	movw	r22, r24
     5b6:	8d e1       	ldi	r24, 0x1D	; 29
     5b8:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <DIO_enu_ReadChannel>
	*arg_u8_col |= loc_u8_temp << 2;
     5bc:	8a 81       	ldd	r24, Y+2	; 0x02
     5be:	9b 81       	ldd	r25, Y+3	; 0x03
     5c0:	fc 01       	movw	r30, r24
     5c2:	80 81       	ld	r24, Z
     5c4:	28 2f       	mov	r18, r24
     5c6:	89 81       	ldd	r24, Y+1	; 0x01
     5c8:	88 2f       	mov	r24, r24
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	88 0f       	add	r24, r24
     5ce:	99 1f       	adc	r25, r25
     5d0:	88 0f       	add	r24, r24
     5d2:	99 1f       	adc	r25, r25
     5d4:	82 2b       	or	r24, r18
     5d6:	28 2f       	mov	r18, r24
     5d8:	8a 81       	ldd	r24, Y+2	; 0x02
     5da:	9b 81       	ldd	r25, Y+3	; 0x03
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18
	
	DIO_enu_ReadChannel(KEYPAD_COL_3_PIN,&loc_u8_temp);
     5e0:	ce 01       	movw	r24, r28
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	bc 01       	movw	r22, r24
     5e6:	8b e1       	ldi	r24, 0x1B	; 27
     5e8:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <DIO_enu_ReadChannel>
	*arg_u8_col |= loc_u8_temp << 3;
     5ec:	8a 81       	ldd	r24, Y+2	; 0x02
     5ee:	9b 81       	ldd	r25, Y+3	; 0x03
     5f0:	fc 01       	movw	r30, r24
     5f2:	80 81       	ld	r24, Z
     5f4:	28 2f       	mov	r18, r24
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
     5f8:	88 2f       	mov	r24, r24
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	88 0f       	add	r24, r24
     5fe:	99 1f       	adc	r25, r25
     600:	88 0f       	add	r24, r24
     602:	99 1f       	adc	r25, r25
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	82 2b       	or	r24, r18
     60a:	28 2f       	mov	r18, r24
     60c:	8a 81       	ldd	r24, Y+2	; 0x02
     60e:	9b 81       	ldd	r25, Y+3	; 0x03
     610:	fc 01       	movw	r30, r24
     612:	20 83       	st	Z, r18
}
     614:	00 00       	nop
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <KEYPAD_GetKey>:
KEYPAD_enu_PressedKey_t KEYPAD_GetKey(void)
{
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	00 d0       	rcall	.+0      	; 0x628 <KEYPAD_GetKey+0x6>
     628:	1f 92       	push	r1
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
	KEYPAD_enu_PressedKey_t loc_enu_returnKey = KEY_NOTHING;
     62e:	80 e1       	ldi	r24, 0x10	; 16
     630:	89 83       	std	Y+1, r24	; 0x01
	u8                      loc_u8_itrator    = FALSE;
     632:	1a 82       	std	Y+2, r1	; 0x02
	u8                      loc_u8_colSelect  = FALSE;
     634:	1b 82       	std	Y+3, r1	; 0x03
	
	for(;loc_u8_itrator<ROWS_NUMBER;loc_u8_itrator++)
     636:	42 c0       	rjmp	.+132    	; 0x6bc <KEYPAD_GetKey+0x9a>
	{
		KEYPAD_writeRows(TGL_NO_ASSIGN(DEFAULT_PATTERN,loc_u8_itrator));
     638:	8a 81       	ldd	r24, Y+2	; 0x02
     63a:	28 2f       	mov	r18, r24
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	02 c0       	rjmp	.+4      	; 0x648 <KEYPAD_GetKey+0x26>
     644:	88 0f       	add	r24, r24
     646:	99 1f       	adc	r25, r25
     648:	2a 95       	dec	r18
     64a:	e2 f7       	brpl	.-8      	; 0x644 <KEYPAD_GetKey+0x22>
     64c:	98 2f       	mov	r25, r24
     64e:	8f e0       	ldi	r24, 0x0F	; 15
     650:	89 27       	eor	r24, r25
     652:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <KEYPAD_writeRows>
		KEYPAD_readCols(&loc_u8_colSelect);
     656:	ce 01       	movw	r24, r28
     658:	03 96       	adiw	r24, 0x03	; 3
     65a:	0e 94 a4 02 	call	0x548	; 0x548 <KEYPAD_readCols>
		
		switch(loc_u8_colSelect)
     65e:	8b 81       	ldd	r24, Y+3	; 0x03
     660:	88 2f       	mov	r24, r24
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	8b 30       	cpi	r24, 0x0B	; 11
     666:	91 05       	cpc	r25, r1
     668:	b9 f0       	breq	.+46     	; 0x698 <KEYPAD_GetKey+0x76>
     66a:	8c 30       	cpi	r24, 0x0C	; 12
     66c:	91 05       	cpc	r25, r1
     66e:	1c f4       	brge	.+6      	; 0x676 <KEYPAD_GetKey+0x54>
     670:	07 97       	sbiw	r24, 0x07	; 7
     672:	c1 f0       	breq	.+48     	; 0x6a4 <KEYPAD_GetKey+0x82>
		{
			case COL_0_PATTERN : loc_enu_returnKey = (loc_u8_itrator*4);break;
			case COL_1_PATTERN : loc_enu_returnKey = (loc_u8_itrator*4)+1;break;
			case COL_2_PATTERN : loc_enu_returnKey = (loc_u8_itrator*4)+2;break;
			case COL_3_PATTERN : loc_enu_returnKey = (loc_u8_itrator*4)+3;break;
			default:break;
     674:	1d c0       	rjmp	.+58     	; 0x6b0 <KEYPAD_GetKey+0x8e>
	for(;loc_u8_itrator<ROWS_NUMBER;loc_u8_itrator++)
	{
		KEYPAD_writeRows(TGL_NO_ASSIGN(DEFAULT_PATTERN,loc_u8_itrator));
		KEYPAD_readCols(&loc_u8_colSelect);
		
		switch(loc_u8_colSelect)
     676:	8d 30       	cpi	r24, 0x0D	; 13
     678:	91 05       	cpc	r25, r1
     67a:	41 f0       	breq	.+16     	; 0x68c <KEYPAD_GetKey+0x6a>
     67c:	0e 97       	sbiw	r24, 0x0e	; 14
     67e:	09 f0       	breq	.+2      	; 0x682 <KEYPAD_GetKey+0x60>
		{
			case COL_0_PATTERN : loc_enu_returnKey = (loc_u8_itrator*4);break;
			case COL_1_PATTERN : loc_enu_returnKey = (loc_u8_itrator*4)+1;break;
			case COL_2_PATTERN : loc_enu_returnKey = (loc_u8_itrator*4)+2;break;
			case COL_3_PATTERN : loc_enu_returnKey = (loc_u8_itrator*4)+3;break;
			default:break;
     680:	17 c0       	rjmp	.+46     	; 0x6b0 <KEYPAD_GetKey+0x8e>
		KEYPAD_writeRows(TGL_NO_ASSIGN(DEFAULT_PATTERN,loc_u8_itrator));
		KEYPAD_readCols(&loc_u8_colSelect);
		
		switch(loc_u8_colSelect)
		{
			case COL_0_PATTERN : loc_enu_returnKey = (loc_u8_itrator*4);break;
     682:	8a 81       	ldd	r24, Y+2	; 0x02
     684:	88 0f       	add	r24, r24
     686:	88 0f       	add	r24, r24
     688:	89 83       	std	Y+1, r24	; 0x01
     68a:	12 c0       	rjmp	.+36     	; 0x6b0 <KEYPAD_GetKey+0x8e>
			case COL_1_PATTERN : loc_enu_returnKey = (loc_u8_itrator*4)+1;break;
     68c:	8a 81       	ldd	r24, Y+2	; 0x02
     68e:	88 0f       	add	r24, r24
     690:	88 0f       	add	r24, r24
     692:	8f 5f       	subi	r24, 0xFF	; 255
     694:	89 83       	std	Y+1, r24	; 0x01
     696:	0c c0       	rjmp	.+24     	; 0x6b0 <KEYPAD_GetKey+0x8e>
			case COL_2_PATTERN : loc_enu_returnKey = (loc_u8_itrator*4)+2;break;
     698:	8a 81       	ldd	r24, Y+2	; 0x02
     69a:	88 0f       	add	r24, r24
     69c:	88 0f       	add	r24, r24
     69e:	8e 5f       	subi	r24, 0xFE	; 254
     6a0:	89 83       	std	Y+1, r24	; 0x01
     6a2:	06 c0       	rjmp	.+12     	; 0x6b0 <KEYPAD_GetKey+0x8e>
			case COL_3_PATTERN : loc_enu_returnKey = (loc_u8_itrator*4)+3;break;
     6a4:	8a 81       	ldd	r24, Y+2	; 0x02
     6a6:	88 0f       	add	r24, r24
     6a8:	88 0f       	add	r24, r24
     6aa:	8d 5f       	subi	r24, 0xFD	; 253
     6ac:	89 83       	std	Y+1, r24	; 0x01
     6ae:	00 00       	nop
			default:break;
		}
		if(loc_enu_returnKey == KEY_NOTHING)
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	80 31       	cpi	r24, 0x10	; 16
     6b4:	41 f4       	brne	.+16     	; 0x6c6 <KEYPAD_GetKey+0xa4>
{
	KEYPAD_enu_PressedKey_t loc_enu_returnKey = KEY_NOTHING;
	u8                      loc_u8_itrator    = FALSE;
	u8                      loc_u8_colSelect  = FALSE;
	
	for(;loc_u8_itrator<ROWS_NUMBER;loc_u8_itrator++)
     6b6:	8a 81       	ldd	r24, Y+2	; 0x02
     6b8:	8f 5f       	subi	r24, 0xFF	; 255
     6ba:	8a 83       	std	Y+2, r24	; 0x02
     6bc:	8a 81       	ldd	r24, Y+2	; 0x02
     6be:	84 30       	cpi	r24, 0x04	; 4
     6c0:	08 f4       	brcc	.+2      	; 0x6c4 <KEYPAD_GetKey+0xa2>
     6c2:	ba cf       	rjmp	.-140    	; 0x638 <KEYPAD_GetKey+0x16>
     6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <KEYPAD_GetKey+0xb0>
			//  do Nothing
		}
		else
		{
			// break loop since key is pressed
			break; 
     6c6:	00 00       	nop
		
		
		
	}
	
	while(loc_u8_colSelect != 0x0F)
     6c8:	04 c0       	rjmp	.+8      	; 0x6d2 <KEYPAD_GetKey+0xb0>
	{
		KEYPAD_readCols(&loc_u8_colSelect);
     6ca:	ce 01       	movw	r24, r28
     6cc:	03 96       	adiw	r24, 0x03	; 3
     6ce:	0e 94 a4 02 	call	0x548	; 0x548 <KEYPAD_readCols>
		
		
		
	}
	
	while(loc_u8_colSelect != 0x0F)
     6d2:	8b 81       	ldd	r24, Y+3	; 0x03
     6d4:	8f 30       	cpi	r24, 0x0F	; 15
     6d6:	c9 f7       	brne	.-14     	; 0x6ca <KEYPAD_GetKey+0xa8>
	{
		KEYPAD_readCols(&loc_u8_colSelect);
	};
	return loc_enu_returnKey;
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
}
     6da:	0f 90       	pop	r0
     6dc:	0f 90       	pop	r0
     6de:	0f 90       	pop	r0
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <LCD_vidInit>:
			LCD_vidDisplayCharacter(arg_u8_data_array[loc_u8_itrator]);
		}
		
		LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD);
	}
}
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	cd b7       	in	r28, 0x3d	; 61
     6ec:	de b7       	in	r29, 0x3e	; 62
     6ee:	e8 97       	sbiw	r28, 0x38	; 56
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	a8 e4       	ldi	r26, 0x48	; 72
     700:	b2 e4       	ldi	r27, 0x42	; 66
     702:	89 83       	std	Y+1, r24	; 0x01
     704:	9a 83       	std	Y+2, r25	; 0x02
     706:	ab 83       	std	Y+3, r26	; 0x03
     708:	bc 83       	std	Y+4, r27	; 0x04
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	4a e7       	ldi	r20, 0x7A	; 122
     710:	55 e4       	ldi	r21, 0x45	; 69
     712:	69 81       	ldd	r22, Y+1	; 0x01
     714:	7a 81       	ldd	r23, Y+2	; 0x02
     716:	8b 81       	ldd	r24, Y+3	; 0x03
     718:	9c 81       	ldd	r25, Y+4	; 0x04
     71a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
     71e:	dc 01       	movw	r26, r24
     720:	cb 01       	movw	r24, r22
     722:	8f a7       	std	Y+47, r24	; 0x2f
     724:	98 ab       	std	Y+48, r25	; 0x30
     726:	a9 ab       	std	Y+49, r26	; 0x31
     728:	ba ab       	std	Y+50, r27	; 0x32
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	40 e8       	ldi	r20, 0x80	; 128
     730:	5f e3       	ldi	r21, 0x3F	; 63
     732:	6f a5       	ldd	r22, Y+47	; 0x2f
     734:	78 a9       	ldd	r23, Y+48	; 0x30
     736:	89 a9       	ldd	r24, Y+49	; 0x31
     738:	9a a9       	ldd	r25, Y+50	; 0x32
     73a:	0e 94 0b 12 	call	0x2416	; 0x2416 <__cmpsf2>
     73e:	88 23       	and	r24, r24
     740:	2c f4       	brge	.+10     	; 0x74c <LCD_vidInit+0x66>
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	9c ab       	std	Y+52, r25	; 0x34
     748:	8b ab       	std	Y+51, r24	; 0x33
     74a:	3f c0       	rjmp	.+126    	; 0x7ca <LCD_vidInit+0xe4>
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	3f ef       	ldi	r19, 0xFF	; 255
     750:	4f e7       	ldi	r20, 0x7F	; 127
     752:	57 e4       	ldi	r21, 0x47	; 71
     754:	6f a5       	ldd	r22, Y+47	; 0x2f
     756:	78 a9       	ldd	r23, Y+48	; 0x30
     758:	89 a9       	ldd	r24, Y+49	; 0x31
     75a:	9a a9       	ldd	r25, Y+50	; 0x32
     75c:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__gesf2>
     760:	18 16       	cp	r1, r24
     762:	4c f5       	brge	.+82     	; 0x7b6 <LCD_vidInit+0xd0>
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	40 e2       	ldi	r20, 0x20	; 32
     76a:	51 e4       	ldi	r21, 0x41	; 65
     76c:	69 81       	ldd	r22, Y+1	; 0x01
     76e:	7a 81       	ldd	r23, Y+2	; 0x02
     770:	8b 81       	ldd	r24, Y+3	; 0x03
     772:	9c 81       	ldd	r25, Y+4	; 0x04
     774:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
     778:	dc 01       	movw	r26, r24
     77a:	cb 01       	movw	r24, r22
     77c:	bc 01       	movw	r22, r24
     77e:	cd 01       	movw	r24, r26
     780:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
     784:	dc 01       	movw	r26, r24
     786:	cb 01       	movw	r24, r22
     788:	9c ab       	std	Y+52, r25	; 0x34
     78a:	8b ab       	std	Y+51, r24	; 0x33
     78c:	0f c0       	rjmp	.+30     	; 0x7ac <LCD_vidInit+0xc6>
     78e:	80 e9       	ldi	r24, 0x90	; 144
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	9e ab       	std	Y+54, r25	; 0x36
     794:	8d ab       	std	Y+53, r24	; 0x35
     796:	8d a9       	ldd	r24, Y+53	; 0x35
     798:	9e a9       	ldd	r25, Y+54	; 0x36
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	f1 f7       	brne	.-4      	; 0x79a <LCD_vidInit+0xb4>
     79e:	9e ab       	std	Y+54, r25	; 0x36
     7a0:	8d ab       	std	Y+53, r24	; 0x35
     7a2:	8b a9       	ldd	r24, Y+51	; 0x33
     7a4:	9c a9       	ldd	r25, Y+52	; 0x34
     7a6:	01 97       	sbiw	r24, 0x01	; 1
     7a8:	9c ab       	std	Y+52, r25	; 0x34
     7aa:	8b ab       	std	Y+51, r24	; 0x33
     7ac:	8b a9       	ldd	r24, Y+51	; 0x33
     7ae:	9c a9       	ldd	r25, Y+52	; 0x34
     7b0:	89 2b       	or	r24, r25
     7b2:	69 f7       	brne	.-38     	; 0x78e <LCD_vidInit+0xa8>
     7b4:	14 c0       	rjmp	.+40     	; 0x7de <LCD_vidInit+0xf8>
     7b6:	6f a5       	ldd	r22, Y+47	; 0x2f
     7b8:	78 a9       	ldd	r23, Y+48	; 0x30
     7ba:	89 a9       	ldd	r24, Y+49	; 0x31
     7bc:	9a a9       	ldd	r25, Y+50	; 0x32
     7be:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
     7c2:	dc 01       	movw	r26, r24
     7c4:	cb 01       	movw	r24, r22
     7c6:	9c ab       	std	Y+52, r25	; 0x34
     7c8:	8b ab       	std	Y+51, r24	; 0x33
     7ca:	8b a9       	ldd	r24, Y+51	; 0x33
     7cc:	9c a9       	ldd	r25, Y+52	; 0x34
     7ce:	98 af       	std	Y+56, r25	; 0x38
     7d0:	8f ab       	std	Y+55, r24	; 0x37
     7d2:	8f a9       	ldd	r24, Y+55	; 0x37
     7d4:	98 ad       	ldd	r25, Y+56	; 0x38
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	f1 f7       	brne	.-4      	; 0x7d6 <LCD_vidInit+0xf0>
     7da:	98 af       	std	Y+56, r25	; 0x38
     7dc:	8f ab       	std	Y+55, r24	; 0x37
     7de:	82 e0       	ldi	r24, 0x02	; 2
     7e0:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD_vidSendCommand>
     7e4:	88 e2       	ldi	r24, 0x28	; 40
     7e6:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD_vidSendCommand>
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD_vidSendCommand>
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	a0 e8       	ldi	r26, 0x80	; 128
     7f6:	b0 e4       	ldi	r27, 0x40	; 64
     7f8:	8d 83       	std	Y+5, r24	; 0x05
     7fa:	9e 83       	std	Y+6, r25	; 0x06
     7fc:	af 83       	std	Y+7, r26	; 0x07
     7fe:	b8 87       	std	Y+8, r27	; 0x08
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	4a e7       	ldi	r20, 0x7A	; 122
     806:	55 e4       	ldi	r21, 0x45	; 69
     808:	6d 81       	ldd	r22, Y+5	; 0x05
     80a:	7e 81       	ldd	r23, Y+6	; 0x06
     80c:	8f 81       	ldd	r24, Y+7	; 0x07
     80e:	98 85       	ldd	r25, Y+8	; 0x08
     810:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
     814:	dc 01       	movw	r26, r24
     816:	cb 01       	movw	r24, r22
     818:	8d a3       	std	Y+37, r24	; 0x25
     81a:	9e a3       	std	Y+38, r25	; 0x26
     81c:	af a3       	std	Y+39, r26	; 0x27
     81e:	b8 a7       	std	Y+40, r27	; 0x28
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	40 e8       	ldi	r20, 0x80	; 128
     826:	5f e3       	ldi	r21, 0x3F	; 63
     828:	6d a1       	ldd	r22, Y+37	; 0x25
     82a:	7e a1       	ldd	r23, Y+38	; 0x26
     82c:	8f a1       	ldd	r24, Y+39	; 0x27
     82e:	98 a5       	ldd	r25, Y+40	; 0x28
     830:	0e 94 0b 12 	call	0x2416	; 0x2416 <__cmpsf2>
     834:	88 23       	and	r24, r24
     836:	2c f4       	brge	.+10     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	9a a7       	std	Y+42, r25	; 0x2a
     83e:	89 a7       	std	Y+41, r24	; 0x29
     840:	3f c0       	rjmp	.+126    	; 0x8c0 <__stack+0x61>
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	3f ef       	ldi	r19, 0xFF	; 255
     846:	4f e7       	ldi	r20, 0x7F	; 127
     848:	57 e4       	ldi	r21, 0x47	; 71
     84a:	6d a1       	ldd	r22, Y+37	; 0x25
     84c:	7e a1       	ldd	r23, Y+38	; 0x26
     84e:	8f a1       	ldd	r24, Y+39	; 0x27
     850:	98 a5       	ldd	r25, Y+40	; 0x28
     852:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__gesf2>
     856:	18 16       	cp	r1, r24
     858:	4c f5       	brge	.+82     	; 0x8ac <__stack+0x4d>
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e2       	ldi	r20, 0x20	; 32
     860:	51 e4       	ldi	r21, 0x41	; 65
     862:	6d 81       	ldd	r22, Y+5	; 0x05
     864:	7e 81       	ldd	r23, Y+6	; 0x06
     866:	8f 81       	ldd	r24, Y+7	; 0x07
     868:	98 85       	ldd	r25, Y+8	; 0x08
     86a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
     86e:	dc 01       	movw	r26, r24
     870:	cb 01       	movw	r24, r22
     872:	bc 01       	movw	r22, r24
     874:	cd 01       	movw	r24, r26
     876:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
     87a:	dc 01       	movw	r26, r24
     87c:	cb 01       	movw	r24, r22
     87e:	9a a7       	std	Y+42, r25	; 0x2a
     880:	89 a7       	std	Y+41, r24	; 0x29
     882:	0f c0       	rjmp	.+30     	; 0x8a2 <__stack+0x43>
     884:	80 e9       	ldi	r24, 0x90	; 144
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	9c a7       	std	Y+44, r25	; 0x2c
     88a:	8b a7       	std	Y+43, r24	; 0x2b
     88c:	8b a5       	ldd	r24, Y+43	; 0x2b
     88e:	9c a5       	ldd	r25, Y+44	; 0x2c
     890:	01 97       	sbiw	r24, 0x01	; 1
     892:	f1 f7       	brne	.-4      	; 0x890 <__stack+0x31>
     894:	9c a7       	std	Y+44, r25	; 0x2c
     896:	8b a7       	std	Y+43, r24	; 0x2b
     898:	89 a5       	ldd	r24, Y+41	; 0x29
     89a:	9a a5       	ldd	r25, Y+42	; 0x2a
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	9a a7       	std	Y+42, r25	; 0x2a
     8a0:	89 a7       	std	Y+41, r24	; 0x29
     8a2:	89 a5       	ldd	r24, Y+41	; 0x29
     8a4:	9a a5       	ldd	r25, Y+42	; 0x2a
     8a6:	89 2b       	or	r24, r25
     8a8:	69 f7       	brne	.-38     	; 0x884 <__stack+0x25>
     8aa:	14 c0       	rjmp	.+40     	; 0x8d4 <__stack+0x75>
     8ac:	6d a1       	ldd	r22, Y+37	; 0x25
     8ae:	7e a1       	ldd	r23, Y+38	; 0x26
     8b0:	8f a1       	ldd	r24, Y+39	; 0x27
     8b2:	98 a5       	ldd	r25, Y+40	; 0x28
     8b4:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
     8b8:	dc 01       	movw	r26, r24
     8ba:	cb 01       	movw	r24, r22
     8bc:	9a a7       	std	Y+42, r25	; 0x2a
     8be:	89 a7       	std	Y+41, r24	; 0x29
     8c0:	89 a5       	ldd	r24, Y+41	; 0x29
     8c2:	9a a5       	ldd	r25, Y+42	; 0x2a
     8c4:	9e a7       	std	Y+46, r25	; 0x2e
     8c6:	8d a7       	std	Y+45, r24	; 0x2d
     8c8:	8d a5       	ldd	r24, Y+45	; 0x2d
     8ca:	9e a5       	ldd	r25, Y+46	; 0x2e
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	f1 f7       	brne	.-4      	; 0x8cc <__stack+0x6d>
     8d0:	9e a7       	std	Y+46, r25	; 0x2e
     8d2:	8d a7       	std	Y+45, r24	; 0x2d
     8d4:	86 e0       	ldi	r24, 0x06	; 6
     8d6:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD_vidSendCommand>
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	a0 e8       	ldi	r26, 0x80	; 128
     8e0:	bf e3       	ldi	r27, 0x3F	; 63
     8e2:	89 87       	std	Y+9, r24	; 0x09
     8e4:	9a 87       	std	Y+10, r25	; 0x0a
     8e6:	ab 87       	std	Y+11, r26	; 0x0b
     8e8:	bc 87       	std	Y+12, r27	; 0x0c
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	4a e7       	ldi	r20, 0x7A	; 122
     8f0:	55 e4       	ldi	r21, 0x45	; 69
     8f2:	69 85       	ldd	r22, Y+9	; 0x09
     8f4:	7a 85       	ldd	r23, Y+10	; 0x0a
     8f6:	8b 85       	ldd	r24, Y+11	; 0x0b
     8f8:	9c 85       	ldd	r25, Y+12	; 0x0c
     8fa:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
     8fe:	dc 01       	movw	r26, r24
     900:	cb 01       	movw	r24, r22
     902:	8b 8f       	std	Y+27, r24	; 0x1b
     904:	9c 8f       	std	Y+28, r25	; 0x1c
     906:	ad 8f       	std	Y+29, r26	; 0x1d
     908:	be 8f       	std	Y+30, r27	; 0x1e
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e8       	ldi	r20, 0x80	; 128
     910:	5f e3       	ldi	r21, 0x3F	; 63
     912:	6b 8d       	ldd	r22, Y+27	; 0x1b
     914:	7c 8d       	ldd	r23, Y+28	; 0x1c
     916:	8d 8d       	ldd	r24, Y+29	; 0x1d
     918:	9e 8d       	ldd	r25, Y+30	; 0x1e
     91a:	0e 94 0b 12 	call	0x2416	; 0x2416 <__cmpsf2>
     91e:	88 23       	and	r24, r24
     920:	2c f4       	brge	.+10     	; 0x92c <__stack+0xcd>
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	98 a3       	std	Y+32, r25	; 0x20
     928:	8f 8f       	std	Y+31, r24	; 0x1f
     92a:	3f c0       	rjmp	.+126    	; 0x9aa <__stack+0x14b>
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	3f ef       	ldi	r19, 0xFF	; 255
     930:	4f e7       	ldi	r20, 0x7F	; 127
     932:	57 e4       	ldi	r21, 0x47	; 71
     934:	6b 8d       	ldd	r22, Y+27	; 0x1b
     936:	7c 8d       	ldd	r23, Y+28	; 0x1c
     938:	8d 8d       	ldd	r24, Y+29	; 0x1d
     93a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     93c:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__gesf2>
     940:	18 16       	cp	r1, r24
     942:	4c f5       	brge	.+82     	; 0x996 <__stack+0x137>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	40 e2       	ldi	r20, 0x20	; 32
     94a:	51 e4       	ldi	r21, 0x41	; 65
     94c:	69 85       	ldd	r22, Y+9	; 0x09
     94e:	7a 85       	ldd	r23, Y+10	; 0x0a
     950:	8b 85       	ldd	r24, Y+11	; 0x0b
     952:	9c 85       	ldd	r25, Y+12	; 0x0c
     954:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
     958:	dc 01       	movw	r26, r24
     95a:	cb 01       	movw	r24, r22
     95c:	bc 01       	movw	r22, r24
     95e:	cd 01       	movw	r24, r26
     960:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
     964:	dc 01       	movw	r26, r24
     966:	cb 01       	movw	r24, r22
     968:	98 a3       	std	Y+32, r25	; 0x20
     96a:	8f 8f       	std	Y+31, r24	; 0x1f
     96c:	0f c0       	rjmp	.+30     	; 0x98c <__stack+0x12d>
     96e:	80 e9       	ldi	r24, 0x90	; 144
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	9a a3       	std	Y+34, r25	; 0x22
     974:	89 a3       	std	Y+33, r24	; 0x21
     976:	89 a1       	ldd	r24, Y+33	; 0x21
     978:	9a a1       	ldd	r25, Y+34	; 0x22
     97a:	01 97       	sbiw	r24, 0x01	; 1
     97c:	f1 f7       	brne	.-4      	; 0x97a <__stack+0x11b>
     97e:	9a a3       	std	Y+34, r25	; 0x22
     980:	89 a3       	std	Y+33, r24	; 0x21
     982:	8f 8d       	ldd	r24, Y+31	; 0x1f
     984:	98 a1       	ldd	r25, Y+32	; 0x20
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	98 a3       	std	Y+32, r25	; 0x20
     98a:	8f 8f       	std	Y+31, r24	; 0x1f
     98c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     98e:	98 a1       	ldd	r25, Y+32	; 0x20
     990:	89 2b       	or	r24, r25
     992:	69 f7       	brne	.-38     	; 0x96e <__stack+0x10f>
     994:	14 c0       	rjmp	.+40     	; 0x9be <__stack+0x15f>
     996:	6b 8d       	ldd	r22, Y+27	; 0x1b
     998:	7c 8d       	ldd	r23, Y+28	; 0x1c
     99a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     99c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     99e:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
     9a2:	dc 01       	movw	r26, r24
     9a4:	cb 01       	movw	r24, r22
     9a6:	98 a3       	std	Y+32, r25	; 0x20
     9a8:	8f 8f       	std	Y+31, r24	; 0x1f
     9aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     9ac:	98 a1       	ldd	r25, Y+32	; 0x20
     9ae:	9c a3       	std	Y+36, r25	; 0x24
     9b0:	8b a3       	std	Y+35, r24	; 0x23
     9b2:	8b a1       	ldd	r24, Y+35	; 0x23
     9b4:	9c a1       	ldd	r25, Y+36	; 0x24
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	f1 f7       	brne	.-4      	; 0x9b6 <__stack+0x157>
     9ba:	9c a3       	std	Y+36, r25	; 0x24
     9bc:	8b a3       	std	Y+35, r24	; 0x23
     9be:	8c e0       	ldi	r24, 0x0C	; 12
     9c0:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD_vidSendCommand>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	a0 e8       	ldi	r26, 0x80	; 128
     9ca:	bf e3       	ldi	r27, 0x3F	; 63
     9cc:	8d 87       	std	Y+13, r24	; 0x0d
     9ce:	9e 87       	std	Y+14, r25	; 0x0e
     9d0:	af 87       	std	Y+15, r26	; 0x0f
     9d2:	b8 8b       	std	Y+16, r27	; 0x10
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	4a e7       	ldi	r20, 0x7A	; 122
     9da:	55 e4       	ldi	r21, 0x45	; 69
     9dc:	6d 85       	ldd	r22, Y+13	; 0x0d
     9de:	7e 85       	ldd	r23, Y+14	; 0x0e
     9e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9e2:	98 89       	ldd	r25, Y+16	; 0x10
     9e4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
     9e8:	dc 01       	movw	r26, r24
     9ea:	cb 01       	movw	r24, r22
     9ec:	89 8b       	std	Y+17, r24	; 0x11
     9ee:	9a 8b       	std	Y+18, r25	; 0x12
     9f0:	ab 8b       	std	Y+19, r26	; 0x13
     9f2:	bc 8b       	std	Y+20, r27	; 0x14
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	40 e8       	ldi	r20, 0x80	; 128
     9fa:	5f e3       	ldi	r21, 0x3F	; 63
     9fc:	69 89       	ldd	r22, Y+17	; 0x11
     9fe:	7a 89       	ldd	r23, Y+18	; 0x12
     a00:	8b 89       	ldd	r24, Y+19	; 0x13
     a02:	9c 89       	ldd	r25, Y+20	; 0x14
     a04:	0e 94 0b 12 	call	0x2416	; 0x2416 <__cmpsf2>
     a08:	88 23       	and	r24, r24
     a0a:	2c f4       	brge	.+10     	; 0xa16 <__stack+0x1b7>
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	9e 8b       	std	Y+22, r25	; 0x16
     a12:	8d 8b       	std	Y+21, r24	; 0x15
     a14:	3f c0       	rjmp	.+126    	; 0xa94 <__stack+0x235>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	3f ef       	ldi	r19, 0xFF	; 255
     a1a:	4f e7       	ldi	r20, 0x7F	; 127
     a1c:	57 e4       	ldi	r21, 0x47	; 71
     a1e:	69 89       	ldd	r22, Y+17	; 0x11
     a20:	7a 89       	ldd	r23, Y+18	; 0x12
     a22:	8b 89       	ldd	r24, Y+19	; 0x13
     a24:	9c 89       	ldd	r25, Y+20	; 0x14
     a26:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__gesf2>
     a2a:	18 16       	cp	r1, r24
     a2c:	4c f5       	brge	.+82     	; 0xa80 <__stack+0x221>
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	40 e2       	ldi	r20, 0x20	; 32
     a34:	51 e4       	ldi	r21, 0x41	; 65
     a36:	6d 85       	ldd	r22, Y+13	; 0x0d
     a38:	7e 85       	ldd	r23, Y+14	; 0x0e
     a3a:	8f 85       	ldd	r24, Y+15	; 0x0f
     a3c:	98 89       	ldd	r25, Y+16	; 0x10
     a3e:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	bc 01       	movw	r22, r24
     a48:	cd 01       	movw	r24, r26
     a4a:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
     a4e:	dc 01       	movw	r26, r24
     a50:	cb 01       	movw	r24, r22
     a52:	9e 8b       	std	Y+22, r25	; 0x16
     a54:	8d 8b       	std	Y+21, r24	; 0x15
     a56:	0f c0       	rjmp	.+30     	; 0xa76 <__stack+0x217>
     a58:	80 e9       	ldi	r24, 0x90	; 144
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	98 8f       	std	Y+24, r25	; 0x18
     a5e:	8f 8b       	std	Y+23, r24	; 0x17
     a60:	8f 89       	ldd	r24, Y+23	; 0x17
     a62:	98 8d       	ldd	r25, Y+24	; 0x18
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <__stack+0x205>
     a68:	98 8f       	std	Y+24, r25	; 0x18
     a6a:	8f 8b       	std	Y+23, r24	; 0x17
     a6c:	8d 89       	ldd	r24, Y+21	; 0x15
     a6e:	9e 89       	ldd	r25, Y+22	; 0x16
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	9e 8b       	std	Y+22, r25	; 0x16
     a74:	8d 8b       	std	Y+21, r24	; 0x15
     a76:	8d 89       	ldd	r24, Y+21	; 0x15
     a78:	9e 89       	ldd	r25, Y+22	; 0x16
     a7a:	89 2b       	or	r24, r25
     a7c:	69 f7       	brne	.-38     	; 0xa58 <__stack+0x1f9>
     a7e:	14 c0       	rjmp	.+40     	; 0xaa8 <__stack+0x249>
     a80:	69 89       	ldd	r22, Y+17	; 0x11
     a82:	7a 89       	ldd	r23, Y+18	; 0x12
     a84:	8b 89       	ldd	r24, Y+19	; 0x13
     a86:	9c 89       	ldd	r25, Y+20	; 0x14
     a88:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
     a8c:	dc 01       	movw	r26, r24
     a8e:	cb 01       	movw	r24, r22
     a90:	9e 8b       	std	Y+22, r25	; 0x16
     a92:	8d 8b       	std	Y+21, r24	; 0x15
     a94:	8d 89       	ldd	r24, Y+21	; 0x15
     a96:	9e 89       	ldd	r25, Y+22	; 0x16
     a98:	9a 8f       	std	Y+26, r25	; 0x1a
     a9a:	89 8f       	std	Y+25, r24	; 0x19
     a9c:	89 8d       	ldd	r24, Y+25	; 0x19
     a9e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     aa0:	01 97       	sbiw	r24, 0x01	; 1
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <__stack+0x241>
     aa4:	9a 8f       	std	Y+26, r25	; 0x1a
     aa6:	89 8f       	std	Y+25, r24	; 0x19
     aa8:	00 00       	nop
     aaa:	e8 96       	adiw	r28, 0x38	; 56
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	cd bf       	out	0x3d, r28	; 61
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	08 95       	ret

00000abc <LCD_vidSendCommand>:
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
     ac8:	cd 54       	subi	r28, 0x4D	; 77
     aca:	d1 09       	sbc	r29, r1
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	de bf       	out	0x3e, r29	; 62
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	cd bf       	out	0x3d, r28	; 61
     ad6:	9e 01       	movw	r18, r28
     ad8:	23 5b       	subi	r18, 0xB3	; 179
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	f9 01       	movw	r30, r18
     ade:	80 83       	st	Z, r24
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	83 e0       	ldi	r24, 0x03	; 3
     ae4:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	87 e0       	ldi	r24, 0x07	; 7
     aec:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
     af0:	1a 82       	std	Y+2, r1	; 0x02
     af2:	ce 01       	movw	r24, r28
     af4:	83 5b       	subi	r24, 0xB3	; 179
     af6:	9f 4f       	sbci	r25, 0xFF	; 255
     af8:	fc 01       	movw	r30, r24
     afa:	80 81       	ld	r24, Z
     afc:	82 95       	swap	r24
     afe:	8f 70       	andi	r24, 0x0F	; 15
     b00:	8a 83       	std	Y+2, r24	; 0x02
     b02:	19 82       	std	Y+1, r1	; 0x01
     b04:	1a c0       	rjmp	.+52     	; 0xb3a <LCD_vidSendCommand+0x7e>
     b06:	8a 81       	ldd	r24, Y+2	; 0x02
     b08:	88 2f       	mov	r24, r24
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	29 81       	ldd	r18, Y+1	; 0x01
     b0e:	22 2f       	mov	r18, r18
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <LCD_vidSendCommand+0x5c>
     b14:	95 95       	asr	r25
     b16:	87 95       	ror	r24
     b18:	2a 95       	dec	r18
     b1a:	e2 f7       	brpl	.-8      	; 0xb14 <LCD_vidSendCommand+0x58>
     b1c:	28 2f       	mov	r18, r24
     b1e:	21 70       	andi	r18, 0x01	; 1
     b20:	89 81       	ldd	r24, Y+1	; 0x01
     b22:	88 2f       	mov	r24, r24
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	80 59       	subi	r24, 0x90	; 144
     b28:	9f 4f       	sbci	r25, 0xFF	; 255
     b2a:	fc 01       	movw	r30, r24
     b2c:	80 81       	ld	r24, Z
     b2e:	62 2f       	mov	r22, r18
     b30:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	8f 5f       	subi	r24, 0xFF	; 255
     b38:	89 83       	std	Y+1, r24	; 0x01
     b3a:	89 81       	ldd	r24, Y+1	; 0x01
     b3c:	84 30       	cpi	r24, 0x04	; 4
     b3e:	18 f3       	brcs	.-58     	; 0xb06 <LCD_vidSendCommand+0x4a>
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	82 e0       	ldi	r24, 0x02	; 2
     b44:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	a0 e8       	ldi	r26, 0x80	; 128
     b4e:	bf e3       	ldi	r27, 0x3F	; 63
     b50:	8f 83       	std	Y+7, r24	; 0x07
     b52:	98 87       	std	Y+8, r25	; 0x08
     b54:	a9 87       	std	Y+9, r26	; 0x09
     b56:	ba 87       	std	Y+10, r27	; 0x0a
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	4a e7       	ldi	r20, 0x7A	; 122
     b5e:	55 e4       	ldi	r21, 0x45	; 69
     b60:	6f 81       	ldd	r22, Y+7	; 0x07
     b62:	78 85       	ldd	r23, Y+8	; 0x08
     b64:	89 85       	ldd	r24, Y+9	; 0x09
     b66:	9a 85       	ldd	r25, Y+10	; 0x0a
     b68:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
     b6c:	dc 01       	movw	r26, r24
     b6e:	cb 01       	movw	r24, r22
     b70:	8f a7       	std	Y+47, r24	; 0x2f
     b72:	98 ab       	std	Y+48, r25	; 0x30
     b74:	a9 ab       	std	Y+49, r26	; 0x31
     b76:	ba ab       	std	Y+50, r27	; 0x32
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e8       	ldi	r20, 0x80	; 128
     b7e:	5f e3       	ldi	r21, 0x3F	; 63
     b80:	6f a5       	ldd	r22, Y+47	; 0x2f
     b82:	78 a9       	ldd	r23, Y+48	; 0x30
     b84:	89 a9       	ldd	r24, Y+49	; 0x31
     b86:	9a a9       	ldd	r25, Y+50	; 0x32
     b88:	0e 94 0b 12 	call	0x2416	; 0x2416 <__cmpsf2>
     b8c:	88 23       	and	r24, r24
     b8e:	2c f4       	brge	.+10     	; 0xb9a <LCD_vidSendCommand+0xde>
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	9c ab       	std	Y+52, r25	; 0x34
     b96:	8b ab       	std	Y+51, r24	; 0x33
     b98:	3f c0       	rjmp	.+126    	; 0xc18 <LCD_vidSendCommand+0x15c>
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	3f ef       	ldi	r19, 0xFF	; 255
     b9e:	4f e7       	ldi	r20, 0x7F	; 127
     ba0:	57 e4       	ldi	r21, 0x47	; 71
     ba2:	6f a5       	ldd	r22, Y+47	; 0x2f
     ba4:	78 a9       	ldd	r23, Y+48	; 0x30
     ba6:	89 a9       	ldd	r24, Y+49	; 0x31
     ba8:	9a a9       	ldd	r25, Y+50	; 0x32
     baa:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__gesf2>
     bae:	18 16       	cp	r1, r24
     bb0:	4c f5       	brge	.+82     	; 0xc04 <LCD_vidSendCommand+0x148>
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e2       	ldi	r20, 0x20	; 32
     bb8:	51 e4       	ldi	r21, 0x41	; 65
     bba:	6f 81       	ldd	r22, Y+7	; 0x07
     bbc:	78 85       	ldd	r23, Y+8	; 0x08
     bbe:	89 85       	ldd	r24, Y+9	; 0x09
     bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc2:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	bc 01       	movw	r22, r24
     bcc:	cd 01       	movw	r24, r26
     bce:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	9c ab       	std	Y+52, r25	; 0x34
     bd8:	8b ab       	std	Y+51, r24	; 0x33
     bda:	0f c0       	rjmp	.+30     	; 0xbfa <LCD_vidSendCommand+0x13e>
     bdc:	80 e9       	ldi	r24, 0x90	; 144
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	9e ab       	std	Y+54, r25	; 0x36
     be2:	8d ab       	std	Y+53, r24	; 0x35
     be4:	8d a9       	ldd	r24, Y+53	; 0x35
     be6:	9e a9       	ldd	r25, Y+54	; 0x36
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <LCD_vidSendCommand+0x12c>
     bec:	9e ab       	std	Y+54, r25	; 0x36
     bee:	8d ab       	std	Y+53, r24	; 0x35
     bf0:	8b a9       	ldd	r24, Y+51	; 0x33
     bf2:	9c a9       	ldd	r25, Y+52	; 0x34
     bf4:	01 97       	sbiw	r24, 0x01	; 1
     bf6:	9c ab       	std	Y+52, r25	; 0x34
     bf8:	8b ab       	std	Y+51, r24	; 0x33
     bfa:	8b a9       	ldd	r24, Y+51	; 0x33
     bfc:	9c a9       	ldd	r25, Y+52	; 0x34
     bfe:	89 2b       	or	r24, r25
     c00:	69 f7       	brne	.-38     	; 0xbdc <LCD_vidSendCommand+0x120>
     c02:	14 c0       	rjmp	.+40     	; 0xc2c <LCD_vidSendCommand+0x170>
     c04:	6f a5       	ldd	r22, Y+47	; 0x2f
     c06:	78 a9       	ldd	r23, Y+48	; 0x30
     c08:	89 a9       	ldd	r24, Y+49	; 0x31
     c0a:	9a a9       	ldd	r25, Y+50	; 0x32
     c0c:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	9c ab       	std	Y+52, r25	; 0x34
     c16:	8b ab       	std	Y+51, r24	; 0x33
     c18:	8b a9       	ldd	r24, Y+51	; 0x33
     c1a:	9c a9       	ldd	r25, Y+52	; 0x34
     c1c:	98 af       	std	Y+56, r25	; 0x38
     c1e:	8f ab       	std	Y+55, r24	; 0x37
     c20:	8f a9       	ldd	r24, Y+55	; 0x37
     c22:	98 ad       	ldd	r25, Y+56	; 0x38
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	f1 f7       	brne	.-4      	; 0xc24 <LCD_vidSendCommand+0x168>
     c28:	98 af       	std	Y+56, r25	; 0x38
     c2a:	8f ab       	std	Y+55, r24	; 0x37
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	a8 e4       	ldi	r26, 0x48	; 72
     c3a:	b3 e4       	ldi	r27, 0x43	; 67
     c3c:	8f 87       	std	Y+15, r24	; 0x0f
     c3e:	98 8b       	std	Y+16, r25	; 0x10
     c40:	a9 8b       	std	Y+17, r26	; 0x11
     c42:	ba 8b       	std	Y+18, r27	; 0x12
     c44:	2b ea       	ldi	r18, 0xAB	; 171
     c46:	3a ea       	ldi	r19, 0xAA	; 170
     c48:	4a ea       	ldi	r20, 0xAA	; 170
     c4a:	50 e4       	ldi	r21, 0x40	; 64
     c4c:	6f 85       	ldd	r22, Y+15	; 0x0f
     c4e:	78 89       	ldd	r23, Y+16	; 0x10
     c50:	89 89       	ldd	r24, Y+17	; 0x11
     c52:	9a 89       	ldd	r25, Y+18	; 0x12
     c54:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	8b 8b       	std	Y+19, r24	; 0x13
     c5e:	9c 8b       	std	Y+20, r25	; 0x14
     c60:	ad 8b       	std	Y+21, r26	; 0x15
     c62:	be 8b       	std	Y+22, r27	; 0x16
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	40 e8       	ldi	r20, 0x80	; 128
     c6a:	50 e4       	ldi	r21, 0x40	; 64
     c6c:	6f 85       	ldd	r22, Y+15	; 0x0f
     c6e:	78 89       	ldd	r23, Y+16	; 0x10
     c70:	89 89       	ldd	r24, Y+17	; 0x11
     c72:	9a 89       	ldd	r25, Y+18	; 0x12
     c74:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
     c78:	dc 01       	movw	r26, r24
     c7a:	cb 01       	movw	r24, r22
     c7c:	8f 8b       	std	Y+23, r24	; 0x17
     c7e:	98 8f       	std	Y+24, r25	; 0x18
     c80:	a9 8f       	std	Y+25, r26	; 0x19
     c82:	ba 8f       	std	Y+26, r27	; 0x1a
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	40 e8       	ldi	r20, 0x80	; 128
     c8a:	5f e3       	ldi	r21, 0x3F	; 63
     c8c:	6b 89       	ldd	r22, Y+19	; 0x13
     c8e:	7c 89       	ldd	r23, Y+20	; 0x14
     c90:	8d 89       	ldd	r24, Y+21	; 0x15
     c92:	9e 89       	ldd	r25, Y+22	; 0x16
     c94:	0e 94 0b 12 	call	0x2416	; 0x2416 <__cmpsf2>
     c98:	88 23       	and	r24, r24
     c9a:	1c f4       	brge	.+6      	; 0xca2 <LCD_vidSendCommand+0x1e6>
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	8b 8f       	std	Y+27, r24	; 0x1b
     ca0:	b2 c0       	rjmp	.+356    	; 0xe06 <LCD_vidSendCommand+0x34a>
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	3f ef       	ldi	r19, 0xFF	; 255
     ca6:	4f e7       	ldi	r20, 0x7F	; 127
     ca8:	57 e4       	ldi	r21, 0x47	; 71
     caa:	6f 89       	ldd	r22, Y+23	; 0x17
     cac:	78 8d       	ldd	r23, Y+24	; 0x18
     cae:	89 8d       	ldd	r24, Y+25	; 0x19
     cb0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cb2:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__gesf2>
     cb6:	18 16       	cp	r1, r24
     cb8:	0c f0       	brlt	.+2      	; 0xcbc <LCD_vidSendCommand+0x200>
     cba:	7b c0       	rjmp	.+246    	; 0xdb2 <LCD_vidSendCommand+0x2f6>
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	4a e7       	ldi	r20, 0x7A	; 122
     cc2:	54 e4       	ldi	r21, 0x44	; 68
     cc4:	6f 85       	ldd	r22, Y+15	; 0x0f
     cc6:	78 89       	ldd	r23, Y+16	; 0x10
     cc8:	89 89       	ldd	r24, Y+17	; 0x11
     cca:	9a 89       	ldd	r25, Y+18	; 0x12
     ccc:	0e 94 10 12 	call	0x2420	; 0x2420 <__divsf3>
     cd0:	dc 01       	movw	r26, r24
     cd2:	cb 01       	movw	r24, r22
     cd4:	8c 8f       	std	Y+28, r24	; 0x1c
     cd6:	9d 8f       	std	Y+29, r25	; 0x1d
     cd8:	ae 8f       	std	Y+30, r26	; 0x1e
     cda:	bf 8f       	std	Y+31, r27	; 0x1f
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	4a e7       	ldi	r20, 0x7A	; 122
     ce2:	55 e4       	ldi	r21, 0x45	; 69
     ce4:	6c 8d       	ldd	r22, Y+28	; 0x1c
     ce6:	7d 8d       	ldd	r23, Y+29	; 0x1d
     ce8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cea:	9f 8d       	ldd	r25, Y+31	; 0x1f
     cec:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	88 a3       	std	Y+32, r24	; 0x20
     cf6:	99 a3       	std	Y+33, r25	; 0x21
     cf8:	aa a3       	std	Y+34, r26	; 0x22
     cfa:	bb a3       	std	Y+35, r27	; 0x23
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	40 e8       	ldi	r20, 0x80	; 128
     d02:	5f e3       	ldi	r21, 0x3F	; 63
     d04:	68 a1       	ldd	r22, Y+32	; 0x20
     d06:	79 a1       	ldd	r23, Y+33	; 0x21
     d08:	8a a1       	ldd	r24, Y+34	; 0x22
     d0a:	9b a1       	ldd	r25, Y+35	; 0x23
     d0c:	0e 94 0b 12 	call	0x2416	; 0x2416 <__cmpsf2>
     d10:	88 23       	and	r24, r24
     d12:	2c f4       	brge	.+10     	; 0xd1e <LCD_vidSendCommand+0x262>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	9d a3       	std	Y+37, r25	; 0x25
     d1a:	8c a3       	std	Y+36, r24	; 0x24
     d1c:	3f c0       	rjmp	.+126    	; 0xd9c <LCD_vidSendCommand+0x2e0>
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	3f ef       	ldi	r19, 0xFF	; 255
     d22:	4f e7       	ldi	r20, 0x7F	; 127
     d24:	57 e4       	ldi	r21, 0x47	; 71
     d26:	68 a1       	ldd	r22, Y+32	; 0x20
     d28:	79 a1       	ldd	r23, Y+33	; 0x21
     d2a:	8a a1       	ldd	r24, Y+34	; 0x22
     d2c:	9b a1       	ldd	r25, Y+35	; 0x23
     d2e:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__gesf2>
     d32:	18 16       	cp	r1, r24
     d34:	4c f5       	brge	.+82     	; 0xd88 <LCD_vidSendCommand+0x2cc>
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	40 e2       	ldi	r20, 0x20	; 32
     d3c:	51 e4       	ldi	r21, 0x41	; 65
     d3e:	6c 8d       	ldd	r22, Y+28	; 0x1c
     d40:	7d 8d       	ldd	r23, Y+29	; 0x1d
     d42:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d44:	9f 8d       	ldd	r25, Y+31	; 0x1f
     d46:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	bc 01       	movw	r22, r24
     d50:	cd 01       	movw	r24, r26
     d52:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	9d a3       	std	Y+37, r25	; 0x25
     d5c:	8c a3       	std	Y+36, r24	; 0x24
     d5e:	0f c0       	rjmp	.+30     	; 0xd7e <LCD_vidSendCommand+0x2c2>
     d60:	80 e9       	ldi	r24, 0x90	; 144
     d62:	91 e0       	ldi	r25, 0x01	; 1
     d64:	9f a3       	std	Y+39, r25	; 0x27
     d66:	8e a3       	std	Y+38, r24	; 0x26
     d68:	8e a1       	ldd	r24, Y+38	; 0x26
     d6a:	9f a1       	ldd	r25, Y+39	; 0x27
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	f1 f7       	brne	.-4      	; 0xd6c <LCD_vidSendCommand+0x2b0>
     d70:	9f a3       	std	Y+39, r25	; 0x27
     d72:	8e a3       	std	Y+38, r24	; 0x26
     d74:	8c a1       	ldd	r24, Y+36	; 0x24
     d76:	9d a1       	ldd	r25, Y+37	; 0x25
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	9d a3       	std	Y+37, r25	; 0x25
     d7c:	8c a3       	std	Y+36, r24	; 0x24
     d7e:	8c a1       	ldd	r24, Y+36	; 0x24
     d80:	9d a1       	ldd	r25, Y+37	; 0x25
     d82:	89 2b       	or	r24, r25
     d84:	69 f7       	brne	.-38     	; 0xd60 <LCD_vidSendCommand+0x2a4>
     d86:	3f c0       	rjmp	.+126    	; 0xe06 <LCD_vidSendCommand+0x34a>
     d88:	68 a1       	ldd	r22, Y+32	; 0x20
     d8a:	79 a1       	ldd	r23, Y+33	; 0x21
     d8c:	8a a1       	ldd	r24, Y+34	; 0x22
     d8e:	9b a1       	ldd	r25, Y+35	; 0x23
     d90:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	9d a3       	std	Y+37, r25	; 0x25
     d9a:	8c a3       	std	Y+36, r24	; 0x24
     d9c:	8c a1       	ldd	r24, Y+36	; 0x24
     d9e:	9d a1       	ldd	r25, Y+37	; 0x25
     da0:	99 a7       	std	Y+41, r25	; 0x29
     da2:	88 a7       	std	Y+40, r24	; 0x28
     da4:	88 a5       	ldd	r24, Y+40	; 0x28
     da6:	99 a5       	ldd	r25, Y+41	; 0x29
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	f1 f7       	brne	.-4      	; 0xda8 <LCD_vidSendCommand+0x2ec>
     dac:	99 a7       	std	Y+41, r25	; 0x29
     dae:	88 a7       	std	Y+40, r24	; 0x28
     db0:	2a c0       	rjmp	.+84     	; 0xe06 <LCD_vidSendCommand+0x34a>
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	4f e7       	ldi	r20, 0x7F	; 127
     db8:	53 e4       	ldi	r21, 0x43	; 67
     dba:	6b 89       	ldd	r22, Y+19	; 0x13
     dbc:	7c 89       	ldd	r23, Y+20	; 0x14
     dbe:	8d 89       	ldd	r24, Y+21	; 0x15
     dc0:	9e 89       	ldd	r25, Y+22	; 0x16
     dc2:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__gesf2>
     dc6:	18 16       	cp	r1, r24
     dc8:	ac f4       	brge	.+42     	; 0xdf4 <LCD_vidSendCommand+0x338>
     dca:	6f 89       	ldd	r22, Y+23	; 0x17
     dcc:	78 8d       	ldd	r23, Y+24	; 0x18
     dce:	89 8d       	ldd	r24, Y+25	; 0x19
     dd0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     dd2:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	9b a7       	std	Y+43, r25	; 0x2b
     ddc:	8a a7       	std	Y+42, r24	; 0x2a
     dde:	8a a5       	ldd	r24, Y+42	; 0x2a
     de0:	9b a5       	ldd	r25, Y+43	; 0x2b
     de2:	9d a7       	std	Y+45, r25	; 0x2d
     de4:	8c a7       	std	Y+44, r24	; 0x2c
     de6:	8c a5       	ldd	r24, Y+44	; 0x2c
     de8:	9d a5       	ldd	r25, Y+45	; 0x2d
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <LCD_vidSendCommand+0x32e>
     dee:	9d a7       	std	Y+45, r25	; 0x2d
     df0:	8c a7       	std	Y+44, r24	; 0x2c
     df2:	0f c0       	rjmp	.+30     	; 0xe12 <LCD_vidSendCommand+0x356>
     df4:	6b 89       	ldd	r22, Y+19	; 0x13
     df6:	7c 89       	ldd	r23, Y+20	; 0x14
     df8:	8d 89       	ldd	r24, Y+21	; 0x15
     dfa:	9e 89       	ldd	r25, Y+22	; 0x16
     dfc:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
     e00:	dc 01       	movw	r26, r24
     e02:	cb 01       	movw	r24, r22
     e04:	8b 8f       	std	Y+27, r24	; 0x1b
     e06:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e08:	8e a7       	std	Y+46, r24	; 0x2e
     e0a:	8e a5       	ldd	r24, Y+46	; 0x2e
     e0c:	8a 95       	dec	r24
     e0e:	f1 f7       	brne	.-4      	; 0xe0c <LCD_vidSendCommand+0x350>
     e10:	8e a7       	std	Y+46, r24	; 0x2e
     e12:	ce 01       	movw	r24, r28
     e14:	83 5b       	subi	r24, 0xB3	; 179
     e16:	9f 4f       	sbci	r25, 0xFF	; 255
     e18:	fc 01       	movw	r30, r24
     e1a:	80 81       	ld	r24, Z
     e1c:	8f 70       	andi	r24, 0x0F	; 15
     e1e:	8a 83       	std	Y+2, r24	; 0x02
     e20:	19 82       	std	Y+1, r1	; 0x01
     e22:	1a c0       	rjmp	.+52     	; 0xe58 <LCD_vidSendCommand+0x39c>
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	29 81       	ldd	r18, Y+1	; 0x01
     e2c:	22 2f       	mov	r18, r18
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <LCD_vidSendCommand+0x37a>
     e32:	95 95       	asr	r25
     e34:	87 95       	ror	r24
     e36:	2a 95       	dec	r18
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <LCD_vidSendCommand+0x376>
     e3a:	28 2f       	mov	r18, r24
     e3c:	21 70       	andi	r18, 0x01	; 1
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	80 59       	subi	r24, 0x90	; 144
     e46:	9f 4f       	sbci	r25, 0xFF	; 255
     e48:	fc 01       	movw	r30, r24
     e4a:	80 81       	ld	r24, Z
     e4c:	62 2f       	mov	r22, r18
     e4e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	8f 5f       	subi	r24, 0xFF	; 255
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	84 30       	cpi	r24, 0x04	; 4
     e5c:	18 f3       	brcs	.-58     	; 0xe24 <LCD_vidSendCommand+0x368>
     e5e:	61 e0       	ldi	r22, 0x01	; 1
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	a0 e8       	ldi	r26, 0x80	; 128
     e6c:	bf e3       	ldi	r27, 0x3F	; 63
     e6e:	8b 87       	std	Y+11, r24	; 0x0b
     e70:	9c 87       	std	Y+12, r25	; 0x0c
     e72:	ad 87       	std	Y+13, r26	; 0x0d
     e74:	be 87       	std	Y+14, r27	; 0x0e
     e76:	8e 01       	movw	r16, r28
     e78:	0d 5b       	subi	r16, 0xBD	; 189
     e7a:	1f 4f       	sbci	r17, 0xFF	; 255
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	4a e7       	ldi	r20, 0x7A	; 122
     e82:	55 e4       	ldi	r21, 0x45	; 69
     e84:	6b 85       	ldd	r22, Y+11	; 0x0b
     e86:	7c 85       	ldd	r23, Y+12	; 0x0c
     e88:	8d 85       	ldd	r24, Y+13	; 0x0d
     e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e8c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	f8 01       	movw	r30, r16
     e96:	80 83       	st	Z, r24
     e98:	91 83       	std	Z+1, r25	; 0x01
     e9a:	a2 83       	std	Z+2, r26	; 0x02
     e9c:	b3 83       	std	Z+3, r27	; 0x03
     e9e:	ce 01       	movw	r24, r28
     ea0:	8d 5b       	subi	r24, 0xBD	; 189
     ea2:	9f 4f       	sbci	r25, 0xFF	; 255
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	40 e8       	ldi	r20, 0x80	; 128
     eaa:	5f e3       	ldi	r21, 0x3F	; 63
     eac:	fc 01       	movw	r30, r24
     eae:	60 81       	ld	r22, Z
     eb0:	71 81       	ldd	r23, Z+1	; 0x01
     eb2:	82 81       	ldd	r24, Z+2	; 0x02
     eb4:	93 81       	ldd	r25, Z+3	; 0x03
     eb6:	0e 94 0b 12 	call	0x2416	; 0x2416 <__cmpsf2>
     eba:	88 23       	and	r24, r24
     ebc:	4c f4       	brge	.+18     	; 0xed0 <LCD_vidSendCommand+0x414>
     ebe:	ce 01       	movw	r24, r28
     ec0:	89 5b       	subi	r24, 0xB9	; 185
     ec2:	9f 4f       	sbci	r25, 0xFF	; 255
     ec4:	21 e0       	ldi	r18, 0x01	; 1
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	fc 01       	movw	r30, r24
     eca:	31 83       	std	Z+1, r19	; 0x01
     ecc:	20 83       	st	Z, r18
     ece:	69 c0       	rjmp	.+210    	; 0xfa2 <LCD_vidSendCommand+0x4e6>
     ed0:	ce 01       	movw	r24, r28
     ed2:	8d 5b       	subi	r24, 0xBD	; 189
     ed4:	9f 4f       	sbci	r25, 0xFF	; 255
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	3f ef       	ldi	r19, 0xFF	; 255
     eda:	4f e7       	ldi	r20, 0x7F	; 127
     edc:	57 e4       	ldi	r21, 0x47	; 71
     ede:	fc 01       	movw	r30, r24
     ee0:	60 81       	ld	r22, Z
     ee2:	71 81       	ldd	r23, Z+1	; 0x01
     ee4:	82 81       	ldd	r24, Z+2	; 0x02
     ee6:	93 81       	ldd	r25, Z+3	; 0x03
     ee8:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__gesf2>
     eec:	18 16       	cp	r1, r24
     eee:	0c f0       	brlt	.+2      	; 0xef2 <LCD_vidSendCommand+0x436>
     ef0:	46 c0       	rjmp	.+140    	; 0xf7e <LCD_vidSendCommand+0x4c2>
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e2       	ldi	r20, 0x20	; 32
     ef8:	51 e4       	ldi	r21, 0x41	; 65
     efa:	6b 85       	ldd	r22, Y+11	; 0x0b
     efc:	7c 85       	ldd	r23, Y+12	; 0x0c
     efe:	8d 85       	ldd	r24, Y+13	; 0x0d
     f00:	9e 85       	ldd	r25, Y+14	; 0x0e
     f02:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	8e 01       	movw	r16, r28
     f0c:	09 5b       	subi	r16, 0xB9	; 185
     f0e:	1f 4f       	sbci	r17, 0xFF	; 255
     f10:	bc 01       	movw	r22, r24
     f12:	cd 01       	movw	r24, r26
     f14:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	f8 01       	movw	r30, r16
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	80 83       	st	Z, r24
     f22:	24 c0       	rjmp	.+72     	; 0xf6c <LCD_vidSendCommand+0x4b0>
     f24:	ce 01       	movw	r24, r28
     f26:	87 5b       	subi	r24, 0xB7	; 183
     f28:	9f 4f       	sbci	r25, 0xFF	; 255
     f2a:	20 e9       	ldi	r18, 0x90	; 144
     f2c:	31 e0       	ldi	r19, 0x01	; 1
     f2e:	fc 01       	movw	r30, r24
     f30:	31 83       	std	Z+1, r19	; 0x01
     f32:	20 83       	st	Z, r18
     f34:	ce 01       	movw	r24, r28
     f36:	87 5b       	subi	r24, 0xB7	; 183
     f38:	9f 4f       	sbci	r25, 0xFF	; 255
     f3a:	fc 01       	movw	r30, r24
     f3c:	80 81       	ld	r24, Z
     f3e:	91 81       	ldd	r25, Z+1	; 0x01
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <LCD_vidSendCommand+0x484>
     f44:	9e 01       	movw	r18, r28
     f46:	27 5b       	subi	r18, 0xB7	; 183
     f48:	3f 4f       	sbci	r19, 0xFF	; 255
     f4a:	f9 01       	movw	r30, r18
     f4c:	91 83       	std	Z+1, r25	; 0x01
     f4e:	80 83       	st	Z, r24
     f50:	ce 01       	movw	r24, r28
     f52:	89 5b       	subi	r24, 0xB9	; 185
     f54:	9f 4f       	sbci	r25, 0xFF	; 255
     f56:	9e 01       	movw	r18, r28
     f58:	29 5b       	subi	r18, 0xB9	; 185
     f5a:	3f 4f       	sbci	r19, 0xFF	; 255
     f5c:	f9 01       	movw	r30, r18
     f5e:	20 81       	ld	r18, Z
     f60:	31 81       	ldd	r19, Z+1	; 0x01
     f62:	21 50       	subi	r18, 0x01	; 1
     f64:	31 09       	sbc	r19, r1
     f66:	fc 01       	movw	r30, r24
     f68:	31 83       	std	Z+1, r19	; 0x01
     f6a:	20 83       	st	Z, r18
     f6c:	ce 01       	movw	r24, r28
     f6e:	89 5b       	subi	r24, 0xB9	; 185
     f70:	9f 4f       	sbci	r25, 0xFF	; 255
     f72:	fc 01       	movw	r30, r24
     f74:	80 81       	ld	r24, Z
     f76:	91 81       	ldd	r25, Z+1	; 0x01
     f78:	89 2b       	or	r24, r25
     f7a:	a1 f6       	brne	.-88     	; 0xf24 <LCD_vidSendCommand+0x468>
     f7c:	2c c0       	rjmp	.+88     	; 0xfd6 <LCD_vidSendCommand+0x51a>
     f7e:	8e 01       	movw	r16, r28
     f80:	09 5b       	subi	r16, 0xB9	; 185
     f82:	1f 4f       	sbci	r17, 0xFF	; 255
     f84:	ce 01       	movw	r24, r28
     f86:	8d 5b       	subi	r24, 0xBD	; 189
     f88:	9f 4f       	sbci	r25, 0xFF	; 255
     f8a:	fc 01       	movw	r30, r24
     f8c:	60 81       	ld	r22, Z
     f8e:	71 81       	ldd	r23, Z+1	; 0x01
     f90:	82 81       	ldd	r24, Z+2	; 0x02
     f92:	93 81       	ldd	r25, Z+3	; 0x03
     f94:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	f8 01       	movw	r30, r16
     f9e:	91 83       	std	Z+1, r25	; 0x01
     fa0:	80 83       	st	Z, r24
     fa2:	ce 01       	movw	r24, r28
     fa4:	85 5b       	subi	r24, 0xB5	; 181
     fa6:	9f 4f       	sbci	r25, 0xFF	; 255
     fa8:	9e 01       	movw	r18, r28
     faa:	29 5b       	subi	r18, 0xB9	; 185
     fac:	3f 4f       	sbci	r19, 0xFF	; 255
     fae:	f9 01       	movw	r30, r18
     fb0:	20 81       	ld	r18, Z
     fb2:	31 81       	ldd	r19, Z+1	; 0x01
     fb4:	fc 01       	movw	r30, r24
     fb6:	31 83       	std	Z+1, r19	; 0x01
     fb8:	20 83       	st	Z, r18
     fba:	ce 01       	movw	r24, r28
     fbc:	85 5b       	subi	r24, 0xB5	; 181
     fbe:	9f 4f       	sbci	r25, 0xFF	; 255
     fc0:	fc 01       	movw	r30, r24
     fc2:	80 81       	ld	r24, Z
     fc4:	91 81       	ldd	r25, Z+1	; 0x01
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <LCD_vidSendCommand+0x50a>
     fca:	9e 01       	movw	r18, r28
     fcc:	25 5b       	subi	r18, 0xB5	; 181
     fce:	3f 4f       	sbci	r19, 0xFF	; 255
     fd0:	f9 01       	movw	r30, r18
     fd2:	91 83       	std	Z+1, r25	; 0x01
     fd4:	80 83       	st	Z, r24
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	a0 e0       	ldi	r26, 0x00	; 0
     fe4:	b0 e4       	ldi	r27, 0x40	; 64
     fe6:	8b 83       	std	Y+3, r24	; 0x03
     fe8:	9c 83       	std	Y+4, r25	; 0x04
     fea:	ad 83       	std	Y+5, r26	; 0x05
     fec:	be 83       	std	Y+6, r27	; 0x06
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	4a e7       	ldi	r20, 0x7A	; 122
     ff4:	55 e4       	ldi	r21, 0x45	; 69
     ff6:	6b 81       	ldd	r22, Y+3	; 0x03
     ff8:	7c 81       	ldd	r23, Y+4	; 0x04
     ffa:	8d 81       	ldd	r24, Y+5	; 0x05
     ffc:	9e 81       	ldd	r25, Y+6	; 0x06
     ffe:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	89 af       	std	Y+57, r24	; 0x39
    1008:	9a af       	std	Y+58, r25	; 0x3a
    100a:	ab af       	std	Y+59, r26	; 0x3b
    100c:	bc af       	std	Y+60, r27	; 0x3c
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e8       	ldi	r20, 0x80	; 128
    1014:	5f e3       	ldi	r21, 0x3F	; 63
    1016:	69 ad       	ldd	r22, Y+57	; 0x39
    1018:	7a ad       	ldd	r23, Y+58	; 0x3a
    101a:	8b ad       	ldd	r24, Y+59	; 0x3b
    101c:	9c ad       	ldd	r25, Y+60	; 0x3c
    101e:	0e 94 0b 12 	call	0x2416	; 0x2416 <__cmpsf2>
    1022:	88 23       	and	r24, r24
    1024:	2c f4       	brge	.+10     	; 0x1030 <LCD_vidSendCommand+0x574>
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	9e af       	std	Y+62, r25	; 0x3e
    102c:	8d af       	std	Y+61, r24	; 0x3d
    102e:	49 c0       	rjmp	.+146    	; 0x10c2 <LCD_vidSendCommand+0x606>
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	3f ef       	ldi	r19, 0xFF	; 255
    1034:	4f e7       	ldi	r20, 0x7F	; 127
    1036:	57 e4       	ldi	r21, 0x47	; 71
    1038:	69 ad       	ldd	r22, Y+57	; 0x39
    103a:	7a ad       	ldd	r23, Y+58	; 0x3a
    103c:	8b ad       	ldd	r24, Y+59	; 0x3b
    103e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1040:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__gesf2>
    1044:	18 16       	cp	r1, r24
    1046:	9c f5       	brge	.+102    	; 0x10ae <LCD_vidSendCommand+0x5f2>
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 e2       	ldi	r20, 0x20	; 32
    104e:	51 e4       	ldi	r21, 0x41	; 65
    1050:	6b 81       	ldd	r22, Y+3	; 0x03
    1052:	7c 81       	ldd	r23, Y+4	; 0x04
    1054:	8d 81       	ldd	r24, Y+5	; 0x05
    1056:	9e 81       	ldd	r25, Y+6	; 0x06
    1058:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	bc 01       	movw	r22, r24
    1062:	cd 01       	movw	r24, r26
    1064:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	9e af       	std	Y+62, r25	; 0x3e
    106e:	8d af       	std	Y+61, r24	; 0x3d
    1070:	19 c0       	rjmp	.+50     	; 0x10a4 <LCD_vidSendCommand+0x5e8>
    1072:	20 e9       	ldi	r18, 0x90	; 144
    1074:	31 e0       	ldi	r19, 0x01	; 1
    1076:	ce 01       	movw	r24, r28
    1078:	cf 96       	adiw	r24, 0x3f	; 63
    107a:	fc 01       	movw	r30, r24
    107c:	31 83       	std	Z+1, r19	; 0x01
    107e:	20 83       	st	Z, r18
    1080:	ce 01       	movw	r24, r28
    1082:	cf 96       	adiw	r24, 0x3f	; 63
    1084:	fc 01       	movw	r30, r24
    1086:	80 81       	ld	r24, Z
    1088:	91 81       	ldd	r25, Z+1	; 0x01
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <LCD_vidSendCommand+0x5ce>
    108e:	9e 01       	movw	r18, r28
    1090:	21 5c       	subi	r18, 0xC1	; 193
    1092:	3f 4f       	sbci	r19, 0xFF	; 255
    1094:	f9 01       	movw	r30, r18
    1096:	91 83       	std	Z+1, r25	; 0x01
    1098:	80 83       	st	Z, r24
    109a:	8d ad       	ldd	r24, Y+61	; 0x3d
    109c:	9e ad       	ldd	r25, Y+62	; 0x3e
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	9e af       	std	Y+62, r25	; 0x3e
    10a2:	8d af       	std	Y+61, r24	; 0x3d
    10a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    10a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    10a8:	89 2b       	or	r24, r25
    10aa:	19 f7       	brne	.-58     	; 0x1072 <LCD_vidSendCommand+0x5b6>
    10ac:	20 c0       	rjmp	.+64     	; 0x10ee <LCD_vidSendCommand+0x632>
    10ae:	69 ad       	ldd	r22, Y+57	; 0x39
    10b0:	7a ad       	ldd	r23, Y+58	; 0x3a
    10b2:	8b ad       	ldd	r24, Y+59	; 0x3b
    10b4:	9c ad       	ldd	r25, Y+60	; 0x3c
    10b6:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	9e af       	std	Y+62, r25	; 0x3e
    10c0:	8d af       	std	Y+61, r24	; 0x3d
    10c2:	ce 01       	movw	r24, r28
    10c4:	8f 5b       	subi	r24, 0xBF	; 191
    10c6:	9f 4f       	sbci	r25, 0xFF	; 255
    10c8:	2d ad       	ldd	r18, Y+61	; 0x3d
    10ca:	3e ad       	ldd	r19, Y+62	; 0x3e
    10cc:	fc 01       	movw	r30, r24
    10ce:	31 83       	std	Z+1, r19	; 0x01
    10d0:	20 83       	st	Z, r18
    10d2:	ce 01       	movw	r24, r28
    10d4:	8f 5b       	subi	r24, 0xBF	; 191
    10d6:	9f 4f       	sbci	r25, 0xFF	; 255
    10d8:	fc 01       	movw	r30, r24
    10da:	80 81       	ld	r24, Z
    10dc:	91 81       	ldd	r25, Z+1	; 0x01
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	f1 f7       	brne	.-4      	; 0x10de <LCD_vidSendCommand+0x622>
    10e2:	9e 01       	movw	r18, r28
    10e4:	2f 5b       	subi	r18, 0xBF	; 191
    10e6:	3f 4f       	sbci	r19, 0xFF	; 255
    10e8:	f9 01       	movw	r30, r18
    10ea:	91 83       	std	Z+1, r25	; 0x01
    10ec:	80 83       	st	Z, r24
    10ee:	00 00       	nop
    10f0:	c3 5b       	subi	r28, 0xB3	; 179
    10f2:	df 4f       	sbci	r29, 0xFF	; 255
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	1f 91       	pop	r17
    1104:	0f 91       	pop	r16
    1106:	08 95       	ret

00001108 <LCD_vidDisplayCharacter>:
    1108:	0f 93       	push	r16
    110a:	1f 93       	push	r17
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	cd 54       	subi	r28, 0x4D	; 77
    1116:	d1 09       	sbc	r29, r1
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	9e 01       	movw	r18, r28
    1124:	23 5b       	subi	r18, 0xB3	; 179
    1126:	3f 4f       	sbci	r19, 0xFF	; 255
    1128:	f9 01       	movw	r30, r18
    112a:	80 83       	st	Z, r24
    112c:	61 e0       	ldi	r22, 0x01	; 1
    112e:	83 e0       	ldi	r24, 0x03	; 3
    1130:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	87 e0       	ldi	r24, 0x07	; 7
    1138:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
    113c:	1a 82       	std	Y+2, r1	; 0x02
    113e:	ce 01       	movw	r24, r28
    1140:	83 5b       	subi	r24, 0xB3	; 179
    1142:	9f 4f       	sbci	r25, 0xFF	; 255
    1144:	fc 01       	movw	r30, r24
    1146:	80 81       	ld	r24, Z
    1148:	82 95       	swap	r24
    114a:	8f 70       	andi	r24, 0x0F	; 15
    114c:	8a 83       	std	Y+2, r24	; 0x02
    114e:	19 82       	std	Y+1, r1	; 0x01
    1150:	1a c0       	rjmp	.+52     	; 0x1186 <LCD_vidDisplayCharacter+0x7e>
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	88 2f       	mov	r24, r24
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	29 81       	ldd	r18, Y+1	; 0x01
    115a:	22 2f       	mov	r18, r18
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <LCD_vidDisplayCharacter+0x5c>
    1160:	95 95       	asr	r25
    1162:	87 95       	ror	r24
    1164:	2a 95       	dec	r18
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <LCD_vidDisplayCharacter+0x58>
    1168:	28 2f       	mov	r18, r24
    116a:	21 70       	andi	r18, 0x01	; 1
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	88 2f       	mov	r24, r24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	80 59       	subi	r24, 0x90	; 144
    1174:	9f 4f       	sbci	r25, 0xFF	; 255
    1176:	fc 01       	movw	r30, r24
    1178:	80 81       	ld	r24, Z
    117a:	62 2f       	mov	r22, r18
    117c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	8f 5f       	subi	r24, 0xFF	; 255
    1184:	89 83       	std	Y+1, r24	; 0x01
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	84 30       	cpi	r24, 0x04	; 4
    118a:	18 f3       	brcs	.-58     	; 0x1152 <LCD_vidDisplayCharacter+0x4a>
    118c:	61 e0       	ldi	r22, 0x01	; 1
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	a0 e8       	ldi	r26, 0x80	; 128
    119a:	bf e3       	ldi	r27, 0x3F	; 63
    119c:	8f 83       	std	Y+7, r24	; 0x07
    119e:	98 87       	std	Y+8, r25	; 0x08
    11a0:	a9 87       	std	Y+9, r26	; 0x09
    11a2:	ba 87       	std	Y+10, r27	; 0x0a
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	4a e7       	ldi	r20, 0x7A	; 122
    11aa:	55 e4       	ldi	r21, 0x45	; 69
    11ac:	6f 81       	ldd	r22, Y+7	; 0x07
    11ae:	78 85       	ldd	r23, Y+8	; 0x08
    11b0:	89 85       	ldd	r24, Y+9	; 0x09
    11b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	8f a7       	std	Y+47, r24	; 0x2f
    11be:	98 ab       	std	Y+48, r25	; 0x30
    11c0:	a9 ab       	std	Y+49, r26	; 0x31
    11c2:	ba ab       	std	Y+50, r27	; 0x32
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e8       	ldi	r20, 0x80	; 128
    11ca:	5f e3       	ldi	r21, 0x3F	; 63
    11cc:	6f a5       	ldd	r22, Y+47	; 0x2f
    11ce:	78 a9       	ldd	r23, Y+48	; 0x30
    11d0:	89 a9       	ldd	r24, Y+49	; 0x31
    11d2:	9a a9       	ldd	r25, Y+50	; 0x32
    11d4:	0e 94 0b 12 	call	0x2416	; 0x2416 <__cmpsf2>
    11d8:	88 23       	and	r24, r24
    11da:	2c f4       	brge	.+10     	; 0x11e6 <LCD_vidDisplayCharacter+0xde>
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	9c ab       	std	Y+52, r25	; 0x34
    11e2:	8b ab       	std	Y+51, r24	; 0x33
    11e4:	3f c0       	rjmp	.+126    	; 0x1264 <LCD_vidDisplayCharacter+0x15c>
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	3f ef       	ldi	r19, 0xFF	; 255
    11ea:	4f e7       	ldi	r20, 0x7F	; 127
    11ec:	57 e4       	ldi	r21, 0x47	; 71
    11ee:	6f a5       	ldd	r22, Y+47	; 0x2f
    11f0:	78 a9       	ldd	r23, Y+48	; 0x30
    11f2:	89 a9       	ldd	r24, Y+49	; 0x31
    11f4:	9a a9       	ldd	r25, Y+50	; 0x32
    11f6:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__gesf2>
    11fa:	18 16       	cp	r1, r24
    11fc:	4c f5       	brge	.+82     	; 0x1250 <LCD_vidDisplayCharacter+0x148>
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e2       	ldi	r20, 0x20	; 32
    1204:	51 e4       	ldi	r21, 0x41	; 65
    1206:	6f 81       	ldd	r22, Y+7	; 0x07
    1208:	78 85       	ldd	r23, Y+8	; 0x08
    120a:	89 85       	ldd	r24, Y+9	; 0x09
    120c:	9a 85       	ldd	r25, Y+10	; 0x0a
    120e:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	bc 01       	movw	r22, r24
    1218:	cd 01       	movw	r24, r26
    121a:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
    121e:	dc 01       	movw	r26, r24
    1220:	cb 01       	movw	r24, r22
    1222:	9c ab       	std	Y+52, r25	; 0x34
    1224:	8b ab       	std	Y+51, r24	; 0x33
    1226:	0f c0       	rjmp	.+30     	; 0x1246 <LCD_vidDisplayCharacter+0x13e>
    1228:	80 e9       	ldi	r24, 0x90	; 144
    122a:	91 e0       	ldi	r25, 0x01	; 1
    122c:	9e ab       	std	Y+54, r25	; 0x36
    122e:	8d ab       	std	Y+53, r24	; 0x35
    1230:	8d a9       	ldd	r24, Y+53	; 0x35
    1232:	9e a9       	ldd	r25, Y+54	; 0x36
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	f1 f7       	brne	.-4      	; 0x1234 <LCD_vidDisplayCharacter+0x12c>
    1238:	9e ab       	std	Y+54, r25	; 0x36
    123a:	8d ab       	std	Y+53, r24	; 0x35
    123c:	8b a9       	ldd	r24, Y+51	; 0x33
    123e:	9c a9       	ldd	r25, Y+52	; 0x34
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	9c ab       	std	Y+52, r25	; 0x34
    1244:	8b ab       	std	Y+51, r24	; 0x33
    1246:	8b a9       	ldd	r24, Y+51	; 0x33
    1248:	9c a9       	ldd	r25, Y+52	; 0x34
    124a:	89 2b       	or	r24, r25
    124c:	69 f7       	brne	.-38     	; 0x1228 <LCD_vidDisplayCharacter+0x120>
    124e:	14 c0       	rjmp	.+40     	; 0x1278 <LCD_vidDisplayCharacter+0x170>
    1250:	6f a5       	ldd	r22, Y+47	; 0x2f
    1252:	78 a9       	ldd	r23, Y+48	; 0x30
    1254:	89 a9       	ldd	r24, Y+49	; 0x31
    1256:	9a a9       	ldd	r25, Y+50	; 0x32
    1258:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	9c ab       	std	Y+52, r25	; 0x34
    1262:	8b ab       	std	Y+51, r24	; 0x33
    1264:	8b a9       	ldd	r24, Y+51	; 0x33
    1266:	9c a9       	ldd	r25, Y+52	; 0x34
    1268:	98 af       	std	Y+56, r25	; 0x38
    126a:	8f ab       	std	Y+55, r24	; 0x37
    126c:	8f a9       	ldd	r24, Y+55	; 0x37
    126e:	98 ad       	ldd	r25, Y+56	; 0x38
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	f1 f7       	brne	.-4      	; 0x1270 <LCD_vidDisplayCharacter+0x168>
    1274:	98 af       	std	Y+56, r25	; 0x38
    1276:	8f ab       	std	Y+55, r24	; 0x37
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	82 e0       	ldi	r24, 0x02	; 2
    127c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	a8 e4       	ldi	r26, 0x48	; 72
    1286:	b3 e4       	ldi	r27, 0x43	; 67
    1288:	8f 87       	std	Y+15, r24	; 0x0f
    128a:	98 8b       	std	Y+16, r25	; 0x10
    128c:	a9 8b       	std	Y+17, r26	; 0x11
    128e:	ba 8b       	std	Y+18, r27	; 0x12
    1290:	2b ea       	ldi	r18, 0xAB	; 171
    1292:	3a ea       	ldi	r19, 0xAA	; 170
    1294:	4a ea       	ldi	r20, 0xAA	; 170
    1296:	50 e4       	ldi	r21, 0x40	; 64
    1298:	6f 85       	ldd	r22, Y+15	; 0x0f
    129a:	78 89       	ldd	r23, Y+16	; 0x10
    129c:	89 89       	ldd	r24, Y+17	; 0x11
    129e:	9a 89       	ldd	r25, Y+18	; 0x12
    12a0:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	8b 8b       	std	Y+19, r24	; 0x13
    12aa:	9c 8b       	std	Y+20, r25	; 0x14
    12ac:	ad 8b       	std	Y+21, r26	; 0x15
    12ae:	be 8b       	std	Y+22, r27	; 0x16
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	40 e8       	ldi	r20, 0x80	; 128
    12b6:	50 e4       	ldi	r21, 0x40	; 64
    12b8:	6f 85       	ldd	r22, Y+15	; 0x0f
    12ba:	78 89       	ldd	r23, Y+16	; 0x10
    12bc:	89 89       	ldd	r24, Y+17	; 0x11
    12be:	9a 89       	ldd	r25, Y+18	; 0x12
    12c0:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	8f 8b       	std	Y+23, r24	; 0x17
    12ca:	98 8f       	std	Y+24, r25	; 0x18
    12cc:	a9 8f       	std	Y+25, r26	; 0x19
    12ce:	ba 8f       	std	Y+26, r27	; 0x1a
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e8       	ldi	r20, 0x80	; 128
    12d6:	5f e3       	ldi	r21, 0x3F	; 63
    12d8:	6b 89       	ldd	r22, Y+19	; 0x13
    12da:	7c 89       	ldd	r23, Y+20	; 0x14
    12dc:	8d 89       	ldd	r24, Y+21	; 0x15
    12de:	9e 89       	ldd	r25, Y+22	; 0x16
    12e0:	0e 94 0b 12 	call	0x2416	; 0x2416 <__cmpsf2>
    12e4:	88 23       	and	r24, r24
    12e6:	1c f4       	brge	.+6      	; 0x12ee <LCD_vidDisplayCharacter+0x1e6>
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	8b 8f       	std	Y+27, r24	; 0x1b
    12ec:	b2 c0       	rjmp	.+356    	; 0x1452 <LCD_vidDisplayCharacter+0x34a>
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	3f ef       	ldi	r19, 0xFF	; 255
    12f2:	4f e7       	ldi	r20, 0x7F	; 127
    12f4:	57 e4       	ldi	r21, 0x47	; 71
    12f6:	6f 89       	ldd	r22, Y+23	; 0x17
    12f8:	78 8d       	ldd	r23, Y+24	; 0x18
    12fa:	89 8d       	ldd	r24, Y+25	; 0x19
    12fc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    12fe:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__gesf2>
    1302:	18 16       	cp	r1, r24
    1304:	0c f0       	brlt	.+2      	; 0x1308 <LCD_vidDisplayCharacter+0x200>
    1306:	7b c0       	rjmp	.+246    	; 0x13fe <LCD_vidDisplayCharacter+0x2f6>
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	4a e7       	ldi	r20, 0x7A	; 122
    130e:	54 e4       	ldi	r21, 0x44	; 68
    1310:	6f 85       	ldd	r22, Y+15	; 0x0f
    1312:	78 89       	ldd	r23, Y+16	; 0x10
    1314:	89 89       	ldd	r24, Y+17	; 0x11
    1316:	9a 89       	ldd	r25, Y+18	; 0x12
    1318:	0e 94 10 12 	call	0x2420	; 0x2420 <__divsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	8c 8f       	std	Y+28, r24	; 0x1c
    1322:	9d 8f       	std	Y+29, r25	; 0x1d
    1324:	ae 8f       	std	Y+30, r26	; 0x1e
    1326:	bf 8f       	std	Y+31, r27	; 0x1f
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	4a e7       	ldi	r20, 0x7A	; 122
    132e:	55 e4       	ldi	r21, 0x45	; 69
    1330:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1332:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1334:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1336:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1338:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	88 a3       	std	Y+32, r24	; 0x20
    1342:	99 a3       	std	Y+33, r25	; 0x21
    1344:	aa a3       	std	Y+34, r26	; 0x22
    1346:	bb a3       	std	Y+35, r27	; 0x23
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e8       	ldi	r20, 0x80	; 128
    134e:	5f e3       	ldi	r21, 0x3F	; 63
    1350:	68 a1       	ldd	r22, Y+32	; 0x20
    1352:	79 a1       	ldd	r23, Y+33	; 0x21
    1354:	8a a1       	ldd	r24, Y+34	; 0x22
    1356:	9b a1       	ldd	r25, Y+35	; 0x23
    1358:	0e 94 0b 12 	call	0x2416	; 0x2416 <__cmpsf2>
    135c:	88 23       	and	r24, r24
    135e:	2c f4       	brge	.+10     	; 0x136a <LCD_vidDisplayCharacter+0x262>
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	9d a3       	std	Y+37, r25	; 0x25
    1366:	8c a3       	std	Y+36, r24	; 0x24
    1368:	3f c0       	rjmp	.+126    	; 0x13e8 <LCD_vidDisplayCharacter+0x2e0>
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	3f ef       	ldi	r19, 0xFF	; 255
    136e:	4f e7       	ldi	r20, 0x7F	; 127
    1370:	57 e4       	ldi	r21, 0x47	; 71
    1372:	68 a1       	ldd	r22, Y+32	; 0x20
    1374:	79 a1       	ldd	r23, Y+33	; 0x21
    1376:	8a a1       	ldd	r24, Y+34	; 0x22
    1378:	9b a1       	ldd	r25, Y+35	; 0x23
    137a:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__gesf2>
    137e:	18 16       	cp	r1, r24
    1380:	4c f5       	brge	.+82     	; 0x13d4 <LCD_vidDisplayCharacter+0x2cc>
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	40 e2       	ldi	r20, 0x20	; 32
    1388:	51 e4       	ldi	r21, 0x41	; 65
    138a:	6c 8d       	ldd	r22, Y+28	; 0x1c
    138c:	7d 8d       	ldd	r23, Y+29	; 0x1d
    138e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1390:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1392:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	bc 01       	movw	r22, r24
    139c:	cd 01       	movw	r24, r26
    139e:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	9d a3       	std	Y+37, r25	; 0x25
    13a8:	8c a3       	std	Y+36, r24	; 0x24
    13aa:	0f c0       	rjmp	.+30     	; 0x13ca <LCD_vidDisplayCharacter+0x2c2>
    13ac:	80 e9       	ldi	r24, 0x90	; 144
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	9f a3       	std	Y+39, r25	; 0x27
    13b2:	8e a3       	std	Y+38, r24	; 0x26
    13b4:	8e a1       	ldd	r24, Y+38	; 0x26
    13b6:	9f a1       	ldd	r25, Y+39	; 0x27
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	f1 f7       	brne	.-4      	; 0x13b8 <LCD_vidDisplayCharacter+0x2b0>
    13bc:	9f a3       	std	Y+39, r25	; 0x27
    13be:	8e a3       	std	Y+38, r24	; 0x26
    13c0:	8c a1       	ldd	r24, Y+36	; 0x24
    13c2:	9d a1       	ldd	r25, Y+37	; 0x25
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	9d a3       	std	Y+37, r25	; 0x25
    13c8:	8c a3       	std	Y+36, r24	; 0x24
    13ca:	8c a1       	ldd	r24, Y+36	; 0x24
    13cc:	9d a1       	ldd	r25, Y+37	; 0x25
    13ce:	89 2b       	or	r24, r25
    13d0:	69 f7       	brne	.-38     	; 0x13ac <LCD_vidDisplayCharacter+0x2a4>
    13d2:	3f c0       	rjmp	.+126    	; 0x1452 <LCD_vidDisplayCharacter+0x34a>
    13d4:	68 a1       	ldd	r22, Y+32	; 0x20
    13d6:	79 a1       	ldd	r23, Y+33	; 0x21
    13d8:	8a a1       	ldd	r24, Y+34	; 0x22
    13da:	9b a1       	ldd	r25, Y+35	; 0x23
    13dc:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	9d a3       	std	Y+37, r25	; 0x25
    13e6:	8c a3       	std	Y+36, r24	; 0x24
    13e8:	8c a1       	ldd	r24, Y+36	; 0x24
    13ea:	9d a1       	ldd	r25, Y+37	; 0x25
    13ec:	99 a7       	std	Y+41, r25	; 0x29
    13ee:	88 a7       	std	Y+40, r24	; 0x28
    13f0:	88 a5       	ldd	r24, Y+40	; 0x28
    13f2:	99 a5       	ldd	r25, Y+41	; 0x29
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <LCD_vidDisplayCharacter+0x2ec>
    13f8:	99 a7       	std	Y+41, r25	; 0x29
    13fa:	88 a7       	std	Y+40, r24	; 0x28
    13fc:	2a c0       	rjmp	.+84     	; 0x1452 <LCD_vidDisplayCharacter+0x34a>
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	4f e7       	ldi	r20, 0x7F	; 127
    1404:	53 e4       	ldi	r21, 0x43	; 67
    1406:	6b 89       	ldd	r22, Y+19	; 0x13
    1408:	7c 89       	ldd	r23, Y+20	; 0x14
    140a:	8d 89       	ldd	r24, Y+21	; 0x15
    140c:	9e 89       	ldd	r25, Y+22	; 0x16
    140e:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__gesf2>
    1412:	18 16       	cp	r1, r24
    1414:	ac f4       	brge	.+42     	; 0x1440 <LCD_vidDisplayCharacter+0x338>
    1416:	6f 89       	ldd	r22, Y+23	; 0x17
    1418:	78 8d       	ldd	r23, Y+24	; 0x18
    141a:	89 8d       	ldd	r24, Y+25	; 0x19
    141c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    141e:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	9b a7       	std	Y+43, r25	; 0x2b
    1428:	8a a7       	std	Y+42, r24	; 0x2a
    142a:	8a a5       	ldd	r24, Y+42	; 0x2a
    142c:	9b a5       	ldd	r25, Y+43	; 0x2b
    142e:	9d a7       	std	Y+45, r25	; 0x2d
    1430:	8c a7       	std	Y+44, r24	; 0x2c
    1432:	8c a5       	ldd	r24, Y+44	; 0x2c
    1434:	9d a5       	ldd	r25, Y+45	; 0x2d
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	f1 f7       	brne	.-4      	; 0x1436 <LCD_vidDisplayCharacter+0x32e>
    143a:	9d a7       	std	Y+45, r25	; 0x2d
    143c:	8c a7       	std	Y+44, r24	; 0x2c
    143e:	0f c0       	rjmp	.+30     	; 0x145e <LCD_vidDisplayCharacter+0x356>
    1440:	6b 89       	ldd	r22, Y+19	; 0x13
    1442:	7c 89       	ldd	r23, Y+20	; 0x14
    1444:	8d 89       	ldd	r24, Y+21	; 0x15
    1446:	9e 89       	ldd	r25, Y+22	; 0x16
    1448:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	8b 8f       	std	Y+27, r24	; 0x1b
    1452:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1454:	8e a7       	std	Y+46, r24	; 0x2e
    1456:	8e a5       	ldd	r24, Y+46	; 0x2e
    1458:	8a 95       	dec	r24
    145a:	f1 f7       	brne	.-4      	; 0x1458 <LCD_vidDisplayCharacter+0x350>
    145c:	8e a7       	std	Y+46, r24	; 0x2e
    145e:	ce 01       	movw	r24, r28
    1460:	83 5b       	subi	r24, 0xB3	; 179
    1462:	9f 4f       	sbci	r25, 0xFF	; 255
    1464:	fc 01       	movw	r30, r24
    1466:	80 81       	ld	r24, Z
    1468:	8f 70       	andi	r24, 0x0F	; 15
    146a:	8a 83       	std	Y+2, r24	; 0x02
    146c:	19 82       	std	Y+1, r1	; 0x01
    146e:	1a c0       	rjmp	.+52     	; 0x14a4 <LCD_vidDisplayCharacter+0x39c>
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	88 2f       	mov	r24, r24
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	29 81       	ldd	r18, Y+1	; 0x01
    1478:	22 2f       	mov	r18, r18
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <LCD_vidDisplayCharacter+0x37a>
    147e:	95 95       	asr	r25
    1480:	87 95       	ror	r24
    1482:	2a 95       	dec	r18
    1484:	e2 f7       	brpl	.-8      	; 0x147e <LCD_vidDisplayCharacter+0x376>
    1486:	28 2f       	mov	r18, r24
    1488:	21 70       	andi	r18, 0x01	; 1
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	80 59       	subi	r24, 0x90	; 144
    1492:	9f 4f       	sbci	r25, 0xFF	; 255
    1494:	fc 01       	movw	r30, r24
    1496:	80 81       	ld	r24, Z
    1498:	62 2f       	mov	r22, r18
    149a:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	8f 5f       	subi	r24, 0xFF	; 255
    14a2:	89 83       	std	Y+1, r24	; 0x01
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	84 30       	cpi	r24, 0x04	; 4
    14a8:	18 f3       	brcs	.-58     	; 0x1470 <LCD_vidDisplayCharacter+0x368>
    14aa:	61 e0       	ldi	r22, 0x01	; 1
    14ac:	82 e0       	ldi	r24, 0x02	; 2
    14ae:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	a0 e8       	ldi	r26, 0x80	; 128
    14b8:	bf e3       	ldi	r27, 0x3F	; 63
    14ba:	8b 87       	std	Y+11, r24	; 0x0b
    14bc:	9c 87       	std	Y+12, r25	; 0x0c
    14be:	ad 87       	std	Y+13, r26	; 0x0d
    14c0:	be 87       	std	Y+14, r27	; 0x0e
    14c2:	8e 01       	movw	r16, r28
    14c4:	0d 5b       	subi	r16, 0xBD	; 189
    14c6:	1f 4f       	sbci	r17, 0xFF	; 255
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	4a e7       	ldi	r20, 0x7A	; 122
    14ce:	55 e4       	ldi	r21, 0x45	; 69
    14d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d8:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	f8 01       	movw	r30, r16
    14e2:	80 83       	st	Z, r24
    14e4:	91 83       	std	Z+1, r25	; 0x01
    14e6:	a2 83       	std	Z+2, r26	; 0x02
    14e8:	b3 83       	std	Z+3, r27	; 0x03
    14ea:	ce 01       	movw	r24, r28
    14ec:	8d 5b       	subi	r24, 0xBD	; 189
    14ee:	9f 4f       	sbci	r25, 0xFF	; 255
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	40 e8       	ldi	r20, 0x80	; 128
    14f6:	5f e3       	ldi	r21, 0x3F	; 63
    14f8:	fc 01       	movw	r30, r24
    14fa:	60 81       	ld	r22, Z
    14fc:	71 81       	ldd	r23, Z+1	; 0x01
    14fe:	82 81       	ldd	r24, Z+2	; 0x02
    1500:	93 81       	ldd	r25, Z+3	; 0x03
    1502:	0e 94 0b 12 	call	0x2416	; 0x2416 <__cmpsf2>
    1506:	88 23       	and	r24, r24
    1508:	4c f4       	brge	.+18     	; 0x151c <LCD_vidDisplayCharacter+0x414>
    150a:	ce 01       	movw	r24, r28
    150c:	89 5b       	subi	r24, 0xB9	; 185
    150e:	9f 4f       	sbci	r25, 0xFF	; 255
    1510:	21 e0       	ldi	r18, 0x01	; 1
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	fc 01       	movw	r30, r24
    1516:	31 83       	std	Z+1, r19	; 0x01
    1518:	20 83       	st	Z, r18
    151a:	69 c0       	rjmp	.+210    	; 0x15ee <LCD_vidDisplayCharacter+0x4e6>
    151c:	ce 01       	movw	r24, r28
    151e:	8d 5b       	subi	r24, 0xBD	; 189
    1520:	9f 4f       	sbci	r25, 0xFF	; 255
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	3f ef       	ldi	r19, 0xFF	; 255
    1526:	4f e7       	ldi	r20, 0x7F	; 127
    1528:	57 e4       	ldi	r21, 0x47	; 71
    152a:	fc 01       	movw	r30, r24
    152c:	60 81       	ld	r22, Z
    152e:	71 81       	ldd	r23, Z+1	; 0x01
    1530:	82 81       	ldd	r24, Z+2	; 0x02
    1532:	93 81       	ldd	r25, Z+3	; 0x03
    1534:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__gesf2>
    1538:	18 16       	cp	r1, r24
    153a:	0c f0       	brlt	.+2      	; 0x153e <LCD_vidDisplayCharacter+0x436>
    153c:	46 c0       	rjmp	.+140    	; 0x15ca <LCD_vidDisplayCharacter+0x4c2>
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e2       	ldi	r20, 0x20	; 32
    1544:	51 e4       	ldi	r21, 0x41	; 65
    1546:	6b 85       	ldd	r22, Y+11	; 0x0b
    1548:	7c 85       	ldd	r23, Y+12	; 0x0c
    154a:	8d 85       	ldd	r24, Y+13	; 0x0d
    154c:	9e 85       	ldd	r25, Y+14	; 0x0e
    154e:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	8e 01       	movw	r16, r28
    1558:	09 5b       	subi	r16, 0xB9	; 185
    155a:	1f 4f       	sbci	r17, 0xFF	; 255
    155c:	bc 01       	movw	r22, r24
    155e:	cd 01       	movw	r24, r26
    1560:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	f8 01       	movw	r30, r16
    156a:	91 83       	std	Z+1, r25	; 0x01
    156c:	80 83       	st	Z, r24
    156e:	24 c0       	rjmp	.+72     	; 0x15b8 <LCD_vidDisplayCharacter+0x4b0>
    1570:	ce 01       	movw	r24, r28
    1572:	87 5b       	subi	r24, 0xB7	; 183
    1574:	9f 4f       	sbci	r25, 0xFF	; 255
    1576:	20 e9       	ldi	r18, 0x90	; 144
    1578:	31 e0       	ldi	r19, 0x01	; 1
    157a:	fc 01       	movw	r30, r24
    157c:	31 83       	std	Z+1, r19	; 0x01
    157e:	20 83       	st	Z, r18
    1580:	ce 01       	movw	r24, r28
    1582:	87 5b       	subi	r24, 0xB7	; 183
    1584:	9f 4f       	sbci	r25, 0xFF	; 255
    1586:	fc 01       	movw	r30, r24
    1588:	80 81       	ld	r24, Z
    158a:	91 81       	ldd	r25, Z+1	; 0x01
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <LCD_vidDisplayCharacter+0x484>
    1590:	9e 01       	movw	r18, r28
    1592:	27 5b       	subi	r18, 0xB7	; 183
    1594:	3f 4f       	sbci	r19, 0xFF	; 255
    1596:	f9 01       	movw	r30, r18
    1598:	91 83       	std	Z+1, r25	; 0x01
    159a:	80 83       	st	Z, r24
    159c:	ce 01       	movw	r24, r28
    159e:	89 5b       	subi	r24, 0xB9	; 185
    15a0:	9f 4f       	sbci	r25, 0xFF	; 255
    15a2:	9e 01       	movw	r18, r28
    15a4:	29 5b       	subi	r18, 0xB9	; 185
    15a6:	3f 4f       	sbci	r19, 0xFF	; 255
    15a8:	f9 01       	movw	r30, r18
    15aa:	20 81       	ld	r18, Z
    15ac:	31 81       	ldd	r19, Z+1	; 0x01
    15ae:	21 50       	subi	r18, 0x01	; 1
    15b0:	31 09       	sbc	r19, r1
    15b2:	fc 01       	movw	r30, r24
    15b4:	31 83       	std	Z+1, r19	; 0x01
    15b6:	20 83       	st	Z, r18
    15b8:	ce 01       	movw	r24, r28
    15ba:	89 5b       	subi	r24, 0xB9	; 185
    15bc:	9f 4f       	sbci	r25, 0xFF	; 255
    15be:	fc 01       	movw	r30, r24
    15c0:	80 81       	ld	r24, Z
    15c2:	91 81       	ldd	r25, Z+1	; 0x01
    15c4:	89 2b       	or	r24, r25
    15c6:	a1 f6       	brne	.-88     	; 0x1570 <LCD_vidDisplayCharacter+0x468>
    15c8:	2c c0       	rjmp	.+88     	; 0x1622 <LCD_vidDisplayCharacter+0x51a>
    15ca:	8e 01       	movw	r16, r28
    15cc:	09 5b       	subi	r16, 0xB9	; 185
    15ce:	1f 4f       	sbci	r17, 0xFF	; 255
    15d0:	ce 01       	movw	r24, r28
    15d2:	8d 5b       	subi	r24, 0xBD	; 189
    15d4:	9f 4f       	sbci	r25, 0xFF	; 255
    15d6:	fc 01       	movw	r30, r24
    15d8:	60 81       	ld	r22, Z
    15da:	71 81       	ldd	r23, Z+1	; 0x01
    15dc:	82 81       	ldd	r24, Z+2	; 0x02
    15de:	93 81       	ldd	r25, Z+3	; 0x03
    15e0:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	f8 01       	movw	r30, r16
    15ea:	91 83       	std	Z+1, r25	; 0x01
    15ec:	80 83       	st	Z, r24
    15ee:	ce 01       	movw	r24, r28
    15f0:	85 5b       	subi	r24, 0xB5	; 181
    15f2:	9f 4f       	sbci	r25, 0xFF	; 255
    15f4:	9e 01       	movw	r18, r28
    15f6:	29 5b       	subi	r18, 0xB9	; 185
    15f8:	3f 4f       	sbci	r19, 0xFF	; 255
    15fa:	f9 01       	movw	r30, r18
    15fc:	20 81       	ld	r18, Z
    15fe:	31 81       	ldd	r19, Z+1	; 0x01
    1600:	fc 01       	movw	r30, r24
    1602:	31 83       	std	Z+1, r19	; 0x01
    1604:	20 83       	st	Z, r18
    1606:	ce 01       	movw	r24, r28
    1608:	85 5b       	subi	r24, 0xB5	; 181
    160a:	9f 4f       	sbci	r25, 0xFF	; 255
    160c:	fc 01       	movw	r30, r24
    160e:	80 81       	ld	r24, Z
    1610:	91 81       	ldd	r25, Z+1	; 0x01
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <LCD_vidDisplayCharacter+0x50a>
    1616:	9e 01       	movw	r18, r28
    1618:	25 5b       	subi	r18, 0xB5	; 181
    161a:	3f 4f       	sbci	r19, 0xFF	; 255
    161c:	f9 01       	movw	r30, r18
    161e:	91 83       	std	Z+1, r25	; 0x01
    1620:	80 83       	st	Z, r24
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	82 e0       	ldi	r24, 0x02	; 2
    1626:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <DIO_enu_WriteChannel>
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	a0 e0       	ldi	r26, 0x00	; 0
    1630:	b0 e4       	ldi	r27, 0x40	; 64
    1632:	8b 83       	std	Y+3, r24	; 0x03
    1634:	9c 83       	std	Y+4, r25	; 0x04
    1636:	ad 83       	std	Y+5, r26	; 0x05
    1638:	be 83       	std	Y+6, r27	; 0x06
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	4a e7       	ldi	r20, 0x7A	; 122
    1640:	55 e4       	ldi	r21, 0x45	; 69
    1642:	6b 81       	ldd	r22, Y+3	; 0x03
    1644:	7c 81       	ldd	r23, Y+4	; 0x04
    1646:	8d 81       	ldd	r24, Y+5	; 0x05
    1648:	9e 81       	ldd	r25, Y+6	; 0x06
    164a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	89 af       	std	Y+57, r24	; 0x39
    1654:	9a af       	std	Y+58, r25	; 0x3a
    1656:	ab af       	std	Y+59, r26	; 0x3b
    1658:	bc af       	std	Y+60, r27	; 0x3c
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	40 e8       	ldi	r20, 0x80	; 128
    1660:	5f e3       	ldi	r21, 0x3F	; 63
    1662:	69 ad       	ldd	r22, Y+57	; 0x39
    1664:	7a ad       	ldd	r23, Y+58	; 0x3a
    1666:	8b ad       	ldd	r24, Y+59	; 0x3b
    1668:	9c ad       	ldd	r25, Y+60	; 0x3c
    166a:	0e 94 0b 12 	call	0x2416	; 0x2416 <__cmpsf2>
    166e:	88 23       	and	r24, r24
    1670:	2c f4       	brge	.+10     	; 0x167c <LCD_vidDisplayCharacter+0x574>
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	9e af       	std	Y+62, r25	; 0x3e
    1678:	8d af       	std	Y+61, r24	; 0x3d
    167a:	49 c0       	rjmp	.+146    	; 0x170e <LCD_vidDisplayCharacter+0x606>
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	3f ef       	ldi	r19, 0xFF	; 255
    1680:	4f e7       	ldi	r20, 0x7F	; 127
    1682:	57 e4       	ldi	r21, 0x47	; 71
    1684:	69 ad       	ldd	r22, Y+57	; 0x39
    1686:	7a ad       	ldd	r23, Y+58	; 0x3a
    1688:	8b ad       	ldd	r24, Y+59	; 0x3b
    168a:	9c ad       	ldd	r25, Y+60	; 0x3c
    168c:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__gesf2>
    1690:	18 16       	cp	r1, r24
    1692:	9c f5       	brge	.+102    	; 0x16fa <LCD_vidDisplayCharacter+0x5f2>
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e2       	ldi	r20, 0x20	; 32
    169a:	51 e4       	ldi	r21, 0x41	; 65
    169c:	6b 81       	ldd	r22, Y+3	; 0x03
    169e:	7c 81       	ldd	r23, Y+4	; 0x04
    16a0:	8d 81       	ldd	r24, Y+5	; 0x05
    16a2:	9e 81       	ldd	r25, Y+6	; 0x06
    16a4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	bc 01       	movw	r22, r24
    16ae:	cd 01       	movw	r24, r26
    16b0:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	9e af       	std	Y+62, r25	; 0x3e
    16ba:	8d af       	std	Y+61, r24	; 0x3d
    16bc:	19 c0       	rjmp	.+50     	; 0x16f0 <LCD_vidDisplayCharacter+0x5e8>
    16be:	20 e9       	ldi	r18, 0x90	; 144
    16c0:	31 e0       	ldi	r19, 0x01	; 1
    16c2:	ce 01       	movw	r24, r28
    16c4:	cf 96       	adiw	r24, 0x3f	; 63
    16c6:	fc 01       	movw	r30, r24
    16c8:	31 83       	std	Z+1, r19	; 0x01
    16ca:	20 83       	st	Z, r18
    16cc:	ce 01       	movw	r24, r28
    16ce:	cf 96       	adiw	r24, 0x3f	; 63
    16d0:	fc 01       	movw	r30, r24
    16d2:	80 81       	ld	r24, Z
    16d4:	91 81       	ldd	r25, Z+1	; 0x01
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <LCD_vidDisplayCharacter+0x5ce>
    16da:	9e 01       	movw	r18, r28
    16dc:	21 5c       	subi	r18, 0xC1	; 193
    16de:	3f 4f       	sbci	r19, 0xFF	; 255
    16e0:	f9 01       	movw	r30, r18
    16e2:	91 83       	std	Z+1, r25	; 0x01
    16e4:	80 83       	st	Z, r24
    16e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    16e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	9e af       	std	Y+62, r25	; 0x3e
    16ee:	8d af       	std	Y+61, r24	; 0x3d
    16f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    16f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    16f4:	89 2b       	or	r24, r25
    16f6:	19 f7       	brne	.-58     	; 0x16be <LCD_vidDisplayCharacter+0x5b6>
    16f8:	20 c0       	rjmp	.+64     	; 0x173a <LCD_vidDisplayCharacter+0x632>
    16fa:	69 ad       	ldd	r22, Y+57	; 0x39
    16fc:	7a ad       	ldd	r23, Y+58	; 0x3a
    16fe:	8b ad       	ldd	r24, Y+59	; 0x3b
    1700:	9c ad       	ldd	r25, Y+60	; 0x3c
    1702:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	9e af       	std	Y+62, r25	; 0x3e
    170c:	8d af       	std	Y+61, r24	; 0x3d
    170e:	ce 01       	movw	r24, r28
    1710:	8f 5b       	subi	r24, 0xBF	; 191
    1712:	9f 4f       	sbci	r25, 0xFF	; 255
    1714:	2d ad       	ldd	r18, Y+61	; 0x3d
    1716:	3e ad       	ldd	r19, Y+62	; 0x3e
    1718:	fc 01       	movw	r30, r24
    171a:	31 83       	std	Z+1, r19	; 0x01
    171c:	20 83       	st	Z, r18
    171e:	ce 01       	movw	r24, r28
    1720:	8f 5b       	subi	r24, 0xBF	; 191
    1722:	9f 4f       	sbci	r25, 0xFF	; 255
    1724:	fc 01       	movw	r30, r24
    1726:	80 81       	ld	r24, Z
    1728:	91 81       	ldd	r25, Z+1	; 0x01
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	f1 f7       	brne	.-4      	; 0x172a <LCD_vidDisplayCharacter+0x622>
    172e:	9e 01       	movw	r18, r28
    1730:	2f 5b       	subi	r18, 0xBF	; 191
    1732:	3f 4f       	sbci	r19, 0xFF	; 255
    1734:	f9 01       	movw	r30, r18
    1736:	91 83       	std	Z+1, r25	; 0x01
    1738:	80 83       	st	Z, r24
    173a:	00 00       	nop
    173c:	c3 5b       	subi	r28, 0xB3	; 179
    173e:	df 4f       	sbci	r29, 0xFF	; 255
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	de bf       	out	0x3e, r29	; 62
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	cd bf       	out	0x3d, r28	; 61
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	1f 91       	pop	r17
    1750:	0f 91       	pop	r16
    1752:	08 95       	ret

00001754 <LCD_vidGoToXY>:
void LCD_vidGoToXY(u8 arg_u8_row,u8 arg_u8_col)
{
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	00 d0       	rcall	.+0      	; 0x175a <LCD_vidGoToXY+0x6>
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	89 83       	std	Y+1, r24	; 0x01
    1760:	6a 83       	std	Y+2, r22	; 0x02
	if(arg_u8_row == 0)
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	88 23       	and	r24, r24
    1766:	29 f4       	brne	.+10     	; 0x1772 <LCD_vidGoToXY+0x1e>
	{
	   LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0 + arg_u8_col);
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	80 58       	subi	r24, 0x80	; 128
    176c:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD_vidSendCommand>
	LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0x40 + arg_u8_col);
	else if (arg_u8_row == 2)
	LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0x14 + arg_u8_col);
	else if (arg_u8_row == 3)
	LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0x54 + arg_u8_col);
}
    1770:	17 c0       	rjmp	.+46     	; 0x17a0 <LCD_vidGoToXY+0x4c>
{
	if(arg_u8_row == 0)
	{
	   LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0 + arg_u8_col);
	}
	else if (arg_u8_row == 1)
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	81 30       	cpi	r24, 0x01	; 1
    1776:	29 f4       	brne	.+10     	; 0x1782 <LCD_vidGoToXY+0x2e>
	LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0x40 + arg_u8_col);
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	80 54       	subi	r24, 0x40	; 64
    177c:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD_vidSendCommand>
	else if (arg_u8_row == 2)
	LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0x14 + arg_u8_col);
	else if (arg_u8_row == 3)
	LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0x54 + arg_u8_col);
}
    1780:	0f c0       	rjmp	.+30     	; 0x17a0 <LCD_vidGoToXY+0x4c>
	{
	   LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0 + arg_u8_col);
	}
	else if (arg_u8_row == 1)
	LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0x40 + arg_u8_col);
	else if (arg_u8_row == 2)
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	82 30       	cpi	r24, 0x02	; 2
    1786:	29 f4       	brne	.+10     	; 0x1792 <LCD_vidGoToXY+0x3e>
	LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0x14 + arg_u8_col);
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	8c 56       	subi	r24, 0x6C	; 108
    178c:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD_vidSendCommand>
	else if (arg_u8_row == 3)
	LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0x54 + arg_u8_col);
}
    1790:	07 c0       	rjmp	.+14     	; 0x17a0 <LCD_vidGoToXY+0x4c>
	}
	else if (arg_u8_row == 1)
	LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0x40 + arg_u8_col);
	else if (arg_u8_row == 2)
	LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0x14 + arg_u8_col);
	else if (arg_u8_row == 3)
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	83 30       	cpi	r24, 0x03	; 3
    1796:	21 f4       	brne	.+8      	; 0x17a0 <LCD_vidGoToXY+0x4c>
	LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0x54 + arg_u8_col);
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	8c 52       	subi	r24, 0x2C	; 44
    179c:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD_vidSendCommand>
}
    17a0:	00 00       	nop
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	08 95       	ret

000017ac <LCD_vidDisplayString>:
void LCD_vidDisplayString(u8 *arg_u8_string)
{
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <LCD_vidDisplayString+0x6>
    17b2:	1f 92       	push	r1
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	9b 83       	std	Y+3, r25	; 0x03
    17ba:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_u8_itartor = FALSE;
    17bc:	19 82       	std	Y+1, r1	; 0x01
	while(arg_u8_string[loc_u8_itartor] != STR_NULL)
    17be:	0e c0       	rjmp	.+28     	; 0x17dc <LCD_vidDisplayString+0x30>
	{
		LCD_vidDisplayCharacter(arg_u8_string[loc_u8_itartor++]);
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	91 e0       	ldi	r25, 0x01	; 1
    17c4:	98 0f       	add	r25, r24
    17c6:	99 83       	std	Y+1, r25	; 0x01
    17c8:	88 2f       	mov	r24, r24
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	2a 81       	ldd	r18, Y+2	; 0x02
    17ce:	3b 81       	ldd	r19, Y+3	; 0x03
    17d0:	82 0f       	add	r24, r18
    17d2:	93 1f       	adc	r25, r19
    17d4:	fc 01       	movw	r30, r24
    17d6:	80 81       	ld	r24, Z
    17d8:	0e 94 84 08 	call	0x1108	; 0x1108 <LCD_vidDisplayCharacter>
	LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0x54 + arg_u8_col);
}
void LCD_vidDisplayString(u8 *arg_u8_string)
{
	u8 loc_u8_itartor = FALSE;
	while(arg_u8_string[loc_u8_itartor] != STR_NULL)
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	88 2f       	mov	r24, r24
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	2a 81       	ldd	r18, Y+2	; 0x02
    17e4:	3b 81       	ldd	r19, Y+3	; 0x03
    17e6:	82 0f       	add	r24, r18
    17e8:	93 1f       	adc	r25, r19
    17ea:	fc 01       	movw	r30, r24
    17ec:	80 81       	ld	r24, Z
    17ee:	88 23       	and	r24, r24
    17f0:	39 f7       	brne	.-50     	; 0x17c0 <LCD_vidDisplayString+0x14>
	{
		LCD_vidDisplayCharacter(arg_u8_string[loc_u8_itartor++]);
	}
}
    17f2:	00 00       	nop
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	08 95       	ret

00001800 <LCD_vidDisplayNumber>:
void LCD_vidDisplayNumber(u32 arg_u32_number)
{
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	28 97       	sbiw	r28, 0x08	; 8
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	6d 83       	std	Y+5, r22	; 0x05
    1816:	7e 83       	std	Y+6, r23	; 0x06
    1818:	8f 83       	std	Y+7, r24	; 0x07
    181a:	98 87       	std	Y+8, r25	; 0x08
	u32 loc_u8_inverse = 1;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	a0 e0       	ldi	r26, 0x00	; 0
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	9a 83       	std	Y+2, r25	; 0x02
    1828:	ab 83       	std	Y+3, r26	; 0x03
    182a:	bc 83       	std	Y+4, r27	; 0x04
	
	while(arg_u32_number != 0)
    182c:	48 c0       	rjmp	.+144    	; 0x18be <LCD_vidDisplayNumber+0xbe>
	{
		loc_u8_inverse*=10;
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	9a 81       	ldd	r25, Y+2	; 0x02
    1832:	ab 81       	ldd	r26, Y+3	; 0x03
    1834:	bc 81       	ldd	r27, Y+4	; 0x04
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	aa 1f       	adc	r26, r26
    183c:	bb 1f       	adc	r27, r27
    183e:	9c 01       	movw	r18, r24
    1840:	ad 01       	movw	r20, r26
    1842:	22 0f       	add	r18, r18
    1844:	33 1f       	adc	r19, r19
    1846:	44 1f       	adc	r20, r20
    1848:	55 1f       	adc	r21, r21
    184a:	22 0f       	add	r18, r18
    184c:	33 1f       	adc	r19, r19
    184e:	44 1f       	adc	r20, r20
    1850:	55 1f       	adc	r21, r21
    1852:	82 0f       	add	r24, r18
    1854:	93 1f       	adc	r25, r19
    1856:	a4 1f       	adc	r26, r20
    1858:	b5 1f       	adc	r27, r21
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	9a 83       	std	Y+2, r25	; 0x02
    185e:	ab 83       	std	Y+3, r26	; 0x03
    1860:	bc 83       	std	Y+4, r27	; 0x04
		loc_u8_inverse+=arg_u32_number%10;
    1862:	8d 81       	ldd	r24, Y+5	; 0x05
    1864:	9e 81       	ldd	r25, Y+6	; 0x06
    1866:	af 81       	ldd	r26, Y+7	; 0x07
    1868:	b8 85       	ldd	r27, Y+8	; 0x08
    186a:	2a e0       	ldi	r18, 0x0A	; 10
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e0       	ldi	r20, 0x00	; 0
    1870:	50 e0       	ldi	r21, 0x00	; 0
    1872:	bc 01       	movw	r22, r24
    1874:	cd 01       	movw	r24, r26
    1876:	0e 94 e5 13 	call	0x27ca	; 0x27ca <__udivmodsi4>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	9c 01       	movw	r18, r24
    1880:	ad 01       	movw	r20, r26
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	9a 81       	ldd	r25, Y+2	; 0x02
    1886:	ab 81       	ldd	r26, Y+3	; 0x03
    1888:	bc 81       	ldd	r27, Y+4	; 0x04
    188a:	82 0f       	add	r24, r18
    188c:	93 1f       	adc	r25, r19
    188e:	a4 1f       	adc	r26, r20
    1890:	b5 1f       	adc	r27, r21
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	ab 83       	std	Y+3, r26	; 0x03
    1898:	bc 83       	std	Y+4, r27	; 0x04
		arg_u32_number/=10;
    189a:	8d 81       	ldd	r24, Y+5	; 0x05
    189c:	9e 81       	ldd	r25, Y+6	; 0x06
    189e:	af 81       	ldd	r26, Y+7	; 0x07
    18a0:	b8 85       	ldd	r27, Y+8	; 0x08
    18a2:	2a e0       	ldi	r18, 0x0A	; 10
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	40 e0       	ldi	r20, 0x00	; 0
    18a8:	50 e0       	ldi	r21, 0x00	; 0
    18aa:	bc 01       	movw	r22, r24
    18ac:	cd 01       	movw	r24, r26
    18ae:	0e 94 e5 13 	call	0x27ca	; 0x27ca <__udivmodsi4>
    18b2:	da 01       	movw	r26, r20
    18b4:	c9 01       	movw	r24, r18
    18b6:	8d 83       	std	Y+5, r24	; 0x05
    18b8:	9e 83       	std	Y+6, r25	; 0x06
    18ba:	af 83       	std	Y+7, r26	; 0x07
    18bc:	b8 87       	std	Y+8, r27	; 0x08
}
void LCD_vidDisplayNumber(u32 arg_u32_number)
{
	u32 loc_u8_inverse = 1;
	
	while(arg_u32_number != 0)
    18be:	8d 81       	ldd	r24, Y+5	; 0x05
    18c0:	9e 81       	ldd	r25, Y+6	; 0x06
    18c2:	af 81       	ldd	r26, Y+7	; 0x07
    18c4:	b8 85       	ldd	r27, Y+8	; 0x08
    18c6:	89 2b       	or	r24, r25
    18c8:	8a 2b       	or	r24, r26
    18ca:	8b 2b       	or	r24, r27
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <LCD_vidDisplayNumber+0xd0>
    18ce:	af cf       	rjmp	.-162    	; 0x182e <LCD_vidDisplayNumber+0x2e>
		loc_u8_inverse*=10;
		loc_u8_inverse+=arg_u32_number%10;
		arg_u32_number/=10;
	}
	
	while(loc_u8_inverse != 1)
    18d0:	23 c0       	rjmp	.+70     	; 0x1918 <LCD_vidDisplayNumber+0x118>
	{
		LCD_vidDisplayCharacter((loc_u8_inverse%10)+'0');
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	9a 81       	ldd	r25, Y+2	; 0x02
    18d6:	ab 81       	ldd	r26, Y+3	; 0x03
    18d8:	bc 81       	ldd	r27, Y+4	; 0x04
    18da:	2a e0       	ldi	r18, 0x0A	; 10
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e0       	ldi	r20, 0x00	; 0
    18e0:	50 e0       	ldi	r21, 0x00	; 0
    18e2:	bc 01       	movw	r22, r24
    18e4:	cd 01       	movw	r24, r26
    18e6:	0e 94 e5 13 	call	0x27ca	; 0x27ca <__udivmodsi4>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	80 5d       	subi	r24, 0xD0	; 208
    18f0:	0e 94 84 08 	call	0x1108	; 0x1108 <LCD_vidDisplayCharacter>
		loc_u8_inverse/=10;
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	9a 81       	ldd	r25, Y+2	; 0x02
    18f8:	ab 81       	ldd	r26, Y+3	; 0x03
    18fa:	bc 81       	ldd	r27, Y+4	; 0x04
    18fc:	2a e0       	ldi	r18, 0x0A	; 10
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e0       	ldi	r20, 0x00	; 0
    1902:	50 e0       	ldi	r21, 0x00	; 0
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	0e 94 e5 13 	call	0x27ca	; 0x27ca <__udivmodsi4>
    190c:	da 01       	movw	r26, r20
    190e:	c9 01       	movw	r24, r18
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	9a 83       	std	Y+2, r25	; 0x02
    1914:	ab 83       	std	Y+3, r26	; 0x03
    1916:	bc 83       	std	Y+4, r27	; 0x04
		loc_u8_inverse*=10;
		loc_u8_inverse+=arg_u32_number%10;
		arg_u32_number/=10;
	}
	
	while(loc_u8_inverse != 1)
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	9a 81       	ldd	r25, Y+2	; 0x02
    191c:	ab 81       	ldd	r26, Y+3	; 0x03
    191e:	bc 81       	ldd	r27, Y+4	; 0x04
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	a1 05       	cpc	r26, r1
    1924:	b1 05       	cpc	r27, r1
    1926:	a9 f6       	brne	.-86     	; 0x18d2 <LCD_vidDisplayNumber+0xd2>
	{
		LCD_vidDisplayCharacter((loc_u8_inverse%10)+'0');
		loc_u8_inverse/=10;
	}
}
    1928:	00 00       	nop
    192a:	28 96       	adiw	r28, 0x08	; 8
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	08 95       	ret

0000193c <LCD_vidClrDisplay>:
void LCD_vidClrDisplay(void)
{
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	6c 97       	sbiw	r28, 0x1c	; 28
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
	LCD_vidSendCommand(LCD_CLEAR_DISPLAY);
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD_vidSendCommand>
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	a0 e8       	ldi	r26, 0x80	; 128
    195c:	b0 e4       	ldi	r27, 0x40	; 64
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	9a 83       	std	Y+2, r25	; 0x02
    1962:	ab 83       	std	Y+3, r26	; 0x03
    1964:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	4a e7       	ldi	r20, 0x7A	; 122
    196c:	55 e4       	ldi	r21, 0x45	; 69
    196e:	69 81       	ldd	r22, Y+1	; 0x01
    1970:	7a 81       	ldd	r23, Y+2	; 0x02
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	9c 81       	ldd	r25, Y+4	; 0x04
    1976:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	8b 8b       	std	Y+19, r24	; 0x13
    1980:	9c 8b       	std	Y+20, r25	; 0x14
    1982:	ad 8b       	std	Y+21, r26	; 0x15
    1984:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e8       	ldi	r20, 0x80	; 128
    198c:	5f e3       	ldi	r21, 0x3F	; 63
    198e:	6b 89       	ldd	r22, Y+19	; 0x13
    1990:	7c 89       	ldd	r23, Y+20	; 0x14
    1992:	8d 89       	ldd	r24, Y+21	; 0x15
    1994:	9e 89       	ldd	r25, Y+22	; 0x16
    1996:	0e 94 0b 12 	call	0x2416	; 0x2416 <__cmpsf2>
    199a:	88 23       	and	r24, r24
    199c:	2c f4       	brge	.+10     	; 0x19a8 <LCD_vidClrDisplay+0x6c>
		__ticks = 1;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	98 8f       	std	Y+24, r25	; 0x18
    19a4:	8f 8b       	std	Y+23, r24	; 0x17
    19a6:	3f c0       	rjmp	.+126    	; 0x1a26 <LCD_vidClrDisplay+0xea>
	else if (__tmp > 65535)
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	3f ef       	ldi	r19, 0xFF	; 255
    19ac:	4f e7       	ldi	r20, 0x7F	; 127
    19ae:	57 e4       	ldi	r21, 0x47	; 71
    19b0:	6b 89       	ldd	r22, Y+19	; 0x13
    19b2:	7c 89       	ldd	r23, Y+20	; 0x14
    19b4:	8d 89       	ldd	r24, Y+21	; 0x15
    19b6:	9e 89       	ldd	r25, Y+22	; 0x16
    19b8:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__gesf2>
    19bc:	18 16       	cp	r1, r24
    19be:	4c f5       	brge	.+82     	; 0x1a12 <LCD_vidClrDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e2       	ldi	r20, 0x20	; 32
    19c6:	51 e4       	ldi	r21, 0x41	; 65
    19c8:	69 81       	ldd	r22, Y+1	; 0x01
    19ca:	7a 81       	ldd	r23, Y+2	; 0x02
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	9c 81       	ldd	r25, Y+4	; 0x04
    19d0:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	bc 01       	movw	r22, r24
    19da:	cd 01       	movw	r24, r26
    19dc:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	98 8f       	std	Y+24, r25	; 0x18
    19e6:	8f 8b       	std	Y+23, r24	; 0x17
    19e8:	0f c0       	rjmp	.+30     	; 0x1a08 <LCD_vidClrDisplay+0xcc>
    19ea:	80 e9       	ldi	r24, 0x90	; 144
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	9a 8f       	std	Y+26, r25	; 0x1a
    19f0:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19f2:	89 8d       	ldd	r24, Y+25	; 0x19
    19f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <LCD_vidClrDisplay+0xba>
    19fa:	9a 8f       	std	Y+26, r25	; 0x1a
    19fc:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1a00:	98 8d       	ldd	r25, Y+24	; 0x18
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	98 8f       	std	Y+24, r25	; 0x18
    1a06:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a08:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a0c:	89 2b       	or	r24, r25
    1a0e:	69 f7       	brne	.-38     	; 0x19ea <LCD_vidClrDisplay+0xae>
    1a10:	14 c0       	rjmp	.+40     	; 0x1a3a <LCD_vidClrDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a12:	6b 89       	ldd	r22, Y+19	; 0x13
    1a14:	7c 89       	ldd	r23, Y+20	; 0x14
    1a16:	8d 89       	ldd	r24, Y+21	; 0x15
    1a18:	9e 89       	ldd	r25, Y+22	; 0x16
    1a1a:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	98 8f       	std	Y+24, r25	; 0x18
    1a24:	8f 8b       	std	Y+23, r24	; 0x17
    1a26:	8f 89       	ldd	r24, Y+23	; 0x17
    1a28:	98 8d       	ldd	r25, Y+24	; 0x18
    1a2a:	9c 8f       	std	Y+28, r25	; 0x1c
    1a2c:	8b 8f       	std	Y+27, r24	; 0x1b
    1a2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	f1 f7       	brne	.-4      	; 0x1a32 <LCD_vidClrDisplay+0xf6>
    1a36:	9c 8f       	std	Y+28, r25	; 0x1c
    1a38:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(4);
	LCD_vidSendCommand(LCD_CURSOR_HOME);
    1a3a:	82 e0       	ldi	r24, 0x02	; 2
    1a3c:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD_vidSendCommand>
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	a0 e8       	ldi	r26, 0x80	; 128
    1a46:	b0 e4       	ldi	r27, 0x40	; 64
    1a48:	8d 83       	std	Y+5, r24	; 0x05
    1a4a:	9e 83       	std	Y+6, r25	; 0x06
    1a4c:	af 83       	std	Y+7, r26	; 0x07
    1a4e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	4a e7       	ldi	r20, 0x7A	; 122
    1a56:	55 e4       	ldi	r21, 0x45	; 69
    1a58:	6d 81       	ldd	r22, Y+5	; 0x05
    1a5a:	7e 81       	ldd	r23, Y+6	; 0x06
    1a5c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a5e:	98 85       	ldd	r25, Y+8	; 0x08
    1a60:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	89 87       	std	Y+9, r24	; 0x09
    1a6a:	9a 87       	std	Y+10, r25	; 0x0a
    1a6c:	ab 87       	std	Y+11, r26	; 0x0b
    1a6e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e8       	ldi	r20, 0x80	; 128
    1a76:	5f e3       	ldi	r21, 0x3F	; 63
    1a78:	69 85       	ldd	r22, Y+9	; 0x09
    1a7a:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a7e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a80:	0e 94 0b 12 	call	0x2416	; 0x2416 <__cmpsf2>
    1a84:	88 23       	and	r24, r24
    1a86:	2c f4       	brge	.+10     	; 0x1a92 <LCD_vidClrDisplay+0x156>
		__ticks = 1;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	9e 87       	std	Y+14, r25	; 0x0e
    1a8e:	8d 87       	std	Y+13, r24	; 0x0d
    1a90:	3f c0       	rjmp	.+126    	; 0x1b10 <LCD_vidClrDisplay+0x1d4>
	else if (__tmp > 65535)
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	3f ef       	ldi	r19, 0xFF	; 255
    1a96:	4f e7       	ldi	r20, 0x7F	; 127
    1a98:	57 e4       	ldi	r21, 0x47	; 71
    1a9a:	69 85       	ldd	r22, Y+9	; 0x09
    1a9c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1aa0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1aa2:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__gesf2>
    1aa6:	18 16       	cp	r1, r24
    1aa8:	4c f5       	brge	.+82     	; 0x1afc <LCD_vidClrDisplay+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e2       	ldi	r20, 0x20	; 32
    1ab0:	51 e4       	ldi	r21, 0x41	; 65
    1ab2:	6d 81       	ldd	r22, Y+5	; 0x05
    1ab4:	7e 81       	ldd	r23, Y+6	; 0x06
    1ab6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab8:	98 85       	ldd	r25, Y+8	; 0x08
    1aba:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	bc 01       	movw	r22, r24
    1ac4:	cd 01       	movw	r24, r26
    1ac6:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	9e 87       	std	Y+14, r25	; 0x0e
    1ad0:	8d 87       	std	Y+13, r24	; 0x0d
    1ad2:	0f c0       	rjmp	.+30     	; 0x1af2 <LCD_vidClrDisplay+0x1b6>
    1ad4:	80 e9       	ldi	r24, 0x90	; 144
    1ad6:	91 e0       	ldi	r25, 0x01	; 1
    1ad8:	98 8b       	std	Y+16, r25	; 0x10
    1ada:	8f 87       	std	Y+15, r24	; 0x0f
    1adc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ade:	98 89       	ldd	r25, Y+16	; 0x10
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <LCD_vidClrDisplay+0x1a4>
    1ae4:	98 8b       	std	Y+16, r25	; 0x10
    1ae6:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	9e 87       	std	Y+14, r25	; 0x0e
    1af0:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af6:	89 2b       	or	r24, r25
    1af8:	69 f7       	brne	.-38     	; 0x1ad4 <LCD_vidClrDisplay+0x198>
	_delay_ms(4);

}
    1afa:	14 c0       	rjmp	.+40     	; 0x1b24 <LCD_vidClrDisplay+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1afc:	69 85       	ldd	r22, Y+9	; 0x09
    1afe:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b00:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b02:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b04:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	9e 87       	std	Y+14, r25	; 0x0e
    1b0e:	8d 87       	std	Y+13, r24	; 0x0d
    1b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b14:	9a 8b       	std	Y+18, r25	; 0x12
    1b16:	89 8b       	std	Y+17, r24	; 0x11
    1b18:	89 89       	ldd	r24, Y+17	; 0x11
    1b1a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	f1 f7       	brne	.-4      	; 0x1b1c <LCD_vidClrDisplay+0x1e0>
    1b20:	9a 8b       	std	Y+18, r25	; 0x12
    1b22:	89 8b       	std	Y+17, r24	; 0x11
    1b24:	00 00       	nop
    1b26:	6c 96       	adiw	r28, 0x1c	; 28
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28
    1b36:	08 95       	ret

00001b38 <DIO_enu_WriteChannel>:
#include "Dio_prv.h"
#include "Dio.h"
#include "Dio_cfg.h"

DIO_enu_return_status_t DIO_enu_WriteChannel(DIO_enu_PinId_t arg_enu_pinId,DIO_enu_PinLevel_t arg_enu_pinLevel)
{
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <DIO_enu_WriteChannel+0x6>
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <DIO_enu_WriteChannel+0x8>
    1b40:	1f 92       	push	r1
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	8c 83       	std	Y+4, r24	; 0x04
    1b48:	6d 83       	std	Y+5, r22	; 0x05
	DIO_enu_return_status_t loc_enu_return_status = STATUS_DIO_OKAY;
    1b4a:	19 82       	std	Y+1, r1	; 0x01
	u8 loc_u8_pinNumber  = arg_enu_pinId % REG_SIZE ;
    1b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4e:	87 70       	andi	r24, 0x07	; 7
    1b50:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_u8_portNumber = arg_enu_pinId / REG_SIZE ;
    1b52:	8c 81       	ldd	r24, Y+4	; 0x04
    1b54:	86 95       	lsr	r24
    1b56:	86 95       	lsr	r24
    1b58:	86 95       	lsr	r24
    1b5a:	8b 83       	std	Y+3, r24	; 0x03
	
	if( arg_enu_pinId >= DIO_PINID_ERROR)
    1b5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5e:	80 32       	cpi	r24, 0x20	; 32
    1b60:	18 f0       	brcs	.+6      	; 0x1b68 <DIO_enu_WriteChannel+0x30>
	{
		loc_enu_return_status = STATUS_DIO_PIN_NUMBER_ERROR;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	d2 c0       	rjmp	.+420    	; 0x1d0c <DIO_enu_WriteChannel+0x1d4>
	}
	else if( arg_enu_pinLevel >= DIO_PIN_LEVEL_ERROR)
    1b68:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6a:	82 30       	cpi	r24, 0x02	; 2
    1b6c:	18 f0       	brcs	.+6      	; 0x1b74 <DIO_enu_WriteChannel+0x3c>
	{
		loc_enu_return_status = STATUS_DIO_PIN_LEVEL_CHOICE_ERROR;
    1b6e:	82 e0       	ldi	r24, 0x02	; 2
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	cc c0       	rjmp	.+408    	; 0x1d0c <DIO_enu_WriteChannel+0x1d4>
	}
	else
	{
		switch(loc_u8_portNumber)
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	88 2f       	mov	r24, r24
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	81 30       	cpi	r24, 0x01	; 1
    1b7c:	91 05       	cpc	r25, r1
    1b7e:	e1 f1       	breq	.+120    	; 0x1bf8 <DIO_enu_WriteChannel+0xc0>
    1b80:	82 30       	cpi	r24, 0x02	; 2
    1b82:	91 05       	cpc	r25, r1
    1b84:	1c f4       	brge	.+6      	; 0x1b8c <DIO_enu_WriteChannel+0x54>
    1b86:	89 2b       	or	r24, r25
    1b88:	49 f0       	breq	.+18     	; 0x1b9c <DIO_enu_WriteChannel+0x64>
    1b8a:	c0 c0       	rjmp	.+384    	; 0x1d0c <DIO_enu_WriteChannel+0x1d4>
    1b8c:	82 30       	cpi	r24, 0x02	; 2
    1b8e:	91 05       	cpc	r25, r1
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <DIO_enu_WriteChannel+0x5c>
    1b92:	60 c0       	rjmp	.+192    	; 0x1c54 <DIO_enu_WriteChannel+0x11c>
    1b94:	03 97       	sbiw	r24, 0x03	; 3
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <DIO_enu_WriteChannel+0x62>
    1b98:	8b c0       	rjmp	.+278    	; 0x1cb0 <DIO_enu_WriteChannel+0x178>
    1b9a:	b8 c0       	rjmp	.+368    	; 0x1d0c <DIO_enu_WriteChannel+0x1d4>
		{
			case DIO_PORT_NUMBER_A :
			{
				(arg_enu_pinLevel == DIO_PIN_LEVEL_LOW)?CLR_BIT(DIO_PORTA,loc_u8_pinNumber):SET_BIT(DIO_PORTA,loc_u8_pinNumber);
    1b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9e:	88 23       	and	r24, r24
    1ba0:	b1 f4       	brne	.+44     	; 0x1bce <DIO_enu_WriteChannel+0x96>
    1ba2:	8b e3       	ldi	r24, 0x3B	; 59
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	2b e3       	ldi	r18, 0x3B	; 59
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	f9 01       	movw	r30, r18
    1bac:	20 81       	ld	r18, Z
    1bae:	62 2f       	mov	r22, r18
    1bb0:	2a 81       	ldd	r18, Y+2	; 0x02
    1bb2:	42 2f       	mov	r20, r18
    1bb4:	50 e0       	ldi	r21, 0x00	; 0
    1bb6:	21 e0       	ldi	r18, 0x01	; 1
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <DIO_enu_WriteChannel+0x88>
    1bbc:	22 0f       	add	r18, r18
    1bbe:	33 1f       	adc	r19, r19
    1bc0:	4a 95       	dec	r20
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <DIO_enu_WriteChannel+0x84>
    1bc4:	20 95       	com	r18
    1bc6:	26 23       	and	r18, r22
    1bc8:	fc 01       	movw	r30, r24
    1bca:	20 83       	st	Z, r18
				break;
    1bcc:	9f c0       	rjmp	.+318    	; 0x1d0c <DIO_enu_WriteChannel+0x1d4>
	{
		switch(loc_u8_portNumber)
		{
			case DIO_PORT_NUMBER_A :
			{
				(arg_enu_pinLevel == DIO_PIN_LEVEL_LOW)?CLR_BIT(DIO_PORTA,loc_u8_pinNumber):SET_BIT(DIO_PORTA,loc_u8_pinNumber);
    1bce:	8b e3       	ldi	r24, 0x3B	; 59
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	2b e3       	ldi	r18, 0x3B	; 59
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	f9 01       	movw	r30, r18
    1bd8:	20 81       	ld	r18, Z
    1bda:	62 2f       	mov	r22, r18
    1bdc:	2a 81       	ldd	r18, Y+2	; 0x02
    1bde:	42 2f       	mov	r20, r18
    1be0:	50 e0       	ldi	r21, 0x00	; 0
    1be2:	21 e0       	ldi	r18, 0x01	; 1
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <DIO_enu_WriteChannel+0xb4>
    1be8:	22 0f       	add	r18, r18
    1bea:	33 1f       	adc	r19, r19
    1bec:	4a 95       	dec	r20
    1bee:	e2 f7       	brpl	.-8      	; 0x1be8 <DIO_enu_WriteChannel+0xb0>
    1bf0:	26 2b       	or	r18, r22
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	20 83       	st	Z, r18
				break;
    1bf6:	8a c0       	rjmp	.+276    	; 0x1d0c <DIO_enu_WriteChannel+0x1d4>
			}
			
			case DIO_PORT_NUMBER_B :
			{
				(arg_enu_pinLevel == DIO_PIN_LEVEL_LOW)?CLR_BIT(DIO_PORTB,loc_u8_pinNumber):SET_BIT(DIO_PORTB,loc_u8_pinNumber);
    1bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfa:	88 23       	and	r24, r24
    1bfc:	b1 f4       	brne	.+44     	; 0x1c2a <DIO_enu_WriteChannel+0xf2>
    1bfe:	88 e3       	ldi	r24, 0x38	; 56
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	28 e3       	ldi	r18, 0x38	; 56
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	f9 01       	movw	r30, r18
    1c08:	20 81       	ld	r18, Z
    1c0a:	62 2f       	mov	r22, r18
    1c0c:	2a 81       	ldd	r18, Y+2	; 0x02
    1c0e:	42 2f       	mov	r20, r18
    1c10:	50 e0       	ldi	r21, 0x00	; 0
    1c12:	21 e0       	ldi	r18, 0x01	; 1
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <DIO_enu_WriteChannel+0xe4>
    1c18:	22 0f       	add	r18, r18
    1c1a:	33 1f       	adc	r19, r19
    1c1c:	4a 95       	dec	r20
    1c1e:	e2 f7       	brpl	.-8      	; 0x1c18 <DIO_enu_WriteChannel+0xe0>
    1c20:	20 95       	com	r18
    1c22:	26 23       	and	r18, r22
    1c24:	fc 01       	movw	r30, r24
    1c26:	20 83       	st	Z, r18
				break;
    1c28:	71 c0       	rjmp	.+226    	; 0x1d0c <DIO_enu_WriteChannel+0x1d4>
				break;
			}
			
			case DIO_PORT_NUMBER_B :
			{
				(arg_enu_pinLevel == DIO_PIN_LEVEL_LOW)?CLR_BIT(DIO_PORTB,loc_u8_pinNumber):SET_BIT(DIO_PORTB,loc_u8_pinNumber);
    1c2a:	88 e3       	ldi	r24, 0x38	; 56
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	28 e3       	ldi	r18, 0x38	; 56
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	f9 01       	movw	r30, r18
    1c34:	20 81       	ld	r18, Z
    1c36:	62 2f       	mov	r22, r18
    1c38:	2a 81       	ldd	r18, Y+2	; 0x02
    1c3a:	42 2f       	mov	r20, r18
    1c3c:	50 e0       	ldi	r21, 0x00	; 0
    1c3e:	21 e0       	ldi	r18, 0x01	; 1
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <DIO_enu_WriteChannel+0x110>
    1c44:	22 0f       	add	r18, r18
    1c46:	33 1f       	adc	r19, r19
    1c48:	4a 95       	dec	r20
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <DIO_enu_WriteChannel+0x10c>
    1c4c:	26 2b       	or	r18, r22
    1c4e:	fc 01       	movw	r30, r24
    1c50:	20 83       	st	Z, r18
				break;
    1c52:	5c c0       	rjmp	.+184    	; 0x1d0c <DIO_enu_WriteChannel+0x1d4>
			}
			
			case DIO_PORT_NUMBER_C :
			{
				(arg_enu_pinLevel == DIO_PIN_LEVEL_LOW)?CLR_BIT(DIO_PORTC,loc_u8_pinNumber):SET_BIT(DIO_PORTC,loc_u8_pinNumber);
    1c54:	8d 81       	ldd	r24, Y+5	; 0x05
    1c56:	88 23       	and	r24, r24
    1c58:	b1 f4       	brne	.+44     	; 0x1c86 <DIO_enu_WriteChannel+0x14e>
    1c5a:	85 e3       	ldi	r24, 0x35	; 53
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	25 e3       	ldi	r18, 0x35	; 53
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	f9 01       	movw	r30, r18
    1c64:	20 81       	ld	r18, Z
    1c66:	62 2f       	mov	r22, r18
    1c68:	2a 81       	ldd	r18, Y+2	; 0x02
    1c6a:	42 2f       	mov	r20, r18
    1c6c:	50 e0       	ldi	r21, 0x00	; 0
    1c6e:	21 e0       	ldi	r18, 0x01	; 1
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <DIO_enu_WriteChannel+0x140>
    1c74:	22 0f       	add	r18, r18
    1c76:	33 1f       	adc	r19, r19
    1c78:	4a 95       	dec	r20
    1c7a:	e2 f7       	brpl	.-8      	; 0x1c74 <DIO_enu_WriteChannel+0x13c>
    1c7c:	20 95       	com	r18
    1c7e:	26 23       	and	r18, r22
    1c80:	fc 01       	movw	r30, r24
    1c82:	20 83       	st	Z, r18
				break;
    1c84:	43 c0       	rjmp	.+134    	; 0x1d0c <DIO_enu_WriteChannel+0x1d4>
				break;
			}
			
			case DIO_PORT_NUMBER_C :
			{
				(arg_enu_pinLevel == DIO_PIN_LEVEL_LOW)?CLR_BIT(DIO_PORTC,loc_u8_pinNumber):SET_BIT(DIO_PORTC,loc_u8_pinNumber);
    1c86:	85 e3       	ldi	r24, 0x35	; 53
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	25 e3       	ldi	r18, 0x35	; 53
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	f9 01       	movw	r30, r18
    1c90:	20 81       	ld	r18, Z
    1c92:	62 2f       	mov	r22, r18
    1c94:	2a 81       	ldd	r18, Y+2	; 0x02
    1c96:	42 2f       	mov	r20, r18
    1c98:	50 e0       	ldi	r21, 0x00	; 0
    1c9a:	21 e0       	ldi	r18, 0x01	; 1
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <DIO_enu_WriteChannel+0x16c>
    1ca0:	22 0f       	add	r18, r18
    1ca2:	33 1f       	adc	r19, r19
    1ca4:	4a 95       	dec	r20
    1ca6:	e2 f7       	brpl	.-8      	; 0x1ca0 <DIO_enu_WriteChannel+0x168>
    1ca8:	26 2b       	or	r18, r22
    1caa:	fc 01       	movw	r30, r24
    1cac:	20 83       	st	Z, r18
				break;
    1cae:	2e c0       	rjmp	.+92     	; 0x1d0c <DIO_enu_WriteChannel+0x1d4>
			}
			
			case DIO_PORT_NUMBER_D :
			{
				(arg_enu_pinLevel == DIO_PIN_LEVEL_LOW)?CLR_BIT(DIO_PORTD,loc_u8_pinNumber):SET_BIT(DIO_PORTD,loc_u8_pinNumber);
    1cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb2:	88 23       	and	r24, r24
    1cb4:	b1 f4       	brne	.+44     	; 0x1ce2 <DIO_enu_WriteChannel+0x1aa>
    1cb6:	82 e3       	ldi	r24, 0x32	; 50
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	22 e3       	ldi	r18, 0x32	; 50
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	f9 01       	movw	r30, r18
    1cc0:	20 81       	ld	r18, Z
    1cc2:	62 2f       	mov	r22, r18
    1cc4:	2a 81       	ldd	r18, Y+2	; 0x02
    1cc6:	42 2f       	mov	r20, r18
    1cc8:	50 e0       	ldi	r21, 0x00	; 0
    1cca:	21 e0       	ldi	r18, 0x01	; 1
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <DIO_enu_WriteChannel+0x19c>
    1cd0:	22 0f       	add	r18, r18
    1cd2:	33 1f       	adc	r19, r19
    1cd4:	4a 95       	dec	r20
    1cd6:	e2 f7       	brpl	.-8      	; 0x1cd0 <DIO_enu_WriteChannel+0x198>
    1cd8:	20 95       	com	r18
    1cda:	26 23       	and	r18, r22
    1cdc:	fc 01       	movw	r30, r24
    1cde:	20 83       	st	Z, r18
				break;
    1ce0:	14 c0       	rjmp	.+40     	; 0x1d0a <DIO_enu_WriteChannel+0x1d2>
				break;
			}
			
			case DIO_PORT_NUMBER_D :
			{
				(arg_enu_pinLevel == DIO_PIN_LEVEL_LOW)?CLR_BIT(DIO_PORTD,loc_u8_pinNumber):SET_BIT(DIO_PORTD,loc_u8_pinNumber);
    1ce2:	82 e3       	ldi	r24, 0x32	; 50
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	22 e3       	ldi	r18, 0x32	; 50
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	f9 01       	movw	r30, r18
    1cec:	20 81       	ld	r18, Z
    1cee:	62 2f       	mov	r22, r18
    1cf0:	2a 81       	ldd	r18, Y+2	; 0x02
    1cf2:	42 2f       	mov	r20, r18
    1cf4:	50 e0       	ldi	r21, 0x00	; 0
    1cf6:	21 e0       	ldi	r18, 0x01	; 1
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <DIO_enu_WriteChannel+0x1c8>
    1cfc:	22 0f       	add	r18, r18
    1cfe:	33 1f       	adc	r19, r19
    1d00:	4a 95       	dec	r20
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <DIO_enu_WriteChannel+0x1c4>
    1d04:	26 2b       	or	r18, r22
    1d06:	fc 01       	movw	r30, r24
    1d08:	20 83       	st	Z, r18
				break;
    1d0a:	00 00       	nop
		    
		}
	}
	
	
	return loc_enu_return_status;
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	08 95       	ret

00001d1e <DIO_enu_ReadChannel>:
DIO_enu_return_status_t DIO_enu_ReadChannel(DIO_enu_PinId_t arg_enu_pinId,u8 *ptr_value)
{
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <DIO_enu_ReadChannel+0x6>
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <DIO_enu_ReadChannel+0x8>
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <DIO_enu_ReadChannel+0xa>
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	8c 83       	std	Y+4, r24	; 0x04
    1d2e:	7e 83       	std	Y+6, r23	; 0x06
    1d30:	6d 83       	std	Y+5, r22	; 0x05
	DIO_enu_return_status_t loc_enu_return_status = STATUS_DIO_OKAY;
    1d32:	19 82       	std	Y+1, r1	; 0x01
	u8 loc_u8_pinNumber  = arg_enu_pinId % REG_SIZE ;
    1d34:	8c 81       	ldd	r24, Y+4	; 0x04
    1d36:	87 70       	andi	r24, 0x07	; 7
    1d38:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_u8_portNumber = arg_enu_pinId / REG_SIZE ;
    1d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3c:	86 95       	lsr	r24
    1d3e:	86 95       	lsr	r24
    1d40:	86 95       	lsr	r24
    1d42:	8b 83       	std	Y+3, r24	; 0x03
	
	if(ptr_value == PTR_NULL)
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	89 2b       	or	r24, r25
    1d4a:	19 f4       	brne	.+6      	; 0x1d52 <DIO_enu_ReadChannel+0x34>
	{
		loc_enu_return_status = STATUS_DIO_NULL_PTR_ERROR;
    1d4c:	84 e0       	ldi	r24, 0x04	; 4
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	6d c0       	rjmp	.+218    	; 0x1e2c <DIO_enu_ReadChannel+0x10e>
	}
	else if( arg_enu_pinId >= DIO_PINID_ERROR)
    1d52:	8c 81       	ldd	r24, Y+4	; 0x04
    1d54:	80 32       	cpi	r24, 0x20	; 32
    1d56:	18 f0       	brcs	.+6      	; 0x1d5e <DIO_enu_ReadChannel+0x40>
	{
		loc_enu_return_status = STATUS_DIO_PIN_NUMBER_ERROR;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	89 83       	std	Y+1, r24	; 0x01
    1d5c:	67 c0       	rjmp	.+206    	; 0x1e2c <DIO_enu_ReadChannel+0x10e>
	}
	else
	{
		switch(loc_u8_portNumber)
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	88 2f       	mov	r24, r24
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	81 30       	cpi	r24, 0x01	; 1
    1d66:	91 05       	cpc	r25, r1
    1d68:	11 f1       	breq	.+68     	; 0x1dae <DIO_enu_ReadChannel+0x90>
    1d6a:	82 30       	cpi	r24, 0x02	; 2
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	1c f4       	brge	.+6      	; 0x1d76 <DIO_enu_ReadChannel+0x58>
    1d70:	89 2b       	or	r24, r25
    1d72:	41 f0       	breq	.+16     	; 0x1d84 <DIO_enu_ReadChannel+0x66>
    1d74:	5b c0       	rjmp	.+182    	; 0x1e2c <DIO_enu_ReadChannel+0x10e>
    1d76:	82 30       	cpi	r24, 0x02	; 2
    1d78:	91 05       	cpc	r25, r1
    1d7a:	71 f1       	breq	.+92     	; 0x1dd8 <DIO_enu_ReadChannel+0xba>
    1d7c:	03 97       	sbiw	r24, 0x03	; 3
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <DIO_enu_ReadChannel+0x64>
    1d80:	40 c0       	rjmp	.+128    	; 0x1e02 <DIO_enu_ReadChannel+0xe4>
    1d82:	54 c0       	rjmp	.+168    	; 0x1e2c <DIO_enu_ReadChannel+0x10e>
		{
			case DIO_PORT_NUMBER_A :
			{
				*ptr_value = GET_BIT(DIO_PINA,loc_u8_pinNumber);
    1d84:	89 e3       	ldi	r24, 0x39	; 57
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	fc 01       	movw	r30, r24
    1d8a:	80 81       	ld	r24, Z
    1d8c:	88 2f       	mov	r24, r24
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	2a 81       	ldd	r18, Y+2	; 0x02
    1d92:	22 2f       	mov	r18, r18
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <DIO_enu_ReadChannel+0x7e>
    1d98:	95 95       	asr	r25
    1d9a:	87 95       	ror	r24
    1d9c:	2a 95       	dec	r18
    1d9e:	e2 f7       	brpl	.-8      	; 0x1d98 <DIO_enu_ReadChannel+0x7a>
    1da0:	28 2f       	mov	r18, r24
    1da2:	21 70       	andi	r18, 0x01	; 1
    1da4:	8d 81       	ldd	r24, Y+5	; 0x05
    1da6:	9e 81       	ldd	r25, Y+6	; 0x06
    1da8:	fc 01       	movw	r30, r24
    1daa:	20 83       	st	Z, r18
				break;
    1dac:	3f c0       	rjmp	.+126    	; 0x1e2c <DIO_enu_ReadChannel+0x10e>
			}
			
			case DIO_PORT_NUMBER_B :
			{
				*ptr_value = GET_BIT(DIO_PINB,loc_u8_pinNumber);
    1dae:	86 e3       	ldi	r24, 0x36	; 54
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	fc 01       	movw	r30, r24
    1db4:	80 81       	ld	r24, Z
    1db6:	88 2f       	mov	r24, r24
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	2a 81       	ldd	r18, Y+2	; 0x02
    1dbc:	22 2f       	mov	r18, r18
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <DIO_enu_ReadChannel+0xa8>
    1dc2:	95 95       	asr	r25
    1dc4:	87 95       	ror	r24
    1dc6:	2a 95       	dec	r18
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <DIO_enu_ReadChannel+0xa4>
    1dca:	28 2f       	mov	r18, r24
    1dcc:	21 70       	andi	r18, 0x01	; 1
    1dce:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	20 83       	st	Z, r18
				break;
    1dd6:	2a c0       	rjmp	.+84     	; 0x1e2c <DIO_enu_ReadChannel+0x10e>
			}
			
			case DIO_PORT_NUMBER_C :
			{
				*ptr_value = GET_BIT(DIO_PINC,loc_u8_pinNumber);
    1dd8:	83 e3       	ldi	r24, 0x33	; 51
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	fc 01       	movw	r30, r24
    1dde:	80 81       	ld	r24, Z
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	2a 81       	ldd	r18, Y+2	; 0x02
    1de6:	22 2f       	mov	r18, r18
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <DIO_enu_ReadChannel+0xd2>
    1dec:	95 95       	asr	r25
    1dee:	87 95       	ror	r24
    1df0:	2a 95       	dec	r18
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <DIO_enu_ReadChannel+0xce>
    1df4:	28 2f       	mov	r18, r24
    1df6:	21 70       	andi	r18, 0x01	; 1
    1df8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	20 83       	st	Z, r18
				break;
    1e00:	15 c0       	rjmp	.+42     	; 0x1e2c <DIO_enu_ReadChannel+0x10e>
			}
			
			case DIO_PORT_NUMBER_D :
			{
				*ptr_value = GET_BIT(DIO_PIND,loc_u8_pinNumber);
    1e02:	80 e3       	ldi	r24, 0x30	; 48
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	fc 01       	movw	r30, r24
    1e08:	80 81       	ld	r24, Z
    1e0a:	88 2f       	mov	r24, r24
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	2a 81       	ldd	r18, Y+2	; 0x02
    1e10:	22 2f       	mov	r18, r18
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <DIO_enu_ReadChannel+0xfc>
    1e16:	95 95       	asr	r25
    1e18:	87 95       	ror	r24
    1e1a:	2a 95       	dec	r18
    1e1c:	e2 f7       	brpl	.-8      	; 0x1e16 <DIO_enu_ReadChannel+0xf8>
    1e1e:	28 2f       	mov	r18, r24
    1e20:	21 70       	andi	r18, 0x01	; 1
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	9e 81       	ldd	r25, Y+6	; 0x06
    1e26:	fc 01       	movw	r30, r24
    1e28:	20 83       	st	Z, r18
				break;
    1e2a:	00 00       	nop
			
		}
	}
	
	
	return loc_enu_return_status;
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e2e:	26 96       	adiw	r28, 0x06	; 6
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	df 91       	pop	r29
    1e3c:	cf 91       	pop	r28
    1e3e:	08 95       	ret

00001e40 <__vector_1>:
	}
}


ISR(EXT_INT_0)
{
    1e40:	1f 92       	push	r1
    1e42:	0f 92       	push	r0
    1e44:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1e48:	0f 92       	push	r0
    1e4a:	11 24       	eor	r1, r1
    1e4c:	2f 93       	push	r18
    1e4e:	3f 93       	push	r19
    1e50:	4f 93       	push	r20
    1e52:	5f 93       	push	r21
    1e54:	6f 93       	push	r22
    1e56:	7f 93       	push	r23
    1e58:	8f 93       	push	r24
    1e5a:	9f 93       	push	r25
    1e5c:	af 93       	push	r26
    1e5e:	bf 93       	push	r27
    1e60:	ef 93       	push	r30
    1e62:	ff 93       	push	r31
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
	if( gl_ptrtoFunc_arr[EXT_INT0] != PTR_NULL)
    1e6c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <gl_ptrtoFunc_arr>
    1e70:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <gl_ptrtoFunc_arr+0x1>
    1e74:	89 2b       	or	r24, r25
    1e76:	31 f0       	breq	.+12     	; 0x1e84 <__vector_1+0x44>
	{
		gl_ptrtoFunc_arr[EXT_INT0]();
    1e78:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <gl_ptrtoFunc_arr>
    1e7c:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <gl_ptrtoFunc_arr+0x1>
    1e80:	fc 01       	movw	r30, r24
    1e82:	09 95       	icall
	}
	else 
	{
		// do nothing
	}
}
    1e84:	00 00       	nop
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	ff 91       	pop	r31
    1e8c:	ef 91       	pop	r30
    1e8e:	bf 91       	pop	r27
    1e90:	af 91       	pop	r26
    1e92:	9f 91       	pop	r25
    1e94:	8f 91       	pop	r24
    1e96:	7f 91       	pop	r23
    1e98:	6f 91       	pop	r22
    1e9a:	5f 91       	pop	r21
    1e9c:	4f 91       	pop	r20
    1e9e:	3f 91       	pop	r19
    1ea0:	2f 91       	pop	r18
    1ea2:	0f 90       	pop	r0
    1ea4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1ea8:	0f 90       	pop	r0
    1eaa:	1f 90       	pop	r1
    1eac:	18 95       	reti

00001eae <__vector_2>:

ISR(EXT_INT_1)
{
    1eae:	1f 92       	push	r1
    1eb0:	0f 92       	push	r0
    1eb2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1eb6:	0f 92       	push	r0
    1eb8:	11 24       	eor	r1, r1
    1eba:	2f 93       	push	r18
    1ebc:	3f 93       	push	r19
    1ebe:	4f 93       	push	r20
    1ec0:	5f 93       	push	r21
    1ec2:	6f 93       	push	r22
    1ec4:	7f 93       	push	r23
    1ec6:	8f 93       	push	r24
    1ec8:	9f 93       	push	r25
    1eca:	af 93       	push	r26
    1ecc:	bf 93       	push	r27
    1ece:	ef 93       	push	r30
    1ed0:	ff 93       	push	r31
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
	if( gl_ptrtoFunc_arr[EXT_INT1] != PTR_NULL)
    1eda:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <gl_ptrtoFunc_arr+0x2>
    1ede:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <gl_ptrtoFunc_arr+0x3>
    1ee2:	89 2b       	or	r24, r25
    1ee4:	31 f0       	breq	.+12     	; 0x1ef2 <__vector_2+0x44>
	{
		gl_ptrtoFunc_arr[EXT_INT1]();
    1ee6:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <gl_ptrtoFunc_arr+0x2>
    1eea:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <gl_ptrtoFunc_arr+0x3>
    1eee:	fc 01       	movw	r30, r24
    1ef0:	09 95       	icall
	}
	else
	{
		// do nothing
	}
}
    1ef2:	00 00       	nop
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	ff 91       	pop	r31
    1efa:	ef 91       	pop	r30
    1efc:	bf 91       	pop	r27
    1efe:	af 91       	pop	r26
    1f00:	9f 91       	pop	r25
    1f02:	8f 91       	pop	r24
    1f04:	7f 91       	pop	r23
    1f06:	6f 91       	pop	r22
    1f08:	5f 91       	pop	r21
    1f0a:	4f 91       	pop	r20
    1f0c:	3f 91       	pop	r19
    1f0e:	2f 91       	pop	r18
    1f10:	0f 90       	pop	r0
    1f12:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1f16:	0f 90       	pop	r0
    1f18:	1f 90       	pop	r1
    1f1a:	18 95       	reti

00001f1c <__vector_3>:

ISR(EXT_INT_2)
{
    1f1c:	1f 92       	push	r1
    1f1e:	0f 92       	push	r0
    1f20:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1f24:	0f 92       	push	r0
    1f26:	11 24       	eor	r1, r1
    1f28:	2f 93       	push	r18
    1f2a:	3f 93       	push	r19
    1f2c:	4f 93       	push	r20
    1f2e:	5f 93       	push	r21
    1f30:	6f 93       	push	r22
    1f32:	7f 93       	push	r23
    1f34:	8f 93       	push	r24
    1f36:	9f 93       	push	r25
    1f38:	af 93       	push	r26
    1f3a:	bf 93       	push	r27
    1f3c:	ef 93       	push	r30
    1f3e:	ff 93       	push	r31
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
	if( gl_ptrtoFunc_arr[EXT_INT2] != PTR_NULL)
    1f48:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <gl_ptrtoFunc_arr+0x4>
    1f4c:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <gl_ptrtoFunc_arr+0x5>
    1f50:	89 2b       	or	r24, r25
    1f52:	31 f0       	breq	.+12     	; 0x1f60 <__vector_3+0x44>
	{
		gl_ptrtoFunc_arr[EXT_INT2]();
    1f54:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <gl_ptrtoFunc_arr+0x4>
    1f58:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <gl_ptrtoFunc_arr+0x5>
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	09 95       	icall
	}
	else
	{
		// do nothing
	}
    1f60:	00 00       	nop
    1f62:	df 91       	pop	r29
    1f64:	cf 91       	pop	r28
    1f66:	ff 91       	pop	r31
    1f68:	ef 91       	pop	r30
    1f6a:	bf 91       	pop	r27
    1f6c:	af 91       	pop	r26
    1f6e:	9f 91       	pop	r25
    1f70:	8f 91       	pop	r24
    1f72:	7f 91       	pop	r23
    1f74:	6f 91       	pop	r22
    1f76:	5f 91       	pop	r21
    1f78:	4f 91       	pop	r20
    1f7a:	3f 91       	pop	r19
    1f7c:	2f 91       	pop	r18
    1f7e:	0f 90       	pop	r0
    1f80:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1f84:	0f 90       	pop	r0
    1f86:	1f 90       	pop	r1
    1f88:	18 95       	reti

00001f8a <GIE_status>:
#include "Gie_prv.h"
#include "Gie.h"


GIE_ERROR_t GIE_status(GIE_STATUS_t arg_enu_GIE_status)
{
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	00 d0       	rcall	.+0      	; 0x1f90 <GIE_status+0x6>
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	8a 83       	std	Y+2, r24	; 0x02
	GIE_ERROR_t loc_enu_returnValue = GIE_OKAY;
    1f96:	19 82       	std	Y+1, r1	; 0x01
	if( arg_enu_GIE_status >= GIE_STATUS_ERROR)
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	82 30       	cpi	r24, 0x02	; 2
    1f9c:	18 f0       	brcs	.+6      	; 0x1fa4 <GIE_status+0x1a>
	{
		loc_enu_returnValue = GIE_ERROR;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    1fa2:	19 c0       	rjmp	.+50     	; 0x1fd6 <GIE_status+0x4c>
	}
	else if ( arg_enu_GIE_status == GIE_ENABLE)
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	88 23       	and	r24, r24
    1fa8:	51 f4       	brne	.+20     	; 0x1fbe <GIE_status+0x34>
	{
		SET_BIT(SREG,ENABLE_BIT);
    1faa:	8f e5       	ldi	r24, 0x5F	; 95
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	2f e5       	ldi	r18, 0x5F	; 95
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	f9 01       	movw	r30, r18
    1fb4:	20 81       	ld	r18, Z
    1fb6:	20 68       	ori	r18, 0x80	; 128
    1fb8:	fc 01       	movw	r30, r24
    1fba:	20 83       	st	Z, r18
    1fbc:	0c c0       	rjmp	.+24     	; 0x1fd6 <GIE_status+0x4c>
	}
	else if ( arg_enu_GIE_status == GIE_ENABLE)
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	88 23       	and	r24, r24
    1fc2:	49 f4       	brne	.+18     	; 0x1fd6 <GIE_status+0x4c>
	{
		CLR_BIT(SREG,ENABLE_BIT);
    1fc4:	8f e5       	ldi	r24, 0x5F	; 95
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	2f e5       	ldi	r18, 0x5F	; 95
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	f9 01       	movw	r30, r18
    1fce:	20 81       	ld	r18, Z
    1fd0:	2f 77       	andi	r18, 0x7F	; 127
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	20 83       	st	Z, r18
	else
	{
		// do nothing
	}
	
	return loc_enu_returnValue;
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	08 95       	ret

00001fe2 <PORT_voidInit>:
#include "PORT_PRV.h"
#include "Port.h"
#include "PORT_CFG.h"

void PORT_voidInit(void)
{
    1fe2:	cf 93       	push	r28
    1fe4:	df 93       	push	r29
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
	#undef  PORT_PIN_MODE_OUTPUT_HIGH
	#define PORT_PIN_MODE_OUTPUT_HIGH         1
	
	// set direction 
	
	DDRA = CONC(PORTA_PIN7_MODE,PORTA_PIN6_MODE,PORTA_PIN5_MODE,PORTA_PIN4_MODE,PORTA_PIN3_MODE,PORTA_PIN2_MODE,PORTA_PIN1_MODE,PORTA_PIN0_MODE);
    1fea:	8a e3       	ldi	r24, 0x3A	; 58
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	2f e7       	ldi	r18, 0x7F	; 127
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	20 83       	st	Z, r18
	DDRB = CONC(PORTB_PIN7_MODE,PORTB_PIN6_MODE,PORTB_PIN5_MODE,PORTB_PIN4_MODE,PORTB_PIN3_MODE,PORTB_PIN2_MODE,PORTB_PIN1_MODE,PORTB_PIN0_MODE);
    1ff4:	87 e3       	ldi	r24, 0x37	; 55
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	27 e1       	ldi	r18, 0x17	; 23
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	20 83       	st	Z, r18
	DDRC = CONC(PORTC_PIN7_MODE,PORTC_PIN6_MODE,PORTC_PIN5_MODE,PORTC_PIN4_MODE,PORTC_PIN3_MODE,PORTC_PIN2_MODE,PORTC_PIN1_MODE,PORTC_PIN0_MODE);
    1ffe:	84 e3       	ldi	r24, 0x34	; 52
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	2c e7       	ldi	r18, 0x7C	; 124
    2004:	fc 01       	movw	r30, r24
    2006:	20 83       	st	Z, r18
	DDRD = CONC(PORTD_PIN7_MODE,PORTD_PIN6_MODE,PORTD_PIN5_MODE,PORTD_PIN4_MODE,PORTD_PIN3_MODE,PORTD_PIN2_MODE,PORTD_PIN1_MODE,PORTD_PIN0_MODE);
    2008:	81 e3       	ldi	r24, 0x31	; 49
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	21 e0       	ldi	r18, 0x01	; 1
    200e:	fc 01       	movw	r30, r24
    2010:	20 83       	st	Z, r18
	#undef  PORT_PIN_MODE_OUTPUT_HIGH
	#define PORT_PIN_MODE_OUTPUT_HIGH         1
	
	// set mode
	
	PORTA = CONC(PORTA_PIN7_MODE,PORTA_PIN6_MODE,PORTA_PIN5_MODE,PORTA_PIN4_MODE,PORTA_PIN3_MODE,PORTA_PIN2_MODE,PORTA_PIN1_MODE,PORTA_PIN0_MODE);
    2012:	8b e3       	ldi	r24, 0x3B	; 59
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	fc 01       	movw	r30, r24
    2018:	10 82       	st	Z, r1
	PORTB = CONC(PORTB_PIN7_MODE,PORTB_PIN6_MODE,PORTB_PIN5_MODE,PORTB_PIN4_MODE,PORTB_PIN3_MODE,PORTB_PIN2_MODE,PORTB_PIN1_MODE,PORTB_PIN0_MODE);
    201a:	88 e3       	ldi	r24, 0x38	; 56
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	fc 01       	movw	r30, r24
    2020:	10 82       	st	Z, r1
	PORTC = CONC(PORTC_PIN7_MODE,PORTC_PIN6_MODE,PORTC_PIN5_MODE,PORTC_PIN4_MODE,PORTC_PIN3_MODE,PORTC_PIN2_MODE,PORTC_PIN1_MODE,PORTC_PIN0_MODE);
    2022:	85 e3       	ldi	r24, 0x35	; 53
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	2c e3       	ldi	r18, 0x3C	; 60
    2028:	fc 01       	movw	r30, r24
    202a:	20 83       	st	Z, r18
	PORTD = CONC(PORTD_PIN7_MODE,PORTD_PIN6_MODE,PORTD_PIN5_MODE,PORTD_PIN4_MODE,PORTD_PIN3_MODE,PORTD_PIN2_MODE,PORTD_PIN1_MODE,PORTD_PIN0_MODE);
    202c:	82 e3       	ldi	r24, 0x32	; 50
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	28 ee       	ldi	r18, 0xE8	; 232
    2032:	fc 01       	movw	r30, r24
    2034:	20 83       	st	Z, r18
	#define PORT_PIN_MODE_OUTPUT_HIGH         3
	
	
	#else   //case of linking time configuration
	#endif
}
    2036:	00 00       	nop
    2038:	df 91       	pop	r29
    203a:	cf 91       	pop	r28
    203c:	08 95       	ret

0000203e <TIMER0_init>:
}

f32 GET_tickTimeinMicro(void)
{
	return (TIMER0_SELECT_FREQ)/(TIMER0_SELECT_CLOCK);
}
    203e:	cf 93       	push	r28
    2040:	df 93       	push	r29
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	83 e5       	ldi	r24, 0x53	; 83
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	23 e5       	ldi	r18, 0x53	; 83
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	f9 01       	movw	r30, r18
    2050:	20 81       	ld	r18, Z
    2052:	27 7f       	andi	r18, 0xF7	; 247
    2054:	fc 01       	movw	r30, r24
    2056:	20 83       	st	Z, r18
    2058:	83 e5       	ldi	r24, 0x53	; 83
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	23 e5       	ldi	r18, 0x53	; 83
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	f9 01       	movw	r30, r18
    2062:	20 81       	ld	r18, Z
    2064:	2f 7b       	andi	r18, 0xBF	; 191
    2066:	fc 01       	movw	r30, r24
    2068:	20 83       	st	Z, r18
    206a:	89 e5       	ldi	r24, 0x59	; 89
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	29 e5       	ldi	r18, 0x59	; 89
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	f9 01       	movw	r30, r18
    2074:	20 81       	ld	r18, Z
    2076:	21 60       	ori	r18, 0x01	; 1
    2078:	fc 01       	movw	r30, r24
    207a:	20 83       	st	Z, r18
    207c:	00 00       	nop
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	08 95       	ret

00002084 <TIMER0_stop>:
    2084:	cf 93       	push	r28
    2086:	df 93       	push	r29
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	83 e5       	ldi	r24, 0x53	; 83
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	23 e5       	ldi	r18, 0x53	; 83
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	f9 01       	movw	r30, r18
    2096:	20 81       	ld	r18, Z
    2098:	2b 7f       	andi	r18, 0xFB	; 251
    209a:	fc 01       	movw	r30, r24
    209c:	20 83       	st	Z, r18
    209e:	83 e5       	ldi	r24, 0x53	; 83
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	23 e5       	ldi	r18, 0x53	; 83
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	f9 01       	movw	r30, r18
    20a8:	20 81       	ld	r18, Z
    20aa:	2d 7f       	andi	r18, 0xFD	; 253
    20ac:	fc 01       	movw	r30, r24
    20ae:	20 83       	st	Z, r18
    20b0:	83 e5       	ldi	r24, 0x53	; 83
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	23 e5       	ldi	r18, 0x53	; 83
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	f9 01       	movw	r30, r18
    20ba:	20 81       	ld	r18, Z
    20bc:	2e 7f       	andi	r18, 0xFE	; 254
    20be:	fc 01       	movw	r30, r24
    20c0:	20 83       	st	Z, r18
    20c2:	00 00       	nop
    20c4:	df 91       	pop	r29
    20c6:	cf 91       	pop	r28
    20c8:	08 95       	ret

000020ca <TIMER0_setTimeAndStart>:
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    20d2:	63 97       	sbiw	r28, 0x13	; 19
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	6e 87       	std	Y+14, r22	; 0x0e
    20e0:	7f 87       	std	Y+15, r23	; 0x0f
    20e2:	88 8b       	std	Y+16, r24	; 0x10
    20e4:	99 8b       	std	Y+17, r25	; 0x11
    20e6:	4a 8b       	std	Y+18, r20	; 0x12
    20e8:	2b 8b       	std	Y+19, r18	; 0x13
    20ea:	19 82       	std	Y+1, r1	; 0x01
    20ec:	8a 89       	ldd	r24, Y+18	; 0x12
    20ee:	83 30       	cpi	r24, 0x03	; 3
    20f0:	18 f0       	brcs	.+6      	; 0x20f8 <TIMER0_setTimeAndStart+0x2e>
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	89 83       	std	Y+1, r24	; 0x01
    20f6:	a4 c0       	rjmp	.+328    	; 0x2240 <TIMER0_setTimeAndStart+0x176>
    20f8:	8b 89       	ldd	r24, Y+19	; 0x13
    20fa:	82 30       	cpi	r24, 0x02	; 2
    20fc:	18 f0       	brcs	.+6      	; 0x2104 <TIMER0_setTimeAndStart+0x3a>
    20fe:	82 e0       	ldi	r24, 0x02	; 2
    2100:	89 83       	std	Y+1, r24	; 0x01
    2102:	9e c0       	rjmp	.+316    	; 0x2240 <TIMER0_setTimeAndStart+0x176>
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	a0 e8       	ldi	r26, 0x80	; 128
    210a:	bf e3       	ldi	r27, 0x3F	; 63
    210c:	8e 83       	std	Y+6, r24	; 0x06
    210e:	9f 83       	std	Y+7, r25	; 0x07
    2110:	a8 87       	std	Y+8, r26	; 0x08
    2112:	b9 87       	std	Y+9, r27	; 0x09
    2114:	8a 89       	ldd	r24, Y+18	; 0x12
    2116:	81 30       	cpi	r24, 0x01	; 1
    2118:	81 f4       	brne	.+32     	; 0x213a <TIMER0_setTimeAndStart+0x70>
    211a:	2e 85       	ldd	r18, Y+14	; 0x0e
    211c:	3f 85       	ldd	r19, Y+15	; 0x0f
    211e:	48 89       	ldd	r20, Y+16	; 0x10
    2120:	59 89       	ldd	r21, Y+17	; 0x11
    2122:	88 ee       	ldi	r24, 0xE8	; 232
    2124:	93 e0       	ldi	r25, 0x03	; 3
    2126:	dc 01       	movw	r26, r24
    2128:	0e 94 07 14 	call	0x280e	; 0x280e <__muluhisi3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	8a 83       	std	Y+2, r24	; 0x02
    2132:	9b 83       	std	Y+3, r25	; 0x03
    2134:	ac 83       	std	Y+4, r26	; 0x04
    2136:	bd 83       	std	Y+5, r27	; 0x05
    2138:	1e c0       	rjmp	.+60     	; 0x2176 <TIMER0_setTimeAndStart+0xac>
    213a:	8a 89       	ldd	r24, Y+18	; 0x12
    213c:	82 30       	cpi	r24, 0x02	; 2
    213e:	99 f4       	brne	.+38     	; 0x2166 <TIMER0_setTimeAndStart+0x9c>
    2140:	8e 85       	ldd	r24, Y+14	; 0x0e
    2142:	9f 85       	ldd	r25, Y+15	; 0x0f
    2144:	a8 89       	ldd	r26, Y+16	; 0x10
    2146:	b9 89       	ldd	r27, Y+17	; 0x11
    2148:	9c 01       	movw	r18, r24
    214a:	ad 01       	movw	r20, r26
    214c:	60 e4       	ldi	r22, 0x40	; 64
    214e:	72 e4       	ldi	r23, 0x42	; 66
    2150:	8f e0       	ldi	r24, 0x0F	; 15
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulsi3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	8a 83       	std	Y+2, r24	; 0x02
    215e:	9b 83       	std	Y+3, r25	; 0x03
    2160:	ac 83       	std	Y+4, r26	; 0x04
    2162:	bd 83       	std	Y+5, r27	; 0x05
    2164:	08 c0       	rjmp	.+16     	; 0x2176 <TIMER0_setTimeAndStart+0xac>
    2166:	8e 85       	ldd	r24, Y+14	; 0x0e
    2168:	9f 85       	ldd	r25, Y+15	; 0x0f
    216a:	a8 89       	ldd	r26, Y+16	; 0x10
    216c:	b9 89       	ldd	r27, Y+17	; 0x11
    216e:	8a 83       	std	Y+2, r24	; 0x02
    2170:	9b 83       	std	Y+3, r25	; 0x03
    2172:	ac 83       	std	Y+4, r26	; 0x04
    2174:	bd 83       	std	Y+5, r27	; 0x05
    2176:	6a 81       	ldd	r22, Y+2	; 0x02
    2178:	7b 81       	ldd	r23, Y+3	; 0x03
    217a:	8c 81       	ldd	r24, Y+4	; 0x04
    217c:	9d 81       	ldd	r25, Y+5	; 0x05
    217e:	0e 94 b1 12 	call	0x2562	; 0x2562 <__floatunsisf>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	2e 81       	ldd	r18, Y+6	; 0x06
    2188:	3f 81       	ldd	r19, Y+7	; 0x07
    218a:	48 85       	ldd	r20, Y+8	; 0x08
    218c:	59 85       	ldd	r21, Y+9	; 0x09
    218e:	bc 01       	movw	r22, r24
    2190:	cd 01       	movw	r24, r26
    2192:	0e 94 10 12 	call	0x2420	; 0x2420 <__divsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	bc 01       	movw	r22, r24
    219c:	cd 01       	movw	r24, r26
    219e:	0e 94 82 12 	call	0x2504	; 0x2504 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	8a 87       	std	Y+10, r24	; 0x0a
    21a8:	9b 87       	std	Y+11, r25	; 0x0b
    21aa:	ac 87       	std	Y+12, r26	; 0x0c
    21ac:	bd 87       	std	Y+13, r27	; 0x0d
    21ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    21b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    21b2:	ac 85       	ldd	r26, Y+12	; 0x0c
    21b4:	bd 85       	ldd	r27, Y+13	; 0x0d
    21b6:	89 2f       	mov	r24, r25
    21b8:	9a 2f       	mov	r25, r26
    21ba:	ab 2f       	mov	r26, r27
    21bc:	bb 27       	eor	r27, r27
    21be:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <sgl_u32_timer0_NOVF>
    21c2:	90 93 ff 00 	sts	0x00FF, r25	; 0x8000ff <sgl_u32_timer0_NOVF+0x1>
    21c6:	a0 93 00 01 	sts	0x0100, r26	; 0x800100 <sgl_u32_timer0_NOVF+0x2>
    21ca:	b0 93 01 01 	sts	0x0101, r27	; 0x800101 <sgl_u32_timer0_NOVF+0x3>
    21ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    21d0:	81 95       	neg	r24
    21d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <sgl_u8_timer0_InitVal>
    21d6:	82 e5       	ldi	r24, 0x52	; 82
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <sgl_u8_timer0_InitVal>
    21de:	fc 01       	movw	r30, r24
    21e0:	20 83       	st	Z, r18
    21e2:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <sgl_u32_timer0_NOVF>
    21e6:	90 91 ff 00 	lds	r25, 0x00FF	; 0x8000ff <sgl_u32_timer0_NOVF+0x1>
    21ea:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <sgl_u32_timer0_NOVF+0x2>
    21ee:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <sgl_u32_timer0_NOVF+0x3>
    21f2:	01 96       	adiw	r24, 0x01	; 1
    21f4:	a1 1d       	adc	r26, r1
    21f6:	b1 1d       	adc	r27, r1
    21f8:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <sgl_u32_timer0_NOVF>
    21fc:	90 93 ff 00 	sts	0x00FF, r25	; 0x8000ff <sgl_u32_timer0_NOVF+0x1>
    2200:	a0 93 00 01 	sts	0x0100, r26	; 0x800100 <sgl_u32_timer0_NOVF+0x2>
    2204:	b0 93 01 01 	sts	0x0101, r27	; 0x800101 <sgl_u32_timer0_NOVF+0x3>
    2208:	8b 89       	ldd	r24, Y+19	; 0x13
    220a:	81 30       	cpi	r24, 0x01	; 1
    220c:	61 f4       	brne	.+24     	; 0x2226 <TIMER0_setTimeAndStart+0x15c>
    220e:	89 e5       	ldi	r24, 0x59	; 89
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	29 e5       	ldi	r18, 0x59	; 89
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	f9 01       	movw	r30, r18
    2218:	20 81       	ld	r18, Z
    221a:	21 60       	ori	r18, 0x01	; 1
    221c:	fc 01       	movw	r30, r24
    221e:	20 83       	st	Z, r18
    2220:	0e 94 2a 11 	call	0x2254	; 0x2254 <TIMER0_START>
    2224:	0d c0       	rjmp	.+26     	; 0x2240 <TIMER0_setTimeAndStart+0x176>
    2226:	89 e5       	ldi	r24, 0x59	; 89
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	29 e5       	ldi	r18, 0x59	; 89
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	f9 01       	movw	r30, r18
    2230:	20 81       	ld	r18, Z
    2232:	2e 7f       	andi	r18, 0xFE	; 254
    2234:	fc 01       	movw	r30, r24
    2236:	20 83       	st	Z, r18
    2238:	0e 94 2a 11 	call	0x2254	; 0x2254 <TIMER0_START>
    223c:	0e 94 3b 11 	call	0x2276	; 0x2276 <TIMER0_BLOCK>
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	63 96       	adiw	r28, 0x13	; 19
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	de bf       	out	0x3e, r29	; 62
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	08 95       	ret

00002254 <TIMER0_START>:
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	83 e5       	ldi	r24, 0x53	; 83
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	23 e5       	ldi	r18, 0x53	; 83
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	f9 01       	movw	r30, r18
    2266:	20 81       	ld	r18, Z
    2268:	22 60       	ori	r18, 0x02	; 2
    226a:	fc 01       	movw	r30, r24
    226c:	20 83       	st	Z, r18
    226e:	00 00       	nop
    2270:	df 91       	pop	r29
    2272:	cf 91       	pop	r28
    2274:	08 95       	ret

00002276 <TIMER0_BLOCK>:
    2276:	cf 93       	push	r28
    2278:	df 93       	push	r29
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	1e c0       	rjmp	.+60     	; 0x22bc <TIMER0_BLOCK+0x46>
    2280:	00 00       	nop
    2282:	88 e5       	ldi	r24, 0x58	; 88
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	fc 01       	movw	r30, r24
    2288:	80 81       	ld	r24, Z
    228a:	88 2f       	mov	r24, r24
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	81 70       	andi	r24, 0x01	; 1
    2290:	99 27       	eor	r25, r25
    2292:	89 2b       	or	r24, r25
    2294:	b1 f3       	breq	.-20     	; 0x2282 <TIMER0_BLOCK+0xc>
    2296:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sloc_u32_CounterOvf.1668>
    229a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <sloc_u32_CounterOvf.1668+0x1>
    229e:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <sloc_u32_CounterOvf.1668+0x2>
    22a2:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <sloc_u32_CounterOvf.1668+0x3>
    22a6:	01 96       	adiw	r24, 0x01	; 1
    22a8:	a1 1d       	adc	r26, r1
    22aa:	b1 1d       	adc	r27, r1
    22ac:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <sloc_u32_CounterOvf.1668>
    22b0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <sloc_u32_CounterOvf.1668+0x1>
    22b4:	a0 93 05 01 	sts	0x0105, r26	; 0x800105 <sloc_u32_CounterOvf.1668+0x2>
    22b8:	b0 93 06 01 	sts	0x0106, r27	; 0x800106 <sloc_u32_CounterOvf.1668+0x3>
    22bc:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <sloc_u32_CounterOvf.1668>
    22c0:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <sloc_u32_CounterOvf.1668+0x1>
    22c4:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <sloc_u32_CounterOvf.1668+0x2>
    22c8:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <sloc_u32_CounterOvf.1668+0x3>
    22cc:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <sgl_u32_timer0_NOVF>
    22d0:	90 91 ff 00 	lds	r25, 0x00FF	; 0x8000ff <sgl_u32_timer0_NOVF+0x1>
    22d4:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <sgl_u32_timer0_NOVF+0x2>
    22d8:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <sgl_u32_timer0_NOVF+0x3>
    22dc:	28 17       	cp	r18, r24
    22de:	39 07       	cpc	r19, r25
    22e0:	4a 07       	cpc	r20, r26
    22e2:	5b 07       	cpc	r21, r27
    22e4:	69 f6       	brne	.-102    	; 0x2280 <TIMER0_BLOCK+0xa>
    22e6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <sloc_u32_CounterOvf.1668>
    22ea:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <sloc_u32_CounterOvf.1668+0x1>
    22ee:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sloc_u32_CounterOvf.1668+0x2>
    22f2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sloc_u32_CounterOvf.1668+0x3>
    22f6:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <sgl_u32_timer0_NOVF>
    22fa:	10 92 ff 00 	sts	0x00FF, r1	; 0x8000ff <sgl_u32_timer0_NOVF+0x1>
    22fe:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <sgl_u32_timer0_NOVF+0x2>
    2302:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <sgl_u32_timer0_NOVF+0x3>
    2306:	00 00       	nop
    2308:	df 91       	pop	r29
    230a:	cf 91       	pop	r28
    230c:	08 95       	ret

0000230e <TIMER0_setcallBack>:
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
    2312:	00 d0       	rcall	.+0      	; 0x2314 <TIMER0_setcallBack+0x6>
    2314:	1f 92       	push	r1
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
    231a:	9b 83       	std	Y+3, r25	; 0x03
    231c:	8a 83       	std	Y+2, r24	; 0x02
    231e:	19 82       	std	Y+1, r1	; 0x01
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	9b 81       	ldd	r25, Y+3	; 0x03
    2324:	89 2b       	or	r24, r25
    2326:	19 f4       	brne	.+6      	; 0x232e <TIMER0_setcallBack+0x20>
    2328:	85 e0       	ldi	r24, 0x05	; 5
    232a:	89 83       	std	Y+1, r24	; 0x01
    232c:	06 c0       	rjmp	.+12     	; 0x233a <TIMER0_setcallBack+0x2c>
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	9b 81       	ldd	r25, Y+3	; 0x03
    2332:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <arr_ptrFunc+0x1>
    2336:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <arr_ptrFunc>
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
    2346:	08 95       	ret

00002348 <__vector_11>:
ISR(TIM0_OVF_INT)
{
    2348:	1f 92       	push	r1
    234a:	0f 92       	push	r0
    234c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2350:	0f 92       	push	r0
    2352:	11 24       	eor	r1, r1
    2354:	2f 93       	push	r18
    2356:	3f 93       	push	r19
    2358:	4f 93       	push	r20
    235a:	5f 93       	push	r21
    235c:	6f 93       	push	r22
    235e:	7f 93       	push	r23
    2360:	8f 93       	push	r24
    2362:	9f 93       	push	r25
    2364:	af 93       	push	r26
    2366:	bf 93       	push	r27
    2368:	ef 93       	push	r30
    236a:	ff 93       	push	r31
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
	//vgl_u32_timer0_CurrentNOVF++;
	static u32 sloc_u32_counterOVF = FALSE;
	sloc_u32_counterOVF++;
    2374:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sloc_u32_counterOVF.1700>
    2378:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <sloc_u32_counterOVF.1700+0x1>
    237c:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <sloc_u32_counterOVF.1700+0x2>
    2380:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <sloc_u32_counterOVF.1700+0x3>
    2384:	01 96       	adiw	r24, 0x01	; 1
    2386:	a1 1d       	adc	r26, r1
    2388:	b1 1d       	adc	r27, r1
    238a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sloc_u32_counterOVF.1700>
    238e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <sloc_u32_counterOVF.1700+0x1>
    2392:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <sloc_u32_counterOVF.1700+0x2>
    2396:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <sloc_u32_counterOVF.1700+0x3>
	if( sloc_u32_counterOVF == sgl_u32_timer0_NOVF)
    239a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <sloc_u32_counterOVF.1700>
    239e:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <sloc_u32_counterOVF.1700+0x1>
    23a2:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <sloc_u32_counterOVF.1700+0x2>
    23a6:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <sloc_u32_counterOVF.1700+0x3>
    23aa:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <sgl_u32_timer0_NOVF>
    23ae:	90 91 ff 00 	lds	r25, 0x00FF	; 0x8000ff <sgl_u32_timer0_NOVF+0x1>
    23b2:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <sgl_u32_timer0_NOVF+0x2>
    23b6:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <sgl_u32_timer0_NOVF+0x3>
    23ba:	28 17       	cp	r18, r24
    23bc:	39 07       	cpc	r19, r25
    23be:	4a 07       	cpc	r20, r26
    23c0:	5b 07       	cpc	r21, r27
    23c2:	a1 f4       	brne	.+40     	; 0x23ec <__vector_11+0xa4>
	{
		if(arr_ptrFunc[TIMER0_INDEX] != PTR_NULL)
    23c4:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <arr_ptrFunc>
    23c8:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <arr_ptrFunc+0x1>
    23cc:	89 2b       	or	r24, r25
    23ce:	71 f0       	breq	.+28     	; 0x23ec <__vector_11+0xa4>
		{
			arr_ptrFunc[TIMER0_INDEX]();
    23d0:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <arr_ptrFunc>
    23d4:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <arr_ptrFunc+0x1>
    23d8:	fc 01       	movw	r30, r24
    23da:	09 95       	icall
			sloc_u32_counterOVF = 0;
    23dc:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <sloc_u32_counterOVF.1700>
    23e0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <sloc_u32_counterOVF.1700+0x1>
    23e4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <sloc_u32_counterOVF.1700+0x2>
    23e8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <sloc_u32_counterOVF.1700+0x3>
		}
		
	}
}
    23ec:	00 00       	nop
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	ff 91       	pop	r31
    23f4:	ef 91       	pop	r30
    23f6:	bf 91       	pop	r27
    23f8:	af 91       	pop	r26
    23fa:	9f 91       	pop	r25
    23fc:	8f 91       	pop	r24
    23fe:	7f 91       	pop	r23
    2400:	6f 91       	pop	r22
    2402:	5f 91       	pop	r21
    2404:	4f 91       	pop	r20
    2406:	3f 91       	pop	r19
    2408:	2f 91       	pop	r18
    240a:	0f 90       	pop	r0
    240c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2410:	0f 90       	pop	r0
    2412:	1f 90       	pop	r1
    2414:	18 95       	reti

00002416 <__cmpsf2>:
    2416:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fp_cmp>
    241a:	08 f4       	brcc	.+2      	; 0x241e <__cmpsf2+0x8>
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	08 95       	ret

00002420 <__divsf3>:
    2420:	0e 94 24 12 	call	0x2448	; 0x2448 <__divsf3x>
    2424:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__fp_round>
    2428:	0e 94 22 13 	call	0x2644	; 0x2644 <__fp_pscB>
    242c:	58 f0       	brcs	.+22     	; 0x2444 <__divsf3+0x24>
    242e:	0e 94 1b 13 	call	0x2636	; 0x2636 <__fp_pscA>
    2432:	40 f0       	brcs	.+16     	; 0x2444 <__divsf3+0x24>
    2434:	29 f4       	brne	.+10     	; 0x2440 <__divsf3+0x20>
    2436:	5f 3f       	cpi	r21, 0xFF	; 255
    2438:	29 f0       	breq	.+10     	; 0x2444 <__divsf3+0x24>
    243a:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__fp_inf>
    243e:	51 11       	cpse	r21, r1
    2440:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <__fp_szero>
    2444:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__fp_nan>

00002448 <__divsf3x>:
    2448:	0e 94 3a 13 	call	0x2674	; 0x2674 <__fp_split3>
    244c:	68 f3       	brcs	.-38     	; 0x2428 <__divsf3+0x8>

0000244e <__divsf3_pse>:
    244e:	99 23       	and	r25, r25
    2450:	b1 f3       	breq	.-20     	; 0x243e <__divsf3+0x1e>
    2452:	55 23       	and	r21, r21
    2454:	91 f3       	breq	.-28     	; 0x243a <__divsf3+0x1a>
    2456:	95 1b       	sub	r25, r21
    2458:	55 0b       	sbc	r21, r21
    245a:	bb 27       	eor	r27, r27
    245c:	aa 27       	eor	r26, r26
    245e:	62 17       	cp	r22, r18
    2460:	73 07       	cpc	r23, r19
    2462:	84 07       	cpc	r24, r20
    2464:	38 f0       	brcs	.+14     	; 0x2474 <__divsf3_pse+0x26>
    2466:	9f 5f       	subi	r25, 0xFF	; 255
    2468:	5f 4f       	sbci	r21, 0xFF	; 255
    246a:	22 0f       	add	r18, r18
    246c:	33 1f       	adc	r19, r19
    246e:	44 1f       	adc	r20, r20
    2470:	aa 1f       	adc	r26, r26
    2472:	a9 f3       	breq	.-22     	; 0x245e <__divsf3_pse+0x10>
    2474:	35 d0       	rcall	.+106    	; 0x24e0 <__divsf3_pse+0x92>
    2476:	0e 2e       	mov	r0, r30
    2478:	3a f0       	brmi	.+14     	; 0x2488 <__divsf3_pse+0x3a>
    247a:	e0 e8       	ldi	r30, 0x80	; 128
    247c:	32 d0       	rcall	.+100    	; 0x24e2 <__divsf3_pse+0x94>
    247e:	91 50       	subi	r25, 0x01	; 1
    2480:	50 40       	sbci	r21, 0x00	; 0
    2482:	e6 95       	lsr	r30
    2484:	00 1c       	adc	r0, r0
    2486:	ca f7       	brpl	.-14     	; 0x247a <__divsf3_pse+0x2c>
    2488:	2b d0       	rcall	.+86     	; 0x24e0 <__divsf3_pse+0x92>
    248a:	fe 2f       	mov	r31, r30
    248c:	29 d0       	rcall	.+82     	; 0x24e0 <__divsf3_pse+0x92>
    248e:	66 0f       	add	r22, r22
    2490:	77 1f       	adc	r23, r23
    2492:	88 1f       	adc	r24, r24
    2494:	bb 1f       	adc	r27, r27
    2496:	26 17       	cp	r18, r22
    2498:	37 07       	cpc	r19, r23
    249a:	48 07       	cpc	r20, r24
    249c:	ab 07       	cpc	r26, r27
    249e:	b0 e8       	ldi	r27, 0x80	; 128
    24a0:	09 f0       	breq	.+2      	; 0x24a4 <__divsf3_pse+0x56>
    24a2:	bb 0b       	sbc	r27, r27
    24a4:	80 2d       	mov	r24, r0
    24a6:	bf 01       	movw	r22, r30
    24a8:	ff 27       	eor	r31, r31
    24aa:	93 58       	subi	r25, 0x83	; 131
    24ac:	5f 4f       	sbci	r21, 0xFF	; 255
    24ae:	3a f0       	brmi	.+14     	; 0x24be <__divsf3_pse+0x70>
    24b0:	9e 3f       	cpi	r25, 0xFE	; 254
    24b2:	51 05       	cpc	r21, r1
    24b4:	78 f0       	brcs	.+30     	; 0x24d4 <__divsf3_pse+0x86>
    24b6:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__fp_inf>
    24ba:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <__fp_szero>
    24be:	5f 3f       	cpi	r21, 0xFF	; 255
    24c0:	e4 f3       	brlt	.-8      	; 0x24ba <__divsf3_pse+0x6c>
    24c2:	98 3e       	cpi	r25, 0xE8	; 232
    24c4:	d4 f3       	brlt	.-12     	; 0x24ba <__divsf3_pse+0x6c>
    24c6:	86 95       	lsr	r24
    24c8:	77 95       	ror	r23
    24ca:	67 95       	ror	r22
    24cc:	b7 95       	ror	r27
    24ce:	f7 95       	ror	r31
    24d0:	9f 5f       	subi	r25, 0xFF	; 255
    24d2:	c9 f7       	brne	.-14     	; 0x24c6 <__divsf3_pse+0x78>
    24d4:	88 0f       	add	r24, r24
    24d6:	91 1d       	adc	r25, r1
    24d8:	96 95       	lsr	r25
    24da:	87 95       	ror	r24
    24dc:	97 f9       	bld	r25, 7
    24de:	08 95       	ret
    24e0:	e1 e0       	ldi	r30, 0x01	; 1
    24e2:	66 0f       	add	r22, r22
    24e4:	77 1f       	adc	r23, r23
    24e6:	88 1f       	adc	r24, r24
    24e8:	bb 1f       	adc	r27, r27
    24ea:	62 17       	cp	r22, r18
    24ec:	73 07       	cpc	r23, r19
    24ee:	84 07       	cpc	r24, r20
    24f0:	ba 07       	cpc	r27, r26
    24f2:	20 f0       	brcs	.+8      	; 0x24fc <__divsf3_pse+0xae>
    24f4:	62 1b       	sub	r22, r18
    24f6:	73 0b       	sbc	r23, r19
    24f8:	84 0b       	sbc	r24, r20
    24fa:	ba 0b       	sbc	r27, r26
    24fc:	ee 1f       	adc	r30, r30
    24fe:	88 f7       	brcc	.-30     	; 0x24e2 <__divsf3_pse+0x94>
    2500:	e0 95       	com	r30
    2502:	08 95       	ret

00002504 <__fixunssfsi>:
    2504:	0e 94 42 13 	call	0x2684	; 0x2684 <__fp_splitA>
    2508:	88 f0       	brcs	.+34     	; 0x252c <__fixunssfsi+0x28>
    250a:	9f 57       	subi	r25, 0x7F	; 127
    250c:	98 f0       	brcs	.+38     	; 0x2534 <__fixunssfsi+0x30>
    250e:	b9 2f       	mov	r27, r25
    2510:	99 27       	eor	r25, r25
    2512:	b7 51       	subi	r27, 0x17	; 23
    2514:	b0 f0       	brcs	.+44     	; 0x2542 <__fixunssfsi+0x3e>
    2516:	e1 f0       	breq	.+56     	; 0x2550 <__fixunssfsi+0x4c>
    2518:	66 0f       	add	r22, r22
    251a:	77 1f       	adc	r23, r23
    251c:	88 1f       	adc	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	1a f0       	brmi	.+6      	; 0x2528 <__fixunssfsi+0x24>
    2522:	ba 95       	dec	r27
    2524:	c9 f7       	brne	.-14     	; 0x2518 <__fixunssfsi+0x14>
    2526:	14 c0       	rjmp	.+40     	; 0x2550 <__fixunssfsi+0x4c>
    2528:	b1 30       	cpi	r27, 0x01	; 1
    252a:	91 f0       	breq	.+36     	; 0x2550 <__fixunssfsi+0x4c>
    252c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__fp_zero>
    2530:	b1 e0       	ldi	r27, 0x01	; 1
    2532:	08 95       	ret
    2534:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__fp_zero>
    2538:	67 2f       	mov	r22, r23
    253a:	78 2f       	mov	r23, r24
    253c:	88 27       	eor	r24, r24
    253e:	b8 5f       	subi	r27, 0xF8	; 248
    2540:	39 f0       	breq	.+14     	; 0x2550 <__fixunssfsi+0x4c>
    2542:	b9 3f       	cpi	r27, 0xF9	; 249
    2544:	cc f3       	brlt	.-14     	; 0x2538 <__fixunssfsi+0x34>
    2546:	86 95       	lsr	r24
    2548:	77 95       	ror	r23
    254a:	67 95       	ror	r22
    254c:	b3 95       	inc	r27
    254e:	d9 f7       	brne	.-10     	; 0x2546 <__fixunssfsi+0x42>
    2550:	3e f4       	brtc	.+14     	; 0x2560 <__fixunssfsi+0x5c>
    2552:	90 95       	com	r25
    2554:	80 95       	com	r24
    2556:	70 95       	com	r23
    2558:	61 95       	neg	r22
    255a:	7f 4f       	sbci	r23, 0xFF	; 255
    255c:	8f 4f       	sbci	r24, 0xFF	; 255
    255e:	9f 4f       	sbci	r25, 0xFF	; 255
    2560:	08 95       	ret

00002562 <__floatunsisf>:
    2562:	e8 94       	clt
    2564:	09 c0       	rjmp	.+18     	; 0x2578 <__floatsisf+0x12>

00002566 <__floatsisf>:
    2566:	97 fb       	bst	r25, 7
    2568:	3e f4       	brtc	.+14     	; 0x2578 <__floatsisf+0x12>
    256a:	90 95       	com	r25
    256c:	80 95       	com	r24
    256e:	70 95       	com	r23
    2570:	61 95       	neg	r22
    2572:	7f 4f       	sbci	r23, 0xFF	; 255
    2574:	8f 4f       	sbci	r24, 0xFF	; 255
    2576:	9f 4f       	sbci	r25, 0xFF	; 255
    2578:	99 23       	and	r25, r25
    257a:	a9 f0       	breq	.+42     	; 0x25a6 <__floatsisf+0x40>
    257c:	f9 2f       	mov	r31, r25
    257e:	96 e9       	ldi	r25, 0x96	; 150
    2580:	bb 27       	eor	r27, r27
    2582:	93 95       	inc	r25
    2584:	f6 95       	lsr	r31
    2586:	87 95       	ror	r24
    2588:	77 95       	ror	r23
    258a:	67 95       	ror	r22
    258c:	b7 95       	ror	r27
    258e:	f1 11       	cpse	r31, r1
    2590:	f8 cf       	rjmp	.-16     	; 0x2582 <__floatsisf+0x1c>
    2592:	fa f4       	brpl	.+62     	; 0x25d2 <__floatsisf+0x6c>
    2594:	bb 0f       	add	r27, r27
    2596:	11 f4       	brne	.+4      	; 0x259c <__floatsisf+0x36>
    2598:	60 ff       	sbrs	r22, 0
    259a:	1b c0       	rjmp	.+54     	; 0x25d2 <__floatsisf+0x6c>
    259c:	6f 5f       	subi	r22, 0xFF	; 255
    259e:	7f 4f       	sbci	r23, 0xFF	; 255
    25a0:	8f 4f       	sbci	r24, 0xFF	; 255
    25a2:	9f 4f       	sbci	r25, 0xFF	; 255
    25a4:	16 c0       	rjmp	.+44     	; 0x25d2 <__floatsisf+0x6c>
    25a6:	88 23       	and	r24, r24
    25a8:	11 f0       	breq	.+4      	; 0x25ae <__floatsisf+0x48>
    25aa:	96 e9       	ldi	r25, 0x96	; 150
    25ac:	11 c0       	rjmp	.+34     	; 0x25d0 <__floatsisf+0x6a>
    25ae:	77 23       	and	r23, r23
    25b0:	21 f0       	breq	.+8      	; 0x25ba <__floatsisf+0x54>
    25b2:	9e e8       	ldi	r25, 0x8E	; 142
    25b4:	87 2f       	mov	r24, r23
    25b6:	76 2f       	mov	r23, r22
    25b8:	05 c0       	rjmp	.+10     	; 0x25c4 <__floatsisf+0x5e>
    25ba:	66 23       	and	r22, r22
    25bc:	71 f0       	breq	.+28     	; 0x25da <__floatsisf+0x74>
    25be:	96 e8       	ldi	r25, 0x86	; 134
    25c0:	86 2f       	mov	r24, r22
    25c2:	70 e0       	ldi	r23, 0x00	; 0
    25c4:	60 e0       	ldi	r22, 0x00	; 0
    25c6:	2a f0       	brmi	.+10     	; 0x25d2 <__floatsisf+0x6c>
    25c8:	9a 95       	dec	r25
    25ca:	66 0f       	add	r22, r22
    25cc:	77 1f       	adc	r23, r23
    25ce:	88 1f       	adc	r24, r24
    25d0:	da f7       	brpl	.-10     	; 0x25c8 <__floatsisf+0x62>
    25d2:	88 0f       	add	r24, r24
    25d4:	96 95       	lsr	r25
    25d6:	87 95       	ror	r24
    25d8:	97 f9       	bld	r25, 7
    25da:	08 95       	ret

000025dc <__fp_cmp>:
    25dc:	99 0f       	add	r25, r25
    25de:	00 08       	sbc	r0, r0
    25e0:	55 0f       	add	r21, r21
    25e2:	aa 0b       	sbc	r26, r26
    25e4:	e0 e8       	ldi	r30, 0x80	; 128
    25e6:	fe ef       	ldi	r31, 0xFE	; 254
    25e8:	16 16       	cp	r1, r22
    25ea:	17 06       	cpc	r1, r23
    25ec:	e8 07       	cpc	r30, r24
    25ee:	f9 07       	cpc	r31, r25
    25f0:	c0 f0       	brcs	.+48     	; 0x2622 <__fp_cmp+0x46>
    25f2:	12 16       	cp	r1, r18
    25f4:	13 06       	cpc	r1, r19
    25f6:	e4 07       	cpc	r30, r20
    25f8:	f5 07       	cpc	r31, r21
    25fa:	98 f0       	brcs	.+38     	; 0x2622 <__fp_cmp+0x46>
    25fc:	62 1b       	sub	r22, r18
    25fe:	73 0b       	sbc	r23, r19
    2600:	84 0b       	sbc	r24, r20
    2602:	95 0b       	sbc	r25, r21
    2604:	39 f4       	brne	.+14     	; 0x2614 <__fp_cmp+0x38>
    2606:	0a 26       	eor	r0, r26
    2608:	61 f0       	breq	.+24     	; 0x2622 <__fp_cmp+0x46>
    260a:	23 2b       	or	r18, r19
    260c:	24 2b       	or	r18, r20
    260e:	25 2b       	or	r18, r21
    2610:	21 f4       	brne	.+8      	; 0x261a <__fp_cmp+0x3e>
    2612:	08 95       	ret
    2614:	0a 26       	eor	r0, r26
    2616:	09 f4       	brne	.+2      	; 0x261a <__fp_cmp+0x3e>
    2618:	a1 40       	sbci	r26, 0x01	; 1
    261a:	a6 95       	lsr	r26
    261c:	8f ef       	ldi	r24, 0xFF	; 255
    261e:	81 1d       	adc	r24, r1
    2620:	81 1d       	adc	r24, r1
    2622:	08 95       	ret

00002624 <__fp_inf>:
    2624:	97 f9       	bld	r25, 7
    2626:	9f 67       	ori	r25, 0x7F	; 127
    2628:	80 e8       	ldi	r24, 0x80	; 128
    262a:	70 e0       	ldi	r23, 0x00	; 0
    262c:	60 e0       	ldi	r22, 0x00	; 0
    262e:	08 95       	ret

00002630 <__fp_nan>:
    2630:	9f ef       	ldi	r25, 0xFF	; 255
    2632:	80 ec       	ldi	r24, 0xC0	; 192
    2634:	08 95       	ret

00002636 <__fp_pscA>:
    2636:	00 24       	eor	r0, r0
    2638:	0a 94       	dec	r0
    263a:	16 16       	cp	r1, r22
    263c:	17 06       	cpc	r1, r23
    263e:	18 06       	cpc	r1, r24
    2640:	09 06       	cpc	r0, r25
    2642:	08 95       	ret

00002644 <__fp_pscB>:
    2644:	00 24       	eor	r0, r0
    2646:	0a 94       	dec	r0
    2648:	12 16       	cp	r1, r18
    264a:	13 06       	cpc	r1, r19
    264c:	14 06       	cpc	r1, r20
    264e:	05 06       	cpc	r0, r21
    2650:	08 95       	ret

00002652 <__fp_round>:
    2652:	09 2e       	mov	r0, r25
    2654:	03 94       	inc	r0
    2656:	00 0c       	add	r0, r0
    2658:	11 f4       	brne	.+4      	; 0x265e <__fp_round+0xc>
    265a:	88 23       	and	r24, r24
    265c:	52 f0       	brmi	.+20     	; 0x2672 <__fp_round+0x20>
    265e:	bb 0f       	add	r27, r27
    2660:	40 f4       	brcc	.+16     	; 0x2672 <__fp_round+0x20>
    2662:	bf 2b       	or	r27, r31
    2664:	11 f4       	brne	.+4      	; 0x266a <__fp_round+0x18>
    2666:	60 ff       	sbrs	r22, 0
    2668:	04 c0       	rjmp	.+8      	; 0x2672 <__fp_round+0x20>
    266a:	6f 5f       	subi	r22, 0xFF	; 255
    266c:	7f 4f       	sbci	r23, 0xFF	; 255
    266e:	8f 4f       	sbci	r24, 0xFF	; 255
    2670:	9f 4f       	sbci	r25, 0xFF	; 255
    2672:	08 95       	ret

00002674 <__fp_split3>:
    2674:	57 fd       	sbrc	r21, 7
    2676:	90 58       	subi	r25, 0x80	; 128
    2678:	44 0f       	add	r20, r20
    267a:	55 1f       	adc	r21, r21
    267c:	59 f0       	breq	.+22     	; 0x2694 <__fp_splitA+0x10>
    267e:	5f 3f       	cpi	r21, 0xFF	; 255
    2680:	71 f0       	breq	.+28     	; 0x269e <__fp_splitA+0x1a>
    2682:	47 95       	ror	r20

00002684 <__fp_splitA>:
    2684:	88 0f       	add	r24, r24
    2686:	97 fb       	bst	r25, 7
    2688:	99 1f       	adc	r25, r25
    268a:	61 f0       	breq	.+24     	; 0x26a4 <__fp_splitA+0x20>
    268c:	9f 3f       	cpi	r25, 0xFF	; 255
    268e:	79 f0       	breq	.+30     	; 0x26ae <__fp_splitA+0x2a>
    2690:	87 95       	ror	r24
    2692:	08 95       	ret
    2694:	12 16       	cp	r1, r18
    2696:	13 06       	cpc	r1, r19
    2698:	14 06       	cpc	r1, r20
    269a:	55 1f       	adc	r21, r21
    269c:	f2 cf       	rjmp	.-28     	; 0x2682 <__fp_split3+0xe>
    269e:	46 95       	lsr	r20
    26a0:	f1 df       	rcall	.-30     	; 0x2684 <__fp_splitA>
    26a2:	08 c0       	rjmp	.+16     	; 0x26b4 <__fp_splitA+0x30>
    26a4:	16 16       	cp	r1, r22
    26a6:	17 06       	cpc	r1, r23
    26a8:	18 06       	cpc	r1, r24
    26aa:	99 1f       	adc	r25, r25
    26ac:	f1 cf       	rjmp	.-30     	; 0x2690 <__fp_splitA+0xc>
    26ae:	86 95       	lsr	r24
    26b0:	71 05       	cpc	r23, r1
    26b2:	61 05       	cpc	r22, r1
    26b4:	08 94       	sec
    26b6:	08 95       	ret

000026b8 <__fp_zero>:
    26b8:	e8 94       	clt

000026ba <__fp_szero>:
    26ba:	bb 27       	eor	r27, r27
    26bc:	66 27       	eor	r22, r22
    26be:	77 27       	eor	r23, r23
    26c0:	cb 01       	movw	r24, r22
    26c2:	97 f9       	bld	r25, 7
    26c4:	08 95       	ret

000026c6 <__gesf2>:
    26c6:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__fp_cmp>
    26ca:	08 f4       	brcc	.+2      	; 0x26ce <__gesf2+0x8>
    26cc:	8f ef       	ldi	r24, 0xFF	; 255
    26ce:	08 95       	ret

000026d0 <__mulsf3>:
    26d0:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__mulsf3x>
    26d4:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__fp_round>
    26d8:	0e 94 1b 13 	call	0x2636	; 0x2636 <__fp_pscA>
    26dc:	38 f0       	brcs	.+14     	; 0x26ec <__mulsf3+0x1c>
    26de:	0e 94 22 13 	call	0x2644	; 0x2644 <__fp_pscB>
    26e2:	20 f0       	brcs	.+8      	; 0x26ec <__mulsf3+0x1c>
    26e4:	95 23       	and	r25, r21
    26e6:	11 f0       	breq	.+4      	; 0x26ec <__mulsf3+0x1c>
    26e8:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__fp_inf>
    26ec:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__fp_nan>
    26f0:	11 24       	eor	r1, r1
    26f2:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <__fp_szero>

000026f6 <__mulsf3x>:
    26f6:	0e 94 3a 13 	call	0x2674	; 0x2674 <__fp_split3>
    26fa:	70 f3       	brcs	.-36     	; 0x26d8 <__mulsf3+0x8>

000026fc <__mulsf3_pse>:
    26fc:	95 9f       	mul	r25, r21
    26fe:	c1 f3       	breq	.-16     	; 0x26f0 <__mulsf3+0x20>
    2700:	95 0f       	add	r25, r21
    2702:	50 e0       	ldi	r21, 0x00	; 0
    2704:	55 1f       	adc	r21, r21
    2706:	62 9f       	mul	r22, r18
    2708:	f0 01       	movw	r30, r0
    270a:	72 9f       	mul	r23, r18
    270c:	bb 27       	eor	r27, r27
    270e:	f0 0d       	add	r31, r0
    2710:	b1 1d       	adc	r27, r1
    2712:	63 9f       	mul	r22, r19
    2714:	aa 27       	eor	r26, r26
    2716:	f0 0d       	add	r31, r0
    2718:	b1 1d       	adc	r27, r1
    271a:	aa 1f       	adc	r26, r26
    271c:	64 9f       	mul	r22, r20
    271e:	66 27       	eor	r22, r22
    2720:	b0 0d       	add	r27, r0
    2722:	a1 1d       	adc	r26, r1
    2724:	66 1f       	adc	r22, r22
    2726:	82 9f       	mul	r24, r18
    2728:	22 27       	eor	r18, r18
    272a:	b0 0d       	add	r27, r0
    272c:	a1 1d       	adc	r26, r1
    272e:	62 1f       	adc	r22, r18
    2730:	73 9f       	mul	r23, r19
    2732:	b0 0d       	add	r27, r0
    2734:	a1 1d       	adc	r26, r1
    2736:	62 1f       	adc	r22, r18
    2738:	83 9f       	mul	r24, r19
    273a:	a0 0d       	add	r26, r0
    273c:	61 1d       	adc	r22, r1
    273e:	22 1f       	adc	r18, r18
    2740:	74 9f       	mul	r23, r20
    2742:	33 27       	eor	r19, r19
    2744:	a0 0d       	add	r26, r0
    2746:	61 1d       	adc	r22, r1
    2748:	23 1f       	adc	r18, r19
    274a:	84 9f       	mul	r24, r20
    274c:	60 0d       	add	r22, r0
    274e:	21 1d       	adc	r18, r1
    2750:	82 2f       	mov	r24, r18
    2752:	76 2f       	mov	r23, r22
    2754:	6a 2f       	mov	r22, r26
    2756:	11 24       	eor	r1, r1
    2758:	9f 57       	subi	r25, 0x7F	; 127
    275a:	50 40       	sbci	r21, 0x00	; 0
    275c:	9a f0       	brmi	.+38     	; 0x2784 <__mulsf3_pse+0x88>
    275e:	f1 f0       	breq	.+60     	; 0x279c <__mulsf3_pse+0xa0>
    2760:	88 23       	and	r24, r24
    2762:	4a f0       	brmi	.+18     	; 0x2776 <__mulsf3_pse+0x7a>
    2764:	ee 0f       	add	r30, r30
    2766:	ff 1f       	adc	r31, r31
    2768:	bb 1f       	adc	r27, r27
    276a:	66 1f       	adc	r22, r22
    276c:	77 1f       	adc	r23, r23
    276e:	88 1f       	adc	r24, r24
    2770:	91 50       	subi	r25, 0x01	; 1
    2772:	50 40       	sbci	r21, 0x00	; 0
    2774:	a9 f7       	brne	.-22     	; 0x2760 <__mulsf3_pse+0x64>
    2776:	9e 3f       	cpi	r25, 0xFE	; 254
    2778:	51 05       	cpc	r21, r1
    277a:	80 f0       	brcs	.+32     	; 0x279c <__mulsf3_pse+0xa0>
    277c:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__fp_inf>
    2780:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <__fp_szero>
    2784:	5f 3f       	cpi	r21, 0xFF	; 255
    2786:	e4 f3       	brlt	.-8      	; 0x2780 <__mulsf3_pse+0x84>
    2788:	98 3e       	cpi	r25, 0xE8	; 232
    278a:	d4 f3       	brlt	.-12     	; 0x2780 <__mulsf3_pse+0x84>
    278c:	86 95       	lsr	r24
    278e:	77 95       	ror	r23
    2790:	67 95       	ror	r22
    2792:	b7 95       	ror	r27
    2794:	f7 95       	ror	r31
    2796:	e7 95       	ror	r30
    2798:	9f 5f       	subi	r25, 0xFF	; 255
    279a:	c1 f7       	brne	.-16     	; 0x278c <__mulsf3_pse+0x90>
    279c:	fe 2b       	or	r31, r30
    279e:	88 0f       	add	r24, r24
    27a0:	91 1d       	adc	r25, r1
    27a2:	96 95       	lsr	r25
    27a4:	87 95       	ror	r24
    27a6:	97 f9       	bld	r25, 7
    27a8:	08 95       	ret

000027aa <__mulsi3>:
    27aa:	db 01       	movw	r26, r22
    27ac:	8f 93       	push	r24
    27ae:	9f 93       	push	r25
    27b0:	0e 94 07 14 	call	0x280e	; 0x280e <__muluhisi3>
    27b4:	bf 91       	pop	r27
    27b6:	af 91       	pop	r26
    27b8:	a2 9f       	mul	r26, r18
    27ba:	80 0d       	add	r24, r0
    27bc:	91 1d       	adc	r25, r1
    27be:	a3 9f       	mul	r26, r19
    27c0:	90 0d       	add	r25, r0
    27c2:	b2 9f       	mul	r27, r18
    27c4:	90 0d       	add	r25, r0
    27c6:	11 24       	eor	r1, r1
    27c8:	08 95       	ret

000027ca <__udivmodsi4>:
    27ca:	a1 e2       	ldi	r26, 0x21	; 33
    27cc:	1a 2e       	mov	r1, r26
    27ce:	aa 1b       	sub	r26, r26
    27d0:	bb 1b       	sub	r27, r27
    27d2:	fd 01       	movw	r30, r26
    27d4:	0d c0       	rjmp	.+26     	; 0x27f0 <__udivmodsi4_ep>

000027d6 <__udivmodsi4_loop>:
    27d6:	aa 1f       	adc	r26, r26
    27d8:	bb 1f       	adc	r27, r27
    27da:	ee 1f       	adc	r30, r30
    27dc:	ff 1f       	adc	r31, r31
    27de:	a2 17       	cp	r26, r18
    27e0:	b3 07       	cpc	r27, r19
    27e2:	e4 07       	cpc	r30, r20
    27e4:	f5 07       	cpc	r31, r21
    27e6:	20 f0       	brcs	.+8      	; 0x27f0 <__udivmodsi4_ep>
    27e8:	a2 1b       	sub	r26, r18
    27ea:	b3 0b       	sbc	r27, r19
    27ec:	e4 0b       	sbc	r30, r20
    27ee:	f5 0b       	sbc	r31, r21

000027f0 <__udivmodsi4_ep>:
    27f0:	66 1f       	adc	r22, r22
    27f2:	77 1f       	adc	r23, r23
    27f4:	88 1f       	adc	r24, r24
    27f6:	99 1f       	adc	r25, r25
    27f8:	1a 94       	dec	r1
    27fa:	69 f7       	brne	.-38     	; 0x27d6 <__udivmodsi4_loop>
    27fc:	60 95       	com	r22
    27fe:	70 95       	com	r23
    2800:	80 95       	com	r24
    2802:	90 95       	com	r25
    2804:	9b 01       	movw	r18, r22
    2806:	ac 01       	movw	r20, r24
    2808:	bd 01       	movw	r22, r26
    280a:	cf 01       	movw	r24, r30
    280c:	08 95       	ret

0000280e <__muluhisi3>:
    280e:	0e 94 12 14 	call	0x2824	; 0x2824 <__umulhisi3>
    2812:	a5 9f       	mul	r26, r21
    2814:	90 0d       	add	r25, r0
    2816:	b4 9f       	mul	r27, r20
    2818:	90 0d       	add	r25, r0
    281a:	a4 9f       	mul	r26, r20
    281c:	80 0d       	add	r24, r0
    281e:	91 1d       	adc	r25, r1
    2820:	11 24       	eor	r1, r1
    2822:	08 95       	ret

00002824 <__umulhisi3>:
    2824:	a2 9f       	mul	r26, r18
    2826:	b0 01       	movw	r22, r0
    2828:	b3 9f       	mul	r27, r19
    282a:	c0 01       	movw	r24, r0
    282c:	a3 9f       	mul	r26, r19
    282e:	70 0d       	add	r23, r0
    2830:	81 1d       	adc	r24, r1
    2832:	11 24       	eor	r1, r1
    2834:	91 1d       	adc	r25, r1
    2836:	b2 9f       	mul	r27, r18
    2838:	70 0d       	add	r23, r0
    283a:	81 1d       	adc	r24, r1
    283c:	11 24       	eor	r1, r1
    283e:	91 1d       	adc	r25, r1
    2840:	08 95       	ret

00002842 <atoi>:
    2842:	fc 01       	movw	r30, r24
    2844:	88 27       	eor	r24, r24
    2846:	99 27       	eor	r25, r25
    2848:	e8 94       	clt
    284a:	21 91       	ld	r18, Z+
    284c:	20 32       	cpi	r18, 0x20	; 32
    284e:	e9 f3       	breq	.-6      	; 0x284a <atoi+0x8>
    2850:	29 30       	cpi	r18, 0x09	; 9
    2852:	10 f0       	brcs	.+4      	; 0x2858 <atoi+0x16>
    2854:	2e 30       	cpi	r18, 0x0E	; 14
    2856:	c8 f3       	brcs	.-14     	; 0x284a <atoi+0x8>
    2858:	2b 32       	cpi	r18, 0x2B	; 43
    285a:	41 f0       	breq	.+16     	; 0x286c <atoi+0x2a>
    285c:	2d 32       	cpi	r18, 0x2D	; 45
    285e:	39 f4       	brne	.+14     	; 0x286e <atoi+0x2c>
    2860:	68 94       	set
    2862:	04 c0       	rjmp	.+8      	; 0x286c <atoi+0x2a>
    2864:	0e 94 3f 14 	call	0x287e	; 0x287e <__mulhi_const_10>
    2868:	82 0f       	add	r24, r18
    286a:	91 1d       	adc	r25, r1
    286c:	21 91       	ld	r18, Z+
    286e:	20 53       	subi	r18, 0x30	; 48
    2870:	2a 30       	cpi	r18, 0x0A	; 10
    2872:	c0 f3       	brcs	.-16     	; 0x2864 <atoi+0x22>
    2874:	1e f4       	brtc	.+6      	; 0x287c <atoi+0x3a>
    2876:	90 95       	com	r25
    2878:	81 95       	neg	r24
    287a:	9f 4f       	sbci	r25, 0xFF	; 255
    287c:	08 95       	ret

0000287e <__mulhi_const_10>:
    287e:	7a e0       	ldi	r23, 0x0A	; 10
    2880:	97 9f       	mul	r25, r23
    2882:	90 2d       	mov	r25, r0
    2884:	87 9f       	mul	r24, r23
    2886:	80 2d       	mov	r24, r0
    2888:	91 0d       	add	r25, r1
    288a:	11 24       	eor	r1, r1
    288c:	08 95       	ret

0000288e <_exit>:
    288e:	f8 94       	cli

00002890 <__stop_program>:
    2890:	ff cf       	rjmp	.-2      	; 0x2890 <__stop_program>
