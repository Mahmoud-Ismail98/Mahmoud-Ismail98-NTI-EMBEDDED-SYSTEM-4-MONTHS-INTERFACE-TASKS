
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003378  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00003378  0000340c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800088  00800088  00003434  2**0
                  ALLOC
  3 .stab         0000282c  00000000  00000000  00003434  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fef  00000000  00000000  00005c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006eff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a7e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a940  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000abcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b39b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3d 14 	call	0x287a	; 0x287a <main>
      8a:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3e 19 	jmp	0x327c	; 0x327c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5a 19 	jmp	0x32b4	; 0x32b4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4a 19 	jmp	0x3294	; 0x3294 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4a 19 	jmp	0x3294	; 0x3294 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3e 19 	jmp	0x327c	; 0x327c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5a 19 	jmp	0x32b4	; 0x32b4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4a 19 	jmp	0x3294	; 0x3294 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4a 19 	jmp	0x3294	; 0x3294 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4a 19 	jmp	0x3294	; 0x3294 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4e 19 	jmp	0x329c	; 0x329c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6a 19 	jmp	0x32d4	; 0x32d4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <dio_writePin>:
 *      Author: Ahmed Dwidar
 */
#include"dio.h"

DIO_errorStatus dio_writePin(u8 pin_id, u8 value)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8c 83       	std	Y+4, r24	; 0x04
     b5c:	6d 83       	std	Y+5, r22	; 0x05
	DIO_errorStatus return_errorStatus = Dio_Ok;
     b5e:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_port;

	u8 loc_pin;

	if(pin_id > NUM_OF_PINS)
     b60:	8c 81       	ldd	r24, Y+4	; 0x04
     b62:	80 32       	cpi	r24, 0x20	; 32
     b64:	18 f0       	brcs	.+6      	; 0xb6c <dio_writePin+0x26>
	{
		return_errorStatus = Dio_pinError;
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	8b 83       	std	Y+3, r24	; 0x03
     b6a:	0e c1       	rjmp	.+540    	; 0xd88 <dio_writePin+0x242>
	}
	else if(value > NUM_OF_LEVELS)
     b6c:	8d 81       	ldd	r24, Y+5	; 0x05
     b6e:	82 30       	cpi	r24, 0x02	; 2
     b70:	18 f0       	brcs	.+6      	; 0xb78 <dio_writePin+0x32>
	{
		return_errorStatus = Dio_levelError;
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	8b 83       	std	Y+3, r24	; 0x03
     b76:	08 c1       	rjmp	.+528    	; 0xd88 <dio_writePin+0x242>
	}
	else
	{
		loc_pin = pin_id % NUM_OF_PINS_PER_PORT;
     b78:	8c 81       	ldd	r24, Y+4	; 0x04
     b7a:	87 70       	andi	r24, 0x07	; 7
     b7c:	89 83       	std	Y+1, r24	; 0x01
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
     b7e:	8c 81       	ldd	r24, Y+4	; 0x04
     b80:	86 95       	lsr	r24
     b82:	86 95       	lsr	r24
     b84:	86 95       	lsr	r24
     b86:	8a 83       	std	Y+2, r24	; 0x02

		switch(loc_port)
     b88:	8a 81       	ldd	r24, Y+2	; 0x02
     b8a:	28 2f       	mov	r18, r24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	3f 87       	std	Y+15, r19	; 0x0f
     b90:	2e 87       	std	Y+14, r18	; 0x0e
     b92:	8e 85       	ldd	r24, Y+14	; 0x0e
     b94:	9f 85       	ldd	r25, Y+15	; 0x0f
     b96:	81 30       	cpi	r24, 0x01	; 1
     b98:	91 05       	cpc	r25, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <dio_writePin+0x58>
     b9c:	4f c0       	rjmp	.+158    	; 0xc3c <dio_writePin+0xf6>
     b9e:	2e 85       	ldd	r18, Y+14	; 0x0e
     ba0:	3f 85       	ldd	r19, Y+15	; 0x0f
     ba2:	22 30       	cpi	r18, 0x02	; 2
     ba4:	31 05       	cpc	r19, r1
     ba6:	2c f4       	brge	.+10     	; 0xbb2 <dio_writePin+0x6c>
     ba8:	8e 85       	ldd	r24, Y+14	; 0x0e
     baa:	9f 85       	ldd	r25, Y+15	; 0x0f
     bac:	00 97       	sbiw	r24, 0x00	; 0
     bae:	71 f0       	breq	.+28     	; 0xbcc <dio_writePin+0x86>
     bb0:	eb c0       	rjmp	.+470    	; 0xd88 <dio_writePin+0x242>
     bb2:	2e 85       	ldd	r18, Y+14	; 0x0e
     bb4:	3f 85       	ldd	r19, Y+15	; 0x0f
     bb6:	22 30       	cpi	r18, 0x02	; 2
     bb8:	31 05       	cpc	r19, r1
     bba:	09 f4       	brne	.+2      	; 0xbbe <dio_writePin+0x78>
     bbc:	77 c0       	rjmp	.+238    	; 0xcac <dio_writePin+0x166>
     bbe:	8e 85       	ldd	r24, Y+14	; 0x0e
     bc0:	9f 85       	ldd	r25, Y+15	; 0x0f
     bc2:	83 30       	cpi	r24, 0x03	; 3
     bc4:	91 05       	cpc	r25, r1
     bc6:	09 f4       	brne	.+2      	; 0xbca <dio_writePin+0x84>
     bc8:	a9 c0       	rjmp	.+338    	; 0xd1c <dio_writePin+0x1d6>
     bca:	de c0       	rjmp	.+444    	; 0xd88 <dio_writePin+0x242>
		{

		case DIO_PORTA:

			switch (value)
     bcc:	8d 81       	ldd	r24, Y+5	; 0x05
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	3d 87       	std	Y+13, r19	; 0x0d
     bd4:	2c 87       	std	Y+12, r18	; 0x0c
     bd6:	8c 85       	ldd	r24, Y+12	; 0x0c
     bd8:	9d 85       	ldd	r25, Y+13	; 0x0d
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	d1 f0       	breq	.+52     	; 0xc12 <dio_writePin+0xcc>
     bde:	2c 85       	ldd	r18, Y+12	; 0x0c
     be0:	3d 85       	ldd	r19, Y+13	; 0x0d
     be2:	21 30       	cpi	r18, 0x01	; 1
     be4:	31 05       	cpc	r19, r1
     be6:	09 f0       	breq	.+2      	; 0xbea <dio_writePin+0xa4>
     be8:	cf c0       	rjmp	.+414    	; 0xd88 <dio_writePin+0x242>
			{

			case DIO_HIGH:

				SET_BIT(PORTA, loc_pin);
     bea:	ab e3       	ldi	r26, 0x3B	; 59
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	eb e3       	ldi	r30, 0x3B	; 59
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	48 2f       	mov	r20, r24
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	02 2e       	mov	r0, r18
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <dio_writePin+0xc2>
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	0a 94       	dec	r0
     c0a:	e2 f7       	brpl	.-8      	; 0xc04 <dio_writePin+0xbe>
     c0c:	84 2b       	or	r24, r20
     c0e:	8c 93       	st	X, r24
     c10:	bb c0       	rjmp	.+374    	; 0xd88 <dio_writePin+0x242>

				break;

			case DIO_LOW:

				CLEAR_BIT(PORTA, loc_pin);
     c12:	ab e3       	ldi	r26, 0x3B	; 59
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	eb e3       	ldi	r30, 0x3B	; 59
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	48 2f       	mov	r20, r24
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	28 2f       	mov	r18, r24
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	02 2e       	mov	r0, r18
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <dio_writePin+0xea>
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	0a 94       	dec	r0
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <dio_writePin+0xe6>
     c34:	80 95       	com	r24
     c36:	84 23       	and	r24, r20
     c38:	8c 93       	st	X, r24
     c3a:	a6 c0       	rjmp	.+332    	; 0xd88 <dio_writePin+0x242>
			}
			break;

		case DIO_PORTB:

			switch (value)
     c3c:	8d 81       	ldd	r24, Y+5	; 0x05
     c3e:	28 2f       	mov	r18, r24
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	3b 87       	std	Y+11, r19	; 0x0b
     c44:	2a 87       	std	Y+10, r18	; 0x0a
     c46:	8a 85       	ldd	r24, Y+10	; 0x0a
     c48:	9b 85       	ldd	r25, Y+11	; 0x0b
     c4a:	00 97       	sbiw	r24, 0x00	; 0
     c4c:	d1 f0       	breq	.+52     	; 0xc82 <dio_writePin+0x13c>
     c4e:	2a 85       	ldd	r18, Y+10	; 0x0a
     c50:	3b 85       	ldd	r19, Y+11	; 0x0b
     c52:	21 30       	cpi	r18, 0x01	; 1
     c54:	31 05       	cpc	r19, r1
     c56:	09 f0       	breq	.+2      	; 0xc5a <dio_writePin+0x114>
     c58:	97 c0       	rjmp	.+302    	; 0xd88 <dio_writePin+0x242>
			{

			case DIO_HIGH:

				SET_BIT(PORTB, loc_pin);
     c5a:	a8 e3       	ldi	r26, 0x38	; 56
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e8 e3       	ldi	r30, 0x38	; 56
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	48 2f       	mov	r20, r24
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	02 2e       	mov	r0, r18
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <dio_writePin+0x132>
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	0a 94       	dec	r0
     c7a:	e2 f7       	brpl	.-8      	; 0xc74 <dio_writePin+0x12e>
     c7c:	84 2b       	or	r24, r20
     c7e:	8c 93       	st	X, r24
     c80:	83 c0       	rjmp	.+262    	; 0xd88 <dio_writePin+0x242>

				break;

			case DIO_LOW:

				CLEAR_BIT(PORTB, loc_pin);
     c82:	a8 e3       	ldi	r26, 0x38	; 56
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e8 e3       	ldi	r30, 0x38	; 56
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	48 2f       	mov	r20, r24
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	28 2f       	mov	r18, r24
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	02 2e       	mov	r0, r18
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <dio_writePin+0x15a>
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	0a 94       	dec	r0
     ca2:	e2 f7       	brpl	.-8      	; 0xc9c <dio_writePin+0x156>
     ca4:	80 95       	com	r24
     ca6:	84 23       	and	r24, r20
     ca8:	8c 93       	st	X, r24
     caa:	6e c0       	rjmp	.+220    	; 0xd88 <dio_writePin+0x242>
			break;


		case DIO_PORTC:

			switch (value)
     cac:	8d 81       	ldd	r24, Y+5	; 0x05
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	39 87       	std	Y+9, r19	; 0x09
     cb4:	28 87       	std	Y+8, r18	; 0x08
     cb6:	88 85       	ldd	r24, Y+8	; 0x08
     cb8:	99 85       	ldd	r25, Y+9	; 0x09
     cba:	00 97       	sbiw	r24, 0x00	; 0
     cbc:	d1 f0       	breq	.+52     	; 0xcf2 <dio_writePin+0x1ac>
     cbe:	28 85       	ldd	r18, Y+8	; 0x08
     cc0:	39 85       	ldd	r19, Y+9	; 0x09
     cc2:	21 30       	cpi	r18, 0x01	; 1
     cc4:	31 05       	cpc	r19, r1
     cc6:	09 f0       	breq	.+2      	; 0xcca <dio_writePin+0x184>
     cc8:	5f c0       	rjmp	.+190    	; 0xd88 <dio_writePin+0x242>
			{

			case DIO_HIGH:

				SET_BIT(PORTC, loc_pin);
     cca:	a5 e3       	ldi	r26, 0x35	; 53
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e5 e3       	ldi	r30, 0x35	; 53
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	48 2f       	mov	r20, r24
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 2e       	mov	r0, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <dio_writePin+0x1a2>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <dio_writePin+0x19e>
     cec:	84 2b       	or	r24, r20
     cee:	8c 93       	st	X, r24
     cf0:	4b c0       	rjmp	.+150    	; 0xd88 <dio_writePin+0x242>

				break;

			case DIO_LOW:

				CLEAR_BIT(PORTC, loc_pin);
     cf2:	a5 e3       	ldi	r26, 0x35	; 53
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e5 e3       	ldi	r30, 0x35	; 53
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	48 2f       	mov	r20, r24
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <dio_writePin+0x1ca>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <dio_writePin+0x1c6>
     d14:	80 95       	com	r24
     d16:	84 23       	and	r24, r20
     d18:	8c 93       	st	X, r24
     d1a:	36 c0       	rjmp	.+108    	; 0xd88 <dio_writePin+0x242>



		case DIO_PORTD:

			switch (value)
     d1c:	8d 81       	ldd	r24, Y+5	; 0x05
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	3f 83       	std	Y+7, r19	; 0x07
     d24:	2e 83       	std	Y+6, r18	; 0x06
     d26:	8e 81       	ldd	r24, Y+6	; 0x06
     d28:	9f 81       	ldd	r25, Y+7	; 0x07
     d2a:	00 97       	sbiw	r24, 0x00	; 0
     d2c:	c9 f0       	breq	.+50     	; 0xd60 <dio_writePin+0x21a>
     d2e:	2e 81       	ldd	r18, Y+6	; 0x06
     d30:	3f 81       	ldd	r19, Y+7	; 0x07
     d32:	21 30       	cpi	r18, 0x01	; 1
     d34:	31 05       	cpc	r19, r1
     d36:	41 f5       	brne	.+80     	; 0xd88 <dio_writePin+0x242>
			{

			case DIO_HIGH:

				SET_BIT(PORTD, loc_pin);
     d38:	a2 e3       	ldi	r26, 0x32	; 50
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e2 e3       	ldi	r30, 0x32	; 50
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	48 2f       	mov	r20, r24
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	02 2e       	mov	r0, r18
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <dio_writePin+0x210>
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	0a 94       	dec	r0
     d58:	e2 f7       	brpl	.-8      	; 0xd52 <dio_writePin+0x20c>
     d5a:	84 2b       	or	r24, r20
     d5c:	8c 93       	st	X, r24
     d5e:	14 c0       	rjmp	.+40     	; 0xd88 <dio_writePin+0x242>

				break;

			case DIO_LOW:

				CLEAR_BIT(PORTD, loc_pin);
     d60:	a2 e3       	ldi	r26, 0x32	; 50
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e2 e3       	ldi	r30, 0x32	; 50
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	48 2f       	mov	r20, r24
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	02 2e       	mov	r0, r18
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <dio_writePin+0x238>
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	0a 94       	dec	r0
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <dio_writePin+0x234>
     d82:	80 95       	com	r24
     d84:	84 23       	and	r24, r20
     d86:	8c 93       	st	X, r24


		}
	}

	return return_errorStatus;
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
}
     d8a:	2f 96       	adiw	r28, 0x0f	; 15
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	08 95       	ret

00000d9c <dio_readPin>:
u8 dio_readPin(u8 pin_id)
{
     d9c:	df 93       	push	r29
     d9e:	cf 93       	push	r28
     da0:	00 d0       	rcall	.+0      	; 0xda2 <dio_readPin+0x6>
     da2:	00 d0       	rcall	.+0      	; 0xda4 <dio_readPin+0x8>
     da4:	00 d0       	rcall	.+0      	; 0xda6 <dio_readPin+0xa>
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	8c 83       	std	Y+4, r24	; 0x04
	u8 loc_port;

	u8 loc_pin;
	u8 valueRead;

		loc_pin = pin_id % NUM_OF_PINS_PER_PORT;
     dac:	8c 81       	ldd	r24, Y+4	; 0x04
     dae:	87 70       	andi	r24, 0x07	; 7
     db0:	8a 83       	std	Y+2, r24	; 0x02
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
     db2:	8c 81       	ldd	r24, Y+4	; 0x04
     db4:	86 95       	lsr	r24
     db6:	86 95       	lsr	r24
     db8:	86 95       	lsr	r24
     dba:	8b 83       	std	Y+3, r24	; 0x03

		switch(loc_port)
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	3e 83       	std	Y+6, r19	; 0x06
     dc4:	2d 83       	std	Y+5, r18	; 0x05
     dc6:	4d 81       	ldd	r20, Y+5	; 0x05
     dc8:	5e 81       	ldd	r21, Y+6	; 0x06
     dca:	41 30       	cpi	r20, 0x01	; 1
     dcc:	51 05       	cpc	r21, r1
     dce:	09 f4       	brne	.+2      	; 0xdd2 <dio_readPin+0x36>
     dd0:	55 c0       	rjmp	.+170    	; 0xe7c <dio_readPin+0xe0>
     dd2:	8d 81       	ldd	r24, Y+5	; 0x05
     dd4:	9e 81       	ldd	r25, Y+6	; 0x06
     dd6:	82 30       	cpi	r24, 0x02	; 2
     dd8:	91 05       	cpc	r25, r1
     dda:	34 f4       	brge	.+12     	; 0xde8 <dio_readPin+0x4c>
     ddc:	2d 81       	ldd	r18, Y+5	; 0x05
     dde:	3e 81       	ldd	r19, Y+6	; 0x06
     de0:	21 15       	cp	r18, r1
     de2:	31 05       	cpc	r19, r1
     de4:	71 f0       	breq	.+28     	; 0xe02 <dio_readPin+0x66>
     de6:	ff c0       	rjmp	.+510    	; 0xfe6 <dio_readPin+0x24a>
     de8:	4d 81       	ldd	r20, Y+5	; 0x05
     dea:	5e 81       	ldd	r21, Y+6	; 0x06
     dec:	42 30       	cpi	r20, 0x02	; 2
     dee:	51 05       	cpc	r21, r1
     df0:	09 f4       	brne	.+2      	; 0xdf4 <dio_readPin+0x58>
     df2:	81 c0       	rjmp	.+258    	; 0xef6 <dio_readPin+0x15a>
     df4:	8d 81       	ldd	r24, Y+5	; 0x05
     df6:	9e 81       	ldd	r25, Y+6	; 0x06
     df8:	83 30       	cpi	r24, 0x03	; 3
     dfa:	91 05       	cpc	r25, r1
     dfc:	09 f4       	brne	.+2      	; 0xe00 <dio_readPin+0x64>
     dfe:	b8 c0       	rjmp	.+368    	; 0xf70 <dio_readPin+0x1d4>
     e00:	f2 c0       	rjmp	.+484    	; 0xfe6 <dio_readPin+0x24a>
		{

		case DIO_PORTA:

			if (GET_BIT(DDRA,loc_pin) == PIN_INPUT)
     e02:	ea e3       	ldi	r30, 0x3A	; 58
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <dio_readPin+0x80>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	2a 95       	dec	r18
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <dio_readPin+0x7c>
     e20:	9a 01       	movw	r18, r20
     e22:	28 23       	and	r18, r24
     e24:	39 23       	and	r19, r25
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	88 2f       	mov	r24, r24
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	a9 01       	movw	r20, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <dio_readPin+0x98>
     e30:	55 95       	asr	r21
     e32:	47 95       	ror	r20
     e34:	8a 95       	dec	r24
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <dio_readPin+0x94>
     e38:	ca 01       	movw	r24, r20
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	09 f0       	breq	.+2      	; 0xe40 <dio_readPin+0xa4>
     e3e:	d3 c0       	rjmp	.+422    	; 0xfe6 <dio_readPin+0x24a>
			{
				valueRead = GET_BIT(PINA, loc_pin);
     e40:	e9 e3       	ldi	r30, 0x39	; 57
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <dio_readPin+0xbe>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	2a 95       	dec	r18
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <dio_readPin+0xba>
     e5e:	9a 01       	movw	r18, r20
     e60:	28 23       	and	r18, r24
     e62:	39 23       	and	r19, r25
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	88 2f       	mov	r24, r24
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	a9 01       	movw	r20, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <dio_readPin+0xd6>
     e6e:	55 95       	asr	r21
     e70:	47 95       	ror	r20
     e72:	8a 95       	dec	r24
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <dio_readPin+0xd2>
     e76:	ca 01       	movw	r24, r20
     e78:	89 83       	std	Y+1, r24	; 0x01
     e7a:	b5 c0       	rjmp	.+362    	; 0xfe6 <dio_readPin+0x24a>

				break;

		case DIO_PORTB:

			if (GET_BIT(DDRB,loc_pin) == PIN_INPUT)
     e7c:	e7 e3       	ldi	r30, 0x37	; 55
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <dio_readPin+0xfa>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	2a 95       	dec	r18
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <dio_readPin+0xf6>
     e9a:	9a 01       	movw	r18, r20
     e9c:	28 23       	and	r18, r24
     e9e:	39 23       	and	r19, r25
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	a9 01       	movw	r20, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <dio_readPin+0x112>
     eaa:	55 95       	asr	r21
     eac:	47 95       	ror	r20
     eae:	8a 95       	dec	r24
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <dio_readPin+0x10e>
     eb2:	ca 01       	movw	r24, r20
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	09 f0       	breq	.+2      	; 0xeba <dio_readPin+0x11e>
     eb8:	96 c0       	rjmp	.+300    	; 0xfe6 <dio_readPin+0x24a>
			{
				valueRead = GET_BIT(PINB, loc_pin);
     eba:	e6 e3       	ldi	r30, 0x36	; 54
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <dio_readPin+0x138>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	2a 95       	dec	r18
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <dio_readPin+0x134>
     ed8:	9a 01       	movw	r18, r20
     eda:	28 23       	and	r18, r24
     edc:	39 23       	and	r19, r25
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	a9 01       	movw	r20, r18
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <dio_readPin+0x150>
     ee8:	55 95       	asr	r21
     eea:	47 95       	ror	r20
     eec:	8a 95       	dec	r24
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <dio_readPin+0x14c>
     ef0:	ca 01       	movw	r24, r20
     ef2:	89 83       	std	Y+1, r24	; 0x01
     ef4:	78 c0       	rjmp	.+240    	; 0xfe6 <dio_readPin+0x24a>

				break;

		case DIO_PORTC:

			if (GET_BIT(DDRC,loc_pin) == PIN_INPUT)
     ef6:	e4 e3       	ldi	r30, 0x34	; 52
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	48 2f       	mov	r20, r24
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <dio_readPin+0x174>
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	2a 95       	dec	r18
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <dio_readPin+0x170>
     f14:	9a 01       	movw	r18, r20
     f16:	28 23       	and	r18, r24
     f18:	39 23       	and	r19, r25
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	a9 01       	movw	r20, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <dio_readPin+0x18c>
     f24:	55 95       	asr	r21
     f26:	47 95       	ror	r20
     f28:	8a 95       	dec	r24
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <dio_readPin+0x188>
     f2c:	ca 01       	movw	r24, r20
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	09 f0       	breq	.+2      	; 0xf34 <dio_readPin+0x198>
     f32:	59 c0       	rjmp	.+178    	; 0xfe6 <dio_readPin+0x24a>
			{
				valueRead = GET_BIT(PINC, loc_pin);
     f34:	e3 e3       	ldi	r30, 0x33	; 51
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	48 2f       	mov	r20, r24
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <dio_readPin+0x1b2>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	2a 95       	dec	r18
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <dio_readPin+0x1ae>
     f52:	9a 01       	movw	r18, r20
     f54:	28 23       	and	r18, r24
     f56:	39 23       	and	r19, r25
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	88 2f       	mov	r24, r24
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a9 01       	movw	r20, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <dio_readPin+0x1ca>
     f62:	55 95       	asr	r21
     f64:	47 95       	ror	r20
     f66:	8a 95       	dec	r24
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <dio_readPin+0x1c6>
     f6a:	ca 01       	movw	r24, r20
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	3b c0       	rjmp	.+118    	; 0xfe6 <dio_readPin+0x24a>
				break;


		case DIO_PORTD:

			if (GET_BIT(DDRD,loc_pin) == PORT_INPUT)
     f70:	e1 e3       	ldi	r30, 0x31	; 49
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	50 e0       	ldi	r21, 0x00	; 0
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <dio_readPin+0x1ee>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	2a 95       	dec	r18
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <dio_readPin+0x1ea>
     f8e:	9a 01       	movw	r18, r20
     f90:	28 23       	and	r18, r24
     f92:	39 23       	and	r19, r25
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	a9 01       	movw	r20, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <dio_readPin+0x206>
     f9e:	55 95       	asr	r21
     fa0:	47 95       	ror	r20
     fa2:	8a 95       	dec	r24
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <dio_readPin+0x202>
     fa6:	ca 01       	movw	r24, r20
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	e9 f4       	brne	.+58     	; 0xfe6 <dio_readPin+0x24a>
			{

				valueRead = GET_BIT(PIND, loc_pin);
     fac:	e0 e3       	ldi	r30, 0x30	; 48
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <dio_readPin+0x22a>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	2a 95       	dec	r18
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <dio_readPin+0x226>
     fca:	9a 01       	movw	r18, r20
     fcc:	28 23       	and	r18, r24
     fce:	39 23       	and	r19, r25
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	88 2f       	mov	r24, r24
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	a9 01       	movw	r20, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <dio_readPin+0x242>
     fda:	55 95       	asr	r21
     fdc:	47 95       	ror	r20
     fde:	8a 95       	dec	r24
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <dio_readPin+0x23e>
     fe2:	ca 01       	movw	r24, r20
     fe4:	89 83       	std	Y+1, r24	; 0x01

				break;

	}

	return valueRead;
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe8:	26 96       	adiw	r28, 0x06	; 6
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <dio_writePort>:
DIO_errorStatus dio_writePort(u8 port_id, u8 value)
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <dio_writePort+0x6>
    1000:	00 d0       	rcall	.+0      	; 0x1002 <dio_writePort+0x8>
    1002:	0f 92       	push	r0
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	8a 83       	std	Y+2, r24	; 0x02
    100a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_errorStatus return_errorStatus = Dio_Ok;
    100c:	19 82       	std	Y+1, r1	; 0x01

	if (port_id > NUM_OF_PORTS) {
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	84 30       	cpi	r24, 0x04	; 4
    1012:	18 f0       	brcs	.+6      	; 0x101a <dio_writePort+0x20>

		return_errorStatus = Dio_portError;
    1014:	85 e0       	ldi	r24, 0x05	; 5
    1016:	89 83       	std	Y+1, r24	; 0x01
    1018:	32 c0       	rjmp	.+100    	; 0x107e <dio_writePort+0x84>
	}

	else {

		switch (port_id) {
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	3d 83       	std	Y+5, r19	; 0x05
    1022:	2c 83       	std	Y+4, r18	; 0x04
    1024:	8c 81       	ldd	r24, Y+4	; 0x04
    1026:	9d 81       	ldd	r25, Y+5	; 0x05
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	91 05       	cpc	r25, r1
    102c:	d1 f0       	breq	.+52     	; 0x1062 <dio_writePort+0x68>
    102e:	2c 81       	ldd	r18, Y+4	; 0x04
    1030:	3d 81       	ldd	r19, Y+5	; 0x05
    1032:	22 30       	cpi	r18, 0x02	; 2
    1034:	31 05       	cpc	r19, r1
    1036:	2c f4       	brge	.+10     	; 0x1042 <dio_writePort+0x48>
    1038:	8c 81       	ldd	r24, Y+4	; 0x04
    103a:	9d 81       	ldd	r25, Y+5	; 0x05
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	61 f0       	breq	.+24     	; 0x1058 <dio_writePort+0x5e>
    1040:	1e c0       	rjmp	.+60     	; 0x107e <dio_writePort+0x84>
    1042:	2c 81       	ldd	r18, Y+4	; 0x04
    1044:	3d 81       	ldd	r19, Y+5	; 0x05
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	31 05       	cpc	r19, r1
    104a:	81 f0       	breq	.+32     	; 0x106c <dio_writePort+0x72>
    104c:	8c 81       	ldd	r24, Y+4	; 0x04
    104e:	9d 81       	ldd	r25, Y+5	; 0x05
    1050:	83 30       	cpi	r24, 0x03	; 3
    1052:	91 05       	cpc	r25, r1
    1054:	81 f0       	breq	.+32     	; 0x1076 <dio_writePort+0x7c>
    1056:	13 c0       	rjmp	.+38     	; 0x107e <dio_writePort+0x84>

		case DIO_PORTA:

			ASSIGN_REG(PORTA, value);
    1058:	eb e3       	ldi	r30, 0x3B	; 59
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	80 83       	st	Z, r24
    1060:	0e c0       	rjmp	.+28     	; 0x107e <dio_writePort+0x84>

			break;

		case DIO_PORTB:

			ASSIGN_REG(PORTB, value);
    1062:	e8 e3       	ldi	r30, 0x38	; 56
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	80 83       	st	Z, r24
    106a:	09 c0       	rjmp	.+18     	; 0x107e <dio_writePort+0x84>

			break;

		case DIO_PORTC:

			ASSIGN_REG(PORTC, value);
    106c:	e5 e3       	ldi	r30, 0x35	; 53
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	80 83       	st	Z, r24
    1074:	04 c0       	rjmp	.+8      	; 0x107e <dio_writePort+0x84>

			break;

		case DIO_PORTD:

			ASSIGN_REG(PORTD, value);
    1076:	e2 e3       	ldi	r30, 0x32	; 50
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	80 83       	st	Z, r24

		}

	}

	return return_errorStatus;
    107e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <dio_readPort>:
DIO_errorStatus dio_readPort(u8 port_id, pu8 level)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <dio_readPort+0x6>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <dio_readPort+0x8>
    1098:	00 d0       	rcall	.+0      	; 0x109a <dio_readPort+0xa>
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	8a 83       	std	Y+2, r24	; 0x02
    10a0:	7c 83       	std	Y+4, r23	; 0x04
    10a2:	6b 83       	std	Y+3, r22	; 0x03
	DIO_errorStatus return_errorStatus = Dio_Ok;
    10a4:	19 82       	std	Y+1, r1	; 0x01

	if (level == NULL) {
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	9c 81       	ldd	r25, Y+4	; 0x04
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	19 f4       	brne	.+6      	; 0x10b4 <dio_readPort+0x24>

		return_errorStatus = Dio_NullPointerError;
    10ae:	84 e0       	ldi	r24, 0x04	; 4
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	40 c0       	rjmp	.+128    	; 0x1134 <dio_readPort+0xa4>
	}

	else if (port_id > NUM_OF_PORTS)
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	84 30       	cpi	r24, 0x04	; 4
    10b8:	18 f0       	brcs	.+6      	; 0x10c0 <dio_readPort+0x30>
	{

		return_errorStatus = Dio_portError;
    10ba:	85 e0       	ldi	r24, 0x05	; 5
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	3a c0       	rjmp	.+116    	; 0x1134 <dio_readPort+0xa4>
	}

	else
	{

		switch (port_id) {
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	3e 83       	std	Y+6, r19	; 0x06
    10c8:	2d 83       	std	Y+5, r18	; 0x05
    10ca:	8d 81       	ldd	r24, Y+5	; 0x05
    10cc:	9e 81       	ldd	r25, Y+6	; 0x06
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	91 05       	cpc	r25, r1
    10d2:	e1 f0       	breq	.+56     	; 0x110c <dio_readPort+0x7c>
    10d4:	2d 81       	ldd	r18, Y+5	; 0x05
    10d6:	3e 81       	ldd	r19, Y+6	; 0x06
    10d8:	22 30       	cpi	r18, 0x02	; 2
    10da:	31 05       	cpc	r19, r1
    10dc:	2c f4       	brge	.+10     	; 0x10e8 <dio_readPort+0x58>
    10de:	8d 81       	ldd	r24, Y+5	; 0x05
    10e0:	9e 81       	ldd	r25, Y+6	; 0x06
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	61 f0       	breq	.+24     	; 0x10fe <dio_readPort+0x6e>
    10e6:	26 c0       	rjmp	.+76     	; 0x1134 <dio_readPort+0xa4>
    10e8:	2d 81       	ldd	r18, Y+5	; 0x05
    10ea:	3e 81       	ldd	r19, Y+6	; 0x06
    10ec:	22 30       	cpi	r18, 0x02	; 2
    10ee:	31 05       	cpc	r19, r1
    10f0:	a1 f0       	breq	.+40     	; 0x111a <dio_readPort+0x8a>
    10f2:	8d 81       	ldd	r24, Y+5	; 0x05
    10f4:	9e 81       	ldd	r25, Y+6	; 0x06
    10f6:	83 30       	cpi	r24, 0x03	; 3
    10f8:	91 05       	cpc	r25, r1
    10fa:	b1 f0       	breq	.+44     	; 0x1128 <dio_readPort+0x98>
    10fc:	1b c0       	rjmp	.+54     	; 0x1134 <dio_readPort+0xa4>

		case DIO_PORTA:

			*level = PINA;
    10fe:	e9 e3       	ldi	r30, 0x39	; 57
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	eb 81       	ldd	r30, Y+3	; 0x03
    1106:	fc 81       	ldd	r31, Y+4	; 0x04
    1108:	80 83       	st	Z, r24
    110a:	14 c0       	rjmp	.+40     	; 0x1134 <dio_readPort+0xa4>

			break;

		case DIO_PORTB:

			*level = PINB;
    110c:	e6 e3       	ldi	r30, 0x36	; 54
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	eb 81       	ldd	r30, Y+3	; 0x03
    1114:	fc 81       	ldd	r31, Y+4	; 0x04
    1116:	80 83       	st	Z, r24
    1118:	0d c0       	rjmp	.+26     	; 0x1134 <dio_readPort+0xa4>

			break;

		case DIO_PORTC:

			*level = PINC;
    111a:	e3 e3       	ldi	r30, 0x33	; 51
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	eb 81       	ldd	r30, Y+3	; 0x03
    1122:	fc 81       	ldd	r31, Y+4	; 0x04
    1124:	80 83       	st	Z, r24
    1126:	06 c0       	rjmp	.+12     	; 0x1134 <dio_readPort+0xa4>

			break;

		case DIO_PORTD:

			*level = PIND;
    1128:	e0 e3       	ldi	r30, 0x30	; 48
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	eb 81       	ldd	r30, Y+3	; 0x03
    1130:	fc 81       	ldd	r31, Y+4	; 0x04
    1132:	80 83       	st	Z, r24
			break;

		}

	}
	return return_errorStatus;
    1134:	89 81       	ldd	r24, Y+1	; 0x01
}
    1136:	26 96       	adiw	r28, 0x06	; 6
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <dio_tooglePin>:
DIO_errorStatus dio_tooglePin(u8 pin_id)
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <dio_tooglePin+0x6>
    114e:	00 d0       	rcall	.+0      	; 0x1150 <dio_tooglePin+0x8>
    1150:	00 d0       	rcall	.+0      	; 0x1152 <dio_tooglePin+0xa>
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	8c 83       	std	Y+4, r24	; 0x04
	DIO_errorStatus return_errorStatus = Dio_Ok;
    1158:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_pin;
	u8 loc_port;

	if (pin_id > NUM_OF_PINS)
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	80 32       	cpi	r24, 0x20	; 32
    115e:	18 f0       	brcs	.+6      	; 0x1166 <dio_tooglePin+0x1e>
	{
		return_errorStatus = Dio_pinError;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	8b 83       	std	Y+3, r24	; 0x03
    1164:	f9 c0       	rjmp	.+498    	; 0x1358 <dio_tooglePin+0x210>
	}

	else
	{
		loc_pin = pin_id % NUM_OF_PINS_PER_PORT;
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	87 70       	andi	r24, 0x07	; 7
    116a:	8a 83       	std	Y+2, r24	; 0x02
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	86 95       	lsr	r24
    1170:	86 95       	lsr	r24
    1172:	86 95       	lsr	r24
    1174:	89 83       	std	Y+1, r24	; 0x01

		switch (loc_port)
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	3e 83       	std	Y+6, r19	; 0x06
    117e:	2d 83       	std	Y+5, r18	; 0x05
    1180:	4d 81       	ldd	r20, Y+5	; 0x05
    1182:	5e 81       	ldd	r21, Y+6	; 0x06
    1184:	41 30       	cpi	r20, 0x01	; 1
    1186:	51 05       	cpc	r21, r1
    1188:	09 f4       	brne	.+2      	; 0x118c <dio_tooglePin+0x44>
    118a:	4c c0       	rjmp	.+152    	; 0x1224 <dio_tooglePin+0xdc>
    118c:	8d 81       	ldd	r24, Y+5	; 0x05
    118e:	9e 81       	ldd	r25, Y+6	; 0x06
    1190:	82 30       	cpi	r24, 0x02	; 2
    1192:	91 05       	cpc	r25, r1
    1194:	34 f4       	brge	.+12     	; 0x11a2 <dio_tooglePin+0x5a>
    1196:	2d 81       	ldd	r18, Y+5	; 0x05
    1198:	3e 81       	ldd	r19, Y+6	; 0x06
    119a:	21 15       	cp	r18, r1
    119c:	31 05       	cpc	r19, r1
    119e:	71 f0       	breq	.+28     	; 0x11bc <dio_tooglePin+0x74>
    11a0:	db c0       	rjmp	.+438    	; 0x1358 <dio_tooglePin+0x210>
    11a2:	4d 81       	ldd	r20, Y+5	; 0x05
    11a4:	5e 81       	ldd	r21, Y+6	; 0x06
    11a6:	42 30       	cpi	r20, 0x02	; 2
    11a8:	51 05       	cpc	r21, r1
    11aa:	09 f4       	brne	.+2      	; 0x11ae <dio_tooglePin+0x66>
    11ac:	6f c0       	rjmp	.+222    	; 0x128c <dio_tooglePin+0x144>
    11ae:	8d 81       	ldd	r24, Y+5	; 0x05
    11b0:	9e 81       	ldd	r25, Y+6	; 0x06
    11b2:	83 30       	cpi	r24, 0x03	; 3
    11b4:	91 05       	cpc	r25, r1
    11b6:	09 f4       	brne	.+2      	; 0x11ba <dio_tooglePin+0x72>
    11b8:	9d c0       	rjmp	.+314    	; 0x12f4 <dio_tooglePin+0x1ac>
    11ba:	ce c0       	rjmp	.+412    	; 0x1358 <dio_tooglePin+0x210>
		{

		case DIO_PORTA:

			if (GET_BIT(DDRA,loc_pin) == PORT_OUTPUT)
    11bc:	ea e3       	ldi	r30, 0x3A	; 58
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	50 e0       	ldi	r21, 0x00	; 0
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <dio_tooglePin+0x8e>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	2a 95       	dec	r18
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <dio_tooglePin+0x8a>
    11da:	9a 01       	movw	r18, r20
    11dc:	28 23       	and	r18, r24
    11de:	39 23       	and	r19, r25
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	88 2f       	mov	r24, r24
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	a9 01       	movw	r20, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <dio_tooglePin+0xa6>
    11ea:	55 95       	asr	r21
    11ec:	47 95       	ror	r20
    11ee:	8a 95       	dec	r24
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <dio_tooglePin+0xa2>
    11f2:	ca 01       	movw	r24, r20
    11f4:	8f 3f       	cpi	r24, 0xFF	; 255
    11f6:	91 05       	cpc	r25, r1
    11f8:	09 f0       	breq	.+2      	; 0x11fc <dio_tooglePin+0xb4>
    11fa:	ae c0       	rjmp	.+348    	; 0x1358 <dio_tooglePin+0x210>
			{
				TOGGLE_BIT(PORTA, loc_pin);
    11fc:	ab e3       	ldi	r26, 0x3B	; 59
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	eb e3       	ldi	r30, 0x3B	; 59
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 2e       	mov	r0, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <dio_tooglePin+0xd2>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	0a 94       	dec	r0
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <dio_tooglePin+0xce>
    121e:	84 27       	eor	r24, r20
    1220:	8c 93       	st	X, r24
    1222:	9a c0       	rjmp	.+308    	; 0x1358 <dio_tooglePin+0x210>
			}
			break;

		case DIO_PORTB:

			if (GET_BIT(DDRB,loc_pin) == PORT_OUTPUT)
    1224:	e7 e3       	ldi	r30, 0x37	; 55
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 c0       	rjmp	.+4      	; 0x123e <dio_tooglePin+0xf6>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	2a 95       	dec	r18
    1240:	e2 f7       	brpl	.-8      	; 0x123a <dio_tooglePin+0xf2>
    1242:	9a 01       	movw	r18, r20
    1244:	28 23       	and	r18, r24
    1246:	39 23       	and	r19, r25
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	88 2f       	mov	r24, r24
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a9 01       	movw	r20, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <dio_tooglePin+0x10e>
    1252:	55 95       	asr	r21
    1254:	47 95       	ror	r20
    1256:	8a 95       	dec	r24
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <dio_tooglePin+0x10a>
    125a:	ca 01       	movw	r24, r20
    125c:	8f 3f       	cpi	r24, 0xFF	; 255
    125e:	91 05       	cpc	r25, r1
    1260:	09 f0       	breq	.+2      	; 0x1264 <dio_tooglePin+0x11c>
    1262:	7a c0       	rjmp	.+244    	; 0x1358 <dio_tooglePin+0x210>
			{
				TOGGLE_BIT(PORTB, loc_pin);
    1264:	a8 e3       	ldi	r26, 0x38	; 56
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e8 e3       	ldi	r30, 0x38	; 56
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 2e       	mov	r0, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <dio_tooglePin+0x13a>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <dio_tooglePin+0x136>
    1286:	84 27       	eor	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	66 c0       	rjmp	.+204    	; 0x1358 <dio_tooglePin+0x210>
			}
			break;

		case DIO_PORTC:

			if (GET_BIT(DDRC,loc_pin) == PORT_OUTPUT)
    128c:	e4 e3       	ldi	r30, 0x34	; 52
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	50 e0       	ldi	r21, 0x00	; 0
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <dio_tooglePin+0x15e>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	2a 95       	dec	r18
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <dio_tooglePin+0x15a>
    12aa:	9a 01       	movw	r18, r20
    12ac:	28 23       	and	r18, r24
    12ae:	39 23       	and	r19, r25
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	88 2f       	mov	r24, r24
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a9 01       	movw	r20, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <dio_tooglePin+0x176>
    12ba:	55 95       	asr	r21
    12bc:	47 95       	ror	r20
    12be:	8a 95       	dec	r24
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <dio_tooglePin+0x172>
    12c2:	ca 01       	movw	r24, r20
    12c4:	8f 3f       	cpi	r24, 0xFF	; 255
    12c6:	91 05       	cpc	r25, r1
    12c8:	09 f0       	breq	.+2      	; 0x12cc <dio_tooglePin+0x184>
    12ca:	46 c0       	rjmp	.+140    	; 0x1358 <dio_tooglePin+0x210>
			{
				TOGGLE_BIT(PORTC, loc_pin);
    12cc:	a5 e3       	ldi	r26, 0x35	; 53
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e5 e3       	ldi	r30, 0x35	; 53
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <dio_tooglePin+0x1a2>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <dio_tooglePin+0x19e>
    12ee:	84 27       	eor	r24, r20
    12f0:	8c 93       	st	X, r24
    12f2:	32 c0       	rjmp	.+100    	; 0x1358 <dio_tooglePin+0x210>
			}
			break;

		case DIO_PORTD:

			if (GET_BIT(DDRD,loc_pin) == PORT_OUTPUT)
    12f4:	e1 e3       	ldi	r30, 0x31	; 49
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	48 2f       	mov	r20, r24
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 c0       	rjmp	.+4      	; 0x130e <dio_tooglePin+0x1c6>
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	2a 95       	dec	r18
    1310:	e2 f7       	brpl	.-8      	; 0x130a <dio_tooglePin+0x1c2>
    1312:	9a 01       	movw	r18, r20
    1314:	28 23       	and	r18, r24
    1316:	39 23       	and	r19, r25
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	88 2f       	mov	r24, r24
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	a9 01       	movw	r20, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <dio_tooglePin+0x1de>
    1322:	55 95       	asr	r21
    1324:	47 95       	ror	r20
    1326:	8a 95       	dec	r24
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <dio_tooglePin+0x1da>
    132a:	ca 01       	movw	r24, r20
    132c:	8f 3f       	cpi	r24, 0xFF	; 255
    132e:	91 05       	cpc	r25, r1
    1330:	99 f4       	brne	.+38     	; 0x1358 <dio_tooglePin+0x210>
			{
				TOGGLE_BIT(PORTD, loc_pin);
    1332:	a2 e3       	ldi	r26, 0x32	; 50
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e2 e3       	ldi	r30, 0x32	; 50
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	48 2f       	mov	r20, r24
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	02 2e       	mov	r0, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <dio_tooglePin+0x208>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	0a 94       	dec	r0
    1352:	e2 f7       	brpl	.-8      	; 0x134c <dio_tooglePin+0x204>
    1354:	84 27       	eor	r24, r20
    1356:	8c 93       	st	X, r24
			break;

		}

	}
	return return_errorStatus;
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
}
    135a:	26 96       	adiw	r28, 0x06	; 6
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <KEYPAD_getPressedKey>:
#include"util/delay.h"

static u8 KEYPAD_4x4_adjustKeyNumber(u8 button_number);

u8 KEYPAD_getPressedKey(void)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	60 97       	sbiw	r28, 0x10	; 16
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
	u8 row,col;
	setPinDirection(KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1380:	8c e0       	ldi	r24, 0x0C	; 12
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	0e 94 bd 14 	call	0x297a	; 0x297a <setPinDirection>
	setPinDirection(KEYPAD_FIRST_ROW_PIN_ID +1, PIN_INPUT);
    1388:	8d e0       	ldi	r24, 0x0D	; 13
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	0e 94 bd 14 	call	0x297a	; 0x297a <setPinDirection>
	setPinDirection(KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1390:	8e e0       	ldi	r24, 0x0E	; 14
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	0e 94 bd 14 	call	0x297a	; 0x297a <setPinDirection>
	setPinDirection(KEYPAD_FIRST_ROW_PIN_ID+3,PIN_INPUT);
    1398:	8f e0       	ldi	r24, 0x0F	; 15
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	0e 94 bd 14 	call	0x297a	; 0x297a <setPinDirection>

	setPinDirection(KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    13a0:	8a e1       	ldi	r24, 0x1A	; 26
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	0e 94 bd 14 	call	0x297a	; 0x297a <setPinDirection>
	setPinDirection(KEYPAD_FIRST_COL_PIN_ID +1, PIN_INPUT);
    13a8:	8b e1       	ldi	r24, 0x1B	; 27
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	0e 94 bd 14 	call	0x297a	; 0x297a <setPinDirection>
	setPinDirection(KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    13b0:	8c e1       	ldi	r24, 0x1C	; 28
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	0e 94 bd 14 	call	0x297a	; 0x297a <setPinDirection>
	setPinDirection(KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    13b8:	8d e1       	ldi	r24, 0x1D	; 29
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	0e 94 bd 14 	call	0x297a	; 0x297a <setPinDirection>

	 while(1)
	 {
			for(row=0 ; row<KEYPAD_NUM_ROWS ; row++)
    13c0:	18 8a       	std	Y+16, r1	; 0x10
    13c2:	a8 c0       	rjmp	.+336    	; 0x1514 <KEYPAD_getPressedKey+0x1a8>
			{
				setPinDirection(KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    13c4:	88 89       	ldd	r24, Y+16	; 0x10
    13c6:	84 5f       	subi	r24, 0xF4	; 244
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	0e 94 bd 14 	call	0x297a	; 0x297a <setPinDirection>
				dio_writePin(KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    13ce:	88 89       	ldd	r24, Y+16	; 0x10
    13d0:	84 5f       	subi	r24, 0xF4	; 244
    13d2:	60 e0       	ldi	r22, 0x00	; 0
    13d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <dio_writePin>

				for(col=0 ; col<KEYPAD_NUM_COLS ; col++)
    13d8:	1f 86       	std	Y+15, r1	; 0x0f
    13da:	1f c0       	rjmp	.+62     	; 0x141a <KEYPAD_getPressedKey+0xae>
				{

					if(dio_readPin(KEYPAD_FIRST_COL_PIN_ID+col)== KEYPAD_BUTTON_PRESSED)
    13dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    13de:	86 5e       	subi	r24, 0xE6	; 230
    13e0:	0e 94 ce 06 	call	0xd9c	; 0xd9c <dio_readPin>
    13e4:	88 23       	and	r24, r24
    13e6:	b1 f4       	brne	.+44     	; 0x1414 <KEYPAD_getPressedKey+0xa8>
					{
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    13e8:	88 89       	ldd	r24, Y+16	; 0x10
    13ea:	88 2f       	mov	r24, r24
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	98 2f       	mov	r25, r24
    13f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13fa:	89 0f       	add	r24, r25
    13fc:	8f 5f       	subi	r24, 0xFF	; 255
    13fe:	0e 94 8f 0a 	call	0x151e	; 0x151e <KEYPAD_4x4_adjustKeyNumber>
				setPinDirection(KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
					_delay_ms(5);
			}

	 }
}
    1402:	60 96       	adiw	r28, 0x10	; 16
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	cd bf       	out	0x3d, r28	; 61
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret
			for(row=0 ; row<KEYPAD_NUM_ROWS ; row++)
			{
				setPinDirection(KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
				dio_writePin(KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

				for(col=0 ; col<KEYPAD_NUM_COLS ; col++)
    1414:	8f 85       	ldd	r24, Y+15	; 0x0f
    1416:	8f 5f       	subi	r24, 0xFF	; 255
    1418:	8f 87       	std	Y+15, r24	; 0x0f
    141a:	8f 85       	ldd	r24, Y+15	; 0x0f
    141c:	84 30       	cpi	r24, 0x04	; 4
    141e:	f0 f2       	brcs	.-68     	; 0x13dc <KEYPAD_getPressedKey+0x70>
					if(dio_readPin(KEYPAD_FIRST_COL_PIN_ID+col)== KEYPAD_BUTTON_PRESSED)
					{
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					}
				}
				setPinDirection(KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1420:	88 89       	ldd	r24, Y+16	; 0x10
    1422:	84 5f       	subi	r24, 0xF4	; 244
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	0e 94 bd 14 	call	0x297a	; 0x297a <setPinDirection>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a0 ea       	ldi	r26, 0xA0	; 160
    1430:	b0 e4       	ldi	r27, 0x40	; 64
    1432:	8b 87       	std	Y+11, r24	; 0x0b
    1434:	9c 87       	std	Y+12, r25	; 0x0c
    1436:	ad 87       	std	Y+13, r26	; 0x0d
    1438:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    143a:	6b 85       	ldd	r22, Y+11	; 0x0b
    143c:	7c 85       	ldd	r23, Y+12	; 0x0c
    143e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1440:	9e 85       	ldd	r25, Y+14	; 0x0e
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	4a e7       	ldi	r20, 0x7A	; 122
    1448:	53 e4       	ldi	r21, 0x43	; 67
    144a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	8f 83       	std	Y+7, r24	; 0x07
    1454:	98 87       	std	Y+8, r25	; 0x08
    1456:	a9 87       	std	Y+9, r26	; 0x09
    1458:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    145a:	6f 81       	ldd	r22, Y+7	; 0x07
    145c:	78 85       	ldd	r23, Y+8	; 0x08
    145e:	89 85       	ldd	r24, Y+9	; 0x09
    1460:	9a 85       	ldd	r25, Y+10	; 0x0a
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	40 e8       	ldi	r20, 0x80	; 128
    1468:	5f e3       	ldi	r21, 0x3F	; 63
    146a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    146e:	88 23       	and	r24, r24
    1470:	2c f4       	brge	.+10     	; 0x147c <KEYPAD_getPressedKey+0x110>
		__ticks = 1;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	9e 83       	std	Y+6, r25	; 0x06
    1478:	8d 83       	std	Y+5, r24	; 0x05
    147a:	3f c0       	rjmp	.+126    	; 0x14fa <KEYPAD_getPressedKey+0x18e>
	else if (__tmp > 65535)
    147c:	6f 81       	ldd	r22, Y+7	; 0x07
    147e:	78 85       	ldd	r23, Y+8	; 0x08
    1480:	89 85       	ldd	r24, Y+9	; 0x09
    1482:	9a 85       	ldd	r25, Y+10	; 0x0a
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	3f ef       	ldi	r19, 0xFF	; 255
    1488:	4f e7       	ldi	r20, 0x7F	; 127
    148a:	57 e4       	ldi	r21, 0x47	; 71
    148c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1490:	18 16       	cp	r1, r24
    1492:	4c f5       	brge	.+82     	; 0x14e6 <KEYPAD_getPressedKey+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1494:	6b 85       	ldd	r22, Y+11	; 0x0b
    1496:	7c 85       	ldd	r23, Y+12	; 0x0c
    1498:	8d 85       	ldd	r24, Y+13	; 0x0d
    149a:	9e 85       	ldd	r25, Y+14	; 0x0e
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e2       	ldi	r20, 0x20	; 32
    14a2:	51 e4       	ldi	r21, 0x41	; 65
    14a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	bc 01       	movw	r22, r24
    14ae:	cd 01       	movw	r24, r26
    14b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	9e 83       	std	Y+6, r25	; 0x06
    14ba:	8d 83       	std	Y+5, r24	; 0x05
    14bc:	0f c0       	rjmp	.+30     	; 0x14dc <KEYPAD_getPressedKey+0x170>
    14be:	89 e1       	ldi	r24, 0x19	; 25
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	9c 83       	std	Y+4, r25	; 0x04
    14c4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <KEYPAD_getPressedKey+0x15e>
    14ce:	9c 83       	std	Y+4, r25	; 0x04
    14d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	9e 81       	ldd	r25, Y+6	; 0x06
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	9e 83       	std	Y+6, r25	; 0x06
    14da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14dc:	8d 81       	ldd	r24, Y+5	; 0x05
    14de:	9e 81       	ldd	r25, Y+6	; 0x06
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	69 f7       	brne	.-38     	; 0x14be <KEYPAD_getPressedKey+0x152>
    14e4:	14 c0       	rjmp	.+40     	; 0x150e <KEYPAD_getPressedKey+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e6:	6f 81       	ldd	r22, Y+7	; 0x07
    14e8:	78 85       	ldd	r23, Y+8	; 0x08
    14ea:	89 85       	ldd	r24, Y+9	; 0x09
    14ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	9e 83       	std	Y+6, r25	; 0x06
    14f8:	8d 83       	std	Y+5, r24	; 0x05
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	9a 83       	std	Y+2, r25	; 0x02
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	9a 81       	ldd	r25, Y+2	; 0x02
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <KEYPAD_getPressedKey+0x19a>
    150a:	9a 83       	std	Y+2, r25	; 0x02
    150c:	89 83       	std	Y+1, r24	; 0x01
	setPinDirection(KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
	setPinDirection(KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);

	 while(1)
	 {
			for(row=0 ; row<KEYPAD_NUM_ROWS ; row++)
    150e:	88 89       	ldd	r24, Y+16	; 0x10
    1510:	8f 5f       	subi	r24, 0xFF	; 255
    1512:	88 8b       	std	Y+16, r24	; 0x10
    1514:	88 89       	ldd	r24, Y+16	; 0x10
    1516:	84 30       	cpi	r24, 0x04	; 4
    1518:	08 f4       	brcc	.+2      	; 0x151c <KEYPAD_getPressedKey+0x1b0>
    151a:	54 cf       	rjmp	.-344    	; 0x13c4 <KEYPAD_getPressedKey+0x58>
    151c:	51 cf       	rjmp	.-350    	; 0x13c0 <KEYPAD_getPressedKey+0x54>

0000151e <KEYPAD_4x4_adjustKeyNumber>:

	 }
}

static u8 KEYPAD_4x4_adjustKeyNumber(u8 button_number)
{
    151e:	df 93       	push	r29
    1520:	cf 93       	push	r28
    1522:	00 d0       	rcall	.+0      	; 0x1524 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1524:	00 d0       	rcall	.+0      	; 0x1526 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	8a 83       	std	Y+2, r24	; 0x02
	u8 keypad_button = 0;
    152c:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	3c 83       	std	Y+4, r19	; 0x04
    1536:	2b 83       	std	Y+3, r18	; 0x03
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	88 30       	cpi	r24, 0x08	; 8
    153e:	91 05       	cpc	r25, r1
    1540:	09 f4       	brne	.+2      	; 0x1544 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1542:	70 c0       	rjmp	.+224    	; 0x1624 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1544:	2b 81       	ldd	r18, Y+3	; 0x03
    1546:	3c 81       	ldd	r19, Y+4	; 0x04
    1548:	29 30       	cpi	r18, 0x09	; 9
    154a:	31 05       	cpc	r19, r1
    154c:	5c f5       	brge	.+86     	; 0x15a4 <KEYPAD_4x4_adjustKeyNumber+0x86>
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	9c 81       	ldd	r25, Y+4	; 0x04
    1552:	84 30       	cpi	r24, 0x04	; 4
    1554:	91 05       	cpc	r25, r1
    1556:	09 f4       	brne	.+2      	; 0x155a <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1558:	59 c0       	rjmp	.+178    	; 0x160c <KEYPAD_4x4_adjustKeyNumber+0xee>
    155a:	2b 81       	ldd	r18, Y+3	; 0x03
    155c:	3c 81       	ldd	r19, Y+4	; 0x04
    155e:	25 30       	cpi	r18, 0x05	; 5
    1560:	31 05       	cpc	r19, r1
    1562:	9c f4       	brge	.+38     	; 0x158a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	82 30       	cpi	r24, 0x02	; 2
    156a:	91 05       	cpc	r25, r1
    156c:	09 f4       	brne	.+2      	; 0x1570 <KEYPAD_4x4_adjustKeyNumber+0x52>
    156e:	48 c0       	rjmp	.+144    	; 0x1600 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1570:	2b 81       	ldd	r18, Y+3	; 0x03
    1572:	3c 81       	ldd	r19, Y+4	; 0x04
    1574:	23 30       	cpi	r18, 0x03	; 3
    1576:	31 05       	cpc	r19, r1
    1578:	0c f0       	brlt	.+2      	; 0x157c <KEYPAD_4x4_adjustKeyNumber+0x5e>
    157a:	45 c0       	rjmp	.+138    	; 0x1606 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	9c 81       	ldd	r25, Y+4	; 0x04
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	91 05       	cpc	r25, r1
    1584:	09 f4       	brne	.+2      	; 0x1588 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1586:	39 c0       	rjmp	.+114    	; 0x15fa <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1588:	67 c0       	rjmp	.+206    	; 0x1658 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    158a:	2b 81       	ldd	r18, Y+3	; 0x03
    158c:	3c 81       	ldd	r19, Y+4	; 0x04
    158e:	26 30       	cpi	r18, 0x06	; 6
    1590:	31 05       	cpc	r19, r1
    1592:	09 f4       	brne	.+2      	; 0x1596 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1594:	41 c0       	rjmp	.+130    	; 0x1618 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	9c 81       	ldd	r25, Y+4	; 0x04
    159a:	87 30       	cpi	r24, 0x07	; 7
    159c:	91 05       	cpc	r25, r1
    159e:	0c f0       	brlt	.+2      	; 0x15a2 <KEYPAD_4x4_adjustKeyNumber+0x84>
    15a0:	3e c0       	rjmp	.+124    	; 0x161e <KEYPAD_4x4_adjustKeyNumber+0x100>
    15a2:	37 c0       	rjmp	.+110    	; 0x1612 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    15a4:	2b 81       	ldd	r18, Y+3	; 0x03
    15a6:	3c 81       	ldd	r19, Y+4	; 0x04
    15a8:	2c 30       	cpi	r18, 0x0C	; 12
    15aa:	31 05       	cpc	r19, r1
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <KEYPAD_4x4_adjustKeyNumber+0x92>
    15ae:	46 c0       	rjmp	.+140    	; 0x163c <KEYPAD_4x4_adjustKeyNumber+0x11e>
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	8d 30       	cpi	r24, 0x0D	; 13
    15b6:	91 05       	cpc	r25, r1
    15b8:	5c f4       	brge	.+22     	; 0x15d0 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    15ba:	2b 81       	ldd	r18, Y+3	; 0x03
    15bc:	3c 81       	ldd	r19, Y+4	; 0x04
    15be:	2a 30       	cpi	r18, 0x0A	; 10
    15c0:	31 05       	cpc	r19, r1
    15c2:	b1 f1       	breq	.+108    	; 0x1630 <KEYPAD_4x4_adjustKeyNumber+0x112>
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	8b 30       	cpi	r24, 0x0B	; 11
    15ca:	91 05       	cpc	r25, r1
    15cc:	a4 f5       	brge	.+104    	; 0x1636 <KEYPAD_4x4_adjustKeyNumber+0x118>
    15ce:	2d c0       	rjmp	.+90     	; 0x162a <KEYPAD_4x4_adjustKeyNumber+0x10c>
    15d0:	2b 81       	ldd	r18, Y+3	; 0x03
    15d2:	3c 81       	ldd	r19, Y+4	; 0x04
    15d4:	2e 30       	cpi	r18, 0x0E	; 14
    15d6:	31 05       	cpc	r19, r1
    15d8:	b9 f1       	breq	.+110    	; 0x1648 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	9c 81       	ldd	r25, Y+4	; 0x04
    15de:	8e 30       	cpi	r24, 0x0E	; 14
    15e0:	91 05       	cpc	r25, r1
    15e2:	7c f1       	brlt	.+94     	; 0x1642 <KEYPAD_4x4_adjustKeyNumber+0x124>
    15e4:	2b 81       	ldd	r18, Y+3	; 0x03
    15e6:	3c 81       	ldd	r19, Y+4	; 0x04
    15e8:	2f 30       	cpi	r18, 0x0F	; 15
    15ea:	31 05       	cpc	r19, r1
    15ec:	79 f1       	breq	.+94     	; 0x164c <KEYPAD_4x4_adjustKeyNumber+0x12e>
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	9c 81       	ldd	r25, Y+4	; 0x04
    15f2:	80 31       	cpi	r24, 0x10	; 16
    15f4:	91 05       	cpc	r25, r1
    15f6:	69 f1       	breq	.+90     	; 0x1652 <KEYPAD_4x4_adjustKeyNumber+0x134>
    15f8:	2f c0       	rjmp	.+94     	; 0x1658 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    15fa:	87 e0       	ldi	r24, 0x07	; 7
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	2e c0       	rjmp	.+92     	; 0x165c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1600:	88 e0       	ldi	r24, 0x08	; 8
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	2b c0       	rjmp	.+86     	; 0x165c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1606:	89 e0       	ldi	r24, 0x09	; 9
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	28 c0       	rjmp	.+80     	; 0x165c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%';
    160c:	85 e2       	ldi	r24, 0x25	; 37
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	25 c0       	rjmp	.+74     	; 0x165c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1612:	84 e0       	ldi	r24, 0x04	; 4
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	22 c0       	rjmp	.+68     	; 0x165c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1618:	85 e0       	ldi	r24, 0x05	; 5
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	1f c0       	rjmp	.+62     	; 0x165c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    161e:	86 e0       	ldi	r24, 0x06	; 6
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	1c c0       	rjmp	.+56     	; 0x165c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*';
    1624:	8a e2       	ldi	r24, 0x2A	; 42
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	19 c0       	rjmp	.+50     	; 0x165c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	16 c0       	rjmp	.+44     	; 0x165c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	13 c0       	rjmp	.+38     	; 0x165c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1636:	83 e0       	ldi	r24, 0x03	; 3
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	10 c0       	rjmp	.+32     	; 0x165c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-';
    163c:	8d e2       	ldi	r24, 0x2D	; 45
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	0d c0       	rjmp	.+26     	; 0x165c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;
    1642:	8d e0       	ldi	r24, 0x0D	; 13
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	0a c0       	rjmp	.+20     	; 0x165c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1648:	19 82       	std	Y+1, r1	; 0x01
    164a:	08 c0       	rjmp	.+16     	; 0x165c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '=';
    164c:	8d e3       	ldi	r24, 0x3D	; 61
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	05 c0       	rjmp	.+10     	; 0x165c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+';
    1652:	8b e2       	ldi	r24, 0x2B	; 43
    1654:	89 83       	std	Y+1, r24	; 0x01
    1656:	02 c0       	rjmp	.+4      	; 0x165c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    165c:	89 81       	ldd	r24, Y+1	; 0x01
}
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <LCD_init>:
#include"lcd.h"
#include<stdlib.h>


void LCD_init(void)
{
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	2e 97       	sbiw	r28, 0x0e	; 14
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	cd bf       	out	0x3d, r28	; 61
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	a0 ef       	ldi	r26, 0xF0	; 240
    1686:	b1 e4       	ldi	r27, 0x41	; 65
    1688:	8b 87       	std	Y+11, r24	; 0x0b
    168a:	9c 87       	std	Y+12, r25	; 0x0c
    168c:	ad 87       	std	Y+13, r26	; 0x0d
    168e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1690:	6b 85       	ldd	r22, Y+11	; 0x0b
    1692:	7c 85       	ldd	r23, Y+12	; 0x0c
    1694:	8d 85       	ldd	r24, Y+13	; 0x0d
    1696:	9e 85       	ldd	r25, Y+14	; 0x0e
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	4a e7       	ldi	r20, 0x7A	; 122
    169e:	53 e4       	ldi	r21, 0x43	; 67
    16a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	8f 83       	std	Y+7, r24	; 0x07
    16aa:	98 87       	std	Y+8, r25	; 0x08
    16ac:	a9 87       	std	Y+9, r26	; 0x09
    16ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b0:	6f 81       	ldd	r22, Y+7	; 0x07
    16b2:	78 85       	ldd	r23, Y+8	; 0x08
    16b4:	89 85       	ldd	r24, Y+9	; 0x09
    16b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e8       	ldi	r20, 0x80	; 128
    16be:	5f e3       	ldi	r21, 0x3F	; 63
    16c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c4:	88 23       	and	r24, r24
    16c6:	2c f4       	brge	.+10     	; 0x16d2 <LCD_init+0x66>
		__ticks = 1;
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	9e 83       	std	Y+6, r25	; 0x06
    16ce:	8d 83       	std	Y+5, r24	; 0x05
    16d0:	3f c0       	rjmp	.+126    	; 0x1750 <LCD_init+0xe4>
	else if (__tmp > 65535)
    16d2:	6f 81       	ldd	r22, Y+7	; 0x07
    16d4:	78 85       	ldd	r23, Y+8	; 0x08
    16d6:	89 85       	ldd	r24, Y+9	; 0x09
    16d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	3f ef       	ldi	r19, 0xFF	; 255
    16de:	4f e7       	ldi	r20, 0x7F	; 127
    16e0:	57 e4       	ldi	r21, 0x47	; 71
    16e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e6:	18 16       	cp	r1, r24
    16e8:	4c f5       	brge	.+82     	; 0x173c <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e2       	ldi	r20, 0x20	; 32
    16f8:	51 e4       	ldi	r21, 0x41	; 65
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	bc 01       	movw	r22, r24
    1704:	cd 01       	movw	r24, r26
    1706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	9e 83       	std	Y+6, r25	; 0x06
    1710:	8d 83       	std	Y+5, r24	; 0x05
    1712:	0f c0       	rjmp	.+30     	; 0x1732 <LCD_init+0xc6>
    1714:	89 e1       	ldi	r24, 0x19	; 25
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9c 83       	std	Y+4, r25	; 0x04
    171a:	8b 83       	std	Y+3, r24	; 0x03
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	9c 81       	ldd	r25, Y+4	; 0x04
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <LCD_init+0xb4>
    1724:	9c 83       	std	Y+4, r25	; 0x04
    1726:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
    172a:	9e 81       	ldd	r25, Y+6	; 0x06
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	9e 83       	std	Y+6, r25	; 0x06
    1730:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	9e 81       	ldd	r25, Y+6	; 0x06
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	69 f7       	brne	.-38     	; 0x1714 <LCD_init+0xa8>
    173a:	14 c0       	rjmp	.+40     	; 0x1764 <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173c:	6f 81       	ldd	r22, Y+7	; 0x07
    173e:	78 85       	ldd	r23, Y+8	; 0x08
    1740:	89 85       	ldd	r24, Y+9	; 0x09
    1742:	9a 85       	ldd	r25, Y+10	; 0x0a
    1744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	9e 83       	std	Y+6, r25	; 0x06
    174e:	8d 83       	std	Y+5, r24	; 0x05
    1750:	8d 81       	ldd	r24, Y+5	; 0x05
    1752:	9e 81       	ldd	r25, Y+6	; 0x06
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	9a 81       	ldd	r25, Y+2	; 0x02
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <LCD_init+0xf0>
    1760:	9a 83       	std	Y+2, r25	; 0x02
    1762:	89 83       	std	Y+1, r24	; 0x01
#if(DATA_BITS_MODE == EIGHT_BITS_MODE)

	_delay_ms(30);

	LCD_sendCommand(LCD8_2_LINES_COMMAND);
    1764:	88 e3       	ldi	r24, 0x38	; 56
    1766:	0e 94 c4 0b 	call	0x1788	; 0x1788 <LCD_sendCommand>
		_delay_ms(1);
		LCD_sendCommand(LCD4_2_LINES_SET_COMMAND);

#endif

		LCD_sendCommand(LCD_CURSOR_OFF);
    176a:	8c e0       	ldi	r24, 0x0C	; 12
    176c:	0e 94 c4 0b 	call	0x1788	; 0x1788 <LCD_sendCommand>
		LCD_sendCommand(LCD_SCREEN_CLEAR);
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	0e 94 c4 0b 	call	0x1788	; 0x1788 <LCD_sendCommand>
}
    1776:	2e 96       	adiw	r28, 0x0e	; 14
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <LCD_sendCommand>:
void LCD_sendCommand(u8 command)
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	e9 97       	sbiw	r28, 0x39	; 57
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	89 af       	std	Y+57, r24	; 0x39
	dio_writePin(LCD_RS_PIN_ID,LOGIC_LOW);
    179e:	88 e0       	ldi	r24, 0x08	; 8
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	0e 94 a3 05 	call	0xb46	; 0xb46 <dio_writePin>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	a0 e8       	ldi	r26, 0x80	; 128
    17ac:	bf e3       	ldi	r27, 0x3F	; 63
    17ae:	8d ab       	std	Y+53, r24	; 0x35
    17b0:	9e ab       	std	Y+54, r25	; 0x36
    17b2:	af ab       	std	Y+55, r26	; 0x37
    17b4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b6:	6d a9       	ldd	r22, Y+53	; 0x35
    17b8:	7e a9       	ldd	r23, Y+54	; 0x36
    17ba:	8f a9       	ldd	r24, Y+55	; 0x37
    17bc:	98 ad       	ldd	r25, Y+56	; 0x38
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	4a e7       	ldi	r20, 0x7A	; 122
    17c4:	53 e4       	ldi	r21, 0x43	; 67
    17c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	89 ab       	std	Y+49, r24	; 0x31
    17d0:	9a ab       	std	Y+50, r25	; 0x32
    17d2:	ab ab       	std	Y+51, r26	; 0x33
    17d4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17d6:	69 a9       	ldd	r22, Y+49	; 0x31
    17d8:	7a a9       	ldd	r23, Y+50	; 0x32
    17da:	8b a9       	ldd	r24, Y+51	; 0x33
    17dc:	9c a9       	ldd	r25, Y+52	; 0x34
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e8       	ldi	r20, 0x80	; 128
    17e4:	5f e3       	ldi	r21, 0x3F	; 63
    17e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ea:	88 23       	and	r24, r24
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <LCD_sendCommand+0x70>
		__ticks = 1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	98 ab       	std	Y+48, r25	; 0x30
    17f4:	8f a7       	std	Y+47, r24	; 0x2f
    17f6:	3f c0       	rjmp	.+126    	; 0x1876 <LCD_sendCommand+0xee>
	else if (__tmp > 65535)
    17f8:	69 a9       	ldd	r22, Y+49	; 0x31
    17fa:	7a a9       	ldd	r23, Y+50	; 0x32
    17fc:	8b a9       	ldd	r24, Y+51	; 0x33
    17fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	3f ef       	ldi	r19, 0xFF	; 255
    1804:	4f e7       	ldi	r20, 0x7F	; 127
    1806:	57 e4       	ldi	r21, 0x47	; 71
    1808:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    180c:	18 16       	cp	r1, r24
    180e:	4c f5       	brge	.+82     	; 0x1862 <LCD_sendCommand+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1810:	6d a9       	ldd	r22, Y+53	; 0x35
    1812:	7e a9       	ldd	r23, Y+54	; 0x36
    1814:	8f a9       	ldd	r24, Y+55	; 0x37
    1816:	98 ad       	ldd	r25, Y+56	; 0x38
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e2       	ldi	r20, 0x20	; 32
    181e:	51 e4       	ldi	r21, 0x41	; 65
    1820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	bc 01       	movw	r22, r24
    182a:	cd 01       	movw	r24, r26
    182c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	98 ab       	std	Y+48, r25	; 0x30
    1836:	8f a7       	std	Y+47, r24	; 0x2f
    1838:	0f c0       	rjmp	.+30     	; 0x1858 <LCD_sendCommand+0xd0>
    183a:	89 e1       	ldi	r24, 0x19	; 25
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9e a7       	std	Y+46, r25	; 0x2e
    1840:	8d a7       	std	Y+45, r24	; 0x2d
    1842:	8d a5       	ldd	r24, Y+45	; 0x2d
    1844:	9e a5       	ldd	r25, Y+46	; 0x2e
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	f1 f7       	brne	.-4      	; 0x1846 <LCD_sendCommand+0xbe>
    184a:	9e a7       	std	Y+46, r25	; 0x2e
    184c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1850:	98 a9       	ldd	r25, Y+48	; 0x30
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	98 ab       	std	Y+48, r25	; 0x30
    1856:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1858:	8f a5       	ldd	r24, Y+47	; 0x2f
    185a:	98 a9       	ldd	r25, Y+48	; 0x30
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	69 f7       	brne	.-38     	; 0x183a <LCD_sendCommand+0xb2>
    1860:	14 c0       	rjmp	.+40     	; 0x188a <LCD_sendCommand+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1862:	69 a9       	ldd	r22, Y+49	; 0x31
    1864:	7a a9       	ldd	r23, Y+50	; 0x32
    1866:	8b a9       	ldd	r24, Y+51	; 0x33
    1868:	9c a9       	ldd	r25, Y+52	; 0x34
    186a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	98 ab       	std	Y+48, r25	; 0x30
    1874:	8f a7       	std	Y+47, r24	; 0x2f
    1876:	8f a5       	ldd	r24, Y+47	; 0x2f
    1878:	98 a9       	ldd	r25, Y+48	; 0x30
    187a:	9c a7       	std	Y+44, r25	; 0x2c
    187c:	8b a7       	std	Y+43, r24	; 0x2b
    187e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1880:	9c a5       	ldd	r25, Y+44	; 0x2c
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	f1 f7       	brne	.-4      	; 0x1882 <LCD_sendCommand+0xfa>
    1886:	9c a7       	std	Y+44, r25	; 0x2c
    1888:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	dio_writePin(LCD_E_PIN_ID,LOGIC_HIGH);
    188a:	89 e0       	ldi	r24, 0x09	; 9
    188c:	61 e0       	ldi	r22, 0x01	; 1
    188e:	0e 94 a3 05 	call	0xb46	; 0xb46 <dio_writePin>
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	a0 e8       	ldi	r26, 0x80	; 128
    1898:	bf e3       	ldi	r27, 0x3F	; 63
    189a:	8f a3       	std	Y+39, r24	; 0x27
    189c:	98 a7       	std	Y+40, r25	; 0x28
    189e:	a9 a7       	std	Y+41, r26	; 0x29
    18a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a2:	6f a1       	ldd	r22, Y+39	; 0x27
    18a4:	78 a5       	ldd	r23, Y+40	; 0x28
    18a6:	89 a5       	ldd	r24, Y+41	; 0x29
    18a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	4a e7       	ldi	r20, 0x7A	; 122
    18b0:	53 e4       	ldi	r21, 0x43	; 67
    18b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	8b a3       	std	Y+35, r24	; 0x23
    18bc:	9c a3       	std	Y+36, r25	; 0x24
    18be:	ad a3       	std	Y+37, r26	; 0x25
    18c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18c2:	6b a1       	ldd	r22, Y+35	; 0x23
    18c4:	7c a1       	ldd	r23, Y+36	; 0x24
    18c6:	8d a1       	ldd	r24, Y+37	; 0x25
    18c8:	9e a1       	ldd	r25, Y+38	; 0x26
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e8       	ldi	r20, 0x80	; 128
    18d0:	5f e3       	ldi	r21, 0x3F	; 63
    18d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18d6:	88 23       	and	r24, r24
    18d8:	2c f4       	brge	.+10     	; 0x18e4 <LCD_sendCommand+0x15c>
		__ticks = 1;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	9a a3       	std	Y+34, r25	; 0x22
    18e0:	89 a3       	std	Y+33, r24	; 0x21
    18e2:	3f c0       	rjmp	.+126    	; 0x1962 <LCD_sendCommand+0x1da>
	else if (__tmp > 65535)
    18e4:	6b a1       	ldd	r22, Y+35	; 0x23
    18e6:	7c a1       	ldd	r23, Y+36	; 0x24
    18e8:	8d a1       	ldd	r24, Y+37	; 0x25
    18ea:	9e a1       	ldd	r25, Y+38	; 0x26
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	3f ef       	ldi	r19, 0xFF	; 255
    18f0:	4f e7       	ldi	r20, 0x7F	; 127
    18f2:	57 e4       	ldi	r21, 0x47	; 71
    18f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18f8:	18 16       	cp	r1, r24
    18fa:	4c f5       	brge	.+82     	; 0x194e <LCD_sendCommand+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fc:	6f a1       	ldd	r22, Y+39	; 0x27
    18fe:	78 a5       	ldd	r23, Y+40	; 0x28
    1900:	89 a5       	ldd	r24, Y+41	; 0x29
    1902:	9a a5       	ldd	r25, Y+42	; 0x2a
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e2       	ldi	r20, 0x20	; 32
    190a:	51 e4       	ldi	r21, 0x41	; 65
    190c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	bc 01       	movw	r22, r24
    1916:	cd 01       	movw	r24, r26
    1918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	9a a3       	std	Y+34, r25	; 0x22
    1922:	89 a3       	std	Y+33, r24	; 0x21
    1924:	0f c0       	rjmp	.+30     	; 0x1944 <LCD_sendCommand+0x1bc>
    1926:	89 e1       	ldi	r24, 0x19	; 25
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	98 a3       	std	Y+32, r25	; 0x20
    192c:	8f 8f       	std	Y+31, r24	; 0x1f
    192e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1930:	98 a1       	ldd	r25, Y+32	; 0x20
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	f1 f7       	brne	.-4      	; 0x1932 <LCD_sendCommand+0x1aa>
    1936:	98 a3       	std	Y+32, r25	; 0x20
    1938:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193a:	89 a1       	ldd	r24, Y+33	; 0x21
    193c:	9a a1       	ldd	r25, Y+34	; 0x22
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	9a a3       	std	Y+34, r25	; 0x22
    1942:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1944:	89 a1       	ldd	r24, Y+33	; 0x21
    1946:	9a a1       	ldd	r25, Y+34	; 0x22
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	69 f7       	brne	.-38     	; 0x1926 <LCD_sendCommand+0x19e>
    194c:	14 c0       	rjmp	.+40     	; 0x1976 <LCD_sendCommand+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194e:	6b a1       	ldd	r22, Y+35	; 0x23
    1950:	7c a1       	ldd	r23, Y+36	; 0x24
    1952:	8d a1       	ldd	r24, Y+37	; 0x25
    1954:	9e a1       	ldd	r25, Y+38	; 0x26
    1956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	9a a3       	std	Y+34, r25	; 0x22
    1960:	89 a3       	std	Y+33, r24	; 0x21
    1962:	89 a1       	ldd	r24, Y+33	; 0x21
    1964:	9a a1       	ldd	r25, Y+34	; 0x22
    1966:	9e 8f       	std	Y+30, r25	; 0x1e
    1968:	8d 8f       	std	Y+29, r24	; 0x1d
    196a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    196c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <LCD_sendCommand+0x1e6>
    1972:	9e 8f       	std	Y+30, r25	; 0x1e
    1974:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if(DATA_BITS_MODE == EIGHT_BITS_MODE)

	dio_writePort(LCD_DATA_PORT_ID,command);
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	69 ad       	ldd	r22, Y+57	; 0x39
    197a:	0e 94 fd 07 	call	0xffa	; 0xffa <dio_writePort>
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a0 e8       	ldi	r26, 0x80	; 128
    1984:	bf e3       	ldi	r27, 0x3F	; 63
    1986:	89 8f       	std	Y+25, r24	; 0x19
    1988:	9a 8f       	std	Y+26, r25	; 0x1a
    198a:	ab 8f       	std	Y+27, r26	; 0x1b
    198c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198e:	69 8d       	ldd	r22, Y+25	; 0x19
    1990:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1992:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1994:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4a e7       	ldi	r20, 0x7A	; 122
    199c:	53 e4       	ldi	r21, 0x43	; 67
    199e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	8d 8b       	std	Y+21, r24	; 0x15
    19a8:	9e 8b       	std	Y+22, r25	; 0x16
    19aa:	af 8b       	std	Y+23, r26	; 0x17
    19ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19ae:	6d 89       	ldd	r22, Y+21	; 0x15
    19b0:	7e 89       	ldd	r23, Y+22	; 0x16
    19b2:	8f 89       	ldd	r24, Y+23	; 0x17
    19b4:	98 8d       	ldd	r25, Y+24	; 0x18
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e8       	ldi	r20, 0x80	; 128
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c2:	88 23       	and	r24, r24
    19c4:	2c f4       	brge	.+10     	; 0x19d0 <LCD_sendCommand+0x248>
		__ticks = 1;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	9c 8b       	std	Y+20, r25	; 0x14
    19cc:	8b 8b       	std	Y+19, r24	; 0x13
    19ce:	3f c0       	rjmp	.+126    	; 0x1a4e <LCD_sendCommand+0x2c6>
	else if (__tmp > 65535)
    19d0:	6d 89       	ldd	r22, Y+21	; 0x15
    19d2:	7e 89       	ldd	r23, Y+22	; 0x16
    19d4:	8f 89       	ldd	r24, Y+23	; 0x17
    19d6:	98 8d       	ldd	r25, Y+24	; 0x18
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	3f ef       	ldi	r19, 0xFF	; 255
    19dc:	4f e7       	ldi	r20, 0x7F	; 127
    19de:	57 e4       	ldi	r21, 0x47	; 71
    19e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e4:	18 16       	cp	r1, r24
    19e6:	4c f5       	brge	.+82     	; 0x1a3a <LCD_sendCommand+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e8:	69 8d       	ldd	r22, Y+25	; 0x19
    19ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e2       	ldi	r20, 0x20	; 32
    19f6:	51 e4       	ldi	r21, 0x41	; 65
    19f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	bc 01       	movw	r22, r24
    1a02:	cd 01       	movw	r24, r26
    1a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9c 8b       	std	Y+20, r25	; 0x14
    1a0e:	8b 8b       	std	Y+19, r24	; 0x13
    1a10:	0f c0       	rjmp	.+30     	; 0x1a30 <LCD_sendCommand+0x2a8>
    1a12:	89 e1       	ldi	r24, 0x19	; 25
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	9a 8b       	std	Y+18, r25	; 0x12
    1a18:	89 8b       	std	Y+17, r24	; 0x11
    1a1a:	89 89       	ldd	r24, Y+17	; 0x11
    1a1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <LCD_sendCommand+0x296>
    1a22:	9a 8b       	std	Y+18, r25	; 0x12
    1a24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a26:	8b 89       	ldd	r24, Y+19	; 0x13
    1a28:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	9c 8b       	std	Y+20, r25	; 0x14
    1a2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a30:	8b 89       	ldd	r24, Y+19	; 0x13
    1a32:	9c 89       	ldd	r25, Y+20	; 0x14
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	69 f7       	brne	.-38     	; 0x1a12 <LCD_sendCommand+0x28a>
    1a38:	14 c0       	rjmp	.+40     	; 0x1a62 <LCD_sendCommand+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a40:	98 8d       	ldd	r25, Y+24	; 0x18
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9c 8b       	std	Y+20, r25	; 0x14
    1a4c:	8b 8b       	std	Y+19, r24	; 0x13
    1a4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a50:	9c 89       	ldd	r25, Y+20	; 0x14
    1a52:	98 8b       	std	Y+16, r25	; 0x10
    1a54:	8f 87       	std	Y+15, r24	; 0x0f
    1a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a58:	98 89       	ldd	r25, Y+16	; 0x10
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <LCD_sendCommand+0x2d2>
    1a5e:	98 8b       	std	Y+16, r25	; 0x10
    1a60:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	dio_writePin(LCD_E_PIN_ID,LOGIC_LOW);
    1a62:	89 e0       	ldi	r24, 0x09	; 9
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	0e 94 a3 05 	call	0xb46	; 0xb46 <dio_writePin>
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	a0 e8       	ldi	r26, 0x80	; 128
    1a70:	bf e3       	ldi	r27, 0x3F	; 63
    1a72:	8b 87       	std	Y+11, r24	; 0x0b
    1a74:	9c 87       	std	Y+12, r25	; 0x0c
    1a76:	ad 87       	std	Y+13, r26	; 0x0d
    1a78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	4a e7       	ldi	r20, 0x7A	; 122
    1a88:	53 e4       	ldi	r21, 0x43	; 67
    1a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	8f 83       	std	Y+7, r24	; 0x07
    1a94:	98 87       	std	Y+8, r25	; 0x08
    1a96:	a9 87       	std	Y+9, r26	; 0x09
    1a98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9c:	78 85       	ldd	r23, Y+8	; 0x08
    1a9e:	89 85       	ldd	r24, Y+9	; 0x09
    1aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e8       	ldi	r20, 0x80	; 128
    1aa8:	5f e3       	ldi	r21, 0x3F	; 63
    1aaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aae:	88 23       	and	r24, r24
    1ab0:	2c f4       	brge	.+10     	; 0x1abc <LCD_sendCommand+0x334>
		__ticks = 1;
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	9e 83       	std	Y+6, r25	; 0x06
    1ab8:	8d 83       	std	Y+5, r24	; 0x05
    1aba:	3f c0       	rjmp	.+126    	; 0x1b3a <LCD_sendCommand+0x3b2>
	else if (__tmp > 65535)
    1abc:	6f 81       	ldd	r22, Y+7	; 0x07
    1abe:	78 85       	ldd	r23, Y+8	; 0x08
    1ac0:	89 85       	ldd	r24, Y+9	; 0x09
    1ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	3f ef       	ldi	r19, 0xFF	; 255
    1ac8:	4f e7       	ldi	r20, 0x7F	; 127
    1aca:	57 e4       	ldi	r21, 0x47	; 71
    1acc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad0:	18 16       	cp	r1, r24
    1ad2:	4c f5       	brge	.+82     	; 0x1b26 <LCD_sendCommand+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ada:	9e 85       	ldd	r25, Y+14	; 0x0e
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 e2       	ldi	r20, 0x20	; 32
    1ae2:	51 e4       	ldi	r21, 0x41	; 65
    1ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	bc 01       	movw	r22, r24
    1aee:	cd 01       	movw	r24, r26
    1af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	9e 83       	std	Y+6, r25	; 0x06
    1afa:	8d 83       	std	Y+5, r24	; 0x05
    1afc:	0f c0       	rjmp	.+30     	; 0x1b1c <LCD_sendCommand+0x394>
    1afe:	89 e1       	ldi	r24, 0x19	; 25
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	9c 83       	std	Y+4, r25	; 0x04
    1b04:	8b 83       	std	Y+3, r24	; 0x03
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <LCD_sendCommand+0x382>
    1b0e:	9c 83       	std	Y+4, r25	; 0x04
    1b10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b12:	8d 81       	ldd	r24, Y+5	; 0x05
    1b14:	9e 81       	ldd	r25, Y+6	; 0x06
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	9e 83       	std	Y+6, r25	; 0x06
    1b1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	69 f7       	brne	.-38     	; 0x1afe <LCD_sendCommand+0x376>
    1b24:	14 c0       	rjmp	.+40     	; 0x1b4e <LCD_sendCommand+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b26:	6f 81       	ldd	r22, Y+7	; 0x07
    1b28:	78 85       	ldd	r23, Y+8	; 0x08
    1b2a:	89 85       	ldd	r24, Y+9	; 0x09
    1b2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	9e 83       	std	Y+6, r25	; 0x06
    1b38:	8d 83       	std	Y+5, r24	; 0x05
    1b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3e:	9a 83       	std	Y+2, r25	; 0x02
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	9a 81       	ldd	r25, Y+2	; 0x02
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <LCD_sendCommand+0x3be>
    1b4a:	9a 83       	std	Y+2, r25	; 0x02
    1b4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	dio_writePin(LCD_E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);
#endif

}
    1b4e:	e9 96       	adiw	r28, 0x39	; 57
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <LCD_displayCharacter>:
void LCD_displayCharacter(u8 character)
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	e9 97       	sbiw	r28, 0x39	; 57
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	89 af       	std	Y+57, r24	; 0x39
	dio_writePin(LCD_RS_PIN_ID,LOGIC_HIGH);
    1b76:	88 e0       	ldi	r24, 0x08	; 8
    1b78:	61 e0       	ldi	r22, 0x01	; 1
    1b7a:	0e 94 a3 05 	call	0xb46	; 0xb46 <dio_writePin>
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a0 e8       	ldi	r26, 0x80	; 128
    1b84:	bf e3       	ldi	r27, 0x3F	; 63
    1b86:	8d ab       	std	Y+53, r24	; 0x35
    1b88:	9e ab       	std	Y+54, r25	; 0x36
    1b8a:	af ab       	std	Y+55, r26	; 0x37
    1b8c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8e:	6d a9       	ldd	r22, Y+53	; 0x35
    1b90:	7e a9       	ldd	r23, Y+54	; 0x36
    1b92:	8f a9       	ldd	r24, Y+55	; 0x37
    1b94:	98 ad       	ldd	r25, Y+56	; 0x38
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	4a e7       	ldi	r20, 0x7A	; 122
    1b9c:	53 e4       	ldi	r21, 0x43	; 67
    1b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	89 ab       	std	Y+49, r24	; 0x31
    1ba8:	9a ab       	std	Y+50, r25	; 0x32
    1baa:	ab ab       	std	Y+51, r26	; 0x33
    1bac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bae:	69 a9       	ldd	r22, Y+49	; 0x31
    1bb0:	7a a9       	ldd	r23, Y+50	; 0x32
    1bb2:	8b a9       	ldd	r24, Y+51	; 0x33
    1bb4:	9c a9       	ldd	r25, Y+52	; 0x34
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e8       	ldi	r20, 0x80	; 128
    1bbc:	5f e3       	ldi	r21, 0x3F	; 63
    1bbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc2:	88 23       	and	r24, r24
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <LCD_displayCharacter+0x70>
		__ticks = 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	98 ab       	std	Y+48, r25	; 0x30
    1bcc:	8f a7       	std	Y+47, r24	; 0x2f
    1bce:	3f c0       	rjmp	.+126    	; 0x1c4e <LCD_displayCharacter+0xee>
	else if (__tmp > 65535)
    1bd0:	69 a9       	ldd	r22, Y+49	; 0x31
    1bd2:	7a a9       	ldd	r23, Y+50	; 0x32
    1bd4:	8b a9       	ldd	r24, Y+51	; 0x33
    1bd6:	9c a9       	ldd	r25, Y+52	; 0x34
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	3f ef       	ldi	r19, 0xFF	; 255
    1bdc:	4f e7       	ldi	r20, 0x7F	; 127
    1bde:	57 e4       	ldi	r21, 0x47	; 71
    1be0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be4:	18 16       	cp	r1, r24
    1be6:	4c f5       	brge	.+82     	; 0x1c3a <LCD_displayCharacter+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be8:	6d a9       	ldd	r22, Y+53	; 0x35
    1bea:	7e a9       	ldd	r23, Y+54	; 0x36
    1bec:	8f a9       	ldd	r24, Y+55	; 0x37
    1bee:	98 ad       	ldd	r25, Y+56	; 0x38
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e2       	ldi	r20, 0x20	; 32
    1bf6:	51 e4       	ldi	r21, 0x41	; 65
    1bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	bc 01       	movw	r22, r24
    1c02:	cd 01       	movw	r24, r26
    1c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	98 ab       	std	Y+48, r25	; 0x30
    1c0e:	8f a7       	std	Y+47, r24	; 0x2f
    1c10:	0f c0       	rjmp	.+30     	; 0x1c30 <LCD_displayCharacter+0xd0>
    1c12:	89 e1       	ldi	r24, 0x19	; 25
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9e a7       	std	Y+46, r25	; 0x2e
    1c18:	8d a7       	std	Y+45, r24	; 0x2d
    1c1a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c1c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD_displayCharacter+0xbe>
    1c22:	9e a7       	std	Y+46, r25	; 0x2e
    1c24:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c26:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c28:	98 a9       	ldd	r25, Y+48	; 0x30
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	98 ab       	std	Y+48, r25	; 0x30
    1c2e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c30:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c32:	98 a9       	ldd	r25, Y+48	; 0x30
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	69 f7       	brne	.-38     	; 0x1c12 <LCD_displayCharacter+0xb2>
    1c38:	14 c0       	rjmp	.+40     	; 0x1c62 <LCD_displayCharacter+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c40:	9c a9       	ldd	r25, Y+52	; 0x34
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	98 ab       	std	Y+48, r25	; 0x30
    1c4c:	8f a7       	std	Y+47, r24	; 0x2f
    1c4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c50:	98 a9       	ldd	r25, Y+48	; 0x30
    1c52:	9c a7       	std	Y+44, r25	; 0x2c
    1c54:	8b a7       	std	Y+43, r24	; 0x2b
    1c56:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c58:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_displayCharacter+0xfa>
    1c5e:	9c a7       	std	Y+44, r25	; 0x2c
    1c60:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	dio_writePin(LCD_E_PIN_ID,LOGIC_HIGH);
    1c62:	89 e0       	ldi	r24, 0x09	; 9
    1c64:	61 e0       	ldi	r22, 0x01	; 1
    1c66:	0e 94 a3 05 	call	0xb46	; 0xb46 <dio_writePin>
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	a0 e8       	ldi	r26, 0x80	; 128
    1c70:	bf e3       	ldi	r27, 0x3F	; 63
    1c72:	8f a3       	std	Y+39, r24	; 0x27
    1c74:	98 a7       	std	Y+40, r25	; 0x28
    1c76:	a9 a7       	std	Y+41, r26	; 0x29
    1c78:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c7c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c7e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c80:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	4a e7       	ldi	r20, 0x7A	; 122
    1c88:	53 e4       	ldi	r21, 0x43	; 67
    1c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	8b a3       	std	Y+35, r24	; 0x23
    1c94:	9c a3       	std	Y+36, r25	; 0x24
    1c96:	ad a3       	std	Y+37, r26	; 0x25
    1c98:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c9a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c9c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1ca0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e8       	ldi	r20, 0x80	; 128
    1ca8:	5f e3       	ldi	r21, 0x3F	; 63
    1caa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cae:	88 23       	and	r24, r24
    1cb0:	2c f4       	brge	.+10     	; 0x1cbc <LCD_displayCharacter+0x15c>
		__ticks = 1;
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	9a a3       	std	Y+34, r25	; 0x22
    1cb8:	89 a3       	std	Y+33, r24	; 0x21
    1cba:	3f c0       	rjmp	.+126    	; 0x1d3a <LCD_displayCharacter+0x1da>
	else if (__tmp > 65535)
    1cbc:	6b a1       	ldd	r22, Y+35	; 0x23
    1cbe:	7c a1       	ldd	r23, Y+36	; 0x24
    1cc0:	8d a1       	ldd	r24, Y+37	; 0x25
    1cc2:	9e a1       	ldd	r25, Y+38	; 0x26
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	3f ef       	ldi	r19, 0xFF	; 255
    1cc8:	4f e7       	ldi	r20, 0x7F	; 127
    1cca:	57 e4       	ldi	r21, 0x47	; 71
    1ccc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cd0:	18 16       	cp	r1, r24
    1cd2:	4c f5       	brge	.+82     	; 0x1d26 <LCD_displayCharacter+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd4:	6f a1       	ldd	r22, Y+39	; 0x27
    1cd6:	78 a5       	ldd	r23, Y+40	; 0x28
    1cd8:	89 a5       	ldd	r24, Y+41	; 0x29
    1cda:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e2       	ldi	r20, 0x20	; 32
    1ce2:	51 e4       	ldi	r21, 0x41	; 65
    1ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	bc 01       	movw	r22, r24
    1cee:	cd 01       	movw	r24, r26
    1cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	9a a3       	std	Y+34, r25	; 0x22
    1cfa:	89 a3       	std	Y+33, r24	; 0x21
    1cfc:	0f c0       	rjmp	.+30     	; 0x1d1c <LCD_displayCharacter+0x1bc>
    1cfe:	89 e1       	ldi	r24, 0x19	; 25
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	98 a3       	std	Y+32, r25	; 0x20
    1d04:	8f 8f       	std	Y+31, r24	; 0x1f
    1d06:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d08:	98 a1       	ldd	r25, Y+32	; 0x20
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	f1 f7       	brne	.-4      	; 0x1d0a <LCD_displayCharacter+0x1aa>
    1d0e:	98 a3       	std	Y+32, r25	; 0x20
    1d10:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d12:	89 a1       	ldd	r24, Y+33	; 0x21
    1d14:	9a a1       	ldd	r25, Y+34	; 0x22
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	9a a3       	std	Y+34, r25	; 0x22
    1d1a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	69 f7       	brne	.-38     	; 0x1cfe <LCD_displayCharacter+0x19e>
    1d24:	14 c0       	rjmp	.+40     	; 0x1d4e <LCD_displayCharacter+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d26:	6b a1       	ldd	r22, Y+35	; 0x23
    1d28:	7c a1       	ldd	r23, Y+36	; 0x24
    1d2a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d2c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	9a a3       	std	Y+34, r25	; 0x22
    1d38:	89 a3       	std	Y+33, r24	; 0x21
    1d3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d3e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d40:	8d 8f       	std	Y+29, r24	; 0x1d
    1d42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <LCD_displayCharacter+0x1e6>
    1d4a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d4c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if(DATA_BITS_MODE == EIGHT_BITS_MODE)

	dio_writePort(LCD_DATA_PORT_ID,character);
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	69 ad       	ldd	r22, Y+57	; 0x39
    1d52:	0e 94 fd 07 	call	0xffa	; 0xffa <dio_writePort>
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	a0 e8       	ldi	r26, 0x80	; 128
    1d5c:	bf e3       	ldi	r27, 0x3F	; 63
    1d5e:	89 8f       	std	Y+25, r24	; 0x19
    1d60:	9a 8f       	std	Y+26, r25	; 0x1a
    1d62:	ab 8f       	std	Y+27, r26	; 0x1b
    1d64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d66:	69 8d       	ldd	r22, Y+25	; 0x19
    1d68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	4a e7       	ldi	r20, 0x7A	; 122
    1d74:	53 e4       	ldi	r21, 0x43	; 67
    1d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	8d 8b       	std	Y+21, r24	; 0x15
    1d80:	9e 8b       	std	Y+22, r25	; 0x16
    1d82:	af 8b       	std	Y+23, r26	; 0x17
    1d84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d86:	6d 89       	ldd	r22, Y+21	; 0x15
    1d88:	7e 89       	ldd	r23, Y+22	; 0x16
    1d8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e8       	ldi	r20, 0x80	; 128
    1d94:	5f e3       	ldi	r21, 0x3F	; 63
    1d96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d9a:	88 23       	and	r24, r24
    1d9c:	2c f4       	brge	.+10     	; 0x1da8 <LCD_displayCharacter+0x248>
		__ticks = 1;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	9c 8b       	std	Y+20, r25	; 0x14
    1da4:	8b 8b       	std	Y+19, r24	; 0x13
    1da6:	3f c0       	rjmp	.+126    	; 0x1e26 <LCD_displayCharacter+0x2c6>
	else if (__tmp > 65535)
    1da8:	6d 89       	ldd	r22, Y+21	; 0x15
    1daa:	7e 89       	ldd	r23, Y+22	; 0x16
    1dac:	8f 89       	ldd	r24, Y+23	; 0x17
    1dae:	98 8d       	ldd	r25, Y+24	; 0x18
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	3f ef       	ldi	r19, 0xFF	; 255
    1db4:	4f e7       	ldi	r20, 0x7F	; 127
    1db6:	57 e4       	ldi	r21, 0x47	; 71
    1db8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dbc:	18 16       	cp	r1, r24
    1dbe:	4c f5       	brge	.+82     	; 0x1e12 <LCD_displayCharacter+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc0:	69 8d       	ldd	r22, Y+25	; 0x19
    1dc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e2       	ldi	r20, 0x20	; 32
    1dce:	51 e4       	ldi	r21, 0x41	; 65
    1dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	bc 01       	movw	r22, r24
    1dda:	cd 01       	movw	r24, r26
    1ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	9c 8b       	std	Y+20, r25	; 0x14
    1de6:	8b 8b       	std	Y+19, r24	; 0x13
    1de8:	0f c0       	rjmp	.+30     	; 0x1e08 <LCD_displayCharacter+0x2a8>
    1dea:	89 e1       	ldi	r24, 0x19	; 25
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	9a 8b       	std	Y+18, r25	; 0x12
    1df0:	89 8b       	std	Y+17, r24	; 0x11
    1df2:	89 89       	ldd	r24, Y+17	; 0x11
    1df4:	9a 89       	ldd	r25, Y+18	; 0x12
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <LCD_displayCharacter+0x296>
    1dfa:	9a 8b       	std	Y+18, r25	; 0x12
    1dfc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfe:	8b 89       	ldd	r24, Y+19	; 0x13
    1e00:	9c 89       	ldd	r25, Y+20	; 0x14
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	9c 8b       	std	Y+20, r25	; 0x14
    1e06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e08:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	69 f7       	brne	.-38     	; 0x1dea <LCD_displayCharacter+0x28a>
    1e10:	14 c0       	rjmp	.+40     	; 0x1e3a <LCD_displayCharacter+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e12:	6d 89       	ldd	r22, Y+21	; 0x15
    1e14:	7e 89       	ldd	r23, Y+22	; 0x16
    1e16:	8f 89       	ldd	r24, Y+23	; 0x17
    1e18:	98 8d       	ldd	r25, Y+24	; 0x18
    1e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	9c 8b       	std	Y+20, r25	; 0x14
    1e24:	8b 8b       	std	Y+19, r24	; 0x13
    1e26:	8b 89       	ldd	r24, Y+19	; 0x13
    1e28:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2a:	98 8b       	std	Y+16, r25	; 0x10
    1e2c:	8f 87       	std	Y+15, r24	; 0x0f
    1e2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e30:	98 89       	ldd	r25, Y+16	; 0x10
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	f1 f7       	brne	.-4      	; 0x1e32 <LCD_displayCharacter+0x2d2>
    1e36:	98 8b       	std	Y+16, r25	; 0x10
    1e38:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	dio_writePin(LCD_E_PIN_ID,LOGIC_LOW);
    1e3a:	89 e0       	ldi	r24, 0x09	; 9
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	0e 94 a3 05 	call	0xb46	; 0xb46 <dio_writePin>
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	a0 e8       	ldi	r26, 0x80	; 128
    1e48:	bf e3       	ldi	r27, 0x3F	; 63
    1e4a:	8b 87       	std	Y+11, r24	; 0x0b
    1e4c:	9c 87       	std	Y+12, r25	; 0x0c
    1e4e:	ad 87       	std	Y+13, r26	; 0x0d
    1e50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	4a e7       	ldi	r20, 0x7A	; 122
    1e60:	53 e4       	ldi	r21, 0x43	; 67
    1e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	8f 83       	std	Y+7, r24	; 0x07
    1e6c:	98 87       	std	Y+8, r25	; 0x08
    1e6e:	a9 87       	std	Y+9, r26	; 0x09
    1e70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e72:	6f 81       	ldd	r22, Y+7	; 0x07
    1e74:	78 85       	ldd	r23, Y+8	; 0x08
    1e76:	89 85       	ldd	r24, Y+9	; 0x09
    1e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	40 e8       	ldi	r20, 0x80	; 128
    1e80:	5f e3       	ldi	r21, 0x3F	; 63
    1e82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e86:	88 23       	and	r24, r24
    1e88:	2c f4       	brge	.+10     	; 0x1e94 <LCD_displayCharacter+0x334>
		__ticks = 1;
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	9e 83       	std	Y+6, r25	; 0x06
    1e90:	8d 83       	std	Y+5, r24	; 0x05
    1e92:	3f c0       	rjmp	.+126    	; 0x1f12 <LCD_displayCharacter+0x3b2>
	else if (__tmp > 65535)
    1e94:	6f 81       	ldd	r22, Y+7	; 0x07
    1e96:	78 85       	ldd	r23, Y+8	; 0x08
    1e98:	89 85       	ldd	r24, Y+9	; 0x09
    1e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ea0:	4f e7       	ldi	r20, 0x7F	; 127
    1ea2:	57 e4       	ldi	r21, 0x47	; 71
    1ea4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ea8:	18 16       	cp	r1, r24
    1eaa:	4c f5       	brge	.+82     	; 0x1efe <LCD_displayCharacter+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 e2       	ldi	r20, 0x20	; 32
    1eba:	51 e4       	ldi	r21, 0x41	; 65
    1ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	bc 01       	movw	r22, r24
    1ec6:	cd 01       	movw	r24, r26
    1ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	9e 83       	std	Y+6, r25	; 0x06
    1ed2:	8d 83       	std	Y+5, r24	; 0x05
    1ed4:	0f c0       	rjmp	.+30     	; 0x1ef4 <LCD_displayCharacter+0x394>
    1ed6:	89 e1       	ldi	r24, 0x19	; 25
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	9c 83       	std	Y+4, r25	; 0x04
    1edc:	8b 83       	std	Y+3, r24	; 0x03
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	f1 f7       	brne	.-4      	; 0x1ee2 <LCD_displayCharacter+0x382>
    1ee6:	9c 83       	std	Y+4, r25	; 0x04
    1ee8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eea:	8d 81       	ldd	r24, Y+5	; 0x05
    1eec:	9e 81       	ldd	r25, Y+6	; 0x06
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	9e 83       	std	Y+6, r25	; 0x06
    1ef2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	69 f7       	brne	.-38     	; 0x1ed6 <LCD_displayCharacter+0x376>
    1efc:	14 c0       	rjmp	.+40     	; 0x1f26 <LCD_displayCharacter+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efe:	6f 81       	ldd	r22, Y+7	; 0x07
    1f00:	78 85       	ldd	r23, Y+8	; 0x08
    1f02:	89 85       	ldd	r24, Y+9	; 0x09
    1f04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	9e 83       	std	Y+6, r25	; 0x06
    1f10:	8d 83       	std	Y+5, r24	; 0x05
    1f12:	8d 81       	ldd	r24, Y+5	; 0x05
    1f14:	9e 81       	ldd	r25, Y+6	; 0x06
    1f16:	9a 83       	std	Y+2, r25	; 0x02
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	f1 f7       	brne	.-4      	; 0x1f1e <LCD_displayCharacter+0x3be>
    1f22:	9a 83       	std	Y+2, r25	; 0x02
    1f24:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	dio_writePin(LCD_E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);
#endif

}
    1f26:	e9 96       	adiw	r28, 0x39	; 57
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <LCD_displayString>:
void LCD_displayString(pu8 str)
{
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <LCD_displayString+0x6>
    1f3e:	0f 92       	push	r0
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	9b 83       	std	Y+3, r25	; 0x03
    1f46:	8a 83       	std	Y+2, r24	; 0x02
	u8 iterator;
	for (iterator = 0; str[iterator] != '\0'; iterator++)
    1f48:	19 82       	std	Y+1, r1	; 0x01
    1f4a:	0e c0       	rjmp	.+28     	; 0x1f68 <LCD_displayString+0x30>
	{
		LCD_displayCharacter(str[iterator]);
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	9b 81       	ldd	r25, Y+3	; 0x03
    1f56:	fc 01       	movw	r30, r24
    1f58:	e2 0f       	add	r30, r18
    1f5a:	f3 1f       	adc	r31, r19
    1f5c:	80 81       	ld	r24, Z
    1f5e:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_displayCharacter>

}
void LCD_displayString(pu8 str)
{
	u8 iterator;
	for (iterator = 0; str[iterator] != '\0'; iterator++)
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	8f 5f       	subi	r24, 0xFF	; 255
    1f66:	89 83       	std	Y+1, r24	; 0x01
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	9b 81       	ldd	r25, Y+3	; 0x03
    1f72:	fc 01       	movw	r30, r24
    1f74:	e2 0f       	add	r30, r18
    1f76:	f3 1f       	adc	r31, r19
    1f78:	80 81       	ld	r24, Z
    1f7a:	88 23       	and	r24, r24
    1f7c:	39 f7       	brne	.-50     	; 0x1f4c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[iterator]);
	}
}
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <LCD_moveCurser>:
void LCD_moveCurser(u8 row,u8 col)
{
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	00 d0       	rcall	.+0      	; 0x1f90 <LCD_moveCurser+0x6>
    1f90:	00 d0       	rcall	.+0      	; 0x1f92 <LCD_moveCurser+0x8>
    1f92:	0f 92       	push	r0
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	8a 83       	std	Y+2, r24	; 0x02
    1f9a:	6b 83       	std	Y+3, r22	; 0x03
	u8 lcd_memory_adress;

#if(LCD_NUM_OF_COLUMNS == LCD_16_COLS)
	switch(row)
    1f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	3d 83       	std	Y+5, r19	; 0x05
    1fa4:	2c 83       	std	Y+4, r18	; 0x04
    1fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa8:	9d 81       	ldd	r25, Y+5	; 0x05
    1faa:	81 30       	cpi	r24, 0x01	; 1
    1fac:	91 05       	cpc	r25, r1
    1fae:	c1 f0       	breq	.+48     	; 0x1fe0 <LCD_moveCurser+0x56>
    1fb0:	2c 81       	ldd	r18, Y+4	; 0x04
    1fb2:	3d 81       	ldd	r19, Y+5	; 0x05
    1fb4:	22 30       	cpi	r18, 0x02	; 2
    1fb6:	31 05       	cpc	r19, r1
    1fb8:	2c f4       	brge	.+10     	; 0x1fc4 <LCD_moveCurser+0x3a>
    1fba:	8c 81       	ldd	r24, Y+4	; 0x04
    1fbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	61 f0       	breq	.+24     	; 0x1fda <LCD_moveCurser+0x50>
    1fc2:	19 c0       	rjmp	.+50     	; 0x1ff6 <LCD_moveCurser+0x6c>
    1fc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1fc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1fc8:	22 30       	cpi	r18, 0x02	; 2
    1fca:	31 05       	cpc	r19, r1
    1fcc:	69 f0       	breq	.+26     	; 0x1fe8 <LCD_moveCurser+0x5e>
    1fce:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd2:	83 30       	cpi	r24, 0x03	; 3
    1fd4:	91 05       	cpc	r25, r1
    1fd6:	61 f0       	breq	.+24     	; 0x1ff0 <LCD_moveCurser+0x66>
    1fd8:	0e c0       	rjmp	.+28     	; 0x1ff6 <LCD_moveCurser+0x6c>
	{
	case 0:
		lcd_memory_adress = col;
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	89 83       	std	Y+1, r24	; 0x01
    1fde:	0b c0       	rjmp	.+22     	; 0x1ff6 <LCD_moveCurser+0x6c>
		break;
	case 1:
		lcd_memory_adress = col + 0x40;
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	80 5c       	subi	r24, 0xC0	; 192
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    1fe6:	07 c0       	rjmp	.+14     	; 0x1ff6 <LCD_moveCurser+0x6c>
		break;
	case 2:
		lcd_memory_adress = col + 0x10;
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	80 5f       	subi	r24, 0xF0	; 240
    1fec:	89 83       	std	Y+1, r24	; 0x01
    1fee:	03 c0       	rjmp	.+6      	; 0x1ff6 <LCD_moveCurser+0x6c>
		break;
	case 3:
		lcd_memory_adress = col + 0x50;
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	80 5b       	subi	r24, 0xB0	; 176
    1ff4:	89 83       	std	Y+1, r24	; 0x01
		break;

	}
#endif

	LCD_sendCommand(lcd_memory_adress | LCD_SET_CURSOR_LOCATION);
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	80 68       	ori	r24, 0x80	; 128
    1ffa:	0e 94 c4 0b 	call	0x1788	; 0x1788 <LCD_sendCommand>
}
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(u8 row,u8 col,pu8 str)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	00 d0       	rcall	.+0      	; 0x2014 <LCD_displayStringRowColumn+0x6>
    2014:	00 d0       	rcall	.+0      	; 0x2016 <LCD_displayStringRowColumn+0x8>
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	89 83       	std	Y+1, r24	; 0x01
    201c:	6a 83       	std	Y+2, r22	; 0x02
    201e:	5c 83       	std	Y+4, r21	; 0x04
    2020:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCurser(row,col);
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	6a 81       	ldd	r22, Y+2	; 0x02
    2026:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <LCD_moveCurser>
	LCD_displayString(str);
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	9c 81       	ldd	r25, Y+4	; 0x04
    202e:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_displayString>
}
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <LCD_intgerToString>:
//		LCD_displayCharacter( (loc_inverse % 10) + '0' );
//		loc_inverse /= 10;
//	}
//}
void LCD_intgerToString(int data)
{
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	62 97       	sbiw	r28, 0x12	; 18
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	9a 8b       	std	Y+18, r25	; 0x12
    2056:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10);
    2058:	89 89       	ldd	r24, Y+17	; 0x11
    205a:	9a 89       	ldd	r25, Y+18	; 0x12
    205c:	9e 01       	movw	r18, r28
    205e:	2f 5f       	subi	r18, 0xFF	; 255
    2060:	3f 4f       	sbci	r19, 0xFF	; 255
    2062:	b9 01       	movw	r22, r18
    2064:	4a e0       	ldi	r20, 0x0A	; 10
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	0e 94 75 19 	call	0x32ea	; 0x32ea <itoa>
	LCD_displayString(buff);
    206c:	ce 01       	movw	r24, r28
    206e:	01 96       	adiw	r24, 0x01	; 1
    2070:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_displayString>
}
    2074:	62 96       	adiw	r28, 0x12	; 18
    2076:	0f b6       	in	r0, 0x3f	; 63
    2078:	f8 94       	cli
    207a:	de bf       	out	0x3e, r29	; 62
    207c:	0f be       	out	0x3f, r0	; 63
    207e:	cd bf       	out	0x3d, r28	; 61
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	08 95       	ret

00002086 <LCD_creatCustomCharacter>:
void LCD_creatCustomCharacter(pu8 character, u8 index)
{
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
    208e:	63 97       	sbiw	r28, 0x13	; 19
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	9a 8b       	std	Y+18, r25	; 0x12
    209c:	89 8b       	std	Y+17, r24	; 0x11
    209e:	6b 8b       	std	Y+19, r22	; 0x13
	u8 iterator;
	u8 loc_CGRAM_aaddress;

	if(index < 8)
    20a0:	8b 89       	ldd	r24, Y+19	; 0x13
    20a2:	88 30       	cpi	r24, 0x08	; 8
    20a4:	08 f0       	brcs	.+2      	; 0x20a8 <LCD_creatCustomCharacter+0x22>
    20a6:	96 c0       	rjmp	.+300    	; 0x21d4 <LCD_creatCustomCharacter+0x14e>
	{
		loc_CGRAM_aaddress =( LCD_CGRAM_BASE_ADDRESS + (index * LCD_NUMBER_OF_LOCATIONS_IN_CGRAM) );
    20a8:	8b 89       	ldd	r24, Y+19	; 0x13
    20aa:	88 2f       	mov	r24, r24
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	08 96       	adiw	r24, 0x08	; 8
    20b0:	88 0f       	add	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	88 0f       	add	r24, r24
    20b6:	99 1f       	adc	r25, r25
    20b8:	88 0f       	add	r24, r24
    20ba:	99 1f       	adc	r25, r25
    20bc:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_sendCommand(loc_CGRAM_aaddress);
    20be:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c0:	0e 94 c4 0b 	call	0x1788	; 0x1788 <LCD_sendCommand>

		for(iterator = 0; iterator < LCD_NUMBER_OF_LOCATIONS_IN_CGRAM; iterator++)
    20c4:	18 8a       	std	Y+16, r1	; 0x10
    20c6:	0e c0       	rjmp	.+28     	; 0x20e4 <LCD_creatCustomCharacter+0x5e>
		{
			LCD_displayCharacter(character[iterator]);
    20c8:	88 89       	ldd	r24, Y+16	; 0x10
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	89 89       	ldd	r24, Y+17	; 0x11
    20d0:	9a 89       	ldd	r25, Y+18	; 0x12
    20d2:	fc 01       	movw	r30, r24
    20d4:	e2 0f       	add	r30, r18
    20d6:	f3 1f       	adc	r31, r19
    20d8:	80 81       	ld	r24, Z
    20da:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_displayCharacter>
	if(index < 8)
	{
		loc_CGRAM_aaddress =( LCD_CGRAM_BASE_ADDRESS + (index * LCD_NUMBER_OF_LOCATIONS_IN_CGRAM) );
		LCD_sendCommand(loc_CGRAM_aaddress);

		for(iterator = 0; iterator < LCD_NUMBER_OF_LOCATIONS_IN_CGRAM; iterator++)
    20de:	88 89       	ldd	r24, Y+16	; 0x10
    20e0:	8f 5f       	subi	r24, 0xFF	; 255
    20e2:	88 8b       	std	Y+16, r24	; 0x10
    20e4:	88 89       	ldd	r24, Y+16	; 0x10
    20e6:	88 30       	cpi	r24, 0x08	; 8
    20e8:	78 f3       	brcs	.-34     	; 0x20c8 <LCD_creatCustomCharacter+0x42>
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	a0 e0       	ldi	r26, 0x00	; 0
    20f0:	b0 e4       	ldi	r27, 0x40	; 64
    20f2:	8b 87       	std	Y+11, r24	; 0x0b
    20f4:	9c 87       	std	Y+12, r25	; 0x0c
    20f6:	ad 87       	std	Y+13, r26	; 0x0d
    20f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    20fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2100:	9e 85       	ldd	r25, Y+14	; 0x0e
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	4a e7       	ldi	r20, 0x7A	; 122
    2108:	53 e4       	ldi	r21, 0x43	; 67
    210a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	8f 83       	std	Y+7, r24	; 0x07
    2114:	98 87       	std	Y+8, r25	; 0x08
    2116:	a9 87       	std	Y+9, r26	; 0x09
    2118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    211a:	6f 81       	ldd	r22, Y+7	; 0x07
    211c:	78 85       	ldd	r23, Y+8	; 0x08
    211e:	89 85       	ldd	r24, Y+9	; 0x09
    2120:	9a 85       	ldd	r25, Y+10	; 0x0a
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e8       	ldi	r20, 0x80	; 128
    2128:	5f e3       	ldi	r21, 0x3F	; 63
    212a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    212e:	88 23       	and	r24, r24
    2130:	2c f4       	brge	.+10     	; 0x213c <LCD_creatCustomCharacter+0xb6>
		__ticks = 1;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	9e 83       	std	Y+6, r25	; 0x06
    2138:	8d 83       	std	Y+5, r24	; 0x05
    213a:	3f c0       	rjmp	.+126    	; 0x21ba <LCD_creatCustomCharacter+0x134>
	else if (__tmp > 65535)
    213c:	6f 81       	ldd	r22, Y+7	; 0x07
    213e:	78 85       	ldd	r23, Y+8	; 0x08
    2140:	89 85       	ldd	r24, Y+9	; 0x09
    2142:	9a 85       	ldd	r25, Y+10	; 0x0a
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	3f ef       	ldi	r19, 0xFF	; 255
    2148:	4f e7       	ldi	r20, 0x7F	; 127
    214a:	57 e4       	ldi	r21, 0x47	; 71
    214c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2150:	18 16       	cp	r1, r24
    2152:	4c f5       	brge	.+82     	; 0x21a6 <LCD_creatCustomCharacter+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2154:	6b 85       	ldd	r22, Y+11	; 0x0b
    2156:	7c 85       	ldd	r23, Y+12	; 0x0c
    2158:	8d 85       	ldd	r24, Y+13	; 0x0d
    215a:	9e 85       	ldd	r25, Y+14	; 0x0e
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e2       	ldi	r20, 0x20	; 32
    2162:	51 e4       	ldi	r21, 0x41	; 65
    2164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	bc 01       	movw	r22, r24
    216e:	cd 01       	movw	r24, r26
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9e 83       	std	Y+6, r25	; 0x06
    217a:	8d 83       	std	Y+5, r24	; 0x05
    217c:	0f c0       	rjmp	.+30     	; 0x219c <LCD_creatCustomCharacter+0x116>
    217e:	89 e1       	ldi	r24, 0x19	; 25
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	9c 83       	std	Y+4, r25	; 0x04
    2184:	8b 83       	std	Y+3, r24	; 0x03
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	9c 81       	ldd	r25, Y+4	; 0x04
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <LCD_creatCustomCharacter+0x104>
    218e:	9c 83       	std	Y+4, r25	; 0x04
    2190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2192:	8d 81       	ldd	r24, Y+5	; 0x05
    2194:	9e 81       	ldd	r25, Y+6	; 0x06
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	9e 83       	std	Y+6, r25	; 0x06
    219a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	9e 81       	ldd	r25, Y+6	; 0x06
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	69 f7       	brne	.-38     	; 0x217e <LCD_creatCustomCharacter+0xf8>
    21a4:	14 c0       	rjmp	.+40     	; 0x21ce <LCD_creatCustomCharacter+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a6:	6f 81       	ldd	r22, Y+7	; 0x07
    21a8:	78 85       	ldd	r23, Y+8	; 0x08
    21aa:	89 85       	ldd	r24, Y+9	; 0x09
    21ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9e 83       	std	Y+6, r25	; 0x06
    21b8:	8d 83       	std	Y+5, r24	; 0x05
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	9e 81       	ldd	r25, Y+6	; 0x06
    21be:	9a 83       	std	Y+2, r25	; 0x02
    21c0:	89 83       	std	Y+1, r24	; 0x01
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	9a 81       	ldd	r25, Y+2	; 0x02
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <LCD_creatCustomCharacter+0x140>
    21ca:	9a 83       	std	Y+2, r25	; 0x02
    21cc:	89 83       	std	Y+1, r24	; 0x01
		{
			LCD_displayCharacter(character[iterator]);
		}
		_delay_ms(2);
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION);
    21ce:	80 e8       	ldi	r24, 0x80	; 128
    21d0:	0e 94 c4 0b 	call	0x1788	; 0x1788 <LCD_sendCommand>
	}
}
    21d4:	63 96       	adiw	r28, 0x13	; 19
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	cd bf       	out	0x3d, r28	; 61
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_SCREEN_CLEAR);
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	0e 94 c4 0b 	call	0x1788	; 0x1788 <LCD_sendCommand>
}
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <shiftDisplay_right>:
void shiftDisplay_right(void)
{
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_SHIFT_DISPLAY_RIGHT);
    2202:	85 e0       	ldi	r24, 0x05	; 5
    2204:	0e 94 c4 0b 	call	0x1788	; 0x1788 <LCD_sendCommand>
}
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <creatFirstOperand>:
#include<util/delay.h>

u8 op = 0;

u32 creatFirstOperand(u8 opand1[],u8 size)
{
    220e:	0f 93       	push	r16
    2210:	1f 93       	push	r17
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	69 97       	sbiw	r28, 0x19	; 25
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	98 8f       	std	Y+24, r25	; 0x18
    2228:	8f 8b       	std	Y+23, r24	; 0x17
    222a:	69 8f       	std	Y+25, r22	; 0x19

	u8 i = 0;
    222c:	1e 8a       	std	Y+22, r1	; 0x16
	u8 flag = 0,op_index = 0,holder = 0;
    222e:	1d 8a       	std	Y+21, r1	; 0x15
    2230:	1c 8a       	std	Y+20, r1	; 0x14
    2232:	1b 8a       	std	Y+19, r1	; 0x13
	u32 n1;

	LCD_displayStringRowColumn(0,1,"PLZ enter n1");
    2234:	20 e6       	ldi	r18, 0x60	; 96
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	61 e0       	ldi	r22, 0x01	; 1
    223c:	a9 01       	movw	r20, r18
    223e:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_displayStringRowColumn>
	LCD_moveCurser(1,1);
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	61 e0       	ldi	r22, 0x01	; 1
    2246:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <LCD_moveCurser>
    224a:	19 c1       	rjmp	.+562    	; 0x247e <creatFirstOperand+0x270>

	while (i < 5)
	{

		if(flag == 0)
    224c:	8d 89       	ldd	r24, Y+21	; 0x15
    224e:	88 23       	and	r24, r24
    2250:	09 f0       	breq	.+2      	; 0x2254 <creatFirstOperand+0x46>
    2252:	0b c1       	rjmp	.+534    	; 0x246a <creatFirstOperand+0x25c>
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	a8 e4       	ldi	r26, 0x48	; 72
    225a:	b3 e4       	ldi	r27, 0x43	; 67
    225c:	8b 87       	std	Y+11, r24	; 0x0b
    225e:	9c 87       	std	Y+12, r25	; 0x0c
    2260:	ad 87       	std	Y+13, r26	; 0x0d
    2262:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2264:	6b 85       	ldd	r22, Y+11	; 0x0b
    2266:	7c 85       	ldd	r23, Y+12	; 0x0c
    2268:	8d 85       	ldd	r24, Y+13	; 0x0d
    226a:	9e 85       	ldd	r25, Y+14	; 0x0e
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	4a e7       	ldi	r20, 0x7A	; 122
    2272:	53 e4       	ldi	r21, 0x43	; 67
    2274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	8f 83       	std	Y+7, r24	; 0x07
    227e:	98 87       	std	Y+8, r25	; 0x08
    2280:	a9 87       	std	Y+9, r26	; 0x09
    2282:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2284:	6f 81       	ldd	r22, Y+7	; 0x07
    2286:	78 85       	ldd	r23, Y+8	; 0x08
    2288:	89 85       	ldd	r24, Y+9	; 0x09
    228a:	9a 85       	ldd	r25, Y+10	; 0x0a
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	40 e8       	ldi	r20, 0x80	; 128
    2292:	5f e3       	ldi	r21, 0x3F	; 63
    2294:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2298:	88 23       	and	r24, r24
    229a:	2c f4       	brge	.+10     	; 0x22a6 <creatFirstOperand+0x98>
		__ticks = 1;
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	9e 83       	std	Y+6, r25	; 0x06
    22a2:	8d 83       	std	Y+5, r24	; 0x05
    22a4:	3f c0       	rjmp	.+126    	; 0x2324 <creatFirstOperand+0x116>
	else if (__tmp > 65535)
    22a6:	6f 81       	ldd	r22, Y+7	; 0x07
    22a8:	78 85       	ldd	r23, Y+8	; 0x08
    22aa:	89 85       	ldd	r24, Y+9	; 0x09
    22ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	3f ef       	ldi	r19, 0xFF	; 255
    22b2:	4f e7       	ldi	r20, 0x7F	; 127
    22b4:	57 e4       	ldi	r21, 0x47	; 71
    22b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ba:	18 16       	cp	r1, r24
    22bc:	4c f5       	brge	.+82     	; 0x2310 <creatFirstOperand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22be:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e2       	ldi	r20, 0x20	; 32
    22cc:	51 e4       	ldi	r21, 0x41	; 65
    22ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	bc 01       	movw	r22, r24
    22d8:	cd 01       	movw	r24, r26
    22da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	9e 83       	std	Y+6, r25	; 0x06
    22e4:	8d 83       	std	Y+5, r24	; 0x05
    22e6:	0f c0       	rjmp	.+30     	; 0x2306 <creatFirstOperand+0xf8>
    22e8:	89 e1       	ldi	r24, 0x19	; 25
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	9c 83       	std	Y+4, r25	; 0x04
    22ee:	8b 83       	std	Y+3, r24	; 0x03
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	9c 81       	ldd	r25, Y+4	; 0x04
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <creatFirstOperand+0xe6>
    22f8:	9c 83       	std	Y+4, r25	; 0x04
    22fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	9e 83       	std	Y+6, r25	; 0x06
    2304:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2306:	8d 81       	ldd	r24, Y+5	; 0x05
    2308:	9e 81       	ldd	r25, Y+6	; 0x06
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	69 f7       	brne	.-38     	; 0x22e8 <creatFirstOperand+0xda>
    230e:	14 c0       	rjmp	.+40     	; 0x2338 <creatFirstOperand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2310:	6f 81       	ldd	r22, Y+7	; 0x07
    2312:	78 85       	ldd	r23, Y+8	; 0x08
    2314:	89 85       	ldd	r24, Y+9	; 0x09
    2316:	9a 85       	ldd	r25, Y+10	; 0x0a
    2318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	9e 83       	std	Y+6, r25	; 0x06
    2322:	8d 83       	std	Y+5, r24	; 0x05
    2324:	8d 81       	ldd	r24, Y+5	; 0x05
    2326:	9e 81       	ldd	r25, Y+6	; 0x06
    2328:	9a 83       	std	Y+2, r25	; 0x02
    232a:	89 83       	std	Y+1, r24	; 0x01
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	9a 81       	ldd	r25, Y+2	; 0x02
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <creatFirstOperand+0x122>
    2334:	9a 83       	std	Y+2, r25	; 0x02
    2336:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(200);
			opand1[i] = KEYPAD_getPressedKey();
    2338:	8e 89       	ldd	r24, Y+22	; 0x16
    233a:	28 2f       	mov	r18, r24
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	8f 89       	ldd	r24, Y+23	; 0x17
    2340:	98 8d       	ldd	r25, Y+24	; 0x18
    2342:	8c 01       	movw	r16, r24
    2344:	02 0f       	add	r16, r18
    2346:	13 1f       	adc	r17, r19
    2348:	0e 94 b6 09 	call	0x136c	; 0x136c <KEYPAD_getPressedKey>
    234c:	f8 01       	movw	r30, r16
    234e:	80 83       	st	Z, r24
			if(opand1[i] == 43)
    2350:	8e 89       	ldd	r24, Y+22	; 0x16
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	8f 89       	ldd	r24, Y+23	; 0x17
    2358:	98 8d       	ldd	r25, Y+24	; 0x18
    235a:	fc 01       	movw	r30, r24
    235c:	e2 0f       	add	r30, r18
    235e:	f3 1f       	adc	r31, r19
    2360:	80 81       	ld	r24, Z
    2362:	8b 32       	cpi	r24, 0x2B	; 43
    2364:	a9 f4       	brne	.+42     	; 0x2390 <creatFirstOperand+0x182>
			{
				LCD_moveCurser(1,4);
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	64 e0       	ldi	r22, 0x04	; 4
    236a:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <LCD_moveCurser>
				LCD_displayCharacter('+');
    236e:	8b e2       	ldi	r24, 0x2B	; 43
    2370:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_displayCharacter>
				op_index = i;
    2374:	8e 89       	ldd	r24, Y+22	; 0x16
    2376:	8c 8b       	std	Y+20, r24	; 0x14
				op = opand1[i];
    2378:	8e 89       	ldd	r24, Y+22	; 0x16
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	8f 89       	ldd	r24, Y+23	; 0x17
    2380:	98 8d       	ldd	r25, Y+24	; 0x18
    2382:	fc 01       	movw	r30, r24
    2384:	e2 0f       	add	r30, r18
    2386:	f3 1f       	adc	r31, r19
    2388:	80 81       	ld	r24, Z
    238a:	80 93 88 00 	sts	0x0088, r24
    238e:	7b c0       	rjmp	.+246    	; 0x2486 <creatFirstOperand+0x278>
				break;
			}
			else if(opand1[i] == 45)
    2390:	8e 89       	ldd	r24, Y+22	; 0x16
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	8f 89       	ldd	r24, Y+23	; 0x17
    2398:	98 8d       	ldd	r25, Y+24	; 0x18
    239a:	fc 01       	movw	r30, r24
    239c:	e2 0f       	add	r30, r18
    239e:	f3 1f       	adc	r31, r19
    23a0:	80 81       	ld	r24, Z
    23a2:	8d 32       	cpi	r24, 0x2D	; 45
    23a4:	a9 f4       	brne	.+42     	; 0x23d0 <creatFirstOperand+0x1c2>
			{
				LCD_moveCurser(1,4);
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	64 e0       	ldi	r22, 0x04	; 4
    23aa:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <LCD_moveCurser>
				LCD_displayCharacter('-');
    23ae:	8d e2       	ldi	r24, 0x2D	; 45
    23b0:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_displayCharacter>
				op_index = i;
    23b4:	8e 89       	ldd	r24, Y+22	; 0x16
    23b6:	8c 8b       	std	Y+20, r24	; 0x14
				op = opand1[i];
    23b8:	8e 89       	ldd	r24, Y+22	; 0x16
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	8f 89       	ldd	r24, Y+23	; 0x17
    23c0:	98 8d       	ldd	r25, Y+24	; 0x18
    23c2:	fc 01       	movw	r30, r24
    23c4:	e2 0f       	add	r30, r18
    23c6:	f3 1f       	adc	r31, r19
    23c8:	80 81       	ld	r24, Z
    23ca:	80 93 88 00 	sts	0x0088, r24
    23ce:	5b c0       	rjmp	.+182    	; 0x2486 <creatFirstOperand+0x278>
				break;
			}
			else if(opand1[i] == 42)
    23d0:	8e 89       	ldd	r24, Y+22	; 0x16
    23d2:	28 2f       	mov	r18, r24
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	8f 89       	ldd	r24, Y+23	; 0x17
    23d8:	98 8d       	ldd	r25, Y+24	; 0x18
    23da:	fc 01       	movw	r30, r24
    23dc:	e2 0f       	add	r30, r18
    23de:	f3 1f       	adc	r31, r19
    23e0:	80 81       	ld	r24, Z
    23e2:	8a 32       	cpi	r24, 0x2A	; 42
    23e4:	a9 f4       	brne	.+42     	; 0x2410 <creatFirstOperand+0x202>
			{
				LCD_moveCurser(1,4);
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	64 e0       	ldi	r22, 0x04	; 4
    23ea:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <LCD_moveCurser>
				LCD_displayCharacter('*');
    23ee:	8a e2       	ldi	r24, 0x2A	; 42
    23f0:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_displayCharacter>
				op_index = i;
    23f4:	8e 89       	ldd	r24, Y+22	; 0x16
    23f6:	8c 8b       	std	Y+20, r24	; 0x14
				op = opand1[i];
    23f8:	8e 89       	ldd	r24, Y+22	; 0x16
    23fa:	28 2f       	mov	r18, r24
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2400:	98 8d       	ldd	r25, Y+24	; 0x18
    2402:	fc 01       	movw	r30, r24
    2404:	e2 0f       	add	r30, r18
    2406:	f3 1f       	adc	r31, r19
    2408:	80 81       	ld	r24, Z
    240a:	80 93 88 00 	sts	0x0088, r24
    240e:	3b c0       	rjmp	.+118    	; 0x2486 <creatFirstOperand+0x278>
				break;
			}
			else if(opand1[i] == 37)
    2410:	8e 89       	ldd	r24, Y+22	; 0x16
    2412:	28 2f       	mov	r18, r24
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	8f 89       	ldd	r24, Y+23	; 0x17
    2418:	98 8d       	ldd	r25, Y+24	; 0x18
    241a:	fc 01       	movw	r30, r24
    241c:	e2 0f       	add	r30, r18
    241e:	f3 1f       	adc	r31, r19
    2420:	80 81       	ld	r24, Z
    2422:	85 32       	cpi	r24, 0x25	; 37
    2424:	a9 f4       	brne	.+42     	; 0x2450 <creatFirstOperand+0x242>
			{
				LCD_moveCurser(1,4);
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	64 e0       	ldi	r22, 0x04	; 4
    242a:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <LCD_moveCurser>
				LCD_displayCharacter('/');
    242e:	8f e2       	ldi	r24, 0x2F	; 47
    2430:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_displayCharacter>
				op_index = i;
    2434:	8e 89       	ldd	r24, Y+22	; 0x16
    2436:	8c 8b       	std	Y+20, r24	; 0x14
				op = opand1[i];
    2438:	8e 89       	ldd	r24, Y+22	; 0x16
    243a:	28 2f       	mov	r18, r24
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	8f 89       	ldd	r24, Y+23	; 0x17
    2440:	98 8d       	ldd	r25, Y+24	; 0x18
    2442:	fc 01       	movw	r30, r24
    2444:	e2 0f       	add	r30, r18
    2446:	f3 1f       	adc	r31, r19
    2448:	80 81       	ld	r24, Z
    244a:	80 93 88 00 	sts	0x0088, r24
    244e:	1b c0       	rjmp	.+54     	; 0x2486 <creatFirstOperand+0x278>
				break;
			}
			else
			{
				LCD_intgerToString(opand1[i]);
    2450:	8e 89       	ldd	r24, Y+22	; 0x16
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	8f 89       	ldd	r24, Y+23	; 0x17
    2458:	98 8d       	ldd	r25, Y+24	; 0x18
    245a:	fc 01       	movw	r30, r24
    245c:	e2 0f       	add	r30, r18
    245e:	f3 1f       	adc	r31, r19
    2460:	80 81       	ld	r24, Z
    2462:	88 2f       	mov	r24, r24
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_intgerToString>
			}


		}
		flag++;
    246a:	8d 89       	ldd	r24, Y+21	; 0x15
    246c:	8f 5f       	subi	r24, 0xFF	; 255
    246e:	8d 8b       	std	Y+21, r24	; 0x15

		if(flag == 1)
    2470:	8d 89       	ldd	r24, Y+21	; 0x15
    2472:	81 30       	cpi	r24, 0x01	; 1
    2474:	21 f4       	brne	.+8      	; 0x247e <creatFirstOperand+0x270>
		{
			i++;
    2476:	8e 89       	ldd	r24, Y+22	; 0x16
    2478:	8f 5f       	subi	r24, 0xFF	; 255
    247a:	8e 8b       	std	Y+22, r24	; 0x16
			flag = 0;
    247c:	1d 8a       	std	Y+21, r1	; 0x15
	u32 n1;

	LCD_displayStringRowColumn(0,1,"PLZ enter n1");
	LCD_moveCurser(1,1);

	while (i < 5)
    247e:	8e 89       	ldd	r24, Y+22	; 0x16
    2480:	85 30       	cpi	r24, 0x05	; 5
    2482:	08 f4       	brcc	.+2      	; 0x2486 <creatFirstOperand+0x278>
    2484:	e3 ce       	rjmp	.-570    	; 0x224c <creatFirstOperand+0x3e>
			i++;
			flag = 0;
		}

	}
	i = 0;
    2486:	1e 8a       	std	Y+22, r1	; 0x16
    2488:	2e c0       	rjmp	.+92     	; 0x24e6 <creatFirstOperand+0x2d8>

	while(i < op_index)
	{
		n1 *= 10;
    248a:	8f 85       	ldd	r24, Y+15	; 0x0f
    248c:	98 89       	ldd	r25, Y+16	; 0x10
    248e:	a9 89       	ldd	r26, Y+17	; 0x11
    2490:	ba 89       	ldd	r27, Y+18	; 0x12
    2492:	2a e0       	ldi	r18, 0x0A	; 10
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e0       	ldi	r20, 0x00	; 0
    2498:	50 e0       	ldi	r21, 0x00	; 0
    249a:	bc 01       	movw	r22, r24
    249c:	cd 01       	movw	r24, r26
    249e:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__mulsi3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	8f 87       	std	Y+15, r24	; 0x0f
    24a8:	98 8b       	std	Y+16, r25	; 0x10
    24aa:	a9 8b       	std	Y+17, r26	; 0x11
    24ac:	ba 8b       	std	Y+18, r27	; 0x12
		n1 += opand1[i];
    24ae:	8e 89       	ldd	r24, Y+22	; 0x16
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	8f 89       	ldd	r24, Y+23	; 0x17
    24b6:	98 8d       	ldd	r25, Y+24	; 0x18
    24b8:	fc 01       	movw	r30, r24
    24ba:	e2 0f       	add	r30, r18
    24bc:	f3 1f       	adc	r31, r19
    24be:	80 81       	ld	r24, Z
    24c0:	28 2f       	mov	r18, r24
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e0       	ldi	r20, 0x00	; 0
    24c6:	50 e0       	ldi	r21, 0x00	; 0
    24c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ca:	98 89       	ldd	r25, Y+16	; 0x10
    24cc:	a9 89       	ldd	r26, Y+17	; 0x11
    24ce:	ba 89       	ldd	r27, Y+18	; 0x12
    24d0:	82 0f       	add	r24, r18
    24d2:	93 1f       	adc	r25, r19
    24d4:	a4 1f       	adc	r26, r20
    24d6:	b5 1f       	adc	r27, r21
    24d8:	8f 87       	std	Y+15, r24	; 0x0f
    24da:	98 8b       	std	Y+16, r25	; 0x10
    24dc:	a9 8b       	std	Y+17, r26	; 0x11
    24de:	ba 8b       	std	Y+18, r27	; 0x12

		i++;
    24e0:	8e 89       	ldd	r24, Y+22	; 0x16
    24e2:	8f 5f       	subi	r24, 0xFF	; 255
    24e4:	8e 8b       	std	Y+22, r24	; 0x16
		}

	}
	i = 0;

	while(i < op_index)
    24e6:	9e 89       	ldd	r25, Y+22	; 0x16
    24e8:	8c 89       	ldd	r24, Y+20	; 0x14
    24ea:	98 17       	cp	r25, r24
    24ec:	70 f2       	brcs	.-100    	; 0x248a <creatFirstOperand+0x27c>
		n1 *= 10;
		n1 += opand1[i];

		i++;
	}
	return n1;
    24ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f0:	98 89       	ldd	r25, Y+16	; 0x10
    24f2:	a9 89       	ldd	r26, Y+17	; 0x11
    24f4:	ba 89       	ldd	r27, Y+18	; 0x12

}
    24f6:	bc 01       	movw	r22, r24
    24f8:	cd 01       	movw	r24, r26
    24fa:	69 96       	adiw	r28, 0x19	; 25
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	f8 94       	cli
    2500:	de bf       	out	0x3e, r29	; 62
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	cd bf       	out	0x3d, r28	; 61
    2506:	cf 91       	pop	r28
    2508:	df 91       	pop	r29
    250a:	1f 91       	pop	r17
    250c:	0f 91       	pop	r16
    250e:	08 95       	ret

00002510 <creatSecondtOperand>:

u32 creatSecondtOperand(u8 opand2[],u8 size)
{
    2510:	0f 93       	push	r16
    2512:	1f 93       	push	r17
    2514:	df 93       	push	r29
    2516:	cf 93       	push	r28
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
    251c:	68 97       	sbiw	r28, 0x18	; 24
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	f8 94       	cli
    2522:	de bf       	out	0x3e, r29	; 62
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	cd bf       	out	0x3d, r28	; 61
    2528:	9f 8b       	std	Y+23, r25	; 0x17
    252a:	8e 8b       	std	Y+22, r24	; 0x16
    252c:	68 8f       	std	Y+24, r22	; 0x18

	u8 i = 0;
    252e:	1d 8a       	std	Y+21, r1	; 0x15
	u8 flag = 0,op_index = 0;
    2530:	1c 8a       	std	Y+20, r1	; 0x14
    2532:	1b 8a       	std	Y+19, r1	; 0x13
	u32 n2;

	LCD_displayStringRowColumn(0,1,"PLZ enter n2");
    2534:	2d e6       	ldi	r18, 0x6D	; 109
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	61 e0       	ldi	r22, 0x01	; 1
    253c:	a9 01       	movw	r20, r18
    253e:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_displayStringRowColumn>
	LCD_moveCurser(1,6);
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	66 e0       	ldi	r22, 0x06	; 6
    2546:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <LCD_moveCurser>
    254a:	aa c0       	rjmp	.+340    	; 0x26a0 <creatSecondtOperand+0x190>

	while (i < 5)
	{
		if(flag == 0)
    254c:	8c 89       	ldd	r24, Y+20	; 0x14
    254e:	88 23       	and	r24, r24
    2550:	09 f0       	breq	.+2      	; 0x2554 <creatSecondtOperand+0x44>
    2552:	9c c0       	rjmp	.+312    	; 0x268c <creatSecondtOperand+0x17c>
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	a8 e4       	ldi	r26, 0x48	; 72
    255a:	b3 e4       	ldi	r27, 0x43	; 67
    255c:	8b 87       	std	Y+11, r24	; 0x0b
    255e:	9c 87       	std	Y+12, r25	; 0x0c
    2560:	ad 87       	std	Y+13, r26	; 0x0d
    2562:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2564:	6b 85       	ldd	r22, Y+11	; 0x0b
    2566:	7c 85       	ldd	r23, Y+12	; 0x0c
    2568:	8d 85       	ldd	r24, Y+13	; 0x0d
    256a:	9e 85       	ldd	r25, Y+14	; 0x0e
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	4a e7       	ldi	r20, 0x7A	; 122
    2572:	53 e4       	ldi	r21, 0x43	; 67
    2574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	8f 83       	std	Y+7, r24	; 0x07
    257e:	98 87       	std	Y+8, r25	; 0x08
    2580:	a9 87       	std	Y+9, r26	; 0x09
    2582:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2584:	6f 81       	ldd	r22, Y+7	; 0x07
    2586:	78 85       	ldd	r23, Y+8	; 0x08
    2588:	89 85       	ldd	r24, Y+9	; 0x09
    258a:	9a 85       	ldd	r25, Y+10	; 0x0a
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e8       	ldi	r20, 0x80	; 128
    2592:	5f e3       	ldi	r21, 0x3F	; 63
    2594:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2598:	88 23       	and	r24, r24
    259a:	2c f4       	brge	.+10     	; 0x25a6 <creatSecondtOperand+0x96>
		__ticks = 1;
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	9e 83       	std	Y+6, r25	; 0x06
    25a2:	8d 83       	std	Y+5, r24	; 0x05
    25a4:	3f c0       	rjmp	.+126    	; 0x2624 <creatSecondtOperand+0x114>
	else if (__tmp > 65535)
    25a6:	6f 81       	ldd	r22, Y+7	; 0x07
    25a8:	78 85       	ldd	r23, Y+8	; 0x08
    25aa:	89 85       	ldd	r24, Y+9	; 0x09
    25ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	3f ef       	ldi	r19, 0xFF	; 255
    25b2:	4f e7       	ldi	r20, 0x7F	; 127
    25b4:	57 e4       	ldi	r21, 0x47	; 71
    25b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ba:	18 16       	cp	r1, r24
    25bc:	4c f5       	brge	.+82     	; 0x2610 <creatSecondtOperand+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25be:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	40 e2       	ldi	r20, 0x20	; 32
    25cc:	51 e4       	ldi	r21, 0x41	; 65
    25ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	bc 01       	movw	r22, r24
    25d8:	cd 01       	movw	r24, r26
    25da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	9e 83       	std	Y+6, r25	; 0x06
    25e4:	8d 83       	std	Y+5, r24	; 0x05
    25e6:	0f c0       	rjmp	.+30     	; 0x2606 <creatSecondtOperand+0xf6>
    25e8:	89 e1       	ldi	r24, 0x19	; 25
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	9c 83       	std	Y+4, r25	; 0x04
    25ee:	8b 83       	std	Y+3, r24	; 0x03
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	9c 81       	ldd	r25, Y+4	; 0x04
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	f1 f7       	brne	.-4      	; 0x25f4 <creatSecondtOperand+0xe4>
    25f8:	9c 83       	std	Y+4, r25	; 0x04
    25fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fc:	8d 81       	ldd	r24, Y+5	; 0x05
    25fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	9e 83       	std	Y+6, r25	; 0x06
    2604:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2606:	8d 81       	ldd	r24, Y+5	; 0x05
    2608:	9e 81       	ldd	r25, Y+6	; 0x06
    260a:	00 97       	sbiw	r24, 0x00	; 0
    260c:	69 f7       	brne	.-38     	; 0x25e8 <creatSecondtOperand+0xd8>
    260e:	14 c0       	rjmp	.+40     	; 0x2638 <creatSecondtOperand+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2610:	6f 81       	ldd	r22, Y+7	; 0x07
    2612:	78 85       	ldd	r23, Y+8	; 0x08
    2614:	89 85       	ldd	r24, Y+9	; 0x09
    2616:	9a 85       	ldd	r25, Y+10	; 0x0a
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	9e 83       	std	Y+6, r25	; 0x06
    2622:	8d 83       	std	Y+5, r24	; 0x05
    2624:	8d 81       	ldd	r24, Y+5	; 0x05
    2626:	9e 81       	ldd	r25, Y+6	; 0x06
    2628:	9a 83       	std	Y+2, r25	; 0x02
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	9a 81       	ldd	r25, Y+2	; 0x02
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	f1 f7       	brne	.-4      	; 0x2630 <creatSecondtOperand+0x120>
    2634:	9a 83       	std	Y+2, r25	; 0x02
    2636:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(200);
			opand2[i] = KEYPAD_getPressedKey();
    2638:	8d 89       	ldd	r24, Y+21	; 0x15
    263a:	28 2f       	mov	r18, r24
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	8e 89       	ldd	r24, Y+22	; 0x16
    2640:	9f 89       	ldd	r25, Y+23	; 0x17
    2642:	8c 01       	movw	r16, r24
    2644:	02 0f       	add	r16, r18
    2646:	13 1f       	adc	r17, r19
    2648:	0e 94 b6 09 	call	0x136c	; 0x136c <KEYPAD_getPressedKey>
    264c:	f8 01       	movw	r30, r16
    264e:	80 83       	st	Z, r24
			if(opand2[i] ==61)
    2650:	8d 89       	ldd	r24, Y+21	; 0x15
    2652:	28 2f       	mov	r18, r24
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	8e 89       	ldd	r24, Y+22	; 0x16
    2658:	9f 89       	ldd	r25, Y+23	; 0x17
    265a:	fc 01       	movw	r30, r24
    265c:	e2 0f       	add	r30, r18
    265e:	f3 1f       	adc	r31, r19
    2660:	80 81       	ld	r24, Z
    2662:	8d 33       	cpi	r24, 0x3D	; 61
    2664:	31 f4       	brne	.+12     	; 0x2672 <creatSecondtOperand+0x162>
			{
				LCD_displayCharacter('=');
    2666:	8d e3       	ldi	r24, 0x3D	; 61
    2668:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_displayCharacter>
				op_index = i;
    266c:	8d 89       	ldd	r24, Y+21	; 0x15
    266e:	8b 8b       	std	Y+19, r24	; 0x13
    2670:	1b c0       	rjmp	.+54     	; 0x26a8 <creatSecondtOperand+0x198>
				break;
			}
			else
			{
				LCD_intgerToString(opand2[i]);
    2672:	8d 89       	ldd	r24, Y+21	; 0x15
    2674:	28 2f       	mov	r18, r24
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	8e 89       	ldd	r24, Y+22	; 0x16
    267a:	9f 89       	ldd	r25, Y+23	; 0x17
    267c:	fc 01       	movw	r30, r24
    267e:	e2 0f       	add	r30, r18
    2680:	f3 1f       	adc	r31, r19
    2682:	80 81       	ld	r24, Z
    2684:	88 2f       	mov	r24, r24
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_intgerToString>
			}

		}
		flag++;
    268c:	8c 89       	ldd	r24, Y+20	; 0x14
    268e:	8f 5f       	subi	r24, 0xFF	; 255
    2690:	8c 8b       	std	Y+20, r24	; 0x14

		if(flag == 1)
    2692:	8c 89       	ldd	r24, Y+20	; 0x14
    2694:	81 30       	cpi	r24, 0x01	; 1
    2696:	21 f4       	brne	.+8      	; 0x26a0 <creatSecondtOperand+0x190>
		{
			i++;
    2698:	8d 89       	ldd	r24, Y+21	; 0x15
    269a:	8f 5f       	subi	r24, 0xFF	; 255
    269c:	8d 8b       	std	Y+21, r24	; 0x15
			flag = 0;
    269e:	1c 8a       	std	Y+20, r1	; 0x14
	u32 n2;

	LCD_displayStringRowColumn(0,1,"PLZ enter n2");
	LCD_moveCurser(1,6);

	while (i < 5)
    26a0:	8d 89       	ldd	r24, Y+21	; 0x15
    26a2:	85 30       	cpi	r24, 0x05	; 5
    26a4:	08 f4       	brcc	.+2      	; 0x26a8 <creatSecondtOperand+0x198>
    26a6:	52 cf       	rjmp	.-348    	; 0x254c <creatSecondtOperand+0x3c>
			i++;
			flag = 0;
		}

	}
	i = 0;
    26a8:	1d 8a       	std	Y+21, r1	; 0x15
    26aa:	2e c0       	rjmp	.+92     	; 0x2708 <creatSecondtOperand+0x1f8>
	while(i < op_index)
	{
		n2 *= 10;
    26ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ae:	98 89       	ldd	r25, Y+16	; 0x10
    26b0:	a9 89       	ldd	r26, Y+17	; 0x11
    26b2:	ba 89       	ldd	r27, Y+18	; 0x12
    26b4:	2a e0       	ldi	r18, 0x0A	; 10
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	50 e0       	ldi	r21, 0x00	; 0
    26bc:	bc 01       	movw	r22, r24
    26be:	cd 01       	movw	r24, r26
    26c0:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__mulsi3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	8f 87       	std	Y+15, r24	; 0x0f
    26ca:	98 8b       	std	Y+16, r25	; 0x10
    26cc:	a9 8b       	std	Y+17, r26	; 0x11
    26ce:	ba 8b       	std	Y+18, r27	; 0x12
		n2 += opand2[i];
    26d0:	8d 89       	ldd	r24, Y+21	; 0x15
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	8e 89       	ldd	r24, Y+22	; 0x16
    26d8:	9f 89       	ldd	r25, Y+23	; 0x17
    26da:	fc 01       	movw	r30, r24
    26dc:	e2 0f       	add	r30, r18
    26de:	f3 1f       	adc	r31, r19
    26e0:	80 81       	ld	r24, Z
    26e2:	28 2f       	mov	r18, r24
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	40 e0       	ldi	r20, 0x00	; 0
    26e8:	50 e0       	ldi	r21, 0x00	; 0
    26ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ec:	98 89       	ldd	r25, Y+16	; 0x10
    26ee:	a9 89       	ldd	r26, Y+17	; 0x11
    26f0:	ba 89       	ldd	r27, Y+18	; 0x12
    26f2:	82 0f       	add	r24, r18
    26f4:	93 1f       	adc	r25, r19
    26f6:	a4 1f       	adc	r26, r20
    26f8:	b5 1f       	adc	r27, r21
    26fa:	8f 87       	std	Y+15, r24	; 0x0f
    26fc:	98 8b       	std	Y+16, r25	; 0x10
    26fe:	a9 8b       	std	Y+17, r26	; 0x11
    2700:	ba 8b       	std	Y+18, r27	; 0x12

		i++;
    2702:	8d 89       	ldd	r24, Y+21	; 0x15
    2704:	8f 5f       	subi	r24, 0xFF	; 255
    2706:	8d 8b       	std	Y+21, r24	; 0x15
			flag = 0;
		}

	}
	i = 0;
	while(i < op_index)
    2708:	9d 89       	ldd	r25, Y+21	; 0x15
    270a:	8b 89       	ldd	r24, Y+19	; 0x13
    270c:	98 17       	cp	r25, r24
    270e:	70 f2       	brcs	.-100    	; 0x26ac <creatSecondtOperand+0x19c>
		n2 += opand2[i];

		i++;
	}

	return n2;
    2710:	8f 85       	ldd	r24, Y+15	; 0x0f
    2712:	98 89       	ldd	r25, Y+16	; 0x10
    2714:	a9 89       	ldd	r26, Y+17	; 0x11
    2716:	ba 89       	ldd	r27, Y+18	; 0x12

}
    2718:	bc 01       	movw	r22, r24
    271a:	cd 01       	movw	r24, r26
    271c:	68 96       	adiw	r28, 0x18	; 24
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	f8 94       	cli
    2722:	de bf       	out	0x3e, r29	; 62
    2724:	0f be       	out	0x3f, r0	; 63
    2726:	cd bf       	out	0x3d, r28	; 61
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	1f 91       	pop	r17
    272e:	0f 91       	pop	r16
    2730:	08 95       	ret

00002732 <operation>:

u32 operation(u32 n1, u32 n2)
{
    2732:	df 93       	push	r29
    2734:	cf 93       	push	r28
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    273a:	62 97       	sbiw	r28, 0x12	; 18
    273c:	0f b6       	in	r0, 0x3f	; 63
    273e:	f8 94       	cli
    2740:	de bf       	out	0x3e, r29	; 62
    2742:	0f be       	out	0x3f, r0	; 63
    2744:	cd bf       	out	0x3d, r28	; 61
    2746:	6d 83       	std	Y+5, r22	; 0x05
    2748:	7e 83       	std	Y+6, r23	; 0x06
    274a:	8f 83       	std	Y+7, r24	; 0x07
    274c:	98 87       	std	Y+8, r25	; 0x08
    274e:	29 87       	std	Y+9, r18	; 0x09
    2750:	3a 87       	std	Y+10, r19	; 0x0a
    2752:	4b 87       	std	Y+11, r20	; 0x0b
    2754:	5c 87       	std	Y+12, r21	; 0x0c
	u32 result;
	if(op == 0)
    2756:	80 91 88 00 	lds	r24, 0x0088
    275a:	88 23       	and	r24, r24
    275c:	71 f4       	brne	.+28     	; 0x277a <operation+0x48>
	{
		LCD_clearScreen();
    275e:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,1,"Error");
    2762:	2a e7       	ldi	r18, 0x7A	; 122
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	61 e0       	ldi	r22, 0x01	; 1
    276a:	a9 01       	movw	r20, r18
    276c:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_displayStringRowColumn>
		return 0;
    2770:	1f 86       	std	Y+15, r1	; 0x0f
    2772:	18 8a       	std	Y+16, r1	; 0x10
    2774:	19 8a       	std	Y+17, r1	; 0x11
    2776:	1a 8a       	std	Y+18, r1	; 0x12
    2778:	71 c0       	rjmp	.+226    	; 0x285c <operation+0x12a>
	}
	else
	{
		switch(op)
    277a:	80 91 88 00 	lds	r24, 0x0088
    277e:	28 2f       	mov	r18, r24
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	3e 87       	std	Y+14, r19	; 0x0e
    2784:	2d 87       	std	Y+13, r18	; 0x0d
    2786:	8d 85       	ldd	r24, Y+13	; 0x0d
    2788:	9e 85       	ldd	r25, Y+14	; 0x0e
    278a:	8a 32       	cpi	r24, 0x2A	; 42
    278c:	91 05       	cpc	r25, r1
    278e:	c9 f1       	breq	.+114    	; 0x2802 <operation+0xd0>
    2790:	ad 85       	ldd	r26, Y+13	; 0x0d
    2792:	be 85       	ldd	r27, Y+14	; 0x0e
    2794:	ab 32       	cpi	r26, 0x2B	; 43
    2796:	b1 05       	cpc	r27, r1
    2798:	3c f4       	brge	.+14     	; 0x27a8 <operation+0x76>
    279a:	2d 85       	ldd	r18, Y+13	; 0x0d
    279c:	3e 85       	ldd	r19, Y+14	; 0x0e
    279e:	25 32       	cpi	r18, 0x25	; 37
    27a0:	31 05       	cpc	r19, r1
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <operation+0x74>
    27a4:	41 c0       	rjmp	.+130    	; 0x2828 <operation+0xf6>
    27a6:	52 c0       	rjmp	.+164    	; 0x284c <operation+0x11a>
    27a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ac:	8b 32       	cpi	r24, 0x2B	; 43
    27ae:	91 05       	cpc	r25, r1
    27b0:	31 f0       	breq	.+12     	; 0x27be <operation+0x8c>
    27b2:	ad 85       	ldd	r26, Y+13	; 0x0d
    27b4:	be 85       	ldd	r27, Y+14	; 0x0e
    27b6:	ad 32       	cpi	r26, 0x2D	; 45
    27b8:	b1 05       	cpc	r27, r1
    27ba:	91 f0       	breq	.+36     	; 0x27e0 <operation+0xae>
    27bc:	47 c0       	rjmp	.+142    	; 0x284c <operation+0x11a>
	{
		case 43:
			result = n1 + n2;
    27be:	8d 81       	ldd	r24, Y+5	; 0x05
    27c0:	9e 81       	ldd	r25, Y+6	; 0x06
    27c2:	af 81       	ldd	r26, Y+7	; 0x07
    27c4:	b8 85       	ldd	r27, Y+8	; 0x08
    27c6:	29 85       	ldd	r18, Y+9	; 0x09
    27c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    27ca:	4b 85       	ldd	r20, Y+11	; 0x0b
    27cc:	5c 85       	ldd	r21, Y+12	; 0x0c
    27ce:	82 0f       	add	r24, r18
    27d0:	93 1f       	adc	r25, r19
    27d2:	a4 1f       	adc	r26, r20
    27d4:	b5 1f       	adc	r27, r21
    27d6:	89 83       	std	Y+1, r24	; 0x01
    27d8:	9a 83       	std	Y+2, r25	; 0x02
    27da:	ab 83       	std	Y+3, r26	; 0x03
    27dc:	bc 83       	std	Y+4, r27	; 0x04
    27de:	36 c0       	rjmp	.+108    	; 0x284c <operation+0x11a>
			break;
		case 45:
			result = n1 - n2;
    27e0:	8d 81       	ldd	r24, Y+5	; 0x05
    27e2:	9e 81       	ldd	r25, Y+6	; 0x06
    27e4:	af 81       	ldd	r26, Y+7	; 0x07
    27e6:	b8 85       	ldd	r27, Y+8	; 0x08
    27e8:	29 85       	ldd	r18, Y+9	; 0x09
    27ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    27ec:	4b 85       	ldd	r20, Y+11	; 0x0b
    27ee:	5c 85       	ldd	r21, Y+12	; 0x0c
    27f0:	82 1b       	sub	r24, r18
    27f2:	93 0b       	sbc	r25, r19
    27f4:	a4 0b       	sbc	r26, r20
    27f6:	b5 0b       	sbc	r27, r21
    27f8:	89 83       	std	Y+1, r24	; 0x01
    27fa:	9a 83       	std	Y+2, r25	; 0x02
    27fc:	ab 83       	std	Y+3, r26	; 0x03
    27fe:	bc 83       	std	Y+4, r27	; 0x04
    2800:	25 c0       	rjmp	.+74     	; 0x284c <operation+0x11a>
			break;
		case 42:
			result = n1 * n2;
    2802:	8d 81       	ldd	r24, Y+5	; 0x05
    2804:	9e 81       	ldd	r25, Y+6	; 0x06
    2806:	af 81       	ldd	r26, Y+7	; 0x07
    2808:	b8 85       	ldd	r27, Y+8	; 0x08
    280a:	29 85       	ldd	r18, Y+9	; 0x09
    280c:	3a 85       	ldd	r19, Y+10	; 0x0a
    280e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2810:	5c 85       	ldd	r21, Y+12	; 0x0c
    2812:	bc 01       	movw	r22, r24
    2814:	cd 01       	movw	r24, r26
    2816:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__mulsi3>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	89 83       	std	Y+1, r24	; 0x01
    2820:	9a 83       	std	Y+2, r25	; 0x02
    2822:	ab 83       	std	Y+3, r26	; 0x03
    2824:	bc 83       	std	Y+4, r27	; 0x04
    2826:	12 c0       	rjmp	.+36     	; 0x284c <operation+0x11a>
			break;
		case 37:
			result = n1 / n2;
    2828:	8d 81       	ldd	r24, Y+5	; 0x05
    282a:	9e 81       	ldd	r25, Y+6	; 0x06
    282c:	af 81       	ldd	r26, Y+7	; 0x07
    282e:	b8 85       	ldd	r27, Y+8	; 0x08
    2830:	29 85       	ldd	r18, Y+9	; 0x09
    2832:	3a 85       	ldd	r19, Y+10	; 0x0a
    2834:	4b 85       	ldd	r20, Y+11	; 0x0b
    2836:	5c 85       	ldd	r21, Y+12	; 0x0c
    2838:	bc 01       	movw	r22, r24
    283a:	cd 01       	movw	r24, r26
    283c:	0e 94 1c 19 	call	0x3238	; 0x3238 <__udivmodsi4>
    2840:	da 01       	movw	r26, r20
    2842:	c9 01       	movw	r24, r18
    2844:	89 83       	std	Y+1, r24	; 0x01
    2846:	9a 83       	std	Y+2, r25	; 0x02
    2848:	ab 83       	std	Y+3, r26	; 0x03
    284a:	bc 83       	std	Y+4, r27	; 0x04
	}
	}



	return result;
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	9a 81       	ldd	r25, Y+2	; 0x02
    2850:	ab 81       	ldd	r26, Y+3	; 0x03
    2852:	bc 81       	ldd	r27, Y+4	; 0x04
    2854:	8f 87       	std	Y+15, r24	; 0x0f
    2856:	98 8b       	std	Y+16, r25	; 0x10
    2858:	a9 8b       	std	Y+17, r26	; 0x11
    285a:	ba 8b       	std	Y+18, r27	; 0x12
    285c:	8f 85       	ldd	r24, Y+15	; 0x0f
    285e:	98 89       	ldd	r25, Y+16	; 0x10
    2860:	a9 89       	ldd	r26, Y+17	; 0x11
    2862:	ba 89       	ldd	r27, Y+18	; 0x12
}
    2864:	bc 01       	movw	r22, r24
    2866:	cd 01       	movw	r24, r26
    2868:	62 96       	adiw	r28, 0x12	; 18
    286a:	0f b6       	in	r0, 0x3f	; 63
    286c:	f8 94       	cli
    286e:	de bf       	out	0x3e, r29	; 62
    2870:	0f be       	out	0x3f, r0	; 63
    2872:	cd bf       	out	0x3d, r28	; 61
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	08 95       	ret

0000287a <main>:


int main()
{
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
    2882:	66 97       	sbiw	r28, 0x16	; 22
    2884:	0f b6       	in	r0, 0x3f	; 63
    2886:	f8 94       	cli
    2888:	de bf       	out	0x3e, r29	; 62
    288a:	0f be       	out	0x3f, r0	; 63
    288c:	cd bf       	out	0x3d, r28	; 61
	u8 num1[5];
	u8 num2[5];

	u32 n1 = 0,n2 = 0;
    288e:	19 86       	std	Y+9, r1	; 0x09
    2890:	1a 86       	std	Y+10, r1	; 0x0a
    2892:	1b 86       	std	Y+11, r1	; 0x0b
    2894:	1c 86       	std	Y+12, r1	; 0x0c
    2896:	1d 82       	std	Y+5, r1	; 0x05
    2898:	1e 82       	std	Y+6, r1	; 0x06
    289a:	1f 82       	std	Y+7, r1	; 0x07
    289c:	18 86       	std	Y+8, r1	; 0x08

	u32 result;

	port_init();
    289e:	0e 94 98 14 	call	0x2930	; 0x2930 <port_init>
	LCD_init();
    28a2:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_init>

	while(1)
	{
		n1 = creatFirstOperand(num1,5);
    28a6:	ce 01       	movw	r24, r28
    28a8:	0d 96       	adiw	r24, 0x0d	; 13
    28aa:	65 e0       	ldi	r22, 0x05	; 5
    28ac:	0e 94 07 11 	call	0x220e	; 0x220e <creatFirstOperand>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	89 87       	std	Y+9, r24	; 0x09
    28b6:	9a 87       	std	Y+10, r25	; 0x0a
    28b8:	ab 87       	std	Y+11, r26	; 0x0b
    28ba:	bc 87       	std	Y+12, r27	; 0x0c

		n2 = creatSecondtOperand(num2,5);
    28bc:	ce 01       	movw	r24, r28
    28be:	42 96       	adiw	r24, 0x12	; 18
    28c0:	65 e0       	ldi	r22, 0x05	; 5
    28c2:	0e 94 88 12 	call	0x2510	; 0x2510 <creatSecondtOperand>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	8d 83       	std	Y+5, r24	; 0x05
    28cc:	9e 83       	std	Y+6, r25	; 0x06
    28ce:	af 83       	std	Y+7, r26	; 0x07
    28d0:	b8 87       	std	Y+8, r27	; 0x08

		result = operation(n1,n2);
    28d2:	89 85       	ldd	r24, Y+9	; 0x09
    28d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d6:	ab 85       	ldd	r26, Y+11	; 0x0b
    28d8:	bc 85       	ldd	r27, Y+12	; 0x0c
    28da:	2d 81       	ldd	r18, Y+5	; 0x05
    28dc:	3e 81       	ldd	r19, Y+6	; 0x06
    28de:	4f 81       	ldd	r20, Y+7	; 0x07
    28e0:	58 85       	ldd	r21, Y+8	; 0x08
    28e2:	bc 01       	movw	r22, r24
    28e4:	cd 01       	movw	r24, r26
    28e6:	0e 94 99 13 	call	0x2732	; 0x2732 <operation>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	89 83       	std	Y+1, r24	; 0x01
    28f0:	9a 83       	std	Y+2, r25	; 0x02
    28f2:	ab 83       	std	Y+3, r26	; 0x03
    28f4:	bc 83       	std	Y+4, r27	; 0x04

		if(result >= 1000)
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	9a 81       	ldd	r25, Y+2	; 0x02
    28fa:	ab 81       	ldd	r26, Y+3	; 0x03
    28fc:	bc 81       	ldd	r27, Y+4	; 0x04
    28fe:	88 3e       	cpi	r24, 0xE8	; 232
    2900:	23 e0       	ldi	r18, 0x03	; 3
    2902:	92 07       	cpc	r25, r18
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	a2 07       	cpc	r26, r18
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	b2 07       	cpc	r27, r18
    290c:	28 f0       	brcs	.+10     	; 0x2918 <main+0x9e>
		{
			LCD_intgerToString(result);
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	9a 81       	ldd	r25, Y+2	; 0x02
    2912:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_intgerToString>
    2916:	07 c0       	rjmp	.+14     	; 0x2926 <main+0xac>
		}
		else
		{
			LCD_intgerToString(result);
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	9a 81       	ldd	r25, Y+2	; 0x02
    291c:	0e 94 20 10 	call	0x2040	; 0x2040 <LCD_intgerToString>
			LCD_displayCharacter(' ');
    2920:	80 e2       	ldi	r24, 0x20	; 32
    2922:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <LCD_displayCharacter>
		}

		while(KEYPAD_getPressedKey() != 13){}
    2926:	0e 94 b6 09 	call	0x136c	; 0x136c <KEYPAD_getPressedKey>
    292a:	8d 30       	cpi	r24, 0x0D	; 13
    292c:	e1 f7       	brne	.-8      	; 0x2926 <main+0xac>
    292e:	bb cf       	rjmp	.-138    	; 0x28a6 <main+0x2c>

00002930 <port_init>:
#include"port.h"

/*initialize based on user configuration*/

void port_init(void)
{
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62

#undef PIN_OUTPUT_HIGH
#define PIN_OUTPUT_HIGH              1


	DDRA = CONC(DIO_u8_PIN7,DIO_u8_PIN6,DIO_u8_PIN5,DIO_u8_PIN4,DIO_u8_PIN3,DIO_u8_PIN2,DIO_u8_PIN1,DIO_u8_PIN0);
    2938:	ea e3       	ldi	r30, 0x3A	; 58
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	8f ef       	ldi	r24, 0xFF	; 255
    293e:	80 83       	st	Z, r24
	DDRB = CONC(DIO_u8_PIN15,DIO_u8_PIN14,DIO_u8_PIN13,DIO_u8_PIN12,DIO_u8_PIN11,DIO_u8_PIN10,DIO_u8_PIN9,DIO_u8_PIN8);
    2940:	e7 e3       	ldi	r30, 0x37	; 55
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	83 e0       	ldi	r24, 0x03	; 3
    2946:	80 83       	st	Z, r24
	DDRC = CONC(DIO_u8_PIN23,DIO_u8_PIN22,DIO_u8_PIN21,DIO_u8_PIN20,DIO_u8_PIN19,DIO_u8_PIN18,DIO_u8_PIN17,DIO_u8_PIN16);
    2948:	e4 e3       	ldi	r30, 0x34	; 52
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	8f ef       	ldi	r24, 0xFF	; 255
    294e:	80 83       	st	Z, r24
	DDRD = CONC(DIO_u8_PIN31,DIO_u8_PIN30,DIO_u8_PIN29,DIO_u8_PIN28,DIO_u8_PIN27,DIO_u8_PIN26,DIO_u8_PIN25,DIO_u8_PIN24);
    2950:	e1 e3       	ldi	r30, 0x31	; 49
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	10 82       	st	Z, r1
#define PIN_OUTPUT_LOW               0

#undef PIN_OUTPUT_HIGH
#define PIN_OUTPUT_HIGH              1

	PORTA = CONC(DIO_u8_PIN7,DIO_u8_PIN6,DIO_u8_PIN5,DIO_u8_PIN4,DIO_u8_PIN3,DIO_u8_PIN2,DIO_u8_PIN1,DIO_u8_PIN0);
    2956:	eb e3       	ldi	r30, 0x3B	; 59
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	8f ef       	ldi	r24, 0xFF	; 255
    295c:	80 83       	st	Z, r24
	PORTB = CONC(DIO_u8_PIN15,DIO_u8_PIN14,DIO_u8_PIN13,DIO_u8_PIN12,DIO_u8_PIN11,DIO_u8_PIN10,DIO_u8_PIN9,DIO_u8_PIN8);
    295e:	e8 e3       	ldi	r30, 0x38	; 56
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	83 e0       	ldi	r24, 0x03	; 3
    2964:	80 83       	st	Z, r24
	PORTC = CONC(DIO_u8_PIN23,DIO_u8_PIN22,DIO_u8_PIN21,DIO_u8_PIN20,DIO_u8_PIN19,DIO_u8_PIN18,DIO_u8_PIN17,DIO_u8_PIN16);
    2966:	e5 e3       	ldi	r30, 0x35	; 53
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	8f ef       	ldi	r24, 0xFF	; 255
    296c:	80 83       	st	Z, r24
	PORTD = CONC(DIO_u8_PIN31,DIO_u8_PIN30,DIO_u8_PIN29,DIO_u8_PIN28,DIO_u8_PIN27,DIO_u8_PIN26,DIO_u8_PIN25,DIO_u8_PIN24);
    296e:	e2 e3       	ldi	r30, 0x32	; 50
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	10 82       	st	Z, r1
#define PIN_OUTPUT_LOW              0
#define PIN_OUTPUT_HIGH             1
#define PIN_INPUT_PULL_UP           2
#define PIN_INPUT_FLOATING          3

}
    2974:	cf 91       	pop	r28
    2976:	df 91       	pop	r29
    2978:	08 95       	ret

0000297a <setPinDirection>:

/*set pin direction*/
port_errorStatus setPinDirection(u8 pin_id, u8 direction)
{
    297a:	df 93       	push	r29
    297c:	cf 93       	push	r28
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
    2982:	27 97       	sbiw	r28, 0x07	; 7
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	f8 94       	cli
    2988:	de bf       	out	0x3e, r29	; 62
    298a:	0f be       	out	0x3f, r0	; 63
    298c:	cd bf       	out	0x3d, r28	; 61
    298e:	8c 83       	std	Y+4, r24	; 0x04
    2990:	6d 83       	std	Y+5, r22	; 0x05
	port_errorStatus return_errorStatus = port_OK;
    2992:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_pn;
	u8 loc_port;

	if(pin_id > NUM_OF_PINS)
    2994:	8c 81       	ldd	r24, Y+4	; 0x04
    2996:	80 32       	cpi	r24, 0x20	; 32
    2998:	18 f0       	brcs	.+6      	; 0x29a0 <setPinDirection+0x26>
	{
		return_errorStatus = pinError;
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	8b 83       	std	Y+3, r24	; 0x03
    299e:	df c0       	rjmp	.+446    	; 0x2b5e <setPinDirection+0x1e4>
	}
	else if(direction > NUM_OF_DIRECTION)
    29a0:	8d 81       	ldd	r24, Y+5	; 0x05
    29a2:	82 30       	cpi	r24, 0x02	; 2
    29a4:	18 f0       	brcs	.+6      	; 0x29ac <setPinDirection+0x32>
	{
		return_errorStatus = pinDirectionError;
    29a6:	82 e0       	ldi	r24, 0x02	; 2
    29a8:	8b 83       	std	Y+3, r24	; 0x03
    29aa:	d9 c0       	rjmp	.+434    	; 0x2b5e <setPinDirection+0x1e4>
	}
	else
	{
		loc_pn = pin_id % NUM_OF_PINS_PER_PORT;
    29ac:	8c 81       	ldd	r24, Y+4	; 0x04
    29ae:	87 70       	andi	r24, 0x07	; 7
    29b0:	8a 83       	std	Y+2, r24	; 0x02
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
    29b2:	8c 81       	ldd	r24, Y+4	; 0x04
    29b4:	86 95       	lsr	r24
    29b6:	86 95       	lsr	r24
    29b8:	86 95       	lsr	r24
    29ba:	89 83       	std	Y+1, r24	; 0x01

		switch(loc_port)
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	3f 83       	std	Y+7, r19	; 0x07
    29c4:	2e 83       	std	Y+6, r18	; 0x06
    29c6:	8e 81       	ldd	r24, Y+6	; 0x06
    29c8:	9f 81       	ldd	r25, Y+7	; 0x07
    29ca:	81 30       	cpi	r24, 0x01	; 1
    29cc:	91 05       	cpc	r25, r1
    29ce:	09 f4       	brne	.+2      	; 0x29d2 <setPinDirection+0x58>
    29d0:	43 c0       	rjmp	.+134    	; 0x2a58 <setPinDirection+0xde>
    29d2:	2e 81       	ldd	r18, Y+6	; 0x06
    29d4:	3f 81       	ldd	r19, Y+7	; 0x07
    29d6:	22 30       	cpi	r18, 0x02	; 2
    29d8:	31 05       	cpc	r19, r1
    29da:	2c f4       	brge	.+10     	; 0x29e6 <setPinDirection+0x6c>
    29dc:	8e 81       	ldd	r24, Y+6	; 0x06
    29de:	9f 81       	ldd	r25, Y+7	; 0x07
    29e0:	00 97       	sbiw	r24, 0x00	; 0
    29e2:	71 f0       	breq	.+28     	; 0x2a00 <setPinDirection+0x86>
    29e4:	bc c0       	rjmp	.+376    	; 0x2b5e <setPinDirection+0x1e4>
    29e6:	2e 81       	ldd	r18, Y+6	; 0x06
    29e8:	3f 81       	ldd	r19, Y+7	; 0x07
    29ea:	22 30       	cpi	r18, 0x02	; 2
    29ec:	31 05       	cpc	r19, r1
    29ee:	09 f4       	brne	.+2      	; 0x29f2 <setPinDirection+0x78>
    29f0:	5f c0       	rjmp	.+190    	; 0x2ab0 <setPinDirection+0x136>
    29f2:	8e 81       	ldd	r24, Y+6	; 0x06
    29f4:	9f 81       	ldd	r25, Y+7	; 0x07
    29f6:	83 30       	cpi	r24, 0x03	; 3
    29f8:	91 05       	cpc	r25, r1
    29fa:	09 f4       	brne	.+2      	; 0x29fe <setPinDirection+0x84>
    29fc:	85 c0       	rjmp	.+266    	; 0x2b08 <setPinDirection+0x18e>
    29fe:	af c0       	rjmp	.+350    	; 0x2b5e <setPinDirection+0x1e4>
		{
		case PORT_PORTA:
			if (direction == PIN_OUTPUT)
    2a00:	8d 81       	ldd	r24, Y+5	; 0x05
    2a02:	81 30       	cpi	r24, 0x01	; 1
    2a04:	a1 f4       	brne	.+40     	; 0x2a2e <setPinDirection+0xb4>
			{
				SET_BIT(DDRA, loc_pn);
    2a06:	aa e3       	ldi	r26, 0x3A	; 58
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	ea e3       	ldi	r30, 0x3A	; 58
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
    2a10:	48 2f       	mov	r20, r24
    2a12:	8a 81       	ldd	r24, Y+2	; 0x02
    2a14:	28 2f       	mov	r18, r24
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	02 2e       	mov	r0, r18
    2a1e:	02 c0       	rjmp	.+4      	; 0x2a24 <setPinDirection+0xaa>
    2a20:	88 0f       	add	r24, r24
    2a22:	99 1f       	adc	r25, r25
    2a24:	0a 94       	dec	r0
    2a26:	e2 f7       	brpl	.-8      	; 0x2a20 <setPinDirection+0xa6>
    2a28:	84 2b       	or	r24, r20
    2a2a:	8c 93       	st	X, r24
    2a2c:	98 c0       	rjmp	.+304    	; 0x2b5e <setPinDirection+0x1e4>
			}
			else
			{
				CLEAR_BIT(DDRA, loc_pn);
    2a2e:	aa e3       	ldi	r26, 0x3A	; 58
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	ea e3       	ldi	r30, 0x3A	; 58
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	48 2f       	mov	r20, r24
    2a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3c:	28 2f       	mov	r18, r24
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	02 2e       	mov	r0, r18
    2a46:	02 c0       	rjmp	.+4      	; 0x2a4c <setPinDirection+0xd2>
    2a48:	88 0f       	add	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	0a 94       	dec	r0
    2a4e:	e2 f7       	brpl	.-8      	; 0x2a48 <setPinDirection+0xce>
    2a50:	80 95       	com	r24
    2a52:	84 23       	and	r24, r20
    2a54:	8c 93       	st	X, r24
    2a56:	83 c0       	rjmp	.+262    	; 0x2b5e <setPinDirection+0x1e4>
			}
			break;

		case PORT_PORTB:
			if (direction == PIN_OUTPUT)
    2a58:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5a:	81 30       	cpi	r24, 0x01	; 1
    2a5c:	a1 f4       	brne	.+40     	; 0x2a86 <setPinDirection+0x10c>
			{
				SET_BIT(DDRB, loc_pn);
    2a5e:	a7 e3       	ldi	r26, 0x37	; 55
    2a60:	b0 e0       	ldi	r27, 0x00	; 0
    2a62:	e7 e3       	ldi	r30, 0x37	; 55
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	48 2f       	mov	r20, r24
    2a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6c:	28 2f       	mov	r18, r24
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	02 2e       	mov	r0, r18
    2a76:	02 c0       	rjmp	.+4      	; 0x2a7c <setPinDirection+0x102>
    2a78:	88 0f       	add	r24, r24
    2a7a:	99 1f       	adc	r25, r25
    2a7c:	0a 94       	dec	r0
    2a7e:	e2 f7       	brpl	.-8      	; 0x2a78 <setPinDirection+0xfe>
    2a80:	84 2b       	or	r24, r20
    2a82:	8c 93       	st	X, r24
    2a84:	6c c0       	rjmp	.+216    	; 0x2b5e <setPinDirection+0x1e4>
			}
			else
			{
				CLEAR_BIT(DDRB, loc_pn);
    2a86:	a7 e3       	ldi	r26, 0x37	; 55
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	e7 e3       	ldi	r30, 0x37	; 55
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	80 81       	ld	r24, Z
    2a90:	48 2f       	mov	r20, r24
    2a92:	8a 81       	ldd	r24, Y+2	; 0x02
    2a94:	28 2f       	mov	r18, r24
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	02 2e       	mov	r0, r18
    2a9e:	02 c0       	rjmp	.+4      	; 0x2aa4 <setPinDirection+0x12a>
    2aa0:	88 0f       	add	r24, r24
    2aa2:	99 1f       	adc	r25, r25
    2aa4:	0a 94       	dec	r0
    2aa6:	e2 f7       	brpl	.-8      	; 0x2aa0 <setPinDirection+0x126>
    2aa8:	80 95       	com	r24
    2aaa:	84 23       	and	r24, r20
    2aac:	8c 93       	st	X, r24
    2aae:	57 c0       	rjmp	.+174    	; 0x2b5e <setPinDirection+0x1e4>
			}
			break;
		case PORT_PORTC:
			if (direction == PIN_OUTPUT)
    2ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab2:	81 30       	cpi	r24, 0x01	; 1
    2ab4:	a1 f4       	brne	.+40     	; 0x2ade <setPinDirection+0x164>
			{
				SET_BIT(DDRC, loc_pn);
    2ab6:	a4 e3       	ldi	r26, 0x34	; 52
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	e4 e3       	ldi	r30, 0x34	; 52
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	80 81       	ld	r24, Z
    2ac0:	48 2f       	mov	r20, r24
    2ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac4:	28 2f       	mov	r18, r24
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	02 2e       	mov	r0, r18
    2ace:	02 c0       	rjmp	.+4      	; 0x2ad4 <setPinDirection+0x15a>
    2ad0:	88 0f       	add	r24, r24
    2ad2:	99 1f       	adc	r25, r25
    2ad4:	0a 94       	dec	r0
    2ad6:	e2 f7       	brpl	.-8      	; 0x2ad0 <setPinDirection+0x156>
    2ad8:	84 2b       	or	r24, r20
    2ada:	8c 93       	st	X, r24
    2adc:	40 c0       	rjmp	.+128    	; 0x2b5e <setPinDirection+0x1e4>
			}
			else
			{
				CLEAR_BIT(DDRC, loc_pn);
    2ade:	a4 e3       	ldi	r26, 0x34	; 52
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	e4 e3       	ldi	r30, 0x34	; 52
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	80 81       	ld	r24, Z
    2ae8:	48 2f       	mov	r20, r24
    2aea:	8a 81       	ldd	r24, Y+2	; 0x02
    2aec:	28 2f       	mov	r18, r24
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	02 2e       	mov	r0, r18
    2af6:	02 c0       	rjmp	.+4      	; 0x2afc <setPinDirection+0x182>
    2af8:	88 0f       	add	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	0a 94       	dec	r0
    2afe:	e2 f7       	brpl	.-8      	; 0x2af8 <setPinDirection+0x17e>
    2b00:	80 95       	com	r24
    2b02:	84 23       	and	r24, r20
    2b04:	8c 93       	st	X, r24
    2b06:	2b c0       	rjmp	.+86     	; 0x2b5e <setPinDirection+0x1e4>
			}
			break;
		case PORT_PORTD:
			if (direction == PIN_OUTPUT)
    2b08:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0a:	81 30       	cpi	r24, 0x01	; 1
    2b0c:	a1 f4       	brne	.+40     	; 0x2b36 <setPinDirection+0x1bc>
			{
				SET_BIT(DDRD, loc_pn);
    2b0e:	a1 e3       	ldi	r26, 0x31	; 49
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	e1 e3       	ldi	r30, 0x31	; 49
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	48 2f       	mov	r20, r24
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	28 2f       	mov	r18, r24
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	02 2e       	mov	r0, r18
    2b26:	02 c0       	rjmp	.+4      	; 0x2b2c <setPinDirection+0x1b2>
    2b28:	88 0f       	add	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	0a 94       	dec	r0
    2b2e:	e2 f7       	brpl	.-8      	; 0x2b28 <setPinDirection+0x1ae>
    2b30:	84 2b       	or	r24, r20
    2b32:	8c 93       	st	X, r24
    2b34:	14 c0       	rjmp	.+40     	; 0x2b5e <setPinDirection+0x1e4>
			}
			else
			{
				CLEAR_BIT(DDRD, loc_pn);
    2b36:	a1 e3       	ldi	r26, 0x31	; 49
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	e1 e3       	ldi	r30, 0x31	; 49
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	48 2f       	mov	r20, r24
    2b42:	8a 81       	ldd	r24, Y+2	; 0x02
    2b44:	28 2f       	mov	r18, r24
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	02 2e       	mov	r0, r18
    2b4e:	02 c0       	rjmp	.+4      	; 0x2b54 <setPinDirection+0x1da>
    2b50:	88 0f       	add	r24, r24
    2b52:	99 1f       	adc	r25, r25
    2b54:	0a 94       	dec	r0
    2b56:	e2 f7       	brpl	.-8      	; 0x2b50 <setPinDirection+0x1d6>
    2b58:	80 95       	com	r24
    2b5a:	84 23       	and	r24, r20
    2b5c:	8c 93       	st	X, r24
			}
			break;
		}
	}

		return return_errorStatus;
    2b5e:	8b 81       	ldd	r24, Y+3	; 0x03


}
    2b60:	27 96       	adiw	r28, 0x07	; 7
    2b62:	0f b6       	in	r0, 0x3f	; 63
    2b64:	f8 94       	cli
    2b66:	de bf       	out	0x3e, r29	; 62
    2b68:	0f be       	out	0x3f, r0	; 63
    2b6a:	cd bf       	out	0x3d, r28	; 61
    2b6c:	cf 91       	pop	r28
    2b6e:	df 91       	pop	r29
    2b70:	08 95       	ret

00002b72 <setMode>:
/*
*choose between four modes
*change the state of pin in specific time
* */
port_errorStatus setMode(u8 pin_id, u8 mode)
{
    2b72:	df 93       	push	r29
    2b74:	cf 93       	push	r28
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	2f 97       	sbiw	r28, 0x0f	; 15
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	f8 94       	cli
    2b80:	de bf       	out	0x3e, r29	; 62
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	cd bf       	out	0x3d, r28	; 61
    2b86:	8c 83       	std	Y+4, r24	; 0x04
    2b88:	6d 83       	std	Y+5, r22	; 0x05
	port_errorStatus return_errorStatus = port_OK;
    2b8a:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_port;

	u8 loc_pin;

	if(pin_id > NUM_OF_PINS)
    2b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b8e:	80 32       	cpi	r24, 0x20	; 32
    2b90:	18 f0       	brcs	.+6      	; 0x2b98 <setMode+0x26>
	{
		return_errorStatus = pinError;
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	8b 83       	std	Y+3, r24	; 0x03
    2b96:	27 c3       	rjmp	.+1614   	; 0x31e6 <setMode+0x674>
	}
	else if(mode > NUM_OF_MODES)
    2b98:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9a:	84 30       	cpi	r24, 0x04	; 4
    2b9c:	18 f0       	brcs	.+6      	; 0x2ba4 <setMode+0x32>
	{
		return_errorStatus = pinDirectionError;
    2b9e:	82 e0       	ldi	r24, 0x02	; 2
    2ba0:	8b 83       	std	Y+3, r24	; 0x03
    2ba2:	21 c3       	rjmp	.+1602   	; 0x31e6 <setMode+0x674>
	}
	else
	{
		loc_pin = pin_id % NUM_OF_PINS_PER_PORT;
    2ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba6:	87 70       	andi	r24, 0x07	; 7
    2ba8:	89 83       	std	Y+1, r24	; 0x01
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
    2baa:	8c 81       	ldd	r24, Y+4	; 0x04
    2bac:	86 95       	lsr	r24
    2bae:	86 95       	lsr	r24
    2bb0:	86 95       	lsr	r24
    2bb2:	8a 83       	std	Y+2, r24	; 0x02

		switch(loc_port)
    2bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	3f 87       	std	Y+15, r19	; 0x0f
    2bbc:	2e 87       	std	Y+14, r18	; 0x0e
    2bbe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bc0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bc2:	81 30       	cpi	r24, 0x01	; 1
    2bc4:	91 05       	cpc	r25, r1
    2bc6:	09 f4       	brne	.+2      	; 0x2bca <setMode+0x58>
    2bc8:	d5 c0       	rjmp	.+426    	; 0x2d74 <setMode+0x202>
    2bca:	2e 85       	ldd	r18, Y+14	; 0x0e
    2bcc:	3f 85       	ldd	r19, Y+15	; 0x0f
    2bce:	22 30       	cpi	r18, 0x02	; 2
    2bd0:	31 05       	cpc	r19, r1
    2bd2:	2c f4       	brge	.+10     	; 0x2bde <setMode+0x6c>
    2bd4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bd6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bd8:	00 97       	sbiw	r24, 0x00	; 0
    2bda:	71 f0       	breq	.+28     	; 0x2bf8 <setMode+0x86>
    2bdc:	04 c3       	rjmp	.+1544   	; 0x31e6 <setMode+0x674>
    2bde:	2e 85       	ldd	r18, Y+14	; 0x0e
    2be0:	3f 85       	ldd	r19, Y+15	; 0x0f
    2be2:	22 30       	cpi	r18, 0x02	; 2
    2be4:	31 05       	cpc	r19, r1
    2be6:	09 f4       	brne	.+2      	; 0x2bea <setMode+0x78>
    2be8:	83 c1       	rjmp	.+774    	; 0x2ef0 <setMode+0x37e>
    2bea:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bec:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bee:	83 30       	cpi	r24, 0x03	; 3
    2bf0:	91 05       	cpc	r25, r1
    2bf2:	09 f4       	brne	.+2      	; 0x2bf6 <setMode+0x84>
    2bf4:	3b c2       	rjmp	.+1142   	; 0x306c <setMode+0x4fa>
    2bf6:	f7 c2       	rjmp	.+1518   	; 0x31e6 <setMode+0x674>
		{

		case PORT_PORTA:

			switch (mode)
    2bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfa:	28 2f       	mov	r18, r24
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	3d 87       	std	Y+13, r19	; 0x0d
    2c00:	2c 87       	std	Y+12, r18	; 0x0c
    2c02:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c04:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c06:	81 30       	cpi	r24, 0x01	; 1
    2c08:	91 05       	cpc	r25, r1
    2c0a:	09 f4       	brne	.+2      	; 0x2c0e <setMode+0x9c>
    2c0c:	3e c0       	rjmp	.+124    	; 0x2c8a <setMode+0x118>
    2c0e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c10:	3d 85       	ldd	r19, Y+13	; 0x0d
    2c12:	22 30       	cpi	r18, 0x02	; 2
    2c14:	31 05       	cpc	r19, r1
    2c16:	2c f4       	brge	.+10     	; 0x2c22 <setMode+0xb0>
    2c18:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c1a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c1c:	00 97       	sbiw	r24, 0x00	; 0
    2c1e:	71 f0       	breq	.+28     	; 0x2c3c <setMode+0xca>
    2c20:	e2 c2       	rjmp	.+1476   	; 0x31e6 <setMode+0x674>
    2c22:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c24:	3d 85       	ldd	r19, Y+13	; 0x0d
    2c26:	22 30       	cpi	r18, 0x02	; 2
    2c28:	31 05       	cpc	r19, r1
    2c2a:	09 f4       	brne	.+2      	; 0x2c2e <setMode+0xbc>
    2c2c:	7c c0       	rjmp	.+248    	; 0x2d26 <setMode+0x1b4>
    2c2e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c30:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c32:	83 30       	cpi	r24, 0x03	; 3
    2c34:	91 05       	cpc	r25, r1
    2c36:	09 f4       	brne	.+2      	; 0x2c3a <setMode+0xc8>
    2c38:	4e c0       	rjmp	.+156    	; 0x2cd6 <setMode+0x164>
    2c3a:	d5 c2       	rjmp	.+1450   	; 0x31e6 <setMode+0x674>
			{

			case PIN_OUTPUT_LOW:

				SET_BIT(DDRA, loc_pin);
    2c3c:	aa e3       	ldi	r26, 0x3A	; 58
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	ea e3       	ldi	r30, 0x3A	; 58
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
    2c46:	48 2f       	mov	r20, r24
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	28 2f       	mov	r18, r24
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	02 c0       	rjmp	.+4      	; 0x2c58 <setMode+0xe6>
    2c54:	88 0f       	add	r24, r24
    2c56:	99 1f       	adc	r25, r25
    2c58:	2a 95       	dec	r18
    2c5a:	e2 f7       	brpl	.-8      	; 0x2c54 <setMode+0xe2>
    2c5c:	84 2b       	or	r24, r20
    2c5e:	8c 93       	st	X, r24

				CLEAR_BIT(PORTA, loc_pin);
    2c60:	ab e3       	ldi	r26, 0x3B	; 59
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	eb e3       	ldi	r30, 0x3B	; 59
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	48 2f       	mov	r20, r24
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
    2c6e:	28 2f       	mov	r18, r24
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	02 2e       	mov	r0, r18
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <setMode+0x10c>
    2c7a:	88 0f       	add	r24, r24
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	0a 94       	dec	r0
    2c80:	e2 f7       	brpl	.-8      	; 0x2c7a <setMode+0x108>
    2c82:	80 95       	com	r24
    2c84:	84 23       	and	r24, r20
    2c86:	8c 93       	st	X, r24
    2c88:	ae c2       	rjmp	.+1372   	; 0x31e6 <setMode+0x674>

				break;

			case PIN_OUTPUT_HIGH:

				SET_BIT(DDRA, loc_pin);
    2c8a:	aa e3       	ldi	r26, 0x3A	; 58
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	ea e3       	ldi	r30, 0x3A	; 58
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	80 81       	ld	r24, Z
    2c94:	48 2f       	mov	r20, r24
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	28 2f       	mov	r18, r24
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	02 c0       	rjmp	.+4      	; 0x2ca6 <setMode+0x134>
    2ca2:	88 0f       	add	r24, r24
    2ca4:	99 1f       	adc	r25, r25
    2ca6:	2a 95       	dec	r18
    2ca8:	e2 f7       	brpl	.-8      	; 0x2ca2 <setMode+0x130>
    2caa:	84 2b       	or	r24, r20
    2cac:	8c 93       	st	X, r24

				SET_BIT(PORTA, loc_pin);
    2cae:	ab e3       	ldi	r26, 0x3B	; 59
    2cb0:	b0 e0       	ldi	r27, 0x00	; 0
    2cb2:	eb e3       	ldi	r30, 0x3B	; 59
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	80 81       	ld	r24, Z
    2cb8:	48 2f       	mov	r20, r24
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
    2cbc:	28 2f       	mov	r18, r24
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	02 2e       	mov	r0, r18
    2cc6:	02 c0       	rjmp	.+4      	; 0x2ccc <setMode+0x15a>
    2cc8:	88 0f       	add	r24, r24
    2cca:	99 1f       	adc	r25, r25
    2ccc:	0a 94       	dec	r0
    2cce:	e2 f7       	brpl	.-8      	; 0x2cc8 <setMode+0x156>
    2cd0:	84 2b       	or	r24, r20
    2cd2:	8c 93       	st	X, r24
    2cd4:	88 c2       	rjmp	.+1296   	; 0x31e6 <setMode+0x674>

				break;

			case PIN_INPUT_FLOATING:

				CLEAR_BIT(DDRA, loc_pin);
    2cd6:	aa e3       	ldi	r26, 0x3A	; 58
    2cd8:	b0 e0       	ldi	r27, 0x00	; 0
    2cda:	ea e3       	ldi	r30, 0x3A	; 58
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	80 81       	ld	r24, Z
    2ce0:	48 2f       	mov	r20, r24
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
    2ce4:	28 2f       	mov	r18, r24
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	02 c0       	rjmp	.+4      	; 0x2cf2 <setMode+0x180>
    2cee:	88 0f       	add	r24, r24
    2cf0:	99 1f       	adc	r25, r25
    2cf2:	2a 95       	dec	r18
    2cf4:	e2 f7       	brpl	.-8      	; 0x2cee <setMode+0x17c>
    2cf6:	80 95       	com	r24
    2cf8:	84 23       	and	r24, r20
    2cfa:	8c 93       	st	X, r24

				CLEAR_BIT(PORTA, loc_pin);
    2cfc:	ab e3       	ldi	r26, 0x3B	; 59
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	eb e3       	ldi	r30, 0x3B	; 59
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	48 2f       	mov	r20, r24
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	28 2f       	mov	r18, r24
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	02 2e       	mov	r0, r18
    2d14:	02 c0       	rjmp	.+4      	; 0x2d1a <setMode+0x1a8>
    2d16:	88 0f       	add	r24, r24
    2d18:	99 1f       	adc	r25, r25
    2d1a:	0a 94       	dec	r0
    2d1c:	e2 f7       	brpl	.-8      	; 0x2d16 <setMode+0x1a4>
    2d1e:	80 95       	com	r24
    2d20:	84 23       	and	r24, r20
    2d22:	8c 93       	st	X, r24
    2d24:	60 c2       	rjmp	.+1216   	; 0x31e6 <setMode+0x674>

				break;

			case PIN_INPUT_PULL_UP:

				CLEAR_BIT(DDRA, loc_pin);
    2d26:	aa e3       	ldi	r26, 0x3A	; 58
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	ea e3       	ldi	r30, 0x3A	; 58
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	48 2f       	mov	r20, r24
    2d32:	89 81       	ldd	r24, Y+1	; 0x01
    2d34:	28 2f       	mov	r18, r24
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	02 c0       	rjmp	.+4      	; 0x2d42 <setMode+0x1d0>
    2d3e:	88 0f       	add	r24, r24
    2d40:	99 1f       	adc	r25, r25
    2d42:	2a 95       	dec	r18
    2d44:	e2 f7       	brpl	.-8      	; 0x2d3e <setMode+0x1cc>
    2d46:	80 95       	com	r24
    2d48:	84 23       	and	r24, r20
    2d4a:	8c 93       	st	X, r24

				SET_BIT(PORTA, loc_pin);
    2d4c:	ab e3       	ldi	r26, 0x3B	; 59
    2d4e:	b0 e0       	ldi	r27, 0x00	; 0
    2d50:	eb e3       	ldi	r30, 0x3B	; 59
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	48 2f       	mov	r20, r24
    2d58:	89 81       	ldd	r24, Y+1	; 0x01
    2d5a:	28 2f       	mov	r18, r24
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	02 2e       	mov	r0, r18
    2d64:	02 c0       	rjmp	.+4      	; 0x2d6a <setMode+0x1f8>
    2d66:	88 0f       	add	r24, r24
    2d68:	99 1f       	adc	r25, r25
    2d6a:	0a 94       	dec	r0
    2d6c:	e2 f7       	brpl	.-8      	; 0x2d66 <setMode+0x1f4>
    2d6e:	84 2b       	or	r24, r20
    2d70:	8c 93       	st	X, r24
    2d72:	39 c2       	rjmp	.+1138   	; 0x31e6 <setMode+0x674>
			}
			break;

		case PORT_PORTB:

			switch (mode)
    2d74:	8d 81       	ldd	r24, Y+5	; 0x05
    2d76:	28 2f       	mov	r18, r24
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	3b 87       	std	Y+11, r19	; 0x0b
    2d7c:	2a 87       	std	Y+10, r18	; 0x0a
    2d7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d80:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d82:	81 30       	cpi	r24, 0x01	; 1
    2d84:	91 05       	cpc	r25, r1
    2d86:	09 f4       	brne	.+2      	; 0x2d8a <setMode+0x218>
    2d88:	3e c0       	rjmp	.+124    	; 0x2e06 <setMode+0x294>
    2d8a:	2a 85       	ldd	r18, Y+10	; 0x0a
    2d8c:	3b 85       	ldd	r19, Y+11	; 0x0b
    2d8e:	22 30       	cpi	r18, 0x02	; 2
    2d90:	31 05       	cpc	r19, r1
    2d92:	2c f4       	brge	.+10     	; 0x2d9e <setMode+0x22c>
    2d94:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d96:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d98:	00 97       	sbiw	r24, 0x00	; 0
    2d9a:	71 f0       	breq	.+28     	; 0x2db8 <setMode+0x246>
    2d9c:	24 c2       	rjmp	.+1096   	; 0x31e6 <setMode+0x674>
    2d9e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2da0:	3b 85       	ldd	r19, Y+11	; 0x0b
    2da2:	22 30       	cpi	r18, 0x02	; 2
    2da4:	31 05       	cpc	r19, r1
    2da6:	09 f4       	brne	.+2      	; 0x2daa <setMode+0x238>
    2da8:	7c c0       	rjmp	.+248    	; 0x2ea2 <setMode+0x330>
    2daa:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dac:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dae:	83 30       	cpi	r24, 0x03	; 3
    2db0:	91 05       	cpc	r25, r1
    2db2:	09 f4       	brne	.+2      	; 0x2db6 <setMode+0x244>
    2db4:	4e c0       	rjmp	.+156    	; 0x2e52 <setMode+0x2e0>
    2db6:	17 c2       	rjmp	.+1070   	; 0x31e6 <setMode+0x674>
			{

			case PIN_OUTPUT_LOW:

				SET_BIT(DDRB, loc_pin);
    2db8:	a7 e3       	ldi	r26, 0x37	; 55
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	e7 e3       	ldi	r30, 0x37	; 55
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	48 2f       	mov	r20, r24
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	28 2f       	mov	r18, r24
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	02 c0       	rjmp	.+4      	; 0x2dd4 <setMode+0x262>
    2dd0:	88 0f       	add	r24, r24
    2dd2:	99 1f       	adc	r25, r25
    2dd4:	2a 95       	dec	r18
    2dd6:	e2 f7       	brpl	.-8      	; 0x2dd0 <setMode+0x25e>
    2dd8:	84 2b       	or	r24, r20
    2dda:	8c 93       	st	X, r24

				CLEAR_BIT(PORTB, loc_pin);
    2ddc:	a8 e3       	ldi	r26, 0x38	; 56
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	e8 e3       	ldi	r30, 0x38	; 56
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	80 81       	ld	r24, Z
    2de6:	48 2f       	mov	r20, r24
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
    2dea:	28 2f       	mov	r18, r24
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	02 2e       	mov	r0, r18
    2df4:	02 c0       	rjmp	.+4      	; 0x2dfa <setMode+0x288>
    2df6:	88 0f       	add	r24, r24
    2df8:	99 1f       	adc	r25, r25
    2dfa:	0a 94       	dec	r0
    2dfc:	e2 f7       	brpl	.-8      	; 0x2df6 <setMode+0x284>
    2dfe:	80 95       	com	r24
    2e00:	84 23       	and	r24, r20
    2e02:	8c 93       	st	X, r24
    2e04:	f0 c1       	rjmp	.+992    	; 0x31e6 <setMode+0x674>

				break;

			case PIN_OUTPUT_HIGH:

				SET_BIT(DDRB, loc_pin);
    2e06:	a7 e3       	ldi	r26, 0x37	; 55
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	e7 e3       	ldi	r30, 0x37	; 55
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 81       	ld	r24, Z
    2e10:	48 2f       	mov	r20, r24
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	28 2f       	mov	r18, r24
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	02 c0       	rjmp	.+4      	; 0x2e22 <setMode+0x2b0>
    2e1e:	88 0f       	add	r24, r24
    2e20:	99 1f       	adc	r25, r25
    2e22:	2a 95       	dec	r18
    2e24:	e2 f7       	brpl	.-8      	; 0x2e1e <setMode+0x2ac>
    2e26:	84 2b       	or	r24, r20
    2e28:	8c 93       	st	X, r24

				SET_BIT(PORTB, loc_pin);
    2e2a:	a8 e3       	ldi	r26, 0x38	; 56
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	e8 e3       	ldi	r30, 0x38	; 56
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	48 2f       	mov	r20, r24
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	28 2f       	mov	r18, r24
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	02 2e       	mov	r0, r18
    2e42:	02 c0       	rjmp	.+4      	; 0x2e48 <setMode+0x2d6>
    2e44:	88 0f       	add	r24, r24
    2e46:	99 1f       	adc	r25, r25
    2e48:	0a 94       	dec	r0
    2e4a:	e2 f7       	brpl	.-8      	; 0x2e44 <setMode+0x2d2>
    2e4c:	84 2b       	or	r24, r20
    2e4e:	8c 93       	st	X, r24
    2e50:	ca c1       	rjmp	.+916    	; 0x31e6 <setMode+0x674>

				break;

			case PIN_INPUT_FLOATING:

				CLEAR_BIT(DDRB, loc_pin);
    2e52:	a7 e3       	ldi	r26, 0x37	; 55
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	e7 e3       	ldi	r30, 0x37	; 55
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	80 81       	ld	r24, Z
    2e5c:	48 2f       	mov	r20, r24
    2e5e:	89 81       	ldd	r24, Y+1	; 0x01
    2e60:	28 2f       	mov	r18, r24
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	02 c0       	rjmp	.+4      	; 0x2e6e <setMode+0x2fc>
    2e6a:	88 0f       	add	r24, r24
    2e6c:	99 1f       	adc	r25, r25
    2e6e:	2a 95       	dec	r18
    2e70:	e2 f7       	brpl	.-8      	; 0x2e6a <setMode+0x2f8>
    2e72:	80 95       	com	r24
    2e74:	84 23       	and	r24, r20
    2e76:	8c 93       	st	X, r24

				CLEAR_BIT(PORTB, loc_pin);
    2e78:	a8 e3       	ldi	r26, 0x38	; 56
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	e8 e3       	ldi	r30, 0x38	; 56
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	48 2f       	mov	r20, r24
    2e84:	89 81       	ldd	r24, Y+1	; 0x01
    2e86:	28 2f       	mov	r18, r24
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	02 2e       	mov	r0, r18
    2e90:	02 c0       	rjmp	.+4      	; 0x2e96 <setMode+0x324>
    2e92:	88 0f       	add	r24, r24
    2e94:	99 1f       	adc	r25, r25
    2e96:	0a 94       	dec	r0
    2e98:	e2 f7       	brpl	.-8      	; 0x2e92 <setMode+0x320>
    2e9a:	80 95       	com	r24
    2e9c:	84 23       	and	r24, r20
    2e9e:	8c 93       	st	X, r24
    2ea0:	a2 c1       	rjmp	.+836    	; 0x31e6 <setMode+0x674>

				break;

			case PIN_INPUT_PULL_UP:

				CLEAR_BIT(DDRB, loc_pin);
    2ea2:	a7 e3       	ldi	r26, 0x37	; 55
    2ea4:	b0 e0       	ldi	r27, 0x00	; 0
    2ea6:	e7 e3       	ldi	r30, 0x37	; 55
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	80 81       	ld	r24, Z
    2eac:	48 2f       	mov	r20, r24
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	28 2f       	mov	r18, r24
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	02 c0       	rjmp	.+4      	; 0x2ebe <setMode+0x34c>
    2eba:	88 0f       	add	r24, r24
    2ebc:	99 1f       	adc	r25, r25
    2ebe:	2a 95       	dec	r18
    2ec0:	e2 f7       	brpl	.-8      	; 0x2eba <setMode+0x348>
    2ec2:	80 95       	com	r24
    2ec4:	84 23       	and	r24, r20
    2ec6:	8c 93       	st	X, r24

				SET_BIT(PORTB, loc_pin);
    2ec8:	a8 e3       	ldi	r26, 0x38	; 56
    2eca:	b0 e0       	ldi	r27, 0x00	; 0
    2ecc:	e8 e3       	ldi	r30, 0x38	; 56
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	80 81       	ld	r24, Z
    2ed2:	48 2f       	mov	r20, r24
    2ed4:	89 81       	ldd	r24, Y+1	; 0x01
    2ed6:	28 2f       	mov	r18, r24
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	02 2e       	mov	r0, r18
    2ee0:	02 c0       	rjmp	.+4      	; 0x2ee6 <setMode+0x374>
    2ee2:	88 0f       	add	r24, r24
    2ee4:	99 1f       	adc	r25, r25
    2ee6:	0a 94       	dec	r0
    2ee8:	e2 f7       	brpl	.-8      	; 0x2ee2 <setMode+0x370>
    2eea:	84 2b       	or	r24, r20
    2eec:	8c 93       	st	X, r24
    2eee:	7b c1       	rjmp	.+758    	; 0x31e6 <setMode+0x674>
			break;


		case PORT_PORTC:

			switch (mode)
    2ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef2:	28 2f       	mov	r18, r24
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	39 87       	std	Y+9, r19	; 0x09
    2ef8:	28 87       	std	Y+8, r18	; 0x08
    2efa:	88 85       	ldd	r24, Y+8	; 0x08
    2efc:	99 85       	ldd	r25, Y+9	; 0x09
    2efe:	81 30       	cpi	r24, 0x01	; 1
    2f00:	91 05       	cpc	r25, r1
    2f02:	09 f4       	brne	.+2      	; 0x2f06 <setMode+0x394>
    2f04:	3e c0       	rjmp	.+124    	; 0x2f82 <setMode+0x410>
    2f06:	28 85       	ldd	r18, Y+8	; 0x08
    2f08:	39 85       	ldd	r19, Y+9	; 0x09
    2f0a:	22 30       	cpi	r18, 0x02	; 2
    2f0c:	31 05       	cpc	r19, r1
    2f0e:	2c f4       	brge	.+10     	; 0x2f1a <setMode+0x3a8>
    2f10:	88 85       	ldd	r24, Y+8	; 0x08
    2f12:	99 85       	ldd	r25, Y+9	; 0x09
    2f14:	00 97       	sbiw	r24, 0x00	; 0
    2f16:	71 f0       	breq	.+28     	; 0x2f34 <setMode+0x3c2>
    2f18:	66 c1       	rjmp	.+716    	; 0x31e6 <setMode+0x674>
    2f1a:	28 85       	ldd	r18, Y+8	; 0x08
    2f1c:	39 85       	ldd	r19, Y+9	; 0x09
    2f1e:	22 30       	cpi	r18, 0x02	; 2
    2f20:	31 05       	cpc	r19, r1
    2f22:	09 f4       	brne	.+2      	; 0x2f26 <setMode+0x3b4>
    2f24:	7c c0       	rjmp	.+248    	; 0x301e <setMode+0x4ac>
    2f26:	88 85       	ldd	r24, Y+8	; 0x08
    2f28:	99 85       	ldd	r25, Y+9	; 0x09
    2f2a:	83 30       	cpi	r24, 0x03	; 3
    2f2c:	91 05       	cpc	r25, r1
    2f2e:	09 f4       	brne	.+2      	; 0x2f32 <setMode+0x3c0>
    2f30:	4e c0       	rjmp	.+156    	; 0x2fce <setMode+0x45c>
    2f32:	59 c1       	rjmp	.+690    	; 0x31e6 <setMode+0x674>
			{

			case PIN_OUTPUT_LOW:

				SET_BIT(DDRC, loc_pin);
    2f34:	a4 e3       	ldi	r26, 0x34	; 52
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	e4 e3       	ldi	r30, 0x34	; 52
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	80 81       	ld	r24, Z
    2f3e:	48 2f       	mov	r20, r24
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	28 2f       	mov	r18, r24
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	02 c0       	rjmp	.+4      	; 0x2f50 <setMode+0x3de>
    2f4c:	88 0f       	add	r24, r24
    2f4e:	99 1f       	adc	r25, r25
    2f50:	2a 95       	dec	r18
    2f52:	e2 f7       	brpl	.-8      	; 0x2f4c <setMode+0x3da>
    2f54:	84 2b       	or	r24, r20
    2f56:	8c 93       	st	X, r24

				CLEAR_BIT(PORTC, loc_pin);
    2f58:	a5 e3       	ldi	r26, 0x35	; 53
    2f5a:	b0 e0       	ldi	r27, 0x00	; 0
    2f5c:	e5 e3       	ldi	r30, 0x35	; 53
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 81       	ld	r24, Z
    2f62:	48 2f       	mov	r20, r24
    2f64:	89 81       	ldd	r24, Y+1	; 0x01
    2f66:	28 2f       	mov	r18, r24
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	02 2e       	mov	r0, r18
    2f70:	02 c0       	rjmp	.+4      	; 0x2f76 <setMode+0x404>
    2f72:	88 0f       	add	r24, r24
    2f74:	99 1f       	adc	r25, r25
    2f76:	0a 94       	dec	r0
    2f78:	e2 f7       	brpl	.-8      	; 0x2f72 <setMode+0x400>
    2f7a:	80 95       	com	r24
    2f7c:	84 23       	and	r24, r20
    2f7e:	8c 93       	st	X, r24
    2f80:	32 c1       	rjmp	.+612    	; 0x31e6 <setMode+0x674>

				break;

			case PIN_OUTPUT_HIGH:

				SET_BIT(DDRC, loc_pin);
    2f82:	a4 e3       	ldi	r26, 0x34	; 52
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	e4 e3       	ldi	r30, 0x34	; 52
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	48 2f       	mov	r20, r24
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	28 2f       	mov	r18, r24
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	02 c0       	rjmp	.+4      	; 0x2f9e <setMode+0x42c>
    2f9a:	88 0f       	add	r24, r24
    2f9c:	99 1f       	adc	r25, r25
    2f9e:	2a 95       	dec	r18
    2fa0:	e2 f7       	brpl	.-8      	; 0x2f9a <setMode+0x428>
    2fa2:	84 2b       	or	r24, r20
    2fa4:	8c 93       	st	X, r24

				SET_BIT(PORTC, loc_pin);
    2fa6:	a5 e3       	ldi	r26, 0x35	; 53
    2fa8:	b0 e0       	ldi	r27, 0x00	; 0
    2faa:	e5 e3       	ldi	r30, 0x35	; 53
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	80 81       	ld	r24, Z
    2fb0:	48 2f       	mov	r20, r24
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	28 2f       	mov	r18, r24
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	02 2e       	mov	r0, r18
    2fbe:	02 c0       	rjmp	.+4      	; 0x2fc4 <setMode+0x452>
    2fc0:	88 0f       	add	r24, r24
    2fc2:	99 1f       	adc	r25, r25
    2fc4:	0a 94       	dec	r0
    2fc6:	e2 f7       	brpl	.-8      	; 0x2fc0 <setMode+0x44e>
    2fc8:	84 2b       	or	r24, r20
    2fca:	8c 93       	st	X, r24
    2fcc:	0c c1       	rjmp	.+536    	; 0x31e6 <setMode+0x674>

				break;

			case PIN_INPUT_FLOATING:

				CLEAR_BIT(DDRC, loc_pin);
    2fce:	a4 e3       	ldi	r26, 0x34	; 52
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	e4 e3       	ldi	r30, 0x34	; 52
    2fd4:	f0 e0       	ldi	r31, 0x00	; 0
    2fd6:	80 81       	ld	r24, Z
    2fd8:	48 2f       	mov	r20, r24
    2fda:	89 81       	ldd	r24, Y+1	; 0x01
    2fdc:	28 2f       	mov	r18, r24
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	02 c0       	rjmp	.+4      	; 0x2fea <setMode+0x478>
    2fe6:	88 0f       	add	r24, r24
    2fe8:	99 1f       	adc	r25, r25
    2fea:	2a 95       	dec	r18
    2fec:	e2 f7       	brpl	.-8      	; 0x2fe6 <setMode+0x474>
    2fee:	80 95       	com	r24
    2ff0:	84 23       	and	r24, r20
    2ff2:	8c 93       	st	X, r24

				CLEAR_BIT(PORTC, loc_pin);
    2ff4:	a5 e3       	ldi	r26, 0x35	; 53
    2ff6:	b0 e0       	ldi	r27, 0x00	; 0
    2ff8:	e5 e3       	ldi	r30, 0x35	; 53
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	80 81       	ld	r24, Z
    2ffe:	48 2f       	mov	r20, r24
    3000:	89 81       	ldd	r24, Y+1	; 0x01
    3002:	28 2f       	mov	r18, r24
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	02 2e       	mov	r0, r18
    300c:	02 c0       	rjmp	.+4      	; 0x3012 <setMode+0x4a0>
    300e:	88 0f       	add	r24, r24
    3010:	99 1f       	adc	r25, r25
    3012:	0a 94       	dec	r0
    3014:	e2 f7       	brpl	.-8      	; 0x300e <setMode+0x49c>
    3016:	80 95       	com	r24
    3018:	84 23       	and	r24, r20
    301a:	8c 93       	st	X, r24
    301c:	e4 c0       	rjmp	.+456    	; 0x31e6 <setMode+0x674>

				break;

			case PIN_INPUT_PULL_UP:

				CLEAR_BIT(DDRC, loc_pin);
    301e:	a4 e3       	ldi	r26, 0x34	; 52
    3020:	b0 e0       	ldi	r27, 0x00	; 0
    3022:	e4 e3       	ldi	r30, 0x34	; 52
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	80 81       	ld	r24, Z
    3028:	48 2f       	mov	r20, r24
    302a:	89 81       	ldd	r24, Y+1	; 0x01
    302c:	28 2f       	mov	r18, r24
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	02 c0       	rjmp	.+4      	; 0x303a <setMode+0x4c8>
    3036:	88 0f       	add	r24, r24
    3038:	99 1f       	adc	r25, r25
    303a:	2a 95       	dec	r18
    303c:	e2 f7       	brpl	.-8      	; 0x3036 <setMode+0x4c4>
    303e:	80 95       	com	r24
    3040:	84 23       	and	r24, r20
    3042:	8c 93       	st	X, r24

				SET_BIT(PORTC, loc_pin);
    3044:	a5 e3       	ldi	r26, 0x35	; 53
    3046:	b0 e0       	ldi	r27, 0x00	; 0
    3048:	e5 e3       	ldi	r30, 0x35	; 53
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	80 81       	ld	r24, Z
    304e:	48 2f       	mov	r20, r24
    3050:	89 81       	ldd	r24, Y+1	; 0x01
    3052:	28 2f       	mov	r18, r24
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	02 2e       	mov	r0, r18
    305c:	02 c0       	rjmp	.+4      	; 0x3062 <setMode+0x4f0>
    305e:	88 0f       	add	r24, r24
    3060:	99 1f       	adc	r25, r25
    3062:	0a 94       	dec	r0
    3064:	e2 f7       	brpl	.-8      	; 0x305e <setMode+0x4ec>
    3066:	84 2b       	or	r24, r20
    3068:	8c 93       	st	X, r24
    306a:	bd c0       	rjmp	.+378    	; 0x31e6 <setMode+0x674>



		case PORT_PORTD:

			switch (mode)
    306c:	8d 81       	ldd	r24, Y+5	; 0x05
    306e:	28 2f       	mov	r18, r24
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	3f 83       	std	Y+7, r19	; 0x07
    3074:	2e 83       	std	Y+6, r18	; 0x06
    3076:	8e 81       	ldd	r24, Y+6	; 0x06
    3078:	9f 81       	ldd	r25, Y+7	; 0x07
    307a:	81 30       	cpi	r24, 0x01	; 1
    307c:	91 05       	cpc	r25, r1
    307e:	09 f4       	brne	.+2      	; 0x3082 <setMode+0x510>
    3080:	3e c0       	rjmp	.+124    	; 0x30fe <setMode+0x58c>
    3082:	2e 81       	ldd	r18, Y+6	; 0x06
    3084:	3f 81       	ldd	r19, Y+7	; 0x07
    3086:	22 30       	cpi	r18, 0x02	; 2
    3088:	31 05       	cpc	r19, r1
    308a:	2c f4       	brge	.+10     	; 0x3096 <setMode+0x524>
    308c:	8e 81       	ldd	r24, Y+6	; 0x06
    308e:	9f 81       	ldd	r25, Y+7	; 0x07
    3090:	00 97       	sbiw	r24, 0x00	; 0
    3092:	71 f0       	breq	.+28     	; 0x30b0 <setMode+0x53e>
    3094:	a8 c0       	rjmp	.+336    	; 0x31e6 <setMode+0x674>
    3096:	2e 81       	ldd	r18, Y+6	; 0x06
    3098:	3f 81       	ldd	r19, Y+7	; 0x07
    309a:	22 30       	cpi	r18, 0x02	; 2
    309c:	31 05       	cpc	r19, r1
    309e:	09 f4       	brne	.+2      	; 0x30a2 <setMode+0x530>
    30a0:	7c c0       	rjmp	.+248    	; 0x319a <setMode+0x628>
    30a2:	8e 81       	ldd	r24, Y+6	; 0x06
    30a4:	9f 81       	ldd	r25, Y+7	; 0x07
    30a6:	83 30       	cpi	r24, 0x03	; 3
    30a8:	91 05       	cpc	r25, r1
    30aa:	09 f4       	brne	.+2      	; 0x30ae <setMode+0x53c>
    30ac:	4e c0       	rjmp	.+156    	; 0x314a <setMode+0x5d8>
    30ae:	9b c0       	rjmp	.+310    	; 0x31e6 <setMode+0x674>
			{

			case PIN_OUTPUT_LOW:

				SET_BIT(DDRD, loc_pin);
    30b0:	a1 e3       	ldi	r26, 0x31	; 49
    30b2:	b0 e0       	ldi	r27, 0x00	; 0
    30b4:	e1 e3       	ldi	r30, 0x31	; 49
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	80 81       	ld	r24, Z
    30ba:	48 2f       	mov	r20, r24
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
    30be:	28 2f       	mov	r18, r24
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	02 c0       	rjmp	.+4      	; 0x30cc <setMode+0x55a>
    30c8:	88 0f       	add	r24, r24
    30ca:	99 1f       	adc	r25, r25
    30cc:	2a 95       	dec	r18
    30ce:	e2 f7       	brpl	.-8      	; 0x30c8 <setMode+0x556>
    30d0:	84 2b       	or	r24, r20
    30d2:	8c 93       	st	X, r24

				CLEAR_BIT(PORTD, loc_pin);
    30d4:	a2 e3       	ldi	r26, 0x32	; 50
    30d6:	b0 e0       	ldi	r27, 0x00	; 0
    30d8:	e2 e3       	ldi	r30, 0x32	; 50
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	80 81       	ld	r24, Z
    30de:	48 2f       	mov	r20, r24
    30e0:	89 81       	ldd	r24, Y+1	; 0x01
    30e2:	28 2f       	mov	r18, r24
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	02 2e       	mov	r0, r18
    30ec:	02 c0       	rjmp	.+4      	; 0x30f2 <setMode+0x580>
    30ee:	88 0f       	add	r24, r24
    30f0:	99 1f       	adc	r25, r25
    30f2:	0a 94       	dec	r0
    30f4:	e2 f7       	brpl	.-8      	; 0x30ee <setMode+0x57c>
    30f6:	80 95       	com	r24
    30f8:	84 23       	and	r24, r20
    30fa:	8c 93       	st	X, r24
    30fc:	74 c0       	rjmp	.+232    	; 0x31e6 <setMode+0x674>

				break;

			case PIN_OUTPUT_HIGH:

				SET_BIT(DDRD, loc_pin);
    30fe:	a1 e3       	ldi	r26, 0x31	; 49
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	e1 e3       	ldi	r30, 0x31	; 49
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	80 81       	ld	r24, Z
    3108:	48 2f       	mov	r20, r24
    310a:	89 81       	ldd	r24, Y+1	; 0x01
    310c:	28 2f       	mov	r18, r24
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	02 c0       	rjmp	.+4      	; 0x311a <setMode+0x5a8>
    3116:	88 0f       	add	r24, r24
    3118:	99 1f       	adc	r25, r25
    311a:	2a 95       	dec	r18
    311c:	e2 f7       	brpl	.-8      	; 0x3116 <setMode+0x5a4>
    311e:	84 2b       	or	r24, r20
    3120:	8c 93       	st	X, r24

				SET_BIT(PORTD, loc_pin);
    3122:	a2 e3       	ldi	r26, 0x32	; 50
    3124:	b0 e0       	ldi	r27, 0x00	; 0
    3126:	e2 e3       	ldi	r30, 0x32	; 50
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	80 81       	ld	r24, Z
    312c:	48 2f       	mov	r20, r24
    312e:	89 81       	ldd	r24, Y+1	; 0x01
    3130:	28 2f       	mov	r18, r24
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	02 2e       	mov	r0, r18
    313a:	02 c0       	rjmp	.+4      	; 0x3140 <setMode+0x5ce>
    313c:	88 0f       	add	r24, r24
    313e:	99 1f       	adc	r25, r25
    3140:	0a 94       	dec	r0
    3142:	e2 f7       	brpl	.-8      	; 0x313c <setMode+0x5ca>
    3144:	84 2b       	or	r24, r20
    3146:	8c 93       	st	X, r24
    3148:	4e c0       	rjmp	.+156    	; 0x31e6 <setMode+0x674>

				break;

			case PIN_INPUT_FLOATING:

				CLEAR_BIT(DDRD, loc_pin);
    314a:	a1 e3       	ldi	r26, 0x31	; 49
    314c:	b0 e0       	ldi	r27, 0x00	; 0
    314e:	e1 e3       	ldi	r30, 0x31	; 49
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	80 81       	ld	r24, Z
    3154:	48 2f       	mov	r20, r24
    3156:	89 81       	ldd	r24, Y+1	; 0x01
    3158:	28 2f       	mov	r18, r24
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	02 c0       	rjmp	.+4      	; 0x3166 <setMode+0x5f4>
    3162:	88 0f       	add	r24, r24
    3164:	99 1f       	adc	r25, r25
    3166:	2a 95       	dec	r18
    3168:	e2 f7       	brpl	.-8      	; 0x3162 <setMode+0x5f0>
    316a:	80 95       	com	r24
    316c:	84 23       	and	r24, r20
    316e:	8c 93       	st	X, r24

				CLEAR_BIT(PORTD, loc_pin);
    3170:	a2 e3       	ldi	r26, 0x32	; 50
    3172:	b0 e0       	ldi	r27, 0x00	; 0
    3174:	e2 e3       	ldi	r30, 0x32	; 50
    3176:	f0 e0       	ldi	r31, 0x00	; 0
    3178:	80 81       	ld	r24, Z
    317a:	48 2f       	mov	r20, r24
    317c:	89 81       	ldd	r24, Y+1	; 0x01
    317e:	28 2f       	mov	r18, r24
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	02 2e       	mov	r0, r18
    3188:	02 c0       	rjmp	.+4      	; 0x318e <setMode+0x61c>
    318a:	88 0f       	add	r24, r24
    318c:	99 1f       	adc	r25, r25
    318e:	0a 94       	dec	r0
    3190:	e2 f7       	brpl	.-8      	; 0x318a <setMode+0x618>
    3192:	80 95       	com	r24
    3194:	84 23       	and	r24, r20
    3196:	8c 93       	st	X, r24
    3198:	26 c0       	rjmp	.+76     	; 0x31e6 <setMode+0x674>

				break;

			case PIN_INPUT_PULL_UP:

				CLEAR_BIT(DDRD, loc_pin);
    319a:	a1 e3       	ldi	r26, 0x31	; 49
    319c:	b0 e0       	ldi	r27, 0x00	; 0
    319e:	e1 e3       	ldi	r30, 0x31	; 49
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	80 81       	ld	r24, Z
    31a4:	48 2f       	mov	r20, r24
    31a6:	89 81       	ldd	r24, Y+1	; 0x01
    31a8:	28 2f       	mov	r18, r24
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	81 e0       	ldi	r24, 0x01	; 1
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	02 c0       	rjmp	.+4      	; 0x31b6 <setMode+0x644>
    31b2:	88 0f       	add	r24, r24
    31b4:	99 1f       	adc	r25, r25
    31b6:	2a 95       	dec	r18
    31b8:	e2 f7       	brpl	.-8      	; 0x31b2 <setMode+0x640>
    31ba:	80 95       	com	r24
    31bc:	84 23       	and	r24, r20
    31be:	8c 93       	st	X, r24

				SET_BIT(PORTD, loc_pin);
    31c0:	a2 e3       	ldi	r26, 0x32	; 50
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	e2 e3       	ldi	r30, 0x32	; 50
    31c6:	f0 e0       	ldi	r31, 0x00	; 0
    31c8:	80 81       	ld	r24, Z
    31ca:	48 2f       	mov	r20, r24
    31cc:	89 81       	ldd	r24, Y+1	; 0x01
    31ce:	28 2f       	mov	r18, r24
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	02 2e       	mov	r0, r18
    31d8:	02 c0       	rjmp	.+4      	; 0x31de <setMode+0x66c>
    31da:	88 0f       	add	r24, r24
    31dc:	99 1f       	adc	r25, r25
    31de:	0a 94       	dec	r0
    31e0:	e2 f7       	brpl	.-8      	; 0x31da <setMode+0x668>
    31e2:	84 2b       	or	r24, r20
    31e4:	8c 93       	st	X, r24


		}
	}

	return return_errorStatus;
    31e6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    31e8:	2f 96       	adiw	r28, 0x0f	; 15
    31ea:	0f b6       	in	r0, 0x3f	; 63
    31ec:	f8 94       	cli
    31ee:	de bf       	out	0x3e, r29	; 62
    31f0:	0f be       	out	0x3f, r0	; 63
    31f2:	cd bf       	out	0x3d, r28	; 61
    31f4:	cf 91       	pop	r28
    31f6:	df 91       	pop	r29
    31f8:	08 95       	ret

000031fa <__mulsi3>:
    31fa:	62 9f       	mul	r22, r18
    31fc:	d0 01       	movw	r26, r0
    31fe:	73 9f       	mul	r23, r19
    3200:	f0 01       	movw	r30, r0
    3202:	82 9f       	mul	r24, r18
    3204:	e0 0d       	add	r30, r0
    3206:	f1 1d       	adc	r31, r1
    3208:	64 9f       	mul	r22, r20
    320a:	e0 0d       	add	r30, r0
    320c:	f1 1d       	adc	r31, r1
    320e:	92 9f       	mul	r25, r18
    3210:	f0 0d       	add	r31, r0
    3212:	83 9f       	mul	r24, r19
    3214:	f0 0d       	add	r31, r0
    3216:	74 9f       	mul	r23, r20
    3218:	f0 0d       	add	r31, r0
    321a:	65 9f       	mul	r22, r21
    321c:	f0 0d       	add	r31, r0
    321e:	99 27       	eor	r25, r25
    3220:	72 9f       	mul	r23, r18
    3222:	b0 0d       	add	r27, r0
    3224:	e1 1d       	adc	r30, r1
    3226:	f9 1f       	adc	r31, r25
    3228:	63 9f       	mul	r22, r19
    322a:	b0 0d       	add	r27, r0
    322c:	e1 1d       	adc	r30, r1
    322e:	f9 1f       	adc	r31, r25
    3230:	bd 01       	movw	r22, r26
    3232:	cf 01       	movw	r24, r30
    3234:	11 24       	eor	r1, r1
    3236:	08 95       	ret

00003238 <__udivmodsi4>:
    3238:	a1 e2       	ldi	r26, 0x21	; 33
    323a:	1a 2e       	mov	r1, r26
    323c:	aa 1b       	sub	r26, r26
    323e:	bb 1b       	sub	r27, r27
    3240:	fd 01       	movw	r30, r26
    3242:	0d c0       	rjmp	.+26     	; 0x325e <__udivmodsi4_ep>

00003244 <__udivmodsi4_loop>:
    3244:	aa 1f       	adc	r26, r26
    3246:	bb 1f       	adc	r27, r27
    3248:	ee 1f       	adc	r30, r30
    324a:	ff 1f       	adc	r31, r31
    324c:	a2 17       	cp	r26, r18
    324e:	b3 07       	cpc	r27, r19
    3250:	e4 07       	cpc	r30, r20
    3252:	f5 07       	cpc	r31, r21
    3254:	20 f0       	brcs	.+8      	; 0x325e <__udivmodsi4_ep>
    3256:	a2 1b       	sub	r26, r18
    3258:	b3 0b       	sbc	r27, r19
    325a:	e4 0b       	sbc	r30, r20
    325c:	f5 0b       	sbc	r31, r21

0000325e <__udivmodsi4_ep>:
    325e:	66 1f       	adc	r22, r22
    3260:	77 1f       	adc	r23, r23
    3262:	88 1f       	adc	r24, r24
    3264:	99 1f       	adc	r25, r25
    3266:	1a 94       	dec	r1
    3268:	69 f7       	brne	.-38     	; 0x3244 <__udivmodsi4_loop>
    326a:	60 95       	com	r22
    326c:	70 95       	com	r23
    326e:	80 95       	com	r24
    3270:	90 95       	com	r25
    3272:	9b 01       	movw	r18, r22
    3274:	ac 01       	movw	r20, r24
    3276:	bd 01       	movw	r22, r26
    3278:	cf 01       	movw	r24, r30
    327a:	08 95       	ret

0000327c <__prologue_saves__>:
    327c:	2f 92       	push	r2
    327e:	3f 92       	push	r3
    3280:	4f 92       	push	r4
    3282:	5f 92       	push	r5
    3284:	6f 92       	push	r6
    3286:	7f 92       	push	r7
    3288:	8f 92       	push	r8
    328a:	9f 92       	push	r9
    328c:	af 92       	push	r10
    328e:	bf 92       	push	r11
    3290:	cf 92       	push	r12
    3292:	df 92       	push	r13
    3294:	ef 92       	push	r14
    3296:	ff 92       	push	r15
    3298:	0f 93       	push	r16
    329a:	1f 93       	push	r17
    329c:	cf 93       	push	r28
    329e:	df 93       	push	r29
    32a0:	cd b7       	in	r28, 0x3d	; 61
    32a2:	de b7       	in	r29, 0x3e	; 62
    32a4:	ca 1b       	sub	r28, r26
    32a6:	db 0b       	sbc	r29, r27
    32a8:	0f b6       	in	r0, 0x3f	; 63
    32aa:	f8 94       	cli
    32ac:	de bf       	out	0x3e, r29	; 62
    32ae:	0f be       	out	0x3f, r0	; 63
    32b0:	cd bf       	out	0x3d, r28	; 61
    32b2:	09 94       	ijmp

000032b4 <__epilogue_restores__>:
    32b4:	2a 88       	ldd	r2, Y+18	; 0x12
    32b6:	39 88       	ldd	r3, Y+17	; 0x11
    32b8:	48 88       	ldd	r4, Y+16	; 0x10
    32ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    32bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    32be:	7d 84       	ldd	r7, Y+13	; 0x0d
    32c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    32c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    32c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    32c6:	b9 84       	ldd	r11, Y+9	; 0x09
    32c8:	c8 84       	ldd	r12, Y+8	; 0x08
    32ca:	df 80       	ldd	r13, Y+7	; 0x07
    32cc:	ee 80       	ldd	r14, Y+6	; 0x06
    32ce:	fd 80       	ldd	r15, Y+5	; 0x05
    32d0:	0c 81       	ldd	r16, Y+4	; 0x04
    32d2:	1b 81       	ldd	r17, Y+3	; 0x03
    32d4:	aa 81       	ldd	r26, Y+2	; 0x02
    32d6:	b9 81       	ldd	r27, Y+1	; 0x01
    32d8:	ce 0f       	add	r28, r30
    32da:	d1 1d       	adc	r29, r1
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	f8 94       	cli
    32e0:	de bf       	out	0x3e, r29	; 62
    32e2:	0f be       	out	0x3f, r0	; 63
    32e4:	cd bf       	out	0x3d, r28	; 61
    32e6:	ed 01       	movw	r28, r26
    32e8:	08 95       	ret

000032ea <itoa>:
    32ea:	fb 01       	movw	r30, r22
    32ec:	9f 01       	movw	r18, r30
    32ee:	e8 94       	clt
    32f0:	42 30       	cpi	r20, 0x02	; 2
    32f2:	c4 f0       	brlt	.+48     	; 0x3324 <itoa+0x3a>
    32f4:	45 32       	cpi	r20, 0x25	; 37
    32f6:	b4 f4       	brge	.+44     	; 0x3324 <itoa+0x3a>
    32f8:	4a 30       	cpi	r20, 0x0A	; 10
    32fa:	29 f4       	brne	.+10     	; 0x3306 <itoa+0x1c>
    32fc:	97 fb       	bst	r25, 7
    32fe:	1e f4       	brtc	.+6      	; 0x3306 <itoa+0x1c>
    3300:	90 95       	com	r25
    3302:	81 95       	neg	r24
    3304:	9f 4f       	sbci	r25, 0xFF	; 255
    3306:	64 2f       	mov	r22, r20
    3308:	77 27       	eor	r23, r23
    330a:	0e 94 a6 19 	call	0x334c	; 0x334c <__udivmodhi4>
    330e:	80 5d       	subi	r24, 0xD0	; 208
    3310:	8a 33       	cpi	r24, 0x3A	; 58
    3312:	0c f0       	brlt	.+2      	; 0x3316 <itoa+0x2c>
    3314:	89 5d       	subi	r24, 0xD9	; 217
    3316:	81 93       	st	Z+, r24
    3318:	cb 01       	movw	r24, r22
    331a:	00 97       	sbiw	r24, 0x00	; 0
    331c:	a1 f7       	brne	.-24     	; 0x3306 <itoa+0x1c>
    331e:	16 f4       	brtc	.+4      	; 0x3324 <itoa+0x3a>
    3320:	5d e2       	ldi	r21, 0x2D	; 45
    3322:	51 93       	st	Z+, r21
    3324:	10 82       	st	Z, r1
    3326:	c9 01       	movw	r24, r18
    3328:	0c 94 96 19 	jmp	0x332c	; 0x332c <strrev>

0000332c <strrev>:
    332c:	dc 01       	movw	r26, r24
    332e:	fc 01       	movw	r30, r24
    3330:	67 2f       	mov	r22, r23
    3332:	71 91       	ld	r23, Z+
    3334:	77 23       	and	r23, r23
    3336:	e1 f7       	brne	.-8      	; 0x3330 <strrev+0x4>
    3338:	32 97       	sbiw	r30, 0x02	; 2
    333a:	04 c0       	rjmp	.+8      	; 0x3344 <strrev+0x18>
    333c:	7c 91       	ld	r23, X
    333e:	6d 93       	st	X+, r22
    3340:	70 83       	st	Z, r23
    3342:	62 91       	ld	r22, -Z
    3344:	ae 17       	cp	r26, r30
    3346:	bf 07       	cpc	r27, r31
    3348:	c8 f3       	brcs	.-14     	; 0x333c <strrev+0x10>
    334a:	08 95       	ret

0000334c <__udivmodhi4>:
    334c:	aa 1b       	sub	r26, r26
    334e:	bb 1b       	sub	r27, r27
    3350:	51 e1       	ldi	r21, 0x11	; 17
    3352:	07 c0       	rjmp	.+14     	; 0x3362 <__udivmodhi4_ep>

00003354 <__udivmodhi4_loop>:
    3354:	aa 1f       	adc	r26, r26
    3356:	bb 1f       	adc	r27, r27
    3358:	a6 17       	cp	r26, r22
    335a:	b7 07       	cpc	r27, r23
    335c:	10 f0       	brcs	.+4      	; 0x3362 <__udivmodhi4_ep>
    335e:	a6 1b       	sub	r26, r22
    3360:	b7 0b       	sbc	r27, r23

00003362 <__udivmodhi4_ep>:
    3362:	88 1f       	adc	r24, r24
    3364:	99 1f       	adc	r25, r25
    3366:	5a 95       	dec	r21
    3368:	a9 f7       	brne	.-22     	; 0x3354 <__udivmodhi4_loop>
    336a:	80 95       	com	r24
    336c:	90 95       	com	r25
    336e:	bc 01       	movw	r22, r24
    3370:	cd 01       	movw	r24, r26
    3372:	08 95       	ret

00003374 <_exit>:
    3374:	f8 94       	cli

00003376 <__stop_program>:
    3376:	ff cf       	rjmp	.-2      	; 0x3376 <__stop_program>
