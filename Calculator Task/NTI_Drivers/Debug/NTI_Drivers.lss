
NTI_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004522  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00004522  000045b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000a6  008000a6  000045fc  2**0
                  ALLOC
  3 .stab         000043e0  00000000  00000000  000045fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f69  00000000  00000000  000089dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000a945  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000aaa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000ac34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000cc79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000dd7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ecfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000ee7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000f13e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f9cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__vector_1>
       8:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__vector_2>
       c:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__vector_10>
      2c:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 39 13 	jmp	0x2672	; 0x2672 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <main>
      8a:	0c 94 8f 22 	jmp	0x451e	; 0x451e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 58 22 	jmp	0x44b0	; 0x44b0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e8       	ldi	r26, 0x86	; 134
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 74 22 	jmp	0x44e8	; 0x44e8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 64 22 	jmp	0x44c8	; 0x44c8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 80 22 	jmp	0x4500	; 0x4500 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 64 22 	jmp	0x44c8	; 0x44c8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 80 22 	jmp	0x4500	; 0x4500 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 58 22 	jmp	0x44b0	; 0x44b0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e8       	ldi	r24, 0x86	; 134
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 74 22 	jmp	0x44e8	; 0x44e8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 60 22 	jmp	0x44c0	; 0x44c0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e8       	ldi	r22, 0x86	; 134
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 64 22 	jmp	0x44c8	; 0x44c8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 80 22 	jmp	0x4500	; 0x4500 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 64 22 	jmp	0x44c8	; 0x44c8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 80 22 	jmp	0x4500	; 0x4500 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 64 22 	jmp	0x44c8	; 0x44c8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 80 22 	jmp	0x4500	; 0x4500 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 68 22 	jmp	0x44d0	; 0x44d0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 84 22 	jmp	0x4508	; 0x4508 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TIMER0_Init>:
 * 3-Set Interrupt State
 * 4-Set Prescalar
 */

void TIMER0_Init()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
#endif

	//============================FAST PWM MODE
#elif TIMER0_MODE==TIMER_FAST_PWM_MODE
	SET_BIT(TCCR0,3);
     ca6:	a3 e5       	ldi	r26, 0x53	; 83
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e3 e5       	ldi	r30, 0x53	; 83
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	88 60       	ori	r24, 0x08	; 8
     cb2:	8c 93       	st	X, r24
	SET_BIT(TCCR0,6);
     cb4:	a3 e5       	ldi	r26, 0x53	; 83
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e3 e5       	ldi	r30, 0x53	; 83
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 64       	ori	r24, 0x40	; 64
     cc0:	8c 93       	st	X, r24
		//Set PWM Wave on OC0
	#if TIMER0_FAST_PWM_WAVE_MODE==FAST_PWM_OC0_DISCONNECTED
		CLR_BIT(TCCR0,4);
		CLR_BIT(TCCR0,5);
	#elif TIMER0_FAST_PWM_WAVE_MODE==FAST_PWM_OC0_NON_INVERTING
		CLR_BIT(TCCR0,4);
     cc2:	a3 e5       	ldi	r26, 0x53	; 83
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e3 e5       	ldi	r30, 0x53	; 83
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7e       	andi	r24, 0xEF	; 239
     cce:	8c 93       	st	X, r24
		SET_BIT(TCCR0,5);
     cd0:	a3 e5       	ldi	r26, 0x53	; 83
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e3 e5       	ldi	r30, 0x53	; 83
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	80 62       	ori	r24, 0x20	; 32
     cdc:	8c 93       	st	X, r24
#elif TIMER0_CLOCK_SOURCE==PRESCALAR_OVER_64
	SET_BIT(TCCR0,0);
	SET_BIT(TCCR0,1);
	CLR_BIT(TCCR0,2);
#elif TIMER0_CLOCK_SOURCE==PRESCALAR_OVER_256
	CLR_BIT(TCCR0,0);
     cde:	a3 e5       	ldi	r26, 0x53	; 83
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e3 e5       	ldi	r30, 0x53	; 83
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8e 7f       	andi	r24, 0xFE	; 254
     cea:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,1);
     cec:	a3 e5       	ldi	r26, 0x53	; 83
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e3 e5       	ldi	r30, 0x53	; 83
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8d 7f       	andi	r24, 0xFD	; 253
     cf8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,2);
     cfa:	a3 e5       	ldi	r26, 0x53	; 83
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e3 e5       	ldi	r30, 0x53	; 83
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	84 60       	ori	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
	SET_BIT(TCCR0,0);
	SET_BIT(TCCR0,1);
	SET_BIT(TCCR0,2);
#endif

}
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <TIMER0_SetPreload>:

void TIMER0_SetPreload(u8 Copy_u8Preload)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	0f 92       	push	r0
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	89 83       	std	Y+1, r24	; 0x01
	TCCR0=Copy_u8Preload;
     d1a:	e3 e5       	ldi	r30, 0x53	; 83
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	80 83       	st	Z, r24

}
     d22:	0f 90       	pop	r0
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <TIMER0_SetCTC>:

void TIMER0_SetCTC(u8 Copy_u8OCR)
{
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	0f 92       	push	r0
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8OCR;
     d36:	ec e5       	ldi	r30, 0x5C	; 92
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	80 83       	st	Z, r24
}
     d3e:	0f 90       	pop	r0
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <TIMER0_OVERFLOW_CALLBACK>:


void TIMER0_OVERFLOW_CALLBACK(void(*Ptr_OverflowApp)(void))
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <TIMER0_OVERFLOW_CALLBACK+0x6>
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	9a 83       	std	Y+2, r25	; 0x02
     d52:	89 83       	std	Y+1, r24	; 0x01
	if(Ptr_OverflowApp!=NULL)
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	9a 81       	ldd	r25, Y+2	; 0x02
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	61 f0       	breq	.+24     	; 0xd74 <TIMER0_OVERFLOW_CALLBACK+0x2e>
	{
		if(Glob_OverflowISR_Ptr==NULL)
     d5c:	80 91 a6 00 	lds	r24, 0x00A6
     d60:	90 91 a7 00 	lds	r25, 0x00A7
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	31 f4       	brne	.+12     	; 0xd74 <TIMER0_OVERFLOW_CALLBACK+0x2e>
		{
			Glob_OverflowISR_Ptr=Ptr_OverflowApp;
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	9a 81       	ldd	r25, Y+2	; 0x02
     d6c:	90 93 a7 00 	sts	0x00A7, r25
     d70:	80 93 a6 00 	sts	0x00A6, r24
		}
	}
}
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <TIMER0_CTC_CALLBACK>:


void TIMER0_CTC_CALLBACK(void(*Ptr_CTCApp)(void))
{
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	00 d0       	rcall	.+0      	; 0xd84 <TIMER0_CTC_CALLBACK+0x6>
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	9a 83       	std	Y+2, r25	; 0x02
     d8a:	89 83       	std	Y+1, r24	; 0x01
	if(Ptr_CTCApp !=NULL)
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	9a 81       	ldd	r25, Y+2	; 0x02
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	61 f0       	breq	.+24     	; 0xdac <TIMER0_CTC_CALLBACK+0x2e>
	{
		if(Glob_CTC_ISR_Ptr==NULL)
     d94:	80 91 a8 00 	lds	r24, 0x00A8
     d98:	90 91 a9 00 	lds	r25, 0x00A9
     d9c:	00 97       	sbiw	r24, 0x00	; 0
     d9e:	31 f4       	brne	.+12     	; 0xdac <TIMER0_CTC_CALLBACK+0x2e>
		{
			Glob_CTC_ISR_Ptr=Ptr_CTCApp;
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	9a 81       	ldd	r25, Y+2	; 0x02
     da4:	90 93 a9 00 	sts	0x00A9, r25
     da8:	80 93 a8 00 	sts	0x00A8, r24
		}
	}
}
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <__vector_10>:


//CTC ISR
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     db6:	1f 92       	push	r1
     db8:	0f 92       	push	r0
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	0f 92       	push	r0
     dbe:	11 24       	eor	r1, r1
     dc0:	2f 93       	push	r18
     dc2:	3f 93       	push	r19
     dc4:	4f 93       	push	r20
     dc6:	5f 93       	push	r21
     dc8:	6f 93       	push	r22
     dca:	7f 93       	push	r23
     dcc:	8f 93       	push	r24
     dce:	9f 93       	push	r25
     dd0:	af 93       	push	r26
     dd2:	bf 93       	push	r27
     dd4:	ef 93       	push	r30
     dd6:	ff 93       	push	r31
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
	if(Glob_CTC_ISR_Ptr!=NULL)
     de0:	80 91 a8 00 	lds	r24, 0x00A8
     de4:	90 91 a9 00 	lds	r25, 0x00A9
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	29 f0       	breq	.+10     	; 0xdf6 <__vector_10+0x40>
	{
		Glob_CTC_ISR_Ptr();
     dec:	e0 91 a8 00 	lds	r30, 0x00A8
     df0:	f0 91 a9 00 	lds	r31, 0x00A9
     df4:	09 95       	icall
	}
}
     df6:	cf 91       	pop	r28
     df8:	df 91       	pop	r29
     dfa:	ff 91       	pop	r31
     dfc:	ef 91       	pop	r30
     dfe:	bf 91       	pop	r27
     e00:	af 91       	pop	r26
     e02:	9f 91       	pop	r25
     e04:	8f 91       	pop	r24
     e06:	7f 91       	pop	r23
     e08:	6f 91       	pop	r22
     e0a:	5f 91       	pop	r21
     e0c:	4f 91       	pop	r20
     e0e:	3f 91       	pop	r19
     e10:	2f 91       	pop	r18
     e12:	0f 90       	pop	r0
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	0f 90       	pop	r0
     e18:	1f 90       	pop	r1
     e1a:	18 95       	reti

00000e1c <__vector_11>:

//Overflow TIMER0 ISR
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     e1c:	1f 92       	push	r1
     e1e:	0f 92       	push	r0
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	0f 92       	push	r0
     e24:	11 24       	eor	r1, r1
     e26:	2f 93       	push	r18
     e28:	3f 93       	push	r19
     e2a:	4f 93       	push	r20
     e2c:	5f 93       	push	r21
     e2e:	6f 93       	push	r22
     e30:	7f 93       	push	r23
     e32:	8f 93       	push	r24
     e34:	9f 93       	push	r25
     e36:	af 93       	push	r26
     e38:	bf 93       	push	r27
     e3a:	ef 93       	push	r30
     e3c:	ff 93       	push	r31
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
	if(Glob_OverflowISR_Ptr!=NULL)
     e46:	80 91 a6 00 	lds	r24, 0x00A6
     e4a:	90 91 a7 00 	lds	r25, 0x00A7
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	29 f0       	breq	.+10     	; 0xe5c <__vector_11+0x40>
	{
		Glob_OverflowISR_Ptr();
     e52:	e0 91 a6 00 	lds	r30, 0x00A6
     e56:	f0 91 a7 00 	lds	r31, 0x00A7
     e5a:	09 95       	icall
	}
}
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	ff 91       	pop	r31
     e62:	ef 91       	pop	r30
     e64:	bf 91       	pop	r27
     e66:	af 91       	pop	r26
     e68:	9f 91       	pop	r25
     e6a:	8f 91       	pop	r24
     e6c:	7f 91       	pop	r23
     e6e:	6f 91       	pop	r22
     e70:	5f 91       	pop	r21
     e72:	4f 91       	pop	r20
     e74:	3f 91       	pop	r19
     e76:	2f 91       	pop	r18
     e78:	0f 90       	pop	r0
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	0f 90       	pop	r0
     e7e:	1f 90       	pop	r1
     e80:	18 95       	reti

00000e82 <Pwm0_Init>:



void Pwm0_Init  (void)
{
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	Port_enuSetPinDirection(11,PORT_u8OUTPUT);
     e8a:	8b e0       	ldi	r24, 0x0B	; 11
     e8c:	61 e0       	ldi	r22, 0x01	; 1
     e8e:	0e 94 36 08 	call	0x106c	; 0x106c <Port_enuSetPinDirection>

	#if			TIMER0_MODE		==		TIMER_FAST_PWM_MODE
	SET_BIT(TCCR0,3); SET_BIT(TCCR0,6);
     e92:	a3 e5       	ldi	r26, 0x53	; 83
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e3 e5       	ldi	r30, 0x53	; 83
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	88 60       	ori	r24, 0x08	; 8
     e9e:	8c 93       	st	X, r24
     ea0:	a3 e5       	ldi	r26, 0x53	; 83
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e3 e5       	ldi	r30, 0x53	; 83
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	80 64       	ori	r24, 0x40	; 64
     eac:	8c 93       	st	X, r24
	#elif		TIMER0_MODE		==		TIMER_PWM_PHASE_CORRECT_MODE
	CLR_BIT(TCCR0,3); SET_BIT(TCCR0,6);
	#endif

	#if			TIMER0_FAST_PWM_WAVE_MODE		==		FAST_PWM_OC0_NON_INVERTING
	SET_BIT(TCCR0,5); CLR_BIT(TCCR0,4);
     eae:	a3 e5       	ldi	r26, 0x53	; 83
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e3 e5       	ldi	r30, 0x53	; 83
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	80 62       	ori	r24, 0x20	; 32
     eba:	8c 93       	st	X, r24
     ebc:	a3 e5       	ldi	r26, 0x53	; 83
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e3 e5       	ldi	r30, 0x53	; 83
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	8f 7e       	andi	r24, 0xEF	; 239
     ec8:	8c 93       	st	X, r24
	#elif		TIMER0_FAST_PWM_WAVE_MODE		==		FAST_PWM_OC0_INVERTING
	SET_BIT(TCCR0,5); SET_BIT(TCCR0,4);
	#endif

}
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <Pwm0_SetDutyCycle>:

void Pwm0_SetDutyCycle		(u8 Local_u8_DesiredDutyCycle)
{
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	0f 92       	push	r0
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	89 83       	std	Y+1, r24	; 0x01
	#if			TIMER0_FAST_PWM_WAVE_MODE		==		FAST_PWM_OC0_NON_INVERTING

	if(Local_u8_DesiredDutyCycle == 0)
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	88 23       	and	r24, r24
     ee0:	51 f5       	brne	.+84     	; 0xf36 <Pwm0_SetDutyCycle+0x66>
	{
		SET_BIT(TCCR0,5); SET_BIT(TCCR0,4);
     ee2:	a3 e5       	ldi	r26, 0x53	; 83
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e3 e5       	ldi	r30, 0x53	; 83
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	80 62       	ori	r24, 0x20	; 32
     eee:	8c 93       	st	X, r24
     ef0:	a3 e5       	ldi	r26, 0x53	; 83
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e3 e5       	ldi	r30, 0x53	; 83
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	80 61       	ori	r24, 0x10	; 16
     efc:	8c 93       	st	X, r24
		OCR0 = (255 - ((Local_u8_DesiredDutyCycle *255)/100));
     efe:	ec e5       	ldi	r30, 0x5C	; 92
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	48 2f       	mov	r20, r24
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	ca 01       	movw	r24, r20
     f0a:	9c 01       	movw	r18, r24
     f0c:	22 0f       	add	r18, r18
     f0e:	33 1f       	adc	r19, r19
     f10:	c9 01       	movw	r24, r18
     f12:	96 95       	lsr	r25
     f14:	98 2f       	mov	r25, r24
     f16:	88 27       	eor	r24, r24
     f18:	97 95       	ror	r25
     f1a:	87 95       	ror	r24
     f1c:	82 1b       	sub	r24, r18
     f1e:	93 0b       	sbc	r25, r19
     f20:	84 0f       	add	r24, r20
     f22:	95 1f       	adc	r25, r21
     f24:	24 e6       	ldi	r18, 0x64	; 100
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	b9 01       	movw	r22, r18
     f2a:	0e 94 23 22 	call	0x4446	; 0x4446 <__divmodhi4>
     f2e:	cb 01       	movw	r24, r22
     f30:	80 95       	com	r24
     f32:	80 83       	st	Z, r24
     f34:	28 c0       	rjmp	.+80     	; 0xf86 <Pwm0_SetDutyCycle+0xb6>
	}
	else
	{
		SET_BIT(TCCR0,5); CLR_BIT(TCCR0,4);
     f36:	a3 e5       	ldi	r26, 0x53	; 83
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e3 e5       	ldi	r30, 0x53	; 83
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	80 62       	ori	r24, 0x20	; 32
     f42:	8c 93       	st	X, r24
     f44:	a3 e5       	ldi	r26, 0x53	; 83
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e3 e5       	ldi	r30, 0x53	; 83
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8f 7e       	andi	r24, 0xEF	; 239
     f50:	8c 93       	st	X, r24
		OCR0 = (((Local_u8_DesiredDutyCycle * 25) / 100) - 1);
     f52:	ec e5       	ldi	r30, 0x5C	; 92
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	c9 01       	movw	r24, r18
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	82 0f       	add	r24, r18
     f64:	93 1f       	adc	r25, r19
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	82 0f       	add	r24, r18
     f74:	93 1f       	adc	r25, r19
     f76:	24 e6       	ldi	r18, 0x64	; 100
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	b9 01       	movw	r22, r18
     f7c:	0e 94 23 22 	call	0x4446	; 0x4446 <__divmodhi4>
     f80:	cb 01       	movw	r24, r22
     f82:	81 50       	subi	r24, 0x01	; 1
     f84:	80 83       	st	Z, r24
		SET_BIT(TCCR0,5); SET_BIT(TCCR0,4);
		OCR0 = (255 - ((Local_u8_DesiredDutyCycle *256)/100));
	}
	#endif

}
     f86:	0f 90       	pop	r0
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <Timer0_Start>:

void Timer0_Start			(void)
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
	#elif		TIMER0_CLOCK_SOURCE	==		PRESCALAR_OVER_8
	CLR_BIT(TCCR0,2); SET_BIT(TCCR0,1);	CLR_BIT(TCCR0,0);
	#elif		TIMER0_CLOCK_SOURCE	==		PRESCALAR_OVER_64
	CLR_BIT(TCCR0,2); SET_BIT(TCCR0,1);	SET_BIT(TCCR0,0);
	#elif		TIMER0_CLOCK_SOURCE	==		PRESCALAR_OVER_256
	SET_BIT(TCCR0,2); CLR_BIT(TCCR0,1);	SET_BIT(TCCR0,0);
     f96:	a3 e5       	ldi	r26, 0x53	; 83
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e3 e5       	ldi	r30, 0x53	; 83
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	84 60       	ori	r24, 0x04	; 4
     fa2:	8c 93       	st	X, r24
     fa4:	a3 e5       	ldi	r26, 0x53	; 83
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e3 e5       	ldi	r30, 0x53	; 83
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	8d 7f       	andi	r24, 0xFD	; 253
     fb0:	8c 93       	st	X, r24
     fb2:	a3 e5       	ldi	r26, 0x53	; 83
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e3 e5       	ldi	r30, 0x53	; 83
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	81 60       	ori	r24, 0x01	; 1
     fbe:	8c 93       	st	X, r24
	#elif		TIMER0_CLOCK_SOURCE	==		PRESCALAR_OVER_1024
	SET_BIT(TCCR0,2); CLR_BIT(TCCR0,1);	SET_BIT(TCCR0,0);
	#endif
}
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <Timer0_Stop>:

void Timer0_Stop(void)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,2); CLR_BIT(TCCR0,1);	CLR_BIT(TCCR0,0);
     fce:	a3 e5       	ldi	r26, 0x53	; 83
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e3 e5       	ldi	r30, 0x53	; 83
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	8b 7f       	andi	r24, 0xFB	; 251
     fda:	8c 93       	st	X, r24
     fdc:	a3 e5       	ldi	r26, 0x53	; 83
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e3 e5       	ldi	r30, 0x53	; 83
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8d 7f       	andi	r24, 0xFD	; 253
     fe8:	8c 93       	st	X, r24
     fea:	a3 e5       	ldi	r26, 0x53	; 83
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e3 e5       	ldi	r30, 0x53	; 83
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	8e 7f       	andi	r24, 0xFE	; 254
     ff6:	8c 93       	st	X, r24
}
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <Pwm0_Start>:

void Pwm0_Start(void)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
	Timer0_Start();
    1006:	0e 94 c7 07 	call	0xf8e	; 0xf8e <Timer0_Start>
}
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <Pwm0_Stop>:

void Pwm0_Stop(void)
{
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
	Timer0_Stop();
    1018:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <Timer0_Stop>
}
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <Port_Init>:
#include"PORT.h"
#include"PORT_cfg.h"


void Port_Init(void)
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
#define PORT_u8INPUT_FLOATING	0

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		0

	DDRA = CONC(PORT_u8MODE_PIN7,PORT_u8MODE_PIN6,PORT_u8MODE_PIN5,PORT_u8MODE_PIN4,PORT_u8MODE_PIN3,PORT_u8MODE_PIN2,PORT_u8MODE_PIN1,PORT_u8MODE_PIN0);
    102a:	ea e3       	ldi	r30, 0x3A	; 58
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	8e e0       	ldi	r24, 0x0E	; 14
    1030:	80 83       	st	Z, r24
	DDRB = CONC(PORT_u8MODE_PIN15,PORT_u8MODE_PIN14,PORT_u8MODE_PIN13,PORT_u8MODE_PIN12,PORT_u8MODE_PIN11,PORT_u8MODE_PIN10,PORT_u8MODE_PIN9,PORT_u8MODE_PIN8);
    1032:	e7 e3       	ldi	r30, 0x37	; 55
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	8f e0       	ldi	r24, 0x0F	; 15
    1038:	80 83       	st	Z, r24
	DDRC = CONC(PORT_u8MODE_PIN23,PORT_u8MODE_PIN22,PORT_u8MODE_PIN21,PORT_u8MODE_PIN20,PORT_u8MODE_PIN19,PORT_u8MODE_PIN18,PORT_u8MODE_PIN17,PORT_u8MODE_PIN16);
    103a:	e4 e3       	ldi	r30, 0x34	; 52
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	10 82       	st	Z, r1
	DDRD = CONC(PORT_u8MODE_PIN31,PORT_u8MODE_PIN30,PORT_u8MODE_PIN29,PORT_u8MODE_PIN28,PORT_u8MODE_PIN27,PORT_u8MODE_PIN26,PORT_u8MODE_PIN25,PORT_u8MODE_PIN24);
    1040:	e1 e3       	ldi	r30, 0x31	; 49
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	84 e0       	ldi	r24, 0x04	; 4
    1046:	80 83       	st	Z, r24
#define PORT_u8OUTPUT_LOW		0

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		1

	PORTA = CONC(PORT_u8MODE_PIN7,PORT_u8MODE_PIN6,PORT_u8MODE_PIN5,PORT_u8MODE_PIN4,PORT_u8MODE_PIN3,PORT_u8MODE_PIN2,PORT_u8MODE_PIN1,PORT_u8MODE_PIN0);
    1048:	eb e3       	ldi	r30, 0x3B	; 59
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	8e e0       	ldi	r24, 0x0E	; 14
    104e:	80 83       	st	Z, r24
	PORTB = CONC(PORT_u8MODE_PIN15,PORT_u8MODE_PIN14,PORT_u8MODE_PIN13,PORT_u8MODE_PIN12,PORT_u8MODE_PIN11,PORT_u8MODE_PIN10,PORT_u8MODE_PIN9,PORT_u8MODE_PIN8);
    1050:	e8 e3       	ldi	r30, 0x38	; 56
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	8f e0       	ldi	r24, 0x0F	; 15
    1056:	80 83       	st	Z, r24
	PORTC = CONC(PORT_u8MODE_PIN23,PORT_u8MODE_PIN22,PORT_u8MODE_PIN21,PORT_u8MODE_PIN20,PORT_u8MODE_PIN19,PORT_u8MODE_PIN18,PORT_u8MODE_PIN17,PORT_u8MODE_PIN16);
    1058:	e5 e3       	ldi	r30, 0x35	; 53
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	10 82       	st	Z, r1
	PORTD = CONC(PORT_u8MODE_PIN31,PORT_u8MODE_PIN30,PORT_u8MODE_PIN29,PORT_u8MODE_PIN28,PORT_u8MODE_PIN27,PORT_u8MODE_PIN26,PORT_u8MODE_PIN25,PORT_u8MODE_PIN24);
    105e:	e2 e3       	ldi	r30, 0x32	; 50
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	84 e0       	ldi	r24, 0x04	; 4
    1064:	80 83       	st	Z, r24
//re-defining again to their initial
#define PORT_u8OUTPUT_LOW 		0
#define PORT_u8INPUT_FLOATING 	2
#define PORT_u8INPUT_PULLUP 	3

}
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	08 95       	ret

0000106c <Port_enuSetPinDirection>:

Port_EnumErrorStatus Port_enuSetPinDirection(u8 Copy_u8PinNum , u8 Copy_u8PinDirection) {
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	27 97       	sbiw	r28, 0x07	; 7
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	8c 83       	std	Y+4, r24	; 0x04
    1082:	6d 83       	std	Y+5, r22	; 0x05

	Port_EnumErrorStatus LOC_EnumReturn = Ok;
    1084:	1b 82       	std	Y+3, r1	; 0x03
	u8 LOC_u8Port;
	u8 LOC_u8Pin;


	if (Copy_u8PinNum>PORT_u8TOTALNUMBER_OF_PINS) {
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	80 32       	cpi	r24, 0x20	; 32
    108a:	18 f0       	brcs	.+6      	; 0x1092 <Port_enuSetPinDirection+0x26>
		LOC_EnumReturn = PinError;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	8b 83       	std	Y+3, r24	; 0x03
    1090:	df c0       	rjmp	.+446    	; 0x1250 <Port_enuSetPinDirection+0x1e4>
			}

	 else if (Copy_u8PinDirection>PORT_u8NUMBER_OF_DIRECTION) {
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	82 30       	cpi	r24, 0x02	; 2
    1096:	18 f0       	brcs	.+6      	; 0x109e <Port_enuSetPinDirection+0x32>
		 LOC_EnumReturn = ModeError;
    1098:	82 e0       	ldi	r24, 0x02	; 2
    109a:	8b 83       	std	Y+3, r24	; 0x03
    109c:	d9 c0       	rjmp	.+434    	; 0x1250 <Port_enuSetPinDirection+0x1e4>
	        }

	 else {
		 //no error so the input is correct so we proceed//
		LOC_u8Port = Copy_u8PinNum / PORT_u8REGISTER_SIZE; //to know which port
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	86 95       	lsr	r24
    10a2:	86 95       	lsr	r24
    10a4:	86 95       	lsr	r24
    10a6:	8a 83       	std	Y+2, r24	; 0x02
		LOC_u8Pin = Copy_u8PinNum % PORT_u8REGISTER_SIZE; //to know which pin
    10a8:	8c 81       	ldd	r24, Y+4	; 0x04
    10aa:	87 70       	andi	r24, 0x07	; 7
    10ac:	89 83       	std	Y+1, r24	; 0x01
//if Pin direction is not set, it's cleared
		switch (LOC_u8Port) {
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	3f 83       	std	Y+7, r19	; 0x07
    10b6:	2e 83       	std	Y+6, r18	; 0x06
    10b8:	8e 81       	ldd	r24, Y+6	; 0x06
    10ba:	9f 81       	ldd	r25, Y+7	; 0x07
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	91 05       	cpc	r25, r1
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <Port_enuSetPinDirection+0x58>
    10c2:	43 c0       	rjmp	.+134    	; 0x114a <Port_enuSetPinDirection+0xde>
    10c4:	2e 81       	ldd	r18, Y+6	; 0x06
    10c6:	3f 81       	ldd	r19, Y+7	; 0x07
    10c8:	22 30       	cpi	r18, 0x02	; 2
    10ca:	31 05       	cpc	r19, r1
    10cc:	2c f4       	brge	.+10     	; 0x10d8 <Port_enuSetPinDirection+0x6c>
    10ce:	8e 81       	ldd	r24, Y+6	; 0x06
    10d0:	9f 81       	ldd	r25, Y+7	; 0x07
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	71 f0       	breq	.+28     	; 0x10f2 <Port_enuSetPinDirection+0x86>
    10d6:	bc c0       	rjmp	.+376    	; 0x1250 <Port_enuSetPinDirection+0x1e4>
    10d8:	2e 81       	ldd	r18, Y+6	; 0x06
    10da:	3f 81       	ldd	r19, Y+7	; 0x07
    10dc:	22 30       	cpi	r18, 0x02	; 2
    10de:	31 05       	cpc	r19, r1
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <Port_enuSetPinDirection+0x78>
    10e2:	5f c0       	rjmp	.+190    	; 0x11a2 <Port_enuSetPinDirection+0x136>
    10e4:	8e 81       	ldd	r24, Y+6	; 0x06
    10e6:	9f 81       	ldd	r25, Y+7	; 0x07
    10e8:	83 30       	cpi	r24, 0x03	; 3
    10ea:	91 05       	cpc	r25, r1
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <Port_enuSetPinDirection+0x84>
    10ee:	85 c0       	rjmp	.+266    	; 0x11fa <Port_enuSetPinDirection+0x18e>
    10f0:	af c0       	rjmp	.+350    	; 0x1250 <Port_enuSetPinDirection+0x1e4>
		case PORT_u8PORTA:

			if (Copy_u8PinDirection == PORT_u8OUTPUT) {
    10f2:	8d 81       	ldd	r24, Y+5	; 0x05
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	a1 f4       	brne	.+40     	; 0x1120 <Port_enuSetPinDirection+0xb4>
				SET_BIT(DDRA, LOC_u8Pin);
    10f8:	aa e3       	ldi	r26, 0x3A	; 58
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	ea e3       	ldi	r30, 0x3A	; 58
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	48 2f       	mov	r20, r24
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 2e       	mov	r0, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <Port_enuSetPinDirection+0xaa>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	0a 94       	dec	r0
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <Port_enuSetPinDirection+0xa6>
    111a:	84 2b       	or	r24, r20
    111c:	8c 93       	st	X, r24
    111e:	98 c0       	rjmp	.+304    	; 0x1250 <Port_enuSetPinDirection+0x1e4>
			} else {
				CLR_BIT(DDRA, LOC_u8Pin);
    1120:	aa e3       	ldi	r26, 0x3A	; 58
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	ea e3       	ldi	r30, 0x3A	; 58
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <Port_enuSetPinDirection+0xd2>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <Port_enuSetPinDirection+0xce>
    1142:	80 95       	com	r24
    1144:	84 23       	and	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	83 c0       	rjmp	.+262    	; 0x1250 <Port_enuSetPinDirection+0x1e4>
			}
			break;
		case PORT_u8PORTB:


			if (Copy_u8PinDirection == PORT_u8OUTPUT) {
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	a1 f4       	brne	.+40     	; 0x1178 <Port_enuSetPinDirection+0x10c>
				SET_BIT(DDRB, LOC_u8Pin);
    1150:	a7 e3       	ldi	r26, 0x37	; 55
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e7 e3       	ldi	r30, 0x37	; 55
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <Port_enuSetPinDirection+0x102>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <Port_enuSetPinDirection+0xfe>
    1172:	84 2b       	or	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	6c c0       	rjmp	.+216    	; 0x1250 <Port_enuSetPinDirection+0x1e4>
			} else {
				CLR_BIT(DDRB, LOC_u8Pin);
    1178:	a7 e3       	ldi	r26, 0x37	; 55
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e7 e3       	ldi	r30, 0x37	; 55
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <Port_enuSetPinDirection+0x12a>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <Port_enuSetPinDirection+0x126>
    119a:	80 95       	com	r24
    119c:	84 23       	and	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	57 c0       	rjmp	.+174    	; 0x1250 <Port_enuSetPinDirection+0x1e4>

			break;

		case PORT_u8PORTC:

			if (Copy_u8PinDirection == PORT_u8OUTPUT) {
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	a1 f4       	brne	.+40     	; 0x11d0 <Port_enuSetPinDirection+0x164>
				SET_BIT(DDRC, LOC_u8Pin);
    11a8:	a4 e3       	ldi	r26, 0x34	; 52
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e4 e3       	ldi	r30, 0x34	; 52
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <Port_enuSetPinDirection+0x15a>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <Port_enuSetPinDirection+0x156>
    11ca:	84 2b       	or	r24, r20
    11cc:	8c 93       	st	X, r24
    11ce:	40 c0       	rjmp	.+128    	; 0x1250 <Port_enuSetPinDirection+0x1e4>
			} else {
				CLR_BIT(DDRC, LOC_u8Pin);
    11d0:	a4 e3       	ldi	r26, 0x34	; 52
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e4 e3       	ldi	r30, 0x34	; 52
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <Port_enuSetPinDirection+0x182>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <Port_enuSetPinDirection+0x17e>
    11f2:	80 95       	com	r24
    11f4:	84 23       	and	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	2b c0       	rjmp	.+86     	; 0x1250 <Port_enuSetPinDirection+0x1e4>

			break;

		case PORT_u8PORTD:

			if (Copy_u8PinDirection == PORT_u8OUTPUT) {
    11fa:	8d 81       	ldd	r24, Y+5	; 0x05
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	a1 f4       	brne	.+40     	; 0x1228 <Port_enuSetPinDirection+0x1bc>
				SET_BIT(DDRD, LOC_u8Pin);
    1200:	a1 e3       	ldi	r26, 0x31	; 49
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e1 e3       	ldi	r30, 0x31	; 49
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <Port_enuSetPinDirection+0x1b2>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <Port_enuSetPinDirection+0x1ae>
    1222:	84 2b       	or	r24, r20
    1224:	8c 93       	st	X, r24
    1226:	14 c0       	rjmp	.+40     	; 0x1250 <Port_enuSetPinDirection+0x1e4>
			} else {
				CLR_BIT(DDRD, LOC_u8Pin);
    1228:	a1 e3       	ldi	r26, 0x31	; 49
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e1 e3       	ldi	r30, 0x31	; 49
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <Port_enuSetPinDirection+0x1da>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <Port_enuSetPinDirection+0x1d6>
    124a:	80 95       	com	r24
    124c:	84 23       	and	r24, r20
    124e:	8c 93       	st	X, r24
			break;
		}
	}

	/*RETURN ERROR TYPE*/
	return LOC_EnumReturn;
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1252:	27 96       	adiw	r28, 0x07	; 7
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <Port_enuSetPinMode>:


Port_EnumErrorStatus Port_enuSetPinMode(u8 Copy_u8PinNum, u8 Copy_u8PinMode) {
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	2f 97       	sbiw	r28, 0x0f	; 15
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	8c 83       	std	Y+4, r24	; 0x04
    127a:	6d 83       	std	Y+5, r22	; 0x05

	Port_EnumErrorStatus LOC_EnumReturn = Ok;
    127c:	1b 82       	std	Y+3, r1	; 0x03
	u8 LOC_u8Port;
	u8 LOC_u8Pin;

	if (Copy_u8PinNum > PORT_u8TOTALNUMBER_OF_PINS) {
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	80 32       	cpi	r24, 0x20	; 32
    1282:	18 f0       	brcs	.+6      	; 0x128a <Port_enuSetPinMode+0x26>
		LOC_EnumReturn = PinError;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	8b 83       	std	Y+3, r24	; 0x03
    1288:	27 c3       	rjmp	.+1614   	; 0x18d8 <Port_enuSetPinMode+0x674>

	} else if (Copy_u8PinMode > PORT_u8INPUT_PULLUP) {
    128a:	8d 81       	ldd	r24, Y+5	; 0x05
    128c:	84 30       	cpi	r24, 0x04	; 4
    128e:	18 f0       	brcs	.+6      	; 0x1296 <Port_enuSetPinMode+0x32>
		LOC_EnumReturn = ModeError;
    1290:	82 e0       	ldi	r24, 0x02	; 2
    1292:	8b 83       	std	Y+3, r24	; 0x03
    1294:	21 c3       	rjmp	.+1602   	; 0x18d8 <Port_enuSetPinMode+0x674>
	} else {

		LOC_u8Port = Copy_u8PinNum / PORT_u8REGISTER_SIZE; //TO GET PORT EX: (31/8=3, WHICH 3 IS PORTD)
    1296:	8c 81       	ldd	r24, Y+4	; 0x04
    1298:	86 95       	lsr	r24
    129a:	86 95       	lsr	r24
    129c:	86 95       	lsr	r24
    129e:	8a 83       	std	Y+2, r24	; 0x02
		LOC_u8Pin = Copy_u8PinNum % PORT_u8REGISTER_SIZE; //TO GET WHICH PIN EX: (31%8=7, WHICH 7 IS PIN7)
    12a0:	8c 81       	ldd	r24, Y+4	; 0x04
    12a2:	87 70       	andi	r24, 0x07	; 7
    12a4:	89 83       	std	Y+1, r24	; 0x01

		switch (LOC_u8Port) {
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	3f 87       	std	Y+15, r19	; 0x0f
    12ae:	2e 87       	std	Y+14, r18	; 0x0e
    12b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    12b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	91 05       	cpc	r25, r1
    12b8:	09 f4       	brne	.+2      	; 0x12bc <Port_enuSetPinMode+0x58>
    12ba:	d5 c0       	rjmp	.+426    	; 0x1466 <Port_enuSetPinMode+0x202>
    12bc:	2e 85       	ldd	r18, Y+14	; 0x0e
    12be:	3f 85       	ldd	r19, Y+15	; 0x0f
    12c0:	22 30       	cpi	r18, 0x02	; 2
    12c2:	31 05       	cpc	r19, r1
    12c4:	2c f4       	brge	.+10     	; 0x12d0 <Port_enuSetPinMode+0x6c>
    12c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    12c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    12ca:	00 97       	sbiw	r24, 0x00	; 0
    12cc:	71 f0       	breq	.+28     	; 0x12ea <Port_enuSetPinMode+0x86>
    12ce:	04 c3       	rjmp	.+1544   	; 0x18d8 <Port_enuSetPinMode+0x674>
    12d0:	2e 85       	ldd	r18, Y+14	; 0x0e
    12d2:	3f 85       	ldd	r19, Y+15	; 0x0f
    12d4:	22 30       	cpi	r18, 0x02	; 2
    12d6:	31 05       	cpc	r19, r1
    12d8:	09 f4       	brne	.+2      	; 0x12dc <Port_enuSetPinMode+0x78>
    12da:	83 c1       	rjmp	.+774    	; 0x15e2 <Port_enuSetPinMode+0x37e>
    12dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    12de:	9f 85       	ldd	r25, Y+15	; 0x0f
    12e0:	83 30       	cpi	r24, 0x03	; 3
    12e2:	91 05       	cpc	r25, r1
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <Port_enuSetPinMode+0x84>
    12e6:	3b c2       	rjmp	.+1142   	; 0x175e <Port_enuSetPinMode+0x4fa>
    12e8:	f7 c2       	rjmp	.+1518   	; 0x18d8 <Port_enuSetPinMode+0x674>


		case PORT_u8PORTA:
			switch (Copy_u8PinMode) {
    12ea:	8d 81       	ldd	r24, Y+5	; 0x05
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	3d 87       	std	Y+13, r19	; 0x0d
    12f2:	2c 87       	std	Y+12, r18	; 0x0c
    12f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    12f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	91 05       	cpc	r25, r1
    12fc:	09 f4       	brne	.+2      	; 0x1300 <Port_enuSetPinMode+0x9c>
    12fe:	3e c0       	rjmp	.+124    	; 0x137c <Port_enuSetPinMode+0x118>
    1300:	2c 85       	ldd	r18, Y+12	; 0x0c
    1302:	3d 85       	ldd	r19, Y+13	; 0x0d
    1304:	22 30       	cpi	r18, 0x02	; 2
    1306:	31 05       	cpc	r19, r1
    1308:	2c f4       	brge	.+10     	; 0x1314 <Port_enuSetPinMode+0xb0>
    130a:	8c 85       	ldd	r24, Y+12	; 0x0c
    130c:	9d 85       	ldd	r25, Y+13	; 0x0d
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	71 f0       	breq	.+28     	; 0x132e <Port_enuSetPinMode+0xca>
    1312:	e2 c2       	rjmp	.+1476   	; 0x18d8 <Port_enuSetPinMode+0x674>
    1314:	2c 85       	ldd	r18, Y+12	; 0x0c
    1316:	3d 85       	ldd	r19, Y+13	; 0x0d
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	09 f4       	brne	.+2      	; 0x1320 <Port_enuSetPinMode+0xbc>
    131e:	54 c0       	rjmp	.+168    	; 0x13c8 <Port_enuSetPinMode+0x164>
    1320:	8c 85       	ldd	r24, Y+12	; 0x0c
    1322:	9d 85       	ldd	r25, Y+13	; 0x0d
    1324:	83 30       	cpi	r24, 0x03	; 3
    1326:	91 05       	cpc	r25, r1
    1328:	09 f4       	brne	.+2      	; 0x132c <Port_enuSetPinMode+0xc8>
    132a:	76 c0       	rjmp	.+236    	; 0x1418 <Port_enuSetPinMode+0x1b4>
    132c:	d5 c2       	rjmp	.+1450   	; 0x18d8 <Port_enuSetPinMode+0x674>
			case PORT_u8OUTPUT_LOW:
				SET_BIT(DDRA, LOC_u8Pin);
    132e:	aa e3       	ldi	r26, 0x3A	; 58
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	ea e3       	ldi	r30, 0x3A	; 58
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	48 2f       	mov	r20, r24
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	02 c0       	rjmp	.+4      	; 0x134a <Port_enuSetPinMode+0xe6>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	2a 95       	dec	r18
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <Port_enuSetPinMode+0xe2>
    134e:	84 2b       	or	r24, r20
    1350:	8c 93       	st	X, r24
				CLR_BIT(PORTA, LOC_u8Pin);
    1352:	ab e3       	ldi	r26, 0x3B	; 59
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	eb e3       	ldi	r30, 0x3B	; 59
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	48 2f       	mov	r20, r24
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 2e       	mov	r0, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <Port_enuSetPinMode+0x10c>
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	0a 94       	dec	r0
    1372:	e2 f7       	brpl	.-8      	; 0x136c <Port_enuSetPinMode+0x108>
    1374:	80 95       	com	r24
    1376:	84 23       	and	r24, r20
    1378:	8c 93       	st	X, r24
    137a:	ae c2       	rjmp	.+1372   	; 0x18d8 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8OUTPUT_HIGH:
				SET_BIT(DDRA, LOC_u8Pin);
    137c:	aa e3       	ldi	r26, 0x3A	; 58
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	ea e3       	ldi	r30, 0x3A	; 58
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <Port_enuSetPinMode+0x134>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	2a 95       	dec	r18
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <Port_enuSetPinMode+0x130>
    139c:	84 2b       	or	r24, r20
    139e:	8c 93       	st	X, r24
				SET_BIT(PORTA, LOC_u8Pin);
    13a0:	ab e3       	ldi	r26, 0x3B	; 59
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	eb e3       	ldi	r30, 0x3B	; 59
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	48 2f       	mov	r20, r24
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	02 2e       	mov	r0, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <Port_enuSetPinMode+0x15a>
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	0a 94       	dec	r0
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <Port_enuSetPinMode+0x156>
    13c2:	84 2b       	or	r24, r20
    13c4:	8c 93       	st	X, r24
    13c6:	88 c2       	rjmp	.+1296   	; 0x18d8 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_FLOATING:
				CLR_BIT(DDRA, LOC_u8Pin);
    13c8:	aa e3       	ldi	r26, 0x3A	; 58
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	ea e3       	ldi	r30, 0x3A	; 58
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	48 2f       	mov	r20, r24
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <Port_enuSetPinMode+0x180>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	2a 95       	dec	r18
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <Port_enuSetPinMode+0x17c>
    13e8:	80 95       	com	r24
    13ea:	84 23       	and	r24, r20
    13ec:	8c 93       	st	X, r24
				CLR_BIT(PORTA, LOC_u8Pin);
    13ee:	ab e3       	ldi	r26, 0x3B	; 59
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	eb e3       	ldi	r30, 0x3B	; 59
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	48 2f       	mov	r20, r24
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 2e       	mov	r0, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <Port_enuSetPinMode+0x1a8>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	0a 94       	dec	r0
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <Port_enuSetPinMode+0x1a4>
    1410:	80 95       	com	r24
    1412:	84 23       	and	r24, r20
    1414:	8c 93       	st	X, r24
    1416:	60 c2       	rjmp	.+1216   	; 0x18d8 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_PULLUP:
				CLR_BIT(DDRA, LOC_u8Pin);
    1418:	aa e3       	ldi	r26, 0x3A	; 58
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	ea e3       	ldi	r30, 0x3A	; 58
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <Port_enuSetPinMode+0x1d0>
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	2a 95       	dec	r18
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <Port_enuSetPinMode+0x1cc>
    1438:	80 95       	com	r24
    143a:	84 23       	and	r24, r20
    143c:	8c 93       	st	X, r24
				SET_BIT(PORTA, LOC_u8Pin);
    143e:	ab e3       	ldi	r26, 0x3B	; 59
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	eb e3       	ldi	r30, 0x3B	; 59
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 2e       	mov	r0, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <Port_enuSetPinMode+0x1f8>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <Port_enuSetPinMode+0x1f4>
    1460:	84 2b       	or	r24, r20
    1462:	8c 93       	st	X, r24
    1464:	39 c2       	rjmp	.+1138   	; 0x18d8 <Port_enuSetPinMode+0x674>
				break;
			}
			break;

		case PORT_u8PORTB:
			switch (Copy_u8PinMode) {
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	3b 87       	std	Y+11, r19	; 0x0b
    146e:	2a 87       	std	Y+10, r18	; 0x0a
    1470:	8a 85       	ldd	r24, Y+10	; 0x0a
    1472:	9b 85       	ldd	r25, Y+11	; 0x0b
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	91 05       	cpc	r25, r1
    1478:	09 f4       	brne	.+2      	; 0x147c <Port_enuSetPinMode+0x218>
    147a:	3e c0       	rjmp	.+124    	; 0x14f8 <Port_enuSetPinMode+0x294>
    147c:	2a 85       	ldd	r18, Y+10	; 0x0a
    147e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1480:	22 30       	cpi	r18, 0x02	; 2
    1482:	31 05       	cpc	r19, r1
    1484:	2c f4       	brge	.+10     	; 0x1490 <Port_enuSetPinMode+0x22c>
    1486:	8a 85       	ldd	r24, Y+10	; 0x0a
    1488:	9b 85       	ldd	r25, Y+11	; 0x0b
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	71 f0       	breq	.+28     	; 0x14aa <Port_enuSetPinMode+0x246>
    148e:	24 c2       	rjmp	.+1096   	; 0x18d8 <Port_enuSetPinMode+0x674>
    1490:	2a 85       	ldd	r18, Y+10	; 0x0a
    1492:	3b 85       	ldd	r19, Y+11	; 0x0b
    1494:	22 30       	cpi	r18, 0x02	; 2
    1496:	31 05       	cpc	r19, r1
    1498:	09 f4       	brne	.+2      	; 0x149c <Port_enuSetPinMode+0x238>
    149a:	54 c0       	rjmp	.+168    	; 0x1544 <Port_enuSetPinMode+0x2e0>
    149c:	8a 85       	ldd	r24, Y+10	; 0x0a
    149e:	9b 85       	ldd	r25, Y+11	; 0x0b
    14a0:	83 30       	cpi	r24, 0x03	; 3
    14a2:	91 05       	cpc	r25, r1
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <Port_enuSetPinMode+0x244>
    14a6:	76 c0       	rjmp	.+236    	; 0x1594 <Port_enuSetPinMode+0x330>
    14a8:	17 c2       	rjmp	.+1070   	; 0x18d8 <Port_enuSetPinMode+0x674>
			case PORT_u8OUTPUT_LOW:
				SET_BIT(DDRB, LOC_u8Pin);
    14aa:	a7 e3       	ldi	r26, 0x37	; 55
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e7 e3       	ldi	r30, 0x37	; 55
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <Port_enuSetPinMode+0x262>
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	2a 95       	dec	r18
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <Port_enuSetPinMode+0x25e>
    14ca:	84 2b       	or	r24, r20
    14cc:	8c 93       	st	X, r24
				CLR_BIT(PORTB, LOC_u8Pin);
    14ce:	a8 e3       	ldi	r26, 0x38	; 56
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e8 e3       	ldi	r30, 0x38	; 56
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <Port_enuSetPinMode+0x288>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <Port_enuSetPinMode+0x284>
    14f0:	80 95       	com	r24
    14f2:	84 23       	and	r24, r20
    14f4:	8c 93       	st	X, r24
    14f6:	f0 c1       	rjmp	.+992    	; 0x18d8 <Port_enuSetPinMode+0x674>
				break;
			case PORT_u8OUTPUT_HIGH:
				SET_BIT(DDRB, LOC_u8Pin);
    14f8:	a7 e3       	ldi	r26, 0x37	; 55
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e7 e3       	ldi	r30, 0x37	; 55
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <Port_enuSetPinMode+0x2b0>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	2a 95       	dec	r18
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <Port_enuSetPinMode+0x2ac>
    1518:	84 2b       	or	r24, r20
    151a:	8c 93       	st	X, r24
				SET_BIT(PORTB, LOC_u8Pin);
    151c:	a8 e3       	ldi	r26, 0x38	; 56
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e8 e3       	ldi	r30, 0x38	; 56
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <Port_enuSetPinMode+0x2d6>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <Port_enuSetPinMode+0x2d2>
    153e:	84 2b       	or	r24, r20
    1540:	8c 93       	st	X, r24
    1542:	ca c1       	rjmp	.+916    	; 0x18d8 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_FLOATING:
				CLR_BIT(DDRB, LOC_u8Pin);
    1544:	a7 e3       	ldi	r26, 0x37	; 55
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e7 e3       	ldi	r30, 0x37	; 55
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <Port_enuSetPinMode+0x2fc>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	2a 95       	dec	r18
    1562:	e2 f7       	brpl	.-8      	; 0x155c <Port_enuSetPinMode+0x2f8>
    1564:	80 95       	com	r24
    1566:	84 23       	and	r24, r20
    1568:	8c 93       	st	X, r24
				CLR_BIT(PORTB, LOC_u8Pin);
    156a:	a8 e3       	ldi	r26, 0x38	; 56
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e8 e3       	ldi	r30, 0x38	; 56
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	48 2f       	mov	r20, r24
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 2e       	mov	r0, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <Port_enuSetPinMode+0x324>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	0a 94       	dec	r0
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <Port_enuSetPinMode+0x320>
    158c:	80 95       	com	r24
    158e:	84 23       	and	r24, r20
    1590:	8c 93       	st	X, r24
    1592:	a2 c1       	rjmp	.+836    	; 0x18d8 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_PULLUP:
				CLR_BIT(DDRB, LOC_u8Pin);
    1594:	a7 e3       	ldi	r26, 0x37	; 55
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e7 e3       	ldi	r30, 0x37	; 55
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	48 2f       	mov	r20, r24
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <Port_enuSetPinMode+0x34c>
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	2a 95       	dec	r18
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <Port_enuSetPinMode+0x348>
    15b4:	80 95       	com	r24
    15b6:	84 23       	and	r24, r20
    15b8:	8c 93       	st	X, r24
				SET_BIT(PORTB, LOC_u8Pin);
    15ba:	a8 e3       	ldi	r26, 0x38	; 56
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e8 e3       	ldi	r30, 0x38	; 56
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	48 2f       	mov	r20, r24
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 2e       	mov	r0, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <Port_enuSetPinMode+0x374>
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	0a 94       	dec	r0
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <Port_enuSetPinMode+0x370>
    15dc:	84 2b       	or	r24, r20
    15de:	8c 93       	st	X, r24
    15e0:	7b c1       	rjmp	.+758    	; 0x18d8 <Port_enuSetPinMode+0x674>
				break;
			}
			break;

		case PORT_u8PORTC:
			switch (Copy_u8PinMode) {
    15e2:	8d 81       	ldd	r24, Y+5	; 0x05
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	39 87       	std	Y+9, r19	; 0x09
    15ea:	28 87       	std	Y+8, r18	; 0x08
    15ec:	88 85       	ldd	r24, Y+8	; 0x08
    15ee:	99 85       	ldd	r25, Y+9	; 0x09
    15f0:	81 30       	cpi	r24, 0x01	; 1
    15f2:	91 05       	cpc	r25, r1
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <Port_enuSetPinMode+0x394>
    15f6:	3e c0       	rjmp	.+124    	; 0x1674 <Port_enuSetPinMode+0x410>
    15f8:	28 85       	ldd	r18, Y+8	; 0x08
    15fa:	39 85       	ldd	r19, Y+9	; 0x09
    15fc:	22 30       	cpi	r18, 0x02	; 2
    15fe:	31 05       	cpc	r19, r1
    1600:	2c f4       	brge	.+10     	; 0x160c <Port_enuSetPinMode+0x3a8>
    1602:	88 85       	ldd	r24, Y+8	; 0x08
    1604:	99 85       	ldd	r25, Y+9	; 0x09
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	71 f0       	breq	.+28     	; 0x1626 <Port_enuSetPinMode+0x3c2>
    160a:	66 c1       	rjmp	.+716    	; 0x18d8 <Port_enuSetPinMode+0x674>
    160c:	28 85       	ldd	r18, Y+8	; 0x08
    160e:	39 85       	ldd	r19, Y+9	; 0x09
    1610:	22 30       	cpi	r18, 0x02	; 2
    1612:	31 05       	cpc	r19, r1
    1614:	09 f4       	brne	.+2      	; 0x1618 <Port_enuSetPinMode+0x3b4>
    1616:	54 c0       	rjmp	.+168    	; 0x16c0 <Port_enuSetPinMode+0x45c>
    1618:	88 85       	ldd	r24, Y+8	; 0x08
    161a:	99 85       	ldd	r25, Y+9	; 0x09
    161c:	83 30       	cpi	r24, 0x03	; 3
    161e:	91 05       	cpc	r25, r1
    1620:	09 f4       	brne	.+2      	; 0x1624 <Port_enuSetPinMode+0x3c0>
    1622:	76 c0       	rjmp	.+236    	; 0x1710 <Port_enuSetPinMode+0x4ac>
    1624:	59 c1       	rjmp	.+690    	; 0x18d8 <Port_enuSetPinMode+0x674>
			case PORT_u8OUTPUT_LOW:
				SET_BIT(DDRC, LOC_u8Pin);
    1626:	a4 e3       	ldi	r26, 0x34	; 52
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e4 e3       	ldi	r30, 0x34	; 52
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	48 2f       	mov	r20, r24
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <Port_enuSetPinMode+0x3de>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	2a 95       	dec	r18
    1644:	e2 f7       	brpl	.-8      	; 0x163e <Port_enuSetPinMode+0x3da>
    1646:	84 2b       	or	r24, r20
    1648:	8c 93       	st	X, r24
				CLR_BIT(PORTC, LOC_u8Pin);
    164a:	a5 e3       	ldi	r26, 0x35	; 53
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e5 e3       	ldi	r30, 0x35	; 53
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	48 2f       	mov	r20, r24
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 2e       	mov	r0, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <Port_enuSetPinMode+0x404>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	0a 94       	dec	r0
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <Port_enuSetPinMode+0x400>
    166c:	80 95       	com	r24
    166e:	84 23       	and	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	32 c1       	rjmp	.+612    	; 0x18d8 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8OUTPUT_HIGH:
				SET_BIT(DDRC, LOC_u8Pin);
    1674:	a4 e3       	ldi	r26, 0x34	; 52
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e4 e3       	ldi	r30, 0x34	; 52
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	48 2f       	mov	r20, r24
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <Port_enuSetPinMode+0x42c>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	2a 95       	dec	r18
    1692:	e2 f7       	brpl	.-8      	; 0x168c <Port_enuSetPinMode+0x428>
    1694:	84 2b       	or	r24, r20
    1696:	8c 93       	st	X, r24
				SET_BIT(PORTC, LOC_u8Pin);
    1698:	a5 e3       	ldi	r26, 0x35	; 53
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e5 e3       	ldi	r30, 0x35	; 53
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	48 2f       	mov	r20, r24
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 2e       	mov	r0, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <Port_enuSetPinMode+0x452>
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	0a 94       	dec	r0
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <Port_enuSetPinMode+0x44e>
    16ba:	84 2b       	or	r24, r20
    16bc:	8c 93       	st	X, r24
    16be:	0c c1       	rjmp	.+536    	; 0x18d8 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_FLOATING:
				CLR_BIT(DDRC, LOC_u8Pin);
    16c0:	a4 e3       	ldi	r26, 0x34	; 52
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e4 e3       	ldi	r30, 0x34	; 52
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	48 2f       	mov	r20, r24
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <Port_enuSetPinMode+0x478>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	2a 95       	dec	r18
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <Port_enuSetPinMode+0x474>
    16e0:	80 95       	com	r24
    16e2:	84 23       	and	r24, r20
    16e4:	8c 93       	st	X, r24
				CLR_BIT(PORTC, LOC_u8Pin);
    16e6:	a5 e3       	ldi	r26, 0x35	; 53
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e5 e3       	ldi	r30, 0x35	; 53
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	48 2f       	mov	r20, r24
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	02 2e       	mov	r0, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <Port_enuSetPinMode+0x4a0>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	0a 94       	dec	r0
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <Port_enuSetPinMode+0x49c>
    1708:	80 95       	com	r24
    170a:	84 23       	and	r24, r20
    170c:	8c 93       	st	X, r24
    170e:	e4 c0       	rjmp	.+456    	; 0x18d8 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_PULLUP:
				CLR_BIT(DDRC, LOC_u8Pin);
    1710:	a4 e3       	ldi	r26, 0x34	; 52
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e4 e3       	ldi	r30, 0x34	; 52
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	48 2f       	mov	r20, r24
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	02 c0       	rjmp	.+4      	; 0x172c <Port_enuSetPinMode+0x4c8>
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	2a 95       	dec	r18
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <Port_enuSetPinMode+0x4c4>
    1730:	80 95       	com	r24
    1732:	84 23       	and	r24, r20
    1734:	8c 93       	st	X, r24
				SET_BIT(PORTC, LOC_u8Pin);
    1736:	a5 e3       	ldi	r26, 0x35	; 53
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e5 e3       	ldi	r30, 0x35	; 53
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	48 2f       	mov	r20, r24
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	02 2e       	mov	r0, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <Port_enuSetPinMode+0x4f0>
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	0a 94       	dec	r0
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <Port_enuSetPinMode+0x4ec>
    1758:	84 2b       	or	r24, r20
    175a:	8c 93       	st	X, r24
    175c:	bd c0       	rjmp	.+378    	; 0x18d8 <Port_enuSetPinMode+0x674>

			break;

		case PORT_u8PORTD:

			switch (Copy_u8PinMode) {
    175e:	8d 81       	ldd	r24, Y+5	; 0x05
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	3f 83       	std	Y+7, r19	; 0x07
    1766:	2e 83       	std	Y+6, r18	; 0x06
    1768:	8e 81       	ldd	r24, Y+6	; 0x06
    176a:	9f 81       	ldd	r25, Y+7	; 0x07
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	91 05       	cpc	r25, r1
    1770:	09 f4       	brne	.+2      	; 0x1774 <Port_enuSetPinMode+0x510>
    1772:	3e c0       	rjmp	.+124    	; 0x17f0 <Port_enuSetPinMode+0x58c>
    1774:	2e 81       	ldd	r18, Y+6	; 0x06
    1776:	3f 81       	ldd	r19, Y+7	; 0x07
    1778:	22 30       	cpi	r18, 0x02	; 2
    177a:	31 05       	cpc	r19, r1
    177c:	2c f4       	brge	.+10     	; 0x1788 <Port_enuSetPinMode+0x524>
    177e:	8e 81       	ldd	r24, Y+6	; 0x06
    1780:	9f 81       	ldd	r25, Y+7	; 0x07
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	71 f0       	breq	.+28     	; 0x17a2 <Port_enuSetPinMode+0x53e>
    1786:	a8 c0       	rjmp	.+336    	; 0x18d8 <Port_enuSetPinMode+0x674>
    1788:	2e 81       	ldd	r18, Y+6	; 0x06
    178a:	3f 81       	ldd	r19, Y+7	; 0x07
    178c:	22 30       	cpi	r18, 0x02	; 2
    178e:	31 05       	cpc	r19, r1
    1790:	09 f4       	brne	.+2      	; 0x1794 <Port_enuSetPinMode+0x530>
    1792:	54 c0       	rjmp	.+168    	; 0x183c <Port_enuSetPinMode+0x5d8>
    1794:	8e 81       	ldd	r24, Y+6	; 0x06
    1796:	9f 81       	ldd	r25, Y+7	; 0x07
    1798:	83 30       	cpi	r24, 0x03	; 3
    179a:	91 05       	cpc	r25, r1
    179c:	09 f4       	brne	.+2      	; 0x17a0 <Port_enuSetPinMode+0x53c>
    179e:	76 c0       	rjmp	.+236    	; 0x188c <Port_enuSetPinMode+0x628>
    17a0:	9b c0       	rjmp	.+310    	; 0x18d8 <Port_enuSetPinMode+0x674>

			case PORT_u8OUTPUT_LOW:
				SET_BIT(DDRD, LOC_u8Pin);
    17a2:	a1 e3       	ldi	r26, 0x31	; 49
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e1 e3       	ldi	r30, 0x31	; 49
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <Port_enuSetPinMode+0x55a>
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	2a 95       	dec	r18
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <Port_enuSetPinMode+0x556>
    17c2:	84 2b       	or	r24, r20
    17c4:	8c 93       	st	X, r24
				CLR_BIT(PORTD, LOC_u8Pin);
    17c6:	a2 e3       	ldi	r26, 0x32	; 50
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e2 e3       	ldi	r30, 0x32	; 50
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	48 2f       	mov	r20, r24
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 2e       	mov	r0, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <Port_enuSetPinMode+0x580>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	0a 94       	dec	r0
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <Port_enuSetPinMode+0x57c>
    17e8:	80 95       	com	r24
    17ea:	84 23       	and	r24, r20
    17ec:	8c 93       	st	X, r24
    17ee:	74 c0       	rjmp	.+232    	; 0x18d8 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8OUTPUT_HIGH:
				SET_BIT(DDRD, LOC_u8Pin);
    17f0:	a1 e3       	ldi	r26, 0x31	; 49
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e1 e3       	ldi	r30, 0x31	; 49
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	48 2f       	mov	r20, r24
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 c0       	rjmp	.+4      	; 0x180c <Port_enuSetPinMode+0x5a8>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	2a 95       	dec	r18
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <Port_enuSetPinMode+0x5a4>
    1810:	84 2b       	or	r24, r20
    1812:	8c 93       	st	X, r24
				SET_BIT(PORTD, LOC_u8Pin);
    1814:	a2 e3       	ldi	r26, 0x32	; 50
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e2 e3       	ldi	r30, 0x32	; 50
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	48 2f       	mov	r20, r24
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	02 2e       	mov	r0, r18
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <Port_enuSetPinMode+0x5ce>
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	0a 94       	dec	r0
    1834:	e2 f7       	brpl	.-8      	; 0x182e <Port_enuSetPinMode+0x5ca>
    1836:	84 2b       	or	r24, r20
    1838:	8c 93       	st	X, r24
    183a:	4e c0       	rjmp	.+156    	; 0x18d8 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_FLOATING:
				CLR_BIT(DDRD, LOC_u8Pin);
    183c:	a1 e3       	ldi	r26, 0x31	; 49
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e1 e3       	ldi	r30, 0x31	; 49
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	48 2f       	mov	r20, r24
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <Port_enuSetPinMode+0x5f4>
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	2a 95       	dec	r18
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <Port_enuSetPinMode+0x5f0>
    185c:	80 95       	com	r24
    185e:	84 23       	and	r24, r20
    1860:	8c 93       	st	X, r24
				CLR_BIT(PORTD, LOC_u8Pin);
    1862:	a2 e3       	ldi	r26, 0x32	; 50
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e2 e3       	ldi	r30, 0x32	; 50
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	48 2f       	mov	r20, r24
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	02 2e       	mov	r0, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <Port_enuSetPinMode+0x61c>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	0a 94       	dec	r0
    1882:	e2 f7       	brpl	.-8      	; 0x187c <Port_enuSetPinMode+0x618>
    1884:	80 95       	com	r24
    1886:	84 23       	and	r24, r20
    1888:	8c 93       	st	X, r24
    188a:	26 c0       	rjmp	.+76     	; 0x18d8 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_PULLUP:
				CLR_BIT(DDRD, LOC_u8Pin);
    188c:	a1 e3       	ldi	r26, 0x31	; 49
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e1 e3       	ldi	r30, 0x31	; 49
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	48 2f       	mov	r20, r24
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <Port_enuSetPinMode+0x644>
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	2a 95       	dec	r18
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <Port_enuSetPinMode+0x640>
    18ac:	80 95       	com	r24
    18ae:	84 23       	and	r24, r20
    18b0:	8c 93       	st	X, r24
				SET_BIT(PORTD, LOC_u8Pin);
    18b2:	a2 e3       	ldi	r26, 0x32	; 50
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e2 e3       	ldi	r30, 0x32	; 50
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	48 2f       	mov	r20, r24
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	02 2e       	mov	r0, r18
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <Port_enuSetPinMode+0x66c>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	0a 94       	dec	r0
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <Port_enuSetPinMode+0x668>
    18d4:	84 2b       	or	r24, r20
    18d6:	8c 93       	st	X, r24

			break;
		}
	}

	return LOC_EnumReturn;
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    18da:	2f 96       	adiw	r28, 0x0f	; 15
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <GIEMode>:
 *  Created on: Oct 21, 2022
 *      Author: Ismail
 */
#include "GIE_prv.h"
#include "GIE.h"
void GIEMode(u8 LocalGIE_Mode){
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <GIEMode+0x6>
    18f2:	0f 92       	push	r0
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	89 83       	std	Y+1, r24	; 0x01
	switch (LocalGIE_Mode){
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	3b 83       	std	Y+3, r19	; 0x03
    1902:	2a 83       	std	Y+2, r18	; 0x02
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	9b 81       	ldd	r25, Y+3	; 0x03
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	69 f0       	breq	.+26     	; 0x1926 <GIEMode+0x3a>
    190c:	2a 81       	ldd	r18, Y+2	; 0x02
    190e:	3b 81       	ldd	r19, Y+3	; 0x03
    1910:	21 30       	cpi	r18, 0x01	; 1
    1912:	31 05       	cpc	r19, r1
    1914:	81 f4       	brne	.+32     	; 0x1936 <GIEMode+0x4a>
	case GIE_ENABLE:
		SET_BIT(SREG,7);
    1916:	af e5       	ldi	r26, 0x5F	; 95
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	ef e5       	ldi	r30, 0x5F	; 95
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	80 68       	ori	r24, 0x80	; 128
    1922:	8c 93       	st	X, r24
    1924:	0f c0       	rjmp	.+30     	; 0x1944 <GIEMode+0x58>
		break;
	case GIE_DISABLE:
		CLR_BIT(SREG,7);
    1926:	af e5       	ldi	r26, 0x5F	; 95
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	ef e5       	ldi	r30, 0x5F	; 95
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	8f 77       	andi	r24, 0x7F	; 127
    1932:	8c 93       	st	X, r24
    1934:	07 c0       	rjmp	.+14     	; 0x1944 <GIEMode+0x58>
		break;
	default:
		CLR_BIT(SREG,7);
    1936:	af e5       	ldi	r26, 0x5F	; 95
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	ef e5       	ldi	r30, 0x5F	; 95
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	8f 77       	andi	r24, 0x7F	; 127
    1942:	8c 93       	st	X, r24
		break;
	}
}
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <EXIT0_Init>:
#include "EXIT_cfg.h"
#include "EXIT_prv.h"



void EXIT0_Init(){
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif EXIT_SENSE_CONTROL_STATE==EXIT_RISING_EDGE
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,0);
#elif EXIT_SENSE_CONTROL_STATE==EXIT_FALLING_EDGE
	SET_BIT(MCUCR,0);
    1958:	a5 e5       	ldi	r26, 0x55	; 85
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e5 e5       	ldi	r30, 0x55	; 85
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	81 60       	ori	r24, 0x01	; 1
    1964:	8c 93       	st	X, r24
	SET_BIT(MCUCR,0);
    1966:	a5 e5       	ldi	r26, 0x55	; 85
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e5 e5       	ldi	r30, 0x55	; 85
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	81 60       	ori	r24, 0x01	; 1
    1972:	8c 93       	st	X, r24
#endif
/*enable interrupt on int0*/
	SET_BIT(GICR,6);
    1974:	ab e5       	ldi	r26, 0x5B	; 91
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	eb e5       	ldi	r30, 0x5B	; 91
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	80 64       	ori	r24, 0x40	; 64
    1980:	8c 93       	st	X, r24

}
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <EXIT1_Init>:
void EXIT1_Init(){
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif EXIT_SENSE_CONTROL_STATE==EXIT_RISING_EDGE
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,0);
#elif EXIT_SENSE_CONTROL_STATE==EXIT_FALLING_EDGE
	SET_BIT(MCUCR,0);
    1990:	a5 e5       	ldi	r26, 0x55	; 85
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e5 e5       	ldi	r30, 0x55	; 85
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	81 60       	ori	r24, 0x01	; 1
    199c:	8c 93       	st	X, r24
	SET_BIT(MCUCR,0);
    199e:	a5 e5       	ldi	r26, 0x55	; 85
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e5 e5       	ldi	r30, 0x55	; 85
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	81 60       	ori	r24, 0x01	; 1
    19aa:	8c 93       	st	X, r24
#endif
/*enable interrupt on int1*/
	SET_BIT(GICR,7);
    19ac:	ab e5       	ldi	r26, 0x5B	; 91
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	eb e5       	ldi	r30, 0x5B	; 91
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	80 68       	ori	r24, 0x80	; 128
    19b8:	8c 93       	st	X, r24


}
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <EXIT2_Init>:

void EXIT2_Init(){
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62

#if EXIT_SENSE_CONTROL_STATE==EXIT_RISING_EDGE
	CLR_BIT(MCUCSR,0);
#elif EXIT_SENSE_CONTROL_STATE==EXIT_FALLING_EDGE
	SET_BIT(MCUCSR,0);
    19c8:	a4 e5       	ldi	r26, 0x54	; 84
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e4 e5       	ldi	r30, 0x54	; 84
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	81 60       	ori	r24, 0x01	; 1
    19d4:	8c 93       	st	X, r24
#endif
/*enable interrupt on int2*/
	SET_BIT(GICR,5);
    19d6:	ab e5       	ldi	r26, 0x5B	; 91
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	eb e5       	ldi	r30, 0x5B	; 91
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	80 62       	ori	r24, 0x20	; 32
    19e2:	8c 93       	st	X, r24
}
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <EXTI_voidClearFlag>:

void EXTI_voidClearFlag(u8 Copy_u8Line) {
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <EXTI_voidClearFlag+0x6>
    19f0:	0f 92       	push	r0
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Line) {
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	3b 83       	std	Y+3, r19	; 0x03
    1a00:	2a 83       	std	Y+2, r18	; 0x02
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	9b 81       	ldd	r25, Y+3	; 0x03
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	91 05       	cpc	r25, r1
    1a0a:	89 f0       	breq	.+34     	; 0x1a2e <EXTI_voidClearFlag+0x44>
    1a0c:	2a 81       	ldd	r18, Y+2	; 0x02
    1a0e:	3b 81       	ldd	r19, Y+3	; 0x03
    1a10:	22 30       	cpi	r18, 0x02	; 2
    1a12:	31 05       	cpc	r19, r1
    1a14:	a1 f0       	breq	.+40     	; 0x1a3e <EXTI_voidClearFlag+0x54>
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	b9 f4       	brne	.+46     	; 0x1a4c <EXTI_voidClearFlag+0x62>
	case EXTI_LINE0:
		SET_BIT(GIFR, GIFR_INTF0_BIT);
    1a1e:	aa e5       	ldi	r26, 0x5A	; 90
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	ea e5       	ldi	r30, 0x5A	; 90
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	80 64       	ori	r24, 0x40	; 64
    1a2a:	8c 93       	st	X, r24
    1a2c:	0f c0       	rjmp	.+30     	; 0x1a4c <EXTI_voidClearFlag+0x62>
		break;
	case EXTI_LINE1:
		SET_BIT(GIFR, GIFR_INTF1_BIT);
    1a2e:	aa e5       	ldi	r26, 0x5A	; 90
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	ea e5       	ldi	r30, 0x5A	; 90
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	80 68       	ori	r24, 0x80	; 128
    1a3a:	8c 93       	st	X, r24
    1a3c:	07 c0       	rjmp	.+14     	; 0x1a4c <EXTI_voidClearFlag+0x62>
		break;
	case EXTI_LINE2:
		SET_BIT(GICR, GICR_INT2_BIT);
    1a3e:	ab e5       	ldi	r26, 0x5B	; 91
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	eb e5       	ldi	r30, 0x5B	; 91
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	80 62       	ori	r24, 0x20	; 32
    1a4a:	8c 93       	st	X, r24
		break;
	}
}
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	08 95       	ret

00001a58 <EXTI_voidCallBack>:
void EXTI_voidCallBack(void (*Copy_pvoidCallBack)(void), u8 Copy_u8EXTILine) {
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <EXTI_voidCallBack+0x6>
    1a5e:	0f 92       	push	r0
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	9a 83       	std	Y+2, r25	; 0x02
    1a66:	89 83       	std	Y+1, r24	; 0x01
    1a68:	6b 83       	std	Y+3, r22	; 0x03

	if (Copy_pvoidCallBack != NULL) {
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	61 f0       	breq	.+24     	; 0x1a8a <EXTI_voidCallBack+0x32>
		gptr[Copy_u8EXTILine] = Copy_pvoidCallBack;
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	88 2f       	mov	r24, r24
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	e6 55       	subi	r30, 0x56	; 86
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	9a 81       	ldd	r25, Y+2	; 0x02
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	80 83       	st	Z, r24
	}
}
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <__vector_1>:

void __vector_1(void) {
    1a96:	1f 92       	push	r1
    1a98:	0f 92       	push	r0
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	0f 92       	push	r0
    1a9e:	11 24       	eor	r1, r1
    1aa0:	2f 93       	push	r18
    1aa2:	3f 93       	push	r19
    1aa4:	4f 93       	push	r20
    1aa6:	5f 93       	push	r21
    1aa8:	6f 93       	push	r22
    1aaa:	7f 93       	push	r23
    1aac:	8f 93       	push	r24
    1aae:	9f 93       	push	r25
    1ab0:	af 93       	push	r26
    1ab2:	bf 93       	push	r27
    1ab4:	ef 93       	push	r30
    1ab6:	ff 93       	push	r31
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
	if (gptr[0] != NULL) {
    1ac0:	80 91 aa 00 	lds	r24, 0x00AA
    1ac4:	90 91 ab 00 	lds	r25, 0x00AB
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	41 f0       	breq	.+16     	; 0x1adc <__vector_1+0x46>
		gptr[0]();
    1acc:	e0 91 aa 00 	lds	r30, 0x00AA
    1ad0:	f0 91 ab 00 	lds	r31, 0x00AB
    1ad4:	09 95       	icall
		EXTI_voidClearFlag(EXTI_LINE0);
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <EXTI_voidClearFlag>
	}
}
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	ff 91       	pop	r31
    1ae2:	ef 91       	pop	r30
    1ae4:	bf 91       	pop	r27
    1ae6:	af 91       	pop	r26
    1ae8:	9f 91       	pop	r25
    1aea:	8f 91       	pop	r24
    1aec:	7f 91       	pop	r23
    1aee:	6f 91       	pop	r22
    1af0:	5f 91       	pop	r21
    1af2:	4f 91       	pop	r20
    1af4:	3f 91       	pop	r19
    1af6:	2f 91       	pop	r18
    1af8:	0f 90       	pop	r0
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	0f 90       	pop	r0
    1afe:	1f 90       	pop	r1
    1b00:	18 95       	reti

00001b02 <__vector_2>:

void __vector_2(void) {
    1b02:	1f 92       	push	r1
    1b04:	0f 92       	push	r0
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	0f 92       	push	r0
    1b0a:	11 24       	eor	r1, r1
    1b0c:	2f 93       	push	r18
    1b0e:	3f 93       	push	r19
    1b10:	4f 93       	push	r20
    1b12:	5f 93       	push	r21
    1b14:	6f 93       	push	r22
    1b16:	7f 93       	push	r23
    1b18:	8f 93       	push	r24
    1b1a:	9f 93       	push	r25
    1b1c:	af 93       	push	r26
    1b1e:	bf 93       	push	r27
    1b20:	ef 93       	push	r30
    1b22:	ff 93       	push	r31
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
	if (gptr[1] != NULL) {
    1b2c:	80 91 ac 00 	lds	r24, 0x00AC
    1b30:	90 91 ad 00 	lds	r25, 0x00AD
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	41 f0       	breq	.+16     	; 0x1b48 <__vector_2+0x46>
		gptr[1]();
    1b38:	e0 91 ac 00 	lds	r30, 0x00AC
    1b3c:	f0 91 ad 00 	lds	r31, 0x00AD
    1b40:	09 95       	icall
		EXTI_voidClearFlag(EXTI_LINE1);
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <EXTI_voidClearFlag>
	}
}
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	ff 91       	pop	r31
    1b4e:	ef 91       	pop	r30
    1b50:	bf 91       	pop	r27
    1b52:	af 91       	pop	r26
    1b54:	9f 91       	pop	r25
    1b56:	8f 91       	pop	r24
    1b58:	7f 91       	pop	r23
    1b5a:	6f 91       	pop	r22
    1b5c:	5f 91       	pop	r21
    1b5e:	4f 91       	pop	r20
    1b60:	3f 91       	pop	r19
    1b62:	2f 91       	pop	r18
    1b64:	0f 90       	pop	r0
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	0f 90       	pop	r0
    1b6a:	1f 90       	pop	r1
    1b6c:	18 95       	reti

00001b6e <__vector_3>:

void __vector_3(void) {
    1b6e:	1f 92       	push	r1
    1b70:	0f 92       	push	r0
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	0f 92       	push	r0
    1b76:	11 24       	eor	r1, r1
    1b78:	2f 93       	push	r18
    1b7a:	3f 93       	push	r19
    1b7c:	4f 93       	push	r20
    1b7e:	5f 93       	push	r21
    1b80:	6f 93       	push	r22
    1b82:	7f 93       	push	r23
    1b84:	8f 93       	push	r24
    1b86:	9f 93       	push	r25
    1b88:	af 93       	push	r26
    1b8a:	bf 93       	push	r27
    1b8c:	ef 93       	push	r30
    1b8e:	ff 93       	push	r31
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
	if (gptr[2] != NULL) {
    1b98:	80 91 ae 00 	lds	r24, 0x00AE
    1b9c:	90 91 af 00 	lds	r25, 0x00AF
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	41 f0       	breq	.+16     	; 0x1bb4 <__vector_3+0x46>
		gptr[2]();
    1ba4:	e0 91 ae 00 	lds	r30, 0x00AE
    1ba8:	f0 91 af 00 	lds	r31, 0x00AF
    1bac:	09 95       	icall
		EXTI_voidClearFlag(EXTI_LINE2);
    1bae:	82 e0       	ldi	r24, 0x02	; 2
    1bb0:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <EXTI_voidClearFlag>

	}
}
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	ff 91       	pop	r31
    1bba:	ef 91       	pop	r30
    1bbc:	bf 91       	pop	r27
    1bbe:	af 91       	pop	r26
    1bc0:	9f 91       	pop	r25
    1bc2:	8f 91       	pop	r24
    1bc4:	7f 91       	pop	r23
    1bc6:	6f 91       	pop	r22
    1bc8:	5f 91       	pop	r21
    1bca:	4f 91       	pop	r20
    1bcc:	3f 91       	pop	r19
    1bce:	2f 91       	pop	r18
    1bd0:	0f 90       	pop	r0
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	0f 90       	pop	r0
    1bd6:	1f 90       	pop	r1
    1bd8:	18 95       	reti

00001bda <Dio_enuWriteChannel>:
#include"Dio_prv.h"
#include"Dio_cfg.h" //THIS FILE IS INCLUDED INCASE THE DRIVER IS CONFIGURABLE IN THE FUTURE.

/*Channel is the pin */

Dio_EnumErrorState  Dio_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	2f 97       	sbiw	r28, 0x0f	; 15
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	cd bf       	out	0x3d, r28	; 61
    1bee:	8c 83       	std	Y+4, r24	; 0x04
    1bf0:	6d 83       	std	Y+5, r22	; 0x05
	Dio_EnumErrorState LOCEnumReturnState = Dio_Ok;
    1bf2:	1b 82       	std	Y+3, r1	; 0x03
	u8 LOC_u8Port;
	u8 LOC_u8Pin;
	if (Copy_u8ChannelId > DIO_u8MAXNUMBER_OF_PINS){
    1bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf6:	80 32       	cpi	r24, 0x20	; 32
    1bf8:	18 f0       	brcs	.+6      	; 0x1c00 <Dio_enuWriteChannel+0x26>
		LOCEnumReturnState =Dio_ChannelError;
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	8b 83       	std	Y+3, r24	; 0x03
    1bfe:	6b c1       	rjmp	.+726    	; 0x1ed6 <Dio_enuWriteChannel+0x2fc>
	}
	else if(Copy_u8Level>DIO_u8MAXNUMBER_OF_LEVELS){
    1c00:	8d 81       	ldd	r24, Y+5	; 0x05
    1c02:	82 30       	cpi	r24, 0x02	; 2
    1c04:	18 f0       	brcs	.+6      	; 0x1c0c <Dio_enuWriteChannel+0x32>
		LOCEnumReturnState= Dio_LevelError;
    1c06:	82 e0       	ldi	r24, 0x02	; 2
    1c08:	8b 83       	std	Y+3, r24	; 0x03
    1c0a:	65 c1       	rjmp	.+714    	; 0x1ed6 <Dio_enuWriteChannel+0x2fc>
	}
	else{
		LOC_u8Port = Copy_u8ChannelId / DIO_u8REGISTER_SIZE;
    1c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0e:	86 95       	lsr	r24
    1c10:	86 95       	lsr	r24
    1c12:	86 95       	lsr	r24
    1c14:	8a 83       	std	Y+2, r24	; 0x02
		LOC_u8Pin = Copy_u8ChannelId % DIO_u8REGISTER_SIZE;
    1c16:	8c 81       	ldd	r24, Y+4	; 0x04
    1c18:	87 70       	andi	r24, 0x07	; 7
    1c1a:	89 83       	std	Y+1, r24	; 0x01


	switch (LOC_u8Port) {
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	3f 87       	std	Y+15, r19	; 0x0f
    1c24:	2e 87       	std	Y+14, r18	; 0x0e
    1c26:	4e 85       	ldd	r20, Y+14	; 0x0e
    1c28:	5f 85       	ldd	r21, Y+15	; 0x0f
    1c2a:	41 30       	cpi	r20, 0x01	; 1
    1c2c:	51 05       	cpc	r21, r1
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <Dio_enuWriteChannel+0x58>
    1c30:	67 c0       	rjmp	.+206    	; 0x1d00 <Dio_enuWriteChannel+0x126>
    1c32:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c34:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c36:	82 30       	cpi	r24, 0x02	; 2
    1c38:	91 05       	cpc	r25, r1
    1c3a:	34 f4       	brge	.+12     	; 0x1c48 <Dio_enuWriteChannel+0x6e>
    1c3c:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c3e:	3f 85       	ldd	r19, Y+15	; 0x0f
    1c40:	21 15       	cp	r18, r1
    1c42:	31 05       	cpc	r19, r1
    1c44:	71 f0       	breq	.+28     	; 0x1c62 <Dio_enuWriteChannel+0x88>
    1c46:	47 c1       	rjmp	.+654    	; 0x1ed6 <Dio_enuWriteChannel+0x2fc>
    1c48:	4e 85       	ldd	r20, Y+14	; 0x0e
    1c4a:	5f 85       	ldd	r21, Y+15	; 0x0f
    1c4c:	42 30       	cpi	r20, 0x02	; 2
    1c4e:	51 05       	cpc	r21, r1
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <Dio_enuWriteChannel+0x7a>
    1c52:	a5 c0       	rjmp	.+330    	; 0x1d9e <Dio_enuWriteChannel+0x1c4>
    1c54:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c56:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c58:	83 30       	cpi	r24, 0x03	; 3
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <Dio_enuWriteChannel+0x86>
    1c5e:	ee c0       	rjmp	.+476    	; 0x1e3c <Dio_enuWriteChannel+0x262>
    1c60:	3a c1       	rjmp	.+628    	; 0x1ed6 <Dio_enuWriteChannel+0x2fc>

			case DIO_u8PORTA:
				if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
    1c62:	ea e3       	ldi	r30, 0x3A	; 58
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	88 2f       	mov	r24, r24
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	a9 01       	movw	r20, r18
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <Dio_enuWriteChannel+0xa0>
    1c76:	55 95       	asr	r21
    1c78:	47 95       	ror	r20
    1c7a:	8a 95       	dec	r24
    1c7c:	e2 f7       	brpl	.-8      	; 0x1c76 <Dio_enuWriteChannel+0x9c>
    1c7e:	ca 01       	movw	r24, r20
    1c80:	81 70       	andi	r24, 0x01	; 1
    1c82:	90 70       	andi	r25, 0x00	; 0
    1c84:	88 23       	and	r24, r24
    1c86:	c9 f1       	breq	.+114    	; 0x1cfa <Dio_enuWriteChannel+0x120>
					switch (Copy_u8Level) {
    1c88:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	3d 87       	std	Y+13, r19	; 0x0d
    1c90:	2c 87       	std	Y+12, r18	; 0x0c
    1c92:	4c 85       	ldd	r20, Y+12	; 0x0c
    1c94:	5d 85       	ldd	r21, Y+13	; 0x0d
    1c96:	41 15       	cp	r20, r1
    1c98:	51 05       	cpc	r21, r1
    1c9a:	d1 f0       	breq	.+52     	; 0x1cd0 <Dio_enuWriteChannel+0xf6>
    1c9c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c9e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ca0:	81 30       	cpi	r24, 0x01	; 1
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	09 f0       	breq	.+2      	; 0x1ca8 <Dio_enuWriteChannel+0xce>
    1ca6:	17 c1       	rjmp	.+558    	; 0x1ed6 <Dio_enuWriteChannel+0x2fc>

					case DIO_u8LEVEL_HIGH:
						SET_BIT(PORTA, LOC_u8Pin);
    1ca8:	ab e3       	ldi	r26, 0x3B	; 59
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	eb e3       	ldi	r30, 0x3B	; 59
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	48 2f       	mov	r20, r24
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	02 2e       	mov	r0, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <Dio_enuWriteChannel+0xec>
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	0a 94       	dec	r0
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <Dio_enuWriteChannel+0xe8>
    1cca:	84 2b       	or	r24, r20
    1ccc:	8c 93       	st	X, r24
    1cce:	03 c1       	rjmp	.+518    	; 0x1ed6 <Dio_enuWriteChannel+0x2fc>
						break;

					case DIO_u8LEVEL_LOW:
						CLR_BIT(PORTA, LOC_u8Pin);
    1cd0:	ab e3       	ldi	r26, 0x3B	; 59
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	eb e3       	ldi	r30, 0x3B	; 59
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	48 2f       	mov	r20, r24
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	02 2e       	mov	r0, r18
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <Dio_enuWriteChannel+0x114>
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	0a 94       	dec	r0
    1cf0:	e2 f7       	brpl	.-8      	; 0x1cea <Dio_enuWriteChannel+0x110>
    1cf2:	80 95       	com	r24
    1cf4:	84 23       	and	r24, r20
    1cf6:	8c 93       	st	X, r24
    1cf8:	ee c0       	rjmp	.+476    	; 0x1ed6 <Dio_enuWriteChannel+0x2fc>
						break;

					}
				} else {
					LOCEnumReturnState = Dio_DirectionError;
    1cfa:	83 e0       	ldi	r24, 0x03	; 3
    1cfc:	8b 83       	std	Y+3, r24	; 0x03
    1cfe:	eb c0       	rjmp	.+470    	; 0x1ed6 <Dio_enuWriteChannel+0x2fc>
				}
				break;
			case DIO_u8PORTB:
							if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
    1d00:	e7 e3       	ldi	r30, 0x37	; 55
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	88 2f       	mov	r24, r24
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	a9 01       	movw	r20, r18
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <Dio_enuWriteChannel+0x13e>
    1d14:	55 95       	asr	r21
    1d16:	47 95       	ror	r20
    1d18:	8a 95       	dec	r24
    1d1a:	e2 f7       	brpl	.-8      	; 0x1d14 <Dio_enuWriteChannel+0x13a>
    1d1c:	ca 01       	movw	r24, r20
    1d1e:	81 70       	andi	r24, 0x01	; 1
    1d20:	90 70       	andi	r25, 0x00	; 0
    1d22:	88 23       	and	r24, r24
    1d24:	c9 f1       	breq	.+114    	; 0x1d98 <Dio_enuWriteChannel+0x1be>
								switch (Copy_u8Level) {
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	3b 87       	std	Y+11, r19	; 0x0b
    1d2e:	2a 87       	std	Y+10, r18	; 0x0a
    1d30:	4a 85       	ldd	r20, Y+10	; 0x0a
    1d32:	5b 85       	ldd	r21, Y+11	; 0x0b
    1d34:	41 15       	cp	r20, r1
    1d36:	51 05       	cpc	r21, r1
    1d38:	d1 f0       	breq	.+52     	; 0x1d6e <Dio_enuWriteChannel+0x194>
    1d3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d3e:	81 30       	cpi	r24, 0x01	; 1
    1d40:	91 05       	cpc	r25, r1
    1d42:	09 f0       	breq	.+2      	; 0x1d46 <Dio_enuWriteChannel+0x16c>
    1d44:	c8 c0       	rjmp	.+400    	; 0x1ed6 <Dio_enuWriteChannel+0x2fc>

								case DIO_u8LEVEL_HIGH:
									SET_BIT(PORTB, LOC_u8Pin);
    1d46:	a8 e3       	ldi	r26, 0x38	; 56
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e8 e3       	ldi	r30, 0x38	; 56
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	48 2f       	mov	r20, r24
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	02 2e       	mov	r0, r18
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <Dio_enuWriteChannel+0x18a>
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	0a 94       	dec	r0
    1d66:	e2 f7       	brpl	.-8      	; 0x1d60 <Dio_enuWriteChannel+0x186>
    1d68:	84 2b       	or	r24, r20
    1d6a:	8c 93       	st	X, r24
    1d6c:	b4 c0       	rjmp	.+360    	; 0x1ed6 <Dio_enuWriteChannel+0x2fc>
									break;

								case DIO_u8LEVEL_LOW:
									CLR_BIT(PORTB, LOC_u8Pin);
    1d6e:	a8 e3       	ldi	r26, 0x38	; 56
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e8 e3       	ldi	r30, 0x38	; 56
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	48 2f       	mov	r20, r24
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	02 2e       	mov	r0, r18
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <Dio_enuWriteChannel+0x1b2>
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	0a 94       	dec	r0
    1d8e:	e2 f7       	brpl	.-8      	; 0x1d88 <Dio_enuWriteChannel+0x1ae>
    1d90:	80 95       	com	r24
    1d92:	84 23       	and	r24, r20
    1d94:	8c 93       	st	X, r24
    1d96:	9f c0       	rjmp	.+318    	; 0x1ed6 <Dio_enuWriteChannel+0x2fc>
									break;

								}
							} else {
								LOCEnumReturnState = Dio_DirectionError;
    1d98:	83 e0       	ldi	r24, 0x03	; 3
    1d9a:	8b 83       	std	Y+3, r24	; 0x03
    1d9c:	9c c0       	rjmp	.+312    	; 0x1ed6 <Dio_enuWriteChannel+0x2fc>
							}
							break;

			case DIO_u8PORTC:
							if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
    1d9e:	e4 e3       	ldi	r30, 0x34	; 52
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	88 2f       	mov	r24, r24
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	a9 01       	movw	r20, r18
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <Dio_enuWriteChannel+0x1dc>
    1db2:	55 95       	asr	r21
    1db4:	47 95       	ror	r20
    1db6:	8a 95       	dec	r24
    1db8:	e2 f7       	brpl	.-8      	; 0x1db2 <Dio_enuWriteChannel+0x1d8>
    1dba:	ca 01       	movw	r24, r20
    1dbc:	81 70       	andi	r24, 0x01	; 1
    1dbe:	90 70       	andi	r25, 0x00	; 0
    1dc0:	88 23       	and	r24, r24
    1dc2:	c9 f1       	breq	.+114    	; 0x1e36 <Dio_enuWriteChannel+0x25c>
								switch (Copy_u8Level) {
    1dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	39 87       	std	Y+9, r19	; 0x09
    1dcc:	28 87       	std	Y+8, r18	; 0x08
    1dce:	48 85       	ldd	r20, Y+8	; 0x08
    1dd0:	59 85       	ldd	r21, Y+9	; 0x09
    1dd2:	41 15       	cp	r20, r1
    1dd4:	51 05       	cpc	r21, r1
    1dd6:	d1 f0       	breq	.+52     	; 0x1e0c <Dio_enuWriteChannel+0x232>
    1dd8:	88 85       	ldd	r24, Y+8	; 0x08
    1dda:	99 85       	ldd	r25, Y+9	; 0x09
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	91 05       	cpc	r25, r1
    1de0:	09 f0       	breq	.+2      	; 0x1de4 <Dio_enuWriteChannel+0x20a>
    1de2:	79 c0       	rjmp	.+242    	; 0x1ed6 <Dio_enuWriteChannel+0x2fc>

								case DIO_u8LEVEL_HIGH:
									SET_BIT(PORTC, LOC_u8Pin);
    1de4:	a5 e3       	ldi	r26, 0x35	; 53
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e5 e3       	ldi	r30, 0x35	; 53
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	48 2f       	mov	r20, r24
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	02 2e       	mov	r0, r18
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <Dio_enuWriteChannel+0x228>
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	0a 94       	dec	r0
    1e04:	e2 f7       	brpl	.-8      	; 0x1dfe <Dio_enuWriteChannel+0x224>
    1e06:	84 2b       	or	r24, r20
    1e08:	8c 93       	st	X, r24
    1e0a:	65 c0       	rjmp	.+202    	; 0x1ed6 <Dio_enuWriteChannel+0x2fc>
									break;

								case DIO_u8LEVEL_LOW:
									CLR_BIT(PORTC, LOC_u8Pin);
    1e0c:	a5 e3       	ldi	r26, 0x35	; 53
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e5 e3       	ldi	r30, 0x35	; 53
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	48 2f       	mov	r20, r24
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	02 2e       	mov	r0, r18
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <Dio_enuWriteChannel+0x250>
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	0a 94       	dec	r0
    1e2c:	e2 f7       	brpl	.-8      	; 0x1e26 <Dio_enuWriteChannel+0x24c>
    1e2e:	80 95       	com	r24
    1e30:	84 23       	and	r24, r20
    1e32:	8c 93       	st	X, r24
    1e34:	50 c0       	rjmp	.+160    	; 0x1ed6 <Dio_enuWriteChannel+0x2fc>
									break;

								}
							} else {
								LOCEnumReturnState = Dio_DirectionError;
    1e36:	83 e0       	ldi	r24, 0x03	; 3
    1e38:	8b 83       	std	Y+3, r24	; 0x03
    1e3a:	4d c0       	rjmp	.+154    	; 0x1ed6 <Dio_enuWriteChannel+0x2fc>
							}
							break;
			case DIO_u8PORTD:
							if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
    1e3c:	e1 e3       	ldi	r30, 0x31	; 49
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	88 2f       	mov	r24, r24
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	a9 01       	movw	r20, r18
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <Dio_enuWriteChannel+0x27a>
    1e50:	55 95       	asr	r21
    1e52:	47 95       	ror	r20
    1e54:	8a 95       	dec	r24
    1e56:	e2 f7       	brpl	.-8      	; 0x1e50 <Dio_enuWriteChannel+0x276>
    1e58:	ca 01       	movw	r24, r20
    1e5a:	81 70       	andi	r24, 0x01	; 1
    1e5c:	90 70       	andi	r25, 0x00	; 0
    1e5e:	88 23       	and	r24, r24
    1e60:	c1 f1       	breq	.+112    	; 0x1ed2 <Dio_enuWriteChannel+0x2f8>
								switch (Copy_u8Level) {
    1e62:	8d 81       	ldd	r24, Y+5	; 0x05
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	3f 83       	std	Y+7, r19	; 0x07
    1e6a:	2e 83       	std	Y+6, r18	; 0x06
    1e6c:	4e 81       	ldd	r20, Y+6	; 0x06
    1e6e:	5f 81       	ldd	r21, Y+7	; 0x07
    1e70:	41 15       	cp	r20, r1
    1e72:	51 05       	cpc	r21, r1
    1e74:	c9 f0       	breq	.+50     	; 0x1ea8 <Dio_enuWriteChannel+0x2ce>
    1e76:	8e 81       	ldd	r24, Y+6	; 0x06
    1e78:	9f 81       	ldd	r25, Y+7	; 0x07
    1e7a:	81 30       	cpi	r24, 0x01	; 1
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	59 f5       	brne	.+86     	; 0x1ed6 <Dio_enuWriteChannel+0x2fc>

								case DIO_u8LEVEL_HIGH:
									SET_BIT(PORTD, LOC_u8Pin);
    1e80:	a2 e3       	ldi	r26, 0x32	; 50
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e2 e3       	ldi	r30, 0x32	; 50
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	48 2f       	mov	r20, r24
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	02 2e       	mov	r0, r18
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <Dio_enuWriteChannel+0x2c4>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	0a 94       	dec	r0
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <Dio_enuWriteChannel+0x2c0>
    1ea2:	84 2b       	or	r24, r20
    1ea4:	8c 93       	st	X, r24
    1ea6:	17 c0       	rjmp	.+46     	; 0x1ed6 <Dio_enuWriteChannel+0x2fc>
									break;

								case DIO_u8LEVEL_LOW:
									CLR_BIT(PORTD, LOC_u8Pin);
    1ea8:	a2 e3       	ldi	r26, 0x32	; 50
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e2 e3       	ldi	r30, 0x32	; 50
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	48 2f       	mov	r20, r24
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	02 2e       	mov	r0, r18
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <Dio_enuWriteChannel+0x2ec>
    1ec2:	88 0f       	add	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	0a 94       	dec	r0
    1ec8:	e2 f7       	brpl	.-8      	; 0x1ec2 <Dio_enuWriteChannel+0x2e8>
    1eca:	80 95       	com	r24
    1ecc:	84 23       	and	r24, r20
    1ece:	8c 93       	st	X, r24
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <Dio_enuWriteChannel+0x2fc>
									break;

								}
							} else {
								LOCEnumReturnState = Dio_DirectionError;
    1ed2:	83 e0       	ldi	r24, 0x03	; 3
    1ed4:	8b 83       	std	Y+3, r24	; 0x03
							}
							break;
	}
	}
return LOCEnumReturnState;
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1ed8:	2f 96       	adiw	r28, 0x0f	; 15
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	08 95       	ret

00001eea <Dio_enuReadChannel>:
Dio_EnumErrorState  Dio_enuReadChannel(u8 Copy_u8ChannelId , pu8 Add_pu8ChannelLevel){
    1eea:	df 93       	push	r29
    1eec:	cf 93       	push	r28
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	28 97       	sbiw	r28, 0x08	; 8
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	8c 83       	std	Y+4, r24	; 0x04
    1f00:	7e 83       	std	Y+6, r23	; 0x06
    1f02:	6d 83       	std	Y+5, r22	; 0x05

	Dio_EnumErrorState LOCEnumReturnState = Dio_Ok;
    1f04:	1b 82       	std	Y+3, r1	; 0x03
		u8 LOC_u8Pin;
		u8 LOC_u8Port;
	if (Add_pu8ChannelLevel== NULL){
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	19 f4       	brne	.+6      	; 0x1f14 <Dio_enuReadChannel+0x2a>
		LOCEnumReturnState =Dio_NullPointerError;
    1f0e:	84 e0       	ldi	r24, 0x04	; 4
    1f10:	8b 83       	std	Y+3, r24	; 0x03
    1f12:	d8 c0       	rjmp	.+432    	; 0x20c4 <Dio_enuReadChannel+0x1da>
	}
	else if (Copy_u8ChannelId > DIO_u8MAXNUMBER_OF_PINS){
    1f14:	8c 81       	ldd	r24, Y+4	; 0x04
    1f16:	80 32       	cpi	r24, 0x20	; 32
    1f18:	18 f0       	brcs	.+6      	; 0x1f20 <Dio_enuReadChannel+0x36>
		LOCEnumReturnState =Dio_ChannelError;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	8b 83       	std	Y+3, r24	; 0x03
    1f1e:	d2 c0       	rjmp	.+420    	; 0x20c4 <Dio_enuReadChannel+0x1da>
	}
	else{

		LOC_u8Port = Copy_u8ChannelId / DIO_u8REGISTER_SIZE;
    1f20:	8c 81       	ldd	r24, Y+4	; 0x04
    1f22:	86 95       	lsr	r24
    1f24:	86 95       	lsr	r24
    1f26:	86 95       	lsr	r24
    1f28:	89 83       	std	Y+1, r24	; 0x01
		LOC_u8Pin = Copy_u8ChannelId % DIO_u8REGISTER_SIZE;
    1f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2c:	87 70       	andi	r24, 0x07	; 7
    1f2e:	8a 83       	std	Y+2, r24	; 0x02

		switch (LOC_u8Port){
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	38 87       	std	Y+8, r19	; 0x08
    1f38:	2f 83       	std	Y+7, r18	; 0x07
    1f3a:	4f 81       	ldd	r20, Y+7	; 0x07
    1f3c:	58 85       	ldd	r21, Y+8	; 0x08
    1f3e:	41 30       	cpi	r20, 0x01	; 1
    1f40:	51 05       	cpc	r21, r1
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <Dio_enuReadChannel+0x5c>
    1f44:	42 c0       	rjmp	.+132    	; 0x1fca <Dio_enuReadChannel+0xe0>
    1f46:	8f 81       	ldd	r24, Y+7	; 0x07
    1f48:	98 85       	ldd	r25, Y+8	; 0x08
    1f4a:	82 30       	cpi	r24, 0x02	; 2
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	34 f4       	brge	.+12     	; 0x1f5c <Dio_enuReadChannel+0x72>
    1f50:	2f 81       	ldd	r18, Y+7	; 0x07
    1f52:	38 85       	ldd	r19, Y+8	; 0x08
    1f54:	21 15       	cp	r18, r1
    1f56:	31 05       	cpc	r19, r1
    1f58:	71 f0       	breq	.+28     	; 0x1f76 <Dio_enuReadChannel+0x8c>
    1f5a:	b4 c0       	rjmp	.+360    	; 0x20c4 <Dio_enuReadChannel+0x1da>
    1f5c:	4f 81       	ldd	r20, Y+7	; 0x07
    1f5e:	58 85       	ldd	r21, Y+8	; 0x08
    1f60:	42 30       	cpi	r20, 0x02	; 2
    1f62:	51 05       	cpc	r21, r1
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <Dio_enuReadChannel+0x7e>
    1f66:	5b c0       	rjmp	.+182    	; 0x201e <Dio_enuReadChannel+0x134>
    1f68:	8f 81       	ldd	r24, Y+7	; 0x07
    1f6a:	98 85       	ldd	r25, Y+8	; 0x08
    1f6c:	83 30       	cpi	r24, 0x03	; 3
    1f6e:	91 05       	cpc	r25, r1
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <Dio_enuReadChannel+0x8a>
    1f72:	7f c0       	rjmp	.+254    	; 0x2072 <Dio_enuReadChannel+0x188>
    1f74:	a7 c0       	rjmp	.+334    	; 0x20c4 <Dio_enuReadChannel+0x1da>
		case DIO_u8PORTA :
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8INPUT) {
    1f76:	ea e3       	ldi	r30, 0x3A	; 58
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	28 2f       	mov	r18, r24
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	88 2f       	mov	r24, r24
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	a9 01       	movw	r20, r18
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <Dio_enuReadChannel+0xa4>
    1f8a:	55 95       	asr	r21
    1f8c:	47 95       	ror	r20
    1f8e:	8a 95       	dec	r24
    1f90:	e2 f7       	brpl	.-8      	; 0x1f8a <Dio_enuReadChannel+0xa0>
    1f92:	ca 01       	movw	r24, r20
    1f94:	81 70       	andi	r24, 0x01	; 1
    1f96:	90 70       	andi	r25, 0x00	; 0
    1f98:	00 97       	sbiw	r24, 0x00	; 0
    1f9a:	a1 f4       	brne	.+40     	; 0x1fc4 <Dio_enuReadChannel+0xda>

					*Add_pu8ChannelLevel = GET_BIT(PINA, LOC_u8Pin);
    1f9c:	e9 e3       	ldi	r30, 0x39	; 57
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa8:	88 2f       	mov	r24, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	a9 01       	movw	r20, r18
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <Dio_enuReadChannel+0xca>
    1fb0:	55 95       	asr	r21
    1fb2:	47 95       	ror	r20
    1fb4:	8a 95       	dec	r24
    1fb6:	e2 f7       	brpl	.-8      	; 0x1fb0 <Dio_enuReadChannel+0xc6>
    1fb8:	ca 01       	movw	r24, r20
    1fba:	81 70       	andi	r24, 0x01	; 1
    1fbc:	ed 81       	ldd	r30, Y+5	; 0x05
    1fbe:	fe 81       	ldd	r31, Y+6	; 0x06
    1fc0:	80 83       	st	Z, r24
    1fc2:	80 c0       	rjmp	.+256    	; 0x20c4 <Dio_enuReadChannel+0x1da>
				}
			else {
							LOCEnumReturnState = Dio_DirectionError;
    1fc4:	83 e0       	ldi	r24, 0x03	; 3
    1fc6:	8b 83       	std	Y+3, r24	; 0x03
    1fc8:	7d c0       	rjmp	.+250    	; 0x20c4 <Dio_enuReadChannel+0x1da>
						}
						break;
		case DIO_u8PORTB :
					if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8INPUT) {
    1fca:	e7 e3       	ldi	r30, 0x37	; 55
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	28 2f       	mov	r18, r24
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	88 2f       	mov	r24, r24
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	a9 01       	movw	r20, r18
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <Dio_enuReadChannel+0xf8>
    1fde:	55 95       	asr	r21
    1fe0:	47 95       	ror	r20
    1fe2:	8a 95       	dec	r24
    1fe4:	e2 f7       	brpl	.-8      	; 0x1fde <Dio_enuReadChannel+0xf4>
    1fe6:	ca 01       	movw	r24, r20
    1fe8:	81 70       	andi	r24, 0x01	; 1
    1fea:	90 70       	andi	r25, 0x00	; 0
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	a1 f4       	brne	.+40     	; 0x2018 <Dio_enuReadChannel+0x12e>

							*Add_pu8ChannelLevel = GET_BIT(PINB, LOC_u8Pin);
    1ff0:	e6 e3       	ldi	r30, 0x36	; 54
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	88 2f       	mov	r24, r24
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	a9 01       	movw	r20, r18
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <Dio_enuReadChannel+0x11e>
    2004:	55 95       	asr	r21
    2006:	47 95       	ror	r20
    2008:	8a 95       	dec	r24
    200a:	e2 f7       	brpl	.-8      	; 0x2004 <Dio_enuReadChannel+0x11a>
    200c:	ca 01       	movw	r24, r20
    200e:	81 70       	andi	r24, 0x01	; 1
    2010:	ed 81       	ldd	r30, Y+5	; 0x05
    2012:	fe 81       	ldd	r31, Y+6	; 0x06
    2014:	80 83       	st	Z, r24
    2016:	56 c0       	rjmp	.+172    	; 0x20c4 <Dio_enuReadChannel+0x1da>
						}
					else {
									LOCEnumReturnState = Dio_DirectionError;
    2018:	83 e0       	ldi	r24, 0x03	; 3
    201a:	8b 83       	std	Y+3, r24	; 0x03
    201c:	53 c0       	rjmp	.+166    	; 0x20c4 <Dio_enuReadChannel+0x1da>
								}
								break;
		case DIO_u8PORTC :
					if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8INPUT) {
    201e:	e4 e3       	ldi	r30, 0x34	; 52
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	28 2f       	mov	r18, r24
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	88 2f       	mov	r24, r24
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	a9 01       	movw	r20, r18
    2030:	02 c0       	rjmp	.+4      	; 0x2036 <Dio_enuReadChannel+0x14c>
    2032:	55 95       	asr	r21
    2034:	47 95       	ror	r20
    2036:	8a 95       	dec	r24
    2038:	e2 f7       	brpl	.-8      	; 0x2032 <Dio_enuReadChannel+0x148>
    203a:	ca 01       	movw	r24, r20
    203c:	81 70       	andi	r24, 0x01	; 1
    203e:	90 70       	andi	r25, 0x00	; 0
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	a1 f4       	brne	.+40     	; 0x206c <Dio_enuReadChannel+0x182>

							*Add_pu8ChannelLevel = GET_BIT(PINC, LOC_u8Pin);
    2044:	e3 e3       	ldi	r30, 0x33	; 51
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	88 2f       	mov	r24, r24
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	a9 01       	movw	r20, r18
    2056:	02 c0       	rjmp	.+4      	; 0x205c <Dio_enuReadChannel+0x172>
    2058:	55 95       	asr	r21
    205a:	47 95       	ror	r20
    205c:	8a 95       	dec	r24
    205e:	e2 f7       	brpl	.-8      	; 0x2058 <Dio_enuReadChannel+0x16e>
    2060:	ca 01       	movw	r24, r20
    2062:	81 70       	andi	r24, 0x01	; 1
    2064:	ed 81       	ldd	r30, Y+5	; 0x05
    2066:	fe 81       	ldd	r31, Y+6	; 0x06
    2068:	80 83       	st	Z, r24
    206a:	2c c0       	rjmp	.+88     	; 0x20c4 <Dio_enuReadChannel+0x1da>
						}
					else {
									LOCEnumReturnState = Dio_DirectionError;
    206c:	83 e0       	ldi	r24, 0x03	; 3
    206e:	8b 83       	std	Y+3, r24	; 0x03
    2070:	29 c0       	rjmp	.+82     	; 0x20c4 <Dio_enuReadChannel+0x1da>
								}
								break;

		case DIO_u8PORTD :
					if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8INPUT) {
    2072:	e1 e3       	ldi	r30, 0x31	; 49
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	88 2f       	mov	r24, r24
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	a9 01       	movw	r20, r18
    2084:	02 c0       	rjmp	.+4      	; 0x208a <Dio_enuReadChannel+0x1a0>
    2086:	55 95       	asr	r21
    2088:	47 95       	ror	r20
    208a:	8a 95       	dec	r24
    208c:	e2 f7       	brpl	.-8      	; 0x2086 <Dio_enuReadChannel+0x19c>
    208e:	ca 01       	movw	r24, r20
    2090:	81 70       	andi	r24, 0x01	; 1
    2092:	90 70       	andi	r25, 0x00	; 0
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	a1 f4       	brne	.+40     	; 0x20c0 <Dio_enuReadChannel+0x1d6>

							*Add_pu8ChannelLevel = GET_BIT(PIND, LOC_u8Pin);
    2098:	e0 e3       	ldi	r30, 0x30	; 48
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	28 2f       	mov	r18, r24
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	8a 81       	ldd	r24, Y+2	; 0x02
    20a4:	88 2f       	mov	r24, r24
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	a9 01       	movw	r20, r18
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <Dio_enuReadChannel+0x1c6>
    20ac:	55 95       	asr	r21
    20ae:	47 95       	ror	r20
    20b0:	8a 95       	dec	r24
    20b2:	e2 f7       	brpl	.-8      	; 0x20ac <Dio_enuReadChannel+0x1c2>
    20b4:	ca 01       	movw	r24, r20
    20b6:	81 70       	andi	r24, 0x01	; 1
    20b8:	ed 81       	ldd	r30, Y+5	; 0x05
    20ba:	fe 81       	ldd	r31, Y+6	; 0x06
    20bc:	80 83       	st	Z, r24
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <Dio_enuReadChannel+0x1da>
						}
					else {
									LOCEnumReturnState = Dio_DirectionError;
    20c0:	83 e0       	ldi	r24, 0x03	; 3
    20c2:	8b 83       	std	Y+3, r24	; 0x03


		}
	}

return LOCEnumReturnState;
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    20c6:	28 96       	adiw	r28, 0x08	; 8
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	de bf       	out	0x3e, r29	; 62
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	cd bf       	out	0x3d, r28	; 61
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	08 95       	ret

000020d8 <Dio_enuWritePort>:
Dio_EnumErrorState  Dio_enuWritePort(u8 Copy_u8PortId , u8 Copy_u8Value){
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	00 d0       	rcall	.+0      	; 0x20de <Dio_enuWritePort+0x6>
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <Dio_enuWritePort+0x8>
    20e0:	0f 92       	push	r0
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	8a 83       	std	Y+2, r24	; 0x02
    20e8:	6b 83       	std	Y+3, r22	; 0x03
	Dio_EnumErrorState LOCEnumReturnState = Dio_Ok;
    20ea:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortId > DIO_u8MAXNUMBER_OF_PORTS ){
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	84 30       	cpi	r24, 0x04	; 4
    20f0:	18 f0       	brcs	.+6      	; 0x20f8 <Dio_enuWritePort+0x20>
		LOCEnumReturnState = Dio_PortRangeError;
    20f2:	85 e0       	ldi	r24, 0x05	; 5
    20f4:	89 83       	std	Y+1, r24	; 0x01
    20f6:	32 c0       	rjmp	.+100    	; 0x215c <Dio_enuWritePort+0x84>
	}
	else {
		switch (Copy_u8PortId){
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	3d 83       	std	Y+5, r19	; 0x05
    2100:	2c 83       	std	Y+4, r18	; 0x04
    2102:	8c 81       	ldd	r24, Y+4	; 0x04
    2104:	9d 81       	ldd	r25, Y+5	; 0x05
    2106:	81 30       	cpi	r24, 0x01	; 1
    2108:	91 05       	cpc	r25, r1
    210a:	d1 f0       	breq	.+52     	; 0x2140 <Dio_enuWritePort+0x68>
    210c:	2c 81       	ldd	r18, Y+4	; 0x04
    210e:	3d 81       	ldd	r19, Y+5	; 0x05
    2110:	22 30       	cpi	r18, 0x02	; 2
    2112:	31 05       	cpc	r19, r1
    2114:	2c f4       	brge	.+10     	; 0x2120 <Dio_enuWritePort+0x48>
    2116:	8c 81       	ldd	r24, Y+4	; 0x04
    2118:	9d 81       	ldd	r25, Y+5	; 0x05
    211a:	00 97       	sbiw	r24, 0x00	; 0
    211c:	61 f0       	breq	.+24     	; 0x2136 <Dio_enuWritePort+0x5e>
    211e:	1e c0       	rjmp	.+60     	; 0x215c <Dio_enuWritePort+0x84>
    2120:	2c 81       	ldd	r18, Y+4	; 0x04
    2122:	3d 81       	ldd	r19, Y+5	; 0x05
    2124:	22 30       	cpi	r18, 0x02	; 2
    2126:	31 05       	cpc	r19, r1
    2128:	81 f0       	breq	.+32     	; 0x214a <Dio_enuWritePort+0x72>
    212a:	8c 81       	ldd	r24, Y+4	; 0x04
    212c:	9d 81       	ldd	r25, Y+5	; 0x05
    212e:	83 30       	cpi	r24, 0x03	; 3
    2130:	91 05       	cpc	r25, r1
    2132:	81 f0       	breq	.+32     	; 0x2154 <Dio_enuWritePort+0x7c>
    2134:	13 c0       	rjmp	.+38     	; 0x215c <Dio_enuWritePort+0x84>
			case DIO_u8PORTA:
							ASSIGN_REG(PORTA, Copy_u8Value);
    2136:	eb e3       	ldi	r30, 0x3B	; 59
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	80 83       	st	Z, r24
    213e:	0e c0       	rjmp	.+28     	; 0x215c <Dio_enuWritePort+0x84>
							break;
			case DIO_u8PORTB:
							ASSIGN_REG(PORTB, Copy_u8Value);
    2140:	e8 e3       	ldi	r30, 0x38	; 56
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	80 83       	st	Z, r24
    2148:	09 c0       	rjmp	.+18     	; 0x215c <Dio_enuWritePort+0x84>
							break;
			case DIO_u8PORTC:
							ASSIGN_REG(PORTC, Copy_u8Value);
    214a:	e5 e3       	ldi	r30, 0x35	; 53
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	80 83       	st	Z, r24
    2152:	04 c0       	rjmp	.+8      	; 0x215c <Dio_enuWritePort+0x84>
							break;
			case DIO_u8PORTD:
						ASSIGN_REG(PORTD, Copy_u8Value);
    2154:	e2 e3       	ldi	r30, 0x32	; 50
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	80 83       	st	Z, r24


	}

}
	return LOCEnumReturnState;
    215c:	89 81       	ldd	r24, Y+1	; 0x01
}
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <Dio_enuReadPort>:
Dio_EnumErrorState  Dio_enuReadPort(u8 Copy_u8PortId , pu8 Add_pu8PortValue){
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	00 d0       	rcall	.+0      	; 0x2174 <Dio_enuReadPort+0x6>
    2174:	00 d0       	rcall	.+0      	; 0x2176 <Dio_enuReadPort+0x8>
    2176:	00 d0       	rcall	.+0      	; 0x2178 <Dio_enuReadPort+0xa>
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	8a 83       	std	Y+2, r24	; 0x02
    217e:	7c 83       	std	Y+4, r23	; 0x04
    2180:	6b 83       	std	Y+3, r22	; 0x03
	Dio_EnumErrorState LOCEnumReturnState = Dio_Ok;
    2182:	19 82       	std	Y+1, r1	; 0x01
		if (Copy_u8PortId > DIO_u8MAXNUMBER_OF_PORTS ){
    2184:	8a 81       	ldd	r24, Y+2	; 0x02
    2186:	84 30       	cpi	r24, 0x04	; 4
    2188:	10 f0       	brcs	.+4      	; 0x218e <Dio_enuReadPort+0x20>
			LOCEnumReturnState = Dio_PortRangeError;
    218a:	85 e0       	ldi	r24, 0x05	; 5
    218c:	89 83       	std	Y+1, r24	; 0x01
		}
		if(Add_pu8PortValue == NULL){
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	9c 81       	ldd	r25, Y+4	; 0x04
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	19 f4       	brne	.+6      	; 0x219c <Dio_enuReadPort+0x2e>
			LOCEnumReturnState = Dio_NullPointerError;
    2196:	84 e0       	ldi	r24, 0x04	; 4
    2198:	89 83       	std	Y+1, r24	; 0x01
    219a:	3a c0       	rjmp	.+116    	; 0x2210 <Dio_enuReadPort+0xa2>
		}
		else {
			switch (Copy_u8PortId){
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	28 2f       	mov	r18, r24
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	3e 83       	std	Y+6, r19	; 0x06
    21a4:	2d 83       	std	Y+5, r18	; 0x05
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
    21a8:	9e 81       	ldd	r25, Y+6	; 0x06
    21aa:	81 30       	cpi	r24, 0x01	; 1
    21ac:	91 05       	cpc	r25, r1
    21ae:	e1 f0       	breq	.+56     	; 0x21e8 <Dio_enuReadPort+0x7a>
    21b0:	2d 81       	ldd	r18, Y+5	; 0x05
    21b2:	3e 81       	ldd	r19, Y+6	; 0x06
    21b4:	22 30       	cpi	r18, 0x02	; 2
    21b6:	31 05       	cpc	r19, r1
    21b8:	2c f4       	brge	.+10     	; 0x21c4 <Dio_enuReadPort+0x56>
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	9e 81       	ldd	r25, Y+6	; 0x06
    21be:	00 97       	sbiw	r24, 0x00	; 0
    21c0:	61 f0       	breq	.+24     	; 0x21da <Dio_enuReadPort+0x6c>
    21c2:	26 c0       	rjmp	.+76     	; 0x2210 <Dio_enuReadPort+0xa2>
    21c4:	2d 81       	ldd	r18, Y+5	; 0x05
    21c6:	3e 81       	ldd	r19, Y+6	; 0x06
    21c8:	22 30       	cpi	r18, 0x02	; 2
    21ca:	31 05       	cpc	r19, r1
    21cc:	a1 f0       	breq	.+40     	; 0x21f6 <Dio_enuReadPort+0x88>
    21ce:	8d 81       	ldd	r24, Y+5	; 0x05
    21d0:	9e 81       	ldd	r25, Y+6	; 0x06
    21d2:	83 30       	cpi	r24, 0x03	; 3
    21d4:	91 05       	cpc	r25, r1
    21d6:	b1 f0       	breq	.+44     	; 0x2204 <Dio_enuReadPort+0x96>
    21d8:	1b c0       	rjmp	.+54     	; 0x2210 <Dio_enuReadPort+0xa2>
				case DIO_u8PORTA:
					*Add_pu8PortValue = PINA;
    21da:	e9 e3       	ldi	r30, 0x39	; 57
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	eb 81       	ldd	r30, Y+3	; 0x03
    21e2:	fc 81       	ldd	r31, Y+4	; 0x04
    21e4:	80 83       	st	Z, r24
    21e6:	14 c0       	rjmp	.+40     	; 0x2210 <Dio_enuReadPort+0xa2>
								break;
				case DIO_u8PORTB:
					*Add_pu8PortValue = PINB;
    21e8:	e6 e3       	ldi	r30, 0x36	; 54
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	eb 81       	ldd	r30, Y+3	; 0x03
    21f0:	fc 81       	ldd	r31, Y+4	; 0x04
    21f2:	80 83       	st	Z, r24
    21f4:	0d c0       	rjmp	.+26     	; 0x2210 <Dio_enuReadPort+0xa2>
								break;
				case DIO_u8PORTC:
					*Add_pu8PortValue = PINC;
    21f6:	e3 e3       	ldi	r30, 0x33	; 51
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	eb 81       	ldd	r30, Y+3	; 0x03
    21fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2200:	80 83       	st	Z, r24
    2202:	06 c0       	rjmp	.+12     	; 0x2210 <Dio_enuReadPort+0xa2>
								break;
				case DIO_u8PORTD:
					*Add_pu8PortValue = PIND;
    2204:	e0 e3       	ldi	r30, 0x30	; 48
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	eb 81       	ldd	r30, Y+3	; 0x03
    220c:	fc 81       	ldd	r31, Y+4	; 0x04
    220e:	80 83       	st	Z, r24


		}

	}
		return LOCEnumReturnState;
    2210:	89 81       	ldd	r24, Y+1	; 0x01
}
    2212:	26 96       	adiw	r28, 0x06	; 6
    2214:	0f b6       	in	r0, 0x3f	; 63
    2216:	f8 94       	cli
    2218:	de bf       	out	0x3e, r29	; 62
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	cd bf       	out	0x3d, r28	; 61
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	08 95       	ret

00002224 <Dio_enuFlipChannel>:
Dio_EnumErrorState  Dio_enuFlipChannel(u8 Copy_u8ChannelId ){
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	00 d0       	rcall	.+0      	; 0x222a <Dio_enuFlipChannel+0x6>
    222a:	00 d0       	rcall	.+0      	; 0x222c <Dio_enuFlipChannel+0x8>
    222c:	00 d0       	rcall	.+0      	; 0x222e <Dio_enuFlipChannel+0xa>
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	8c 83       	std	Y+4, r24	; 0x04

	Dio_EnumErrorState LOCEnumReturnState = Dio_Ok;
    2234:	1b 82       	std	Y+3, r1	; 0x03
		u8 LOC_u8Pin;
		u8 LOC_u8Port;
 if (Copy_u8ChannelId > DIO_u8MAXNUMBER_OF_PINS){
    2236:	8c 81       	ldd	r24, Y+4	; 0x04
    2238:	80 32       	cpi	r24, 0x20	; 32
    223a:	18 f0       	brcs	.+6      	; 0x2242 <Dio_enuFlipChannel+0x1e>
			LOCEnumReturnState =Dio_ChannelError;
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	8b 83       	std	Y+3, r24	; 0x03
    2240:	c8 c0       	rjmp	.+400    	; 0x23d2 <Dio_enuFlipChannel+0x1ae>
		}
		else{
			LOC_u8Port = Copy_u8ChannelId / DIO_u8REGISTER_SIZE;
    2242:	8c 81       	ldd	r24, Y+4	; 0x04
    2244:	86 95       	lsr	r24
    2246:	86 95       	lsr	r24
    2248:	86 95       	lsr	r24
    224a:	89 83       	std	Y+1, r24	; 0x01
			LOC_u8Pin = Copy_u8ChannelId % DIO_u8REGISTER_SIZE;
    224c:	8c 81       	ldd	r24, Y+4	; 0x04
    224e:	87 70       	andi	r24, 0x07	; 7
    2250:	8a 83       	std	Y+2, r24	; 0x02
			switch (LOC_u8Port) {
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	3e 83       	std	Y+6, r19	; 0x06
    225a:	2d 83       	std	Y+5, r18	; 0x05
    225c:	4d 81       	ldd	r20, Y+5	; 0x05
    225e:	5e 81       	ldd	r21, Y+6	; 0x06
    2260:	41 30       	cpi	r20, 0x01	; 1
    2262:	51 05       	cpc	r21, r1
    2264:	09 f4       	brne	.+2      	; 0x2268 <Dio_enuFlipChannel+0x44>
    2266:	40 c0       	rjmp	.+128    	; 0x22e8 <Dio_enuFlipChannel+0xc4>
    2268:	8d 81       	ldd	r24, Y+5	; 0x05
    226a:	9e 81       	ldd	r25, Y+6	; 0x06
    226c:	82 30       	cpi	r24, 0x02	; 2
    226e:	91 05       	cpc	r25, r1
    2270:	34 f4       	brge	.+12     	; 0x227e <Dio_enuFlipChannel+0x5a>
    2272:	2d 81       	ldd	r18, Y+5	; 0x05
    2274:	3e 81       	ldd	r19, Y+6	; 0x06
    2276:	21 15       	cp	r18, r1
    2278:	31 05       	cpc	r19, r1
    227a:	71 f0       	breq	.+28     	; 0x2298 <Dio_enuFlipChannel+0x74>
    227c:	aa c0       	rjmp	.+340    	; 0x23d2 <Dio_enuFlipChannel+0x1ae>
    227e:	4d 81       	ldd	r20, Y+5	; 0x05
    2280:	5e 81       	ldd	r21, Y+6	; 0x06
    2282:	42 30       	cpi	r20, 0x02	; 2
    2284:	51 05       	cpc	r21, r1
    2286:	09 f4       	brne	.+2      	; 0x228a <Dio_enuFlipChannel+0x66>
    2288:	57 c0       	rjmp	.+174    	; 0x2338 <Dio_enuFlipChannel+0x114>
    228a:	8d 81       	ldd	r24, Y+5	; 0x05
    228c:	9e 81       	ldd	r25, Y+6	; 0x06
    228e:	83 30       	cpi	r24, 0x03	; 3
    2290:	91 05       	cpc	r25, r1
    2292:	09 f4       	brne	.+2      	; 0x2296 <Dio_enuFlipChannel+0x72>
    2294:	78 c0       	rjmp	.+240    	; 0x2386 <Dio_enuFlipChannel+0x162>
    2296:	9d c0       	rjmp	.+314    	; 0x23d2 <Dio_enuFlipChannel+0x1ae>

					case DIO_u8PORTA:
						if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
    2298:	ea e3       	ldi	r30, 0x3A	; 58
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	88 2f       	mov	r24, r24
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a9 01       	movw	r20, r18
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <Dio_enuFlipChannel+0x8c>
    22ac:	55 95       	asr	r21
    22ae:	47 95       	ror	r20
    22b0:	8a 95       	dec	r24
    22b2:	e2 f7       	brpl	.-8      	; 0x22ac <Dio_enuFlipChannel+0x88>
    22b4:	ca 01       	movw	r24, r20
    22b6:	81 70       	andi	r24, 0x01	; 1
    22b8:	90 70       	andi	r25, 0x00	; 0
    22ba:	88 23       	and	r24, r24
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <Dio_enuFlipChannel+0x9c>
    22be:	89 c0       	rjmp	.+274    	; 0x23d2 <Dio_enuFlipChannel+0x1ae>
							TGL_BIT(PORTA,LOC_u8Pin);
    22c0:	ab e3       	ldi	r26, 0x3B	; 59
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	eb e3       	ldi	r30, 0x3B	; 59
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	48 2f       	mov	r20, r24
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	28 2f       	mov	r18, r24
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	02 2e       	mov	r0, r18
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <Dio_enuFlipChannel+0xba>
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	0a 94       	dec	r0
    22e0:	e2 f7       	brpl	.-8      	; 0x22da <Dio_enuFlipChannel+0xb6>
    22e2:	84 27       	eor	r24, r20
    22e4:	8c 93       	st	X, r24
    22e6:	75 c0       	rjmp	.+234    	; 0x23d2 <Dio_enuFlipChannel+0x1ae>

						}
						break;

					case DIO_u8PORTB:
						if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
    22e8:	e7 e3       	ldi	r30, 0x37	; 55
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	28 2f       	mov	r18, r24
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	8a 81       	ldd	r24, Y+2	; 0x02
    22f4:	88 2f       	mov	r24, r24
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	a9 01       	movw	r20, r18
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <Dio_enuFlipChannel+0xdc>
    22fc:	55 95       	asr	r21
    22fe:	47 95       	ror	r20
    2300:	8a 95       	dec	r24
    2302:	e2 f7       	brpl	.-8      	; 0x22fc <Dio_enuFlipChannel+0xd8>
    2304:	ca 01       	movw	r24, r20
    2306:	81 70       	andi	r24, 0x01	; 1
    2308:	90 70       	andi	r25, 0x00	; 0
    230a:	88 23       	and	r24, r24
    230c:	09 f4       	brne	.+2      	; 0x2310 <Dio_enuFlipChannel+0xec>
    230e:	61 c0       	rjmp	.+194    	; 0x23d2 <Dio_enuFlipChannel+0x1ae>
							TGL_BIT(PORTB,LOC_u8Pin);
    2310:	a8 e3       	ldi	r26, 0x38	; 56
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	e8 e3       	ldi	r30, 0x38	; 56
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	48 2f       	mov	r20, r24
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	28 2f       	mov	r18, r24
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	02 2e       	mov	r0, r18
    2328:	02 c0       	rjmp	.+4      	; 0x232e <Dio_enuFlipChannel+0x10a>
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	0a 94       	dec	r0
    2330:	e2 f7       	brpl	.-8      	; 0x232a <Dio_enuFlipChannel+0x106>
    2332:	84 27       	eor	r24, r20
    2334:	8c 93       	st	X, r24
    2336:	4d c0       	rjmp	.+154    	; 0x23d2 <Dio_enuFlipChannel+0x1ae>
						}
						break;

					case DIO_u8PORTC:

						if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
    2338:	e4 e3       	ldi	r30, 0x34	; 52
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	28 2f       	mov	r18, r24
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	88 2f       	mov	r24, r24
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	a9 01       	movw	r20, r18
    234a:	02 c0       	rjmp	.+4      	; 0x2350 <Dio_enuFlipChannel+0x12c>
    234c:	55 95       	asr	r21
    234e:	47 95       	ror	r20
    2350:	8a 95       	dec	r24
    2352:	e2 f7       	brpl	.-8      	; 0x234c <Dio_enuFlipChannel+0x128>
    2354:	ca 01       	movw	r24, r20
    2356:	81 70       	andi	r24, 0x01	; 1
    2358:	90 70       	andi	r25, 0x00	; 0
    235a:	88 23       	and	r24, r24
    235c:	d1 f1       	breq	.+116    	; 0x23d2 <Dio_enuFlipChannel+0x1ae>
							TGL_BIT(PORTC,LOC_u8Pin);
    235e:	a5 e3       	ldi	r26, 0x35	; 53
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e5 e3       	ldi	r30, 0x35	; 53
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	48 2f       	mov	r20, r24
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	28 2f       	mov	r18, r24
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	02 2e       	mov	r0, r18
    2376:	02 c0       	rjmp	.+4      	; 0x237c <Dio_enuFlipChannel+0x158>
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	0a 94       	dec	r0
    237e:	e2 f7       	brpl	.-8      	; 0x2378 <Dio_enuFlipChannel+0x154>
    2380:	84 27       	eor	r24, r20
    2382:	8c 93       	st	X, r24
    2384:	26 c0       	rjmp	.+76     	; 0x23d2 <Dio_enuFlipChannel+0x1ae>
						}
						break;

					case DIO_u8PORTD:

						if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
    2386:	e1 e3       	ldi	r30, 0x31	; 49
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	28 2f       	mov	r18, r24
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	88 2f       	mov	r24, r24
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	a9 01       	movw	r20, r18
    2398:	02 c0       	rjmp	.+4      	; 0x239e <Dio_enuFlipChannel+0x17a>
    239a:	55 95       	asr	r21
    239c:	47 95       	ror	r20
    239e:	8a 95       	dec	r24
    23a0:	e2 f7       	brpl	.-8      	; 0x239a <Dio_enuFlipChannel+0x176>
    23a2:	ca 01       	movw	r24, r20
    23a4:	81 70       	andi	r24, 0x01	; 1
    23a6:	90 70       	andi	r25, 0x00	; 0
    23a8:	88 23       	and	r24, r24
    23aa:	99 f0       	breq	.+38     	; 0x23d2 <Dio_enuFlipChannel+0x1ae>
							TGL_BIT(PORTD,LOC_u8Pin);
    23ac:	a2 e3       	ldi	r26, 0x32	; 50
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e2 e3       	ldi	r30, 0x32	; 50
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	48 2f       	mov	r20, r24
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	02 2e       	mov	r0, r18
    23c4:	02 c0       	rjmp	.+4      	; 0x23ca <Dio_enuFlipChannel+0x1a6>
    23c6:	88 0f       	add	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	0a 94       	dec	r0
    23cc:	e2 f7       	brpl	.-8      	; 0x23c6 <Dio_enuFlipChannel+0x1a2>
    23ce:	84 27       	eor	r24, r20
    23d0:	8c 93       	st	X, r24
						}
						break;
			}

		}
	return LOCEnumReturnState;
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    23d4:	26 96       	adiw	r28, 0x06	; 6
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	cd bf       	out	0x3d, r28	; 61
    23e0:	cf 91       	pop	r28
    23e2:	df 91       	pop	r29
    23e4:	08 95       	ret

000023e6 <DIO_SetNibbleValue>:
Dio_EnumErrorState  DIO_SetNibbleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value){
    23e6:	df 93       	push	r29
    23e8:	cf 93       	push	r28
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	27 97       	sbiw	r28, 0x07	; 7
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	f8 94       	cli
    23f4:	de bf       	out	0x3e, r29	; 62
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	cd bf       	out	0x3d, r28	; 61
    23fa:	8b 83       	std	Y+3, r24	; 0x03
    23fc:	6c 83       	std	Y+4, r22	; 0x04
    23fe:	4d 83       	std	Y+5, r20	; 0x05
	Dio_EnumErrorState LOCEnumReturnState = Dio_Ok;
    2400:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8Value =Copy_u8Value;
    2402:	8d 81       	ldd	r24, Y+5	; 0x05
    2404:	89 83       	std	Y+1, r24	; 0x01
		 Loc_u8Value=((Loc_u8Value&(0x0F))<<Copy_u8PinStart);
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	88 2f       	mov	r24, r24
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	9c 01       	movw	r18, r24
    240e:	2f 70       	andi	r18, 0x0F	; 15
    2410:	30 70       	andi	r19, 0x00	; 0
    2412:	8b 81       	ldd	r24, Y+3	; 0x03
    2414:	88 2f       	mov	r24, r24
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	a9 01       	movw	r20, r18
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <DIO_SetNibbleValue+0x3a>
    241c:	44 0f       	add	r20, r20
    241e:	55 1f       	adc	r21, r21
    2420:	8a 95       	dec	r24
    2422:	e2 f7       	brpl	.-8      	; 0x241c <DIO_SetNibbleValue+0x36>
    2424:	ca 01       	movw	r24, r20
    2426:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PinStart<=4)&&(Copy_u8PinStart>=0)){
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	85 30       	cpi	r24, 0x05	; 5
    242c:	08 f0       	brcs	.+2      	; 0x2430 <DIO_SetNibbleValue+0x4a>
    242e:	99 c0       	rjmp	.+306    	; 0x2562 <DIO_SetNibbleValue+0x17c>
		switch (Copy_u8PortNumber){
    2430:	8c 81       	ldd	r24, Y+4	; 0x04
    2432:	28 2f       	mov	r18, r24
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	3f 83       	std	Y+7, r19	; 0x07
    2438:	2e 83       	std	Y+6, r18	; 0x06
    243a:	4e 81       	ldd	r20, Y+6	; 0x06
    243c:	5f 81       	ldd	r21, Y+7	; 0x07
    243e:	41 30       	cpi	r20, 0x01	; 1
    2440:	51 05       	cpc	r21, r1
    2442:	a9 f1       	breq	.+106    	; 0x24ae <DIO_SetNibbleValue+0xc8>
    2444:	8e 81       	ldd	r24, Y+6	; 0x06
    2446:	9f 81       	ldd	r25, Y+7	; 0x07
    2448:	82 30       	cpi	r24, 0x02	; 2
    244a:	91 05       	cpc	r25, r1
    244c:	34 f4       	brge	.+12     	; 0x245a <DIO_SetNibbleValue+0x74>
    244e:	2e 81       	ldd	r18, Y+6	; 0x06
    2450:	3f 81       	ldd	r19, Y+7	; 0x07
    2452:	21 15       	cp	r18, r1
    2454:	31 05       	cpc	r19, r1
    2456:	71 f0       	breq	.+28     	; 0x2474 <DIO_SetNibbleValue+0x8e>
    2458:	81 c0       	rjmp	.+258    	; 0x255c <DIO_SetNibbleValue+0x176>
    245a:	4e 81       	ldd	r20, Y+6	; 0x06
    245c:	5f 81       	ldd	r21, Y+7	; 0x07
    245e:	42 30       	cpi	r20, 0x02	; 2
    2460:	51 05       	cpc	r21, r1
    2462:	09 f4       	brne	.+2      	; 0x2466 <DIO_SetNibbleValue+0x80>
    2464:	41 c0       	rjmp	.+130    	; 0x24e8 <DIO_SetNibbleValue+0x102>
    2466:	8e 81       	ldd	r24, Y+6	; 0x06
    2468:	9f 81       	ldd	r25, Y+7	; 0x07
    246a:	83 30       	cpi	r24, 0x03	; 3
    246c:	91 05       	cpc	r25, r1
    246e:	09 f4       	brne	.+2      	; 0x2472 <DIO_SetNibbleValue+0x8c>
    2470:	58 c0       	rjmp	.+176    	; 0x2522 <DIO_SetNibbleValue+0x13c>
    2472:	74 c0       	rjmp	.+232    	; 0x255c <DIO_SetNibbleValue+0x176>
		case DIO_u8PORTA :
			//mask port A
			PORTA&=(~((0x0F)<<Copy_u8PinStart));
    2474:	ab e3       	ldi	r26, 0x3B	; 59
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	eb e3       	ldi	r30, 0x3B	; 59
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	48 2f       	mov	r20, r24
    2480:	8b 81       	ldd	r24, Y+3	; 0x03
    2482:	28 2f       	mov	r18, r24
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	8f e0       	ldi	r24, 0x0F	; 15
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	02 2e       	mov	r0, r18
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <DIO_SetNibbleValue+0xac>
    248e:	88 0f       	add	r24, r24
    2490:	99 1f       	adc	r25, r25
    2492:	0a 94       	dec	r0
    2494:	e2 f7       	brpl	.-8      	; 0x248e <DIO_SetNibbleValue+0xa8>
    2496:	80 95       	com	r24
    2498:	84 23       	and	r24, r20
    249a:	8c 93       	st	X, r24
			PORTA|=Loc_u8Value;
    249c:	ab e3       	ldi	r26, 0x3B	; 59
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	eb e3       	ldi	r30, 0x3B	; 59
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	90 81       	ld	r25, Z
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	89 2b       	or	r24, r25
    24aa:	8c 93       	st	X, r24
    24ac:	5c c0       	rjmp	.+184    	; 0x2566 <DIO_SetNibbleValue+0x180>
			break;
			case DIO_u8PORTB:
				PORTB&=(~(0X0F<<Copy_u8PinStart));
    24ae:	a8 e3       	ldi	r26, 0x38	; 56
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	e8 e3       	ldi	r30, 0x38	; 56
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	48 2f       	mov	r20, r24
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	28 2f       	mov	r18, r24
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	8f e0       	ldi	r24, 0x0F	; 15
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	02 2e       	mov	r0, r18
    24c6:	02 c0       	rjmp	.+4      	; 0x24cc <DIO_SetNibbleValue+0xe6>
    24c8:	88 0f       	add	r24, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	0a 94       	dec	r0
    24ce:	e2 f7       	brpl	.-8      	; 0x24c8 <DIO_SetNibbleValue+0xe2>
    24d0:	80 95       	com	r24
    24d2:	84 23       	and	r24, r20
    24d4:	8c 93       	st	X, r24
				PORTB|=Loc_u8Value;
    24d6:	a8 e3       	ldi	r26, 0x38	; 56
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e8 e3       	ldi	r30, 0x38	; 56
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	90 81       	ld	r25, Z
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	89 2b       	or	r24, r25
    24e4:	8c 93       	st	X, r24
    24e6:	3f c0       	rjmp	.+126    	; 0x2566 <DIO_SetNibbleValue+0x180>
			break;
			case DIO_u8PORTC:
				PORTC&=(~(0X0F<<Copy_u8PinStart));
    24e8:	a5 e3       	ldi	r26, 0x35	; 53
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e5 e3       	ldi	r30, 0x35	; 53
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	48 2f       	mov	r20, r24
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	8f e0       	ldi	r24, 0x0F	; 15
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	02 2e       	mov	r0, r18
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <DIO_SetNibbleValue+0x120>
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	0a 94       	dec	r0
    2508:	e2 f7       	brpl	.-8      	; 0x2502 <DIO_SetNibbleValue+0x11c>
    250a:	80 95       	com	r24
    250c:	84 23       	and	r24, r20
    250e:	8c 93       	st	X, r24
				PORTC|=Loc_u8Value;
    2510:	a5 e3       	ldi	r26, 0x35	; 53
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	e5 e3       	ldi	r30, 0x35	; 53
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	90 81       	ld	r25, Z
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	89 2b       	or	r24, r25
    251e:	8c 93       	st	X, r24
    2520:	22 c0       	rjmp	.+68     	; 0x2566 <DIO_SetNibbleValue+0x180>
			break;
			case DIO_u8PORTD:
				PORTD&=(~(0X0F<<Copy_u8PinStart));
    2522:	a2 e3       	ldi	r26, 0x32	; 50
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e2 e3       	ldi	r30, 0x32	; 50
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	48 2f       	mov	r20, r24
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	8f e0       	ldi	r24, 0x0F	; 15
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	02 2e       	mov	r0, r18
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <DIO_SetNibbleValue+0x15a>
    253c:	88 0f       	add	r24, r24
    253e:	99 1f       	adc	r25, r25
    2540:	0a 94       	dec	r0
    2542:	e2 f7       	brpl	.-8      	; 0x253c <DIO_SetNibbleValue+0x156>
    2544:	80 95       	com	r24
    2546:	84 23       	and	r24, r20
    2548:	8c 93       	st	X, r24
				PORTD|=Loc_u8Value;
    254a:	a2 e3       	ldi	r26, 0x32	; 50
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e2 e3       	ldi	r30, 0x32	; 50
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	90 81       	ld	r25, Z
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	89 2b       	or	r24, r25
    2558:	8c 93       	st	X, r24
    255a:	05 c0       	rjmp	.+10     	; 0x2566 <DIO_SetNibbleValue+0x180>
			break;
			default:{
				LOCEnumReturnState= Dio_PortRangeError;
    255c:	85 e0       	ldi	r24, 0x05	; 5
    255e:	8a 83       	std	Y+2, r24	; 0x02
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <DIO_SetNibbleValue+0x180>

		}
		}
		else{
			/*wrong PINStartNumber*/
			LOCEnumReturnState= Dio_ChannelError;
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	8a 83       	std	Y+2, r24	; 0x02
		}


return LOCEnumReturnState;
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2568:	27 96       	adiw	r28, 0x07	; 7
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	cd bf       	out	0x3d, r28	; 61
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <ADC_Init>:
	 * 1-Set Channel
	 * 2-Start Conversion
	 * 3-Poll on ADIF flag
	 * 4-Return ADC value
	 */
void ADC_Init(void){
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
		//Set Vreference
	#if ADC_SET_VREF==VREF_AREF_PIN
		CLR_BIT(ADMUX,REFS0);
		CLR_BIT(ADMUX,REFS1);
	#elif ADC_SET_VREF==VREF_AVCC_PIN
		SET_BIT(ADMUX,REFS0);
    2582:	a7 e2       	ldi	r26, 0x27	; 39
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	e7 e2       	ldi	r30, 0x27	; 39
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	80 64       	ori	r24, 0x40	; 64
    258e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
    2590:	a7 e2       	ldi	r26, 0x27	; 39
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	e7 e2       	ldi	r30, 0x27	; 39
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	8f 77       	andi	r24, 0x7F	; 127
    259c:	8c 93       	st	X, r24
	#elif ADC_SET_PRESCALAR==PRESCALER_DIVIDE_BY_4
	CLR_BIT(ADCSRA,ADPS0);
	SET_BIT(ADCSRA,ADPS1);
	CLR_BIT(ADCSRA,ADPS2);
	#elif ADC_SET_PRESCALAR==PRESCALER_DIVIDE_BY_8
	SET_BIT(ADCSRA,ADPS0);
    259e:	a6 e2       	ldi	r26, 0x26	; 38
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e6 e2       	ldi	r30, 0x26	; 38
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	81 60       	ori	r24, 0x01	; 1
    25aa:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
    25ac:	a6 e2       	ldi	r26, 0x26	; 38
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	e6 e2       	ldi	r30, 0x26	; 38
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 81       	ld	r24, Z
    25b6:	82 60       	ori	r24, 0x02	; 2
    25b8:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADPS2);
    25ba:	a6 e2       	ldi	r26, 0x26	; 38
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	e6 e2       	ldi	r30, 0x26	; 38
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	8b 7f       	andi	r24, 0xFB	; 251
    25c6:	8c 93       	st	X, r24
	#error"Wrong Prescalar Chosen"
	#endif

	//RIGHT/Adjust
	#if ADC_SET_ADJUST_LEVEL==ADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,ADLAR);
    25c8:	a7 e2       	ldi	r26, 0x27	; 39
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	e7 e2       	ldi	r30, 0x27	; 39
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	8f 7d       	andi	r24, 0xDF	; 223
    25d4:	8c 93       	st	X, r24
	#elif ADC_SET_ADJUST_LEVEL==ADC_LEFT_ADJUST
	SET_BIT(ADMUX,ADLAR);
	#endif
	/*Enable ADC*/
	SET_BIT(ADCSRA,ADEN);
    25d6:	a6 e2       	ldi	r26, 0x26	; 38
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e6 e2       	ldi	r30, 0x26	; 38
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	80 68       	ori	r24, 0x80	; 128
    25e2:	8c 93       	st	X, r24
	}
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	08 95       	ret

000025ea <ADC_StartConversion>:

u16 ADC_StartConversion(u8 Copy_u8ADC_Channel)
	{
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <ADC_StartConversion+0x6>
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	8a 83       	std	Y+2, r24	; 0x02
		//Set Channel
		u8 Loc_u8ADC_Channel;
		 Loc_u8ADC_Channel =Copy_u8ADC_Channel&ADC_CHANNEL_INPUT_MASK;
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	8f 71       	andi	r24, 0x1F	; 31
    25fa:	89 83       	std	Y+1, r24	; 0x01
		ADMUX&=ADC_ADMUX_REG_MASK;
    25fc:	a7 e2       	ldi	r26, 0x27	; 39
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	e7 e2       	ldi	r30, 0x27	; 39
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	80 7e       	andi	r24, 0xE0	; 224
    2608:	8c 93       	st	X, r24
		ADMUX|=Loc_u8ADC_Channel;
    260a:	a7 e2       	ldi	r26, 0x27	; 39
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	e7 e2       	ldi	r30, 0x27	; 39
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	90 81       	ld	r25, Z
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	89 2b       	or	r24, r25
    2618:	8c 93       	st	X, r24
		//set global Interrupt enable flag
		GIEMode(GIE_ENABLE);
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	0e 94 76 0c 	call	0x18ec	; 0x18ec <GIEMode>

		//Start Conversion
		SET_BIT(ADCSRA,ADSC);
    2620:	a6 e2       	ldi	r26, 0x26	; 38
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	e6 e2       	ldi	r30, 0x26	; 38
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	80 64       	ori	r24, 0x40	; 64
    262c:	8c 93       	st	X, r24

		//Poll on the Flag the flag is 1 when conversion is done
		while(GET_BIT(ADCSRA,ADIF)==0);
    262e:	e6 e2       	ldi	r30, 0x26	; 38
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	82 95       	swap	r24
    2636:	8f 70       	andi	r24, 0x0F	; 15
    2638:	88 2f       	mov	r24, r24
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	81 70       	andi	r24, 0x01	; 1
    263e:	90 70       	andi	r25, 0x00	; 0
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	a9 f3       	breq	.-22     	; 0x262e <ADC_StartConversion+0x44>

		//Conversion finished
		return ADCLH;
    2644:	e4 e2       	ldi	r30, 0x24	; 36
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	91 81       	ldd	r25, Z+1	; 0x01
	}
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	cf 91       	pop	r28
    2652:	df 91       	pop	r29
    2654:	08 95       	ret

00002656 <ADC_Stop>:

void ADC_Stop(void){
    2656:	df 93       	push	r29
    2658:	cf 93       	push	r28
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADMUX,ADEN);
    265e:	a7 e2       	ldi	r26, 0x27	; 39
    2660:	b0 e0       	ldi	r27, 0x00	; 0
    2662:	e7 e2       	ldi	r30, 0x27	; 39
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	8f 77       	andi	r24, 0x7F	; 127
    266a:	8c 93       	st	X, r24
}
    266c:	cf 91       	pop	r28
    266e:	df 91       	pop	r29
    2670:	08 95       	ret

00002672 <__vector_16>:
void __vector_16(void){
    2672:	1f 92       	push	r1
    2674:	0f 92       	push	r0
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	0f 92       	push	r0
    267a:	11 24       	eor	r1, r1
    267c:	8f 93       	push	r24
    267e:	af 93       	push	r26
    2680:	bf 93       	push	r27
    2682:	ef 93       	push	r30
    2684:	ff 93       	push	r31
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62

 SET_BIT(ADCSRA ,ADSC);
    268e:	a6 e2       	ldi	r26, 0x26	; 38
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e6 e2       	ldi	r30, 0x26	; 38
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	80 64       	ori	r24, 0x40	; 64
    269a:	8c 93       	st	X, r24
}
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	ff 91       	pop	r31
    26a2:	ef 91       	pop	r30
    26a4:	bf 91       	pop	r27
    26a6:	af 91       	pop	r26
    26a8:	8f 91       	pop	r24
    26aa:	0f 90       	pop	r0
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	0f 90       	pop	r0
    26b0:	1f 90       	pop	r1
    26b2:	18 95       	reti

000026b4 <SEVENSEGMENT_Init>:
#include "SevenSegment.h"
#include "SevenSegment_cfg.h"
#include "SevenSegment_prv.h"
#include"../../MCAL/PORT/PORT.h"
#include"../../MCAL/DIO/DIO.h"
void SEVENSEGMENT_Init(SevenSeg_t* Ptr_SevenSegObj){
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	00 d0       	rcall	.+0      	; 0x26ba <SEVENSEGMENT_Init+0x6>
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <SEVENSEGMENT_Init+0x8>
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	9c 83       	std	Y+4, r25	; 0x04
    26c2:	8b 83       	std	Y+3, r24	; 0x03
	u8 pinSegement;
	u8 pinButton;
	for(pinSegement=1; pinSegement<9;pinSegement++){
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	8a 83       	std	Y+2, r24	; 0x02
    26c8:	07 c0       	rjmp	.+14     	; 0x26d8 <SEVENSEGMENT_Init+0x24>
		Port_enuSetPinDirection(pinSegement,PORT_u8OUTPUT);
    26ca:	8a 81       	ldd	r24, Y+2	; 0x02
    26cc:	61 e0       	ldi	r22, 0x01	; 1
    26ce:	0e 94 36 08 	call	0x106c	; 0x106c <Port_enuSetPinDirection>
#include"../../MCAL/PORT/PORT.h"
#include"../../MCAL/DIO/DIO.h"
void SEVENSEGMENT_Init(SevenSeg_t* Ptr_SevenSegObj){
	u8 pinSegement;
	u8 pinButton;
	for(pinSegement=1; pinSegement<9;pinSegement++){
    26d2:	8a 81       	ldd	r24, Y+2	; 0x02
    26d4:	8f 5f       	subi	r24, 0xFF	; 255
    26d6:	8a 83       	std	Y+2, r24	; 0x02
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	89 30       	cpi	r24, 0x09	; 9
    26dc:	b0 f3       	brcs	.-20     	; 0x26ca <SEVENSEGMENT_Init+0x16>
		Port_enuSetPinDirection(pinSegement,PORT_u8OUTPUT);
		}
		for(pinButton=26; pinButton<29;pinButton++){
    26de:	8a e1       	ldi	r24, 0x1A	; 26
    26e0:	89 83       	std	Y+1, r24	; 0x01
    26e2:	07 c0       	rjmp	.+14     	; 0x26f2 <SEVENSEGMENT_Init+0x3e>
			Port_enuSetPinDirection(pinButton,PORT_u8INPUT);
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	60 e0       	ldi	r22, 0x00	; 0
    26e8:	0e 94 36 08 	call	0x106c	; 0x106c <Port_enuSetPinDirection>
	u8 pinSegement;
	u8 pinButton;
	for(pinSegement=1; pinSegement<9;pinSegement++){
		Port_enuSetPinDirection(pinSegement,PORT_u8OUTPUT);
		}
		for(pinButton=26; pinButton<29;pinButton++){
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	8f 5f       	subi	r24, 0xFF	; 255
    26f0:	89 83       	std	Y+1, r24	; 0x01
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	8d 31       	cpi	r24, 0x1D	; 29
    26f6:	b0 f3       	brcs	.-20     	; 0x26e4 <SEVENSEGMENT_Init+0x30>
			Port_enuSetPinDirection(pinButton,PORT_u8INPUT);
			}

		for(pinSegement=1; pinSegement<9;pinSegement++){
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	8a 83       	std	Y+2, r24	; 0x02
    26fc:	07 c0       	rjmp	.+14     	; 0x270c <SEVENSEGMENT_Init+0x58>
			Port_enuSetPinMode(pinSegement,PORT_u8OUTPUT_HIGH);
    26fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2700:	61 e0       	ldi	r22, 0x01	; 1
    2702:	0e 94 32 09 	call	0x1264	; 0x1264 <Port_enuSetPinMode>
		}
		for(pinButton=26; pinButton<29;pinButton++){
			Port_enuSetPinDirection(pinButton,PORT_u8INPUT);
			}

		for(pinSegement=1; pinSegement<9;pinSegement++){
    2706:	8a 81       	ldd	r24, Y+2	; 0x02
    2708:	8f 5f       	subi	r24, 0xFF	; 255
    270a:	8a 83       	std	Y+2, r24	; 0x02
    270c:	8a 81       	ldd	r24, Y+2	; 0x02
    270e:	89 30       	cpi	r24, 0x09	; 9
    2710:	b0 f3       	brcs	.-20     	; 0x26fe <SEVENSEGMENT_Init+0x4a>
			Port_enuSetPinMode(pinSegement,PORT_u8OUTPUT_HIGH);
		}
		for(pinButton=26; pinButton<29;pinButton++){
    2712:	8a e1       	ldi	r24, 0x1A	; 26
    2714:	89 83       	std	Y+1, r24	; 0x01
    2716:	07 c0       	rjmp	.+14     	; 0x2726 <SEVENSEGMENT_Init+0x72>
			Port_enuSetPinMode(pinButton,PORT_u8INPUT_PULLUP);
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	63 e0       	ldi	r22, 0x03	; 3
    271c:	0e 94 32 09 	call	0x1264	; 0x1264 <Port_enuSetPinMode>
			}

		for(pinSegement=1; pinSegement<9;pinSegement++){
			Port_enuSetPinMode(pinSegement,PORT_u8OUTPUT_HIGH);
		}
		for(pinButton=26; pinButton<29;pinButton++){
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	8f 5f       	subi	r24, 0xFF	; 255
    2724:	89 83       	std	Y+1, r24	; 0x01
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	8d 31       	cpi	r24, 0x1D	; 29
    272a:	b0 f3       	brcs	.-20     	; 0x2718 <SEVENSEGMENT_Init+0x64>
			Port_enuSetPinMode(pinButton,PORT_u8INPUT_PULLUP);
			}
}
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <SEVENSEGMENT_SetMode>:
void SEVENSEGMENT_SetMode(SevenSeg_t* Ptr_SevenSegObj,u8 Copy_u8SevenSegMode){
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	00 d0       	rcall	.+0      	; 0x2740 <SEVENSEGMENT_SetMode+0x6>
    2740:	0f 92       	push	r0
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	9a 83       	std	Y+2, r25	; 0x02
    2748:	89 83       	std	Y+1, r24	; 0x01
    274a:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_u8SevenSegMode==SEVEN_SEG_ON){
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	81 30       	cpi	r24, 0x01	; 1
    2750:	39 f4       	brne	.+14     	; 0x2760 <SEVENSEGMENT_SetMode+0x26>

		Dio_enuWriteChannel(Ptr_SevenSegObj->PinEn,DIO_u8LEVEL_HIGH);
    2752:	e9 81       	ldd	r30, Y+1	; 0x01
    2754:	fa 81       	ldd	r31, Y+2	; 0x02
    2756:	81 81       	ldd	r24, Z+1	; 0x01
    2758:	61 e0       	ldi	r22, 0x01	; 1
    275a:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>
    275e:	09 c0       	rjmp	.+18     	; 0x2772 <SEVENSEGMENT_SetMode+0x38>
	}
	else if(Copy_u8SevenSegMode==SEVEN_SEG_OFF){
    2760:	8b 81       	ldd	r24, Y+3	; 0x03
    2762:	88 23       	and	r24, r24
    2764:	31 f4       	brne	.+12     	; 0x2772 <SEVENSEGMENT_SetMode+0x38>
		Dio_enuWriteChannel(Ptr_SevenSegObj->PinEn,DIO_u8LEVEL_LOW);
    2766:	e9 81       	ldd	r30, Y+1	; 0x01
    2768:	fa 81       	ldd	r31, Y+2	; 0x02
    276a:	81 81       	ldd	r24, Z+1	; 0x01
    276c:	60 e0       	ldi	r22, 0x00	; 0
    276e:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>
	else {

		// wrong Mode ordered
	}

}
    2772:	0f 90       	pop	r0
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
    2778:	cf 91       	pop	r28
    277a:	df 91       	pop	r29
    277c:	08 95       	ret

0000277e <LCDInit4BitMode>:
 *  Created on: Oct 21, 2023
 *      Author: Ismail
 */
#include "LCD.h"
#include <util/delay.h>
void LCDInit4BitMode(){
    277e:	0f 93       	push	r16
    2780:	1f 93       	push	r17
    2782:	df 93       	push	r29
    2784:	cf 93       	push	r28
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
    278a:	c6 54       	subi	r28, 0x46	; 70
    278c:	d0 40       	sbci	r29, 0x00	; 0
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	f8 94       	cli
    2792:	de bf       	out	0x3e, r29	; 62
    2794:	0f be       	out	0x3f, r0	; 63
    2796:	cd bf       	out	0x3d, r28	; 61
    2798:	fe 01       	movw	r30, r28
    279a:	ed 5b       	subi	r30, 0xBD	; 189
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	a0 ef       	ldi	r26, 0xF0	; 240
    27a4:	b1 e4       	ldi	r27, 0x41	; 65
    27a6:	80 83       	st	Z, r24
    27a8:	91 83       	std	Z+1, r25	; 0x01
    27aa:	a2 83       	std	Z+2, r26	; 0x02
    27ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ae:	8e 01       	movw	r16, r28
    27b0:	01 5c       	subi	r16, 0xC1	; 193
    27b2:	1f 4f       	sbci	r17, 0xFF	; 255
    27b4:	fe 01       	movw	r30, r28
    27b6:	ed 5b       	subi	r30, 0xBD	; 189
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	60 81       	ld	r22, Z
    27bc:	71 81       	ldd	r23, Z+1	; 0x01
    27be:	82 81       	ldd	r24, Z+2	; 0x02
    27c0:	93 81       	ldd	r25, Z+3	; 0x03
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	4a e7       	ldi	r20, 0x7A	; 122
    27c8:	55 e4       	ldi	r21, 0x45	; 69
    27ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	f8 01       	movw	r30, r16
    27d4:	80 83       	st	Z, r24
    27d6:	91 83       	std	Z+1, r25	; 0x01
    27d8:	a2 83       	std	Z+2, r26	; 0x02
    27da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27dc:	fe 01       	movw	r30, r28
    27de:	ff 96       	adiw	r30, 0x3f	; 63
    27e0:	60 81       	ld	r22, Z
    27e2:	71 81       	ldd	r23, Z+1	; 0x01
    27e4:	82 81       	ldd	r24, Z+2	; 0x02
    27e6:	93 81       	ldd	r25, Z+3	; 0x03
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	40 e8       	ldi	r20, 0x80	; 128
    27ee:	5f e3       	ldi	r21, 0x3F	; 63
    27f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27f4:	88 23       	and	r24, r24
    27f6:	2c f4       	brge	.+10     	; 0x2802 <LCDInit4BitMode+0x84>
		__ticks = 1;
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	9e af       	std	Y+62, r25	; 0x3e
    27fe:	8d af       	std	Y+61, r24	; 0x3d
    2800:	46 c0       	rjmp	.+140    	; 0x288e <LCDInit4BitMode+0x110>
	else if (__tmp > 65535)
    2802:	fe 01       	movw	r30, r28
    2804:	ff 96       	adiw	r30, 0x3f	; 63
    2806:	60 81       	ld	r22, Z
    2808:	71 81       	ldd	r23, Z+1	; 0x01
    280a:	82 81       	ldd	r24, Z+2	; 0x02
    280c:	93 81       	ldd	r25, Z+3	; 0x03
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	3f ef       	ldi	r19, 0xFF	; 255
    2812:	4f e7       	ldi	r20, 0x7F	; 127
    2814:	57 e4       	ldi	r21, 0x47	; 71
    2816:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    281a:	18 16       	cp	r1, r24
    281c:	64 f5       	brge	.+88     	; 0x2876 <LCDInit4BitMode+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    281e:	fe 01       	movw	r30, r28
    2820:	ed 5b       	subi	r30, 0xBD	; 189
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	60 81       	ld	r22, Z
    2826:	71 81       	ldd	r23, Z+1	; 0x01
    2828:	82 81       	ldd	r24, Z+2	; 0x02
    282a:	93 81       	ldd	r25, Z+3	; 0x03
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	40 e2       	ldi	r20, 0x20	; 32
    2832:	51 e4       	ldi	r21, 0x41	; 65
    2834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	bc 01       	movw	r22, r24
    283e:	cd 01       	movw	r24, r26
    2840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	9e af       	std	Y+62, r25	; 0x3e
    284a:	8d af       	std	Y+61, r24	; 0x3d
    284c:	0f c0       	rjmp	.+30     	; 0x286c <LCDInit4BitMode+0xee>
    284e:	80 e9       	ldi	r24, 0x90	; 144
    2850:	91 e0       	ldi	r25, 0x01	; 1
    2852:	9c af       	std	Y+60, r25	; 0x3c
    2854:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2856:	8b ad       	ldd	r24, Y+59	; 0x3b
    2858:	9c ad       	ldd	r25, Y+60	; 0x3c
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	f1 f7       	brne	.-4      	; 0x285a <LCDInit4BitMode+0xdc>
    285e:	9c af       	std	Y+60, r25	; 0x3c
    2860:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2862:	8d ad       	ldd	r24, Y+61	; 0x3d
    2864:	9e ad       	ldd	r25, Y+62	; 0x3e
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	9e af       	std	Y+62, r25	; 0x3e
    286a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286c:	8d ad       	ldd	r24, Y+61	; 0x3d
    286e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2870:	00 97       	sbiw	r24, 0x00	; 0
    2872:	69 f7       	brne	.-38     	; 0x284e <LCDInit4BitMode+0xd0>
    2874:	16 c0       	rjmp	.+44     	; 0x28a2 <LCDInit4BitMode+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2876:	fe 01       	movw	r30, r28
    2878:	ff 96       	adiw	r30, 0x3f	; 63
    287a:	60 81       	ld	r22, Z
    287c:	71 81       	ldd	r23, Z+1	; 0x01
    287e:	82 81       	ldd	r24, Z+2	; 0x02
    2880:	93 81       	ldd	r25, Z+3	; 0x03
    2882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	9e af       	std	Y+62, r25	; 0x3e
    288c:	8d af       	std	Y+61, r24	; 0x3d
    288e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2890:	9e ad       	ldd	r25, Y+62	; 0x3e
    2892:	9a af       	std	Y+58, r25	; 0x3a
    2894:	89 af       	std	Y+57, r24	; 0x39
    2896:	89 ad       	ldd	r24, Y+57	; 0x39
    2898:	9a ad       	ldd	r25, Y+58	; 0x3a
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	f1 f7       	brne	.-4      	; 0x289a <LCDInit4BitMode+0x11c>
    289e:	9a af       	std	Y+58, r25	; 0x3a
    28a0:	89 af       	std	Y+57, r24	; 0x39
_delay_ms(30);

//SET DIRECTION OF THE used PINS
//PORTB PIN0 to pin3 DROM 8 -11 FOR DATA, RS =PA3 ,E= PA2

Port_enuSetPinDirection(12,PORT_u8OUTPUT);
    28a2:	8c e0       	ldi	r24, 0x0C	; 12
    28a4:	61 e0       	ldi	r22, 0x01	; 1
    28a6:	0e 94 36 08 	call	0x106c	; 0x106c <Port_enuSetPinDirection>
Port_enuSetPinDirection(13,PORT_u8OUTPUT);
    28aa:	8d e0       	ldi	r24, 0x0D	; 13
    28ac:	61 e0       	ldi	r22, 0x01	; 1
    28ae:	0e 94 36 08 	call	0x106c	; 0x106c <Port_enuSetPinDirection>
Port_enuSetPinDirection(14,PORT_u8OUTPUT);
    28b2:	8e e0       	ldi	r24, 0x0E	; 14
    28b4:	61 e0       	ldi	r22, 0x01	; 1
    28b6:	0e 94 36 08 	call	0x106c	; 0x106c <Port_enuSetPinDirection>
Port_enuSetPinDirection(15,PORT_u8OUTPUT);
    28ba:	8f e0       	ldi	r24, 0x0F	; 15
    28bc:	61 e0       	ldi	r22, 0x01	; 1
    28be:	0e 94 36 08 	call	0x106c	; 0x106c <Port_enuSetPinDirection>

//SET DIRECTION OF THE CONTROL PINS
Port_enuSetPinDirection(RS,PORT_u8OUTPUT);
    28c2:	88 e0       	ldi	r24, 0x08	; 8
    28c4:	61 e0       	ldi	r22, 0x01	; 1
    28c6:	0e 94 36 08 	call	0x106c	; 0x106c <Port_enuSetPinDirection>
Port_enuSetPinDirection(RW,PORT_u8OUTPUT);
    28ca:	89 e0       	ldi	r24, 0x09	; 9
    28cc:	61 e0       	ldi	r22, 0x01	; 1
    28ce:	0e 94 36 08 	call	0x106c	; 0x106c <Port_enuSetPinDirection>
Port_enuSetPinDirection(E,PORT_u8OUTPUT);
    28d2:	8a e0       	ldi	r24, 0x0A	; 10
    28d4:	61 e0       	ldi	r22, 0x01	; 1
    28d6:	0e 94 36 08 	call	0x106c	; 0x106c <Port_enuSetPinDirection>

//START OF THE INTIALIZATION SEQUENCE
//SEND FUNCTION SET COMMAND
DIO_SetNibbleValue(LCD_PIN_START,DATA_PORT,FUNCTION_SET_MODE_COMMAND>>4);
    28da:	84 e0       	ldi	r24, 0x04	; 4
    28dc:	61 e0       	ldi	r22, 0x01	; 1
    28de:	42 e0       	ldi	r20, 0x02	; 2
    28e0:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <DIO_SetNibbleValue>
//SEND THE FALLING EDGE ENABLE
Dio_enuWriteChannel(E,DIO_u8LEVEL_HIGH);
    28e4:	8a e0       	ldi	r24, 0x0A	; 10
    28e6:	61 e0       	ldi	r22, 0x01	; 1
    28e8:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	a0 e0       	ldi	r26, 0x00	; 0
    28f2:	b0 e4       	ldi	r27, 0x40	; 64
    28f4:	8d ab       	std	Y+53, r24	; 0x35
    28f6:	9e ab       	std	Y+54, r25	; 0x36
    28f8:	af ab       	std	Y+55, r26	; 0x37
    28fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fc:	6d a9       	ldd	r22, Y+53	; 0x35
    28fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2900:	8f a9       	ldd	r24, Y+55	; 0x37
    2902:	98 ad       	ldd	r25, Y+56	; 0x38
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	4a e7       	ldi	r20, 0x7A	; 122
    290a:	55 e4       	ldi	r21, 0x45	; 69
    290c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	89 ab       	std	Y+49, r24	; 0x31
    2916:	9a ab       	std	Y+50, r25	; 0x32
    2918:	ab ab       	std	Y+51, r26	; 0x33
    291a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    291c:	69 a9       	ldd	r22, Y+49	; 0x31
    291e:	7a a9       	ldd	r23, Y+50	; 0x32
    2920:	8b a9       	ldd	r24, Y+51	; 0x33
    2922:	9c a9       	ldd	r25, Y+52	; 0x34
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e8       	ldi	r20, 0x80	; 128
    292a:	5f e3       	ldi	r21, 0x3F	; 63
    292c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2930:	88 23       	and	r24, r24
    2932:	2c f4       	brge	.+10     	; 0x293e <LCDInit4BitMode+0x1c0>
		__ticks = 1;
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	98 ab       	std	Y+48, r25	; 0x30
    293a:	8f a7       	std	Y+47, r24	; 0x2f
    293c:	3f c0       	rjmp	.+126    	; 0x29bc <LCDInit4BitMode+0x23e>
	else if (__tmp > 65535)
    293e:	69 a9       	ldd	r22, Y+49	; 0x31
    2940:	7a a9       	ldd	r23, Y+50	; 0x32
    2942:	8b a9       	ldd	r24, Y+51	; 0x33
    2944:	9c a9       	ldd	r25, Y+52	; 0x34
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	3f ef       	ldi	r19, 0xFF	; 255
    294a:	4f e7       	ldi	r20, 0x7F	; 127
    294c:	57 e4       	ldi	r21, 0x47	; 71
    294e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2952:	18 16       	cp	r1, r24
    2954:	4c f5       	brge	.+82     	; 0x29a8 <LCDInit4BitMode+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2956:	6d a9       	ldd	r22, Y+53	; 0x35
    2958:	7e a9       	ldd	r23, Y+54	; 0x36
    295a:	8f a9       	ldd	r24, Y+55	; 0x37
    295c:	98 ad       	ldd	r25, Y+56	; 0x38
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	40 e2       	ldi	r20, 0x20	; 32
    2964:	51 e4       	ldi	r21, 0x41	; 65
    2966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	bc 01       	movw	r22, r24
    2970:	cd 01       	movw	r24, r26
    2972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	98 ab       	std	Y+48, r25	; 0x30
    297c:	8f a7       	std	Y+47, r24	; 0x2f
    297e:	0f c0       	rjmp	.+30     	; 0x299e <LCDInit4BitMode+0x220>
    2980:	80 e9       	ldi	r24, 0x90	; 144
    2982:	91 e0       	ldi	r25, 0x01	; 1
    2984:	9e a7       	std	Y+46, r25	; 0x2e
    2986:	8d a7       	std	Y+45, r24	; 0x2d
    2988:	8d a5       	ldd	r24, Y+45	; 0x2d
    298a:	9e a5       	ldd	r25, Y+46	; 0x2e
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	f1 f7       	brne	.-4      	; 0x298c <LCDInit4BitMode+0x20e>
    2990:	9e a7       	std	Y+46, r25	; 0x2e
    2992:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2994:	8f a5       	ldd	r24, Y+47	; 0x2f
    2996:	98 a9       	ldd	r25, Y+48	; 0x30
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	98 ab       	std	Y+48, r25	; 0x30
    299c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299e:	8f a5       	ldd	r24, Y+47	; 0x2f
    29a0:	98 a9       	ldd	r25, Y+48	; 0x30
    29a2:	00 97       	sbiw	r24, 0x00	; 0
    29a4:	69 f7       	brne	.-38     	; 0x2980 <LCDInit4BitMode+0x202>
    29a6:	14 c0       	rjmp	.+40     	; 0x29d0 <LCDInit4BitMode+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a8:	69 a9       	ldd	r22, Y+49	; 0x31
    29aa:	7a a9       	ldd	r23, Y+50	; 0x32
    29ac:	8b a9       	ldd	r24, Y+51	; 0x33
    29ae:	9c a9       	ldd	r25, Y+52	; 0x34
    29b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	98 ab       	std	Y+48, r25	; 0x30
    29ba:	8f a7       	std	Y+47, r24	; 0x2f
    29bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    29be:	98 a9       	ldd	r25, Y+48	; 0x30
    29c0:	9c a7       	std	Y+44, r25	; 0x2c
    29c2:	8b a7       	std	Y+43, r24	; 0x2b
    29c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    29c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	f1 f7       	brne	.-4      	; 0x29c8 <LCDInit4BitMode+0x24a>
    29cc:	9c a7       	std	Y+44, r25	; 0x2c
    29ce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
Dio_enuWriteChannel(E,DIO_u8LEVEL_LOW);
    29d0:	8a e0       	ldi	r24, 0x0A	; 10
    29d2:	60 e0       	ldi	r22, 0x00	; 0
    29d4:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>

LCD_WriteCommand4Bit(FUNCTION_SET_MODE_COMMAND);
    29d8:	88 e2       	ldi	r24, 0x28	; 40
    29da:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <LCD_WriteCommand4Bit>
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	a0 e8       	ldi	r26, 0x80	; 128
    29e4:	bf e3       	ldi	r27, 0x3F	; 63
    29e6:	8f a3       	std	Y+39, r24	; 0x27
    29e8:	98 a7       	std	Y+40, r25	; 0x28
    29ea:	a9 a7       	std	Y+41, r26	; 0x29
    29ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ee:	6f a1       	ldd	r22, Y+39	; 0x27
    29f0:	78 a5       	ldd	r23, Y+40	; 0x28
    29f2:	89 a5       	ldd	r24, Y+41	; 0x29
    29f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	4a e7       	ldi	r20, 0x7A	; 122
    29fc:	55 e4       	ldi	r21, 0x45	; 69
    29fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	8b a3       	std	Y+35, r24	; 0x23
    2a08:	9c a3       	std	Y+36, r25	; 0x24
    2a0a:	ad a3       	std	Y+37, r26	; 0x25
    2a0c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a0e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a10:	7c a1       	ldd	r23, Y+36	; 0x24
    2a12:	8d a1       	ldd	r24, Y+37	; 0x25
    2a14:	9e a1       	ldd	r25, Y+38	; 0x26
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	40 e8       	ldi	r20, 0x80	; 128
    2a1c:	5f e3       	ldi	r21, 0x3F	; 63
    2a1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a22:	88 23       	and	r24, r24
    2a24:	2c f4       	brge	.+10     	; 0x2a30 <LCDInit4BitMode+0x2b2>
		__ticks = 1;
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	9a a3       	std	Y+34, r25	; 0x22
    2a2c:	89 a3       	std	Y+33, r24	; 0x21
    2a2e:	3f c0       	rjmp	.+126    	; 0x2aae <LCDInit4BitMode+0x330>
	else if (__tmp > 65535)
    2a30:	6b a1       	ldd	r22, Y+35	; 0x23
    2a32:	7c a1       	ldd	r23, Y+36	; 0x24
    2a34:	8d a1       	ldd	r24, Y+37	; 0x25
    2a36:	9e a1       	ldd	r25, Y+38	; 0x26
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	3f ef       	ldi	r19, 0xFF	; 255
    2a3c:	4f e7       	ldi	r20, 0x7F	; 127
    2a3e:	57 e4       	ldi	r21, 0x47	; 71
    2a40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a44:	18 16       	cp	r1, r24
    2a46:	4c f5       	brge	.+82     	; 0x2a9a <LCDInit4BitMode+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a48:	6f a1       	ldd	r22, Y+39	; 0x27
    2a4a:	78 a5       	ldd	r23, Y+40	; 0x28
    2a4c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	40 e2       	ldi	r20, 0x20	; 32
    2a56:	51 e4       	ldi	r21, 0x41	; 65
    2a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	bc 01       	movw	r22, r24
    2a62:	cd 01       	movw	r24, r26
    2a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	9a a3       	std	Y+34, r25	; 0x22
    2a6e:	89 a3       	std	Y+33, r24	; 0x21
    2a70:	0f c0       	rjmp	.+30     	; 0x2a90 <LCDInit4BitMode+0x312>
    2a72:	80 e9       	ldi	r24, 0x90	; 144
    2a74:	91 e0       	ldi	r25, 0x01	; 1
    2a76:	98 a3       	std	Y+32, r25	; 0x20
    2a78:	8f 8f       	std	Y+31, r24	; 0x1f
    2a7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a7c:	98 a1       	ldd	r25, Y+32	; 0x20
    2a7e:	01 97       	sbiw	r24, 0x01	; 1
    2a80:	f1 f7       	brne	.-4      	; 0x2a7e <LCDInit4BitMode+0x300>
    2a82:	98 a3       	std	Y+32, r25	; 0x20
    2a84:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a86:	89 a1       	ldd	r24, Y+33	; 0x21
    2a88:	9a a1       	ldd	r25, Y+34	; 0x22
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	9a a3       	std	Y+34, r25	; 0x22
    2a8e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a90:	89 a1       	ldd	r24, Y+33	; 0x21
    2a92:	9a a1       	ldd	r25, Y+34	; 0x22
    2a94:	00 97       	sbiw	r24, 0x00	; 0
    2a96:	69 f7       	brne	.-38     	; 0x2a72 <LCDInit4BitMode+0x2f4>
    2a98:	14 c0       	rjmp	.+40     	; 0x2ac2 <LCDInit4BitMode+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a9c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a9e:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa0:	9e a1       	ldd	r25, Y+38	; 0x26
    2aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	9a a3       	std	Y+34, r25	; 0x22
    2aac:	89 a3       	std	Y+33, r24	; 0x21
    2aae:	89 a1       	ldd	r24, Y+33	; 0x21
    2ab0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ab2:	9e 8f       	std	Y+30, r25	; 0x1e
    2ab4:	8d 8f       	std	Y+29, r24	; 0x1d
    2ab6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ab8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	f1 f7       	brne	.-4      	; 0x2aba <LCDInit4BitMode+0x33c>
    2abe:	9e 8f       	std	Y+30, r25	; 0x1e
    2ac0:	8d 8f       	std	Y+29, r24	; 0x1d
//SEND DISPLAY CONTROL COMMAND
_delay_ms(1); //SHOULD BE 39US
LCD_WriteCommand4Bit(DISPALY_ON_OFF_COMMAND);
    2ac2:	8e e0       	ldi	r24, 0x0E	; 14
    2ac4:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <LCD_WriteCommand4Bit>
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	a0 e8       	ldi	r26, 0x80	; 128
    2ace:	bf e3       	ldi	r27, 0x3F	; 63
    2ad0:	89 8f       	std	Y+25, r24	; 0x19
    2ad2:	9a 8f       	std	Y+26, r25	; 0x1a
    2ad4:	ab 8f       	std	Y+27, r26	; 0x1b
    2ad6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad8:	69 8d       	ldd	r22, Y+25	; 0x19
    2ada:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2adc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ade:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	4a e7       	ldi	r20, 0x7A	; 122
    2ae6:	55 e4       	ldi	r21, 0x45	; 69
    2ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	8d 8b       	std	Y+21, r24	; 0x15
    2af2:	9e 8b       	std	Y+22, r25	; 0x16
    2af4:	af 8b       	std	Y+23, r26	; 0x17
    2af6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2af8:	6d 89       	ldd	r22, Y+21	; 0x15
    2afa:	7e 89       	ldd	r23, Y+22	; 0x16
    2afc:	8f 89       	ldd	r24, Y+23	; 0x17
    2afe:	98 8d       	ldd	r25, Y+24	; 0x18
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	40 e8       	ldi	r20, 0x80	; 128
    2b06:	5f e3       	ldi	r21, 0x3F	; 63
    2b08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b0c:	88 23       	and	r24, r24
    2b0e:	2c f4       	brge	.+10     	; 0x2b1a <LCDInit4BitMode+0x39c>
		__ticks = 1;
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	9c 8b       	std	Y+20, r25	; 0x14
    2b16:	8b 8b       	std	Y+19, r24	; 0x13
    2b18:	3f c0       	rjmp	.+126    	; 0x2b98 <LCDInit4BitMode+0x41a>
	else if (__tmp > 65535)
    2b1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b20:	98 8d       	ldd	r25, Y+24	; 0x18
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	3f ef       	ldi	r19, 0xFF	; 255
    2b26:	4f e7       	ldi	r20, 0x7F	; 127
    2b28:	57 e4       	ldi	r21, 0x47	; 71
    2b2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b2e:	18 16       	cp	r1, r24
    2b30:	4c f5       	brge	.+82     	; 0x2b84 <LCDInit4BitMode+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b32:	69 8d       	ldd	r22, Y+25	; 0x19
    2b34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e2       	ldi	r20, 0x20	; 32
    2b40:	51 e4       	ldi	r21, 0x41	; 65
    2b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	bc 01       	movw	r22, r24
    2b4c:	cd 01       	movw	r24, r26
    2b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	9c 8b       	std	Y+20, r25	; 0x14
    2b58:	8b 8b       	std	Y+19, r24	; 0x13
    2b5a:	0f c0       	rjmp	.+30     	; 0x2b7a <LCDInit4BitMode+0x3fc>
    2b5c:	80 e9       	ldi	r24, 0x90	; 144
    2b5e:	91 e0       	ldi	r25, 0x01	; 1
    2b60:	9a 8b       	std	Y+18, r25	; 0x12
    2b62:	89 8b       	std	Y+17, r24	; 0x11
    2b64:	89 89       	ldd	r24, Y+17	; 0x11
    2b66:	9a 89       	ldd	r25, Y+18	; 0x12
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <LCDInit4BitMode+0x3ea>
    2b6c:	9a 8b       	std	Y+18, r25	; 0x12
    2b6e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b70:	8b 89       	ldd	r24, Y+19	; 0x13
    2b72:	9c 89       	ldd	r25, Y+20	; 0x14
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	9c 8b       	std	Y+20, r25	; 0x14
    2b78:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7e:	00 97       	sbiw	r24, 0x00	; 0
    2b80:	69 f7       	brne	.-38     	; 0x2b5c <LCDInit4BitMode+0x3de>
    2b82:	14 c0       	rjmp	.+40     	; 0x2bac <LCDInit4BitMode+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b84:	6d 89       	ldd	r22, Y+21	; 0x15
    2b86:	7e 89       	ldd	r23, Y+22	; 0x16
    2b88:	8f 89       	ldd	r24, Y+23	; 0x17
    2b8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	9c 8b       	std	Y+20, r25	; 0x14
    2b96:	8b 8b       	std	Y+19, r24	; 0x13
    2b98:	8b 89       	ldd	r24, Y+19	; 0x13
    2b9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b9c:	98 8b       	std	Y+16, r25	; 0x10
    2b9e:	8f 87       	std	Y+15, r24	; 0x0f
    2ba0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ba2:	98 89       	ldd	r25, Y+16	; 0x10
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	f1 f7       	brne	.-4      	; 0x2ba4 <LCDInit4BitMode+0x426>
    2ba8:	98 8b       	std	Y+16, r25	; 0x10
    2baa:	8f 87       	std	Y+15, r24	; 0x0f
//SEND CLEAR COMMAND
_delay_ms(1); //SHOULD BE 39US
LCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <LCD_WriteCommand4Bit>
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	a0 e0       	ldi	r26, 0x00	; 0
    2bb8:	b0 e4       	ldi	r27, 0x40	; 64
    2bba:	8b 87       	std	Y+11, r24	; 0x0b
    2bbc:	9c 87       	std	Y+12, r25	; 0x0c
    2bbe:	ad 87       	std	Y+13, r26	; 0x0d
    2bc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	4a e7       	ldi	r20, 0x7A	; 122
    2bd0:	55 e4       	ldi	r21, 0x45	; 69
    2bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	8f 83       	std	Y+7, r24	; 0x07
    2bdc:	98 87       	std	Y+8, r25	; 0x08
    2bde:	a9 87       	std	Y+9, r26	; 0x09
    2be0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2be2:	6f 81       	ldd	r22, Y+7	; 0x07
    2be4:	78 85       	ldd	r23, Y+8	; 0x08
    2be6:	89 85       	ldd	r24, Y+9	; 0x09
    2be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e8       	ldi	r20, 0x80	; 128
    2bf0:	5f e3       	ldi	r21, 0x3F	; 63
    2bf2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bf6:	88 23       	and	r24, r24
    2bf8:	2c f4       	brge	.+10     	; 0x2c04 <LCDInit4BitMode+0x486>
		__ticks = 1;
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	9e 83       	std	Y+6, r25	; 0x06
    2c00:	8d 83       	std	Y+5, r24	; 0x05
    2c02:	3f c0       	rjmp	.+126    	; 0x2c82 <LCDInit4BitMode+0x504>
	else if (__tmp > 65535)
    2c04:	6f 81       	ldd	r22, Y+7	; 0x07
    2c06:	78 85       	ldd	r23, Y+8	; 0x08
    2c08:	89 85       	ldd	r24, Y+9	; 0x09
    2c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	3f ef       	ldi	r19, 0xFF	; 255
    2c10:	4f e7       	ldi	r20, 0x7F	; 127
    2c12:	57 e4       	ldi	r21, 0x47	; 71
    2c14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c18:	18 16       	cp	r1, r24
    2c1a:	4c f5       	brge	.+82     	; 0x2c6e <LCDInit4BitMode+0x4f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	40 e2       	ldi	r20, 0x20	; 32
    2c2a:	51 e4       	ldi	r21, 0x41	; 65
    2c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	bc 01       	movw	r22, r24
    2c36:	cd 01       	movw	r24, r26
    2c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	9e 83       	std	Y+6, r25	; 0x06
    2c42:	8d 83       	std	Y+5, r24	; 0x05
    2c44:	0f c0       	rjmp	.+30     	; 0x2c64 <LCDInit4BitMode+0x4e6>
    2c46:	80 e9       	ldi	r24, 0x90	; 144
    2c48:	91 e0       	ldi	r25, 0x01	; 1
    2c4a:	9c 83       	std	Y+4, r25	; 0x04
    2c4c:	8b 83       	std	Y+3, r24	; 0x03
    2c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c50:	9c 81       	ldd	r25, Y+4	; 0x04
    2c52:	01 97       	sbiw	r24, 0x01	; 1
    2c54:	f1 f7       	brne	.-4      	; 0x2c52 <LCDInit4BitMode+0x4d4>
    2c56:	9c 83       	std	Y+4, r25	; 0x04
    2c58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	9e 83       	std	Y+6, r25	; 0x06
    2c62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c64:	8d 81       	ldd	r24, Y+5	; 0x05
    2c66:	9e 81       	ldd	r25, Y+6	; 0x06
    2c68:	00 97       	sbiw	r24, 0x00	; 0
    2c6a:	69 f7       	brne	.-38     	; 0x2c46 <LCDInit4BitMode+0x4c8>
    2c6c:	14 c0       	rjmp	.+40     	; 0x2c96 <LCDInit4BitMode+0x518>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c70:	78 85       	ldd	r23, Y+8	; 0x08
    2c72:	89 85       	ldd	r24, Y+9	; 0x09
    2c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	9e 83       	std	Y+6, r25	; 0x06
    2c80:	8d 83       	std	Y+5, r24	; 0x05
    2c82:	8d 81       	ldd	r24, Y+5	; 0x05
    2c84:	9e 81       	ldd	r25, Y+6	; 0x06
    2c86:	9a 83       	std	Y+2, r25	; 0x02
    2c88:	89 83       	std	Y+1, r24	; 0x01
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <LCDInit4BitMode+0x510>
    2c92:	9a 83       	std	Y+2, r25	; 0x02
    2c94:	89 83       	std	Y+1, r24	; 0x01
//SEND ENRTYMODE COMMAND
_delay_ms(2);
LCD_WriteCommand4Bit(ENTRY_MODE_COMMAND);
    2c96:	86 e0       	ldi	r24, 0x06	; 6
    2c98:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <LCD_WriteCommand4Bit>
}
    2c9c:	ca 5b       	subi	r28, 0xBA	; 186
    2c9e:	df 4f       	sbci	r29, 0xFF	; 255
    2ca0:	0f b6       	in	r0, 0x3f	; 63
    2ca2:	f8 94       	cli
    2ca4:	de bf       	out	0x3e, r29	; 62
    2ca6:	0f be       	out	0x3f, r0	; 63
    2ca8:	cd bf       	out	0x3d, r28	; 61
    2caa:	cf 91       	pop	r28
    2cac:	df 91       	pop	r29
    2cae:	1f 91       	pop	r17
    2cb0:	0f 91       	pop	r16
    2cb2:	08 95       	ret

00002cb4 <LCD_WriteCommand4Bit>:
void LCD_WriteCommand4Bit(u8 Copy_u8Command){
    2cb4:	df 93       	push	r29
    2cb6:	cf 93       	push	r28
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
    2cbc:	6d 97       	sbiw	r28, 0x1d	; 29
    2cbe:	0f b6       	in	r0, 0x3f	; 63
    2cc0:	f8 94       	cli
    2cc2:	de bf       	out	0x3e, r29	; 62
    2cc4:	0f be       	out	0x3f, r0	; 63
    2cc6:	cd bf       	out	0x3d, r28	; 61
    2cc8:	8d 8f       	std	Y+29, r24	; 0x1d
	//SET RW TO ZERO
	Dio_enuWriteChannel(RW,DIO_u8LEVEL_LOW);
    2cca:	89 e0       	ldi	r24, 0x09	; 9
    2ccc:	60 e0       	ldi	r22, 0x00	; 0
    2cce:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>
	//SET RS TO ZERO
	Dio_enuWriteChannel(RS,DIO_u8LEVEL_LOW);
    2cd2:	88 e0       	ldi	r24, 0x08	; 8
    2cd4:	60 e0       	ldi	r22, 0x00	; 0
    2cd6:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>
	//set high nibble value of command
	DIO_SetNibbleValue(LCD_PIN_START,DATA_PORT,Copy_u8Command>>4);
    2cda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cdc:	98 2f       	mov	r25, r24
    2cde:	92 95       	swap	r25
    2ce0:	9f 70       	andi	r25, 0x0F	; 15
    2ce2:	84 e0       	ldi	r24, 0x04	; 4
    2ce4:	61 e0       	ldi	r22, 0x01	; 1
    2ce6:	49 2f       	mov	r20, r25
    2ce8:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <DIO_SetNibbleValue>
	//SEND THE FALLING EDGE ENABLE
	Dio_enuWriteChannel(E,DIO_u8LEVEL_HIGH);
    2cec:	8a e0       	ldi	r24, 0x0A	; 10
    2cee:	61 e0       	ldi	r22, 0x01	; 1
    2cf0:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	a0 e0       	ldi	r26, 0x00	; 0
    2cfa:	b0 e4       	ldi	r27, 0x40	; 64
    2cfc:	89 8f       	std	Y+25, r24	; 0x19
    2cfe:	9a 8f       	std	Y+26, r25	; 0x1a
    2d00:	ab 8f       	std	Y+27, r26	; 0x1b
    2d02:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d04:	69 8d       	ldd	r22, Y+25	; 0x19
    2d06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	4a e7       	ldi	r20, 0x7A	; 122
    2d12:	55 e4       	ldi	r21, 0x45	; 69
    2d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	8d 8b       	std	Y+21, r24	; 0x15
    2d1e:	9e 8b       	std	Y+22, r25	; 0x16
    2d20:	af 8b       	std	Y+23, r26	; 0x17
    2d22:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d24:	6d 89       	ldd	r22, Y+21	; 0x15
    2d26:	7e 89       	ldd	r23, Y+22	; 0x16
    2d28:	8f 89       	ldd	r24, Y+23	; 0x17
    2d2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	40 e8       	ldi	r20, 0x80	; 128
    2d32:	5f e3       	ldi	r21, 0x3F	; 63
    2d34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d38:	88 23       	and	r24, r24
    2d3a:	2c f4       	brge	.+10     	; 0x2d46 <LCD_WriteCommand4Bit+0x92>
		__ticks = 1;
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	9c 8b       	std	Y+20, r25	; 0x14
    2d42:	8b 8b       	std	Y+19, r24	; 0x13
    2d44:	3f c0       	rjmp	.+126    	; 0x2dc4 <LCD_WriteCommand4Bit+0x110>
	else if (__tmp > 65535)
    2d46:	6d 89       	ldd	r22, Y+21	; 0x15
    2d48:	7e 89       	ldd	r23, Y+22	; 0x16
    2d4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	3f ef       	ldi	r19, 0xFF	; 255
    2d52:	4f e7       	ldi	r20, 0x7F	; 127
    2d54:	57 e4       	ldi	r21, 0x47	; 71
    2d56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d5a:	18 16       	cp	r1, r24
    2d5c:	4c f5       	brge	.+82     	; 0x2db0 <LCD_WriteCommand4Bit+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5e:	69 8d       	ldd	r22, Y+25	; 0x19
    2d60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	40 e2       	ldi	r20, 0x20	; 32
    2d6c:	51 e4       	ldi	r21, 0x41	; 65
    2d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	bc 01       	movw	r22, r24
    2d78:	cd 01       	movw	r24, r26
    2d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	9c 8b       	std	Y+20, r25	; 0x14
    2d84:	8b 8b       	std	Y+19, r24	; 0x13
    2d86:	0f c0       	rjmp	.+30     	; 0x2da6 <LCD_WriteCommand4Bit+0xf2>
    2d88:	80 e9       	ldi	r24, 0x90	; 144
    2d8a:	91 e0       	ldi	r25, 0x01	; 1
    2d8c:	9a 8b       	std	Y+18, r25	; 0x12
    2d8e:	89 8b       	std	Y+17, r24	; 0x11
    2d90:	89 89       	ldd	r24, Y+17	; 0x11
    2d92:	9a 89       	ldd	r25, Y+18	; 0x12
    2d94:	01 97       	sbiw	r24, 0x01	; 1
    2d96:	f1 f7       	brne	.-4      	; 0x2d94 <LCD_WriteCommand4Bit+0xe0>
    2d98:	9a 8b       	std	Y+18, r25	; 0x12
    2d9a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2da0:	01 97       	sbiw	r24, 0x01	; 1
    2da2:	9c 8b       	std	Y+20, r25	; 0x14
    2da4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da6:	8b 89       	ldd	r24, Y+19	; 0x13
    2da8:	9c 89       	ldd	r25, Y+20	; 0x14
    2daa:	00 97       	sbiw	r24, 0x00	; 0
    2dac:	69 f7       	brne	.-38     	; 0x2d88 <LCD_WriteCommand4Bit+0xd4>
    2dae:	14 c0       	rjmp	.+40     	; 0x2dd8 <LCD_WriteCommand4Bit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db0:	6d 89       	ldd	r22, Y+21	; 0x15
    2db2:	7e 89       	ldd	r23, Y+22	; 0x16
    2db4:	8f 89       	ldd	r24, Y+23	; 0x17
    2db6:	98 8d       	ldd	r25, Y+24	; 0x18
    2db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	9c 8b       	std	Y+20, r25	; 0x14
    2dc2:	8b 8b       	std	Y+19, r24	; 0x13
    2dc4:	8b 89       	ldd	r24, Y+19	; 0x13
    2dc6:	9c 89       	ldd	r25, Y+20	; 0x14
    2dc8:	98 8b       	std	Y+16, r25	; 0x10
    2dca:	8f 87       	std	Y+15, r24	; 0x0f
    2dcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dce:	98 89       	ldd	r25, Y+16	; 0x10
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	f1 f7       	brne	.-4      	; 0x2dd0 <LCD_WriteCommand4Bit+0x11c>
    2dd4:	98 8b       	std	Y+16, r25	; 0x10
    2dd6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	Dio_enuWriteChannel(E,DIO_u8LEVEL_LOW);
    2dd8:	8a e0       	ldi	r24, 0x0A	; 10
    2dda:	60 e0       	ldi	r22, 0x00	; 0
    2ddc:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>
	//set LOW nibble value of command
	DIO_SetNibbleValue(LCD_PIN_START,DATA_PORT,Copy_u8Command);
    2de0:	84 e0       	ldi	r24, 0x04	; 4
    2de2:	61 e0       	ldi	r22, 0x01	; 1
    2de4:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2de6:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <DIO_SetNibbleValue>
	//SEND THE FALLING EDGE ENABLE
	Dio_enuWriteChannel(E,DIO_u8LEVEL_HIGH);
    2dea:	8a e0       	ldi	r24, 0x0A	; 10
    2dec:	61 e0       	ldi	r22, 0x01	; 1
    2dee:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	a0 e0       	ldi	r26, 0x00	; 0
    2df8:	b0 e4       	ldi	r27, 0x40	; 64
    2dfa:	8b 87       	std	Y+11, r24	; 0x0b
    2dfc:	9c 87       	std	Y+12, r25	; 0x0c
    2dfe:	ad 87       	std	Y+13, r26	; 0x0d
    2e00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	4a e7       	ldi	r20, 0x7A	; 122
    2e10:	55 e4       	ldi	r21, 0x45	; 69
    2e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	8f 83       	std	Y+7, r24	; 0x07
    2e1c:	98 87       	std	Y+8, r25	; 0x08
    2e1e:	a9 87       	std	Y+9, r26	; 0x09
    2e20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e22:	6f 81       	ldd	r22, Y+7	; 0x07
    2e24:	78 85       	ldd	r23, Y+8	; 0x08
    2e26:	89 85       	ldd	r24, Y+9	; 0x09
    2e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	40 e8       	ldi	r20, 0x80	; 128
    2e30:	5f e3       	ldi	r21, 0x3F	; 63
    2e32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e36:	88 23       	and	r24, r24
    2e38:	2c f4       	brge	.+10     	; 0x2e44 <LCD_WriteCommand4Bit+0x190>
		__ticks = 1;
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	9e 83       	std	Y+6, r25	; 0x06
    2e40:	8d 83       	std	Y+5, r24	; 0x05
    2e42:	3f c0       	rjmp	.+126    	; 0x2ec2 <LCD_WriteCommand4Bit+0x20e>
	else if (__tmp > 65535)
    2e44:	6f 81       	ldd	r22, Y+7	; 0x07
    2e46:	78 85       	ldd	r23, Y+8	; 0x08
    2e48:	89 85       	ldd	r24, Y+9	; 0x09
    2e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	3f ef       	ldi	r19, 0xFF	; 255
    2e50:	4f e7       	ldi	r20, 0x7F	; 127
    2e52:	57 e4       	ldi	r21, 0x47	; 71
    2e54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e58:	18 16       	cp	r1, r24
    2e5a:	4c f5       	brge	.+82     	; 0x2eae <LCD_WriteCommand4Bit+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	40 e2       	ldi	r20, 0x20	; 32
    2e6a:	51 e4       	ldi	r21, 0x41	; 65
    2e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	bc 01       	movw	r22, r24
    2e76:	cd 01       	movw	r24, r26
    2e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	9e 83       	std	Y+6, r25	; 0x06
    2e82:	8d 83       	std	Y+5, r24	; 0x05
    2e84:	0f c0       	rjmp	.+30     	; 0x2ea4 <LCD_WriteCommand4Bit+0x1f0>
    2e86:	80 e9       	ldi	r24, 0x90	; 144
    2e88:	91 e0       	ldi	r25, 0x01	; 1
    2e8a:	9c 83       	std	Y+4, r25	; 0x04
    2e8c:	8b 83       	std	Y+3, r24	; 0x03
    2e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e90:	9c 81       	ldd	r25, Y+4	; 0x04
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	f1 f7       	brne	.-4      	; 0x2e92 <LCD_WriteCommand4Bit+0x1de>
    2e96:	9c 83       	std	Y+4, r25	; 0x04
    2e98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	9e 83       	std	Y+6, r25	; 0x06
    2ea2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea8:	00 97       	sbiw	r24, 0x00	; 0
    2eaa:	69 f7       	brne	.-38     	; 0x2e86 <LCD_WriteCommand4Bit+0x1d2>
    2eac:	14 c0       	rjmp	.+40     	; 0x2ed6 <LCD_WriteCommand4Bit+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eae:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb0:	78 85       	ldd	r23, Y+8	; 0x08
    2eb2:	89 85       	ldd	r24, Y+9	; 0x09
    2eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	9e 83       	std	Y+6, r25	; 0x06
    2ec0:	8d 83       	std	Y+5, r24	; 0x05
    2ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec6:	9a 83       	std	Y+2, r25	; 0x02
    2ec8:	89 83       	std	Y+1, r24	; 0x01
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	f1 f7       	brne	.-4      	; 0x2ece <LCD_WriteCommand4Bit+0x21a>
    2ed2:	9a 83       	std	Y+2, r25	; 0x02
    2ed4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		Dio_enuWriteChannel(E,DIO_u8LEVEL_LOW);
    2ed6:	8a e0       	ldi	r24, 0x0A	; 10
    2ed8:	60 e0       	ldi	r22, 0x00	; 0
    2eda:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>
}
    2ede:	6d 96       	adiw	r28, 0x1d	; 29
    2ee0:	0f b6       	in	r0, 0x3f	; 63
    2ee2:	f8 94       	cli
    2ee4:	de bf       	out	0x3e, r29	; 62
    2ee6:	0f be       	out	0x3f, r0	; 63
    2ee8:	cd bf       	out	0x3d, r28	; 61
    2eea:	cf 91       	pop	r28
    2eec:	df 91       	pop	r29
    2eee:	08 95       	ret

00002ef0 <LCD_WriteChar4Bit>:

/*sending this function an integer from 0 to 7 prints custom char stored in cgram*/
void LCD_WriteChar4Bit(u8 Copy_u8Data){
    2ef0:	df 93       	push	r29
    2ef2:	cf 93       	push	r28
    2ef4:	cd b7       	in	r28, 0x3d	; 61
    2ef6:	de b7       	in	r29, 0x3e	; 62
    2ef8:	6d 97       	sbiw	r28, 0x1d	; 29
    2efa:	0f b6       	in	r0, 0x3f	; 63
    2efc:	f8 94       	cli
    2efe:	de bf       	out	0x3e, r29	; 62
    2f00:	0f be       	out	0x3f, r0	; 63
    2f02:	cd bf       	out	0x3d, r28	; 61
    2f04:	8d 8f       	std	Y+29, r24	; 0x1d
	//SET RW TO low
	Dio_enuWriteChannel(RW,DIO_u8LEVEL_LOW);
    2f06:	89 e0       	ldi	r24, 0x09	; 9
    2f08:	60 e0       	ldi	r22, 0x00	; 0
    2f0a:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>
	//SET RS TO high
	Dio_enuWriteChannel(RS,DIO_u8LEVEL_HIGH);
    2f0e:	88 e0       	ldi	r24, 0x08	; 8
    2f10:	61 e0       	ldi	r22, 0x01	; 1
    2f12:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>
	//set high nibble value of DATA
	DIO_SetNibbleValue(LCD_PIN_START,DATA_PORT,Copy_u8Data>>4);
    2f16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f18:	98 2f       	mov	r25, r24
    2f1a:	92 95       	swap	r25
    2f1c:	9f 70       	andi	r25, 0x0F	; 15
    2f1e:	84 e0       	ldi	r24, 0x04	; 4
    2f20:	61 e0       	ldi	r22, 0x01	; 1
    2f22:	49 2f       	mov	r20, r25
    2f24:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <DIO_SetNibbleValue>
	//SEND THE FALLING EDGE ENABLE
	Dio_enuWriteChannel(E,DIO_u8LEVEL_HIGH);
    2f28:	8a e0       	ldi	r24, 0x0A	; 10
    2f2a:	61 e0       	ldi	r22, 0x01	; 1
    2f2c:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>
    2f30:	80 e0       	ldi	r24, 0x00	; 0
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	a0 e0       	ldi	r26, 0x00	; 0
    2f36:	b0 e4       	ldi	r27, 0x40	; 64
    2f38:	89 8f       	std	Y+25, r24	; 0x19
    2f3a:	9a 8f       	std	Y+26, r25	; 0x1a
    2f3c:	ab 8f       	std	Y+27, r26	; 0x1b
    2f3e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f40:	69 8d       	ldd	r22, Y+25	; 0x19
    2f42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	4a e7       	ldi	r20, 0x7A	; 122
    2f4e:	55 e4       	ldi	r21, 0x45	; 69
    2f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	8d 8b       	std	Y+21, r24	; 0x15
    2f5a:	9e 8b       	std	Y+22, r25	; 0x16
    2f5c:	af 8b       	std	Y+23, r26	; 0x17
    2f5e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f60:	6d 89       	ldd	r22, Y+21	; 0x15
    2f62:	7e 89       	ldd	r23, Y+22	; 0x16
    2f64:	8f 89       	ldd	r24, Y+23	; 0x17
    2f66:	98 8d       	ldd	r25, Y+24	; 0x18
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	40 e8       	ldi	r20, 0x80	; 128
    2f6e:	5f e3       	ldi	r21, 0x3F	; 63
    2f70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f74:	88 23       	and	r24, r24
    2f76:	2c f4       	brge	.+10     	; 0x2f82 <LCD_WriteChar4Bit+0x92>
		__ticks = 1;
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	9c 8b       	std	Y+20, r25	; 0x14
    2f7e:	8b 8b       	std	Y+19, r24	; 0x13
    2f80:	3f c0       	rjmp	.+126    	; 0x3000 <LCD_WriteChar4Bit+0x110>
	else if (__tmp > 65535)
    2f82:	6d 89       	ldd	r22, Y+21	; 0x15
    2f84:	7e 89       	ldd	r23, Y+22	; 0x16
    2f86:	8f 89       	ldd	r24, Y+23	; 0x17
    2f88:	98 8d       	ldd	r25, Y+24	; 0x18
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	3f ef       	ldi	r19, 0xFF	; 255
    2f8e:	4f e7       	ldi	r20, 0x7F	; 127
    2f90:	57 e4       	ldi	r21, 0x47	; 71
    2f92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f96:	18 16       	cp	r1, r24
    2f98:	4c f5       	brge	.+82     	; 0x2fec <LCD_WriteChar4Bit+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9a:	69 8d       	ldd	r22, Y+25	; 0x19
    2f9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	40 e2       	ldi	r20, 0x20	; 32
    2fa8:	51 e4       	ldi	r21, 0x41	; 65
    2faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	bc 01       	movw	r22, r24
    2fb4:	cd 01       	movw	r24, r26
    2fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	9c 8b       	std	Y+20, r25	; 0x14
    2fc0:	8b 8b       	std	Y+19, r24	; 0x13
    2fc2:	0f c0       	rjmp	.+30     	; 0x2fe2 <LCD_WriteChar4Bit+0xf2>
    2fc4:	80 e9       	ldi	r24, 0x90	; 144
    2fc6:	91 e0       	ldi	r25, 0x01	; 1
    2fc8:	9a 8b       	std	Y+18, r25	; 0x12
    2fca:	89 8b       	std	Y+17, r24	; 0x11
    2fcc:	89 89       	ldd	r24, Y+17	; 0x11
    2fce:	9a 89       	ldd	r25, Y+18	; 0x12
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <LCD_WriteChar4Bit+0xe0>
    2fd4:	9a 8b       	std	Y+18, r25	; 0x12
    2fd6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2fda:	9c 89       	ldd	r25, Y+20	; 0x14
    2fdc:	01 97       	sbiw	r24, 0x01	; 1
    2fde:	9c 8b       	std	Y+20, r25	; 0x14
    2fe0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe2:	8b 89       	ldd	r24, Y+19	; 0x13
    2fe4:	9c 89       	ldd	r25, Y+20	; 0x14
    2fe6:	00 97       	sbiw	r24, 0x00	; 0
    2fe8:	69 f7       	brne	.-38     	; 0x2fc4 <LCD_WriteChar4Bit+0xd4>
    2fea:	14 c0       	rjmp	.+40     	; 0x3014 <LCD_WriteChar4Bit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fec:	6d 89       	ldd	r22, Y+21	; 0x15
    2fee:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	9c 8b       	std	Y+20, r25	; 0x14
    2ffe:	8b 8b       	std	Y+19, r24	; 0x13
    3000:	8b 89       	ldd	r24, Y+19	; 0x13
    3002:	9c 89       	ldd	r25, Y+20	; 0x14
    3004:	98 8b       	std	Y+16, r25	; 0x10
    3006:	8f 87       	std	Y+15, r24	; 0x0f
    3008:	8f 85       	ldd	r24, Y+15	; 0x0f
    300a:	98 89       	ldd	r25, Y+16	; 0x10
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	f1 f7       	brne	.-4      	; 0x300c <LCD_WriteChar4Bit+0x11c>
    3010:	98 8b       	std	Y+16, r25	; 0x10
    3012:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	Dio_enuWriteChannel(E,DIO_u8LEVEL_LOW);
    3014:	8a e0       	ldi	r24, 0x0A	; 10
    3016:	60 e0       	ldi	r22, 0x00	; 0
    3018:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>
	//set LOW nibble value of DATA
	DIO_SetNibbleValue(LCD_PIN_START,DATA_PORT,Copy_u8Data);
    301c:	84 e0       	ldi	r24, 0x04	; 4
    301e:	61 e0       	ldi	r22, 0x01	; 1
    3020:	4d 8d       	ldd	r20, Y+29	; 0x1d
    3022:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <DIO_SetNibbleValue>
	//SEND THE FALLING EDGE ENABLE
	Dio_enuWriteChannel(E,DIO_u8LEVEL_HIGH);
    3026:	8a e0       	ldi	r24, 0x0A	; 10
    3028:	61 e0       	ldi	r22, 0x01	; 1
    302a:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>
    302e:	80 e0       	ldi	r24, 0x00	; 0
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	a0 e0       	ldi	r26, 0x00	; 0
    3034:	b0 e4       	ldi	r27, 0x40	; 64
    3036:	8b 87       	std	Y+11, r24	; 0x0b
    3038:	9c 87       	std	Y+12, r25	; 0x0c
    303a:	ad 87       	std	Y+13, r26	; 0x0d
    303c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3040:	7c 85       	ldd	r23, Y+12	; 0x0c
    3042:	8d 85       	ldd	r24, Y+13	; 0x0d
    3044:	9e 85       	ldd	r25, Y+14	; 0x0e
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	4a e7       	ldi	r20, 0x7A	; 122
    304c:	55 e4       	ldi	r21, 0x45	; 69
    304e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	8f 83       	std	Y+7, r24	; 0x07
    3058:	98 87       	std	Y+8, r25	; 0x08
    305a:	a9 87       	std	Y+9, r26	; 0x09
    305c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    305e:	6f 81       	ldd	r22, Y+7	; 0x07
    3060:	78 85       	ldd	r23, Y+8	; 0x08
    3062:	89 85       	ldd	r24, Y+9	; 0x09
    3064:	9a 85       	ldd	r25, Y+10	; 0x0a
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	40 e8       	ldi	r20, 0x80	; 128
    306c:	5f e3       	ldi	r21, 0x3F	; 63
    306e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3072:	88 23       	and	r24, r24
    3074:	2c f4       	brge	.+10     	; 0x3080 <LCD_WriteChar4Bit+0x190>
		__ticks = 1;
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	9e 83       	std	Y+6, r25	; 0x06
    307c:	8d 83       	std	Y+5, r24	; 0x05
    307e:	3f c0       	rjmp	.+126    	; 0x30fe <LCD_WriteChar4Bit+0x20e>
	else if (__tmp > 65535)
    3080:	6f 81       	ldd	r22, Y+7	; 0x07
    3082:	78 85       	ldd	r23, Y+8	; 0x08
    3084:	89 85       	ldd	r24, Y+9	; 0x09
    3086:	9a 85       	ldd	r25, Y+10	; 0x0a
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	3f ef       	ldi	r19, 0xFF	; 255
    308c:	4f e7       	ldi	r20, 0x7F	; 127
    308e:	57 e4       	ldi	r21, 0x47	; 71
    3090:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3094:	18 16       	cp	r1, r24
    3096:	4c f5       	brge	.+82     	; 0x30ea <LCD_WriteChar4Bit+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3098:	6b 85       	ldd	r22, Y+11	; 0x0b
    309a:	7c 85       	ldd	r23, Y+12	; 0x0c
    309c:	8d 85       	ldd	r24, Y+13	; 0x0d
    309e:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	40 e2       	ldi	r20, 0x20	; 32
    30a6:	51 e4       	ldi	r21, 0x41	; 65
    30a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	bc 01       	movw	r22, r24
    30b2:	cd 01       	movw	r24, r26
    30b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	9e 83       	std	Y+6, r25	; 0x06
    30be:	8d 83       	std	Y+5, r24	; 0x05
    30c0:	0f c0       	rjmp	.+30     	; 0x30e0 <LCD_WriteChar4Bit+0x1f0>
    30c2:	80 e9       	ldi	r24, 0x90	; 144
    30c4:	91 e0       	ldi	r25, 0x01	; 1
    30c6:	9c 83       	std	Y+4, r25	; 0x04
    30c8:	8b 83       	std	Y+3, r24	; 0x03
    30ca:	8b 81       	ldd	r24, Y+3	; 0x03
    30cc:	9c 81       	ldd	r25, Y+4	; 0x04
    30ce:	01 97       	sbiw	r24, 0x01	; 1
    30d0:	f1 f7       	brne	.-4      	; 0x30ce <LCD_WriteChar4Bit+0x1de>
    30d2:	9c 83       	std	Y+4, r25	; 0x04
    30d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d6:	8d 81       	ldd	r24, Y+5	; 0x05
    30d8:	9e 81       	ldd	r25, Y+6	; 0x06
    30da:	01 97       	sbiw	r24, 0x01	; 1
    30dc:	9e 83       	std	Y+6, r25	; 0x06
    30de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e0:	8d 81       	ldd	r24, Y+5	; 0x05
    30e2:	9e 81       	ldd	r25, Y+6	; 0x06
    30e4:	00 97       	sbiw	r24, 0x00	; 0
    30e6:	69 f7       	brne	.-38     	; 0x30c2 <LCD_WriteChar4Bit+0x1d2>
    30e8:	14 c0       	rjmp	.+40     	; 0x3112 <LCD_WriteChar4Bit+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ea:	6f 81       	ldd	r22, Y+7	; 0x07
    30ec:	78 85       	ldd	r23, Y+8	; 0x08
    30ee:	89 85       	ldd	r24, Y+9	; 0x09
    30f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	9e 83       	std	Y+6, r25	; 0x06
    30fc:	8d 83       	std	Y+5, r24	; 0x05
    30fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3100:	9e 81       	ldd	r25, Y+6	; 0x06
    3102:	9a 83       	std	Y+2, r25	; 0x02
    3104:	89 83       	std	Y+1, r24	; 0x01
    3106:	89 81       	ldd	r24, Y+1	; 0x01
    3108:	9a 81       	ldd	r25, Y+2	; 0x02
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	f1 f7       	brne	.-4      	; 0x310a <LCD_WriteChar4Bit+0x21a>
    310e:	9a 83       	std	Y+2, r25	; 0x02
    3110:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		Dio_enuWriteChannel(E,DIO_u8LEVEL_LOW);
    3112:	8a e0       	ldi	r24, 0x0A	; 10
    3114:	60 e0       	ldi	r22, 0x00	; 0
    3116:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>
}
    311a:	6d 96       	adiw	r28, 0x1d	; 29
    311c:	0f b6       	in	r0, 0x3f	; 63
    311e:	f8 94       	cli
    3120:	de bf       	out	0x3e, r29	; 62
    3122:	0f be       	out	0x3f, r0	; 63
    3124:	cd bf       	out	0x3d, r28	; 61
    3126:	cf 91       	pop	r28
    3128:	df 91       	pop	r29
    312a:	08 95       	ret

0000312c <LCD_WriteString>:
void LCD_WriteString(u8 *u8Copy_u8String){
    312c:	df 93       	push	r29
    312e:	cf 93       	push	r28
    3130:	00 d0       	rcall	.+0      	; 0x3132 <LCD_WriteString+0x6>
    3132:	00 d0       	rcall	.+0      	; 0x3134 <LCD_WriteString+0x8>
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	9c 83       	std	Y+4, r25	; 0x04
    313a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Loc_u8Counter=0;
    313c:	1a 82       	std	Y+2, r1	; 0x02
	u8 Copy_u8Data_SizeofString =0;
    313e:	19 82       	std	Y+1, r1	; 0x01
	for (Loc_u8Counter = 0; u8Copy_u8String[Loc_u8Counter] != '\0'; Loc_u8Counter++){
    3140:	1a 82       	std	Y+2, r1	; 0x02
    3142:	06 c0       	rjmp	.+12     	; 0x3150 <LCD_WriteString+0x24>
		Copy_u8Data_SizeofString =Loc_u8Counter+1;
    3144:	8a 81       	ldd	r24, Y+2	; 0x02
    3146:	8f 5f       	subi	r24, 0xFF	; 255
    3148:	89 83       	std	Y+1, r24	; 0x01
		Dio_enuWriteChannel(E,DIO_u8LEVEL_LOW);
}
void LCD_WriteString(u8 *u8Copy_u8String){
	u8 Loc_u8Counter=0;
	u8 Copy_u8Data_SizeofString =0;
	for (Loc_u8Counter = 0; u8Copy_u8String[Loc_u8Counter] != '\0'; Loc_u8Counter++){
    314a:	8a 81       	ldd	r24, Y+2	; 0x02
    314c:	8f 5f       	subi	r24, 0xFF	; 255
    314e:	8a 83       	std	Y+2, r24	; 0x02
    3150:	8a 81       	ldd	r24, Y+2	; 0x02
    3152:	28 2f       	mov	r18, r24
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	8b 81       	ldd	r24, Y+3	; 0x03
    3158:	9c 81       	ldd	r25, Y+4	; 0x04
    315a:	fc 01       	movw	r30, r24
    315c:	e2 0f       	add	r30, r18
    315e:	f3 1f       	adc	r31, r19
    3160:	80 81       	ld	r24, Z
    3162:	88 23       	and	r24, r24
    3164:	79 f7       	brne	.-34     	; 0x3144 <LCD_WriteString+0x18>
		Copy_u8Data_SizeofString =Loc_u8Counter+1;
	}
	if(Copy_u8Data_SizeofString>32){
    3166:	89 81       	ldd	r24, Y+1	; 0x01
    3168:	81 32       	cpi	r24, 0x21	; 33
    316a:	90 f5       	brcc	.+100    	; 0x31d0 <LCD_WriteString+0xa4>
	//print error

	}
	else{
	Loc_u8Counter =0;
    316c:	1a 82       	std	Y+2, r1	; 0x02
    316e:	2d c0       	rjmp	.+90     	; 0x31ca <LCD_WriteString+0x9e>
	while(Copy_u8Data_SizeofString>0){
		if(Loc_u8Counter<LCD_LINE_LENGTH){
    3170:	8a 81       	ldd	r24, Y+2	; 0x02
    3172:	80 31       	cpi	r24, 0x10	; 16
    3174:	90 f4       	brcc	.+36     	; 0x319a <LCD_WriteString+0x6e>
			LCD_WriteChar4Bit(u8Copy_u8String[Loc_u8Counter]);
    3176:	8a 81       	ldd	r24, Y+2	; 0x02
    3178:	28 2f       	mov	r18, r24
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	8b 81       	ldd	r24, Y+3	; 0x03
    317e:	9c 81       	ldd	r25, Y+4	; 0x04
    3180:	fc 01       	movw	r30, r24
    3182:	e2 0f       	add	r30, r18
    3184:	f3 1f       	adc	r31, r19
    3186:	80 81       	ld	r24, Z
    3188:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <LCD_WriteChar4Bit>
		     Loc_u8Counter++;
    318c:	8a 81       	ldd	r24, Y+2	; 0x02
    318e:	8f 5f       	subi	r24, 0xFF	; 255
    3190:	8a 83       	std	Y+2, r24	; 0x02
			 Copy_u8Data_SizeofString--;
    3192:	89 81       	ldd	r24, Y+1	; 0x01
    3194:	81 50       	subi	r24, 0x01	; 1
    3196:	89 83       	std	Y+1, r24	; 0x01
    3198:	18 c0       	rjmp	.+48     	; 0x31ca <LCD_WriteString+0x9e>
		}
		else{
			 LCD_SetCursorPosition(LCD_LINE_1, Loc_u8Counter-LCD_LINE_LENGTH);
    319a:	8a 81       	ldd	r24, Y+2	; 0x02
    319c:	98 2f       	mov	r25, r24
    319e:	90 51       	subi	r25, 0x10	; 16
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	69 2f       	mov	r22, r25
    31a4:	0e 94 ef 18 	call	0x31de	; 0x31de <LCD_SetCursorPosition>
			 LCD_WriteChar4Bit(u8Copy_u8String[Loc_u8Counter]);
    31a8:	8a 81       	ldd	r24, Y+2	; 0x02
    31aa:	28 2f       	mov	r18, r24
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	8b 81       	ldd	r24, Y+3	; 0x03
    31b0:	9c 81       	ldd	r25, Y+4	; 0x04
    31b2:	fc 01       	movw	r30, r24
    31b4:	e2 0f       	add	r30, r18
    31b6:	f3 1f       	adc	r31, r19
    31b8:	80 81       	ld	r24, Z
    31ba:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <LCD_WriteChar4Bit>
			 Loc_u8Counter++;
    31be:	8a 81       	ldd	r24, Y+2	; 0x02
    31c0:	8f 5f       	subi	r24, 0xFF	; 255
    31c2:	8a 83       	std	Y+2, r24	; 0x02
			 Copy_u8Data_SizeofString--;
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	81 50       	subi	r24, 0x01	; 1
    31c8:	89 83       	std	Y+1, r24	; 0x01
	//print error

	}
	else{
	Loc_u8Counter =0;
	while(Copy_u8Data_SizeofString>0){
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
    31cc:	88 23       	and	r24, r24
    31ce:	81 f6       	brne	.-96     	; 0x3170 <LCD_WriteString+0x44>
			 Copy_u8Data_SizeofString--;
		}
	}
	}

}
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	0f 90       	pop	r0
    31d8:	cf 91       	pop	r28
    31da:	df 91       	pop	r29
    31dc:	08 95       	ret

000031de <LCD_SetCursorPosition>:
void LCD_SetCursorPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    31de:	df 93       	push	r29
    31e0:	cf 93       	push	r28
    31e2:	00 d0       	rcall	.+0      	; 0x31e4 <LCD_SetCursorPosition+0x6>
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
    31e8:	89 83       	std	Y+1, r24	; 0x01
    31ea:	6a 83       	std	Y+2, r22	; 0x02
if((Copy_u8LineNumber==LCD_LINE_0)||(Copy_u8LineNumber==LCD_LINE_1))
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	88 23       	and	r24, r24
    31f0:	19 f0       	breq	.+6      	; 0x31f8 <LCD_SetCursorPosition+0x1a>
    31f2:	89 81       	ldd	r24, Y+1	; 0x01
    31f4:	81 30       	cpi	r24, 0x01	; 1
    31f6:	79 f4       	brne	.+30     	; 0x3216 <LCD_SetCursorPosition+0x38>
{
	if(Copy_u8PositionNumber<16)
    31f8:	8a 81       	ldd	r24, Y+2	; 0x02
    31fa:	80 31       	cpi	r24, 0x10	; 16
    31fc:	60 f4       	brcc	.+24     	; 0x3216 <LCD_SetCursorPosition+0x38>
	{
		if(Copy_u8LineNumber==LCD_LINE_0)
    31fe:	89 81       	ldd	r24, Y+1	; 0x01
    3200:	88 23       	and	r24, r24
    3202:	29 f4       	brne	.+10     	; 0x320e <LCD_SetCursorPosition+0x30>
		{
			LCD_WriteCommand4Bit(Copy_u8PositionNumber+LCD_LINE0_OFFSET);
    3204:	8a 81       	ldd	r24, Y+2	; 0x02
    3206:	80 58       	subi	r24, 0x80	; 128
    3208:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <LCD_WriteCommand4Bit>
    320c:	04 c0       	rjmp	.+8      	; 0x3216 <LCD_SetCursorPosition+0x38>
		}
		else
		{
			LCD_WriteCommand4Bit(Copy_u8PositionNumber+LCD_LINE1_OFFSET);
    320e:	8a 81       	ldd	r24, Y+2	; 0x02
    3210:	80 54       	subi	r24, 0x40	; 64
    3212:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <LCD_WriteCommand4Bit>
}
else
{
	//Wrong Line Chosen
}
}
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	cf 91       	pop	r28
    321c:	df 91       	pop	r29
    321e:	08 95       	ret

00003220 <LCD_WriteNumber>:
void LCD_WriteNumber(u32 Copy_u32Number)
	{
    3220:	0f 93       	push	r16
    3222:	1f 93       	push	r17
    3224:	df 93       	push	r29
    3226:	cf 93       	push	r28
    3228:	cd b7       	in	r28, 0x3d	; 61
    322a:	de b7       	in	r29, 0x3e	; 62
    322c:	60 97       	sbiw	r28, 0x10	; 16
    322e:	0f b6       	in	r0, 0x3f	; 63
    3230:	f8 94       	cli
    3232:	de bf       	out	0x3e, r29	; 62
    3234:	0f be       	out	0x3f, r0	; 63
    3236:	cd bf       	out	0x3d, r28	; 61
    3238:	6d 87       	std	Y+13, r22	; 0x0d
    323a:	7e 87       	std	Y+14, r23	; 0x0e
    323c:	8f 87       	std	Y+15, r24	; 0x0f
    323e:	98 8b       	std	Y+16, r25	; 0x10
		which is 10 digits
		 */
		u8 Loc_u8Arr_Digits[10];

		/*Define a Local Counter to traverse the array*/
		u8 Loc_Counter=0;
    3240:	1a 82       	std	Y+2, r1	; 0x02

		/*Check on the upcoming number*/
		if(Copy_u32Number>0)
    3242:	8d 85       	ldd	r24, Y+13	; 0x0d
    3244:	9e 85       	ldd	r25, Y+14	; 0x0e
    3246:	af 85       	ldd	r26, Y+15	; 0x0f
    3248:	b8 89       	ldd	r27, Y+16	; 0x10
    324a:	00 97       	sbiw	r24, 0x00	; 0
    324c:	a1 05       	cpc	r26, r1
    324e:	b1 05       	cpc	r27, r1
    3250:	09 f4       	brne	.+2      	; 0x3254 <LCD_WriteNumber+0x34>
    3252:	4f c0       	rjmp	.+158    	; 0x32f2 <LCD_WriteNumber+0xd2>
    3254:	2d c0       	rjmp	.+90     	; 0x32b0 <LCD_WriteNumber+0x90>
			/*Parsing the number into the array*/
			while(Copy_u32Number!=0) //Exit Condition means number is done parsing
			{
				//Extract the Least Significant Digit and Put it in the
				//Array
				Loc_u8Arr_Digits[Loc_Counter]=Copy_u32Number%10 ;
    3256:	8a 81       	ldd	r24, Y+2	; 0x02
    3258:	08 2f       	mov	r16, r24
    325a:	10 e0       	ldi	r17, 0x00	; 0
    325c:	8d 85       	ldd	r24, Y+13	; 0x0d
    325e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3260:	af 85       	ldd	r26, Y+15	; 0x0f
    3262:	b8 89       	ldd	r27, Y+16	; 0x10
    3264:	2a e0       	ldi	r18, 0x0A	; 10
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	40 e0       	ldi	r20, 0x00	; 0
    326a:	50 e0       	ldi	r21, 0x00	; 0
    326c:	bc 01       	movw	r22, r24
    326e:	cd 01       	movw	r24, r26
    3270:	0e 94 36 22 	call	0x446c	; 0x446c <__udivmodsi4>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	28 2f       	mov	r18, r24
    327a:	ce 01       	movw	r24, r28
    327c:	03 96       	adiw	r24, 0x03	; 3
    327e:	fc 01       	movw	r30, r24
    3280:	e0 0f       	add	r30, r16
    3282:	f1 1f       	adc	r31, r17
    3284:	20 83       	st	Z, r18

				//Removing the Extracted digit from the number
				Copy_u32Number=Copy_u32Number/10 ;
    3286:	8d 85       	ldd	r24, Y+13	; 0x0d
    3288:	9e 85       	ldd	r25, Y+14	; 0x0e
    328a:	af 85       	ldd	r26, Y+15	; 0x0f
    328c:	b8 89       	ldd	r27, Y+16	; 0x10
    328e:	2a e0       	ldi	r18, 0x0A	; 10
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	40 e0       	ldi	r20, 0x00	; 0
    3294:	50 e0       	ldi	r21, 0x00	; 0
    3296:	bc 01       	movw	r22, r24
    3298:	cd 01       	movw	r24, r26
    329a:	0e 94 36 22 	call	0x446c	; 0x446c <__udivmodsi4>
    329e:	da 01       	movw	r26, r20
    32a0:	c9 01       	movw	r24, r18
    32a2:	8d 87       	std	Y+13, r24	; 0x0d
    32a4:	9e 87       	std	Y+14, r25	; 0x0e
    32a6:	af 87       	std	Y+15, r26	; 0x0f
    32a8:	b8 8b       	std	Y+16, r27	; 0x10

				//Increasing the counter so the digits are saved in next array element
				Loc_Counter++;
    32aa:	8a 81       	ldd	r24, Y+2	; 0x02
    32ac:	8f 5f       	subi	r24, 0xFF	; 255
    32ae:	8a 83       	std	Y+2, r24	; 0x02

		/*Check on the upcoming number*/
		if(Copy_u32Number>0)
		{
			/*Parsing the number into the array*/
			while(Copy_u32Number!=0) //Exit Condition means number is done parsing
    32b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b4:	af 85       	ldd	r26, Y+15	; 0x0f
    32b6:	b8 89       	ldd	r27, Y+16	; 0x10
    32b8:	00 97       	sbiw	r24, 0x00	; 0
    32ba:	a1 05       	cpc	r26, r1
    32bc:	b1 05       	cpc	r27, r1
    32be:	59 f6       	brne	.-106    	; 0x3256 <LCD_WriteNumber+0x36>
			//in the array but backwards

			//Take Care Loc_forCounter is signed
			//because we are decrementing it
			s8 Loc_forCounter;
			for(Loc_forCounter=Loc_Counter-1;Loc_forCounter>=0;Loc_forCounter--)
    32c0:	8a 81       	ldd	r24, Y+2	; 0x02
    32c2:	81 50       	subi	r24, 0x01	; 1
    32c4:	89 83       	std	Y+1, r24	; 0x01
    32c6:	11 c0       	rjmp	.+34     	; 0x32ea <LCD_WriteNumber+0xca>
			{
				//Write the digits to the screen in their right order
				//Notice the addition of the number to the ASCII Code
				//of the number 0 because our Function takes ASCII of character
				//to Print on the LCD
				LCD_WriteChar4Bit(Loc_u8Arr_Digits[Loc_forCounter]+'0');
    32c8:	89 81       	ldd	r24, Y+1	; 0x01
    32ca:	28 2f       	mov	r18, r24
    32cc:	33 27       	eor	r19, r19
    32ce:	27 fd       	sbrc	r18, 7
    32d0:	30 95       	com	r19
    32d2:	ce 01       	movw	r24, r28
    32d4:	03 96       	adiw	r24, 0x03	; 3
    32d6:	fc 01       	movw	r30, r24
    32d8:	e2 0f       	add	r30, r18
    32da:	f3 1f       	adc	r31, r19
    32dc:	80 81       	ld	r24, Z
    32de:	80 5d       	subi	r24, 0xD0	; 208
    32e0:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <LCD_WriteChar4Bit>
			//in the array but backwards

			//Take Care Loc_forCounter is signed
			//because we are decrementing it
			s8 Loc_forCounter;
			for(Loc_forCounter=Loc_Counter-1;Loc_forCounter>=0;Loc_forCounter--)
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
    32e6:	81 50       	subi	r24, 0x01	; 1
    32e8:	89 83       	std	Y+1, r24	; 0x01
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
    32ec:	88 23       	and	r24, r24
    32ee:	64 f7       	brge	.-40     	; 0x32c8 <LCD_WriteNumber+0xa8>
    32f0:	03 c0       	rjmp	.+6      	; 0x32f8 <LCD_WriteNumber+0xd8>

		}
		else
		{
			/*if the number is zero so we have to send ASCII Code of Zero*/
			LCD_WriteChar4Bit('0');
    32f2:	80 e3       	ldi	r24, 0x30	; 48
    32f4:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <LCD_WriteChar4Bit>
		}

	}
    32f8:	60 96       	adiw	r28, 0x10	; 16
    32fa:	0f b6       	in	r0, 0x3f	; 63
    32fc:	f8 94       	cli
    32fe:	de bf       	out	0x3e, r29	; 62
    3300:	0f be       	out	0x3f, r0	; 63
    3302:	cd bf       	out	0x3d, r28	; 61
    3304:	cf 91       	pop	r28
    3306:	df 91       	pop	r29
    3308:	1f 91       	pop	r17
    330a:	0f 91       	pop	r16
    330c:	08 95       	ret

0000330e <LCD_CustomChar>:
void LCD_CustomChar (pu8 AddCustomChar,u8 index)
{
    330e:	df 93       	push	r29
    3310:	cf 93       	push	r28
    3312:	00 d0       	rcall	.+0      	; 0x3314 <LCD_CustomChar+0x6>
    3314:	00 d0       	rcall	.+0      	; 0x3316 <LCD_CustomChar+0x8>
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	9b 83       	std	Y+3, r25	; 0x03
    331c:	8a 83       	std	Y+2, r24	; 0x02
    331e:	6c 83       	std	Y+4, r22	; 0x04
    u8 Localu8Counter;
    if(index<8)
    3320:	8c 81       	ldd	r24, Y+4	; 0x04
    3322:	88 30       	cpi	r24, 0x08	; 8
    3324:	f8 f4       	brcc	.+62     	; 0x3364 <LCD_CustomChar+0x56>
    {
    	LCD_WriteCommand4Bit (0x40 + (index*8));  /* Command 0x40 and onwards forces
    3326:	8c 81       	ldd	r24, Y+4	; 0x04
    3328:	88 2f       	mov	r24, r24
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	08 96       	adiw	r24, 0x08	; 8
    332e:	88 0f       	add	r24, r24
    3330:	99 1f       	adc	r25, r25
    3332:	88 0f       	add	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	88 0f       	add	r24, r24
    3338:	99 1f       	adc	r25, r25
    333a:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <LCD_WriteCommand4Bit>
                                       	   	   	   	    CGRAM address */
       for(Localu8Counter=0;Localu8Counter<8;Localu8Counter++)  /* Write 8 arrays values for generation of 1 character */
    333e:	19 82       	std	Y+1, r1	; 0x01
    3340:	0e c0       	rjmp	.+28     	; 0x335e <LCD_CustomChar+0x50>
    	   LCD_WriteChar4Bit(AddCustomChar[Localu8Counter]);
    3342:	89 81       	ldd	r24, Y+1	; 0x01
    3344:	28 2f       	mov	r18, r24
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	8a 81       	ldd	r24, Y+2	; 0x02
    334a:	9b 81       	ldd	r25, Y+3	; 0x03
    334c:	fc 01       	movw	r30, r24
    334e:	e2 0f       	add	r30, r18
    3350:	f3 1f       	adc	r31, r19
    3352:	80 81       	ld	r24, Z
    3354:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <LCD_WriteChar4Bit>
    u8 Localu8Counter;
    if(index<8)
    {
    	LCD_WriteCommand4Bit (0x40 + (index*8));  /* Command 0x40 and onwards forces
                                       	   	   	   	    CGRAM address */
       for(Localu8Counter=0;Localu8Counter<8;Localu8Counter++)  /* Write 8 arrays values for generation of 1 character */
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	8f 5f       	subi	r24, 0xFF	; 255
    335c:	89 83       	std	Y+1, r24	; 0x01
    335e:	89 81       	ldd	r24, Y+1	; 0x01
    3360:	88 30       	cpi	r24, 0x08	; 8
    3362:	78 f3       	brcs	.-34     	; 0x3342 <LCD_CustomChar+0x34>
    	   LCD_WriteChar4Bit(AddCustomChar[Localu8Counter]);
    }
}
    3364:	0f 90       	pop	r0
    3366:	0f 90       	pop	r0
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	cf 91       	pop	r28
    336e:	df 91       	pop	r29
    3370:	08 95       	ret

00003372 <KeyPadInit>:
#define c1 SBIT(PINC, 4)
#define c2 SBIT(PINC, 5)
#define c3 SBIT(PINC, 6)
#define c4 SBIT(PINC, 7)

void KeyPadInit(void){
    3372:	df 93       	push	r29
    3374:	cf 93       	push	r28
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62

	/*Set Columns Pins Direction Output*/
	Port_enuSetPinDirection(27,PORT_u8OUTPUT);
    337a:	8b e1       	ldi	r24, 0x1B	; 27
    337c:	61 e0       	ldi	r22, 0x01	; 1
    337e:	0e 94 36 08 	call	0x106c	; 0x106c <Port_enuSetPinDirection>
	Port_enuSetPinDirection(28,PORT_u8OUTPUT);
    3382:	8c e1       	ldi	r24, 0x1C	; 28
    3384:	61 e0       	ldi	r22, 0x01	; 1
    3386:	0e 94 36 08 	call	0x106c	; 0x106c <Port_enuSetPinDirection>
	Port_enuSetPinDirection(29,PORT_u8OUTPUT);
    338a:	8d e1       	ldi	r24, 0x1D	; 29
    338c:	61 e0       	ldi	r22, 0x01	; 1
    338e:	0e 94 36 08 	call	0x106c	; 0x106c <Port_enuSetPinDirection>
	Port_enuSetPinDirection(30,PORT_u8OUTPUT);
    3392:	8e e1       	ldi	r24, 0x1E	; 30
    3394:	61 e0       	ldi	r22, 0x01	; 1
    3396:	0e 94 36 08 	call	0x106c	; 0x106c <Port_enuSetPinDirection>

		/*Set Row Pins Direction Input*/
	Port_enuSetPinDirection(18,PORT_u8INPUT);
    339a:	82 e1       	ldi	r24, 0x12	; 18
    339c:	60 e0       	ldi	r22, 0x00	; 0
    339e:	0e 94 36 08 	call	0x106c	; 0x106c <Port_enuSetPinDirection>
	Port_enuSetPinDirection(19,PORT_u8INPUT);
    33a2:	83 e1       	ldi	r24, 0x13	; 19
    33a4:	60 e0       	ldi	r22, 0x00	; 0
    33a6:	0e 94 36 08 	call	0x106c	; 0x106c <Port_enuSetPinDirection>
	Port_enuSetPinDirection(20,PORT_u8INPUT);
    33aa:	84 e1       	ldi	r24, 0x14	; 20
    33ac:	60 e0       	ldi	r22, 0x00	; 0
    33ae:	0e 94 36 08 	call	0x106c	; 0x106c <Port_enuSetPinDirection>
	Port_enuSetPinDirection(21,PORT_u8INPUT);
    33b2:	85 e1       	ldi	r24, 0x15	; 21
    33b4:	60 e0       	ldi	r22, 0x00	; 0
    33b6:	0e 94 36 08 	call	0x106c	; 0x106c <Port_enuSetPinDirection>

		/*Activate Pull up Resistor */
	Port_enuSetPinMode(18,PORT_u8INPUT_PULLUP);
    33ba:	82 e1       	ldi	r24, 0x12	; 18
    33bc:	63 e0       	ldi	r22, 0x03	; 3
    33be:	0e 94 32 09 	call	0x1264	; 0x1264 <Port_enuSetPinMode>
	Port_enuSetPinMode(19,PORT_u8INPUT_PULLUP);
    33c2:	83 e1       	ldi	r24, 0x13	; 19
    33c4:	63 e0       	ldi	r22, 0x03	; 3
    33c6:	0e 94 32 09 	call	0x1264	; 0x1264 <Port_enuSetPinMode>
	Port_enuSetPinMode(20,PORT_u8INPUT_PULLUP);
    33ca:	84 e1       	ldi	r24, 0x14	; 20
    33cc:	63 e0       	ldi	r22, 0x03	; 3
    33ce:	0e 94 32 09 	call	0x1264	; 0x1264 <Port_enuSetPinMode>
	Port_enuSetPinMode(21,PORT_u8INPUT_PULLUP);
    33d2:	85 e1       	ldi	r24, 0x15	; 21
    33d4:	63 e0       	ldi	r22, 0x03	; 3
    33d6:	0e 94 32 09 	call	0x1264	; 0x1264 <Port_enuSetPinMode>
	/*DEACTIVATE COULMNS*/
	Dio_enuWriteChannel(27,DIO_u8LEVEL_HIGH);
    33da:	8b e1       	ldi	r24, 0x1B	; 27
    33dc:	61 e0       	ldi	r22, 0x01	; 1
    33de:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>
	Dio_enuWriteChannel(28,DIO_u8LEVEL_HIGH);
    33e2:	8c e1       	ldi	r24, 0x1C	; 28
    33e4:	61 e0       	ldi	r22, 0x01	; 1
    33e6:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>
	Dio_enuWriteChannel(29,DIO_u8LEVEL_HIGH);
    33ea:	8d e1       	ldi	r24, 0x1D	; 29
    33ec:	61 e0       	ldi	r22, 0x01	; 1
    33ee:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>
	Dio_enuWriteChannel(30,DIO_u8LEVEL_HIGH);
    33f2:	8e e1       	ldi	r24, 0x1E	; 30
    33f4:	61 e0       	ldi	r22, 0x01	; 1
    33f6:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>

}
    33fa:	cf 91       	pop	r28
    33fc:	df 91       	pop	r29
    33fe:	08 95       	ret

00003400 <KeyPad_GetPressedButton>:
void KeyPad_GetPressedButton(u8 *u8PtrToPressedButton){
    3400:	df 93       	push	r29
    3402:	cf 93       	push	r28
    3404:	00 d0       	rcall	.+0      	; 0x3406 <KeyPad_GetPressedButton+0x6>
    3406:	00 d0       	rcall	.+0      	; 0x3408 <KeyPad_GetPressedButton+0x8>
    3408:	00 d0       	rcall	.+0      	; 0x340a <KeyPad_GetPressedButton+0xa>
    340a:	cd b7       	in	r28, 0x3d	; 61
    340c:	de b7       	in	r29, 0x3e	; 62
    340e:	9e 83       	std	Y+6, r25	; 0x06
    3410:	8d 83       	std	Y+5, r24	; 0x05

	 u8 Local_ColCount, Local_RowCount;
	    u8 rowVal;
	    u8 flag = 0;
    3412:	19 82       	std	Y+1, r1	; 0x01
	    if (u8PtrToPressedButton != NULL)
    3414:	8d 81       	ldd	r24, Y+5	; 0x05
    3416:	9e 81       	ldd	r25, Y+6	; 0x06
    3418:	00 97       	sbiw	r24, 0x00	; 0
    341a:	09 f4       	brne	.+2      	; 0x341e <KeyPad_GetPressedButton+0x1e>
    341c:	50 c0       	rjmp	.+160    	; 0x34be <KeyPad_GetPressedButton+0xbe>
	    {
	        for (Local_ColCount = 0; Local_ColCount < KEYPADSIZE; Local_ColCount++)
    341e:	1b 82       	std	Y+3, r1	; 0x03
    3420:	4a c0       	rjmp	.+148    	; 0x34b6 <KeyPad_GetPressedButton+0xb6>
	        {
	            //activate current column
	        	Dio_enuWriteChannel((u8ColArr[Local_ColCount]), DIO_u8LEVEL_LOW);
    3422:	8b 81       	ldd	r24, Y+3	; 0x03
    3424:	88 2f       	mov	r24, r24
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	fc 01       	movw	r30, r24
    342a:	e2 56       	subi	r30, 0x62	; 98
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	80 81       	ld	r24, Z
    3430:	60 e0       	ldi	r22, 0x00	; 0
    3432:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>
	            for (Local_RowCount = 0; Local_RowCount < KEYPADSIZE; Local_RowCount++)
    3436:	1a 82       	std	Y+2, r1	; 0x02
    3438:	16 c0       	rjmp	.+44     	; 0x3466 <KeyPad_GetPressedButton+0x66>
	            {
	                //check row value if it is 0 then this column and row is connected
	            	Dio_enuReadChannel((u8RowArr[Local_RowCount]), &rowVal);
    343a:	8a 81       	ldd	r24, Y+2	; 0x02
    343c:	88 2f       	mov	r24, r24
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	fc 01       	movw	r30, r24
    3442:	ee 55       	subi	r30, 0x5E	; 94
    3444:	ff 4f       	sbci	r31, 0xFF	; 255
    3446:	80 81       	ld	r24, Z
    3448:	9e 01       	movw	r18, r28
    344a:	2c 5f       	subi	r18, 0xFC	; 252
    344c:	3f 4f       	sbci	r19, 0xFF	; 255
    344e:	b9 01       	movw	r22, r18
    3450:	0e 94 75 0f 	call	0x1eea	; 0x1eea <Dio_enuReadChannel>
	                if (rowVal == 0)
    3454:	8c 81       	ldd	r24, Y+4	; 0x04
    3456:	88 23       	and	r24, r24
    3458:	19 f4       	brne	.+6      	; 0x3460 <KeyPad_GetPressedButton+0x60>
	                {
	                    flag = 1;
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	89 83       	std	Y+1, r24	; 0x01
    345e:	06 c0       	rjmp	.+12     	; 0x346c <KeyPad_GetPressedButton+0x6c>
	    {
	        for (Local_ColCount = 0; Local_ColCount < KEYPADSIZE; Local_ColCount++)
	        {
	            //activate current column
	        	Dio_enuWriteChannel((u8ColArr[Local_ColCount]), DIO_u8LEVEL_LOW);
	            for (Local_RowCount = 0; Local_RowCount < KEYPADSIZE; Local_RowCount++)
    3460:	8a 81       	ldd	r24, Y+2	; 0x02
    3462:	8f 5f       	subi	r24, 0xFF	; 255
    3464:	8a 83       	std	Y+2, r24	; 0x02
    3466:	8a 81       	ldd	r24, Y+2	; 0x02
    3468:	84 30       	cpi	r24, 0x04	; 4
    346a:	38 f3       	brcs	.-50     	; 0x343a <KeyPad_GetPressedButton+0x3a>
	                    break;
	                }
	            }
	            //if the inner row loop has broken and flag is set,
	            //place value in return pointer and exit outer column loop.
	            if (flag == 1)
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	81 30       	cpi	r24, 0x01	; 1
    3470:	a9 f4       	brne	.+42     	; 0x349c <KeyPad_GetPressedButton+0x9c>
	            {
	                *u8PtrToPressedButton = KeyPadSwitchValues[Local_ColCount][Local_RowCount];
    3472:	8b 81       	ldd	r24, Y+3	; 0x03
    3474:	48 2f       	mov	r20, r24
    3476:	50 e0       	ldi	r21, 0x00	; 0
    3478:	8a 81       	ldd	r24, Y+2	; 0x02
    347a:	28 2f       	mov	r18, r24
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	ca 01       	movw	r24, r20
    3480:	88 0f       	add	r24, r24
    3482:	99 1f       	adc	r25, r25
    3484:	88 0f       	add	r24, r24
    3486:	99 1f       	adc	r25, r25
    3488:	82 0f       	add	r24, r18
    348a:	93 1f       	adc	r25, r19
    348c:	fc 01       	movw	r30, r24
    348e:	e2 57       	subi	r30, 0x72	; 114
    3490:	ff 4f       	sbci	r31, 0xFF	; 255
    3492:	80 81       	ld	r24, Z
    3494:	ed 81       	ldd	r30, Y+5	; 0x05
    3496:	fe 81       	ldd	r31, Y+6	; 0x06
    3498:	80 83       	st	Z, r24
    349a:	11 c0       	rjmp	.+34     	; 0x34be <KeyPad_GetPressedButton+0xbe>
	                break;
	            }
	            //deactivate current column.
	            Dio_enuWriteChannel(u8ColArr[Local_ColCount], DIO_u8LEVEL_HIGH);
    349c:	8b 81       	ldd	r24, Y+3	; 0x03
    349e:	88 2f       	mov	r24, r24
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	fc 01       	movw	r30, r24
    34a4:	e2 56       	subi	r30, 0x62	; 98
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	80 81       	ld	r24, Z
    34aa:	61 e0       	ldi	r22, 0x01	; 1
    34ac:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Dio_enuWriteChannel>
	 u8 Local_ColCount, Local_RowCount;
	    u8 rowVal;
	    u8 flag = 0;
	    if (u8PtrToPressedButton != NULL)
	    {
	        for (Local_ColCount = 0; Local_ColCount < KEYPADSIZE; Local_ColCount++)
    34b0:	8b 81       	ldd	r24, Y+3	; 0x03
    34b2:	8f 5f       	subi	r24, 0xFF	; 255
    34b4:	8b 83       	std	Y+3, r24	; 0x03
    34b6:	8b 81       	ldd	r24, Y+3	; 0x03
    34b8:	84 30       	cpi	r24, 0x04	; 4
    34ba:	08 f4       	brcc	.+2      	; 0x34be <KeyPad_GetPressedButton+0xbe>
    34bc:	b2 cf       	rjmp	.-156    	; 0x3422 <KeyPad_GetPressedButton+0x22>
	    }




}
    34be:	26 96       	adiw	r28, 0x06	; 6
    34c0:	0f b6       	in	r0, 0x3f	; 63
    34c2:	f8 94       	cli
    34c4:	de bf       	out	0x3e, r29	; 62
    34c6:	0f be       	out	0x3f, r0	; 63
    34c8:	cd bf       	out	0x3d, r28	; 61
    34ca:	cf 91       	pop	r28
    34cc:	df 91       	pop	r29
    34ce:	08 95       	ret

000034d0 <keypressed>:



u8 keypressed(void)
  {
    34d0:	0f 93       	push	r16
    34d2:	1f 93       	push	r17
    34d4:	df 93       	push	r29
    34d6:	cf 93       	push	r28
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62
    34dc:	c1 56       	subi	r28, 0x61	; 97
    34de:	d0 40       	sbci	r29, 0x00	; 0
    34e0:	0f b6       	in	r0, 0x3f	; 63
    34e2:	f8 94       	cli
    34e4:	de bf       	out	0x3e, r29	; 62
    34e6:	0f be       	out	0x3f, r0	; 63
    34e8:	cd bf       	out	0x3d, r28	; 61

   DDRC=0b00001111;
    34ea:	e4 e3       	ldi	r30, 0x34	; 52
    34ec:	f0 e0       	ldi	r31, 0x00	; 0
    34ee:	8f e0       	ldi	r24, 0x0F	; 15
    34f0:	80 83       	st	Z, r24
   PORTC=0b11110000;
    34f2:	e5 e3       	ldi	r30, 0x35	; 53
    34f4:	f0 e0       	ldi	r31, 0x00	; 0
    34f6:	80 ef       	ldi	r24, 0xF0	; 240
    34f8:	80 83       	st	Z, r24

   while (1)
    {
     r1=0;     r2=1;     r3=1;     r4=1;
    34fa:	e5 e3       	ldi	r30, 0x35	; 53
    34fc:	f0 e0       	ldi	r31, 0x00	; 0
    34fe:	80 81       	ld	r24, Z
    3500:	8e 7f       	andi	r24, 0xFE	; 254
    3502:	80 83       	st	Z, r24
    3504:	e5 e3       	ldi	r30, 0x35	; 53
    3506:	f0 e0       	ldi	r31, 0x00	; 0
    3508:	80 81       	ld	r24, Z
    350a:	82 60       	ori	r24, 0x02	; 2
    350c:	80 83       	st	Z, r24
    350e:	e5 e3       	ldi	r30, 0x35	; 53
    3510:	f0 e0       	ldi	r31, 0x00	; 0
    3512:	80 81       	ld	r24, Z
    3514:	84 60       	ori	r24, 0x04	; 4
    3516:	80 83       	st	Z, r24
    3518:	e5 e3       	ldi	r30, 0x35	; 53
    351a:	f0 e0       	ldi	r31, 0x00	; 0
    351c:	80 81       	ld	r24, Z
    351e:	88 60       	ori	r24, 0x08	; 8
    3520:	80 83       	st	Z, r24
    3522:	fe 01       	movw	r30, r28
    3524:	e3 5a       	subi	r30, 0xA3	; 163
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	80 e0       	ldi	r24, 0x00	; 0
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	a8 e4       	ldi	r26, 0x48	; 72
    352e:	b2 e4       	ldi	r27, 0x42	; 66
    3530:	80 83       	st	Z, r24
    3532:	91 83       	std	Z+1, r25	; 0x01
    3534:	a2 83       	std	Z+2, r26	; 0x02
    3536:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3538:	8e 01       	movw	r16, r28
    353a:	07 5a       	subi	r16, 0xA7	; 167
    353c:	1f 4f       	sbci	r17, 0xFF	; 255
    353e:	fe 01       	movw	r30, r28
    3540:	e3 5a       	subi	r30, 0xA3	; 163
    3542:	ff 4f       	sbci	r31, 0xFF	; 255
    3544:	60 81       	ld	r22, Z
    3546:	71 81       	ldd	r23, Z+1	; 0x01
    3548:	82 81       	ldd	r24, Z+2	; 0x02
    354a:	93 81       	ldd	r25, Z+3	; 0x03
    354c:	2b ea       	ldi	r18, 0xAB	; 171
    354e:	3a ea       	ldi	r19, 0xAA	; 170
    3550:	4a ea       	ldi	r20, 0xAA	; 170
    3552:	50 e4       	ldi	r21, 0x40	; 64
    3554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3558:	dc 01       	movw	r26, r24
    355a:	cb 01       	movw	r24, r22
    355c:	f8 01       	movw	r30, r16
    355e:	80 83       	st	Z, r24
    3560:	91 83       	std	Z+1, r25	; 0x01
    3562:	a2 83       	std	Z+2, r26	; 0x02
    3564:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3566:	fe 01       	movw	r30, r28
    3568:	e7 5a       	subi	r30, 0xA7	; 167
    356a:	ff 4f       	sbci	r31, 0xFF	; 255
    356c:	60 81       	ld	r22, Z
    356e:	71 81       	ldd	r23, Z+1	; 0x01
    3570:	82 81       	ldd	r24, Z+2	; 0x02
    3572:	93 81       	ldd	r25, Z+3	; 0x03
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	40 e8       	ldi	r20, 0x80	; 128
    357a:	5f e3       	ldi	r21, 0x3F	; 63
    357c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3580:	88 23       	and	r24, r24
    3582:	34 f4       	brge	.+12     	; 0x3590 <keypressed+0xc0>
		__ticks = 1;
    3584:	fe 01       	movw	r30, r28
    3586:	e8 5a       	subi	r30, 0xA8	; 168
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	80 83       	st	Z, r24
    358e:	e0 c0       	rjmp	.+448    	; 0x3750 <keypressed+0x280>
	else if (__tmp > 255)
    3590:	fe 01       	movw	r30, r28
    3592:	e7 5a       	subi	r30, 0xA7	; 167
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	60 81       	ld	r22, Z
    3598:	71 81       	ldd	r23, Z+1	; 0x01
    359a:	82 81       	ldd	r24, Z+2	; 0x02
    359c:	93 81       	ldd	r25, Z+3	; 0x03
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	4f e7       	ldi	r20, 0x7F	; 127
    35a4:	53 e4       	ldi	r21, 0x43	; 67
    35a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35aa:	18 16       	cp	r1, r24
    35ac:	0c f0       	brlt	.+2      	; 0x35b0 <keypressed+0xe0>
    35ae:	c0 c0       	rjmp	.+384    	; 0x3730 <keypressed+0x260>
	{
		_delay_ms(__us / 1000.0);
    35b0:	fe 01       	movw	r30, r28
    35b2:	e3 5a       	subi	r30, 0xA3	; 163
    35b4:	ff 4f       	sbci	r31, 0xFF	; 255
    35b6:	60 81       	ld	r22, Z
    35b8:	71 81       	ldd	r23, Z+1	; 0x01
    35ba:	82 81       	ldd	r24, Z+2	; 0x02
    35bc:	93 81       	ldd	r25, Z+3	; 0x03
    35be:	20 e0       	ldi	r18, 0x00	; 0
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	4a e7       	ldi	r20, 0x7A	; 122
    35c4:	54 e4       	ldi	r21, 0x44	; 68
    35c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	fe 01       	movw	r30, r28
    35d0:	ec 5a       	subi	r30, 0xAC	; 172
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	80 83       	st	Z, r24
    35d6:	91 83       	std	Z+1, r25	; 0x01
    35d8:	a2 83       	std	Z+2, r26	; 0x02
    35da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35dc:	8e 01       	movw	r16, r28
    35de:	00 5b       	subi	r16, 0xB0	; 176
    35e0:	1f 4f       	sbci	r17, 0xFF	; 255
    35e2:	fe 01       	movw	r30, r28
    35e4:	ec 5a       	subi	r30, 0xAC	; 172
    35e6:	ff 4f       	sbci	r31, 0xFF	; 255
    35e8:	60 81       	ld	r22, Z
    35ea:	71 81       	ldd	r23, Z+1	; 0x01
    35ec:	82 81       	ldd	r24, Z+2	; 0x02
    35ee:	93 81       	ldd	r25, Z+3	; 0x03
    35f0:	20 e0       	ldi	r18, 0x00	; 0
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	4a e7       	ldi	r20, 0x7A	; 122
    35f6:	55 e4       	ldi	r21, 0x45	; 69
    35f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35fc:	dc 01       	movw	r26, r24
    35fe:	cb 01       	movw	r24, r22
    3600:	f8 01       	movw	r30, r16
    3602:	80 83       	st	Z, r24
    3604:	91 83       	std	Z+1, r25	; 0x01
    3606:	a2 83       	std	Z+2, r26	; 0x02
    3608:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    360a:	fe 01       	movw	r30, r28
    360c:	e0 5b       	subi	r30, 0xB0	; 176
    360e:	ff 4f       	sbci	r31, 0xFF	; 255
    3610:	60 81       	ld	r22, Z
    3612:	71 81       	ldd	r23, Z+1	; 0x01
    3614:	82 81       	ldd	r24, Z+2	; 0x02
    3616:	93 81       	ldd	r25, Z+3	; 0x03
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	40 e8       	ldi	r20, 0x80	; 128
    361e:	5f e3       	ldi	r21, 0x3F	; 63
    3620:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3624:	88 23       	and	r24, r24
    3626:	44 f4       	brge	.+16     	; 0x3638 <keypressed+0x168>
		__ticks = 1;
    3628:	fe 01       	movw	r30, r28
    362a:	e2 5b       	subi	r30, 0xB2	; 178
    362c:	ff 4f       	sbci	r31, 0xFF	; 255
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	91 83       	std	Z+1, r25	; 0x01
    3634:	80 83       	st	Z, r24
    3636:	64 c0       	rjmp	.+200    	; 0x3700 <keypressed+0x230>
	else if (__tmp > 65535)
    3638:	fe 01       	movw	r30, r28
    363a:	e0 5b       	subi	r30, 0xB0	; 176
    363c:	ff 4f       	sbci	r31, 0xFF	; 255
    363e:	60 81       	ld	r22, Z
    3640:	71 81       	ldd	r23, Z+1	; 0x01
    3642:	82 81       	ldd	r24, Z+2	; 0x02
    3644:	93 81       	ldd	r25, Z+3	; 0x03
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	3f ef       	ldi	r19, 0xFF	; 255
    364a:	4f e7       	ldi	r20, 0x7F	; 127
    364c:	57 e4       	ldi	r21, 0x47	; 71
    364e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3652:	18 16       	cp	r1, r24
    3654:	0c f0       	brlt	.+2      	; 0x3658 <keypressed+0x188>
    3656:	43 c0       	rjmp	.+134    	; 0x36de <keypressed+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3658:	fe 01       	movw	r30, r28
    365a:	ec 5a       	subi	r30, 0xAC	; 172
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	60 81       	ld	r22, Z
    3660:	71 81       	ldd	r23, Z+1	; 0x01
    3662:	82 81       	ldd	r24, Z+2	; 0x02
    3664:	93 81       	ldd	r25, Z+3	; 0x03
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	40 e2       	ldi	r20, 0x20	; 32
    366c:	51 e4       	ldi	r21, 0x41	; 65
    366e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3672:	dc 01       	movw	r26, r24
    3674:	cb 01       	movw	r24, r22
    3676:	8e 01       	movw	r16, r28
    3678:	02 5b       	subi	r16, 0xB2	; 178
    367a:	1f 4f       	sbci	r17, 0xFF	; 255
    367c:	bc 01       	movw	r22, r24
    367e:	cd 01       	movw	r24, r26
    3680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	f8 01       	movw	r30, r16
    368a:	91 83       	std	Z+1, r25	; 0x01
    368c:	80 83       	st	Z, r24
    368e:	1f c0       	rjmp	.+62     	; 0x36ce <keypressed+0x1fe>
    3690:	fe 01       	movw	r30, r28
    3692:	e4 5b       	subi	r30, 0xB4	; 180
    3694:	ff 4f       	sbci	r31, 0xFF	; 255
    3696:	80 e9       	ldi	r24, 0x90	; 144
    3698:	91 e0       	ldi	r25, 0x01	; 1
    369a:	91 83       	std	Z+1, r25	; 0x01
    369c:	80 83       	st	Z, r24
    369e:	fe 01       	movw	r30, r28
    36a0:	e4 5b       	subi	r30, 0xB4	; 180
    36a2:	ff 4f       	sbci	r31, 0xFF	; 255
    36a4:	80 81       	ld	r24, Z
    36a6:	91 81       	ldd	r25, Z+1	; 0x01
    36a8:	01 97       	sbiw	r24, 0x01	; 1
    36aa:	f1 f7       	brne	.-4      	; 0x36a8 <keypressed+0x1d8>
    36ac:	fe 01       	movw	r30, r28
    36ae:	e4 5b       	subi	r30, 0xB4	; 180
    36b0:	ff 4f       	sbci	r31, 0xFF	; 255
    36b2:	91 83       	std	Z+1, r25	; 0x01
    36b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b6:	de 01       	movw	r26, r28
    36b8:	a2 5b       	subi	r26, 0xB2	; 178
    36ba:	bf 4f       	sbci	r27, 0xFF	; 255
    36bc:	fe 01       	movw	r30, r28
    36be:	e2 5b       	subi	r30, 0xB2	; 178
    36c0:	ff 4f       	sbci	r31, 0xFF	; 255
    36c2:	80 81       	ld	r24, Z
    36c4:	91 81       	ldd	r25, Z+1	; 0x01
    36c6:	01 97       	sbiw	r24, 0x01	; 1
    36c8:	11 96       	adiw	r26, 0x01	; 1
    36ca:	9c 93       	st	X, r25
    36cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ce:	fe 01       	movw	r30, r28
    36d0:	e2 5b       	subi	r30, 0xB2	; 178
    36d2:	ff 4f       	sbci	r31, 0xFF	; 255
    36d4:	80 81       	ld	r24, Z
    36d6:	91 81       	ldd	r25, Z+1	; 0x01
    36d8:	00 97       	sbiw	r24, 0x00	; 0
    36da:	d1 f6       	brne	.-76     	; 0x3690 <keypressed+0x1c0>
    36dc:	4b c0       	rjmp	.+150    	; 0x3774 <keypressed+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36de:	8e 01       	movw	r16, r28
    36e0:	02 5b       	subi	r16, 0xB2	; 178
    36e2:	1f 4f       	sbci	r17, 0xFF	; 255
    36e4:	fe 01       	movw	r30, r28
    36e6:	e0 5b       	subi	r30, 0xB0	; 176
    36e8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ea:	60 81       	ld	r22, Z
    36ec:	71 81       	ldd	r23, Z+1	; 0x01
    36ee:	82 81       	ldd	r24, Z+2	; 0x02
    36f0:	93 81       	ldd	r25, Z+3	; 0x03
    36f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f6:	dc 01       	movw	r26, r24
    36f8:	cb 01       	movw	r24, r22
    36fa:	f8 01       	movw	r30, r16
    36fc:	91 83       	std	Z+1, r25	; 0x01
    36fe:	80 83       	st	Z, r24
    3700:	de 01       	movw	r26, r28
    3702:	a6 5b       	subi	r26, 0xB6	; 182
    3704:	bf 4f       	sbci	r27, 0xFF	; 255
    3706:	fe 01       	movw	r30, r28
    3708:	e2 5b       	subi	r30, 0xB2	; 178
    370a:	ff 4f       	sbci	r31, 0xFF	; 255
    370c:	80 81       	ld	r24, Z
    370e:	91 81       	ldd	r25, Z+1	; 0x01
    3710:	11 96       	adiw	r26, 0x01	; 1
    3712:	9c 93       	st	X, r25
    3714:	8e 93       	st	-X, r24
    3716:	fe 01       	movw	r30, r28
    3718:	e6 5b       	subi	r30, 0xB6	; 182
    371a:	ff 4f       	sbci	r31, 0xFF	; 255
    371c:	80 81       	ld	r24, Z
    371e:	91 81       	ldd	r25, Z+1	; 0x01
    3720:	01 97       	sbiw	r24, 0x01	; 1
    3722:	f1 f7       	brne	.-4      	; 0x3720 <keypressed+0x250>
    3724:	fe 01       	movw	r30, r28
    3726:	e6 5b       	subi	r30, 0xB6	; 182
    3728:	ff 4f       	sbci	r31, 0xFF	; 255
    372a:	91 83       	std	Z+1, r25	; 0x01
    372c:	80 83       	st	Z, r24
    372e:	22 c0       	rjmp	.+68     	; 0x3774 <keypressed+0x2a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3730:	8e 01       	movw	r16, r28
    3732:	08 5a       	subi	r16, 0xA8	; 168
    3734:	1f 4f       	sbci	r17, 0xFF	; 255
    3736:	fe 01       	movw	r30, r28
    3738:	e7 5a       	subi	r30, 0xA7	; 167
    373a:	ff 4f       	sbci	r31, 0xFF	; 255
    373c:	60 81       	ld	r22, Z
    373e:	71 81       	ldd	r23, Z+1	; 0x01
    3740:	82 81       	ldd	r24, Z+2	; 0x02
    3742:	93 81       	ldd	r25, Z+3	; 0x03
    3744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	f8 01       	movw	r30, r16
    374e:	80 83       	st	Z, r24
    3750:	de 01       	movw	r26, r28
    3752:	a7 5b       	subi	r26, 0xB7	; 183
    3754:	bf 4f       	sbci	r27, 0xFF	; 255
    3756:	fe 01       	movw	r30, r28
    3758:	e8 5a       	subi	r30, 0xA8	; 168
    375a:	ff 4f       	sbci	r31, 0xFF	; 255
    375c:	80 81       	ld	r24, Z
    375e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3760:	fe 01       	movw	r30, r28
    3762:	e7 5b       	subi	r30, 0xB7	; 183
    3764:	ff 4f       	sbci	r31, 0xFF	; 255
    3766:	80 81       	ld	r24, Z
    3768:	8a 95       	dec	r24
    376a:	f1 f7       	brne	.-4      	; 0x3768 <keypressed+0x298>
    376c:	fe 01       	movw	r30, r28
    376e:	e7 5b       	subi	r30, 0xB7	; 183
    3770:	ff 4f       	sbci	r31, 0xFF	; 255
    3772:	80 83       	st	Z, r24
     _delay_us(50);
     if (c1==0){while (c1==0);return ('7');}
    3774:	e3 e3       	ldi	r30, 0x33	; 51
    3776:	f0 e0       	ldi	r31, 0x00	; 0
    3778:	80 81       	ld	r24, Z
    377a:	80 71       	andi	r24, 0x10	; 16
    377c:	88 23       	and	r24, r24
    377e:	59 f4       	brne	.+22     	; 0x3796 <keypressed+0x2c6>
    3780:	e3 e3       	ldi	r30, 0x33	; 51
    3782:	f0 e0       	ldi	r31, 0x00	; 0
    3784:	80 81       	ld	r24, Z
    3786:	80 71       	andi	r24, 0x10	; 16
    3788:	88 23       	and	r24, r24
    378a:	d1 f3       	breq	.-12     	; 0x3780 <keypressed+0x2b0>
    378c:	f7 e3       	ldi	r31, 0x37	; 55
    378e:	a2 96       	adiw	r28, 0x22	; 34
    3790:	ff af       	std	Y+63, r31	; 0x3f
    3792:	a2 97       	sbiw	r28, 0x22	; 34
    3794:	94 c3       	rjmp	.+1832   	; 0x3ebe <keypressed+0x9ee>
     if(c2==0){while (c2==0); return ('8');}
    3796:	e3 e3       	ldi	r30, 0x33	; 51
    3798:	f0 e0       	ldi	r31, 0x00	; 0
    379a:	80 81       	ld	r24, Z
    379c:	80 72       	andi	r24, 0x20	; 32
    379e:	88 23       	and	r24, r24
    37a0:	59 f4       	brne	.+22     	; 0x37b8 <keypressed+0x2e8>
    37a2:	e3 e3       	ldi	r30, 0x33	; 51
    37a4:	f0 e0       	ldi	r31, 0x00	; 0
    37a6:	80 81       	ld	r24, Z
    37a8:	80 72       	andi	r24, 0x20	; 32
    37aa:	88 23       	and	r24, r24
    37ac:	d1 f3       	breq	.-12     	; 0x37a2 <keypressed+0x2d2>
    37ae:	88 e3       	ldi	r24, 0x38	; 56
    37b0:	a2 96       	adiw	r28, 0x22	; 34
    37b2:	8f af       	std	Y+63, r24	; 0x3f
    37b4:	a2 97       	sbiw	r28, 0x22	; 34
    37b6:	83 c3       	rjmp	.+1798   	; 0x3ebe <keypressed+0x9ee>
     if (c3==0){while (c3==0); return ('9');}
    37b8:	e3 e3       	ldi	r30, 0x33	; 51
    37ba:	f0 e0       	ldi	r31, 0x00	; 0
    37bc:	80 81       	ld	r24, Z
    37be:	80 74       	andi	r24, 0x40	; 64
    37c0:	88 23       	and	r24, r24
    37c2:	59 f4       	brne	.+22     	; 0x37da <keypressed+0x30a>
    37c4:	e3 e3       	ldi	r30, 0x33	; 51
    37c6:	f0 e0       	ldi	r31, 0x00	; 0
    37c8:	80 81       	ld	r24, Z
    37ca:	80 74       	andi	r24, 0x40	; 64
    37cc:	88 23       	and	r24, r24
    37ce:	d1 f3       	breq	.-12     	; 0x37c4 <keypressed+0x2f4>
    37d0:	e9 e3       	ldi	r30, 0x39	; 57
    37d2:	a2 96       	adiw	r28, 0x22	; 34
    37d4:	ef af       	std	Y+63, r30	; 0x3f
    37d6:	a2 97       	sbiw	r28, 0x22	; 34
    37d8:	72 c3       	rjmp	.+1764   	; 0x3ebe <keypressed+0x9ee>
     if(c4==0){while (c4==0);return ('/');}
    37da:	e3 e3       	ldi	r30, 0x33	; 51
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	80 81       	ld	r24, Z
    37e0:	80 78       	andi	r24, 0x80	; 128
    37e2:	88 23       	and	r24, r24
    37e4:	59 f4       	brne	.+22     	; 0x37fc <keypressed+0x32c>
    37e6:	e3 e3       	ldi	r30, 0x33	; 51
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	80 81       	ld	r24, Z
    37ec:	80 78       	andi	r24, 0x80	; 128
    37ee:	88 23       	and	r24, r24
    37f0:	d1 f3       	breq	.-12     	; 0x37e6 <keypressed+0x316>
    37f2:	ff e2       	ldi	r31, 0x2F	; 47
    37f4:	a2 96       	adiw	r28, 0x22	; 34
    37f6:	ff af       	std	Y+63, r31	; 0x3f
    37f8:	a2 97       	sbiw	r28, 0x22	; 34
    37fa:	61 c3       	rjmp	.+1730   	; 0x3ebe <keypressed+0x9ee>

     r1=1;     r2=0;     r3=1;     r4=1;
    37fc:	e5 e3       	ldi	r30, 0x35	; 53
    37fe:	f0 e0       	ldi	r31, 0x00	; 0
    3800:	80 81       	ld	r24, Z
    3802:	81 60       	ori	r24, 0x01	; 1
    3804:	80 83       	st	Z, r24
    3806:	e5 e3       	ldi	r30, 0x35	; 53
    3808:	f0 e0       	ldi	r31, 0x00	; 0
    380a:	80 81       	ld	r24, Z
    380c:	8d 7f       	andi	r24, 0xFD	; 253
    380e:	80 83       	st	Z, r24
    3810:	e5 e3       	ldi	r30, 0x35	; 53
    3812:	f0 e0       	ldi	r31, 0x00	; 0
    3814:	80 81       	ld	r24, Z
    3816:	84 60       	ori	r24, 0x04	; 4
    3818:	80 83       	st	Z, r24
    381a:	e5 e3       	ldi	r30, 0x35	; 53
    381c:	f0 e0       	ldi	r31, 0x00	; 0
    381e:	80 81       	ld	r24, Z
    3820:	88 60       	ori	r24, 0x08	; 8
    3822:	80 83       	st	Z, r24
    3824:	fe 01       	movw	r30, r28
    3826:	eb 5b       	subi	r30, 0xBB	; 187
    3828:	ff 4f       	sbci	r31, 0xFF	; 255
    382a:	80 e0       	ldi	r24, 0x00	; 0
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	a8 e4       	ldi	r26, 0x48	; 72
    3830:	b2 e4       	ldi	r27, 0x42	; 66
    3832:	80 83       	st	Z, r24
    3834:	91 83       	std	Z+1, r25	; 0x01
    3836:	a2 83       	std	Z+2, r26	; 0x02
    3838:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    383a:	8e 01       	movw	r16, r28
    383c:	0f 5b       	subi	r16, 0xBF	; 191
    383e:	1f 4f       	sbci	r17, 0xFF	; 255
    3840:	fe 01       	movw	r30, r28
    3842:	eb 5b       	subi	r30, 0xBB	; 187
    3844:	ff 4f       	sbci	r31, 0xFF	; 255
    3846:	60 81       	ld	r22, Z
    3848:	71 81       	ldd	r23, Z+1	; 0x01
    384a:	82 81       	ldd	r24, Z+2	; 0x02
    384c:	93 81       	ldd	r25, Z+3	; 0x03
    384e:	2b ea       	ldi	r18, 0xAB	; 171
    3850:	3a ea       	ldi	r19, 0xAA	; 170
    3852:	4a ea       	ldi	r20, 0xAA	; 170
    3854:	50 e4       	ldi	r21, 0x40	; 64
    3856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385a:	dc 01       	movw	r26, r24
    385c:	cb 01       	movw	r24, r22
    385e:	f8 01       	movw	r30, r16
    3860:	80 83       	st	Z, r24
    3862:	91 83       	std	Z+1, r25	; 0x01
    3864:	a2 83       	std	Z+2, r26	; 0x02
    3866:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3868:	fe 01       	movw	r30, r28
    386a:	ef 5b       	subi	r30, 0xBF	; 191
    386c:	ff 4f       	sbci	r31, 0xFF	; 255
    386e:	60 81       	ld	r22, Z
    3870:	71 81       	ldd	r23, Z+1	; 0x01
    3872:	82 81       	ldd	r24, Z+2	; 0x02
    3874:	93 81       	ldd	r25, Z+3	; 0x03
    3876:	20 e0       	ldi	r18, 0x00	; 0
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	40 e8       	ldi	r20, 0x80	; 128
    387c:	5f e3       	ldi	r21, 0x3F	; 63
    387e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3882:	88 23       	and	r24, r24
    3884:	34 f4       	brge	.+12     	; 0x3892 <keypressed+0x3c2>
		__ticks = 1;
    3886:	81 e0       	ldi	r24, 0x01	; 1
    3888:	fe 01       	movw	r30, r28
    388a:	e0 5c       	subi	r30, 0xC0	; 192
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	80 83       	st	Z, r24
    3890:	9d c0       	rjmp	.+314    	; 0x39cc <keypressed+0x4fc>
	else if (__tmp > 255)
    3892:	fe 01       	movw	r30, r28
    3894:	ef 5b       	subi	r30, 0xBF	; 191
    3896:	ff 4f       	sbci	r31, 0xFF	; 255
    3898:	60 81       	ld	r22, Z
    389a:	71 81       	ldd	r23, Z+1	; 0x01
    389c:	82 81       	ldd	r24, Z+2	; 0x02
    389e:	93 81       	ldd	r25, Z+3	; 0x03
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	4f e7       	ldi	r20, 0x7F	; 127
    38a6:	53 e4       	ldi	r21, 0x43	; 67
    38a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38ac:	18 16       	cp	r1, r24
    38ae:	0c f0       	brlt	.+2      	; 0x38b2 <keypressed+0x3e2>
    38b0:	7e c0       	rjmp	.+252    	; 0x39ae <keypressed+0x4de>
	{
		_delay_ms(__us / 1000.0);
    38b2:	fe 01       	movw	r30, r28
    38b4:	eb 5b       	subi	r30, 0xBB	; 187
    38b6:	ff 4f       	sbci	r31, 0xFF	; 255
    38b8:	60 81       	ld	r22, Z
    38ba:	71 81       	ldd	r23, Z+1	; 0x01
    38bc:	82 81       	ldd	r24, Z+2	; 0x02
    38be:	93 81       	ldd	r25, Z+3	; 0x03
    38c0:	20 e0       	ldi	r18, 0x00	; 0
    38c2:	30 e0       	ldi	r19, 0x00	; 0
    38c4:	4a e7       	ldi	r20, 0x7A	; 122
    38c6:	54 e4       	ldi	r21, 0x44	; 68
    38c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	8c af       	std	Y+60, r24	; 0x3c
    38d2:	9d af       	std	Y+61, r25	; 0x3d
    38d4:	ae af       	std	Y+62, r26	; 0x3e
    38d6:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38d8:	6c ad       	ldd	r22, Y+60	; 0x3c
    38da:	7d ad       	ldd	r23, Y+61	; 0x3d
    38dc:	8e ad       	ldd	r24, Y+62	; 0x3e
    38de:	9f ad       	ldd	r25, Y+63	; 0x3f
    38e0:	20 e0       	ldi	r18, 0x00	; 0
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	4a e7       	ldi	r20, 0x7A	; 122
    38e6:	55 e4       	ldi	r21, 0x45	; 69
    38e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ec:	dc 01       	movw	r26, r24
    38ee:	cb 01       	movw	r24, r22
    38f0:	88 af       	std	Y+56, r24	; 0x38
    38f2:	99 af       	std	Y+57, r25	; 0x39
    38f4:	aa af       	std	Y+58, r26	; 0x3a
    38f6:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    38f8:	68 ad       	ldd	r22, Y+56	; 0x38
    38fa:	79 ad       	ldd	r23, Y+57	; 0x39
    38fc:	8a ad       	ldd	r24, Y+58	; 0x3a
    38fe:	9b ad       	ldd	r25, Y+59	; 0x3b
    3900:	20 e0       	ldi	r18, 0x00	; 0
    3902:	30 e0       	ldi	r19, 0x00	; 0
    3904:	40 e8       	ldi	r20, 0x80	; 128
    3906:	5f e3       	ldi	r21, 0x3F	; 63
    3908:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    390c:	88 23       	and	r24, r24
    390e:	2c f4       	brge	.+10     	; 0x391a <keypressed+0x44a>
		__ticks = 1;
    3910:	81 e0       	ldi	r24, 0x01	; 1
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	9f ab       	std	Y+55, r25	; 0x37
    3916:	8e ab       	std	Y+54, r24	; 0x36
    3918:	3f c0       	rjmp	.+126    	; 0x3998 <keypressed+0x4c8>
	else if (__tmp > 65535)
    391a:	68 ad       	ldd	r22, Y+56	; 0x38
    391c:	79 ad       	ldd	r23, Y+57	; 0x39
    391e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3920:	9b ad       	ldd	r25, Y+59	; 0x3b
    3922:	20 e0       	ldi	r18, 0x00	; 0
    3924:	3f ef       	ldi	r19, 0xFF	; 255
    3926:	4f e7       	ldi	r20, 0x7F	; 127
    3928:	57 e4       	ldi	r21, 0x47	; 71
    392a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    392e:	18 16       	cp	r1, r24
    3930:	4c f5       	brge	.+82     	; 0x3984 <keypressed+0x4b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3932:	6c ad       	ldd	r22, Y+60	; 0x3c
    3934:	7d ad       	ldd	r23, Y+61	; 0x3d
    3936:	8e ad       	ldd	r24, Y+62	; 0x3e
    3938:	9f ad       	ldd	r25, Y+63	; 0x3f
    393a:	20 e0       	ldi	r18, 0x00	; 0
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	40 e2       	ldi	r20, 0x20	; 32
    3940:	51 e4       	ldi	r21, 0x41	; 65
    3942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3946:	dc 01       	movw	r26, r24
    3948:	cb 01       	movw	r24, r22
    394a:	bc 01       	movw	r22, r24
    394c:	cd 01       	movw	r24, r26
    394e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3952:	dc 01       	movw	r26, r24
    3954:	cb 01       	movw	r24, r22
    3956:	9f ab       	std	Y+55, r25	; 0x37
    3958:	8e ab       	std	Y+54, r24	; 0x36
    395a:	0f c0       	rjmp	.+30     	; 0x397a <keypressed+0x4aa>
    395c:	80 e9       	ldi	r24, 0x90	; 144
    395e:	91 e0       	ldi	r25, 0x01	; 1
    3960:	9d ab       	std	Y+53, r25	; 0x35
    3962:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3964:	8c a9       	ldd	r24, Y+52	; 0x34
    3966:	9d a9       	ldd	r25, Y+53	; 0x35
    3968:	01 97       	sbiw	r24, 0x01	; 1
    396a:	f1 f7       	brne	.-4      	; 0x3968 <keypressed+0x498>
    396c:	9d ab       	std	Y+53, r25	; 0x35
    396e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3970:	8e a9       	ldd	r24, Y+54	; 0x36
    3972:	9f a9       	ldd	r25, Y+55	; 0x37
    3974:	01 97       	sbiw	r24, 0x01	; 1
    3976:	9f ab       	std	Y+55, r25	; 0x37
    3978:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    397a:	8e a9       	ldd	r24, Y+54	; 0x36
    397c:	9f a9       	ldd	r25, Y+55	; 0x37
    397e:	00 97       	sbiw	r24, 0x00	; 0
    3980:	69 f7       	brne	.-38     	; 0x395c <keypressed+0x48c>
    3982:	2d c0       	rjmp	.+90     	; 0x39de <keypressed+0x50e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3984:	68 ad       	ldd	r22, Y+56	; 0x38
    3986:	79 ad       	ldd	r23, Y+57	; 0x39
    3988:	8a ad       	ldd	r24, Y+58	; 0x3a
    398a:	9b ad       	ldd	r25, Y+59	; 0x3b
    398c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3990:	dc 01       	movw	r26, r24
    3992:	cb 01       	movw	r24, r22
    3994:	9f ab       	std	Y+55, r25	; 0x37
    3996:	8e ab       	std	Y+54, r24	; 0x36
    3998:	8e a9       	ldd	r24, Y+54	; 0x36
    399a:	9f a9       	ldd	r25, Y+55	; 0x37
    399c:	9b ab       	std	Y+51, r25	; 0x33
    399e:	8a ab       	std	Y+50, r24	; 0x32
    39a0:	8a a9       	ldd	r24, Y+50	; 0x32
    39a2:	9b a9       	ldd	r25, Y+51	; 0x33
    39a4:	01 97       	sbiw	r24, 0x01	; 1
    39a6:	f1 f7       	brne	.-4      	; 0x39a4 <keypressed+0x4d4>
    39a8:	9b ab       	std	Y+51, r25	; 0x33
    39aa:	8a ab       	std	Y+50, r24	; 0x32
    39ac:	18 c0       	rjmp	.+48     	; 0x39de <keypressed+0x50e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    39ae:	fe 01       	movw	r30, r28
    39b0:	ef 5b       	subi	r30, 0xBF	; 191
    39b2:	ff 4f       	sbci	r31, 0xFF	; 255
    39b4:	60 81       	ld	r22, Z
    39b6:	71 81       	ldd	r23, Z+1	; 0x01
    39b8:	82 81       	ldd	r24, Z+2	; 0x02
    39ba:	93 81       	ldd	r25, Z+3	; 0x03
    39bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22
    39c4:	fe 01       	movw	r30, r28
    39c6:	e0 5c       	subi	r30, 0xC0	; 192
    39c8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ca:	80 83       	st	Z, r24
    39cc:	fe 01       	movw	r30, r28
    39ce:	e0 5c       	subi	r30, 0xC0	; 192
    39d0:	ff 4f       	sbci	r31, 0xFF	; 255
    39d2:	80 81       	ld	r24, Z
    39d4:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    39d6:	89 a9       	ldd	r24, Y+49	; 0x31
    39d8:	8a 95       	dec	r24
    39da:	f1 f7       	brne	.-4      	; 0x39d8 <keypressed+0x508>
    39dc:	89 ab       	std	Y+49, r24	; 0x31
     _delay_us(50);
     if (c1==0){while (c1==0); return ('4');}
    39de:	e3 e3       	ldi	r30, 0x33	; 51
    39e0:	f0 e0       	ldi	r31, 0x00	; 0
    39e2:	80 81       	ld	r24, Z
    39e4:	80 71       	andi	r24, 0x10	; 16
    39e6:	88 23       	and	r24, r24
    39e8:	59 f4       	brne	.+22     	; 0x3a00 <keypressed+0x530>
    39ea:	e3 e3       	ldi	r30, 0x33	; 51
    39ec:	f0 e0       	ldi	r31, 0x00	; 0
    39ee:	80 81       	ld	r24, Z
    39f0:	80 71       	andi	r24, 0x10	; 16
    39f2:	88 23       	and	r24, r24
    39f4:	d1 f3       	breq	.-12     	; 0x39ea <keypressed+0x51a>
    39f6:	f4 e3       	ldi	r31, 0x34	; 52
    39f8:	a2 96       	adiw	r28, 0x22	; 34
    39fa:	ff af       	std	Y+63, r31	; 0x3f
    39fc:	a2 97       	sbiw	r28, 0x22	; 34
    39fe:	5f c2       	rjmp	.+1214   	; 0x3ebe <keypressed+0x9ee>
     if(c2==0){while (c2==0); return ('5');}
    3a00:	e3 e3       	ldi	r30, 0x33	; 51
    3a02:	f0 e0       	ldi	r31, 0x00	; 0
    3a04:	80 81       	ld	r24, Z
    3a06:	80 72       	andi	r24, 0x20	; 32
    3a08:	88 23       	and	r24, r24
    3a0a:	59 f4       	brne	.+22     	; 0x3a22 <keypressed+0x552>
    3a0c:	e3 e3       	ldi	r30, 0x33	; 51
    3a0e:	f0 e0       	ldi	r31, 0x00	; 0
    3a10:	80 81       	ld	r24, Z
    3a12:	80 72       	andi	r24, 0x20	; 32
    3a14:	88 23       	and	r24, r24
    3a16:	d1 f3       	breq	.-12     	; 0x3a0c <keypressed+0x53c>
    3a18:	85 e3       	ldi	r24, 0x35	; 53
    3a1a:	a2 96       	adiw	r28, 0x22	; 34
    3a1c:	8f af       	std	Y+63, r24	; 0x3f
    3a1e:	a2 97       	sbiw	r28, 0x22	; 34
    3a20:	4e c2       	rjmp	.+1180   	; 0x3ebe <keypressed+0x9ee>
     if(c3==0){while (c3==0); return ('6');}
    3a22:	e3 e3       	ldi	r30, 0x33	; 51
    3a24:	f0 e0       	ldi	r31, 0x00	; 0
    3a26:	80 81       	ld	r24, Z
    3a28:	80 74       	andi	r24, 0x40	; 64
    3a2a:	88 23       	and	r24, r24
    3a2c:	59 f4       	brne	.+22     	; 0x3a44 <keypressed+0x574>
    3a2e:	e3 e3       	ldi	r30, 0x33	; 51
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	80 81       	ld	r24, Z
    3a34:	80 74       	andi	r24, 0x40	; 64
    3a36:	88 23       	and	r24, r24
    3a38:	d1 f3       	breq	.-12     	; 0x3a2e <keypressed+0x55e>
    3a3a:	e6 e3       	ldi	r30, 0x36	; 54
    3a3c:	a2 96       	adiw	r28, 0x22	; 34
    3a3e:	ef af       	std	Y+63, r30	; 0x3f
    3a40:	a2 97       	sbiw	r28, 0x22	; 34
    3a42:	3d c2       	rjmp	.+1146   	; 0x3ebe <keypressed+0x9ee>
     if(c4==0){while (c4==0); return ('*');}
    3a44:	e3 e3       	ldi	r30, 0x33	; 51
    3a46:	f0 e0       	ldi	r31, 0x00	; 0
    3a48:	80 81       	ld	r24, Z
    3a4a:	80 78       	andi	r24, 0x80	; 128
    3a4c:	88 23       	and	r24, r24
    3a4e:	59 f4       	brne	.+22     	; 0x3a66 <keypressed+0x596>
    3a50:	e3 e3       	ldi	r30, 0x33	; 51
    3a52:	f0 e0       	ldi	r31, 0x00	; 0
    3a54:	80 81       	ld	r24, Z
    3a56:	80 78       	andi	r24, 0x80	; 128
    3a58:	88 23       	and	r24, r24
    3a5a:	d1 f3       	breq	.-12     	; 0x3a50 <keypressed+0x580>
    3a5c:	fa e2       	ldi	r31, 0x2A	; 42
    3a5e:	a2 96       	adiw	r28, 0x22	; 34
    3a60:	ff af       	std	Y+63, r31	; 0x3f
    3a62:	a2 97       	sbiw	r28, 0x22	; 34
    3a64:	2c c2       	rjmp	.+1112   	; 0x3ebe <keypressed+0x9ee>

     r1=1;     r2=1;     r3=0;     r4=1;
    3a66:	e5 e3       	ldi	r30, 0x35	; 53
    3a68:	f0 e0       	ldi	r31, 0x00	; 0
    3a6a:	80 81       	ld	r24, Z
    3a6c:	81 60       	ori	r24, 0x01	; 1
    3a6e:	80 83       	st	Z, r24
    3a70:	e5 e3       	ldi	r30, 0x35	; 53
    3a72:	f0 e0       	ldi	r31, 0x00	; 0
    3a74:	80 81       	ld	r24, Z
    3a76:	82 60       	ori	r24, 0x02	; 2
    3a78:	80 83       	st	Z, r24
    3a7a:	e5 e3       	ldi	r30, 0x35	; 53
    3a7c:	f0 e0       	ldi	r31, 0x00	; 0
    3a7e:	80 81       	ld	r24, Z
    3a80:	8b 7f       	andi	r24, 0xFB	; 251
    3a82:	80 83       	st	Z, r24
    3a84:	e5 e3       	ldi	r30, 0x35	; 53
    3a86:	f0 e0       	ldi	r31, 0x00	; 0
    3a88:	80 81       	ld	r24, Z
    3a8a:	88 60       	ori	r24, 0x08	; 8
    3a8c:	80 83       	st	Z, r24
    3a8e:	80 e0       	ldi	r24, 0x00	; 0
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	a8 e4       	ldi	r26, 0x48	; 72
    3a94:	b2 e4       	ldi	r27, 0x42	; 66
    3a96:	8d a7       	std	Y+45, r24	; 0x2d
    3a98:	9e a7       	std	Y+46, r25	; 0x2e
    3a9a:	af a7       	std	Y+47, r26	; 0x2f
    3a9c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3a9e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3aa0:	7e a5       	ldd	r23, Y+46	; 0x2e
    3aa2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3aa4:	98 a9       	ldd	r25, Y+48	; 0x30
    3aa6:	2b ea       	ldi	r18, 0xAB	; 171
    3aa8:	3a ea       	ldi	r19, 0xAA	; 170
    3aaa:	4a ea       	ldi	r20, 0xAA	; 170
    3aac:	50 e4       	ldi	r21, 0x40	; 64
    3aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	89 a7       	std	Y+41, r24	; 0x29
    3ab8:	9a a7       	std	Y+42, r25	; 0x2a
    3aba:	ab a7       	std	Y+43, r26	; 0x2b
    3abc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3abe:	69 a5       	ldd	r22, Y+41	; 0x29
    3ac0:	7a a5       	ldd	r23, Y+42	; 0x2a
    3ac2:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ac4:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	40 e8       	ldi	r20, 0x80	; 128
    3acc:	5f e3       	ldi	r21, 0x3F	; 63
    3ace:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ad2:	88 23       	and	r24, r24
    3ad4:	1c f4       	brge	.+6      	; 0x3adc <keypressed+0x60c>
		__ticks = 1;
    3ad6:	81 e0       	ldi	r24, 0x01	; 1
    3ad8:	88 a7       	std	Y+40, r24	; 0x28
    3ada:	91 c0       	rjmp	.+290    	; 0x3bfe <keypressed+0x72e>
	else if (__tmp > 255)
    3adc:	69 a5       	ldd	r22, Y+41	; 0x29
    3ade:	7a a5       	ldd	r23, Y+42	; 0x2a
    3ae0:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ae2:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ae4:	20 e0       	ldi	r18, 0x00	; 0
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	4f e7       	ldi	r20, 0x7F	; 127
    3aea:	53 e4       	ldi	r21, 0x43	; 67
    3aec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3af0:	18 16       	cp	r1, r24
    3af2:	0c f0       	brlt	.+2      	; 0x3af6 <keypressed+0x626>
    3af4:	7b c0       	rjmp	.+246    	; 0x3bec <keypressed+0x71c>
	{
		_delay_ms(__us / 1000.0);
    3af6:	6d a5       	ldd	r22, Y+45	; 0x2d
    3af8:	7e a5       	ldd	r23, Y+46	; 0x2e
    3afa:	8f a5       	ldd	r24, Y+47	; 0x2f
    3afc:	98 a9       	ldd	r25, Y+48	; 0x30
    3afe:	20 e0       	ldi	r18, 0x00	; 0
    3b00:	30 e0       	ldi	r19, 0x00	; 0
    3b02:	4a e7       	ldi	r20, 0x7A	; 122
    3b04:	54 e4       	ldi	r21, 0x44	; 68
    3b06:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b0a:	dc 01       	movw	r26, r24
    3b0c:	cb 01       	movw	r24, r22
    3b0e:	8c a3       	std	Y+36, r24	; 0x24
    3b10:	9d a3       	std	Y+37, r25	; 0x25
    3b12:	ae a3       	std	Y+38, r26	; 0x26
    3b14:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b16:	6c a1       	ldd	r22, Y+36	; 0x24
    3b18:	7d a1       	ldd	r23, Y+37	; 0x25
    3b1a:	8e a1       	ldd	r24, Y+38	; 0x26
    3b1c:	9f a1       	ldd	r25, Y+39	; 0x27
    3b1e:	20 e0       	ldi	r18, 0x00	; 0
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	4a e7       	ldi	r20, 0x7A	; 122
    3b24:	55 e4       	ldi	r21, 0x45	; 69
    3b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	cb 01       	movw	r24, r22
    3b2e:	88 a3       	std	Y+32, r24	; 0x20
    3b30:	99 a3       	std	Y+33, r25	; 0x21
    3b32:	aa a3       	std	Y+34, r26	; 0x22
    3b34:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3b36:	68 a1       	ldd	r22, Y+32	; 0x20
    3b38:	79 a1       	ldd	r23, Y+33	; 0x21
    3b3a:	8a a1       	ldd	r24, Y+34	; 0x22
    3b3c:	9b a1       	ldd	r25, Y+35	; 0x23
    3b3e:	20 e0       	ldi	r18, 0x00	; 0
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	40 e8       	ldi	r20, 0x80	; 128
    3b44:	5f e3       	ldi	r21, 0x3F	; 63
    3b46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b4a:	88 23       	and	r24, r24
    3b4c:	2c f4       	brge	.+10     	; 0x3b58 <keypressed+0x688>
		__ticks = 1;
    3b4e:	81 e0       	ldi	r24, 0x01	; 1
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	9f 8f       	std	Y+31, r25	; 0x1f
    3b54:	8e 8f       	std	Y+30, r24	; 0x1e
    3b56:	3f c0       	rjmp	.+126    	; 0x3bd6 <keypressed+0x706>
	else if (__tmp > 65535)
    3b58:	68 a1       	ldd	r22, Y+32	; 0x20
    3b5a:	79 a1       	ldd	r23, Y+33	; 0x21
    3b5c:	8a a1       	ldd	r24, Y+34	; 0x22
    3b5e:	9b a1       	ldd	r25, Y+35	; 0x23
    3b60:	20 e0       	ldi	r18, 0x00	; 0
    3b62:	3f ef       	ldi	r19, 0xFF	; 255
    3b64:	4f e7       	ldi	r20, 0x7F	; 127
    3b66:	57 e4       	ldi	r21, 0x47	; 71
    3b68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b6c:	18 16       	cp	r1, r24
    3b6e:	4c f5       	brge	.+82     	; 0x3bc2 <keypressed+0x6f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b70:	6c a1       	ldd	r22, Y+36	; 0x24
    3b72:	7d a1       	ldd	r23, Y+37	; 0x25
    3b74:	8e a1       	ldd	r24, Y+38	; 0x26
    3b76:	9f a1       	ldd	r25, Y+39	; 0x27
    3b78:	20 e0       	ldi	r18, 0x00	; 0
    3b7a:	30 e0       	ldi	r19, 0x00	; 0
    3b7c:	40 e2       	ldi	r20, 0x20	; 32
    3b7e:	51 e4       	ldi	r21, 0x41	; 65
    3b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b84:	dc 01       	movw	r26, r24
    3b86:	cb 01       	movw	r24, r22
    3b88:	bc 01       	movw	r22, r24
    3b8a:	cd 01       	movw	r24, r26
    3b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	9f 8f       	std	Y+31, r25	; 0x1f
    3b96:	8e 8f       	std	Y+30, r24	; 0x1e
    3b98:	0f c0       	rjmp	.+30     	; 0x3bb8 <keypressed+0x6e8>
    3b9a:	80 e9       	ldi	r24, 0x90	; 144
    3b9c:	91 e0       	ldi	r25, 0x01	; 1
    3b9e:	9d 8f       	std	Y+29, r25	; 0x1d
    3ba0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3ba2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3ba4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3ba6:	01 97       	sbiw	r24, 0x01	; 1
    3ba8:	f1 f7       	brne	.-4      	; 0x3ba6 <keypressed+0x6d6>
    3baa:	9d 8f       	std	Y+29, r25	; 0x1d
    3bac:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3bb0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3bb2:	01 97       	sbiw	r24, 0x01	; 1
    3bb4:	9f 8f       	std	Y+31, r25	; 0x1f
    3bb6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bb8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3bba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3bbc:	00 97       	sbiw	r24, 0x00	; 0
    3bbe:	69 f7       	brne	.-38     	; 0x3b9a <keypressed+0x6ca>
    3bc0:	24 c0       	rjmp	.+72     	; 0x3c0a <keypressed+0x73a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bc2:	68 a1       	ldd	r22, Y+32	; 0x20
    3bc4:	79 a1       	ldd	r23, Y+33	; 0x21
    3bc6:	8a a1       	ldd	r24, Y+34	; 0x22
    3bc8:	9b a1       	ldd	r25, Y+35	; 0x23
    3bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bce:	dc 01       	movw	r26, r24
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	9f 8f       	std	Y+31, r25	; 0x1f
    3bd4:	8e 8f       	std	Y+30, r24	; 0x1e
    3bd6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3bd8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3bda:	9b 8f       	std	Y+27, r25	; 0x1b
    3bdc:	8a 8f       	std	Y+26, r24	; 0x1a
    3bde:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3be0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3be2:	01 97       	sbiw	r24, 0x01	; 1
    3be4:	f1 f7       	brne	.-4      	; 0x3be2 <keypressed+0x712>
    3be6:	9b 8f       	std	Y+27, r25	; 0x1b
    3be8:	8a 8f       	std	Y+26, r24	; 0x1a
    3bea:	0f c0       	rjmp	.+30     	; 0x3c0a <keypressed+0x73a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3bec:	69 a5       	ldd	r22, Y+41	; 0x29
    3bee:	7a a5       	ldd	r23, Y+42	; 0x2a
    3bf0:	8b a5       	ldd	r24, Y+43	; 0x2b
    3bf2:	9c a5       	ldd	r25, Y+44	; 0x2c
    3bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf8:	dc 01       	movw	r26, r24
    3bfa:	cb 01       	movw	r24, r22
    3bfc:	88 a7       	std	Y+40, r24	; 0x28
    3bfe:	88 a5       	ldd	r24, Y+40	; 0x28
    3c00:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c02:	89 8d       	ldd	r24, Y+25	; 0x19
    3c04:	8a 95       	dec	r24
    3c06:	f1 f7       	brne	.-4      	; 0x3c04 <keypressed+0x734>
    3c08:	89 8f       	std	Y+25, r24	; 0x19
     _delay_us(50);
     if (c1==0){while (c1==0); return ('1');}
    3c0a:	e3 e3       	ldi	r30, 0x33	; 51
    3c0c:	f0 e0       	ldi	r31, 0x00	; 0
    3c0e:	80 81       	ld	r24, Z
    3c10:	80 71       	andi	r24, 0x10	; 16
    3c12:	88 23       	and	r24, r24
    3c14:	59 f4       	brne	.+22     	; 0x3c2c <keypressed+0x75c>
    3c16:	e3 e3       	ldi	r30, 0x33	; 51
    3c18:	f0 e0       	ldi	r31, 0x00	; 0
    3c1a:	80 81       	ld	r24, Z
    3c1c:	80 71       	andi	r24, 0x10	; 16
    3c1e:	88 23       	and	r24, r24
    3c20:	d1 f3       	breq	.-12     	; 0x3c16 <keypressed+0x746>
    3c22:	81 e3       	ldi	r24, 0x31	; 49
    3c24:	a2 96       	adiw	r28, 0x22	; 34
    3c26:	8f af       	std	Y+63, r24	; 0x3f
    3c28:	a2 97       	sbiw	r28, 0x22	; 34
    3c2a:	49 c1       	rjmp	.+658    	; 0x3ebe <keypressed+0x9ee>
     if (c2==0){while (c2==0); return ('2');}
    3c2c:	e3 e3       	ldi	r30, 0x33	; 51
    3c2e:	f0 e0       	ldi	r31, 0x00	; 0
    3c30:	80 81       	ld	r24, Z
    3c32:	80 72       	andi	r24, 0x20	; 32
    3c34:	88 23       	and	r24, r24
    3c36:	59 f4       	brne	.+22     	; 0x3c4e <keypressed+0x77e>
    3c38:	e3 e3       	ldi	r30, 0x33	; 51
    3c3a:	f0 e0       	ldi	r31, 0x00	; 0
    3c3c:	80 81       	ld	r24, Z
    3c3e:	80 72       	andi	r24, 0x20	; 32
    3c40:	88 23       	and	r24, r24
    3c42:	d1 f3       	breq	.-12     	; 0x3c38 <keypressed+0x768>
    3c44:	e2 e3       	ldi	r30, 0x32	; 50
    3c46:	a2 96       	adiw	r28, 0x22	; 34
    3c48:	ef af       	std	Y+63, r30	; 0x3f
    3c4a:	a2 97       	sbiw	r28, 0x22	; 34
    3c4c:	38 c1       	rjmp	.+624    	; 0x3ebe <keypressed+0x9ee>
     if (c3==0){while (c3==0); return ('3');}
    3c4e:	e3 e3       	ldi	r30, 0x33	; 51
    3c50:	f0 e0       	ldi	r31, 0x00	; 0
    3c52:	80 81       	ld	r24, Z
    3c54:	80 74       	andi	r24, 0x40	; 64
    3c56:	88 23       	and	r24, r24
    3c58:	59 f4       	brne	.+22     	; 0x3c70 <keypressed+0x7a0>
    3c5a:	e3 e3       	ldi	r30, 0x33	; 51
    3c5c:	f0 e0       	ldi	r31, 0x00	; 0
    3c5e:	80 81       	ld	r24, Z
    3c60:	80 74       	andi	r24, 0x40	; 64
    3c62:	88 23       	and	r24, r24
    3c64:	d1 f3       	breq	.-12     	; 0x3c5a <keypressed+0x78a>
    3c66:	f3 e3       	ldi	r31, 0x33	; 51
    3c68:	a2 96       	adiw	r28, 0x22	; 34
    3c6a:	ff af       	std	Y+63, r31	; 0x3f
    3c6c:	a2 97       	sbiw	r28, 0x22	; 34
    3c6e:	27 c1       	rjmp	.+590    	; 0x3ebe <keypressed+0x9ee>
     if (c4==0){while (c4==0); return ('-');}
    3c70:	e3 e3       	ldi	r30, 0x33	; 51
    3c72:	f0 e0       	ldi	r31, 0x00	; 0
    3c74:	80 81       	ld	r24, Z
    3c76:	80 78       	andi	r24, 0x80	; 128
    3c78:	88 23       	and	r24, r24
    3c7a:	59 f4       	brne	.+22     	; 0x3c92 <keypressed+0x7c2>
    3c7c:	e3 e3       	ldi	r30, 0x33	; 51
    3c7e:	f0 e0       	ldi	r31, 0x00	; 0
    3c80:	80 81       	ld	r24, Z
    3c82:	80 78       	andi	r24, 0x80	; 128
    3c84:	88 23       	and	r24, r24
    3c86:	d1 f3       	breq	.-12     	; 0x3c7c <keypressed+0x7ac>
    3c88:	8d e2       	ldi	r24, 0x2D	; 45
    3c8a:	a2 96       	adiw	r28, 0x22	; 34
    3c8c:	8f af       	std	Y+63, r24	; 0x3f
    3c8e:	a2 97       	sbiw	r28, 0x22	; 34
    3c90:	16 c1       	rjmp	.+556    	; 0x3ebe <keypressed+0x9ee>

     r1=1;     r2=1;     r3=1;     r4=0;
    3c92:	e5 e3       	ldi	r30, 0x35	; 53
    3c94:	f0 e0       	ldi	r31, 0x00	; 0
    3c96:	80 81       	ld	r24, Z
    3c98:	81 60       	ori	r24, 0x01	; 1
    3c9a:	80 83       	st	Z, r24
    3c9c:	e5 e3       	ldi	r30, 0x35	; 53
    3c9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ca0:	80 81       	ld	r24, Z
    3ca2:	82 60       	ori	r24, 0x02	; 2
    3ca4:	80 83       	st	Z, r24
    3ca6:	e5 e3       	ldi	r30, 0x35	; 53
    3ca8:	f0 e0       	ldi	r31, 0x00	; 0
    3caa:	80 81       	ld	r24, Z
    3cac:	84 60       	ori	r24, 0x04	; 4
    3cae:	80 83       	st	Z, r24
    3cb0:	e5 e3       	ldi	r30, 0x35	; 53
    3cb2:	f0 e0       	ldi	r31, 0x00	; 0
    3cb4:	80 81       	ld	r24, Z
    3cb6:	87 7f       	andi	r24, 0xF7	; 247
    3cb8:	80 83       	st	Z, r24
    3cba:	80 e0       	ldi	r24, 0x00	; 0
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	a8 e4       	ldi	r26, 0x48	; 72
    3cc0:	b2 e4       	ldi	r27, 0x42	; 66
    3cc2:	8d 8b       	std	Y+21, r24	; 0x15
    3cc4:	9e 8b       	std	Y+22, r25	; 0x16
    3cc6:	af 8b       	std	Y+23, r26	; 0x17
    3cc8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3cca:	6d 89       	ldd	r22, Y+21	; 0x15
    3ccc:	7e 89       	ldd	r23, Y+22	; 0x16
    3cce:	8f 89       	ldd	r24, Y+23	; 0x17
    3cd0:	98 8d       	ldd	r25, Y+24	; 0x18
    3cd2:	2b ea       	ldi	r18, 0xAB	; 171
    3cd4:	3a ea       	ldi	r19, 0xAA	; 170
    3cd6:	4a ea       	ldi	r20, 0xAA	; 170
    3cd8:	50 e4       	ldi	r21, 0x40	; 64
    3cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cde:	dc 01       	movw	r26, r24
    3ce0:	cb 01       	movw	r24, r22
    3ce2:	89 8b       	std	Y+17, r24	; 0x11
    3ce4:	9a 8b       	std	Y+18, r25	; 0x12
    3ce6:	ab 8b       	std	Y+19, r26	; 0x13
    3ce8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3cea:	69 89       	ldd	r22, Y+17	; 0x11
    3cec:	7a 89       	ldd	r23, Y+18	; 0x12
    3cee:	8b 89       	ldd	r24, Y+19	; 0x13
    3cf0:	9c 89       	ldd	r25, Y+20	; 0x14
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	40 e8       	ldi	r20, 0x80	; 128
    3cf8:	5f e3       	ldi	r21, 0x3F	; 63
    3cfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cfe:	88 23       	and	r24, r24
    3d00:	1c f4       	brge	.+6      	; 0x3d08 <keypressed+0x838>
		__ticks = 1;
    3d02:	81 e0       	ldi	r24, 0x01	; 1
    3d04:	88 8b       	std	Y+16, r24	; 0x10
    3d06:	91 c0       	rjmp	.+290    	; 0x3e2a <keypressed+0x95a>
	else if (__tmp > 255)
    3d08:	69 89       	ldd	r22, Y+17	; 0x11
    3d0a:	7a 89       	ldd	r23, Y+18	; 0x12
    3d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    3d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	4f e7       	ldi	r20, 0x7F	; 127
    3d16:	53 e4       	ldi	r21, 0x43	; 67
    3d18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d1c:	18 16       	cp	r1, r24
    3d1e:	0c f0       	brlt	.+2      	; 0x3d22 <keypressed+0x852>
    3d20:	7b c0       	rjmp	.+246    	; 0x3e18 <keypressed+0x948>
	{
		_delay_ms(__us / 1000.0);
    3d22:	6d 89       	ldd	r22, Y+21	; 0x15
    3d24:	7e 89       	ldd	r23, Y+22	; 0x16
    3d26:	8f 89       	ldd	r24, Y+23	; 0x17
    3d28:	98 8d       	ldd	r25, Y+24	; 0x18
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	4a e7       	ldi	r20, 0x7A	; 122
    3d30:	54 e4       	ldi	r21, 0x44	; 68
    3d32:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d36:	dc 01       	movw	r26, r24
    3d38:	cb 01       	movw	r24, r22
    3d3a:	8c 87       	std	Y+12, r24	; 0x0c
    3d3c:	9d 87       	std	Y+13, r25	; 0x0d
    3d3e:	ae 87       	std	Y+14, r26	; 0x0e
    3d40:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d42:	6c 85       	ldd	r22, Y+12	; 0x0c
    3d44:	7d 85       	ldd	r23, Y+13	; 0x0d
    3d46:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d48:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d4a:	20 e0       	ldi	r18, 0x00	; 0
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	4a e7       	ldi	r20, 0x7A	; 122
    3d50:	55 e4       	ldi	r21, 0x45	; 69
    3d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d56:	dc 01       	movw	r26, r24
    3d58:	cb 01       	movw	r24, r22
    3d5a:	88 87       	std	Y+8, r24	; 0x08
    3d5c:	99 87       	std	Y+9, r25	; 0x09
    3d5e:	aa 87       	std	Y+10, r26	; 0x0a
    3d60:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3d62:	68 85       	ldd	r22, Y+8	; 0x08
    3d64:	79 85       	ldd	r23, Y+9	; 0x09
    3d66:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d68:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d6a:	20 e0       	ldi	r18, 0x00	; 0
    3d6c:	30 e0       	ldi	r19, 0x00	; 0
    3d6e:	40 e8       	ldi	r20, 0x80	; 128
    3d70:	5f e3       	ldi	r21, 0x3F	; 63
    3d72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d76:	88 23       	and	r24, r24
    3d78:	2c f4       	brge	.+10     	; 0x3d84 <keypressed+0x8b4>
		__ticks = 1;
    3d7a:	81 e0       	ldi	r24, 0x01	; 1
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	9f 83       	std	Y+7, r25	; 0x07
    3d80:	8e 83       	std	Y+6, r24	; 0x06
    3d82:	3f c0       	rjmp	.+126    	; 0x3e02 <keypressed+0x932>
	else if (__tmp > 65535)
    3d84:	68 85       	ldd	r22, Y+8	; 0x08
    3d86:	79 85       	ldd	r23, Y+9	; 0x09
    3d88:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d8c:	20 e0       	ldi	r18, 0x00	; 0
    3d8e:	3f ef       	ldi	r19, 0xFF	; 255
    3d90:	4f e7       	ldi	r20, 0x7F	; 127
    3d92:	57 e4       	ldi	r21, 0x47	; 71
    3d94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d98:	18 16       	cp	r1, r24
    3d9a:	4c f5       	brge	.+82     	; 0x3dee <keypressed+0x91e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d9c:	6c 85       	ldd	r22, Y+12	; 0x0c
    3d9e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3da0:	8e 85       	ldd	r24, Y+14	; 0x0e
    3da2:	9f 85       	ldd	r25, Y+15	; 0x0f
    3da4:	20 e0       	ldi	r18, 0x00	; 0
    3da6:	30 e0       	ldi	r19, 0x00	; 0
    3da8:	40 e2       	ldi	r20, 0x20	; 32
    3daa:	51 e4       	ldi	r21, 0x41	; 65
    3dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db0:	dc 01       	movw	r26, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	bc 01       	movw	r22, r24
    3db6:	cd 01       	movw	r24, r26
    3db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dbc:	dc 01       	movw	r26, r24
    3dbe:	cb 01       	movw	r24, r22
    3dc0:	9f 83       	std	Y+7, r25	; 0x07
    3dc2:	8e 83       	std	Y+6, r24	; 0x06
    3dc4:	0f c0       	rjmp	.+30     	; 0x3de4 <keypressed+0x914>
    3dc6:	80 e9       	ldi	r24, 0x90	; 144
    3dc8:	91 e0       	ldi	r25, 0x01	; 1
    3dca:	9d 83       	std	Y+5, r25	; 0x05
    3dcc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3dce:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd0:	9d 81       	ldd	r25, Y+5	; 0x05
    3dd2:	01 97       	sbiw	r24, 0x01	; 1
    3dd4:	f1 f7       	brne	.-4      	; 0x3dd2 <keypressed+0x902>
    3dd6:	9d 83       	std	Y+5, r25	; 0x05
    3dd8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dda:	8e 81       	ldd	r24, Y+6	; 0x06
    3ddc:	9f 81       	ldd	r25, Y+7	; 0x07
    3dde:	01 97       	sbiw	r24, 0x01	; 1
    3de0:	9f 83       	std	Y+7, r25	; 0x07
    3de2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3de4:	8e 81       	ldd	r24, Y+6	; 0x06
    3de6:	9f 81       	ldd	r25, Y+7	; 0x07
    3de8:	00 97       	sbiw	r24, 0x00	; 0
    3dea:	69 f7       	brne	.-38     	; 0x3dc6 <keypressed+0x8f6>
    3dec:	24 c0       	rjmp	.+72     	; 0x3e36 <keypressed+0x966>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dee:	68 85       	ldd	r22, Y+8	; 0x08
    3df0:	79 85       	ldd	r23, Y+9	; 0x09
    3df2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3df4:	9b 85       	ldd	r25, Y+11	; 0x0b
    3df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dfa:	dc 01       	movw	r26, r24
    3dfc:	cb 01       	movw	r24, r22
    3dfe:	9f 83       	std	Y+7, r25	; 0x07
    3e00:	8e 83       	std	Y+6, r24	; 0x06
    3e02:	8e 81       	ldd	r24, Y+6	; 0x06
    3e04:	9f 81       	ldd	r25, Y+7	; 0x07
    3e06:	9b 83       	std	Y+3, r25	; 0x03
    3e08:	8a 83       	std	Y+2, r24	; 0x02
    3e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e0e:	01 97       	sbiw	r24, 0x01	; 1
    3e10:	f1 f7       	brne	.-4      	; 0x3e0e <keypressed+0x93e>
    3e12:	9b 83       	std	Y+3, r25	; 0x03
    3e14:	8a 83       	std	Y+2, r24	; 0x02
    3e16:	0f c0       	rjmp	.+30     	; 0x3e36 <keypressed+0x966>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3e18:	69 89       	ldd	r22, Y+17	; 0x11
    3e1a:	7a 89       	ldd	r23, Y+18	; 0x12
    3e1c:	8b 89       	ldd	r24, Y+19	; 0x13
    3e1e:	9c 89       	ldd	r25, Y+20	; 0x14
    3e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e24:	dc 01       	movw	r26, r24
    3e26:	cb 01       	movw	r24, r22
    3e28:	88 8b       	std	Y+16, r24	; 0x10
    3e2a:	88 89       	ldd	r24, Y+16	; 0x10
    3e2c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3e2e:	89 81       	ldd	r24, Y+1	; 0x01
    3e30:	8a 95       	dec	r24
    3e32:	f1 f7       	brne	.-4      	; 0x3e30 <keypressed+0x960>
    3e34:	89 83       	std	Y+1, r24	; 0x01
     _delay_us(50);
     if (c1==0){while (c1==0); return ('C');}
    3e36:	e3 e3       	ldi	r30, 0x33	; 51
    3e38:	f0 e0       	ldi	r31, 0x00	; 0
    3e3a:	80 81       	ld	r24, Z
    3e3c:	80 71       	andi	r24, 0x10	; 16
    3e3e:	88 23       	and	r24, r24
    3e40:	59 f4       	brne	.+22     	; 0x3e58 <keypressed+0x988>
    3e42:	e3 e3       	ldi	r30, 0x33	; 51
    3e44:	f0 e0       	ldi	r31, 0x00	; 0
    3e46:	80 81       	ld	r24, Z
    3e48:	80 71       	andi	r24, 0x10	; 16
    3e4a:	88 23       	and	r24, r24
    3e4c:	d1 f3       	breq	.-12     	; 0x3e42 <keypressed+0x972>
    3e4e:	e3 e4       	ldi	r30, 0x43	; 67
    3e50:	a2 96       	adiw	r28, 0x22	; 34
    3e52:	ef af       	std	Y+63, r30	; 0x3f
    3e54:	a2 97       	sbiw	r28, 0x22	; 34
    3e56:	33 c0       	rjmp	.+102    	; 0x3ebe <keypressed+0x9ee>
     if (c2==0){while (c2==0); return ('0');}
    3e58:	e3 e3       	ldi	r30, 0x33	; 51
    3e5a:	f0 e0       	ldi	r31, 0x00	; 0
    3e5c:	80 81       	ld	r24, Z
    3e5e:	80 72       	andi	r24, 0x20	; 32
    3e60:	88 23       	and	r24, r24
    3e62:	59 f4       	brne	.+22     	; 0x3e7a <keypressed+0x9aa>
    3e64:	e3 e3       	ldi	r30, 0x33	; 51
    3e66:	f0 e0       	ldi	r31, 0x00	; 0
    3e68:	80 81       	ld	r24, Z
    3e6a:	80 72       	andi	r24, 0x20	; 32
    3e6c:	88 23       	and	r24, r24
    3e6e:	d1 f3       	breq	.-12     	; 0x3e64 <keypressed+0x994>
    3e70:	f0 e3       	ldi	r31, 0x30	; 48
    3e72:	a2 96       	adiw	r28, 0x22	; 34
    3e74:	ff af       	std	Y+63, r31	; 0x3f
    3e76:	a2 97       	sbiw	r28, 0x22	; 34
    3e78:	22 c0       	rjmp	.+68     	; 0x3ebe <keypressed+0x9ee>
     if (c3==0){while (c3==0); return ('=');}
    3e7a:	e3 e3       	ldi	r30, 0x33	; 51
    3e7c:	f0 e0       	ldi	r31, 0x00	; 0
    3e7e:	80 81       	ld	r24, Z
    3e80:	80 74       	andi	r24, 0x40	; 64
    3e82:	88 23       	and	r24, r24
    3e84:	59 f4       	brne	.+22     	; 0x3e9c <keypressed+0x9cc>
    3e86:	e3 e3       	ldi	r30, 0x33	; 51
    3e88:	f0 e0       	ldi	r31, 0x00	; 0
    3e8a:	80 81       	ld	r24, Z
    3e8c:	80 74       	andi	r24, 0x40	; 64
    3e8e:	88 23       	and	r24, r24
    3e90:	d1 f3       	breq	.-12     	; 0x3e86 <keypressed+0x9b6>
    3e92:	8d e3       	ldi	r24, 0x3D	; 61
    3e94:	a2 96       	adiw	r28, 0x22	; 34
    3e96:	8f af       	std	Y+63, r24	; 0x3f
    3e98:	a2 97       	sbiw	r28, 0x22	; 34
    3e9a:	11 c0       	rjmp	.+34     	; 0x3ebe <keypressed+0x9ee>
     if (c4==0){while (c4==0); return ('+');}
    3e9c:	e3 e3       	ldi	r30, 0x33	; 51
    3e9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ea0:	80 81       	ld	r24, Z
    3ea2:	80 78       	andi	r24, 0x80	; 128
    3ea4:	88 23       	and	r24, r24
    3ea6:	09 f0       	breq	.+2      	; 0x3eaa <keypressed+0x9da>
    3ea8:	28 cb       	rjmp	.-2480   	; 0x34fa <keypressed+0x2a>
    3eaa:	e3 e3       	ldi	r30, 0x33	; 51
    3eac:	f0 e0       	ldi	r31, 0x00	; 0
    3eae:	80 81       	ld	r24, Z
    3eb0:	80 78       	andi	r24, 0x80	; 128
    3eb2:	88 23       	and	r24, r24
    3eb4:	d1 f3       	breq	.-12     	; 0x3eaa <keypressed+0x9da>
    3eb6:	eb e2       	ldi	r30, 0x2B	; 43
    3eb8:	a2 96       	adiw	r28, 0x22	; 34
    3eba:	ef af       	std	Y+63, r30	; 0x3f
    3ebc:	a2 97       	sbiw	r28, 0x22	; 34
     }
    3ebe:	a2 96       	adiw	r28, 0x22	; 34
    3ec0:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ec2:	a2 97       	sbiw	r28, 0x22	; 34

  }
    3ec4:	cf 59       	subi	r28, 0x9F	; 159
    3ec6:	df 4f       	sbci	r29, 0xFF	; 255
    3ec8:	0f b6       	in	r0, 0x3f	; 63
    3eca:	f8 94       	cli
    3ecc:	de bf       	out	0x3e, r29	; 62
    3ece:	0f be       	out	0x3f, r0	; 63
    3ed0:	cd bf       	out	0x3d, r28	; 61
    3ed2:	cf 91       	pop	r28
    3ed4:	df 91       	pop	r29
    3ed6:	1f 91       	pop	r17
    3ed8:	0f 91       	pop	r16
    3eda:	08 95       	ret

00003edc <main>:
 */

#include"../HAL/KeyPad/KeyPad.h"
#include "Calculator.h"

int main(){
    3edc:	df 93       	push	r29
    3ede:	cf 93       	push	r28
    3ee0:	cd b7       	in	r28, 0x3d	; 61
    3ee2:	de b7       	in	r29, 0x3e	; 62
    3ee4:	a6 97       	sbiw	r28, 0x26	; 38
    3ee6:	0f b6       	in	r0, 0x3f	; 63
    3ee8:	f8 94       	cli
    3eea:	de bf       	out	0x3e, r29	; 62
    3eec:	0f be       	out	0x3f, r0	; 63
    3eee:	cd bf       	out	0x3d, r28	; 61

	    LCDInit4BitMode();
    3ef0:	0e 94 bf 13 	call	0x277e	; 0x277e <LCDInit4BitMode>

	u8 key ;           	// Key char for keeping record of pressed key
    u16 num1, num2;       				// First number, second number
    u8 Op;    				// Function to be performed among two numbers
u8 msg []= "Calculator";
    3ef4:	9e 01       	movw	r18, r28
    3ef6:	2b 5e       	subi	r18, 0xEB	; 235
    3ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    3efa:	3b a3       	std	Y+35, r19	; 0x23
    3efc:	2a a3       	std	Y+34, r18	; 0x22
    3efe:	40 e6       	ldi	r20, 0x60	; 96
    3f00:	50 e0       	ldi	r21, 0x00	; 0
    3f02:	5d a3       	std	Y+37, r21	; 0x25
    3f04:	4c a3       	std	Y+36, r20	; 0x24
    3f06:	5b e0       	ldi	r21, 0x0B	; 11
    3f08:	5e a3       	std	Y+38, r21	; 0x26
    3f0a:	ec a1       	ldd	r30, Y+36	; 0x24
    3f0c:	fd a1       	ldd	r31, Y+37	; 0x25
    3f0e:	00 80       	ld	r0, Z
    3f10:	2c a1       	ldd	r18, Y+36	; 0x24
    3f12:	3d a1       	ldd	r19, Y+37	; 0x25
    3f14:	2f 5f       	subi	r18, 0xFF	; 255
    3f16:	3f 4f       	sbci	r19, 0xFF	; 255
    3f18:	3d a3       	std	Y+37, r19	; 0x25
    3f1a:	2c a3       	std	Y+36, r18	; 0x24
    3f1c:	ea a1       	ldd	r30, Y+34	; 0x22
    3f1e:	fb a1       	ldd	r31, Y+35	; 0x23
    3f20:	00 82       	st	Z, r0
    3f22:	2a a1       	ldd	r18, Y+34	; 0x22
    3f24:	3b a1       	ldd	r19, Y+35	; 0x23
    3f26:	2f 5f       	subi	r18, 0xFF	; 255
    3f28:	3f 4f       	sbci	r19, 0xFF	; 255
    3f2a:	3b a3       	std	Y+35, r19	; 0x23
    3f2c:	2a a3       	std	Y+34, r18	; 0x22
    3f2e:	3e a1       	ldd	r19, Y+38	; 0x26
    3f30:	31 50       	subi	r19, 0x01	; 1
    3f32:	3e a3       	std	Y+38, r19	; 0x26
    3f34:	4e a1       	ldd	r20, Y+38	; 0x26
    3f36:	44 23       	and	r20, r20
    3f38:	41 f7       	brne	.-48     	; 0x3f0a <main+0x2e>
	LCD_SetCursorPosition(5,1);
    3f3a:	85 e0       	ldi	r24, 0x05	; 5
    3f3c:	61 e0       	ldi	r22, 0x01	; 1
    3f3e:	0e 94 ef 18 	call	0x31de	; 0x31de <LCD_SetCursorPosition>

	LCD_WriteString(msg);
    3f42:	ce 01       	movw	r24, r28
    3f44:	45 96       	adiw	r24, 0x15	; 21
    3f46:	0e 94 96 18 	call	0x312c	; 0x312c <LCD_WriteString>
    3f4a:	80 e0       	ldi	r24, 0x00	; 0
    3f4c:	90 e8       	ldi	r25, 0x80	; 128
    3f4e:	ab e3       	ldi	r26, 0x3B	; 59
    3f50:	b5 e4       	ldi	r27, 0x45	; 69
    3f52:	8b 87       	std	Y+11, r24	; 0x0b
    3f54:	9c 87       	std	Y+12, r25	; 0x0c
    3f56:	ad 87       	std	Y+13, r26	; 0x0d
    3f58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f60:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f62:	20 e0       	ldi	r18, 0x00	; 0
    3f64:	30 e0       	ldi	r19, 0x00	; 0
    3f66:	4a e7       	ldi	r20, 0x7A	; 122
    3f68:	55 e4       	ldi	r21, 0x45	; 69
    3f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f6e:	dc 01       	movw	r26, r24
    3f70:	cb 01       	movw	r24, r22
    3f72:	8f 83       	std	Y+7, r24	; 0x07
    3f74:	98 87       	std	Y+8, r25	; 0x08
    3f76:	a9 87       	std	Y+9, r26	; 0x09
    3f78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f7a:	6f 81       	ldd	r22, Y+7	; 0x07
    3f7c:	78 85       	ldd	r23, Y+8	; 0x08
    3f7e:	89 85       	ldd	r24, Y+9	; 0x09
    3f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f82:	20 e0       	ldi	r18, 0x00	; 0
    3f84:	30 e0       	ldi	r19, 0x00	; 0
    3f86:	40 e8       	ldi	r20, 0x80	; 128
    3f88:	5f e3       	ldi	r21, 0x3F	; 63
    3f8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f8e:	88 23       	and	r24, r24
    3f90:	2c f4       	brge	.+10     	; 0x3f9c <main+0xc0>
		__ticks = 1;
    3f92:	81 e0       	ldi	r24, 0x01	; 1
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	9e 83       	std	Y+6, r25	; 0x06
    3f98:	8d 83       	std	Y+5, r24	; 0x05
    3f9a:	3f c0       	rjmp	.+126    	; 0x401a <main+0x13e>
	else if (__tmp > 65535)
    3f9c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f9e:	78 85       	ldd	r23, Y+8	; 0x08
    3fa0:	89 85       	ldd	r24, Y+9	; 0x09
    3fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fa4:	20 e0       	ldi	r18, 0x00	; 0
    3fa6:	3f ef       	ldi	r19, 0xFF	; 255
    3fa8:	4f e7       	ldi	r20, 0x7F	; 127
    3faa:	57 e4       	ldi	r21, 0x47	; 71
    3fac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fb0:	18 16       	cp	r1, r24
    3fb2:	4c f5       	brge	.+82     	; 0x4006 <main+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fba:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fbc:	20 e0       	ldi	r18, 0x00	; 0
    3fbe:	30 e0       	ldi	r19, 0x00	; 0
    3fc0:	40 e2       	ldi	r20, 0x20	; 32
    3fc2:	51 e4       	ldi	r21, 0x41	; 65
    3fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fc8:	dc 01       	movw	r26, r24
    3fca:	cb 01       	movw	r24, r22
    3fcc:	bc 01       	movw	r22, r24
    3fce:	cd 01       	movw	r24, r26
    3fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fd4:	dc 01       	movw	r26, r24
    3fd6:	cb 01       	movw	r24, r22
    3fd8:	9e 83       	std	Y+6, r25	; 0x06
    3fda:	8d 83       	std	Y+5, r24	; 0x05
    3fdc:	0f c0       	rjmp	.+30     	; 0x3ffc <main+0x120>
    3fde:	80 e9       	ldi	r24, 0x90	; 144
    3fe0:	91 e0       	ldi	r25, 0x01	; 1
    3fe2:	9c 83       	std	Y+4, r25	; 0x04
    3fe4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    3fea:	01 97       	sbiw	r24, 0x01	; 1
    3fec:	f1 f7       	brne	.-4      	; 0x3fea <main+0x10e>
    3fee:	9c 83       	std	Y+4, r25	; 0x04
    3ff0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ff6:	01 97       	sbiw	r24, 0x01	; 1
    3ff8:	9e 83       	std	Y+6, r25	; 0x06
    3ffa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    4000:	00 97       	sbiw	r24, 0x00	; 0
    4002:	69 f7       	brne	.-38     	; 0x3fde <main+0x102>
    4004:	14 c0       	rjmp	.+40     	; 0x402e <main+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4006:	6f 81       	ldd	r22, Y+7	; 0x07
    4008:	78 85       	ldd	r23, Y+8	; 0x08
    400a:	89 85       	ldd	r24, Y+9	; 0x09
    400c:	9a 85       	ldd	r25, Y+10	; 0x0a
    400e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4012:	dc 01       	movw	r26, r24
    4014:	cb 01       	movw	r24, r22
    4016:	9e 83       	std	Y+6, r25	; 0x06
    4018:	8d 83       	std	Y+5, r24	; 0x05
    401a:	8d 81       	ldd	r24, Y+5	; 0x05
    401c:	9e 81       	ldd	r25, Y+6	; 0x06
    401e:	9a 83       	std	Y+2, r25	; 0x02
    4020:	89 83       	std	Y+1, r24	; 0x01
    4022:	89 81       	ldd	r24, Y+1	; 0x01
    4024:	9a 81       	ldd	r25, Y+2	; 0x02
    4026:	01 97       	sbiw	r24, 0x01	; 1
    4028:	f1 f7       	brne	.-4      	; 0x4026 <main+0x14a>
    402a:	9a 83       	std	Y+2, r25	; 0x02
    402c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
	LCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    402e:	81 e0       	ldi	r24, 0x01	; 1
    4030:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <LCD_WriteCommand4Bit>


    while(1)
    {
    key =keypressed();			 //get numb1
    4034:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <keypressed>
    4038:	8c 8b       	std	Y+20, r24	; 0x14
		LCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);         	// Clear LCD screen
    403a:	81 e0       	ldi	r24, 0x01	; 1
    403c:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <LCD_WriteCommand4Bit>
		LCD_WriteChar4Bit(key);       		// SendEND the key pressed to LCD
    4040:	8c 89       	ldd	r24, Y+20	; 0x14
    4042:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <LCD_WriteChar4Bit>
        num1 = GetNumber(key);
    4046:	8c 89       	ldd	r24, Y+20	; 0x14
    4048:	0e 94 ac 20 	call	0x4158	; 0x4158 <GetNumber>
    404c:	9b 8b       	std	Y+19, r25	; 0x13
    404e:	8a 8b       	std	Y+18, r24	; 0x12

        if(num1 != Error)            // If correct input then proceed, num1==Error means wrong input
    4050:	8a 89       	ldd	r24, Y+18	; 0x12
    4052:	9b 89       	ldd	r25, Y+19	; 0x13
    4054:	8d 30       	cpi	r24, 0x0D	; 13
    4056:	91 05       	cpc	r25, r1
    4058:	69 f3       	breq	.-38     	; 0x4034 <main+0x158>
        {
        	key =keypressed();		//get function
    405a:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <keypressed>
    405e:	8c 8b       	std	Y+20, r24	; 0x14
        	 LCD_WriteChar4Bit(key);             //Echo the key pressed to LCD
    4060:	8c 89       	ldd	r24, Y+20	; 0x14
    4062:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <LCD_WriteChar4Bit>
        	 Op = GetOperation(key);            //it checks for wrong Op
    4066:	8c 89       	ldd	r24, Y+20	; 0x14
    4068:	0e 94 38 21 	call	0x4270	; 0x4270 <GetOperation>
    406c:	8f 87       	std	Y+15, r24	; 0x0f
            if(Op!='e')                    //if correct input then proceed, Op=='e' means wrong input
    406e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4070:	85 36       	cpi	r24, 0x65	; 101
    4072:	01 f3       	breq	.-64     	; 0x4034 <main+0x158>
            {
            	key =keypressed();		 	//get numb2
    4074:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <keypressed>
    4078:	8c 8b       	std	Y+20, r24	; 0x14
            	 LCD_WriteChar4Bit(key);   				//Echo the key pressed to LCD
    407a:	8c 89       	ldd	r24, Y+20	; 0x14
    407c:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <LCD_WriteChar4Bit>
                num2 = GetNumber(key);
    4080:	8c 89       	ldd	r24, Y+20	; 0x14
    4082:	0e 94 ac 20 	call	0x4158	; 0x4158 <GetNumber>
    4086:	99 8b       	std	Y+17, r25	; 0x11
    4088:	88 8b       	std	Y+16, r24	; 0x10
                if(num2!=Error)  				//if correct input then proceed, num2==Error means wrong input
    408a:	88 89       	ldd	r24, Y+16	; 0x10
    408c:	99 89       	ldd	r25, Y+17	; 0x11
    408e:	8d 30       	cpi	r24, 0x0D	; 13
    4090:	91 05       	cpc	r25, r1
    4092:	81 f2       	breq	.-96     	; 0x4034 <main+0x158>
                {
                	key =keypressed();	//get equal sign
    4094:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <keypressed>
    4098:	8c 8b       	std	Y+20, r24	; 0x14
                	 LCD_WriteChar4Bit(key); //Echo the key pressed to LCD
    409a:	8c 89       	ldd	r24, Y+20	; 0x14
    409c:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <LCD_WriteChar4Bit>
                    if(key == '=')    //if = is pressed then proceed
    40a0:	8c 89       	ldd	r24, Y+20	; 0x14
    40a2:	8d 33       	cpi	r24, 0x3D	; 61
    40a4:	09 f0       	breq	.+2      	; 0x40a8 <main+0x1cc>
    40a6:	4c c0       	rjmp	.+152    	; 0x4140 <main+0x264>
                    {
                        switch(Op)    //switch on function
    40a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    40aa:	e8 2f       	mov	r30, r24
    40ac:	f0 e0       	ldi	r31, 0x00	; 0
    40ae:	f9 a3       	std	Y+33, r31	; 0x21
    40b0:	e8 a3       	std	Y+32, r30	; 0x20
    40b2:	28 a1       	ldd	r18, Y+32	; 0x20
    40b4:	39 a1       	ldd	r19, Y+33	; 0x21
    40b6:	2b 32       	cpi	r18, 0x2B	; 43
    40b8:	31 05       	cpc	r19, r1
    40ba:	b1 f0       	breq	.+44     	; 0x40e8 <main+0x20c>
    40bc:	48 a1       	ldd	r20, Y+32	; 0x20
    40be:	59 a1       	ldd	r21, Y+33	; 0x21
    40c0:	4c 32       	cpi	r20, 0x2C	; 44
    40c2:	51 05       	cpc	r21, r1
    40c4:	34 f4       	brge	.+12     	; 0x40d2 <main+0x1f6>
    40c6:	88 a1       	ldd	r24, Y+32	; 0x20
    40c8:	99 a1       	ldd	r25, Y+33	; 0x21
    40ca:	8a 32       	cpi	r24, 0x2A	; 42
    40cc:	91 05       	cpc	r25, r1
    40ce:	f1 f0       	breq	.+60     	; 0x410c <main+0x230>
    40d0:	b1 cf       	rjmp	.-158    	; 0x4034 <main+0x158>
    40d2:	e8 a1       	ldd	r30, Y+32	; 0x20
    40d4:	f9 a1       	ldd	r31, Y+33	; 0x21
    40d6:	ed 32       	cpi	r30, 0x2D	; 45
    40d8:	f1 05       	cpc	r31, r1
    40da:	79 f0       	breq	.+30     	; 0x40fa <main+0x21e>
    40dc:	28 a1       	ldd	r18, Y+32	; 0x20
    40de:	39 a1       	ldd	r19, Y+33	; 0x21
    40e0:	2f 32       	cpi	r18, 0x2F	; 47
    40e2:	31 05       	cpc	r19, r1
    40e4:	11 f1       	breq	.+68     	; 0x412a <main+0x24e>
    40e6:	a6 cf       	rjmp	.-180    	; 0x4034 <main+0x158>
                        {
                        case '+':
                        	DispNumber(num1+num2);
    40e8:	8a 89       	ldd	r24, Y+18	; 0x12
    40ea:	9b 89       	ldd	r25, Y+19	; 0x13
    40ec:	28 89       	ldd	r18, Y+16	; 0x10
    40ee:	39 89       	ldd	r19, Y+17	; 0x11
    40f0:	82 0f       	add	r24, r18
    40f2:	93 1f       	adc	r25, r19
    40f4:	0e 94 d6 21 	call	0x43ac	; 0x43ac <DispNumber>
    40f8:	9d cf       	rjmp	.-198    	; 0x4034 <main+0x158>
                            break;
                        case '-':
                        	DispNumber(num1-num2);
    40fa:	8a 89       	ldd	r24, Y+18	; 0x12
    40fc:	9b 89       	ldd	r25, Y+19	; 0x13
    40fe:	28 89       	ldd	r18, Y+16	; 0x10
    4100:	39 89       	ldd	r19, Y+17	; 0x11
    4102:	82 1b       	sub	r24, r18
    4104:	93 0b       	sbc	r25, r19
    4106:	0e 94 d6 21 	call	0x43ac	; 0x43ac <DispNumber>
    410a:	94 cf       	rjmp	.-216    	; 0x4034 <main+0x158>
                            break;
                        case '*':
                        	DispNumber(num1*num2);
    410c:	8a 89       	ldd	r24, Y+18	; 0x12
    410e:	9b 89       	ldd	r25, Y+19	; 0x13
    4110:	28 89       	ldd	r18, Y+16	; 0x10
    4112:	39 89       	ldd	r19, Y+17	; 0x11
    4114:	ac 01       	movw	r20, r24
    4116:	42 9f       	mul	r20, r18
    4118:	c0 01       	movw	r24, r0
    411a:	43 9f       	mul	r20, r19
    411c:	90 0d       	add	r25, r0
    411e:	52 9f       	mul	r21, r18
    4120:	90 0d       	add	r25, r0
    4122:	11 24       	eor	r1, r1
    4124:	0e 94 d6 21 	call	0x43ac	; 0x43ac <DispNumber>
    4128:	85 cf       	rjmp	.-246    	; 0x4034 <main+0x158>
                            break;
                        case '/':
                        	DispNumber(num1/num2);
    412a:	8a 89       	ldd	r24, Y+18	; 0x12
    412c:	9b 89       	ldd	r25, Y+19	; 0x13
    412e:	28 89       	ldd	r18, Y+16	; 0x10
    4130:	39 89       	ldd	r19, Y+17	; 0x11
    4132:	b9 01       	movw	r22, r18
    4134:	0e 94 0f 22 	call	0x441e	; 0x441e <__udivmodhi4>
    4138:	cb 01       	movw	r24, r22
    413a:	0e 94 d6 21 	call	0x43ac	; 0x43ac <DispNumber>
    413e:	7a cf       	rjmp	.-268    	; 0x4034 <main+0x158>
                            break;
                        }
                    }
                    else   //key other then = here means error wrong input
                    {
                        if(key == 'C')     //if clear screen is pressed then clear screen and reset
    4140:	8c 89       	ldd	r24, Y+20	; 0x14
    4142:	83 34       	cpi	r24, 0x43	; 67
    4144:	21 f4       	brne	.+8      	; 0x414e <main+0x272>
                        	LCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    4146:	81 e0       	ldi	r24, 0x01	; 1
    4148:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <LCD_WriteCommand4Bit>
    414c:	73 cf       	rjmp	.-282    	; 0x4034 <main+0x158>
                        else
                        	DispError(0);     //Display wrong input error
    414e:	80 e0       	ldi	r24, 0x00	; 0
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	0e 94 62 21 	call	0x42c4	; 0x42c4 <DispError>
    4156:	6e cf       	rjmp	.-292    	; 0x4034 <main+0x158>

00004158 <GetNumber>:

/* this application is simple calculator on keypad 4*4
*/

u16 GetNumber(u8 charcter)
{
    4158:	df 93       	push	r29
    415a:	cf 93       	push	r28
    415c:	00 d0       	rcall	.+0      	; 0x415e <GetNumber+0x6>
    415e:	00 d0       	rcall	.+0      	; 0x4160 <GetNumber+0x8>
    4160:	cd b7       	in	r28, 0x3d	; 61
    4162:	de b7       	in	r29, 0x3e	; 62
    4164:	8a 83       	std	Y+2, r24	; 0x02
    u8 num = 0;
    4166:	19 82       	std	Y+1, r1	; 0x01
    switch(charcter)
    4168:	8a 81       	ldd	r24, Y+2	; 0x02
    416a:	28 2f       	mov	r18, r24
    416c:	30 e0       	ldi	r19, 0x00	; 0
    416e:	3c 83       	std	Y+4, r19	; 0x04
    4170:	2b 83       	std	Y+3, r18	; 0x03
    4172:	8b 81       	ldd	r24, Y+3	; 0x03
    4174:	9c 81       	ldd	r25, Y+4	; 0x04
    4176:	85 33       	cpi	r24, 0x35	; 53
    4178:	91 05       	cpc	r25, r1
    417a:	09 f4       	brne	.+2      	; 0x417e <GetNumber+0x26>
    417c:	54 c0       	rjmp	.+168    	; 0x4226 <GetNumber+0xce>
    417e:	2b 81       	ldd	r18, Y+3	; 0x03
    4180:	3c 81       	ldd	r19, Y+4	; 0x04
    4182:	26 33       	cpi	r18, 0x36	; 54
    4184:	31 05       	cpc	r19, r1
    4186:	0c f5       	brge	.+66     	; 0x41ca <GetNumber+0x72>
    4188:	8b 81       	ldd	r24, Y+3	; 0x03
    418a:	9c 81       	ldd	r25, Y+4	; 0x04
    418c:	82 33       	cpi	r24, 0x32	; 50
    418e:	91 05       	cpc	r25, r1
    4190:	09 f4       	brne	.+2      	; 0x4194 <GetNumber+0x3c>
    4192:	40 c0       	rjmp	.+128    	; 0x4214 <GetNumber+0xbc>
    4194:	2b 81       	ldd	r18, Y+3	; 0x03
    4196:	3c 81       	ldd	r19, Y+4	; 0x04
    4198:	23 33       	cpi	r18, 0x33	; 51
    419a:	31 05       	cpc	r19, r1
    419c:	5c f4       	brge	.+22     	; 0x41b4 <GetNumber+0x5c>
    419e:	8b 81       	ldd	r24, Y+3	; 0x03
    41a0:	9c 81       	ldd	r25, Y+4	; 0x04
    41a2:	80 33       	cpi	r24, 0x30	; 48
    41a4:	91 05       	cpc	r25, r1
    41a6:	89 f1       	breq	.+98     	; 0x420a <GetNumber+0xb2>
    41a8:	2b 81       	ldd	r18, Y+3	; 0x03
    41aa:	3c 81       	ldd	r19, Y+4	; 0x04
    41ac:	21 33       	cpi	r18, 0x31	; 49
    41ae:	31 05       	cpc	r19, r1
    41b0:	71 f1       	breq	.+92     	; 0x420e <GetNumber+0xb6>
    41b2:	4e c0       	rjmp	.+156    	; 0x4250 <GetNumber+0xf8>
    41b4:	8b 81       	ldd	r24, Y+3	; 0x03
    41b6:	9c 81       	ldd	r25, Y+4	; 0x04
    41b8:	83 33       	cpi	r24, 0x33	; 51
    41ba:	91 05       	cpc	r25, r1
    41bc:	71 f1       	breq	.+92     	; 0x421a <GetNumber+0xc2>
    41be:	2b 81       	ldd	r18, Y+3	; 0x03
    41c0:	3c 81       	ldd	r19, Y+4	; 0x04
    41c2:	24 33       	cpi	r18, 0x34	; 52
    41c4:	31 05       	cpc	r19, r1
    41c6:	61 f1       	breq	.+88     	; 0x4220 <GetNumber+0xc8>
    41c8:	43 c0       	rjmp	.+134    	; 0x4250 <GetNumber+0xf8>
    41ca:	8b 81       	ldd	r24, Y+3	; 0x03
    41cc:	9c 81       	ldd	r25, Y+4	; 0x04
    41ce:	88 33       	cpi	r24, 0x38	; 56
    41d0:	91 05       	cpc	r25, r1
    41d2:	91 f1       	breq	.+100    	; 0x4238 <GetNumber+0xe0>
    41d4:	2b 81       	ldd	r18, Y+3	; 0x03
    41d6:	3c 81       	ldd	r19, Y+4	; 0x04
    41d8:	29 33       	cpi	r18, 0x39	; 57
    41da:	31 05       	cpc	r19, r1
    41dc:	5c f4       	brge	.+22     	; 0x41f4 <GetNumber+0x9c>
    41de:	8b 81       	ldd	r24, Y+3	; 0x03
    41e0:	9c 81       	ldd	r25, Y+4	; 0x04
    41e2:	86 33       	cpi	r24, 0x36	; 54
    41e4:	91 05       	cpc	r25, r1
    41e6:	11 f1       	breq	.+68     	; 0x422c <GetNumber+0xd4>
    41e8:	2b 81       	ldd	r18, Y+3	; 0x03
    41ea:	3c 81       	ldd	r19, Y+4	; 0x04
    41ec:	27 33       	cpi	r18, 0x37	; 55
    41ee:	31 05       	cpc	r19, r1
    41f0:	01 f1       	breq	.+64     	; 0x4232 <GetNumber+0xda>
    41f2:	2e c0       	rjmp	.+92     	; 0x4250 <GetNumber+0xf8>
    41f4:	8b 81       	ldd	r24, Y+3	; 0x03
    41f6:	9c 81       	ldd	r25, Y+4	; 0x04
    41f8:	89 33       	cpi	r24, 0x39	; 57
    41fa:	91 05       	cpc	r25, r1
    41fc:	01 f1       	breq	.+64     	; 0x423e <GetNumber+0xe6>
    41fe:	2b 81       	ldd	r18, Y+3	; 0x03
    4200:	3c 81       	ldd	r19, Y+4	; 0x04
    4202:	23 34       	cpi	r18, 0x43	; 67
    4204:	31 05       	cpc	r19, r1
    4206:	f1 f0       	breq	.+60     	; 0x4244 <GetNumber+0xec>
    4208:	23 c0       	rjmp	.+70     	; 0x4250 <GetNumber+0xf8>
    {
    case '0':
        num = 0;
    420a:	19 82       	std	Y+1, r1	; 0x01
    420c:	27 c0       	rjmp	.+78     	; 0x425c <GetNumber+0x104>
        break;
    case '1':
        num = 1;
    420e:	81 e0       	ldi	r24, 0x01	; 1
    4210:	89 83       	std	Y+1, r24	; 0x01
    4212:	24 c0       	rjmp	.+72     	; 0x425c <GetNumber+0x104>
        break;
    case '2':
        num = 2;
    4214:	82 e0       	ldi	r24, 0x02	; 2
    4216:	89 83       	std	Y+1, r24	; 0x01
    4218:	21 c0       	rjmp	.+66     	; 0x425c <GetNumber+0x104>
        break;
    case '3':
        num = 3;
    421a:	83 e0       	ldi	r24, 0x03	; 3
    421c:	89 83       	std	Y+1, r24	; 0x01
    421e:	1e c0       	rjmp	.+60     	; 0x425c <GetNumber+0x104>
        break;
    case '4':
        num = 4;
    4220:	84 e0       	ldi	r24, 0x04	; 4
    4222:	89 83       	std	Y+1, r24	; 0x01
    4224:	1b c0       	rjmp	.+54     	; 0x425c <GetNumber+0x104>
        break;
    case '5':
        num = 5;
    4226:	85 e0       	ldi	r24, 0x05	; 5
    4228:	89 83       	std	Y+1, r24	; 0x01
    422a:	18 c0       	rjmp	.+48     	; 0x425c <GetNumber+0x104>
        break;
    case '6':
        num = 6;
    422c:	86 e0       	ldi	r24, 0x06	; 6
    422e:	89 83       	std	Y+1, r24	; 0x01
    4230:	15 c0       	rjmp	.+42     	; 0x425c <GetNumber+0x104>
        break;
    case '7':
        num = 7;
    4232:	87 e0       	ldi	r24, 0x07	; 7
    4234:	89 83       	std	Y+1, r24	; 0x01
    4236:	12 c0       	rjmp	.+36     	; 0x425c <GetNumber+0x104>
        break;
    case '8':
        num = 8;
    4238:	88 e0       	ldi	r24, 0x08	; 8
    423a:	89 83       	std	Y+1, r24	; 0x01
    423c:	0f c0       	rjmp	.+30     	; 0x425c <GetNumber+0x104>
        break;
    case '9':
        num = 9;
    423e:	89 e0       	ldi	r24, 0x09	; 9
    4240:	89 83       	std	Y+1, r24	; 0x01
    4242:	0c c0       	rjmp	.+24     	; 0x425c <GetNumber+0x104>
        break;
    case 'C':
        LCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    4244:	81 e0       	ldi	r24, 0x01	; 1
    4246:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <LCD_WriteCommand4Bit>
        num = Error;
    424a:	8d e0       	ldi	r24, 0x0D	; 13
    424c:	89 83       	std	Y+1, r24	; 0x01
    424e:	06 c0       	rjmp	.+12     	; 0x425c <GetNumber+0x104>
        break;  //this is used as a clear screen and then reset by setting error
    default:
        DispError(0);
    4250:	80 e0       	ldi	r24, 0x00	; 0
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	0e 94 62 21 	call	0x42c4	; 0x42c4 <DispError>
        num = Error;
    4258:	8d e0       	ldi	r24, 0x0D	; 13
    425a:	89 83       	std	Y+1, r24	; 0x01
        break;       //it means wrong input
    }
    return num;
    425c:	89 81       	ldd	r24, Y+1	; 0x01
    425e:	88 2f       	mov	r24, r24
    4260:	90 e0       	ldi	r25, 0x00	; 0
}
    4262:	0f 90       	pop	r0
    4264:	0f 90       	pop	r0
    4266:	0f 90       	pop	r0
    4268:	0f 90       	pop	r0
    426a:	cf 91       	pop	r28
    426c:	df 91       	pop	r29
    426e:	08 95       	ret

00004270 <GetOperation>:

u8 GetOperation(u8 fun)            //detects the errors in function
{
    4270:	df 93       	push	r29
    4272:	cf 93       	push	r28
    4274:	00 d0       	rcall	.+0      	; 0x4276 <GetOperation+0x6>
    4276:	cd b7       	in	r28, 0x3d	; 61
    4278:	de b7       	in	r29, 0x3e	; 62
    427a:	89 83       	std	Y+1, r24	; 0x01
    if(fun=='C')                   //if clear screen then clear the LCD and reset
    427c:	89 81       	ldd	r24, Y+1	; 0x01
    427e:	83 34       	cpi	r24, 0x43	; 67
    4280:	31 f4       	brne	.+12     	; 0x428e <GetOperation+0x1e>
    {
    	LCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    4282:	81 e0       	ldi	r24, 0x01	; 1
    4284:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <LCD_WriteCommand4Bit>
        return 'e';
    4288:	85 e6       	ldi	r24, 0x65	; 101
    428a:	8a 83       	std	Y+2, r24	; 0x02
    428c:	15 c0       	rjmp	.+42     	; 0x42b8 <GetOperation+0x48>
    }
    if( fun != '+' && fun != '-' && fun != '*' && fun != '/' )  //if input is not from allowed functions then show error
    428e:	89 81       	ldd	r24, Y+1	; 0x01
    4290:	8b 32       	cpi	r24, 0x2B	; 43
    4292:	81 f0       	breq	.+32     	; 0x42b4 <GetOperation+0x44>
    4294:	89 81       	ldd	r24, Y+1	; 0x01
    4296:	8d 32       	cpi	r24, 0x2D	; 45
    4298:	69 f0       	breq	.+26     	; 0x42b4 <GetOperation+0x44>
    429a:	89 81       	ldd	r24, Y+1	; 0x01
    429c:	8a 32       	cpi	r24, 0x2A	; 42
    429e:	51 f0       	breq	.+20     	; 0x42b4 <GetOperation+0x44>
    42a0:	89 81       	ldd	r24, Y+1	; 0x01
    42a2:	8f 32       	cpi	r24, 0x2F	; 47
    42a4:	39 f0       	breq	.+14     	; 0x42b4 <GetOperation+0x44>
    {
        DispError(1);
    42a6:	81 e0       	ldi	r24, 0x01	; 1
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	0e 94 62 21 	call	0x42c4	; 0x42c4 <DispError>
        return 'e';
    42ae:	85 e6       	ldi	r24, 0x65	; 101
    42b0:	8a 83       	std	Y+2, r24	; 0x02
    42b2:	02 c0       	rjmp	.+4      	; 0x42b8 <GetOperation+0x48>
    }
    return fun;                        //function is correct so return the correct function
    42b4:	89 81       	ldd	r24, Y+1	; 0x01
    42b6:	8a 83       	std	Y+2, r24	; 0x02
    42b8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    42ba:	0f 90       	pop	r0
    42bc:	0f 90       	pop	r0
    42be:	cf 91       	pop	r28
    42c0:	df 91       	pop	r29
    42c2:	08 95       	ret

000042c4 <DispError>:


void DispError(u16 numb)           //displays different error messages
{
    42c4:	df 93       	push	r29
    42c6:	cf 93       	push	r28
    42c8:	cd b7       	in	r28, 0x3d	; 61
    42ca:	de b7       	in	r29, 0x3e	; 62
    42cc:	a9 97       	sbiw	r28, 0x29	; 41
    42ce:	0f b6       	in	r0, 0x3f	; 63
    42d0:	f8 94       	cli
    42d2:	de bf       	out	0x3e, r29	; 62
    42d4:	0f be       	out	0x3f, r0	; 63
    42d6:	cd bf       	out	0x3d, r28	; 61
    42d8:	9d 8f       	std	Y+29, r25	; 0x1d
    42da:	8c 8f       	std	Y+28, r24	; 0x1c
	u8 msg1[] = {"Wrong Input"};
    42dc:	ce 01       	movw	r24, r28
    42de:	01 96       	adiw	r24, 0x01	; 1
    42e0:	9f 8f       	std	Y+31, r25	; 0x1f
    42e2:	8e 8f       	std	Y+30, r24	; 0x1e
    42e4:	eb e6       	ldi	r30, 0x6B	; 107
    42e6:	f0 e0       	ldi	r31, 0x00	; 0
    42e8:	f9 a3       	std	Y+33, r31	; 0x21
    42ea:	e8 a3       	std	Y+32, r30	; 0x20
    42ec:	fc e0       	ldi	r31, 0x0C	; 12
    42ee:	fa a3       	std	Y+34, r31	; 0x22
    42f0:	e8 a1       	ldd	r30, Y+32	; 0x20
    42f2:	f9 a1       	ldd	r31, Y+33	; 0x21
    42f4:	00 80       	ld	r0, Z
    42f6:	88 a1       	ldd	r24, Y+32	; 0x20
    42f8:	99 a1       	ldd	r25, Y+33	; 0x21
    42fa:	01 96       	adiw	r24, 0x01	; 1
    42fc:	99 a3       	std	Y+33, r25	; 0x21
    42fe:	88 a3       	std	Y+32, r24	; 0x20
    4300:	ee 8d       	ldd	r30, Y+30	; 0x1e
    4302:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4304:	00 82       	st	Z, r0
    4306:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4308:	9f 8d       	ldd	r25, Y+31	; 0x1f
    430a:	01 96       	adiw	r24, 0x01	; 1
    430c:	9f 8f       	std	Y+31, r25	; 0x1f
    430e:	8e 8f       	std	Y+30, r24	; 0x1e
    4310:	9a a1       	ldd	r25, Y+34	; 0x22
    4312:	91 50       	subi	r25, 0x01	; 1
    4314:	9a a3       	std	Y+34, r25	; 0x22
    4316:	ea a1       	ldd	r30, Y+34	; 0x22
    4318:	ee 23       	and	r30, r30
    431a:	51 f7       	brne	.-44     	; 0x42f0 <DispError+0x2c>
	u8 msg2[] = {"Wrong Function"};
    431c:	ce 01       	movw	r24, r28
    431e:	0d 96       	adiw	r24, 0x0d	; 13
    4320:	9c a3       	std	Y+36, r25	; 0x24
    4322:	8b a3       	std	Y+35, r24	; 0x23
    4324:	e7 e7       	ldi	r30, 0x77	; 119
    4326:	f0 e0       	ldi	r31, 0x00	; 0
    4328:	fe a3       	std	Y+38, r31	; 0x26
    432a:	ed a3       	std	Y+37, r30	; 0x25
    432c:	ff e0       	ldi	r31, 0x0F	; 15
    432e:	ff a3       	std	Y+39, r31	; 0x27
    4330:	ed a1       	ldd	r30, Y+37	; 0x25
    4332:	fe a1       	ldd	r31, Y+38	; 0x26
    4334:	00 80       	ld	r0, Z
    4336:	8d a1       	ldd	r24, Y+37	; 0x25
    4338:	9e a1       	ldd	r25, Y+38	; 0x26
    433a:	01 96       	adiw	r24, 0x01	; 1
    433c:	9e a3       	std	Y+38, r25	; 0x26
    433e:	8d a3       	std	Y+37, r24	; 0x25
    4340:	eb a1       	ldd	r30, Y+35	; 0x23
    4342:	fc a1       	ldd	r31, Y+36	; 0x24
    4344:	00 82       	st	Z, r0
    4346:	8b a1       	ldd	r24, Y+35	; 0x23
    4348:	9c a1       	ldd	r25, Y+36	; 0x24
    434a:	01 96       	adiw	r24, 0x01	; 1
    434c:	9c a3       	std	Y+36, r25	; 0x24
    434e:	8b a3       	std	Y+35, r24	; 0x23
    4350:	9f a1       	ldd	r25, Y+39	; 0x27
    4352:	91 50       	subi	r25, 0x01	; 1
    4354:	9f a3       	std	Y+39, r25	; 0x27
    4356:	ef a1       	ldd	r30, Y+39	; 0x27
    4358:	ee 23       	and	r30, r30
    435a:	51 f7       	brne	.-44     	; 0x4330 <DispError+0x6c>

 	LCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);            //clear display
    435c:	81 e0       	ldi	r24, 0x01	; 1
    435e:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <LCD_WriteCommand4Bit>
    switch(numb)
    4362:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4364:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4366:	99 a7       	std	Y+41, r25	; 0x29
    4368:	88 a7       	std	Y+40, r24	; 0x28
    436a:	e8 a5       	ldd	r30, Y+40	; 0x28
    436c:	f9 a5       	ldd	r31, Y+41	; 0x29
    436e:	30 97       	sbiw	r30, 0x00	; 0
    4370:	31 f0       	breq	.+12     	; 0x437e <DispError+0xba>
    4372:	88 a5       	ldd	r24, Y+40	; 0x28
    4374:	99 a5       	ldd	r25, Y+41	; 0x29
    4376:	81 30       	cpi	r24, 0x01	; 1
    4378:	91 05       	cpc	r25, r1
    437a:	31 f0       	breq	.+12     	; 0x4388 <DispError+0xc4>
    437c:	0a c0       	rjmp	.+20     	; 0x4392 <DispError+0xce>
    {
    case 0:
        LCD_WriteString(msg1);
    437e:	ce 01       	movw	r24, r28
    4380:	01 96       	adiw	r24, 0x01	; 1
    4382:	0e 94 96 18 	call	0x312c	; 0x312c <LCD_WriteString>
    4386:	09 c0       	rjmp	.+18     	; 0x439a <DispError+0xd6>
        break;
    case 1:
    	LCD_WriteString(msg2);
    4388:	ce 01       	movw	r24, r28
    438a:	0d 96       	adiw	r24, 0x0d	; 13
    438c:	0e 94 96 18 	call	0x312c	; 0x312c <LCD_WriteString>
    4390:	04 c0       	rjmp	.+8      	; 0x439a <DispError+0xd6>
        break;
    default:
    	LCD_WriteString(msg1);
    4392:	ce 01       	movw	r24, r28
    4394:	01 96       	adiw	r24, 0x01	; 1
    4396:	0e 94 96 18 	call	0x312c	; 0x312c <LCD_WriteString>
        break;
    }
}
    439a:	a9 96       	adiw	r28, 0x29	; 41
    439c:	0f b6       	in	r0, 0x3f	; 63
    439e:	f8 94       	cli
    43a0:	de bf       	out	0x3e, r29	; 62
    43a2:	0f be       	out	0x3f, r0	; 63
    43a4:	cd bf       	out	0x3d, r28	; 61
    43a6:	cf 91       	pop	r28
    43a8:	df 91       	pop	r29
    43aa:	08 95       	ret

000043ac <DispNumber>:

void DispNumber(u16 numb)            //displays number on LCD
{
    43ac:	df 93       	push	r29
    43ae:	cf 93       	push	r28
    43b0:	00 d0       	rcall	.+0      	; 0x43b2 <DispNumber+0x6>
    43b2:	00 d0       	rcall	.+0      	; 0x43b4 <DispNumber+0x8>
    43b4:	cd b7       	in	r28, 0x3d	; 61
    43b6:	de b7       	in	r29, 0x3e	; 62
    43b8:	9c 83       	std	Y+4, r25	; 0x04
    43ba:	8b 83       	std	Y+3, r24	; 0x03
    u8 UnitDigit  = 0;  //It will contain unit digit of numb
    43bc:	1a 82       	std	Y+2, r1	; 0x02
    u8 TenthDigit = 0;  //It will contain 10th position digit of numb
    43be:	19 82       	std	Y+1, r1	; 0x01

    if(numb<0)    {
        numb = -1*numb;          // Make number positive
        LCD_WriteChar4Bit('-');   // Display a negative sign on LCD
    }
    TenthDigit = (numb/10);                    // Find out Tenth Digit
    43c0:	8b 81       	ldd	r24, Y+3	; 0x03
    43c2:	9c 81       	ldd	r25, Y+4	; 0x04
    43c4:	2a e0       	ldi	r18, 0x0A	; 10
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	b9 01       	movw	r22, r18
    43ca:	0e 94 0f 22 	call	0x441e	; 0x441e <__udivmodhi4>
    43ce:	cb 01       	movw	r24, r22
    43d0:	89 83       	std	Y+1, r24	; 0x01

    if( TenthDigit != 0)                    // If it is zero, then don't display
    43d2:	89 81       	ldd	r24, Y+1	; 0x01
    43d4:	88 23       	and	r24, r24
    43d6:	21 f0       	breq	.+8      	; 0x43e0 <DispNumber+0x34>
    	LCD_WriteChar4Bit(TenthDigit+0x30);    // Make Char of TenthDigit and then display it on LCD
    43d8:	89 81       	ldd	r24, Y+1	; 0x01
    43da:	80 5d       	subi	r24, 0xD0	; 208
    43dc:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <LCD_WriteChar4Bit>
		UnitDigit = numb - TenthDigit*10;
    43e0:	89 81       	ldd	r24, Y+1	; 0x01
    43e2:	88 2f       	mov	r24, r24
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	9c 01       	movw	r18, r24
    43e8:	22 0f       	add	r18, r18
    43ea:	33 1f       	adc	r19, r19
    43ec:	c9 01       	movw	r24, r18
    43ee:	88 0f       	add	r24, r24
    43f0:	99 1f       	adc	r25, r25
    43f2:	88 0f       	add	r24, r24
    43f4:	99 1f       	adc	r25, r25
    43f6:	82 0f       	add	r24, r18
    43f8:	93 1f       	adc	r25, r19
    43fa:	90 95       	com	r25
    43fc:	81 95       	neg	r24
    43fe:	9f 4f       	sbci	r25, 0xFF	; 255
    4400:	98 2f       	mov	r25, r24
    4402:	8b 81       	ldd	r24, Y+3	; 0x03
    4404:	89 0f       	add	r24, r25
    4406:	8a 83       	std	Y+2, r24	; 0x02
		LCD_WriteChar4Bit(UnitDigit+0x30);    // Make Char of UnitDigit and then display it on LCD
    4408:	8a 81       	ldd	r24, Y+2	; 0x02
    440a:	80 5d       	subi	r24, 0xD0	; 208
    440c:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <LCD_WriteChar4Bit>
}
    4410:	0f 90       	pop	r0
    4412:	0f 90       	pop	r0
    4414:	0f 90       	pop	r0
    4416:	0f 90       	pop	r0
    4418:	cf 91       	pop	r28
    441a:	df 91       	pop	r29
    441c:	08 95       	ret

0000441e <__udivmodhi4>:
    441e:	aa 1b       	sub	r26, r26
    4420:	bb 1b       	sub	r27, r27
    4422:	51 e1       	ldi	r21, 0x11	; 17
    4424:	07 c0       	rjmp	.+14     	; 0x4434 <__udivmodhi4_ep>

00004426 <__udivmodhi4_loop>:
    4426:	aa 1f       	adc	r26, r26
    4428:	bb 1f       	adc	r27, r27
    442a:	a6 17       	cp	r26, r22
    442c:	b7 07       	cpc	r27, r23
    442e:	10 f0       	brcs	.+4      	; 0x4434 <__udivmodhi4_ep>
    4430:	a6 1b       	sub	r26, r22
    4432:	b7 0b       	sbc	r27, r23

00004434 <__udivmodhi4_ep>:
    4434:	88 1f       	adc	r24, r24
    4436:	99 1f       	adc	r25, r25
    4438:	5a 95       	dec	r21
    443a:	a9 f7       	brne	.-22     	; 0x4426 <__udivmodhi4_loop>
    443c:	80 95       	com	r24
    443e:	90 95       	com	r25
    4440:	bc 01       	movw	r22, r24
    4442:	cd 01       	movw	r24, r26
    4444:	08 95       	ret

00004446 <__divmodhi4>:
    4446:	97 fb       	bst	r25, 7
    4448:	09 2e       	mov	r0, r25
    444a:	07 26       	eor	r0, r23
    444c:	0a d0       	rcall	.+20     	; 0x4462 <__divmodhi4_neg1>
    444e:	77 fd       	sbrc	r23, 7
    4450:	04 d0       	rcall	.+8      	; 0x445a <__divmodhi4_neg2>
    4452:	e5 df       	rcall	.-54     	; 0x441e <__udivmodhi4>
    4454:	06 d0       	rcall	.+12     	; 0x4462 <__divmodhi4_neg1>
    4456:	00 20       	and	r0, r0
    4458:	1a f4       	brpl	.+6      	; 0x4460 <__divmodhi4_exit>

0000445a <__divmodhi4_neg2>:
    445a:	70 95       	com	r23
    445c:	61 95       	neg	r22
    445e:	7f 4f       	sbci	r23, 0xFF	; 255

00004460 <__divmodhi4_exit>:
    4460:	08 95       	ret

00004462 <__divmodhi4_neg1>:
    4462:	f6 f7       	brtc	.-4      	; 0x4460 <__divmodhi4_exit>
    4464:	90 95       	com	r25
    4466:	81 95       	neg	r24
    4468:	9f 4f       	sbci	r25, 0xFF	; 255
    446a:	08 95       	ret

0000446c <__udivmodsi4>:
    446c:	a1 e2       	ldi	r26, 0x21	; 33
    446e:	1a 2e       	mov	r1, r26
    4470:	aa 1b       	sub	r26, r26
    4472:	bb 1b       	sub	r27, r27
    4474:	fd 01       	movw	r30, r26
    4476:	0d c0       	rjmp	.+26     	; 0x4492 <__udivmodsi4_ep>

00004478 <__udivmodsi4_loop>:
    4478:	aa 1f       	adc	r26, r26
    447a:	bb 1f       	adc	r27, r27
    447c:	ee 1f       	adc	r30, r30
    447e:	ff 1f       	adc	r31, r31
    4480:	a2 17       	cp	r26, r18
    4482:	b3 07       	cpc	r27, r19
    4484:	e4 07       	cpc	r30, r20
    4486:	f5 07       	cpc	r31, r21
    4488:	20 f0       	brcs	.+8      	; 0x4492 <__udivmodsi4_ep>
    448a:	a2 1b       	sub	r26, r18
    448c:	b3 0b       	sbc	r27, r19
    448e:	e4 0b       	sbc	r30, r20
    4490:	f5 0b       	sbc	r31, r21

00004492 <__udivmodsi4_ep>:
    4492:	66 1f       	adc	r22, r22
    4494:	77 1f       	adc	r23, r23
    4496:	88 1f       	adc	r24, r24
    4498:	99 1f       	adc	r25, r25
    449a:	1a 94       	dec	r1
    449c:	69 f7       	brne	.-38     	; 0x4478 <__udivmodsi4_loop>
    449e:	60 95       	com	r22
    44a0:	70 95       	com	r23
    44a2:	80 95       	com	r24
    44a4:	90 95       	com	r25
    44a6:	9b 01       	movw	r18, r22
    44a8:	ac 01       	movw	r20, r24
    44aa:	bd 01       	movw	r22, r26
    44ac:	cf 01       	movw	r24, r30
    44ae:	08 95       	ret

000044b0 <__prologue_saves__>:
    44b0:	2f 92       	push	r2
    44b2:	3f 92       	push	r3
    44b4:	4f 92       	push	r4
    44b6:	5f 92       	push	r5
    44b8:	6f 92       	push	r6
    44ba:	7f 92       	push	r7
    44bc:	8f 92       	push	r8
    44be:	9f 92       	push	r9
    44c0:	af 92       	push	r10
    44c2:	bf 92       	push	r11
    44c4:	cf 92       	push	r12
    44c6:	df 92       	push	r13
    44c8:	ef 92       	push	r14
    44ca:	ff 92       	push	r15
    44cc:	0f 93       	push	r16
    44ce:	1f 93       	push	r17
    44d0:	cf 93       	push	r28
    44d2:	df 93       	push	r29
    44d4:	cd b7       	in	r28, 0x3d	; 61
    44d6:	de b7       	in	r29, 0x3e	; 62
    44d8:	ca 1b       	sub	r28, r26
    44da:	db 0b       	sbc	r29, r27
    44dc:	0f b6       	in	r0, 0x3f	; 63
    44de:	f8 94       	cli
    44e0:	de bf       	out	0x3e, r29	; 62
    44e2:	0f be       	out	0x3f, r0	; 63
    44e4:	cd bf       	out	0x3d, r28	; 61
    44e6:	09 94       	ijmp

000044e8 <__epilogue_restores__>:
    44e8:	2a 88       	ldd	r2, Y+18	; 0x12
    44ea:	39 88       	ldd	r3, Y+17	; 0x11
    44ec:	48 88       	ldd	r4, Y+16	; 0x10
    44ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    44f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    44f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    44f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    44f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    44f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    44fa:	b9 84       	ldd	r11, Y+9	; 0x09
    44fc:	c8 84       	ldd	r12, Y+8	; 0x08
    44fe:	df 80       	ldd	r13, Y+7	; 0x07
    4500:	ee 80       	ldd	r14, Y+6	; 0x06
    4502:	fd 80       	ldd	r15, Y+5	; 0x05
    4504:	0c 81       	ldd	r16, Y+4	; 0x04
    4506:	1b 81       	ldd	r17, Y+3	; 0x03
    4508:	aa 81       	ldd	r26, Y+2	; 0x02
    450a:	b9 81       	ldd	r27, Y+1	; 0x01
    450c:	ce 0f       	add	r28, r30
    450e:	d1 1d       	adc	r29, r1
    4510:	0f b6       	in	r0, 0x3f	; 63
    4512:	f8 94       	cli
    4514:	de bf       	out	0x3e, r29	; 62
    4516:	0f be       	out	0x3f, r0	; 63
    4518:	cd bf       	out	0x3d, r28	; 61
    451a:	ed 01       	movw	r28, r26
    451c:	08 95       	ret

0000451e <_exit>:
    451e:	f8 94       	cli

00004520 <__stop_program>:
    4520:	ff cf       	rjmp	.-2      	; 0x4520 <__stop_program>
