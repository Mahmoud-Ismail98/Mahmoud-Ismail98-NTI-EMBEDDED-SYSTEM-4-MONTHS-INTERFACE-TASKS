
NTI_IMT_BOARD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000d3e  00000dd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800096  00800096  00000e08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000212a  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d33  00000000  00000000  000031e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000158f  00000000  00000000  00003f19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000580  00000000  00000000  000054a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b0c  00000000  00000000  00005a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d99  00000000  00000000  00006534  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  000082cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__vector_1>
   8:	0c 94 22 04 	jmp	0x844	; 0x844 <__vector_2>
   c:	0c 94 4b 04 	jmp	0x896	; 0x896 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 29 03 	jmp	0x652	; 0x652 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3a       	cpi	r26, 0xA7	; 167
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 de 01 	call	0x3bc	; 0x3bc <main>
  8a:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_vidInit>:
#include "LCD.h"

#include "APP.h"

void APP_vidInit(void){
	PORT_vInit();
  92:	0e 94 9d 04 	call	0x93a	; 0x93a <PORT_vInit>
	LCD_vid4Bit_Init();
  96:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_vid4Bit_Init>
	ADC_vidInit();	
  9a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ADC_vidInit>
  9e:	08 95       	ret

000000a0 <LCD_vidSendFallingEdge>:



void LCD_vidSendFallingEdge(void)
{
	  PORT_enuSetPinMode(LCD_EN,OUTPUT_HIGH);
  a0:	62 e0       	ldi	r22, 0x02	; 2
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	0e 94 ab 04 	call	0x956	; 0x956 <PORT_enuSetPinMode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	8f ec       	ldi	r24, 0xCF	; 207
  aa:	97 e0       	ldi	r25, 0x07	; 7
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_vidSendFallingEdge+0xc>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_vidSendFallingEdge+0x12>
  b2:	00 00       	nop
	   _delay_ms(1);
	   PORT_enuSetPinMode(LCD_EN,OUTPUT_LOW);
  b4:	63 e0       	ldi	r22, 0x03	; 3
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	0e 94 ab 04 	call	0x956	; 0x956 <PORT_enuSetPinMode>
  bc:	8f ec       	ldi	r24, 0xCF	; 207
  be:	97 e0       	ldi	r25, 0x07	; 7
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <LCD_vidSendFallingEdge+0x20>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <LCD_vidSendFallingEdge+0x26>
  c6:	00 00       	nop
  c8:	08 95       	ret

000000ca <LCD_vidSendCMD>:
	   _delay_ms(1);
} 
void LCD_vidSendCMD(u8 CMD){
  ca:	cf 93       	push	r28
  cc:	c8 2f       	mov	r28, r24
	/*Pulling RS PIN TO LOW TO Init Commands Register*/
	PORT_enuSetPinMode(LCD_RS,OUTPUT_LOW);
  ce:	63 e0       	ldi	r22, 0x03	; 3
  d0:	83 e0       	ldi	r24, 0x03	; 3
  d2:	0e 94 ab 04 	call	0x956	; 0x956 <PORT_enuSetPinMode>
	PORT_enuSetPinMode(LCD_RW,OUTPUT_LOW);
  d6:	63 e0       	ldi	r22, 0x03	; 3
  d8:	84 e6       	ldi	r24, 0x64	; 100
  da:	0e 94 ab 04 	call	0x956	; 0x956 <PORT_enuSetPinMode>
	//_delay_ms(15);	
	/*Sending High Nibble*/
	DIO_enuWriteChannel(LCD_D4,GET_BIT(CMD,7));
  de:	6c 2f       	mov	r22, r28
  e0:	66 1f       	adc	r22, r22
  e2:	66 27       	eor	r22, r22
  e4:	66 1f       	adc	r22, r22
  e6:	8c e0       	ldi	r24, 0x0C	; 12
  e8:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_enuWriteChannel>
	DIO_enuWriteChannel(LCD_D3,GET_BIT(CMD,6));
  ec:	6c 2f       	mov	r22, r28
  ee:	60 74       	andi	r22, 0x40	; 64
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	06 2e       	mov	r0, r22
  f4:	67 2f       	mov	r22, r23
  f6:	00 0c       	add	r0, r0
  f8:	66 1f       	adc	r22, r22
  fa:	77 0b       	sbc	r23, r23
  fc:	00 0c       	add	r0, r0
  fe:	66 1f       	adc	r22, r22
 100:	77 1f       	adc	r23, r23
 102:	8a e0       	ldi	r24, 0x0A	; 10
 104:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_enuWriteChannel>
	DIO_enuWriteChannel(LCD_D2,GET_BIT(CMD,5));
 108:	6c 2f       	mov	r22, r28
 10a:	60 72       	andi	r22, 0x20	; 32
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	75 95       	asr	r23
 110:	67 95       	ror	r22
 112:	75 95       	asr	r23
 114:	67 95       	ror	r22
 116:	75 95       	asr	r23
 118:	67 95       	ror	r22
 11a:	75 95       	asr	r23
 11c:	67 95       	ror	r22
 11e:	75 95       	asr	r23
 120:	67 95       	ror	r22
 122:	89 e0       	ldi	r24, 0x09	; 9
 124:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_enuWriteChannel>
	DIO_enuWriteChannel(LCD_D1,GET_BIT(CMD,4));
 128:	6c 2f       	mov	r22, r28
 12a:	60 71       	andi	r22, 0x10	; 16
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	75 95       	asr	r23
 130:	67 95       	ror	r22
 132:	75 95       	asr	r23
 134:	67 95       	ror	r22
 136:	75 95       	asr	r23
 138:	67 95       	ror	r22
 13a:	75 95       	asr	r23
 13c:	67 95       	ror	r22
 13e:	88 e0       	ldi	r24, 0x08	; 8
 140:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_enuWriteChannel>
	/*Sending Falling edge to trigger enable pin*/
	LCD_vidSendFallingEdge();
 144:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_vidSendFallingEdge>
	/*Sending Low  Nibble*/
	DIO_enuWriteChannel(LCD_D4,GET_BIT(CMD,3));
 148:	6c 2f       	mov	r22, r28
 14a:	68 70       	andi	r22, 0x08	; 8
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	75 95       	asr	r23
 150:	67 95       	ror	r22
 152:	75 95       	asr	r23
 154:	67 95       	ror	r22
 156:	75 95       	asr	r23
 158:	67 95       	ror	r22
 15a:	8c e0       	ldi	r24, 0x0C	; 12
 15c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_enuWriteChannel>
	DIO_enuWriteChannel(LCD_D3,GET_BIT(CMD,2));
 160:	6c 2f       	mov	r22, r28
 162:	64 70       	andi	r22, 0x04	; 4
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	75 95       	asr	r23
 168:	67 95       	ror	r22
 16a:	75 95       	asr	r23
 16c:	67 95       	ror	r22
 16e:	8a e0       	ldi	r24, 0x0A	; 10
 170:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_enuWriteChannel>
	DIO_enuWriteChannel(LCD_D2,GET_BIT(CMD,1));
 174:	6c 2f       	mov	r22, r28
 176:	62 70       	andi	r22, 0x02	; 2
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	75 95       	asr	r23
 17c:	67 95       	ror	r22
 17e:	89 e0       	ldi	r24, 0x09	; 9
 180:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_enuWriteChannel>
	DIO_enuWriteChannel(LCD_D1,GET_BIT(CMD,0));
 184:	6c 2f       	mov	r22, r28
 186:	61 70       	andi	r22, 0x01	; 1
 188:	88 e0       	ldi	r24, 0x08	; 8
 18a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_enuWriteChannel>

	/*Sending Falling edge to trigger enable pin*/
	LCD_vidSendFallingEdge();
 18e:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_vidSendFallingEdge>
}
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <LCD_vid4Bit_Init>:
 196:	8f e5       	ldi	r24, 0x5F	; 95
 198:	9a ee       	ldi	r25, 0xEA	; 234
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_vid4Bit_Init+0x4>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <LCD_vid4Bit_Init+0xa>
 1a0:	00 00       	nop
void LCD_vid4Bit_Init(){
	_delay_ms(30);
	/*Initializing data Pins Mode as Output*/
	PORT_enuSetPinDirection(LCD_D1,PORT_PIN_OUTPUT);
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	88 e0       	ldi	r24, 0x08	; 8
 1a6:	0e 94 e7 05 	call	0xbce	; 0xbce <PORT_enuSetPinDirection>
	PORT_enuSetPinDirection(LCD_D2,PORT_PIN_OUTPUT);
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	89 e0       	ldi	r24, 0x09	; 9
 1ae:	0e 94 e7 05 	call	0xbce	; 0xbce <PORT_enuSetPinDirection>
	PORT_enuSetPinDirection(LCD_D3,PORT_PIN_OUTPUT);
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	8a e0       	ldi	r24, 0x0A	; 10
 1b6:	0e 94 e7 05 	call	0xbce	; 0xbce <PORT_enuSetPinDirection>
	PORT_enuSetPinDirection(LCD_D4,PORT_PIN_OUTPUT);
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	8c e0       	ldi	r24, 0x0C	; 12
 1be:	0e 94 e7 05 	call	0xbce	; 0xbce <PORT_enuSetPinDirection>
	/*Initializng RS PIN and EN PIN as Output*/
	PORT_enuSetPinDirection(LCD_RS,PORT_PIN_OUTPUT);
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	0e 94 e7 05 	call	0xbce	; 0xbce <PORT_enuSetPinDirection>
	PORT_enuSetPinDirection(LCD_EN,PORT_PIN_OUTPUT);
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	0e 94 e7 05 	call	0xbce	; 0xbce <PORT_enuSetPinDirection>
	/*Writing RW PIN to LOW*/
	PORT_enuSetPinMode(LCD_RW,OUTPUT_LOW);
 1d2:	63 e0       	ldi	r22, 0x03	; 3
 1d4:	84 e6       	ldi	r24, 0x64	; 100
 1d6:	0e 94 ab 04 	call	0x956	; 0x956 <PORT_enuSetPinMode>
 1da:	8f e3       	ldi	r24, 0x3F	; 63
 1dc:	9c e9       	ldi	r25, 0x9C	; 156
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <LCD_vid4Bit_Init+0x48>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <LCD_vid4Bit_Init+0x4e>
 1e4:	00 00       	nop
	_delay_ms(20);
	LCD_vidSendCMD(0x33);			//Command to init cursor at the beginning of the display
 1e6:	83 e3       	ldi	r24, 0x33	; 51
 1e8:	0e 94 65 00 	call	0xca	; 0xca <LCD_vidSendCMD>
	LCD_vidSendCMD(0x32);			//Command to init cursor at the beginning of the display
 1ec:	82 e3       	ldi	r24, 0x32	; 50
 1ee:	0e 94 65 00 	call	0xca	; 0xca <LCD_vidSendCMD>
	LCD_vidSendCMD(LCD_FUNCTION_4BIT_2LINES );  //command to start screen using 4bit data mode and init 2 lines
 1f2:	88 e2       	ldi	r24, 0x28	; 40
 1f4:	0e 94 65 00 	call	0xca	; 0xca <LCD_vidSendCMD>
	LCD_vidSendCMD(LCD_RETURN_HOME);			//Command to init cursor at the beginning of the display
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	0e 94 65 00 	call	0xca	; 0xca <LCD_vidSendCMD>

	/*Clearing the display*/
	LCD_vidSendCMD(LCD_CLEAR_SCREEN);
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 65 00 	call	0xca	; 0xca <LCD_vidSendCMD>
 204:	8f e3       	ldi	r24, 0x3F	; 63
 206:	9f e1       	ldi	r25, 0x1F	; 31
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCD_vid4Bit_Init+0x72>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <LCD_vid4Bit_Init+0x78>
 20e:	00 00       	nop
	//shift cursor to right
	_delay_ms(4);	
	LCD_vidSendCMD(LCD_ENTRY_MODE);	
 210:	86 e0       	ldi	r24, 0x06	; 6
 212:	0e 94 65 00 	call	0xca	; 0xca <LCD_vidSendCMD>
 216:	8f ec       	ldi	r24, 0xCF	; 207
 218:	97 e0       	ldi	r25, 0x07	; 7
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <LCD_vid4Bit_Init+0x84>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <LCD_vid4Bit_Init+0x8a>
 220:	00 00       	nop
	//Display On cursor On
	_delay_ms(1);
	LCD_vidSendCMD(LCD_DISP_ON_CURSOR_ON );
 222:	8e e0       	ldi	r24, 0x0E	; 14
 224:	0e 94 65 00 	call	0xca	; 0xca <LCD_vidSendCMD>
 228:	8f ec       	ldi	r24, 0xCF	; 207
 22a:	97 e0       	ldi	r25, 0x07	; 7
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <LCD_vid4Bit_Init+0x96>
 230:	00 c0       	rjmp	.+0      	; 0x232 <LCD_vid4Bit_Init+0x9c>
 232:	00 00       	nop
 234:	08 95       	ret

00000236 <LCD_vidMoveCusrsor>:
LCD_vidSendCMD(LCD_16COL_ROW1_BASE_ADD + (copy_y & 0x0FU));
else if(copy_x == 1)
LCD_vidSendCMD(LCD_16COL_ROW2_BASE_ADD + (copy_y & 0x0FU));
*/

if(copy_x == 0)
 236:	81 11       	cpse	r24, r1
 238:	05 c0       	rjmp	.+10     	; 0x244 <LCD_vidMoveCusrsor+0xe>
LCD_vidSendCMD(   (((LCD_20COL_ROW1_BASE_ADD + copy_y) & 0X7F) | (0X80)));
 23a:	86 2f       	mov	r24, r22
 23c:	80 68       	ori	r24, 0x80	; 128
 23e:	0e 94 65 00 	call	0xca	; 0xca <LCD_vidSendCMD>
 242:	08 95       	ret
else if(copy_x == 1)
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	31 f4       	brne	.+12     	; 0x254 <LCD_vidMoveCusrsor+0x1e>
LCD_vidSendCMD(   (((LCD_20COL_ROW2_BASE_ADD + copy_y) & 0X7F) | (0X80)));
 248:	80 e4       	ldi	r24, 0x40	; 64
 24a:	86 0f       	add	r24, r22
 24c:	80 68       	ori	r24, 0x80	; 128
 24e:	0e 94 65 00 	call	0xca	; 0xca <LCD_vidSendCMD>
 252:	08 95       	ret
else if(copy_x == 2)
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	31 f4       	brne	.+12     	; 0x264 <LCD_vidMoveCusrsor+0x2e>
LCD_vidSendCMD(   (((LCD_20COL_ROW3_BASE_ADD + copy_y) & 0X7F) | (0X80)));
 258:	84 e1       	ldi	r24, 0x14	; 20
 25a:	86 0f       	add	r24, r22
 25c:	80 68       	ori	r24, 0x80	; 128
 25e:	0e 94 65 00 	call	0xca	; 0xca <LCD_vidSendCMD>
 262:	08 95       	ret
else if(copy_x == 3)
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	29 f4       	brne	.+10     	; 0x272 <LCD_vidMoveCusrsor+0x3c>
LCD_vidSendCMD(   (((LCD_20COL_ROW4_BASE_ADD + copy_y) & 0X7F) | (0X80)));
 268:	84 e5       	ldi	r24, 0x54	; 84
 26a:	86 0f       	add	r24, r22
 26c:	80 68       	ori	r24, 0x80	; 128
 26e:	0e 94 65 00 	call	0xca	; 0xca <LCD_vidSendCMD>
 272:	08 95       	ret

00000274 <LCD_vidDisplayChar>:



}
void LCD_vidDisplayChar(u8 copy_char){
 274:	cf 93       	push	r28
 276:	c8 2f       	mov	r28, r24
	
	
	/*Pulling RS PIN TO HIGH TO Init Data Register*/
	DIO_enuWriteChannel(LCD_RS,DIO_HIGH);
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	83 e0       	ldi	r24, 0x03	; 3
 27c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_enuWriteChannel>
	/*RW TO low to enable writing to lcd register*/
	//DIO_enuWriteChannel(LCD_RW,0);
	/*Sending High Nibble*/
	DIO_enuWriteChannel(LCD_D4,GET_BIT(copy_char,7));
 280:	6c 2f       	mov	r22, r28
 282:	66 1f       	adc	r22, r22
 284:	66 27       	eor	r22, r22
 286:	66 1f       	adc	r22, r22
 288:	8c e0       	ldi	r24, 0x0C	; 12
 28a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_enuWriteChannel>
	DIO_enuWriteChannel(LCD_D3,GET_BIT(copy_char,6));
 28e:	6c 2f       	mov	r22, r28
 290:	60 74       	andi	r22, 0x40	; 64
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	06 2e       	mov	r0, r22
 296:	67 2f       	mov	r22, r23
 298:	00 0c       	add	r0, r0
 29a:	66 1f       	adc	r22, r22
 29c:	77 0b       	sbc	r23, r23
 29e:	00 0c       	add	r0, r0
 2a0:	66 1f       	adc	r22, r22
 2a2:	77 1f       	adc	r23, r23
 2a4:	8a e0       	ldi	r24, 0x0A	; 10
 2a6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_enuWriteChannel>
	DIO_enuWriteChannel(LCD_D2,GET_BIT(copy_char,5));
 2aa:	6c 2f       	mov	r22, r28
 2ac:	60 72       	andi	r22, 0x20	; 32
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	75 95       	asr	r23
 2b2:	67 95       	ror	r22
 2b4:	75 95       	asr	r23
 2b6:	67 95       	ror	r22
 2b8:	75 95       	asr	r23
 2ba:	67 95       	ror	r22
 2bc:	75 95       	asr	r23
 2be:	67 95       	ror	r22
 2c0:	75 95       	asr	r23
 2c2:	67 95       	ror	r22
 2c4:	89 e0       	ldi	r24, 0x09	; 9
 2c6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_enuWriteChannel>
	DIO_enuWriteChannel(LCD_D1,GET_BIT(copy_char,4));
 2ca:	6c 2f       	mov	r22, r28
 2cc:	60 71       	andi	r22, 0x10	; 16
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	75 95       	asr	r23
 2d2:	67 95       	ror	r22
 2d4:	75 95       	asr	r23
 2d6:	67 95       	ror	r22
 2d8:	75 95       	asr	r23
 2da:	67 95       	ror	r22
 2dc:	75 95       	asr	r23
 2de:	67 95       	ror	r22
 2e0:	88 e0       	ldi	r24, 0x08	; 8
 2e2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_enuWriteChannel>
	LCD_vidSendFallingEdge();
 2e6:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_vidSendFallingEdge>
	
	/*Sending Low  Nibble*/
	DIO_enuWriteChannel(LCD_D4,GET_BIT(copy_char,3));
 2ea:	6c 2f       	mov	r22, r28
 2ec:	68 70       	andi	r22, 0x08	; 8
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	75 95       	asr	r23
 2f2:	67 95       	ror	r22
 2f4:	75 95       	asr	r23
 2f6:	67 95       	ror	r22
 2f8:	75 95       	asr	r23
 2fa:	67 95       	ror	r22
 2fc:	8c e0       	ldi	r24, 0x0C	; 12
 2fe:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_enuWriteChannel>
	DIO_enuWriteChannel(LCD_D3,GET_BIT(copy_char,2));
 302:	6c 2f       	mov	r22, r28
 304:	64 70       	andi	r22, 0x04	; 4
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	75 95       	asr	r23
 30a:	67 95       	ror	r22
 30c:	75 95       	asr	r23
 30e:	67 95       	ror	r22
 310:	8a e0       	ldi	r24, 0x0A	; 10
 312:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_enuWriteChannel>
	DIO_enuWriteChannel(LCD_D2,GET_BIT(copy_char,1));
 316:	6c 2f       	mov	r22, r28
 318:	62 70       	andi	r22, 0x02	; 2
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	75 95       	asr	r23
 31e:	67 95       	ror	r22
 320:	89 e0       	ldi	r24, 0x09	; 9
 322:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_enuWriteChannel>
	DIO_enuWriteChannel(LCD_D1,GET_BIT(copy_char,0));
 326:	6c 2f       	mov	r22, r28
 328:	61 70       	andi	r22, 0x01	; 1
 32a:	88 e0       	ldi	r24, 0x08	; 8
 32c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_enuWriteChannel>
	LCD_vidSendFallingEdge();		
 330:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_vidSendFallingEdge>
}
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <LCD_vidDisplayString>:
void LCD_vidDisplayString (pu8 add_string)
{
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	8c 01       	movw	r16, r24
	u8 i = 0;
 340:	c0 e0       	ldi	r28, 0x00	; 0
	
	
	while(add_string[i] != '\0')
 342:	0c c0       	rjmp	.+24     	; 0x35c <LCD_vidDisplayString+0x24>
	{
		LCD_vidDisplayChar(add_string[i]);
 344:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
		i++;
 348:	cf 5f       	subi	r28, 0xFF	; 255
 34a:	2f ef       	ldi	r18, 0xFF	; 255
 34c:	80 e7       	ldi	r24, 0x70	; 112
 34e:	92 e0       	ldi	r25, 0x02	; 2
 350:	21 50       	subi	r18, 0x01	; 1
 352:	80 40       	sbci	r24, 0x00	; 0
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <LCD_vidDisplayString+0x18>
 358:	00 c0       	rjmp	.+0      	; 0x35a <LCD_vidDisplayString+0x22>
 35a:	00 00       	nop
void LCD_vidDisplayString (pu8 add_string)
{
	u8 i = 0;
	
	
	while(add_string[i] != '\0')
 35c:	f8 01       	movw	r30, r16
 35e:	ec 0f       	add	r30, r28
 360:	f1 1d       	adc	r31, r1
 362:	80 81       	ld	r24, Z
 364:	81 11       	cpse	r24, r1
 366:	ee cf       	rjmp	.-36     	; 0x344 <LCD_vidDisplayString+0xc>
	{
		LCD_vidDisplayChar(add_string[i]);
		i++;
		_delay_ms(100);
	}
}
 368:	cf 91       	pop	r28
 36a:	1f 91       	pop	r17
 36c:	0f 91       	pop	r16
 36e:	08 95       	ret

00000370 <LCD_vidDisplayCustomChar>:

void LCD_vidDisplayCustomChar(pu8 add_custom_char,u8 copy_u8Index){
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
	if (add_custom_char != NULL &&copy_u8Index <8){
 376:	00 97       	sbiw	r24, 0x00	; 0
 378:	c9 f0       	breq	.+50     	; 0x3ac <LCD_vidDisplayCustomChar+0x3c>
 37a:	68 30       	cpi	r22, 0x08	; 8
 37c:	b8 f4       	brcc	.+46     	; 0x3ac <LCD_vidDisplayCustomChar+0x3c>
 37e:	8c 01       	movw	r16, r24
		
		u8 loc_u8iterator;
		LCD_vidSendCMD(LCD_CGRAM_BASE_ADD + (8*copy_u8Index));
 380:	86 2f       	mov	r24, r22
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	08 96       	adiw	r24, 0x08	; 8
 386:	88 0f       	add	r24, r24
 388:	88 0f       	add	r24, r24
 38a:	88 0f       	add	r24, r24
 38c:	0e 94 65 00 	call	0xca	; 0xca <LCD_vidSendCMD>
		for(loc_u8iterator=0 ; loc_u8iterator<8 ; loc_u8iterator++)
 390:	c0 e0       	ldi	r28, 0x00	; 0
 392:	07 c0       	rjmp	.+14     	; 0x3a2 <LCD_vidDisplayCustomChar+0x32>
		{
			LCD_vidDisplayChar(add_custom_char[loc_u8iterator]);
 394:	f8 01       	movw	r30, r16
 396:	ec 0f       	add	r30, r28
 398:	f1 1d       	adc	r31, r1
 39a:	80 81       	ld	r24, Z
 39c:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
void LCD_vidDisplayCustomChar(pu8 add_custom_char,u8 copy_u8Index){
	if (add_custom_char != NULL &&copy_u8Index <8){
		
		u8 loc_u8iterator;
		LCD_vidSendCMD(LCD_CGRAM_BASE_ADD + (8*copy_u8Index));
		for(loc_u8iterator=0 ; loc_u8iterator<8 ; loc_u8iterator++)
 3a0:	cf 5f       	subi	r28, 0xFF	; 255
 3a2:	c8 30       	cpi	r28, 0x08	; 8
 3a4:	b8 f3       	brcs	.-18     	; 0x394 <LCD_vidDisplayCustomChar+0x24>
		{
			LCD_vidDisplayChar(add_custom_char[loc_u8iterator]);
		}	
			LCD_vidSendCMD(LCD_DDRAM_BASE_ADD);
 3a6:	80 e8       	ldi	r24, 0x80	; 128
 3a8:	0e 94 65 00 	call	0xca	; 0xca <LCD_vidSendCMD>
	}
}
 3ac:	cf 91       	pop	r28
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	08 95       	ret

000003b4 <LCD_vidClearDisplay>:

void LCD_vidClearDisplay(void){
	LCD_vidSendCMD(LCD_CLEAR_SCREEN);
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 65 00 	call	0xca	; 0xca <LCD_vidSendCMD>
 3ba:	08 95       	ret

000003bc <main>:
	 0x1F
};


int main(void)
{   APP_vidInit();
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	00 d0       	rcall	.+0      	; 0x3c2 <main+0x6>
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	0e 94 49 00 	call	0x92	; 0x92 <APP_vidInit>
	PORT_enuSetPinMode(PORTA_PIN0,INPUT_FLOATING);
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	0e 94 ab 04 	call	0x956	; 0x956 <PORT_enuSetPinMode>
	LCD_vidClearDisplay();
 3d2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_vidClearDisplay>
	LCD_vidDisplayString("Volume");
 3d6:	88 e8       	ldi	r24, 0x88	; 136
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_vidDisplayString>
	LCD_vidDisplayCustomChar(one,0);
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	80 e8       	ldi	r24, 0x80	; 128
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_vidDisplayCustomChar>
	LCD_vidDisplayCustomChar(two,1);
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	88 e7       	ldi	r24, 0x78	; 120
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_vidDisplayCustomChar>
	LCD_vidDisplayCustomChar(three,2);
 3f2:	62 e0       	ldi	r22, 0x02	; 2
 3f4:	80 e7       	ldi	r24, 0x70	; 112
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_vidDisplayCustomChar>
	LCD_vidDisplayCustomChar(four,3);
 3fc:	63 e0       	ldi	r22, 0x03	; 3
 3fe:	88 e6       	ldi	r24, 0x68	; 104
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_vidDisplayCustomChar>
	LCD_vidDisplayCustomChar(FULL,4);
 406:	64 e0       	ldi	r22, 0x04	; 4
 408:	80 e6       	ldi	r24, 0x60	; 96
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_vidDisplayCustomChar>
	u16 adc_val=0;
 410:	1a 82       	std	Y+2, r1	; 0x02
 412:	19 82       	std	Y+1, r1	; 0x01
	
	while (1)
	{  	
		ADC_ReadChannel(ADC_CHANNEL0,&adc_val);
 414:	be 01       	movw	r22, r28
 416:	6f 5f       	subi	r22, 0xFF	; 255
 418:	7f 4f       	sbci	r23, 0xFF	; 255
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	0e 94 08 03 	call	0x610	; 0x610 <ADC_ReadChannel>
		
		if(adc_val<5){
 420:	89 81       	ldd	r24, Y+1	; 0x01
 422:	9a 81       	ldd	r25, Y+2	; 0x02
 424:	85 30       	cpi	r24, 0x05	; 5
 426:	91 05       	cpc	r25, r1
 428:	48 f4       	brcc	.+18     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
			
			LCD_vidMoveCusrsor(2,0);
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	82 e0       	ldi	r24, 0x02	; 2
 42e:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayString("Muted");
 432:	8f e8       	ldi	r24, 0x8F	; 143
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_vidDisplayString>
 43a:	ec cf       	rjmp	.-40     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		}
		else if(adc_val>=5 && adc_val <200){
 43c:	9c 01       	movw	r18, r24
 43e:	25 50       	subi	r18, 0x05	; 5
 440:	31 09       	sbc	r19, r1
 442:	23 3c       	cpi	r18, 0xC3	; 195
 444:	31 05       	cpc	r19, r1
 446:	20 f5       	brcc	.+72     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
			
			LCD_vidMoveCusrsor(2,0);
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayChar(0);
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
			LCD_vidMoveCusrsor(2,1);
 456:	61 e0       	ldi	r22, 0x01	; 1
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayChar(' ');
 45e:	80 e2       	ldi	r24, 0x20	; 32
 460:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
			LCD_vidMoveCusrsor(2,2);
 464:	62 e0       	ldi	r22, 0x02	; 2
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayChar(' ');
 46c:	80 e2       	ldi	r24, 0x20	; 32
 46e:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
			LCD_vidMoveCusrsor(2,3);
 472:	63 e0       	ldi	r22, 0x03	; 3
 474:	82 e0       	ldi	r24, 0x02	; 2
 476:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayChar(' ');
 47a:	80 e2       	ldi	r24, 0x20	; 32
 47c:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
			LCD_vidMoveCusrsor(2,4);
 480:	64 e0       	ldi	r22, 0x04	; 4
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayChar(' ');
 488:	80 e2       	ldi	r24, 0x20	; 32
 48a:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
 48e:	c2 cf       	rjmp	.-124    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		}
		else if(adc_val>=200 && adc_val <400){
 490:	9c 01       	movw	r18, r24
 492:	28 5c       	subi	r18, 0xC8	; 200
 494:	31 09       	sbc	r19, r1
 496:	28 3c       	cpi	r18, 0xC8	; 200
 498:	31 05       	cpc	r19, r1
 49a:	20 f5       	brcc	.+72     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
			LCD_vidMoveCusrsor(2,0);
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayChar(0);
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
			LCD_vidMoveCusrsor(2,1);
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	82 e0       	ldi	r24, 0x02	; 2
 4ae:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayChar(1);
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
			LCD_vidMoveCusrsor(2,2);
 4b8:	62 e0       	ldi	r22, 0x02	; 2
 4ba:	82 e0       	ldi	r24, 0x02	; 2
 4bc:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayChar(' ');
 4c0:	80 e2       	ldi	r24, 0x20	; 32
 4c2:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
			LCD_vidMoveCusrsor(2,3);
 4c6:	63 e0       	ldi	r22, 0x03	; 3
 4c8:	82 e0       	ldi	r24, 0x02	; 2
 4ca:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayChar(' ');
 4ce:	80 e2       	ldi	r24, 0x20	; 32
 4d0:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
			LCD_vidMoveCusrsor(2,4);
 4d4:	64 e0       	ldi	r22, 0x04	; 4
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayChar(' ');
 4dc:	80 e2       	ldi	r24, 0x20	; 32
 4de:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
 4e2:	98 cf       	rjmp	.-208    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		}
		else if(adc_val>=400 && adc_val <600){
 4e4:	9c 01       	movw	r18, r24
 4e6:	20 59       	subi	r18, 0x90	; 144
 4e8:	31 40       	sbci	r19, 0x01	; 1
 4ea:	28 3c       	cpi	r18, 0xC8	; 200
 4ec:	31 05       	cpc	r19, r1
 4ee:	20 f5       	brcc	.+72     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
			LCD_vidMoveCusrsor(2,0);
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	82 e0       	ldi	r24, 0x02	; 2
 4f4:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayChar(0);
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
			LCD_vidMoveCusrsor(2,1);
 4fe:	61 e0       	ldi	r22, 0x01	; 1
 500:	82 e0       	ldi	r24, 0x02	; 2
 502:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayChar(1);
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
			LCD_vidMoveCusrsor(2,2);
 50c:	62 e0       	ldi	r22, 0x02	; 2
 50e:	82 e0       	ldi	r24, 0x02	; 2
 510:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayChar(2);
 514:	82 e0       	ldi	r24, 0x02	; 2
 516:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
			LCD_vidMoveCusrsor(2,3);
 51a:	63 e0       	ldi	r22, 0x03	; 3
 51c:	82 e0       	ldi	r24, 0x02	; 2
 51e:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayChar(' ');
 522:	80 e2       	ldi	r24, 0x20	; 32
 524:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
			LCD_vidMoveCusrsor(2,4);
 528:	64 e0       	ldi	r22, 0x04	; 4
 52a:	82 e0       	ldi	r24, 0x02	; 2
 52c:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayChar(' ');
 530:	80 e2       	ldi	r24, 0x20	; 32
 532:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
 536:	6e cf       	rjmp	.-292    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		}
		else if(adc_val>=600 && adc_val <800){
 538:	9c 01       	movw	r18, r24
 53a:	28 55       	subi	r18, 0x58	; 88
 53c:	32 40       	sbci	r19, 0x02	; 2
 53e:	28 3c       	cpi	r18, 0xC8	; 200
 540:	31 05       	cpc	r19, r1
 542:	40 f5       	brcc	.+80     	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
			LCD_vidMoveCusrsor(2,0);
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	82 e0       	ldi	r24, 0x02	; 2
 548:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayChar(0);
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
			LCD_vidMoveCusrsor(2,1);
 552:	61 e0       	ldi	r22, 0x01	; 1
 554:	82 e0       	ldi	r24, 0x02	; 2
 556:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayChar(1);
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
			LCD_vidMoveCusrsor(2,2);
 560:	62 e0       	ldi	r22, 0x02	; 2
 562:	82 e0       	ldi	r24, 0x02	; 2
 564:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayChar(2);
 568:	82 e0       	ldi	r24, 0x02	; 2
 56a:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
			LCD_vidMoveCusrsor(2,3);
 56e:	63 e0       	ldi	r22, 0x03	; 3
 570:	82 e0       	ldi	r24, 0x02	; 2
 572:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidMoveCusrsor(2,3);
 576:	63 e0       	ldi	r22, 0x03	; 3
 578:	82 e0       	ldi	r24, 0x02	; 2
 57a:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayChar(3);
 57e:	83 e0       	ldi	r24, 0x03	; 3
 580:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
			LCD_vidMoveCusrsor(2,4);
 584:	64 e0       	ldi	r22, 0x04	; 4
 586:	82 e0       	ldi	r24, 0x02	; 2
 588:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
			LCD_vidDisplayChar(' ');
 58c:	80 e2       	ldi	r24, 0x20	; 32
 58e:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
 592:	40 cf       	rjmp	.-384    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		}
		else if(adc_val>=800 && adc_val <=1023){
 594:	80 52       	subi	r24, 0x20	; 32
 596:	93 40       	sbci	r25, 0x03	; 3
 598:	80 3e       	cpi	r24, 0xE0	; 224
 59a:	91 05       	cpc	r25, r1
 59c:	08 f0       	brcs	.+2      	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
 59e:	3a cf       	rjmp	.-396    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
				LCD_vidMoveCusrsor(2,0);
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	82 e0       	ldi	r24, 0x02	; 2
 5a4:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
				LCD_vidDisplayChar(0);
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
				LCD_vidMoveCusrsor(2,1);
 5ae:	61 e0       	ldi	r22, 0x01	; 1
 5b0:	82 e0       	ldi	r24, 0x02	; 2
 5b2:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
				LCD_vidDisplayChar(1);
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
				LCD_vidMoveCusrsor(2,2);
 5bc:	62 e0       	ldi	r22, 0x02	; 2
 5be:	82 e0       	ldi	r24, 0x02	; 2
 5c0:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
				LCD_vidDisplayChar(2);
 5c4:	82 e0       	ldi	r24, 0x02	; 2
 5c6:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
				LCD_vidMoveCusrsor(2,3);
 5ca:	63 e0       	ldi	r22, 0x03	; 3
 5cc:	82 e0       	ldi	r24, 0x02	; 2
 5ce:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
				LCD_vidMoveCusrsor(2,3);
 5d2:	63 e0       	ldi	r22, 0x03	; 3
 5d4:	82 e0       	ldi	r24, 0x02	; 2
 5d6:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
				LCD_vidDisplayChar(3);
 5da:	83 e0       	ldi	r24, 0x03	; 3
 5dc:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
				LCD_vidMoveCusrsor(2,4);
 5e0:	64 e0       	ldi	r22, 0x04	; 4
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_vidMoveCusrsor>
				LCD_vidDisplayChar(4);
 5e8:	84 e0       	ldi	r24, 0x04	; 4
 5ea:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_vidDisplayChar>
 5ee:	12 cf       	rjmp	.-476    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>

000005f0 <ADC_vidInit>:
			

void ADC_SetCallBack(void (*pF) (void) ){
	
	if(pF != NULL)
	ptr_func = pF;
 5f0:	87 b1       	in	r24, 0x07	; 7
 5f2:	8f 77       	andi	r24, 0x7F	; 127
 5f4:	80 64       	ori	r24, 0x40	; 64
 5f6:	8f 7d       	andi	r24, 0xDF	; 223
 5f8:	87 b9       	out	0x07, r24	; 7
 5fa:	86 b1       	in	r24, 0x06	; 6
 5fc:	86 60       	ori	r24, 0x06	; 6
 5fe:	8e 7f       	andi	r24, 0xFE	; 254
 600:	80 62       	ori	r24, 0x20	; 32
 602:	90 b7       	in	r25, 0x30	; 48
 604:	9f 71       	andi	r25, 0x1F	; 31
 606:	90 bf       	out	0x30, r25	; 48
 608:	87 7f       	andi	r24, 0xF7	; 247
 60a:	80 6c       	ori	r24, 0xC0	; 192
 60c:	86 b9       	out	0x06, r24	; 6
 60e:	08 95       	ret

00000610 <ADC_ReadChannel>:
 610:	96 b1       	in	r25, 0x06	; 6
 612:	27 b1       	in	r18, 0x07	; 7
 614:	20 7e       	andi	r18, 0xE0	; 224
 616:	82 2b       	or	r24, r18
 618:	87 b9       	out	0x07, r24	; 7
 61a:	89 2f       	mov	r24, r25
 61c:	80 66       	ori	r24, 0x60	; 96
 61e:	86 b9       	out	0x06, r24	; 6
 620:	61 15       	cp	r22, r1
 622:	71 05       	cpc	r23, r1
 624:	89 f0       	breq	.+34     	; 0x648 <ADC_ReadChannel+0x38>
 626:	84 ff       	sbrs	r24, 4
 628:	fe cf       	rjmp	.-4      	; 0x626 <ADC_ReadChannel+0x16>
 62a:	84 b1       	in	r24, 0x04	; 4
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	fb 01       	movw	r30, r22
 630:	91 83       	std	Z+1, r25	; 0x01
 632:	80 83       	st	Z, r24
 634:	25 b1       	in	r18, 0x05	; 5
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	32 2f       	mov	r19, r18
 63a:	22 27       	eor	r18, r18
 63c:	82 2b       	or	r24, r18
 63e:	93 2b       	or	r25, r19
 640:	91 83       	std	Z+1, r25	; 0x01
 642:	80 83       	st	Z, r24
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	01 c0       	rjmp	.+2      	; 0x64a <ADC_ReadChannel+0x3a>
 648:	83 e0       	ldi	r24, 0x03	; 3
 64a:	96 b1       	in	r25, 0x06	; 6
 64c:	90 61       	ori	r25, 0x10	; 16
 64e:	96 b9       	out	0x06, r25	; 6
 650:	08 95       	ret

00000652 <__vector_16>:
	
}

void __vector_16	(void)	__attribute__((signal,used));
void __vector_16	(void)
{
 652:	1f 92       	push	r1
 654:	0f 92       	push	r0
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	0f 92       	push	r0
 65a:	11 24       	eor	r1, r1
 65c:	2f 93       	push	r18
 65e:	3f 93       	push	r19
 660:	4f 93       	push	r20
 662:	5f 93       	push	r21
 664:	6f 93       	push	r22
 666:	7f 93       	push	r23
 668:	8f 93       	push	r24
 66a:	9f 93       	push	r25
 66c:	af 93       	push	r26
 66e:	bf 93       	push	r27
 670:	ef 93       	push	r30
 672:	ff 93       	push	r31
	if(ptr_func != NULL)
 674:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <__data_end>
 678:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <__data_end+0x1>
 67c:	30 97       	sbiw	r30, 0x00	; 0
 67e:	09 f0       	breq	.+2      	; 0x682 <__vector_16+0x30>
	{
		ptr_func();
 680:	09 95       	icall
			
			
	}
 682:	ff 91       	pop	r31
 684:	ef 91       	pop	r30
 686:	bf 91       	pop	r27
 688:	af 91       	pop	r26
 68a:	9f 91       	pop	r25
 68c:	8f 91       	pop	r24
 68e:	7f 91       	pop	r23
 690:	6f 91       	pop	r22
 692:	5f 91       	pop	r21
 694:	4f 91       	pop	r20
 696:	3f 91       	pop	r19
 698:	2f 91       	pop	r18
 69a:	0f 90       	pop	r0
 69c:	0f be       	out	0x3f, r0	; 63
 69e:	0f 90       	pop	r0
 6a0:	1f 90       	pop	r1
 6a2:	18 95       	reti

000006a4 <DIO_enuWriteChannel>:

DIO_enuErrorStatus DIO_enuWriteChannel(u8 copy_u8ChannelId ,u8 copy_u8Level){
	
	DIO_enuErrorStatus Return_val = DIO_Status_Fail;
	
	if(copy_u8ChannelId >= DIO_CHANNELS_NUMBER) Return_val = DIO_Pin_NO_ERR;
 6a4:	80 32       	cpi	r24, 0x20	; 32
 6a6:	08 f0       	brcs	.+2      	; 0x6aa <DIO_enuWriteChannel+0x6>
 6a8:	96 c0       	rjmp	.+300    	; 0x7d6 <DIO_enuWriteChannel+0x132>
	else if(copy_u8Level > 1) Return_val = DIO_Logic_Level_ERR;
 6aa:	62 30       	cpi	r22, 0x02	; 2
 6ac:	08 f0       	brcs	.+2      	; 0x6b0 <DIO_enuWriteChannel+0xc>
 6ae:	95 c0       	rjmp	.+298    	; 0x7da <DIO_enuWriteChannel+0x136>
	else{
		
		u8 loc_u8PortNo = copy_u8ChannelId / DIO_REGISTERS_SIZE ;
 6b0:	98 2f       	mov	r25, r24
 6b2:	96 95       	lsr	r25
 6b4:	96 95       	lsr	r25
 6b6:	96 95       	lsr	r25
		u8 loc_u8PinNo  = copy_u8ChannelId % DIO_REGISTERS_SIZE ;
 6b8:	87 70       	andi	r24, 0x07	; 7
		
		switch(loc_u8PortNo)
 6ba:	91 30       	cpi	r25, 0x01	; 1
 6bc:	49 f1       	breq	.+82     	; 0x710 <DIO_enuWriteChannel+0x6c>
 6be:	38 f0       	brcs	.+14     	; 0x6ce <DIO_enuWriteChannel+0x2a>
 6c0:	92 30       	cpi	r25, 0x02	; 2
 6c2:	09 f4       	brne	.+2      	; 0x6c6 <DIO_enuWriteChannel+0x22>
 6c4:	46 c0       	rjmp	.+140    	; 0x752 <DIO_enuWriteChannel+0xae>
 6c6:	93 30       	cpi	r25, 0x03	; 3
 6c8:	09 f4       	brne	.+2      	; 0x6cc <DIO_enuWriteChannel+0x28>
 6ca:	64 c0       	rjmp	.+200    	; 0x794 <DIO_enuWriteChannel+0xf0>
 6cc:	88 c0       	rjmp	.+272    	; 0x7de <DIO_enuWriteChannel+0x13a>
		{
			case DIO_PORTA :
							//if(DIO_HIGH == copy_u8Level && GET_BIT(DDRD,loc_u8PinNo)) SET_BIT(PORTA,loc_u8PinNo);
							if     (DIO_HIGH== copy_u8Level) SET_BIT(PORTA,loc_u8PinNo);
 6ce:	61 30       	cpi	r22, 0x01	; 1
 6d0:	71 f4       	brne	.+28     	; 0x6ee <DIO_enuWriteChannel+0x4a>
 6d2:	21 e0       	ldi	r18, 0x01	; 1
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	a9 01       	movw	r20, r18
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <DIO_enuWriteChannel+0x3a>
 6da:	44 0f       	add	r20, r20
 6dc:	55 1f       	adc	r21, r21
 6de:	8a 95       	dec	r24
 6e0:	e2 f7       	brpl	.-8      	; 0x6da <DIO_enuWriteChannel+0x36>
 6e2:	ca 01       	movw	r24, r20
 6e4:	9b b3       	in	r25, 0x1b	; 27
 6e6:	89 2b       	or	r24, r25
 6e8:	8b bb       	out	0x1b, r24	; 27
							else if(DIO_LOW == copy_u8Level) CLR_BIT(PORTA,loc_u8PinNo);
							Return_val = DIO_Status_Ok;
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	08 95       	ret
		switch(loc_u8PortNo)
		{
			case DIO_PORTA :
							//if(DIO_HIGH == copy_u8Level && GET_BIT(DDRD,loc_u8PinNo)) SET_BIT(PORTA,loc_u8PinNo);
							if     (DIO_HIGH== copy_u8Level) SET_BIT(PORTA,loc_u8PinNo);
							else if(DIO_LOW == copy_u8Level) CLR_BIT(PORTA,loc_u8PinNo);
 6ee:	61 11       	cpse	r22, r1
 6f0:	78 c0       	rjmp	.+240    	; 0x7e2 <DIO_enuWriteChannel+0x13e>
 6f2:	21 e0       	ldi	r18, 0x01	; 1
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	a9 01       	movw	r20, r18
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <DIO_enuWriteChannel+0x5a>
 6fa:	44 0f       	add	r20, r20
 6fc:	55 1f       	adc	r21, r21
 6fe:	8a 95       	dec	r24
 700:	e2 f7       	brpl	.-8      	; 0x6fa <DIO_enuWriteChannel+0x56>
 702:	ca 01       	movw	r24, r20
 704:	80 95       	com	r24
 706:	9b b3       	in	r25, 0x1b	; 27
 708:	89 23       	and	r24, r25
 70a:	8b bb       	out	0x1b, r24	; 27
							Return_val = DIO_Status_Ok;
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	08 95       	ret
							break;
			case DIO_PORTB :
							if     (DIO_HIGH== copy_u8Level) SET_BIT(PORTB,loc_u8PinNo);
 710:	61 30       	cpi	r22, 0x01	; 1
 712:	71 f4       	brne	.+28     	; 0x730 <DIO_enuWriteChannel+0x8c>
 714:	21 e0       	ldi	r18, 0x01	; 1
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	a9 01       	movw	r20, r18
 71a:	02 c0       	rjmp	.+4      	; 0x720 <DIO_enuWriteChannel+0x7c>
 71c:	44 0f       	add	r20, r20
 71e:	55 1f       	adc	r21, r21
 720:	8a 95       	dec	r24
 722:	e2 f7       	brpl	.-8      	; 0x71c <DIO_enuWriteChannel+0x78>
 724:	ca 01       	movw	r24, r20
 726:	98 b3       	in	r25, 0x18	; 24
 728:	89 2b       	or	r24, r25
 72a:	88 bb       	out	0x18, r24	; 24
							else if(DIO_LOW == copy_u8Level) CLR_BIT(PORTB,loc_u8PinNo);
							Return_val = DIO_Status_Ok;
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	08 95       	ret
							else if(DIO_LOW == copy_u8Level) CLR_BIT(PORTA,loc_u8PinNo);
							Return_val = DIO_Status_Ok;
							break;
			case DIO_PORTB :
							if     (DIO_HIGH== copy_u8Level) SET_BIT(PORTB,loc_u8PinNo);
							else if(DIO_LOW == copy_u8Level) CLR_BIT(PORTB,loc_u8PinNo);
 730:	61 11       	cpse	r22, r1
 732:	59 c0       	rjmp	.+178    	; 0x7e6 <DIO_enuWriteChannel+0x142>
 734:	21 e0       	ldi	r18, 0x01	; 1
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	a9 01       	movw	r20, r18
 73a:	02 c0       	rjmp	.+4      	; 0x740 <DIO_enuWriteChannel+0x9c>
 73c:	44 0f       	add	r20, r20
 73e:	55 1f       	adc	r21, r21
 740:	8a 95       	dec	r24
 742:	e2 f7       	brpl	.-8      	; 0x73c <DIO_enuWriteChannel+0x98>
 744:	ca 01       	movw	r24, r20
 746:	80 95       	com	r24
 748:	98 b3       	in	r25, 0x18	; 24
 74a:	89 23       	and	r24, r25
 74c:	88 bb       	out	0x18, r24	; 24
							Return_val = DIO_Status_Ok;
 74e:	80 e0       	ldi	r24, 0x00	; 0
 750:	08 95       	ret
							break;
			case DIO_PORTC :
							if     (DIO_HIGH== copy_u8Level) SET_BIT(PORTC,loc_u8PinNo);
 752:	61 30       	cpi	r22, 0x01	; 1
 754:	71 f4       	brne	.+28     	; 0x772 <DIO_enuWriteChannel+0xce>
 756:	21 e0       	ldi	r18, 0x01	; 1
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	a9 01       	movw	r20, r18
 75c:	02 c0       	rjmp	.+4      	; 0x762 <DIO_enuWriteChannel+0xbe>
 75e:	44 0f       	add	r20, r20
 760:	55 1f       	adc	r21, r21
 762:	8a 95       	dec	r24
 764:	e2 f7       	brpl	.-8      	; 0x75e <DIO_enuWriteChannel+0xba>
 766:	ca 01       	movw	r24, r20
 768:	95 b3       	in	r25, 0x15	; 21
 76a:	89 2b       	or	r24, r25
 76c:	85 bb       	out	0x15, r24	; 21
							else if(DIO_LOW == copy_u8Level) CLR_BIT(PORTC,loc_u8PinNo);
							Return_val = DIO_Status_Ok;
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	08 95       	ret
							else if(DIO_LOW == copy_u8Level) CLR_BIT(PORTB,loc_u8PinNo);
							Return_val = DIO_Status_Ok;
							break;
			case DIO_PORTC :
							if     (DIO_HIGH== copy_u8Level) SET_BIT(PORTC,loc_u8PinNo);
							else if(DIO_LOW == copy_u8Level) CLR_BIT(PORTC,loc_u8PinNo);
 772:	61 11       	cpse	r22, r1
 774:	3a c0       	rjmp	.+116    	; 0x7ea <DIO_enuWriteChannel+0x146>
 776:	21 e0       	ldi	r18, 0x01	; 1
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	a9 01       	movw	r20, r18
 77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_enuWriteChannel+0xde>
 77e:	44 0f       	add	r20, r20
 780:	55 1f       	adc	r21, r21
 782:	8a 95       	dec	r24
 784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_enuWriteChannel+0xda>
 786:	ca 01       	movw	r24, r20
 788:	80 95       	com	r24
 78a:	95 b3       	in	r25, 0x15	; 21
 78c:	89 23       	and	r24, r25
 78e:	85 bb       	out	0x15, r24	; 21
							Return_val = DIO_Status_Ok;
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	08 95       	ret
							break;
			case DIO_PORTD :
							//if(DIO_HIGH == copy_u8Level && GET_BIT(DDRD,loc_u8PinNo)) SET_BIT(PORTD,loc_u8PinNo);
							if     (DIO_HIGH== copy_u8Level) SET_BIT(PORTD,loc_u8PinNo);
 794:	61 30       	cpi	r22, 0x01	; 1
 796:	71 f4       	brne	.+28     	; 0x7b4 <DIO_enuWriteChannel+0x110>
 798:	21 e0       	ldi	r18, 0x01	; 1
 79a:	30 e0       	ldi	r19, 0x00	; 0
 79c:	a9 01       	movw	r20, r18
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <DIO_enuWriteChannel+0x100>
 7a0:	44 0f       	add	r20, r20
 7a2:	55 1f       	adc	r21, r21
 7a4:	8a 95       	dec	r24
 7a6:	e2 f7       	brpl	.-8      	; 0x7a0 <DIO_enuWriteChannel+0xfc>
 7a8:	ca 01       	movw	r24, r20
 7aa:	92 b3       	in	r25, 0x12	; 18
 7ac:	89 2b       	or	r24, r25
 7ae:	82 bb       	out	0x12, r24	; 18
							else if(DIO_LOW == copy_u8Level) CLR_BIT(PORTD,loc_u8PinNo);
							Return_val = DIO_Status_Ok;
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	08 95       	ret
							Return_val = DIO_Status_Ok;
							break;
			case DIO_PORTD :
							//if(DIO_HIGH == copy_u8Level && GET_BIT(DDRD,loc_u8PinNo)) SET_BIT(PORTD,loc_u8PinNo);
							if     (DIO_HIGH== copy_u8Level) SET_BIT(PORTD,loc_u8PinNo);
							else if(DIO_LOW == copy_u8Level) CLR_BIT(PORTD,loc_u8PinNo);
 7b4:	61 11       	cpse	r22, r1
 7b6:	1b c0       	rjmp	.+54     	; 0x7ee <DIO_enuWriteChannel+0x14a>
 7b8:	21 e0       	ldi	r18, 0x01	; 1
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	a9 01       	movw	r20, r18
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <DIO_enuWriteChannel+0x120>
 7c0:	44 0f       	add	r20, r20
 7c2:	55 1f       	adc	r21, r21
 7c4:	8a 95       	dec	r24
 7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <DIO_enuWriteChannel+0x11c>
 7c8:	ca 01       	movw	r24, r20
 7ca:	80 95       	com	r24
 7cc:	92 b3       	in	r25, 0x12	; 18
 7ce:	89 23       	and	r24, r25
 7d0:	82 bb       	out	0x12, r24	; 18
							Return_val = DIO_Status_Ok;
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	08 95       	ret

DIO_enuErrorStatus DIO_enuWriteChannel(u8 copy_u8ChannelId ,u8 copy_u8Level){
	
	DIO_enuErrorStatus Return_val = DIO_Status_Fail;
	
	if(copy_u8ChannelId >= DIO_CHANNELS_NUMBER) Return_val = DIO_Pin_NO_ERR;
 7d6:	82 e0       	ldi	r24, 0x02	; 2
 7d8:	08 95       	ret
	else if(copy_u8Level > 1) Return_val = DIO_Logic_Level_ERR;
 7da:	84 e0       	ldi	r24, 0x04	; 4
 7dc:	08 95       	ret
							if     (DIO_HIGH== copy_u8Level) SET_BIT(PORTD,loc_u8PinNo);
							else if(DIO_LOW == copy_u8Level) CLR_BIT(PORTD,loc_u8PinNo);
							Return_val = DIO_Status_Ok;
							break;
			default		   :
							Return_val = DIO_PORT_NO_ERR;
 7de:	83 e0       	ldi	r24, 0x03	; 3
 7e0:	08 95       	ret
		{
			case DIO_PORTA :
							//if(DIO_HIGH == copy_u8Level && GET_BIT(DDRD,loc_u8PinNo)) SET_BIT(PORTA,loc_u8PinNo);
							if     (DIO_HIGH== copy_u8Level) SET_BIT(PORTA,loc_u8PinNo);
							else if(DIO_LOW == copy_u8Level) CLR_BIT(PORTA,loc_u8PinNo);
							Return_val = DIO_Status_Ok;
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	08 95       	ret
							break;
			case DIO_PORTB :
							if     (DIO_HIGH== copy_u8Level) SET_BIT(PORTB,loc_u8PinNo);
							else if(DIO_LOW == copy_u8Level) CLR_BIT(PORTB,loc_u8PinNo);
							Return_val = DIO_Status_Ok;
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	08 95       	ret
							break;
			case DIO_PORTC :
							if     (DIO_HIGH== copy_u8Level) SET_BIT(PORTC,loc_u8PinNo);
							else if(DIO_LOW == copy_u8Level) CLR_BIT(PORTC,loc_u8PinNo);
							Return_val = DIO_Status_Ok;
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	08 95       	ret
							break;
			case DIO_PORTD :
							//if(DIO_HIGH == copy_u8Level && GET_BIT(DDRD,loc_u8PinNo)) SET_BIT(PORTD,loc_u8PinNo);
							if     (DIO_HIGH== copy_u8Level) SET_BIT(PORTD,loc_u8PinNo);
							else if(DIO_LOW == copy_u8Level) CLR_BIT(PORTD,loc_u8PinNo);
							Return_val = DIO_Status_Ok;
 7ee:	80 e0       	ldi	r24, 0x00	; 0
							Return_val = DIO_PORT_NO_ERR;
							break;
		}
	}
	return Return_val;	
}
 7f0:	08 95       	ret

000007f2 <__vector_1>:
	}
}
//ISR for INT0
void __vector_1	(void)	__attribute__((signal,used));
void __vector_1	(void)
{
 7f2:	1f 92       	push	r1
 7f4:	0f 92       	push	r0
 7f6:	0f b6       	in	r0, 0x3f	; 63
 7f8:	0f 92       	push	r0
 7fa:	11 24       	eor	r1, r1
 7fc:	2f 93       	push	r18
 7fe:	3f 93       	push	r19
 800:	4f 93       	push	r20
 802:	5f 93       	push	r21
 804:	6f 93       	push	r22
 806:	7f 93       	push	r23
 808:	8f 93       	push	r24
 80a:	9f 93       	push	r25
 80c:	af 93       	push	r26
 80e:	bf 93       	push	r27
 810:	ef 93       	push	r30
 812:	ff 93       	push	r31
	if(Global_PtoFs[0] != NULL)
 814:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <Global_PtoFs>
 818:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <Global_PtoFs+0x1>
 81c:	30 97       	sbiw	r30, 0x00	; 0
 81e:	09 f0       	breq	.+2      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
	{
		Global_PtoFs[0]();
 820:	09 95       	icall
	}
}
 822:	ff 91       	pop	r31
 824:	ef 91       	pop	r30
 826:	bf 91       	pop	r27
 828:	af 91       	pop	r26
 82a:	9f 91       	pop	r25
 82c:	8f 91       	pop	r24
 82e:	7f 91       	pop	r23
 830:	6f 91       	pop	r22
 832:	5f 91       	pop	r21
 834:	4f 91       	pop	r20
 836:	3f 91       	pop	r19
 838:	2f 91       	pop	r18
 83a:	0f 90       	pop	r0
 83c:	0f be       	out	0x3f, r0	; 63
 83e:	0f 90       	pop	r0
 840:	1f 90       	pop	r1
 842:	18 95       	reti

00000844 <__vector_2>:
//ISR for INT1
void __vector_2	(void)	__attribute__((signal,used));
void __vector_2	(void)
{
 844:	1f 92       	push	r1
 846:	0f 92       	push	r0
 848:	0f b6       	in	r0, 0x3f	; 63
 84a:	0f 92       	push	r0
 84c:	11 24       	eor	r1, r1
 84e:	2f 93       	push	r18
 850:	3f 93       	push	r19
 852:	4f 93       	push	r20
 854:	5f 93       	push	r21
 856:	6f 93       	push	r22
 858:	7f 93       	push	r23
 85a:	8f 93       	push	r24
 85c:	9f 93       	push	r25
 85e:	af 93       	push	r26
 860:	bf 93       	push	r27
 862:	ef 93       	push	r30
 864:	ff 93       	push	r31
	if(Global_PtoFs[1] != NULL)
 866:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <Global_PtoFs+0x2>
 86a:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <Global_PtoFs+0x3>
 86e:	30 97       	sbiw	r30, 0x00	; 0
 870:	09 f0       	breq	.+2      	; 0x874 <__stack+0x15>
	{
		Global_PtoFs[1]();
 872:	09 95       	icall
	}
}
 874:	ff 91       	pop	r31
 876:	ef 91       	pop	r30
 878:	bf 91       	pop	r27
 87a:	af 91       	pop	r26
 87c:	9f 91       	pop	r25
 87e:	8f 91       	pop	r24
 880:	7f 91       	pop	r23
 882:	6f 91       	pop	r22
 884:	5f 91       	pop	r21
 886:	4f 91       	pop	r20
 888:	3f 91       	pop	r19
 88a:	2f 91       	pop	r18
 88c:	0f 90       	pop	r0
 88e:	0f be       	out	0x3f, r0	; 63
 890:	0f 90       	pop	r0
 892:	1f 90       	pop	r1
 894:	18 95       	reti

00000896 <__vector_3>:
//ISR for INT2
void __vector_3	(void)	__attribute__((signal,used));
void __vector_3	(void)
{
 896:	1f 92       	push	r1
 898:	0f 92       	push	r0
 89a:	0f b6       	in	r0, 0x3f	; 63
 89c:	0f 92       	push	r0
 89e:	11 24       	eor	r1, r1
 8a0:	2f 93       	push	r18
 8a2:	3f 93       	push	r19
 8a4:	4f 93       	push	r20
 8a6:	5f 93       	push	r21
 8a8:	6f 93       	push	r22
 8aa:	7f 93       	push	r23
 8ac:	8f 93       	push	r24
 8ae:	9f 93       	push	r25
 8b0:	af 93       	push	r26
 8b2:	bf 93       	push	r27
 8b4:	ef 93       	push	r30
 8b6:	ff 93       	push	r31
	if(Global_PtoFs[2] != NULL)
 8b8:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <Global_PtoFs+0x4>
 8bc:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <Global_PtoFs+0x5>
 8c0:	30 97       	sbiw	r30, 0x00	; 0
 8c2:	09 f0       	breq	.+2      	; 0x8c6 <__vector_3+0x30>
	{
		Global_PtoFs[2]();
 8c4:	09 95       	icall
	}
}
 8c6:	ff 91       	pop	r31
 8c8:	ef 91       	pop	r30
 8ca:	bf 91       	pop	r27
 8cc:	af 91       	pop	r26
 8ce:	9f 91       	pop	r25
 8d0:	8f 91       	pop	r24
 8d2:	7f 91       	pop	r23
 8d4:	6f 91       	pop	r22
 8d6:	5f 91       	pop	r21
 8d8:	4f 91       	pop	r20
 8da:	3f 91       	pop	r19
 8dc:	2f 91       	pop	r18
 8de:	0f 90       	pop	r0
 8e0:	0f be       	out	0x3f, r0	; 63
 8e2:	0f 90       	pop	r0
 8e4:	1f 90       	pop	r1
 8e6:	18 95       	reti

000008e8 <__vector_10>:
	//SET_BIT(TCCR0,WGM00);

}
void __vector_10	(void)	__attribute__((signal,used));
void __vector_10	(void)
{
 8e8:	1f 92       	push	r1
 8ea:	0f 92       	push	r0
 8ec:	0f b6       	in	r0, 0x3f	; 63
 8ee:	0f 92       	push	r0
 8f0:	11 24       	eor	r1, r1
 8f2:	2f 93       	push	r18
 8f4:	3f 93       	push	r19
 8f6:	4f 93       	push	r20
 8f8:	5f 93       	push	r21
 8fa:	6f 93       	push	r22
 8fc:	7f 93       	push	r23
 8fe:	8f 93       	push	r24
 900:	9f 93       	push	r25
 902:	af 93       	push	r26
 904:	bf 93       	push	r27
 906:	ef 93       	push	r30
 908:	ff 93       	push	r31
	if(timerClbk_ptr[1] != NULL)
 90a:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <timerClbk_ptr+0x2>
 90e:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <timerClbk_ptr+0x3>
 912:	30 97       	sbiw	r30, 0x00	; 0
 914:	09 f0       	breq	.+2      	; 0x918 <__vector_10+0x30>
	{
		timerClbk_ptr[1]();
 916:	09 95       	icall
	}
}
 918:	ff 91       	pop	r31
 91a:	ef 91       	pop	r30
 91c:	bf 91       	pop	r27
 91e:	af 91       	pop	r26
 920:	9f 91       	pop	r25
 922:	8f 91       	pop	r24
 924:	7f 91       	pop	r23
 926:	6f 91       	pop	r22
 928:	5f 91       	pop	r21
 92a:	4f 91       	pop	r20
 92c:	3f 91       	pop	r19
 92e:	2f 91       	pop	r18
 930:	0f 90       	pop	r0
 932:	0f be       	out	0x3f, r0	; 63
 934:	0f 90       	pop	r0
 936:	1f 90       	pop	r1
 938:	18 95       	reti

0000093a <PORT_vInit>:
	#define INPUT_FLOATING 0
	#define INPUT_PULL_UP 0
	#define OUTPUT_HIGH 1
	#define OUTPUT_LOW 1
	
	DDRA = CONC(PORT_PINMODE07,PORT_PINMODE06,PORT_PINMODE05,PORT_PINMODE04,PORT_PINMODE03,PORT_PINMODE02,PORT_PINMODE01,PORT_PINMODE00); 	
 93a:	8c e0       	ldi	r24, 0x0C	; 12
 93c:	8a bb       	out	0x1a, r24	; 26
	DDRB = CONC(PORT_PINMODE15,PORT_PINMODE14,PORT_PINMODE13,PORT_PINMODE12,PORT_PINMODE11,PORT_PINMODE10,PORT_PINMODE09,PORT_PINMODE08);
 93e:	8f e1       	ldi	r24, 0x1F	; 31
 940:	87 bb       	out	0x17, r24	; 23
	DDRC = CONC(PORT_PINMODE23,PORT_PINMODE22,PORT_PINMODE21,PORT_PINMODE20,PORT_PINMODE19,PORT_PINMODE18,PORT_PINMODE17,PORT_PINMODE16);
 942:	80 e4       	ldi	r24, 0x40	; 64
 944:	84 bb       	out	0x14, r24	; 20
	DDRD = CONC(PORT_PINMODE31,PORT_PINMODE30,PORT_PINMODE29,PORT_PINMODE28,PORT_PINMODE27,PORT_PINMODE26,PORT_PINMODE25,PORT_PINMODE24);
 946:	86 e0       	ldi	r24, 0x06	; 6
 948:	81 bb       	out	0x11, r24	; 17
	#define INPUT_FLOATING 0
	#define INPUT_PULL_UP 1
	#define OUTPUT_HIGH 1
	#define OUTPUT_LOW 0
	
	PORTA = CONC(PORT_PINMODE07,PORT_PINMODE06,PORT_PINMODE05,PORT_PINMODE04,PORT_PINMODE03,PORT_PINMODE02,PORT_PINMODE01,PORT_PINMODE00);
 94a:	1b ba       	out	0x1b, r1	; 27
	PORTB = CONC(PORT_PINMODE15,PORT_PINMODE14,PORT_PINMODE13,PORT_PINMODE12,PORT_PINMODE11,PORT_PINMODE10,PORT_PINMODE09,PORT_PINMODE08);
 94c:	18 ba       	out	0x18, r1	; 24
	PORTC = CONC(PORT_PINMODE23,PORT_PINMODE22,PORT_PINMODE21,PORT_PINMODE20,PORT_PINMODE19,PORT_PINMODE18,PORT_PINMODE17,PORT_PINMODE16);
 94e:	15 ba       	out	0x15, r1	; 21
	PORTD = CONC(PORT_PINMODE31,PORT_PINMODE30,PORT_PINMODE29,PORT_PINMODE28,PORT_PINMODE27,PORT_PINMODE26,PORT_PINMODE25,PORT_PINMODE24);
 950:	82 e0       	ldi	r24, 0x02	; 2
 952:	82 bb       	out	0x12, r24	; 18
 954:	08 95       	ret

00000956 <PORT_enuSetPinMode>:


PORT_enuErrorStatus PORT_enuSetPinMode(u8 copy_PinNm,u8 copy_PinMode){	
	PORT_enuErrorStatus Return_val = PORT_Status_Fail; //initializing Return Status
	
	u8 PortNum = copy_PinNm /8;   // Get Port Number
 956:	98 2f       	mov	r25, r24
 958:	96 95       	lsr	r25
 95a:	96 95       	lsr	r25
 95c:	96 95       	lsr	r25
	u8 PinNum = copy_PinNm  % 8; // Get Pin Number
 95e:	28 2f       	mov	r18, r24
 960:	27 70       	andi	r18, 0x07	; 7
	
	if     (PortNum>3)     Return_val = PORT_NO_ERR;
 962:	94 30       	cpi	r25, 0x04	; 4
 964:	10 f4       	brcc	.+4      	; 0x96a <PORT_enuSetPinMode+0x14>
}



PORT_enuErrorStatus PORT_enuSetPinMode(u8 copy_PinNm,u8 copy_PinMode){	
	PORT_enuErrorStatus Return_val = PORT_Status_Fail; //initializing Return Status
 966:	81 e0       	ldi	r24, 0x01	; 1
 968:	01 c0       	rjmp	.+2      	; 0x96c <PORT_enuSetPinMode+0x16>
	
	u8 PortNum = copy_PinNm /8;   // Get Port Number
	u8 PinNum = copy_PinNm  % 8; // Get Pin Number
	
	if     (PortNum>3)     Return_val = PORT_NO_ERR;
 96a:	83 e0       	ldi	r24, 0x03	; 3
	else if(PinNum>31)     Return_val = PORT_Pin_NO_ERR;
	
	if(copy_PinMode != 0 && copy_PinMode != 1 && copy_PinMode != 2  && copy_PinMode != 3 ) Return_val = PORT_Logic_Level_ERR;
 96c:	64 30       	cpi	r22, 0x04	; 4
 96e:	08 f0       	brcs	.+2      	; 0x972 <PORT_enuSetPinMode+0x1c>
 970:	84 e0       	ldi	r24, 0x04	; 4
	
	
switch(PortNum){
 972:	91 30       	cpi	r25, 0x01	; 1
 974:	09 f4       	brne	.+2      	; 0x978 <PORT_enuSetPinMode+0x22>
 976:	51 c0       	rjmp	.+162    	; 0xa1a <PORT_enuSetPinMode+0xc4>
 978:	38 f0       	brcs	.+14     	; 0x988 <PORT_enuSetPinMode+0x32>
 97a:	92 30       	cpi	r25, 0x02	; 2
 97c:	09 f4       	brne	.+2      	; 0x980 <PORT_enuSetPinMode+0x2a>
 97e:	96 c0       	rjmp	.+300    	; 0xaac <PORT_enuSetPinMode+0x156>
 980:	93 30       	cpi	r25, 0x03	; 3
 982:	09 f4       	brne	.+2      	; 0x986 <PORT_enuSetPinMode+0x30>
 984:	dc c0       	rjmp	.+440    	; 0xb3e <PORT_enuSetPinMode+0x1e8>
 986:	08 95       	ret
	
	case 0 :
	if		(1 == copy_PinMode) {SET_BIT(PORTA,PinNum);CLR_BIT(DDRA,PinNum); Return_val = PORT_Status_Ok;   }      //Setting Required Pin & Updating Status
 988:	61 30       	cpi	r22, 0x01	; 1
 98a:	81 f4       	brne	.+32     	; 0x9ac <PORT_enuSetPinMode+0x56>
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	02 c0       	rjmp	.+4      	; 0x996 <PORT_enuSetPinMode+0x40>
 992:	88 0f       	add	r24, r24
 994:	99 1f       	adc	r25, r25
 996:	2a 95       	dec	r18
 998:	e2 f7       	brpl	.-8      	; 0x992 <PORT_enuSetPinMode+0x3c>
 99a:	9b b3       	in	r25, 0x1b	; 27
 99c:	98 2b       	or	r25, r24
 99e:	9b bb       	out	0x1b, r25	; 27
 9a0:	80 95       	com	r24
 9a2:	9a b3       	in	r25, 0x1a	; 26
 9a4:	89 23       	and	r24, r25
 9a6:	8a bb       	out	0x1a, r24	; 26
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	08 95       	ret
	else if (0 == copy_PinMode) {CLR_BIT(PORTA,PinNum);CLR_BIT(DDRA,PinNum); Return_val = PORT_Status_Ok;   }      //Clearing Required Pin & Updating Status
 9ac:	61 11       	cpse	r22, r1
 9ae:	10 c0       	rjmp	.+32     	; 0x9d0 <PORT_enuSetPinMode+0x7a>
 9b0:	81 e0       	ldi	r24, 0x01	; 1
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <PORT_enuSetPinMode+0x64>
 9b6:	88 0f       	add	r24, r24
 9b8:	99 1f       	adc	r25, r25
 9ba:	2a 95       	dec	r18
 9bc:	e2 f7       	brpl	.-8      	; 0x9b6 <PORT_enuSetPinMode+0x60>
 9be:	80 95       	com	r24
 9c0:	9b b3       	in	r25, 0x1b	; 27
 9c2:	98 23       	and	r25, r24
 9c4:	9b bb       	out	0x1b, r25	; 27
 9c6:	9a b3       	in	r25, 0x1a	; 26
 9c8:	89 23       	and	r24, r25
 9ca:	8a bb       	out	0x1a, r24	; 26
 9cc:	80 e0       	ldi	r24, 0x00	; 0
 9ce:	08 95       	ret
	else if (2 == copy_PinMode) {SET_BIT(PORTA,PinNum);SET_BIT(DDRA,PinNum); Return_val = PORT_Status_Ok;   }      //Setting Required Pin & Updating Status
 9d0:	62 30       	cpi	r22, 0x02	; 2
 9d2:	79 f4       	brne	.+30     	; 0x9f2 <PORT_enuSetPinMode+0x9c>
 9d4:	81 e0       	ldi	r24, 0x01	; 1
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <PORT_enuSetPinMode+0x88>
 9da:	88 0f       	add	r24, r24
 9dc:	99 1f       	adc	r25, r25
 9de:	2a 95       	dec	r18
 9e0:	e2 f7       	brpl	.-8      	; 0x9da <PORT_enuSetPinMode+0x84>
 9e2:	9b b3       	in	r25, 0x1b	; 27
 9e4:	98 2b       	or	r25, r24
 9e6:	9b bb       	out	0x1b, r25	; 27
 9e8:	9a b3       	in	r25, 0x1a	; 26
 9ea:	89 2b       	or	r24, r25
 9ec:	8a bb       	out	0x1a, r24	; 26
 9ee:	80 e0       	ldi	r24, 0x00	; 0
 9f0:	08 95       	ret
	else if (3 == copy_PinMode) {CLR_BIT(PORTA,PinNum);SET_BIT(DDRA,PinNum); Return_val = PORT_Status_Ok;   }      //Clearing Required Pin & Updating Status
 9f2:	63 30       	cpi	r22, 0x03	; 3
 9f4:	09 f0       	breq	.+2      	; 0x9f8 <PORT_enuSetPinMode+0xa2>
 9f6:	ea c0       	rjmp	.+468    	; 0xbcc <PORT_enuSetPinMode+0x276>
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	02 c0       	rjmp	.+4      	; 0xa02 <PORT_enuSetPinMode+0xac>
 9fe:	88 0f       	add	r24, r24
 a00:	99 1f       	adc	r25, r25
 a02:	2a 95       	dec	r18
 a04:	e2 f7       	brpl	.-8      	; 0x9fe <PORT_enuSetPinMode+0xa8>
 a06:	98 2f       	mov	r25, r24
 a08:	90 95       	com	r25
 a0a:	2b b3       	in	r18, 0x1b	; 27
 a0c:	92 23       	and	r25, r18
 a0e:	9b bb       	out	0x1b, r25	; 27
 a10:	9a b3       	in	r25, 0x1a	; 26
 a12:	89 2b       	or	r24, r25
 a14:	8a bb       	out	0x1a, r24	; 26
 a16:	80 e0       	ldi	r24, 0x00	; 0
 a18:	08 95       	ret
	break;
	case 1 :
	if		(1 == copy_PinMode) {SET_BIT(PORTB,PinNum);CLR_BIT(DDRB,PinNum); Return_val = PORT_Status_Ok;   }      //Setting Required Pin & Updating Status
 a1a:	61 30       	cpi	r22, 0x01	; 1
 a1c:	81 f4       	brne	.+32     	; 0xa3e <PORT_enuSetPinMode+0xe8>
 a1e:	81 e0       	ldi	r24, 0x01	; 1
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	02 c0       	rjmp	.+4      	; 0xa28 <PORT_enuSetPinMode+0xd2>
 a24:	88 0f       	add	r24, r24
 a26:	99 1f       	adc	r25, r25
 a28:	2a 95       	dec	r18
 a2a:	e2 f7       	brpl	.-8      	; 0xa24 <PORT_enuSetPinMode+0xce>
 a2c:	98 b3       	in	r25, 0x18	; 24
 a2e:	98 2b       	or	r25, r24
 a30:	98 bb       	out	0x18, r25	; 24
 a32:	80 95       	com	r24
 a34:	97 b3       	in	r25, 0x17	; 23
 a36:	89 23       	and	r24, r25
 a38:	87 bb       	out	0x17, r24	; 23
 a3a:	80 e0       	ldi	r24, 0x00	; 0
 a3c:	08 95       	ret
	else if (0 == copy_PinMode) {CLR_BIT(PORTB,PinNum);CLR_BIT(DDRB,PinNum); Return_val = PORT_Status_Ok;   }      //Clearing Required Pin & Updating Status
 a3e:	61 11       	cpse	r22, r1
 a40:	10 c0       	rjmp	.+32     	; 0xa62 <PORT_enuSetPinMode+0x10c>
 a42:	81 e0       	ldi	r24, 0x01	; 1
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	02 c0       	rjmp	.+4      	; 0xa4c <PORT_enuSetPinMode+0xf6>
 a48:	88 0f       	add	r24, r24
 a4a:	99 1f       	adc	r25, r25
 a4c:	2a 95       	dec	r18
 a4e:	e2 f7       	brpl	.-8      	; 0xa48 <PORT_enuSetPinMode+0xf2>
 a50:	80 95       	com	r24
 a52:	98 b3       	in	r25, 0x18	; 24
 a54:	98 23       	and	r25, r24
 a56:	98 bb       	out	0x18, r25	; 24
 a58:	97 b3       	in	r25, 0x17	; 23
 a5a:	89 23       	and	r24, r25
 a5c:	87 bb       	out	0x17, r24	; 23
 a5e:	80 e0       	ldi	r24, 0x00	; 0
 a60:	08 95       	ret
	else if (2 == copy_PinMode) {SET_BIT(PORTB,PinNum);SET_BIT(DDRB,PinNum); Return_val = PORT_Status_Ok;   }      //Setting Required Pin & Updating Status
 a62:	62 30       	cpi	r22, 0x02	; 2
 a64:	79 f4       	brne	.+30     	; 0xa84 <PORT_enuSetPinMode+0x12e>
 a66:	81 e0       	ldi	r24, 0x01	; 1
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	02 c0       	rjmp	.+4      	; 0xa70 <PORT_enuSetPinMode+0x11a>
 a6c:	88 0f       	add	r24, r24
 a6e:	99 1f       	adc	r25, r25
 a70:	2a 95       	dec	r18
 a72:	e2 f7       	brpl	.-8      	; 0xa6c <PORT_enuSetPinMode+0x116>
 a74:	98 b3       	in	r25, 0x18	; 24
 a76:	98 2b       	or	r25, r24
 a78:	98 bb       	out	0x18, r25	; 24
 a7a:	97 b3       	in	r25, 0x17	; 23
 a7c:	89 2b       	or	r24, r25
 a7e:	87 bb       	out	0x17, r24	; 23
 a80:	80 e0       	ldi	r24, 0x00	; 0
 a82:	08 95       	ret
	else if (3 == copy_PinMode) {CLR_BIT(PORTB,PinNum);SET_BIT(DDRB,PinNum); Return_val = PORT_Status_Ok;   }      //Clearing Required Pin & Updating Status
 a84:	63 30       	cpi	r22, 0x03	; 3
 a86:	09 f0       	breq	.+2      	; 0xa8a <PORT_enuSetPinMode+0x134>
 a88:	a1 c0       	rjmp	.+322    	; 0xbcc <PORT_enuSetPinMode+0x276>
 a8a:	81 e0       	ldi	r24, 0x01	; 1
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	02 c0       	rjmp	.+4      	; 0xa94 <PORT_enuSetPinMode+0x13e>
 a90:	88 0f       	add	r24, r24
 a92:	99 1f       	adc	r25, r25
 a94:	2a 95       	dec	r18
 a96:	e2 f7       	brpl	.-8      	; 0xa90 <PORT_enuSetPinMode+0x13a>
 a98:	98 2f       	mov	r25, r24
 a9a:	90 95       	com	r25
 a9c:	28 b3       	in	r18, 0x18	; 24
 a9e:	92 23       	and	r25, r18
 aa0:	98 bb       	out	0x18, r25	; 24
 aa2:	97 b3       	in	r25, 0x17	; 23
 aa4:	89 2b       	or	r24, r25
 aa6:	87 bb       	out	0x17, r24	; 23
 aa8:	80 e0       	ldi	r24, 0x00	; 0
 aaa:	08 95       	ret
	break;
	case 2 :
	if		(1 == copy_PinMode) {SET_BIT(PORTC,PinNum);CLR_BIT(DDRC,PinNum); Return_val = PORT_Status_Ok;   }      //Setting Required Pin & Updating Status
 aac:	61 30       	cpi	r22, 0x01	; 1
 aae:	81 f4       	brne	.+32     	; 0xad0 <PORT_enuSetPinMode+0x17a>
 ab0:	81 e0       	ldi	r24, 0x01	; 1
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	02 c0       	rjmp	.+4      	; 0xaba <PORT_enuSetPinMode+0x164>
 ab6:	88 0f       	add	r24, r24
 ab8:	99 1f       	adc	r25, r25
 aba:	2a 95       	dec	r18
 abc:	e2 f7       	brpl	.-8      	; 0xab6 <PORT_enuSetPinMode+0x160>
 abe:	95 b3       	in	r25, 0x15	; 21
 ac0:	98 2b       	or	r25, r24
 ac2:	95 bb       	out	0x15, r25	; 21
 ac4:	80 95       	com	r24
 ac6:	94 b3       	in	r25, 0x14	; 20
 ac8:	89 23       	and	r24, r25
 aca:	84 bb       	out	0x14, r24	; 20
 acc:	80 e0       	ldi	r24, 0x00	; 0
 ace:	08 95       	ret
	else if (0 == copy_PinMode) {CLR_BIT(PORTC,PinNum);CLR_BIT(DDRC,PinNum); Return_val = PORT_Status_Ok;   }      //Clearing Required Pin & Updating Status
 ad0:	61 11       	cpse	r22, r1
 ad2:	10 c0       	rjmp	.+32     	; 0xaf4 <PORT_enuSetPinMode+0x19e>
 ad4:	81 e0       	ldi	r24, 0x01	; 1
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	02 c0       	rjmp	.+4      	; 0xade <PORT_enuSetPinMode+0x188>
 ada:	88 0f       	add	r24, r24
 adc:	99 1f       	adc	r25, r25
 ade:	2a 95       	dec	r18
 ae0:	e2 f7       	brpl	.-8      	; 0xada <PORT_enuSetPinMode+0x184>
 ae2:	80 95       	com	r24
 ae4:	95 b3       	in	r25, 0x15	; 21
 ae6:	98 23       	and	r25, r24
 ae8:	95 bb       	out	0x15, r25	; 21
 aea:	94 b3       	in	r25, 0x14	; 20
 aec:	89 23       	and	r24, r25
 aee:	84 bb       	out	0x14, r24	; 20
 af0:	80 e0       	ldi	r24, 0x00	; 0
 af2:	08 95       	ret
	else if (2 == copy_PinMode) {SET_BIT(PORTC,PinNum);SET_BIT(DDRC,PinNum); Return_val = PORT_Status_Ok;   }      //Setting Required Pin & Updating Status
 af4:	62 30       	cpi	r22, 0x02	; 2
 af6:	79 f4       	brne	.+30     	; 0xb16 <PORT_enuSetPinMode+0x1c0>
 af8:	81 e0       	ldi	r24, 0x01	; 1
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	02 c0       	rjmp	.+4      	; 0xb02 <PORT_enuSetPinMode+0x1ac>
 afe:	88 0f       	add	r24, r24
 b00:	99 1f       	adc	r25, r25
 b02:	2a 95       	dec	r18
 b04:	e2 f7       	brpl	.-8      	; 0xafe <PORT_enuSetPinMode+0x1a8>
 b06:	95 b3       	in	r25, 0x15	; 21
 b08:	98 2b       	or	r25, r24
 b0a:	95 bb       	out	0x15, r25	; 21
 b0c:	94 b3       	in	r25, 0x14	; 20
 b0e:	89 2b       	or	r24, r25
 b10:	84 bb       	out	0x14, r24	; 20
 b12:	80 e0       	ldi	r24, 0x00	; 0
 b14:	08 95       	ret
	else if (3 == copy_PinMode) {CLR_BIT(PORTC,PinNum);SET_BIT(DDRC,PinNum); Return_val = PORT_Status_Ok;   }      //Clearing Required Pin & Updating Status
 b16:	63 30       	cpi	r22, 0x03	; 3
 b18:	09 f0       	breq	.+2      	; 0xb1c <PORT_enuSetPinMode+0x1c6>
 b1a:	58 c0       	rjmp	.+176    	; 0xbcc <PORT_enuSetPinMode+0x276>
 b1c:	81 e0       	ldi	r24, 0x01	; 1
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	02 c0       	rjmp	.+4      	; 0xb26 <PORT_enuSetPinMode+0x1d0>
 b22:	88 0f       	add	r24, r24
 b24:	99 1f       	adc	r25, r25
 b26:	2a 95       	dec	r18
 b28:	e2 f7       	brpl	.-8      	; 0xb22 <PORT_enuSetPinMode+0x1cc>
 b2a:	98 2f       	mov	r25, r24
 b2c:	90 95       	com	r25
 b2e:	25 b3       	in	r18, 0x15	; 21
 b30:	92 23       	and	r25, r18
 b32:	95 bb       	out	0x15, r25	; 21
 b34:	94 b3       	in	r25, 0x14	; 20
 b36:	89 2b       	or	r24, r25
 b38:	84 bb       	out	0x14, r24	; 20
 b3a:	80 e0       	ldi	r24, 0x00	; 0
 b3c:	08 95       	ret
	break;
	case 3 :
	if		(1 == copy_PinMode) {SET_BIT(PORTD,PinNum);CLR_BIT(DDRD,PinNum); Return_val = PORT_Status_Ok;   }      //Setting Required Pin & Updating Status
 b3e:	61 30       	cpi	r22, 0x01	; 1
 b40:	81 f4       	brne	.+32     	; 0xb62 <PORT_enuSetPinMode+0x20c>
 b42:	81 e0       	ldi	r24, 0x01	; 1
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	02 c0       	rjmp	.+4      	; 0xb4c <PORT_enuSetPinMode+0x1f6>
 b48:	88 0f       	add	r24, r24
 b4a:	99 1f       	adc	r25, r25
 b4c:	2a 95       	dec	r18
 b4e:	e2 f7       	brpl	.-8      	; 0xb48 <PORT_enuSetPinMode+0x1f2>
 b50:	92 b3       	in	r25, 0x12	; 18
 b52:	98 2b       	or	r25, r24
 b54:	92 bb       	out	0x12, r25	; 18
 b56:	80 95       	com	r24
 b58:	91 b3       	in	r25, 0x11	; 17
 b5a:	89 23       	and	r24, r25
 b5c:	81 bb       	out	0x11, r24	; 17
 b5e:	80 e0       	ldi	r24, 0x00	; 0
 b60:	08 95       	ret
	else if (0 == copy_PinMode) {CLR_BIT(PORTD,PinNum);CLR_BIT(DDRD,PinNum); Return_val = PORT_Status_Ok;   }      //Clearing Required Pin & Updating Status
 b62:	61 11       	cpse	r22, r1
 b64:	10 c0       	rjmp	.+32     	; 0xb86 <PORT_enuSetPinMode+0x230>
 b66:	81 e0       	ldi	r24, 0x01	; 1
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	02 c0       	rjmp	.+4      	; 0xb70 <PORT_enuSetPinMode+0x21a>
 b6c:	88 0f       	add	r24, r24
 b6e:	99 1f       	adc	r25, r25
 b70:	2a 95       	dec	r18
 b72:	e2 f7       	brpl	.-8      	; 0xb6c <PORT_enuSetPinMode+0x216>
 b74:	80 95       	com	r24
 b76:	92 b3       	in	r25, 0x12	; 18
 b78:	98 23       	and	r25, r24
 b7a:	92 bb       	out	0x12, r25	; 18
 b7c:	91 b3       	in	r25, 0x11	; 17
 b7e:	89 23       	and	r24, r25
 b80:	81 bb       	out	0x11, r24	; 17
 b82:	80 e0       	ldi	r24, 0x00	; 0
 b84:	08 95       	ret
	else if (2 == copy_PinMode) {SET_BIT(PORTD,PinNum);SET_BIT(DDRD,PinNum); Return_val = PORT_Status_Ok;   }      //Setting Required Pin & Updating Status
 b86:	62 30       	cpi	r22, 0x02	; 2
 b88:	79 f4       	brne	.+30     	; 0xba8 <PORT_enuSetPinMode+0x252>
 b8a:	81 e0       	ldi	r24, 0x01	; 1
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	02 c0       	rjmp	.+4      	; 0xb94 <PORT_enuSetPinMode+0x23e>
 b90:	88 0f       	add	r24, r24
 b92:	99 1f       	adc	r25, r25
 b94:	2a 95       	dec	r18
 b96:	e2 f7       	brpl	.-8      	; 0xb90 <PORT_enuSetPinMode+0x23a>
 b98:	92 b3       	in	r25, 0x12	; 18
 b9a:	98 2b       	or	r25, r24
 b9c:	92 bb       	out	0x12, r25	; 18
 b9e:	91 b3       	in	r25, 0x11	; 17
 ba0:	89 2b       	or	r24, r25
 ba2:	81 bb       	out	0x11, r24	; 17
 ba4:	80 e0       	ldi	r24, 0x00	; 0
 ba6:	08 95       	ret
	else if (3 == copy_PinMode) {CLR_BIT(PORTD,PinNum);SET_BIT(DDRD,PinNum); Return_val = PORT_Status_Ok;   }      //Clearing Required Pin & Updating Status
 ba8:	63 30       	cpi	r22, 0x03	; 3
 baa:	81 f4       	brne	.+32     	; 0xbcc <PORT_enuSetPinMode+0x276>
 bac:	81 e0       	ldi	r24, 0x01	; 1
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <PORT_enuSetPinMode+0x260>
 bb2:	88 0f       	add	r24, r24
 bb4:	99 1f       	adc	r25, r25
 bb6:	2a 95       	dec	r18
 bb8:	e2 f7       	brpl	.-8      	; 0xbb2 <PORT_enuSetPinMode+0x25c>
 bba:	98 2f       	mov	r25, r24
 bbc:	90 95       	com	r25
 bbe:	22 b3       	in	r18, 0x12	; 18
 bc0:	92 23       	and	r25, r18
 bc2:	92 bb       	out	0x12, r25	; 18
 bc4:	91 b3       	in	r25, 0x11	; 17
 bc6:	89 2b       	or	r24, r25
 bc8:	81 bb       	out	0x11, r24	; 17
 bca:	80 e0       	ldi	r24, 0x00	; 0
}
return Return_val;

	
	
}
 bcc:	08 95       	ret

00000bce <PORT_enuSetPinDirection>:
PORT_enuErrorStatus PORT_enuSetPinDirection(u8 copy_PinNm,u8 copy_PinDirection){
	
	PORT_enuErrorStatus Return_val = PORT_Status_Fail; //initializing Return Status
	
	
	if(copy_PinNm>31) Return_val = PORT_Pin_NO_ERR;
 bce:	80 32       	cpi	r24, 0x20	; 32
 bd0:	08 f0       	brcs	.+2      	; 0xbd4 <PORT_enuSetPinDirection+0x6>
 bd2:	96 c0       	rjmp	.+300    	; 0xd00 <PORT_enuSetPinDirection+0x132>
	else if (copy_PinDirection>1) Return_val=PORT_Logic_Level_ERR;
 bd4:	62 30       	cpi	r22, 0x02	; 2
 bd6:	08 f0       	brcs	.+2      	; 0xbda <PORT_enuSetPinDirection+0xc>
 bd8:	95 c0       	rjmp	.+298    	; 0xd04 <PORT_enuSetPinDirection+0x136>
	else{
		u8 PortNum = copy_PinNm /8;   // Get Port Number
 bda:	98 2f       	mov	r25, r24
 bdc:	96 95       	lsr	r25
 bde:	96 95       	lsr	r25
 be0:	96 95       	lsr	r25
		u8 PinNum = copy_PinNm  % 8; // Get Pin Number
 be2:	87 70       	andi	r24, 0x07	; 7
		switch(PortNum){
 be4:	91 30       	cpi	r25, 0x01	; 1
 be6:	49 f1       	breq	.+82     	; 0xc3a <PORT_enuSetPinDirection+0x6c>
 be8:	38 f0       	brcs	.+14     	; 0xbf8 <PORT_enuSetPinDirection+0x2a>
 bea:	92 30       	cpi	r25, 0x02	; 2
 bec:	09 f4       	brne	.+2      	; 0xbf0 <PORT_enuSetPinDirection+0x22>
 bee:	46 c0       	rjmp	.+140    	; 0xc7c <PORT_enuSetPinDirection+0xae>
 bf0:	93 30       	cpi	r25, 0x03	; 3
 bf2:	09 f4       	brne	.+2      	; 0xbf6 <PORT_enuSetPinDirection+0x28>
 bf4:	64 c0       	rjmp	.+200    	; 0xcbe <PORT_enuSetPinDirection+0xf0>
 bf6:	88 c0       	rjmp	.+272    	; 0xd08 <PORT_enuSetPinDirection+0x13a>
			
			case 0 :
				if		(1 == copy_PinDirection) {SET_BIT(DDRA,PinNum); Return_val = PORT_Status_Ok;  }    //Setting Required Pin & Updating Status
 bf8:	61 30       	cpi	r22, 0x01	; 1
 bfa:	71 f4       	brne	.+28     	; 0xc18 <PORT_enuSetPinDirection+0x4a>
 bfc:	21 e0       	ldi	r18, 0x01	; 1
 bfe:	30 e0       	ldi	r19, 0x00	; 0
 c00:	a9 01       	movw	r20, r18
 c02:	02 c0       	rjmp	.+4      	; 0xc08 <PORT_enuSetPinDirection+0x3a>
 c04:	44 0f       	add	r20, r20
 c06:	55 1f       	adc	r21, r21
 c08:	8a 95       	dec	r24
 c0a:	e2 f7       	brpl	.-8      	; 0xc04 <PORT_enuSetPinDirection+0x36>
 c0c:	ca 01       	movw	r24, r20
 c0e:	9a b3       	in	r25, 0x1a	; 26
 c10:	89 2b       	or	r24, r25
 c12:	8a bb       	out	0x1a, r24	; 26
 c14:	80 e0       	ldi	r24, 0x00	; 0
 c16:	08 95       	ret
				else if (0 == copy_PinDirection) {CLR_BIT(DDRA,PinNum); Return_val = PORT_Status_Ok;   }    //Clearing Required Pin & Updating Status		                         
 c18:	61 11       	cpse	r22, r1
 c1a:	78 c0       	rjmp	.+240    	; 0xd0c <PORT_enuSetPinDirection+0x13e>
 c1c:	21 e0       	ldi	r18, 0x01	; 1
 c1e:	30 e0       	ldi	r19, 0x00	; 0
 c20:	a9 01       	movw	r20, r18
 c22:	02 c0       	rjmp	.+4      	; 0xc28 <PORT_enuSetPinDirection+0x5a>
 c24:	44 0f       	add	r20, r20
 c26:	55 1f       	adc	r21, r21
 c28:	8a 95       	dec	r24
 c2a:	e2 f7       	brpl	.-8      	; 0xc24 <PORT_enuSetPinDirection+0x56>
 c2c:	ca 01       	movw	r24, r20
 c2e:	80 95       	com	r24
 c30:	9a b3       	in	r25, 0x1a	; 26
 c32:	89 23       	and	r24, r25
 c34:	8a bb       	out	0x1a, r24	; 26
 c36:	80 e0       	ldi	r24, 0x00	; 0
 c38:	08 95       	ret
			break;
			case 1 :
				if      (1 == copy_PinDirection) {SET_BIT(DDRB,PinNum); Return_val = PORT_Status_Ok;}
 c3a:	61 30       	cpi	r22, 0x01	; 1
 c3c:	71 f4       	brne	.+28     	; 0xc5a <PORT_enuSetPinDirection+0x8c>
 c3e:	21 e0       	ldi	r18, 0x01	; 1
 c40:	30 e0       	ldi	r19, 0x00	; 0
 c42:	a9 01       	movw	r20, r18
 c44:	02 c0       	rjmp	.+4      	; 0xc4a <PORT_enuSetPinDirection+0x7c>
 c46:	44 0f       	add	r20, r20
 c48:	55 1f       	adc	r21, r21
 c4a:	8a 95       	dec	r24
 c4c:	e2 f7       	brpl	.-8      	; 0xc46 <PORT_enuSetPinDirection+0x78>
 c4e:	ca 01       	movw	r24, r20
 c50:	97 b3       	in	r25, 0x17	; 23
 c52:	89 2b       	or	r24, r25
 c54:	87 bb       	out	0x17, r24	; 23
 c56:	80 e0       	ldi	r24, 0x00	; 0
 c58:	08 95       	ret
				else if (0 == copy_PinDirection) {CLR_BIT(DDRB,PinNum); Return_val = PORT_Status_Ok;}
 c5a:	61 11       	cpse	r22, r1
 c5c:	59 c0       	rjmp	.+178    	; 0xd10 <PORT_enuSetPinDirection+0x142>
 c5e:	21 e0       	ldi	r18, 0x01	; 1
 c60:	30 e0       	ldi	r19, 0x00	; 0
 c62:	a9 01       	movw	r20, r18
 c64:	02 c0       	rjmp	.+4      	; 0xc6a <PORT_enuSetPinDirection+0x9c>
 c66:	44 0f       	add	r20, r20
 c68:	55 1f       	adc	r21, r21
 c6a:	8a 95       	dec	r24
 c6c:	e2 f7       	brpl	.-8      	; 0xc66 <PORT_enuSetPinDirection+0x98>
 c6e:	ca 01       	movw	r24, r20
 c70:	80 95       	com	r24
 c72:	97 b3       	in	r25, 0x17	; 23
 c74:	89 23       	and	r24, r25
 c76:	87 bb       	out	0x17, r24	; 23
 c78:	80 e0       	ldi	r24, 0x00	; 0
 c7a:	08 95       	ret
			break;
			case 2 :
				if      (1 == copy_PinDirection) {SET_BIT(DDRC,PinNum); Return_val = PORT_Status_Ok;}
 c7c:	61 30       	cpi	r22, 0x01	; 1
 c7e:	71 f4       	brne	.+28     	; 0xc9c <PORT_enuSetPinDirection+0xce>
 c80:	21 e0       	ldi	r18, 0x01	; 1
 c82:	30 e0       	ldi	r19, 0x00	; 0
 c84:	a9 01       	movw	r20, r18
 c86:	02 c0       	rjmp	.+4      	; 0xc8c <PORT_enuSetPinDirection+0xbe>
 c88:	44 0f       	add	r20, r20
 c8a:	55 1f       	adc	r21, r21
 c8c:	8a 95       	dec	r24
 c8e:	e2 f7       	brpl	.-8      	; 0xc88 <PORT_enuSetPinDirection+0xba>
 c90:	ca 01       	movw	r24, r20
 c92:	94 b3       	in	r25, 0x14	; 20
 c94:	89 2b       	or	r24, r25
 c96:	84 bb       	out	0x14, r24	; 20
 c98:	80 e0       	ldi	r24, 0x00	; 0
 c9a:	08 95       	ret
				else if (0 == copy_PinDirection) {CLR_BIT(DDRC,PinNum); Return_val = PORT_Status_Ok;}
 c9c:	61 11       	cpse	r22, r1
 c9e:	3a c0       	rjmp	.+116    	; 0xd14 <PORT_enuSetPinDirection+0x146>
 ca0:	21 e0       	ldi	r18, 0x01	; 1
 ca2:	30 e0       	ldi	r19, 0x00	; 0
 ca4:	a9 01       	movw	r20, r18
 ca6:	02 c0       	rjmp	.+4      	; 0xcac <PORT_enuSetPinDirection+0xde>
 ca8:	44 0f       	add	r20, r20
 caa:	55 1f       	adc	r21, r21
 cac:	8a 95       	dec	r24
 cae:	e2 f7       	brpl	.-8      	; 0xca8 <PORT_enuSetPinDirection+0xda>
 cb0:	ca 01       	movw	r24, r20
 cb2:	80 95       	com	r24
 cb4:	94 b3       	in	r25, 0x14	; 20
 cb6:	89 23       	and	r24, r25
 cb8:	84 bb       	out	0x14, r24	; 20
 cba:	80 e0       	ldi	r24, 0x00	; 0
 cbc:	08 95       	ret
			break;
			case 3 :
				if		(1 == copy_PinDirection) {SET_BIT(DDRD,PinNum); Return_val = PORT_Status_Ok;}
 cbe:	61 30       	cpi	r22, 0x01	; 1
 cc0:	71 f4       	brne	.+28     	; 0xcde <PORT_enuSetPinDirection+0x110>
 cc2:	21 e0       	ldi	r18, 0x01	; 1
 cc4:	30 e0       	ldi	r19, 0x00	; 0
 cc6:	a9 01       	movw	r20, r18
 cc8:	02 c0       	rjmp	.+4      	; 0xcce <PORT_enuSetPinDirection+0x100>
 cca:	44 0f       	add	r20, r20
 ccc:	55 1f       	adc	r21, r21
 cce:	8a 95       	dec	r24
 cd0:	e2 f7       	brpl	.-8      	; 0xcca <PORT_enuSetPinDirection+0xfc>
 cd2:	ca 01       	movw	r24, r20
 cd4:	91 b3       	in	r25, 0x11	; 17
 cd6:	89 2b       	or	r24, r25
 cd8:	81 bb       	out	0x11, r24	; 17
 cda:	80 e0       	ldi	r24, 0x00	; 0
 cdc:	08 95       	ret
				else if (0 == copy_PinDirection) {CLR_BIT(DDRD,PinNum); Return_val = PORT_Status_Ok;}
 cde:	61 11       	cpse	r22, r1
 ce0:	1b c0       	rjmp	.+54     	; 0xd18 <PORT_enuSetPinDirection+0x14a>
 ce2:	21 e0       	ldi	r18, 0x01	; 1
 ce4:	30 e0       	ldi	r19, 0x00	; 0
 ce6:	a9 01       	movw	r20, r18
 ce8:	02 c0       	rjmp	.+4      	; 0xcee <PORT_enuSetPinDirection+0x120>
 cea:	44 0f       	add	r20, r20
 cec:	55 1f       	adc	r21, r21
 cee:	8a 95       	dec	r24
 cf0:	e2 f7       	brpl	.-8      	; 0xcea <PORT_enuSetPinDirection+0x11c>
 cf2:	ca 01       	movw	r24, r20
 cf4:	80 95       	com	r24
 cf6:	91 b3       	in	r25, 0x11	; 17
 cf8:	89 23       	and	r24, r25
 cfa:	81 bb       	out	0x11, r24	; 17
 cfc:	80 e0       	ldi	r24, 0x00	; 0
 cfe:	08 95       	ret
PORT_enuErrorStatus PORT_enuSetPinDirection(u8 copy_PinNm,u8 copy_PinDirection){
	
	PORT_enuErrorStatus Return_val = PORT_Status_Fail; //initializing Return Status
	
	
	if(copy_PinNm>31) Return_val = PORT_Pin_NO_ERR;
 d00:	82 e0       	ldi	r24, 0x02	; 2
 d02:	08 95       	ret
	else if (copy_PinDirection>1) Return_val=PORT_Logic_Level_ERR;
 d04:	84 e0       	ldi	r24, 0x04	; 4
 d06:	08 95       	ret
			case 3 :
				if		(1 == copy_PinDirection) {SET_BIT(DDRD,PinNum); Return_val = PORT_Status_Ok;}
				else if (0 == copy_PinDirection) {CLR_BIT(DDRD,PinNum); Return_val = PORT_Status_Ok;}
			break;
			default:  
			Return_val = PORT_NO_ERR;
 d08:	83 e0       	ldi	r24, 0x03	; 3
 d0a:	08 95       	ret
	
}

PORT_enuErrorStatus PORT_enuSetPinDirection(u8 copy_PinNm,u8 copy_PinDirection){
	
	PORT_enuErrorStatus Return_val = PORT_Status_Fail; //initializing Return Status
 d0c:	81 e0       	ldi	r24, 0x01	; 1
 d0e:	08 95       	ret
 d10:	81 e0       	ldi	r24, 0x01	; 1
 d12:	08 95       	ret
 d14:	81 e0       	ldi	r24, 0x01	; 1
 d16:	08 95       	ret
 d18:	81 e0       	ldi	r24, 0x01	; 1
		}
				}
		return Return_val;
	
	
}
 d1a:	08 95       	ret

00000d1c <__vector_12>:
	*Add_pu8ReciveStr = '\0';
}


void __vector_12(void) __attribute__((signal));
void __vector_12(void){
 d1c:	1f 92       	push	r1
 d1e:	0f 92       	push	r0
 d20:	0f b6       	in	r0, 0x3f	; 63
 d22:	0f 92       	push	r0
 d24:	11 24       	eor	r1, r1
 d26:	8f 93       	push	r24
	Global_u8DataToRecive = SPDR;
 d28:	8f b1       	in	r24, 0x0f	; 15
 d2a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <Global_u8DataToRecive>
}
 d2e:	8f 91       	pop	r24
 d30:	0f 90       	pop	r0
 d32:	0f be       	out	0x3f, r0	; 63
 d34:	0f 90       	pop	r0
 d36:	1f 90       	pop	r1
 d38:	18 95       	reti

00000d3a <_exit>:
 d3a:	f8 94       	cli

00000d3c <__stop_program>:
 d3c:	ff cf       	rjmp	.-2      	; 0xd3c <__stop_program>
