
ADC_Volume.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  000005f8  0000068c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000b8  008000b8  000006e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001837  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a0  00000000  00000000  000020d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f08  00000000  00000000  00002a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00003980  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f5  00000000  00000000  00003c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a53  00000000  00000000  00004429  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005e7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3b       	cpi	r26, 0xB8	; 184
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 eb       	ldi	r26, 0xB8	; 184
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3b       	cpi	r26, 0xBA	; 186
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8c 02 	call	0x518	; 0x518 <main>
  8a:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidInit>:
}


void ADC_InterruptDisable()
{
	CLR_BIT(ADCSRA,ADIE);
  92:	97 b1       	in	r25, 0x07	; 7
  94:	9f 73       	andi	r25, 0x3F	; 63
  96:	97 b9       	out	0x07, r25	; 7
  98:	27 b1       	in	r18, 0x07	; 7
  9a:	30 e4       	ldi	r19, 0x40	; 64
  9c:	83 9f       	mul	r24, r19
  9e:	c0 01       	movw	r24, r0
  a0:	11 24       	eor	r1, r1
  a2:	82 2b       	or	r24, r18
  a4:	87 b9       	out	0x07, r24	; 7
  a6:	86 b1       	in	r24, 0x06	; 6
  a8:	88 7f       	andi	r24, 0xF8	; 248
  aa:	86 b9       	out	0x06, r24	; 6
  ac:	86 b1       	in	r24, 0x06	; 6
  ae:	68 2b       	or	r22, r24
  b0:	66 b9       	out	0x06, r22	; 6
  b2:	08 95       	ret

000000b4 <ADC_Enable>:
  b4:	86 b1       	in	r24, 0x06	; 6
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	86 b9       	out	0x06, r24	; 6
  ba:	08 95       	ret

000000bc <ADC_voidReadPolling>:
  bc:	97 b1       	in	r25, 0x07	; 7
  be:	90 7e       	andi	r25, 0xE0	; 224
  c0:	97 b9       	out	0x07, r25	; 7
  c2:	97 b1       	in	r25, 0x07	; 7
  c4:	89 2b       	or	r24, r25
  c6:	87 b9       	out	0x07, r24	; 7
  c8:	86 b1       	in	r24, 0x06	; 6
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	86 b9       	out	0x06, r24	; 6
  ce:	36 99       	sbic	0x06, 6	; 6
  d0:	fe cf       	rjmp	.-4      	; 0xce <ADC_voidReadPolling+0x12>
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	95 b1       	in	r25, 0x05	; 5
  d6:	fb 01       	movw	r30, r22
  d8:	91 83       	std	Z+1, r25	; 0x01
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <__vector_16>:
}



ISR(ADC_vect)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	3f 93       	push	r19
  ec:	4f 93       	push	r20
  ee:	5f 93       	push	r21
  f0:	6f 93       	push	r22
  f2:	7f 93       	push	r23
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	af 93       	push	r26
  fa:	bf 93       	push	r27
  fc:	ef 93       	push	r30
  fe:	ff 93       	push	r31
	FptrG();
 100:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <__data_end>
 104:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <__data_end+0x1>
 108:	09 95       	icall
}
 10a:	ff 91       	pop	r31
 10c:	ef 91       	pop	r30
 10e:	bf 91       	pop	r27
 110:	af 91       	pop	r26
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	7f 91       	pop	r23
 118:	6f 91       	pop	r22
 11a:	5f 91       	pop	r21
 11c:	4f 91       	pop	r20
 11e:	3f 91       	pop	r19
 120:	2f 91       	pop	r18
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <Dio_enuWriteChannel>:

	u8 LOC_u8Port;

	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {
 12c:	80 32       	cpi	r24, 0x20	; 32
 12e:	08 f0       	brcs	.+2      	; 0x132 <Dio_enuWriteChannel+0x6>
 130:	c1 c0       	rjmp	.+386    	; 0x2b4 <Dio_enuWriteChannel+0x188>

		LOC_enuReturnStatus = Dio_enuChannelError;
	}

	else if (Copy_u8Level > DIO_u8NUMBER_OF_LEVELS) {
 132:	63 30       	cpi	r22, 0x03	; 3
 134:	08 f0       	brcs	.+2      	; 0x138 <Dio_enuWriteChannel+0xc>
 136:	c0 c0       	rjmp	.+384    	; 0x2b8 <Dio_enuWriteChannel+0x18c>
		LOC_enuReturnStatus = Dio_enuLevelError;
	}

	else {

		LOC_u8Port = Copy_u8ChannelId / DIO_u8REGISTER_SIZE;
 138:	98 2f       	mov	r25, r24
 13a:	96 95       	lsr	r25
 13c:	96 95       	lsr	r25
 13e:	96 95       	lsr	r25
		LOC_u8Pin = Copy_u8ChannelId % DIO_u8REGISTER_SIZE;
 140:	87 70       	andi	r24, 0x07	; 7

		switch (LOC_u8Port) {
 142:	91 30       	cpi	r25, 0x01	; 1
 144:	a1 f1       	breq	.+104    	; 0x1ae <Dio_enuWriteChannel+0x82>
 146:	38 f0       	brcs	.+14     	; 0x156 <Dio_enuWriteChannel+0x2a>
 148:	92 30       	cpi	r25, 0x02	; 2
 14a:	09 f4       	brne	.+2      	; 0x14e <Dio_enuWriteChannel+0x22>
 14c:	5c c0       	rjmp	.+184    	; 0x206 <Dio_enuWriteChannel+0xda>
 14e:	93 30       	cpi	r25, 0x03	; 3
 150:	09 f4       	brne	.+2      	; 0x154 <Dio_enuWriteChannel+0x28>
 152:	85 c0       	rjmp	.+266    	; 0x25e <Dio_enuWriteChannel+0x132>
 154:	b3 c0       	rjmp	.+358    	; 0x2bc <Dio_enuWriteChannel+0x190>

		case DIO_u8PORTA:
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
 156:	2a b3       	in	r18, 0x1a	; 26
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	08 2e       	mov	r0, r24
 15c:	02 c0       	rjmp	.+4      	; 0x162 <Dio_enuWriteChannel+0x36>
 15e:	35 95       	asr	r19
 160:	27 95       	ror	r18
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <Dio_enuWriteChannel+0x32>
 166:	20 ff       	sbrs	r18, 0
 168:	ab c0       	rjmp	.+342    	; 0x2c0 <Dio_enuWriteChannel+0x194>
				switch (Copy_u8Level) {
 16a:	66 23       	and	r22, r22
 16c:	89 f0       	breq	.+34     	; 0x190 <Dio_enuWriteChannel+0x64>
 16e:	61 30       	cpi	r22, 0x01	; 1
 170:	09 f0       	breq	.+2      	; 0x174 <Dio_enuWriteChannel+0x48>
 172:	a8 c0       	rjmp	.+336    	; 0x2c4 <Dio_enuWriteChannel+0x198>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTA, LOC_u8Pin);
 174:	4b b3       	in	r20, 0x1b	; 27
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	b9 01       	movw	r22, r18
 17c:	02 c0       	rjmp	.+4      	; 0x182 <Dio_enuWriteChannel+0x56>
 17e:	66 0f       	add	r22, r22
 180:	77 1f       	adc	r23, r23
 182:	8a 95       	dec	r24
 184:	e2 f7       	brpl	.-8      	; 0x17e <Dio_enuWriteChannel+0x52>
 186:	cb 01       	movw	r24, r22
 188:	84 2b       	or	r24, r20
 18a:	8b bb       	out	0x1b, r24	; 27
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 18c:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTA, LOC_u8Pin);
					break;
 18e:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTA, LOC_u8Pin);
 190:	4b b3       	in	r20, 0x1b	; 27
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	b9 01       	movw	r22, r18
 198:	02 c0       	rjmp	.+4      	; 0x19e <Dio_enuWriteChannel+0x72>
 19a:	66 0f       	add	r22, r22
 19c:	77 1f       	adc	r23, r23
 19e:	8a 95       	dec	r24
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <Dio_enuWriteChannel+0x6e>
 1a2:	cb 01       	movw	r24, r22
 1a4:	80 95       	com	r24
 1a6:	84 23       	and	r24, r20
 1a8:	8b bb       	out	0x1b, r24	; 27
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTA, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTA, LOC_u8Pin);
					break;
 1ac:	08 95       	ret
			}
			break;

		case DIO_u8PORTB:

			if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
 1ae:	27 b3       	in	r18, 0x17	; 23
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	08 2e       	mov	r0, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <Dio_enuWriteChannel+0x8e>
 1b6:	35 95       	asr	r19
 1b8:	27 95       	ror	r18
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <Dio_enuWriteChannel+0x8a>
 1be:	20 ff       	sbrs	r18, 0
 1c0:	83 c0       	rjmp	.+262    	; 0x2c8 <Dio_enuWriteChannel+0x19c>
				switch (Copy_u8Level) {
 1c2:	66 23       	and	r22, r22
 1c4:	89 f0       	breq	.+34     	; 0x1e8 <Dio_enuWriteChannel+0xbc>
 1c6:	61 30       	cpi	r22, 0x01	; 1
 1c8:	09 f0       	breq	.+2      	; 0x1cc <Dio_enuWriteChannel+0xa0>
 1ca:	80 c0       	rjmp	.+256    	; 0x2cc <Dio_enuWriteChannel+0x1a0>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTB, LOC_u8Pin);
 1cc:	48 b3       	in	r20, 0x18	; 24
 1ce:	21 e0       	ldi	r18, 0x01	; 1
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	b9 01       	movw	r22, r18
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <Dio_enuWriteChannel+0xae>
 1d6:	66 0f       	add	r22, r22
 1d8:	77 1f       	adc	r23, r23
 1da:	8a 95       	dec	r24
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <Dio_enuWriteChannel+0xaa>
 1de:	cb 01       	movw	r24, r22
 1e0:	84 2b       	or	r24, r20
 1e2:	88 bb       	out	0x18, r24	; 24
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 1e4:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTB, LOC_u8Pin);
					break;
 1e6:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTB, LOC_u8Pin);
 1e8:	48 b3       	in	r20, 0x18	; 24
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	b9 01       	movw	r22, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <Dio_enuWriteChannel+0xca>
 1f2:	66 0f       	add	r22, r22
 1f4:	77 1f       	adc	r23, r23
 1f6:	8a 95       	dec	r24
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <Dio_enuWriteChannel+0xc6>
 1fa:	cb 01       	movw	r24, r22
 1fc:	80 95       	com	r24
 1fe:	84 23       	and	r24, r20
 200:	88 bb       	out	0x18, r24	; 24
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 202:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTB, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTB, LOC_u8Pin);
					break;
 204:	08 95       	ret

			break;

		case DIO_u8PORTC:

			if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
 206:	24 b3       	in	r18, 0x14	; 20
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	08 2e       	mov	r0, r24
 20c:	02 c0       	rjmp	.+4      	; 0x212 <Dio_enuWriteChannel+0xe6>
 20e:	35 95       	asr	r19
 210:	27 95       	ror	r18
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <Dio_enuWriteChannel+0xe2>
 216:	20 ff       	sbrs	r18, 0
 218:	5b c0       	rjmp	.+182    	; 0x2d0 <Dio_enuWriteChannel+0x1a4>
				switch (Copy_u8Level) {
 21a:	66 23       	and	r22, r22
 21c:	89 f0       	breq	.+34     	; 0x240 <Dio_enuWriteChannel+0x114>
 21e:	61 30       	cpi	r22, 0x01	; 1
 220:	09 f0       	breq	.+2      	; 0x224 <Dio_enuWriteChannel+0xf8>
 222:	58 c0       	rjmp	.+176    	; 0x2d4 <Dio_enuWriteChannel+0x1a8>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTC, LOC_u8Pin);
 224:	45 b3       	in	r20, 0x15	; 21
 226:	21 e0       	ldi	r18, 0x01	; 1
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	b9 01       	movw	r22, r18
 22c:	02 c0       	rjmp	.+4      	; 0x232 <Dio_enuWriteChannel+0x106>
 22e:	66 0f       	add	r22, r22
 230:	77 1f       	adc	r23, r23
 232:	8a 95       	dec	r24
 234:	e2 f7       	brpl	.-8      	; 0x22e <Dio_enuWriteChannel+0x102>
 236:	cb 01       	movw	r24, r22
 238:	84 2b       	or	r24, r20
 23a:	85 bb       	out	0x15, r24	; 21
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 23c:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTC, LOC_u8Pin);
					break;
 23e:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTC, LOC_u8Pin);
 240:	45 b3       	in	r20, 0x15	; 21
 242:	21 e0       	ldi	r18, 0x01	; 1
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	b9 01       	movw	r22, r18
 248:	02 c0       	rjmp	.+4      	; 0x24e <Dio_enuWriteChannel+0x122>
 24a:	66 0f       	add	r22, r22
 24c:	77 1f       	adc	r23, r23
 24e:	8a 95       	dec	r24
 250:	e2 f7       	brpl	.-8      	; 0x24a <Dio_enuWriteChannel+0x11e>
 252:	cb 01       	movw	r24, r22
 254:	80 95       	com	r24
 256:	84 23       	and	r24, r20
 258:	85 bb       	out	0x15, r24	; 21
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 25a:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTC, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTC, LOC_u8Pin);
					break;
 25c:	08 95       	ret
			}
			break;

		case DIO_u8PORTD:

			if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
 25e:	21 b3       	in	r18, 0x11	; 17
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	08 2e       	mov	r0, r24
 264:	02 c0       	rjmp	.+4      	; 0x26a <Dio_enuWriteChannel+0x13e>
 266:	35 95       	asr	r19
 268:	27 95       	ror	r18
 26a:	0a 94       	dec	r0
 26c:	e2 f7       	brpl	.-8      	; 0x266 <Dio_enuWriteChannel+0x13a>
 26e:	20 ff       	sbrs	r18, 0
 270:	33 c0       	rjmp	.+102    	; 0x2d8 <Dio_enuWriteChannel+0x1ac>
				switch (Copy_u8Level) {
 272:	66 23       	and	r22, r22
 274:	81 f0       	breq	.+32     	; 0x296 <Dio_enuWriteChannel+0x16a>
 276:	61 30       	cpi	r22, 0x01	; 1
 278:	89 f5       	brne	.+98     	; 0x2dc <Dio_enuWriteChannel+0x1b0>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTD, LOC_u8Pin);
 27a:	42 b3       	in	r20, 0x12	; 18
 27c:	21 e0       	ldi	r18, 0x01	; 1
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	b9 01       	movw	r22, r18
 282:	02 c0       	rjmp	.+4      	; 0x288 <Dio_enuWriteChannel+0x15c>
 284:	66 0f       	add	r22, r22
 286:	77 1f       	adc	r23, r23
 288:	8a 95       	dec	r24
 28a:	e2 f7       	brpl	.-8      	; 0x284 <Dio_enuWriteChannel+0x158>
 28c:	cb 01       	movw	r24, r22
 28e:	84 2b       	or	r24, r20
 290:	82 bb       	out	0x12, r24	; 18
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 292:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTD, LOC_u8Pin);
					break;
 294:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTD, LOC_u8Pin);
 296:	42 b3       	in	r20, 0x12	; 18
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	b9 01       	movw	r22, r18
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <Dio_enuWriteChannel+0x178>
 2a0:	66 0f       	add	r22, r22
 2a2:	77 1f       	adc	r23, r23
 2a4:	8a 95       	dec	r24
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <Dio_enuWriteChannel+0x174>
 2a8:	cb 01       	movw	r24, r22
 2aa:	80 95       	com	r24
 2ac:	84 23       	and	r24, r20
 2ae:	82 bb       	out	0x12, r24	; 18
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2b0:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTD, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTD, LOC_u8Pin);
					break;
 2b2:	08 95       	ret

	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {

		LOC_enuReturnStatus = Dio_enuChannelError;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	08 95       	ret
	}

	else if (Copy_u8Level > DIO_u8NUMBER_OF_LEVELS) {

		LOC_enuReturnStatus = Dio_enuLevelError;
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	08 95       	ret
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	08 95       	ret
					CLR_BIT(PORTA, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 2c0:	83 e0       	ldi	r24, 0x03	; 3
 2c2:	08 95       	ret
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	08 95       	ret
					CLR_BIT(PORTB, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	08 95       	ret
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	08 95       	ret
					CLR_BIT(PORTC, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 2d0:	83 e0       	ldi	r24, 0x03	; 3
 2d2:	08 95       	ret
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	08 95       	ret
					CLR_BIT(PORTD, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	08 95       	ret
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2dc:	80 e0       	ldi	r24, 0x00	; 0

		}

	}
	return LOC_enuReturnStatus;
}
 2de:	08 95       	ret

000002e0 <LCD_voidSendCommand>:
	
	for (j=i-1;j>=0;j--)
	{
		LCD_voidDisplayChar(str[j]);
	}
}
 2e0:	cf 93       	push	r28
 2e2:	c8 2f       	mov	r28, r24
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 2ec:	6c 2f       	mov	r22, r28
 2ee:	66 1f       	adc	r22, r22
 2f0:	66 27       	eor	r22, r22
 2f2:	66 1f       	adc	r22, r22
 2f4:	8c e0       	ldi	r24, 0x0C	; 12
 2f6:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 2fa:	c6 fb       	bst	r28, 6
 2fc:	66 27       	eor	r22, r22
 2fe:	60 f9       	bld	r22, 0
 300:	8a e0       	ldi	r24, 0x0A	; 10
 302:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 306:	c5 fb       	bst	r28, 5
 308:	66 27       	eor	r22, r22
 30a:	60 f9       	bld	r22, 0
 30c:	89 e0       	ldi	r24, 0x09	; 9
 30e:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 312:	c4 fb       	bst	r28, 4
 314:	66 27       	eor	r22, r22
 316:	60 f9       	bld	r22, 0
 318:	88 e0       	ldi	r24, 0x08	; 8
 31a:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 31e:	61 e0       	ldi	r22, 0x01	; 1
 320:	82 e0       	ldi	r24, 0x02	; 2
 322:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 326:	8f e9       	ldi	r24, 0x9F	; 159
 328:	9f e0       	ldi	r25, 0x0F	; 15
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <LCD_voidSendCommand+0x4a>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_voidSendCommand+0x50>
 330:	00 00       	nop
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 33a:	8f e9       	ldi	r24, 0x9F	; 159
 33c:	9f e0       	ldi	r25, 0x0F	; 15
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <LCD_voidSendCommand+0x5e>
 342:	00 c0       	rjmp	.+0      	; 0x344 <LCD_voidSendCommand+0x64>
 344:	00 00       	nop
 346:	c3 fb       	bst	r28, 3
 348:	66 27       	eor	r22, r22
 34a:	60 f9       	bld	r22, 0
 34c:	8c e0       	ldi	r24, 0x0C	; 12
 34e:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 352:	c2 fb       	bst	r28, 2
 354:	66 27       	eor	r22, r22
 356:	60 f9       	bld	r22, 0
 358:	8a e0       	ldi	r24, 0x0A	; 10
 35a:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 35e:	c1 fb       	bst	r28, 1
 360:	66 27       	eor	r22, r22
 362:	60 f9       	bld	r22, 0
 364:	89 e0       	ldi	r24, 0x09	; 9
 366:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 36a:	6c 2f       	mov	r22, r28
 36c:	61 70       	andi	r22, 0x01	; 1
 36e:	88 e0       	ldi	r24, 0x08	; 8
 370:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 37c:	8f e9       	ldi	r24, 0x9F	; 159
 37e:	9f e0       	ldi	r25, 0x0F	; 15
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <LCD_voidSendCommand+0xa0>
 384:	00 c0       	rjmp	.+0      	; 0x386 <LCD_voidSendCommand+0xa6>
 386:	00 00       	nop
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 390:	8f e9       	ldi	r24, 0x9F	; 159
 392:	9f e0       	ldi	r25, 0x0F	; 15
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <LCD_voidSendCommand+0xb4>
 398:	00 c0       	rjmp	.+0      	; 0x39a <LCD_voidSendCommand+0xba>
 39a:	00 00       	nop
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <LCD_voidSendData>:
 3a0:	cf 93       	push	r28
 3a2:	c8 2f       	mov	r28, r24
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	83 e0       	ldi	r24, 0x03	; 3
 3a8:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 3ac:	6c 2f       	mov	r22, r28
 3ae:	66 1f       	adc	r22, r22
 3b0:	66 27       	eor	r22, r22
 3b2:	66 1f       	adc	r22, r22
 3b4:	8c e0       	ldi	r24, 0x0C	; 12
 3b6:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 3ba:	c6 fb       	bst	r28, 6
 3bc:	66 27       	eor	r22, r22
 3be:	60 f9       	bld	r22, 0
 3c0:	8a e0       	ldi	r24, 0x0A	; 10
 3c2:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 3c6:	c5 fb       	bst	r28, 5
 3c8:	66 27       	eor	r22, r22
 3ca:	60 f9       	bld	r22, 0
 3cc:	89 e0       	ldi	r24, 0x09	; 9
 3ce:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 3d2:	c4 fb       	bst	r28, 4
 3d4:	66 27       	eor	r22, r22
 3d6:	60 f9       	bld	r22, 0
 3d8:	88 e0       	ldi	r24, 0x08	; 8
 3da:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 3de:	61 e0       	ldi	r22, 0x01	; 1
 3e0:	82 e0       	ldi	r24, 0x02	; 2
 3e2:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 3e6:	8f e9       	ldi	r24, 0x9F	; 159
 3e8:	9f e0       	ldi	r25, 0x0F	; 15
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <LCD_voidSendData+0x4a>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <LCD_voidSendData+0x50>
 3f0:	00 00       	nop
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 3fa:	8f e9       	ldi	r24, 0x9F	; 159
 3fc:	9f e0       	ldi	r25, 0x0F	; 15
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <LCD_voidSendData+0x5e>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 404:	00 00       	nop
 406:	c3 fb       	bst	r28, 3
 408:	66 27       	eor	r22, r22
 40a:	60 f9       	bld	r22, 0
 40c:	8c e0       	ldi	r24, 0x0C	; 12
 40e:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 412:	c2 fb       	bst	r28, 2
 414:	66 27       	eor	r22, r22
 416:	60 f9       	bld	r22, 0
 418:	8a e0       	ldi	r24, 0x0A	; 10
 41a:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 41e:	c1 fb       	bst	r28, 1
 420:	66 27       	eor	r22, r22
 422:	60 f9       	bld	r22, 0
 424:	89 e0       	ldi	r24, 0x09	; 9
 426:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 42a:	6c 2f       	mov	r22, r28
 42c:	61 70       	andi	r22, 0x01	; 1
 42e:	88 e0       	ldi	r24, 0x08	; 8
 430:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 434:	61 e0       	ldi	r22, 0x01	; 1
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 43c:	8f e9       	ldi	r24, 0x9F	; 159
 43e:	9f e0       	ldi	r25, 0x0F	; 15
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 446:	00 00       	nop
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 450:	8f e9       	ldi	r24, 0x9F	; 159
 452:	9f e0       	ldi	r25, 0x0F	; 15
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 458:	00 c0       	rjmp	.+0      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 45a:	00 00       	nop
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <LCD_voidInit>:
 460:	2f ef       	ldi	r18, 0xFF	; 255
 462:	80 e7       	ldi	r24, 0x70	; 112
 464:	92 e0       	ldi	r25, 0x02	; 2
 466:	21 50       	subi	r18, 0x01	; 1
 468:	80 40       	sbci	r24, 0x00	; 0
 46a:	90 40       	sbci	r25, 0x00	; 0
 46c:	e1 f7       	brne	.-8      	; 0x466 <LCD_voidInit+0x6>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <LCD_voidInit+0x10>
 470:	00 00       	nop
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_voidSendCommand>
 478:	88 e2       	ldi	r24, 0x28	; 40
 47a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_voidSendCommand>
 47e:	8f e9       	ldi	r24, 0x9F	; 159
 480:	9f e0       	ldi	r25, 0x0F	; 15
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <LCD_voidInit+0x22>
 486:	00 c0       	rjmp	.+0      	; 0x488 <LCD_voidInit+0x28>
 488:	00 00       	nop
 48a:	8c e0       	ldi	r24, 0x0C	; 12
 48c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_voidSendCommand>
 490:	8f e9       	ldi	r24, 0x9F	; 159
 492:	9f e0       	ldi	r25, 0x0F	; 15
 494:	01 97       	sbiw	r24, 0x01	; 1
 496:	f1 f7       	brne	.-4      	; 0x494 <LCD_voidInit+0x34>
 498:	00 c0       	rjmp	.+0      	; 0x49a <LCD_voidInit+0x3a>
 49a:	00 00       	nop
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_voidSendCommand>
 4a2:	8f e3       	ldi	r24, 0x3F	; 63
 4a4:	9f e1       	ldi	r25, 0x1F	; 31
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <LCD_voidInit+0x46>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <LCD_voidInit+0x4c>
 4ac:	00 00       	nop
 4ae:	86 e0       	ldi	r24, 0x06	; 6
 4b0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_voidSendCommand>
 4b4:	8f e3       	ldi	r24, 0x3F	; 63
 4b6:	9f e1       	ldi	r25, 0x1F	; 31
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <LCD_voidInit+0x58>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <LCD_voidInit+0x5e>
 4be:	00 00       	nop
 4c0:	08 95       	ret

000004c2 <LCD_voidDisplayChar>:
 4c2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_voidSendData>
 4c6:	08 95       	ret

000004c8 <LCD_voidCreateCustomChar>:
 4c8:	0f 93       	push	r16
 4ca:	1f 93       	push	r17
 4cc:	cf 93       	push	r28
 4ce:	8c 01       	movw	r16, r24
 4d0:	86 2f       	mov	r24, r22
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	80 64       	ori	r24, 0x40	; 64
 4e2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_voidSendCommand>
 4e6:	c0 e0       	ldi	r28, 0x00	; 0
 4e8:	07 c0       	rjmp	.+14     	; 0x4f8 <LCD_voidCreateCustomChar+0x30>
 4ea:	f8 01       	movw	r30, r16
 4ec:	ec 0f       	add	r30, r28
 4ee:	f1 1d       	adc	r31, r1
 4f0:	80 81       	ld	r24, Z
 4f2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_voidSendData>
 4f6:	cf 5f       	subi	r28, 0xFF	; 255
 4f8:	c8 30       	cpi	r28, 0x08	; 8
 4fa:	b8 f3       	brcs	.-18     	; 0x4ea <LCD_voidCreateCustomChar+0x22>
 4fc:	cf 91       	pop	r28
 4fe:	1f 91       	pop	r17
 500:	0f 91       	pop	r16
 502:	08 95       	ret

00000504 <LCD_voidClear>:

void LCD_voidClear()
{
	LCD_voidSendCommand(0x01);
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 50a:	8f e9       	ldi	r24, 0x9F	; 159
 50c:	9f e0       	ldi	r25, 0x0F	; 15
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	f1 f7       	brne	.-4      	; 0x50e <LCD_voidClear+0xa>
 512:	00 c0       	rjmp	.+0      	; 0x514 <LCD_voidClear+0x10>
 514:	00 00       	nop
 516:	08 95       	ret

00000518 <main>:
};



int main (void)
{
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	00 d0       	rcall	.+0      	; 0x51e <main+0x6>
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
	Port_vidInit();
 522:	0e 94 ee 02 	call	0x5dc	; 0x5dc <Port_vidInit>
	LCD_voidInit();
 526:	0e 94 30 02 	call	0x460	; 0x460 <LCD_voidInit>
	ADC_voidInit(ADC_VREF_AVCC,ADC_Prescaler_128);
 52a:	67 e0       	ldi	r22, 0x07	; 7
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidInit>
	
	LCD_voidCreateCustomChar(Level_1, 1);
 532:	61 e0       	ldi	r22, 0x01	; 1
 534:	80 eb       	ldi	r24, 0xB0	; 176
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 64 02 	call	0x4c8	; 0x4c8 <LCD_voidCreateCustomChar>
	LCD_voidCreateCustomChar(Level_2, 2);
 53c:	62 e0       	ldi	r22, 0x02	; 2
 53e:	88 ea       	ldi	r24, 0xA8	; 168
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 64 02 	call	0x4c8	; 0x4c8 <LCD_voidCreateCustomChar>
	LCD_voidCreateCustomChar(Level_3, 3);
 546:	63 e0       	ldi	r22, 0x03	; 3
 548:	80 ea       	ldi	r24, 0xA0	; 160
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <LCD_voidCreateCustomChar>
	LCD_voidCreateCustomChar(Level_4, 4);
 550:	64 e0       	ldi	r22, 0x04	; 4
 552:	88 e9       	ldi	r24, 0x98	; 152
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 64 02 	call	0x4c8	; 0x4c8 <LCD_voidCreateCustomChar>
	LCD_voidCreateCustomChar(Level_5, 5);
 55a:	65 e0       	ldi	r22, 0x05	; 5
 55c:	80 e9       	ldi	r24, 0x90	; 144
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 64 02 	call	0x4c8	; 0x4c8 <LCD_voidCreateCustomChar>
	LCD_voidCreateCustomChar(Level_6, 6);
 564:	66 e0       	ldi	r22, 0x06	; 6
 566:	88 e8       	ldi	r24, 0x88	; 136
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <LCD_voidCreateCustomChar>
	LCD_voidCreateCustomChar(Level_7, 7);
 56e:	67 e0       	ldi	r22, 0x07	; 7
 570:	80 e8       	ldi	r24, 0x80	; 128
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 64 02 	call	0x4c8	; 0x4c8 <LCD_voidCreateCustomChar>
	
	ADC_Enable();
 578:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_Enable>
	u16 Local_u16ADCRead=0;
 57c:	1a 82       	std	Y+2, r1	; 0x02
 57e:	19 82       	std	Y+1, r1	; 0x01
    while (1)
    {
		ADC_voidReadPolling(ADC_CH0,&Local_u16ADCRead);
 580:	be 01       	movw	r22, r28
 582:	6f 5f       	subi	r22, 0xFF	; 255
 584:	7f 4f       	sbci	r23, 0xFF	; 255
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_voidReadPolling>
		for(u8 i = 0; i < 8; i++)
 58c:	00 e0       	ldi	r16, 0x00	; 0
 58e:	21 c0       	rjmp	.+66     	; 0x5d2 <main+0xba>
		{
			if(Local_u16ADCRead < Global_u8VolumeArr[i][0])
 590:	e0 2f       	mov	r30, r16
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	ee 0f       	add	r30, r30
 596:	ff 1f       	adc	r31, r31
 598:	ee 0f       	add	r30, r30
 59a:	ff 1f       	adc	r31, r31
 59c:	e0 5a       	subi	r30, 0xA0	; 160
 59e:	ff 4f       	sbci	r31, 0xFF	; 255
 5a0:	20 81       	ld	r18, Z
 5a2:	31 81       	ldd	r19, Z+1	; 0x01
 5a4:	89 81       	ldd	r24, Y+1	; 0x01
 5a6:	9a 81       	ldd	r25, Y+2	; 0x02
 5a8:	82 17       	cp	r24, r18
 5aa:	93 07       	cpc	r25, r19
 5ac:	70 f0       	brcs	.+28     	; 0x5ca <main+0xb2>
 5ae:	10 c0       	rjmp	.+32     	; 0x5d0 <main+0xb8>
			{
				for(u8 j = 0; j < i;j++)
				{
					LCD_voidDisplayChar(Global_u8VolumeArr[j][1]);
 5b0:	e1 2f       	mov	r30, r17
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	ee 0f       	add	r30, r30
 5b6:	ff 1f       	adc	r31, r31
 5b8:	ee 0f       	add	r30, r30
 5ba:	ff 1f       	adc	r31, r31
 5bc:	e0 5a       	subi	r30, 0xA0	; 160
 5be:	ff 4f       	sbci	r31, 0xFF	; 255
 5c0:	82 81       	ldd	r24, Z+2	; 0x02
 5c2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_voidDisplayChar>
		ADC_voidReadPolling(ADC_CH0,&Local_u16ADCRead);
		for(u8 i = 0; i < 8; i++)
		{
			if(Local_u16ADCRead < Global_u8VolumeArr[i][0])
			{
				for(u8 j = 0; j < i;j++)
 5c6:	1f 5f       	subi	r17, 0xFF	; 255
 5c8:	01 c0       	rjmp	.+2      	; 0x5cc <main+0xb4>
 5ca:	10 e0       	ldi	r17, 0x00	; 0
 5cc:	10 17       	cp	r17, r16
 5ce:	80 f3       	brcs	.-32     	; 0x5b0 <main+0x98>
	ADC_Enable();
	u16 Local_u16ADCRead=0;
    while (1)
    {
		ADC_voidReadPolling(ADC_CH0,&Local_u16ADCRead);
		for(u8 i = 0; i < 8; i++)
 5d0:	0f 5f       	subi	r16, 0xFF	; 255
 5d2:	08 30       	cpi	r16, 0x08	; 8
 5d4:	e8 f2       	brcs	.-70     	; 0x590 <main+0x78>
				{
					LCD_voidDisplayChar(Global_u8VolumeArr[j][1]);
				}
			}
		}
		LCD_voidClear();
 5d6:	0e 94 82 02 	call	0x504	; 0x504 <LCD_voidClear>
		
    }
 5da:	d2 cf       	rjmp	.-92     	; 0x580 <main+0x68>

000005dc <Port_vidInit>:
#define PORT_u8OUTPUT_LOW		1

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		0

	DDRA = CONC(PORT_u8MODEPIN07,PORT_u8MODEPIN06,PORT_u8MODEPIN05,PORT_u8MODEPIN04,PORT_u8MODEPIN03,PORT_u8MODEPIN02,PORT_u8MODEPIN01,PORT_u8MODEPIN00);
 5dc:	8f ef       	ldi	r24, 0xFF	; 255
 5de:	8a bb       	out	0x1a, r24	; 26
	DDRB = CONC(PORT_u8MODEPIN15,PORT_u8MODEPIN14,PORT_u8MODEPIN13,PORT_u8MODEPIN12,PORT_u8MODEPIN11,PORT_u8MODEPIN10,PORT_u8MODEPIN09,PORT_u8MODEPIN08);
 5e0:	87 bb       	out	0x17, r24	; 23
	DDRC = CONC(PORT_u8MODEPIN23,PORT_u8MODEPIN22,PORT_u8MODEPIN21,PORT_u8MODEPIN20,PORT_u8MODEPIN19,PORT_u8MODEPIN18,PORT_u8MODEPIN17,PORT_u8MODEPIN16);
 5e2:	97 e0       	ldi	r25, 0x07	; 7
 5e4:	94 bb       	out	0x14, r25	; 20
	DDRD = CONC(PORT_u8MODEPIN31,PORT_u8MODEPIN30,PORT_u8MODEPIN29,PORT_u8MODEPIN28,PORT_u8MODEPIN27,PORT_u8MODEPIN26,PORT_u8MODEPIN25,PORT_u8MODEPIN24);
 5e6:	9f e0       	ldi	r25, 0x0F	; 15
 5e8:	91 bb       	out	0x11, r25	; 17
#define PORT_u8OUTPUT_LOW		0

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		1

	PORTA = CONC(PORT_u8MODEPIN07,PORT_u8MODEPIN06,PORT_u8MODEPIN05,PORT_u8MODEPIN04,PORT_u8MODEPIN03,PORT_u8MODEPIN02,PORT_u8MODEPIN01,PORT_u8MODEPIN00);
 5ea:	1b ba       	out	0x1b, r1	; 27
	PORTB = CONC(PORT_u8MODEPIN15,PORT_u8MODEPIN14,PORT_u8MODEPIN13,PORT_u8MODEPIN12,PORT_u8MODEPIN11,PORT_u8MODEPIN10,PORT_u8MODEPIN09,PORT_u8MODEPIN08);
 5ec:	18 ba       	out	0x18, r1	; 24
	PORTC = CONC(PORT_u8MODEPIN23,PORT_u8MODEPIN22,PORT_u8MODEPIN21,PORT_u8MODEPIN20,PORT_u8MODEPIN19,PORT_u8MODEPIN18,PORT_u8MODEPIN17,PORT_u8MODEPIN16);
 5ee:	15 ba       	out	0x15, r1	; 21
	PORTD = CONC(PORT_u8MODEPIN31,PORT_u8MODEPIN30,PORT_u8MODEPIN29,PORT_u8MODEPIN28,PORT_u8MODEPIN27,PORT_u8MODEPIN26,PORT_u8MODEPIN25,PORT_u8MODEPIN24);
 5f0:	82 bb       	out	0x12, r24	; 18
 5f2:	08 95       	ret

000005f4 <_exit>:
 5f4:	f8 94       	cli

000005f6 <__stop_program>:
 5f6:	ff cf       	rjmp	.-2      	; 0x5f6 <__stop_program>
