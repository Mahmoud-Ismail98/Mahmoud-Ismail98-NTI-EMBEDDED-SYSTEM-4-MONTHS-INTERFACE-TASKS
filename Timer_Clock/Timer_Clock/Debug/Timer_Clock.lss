
Timer_Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000007ac  00000840  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800088  00800088  00000868  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000898  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bf6  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0e  00000000  00000000  00002652  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000128d  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  000042f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bd9  00000000  00000000  00004618  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c1a  00000000  00000000  000051f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00006e0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 89 03 	jmp	0x712	; 0x712 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 38       	cpi	r26, 0x8C	; 140
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <main>
  8a:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_voidSendCommand>:
	LCD_voidSendCommand(Local_u8add);
	for(u8 i = 0 ; i < 8 ; i++)
	{
		LCD_voidSendData(Copy_pu8CharArray[i]);
	}
}
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
  9e:	6c 2f       	mov	r22, r28
  a0:	66 1f       	adc	r22, r22
  a2:	66 27       	eor	r22, r22
  a4:	66 1f       	adc	r22, r22
  a6:	8c e0       	ldi	r24, 0x0C	; 12
  a8:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
  ac:	c6 fb       	bst	r28, 6
  ae:	66 27       	eor	r22, r22
  b0:	60 f9       	bld	r22, 0
  b2:	8a e0       	ldi	r24, 0x0A	; 10
  b4:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
  b8:	c5 fb       	bst	r28, 5
  ba:	66 27       	eor	r22, r22
  bc:	60 f9       	bld	r22, 0
  be:	89 e0       	ldi	r24, 0x09	; 9
  c0:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
  c4:	c4 fb       	bst	r28, 4
  c6:	66 27       	eor	r22, r22
  c8:	60 f9       	bld	r22, 0
  ca:	88 e0       	ldi	r24, 0x08	; 8
  cc:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
  d8:	8f e9       	ldi	r24, 0x9F	; 159
  da:	9f e0       	ldi	r25, 0x0F	; 15
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_voidSendCommand+0x4a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_voidSendCommand+0x50>
  e2:	00 00       	nop
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
  ec:	8f e9       	ldi	r24, 0x9F	; 159
  ee:	9f e0       	ldi	r25, 0x0F	; 15
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCD_voidSendCommand+0x5e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCD_voidSendCommand+0x64>
  f6:	00 00       	nop
  f8:	c3 fb       	bst	r28, 3
  fa:	66 27       	eor	r22, r22
  fc:	60 f9       	bld	r22, 0
  fe:	8c e0       	ldi	r24, 0x0C	; 12
 100:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
 104:	c2 fb       	bst	r28, 2
 106:	66 27       	eor	r22, r22
 108:	60 f9       	bld	r22, 0
 10a:	8a e0       	ldi	r24, 0x0A	; 10
 10c:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
 110:	c1 fb       	bst	r28, 1
 112:	66 27       	eor	r22, r22
 114:	60 f9       	bld	r22, 0
 116:	89 e0       	ldi	r24, 0x09	; 9
 118:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
 11c:	6c 2f       	mov	r22, r28
 11e:	61 70       	andi	r22, 0x01	; 1
 120:	88 e0       	ldi	r24, 0x08	; 8
 122:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
 12e:	8f e9       	ldi	r24, 0x9F	; 159
 130:	9f e0       	ldi	r25, 0x0F	; 15
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_voidSendCommand+0xa0>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_voidSendCommand+0xa6>
 138:	00 00       	nop
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
 142:	8f e9       	ldi	r24, 0x9F	; 159
 144:	9f e0       	ldi	r25, 0x0F	; 15
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <LCD_voidSendCommand+0xb4>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCD_voidSendCommand+0xba>
 14c:	00 00       	nop
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <LCD_voidSendData>:
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
 15e:	6c 2f       	mov	r22, r28
 160:	66 1f       	adc	r22, r22
 162:	66 27       	eor	r22, r22
 164:	66 1f       	adc	r22, r22
 166:	8c e0       	ldi	r24, 0x0C	; 12
 168:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
 16c:	c6 fb       	bst	r28, 6
 16e:	66 27       	eor	r22, r22
 170:	60 f9       	bld	r22, 0
 172:	8a e0       	ldi	r24, 0x0A	; 10
 174:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
 178:	c5 fb       	bst	r28, 5
 17a:	66 27       	eor	r22, r22
 17c:	60 f9       	bld	r22, 0
 17e:	89 e0       	ldi	r24, 0x09	; 9
 180:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
 184:	c4 fb       	bst	r28, 4
 186:	66 27       	eor	r22, r22
 188:	60 f9       	bld	r22, 0
 18a:	88 e0       	ldi	r24, 0x08	; 8
 18c:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
 198:	8f e9       	ldi	r24, 0x9F	; 159
 19a:	9f e0       	ldi	r25, 0x0F	; 15
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_voidSendData+0x4a>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_voidSendData+0x50>
 1a2:	00 00       	nop
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
 1ac:	8f e9       	ldi	r24, 0x9F	; 159
 1ae:	9f e0       	ldi	r25, 0x0F	; 15
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCD_voidSendData+0x5e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <LCD_voidSendData+0x64>
 1b6:	00 00       	nop
 1b8:	c3 fb       	bst	r28, 3
 1ba:	66 27       	eor	r22, r22
 1bc:	60 f9       	bld	r22, 0
 1be:	8c e0       	ldi	r24, 0x0C	; 12
 1c0:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
 1c4:	c2 fb       	bst	r28, 2
 1c6:	66 27       	eor	r22, r22
 1c8:	60 f9       	bld	r22, 0
 1ca:	8a e0       	ldi	r24, 0x0A	; 10
 1cc:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
 1d0:	c1 fb       	bst	r28, 1
 1d2:	66 27       	eor	r22, r22
 1d4:	60 f9       	bld	r22, 0
 1d6:	89 e0       	ldi	r24, 0x09	; 9
 1d8:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
 1dc:	6c 2f       	mov	r22, r28
 1de:	61 70       	andi	r22, 0x01	; 1
 1e0:	88 e0       	ldi	r24, 0x08	; 8
 1e2:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
 1ee:	8f e9       	ldi	r24, 0x9F	; 159
 1f0:	9f e0       	ldi	r25, 0x0F	; 15
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LCD_voidSendData+0xa0>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <LCD_voidSendData+0xa6>
 1f8:	00 00       	nop
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	0e 94 66 02 	call	0x4cc	; 0x4cc <Dio_enuWriteChannel>
 202:	8f e9       	ldi	r24, 0x9F	; 159
 204:	9f e0       	ldi	r25, 0x0F	; 15
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <LCD_voidSendData+0xb4>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <LCD_voidSendData+0xba>
 20c:	00 00       	nop
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <LCD_voidInit>:
 212:	2f ef       	ldi	r18, 0xFF	; 255
 214:	80 e7       	ldi	r24, 0x70	; 112
 216:	92 e0       	ldi	r25, 0x02	; 2
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <LCD_voidInit+0x6>
 220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_voidInit+0x10>
 222:	00 00       	nop
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 22a:	88 e2       	ldi	r24, 0x28	; 40
 22c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 230:	8f e9       	ldi	r24, 0x9F	; 159
 232:	9f e0       	ldi	r25, 0x0F	; 15
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <LCD_voidInit+0x22>
 238:	00 c0       	rjmp	.+0      	; 0x23a <LCD_voidInit+0x28>
 23a:	00 00       	nop
 23c:	8c e0       	ldi	r24, 0x0C	; 12
 23e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 242:	8f e9       	ldi	r24, 0x9F	; 159
 244:	9f e0       	ldi	r25, 0x0F	; 15
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <LCD_voidInit+0x34>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <LCD_voidInit+0x3a>
 24c:	00 00       	nop
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 254:	8f e3       	ldi	r24, 0x3F	; 63
 256:	9f e1       	ldi	r25, 0x1F	; 31
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCD_voidInit+0x46>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <LCD_voidInit+0x4c>
 25e:	00 00       	nop
 260:	86 e0       	ldi	r24, 0x06	; 6
 262:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 266:	8f e3       	ldi	r24, 0x3F	; 63
 268:	9f e1       	ldi	r25, 0x1F	; 31
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <LCD_voidInit+0x58>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <LCD_voidInit+0x5e>
 270:	00 00       	nop
 272:	08 95       	ret

00000274 <LCD_voidDisplayChar>:
 274:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_voidSendData>
 278:	08 95       	ret

0000027a <LCD_voidDisplayString>:
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	8c 01       	movw	r16, r24
 282:	c0 e0       	ldi	r28, 0x00	; 0
 284:	03 c0       	rjmp	.+6      	; 0x28c <LCD_voidDisplayString+0x12>
 286:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_voidDisplayChar>
 28a:	cf 5f       	subi	r28, 0xFF	; 255
 28c:	f8 01       	movw	r30, r16
 28e:	ec 0f       	add	r30, r28
 290:	f1 1d       	adc	r31, r1
 292:	80 81       	ld	r24, Z
 294:	81 11       	cpse	r24, r1
 296:	f7 cf       	rjmp	.-18     	; 0x286 <LCD_voidDisplayString+0xc>
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	08 95       	ret

000002a0 <LCD_voidGoToXY>:
 2a0:	61 11       	cpse	r22, r1
 2a2:	04 c0       	rjmp	.+8      	; 0x2ac <LCD_voidGoToXY+0xc>
 2a4:	80 58       	subi	r24, 0x80	; 128
 2a6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 2aa:	08 95       	ret
 2ac:	61 30       	cpi	r22, 0x01	; 1
 2ae:	21 f4       	brne	.+8      	; 0x2b8 <LCD_voidGoToXY+0x18>
 2b0:	80 54       	subi	r24, 0x40	; 64
 2b2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 2b6:	08 95       	ret
 2b8:	62 30       	cpi	r22, 0x02	; 2
 2ba:	21 f4       	brne	.+8      	; 0x2c4 <LCD_voidGoToXY+0x24>
 2bc:	8c 56       	subi	r24, 0x6C	; 108
 2be:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 2c2:	08 95       	ret
 2c4:	63 30       	cpi	r22, 0x03	; 3
 2c6:	19 f4       	brne	.+6      	; 0x2ce <LCD_voidGoToXY+0x2e>
 2c8:	8c 52       	subi	r24, 0x2C	; 44
 2ca:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 2ce:	08 95       	ret

000002d0 <LCD_voidDisplayNumbers>:


void LCD_voidDisplayNumbers(u32 Copy_u32Number)
{
 2d0:	1f 93       	push	r17
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	60 97       	sbiw	r28, 0x10	; 16
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	f8 94       	cli
 2e0:	de bf       	out	0x3e, r29	; 62
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	cd bf       	out	0x3d, r28	; 61
	u8 rem,i=0,str[16];
	s8 j;
	if (Copy_u32Number==0)
 2e6:	61 15       	cp	r22, r1
 2e8:	71 05       	cpc	r23, r1
 2ea:	81 05       	cpc	r24, r1
 2ec:	91 05       	cpc	r25, r1
 2ee:	c1 f4       	brne	.+48     	; 0x320 <LCD_voidDisplayNumbers+0x50>
	{
		LCD_voidDisplayChar('0');
 2f0:	80 e3       	ldi	r24, 0x30	; 48
 2f2:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_voidDisplayChar>
 2f6:	2a c0       	rjmp	.+84     	; 0x34c <LCD_voidDisplayNumbers+0x7c>
		LCD_voidDisplayChar('-');
	}

	while(Copy_u32Number)
	{
		rem=Copy_u32Number%10;
 2f8:	2a e0       	ldi	r18, 0x0A	; 10
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	50 e0       	ldi	r21, 0x00	; 0
 300:	0e 94 b2 03 	call	0x764	; 0x764 <__udivmodsi4>
		rem=rem+'0';
 304:	60 5d       	subi	r22, 0xD0	; 208
		str[i]=rem;
 306:	e1 e0       	ldi	r30, 0x01	; 1
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	ec 0f       	add	r30, r28
 30c:	fd 1f       	adc	r31, r29
 30e:	e1 0f       	add	r30, r17
 310:	f1 1d       	adc	r31, r1
 312:	60 83       	st	Z, r22
		i++;
 314:	1f 5f       	subi	r17, 0xFF	; 255
		Copy_u32Number=Copy_u32Number/10;
 316:	62 2f       	mov	r22, r18
 318:	73 2f       	mov	r23, r19
 31a:	84 2f       	mov	r24, r20
 31c:	95 2f       	mov	r25, r21
 31e:	01 c0       	rjmp	.+2      	; 0x322 <LCD_voidDisplayNumbers+0x52>
 320:	10 e0       	ldi	r17, 0x00	; 0
	{
		Copy_u32Number=Copy_u32Number*(-1);
		LCD_voidDisplayChar('-');
	}

	while(Copy_u32Number)
 322:	61 15       	cp	r22, r1
 324:	71 05       	cpc	r23, r1
 326:	81 05       	cpc	r24, r1
 328:	91 05       	cpc	r25, r1
 32a:	31 f7       	brne	.-52     	; 0x2f8 <LCD_voidDisplayNumbers+0x28>
		str[i]=rem;
		i++;
		Copy_u32Number=Copy_u32Number/10;
	}

	for (j=i-1;j>=0;j--)
 32c:	11 50       	subi	r17, 0x01	; 1
 32e:	0c c0       	rjmp	.+24     	; 0x348 <LCD_voidDisplayNumbers+0x78>
	{
		LCD_voidDisplayChar(str[j]);
 330:	e1 e0       	ldi	r30, 0x01	; 1
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	ec 0f       	add	r30, r28
 336:	fd 1f       	adc	r31, r29
 338:	e1 0f       	add	r30, r17
 33a:	f1 1d       	adc	r31, r1
 33c:	17 fd       	sbrc	r17, 7
 33e:	fa 95       	dec	r31
 340:	80 81       	ld	r24, Z
 342:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_voidDisplayChar>
		str[i]=rem;
		i++;
		Copy_u32Number=Copy_u32Number/10;
	}

	for (j=i-1;j>=0;j--)
 346:	11 50       	subi	r17, 0x01	; 1
 348:	11 23       	and	r17, r17
 34a:	94 f7       	brge	.-28     	; 0x330 <LCD_voidDisplayNumbers+0x60>
	{
		LCD_voidDisplayChar(str[j]);
	}
}
 34c:	60 96       	adiw	r28, 0x10	; 16
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	08 95       	ret

00000360 <Timer_OVF>:
}
/*Timer ISR */
void Timer_OVF()
{
	static u16 c=0;
	c++;
 360:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 364:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 36e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
	if(c == 3) //Second is fast
 372:	03 97       	sbiw	r24, 0x03	; 3
 374:	f9 f4       	brne	.+62     	; 0x3b4 <Timer_OVF+0x54>
	{
		Global_u8Secs++;
 376:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Global_u8Secs>
 37a:	8f 5f       	subi	r24, 0xFF	; 255
 37c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Global_u8Secs>
		if(Global_u8Secs == 60)
 380:	8c 33       	cpi	r24, 0x3C	; 60
 382:	a1 f4       	brne	.+40     	; 0x3ac <Timer_OVF+0x4c>
		{
			Global_u8Secs = 0;
 384:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Global_u8Secs>
			Global_u8Mins++;
 388:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Global_u8Mins>
 38c:	8f 5f       	subi	r24, 0xFF	; 255
 38e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Global_u8Mins>
			if(Global_u8Mins == 60)
 392:	8c 33       	cpi	r24, 0x3C	; 60
 394:	59 f4       	brne	.+22     	; 0x3ac <Timer_OVF+0x4c>
			{
				Global_u8Mins =0;
 396:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Global_u8Mins>
				Global_u8Hrs++;
 39a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 39e:	8f 5f       	subi	r24, 0xFF	; 255
 3a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				if(Global_u8Hrs == 12)
 3a4:	8c 30       	cpi	r24, 0x0C	; 12
 3a6:	11 f4       	brne	.+4      	; 0x3ac <Timer_OVF+0x4c>
				{
					Global_u8Hrs=0;
 3a8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
					Global_u8Mins =0;
					Global_u8Secs = 0;
				}
			}
		}
		c=0;
 3ac:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__data_end+0x1>
 3b0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>
 3b4:	08 95       	ret

000003b6 <LCD_voidDisplayNumbersHelper>:
u8 Global_u8Mins =55;
u8 Global_u8Hrs =9;

/*Helper Functions*/
void LCD_voidDisplayNumbersHelper(u32 Copy_u32Number)  //To Display Number in 2 Digits
{
 3b6:	cf 92       	push	r12
 3b8:	df 92       	push	r13
 3ba:	ef 92       	push	r14
 3bc:	ff 92       	push	r15
 3be:	6b 01       	movw	r12, r22
 3c0:	7c 01       	movw	r14, r24
	if(Copy_u32Number < 10)
 3c2:	8a e0       	ldi	r24, 0x0A	; 10
 3c4:	c8 16       	cp	r12, r24
 3c6:	d1 04       	cpc	r13, r1
 3c8:	e1 04       	cpc	r14, r1
 3ca:	f1 04       	cpc	r15, r1
 3cc:	50 f4       	brcc	.+20     	; 0x3e2 <LCD_voidDisplayNumbersHelper+0x2c>
	{
		LCD_voidDisplayNumbers(0);
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	cb 01       	movw	r24, r22
 3d4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_voidDisplayNumbers>
		LCD_voidDisplayNumbers(Copy_u32Number);
 3d8:	c7 01       	movw	r24, r14
 3da:	b6 01       	movw	r22, r12
 3dc:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_voidDisplayNumbers>
 3e0:	04 c0       	rjmp	.+8      	; 0x3ea <LCD_voidDisplayNumbersHelper+0x34>
	}
	else
	{
		LCD_voidDisplayNumbers(Copy_u32Number);
 3e2:	c7 01       	movw	r24, r14
 3e4:	b6 01       	movw	r22, r12
 3e6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_voidDisplayNumbers>
	}
}
 3ea:	ff 90       	pop	r15
 3ec:	ef 90       	pop	r14
 3ee:	df 90       	pop	r13
 3f0:	cf 90       	pop	r12
 3f2:	08 95       	ret

000003f4 <main>:
		c=0;
	}
}
int main(void)
{
	Port_vidInit();
 3f4:	0e 94 40 03 	call	0x680	; 0x680 <Port_vidInit>
	LCD_voidInit();
 3f8:	0e 94 09 01 	call	0x212	; 0x212 <LCD_voidInit>
	/*Creating GUI*/
	LCD_voidDisplayString("Clock");
 3fc:	83 e6       	ldi	r24, 0x63	; 99
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_voidDisplayString>
	LCD_voidGoToXY(6,0);
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	86 e0       	ldi	r24, 0x06	; 6
 408:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_voidGoToXY>
	LCD_voidDisplayString("__________");
 40c:	89 e6       	ldi	r24, 0x69	; 105
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_voidDisplayString>
	LCD_voidGoToXY(6,3);
 414:	63 e0       	ldi	r22, 0x03	; 3
 416:	86 e0       	ldi	r24, 0x06	; 6
 418:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_voidGoToXY>
	LCD_voidDisplayString("----------");
 41c:	84 e7       	ldi	r24, 0x74	; 116
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_voidDisplayString>
	LCD_voidGoToXY(6,1);
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	86 e0       	ldi	r24, 0x06	; 6
 428:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_voidGoToXY>
	LCD_voidDisplayChar('|');
 42c:	8c e7       	ldi	r24, 0x7C	; 124
 42e:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_voidDisplayChar>
	LCD_voidGoToXY(6,2);
 432:	62 e0       	ldi	r22, 0x02	; 2
 434:	86 e0       	ldi	r24, 0x06	; 6
 436:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_voidGoToXY>
	LCD_voidDisplayChar('|');
 43a:	8c e7       	ldi	r24, 0x7C	; 124
 43c:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_voidDisplayChar>
	LCD_voidGoToXY(15,1);
 440:	61 e0       	ldi	r22, 0x01	; 1
 442:	8f e0       	ldi	r24, 0x0F	; 15
 444:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_voidGoToXY>
	LCD_voidDisplayChar('|');
 448:	8c e7       	ldi	r24, 0x7C	; 124
 44a:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_voidDisplayChar>
	LCD_voidGoToXY(15,2);
 44e:	62 e0       	ldi	r22, 0x02	; 2
 450:	8f e0       	ldi	r24, 0x0F	; 15
 452:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_voidGoToXY>
	LCD_voidDisplayChar('|');
 456:	8c e7       	ldi	r24, 0x7C	; 124
 458:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_voidDisplayChar>
	LCD_voidGoToXY(7,1);
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	87 e0       	ldi	r24, 0x07	; 7
 460:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_voidGoToXY>
	LCD_voidDisplayString("hh:mm:ss");
 464:	8f e7       	ldi	r24, 0x7F	; 127
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_voidDisplayString>
	LCD_voidGoToXY(7,2);
 46c:	62 e0       	ldi	r22, 0x02	; 2
 46e:	87 e0       	ldi	r24, 0x07	; 7
 470:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_voidGoToXY>
	///////////////////////////////////////

	GIE();
 474:	78 94       	sei
	Timer0_voidInit(Timer0_NormalMode,Timer0_SCALER_1024,OC0_DISCONNECTED);
 476:	40 e0       	ldi	r20, 0x00	; 0
 478:	65 e0       	ldi	r22, 0x05	; 5
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	0e 94 4c 03 	call	0x698	; 0x698 <Timer0_voidInit>
	Timer0_voidOVF_SetCallBack(Timer_OVF);
 480:	80 eb       	ldi	r24, 0xB0	; 176
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	0e 94 84 03 	call	0x708	; 0x708 <Timer0_voidOVF_SetCallBack>
	Timer0_voidOVF_InterruptEnable();
 488:	0e 94 80 03 	call	0x700	; 0x700 <Timer0_voidOVF_InterruptEnable>
    while (1)
    {
		LCD_voidDisplayNumbersHelper(Global_u8Hrs);
 48c:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_voidDisplayNumbersHelper>
		LCD_voidDisplayChar(':');
 49a:	8a e3       	ldi	r24, 0x3A	; 58
 49c:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_voidDisplayChar>
		LCD_voidDisplayNumbersHelper(Global_u8Mins);
 4a0:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <Global_u8Mins>
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_voidDisplayNumbersHelper>
		LCD_voidDisplayChar(':');
 4ae:	8a e3       	ldi	r24, 0x3A	; 58
 4b0:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_voidDisplayChar>
		LCD_voidDisplayNumbersHelper(Global_u8Secs);
 4b4:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <Global_u8Secs>
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_voidDisplayNumbersHelper>
		LCD_voidGoToXY(7,2);
 4c2:	62 e0       	ldi	r22, 0x02	; 2
 4c4:	87 e0       	ldi	r24, 0x07	; 7
 4c6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_voidGoToXY>
 4ca:	e0 cf       	rjmp	.-64     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>

000004cc <Dio_enuWriteChannel>:

	u8 LOC_u8Port;

	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {
 4cc:	80 32       	cpi	r24, 0x20	; 32
 4ce:	08 f0       	brcs	.+2      	; 0x4d2 <Dio_enuWriteChannel+0x6>
 4d0:	c1 c0       	rjmp	.+386    	; 0x654 <Dio_enuWriteChannel+0x188>

		LOC_enuReturnStatus = Dio_enuChannelError;
	}

	else if (Copy_u8Level > DIO_u8NUMBER_OF_LEVELS) {
 4d2:	63 30       	cpi	r22, 0x03	; 3
 4d4:	08 f0       	brcs	.+2      	; 0x4d8 <Dio_enuWriteChannel+0xc>
 4d6:	c0 c0       	rjmp	.+384    	; 0x658 <Dio_enuWriteChannel+0x18c>
		LOC_enuReturnStatus = Dio_enuLevelError;
	}

	else {

		LOC_u8Port = Copy_u8ChannelId / DIO_u8REGISTER_SIZE;
 4d8:	98 2f       	mov	r25, r24
 4da:	96 95       	lsr	r25
 4dc:	96 95       	lsr	r25
 4de:	96 95       	lsr	r25
		LOC_u8Pin = Copy_u8ChannelId % DIO_u8REGISTER_SIZE;
 4e0:	87 70       	andi	r24, 0x07	; 7

		switch (LOC_u8Port) {
 4e2:	91 30       	cpi	r25, 0x01	; 1
 4e4:	a1 f1       	breq	.+104    	; 0x54e <Dio_enuWriteChannel+0x82>
 4e6:	38 f0       	brcs	.+14     	; 0x4f6 <Dio_enuWriteChannel+0x2a>
 4e8:	92 30       	cpi	r25, 0x02	; 2
 4ea:	09 f4       	brne	.+2      	; 0x4ee <Dio_enuWriteChannel+0x22>
 4ec:	5c c0       	rjmp	.+184    	; 0x5a6 <Dio_enuWriteChannel+0xda>
 4ee:	93 30       	cpi	r25, 0x03	; 3
 4f0:	09 f4       	brne	.+2      	; 0x4f4 <Dio_enuWriteChannel+0x28>
 4f2:	85 c0       	rjmp	.+266    	; 0x5fe <Dio_enuWriteChannel+0x132>
 4f4:	b3 c0       	rjmp	.+358    	; 0x65c <Dio_enuWriteChannel+0x190>

		case DIO_u8PORTA:
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
 4f6:	2a b3       	in	r18, 0x1a	; 26
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	08 2e       	mov	r0, r24
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <Dio_enuWriteChannel+0x36>
 4fe:	35 95       	asr	r19
 500:	27 95       	ror	r18
 502:	0a 94       	dec	r0
 504:	e2 f7       	brpl	.-8      	; 0x4fe <Dio_enuWriteChannel+0x32>
 506:	20 ff       	sbrs	r18, 0
 508:	ab c0       	rjmp	.+342    	; 0x660 <Dio_enuWriteChannel+0x194>
				switch (Copy_u8Level) {
 50a:	66 23       	and	r22, r22
 50c:	89 f0       	breq	.+34     	; 0x530 <Dio_enuWriteChannel+0x64>
 50e:	61 30       	cpi	r22, 0x01	; 1
 510:	09 f0       	breq	.+2      	; 0x514 <Dio_enuWriteChannel+0x48>
 512:	a8 c0       	rjmp	.+336    	; 0x664 <Dio_enuWriteChannel+0x198>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTA, LOC_u8Pin);
 514:	4b b3       	in	r20, 0x1b	; 27
 516:	21 e0       	ldi	r18, 0x01	; 1
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	b9 01       	movw	r22, r18
 51c:	02 c0       	rjmp	.+4      	; 0x522 <Dio_enuWriteChannel+0x56>
 51e:	66 0f       	add	r22, r22
 520:	77 1f       	adc	r23, r23
 522:	8a 95       	dec	r24
 524:	e2 f7       	brpl	.-8      	; 0x51e <Dio_enuWriteChannel+0x52>
 526:	cb 01       	movw	r24, r22
 528:	84 2b       	or	r24, r20
 52a:	8b bb       	out	0x1b, r24	; 27
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 52c:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTA, LOC_u8Pin);
					break;
 52e:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTA, LOC_u8Pin);
 530:	4b b3       	in	r20, 0x1b	; 27
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	b9 01       	movw	r22, r18
 538:	02 c0       	rjmp	.+4      	; 0x53e <Dio_enuWriteChannel+0x72>
 53a:	66 0f       	add	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	8a 95       	dec	r24
 540:	e2 f7       	brpl	.-8      	; 0x53a <Dio_enuWriteChannel+0x6e>
 542:	cb 01       	movw	r24, r22
 544:	80 95       	com	r24
 546:	84 23       	and	r24, r20
 548:	8b bb       	out	0x1b, r24	; 27
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 54a:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTA, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTA, LOC_u8Pin);
					break;
 54c:	08 95       	ret
			}
			break;

		case DIO_u8PORTB:

			if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
 54e:	27 b3       	in	r18, 0x17	; 23
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	08 2e       	mov	r0, r24
 554:	02 c0       	rjmp	.+4      	; 0x55a <Dio_enuWriteChannel+0x8e>
 556:	35 95       	asr	r19
 558:	27 95       	ror	r18
 55a:	0a 94       	dec	r0
 55c:	e2 f7       	brpl	.-8      	; 0x556 <Dio_enuWriteChannel+0x8a>
 55e:	20 ff       	sbrs	r18, 0
 560:	83 c0       	rjmp	.+262    	; 0x668 <Dio_enuWriteChannel+0x19c>
				switch (Copy_u8Level) {
 562:	66 23       	and	r22, r22
 564:	89 f0       	breq	.+34     	; 0x588 <Dio_enuWriteChannel+0xbc>
 566:	61 30       	cpi	r22, 0x01	; 1
 568:	09 f0       	breq	.+2      	; 0x56c <Dio_enuWriteChannel+0xa0>
 56a:	80 c0       	rjmp	.+256    	; 0x66c <Dio_enuWriteChannel+0x1a0>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTB, LOC_u8Pin);
 56c:	48 b3       	in	r20, 0x18	; 24
 56e:	21 e0       	ldi	r18, 0x01	; 1
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	b9 01       	movw	r22, r18
 574:	02 c0       	rjmp	.+4      	; 0x57a <Dio_enuWriteChannel+0xae>
 576:	66 0f       	add	r22, r22
 578:	77 1f       	adc	r23, r23
 57a:	8a 95       	dec	r24
 57c:	e2 f7       	brpl	.-8      	; 0x576 <Dio_enuWriteChannel+0xaa>
 57e:	cb 01       	movw	r24, r22
 580:	84 2b       	or	r24, r20
 582:	88 bb       	out	0x18, r24	; 24
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 584:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTB, LOC_u8Pin);
					break;
 586:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTB, LOC_u8Pin);
 588:	48 b3       	in	r20, 0x18	; 24
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	b9 01       	movw	r22, r18
 590:	02 c0       	rjmp	.+4      	; 0x596 <Dio_enuWriteChannel+0xca>
 592:	66 0f       	add	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	8a 95       	dec	r24
 598:	e2 f7       	brpl	.-8      	; 0x592 <Dio_enuWriteChannel+0xc6>
 59a:	cb 01       	movw	r24, r22
 59c:	80 95       	com	r24
 59e:	84 23       	and	r24, r20
 5a0:	88 bb       	out	0x18, r24	; 24
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 5a2:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTB, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTB, LOC_u8Pin);
					break;
 5a4:	08 95       	ret

			break;

		case DIO_u8PORTC:

			if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
 5a6:	24 b3       	in	r18, 0x14	; 20
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	08 2e       	mov	r0, r24
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <Dio_enuWriteChannel+0xe6>
 5ae:	35 95       	asr	r19
 5b0:	27 95       	ror	r18
 5b2:	0a 94       	dec	r0
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <Dio_enuWriteChannel+0xe2>
 5b6:	20 ff       	sbrs	r18, 0
 5b8:	5b c0       	rjmp	.+182    	; 0x670 <Dio_enuWriteChannel+0x1a4>
				switch (Copy_u8Level) {
 5ba:	66 23       	and	r22, r22
 5bc:	89 f0       	breq	.+34     	; 0x5e0 <Dio_enuWriteChannel+0x114>
 5be:	61 30       	cpi	r22, 0x01	; 1
 5c0:	09 f0       	breq	.+2      	; 0x5c4 <Dio_enuWriteChannel+0xf8>
 5c2:	58 c0       	rjmp	.+176    	; 0x674 <Dio_enuWriteChannel+0x1a8>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTC, LOC_u8Pin);
 5c4:	45 b3       	in	r20, 0x15	; 21
 5c6:	21 e0       	ldi	r18, 0x01	; 1
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	b9 01       	movw	r22, r18
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <Dio_enuWriteChannel+0x106>
 5ce:	66 0f       	add	r22, r22
 5d0:	77 1f       	adc	r23, r23
 5d2:	8a 95       	dec	r24
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <Dio_enuWriteChannel+0x102>
 5d6:	cb 01       	movw	r24, r22
 5d8:	84 2b       	or	r24, r20
 5da:	85 bb       	out	0x15, r24	; 21
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 5dc:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTC, LOC_u8Pin);
					break;
 5de:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTC, LOC_u8Pin);
 5e0:	45 b3       	in	r20, 0x15	; 21
 5e2:	21 e0       	ldi	r18, 0x01	; 1
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	b9 01       	movw	r22, r18
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <Dio_enuWriteChannel+0x122>
 5ea:	66 0f       	add	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	8a 95       	dec	r24
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <Dio_enuWriteChannel+0x11e>
 5f2:	cb 01       	movw	r24, r22
 5f4:	80 95       	com	r24
 5f6:	84 23       	and	r24, r20
 5f8:	85 bb       	out	0x15, r24	; 21
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 5fa:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTC, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTC, LOC_u8Pin);
					break;
 5fc:	08 95       	ret
			}
			break;

		case DIO_u8PORTD:

			if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
 5fe:	21 b3       	in	r18, 0x11	; 17
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	08 2e       	mov	r0, r24
 604:	02 c0       	rjmp	.+4      	; 0x60a <Dio_enuWriteChannel+0x13e>
 606:	35 95       	asr	r19
 608:	27 95       	ror	r18
 60a:	0a 94       	dec	r0
 60c:	e2 f7       	brpl	.-8      	; 0x606 <Dio_enuWriteChannel+0x13a>
 60e:	20 ff       	sbrs	r18, 0
 610:	33 c0       	rjmp	.+102    	; 0x678 <Dio_enuWriteChannel+0x1ac>
				switch (Copy_u8Level) {
 612:	66 23       	and	r22, r22
 614:	81 f0       	breq	.+32     	; 0x636 <Dio_enuWriteChannel+0x16a>
 616:	61 30       	cpi	r22, 0x01	; 1
 618:	89 f5       	brne	.+98     	; 0x67c <Dio_enuWriteChannel+0x1b0>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTD, LOC_u8Pin);
 61a:	42 b3       	in	r20, 0x12	; 18
 61c:	21 e0       	ldi	r18, 0x01	; 1
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	b9 01       	movw	r22, r18
 622:	02 c0       	rjmp	.+4      	; 0x628 <Dio_enuWriteChannel+0x15c>
 624:	66 0f       	add	r22, r22
 626:	77 1f       	adc	r23, r23
 628:	8a 95       	dec	r24
 62a:	e2 f7       	brpl	.-8      	; 0x624 <Dio_enuWriteChannel+0x158>
 62c:	cb 01       	movw	r24, r22
 62e:	84 2b       	or	r24, r20
 630:	82 bb       	out	0x12, r24	; 18
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 632:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTD, LOC_u8Pin);
					break;
 634:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTD, LOC_u8Pin);
 636:	42 b3       	in	r20, 0x12	; 18
 638:	21 e0       	ldi	r18, 0x01	; 1
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	b9 01       	movw	r22, r18
 63e:	02 c0       	rjmp	.+4      	; 0x644 <Dio_enuWriteChannel+0x178>
 640:	66 0f       	add	r22, r22
 642:	77 1f       	adc	r23, r23
 644:	8a 95       	dec	r24
 646:	e2 f7       	brpl	.-8      	; 0x640 <Dio_enuWriteChannel+0x174>
 648:	cb 01       	movw	r24, r22
 64a:	80 95       	com	r24
 64c:	84 23       	and	r24, r20
 64e:	82 bb       	out	0x12, r24	; 18
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 650:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTD, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTD, LOC_u8Pin);
					break;
 652:	08 95       	ret

	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {

		LOC_enuReturnStatus = Dio_enuChannelError;
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	08 95       	ret
	}

	else if (Copy_u8Level > DIO_u8NUMBER_OF_LEVELS) {

		LOC_enuReturnStatus = Dio_enuLevelError;
 658:	82 e0       	ldi	r24, 0x02	; 2
 65a:	08 95       	ret
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	08 95       	ret
					CLR_BIT(PORTA, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 660:	83 e0       	ldi	r24, 0x03	; 3
 662:	08 95       	ret
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	08 95       	ret
					CLR_BIT(PORTB, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 668:	83 e0       	ldi	r24, 0x03	; 3
 66a:	08 95       	ret
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	08 95       	ret
					CLR_BIT(PORTC, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 670:	83 e0       	ldi	r24, 0x03	; 3
 672:	08 95       	ret
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	08 95       	ret
					CLR_BIT(PORTD, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 678:	83 e0       	ldi	r24, 0x03	; 3
 67a:	08 95       	ret
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 67c:	80 e0       	ldi	r24, 0x00	; 0

		}

	}
	return LOC_enuReturnStatus;
}
 67e:	08 95       	ret

00000680 <Port_vidInit>:
#define PORT_u8OUTPUT_LOW		1

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		0

	DDRA = CONC(PORT_u8MODEPIN07,PORT_u8MODEPIN06,PORT_u8MODEPIN05,PORT_u8MODEPIN04,PORT_u8MODEPIN03,PORT_u8MODEPIN02,PORT_u8MODEPIN01,PORT_u8MODEPIN00);
 680:	8f ef       	ldi	r24, 0xFF	; 255
 682:	8a bb       	out	0x1a, r24	; 26
	DDRB = CONC(PORT_u8MODEPIN15,PORT_u8MODEPIN14,PORT_u8MODEPIN13,PORT_u8MODEPIN12,PORT_u8MODEPIN11,PORT_u8MODEPIN10,PORT_u8MODEPIN09,PORT_u8MODEPIN08);
 684:	87 bb       	out	0x17, r24	; 23
	DDRC = CONC(PORT_u8MODEPIN23,PORT_u8MODEPIN22,PORT_u8MODEPIN21,PORT_u8MODEPIN20,PORT_u8MODEPIN19,PORT_u8MODEPIN18,PORT_u8MODEPIN17,PORT_u8MODEPIN16);
 686:	97 e0       	ldi	r25, 0x07	; 7
 688:	94 bb       	out	0x14, r25	; 20
	DDRD = CONC(PORT_u8MODEPIN31,PORT_u8MODEPIN30,PORT_u8MODEPIN29,PORT_u8MODEPIN28,PORT_u8MODEPIN27,PORT_u8MODEPIN26,PORT_u8MODEPIN25,PORT_u8MODEPIN24);
 68a:	9e e0       	ldi	r25, 0x0E	; 14
 68c:	91 bb       	out	0x11, r25	; 17
#define PORT_u8OUTPUT_LOW		0

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		1

	PORTA = CONC(PORT_u8MODEPIN07,PORT_u8MODEPIN06,PORT_u8MODEPIN05,PORT_u8MODEPIN04,PORT_u8MODEPIN03,PORT_u8MODEPIN02,PORT_u8MODEPIN01,PORT_u8MODEPIN00);
 68e:	1b ba       	out	0x1b, r1	; 27
	PORTB = CONC(PORT_u8MODEPIN15,PORT_u8MODEPIN14,PORT_u8MODEPIN13,PORT_u8MODEPIN12,PORT_u8MODEPIN11,PORT_u8MODEPIN10,PORT_u8MODEPIN09,PORT_u8MODEPIN08);
 690:	18 ba       	out	0x18, r1	; 24
	PORTC = CONC(PORT_u8MODEPIN23,PORT_u8MODEPIN22,PORT_u8MODEPIN21,PORT_u8MODEPIN20,PORT_u8MODEPIN19,PORT_u8MODEPIN18,PORT_u8MODEPIN17,PORT_u8MODEPIN16);
 692:	15 ba       	out	0x15, r1	; 21
	PORTD = CONC(PORT_u8MODEPIN31,PORT_u8MODEPIN30,PORT_u8MODEPIN29,PORT_u8MODEPIN28,PORT_u8MODEPIN27,PORT_u8MODEPIN26,PORT_u8MODEPIN25,PORT_u8MODEPIN24);
 694:	82 bb       	out	0x12, r24	; 18
 696:	08 95       	ret

00000698 <Timer0_voidInit>:
}

u8 Timer0_u8GetTCNT()
{
	return TCNT0;
}
 698:	81 30       	cpi	r24, 0x01	; 1
 69a:	69 f0       	breq	.+26     	; 0x6b6 <Timer0_voidInit+0x1e>
 69c:	28 f0       	brcs	.+10     	; 0x6a8 <Timer0_voidInit+0x10>
 69e:	82 30       	cpi	r24, 0x02	; 2
 6a0:	89 f0       	breq	.+34     	; 0x6c4 <Timer0_voidInit+0x2c>
 6a2:	83 30       	cpi	r24, 0x03	; 3
 6a4:	b1 f0       	breq	.+44     	; 0x6d2 <Timer0_voidInit+0x3a>
 6a6:	1b c0       	rjmp	.+54     	; 0x6de <Timer0_voidInit+0x46>
 6a8:	83 b7       	in	r24, 0x33	; 51
 6aa:	8f 7b       	andi	r24, 0xBF	; 191
 6ac:	83 bf       	out	0x33, r24	; 51
 6ae:	83 b7       	in	r24, 0x33	; 51
 6b0:	87 7f       	andi	r24, 0xF7	; 247
 6b2:	83 bf       	out	0x33, r24	; 51
 6b4:	14 c0       	rjmp	.+40     	; 0x6de <Timer0_voidInit+0x46>
 6b6:	83 b7       	in	r24, 0x33	; 51
 6b8:	8f 7b       	andi	r24, 0xBF	; 191
 6ba:	83 bf       	out	0x33, r24	; 51
 6bc:	83 b7       	in	r24, 0x33	; 51
 6be:	88 60       	ori	r24, 0x08	; 8
 6c0:	83 bf       	out	0x33, r24	; 51
 6c2:	0d c0       	rjmp	.+26     	; 0x6de <Timer0_voidInit+0x46>
 6c4:	83 b7       	in	r24, 0x33	; 51
 6c6:	80 64       	ori	r24, 0x40	; 64
 6c8:	83 bf       	out	0x33, r24	; 51
 6ca:	83 b7       	in	r24, 0x33	; 51
 6cc:	88 60       	ori	r24, 0x08	; 8
 6ce:	83 bf       	out	0x33, r24	; 51
 6d0:	06 c0       	rjmp	.+12     	; 0x6de <Timer0_voidInit+0x46>
 6d2:	83 b7       	in	r24, 0x33	; 51
 6d4:	80 64       	ori	r24, 0x40	; 64
 6d6:	83 bf       	out	0x33, r24	; 51
 6d8:	83 b7       	in	r24, 0x33	; 51
 6da:	87 7f       	andi	r24, 0xF7	; 247
 6dc:	83 bf       	out	0x33, r24	; 51
 6de:	83 b7       	in	r24, 0x33	; 51
 6e0:	88 7f       	andi	r24, 0xF8	; 248
 6e2:	83 bf       	out	0x33, r24	; 51
 6e4:	83 b7       	in	r24, 0x33	; 51
 6e6:	68 2b       	or	r22, r24
 6e8:	63 bf       	out	0x33, r22	; 51
 6ea:	83 b7       	in	r24, 0x33	; 51
 6ec:	8f 7c       	andi	r24, 0xCF	; 207
 6ee:	83 bf       	out	0x33, r24	; 51
 6f0:	83 b7       	in	r24, 0x33	; 51
 6f2:	90 e1       	ldi	r25, 0x10	; 16
 6f4:	49 9f       	mul	r20, r25
 6f6:	a0 01       	movw	r20, r0
 6f8:	11 24       	eor	r1, r1
 6fa:	48 2b       	or	r20, r24
 6fc:	43 bf       	out	0x33, r20	; 51
 6fe:	08 95       	ret

00000700 <Timer0_voidOVF_InterruptEnable>:
 700:	89 b7       	in	r24, 0x39	; 57
 702:	81 60       	ori	r24, 0x01	; 1
 704:	89 bf       	out	0x39, r24	; 57
 706:	08 95       	ret

00000708 <Timer0_voidOVF_SetCallBack>:
 708:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <OVF_Callback+0x1>
 70c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <OVF_Callback>
 710:	08 95       	ret

00000712 <__vector_11>:


ISR(TIMER0_OVF)
{
 712:	1f 92       	push	r1
 714:	0f 92       	push	r0
 716:	0f b6       	in	r0, 0x3f	; 63
 718:	0f 92       	push	r0
 71a:	11 24       	eor	r1, r1
 71c:	2f 93       	push	r18
 71e:	3f 93       	push	r19
 720:	4f 93       	push	r20
 722:	5f 93       	push	r21
 724:	6f 93       	push	r22
 726:	7f 93       	push	r23
 728:	8f 93       	push	r24
 72a:	9f 93       	push	r25
 72c:	af 93       	push	r26
 72e:	bf 93       	push	r27
 730:	ef 93       	push	r30
 732:	ff 93       	push	r31
	if(OVF_Callback != NULL)
 734:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <OVF_Callback>
 738:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <OVF_Callback+0x1>
 73c:	30 97       	sbiw	r30, 0x00	; 0
 73e:	09 f0       	breq	.+2      	; 0x742 <__vector_11+0x30>
	{
		OVF_Callback();
 740:	09 95       	icall
	}

}
 742:	ff 91       	pop	r31
 744:	ef 91       	pop	r30
 746:	bf 91       	pop	r27
 748:	af 91       	pop	r26
 74a:	9f 91       	pop	r25
 74c:	8f 91       	pop	r24
 74e:	7f 91       	pop	r23
 750:	6f 91       	pop	r22
 752:	5f 91       	pop	r21
 754:	4f 91       	pop	r20
 756:	3f 91       	pop	r19
 758:	2f 91       	pop	r18
 75a:	0f 90       	pop	r0
 75c:	0f be       	out	0x3f, r0	; 63
 75e:	0f 90       	pop	r0
 760:	1f 90       	pop	r1
 762:	18 95       	reti

00000764 <__udivmodsi4>:
 764:	a1 e2       	ldi	r26, 0x21	; 33
 766:	1a 2e       	mov	r1, r26
 768:	aa 1b       	sub	r26, r26
 76a:	bb 1b       	sub	r27, r27
 76c:	fd 01       	movw	r30, r26
 76e:	0d c0       	rjmp	.+26     	; 0x78a <__udivmodsi4_ep>

00000770 <__udivmodsi4_loop>:
 770:	aa 1f       	adc	r26, r26
 772:	bb 1f       	adc	r27, r27
 774:	ee 1f       	adc	r30, r30
 776:	ff 1f       	adc	r31, r31
 778:	a2 17       	cp	r26, r18
 77a:	b3 07       	cpc	r27, r19
 77c:	e4 07       	cpc	r30, r20
 77e:	f5 07       	cpc	r31, r21
 780:	20 f0       	brcs	.+8      	; 0x78a <__udivmodsi4_ep>
 782:	a2 1b       	sub	r26, r18
 784:	b3 0b       	sbc	r27, r19
 786:	e4 0b       	sbc	r30, r20
 788:	f5 0b       	sbc	r31, r21

0000078a <__udivmodsi4_ep>:
 78a:	66 1f       	adc	r22, r22
 78c:	77 1f       	adc	r23, r23
 78e:	88 1f       	adc	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	1a 94       	dec	r1
 794:	69 f7       	brne	.-38     	; 0x770 <__udivmodsi4_loop>
 796:	60 95       	com	r22
 798:	70 95       	com	r23
 79a:	80 95       	com	r24
 79c:	90 95       	com	r25
 79e:	9b 01       	movw	r18, r22
 7a0:	ac 01       	movw	r20, r24
 7a2:	bd 01       	movw	r22, r26
 7a4:	cf 01       	movw	r24, r30
 7a6:	08 95       	ret

000007a8 <_exit>:
 7a8:	f8 94       	cli

000007aa <__stop_program>:
 7aa:	ff cf       	rjmp	.-2      	; 0x7aa <__stop_program>
