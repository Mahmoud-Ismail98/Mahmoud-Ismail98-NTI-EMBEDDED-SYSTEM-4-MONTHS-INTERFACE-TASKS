
NTI_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000429c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00800060  0000429c  00004330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080018e  0080018e  0000445e  2**0
                  ALLOC
  3 .stab         00003aec  00000000  00000000  00004460  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bd9  00000000  00000000  00007f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009b25  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000c2c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000d648  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e820  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ecd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f644  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <__vector_1>
       8:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__vector_2>
       c:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 3e 12 	jmp	0x247c	; 0x247c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 39       	cpi	r26, 0x9B	; 155
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 82 19 	call	0x3304	; 0x3304 <main>
      8a:	0c 94 4c 21 	jmp	0x4298	; 0x4298 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 15 21 	jmp	0x422a	; 0x422a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 31 21 	jmp	0x4262	; 0x4262 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 21 21 	jmp	0x4242	; 0x4242 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3d 21 	jmp	0x427a	; 0x427a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 21 21 	jmp	0x4242	; 0x4242 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3d 21 	jmp	0x427a	; 0x427a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 15 21 	jmp	0x422a	; 0x422a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 31 21 	jmp	0x4262	; 0x4262 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1d 21 	jmp	0x423a	; 0x423a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 39 21 	jmp	0x4272	; 0x4272 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 21 21 	jmp	0x4242	; 0x4242 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3d 21 	jmp	0x427a	; 0x427a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 21 21 	jmp	0x4242	; 0x4242 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3d 21 	jmp	0x427a	; 0x427a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 21 21 	jmp	0x4242	; 0x4242 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3d 21 	jmp	0x427a	; 0x427a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 25 21 	jmp	0x424a	; 0x424a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 41 21 	jmp	0x4282	; 0x4282 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 1d 21 	jmp	0x423a	; 0x423a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 39 21 	jmp	0x4272	; 0x4272 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Port_Init>:
#include"PORT_cfg.h"
#include"PORT_prv.h"


void Port_Init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
#define PORT_u8INPUT_FLOATING	0

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		0

	DDRA = CONC(PORT_u8MODE_PIN7,PORT_u8MODE_PIN6,PORT_u8MODE_PIN5,PORT_u8MODE_PIN4,PORT_u8MODE_PIN3,PORT_u8MODE_PIN2,PORT_u8MODE_PIN1,PORT_u8MODE_PIN0);
     e36:	ea e3       	ldi	r30, 0x3A	; 58
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	8e e0       	ldi	r24, 0x0E	; 14
     e3c:	80 83       	st	Z, r24
	DDRB = CONC(PORT_u8MODE_PIN15,PORT_u8MODE_PIN14,PORT_u8MODE_PIN13,PORT_u8MODE_PIN12,PORT_u8MODE_PIN11,PORT_u8MODE_PIN10,PORT_u8MODE_PIN9,PORT_u8MODE_PIN8);
     e3e:	e7 e3       	ldi	r30, 0x37	; 55
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	8f e0       	ldi	r24, 0x0F	; 15
     e44:	80 83       	st	Z, r24
	DDRC = CONC(PORT_u8MODE_PIN23,PORT_u8MODE_PIN22,PORT_u8MODE_PIN21,PORT_u8MODE_PIN20,PORT_u8MODE_PIN19,PORT_u8MODE_PIN18,PORT_u8MODE_PIN17,PORT_u8MODE_PIN16);
     e46:	e4 e3       	ldi	r30, 0x34	; 52
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	10 82       	st	Z, r1
	DDRD = CONC(PORT_u8MODE_PIN31,PORT_u8MODE_PIN30,PORT_u8MODE_PIN29,PORT_u8MODE_PIN28,PORT_u8MODE_PIN27,PORT_u8MODE_PIN26,PORT_u8MODE_PIN25,PORT_u8MODE_PIN24);
     e4c:	e1 e3       	ldi	r30, 0x31	; 49
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	10 82       	st	Z, r1
#define PORT_u8OUTPUT_LOW		0

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		1

	PORTA = CONC(PORT_u8MODE_PIN7,PORT_u8MODE_PIN6,PORT_u8MODE_PIN5,PORT_u8MODE_PIN4,PORT_u8MODE_PIN3,PORT_u8MODE_PIN2,PORT_u8MODE_PIN1,PORT_u8MODE_PIN0);
     e52:	eb e3       	ldi	r30, 0x3B	; 59
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	8e e0       	ldi	r24, 0x0E	; 14
     e58:	80 83       	st	Z, r24
	PORTB = CONC(PORT_u8MODE_PIN15,PORT_u8MODE_PIN14,PORT_u8MODE_PIN13,PORT_u8MODE_PIN12,PORT_u8MODE_PIN11,PORT_u8MODE_PIN10,PORT_u8MODE_PIN9,PORT_u8MODE_PIN8);
     e5a:	e8 e3       	ldi	r30, 0x38	; 56
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	8f e0       	ldi	r24, 0x0F	; 15
     e60:	80 83       	st	Z, r24
	PORTC = CONC(PORT_u8MODE_PIN23,PORT_u8MODE_PIN22,PORT_u8MODE_PIN21,PORT_u8MODE_PIN20,PORT_u8MODE_PIN19,PORT_u8MODE_PIN18,PORT_u8MODE_PIN17,PORT_u8MODE_PIN16);
     e62:	e5 e3       	ldi	r30, 0x35	; 53
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	10 82       	st	Z, r1
	PORTD = CONC(PORT_u8MODE_PIN31,PORT_u8MODE_PIN30,PORT_u8MODE_PIN29,PORT_u8MODE_PIN28,PORT_u8MODE_PIN27,PORT_u8MODE_PIN26,PORT_u8MODE_PIN25,PORT_u8MODE_PIN24);
     e68:	e2 e3       	ldi	r30, 0x32	; 50
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	84 e0       	ldi	r24, 0x04	; 4
     e6e:	80 83       	st	Z, r24
//re-defining again to their initial
#define PORT_u8OUTPUT_LOW 		0
#define PORT_u8INPUT_FLOATING 	2
#define PORT_u8INPUT_PULLUP 	3

}
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <Port_enuSetPinDirection>:

Port_EnumErrorStatus Port_enuSetPinDirection(u8 Copy_u8PinNum , u8 Copy_u8PinDirection) {
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	27 97       	sbiw	r28, 0x07	; 7
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	8c 83       	std	Y+4, r24	; 0x04
     e8c:	6d 83       	std	Y+5, r22	; 0x05

	Port_EnumErrorStatus LOC_EnumReturn = Ok;
     e8e:	1b 82       	std	Y+3, r1	; 0x03
	u8 LOC_u8Port;
	u8 LOC_u8Pin;


	if (Copy_u8PinNum>PORT_u8TOTALNUMBER_OF_PINS) {
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	80 32       	cpi	r24, 0x20	; 32
     e94:	18 f0       	brcs	.+6      	; 0xe9c <Port_enuSetPinDirection+0x26>
		LOC_EnumReturn = PinError;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	8b 83       	std	Y+3, r24	; 0x03
     e9a:	df c0       	rjmp	.+446    	; 0x105a <Port_enuSetPinDirection+0x1e4>
			}

	 else if (Copy_u8PinDirection>PORT_u8NUMBER_OF_DIRECTION) {
     e9c:	8d 81       	ldd	r24, Y+5	; 0x05
     e9e:	82 30       	cpi	r24, 0x02	; 2
     ea0:	18 f0       	brcs	.+6      	; 0xea8 <Port_enuSetPinDirection+0x32>
		 LOC_EnumReturn = ModeError;
     ea2:	82 e0       	ldi	r24, 0x02	; 2
     ea4:	8b 83       	std	Y+3, r24	; 0x03
     ea6:	d9 c0       	rjmp	.+434    	; 0x105a <Port_enuSetPinDirection+0x1e4>
	        }

	 else {
		 //no error so the input is correct so we proceed//
		LOC_u8Port = Copy_u8PinNum / PORT_u8REGISTER_SIZE; //to know which port
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	86 95       	lsr	r24
     eac:	86 95       	lsr	r24
     eae:	86 95       	lsr	r24
     eb0:	8a 83       	std	Y+2, r24	; 0x02
		LOC_u8Pin = Copy_u8PinNum % PORT_u8REGISTER_SIZE; //to know which pin
     eb2:	8c 81       	ldd	r24, Y+4	; 0x04
     eb4:	87 70       	andi	r24, 0x07	; 7
     eb6:	89 83       	std	Y+1, r24	; 0x01
//if Pin direction is not set, it's cleared
		switch (LOC_u8Port) {
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	3f 83       	std	Y+7, r19	; 0x07
     ec0:	2e 83       	std	Y+6, r18	; 0x06
     ec2:	8e 81       	ldd	r24, Y+6	; 0x06
     ec4:	9f 81       	ldd	r25, Y+7	; 0x07
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	91 05       	cpc	r25, r1
     eca:	09 f4       	brne	.+2      	; 0xece <Port_enuSetPinDirection+0x58>
     ecc:	43 c0       	rjmp	.+134    	; 0xf54 <Port_enuSetPinDirection+0xde>
     ece:	2e 81       	ldd	r18, Y+6	; 0x06
     ed0:	3f 81       	ldd	r19, Y+7	; 0x07
     ed2:	22 30       	cpi	r18, 0x02	; 2
     ed4:	31 05       	cpc	r19, r1
     ed6:	2c f4       	brge	.+10     	; 0xee2 <Port_enuSetPinDirection+0x6c>
     ed8:	8e 81       	ldd	r24, Y+6	; 0x06
     eda:	9f 81       	ldd	r25, Y+7	; 0x07
     edc:	00 97       	sbiw	r24, 0x00	; 0
     ede:	71 f0       	breq	.+28     	; 0xefc <Port_enuSetPinDirection+0x86>
     ee0:	bc c0       	rjmp	.+376    	; 0x105a <Port_enuSetPinDirection+0x1e4>
     ee2:	2e 81       	ldd	r18, Y+6	; 0x06
     ee4:	3f 81       	ldd	r19, Y+7	; 0x07
     ee6:	22 30       	cpi	r18, 0x02	; 2
     ee8:	31 05       	cpc	r19, r1
     eea:	09 f4       	brne	.+2      	; 0xeee <Port_enuSetPinDirection+0x78>
     eec:	5f c0       	rjmp	.+190    	; 0xfac <Port_enuSetPinDirection+0x136>
     eee:	8e 81       	ldd	r24, Y+6	; 0x06
     ef0:	9f 81       	ldd	r25, Y+7	; 0x07
     ef2:	83 30       	cpi	r24, 0x03	; 3
     ef4:	91 05       	cpc	r25, r1
     ef6:	09 f4       	brne	.+2      	; 0xefa <Port_enuSetPinDirection+0x84>
     ef8:	85 c0       	rjmp	.+266    	; 0x1004 <Port_enuSetPinDirection+0x18e>
     efa:	af c0       	rjmp	.+350    	; 0x105a <Port_enuSetPinDirection+0x1e4>
		case PORT_u8PORTA:

			if (Copy_u8PinDirection == PORT_u8OUTPUT) {
     efc:	8d 81       	ldd	r24, Y+5	; 0x05
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	a1 f4       	brne	.+40     	; 0xf2a <Port_enuSetPinDirection+0xb4>
				SET_BIT(DDRA, LOC_u8Pin);
     f02:	aa e3       	ldi	r26, 0x3A	; 58
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	ea e3       	ldi	r30, 0x3A	; 58
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <Port_enuSetPinDirection+0xaa>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <Port_enuSetPinDirection+0xa6>
     f24:	84 2b       	or	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	98 c0       	rjmp	.+304    	; 0x105a <Port_enuSetPinDirection+0x1e4>
			} else {
				CLR_BIT(DDRA, LOC_u8Pin);
     f2a:	aa e3       	ldi	r26, 0x3A	; 58
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	ea e3       	ldi	r30, 0x3A	; 58
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <Port_enuSetPinDirection+0xd2>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <Port_enuSetPinDirection+0xce>
     f4c:	80 95       	com	r24
     f4e:	84 23       	and	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	83 c0       	rjmp	.+262    	; 0x105a <Port_enuSetPinDirection+0x1e4>
			}
			break;
		case PORT_u8PORTB:


			if (Copy_u8PinDirection == PORT_u8OUTPUT) {
     f54:	8d 81       	ldd	r24, Y+5	; 0x05
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	a1 f4       	brne	.+40     	; 0xf82 <Port_enuSetPinDirection+0x10c>
				SET_BIT(DDRB, LOC_u8Pin);
     f5a:	a7 e3       	ldi	r26, 0x37	; 55
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e7 e3       	ldi	r30, 0x37	; 55
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <Port_enuSetPinDirection+0x102>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <Port_enuSetPinDirection+0xfe>
     f7c:	84 2b       	or	r24, r20
     f7e:	8c 93       	st	X, r24
     f80:	6c c0       	rjmp	.+216    	; 0x105a <Port_enuSetPinDirection+0x1e4>
			} else {
				CLR_BIT(DDRB, LOC_u8Pin);
     f82:	a7 e3       	ldi	r26, 0x37	; 55
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e7 e3       	ldi	r30, 0x37	; 55
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <Port_enuSetPinDirection+0x12a>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <Port_enuSetPinDirection+0x126>
     fa4:	80 95       	com	r24
     fa6:	84 23       	and	r24, r20
     fa8:	8c 93       	st	X, r24
     faa:	57 c0       	rjmp	.+174    	; 0x105a <Port_enuSetPinDirection+0x1e4>

			break;

		case PORT_u8PORTC:

			if (Copy_u8PinDirection == PORT_u8OUTPUT) {
     fac:	8d 81       	ldd	r24, Y+5	; 0x05
     fae:	81 30       	cpi	r24, 0x01	; 1
     fb0:	a1 f4       	brne	.+40     	; 0xfda <Port_enuSetPinDirection+0x164>
				SET_BIT(DDRC, LOC_u8Pin);
     fb2:	a4 e3       	ldi	r26, 0x34	; 52
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e4 e3       	ldi	r30, 0x34	; 52
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <Port_enuSetPinDirection+0x15a>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <Port_enuSetPinDirection+0x156>
     fd4:	84 2b       	or	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	40 c0       	rjmp	.+128    	; 0x105a <Port_enuSetPinDirection+0x1e4>
			} else {
				CLR_BIT(DDRC, LOC_u8Pin);
     fda:	a4 e3       	ldi	r26, 0x34	; 52
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e4 e3       	ldi	r30, 0x34	; 52
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <Port_enuSetPinDirection+0x182>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <Port_enuSetPinDirection+0x17e>
     ffc:	80 95       	com	r24
     ffe:	84 23       	and	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	2b c0       	rjmp	.+86     	; 0x105a <Port_enuSetPinDirection+0x1e4>

			break;

		case PORT_u8PORTD:

			if (Copy_u8PinDirection == PORT_u8OUTPUT) {
    1004:	8d 81       	ldd	r24, Y+5	; 0x05
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	a1 f4       	brne	.+40     	; 0x1032 <Port_enuSetPinDirection+0x1bc>
				SET_BIT(DDRD, LOC_u8Pin);
    100a:	a1 e3       	ldi	r26, 0x31	; 49
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e1 e3       	ldi	r30, 0x31	; 49
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <Port_enuSetPinDirection+0x1b2>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <Port_enuSetPinDirection+0x1ae>
    102c:	84 2b       	or	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	14 c0       	rjmp	.+40     	; 0x105a <Port_enuSetPinDirection+0x1e4>
			} else {
				CLR_BIT(DDRD, LOC_u8Pin);
    1032:	a1 e3       	ldi	r26, 0x31	; 49
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e1 e3       	ldi	r30, 0x31	; 49
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <Port_enuSetPinDirection+0x1da>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <Port_enuSetPinDirection+0x1d6>
    1054:	80 95       	com	r24
    1056:	84 23       	and	r24, r20
    1058:	8c 93       	st	X, r24
			break;
		}
	}

	/*RETURN ERROR TYPE*/
	return LOC_EnumReturn;
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    105c:	27 96       	adiw	r28, 0x07	; 7
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <Port_enuSetPinMode>:


Port_EnumErrorStatus Port_enuSetPinMode(u8 Copy_u8PinNum, u8 Copy_u8PinMode) {
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	2f 97       	sbiw	r28, 0x0f	; 15
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	8c 83       	std	Y+4, r24	; 0x04
    1084:	6d 83       	std	Y+5, r22	; 0x05

	Port_EnumErrorStatus LOC_EnumReturn = Ok;
    1086:	1b 82       	std	Y+3, r1	; 0x03
	u8 LOC_u8Port;
	u8 LOC_u8Pin;

	if (Copy_u8PinNum > PORT_u8TOTALNUMBER_OF_PINS) {
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	80 32       	cpi	r24, 0x20	; 32
    108c:	18 f0       	brcs	.+6      	; 0x1094 <Port_enuSetPinMode+0x26>
		LOC_EnumReturn = PinError;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	8b 83       	std	Y+3, r24	; 0x03
    1092:	27 c3       	rjmp	.+1614   	; 0x16e2 <Port_enuSetPinMode+0x674>

	} else if (Copy_u8PinMode > PORT_u8INPUT_PULLUP) {
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	84 30       	cpi	r24, 0x04	; 4
    1098:	18 f0       	brcs	.+6      	; 0x10a0 <Port_enuSetPinMode+0x32>
		LOC_EnumReturn = ModeError;
    109a:	82 e0       	ldi	r24, 0x02	; 2
    109c:	8b 83       	std	Y+3, r24	; 0x03
    109e:	21 c3       	rjmp	.+1602   	; 0x16e2 <Port_enuSetPinMode+0x674>
	} else {

		LOC_u8Port = Copy_u8PinNum / PORT_u8REGISTER_SIZE; //TO GET PORT EX: (31/8=3, WHICH 3 IS PORTD)
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	86 95       	lsr	r24
    10a4:	86 95       	lsr	r24
    10a6:	86 95       	lsr	r24
    10a8:	8a 83       	std	Y+2, r24	; 0x02
		LOC_u8Pin = Copy_u8PinNum % PORT_u8REGISTER_SIZE; //TO GET WHICH PIN EX: (31%8=7, WHICH 7 IS PIN7)
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	87 70       	andi	r24, 0x07	; 7
    10ae:	89 83       	std	Y+1, r24	; 0x01

		switch (LOC_u8Port) {
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	3f 87       	std	Y+15, r19	; 0x0f
    10b8:	2e 87       	std	Y+14, r18	; 0x0e
    10ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    10bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	91 05       	cpc	r25, r1
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <Port_enuSetPinMode+0x58>
    10c4:	d5 c0       	rjmp	.+426    	; 0x1270 <Port_enuSetPinMode+0x202>
    10c6:	2e 85       	ldd	r18, Y+14	; 0x0e
    10c8:	3f 85       	ldd	r19, Y+15	; 0x0f
    10ca:	22 30       	cpi	r18, 0x02	; 2
    10cc:	31 05       	cpc	r19, r1
    10ce:	2c f4       	brge	.+10     	; 0x10da <Port_enuSetPinMode+0x6c>
    10d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    10d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	71 f0       	breq	.+28     	; 0x10f4 <Port_enuSetPinMode+0x86>
    10d8:	04 c3       	rjmp	.+1544   	; 0x16e2 <Port_enuSetPinMode+0x674>
    10da:	2e 85       	ldd	r18, Y+14	; 0x0e
    10dc:	3f 85       	ldd	r19, Y+15	; 0x0f
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <Port_enuSetPinMode+0x78>
    10e4:	83 c1       	rjmp	.+774    	; 0x13ec <Port_enuSetPinMode+0x37e>
    10e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    10e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    10ea:	83 30       	cpi	r24, 0x03	; 3
    10ec:	91 05       	cpc	r25, r1
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <Port_enuSetPinMode+0x84>
    10f0:	3b c2       	rjmp	.+1142   	; 0x1568 <Port_enuSetPinMode+0x4fa>
    10f2:	f7 c2       	rjmp	.+1518   	; 0x16e2 <Port_enuSetPinMode+0x674>


		case PORT_u8PORTA:
			switch (Copy_u8PinMode) {
    10f4:	8d 81       	ldd	r24, Y+5	; 0x05
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	3d 87       	std	Y+13, r19	; 0x0d
    10fc:	2c 87       	std	Y+12, r18	; 0x0c
    10fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1100:	9d 85       	ldd	r25, Y+13	; 0x0d
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	91 05       	cpc	r25, r1
    1106:	09 f4       	brne	.+2      	; 0x110a <Port_enuSetPinMode+0x9c>
    1108:	3e c0       	rjmp	.+124    	; 0x1186 <Port_enuSetPinMode+0x118>
    110a:	2c 85       	ldd	r18, Y+12	; 0x0c
    110c:	3d 85       	ldd	r19, Y+13	; 0x0d
    110e:	22 30       	cpi	r18, 0x02	; 2
    1110:	31 05       	cpc	r19, r1
    1112:	2c f4       	brge	.+10     	; 0x111e <Port_enuSetPinMode+0xb0>
    1114:	8c 85       	ldd	r24, Y+12	; 0x0c
    1116:	9d 85       	ldd	r25, Y+13	; 0x0d
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	71 f0       	breq	.+28     	; 0x1138 <Port_enuSetPinMode+0xca>
    111c:	e2 c2       	rjmp	.+1476   	; 0x16e2 <Port_enuSetPinMode+0x674>
    111e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1120:	3d 85       	ldd	r19, Y+13	; 0x0d
    1122:	22 30       	cpi	r18, 0x02	; 2
    1124:	31 05       	cpc	r19, r1
    1126:	09 f4       	brne	.+2      	; 0x112a <Port_enuSetPinMode+0xbc>
    1128:	54 c0       	rjmp	.+168    	; 0x11d2 <Port_enuSetPinMode+0x164>
    112a:	8c 85       	ldd	r24, Y+12	; 0x0c
    112c:	9d 85       	ldd	r25, Y+13	; 0x0d
    112e:	83 30       	cpi	r24, 0x03	; 3
    1130:	91 05       	cpc	r25, r1
    1132:	09 f4       	brne	.+2      	; 0x1136 <Port_enuSetPinMode+0xc8>
    1134:	76 c0       	rjmp	.+236    	; 0x1222 <Port_enuSetPinMode+0x1b4>
    1136:	d5 c2       	rjmp	.+1450   	; 0x16e2 <Port_enuSetPinMode+0x674>
			case PORT_u8OUTPUT_LOW:
				SET_BIT(DDRA, LOC_u8Pin);
    1138:	aa e3       	ldi	r26, 0x3A	; 58
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	ea e3       	ldi	r30, 0x3A	; 58
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <Port_enuSetPinMode+0xe6>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	2a 95       	dec	r18
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <Port_enuSetPinMode+0xe2>
    1158:	84 2b       	or	r24, r20
    115a:	8c 93       	st	X, r24
				CLR_BIT(PORTA, LOC_u8Pin);
    115c:	ab e3       	ldi	r26, 0x3B	; 59
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	eb e3       	ldi	r30, 0x3B	; 59
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 2e       	mov	r0, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <Port_enuSetPinMode+0x10c>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <Port_enuSetPinMode+0x108>
    117e:	80 95       	com	r24
    1180:	84 23       	and	r24, r20
    1182:	8c 93       	st	X, r24
    1184:	ae c2       	rjmp	.+1372   	; 0x16e2 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8OUTPUT_HIGH:
				SET_BIT(DDRA, LOC_u8Pin);
    1186:	aa e3       	ldi	r26, 0x3A	; 58
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ea e3       	ldi	r30, 0x3A	; 58
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <Port_enuSetPinMode+0x134>
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	2a 95       	dec	r18
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <Port_enuSetPinMode+0x130>
    11a6:	84 2b       	or	r24, r20
    11a8:	8c 93       	st	X, r24
				SET_BIT(PORTA, LOC_u8Pin);
    11aa:	ab e3       	ldi	r26, 0x3B	; 59
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	eb e3       	ldi	r30, 0x3B	; 59
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <Port_enuSetPinMode+0x15a>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <Port_enuSetPinMode+0x156>
    11cc:	84 2b       	or	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	88 c2       	rjmp	.+1296   	; 0x16e2 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_FLOATING:
				CLR_BIT(DDRA, LOC_u8Pin);
    11d2:	aa e3       	ldi	r26, 0x3A	; 58
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	ea e3       	ldi	r30, 0x3A	; 58
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <Port_enuSetPinMode+0x180>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	2a 95       	dec	r18
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <Port_enuSetPinMode+0x17c>
    11f2:	80 95       	com	r24
    11f4:	84 23       	and	r24, r20
    11f6:	8c 93       	st	X, r24
				CLR_BIT(PORTA, LOC_u8Pin);
    11f8:	ab e3       	ldi	r26, 0x3B	; 59
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	eb e3       	ldi	r30, 0x3B	; 59
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 2e       	mov	r0, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <Port_enuSetPinMode+0x1a8>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <Port_enuSetPinMode+0x1a4>
    121a:	80 95       	com	r24
    121c:	84 23       	and	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	60 c2       	rjmp	.+1216   	; 0x16e2 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_PULLUP:
				CLR_BIT(DDRA, LOC_u8Pin);
    1222:	aa e3       	ldi	r26, 0x3A	; 58
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	ea e3       	ldi	r30, 0x3A	; 58
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 c0       	rjmp	.+4      	; 0x123e <Port_enuSetPinMode+0x1d0>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	2a 95       	dec	r18
    1240:	e2 f7       	brpl	.-8      	; 0x123a <Port_enuSetPinMode+0x1cc>
    1242:	80 95       	com	r24
    1244:	84 23       	and	r24, r20
    1246:	8c 93       	st	X, r24
				SET_BIT(PORTA, LOC_u8Pin);
    1248:	ab e3       	ldi	r26, 0x3B	; 59
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	eb e3       	ldi	r30, 0x3B	; 59
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <Port_enuSetPinMode+0x1f8>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <Port_enuSetPinMode+0x1f4>
    126a:	84 2b       	or	r24, r20
    126c:	8c 93       	st	X, r24
    126e:	39 c2       	rjmp	.+1138   	; 0x16e2 <Port_enuSetPinMode+0x674>
				break;
			}
			break;

		case PORT_u8PORTB:
			switch (Copy_u8PinMode) {
    1270:	8d 81       	ldd	r24, Y+5	; 0x05
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	3b 87       	std	Y+11, r19	; 0x0b
    1278:	2a 87       	std	Y+10, r18	; 0x0a
    127a:	8a 85       	ldd	r24, Y+10	; 0x0a
    127c:	9b 85       	ldd	r25, Y+11	; 0x0b
    127e:	81 30       	cpi	r24, 0x01	; 1
    1280:	91 05       	cpc	r25, r1
    1282:	09 f4       	brne	.+2      	; 0x1286 <Port_enuSetPinMode+0x218>
    1284:	3e c0       	rjmp	.+124    	; 0x1302 <Port_enuSetPinMode+0x294>
    1286:	2a 85       	ldd	r18, Y+10	; 0x0a
    1288:	3b 85       	ldd	r19, Y+11	; 0x0b
    128a:	22 30       	cpi	r18, 0x02	; 2
    128c:	31 05       	cpc	r19, r1
    128e:	2c f4       	brge	.+10     	; 0x129a <Port_enuSetPinMode+0x22c>
    1290:	8a 85       	ldd	r24, Y+10	; 0x0a
    1292:	9b 85       	ldd	r25, Y+11	; 0x0b
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	71 f0       	breq	.+28     	; 0x12b4 <Port_enuSetPinMode+0x246>
    1298:	24 c2       	rjmp	.+1096   	; 0x16e2 <Port_enuSetPinMode+0x674>
    129a:	2a 85       	ldd	r18, Y+10	; 0x0a
    129c:	3b 85       	ldd	r19, Y+11	; 0x0b
    129e:	22 30       	cpi	r18, 0x02	; 2
    12a0:	31 05       	cpc	r19, r1
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <Port_enuSetPinMode+0x238>
    12a4:	54 c0       	rjmp	.+168    	; 0x134e <Port_enuSetPinMode+0x2e0>
    12a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    12a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    12aa:	83 30       	cpi	r24, 0x03	; 3
    12ac:	91 05       	cpc	r25, r1
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <Port_enuSetPinMode+0x244>
    12b0:	76 c0       	rjmp	.+236    	; 0x139e <Port_enuSetPinMode+0x330>
    12b2:	17 c2       	rjmp	.+1070   	; 0x16e2 <Port_enuSetPinMode+0x674>
			case PORT_u8OUTPUT_LOW:
				SET_BIT(DDRB, LOC_u8Pin);
    12b4:	a7 e3       	ldi	r26, 0x37	; 55
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e7 e3       	ldi	r30, 0x37	; 55
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <Port_enuSetPinMode+0x262>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	2a 95       	dec	r18
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <Port_enuSetPinMode+0x25e>
    12d4:	84 2b       	or	r24, r20
    12d6:	8c 93       	st	X, r24
				CLR_BIT(PORTB, LOC_u8Pin);
    12d8:	a8 e3       	ldi	r26, 0x38	; 56
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e8 e3       	ldi	r30, 0x38	; 56
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	48 2f       	mov	r20, r24
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 2e       	mov	r0, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <Port_enuSetPinMode+0x288>
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	0a 94       	dec	r0
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <Port_enuSetPinMode+0x284>
    12fa:	80 95       	com	r24
    12fc:	84 23       	and	r24, r20
    12fe:	8c 93       	st	X, r24
    1300:	f0 c1       	rjmp	.+992    	; 0x16e2 <Port_enuSetPinMode+0x674>
				break;
			case PORT_u8OUTPUT_HIGH:
				SET_BIT(DDRB, LOC_u8Pin);
    1302:	a7 e3       	ldi	r26, 0x37	; 55
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e7 e3       	ldi	r30, 0x37	; 55
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	48 2f       	mov	r20, r24
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 c0       	rjmp	.+4      	; 0x131e <Port_enuSetPinMode+0x2b0>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	2a 95       	dec	r18
    1320:	e2 f7       	brpl	.-8      	; 0x131a <Port_enuSetPinMode+0x2ac>
    1322:	84 2b       	or	r24, r20
    1324:	8c 93       	st	X, r24
				SET_BIT(PORTB, LOC_u8Pin);
    1326:	a8 e3       	ldi	r26, 0x38	; 56
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e8 e3       	ldi	r30, 0x38	; 56
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <Port_enuSetPinMode+0x2d6>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <Port_enuSetPinMode+0x2d2>
    1348:	84 2b       	or	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	ca c1       	rjmp	.+916    	; 0x16e2 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_FLOATING:
				CLR_BIT(DDRB, LOC_u8Pin);
    134e:	a7 e3       	ldi	r26, 0x37	; 55
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e7 e3       	ldi	r30, 0x37	; 55
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 c0       	rjmp	.+4      	; 0x136a <Port_enuSetPinMode+0x2fc>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	2a 95       	dec	r18
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <Port_enuSetPinMode+0x2f8>
    136e:	80 95       	com	r24
    1370:	84 23       	and	r24, r20
    1372:	8c 93       	st	X, r24
				CLR_BIT(PORTB, LOC_u8Pin);
    1374:	a8 e3       	ldi	r26, 0x38	; 56
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e8 e3       	ldi	r30, 0x38	; 56
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <Port_enuSetPinMode+0x324>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <Port_enuSetPinMode+0x320>
    1396:	80 95       	com	r24
    1398:	84 23       	and	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	a2 c1       	rjmp	.+836    	; 0x16e2 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_PULLUP:
				CLR_BIT(DDRB, LOC_u8Pin);
    139e:	a7 e3       	ldi	r26, 0x37	; 55
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e7 e3       	ldi	r30, 0x37	; 55
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	48 2f       	mov	r20, r24
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <Port_enuSetPinMode+0x34c>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	2a 95       	dec	r18
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <Port_enuSetPinMode+0x348>
    13be:	80 95       	com	r24
    13c0:	84 23       	and	r24, r20
    13c2:	8c 93       	st	X, r24
				SET_BIT(PORTB, LOC_u8Pin);
    13c4:	a8 e3       	ldi	r26, 0x38	; 56
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e8 e3       	ldi	r30, 0x38	; 56
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 2e       	mov	r0, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <Port_enuSetPinMode+0x374>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <Port_enuSetPinMode+0x370>
    13e6:	84 2b       	or	r24, r20
    13e8:	8c 93       	st	X, r24
    13ea:	7b c1       	rjmp	.+758    	; 0x16e2 <Port_enuSetPinMode+0x674>
				break;
			}
			break;

		case PORT_u8PORTC:
			switch (Copy_u8PinMode) {
    13ec:	8d 81       	ldd	r24, Y+5	; 0x05
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	39 87       	std	Y+9, r19	; 0x09
    13f4:	28 87       	std	Y+8, r18	; 0x08
    13f6:	88 85       	ldd	r24, Y+8	; 0x08
    13f8:	99 85       	ldd	r25, Y+9	; 0x09
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	91 05       	cpc	r25, r1
    13fe:	09 f4       	brne	.+2      	; 0x1402 <Port_enuSetPinMode+0x394>
    1400:	3e c0       	rjmp	.+124    	; 0x147e <Port_enuSetPinMode+0x410>
    1402:	28 85       	ldd	r18, Y+8	; 0x08
    1404:	39 85       	ldd	r19, Y+9	; 0x09
    1406:	22 30       	cpi	r18, 0x02	; 2
    1408:	31 05       	cpc	r19, r1
    140a:	2c f4       	brge	.+10     	; 0x1416 <Port_enuSetPinMode+0x3a8>
    140c:	88 85       	ldd	r24, Y+8	; 0x08
    140e:	99 85       	ldd	r25, Y+9	; 0x09
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	71 f0       	breq	.+28     	; 0x1430 <Port_enuSetPinMode+0x3c2>
    1414:	66 c1       	rjmp	.+716    	; 0x16e2 <Port_enuSetPinMode+0x674>
    1416:	28 85       	ldd	r18, Y+8	; 0x08
    1418:	39 85       	ldd	r19, Y+9	; 0x09
    141a:	22 30       	cpi	r18, 0x02	; 2
    141c:	31 05       	cpc	r19, r1
    141e:	09 f4       	brne	.+2      	; 0x1422 <Port_enuSetPinMode+0x3b4>
    1420:	54 c0       	rjmp	.+168    	; 0x14ca <Port_enuSetPinMode+0x45c>
    1422:	88 85       	ldd	r24, Y+8	; 0x08
    1424:	99 85       	ldd	r25, Y+9	; 0x09
    1426:	83 30       	cpi	r24, 0x03	; 3
    1428:	91 05       	cpc	r25, r1
    142a:	09 f4       	brne	.+2      	; 0x142e <Port_enuSetPinMode+0x3c0>
    142c:	76 c0       	rjmp	.+236    	; 0x151a <Port_enuSetPinMode+0x4ac>
    142e:	59 c1       	rjmp	.+690    	; 0x16e2 <Port_enuSetPinMode+0x674>
			case PORT_u8OUTPUT_LOW:
				SET_BIT(DDRC, LOC_u8Pin);
    1430:	a4 e3       	ldi	r26, 0x34	; 52
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e4 e3       	ldi	r30, 0x34	; 52
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	48 2f       	mov	r20, r24
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 c0       	rjmp	.+4      	; 0x144c <Port_enuSetPinMode+0x3de>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	2a 95       	dec	r18
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <Port_enuSetPinMode+0x3da>
    1450:	84 2b       	or	r24, r20
    1452:	8c 93       	st	X, r24
				CLR_BIT(PORTC, LOC_u8Pin);
    1454:	a5 e3       	ldi	r26, 0x35	; 53
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e5 e3       	ldi	r30, 0x35	; 53
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <Port_enuSetPinMode+0x404>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <Port_enuSetPinMode+0x400>
    1476:	80 95       	com	r24
    1478:	84 23       	and	r24, r20
    147a:	8c 93       	st	X, r24
    147c:	32 c1       	rjmp	.+612    	; 0x16e2 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8OUTPUT_HIGH:
				SET_BIT(DDRC, LOC_u8Pin);
    147e:	a4 e3       	ldi	r26, 0x34	; 52
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e4 e3       	ldi	r30, 0x34	; 52
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 c0       	rjmp	.+4      	; 0x149a <Port_enuSetPinMode+0x42c>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	2a 95       	dec	r18
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <Port_enuSetPinMode+0x428>
    149e:	84 2b       	or	r24, r20
    14a0:	8c 93       	st	X, r24
				SET_BIT(PORTC, LOC_u8Pin);
    14a2:	a5 e3       	ldi	r26, 0x35	; 53
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e5 e3       	ldi	r30, 0x35	; 53
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <Port_enuSetPinMode+0x452>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <Port_enuSetPinMode+0x44e>
    14c4:	84 2b       	or	r24, r20
    14c6:	8c 93       	st	X, r24
    14c8:	0c c1       	rjmp	.+536    	; 0x16e2 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_FLOATING:
				CLR_BIT(DDRC, LOC_u8Pin);
    14ca:	a4 e3       	ldi	r26, 0x34	; 52
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e4 e3       	ldi	r30, 0x34	; 52
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	48 2f       	mov	r20, r24
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <Port_enuSetPinMode+0x478>
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	2a 95       	dec	r18
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <Port_enuSetPinMode+0x474>
    14ea:	80 95       	com	r24
    14ec:	84 23       	and	r24, r20
    14ee:	8c 93       	st	X, r24
				CLR_BIT(PORTC, LOC_u8Pin);
    14f0:	a5 e3       	ldi	r26, 0x35	; 53
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	e5 e3       	ldi	r30, 0x35	; 53
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	48 2f       	mov	r20, r24
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 2e       	mov	r0, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <Port_enuSetPinMode+0x4a0>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	0a 94       	dec	r0
    1510:	e2 f7       	brpl	.-8      	; 0x150a <Port_enuSetPinMode+0x49c>
    1512:	80 95       	com	r24
    1514:	84 23       	and	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	e4 c0       	rjmp	.+456    	; 0x16e2 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_PULLUP:
				CLR_BIT(DDRC, LOC_u8Pin);
    151a:	a4 e3       	ldi	r26, 0x34	; 52
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e4 e3       	ldi	r30, 0x34	; 52
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <Port_enuSetPinMode+0x4c8>
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	2a 95       	dec	r18
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <Port_enuSetPinMode+0x4c4>
    153a:	80 95       	com	r24
    153c:	84 23       	and	r24, r20
    153e:	8c 93       	st	X, r24
				SET_BIT(PORTC, LOC_u8Pin);
    1540:	a5 e3       	ldi	r26, 0x35	; 53
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e5 e3       	ldi	r30, 0x35	; 53
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	48 2f       	mov	r20, r24
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 2e       	mov	r0, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <Port_enuSetPinMode+0x4f0>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	0a 94       	dec	r0
    1560:	e2 f7       	brpl	.-8      	; 0x155a <Port_enuSetPinMode+0x4ec>
    1562:	84 2b       	or	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	bd c0       	rjmp	.+378    	; 0x16e2 <Port_enuSetPinMode+0x674>

			break;

		case PORT_u8PORTD:

			switch (Copy_u8PinMode) {
    1568:	8d 81       	ldd	r24, Y+5	; 0x05
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	3f 83       	std	Y+7, r19	; 0x07
    1570:	2e 83       	std	Y+6, r18	; 0x06
    1572:	8e 81       	ldd	r24, Y+6	; 0x06
    1574:	9f 81       	ldd	r25, Y+7	; 0x07
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	91 05       	cpc	r25, r1
    157a:	09 f4       	brne	.+2      	; 0x157e <Port_enuSetPinMode+0x510>
    157c:	3e c0       	rjmp	.+124    	; 0x15fa <Port_enuSetPinMode+0x58c>
    157e:	2e 81       	ldd	r18, Y+6	; 0x06
    1580:	3f 81       	ldd	r19, Y+7	; 0x07
    1582:	22 30       	cpi	r18, 0x02	; 2
    1584:	31 05       	cpc	r19, r1
    1586:	2c f4       	brge	.+10     	; 0x1592 <Port_enuSetPinMode+0x524>
    1588:	8e 81       	ldd	r24, Y+6	; 0x06
    158a:	9f 81       	ldd	r25, Y+7	; 0x07
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	71 f0       	breq	.+28     	; 0x15ac <Port_enuSetPinMode+0x53e>
    1590:	a8 c0       	rjmp	.+336    	; 0x16e2 <Port_enuSetPinMode+0x674>
    1592:	2e 81       	ldd	r18, Y+6	; 0x06
    1594:	3f 81       	ldd	r19, Y+7	; 0x07
    1596:	22 30       	cpi	r18, 0x02	; 2
    1598:	31 05       	cpc	r19, r1
    159a:	09 f4       	brne	.+2      	; 0x159e <Port_enuSetPinMode+0x530>
    159c:	54 c0       	rjmp	.+168    	; 0x1646 <Port_enuSetPinMode+0x5d8>
    159e:	8e 81       	ldd	r24, Y+6	; 0x06
    15a0:	9f 81       	ldd	r25, Y+7	; 0x07
    15a2:	83 30       	cpi	r24, 0x03	; 3
    15a4:	91 05       	cpc	r25, r1
    15a6:	09 f4       	brne	.+2      	; 0x15aa <Port_enuSetPinMode+0x53c>
    15a8:	76 c0       	rjmp	.+236    	; 0x1696 <Port_enuSetPinMode+0x628>
    15aa:	9b c0       	rjmp	.+310    	; 0x16e2 <Port_enuSetPinMode+0x674>

			case PORT_u8OUTPUT_LOW:
				SET_BIT(DDRD, LOC_u8Pin);
    15ac:	a1 e3       	ldi	r26, 0x31	; 49
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e1 e3       	ldi	r30, 0x31	; 49
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	48 2f       	mov	r20, r24
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <Port_enuSetPinMode+0x55a>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	2a 95       	dec	r18
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <Port_enuSetPinMode+0x556>
    15cc:	84 2b       	or	r24, r20
    15ce:	8c 93       	st	X, r24
				CLR_BIT(PORTD, LOC_u8Pin);
    15d0:	a2 e3       	ldi	r26, 0x32	; 50
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e2 e3       	ldi	r30, 0x32	; 50
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <Port_enuSetPinMode+0x580>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <Port_enuSetPinMode+0x57c>
    15f2:	80 95       	com	r24
    15f4:	84 23       	and	r24, r20
    15f6:	8c 93       	st	X, r24
    15f8:	74 c0       	rjmp	.+232    	; 0x16e2 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8OUTPUT_HIGH:
				SET_BIT(DDRD, LOC_u8Pin);
    15fa:	a1 e3       	ldi	r26, 0x31	; 49
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e1 e3       	ldi	r30, 0x31	; 49
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <Port_enuSetPinMode+0x5a8>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	2a 95       	dec	r18
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <Port_enuSetPinMode+0x5a4>
    161a:	84 2b       	or	r24, r20
    161c:	8c 93       	st	X, r24
				SET_BIT(PORTD, LOC_u8Pin);
    161e:	a2 e3       	ldi	r26, 0x32	; 50
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e2 e3       	ldi	r30, 0x32	; 50
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <Port_enuSetPinMode+0x5ce>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <Port_enuSetPinMode+0x5ca>
    1640:	84 2b       	or	r24, r20
    1642:	8c 93       	st	X, r24
    1644:	4e c0       	rjmp	.+156    	; 0x16e2 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_FLOATING:
				CLR_BIT(DDRD, LOC_u8Pin);
    1646:	a1 e3       	ldi	r26, 0x31	; 49
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e1 e3       	ldi	r30, 0x31	; 49
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	48 2f       	mov	r20, r24
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <Port_enuSetPinMode+0x5f4>
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	2a 95       	dec	r18
    1664:	e2 f7       	brpl	.-8      	; 0x165e <Port_enuSetPinMode+0x5f0>
    1666:	80 95       	com	r24
    1668:	84 23       	and	r24, r20
    166a:	8c 93       	st	X, r24
				CLR_BIT(PORTD, LOC_u8Pin);
    166c:	a2 e3       	ldi	r26, 0x32	; 50
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e2 e3       	ldi	r30, 0x32	; 50
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	48 2f       	mov	r20, r24
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 2e       	mov	r0, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <Port_enuSetPinMode+0x61c>
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	0a 94       	dec	r0
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <Port_enuSetPinMode+0x618>
    168e:	80 95       	com	r24
    1690:	84 23       	and	r24, r20
    1692:	8c 93       	st	X, r24
    1694:	26 c0       	rjmp	.+76     	; 0x16e2 <Port_enuSetPinMode+0x674>
				break;

			case PORT_u8INPUT_PULLUP:
				CLR_BIT(DDRD, LOC_u8Pin);
    1696:	a1 e3       	ldi	r26, 0x31	; 49
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e1 e3       	ldi	r30, 0x31	; 49
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <Port_enuSetPinMode+0x644>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	2a 95       	dec	r18
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <Port_enuSetPinMode+0x640>
    16b6:	80 95       	com	r24
    16b8:	84 23       	and	r24, r20
    16ba:	8c 93       	st	X, r24
				SET_BIT(PORTD, LOC_u8Pin);
    16bc:	a2 e3       	ldi	r26, 0x32	; 50
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e2 e3       	ldi	r30, 0x32	; 50
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <Port_enuSetPinMode+0x66c>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <Port_enuSetPinMode+0x668>
    16de:	84 2b       	or	r24, r20
    16e0:	8c 93       	st	X, r24

			break;
		}
	}

	return LOC_EnumReturn;
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    16e4:	2f 96       	adiw	r28, 0x0f	; 15
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	cd bf       	out	0x3d, r28	; 61
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <GIEMode>:
 *  Created on: Oct 21, 2022
 *      Author: Ismail
 */
#include "GIE_prv.h"
#include "GIE.h"
void GIEMode(u8 LocalGIE_Mode){
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <GIEMode+0x6>
    16fc:	0f 92       	push	r0
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	89 83       	std	Y+1, r24	; 0x01
	switch (LocalGIE_Mode){
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	3b 83       	std	Y+3, r19	; 0x03
    170c:	2a 83       	std	Y+2, r18	; 0x02
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	9b 81       	ldd	r25, Y+3	; 0x03
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	69 f0       	breq	.+26     	; 0x1730 <GIEMode+0x3a>
    1716:	2a 81       	ldd	r18, Y+2	; 0x02
    1718:	3b 81       	ldd	r19, Y+3	; 0x03
    171a:	21 30       	cpi	r18, 0x01	; 1
    171c:	31 05       	cpc	r19, r1
    171e:	81 f4       	brne	.+32     	; 0x1740 <GIEMode+0x4a>
	case GIE_ENABLE:
		SET_BIT(SREG,7);
    1720:	af e5       	ldi	r26, 0x5F	; 95
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	ef e5       	ldi	r30, 0x5F	; 95
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	80 68       	ori	r24, 0x80	; 128
    172c:	8c 93       	st	X, r24
    172e:	0f c0       	rjmp	.+30     	; 0x174e <GIEMode+0x58>
		break;
	case GIE_DISABLE:
		CLR_BIT(SREG,7);
    1730:	af e5       	ldi	r26, 0x5F	; 95
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	ef e5       	ldi	r30, 0x5F	; 95
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	8f 77       	andi	r24, 0x7F	; 127
    173c:	8c 93       	st	X, r24
    173e:	07 c0       	rjmp	.+14     	; 0x174e <GIEMode+0x58>
		break;
	default:
		CLR_BIT(SREG,7);
    1740:	af e5       	ldi	r26, 0x5F	; 95
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	ef e5       	ldi	r30, 0x5F	; 95
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	8f 77       	andi	r24, 0x7F	; 127
    174c:	8c 93       	st	X, r24
		break;
	}
}
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <EXIT0_Init>:
#include "EXIT_cfg.h"
#include "EXIT_prv.h"



void EXIT0_Init(){
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif EXIT_SENSE_CONTROL_STATE==EXIT_RISING_EDGE
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,0);
#elif EXIT_SENSE_CONTROL_STATE==EXIT_FALLING_EDGE
	SET_BIT(MCUCR,0);
    1762:	a5 e5       	ldi	r26, 0x55	; 85
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e5 e5       	ldi	r30, 0x55	; 85
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	81 60       	ori	r24, 0x01	; 1
    176e:	8c 93       	st	X, r24
	SET_BIT(MCUCR,0);
    1770:	a5 e5       	ldi	r26, 0x55	; 85
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e5 e5       	ldi	r30, 0x55	; 85
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	81 60       	ori	r24, 0x01	; 1
    177c:	8c 93       	st	X, r24
#endif
/*enable interrupt on int0*/
	SET_BIT(GICR,6);
    177e:	ab e5       	ldi	r26, 0x5B	; 91
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	eb e5       	ldi	r30, 0x5B	; 91
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	80 64       	ori	r24, 0x40	; 64
    178a:	8c 93       	st	X, r24

}
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <EXIT1_Init>:
void EXIT1_Init(){
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif EXIT_SENSE_CONTROL_STATE==EXIT_RISING_EDGE
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,0);
#elif EXIT_SENSE_CONTROL_STATE==EXIT_FALLING_EDGE
	SET_BIT(MCUCR,0);
    179a:	a5 e5       	ldi	r26, 0x55	; 85
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e5 e5       	ldi	r30, 0x55	; 85
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	81 60       	ori	r24, 0x01	; 1
    17a6:	8c 93       	st	X, r24
	SET_BIT(MCUCR,0);
    17a8:	a5 e5       	ldi	r26, 0x55	; 85
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e5 e5       	ldi	r30, 0x55	; 85
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	81 60       	ori	r24, 0x01	; 1
    17b4:	8c 93       	st	X, r24
#endif
/*enable interrupt on int1*/
	SET_BIT(GICR,7);
    17b6:	ab e5       	ldi	r26, 0x5B	; 91
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	eb e5       	ldi	r30, 0x5B	; 91
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	80 68       	ori	r24, 0x80	; 128
    17c2:	8c 93       	st	X, r24


}
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <EXIT2_Init>:

void EXIT2_Init(){
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62

#if EXIT_SENSE_CONTROL_STATE==EXIT_RISING_EDGE
	CLR_BIT(MCUCSR,0);
#elif EXIT_SENSE_CONTROL_STATE==EXIT_FALLING_EDGE
	SET_BIT(MCUCSR,0);
    17d2:	a4 e5       	ldi	r26, 0x54	; 84
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e4 e5       	ldi	r30, 0x54	; 84
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	81 60       	ori	r24, 0x01	; 1
    17de:	8c 93       	st	X, r24
#endif
/*enable interrupt on int2*/
	SET_BIT(GICR,5);
    17e0:	ab e5       	ldi	r26, 0x5B	; 91
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	eb e5       	ldi	r30, 0x5B	; 91
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	80 62       	ori	r24, 0x20	; 32
    17ec:	8c 93       	st	X, r24
}
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <EXTI_voidClearFlag>:

void EXTI_voidClearFlag(u8 Copy_u8Line) {
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <EXTI_voidClearFlag+0x6>
    17fa:	0f 92       	push	r0
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Line) {
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	3b 83       	std	Y+3, r19	; 0x03
    180a:	2a 83       	std	Y+2, r18	; 0x02
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	9b 81       	ldd	r25, Y+3	; 0x03
    1810:	81 30       	cpi	r24, 0x01	; 1
    1812:	91 05       	cpc	r25, r1
    1814:	89 f0       	breq	.+34     	; 0x1838 <EXTI_voidClearFlag+0x44>
    1816:	2a 81       	ldd	r18, Y+2	; 0x02
    1818:	3b 81       	ldd	r19, Y+3	; 0x03
    181a:	22 30       	cpi	r18, 0x02	; 2
    181c:	31 05       	cpc	r19, r1
    181e:	a1 f0       	breq	.+40     	; 0x1848 <EXTI_voidClearFlag+0x54>
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	9b 81       	ldd	r25, Y+3	; 0x03
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	b9 f4       	brne	.+46     	; 0x1856 <EXTI_voidClearFlag+0x62>
	case EXTI_LINE0:
		SET_BIT(GIFR, GIFR_INTF0_BIT);
    1828:	aa e5       	ldi	r26, 0x5A	; 90
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	ea e5       	ldi	r30, 0x5A	; 90
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	80 64       	ori	r24, 0x40	; 64
    1834:	8c 93       	st	X, r24
    1836:	0f c0       	rjmp	.+30     	; 0x1856 <EXTI_voidClearFlag+0x62>
		break;
	case EXTI_LINE1:
		SET_BIT(GIFR, GIFR_INTF1_BIT);
    1838:	aa e5       	ldi	r26, 0x5A	; 90
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	ea e5       	ldi	r30, 0x5A	; 90
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	80 68       	ori	r24, 0x80	; 128
    1844:	8c 93       	st	X, r24
    1846:	07 c0       	rjmp	.+14     	; 0x1856 <EXTI_voidClearFlag+0x62>
		break;
	case EXTI_LINE2:
		SET_BIT(GICR, GICR_INT2_BIT);
    1848:	ab e5       	ldi	r26, 0x5B	; 91
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	eb e5       	ldi	r30, 0x5B	; 91
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	80 62       	ori	r24, 0x20	; 32
    1854:	8c 93       	st	X, r24
		break;
	}
}
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <EXTI_voidCallBack>:
void EXTI_voidCallBack(void (*Copy_pvoidCallBack)(void), u8 Copy_u8EXTILine) {
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	00 d0       	rcall	.+0      	; 0x1868 <EXTI_voidCallBack+0x6>
    1868:	0f 92       	push	r0
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	9a 83       	std	Y+2, r25	; 0x02
    1870:	89 83       	std	Y+1, r24	; 0x01
    1872:	6b 83       	std	Y+3, r22	; 0x03

	if (Copy_pvoidCallBack != NULL) {
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	9a 81       	ldd	r25, Y+2	; 0x02
    1878:	00 97       	sbiw	r24, 0x00	; 0
    187a:	61 f0       	breq	.+24     	; 0x1894 <EXTI_voidCallBack+0x32>
		gptr[Copy_u8EXTILine] = Copy_pvoidCallBack;
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	88 2f       	mov	r24, r24
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	fc 01       	movw	r30, r24
    1888:	e2 57       	subi	r30, 0x72	; 114
    188a:	fe 4f       	sbci	r31, 0xFE	; 254
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	9a 81       	ldd	r25, Y+2	; 0x02
    1890:	91 83       	std	Z+1, r25	; 0x01
    1892:	80 83       	st	Z, r24
	}
}
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <__vector_1>:

void __vector_1(void) {
    18a0:	1f 92       	push	r1
    18a2:	0f 92       	push	r0
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	0f 92       	push	r0
    18a8:	11 24       	eor	r1, r1
    18aa:	2f 93       	push	r18
    18ac:	3f 93       	push	r19
    18ae:	4f 93       	push	r20
    18b0:	5f 93       	push	r21
    18b2:	6f 93       	push	r22
    18b4:	7f 93       	push	r23
    18b6:	8f 93       	push	r24
    18b8:	9f 93       	push	r25
    18ba:	af 93       	push	r26
    18bc:	bf 93       	push	r27
    18be:	ef 93       	push	r30
    18c0:	ff 93       	push	r31
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
	if (gptr[0] != NULL) {
    18ca:	80 91 8e 01 	lds	r24, 0x018E
    18ce:	90 91 8f 01 	lds	r25, 0x018F
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	41 f0       	breq	.+16     	; 0x18e6 <__vector_1+0x46>
		gptr[0]();
    18d6:	e0 91 8e 01 	lds	r30, 0x018E
    18da:	f0 91 8f 01 	lds	r31, 0x018F
    18de:	09 95       	icall
		EXTI_voidClearFlag(EXTI_LINE0);
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <EXTI_voidClearFlag>
	}
}
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	ff 91       	pop	r31
    18ec:	ef 91       	pop	r30
    18ee:	bf 91       	pop	r27
    18f0:	af 91       	pop	r26
    18f2:	9f 91       	pop	r25
    18f4:	8f 91       	pop	r24
    18f6:	7f 91       	pop	r23
    18f8:	6f 91       	pop	r22
    18fa:	5f 91       	pop	r21
    18fc:	4f 91       	pop	r20
    18fe:	3f 91       	pop	r19
    1900:	2f 91       	pop	r18
    1902:	0f 90       	pop	r0
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	0f 90       	pop	r0
    1908:	1f 90       	pop	r1
    190a:	18 95       	reti

0000190c <__vector_2>:

void __vector_2(void) {
    190c:	1f 92       	push	r1
    190e:	0f 92       	push	r0
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	0f 92       	push	r0
    1914:	11 24       	eor	r1, r1
    1916:	2f 93       	push	r18
    1918:	3f 93       	push	r19
    191a:	4f 93       	push	r20
    191c:	5f 93       	push	r21
    191e:	6f 93       	push	r22
    1920:	7f 93       	push	r23
    1922:	8f 93       	push	r24
    1924:	9f 93       	push	r25
    1926:	af 93       	push	r26
    1928:	bf 93       	push	r27
    192a:	ef 93       	push	r30
    192c:	ff 93       	push	r31
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
	if (gptr[1] != NULL) {
    1936:	80 91 90 01 	lds	r24, 0x0190
    193a:	90 91 91 01 	lds	r25, 0x0191
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	41 f0       	breq	.+16     	; 0x1952 <__vector_2+0x46>
		gptr[1]();
    1942:	e0 91 90 01 	lds	r30, 0x0190
    1946:	f0 91 91 01 	lds	r31, 0x0191
    194a:	09 95       	icall
		EXTI_voidClearFlag(EXTI_LINE1);
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <EXTI_voidClearFlag>
	}
}
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	ff 91       	pop	r31
    1958:	ef 91       	pop	r30
    195a:	bf 91       	pop	r27
    195c:	af 91       	pop	r26
    195e:	9f 91       	pop	r25
    1960:	8f 91       	pop	r24
    1962:	7f 91       	pop	r23
    1964:	6f 91       	pop	r22
    1966:	5f 91       	pop	r21
    1968:	4f 91       	pop	r20
    196a:	3f 91       	pop	r19
    196c:	2f 91       	pop	r18
    196e:	0f 90       	pop	r0
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	0f 90       	pop	r0
    1974:	1f 90       	pop	r1
    1976:	18 95       	reti

00001978 <__vector_3>:

void __vector_3(void) {
    1978:	1f 92       	push	r1
    197a:	0f 92       	push	r0
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	0f 92       	push	r0
    1980:	11 24       	eor	r1, r1
    1982:	2f 93       	push	r18
    1984:	3f 93       	push	r19
    1986:	4f 93       	push	r20
    1988:	5f 93       	push	r21
    198a:	6f 93       	push	r22
    198c:	7f 93       	push	r23
    198e:	8f 93       	push	r24
    1990:	9f 93       	push	r25
    1992:	af 93       	push	r26
    1994:	bf 93       	push	r27
    1996:	ef 93       	push	r30
    1998:	ff 93       	push	r31
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
	if (gptr[2] != NULL) {
    19a2:	80 91 92 01 	lds	r24, 0x0192
    19a6:	90 91 93 01 	lds	r25, 0x0193
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	41 f0       	breq	.+16     	; 0x19be <__vector_3+0x46>
		gptr[2]();
    19ae:	e0 91 92 01 	lds	r30, 0x0192
    19b2:	f0 91 93 01 	lds	r31, 0x0193
    19b6:	09 95       	icall
		EXTI_voidClearFlag(EXTI_LINE2);
    19b8:	82 e0       	ldi	r24, 0x02	; 2
    19ba:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <EXTI_voidClearFlag>

	}
}
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	ff 91       	pop	r31
    19c4:	ef 91       	pop	r30
    19c6:	bf 91       	pop	r27
    19c8:	af 91       	pop	r26
    19ca:	9f 91       	pop	r25
    19cc:	8f 91       	pop	r24
    19ce:	7f 91       	pop	r23
    19d0:	6f 91       	pop	r22
    19d2:	5f 91       	pop	r21
    19d4:	4f 91       	pop	r20
    19d6:	3f 91       	pop	r19
    19d8:	2f 91       	pop	r18
    19da:	0f 90       	pop	r0
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	0f 90       	pop	r0
    19e0:	1f 90       	pop	r1
    19e2:	18 95       	reti

000019e4 <Dio_enuWriteChannel>:
#include"Dio_prv.h"
#include"Dio_cfg.h" //THIS FILE IS INCLUDED INCASE THE DRIVER IS CONFIGURABLE IN THE FUTURE.

/*Channel is the pin */

Dio_EnumErrorState  Dio_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	2f 97       	sbiw	r28, 0x0f	; 15
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	8c 83       	std	Y+4, r24	; 0x04
    19fa:	6d 83       	std	Y+5, r22	; 0x05
	Dio_EnumErrorState LOCEnumReturnState = Dio_Ok;
    19fc:	1b 82       	std	Y+3, r1	; 0x03
	u8 LOC_u8Port;
	u8 LOC_u8Pin;
	if (Copy_u8ChannelId > DIO_u8MAXNUMBER_OF_PINS){
    19fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1a00:	80 32       	cpi	r24, 0x20	; 32
    1a02:	18 f0       	brcs	.+6      	; 0x1a0a <Dio_enuWriteChannel+0x26>
		LOCEnumReturnState =Dio_ChannelError;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	8b 83       	std	Y+3, r24	; 0x03
    1a08:	6b c1       	rjmp	.+726    	; 0x1ce0 <Dio_enuWriteChannel+0x2fc>
	}
	else if(Copy_u8Level>DIO_u8MAXNUMBER_OF_LEVELS){
    1a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0c:	83 30       	cpi	r24, 0x03	; 3
    1a0e:	18 f0       	brcs	.+6      	; 0x1a16 <Dio_enuWriteChannel+0x32>
		LOCEnumReturnState= Dio_LevelError;
    1a10:	82 e0       	ldi	r24, 0x02	; 2
    1a12:	8b 83       	std	Y+3, r24	; 0x03
    1a14:	65 c1       	rjmp	.+714    	; 0x1ce0 <Dio_enuWriteChannel+0x2fc>
	}
	else{
		LOC_u8Port = Copy_u8ChannelId / DIO_u8REGISTER_SIZE;
    1a16:	8c 81       	ldd	r24, Y+4	; 0x04
    1a18:	86 95       	lsr	r24
    1a1a:	86 95       	lsr	r24
    1a1c:	86 95       	lsr	r24
    1a1e:	8a 83       	std	Y+2, r24	; 0x02
		LOC_u8Pin = Copy_u8ChannelId % DIO_u8REGISTER_SIZE;
    1a20:	8c 81       	ldd	r24, Y+4	; 0x04
    1a22:	87 70       	andi	r24, 0x07	; 7
    1a24:	89 83       	std	Y+1, r24	; 0x01


	switch (LOC_u8Port) {
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	3f 87       	std	Y+15, r19	; 0x0f
    1a2e:	2e 87       	std	Y+14, r18	; 0x0e
    1a30:	4e 85       	ldd	r20, Y+14	; 0x0e
    1a32:	5f 85       	ldd	r21, Y+15	; 0x0f
    1a34:	41 30       	cpi	r20, 0x01	; 1
    1a36:	51 05       	cpc	r21, r1
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <Dio_enuWriteChannel+0x58>
    1a3a:	67 c0       	rjmp	.+206    	; 0x1b0a <Dio_enuWriteChannel+0x126>
    1a3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a3e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a40:	82 30       	cpi	r24, 0x02	; 2
    1a42:	91 05       	cpc	r25, r1
    1a44:	34 f4       	brge	.+12     	; 0x1a52 <Dio_enuWriteChannel+0x6e>
    1a46:	2e 85       	ldd	r18, Y+14	; 0x0e
    1a48:	3f 85       	ldd	r19, Y+15	; 0x0f
    1a4a:	21 15       	cp	r18, r1
    1a4c:	31 05       	cpc	r19, r1
    1a4e:	71 f0       	breq	.+28     	; 0x1a6c <Dio_enuWriteChannel+0x88>
    1a50:	47 c1       	rjmp	.+654    	; 0x1ce0 <Dio_enuWriteChannel+0x2fc>
    1a52:	4e 85       	ldd	r20, Y+14	; 0x0e
    1a54:	5f 85       	ldd	r21, Y+15	; 0x0f
    1a56:	42 30       	cpi	r20, 0x02	; 2
    1a58:	51 05       	cpc	r21, r1
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <Dio_enuWriteChannel+0x7a>
    1a5c:	a5 c0       	rjmp	.+330    	; 0x1ba8 <Dio_enuWriteChannel+0x1c4>
    1a5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a60:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a62:	83 30       	cpi	r24, 0x03	; 3
    1a64:	91 05       	cpc	r25, r1
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <Dio_enuWriteChannel+0x86>
    1a68:	ee c0       	rjmp	.+476    	; 0x1c46 <Dio_enuWriteChannel+0x262>
    1a6a:	3a c1       	rjmp	.+628    	; 0x1ce0 <Dio_enuWriteChannel+0x2fc>

			case DIO_u8PORTA:
				if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
    1a6c:	ea e3       	ldi	r30, 0x3A	; 58
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	88 2f       	mov	r24, r24
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	a9 01       	movw	r20, r18
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <Dio_enuWriteChannel+0xa0>
    1a80:	55 95       	asr	r21
    1a82:	47 95       	ror	r20
    1a84:	8a 95       	dec	r24
    1a86:	e2 f7       	brpl	.-8      	; 0x1a80 <Dio_enuWriteChannel+0x9c>
    1a88:	ca 01       	movw	r24, r20
    1a8a:	81 70       	andi	r24, 0x01	; 1
    1a8c:	90 70       	andi	r25, 0x00	; 0
    1a8e:	88 23       	and	r24, r24
    1a90:	c9 f1       	breq	.+114    	; 0x1b04 <Dio_enuWriteChannel+0x120>
					switch (Copy_u8Level) {
    1a92:	8d 81       	ldd	r24, Y+5	; 0x05
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	3d 87       	std	Y+13, r19	; 0x0d
    1a9a:	2c 87       	std	Y+12, r18	; 0x0c
    1a9c:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a9e:	5d 85       	ldd	r21, Y+13	; 0x0d
    1aa0:	41 15       	cp	r20, r1
    1aa2:	51 05       	cpc	r21, r1
    1aa4:	d1 f0       	breq	.+52     	; 0x1ada <Dio_enuWriteChannel+0xf6>
    1aa6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1aa8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1aaa:	81 30       	cpi	r24, 0x01	; 1
    1aac:	91 05       	cpc	r25, r1
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <Dio_enuWriteChannel+0xce>
    1ab0:	17 c1       	rjmp	.+558    	; 0x1ce0 <Dio_enuWriteChannel+0x2fc>

					case DIO_u8LEVEL_HIGH:
						SET_BIT(PORTA, LOC_u8Pin);
    1ab2:	ab e3       	ldi	r26, 0x3B	; 59
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	eb e3       	ldi	r30, 0x3B	; 59
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	48 2f       	mov	r20, r24
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	02 2e       	mov	r0, r18
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <Dio_enuWriteChannel+0xec>
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	0a 94       	dec	r0
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <Dio_enuWriteChannel+0xe8>
    1ad4:	84 2b       	or	r24, r20
    1ad6:	8c 93       	st	X, r24
    1ad8:	03 c1       	rjmp	.+518    	; 0x1ce0 <Dio_enuWriteChannel+0x2fc>
						break;

					case DIO_u8LEVEL_LOW:
						CLR_BIT(PORTA, LOC_u8Pin);
    1ada:	ab e3       	ldi	r26, 0x3B	; 59
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	eb e3       	ldi	r30, 0x3B	; 59
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	48 2f       	mov	r20, r24
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	02 2e       	mov	r0, r18
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <Dio_enuWriteChannel+0x114>
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	0a 94       	dec	r0
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <Dio_enuWriteChannel+0x110>
    1afc:	80 95       	com	r24
    1afe:	84 23       	and	r24, r20
    1b00:	8c 93       	st	X, r24
    1b02:	ee c0       	rjmp	.+476    	; 0x1ce0 <Dio_enuWriteChannel+0x2fc>
						break;

					}
				} else {
					LOCEnumReturnState = Dio_DirectionError;
    1b04:	83 e0       	ldi	r24, 0x03	; 3
    1b06:	8b 83       	std	Y+3, r24	; 0x03
    1b08:	eb c0       	rjmp	.+470    	; 0x1ce0 <Dio_enuWriteChannel+0x2fc>
				}
				break;
			case DIO_u8PORTB:
							if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
    1b0a:	e7 e3       	ldi	r30, 0x37	; 55
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	88 2f       	mov	r24, r24
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	a9 01       	movw	r20, r18
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <Dio_enuWriteChannel+0x13e>
    1b1e:	55 95       	asr	r21
    1b20:	47 95       	ror	r20
    1b22:	8a 95       	dec	r24
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <Dio_enuWriteChannel+0x13a>
    1b26:	ca 01       	movw	r24, r20
    1b28:	81 70       	andi	r24, 0x01	; 1
    1b2a:	90 70       	andi	r25, 0x00	; 0
    1b2c:	88 23       	and	r24, r24
    1b2e:	c9 f1       	breq	.+114    	; 0x1ba2 <Dio_enuWriteChannel+0x1be>
								switch (Copy_u8Level) {
    1b30:	8d 81       	ldd	r24, Y+5	; 0x05
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	3b 87       	std	Y+11, r19	; 0x0b
    1b38:	2a 87       	std	Y+10, r18	; 0x0a
    1b3a:	4a 85       	ldd	r20, Y+10	; 0x0a
    1b3c:	5b 85       	ldd	r21, Y+11	; 0x0b
    1b3e:	41 15       	cp	r20, r1
    1b40:	51 05       	cpc	r21, r1
    1b42:	d1 f0       	breq	.+52     	; 0x1b78 <Dio_enuWriteChannel+0x194>
    1b44:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b46:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b48:	81 30       	cpi	r24, 0x01	; 1
    1b4a:	91 05       	cpc	r25, r1
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <Dio_enuWriteChannel+0x16c>
    1b4e:	c8 c0       	rjmp	.+400    	; 0x1ce0 <Dio_enuWriteChannel+0x2fc>

								case DIO_u8LEVEL_HIGH:
									SET_BIT(PORTB, LOC_u8Pin);
    1b50:	a8 e3       	ldi	r26, 0x38	; 56
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e8 e3       	ldi	r30, 0x38	; 56
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	48 2f       	mov	r20, r24
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	02 2e       	mov	r0, r18
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <Dio_enuWriteChannel+0x18a>
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	0a 94       	dec	r0
    1b70:	e2 f7       	brpl	.-8      	; 0x1b6a <Dio_enuWriteChannel+0x186>
    1b72:	84 2b       	or	r24, r20
    1b74:	8c 93       	st	X, r24
    1b76:	b4 c0       	rjmp	.+360    	; 0x1ce0 <Dio_enuWriteChannel+0x2fc>
									break;

								case DIO_u8LEVEL_LOW:
									CLR_BIT(PORTB, LOC_u8Pin);
    1b78:	a8 e3       	ldi	r26, 0x38	; 56
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e8 e3       	ldi	r30, 0x38	; 56
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 2e       	mov	r0, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <Dio_enuWriteChannel+0x1b2>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	0a 94       	dec	r0
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <Dio_enuWriteChannel+0x1ae>
    1b9a:	80 95       	com	r24
    1b9c:	84 23       	and	r24, r20
    1b9e:	8c 93       	st	X, r24
    1ba0:	9f c0       	rjmp	.+318    	; 0x1ce0 <Dio_enuWriteChannel+0x2fc>
									break;

								}
							} else {
								LOCEnumReturnState = Dio_DirectionError;
    1ba2:	83 e0       	ldi	r24, 0x03	; 3
    1ba4:	8b 83       	std	Y+3, r24	; 0x03
    1ba6:	9c c0       	rjmp	.+312    	; 0x1ce0 <Dio_enuWriteChannel+0x2fc>
							}
							break;

			case DIO_u8PORTC:
							if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
    1ba8:	e4 e3       	ldi	r30, 0x34	; 52
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	88 2f       	mov	r24, r24
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a9 01       	movw	r20, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <Dio_enuWriteChannel+0x1dc>
    1bbc:	55 95       	asr	r21
    1bbe:	47 95       	ror	r20
    1bc0:	8a 95       	dec	r24
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <Dio_enuWriteChannel+0x1d8>
    1bc4:	ca 01       	movw	r24, r20
    1bc6:	81 70       	andi	r24, 0x01	; 1
    1bc8:	90 70       	andi	r25, 0x00	; 0
    1bca:	88 23       	and	r24, r24
    1bcc:	c9 f1       	breq	.+114    	; 0x1c40 <Dio_enuWriteChannel+0x25c>
								switch (Copy_u8Level) {
    1bce:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	39 87       	std	Y+9, r19	; 0x09
    1bd6:	28 87       	std	Y+8, r18	; 0x08
    1bd8:	48 85       	ldd	r20, Y+8	; 0x08
    1bda:	59 85       	ldd	r21, Y+9	; 0x09
    1bdc:	41 15       	cp	r20, r1
    1bde:	51 05       	cpc	r21, r1
    1be0:	d1 f0       	breq	.+52     	; 0x1c16 <Dio_enuWriteChannel+0x232>
    1be2:	88 85       	ldd	r24, Y+8	; 0x08
    1be4:	99 85       	ldd	r25, Y+9	; 0x09
    1be6:	81 30       	cpi	r24, 0x01	; 1
    1be8:	91 05       	cpc	r25, r1
    1bea:	09 f0       	breq	.+2      	; 0x1bee <Dio_enuWriteChannel+0x20a>
    1bec:	79 c0       	rjmp	.+242    	; 0x1ce0 <Dio_enuWriteChannel+0x2fc>

								case DIO_u8LEVEL_HIGH:
									SET_BIT(PORTC, LOC_u8Pin);
    1bee:	a5 e3       	ldi	r26, 0x35	; 53
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e5 e3       	ldi	r30, 0x35	; 53
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	48 2f       	mov	r20, r24
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 2e       	mov	r0, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <Dio_enuWriteChannel+0x228>
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	0a 94       	dec	r0
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <Dio_enuWriteChannel+0x224>
    1c10:	84 2b       	or	r24, r20
    1c12:	8c 93       	st	X, r24
    1c14:	65 c0       	rjmp	.+202    	; 0x1ce0 <Dio_enuWriteChannel+0x2fc>
									break;

								case DIO_u8LEVEL_LOW:
									CLR_BIT(PORTC, LOC_u8Pin);
    1c16:	a5 e3       	ldi	r26, 0x35	; 53
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e5 e3       	ldi	r30, 0x35	; 53
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	48 2f       	mov	r20, r24
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	02 2e       	mov	r0, r18
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <Dio_enuWriteChannel+0x250>
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	0a 94       	dec	r0
    1c36:	e2 f7       	brpl	.-8      	; 0x1c30 <Dio_enuWriteChannel+0x24c>
    1c38:	80 95       	com	r24
    1c3a:	84 23       	and	r24, r20
    1c3c:	8c 93       	st	X, r24
    1c3e:	50 c0       	rjmp	.+160    	; 0x1ce0 <Dio_enuWriteChannel+0x2fc>
									break;

								}
							} else {
								LOCEnumReturnState = Dio_DirectionError;
    1c40:	83 e0       	ldi	r24, 0x03	; 3
    1c42:	8b 83       	std	Y+3, r24	; 0x03
    1c44:	4d c0       	rjmp	.+154    	; 0x1ce0 <Dio_enuWriteChannel+0x2fc>
							}
							break;
			case DIO_u8PORTD:
							if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
    1c46:	e1 e3       	ldi	r30, 0x31	; 49
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	28 2f       	mov	r18, r24
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	88 2f       	mov	r24, r24
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	a9 01       	movw	r20, r18
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <Dio_enuWriteChannel+0x27a>
    1c5a:	55 95       	asr	r21
    1c5c:	47 95       	ror	r20
    1c5e:	8a 95       	dec	r24
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <Dio_enuWriteChannel+0x276>
    1c62:	ca 01       	movw	r24, r20
    1c64:	81 70       	andi	r24, 0x01	; 1
    1c66:	90 70       	andi	r25, 0x00	; 0
    1c68:	88 23       	and	r24, r24
    1c6a:	c1 f1       	breq	.+112    	; 0x1cdc <Dio_enuWriteChannel+0x2f8>
								switch (Copy_u8Level) {
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	3f 83       	std	Y+7, r19	; 0x07
    1c74:	2e 83       	std	Y+6, r18	; 0x06
    1c76:	4e 81       	ldd	r20, Y+6	; 0x06
    1c78:	5f 81       	ldd	r21, Y+7	; 0x07
    1c7a:	41 15       	cp	r20, r1
    1c7c:	51 05       	cpc	r21, r1
    1c7e:	c9 f0       	breq	.+50     	; 0x1cb2 <Dio_enuWriteChannel+0x2ce>
    1c80:	8e 81       	ldd	r24, Y+6	; 0x06
    1c82:	9f 81       	ldd	r25, Y+7	; 0x07
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	91 05       	cpc	r25, r1
    1c88:	59 f5       	brne	.+86     	; 0x1ce0 <Dio_enuWriteChannel+0x2fc>

								case DIO_u8LEVEL_HIGH:
									SET_BIT(PORTD, LOC_u8Pin);
    1c8a:	a2 e3       	ldi	r26, 0x32	; 50
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e2 e3       	ldi	r30, 0x32	; 50
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	48 2f       	mov	r20, r24
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	02 2e       	mov	r0, r18
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <Dio_enuWriteChannel+0x2c4>
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	0a 94       	dec	r0
    1caa:	e2 f7       	brpl	.-8      	; 0x1ca4 <Dio_enuWriteChannel+0x2c0>
    1cac:	84 2b       	or	r24, r20
    1cae:	8c 93       	st	X, r24
    1cb0:	17 c0       	rjmp	.+46     	; 0x1ce0 <Dio_enuWriteChannel+0x2fc>
									break;

								case DIO_u8LEVEL_LOW:
									CLR_BIT(PORTD, LOC_u8Pin);
    1cb2:	a2 e3       	ldi	r26, 0x32	; 50
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	e2 e3       	ldi	r30, 0x32	; 50
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	48 2f       	mov	r20, r24
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	28 2f       	mov	r18, r24
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	02 2e       	mov	r0, r18
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <Dio_enuWriteChannel+0x2ec>
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	0a 94       	dec	r0
    1cd2:	e2 f7       	brpl	.-8      	; 0x1ccc <Dio_enuWriteChannel+0x2e8>
    1cd4:	80 95       	com	r24
    1cd6:	84 23       	and	r24, r20
    1cd8:	8c 93       	st	X, r24
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <Dio_enuWriteChannel+0x2fc>
									break;

								}
							} else {
								LOCEnumReturnState = Dio_DirectionError;
    1cdc:	83 e0       	ldi	r24, 0x03	; 3
    1cde:	8b 83       	std	Y+3, r24	; 0x03
							}
							break;
	}
	}
return LOCEnumReturnState;
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1ce2:	2f 96       	adiw	r28, 0x0f	; 15
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <Dio_enuReadChannel>:
Dio_EnumErrorState  Dio_enuReadChannel(u8 Copy_u8ChannelId , pu8 Add_pu8ChannelLevel){
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	28 97       	sbiw	r28, 0x08	; 8
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	8c 83       	std	Y+4, r24	; 0x04
    1d0a:	7e 83       	std	Y+6, r23	; 0x06
    1d0c:	6d 83       	std	Y+5, r22	; 0x05

	Dio_EnumErrorState LOCEnumReturnState = Dio_Ok;
    1d0e:	1b 82       	std	Y+3, r1	; 0x03
		u8 LOC_u8Pin;
		u8 LOC_u8Port;
	if (Add_pu8ChannelLevel== NULL){
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	9e 81       	ldd	r25, Y+6	; 0x06
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	19 f4       	brne	.+6      	; 0x1d1e <Dio_enuReadChannel+0x2a>
		LOCEnumReturnState =Dio_NullPointerError;
    1d18:	84 e0       	ldi	r24, 0x04	; 4
    1d1a:	8b 83       	std	Y+3, r24	; 0x03
    1d1c:	d8 c0       	rjmp	.+432    	; 0x1ece <Dio_enuReadChannel+0x1da>
	}
	else if (Copy_u8ChannelId > DIO_u8MAXNUMBER_OF_PINS){
    1d1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d20:	80 32       	cpi	r24, 0x20	; 32
    1d22:	18 f0       	brcs	.+6      	; 0x1d2a <Dio_enuReadChannel+0x36>
		LOCEnumReturnState =Dio_ChannelError;
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	8b 83       	std	Y+3, r24	; 0x03
    1d28:	d2 c0       	rjmp	.+420    	; 0x1ece <Dio_enuReadChannel+0x1da>
	}
	else{

		LOC_u8Port = Copy_u8ChannelId / DIO_u8REGISTER_SIZE;
    1d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2c:	86 95       	lsr	r24
    1d2e:	86 95       	lsr	r24
    1d30:	86 95       	lsr	r24
    1d32:	89 83       	std	Y+1, r24	; 0x01
		LOC_u8Pin = Copy_u8ChannelId % DIO_u8REGISTER_SIZE;
    1d34:	8c 81       	ldd	r24, Y+4	; 0x04
    1d36:	87 70       	andi	r24, 0x07	; 7
    1d38:	8a 83       	std	Y+2, r24	; 0x02

		switch (LOC_u8Port){
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	38 87       	std	Y+8, r19	; 0x08
    1d42:	2f 83       	std	Y+7, r18	; 0x07
    1d44:	4f 81       	ldd	r20, Y+7	; 0x07
    1d46:	58 85       	ldd	r21, Y+8	; 0x08
    1d48:	41 30       	cpi	r20, 0x01	; 1
    1d4a:	51 05       	cpc	r21, r1
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <Dio_enuReadChannel+0x5c>
    1d4e:	42 c0       	rjmp	.+132    	; 0x1dd4 <Dio_enuReadChannel+0xe0>
    1d50:	8f 81       	ldd	r24, Y+7	; 0x07
    1d52:	98 85       	ldd	r25, Y+8	; 0x08
    1d54:	82 30       	cpi	r24, 0x02	; 2
    1d56:	91 05       	cpc	r25, r1
    1d58:	34 f4       	brge	.+12     	; 0x1d66 <Dio_enuReadChannel+0x72>
    1d5a:	2f 81       	ldd	r18, Y+7	; 0x07
    1d5c:	38 85       	ldd	r19, Y+8	; 0x08
    1d5e:	21 15       	cp	r18, r1
    1d60:	31 05       	cpc	r19, r1
    1d62:	71 f0       	breq	.+28     	; 0x1d80 <Dio_enuReadChannel+0x8c>
    1d64:	b4 c0       	rjmp	.+360    	; 0x1ece <Dio_enuReadChannel+0x1da>
    1d66:	4f 81       	ldd	r20, Y+7	; 0x07
    1d68:	58 85       	ldd	r21, Y+8	; 0x08
    1d6a:	42 30       	cpi	r20, 0x02	; 2
    1d6c:	51 05       	cpc	r21, r1
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <Dio_enuReadChannel+0x7e>
    1d70:	5b c0       	rjmp	.+182    	; 0x1e28 <Dio_enuReadChannel+0x134>
    1d72:	8f 81       	ldd	r24, Y+7	; 0x07
    1d74:	98 85       	ldd	r25, Y+8	; 0x08
    1d76:	83 30       	cpi	r24, 0x03	; 3
    1d78:	91 05       	cpc	r25, r1
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <Dio_enuReadChannel+0x8a>
    1d7c:	7f c0       	rjmp	.+254    	; 0x1e7c <Dio_enuReadChannel+0x188>
    1d7e:	a7 c0       	rjmp	.+334    	; 0x1ece <Dio_enuReadChannel+0x1da>
		case DIO_u8PORTA :
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8INPUT) {
    1d80:	ea e3       	ldi	r30, 0x3A	; 58
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	28 2f       	mov	r18, r24
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	88 2f       	mov	r24, r24
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	a9 01       	movw	r20, r18
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <Dio_enuReadChannel+0xa4>
    1d94:	55 95       	asr	r21
    1d96:	47 95       	ror	r20
    1d98:	8a 95       	dec	r24
    1d9a:	e2 f7       	brpl	.-8      	; 0x1d94 <Dio_enuReadChannel+0xa0>
    1d9c:	ca 01       	movw	r24, r20
    1d9e:	81 70       	andi	r24, 0x01	; 1
    1da0:	90 70       	andi	r25, 0x00	; 0
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	a1 f4       	brne	.+40     	; 0x1dce <Dio_enuReadChannel+0xda>

					*Add_pu8ChannelLevel = GET_BIT(PINA, LOC_u8Pin);
    1da6:	e9 e3       	ldi	r30, 0x39	; 57
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	28 2f       	mov	r18, r24
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	88 2f       	mov	r24, r24
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	a9 01       	movw	r20, r18
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <Dio_enuReadChannel+0xca>
    1dba:	55 95       	asr	r21
    1dbc:	47 95       	ror	r20
    1dbe:	8a 95       	dec	r24
    1dc0:	e2 f7       	brpl	.-8      	; 0x1dba <Dio_enuReadChannel+0xc6>
    1dc2:	ca 01       	movw	r24, r20
    1dc4:	81 70       	andi	r24, 0x01	; 1
    1dc6:	ed 81       	ldd	r30, Y+5	; 0x05
    1dc8:	fe 81       	ldd	r31, Y+6	; 0x06
    1dca:	80 83       	st	Z, r24
    1dcc:	80 c0       	rjmp	.+256    	; 0x1ece <Dio_enuReadChannel+0x1da>
				}
			else {
							LOCEnumReturnState = Dio_DirectionError;
    1dce:	83 e0       	ldi	r24, 0x03	; 3
    1dd0:	8b 83       	std	Y+3, r24	; 0x03
    1dd2:	7d c0       	rjmp	.+250    	; 0x1ece <Dio_enuReadChannel+0x1da>
						}
						break;
		case DIO_u8PORTB :
					if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8INPUT) {
    1dd4:	e7 e3       	ldi	r30, 0x37	; 55
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	a9 01       	movw	r20, r18
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <Dio_enuReadChannel+0xf8>
    1de8:	55 95       	asr	r21
    1dea:	47 95       	ror	r20
    1dec:	8a 95       	dec	r24
    1dee:	e2 f7       	brpl	.-8      	; 0x1de8 <Dio_enuReadChannel+0xf4>
    1df0:	ca 01       	movw	r24, r20
    1df2:	81 70       	andi	r24, 0x01	; 1
    1df4:	90 70       	andi	r25, 0x00	; 0
    1df6:	00 97       	sbiw	r24, 0x00	; 0
    1df8:	a1 f4       	brne	.+40     	; 0x1e22 <Dio_enuReadChannel+0x12e>

							*Add_pu8ChannelLevel = GET_BIT(PINB, LOC_u8Pin);
    1dfa:	e6 e3       	ldi	r30, 0x36	; 54
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	88 2f       	mov	r24, r24
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	a9 01       	movw	r20, r18
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <Dio_enuReadChannel+0x11e>
    1e0e:	55 95       	asr	r21
    1e10:	47 95       	ror	r20
    1e12:	8a 95       	dec	r24
    1e14:	e2 f7       	brpl	.-8      	; 0x1e0e <Dio_enuReadChannel+0x11a>
    1e16:	ca 01       	movw	r24, r20
    1e18:	81 70       	andi	r24, 0x01	; 1
    1e1a:	ed 81       	ldd	r30, Y+5	; 0x05
    1e1c:	fe 81       	ldd	r31, Y+6	; 0x06
    1e1e:	80 83       	st	Z, r24
    1e20:	56 c0       	rjmp	.+172    	; 0x1ece <Dio_enuReadChannel+0x1da>
						}
					else {
									LOCEnumReturnState = Dio_DirectionError;
    1e22:	83 e0       	ldi	r24, 0x03	; 3
    1e24:	8b 83       	std	Y+3, r24	; 0x03
    1e26:	53 c0       	rjmp	.+166    	; 0x1ece <Dio_enuReadChannel+0x1da>
								}
								break;
		case DIO_u8PORTC :
					if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8INPUT) {
    1e28:	e4 e3       	ldi	r30, 0x34	; 52
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	28 2f       	mov	r18, r24
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	88 2f       	mov	r24, r24
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	a9 01       	movw	r20, r18
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <Dio_enuReadChannel+0x14c>
    1e3c:	55 95       	asr	r21
    1e3e:	47 95       	ror	r20
    1e40:	8a 95       	dec	r24
    1e42:	e2 f7       	brpl	.-8      	; 0x1e3c <Dio_enuReadChannel+0x148>
    1e44:	ca 01       	movw	r24, r20
    1e46:	81 70       	andi	r24, 0x01	; 1
    1e48:	90 70       	andi	r25, 0x00	; 0
    1e4a:	00 97       	sbiw	r24, 0x00	; 0
    1e4c:	a1 f4       	brne	.+40     	; 0x1e76 <Dio_enuReadChannel+0x182>

							*Add_pu8ChannelLevel = GET_BIT(PINC, LOC_u8Pin);
    1e4e:	e3 e3       	ldi	r30, 0x33	; 51
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	88 2f       	mov	r24, r24
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	a9 01       	movw	r20, r18
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <Dio_enuReadChannel+0x172>
    1e62:	55 95       	asr	r21
    1e64:	47 95       	ror	r20
    1e66:	8a 95       	dec	r24
    1e68:	e2 f7       	brpl	.-8      	; 0x1e62 <Dio_enuReadChannel+0x16e>
    1e6a:	ca 01       	movw	r24, r20
    1e6c:	81 70       	andi	r24, 0x01	; 1
    1e6e:	ed 81       	ldd	r30, Y+5	; 0x05
    1e70:	fe 81       	ldd	r31, Y+6	; 0x06
    1e72:	80 83       	st	Z, r24
    1e74:	2c c0       	rjmp	.+88     	; 0x1ece <Dio_enuReadChannel+0x1da>
						}
					else {
									LOCEnumReturnState = Dio_DirectionError;
    1e76:	83 e0       	ldi	r24, 0x03	; 3
    1e78:	8b 83       	std	Y+3, r24	; 0x03
    1e7a:	29 c0       	rjmp	.+82     	; 0x1ece <Dio_enuReadChannel+0x1da>
								}
								break;

		case DIO_u8PORTD :
					if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8INPUT) {
    1e7c:	e1 e3       	ldi	r30, 0x31	; 49
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	88 2f       	mov	r24, r24
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	a9 01       	movw	r20, r18
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <Dio_enuReadChannel+0x1a0>
    1e90:	55 95       	asr	r21
    1e92:	47 95       	ror	r20
    1e94:	8a 95       	dec	r24
    1e96:	e2 f7       	brpl	.-8      	; 0x1e90 <Dio_enuReadChannel+0x19c>
    1e98:	ca 01       	movw	r24, r20
    1e9a:	81 70       	andi	r24, 0x01	; 1
    1e9c:	90 70       	andi	r25, 0x00	; 0
    1e9e:	00 97       	sbiw	r24, 0x00	; 0
    1ea0:	a1 f4       	brne	.+40     	; 0x1eca <Dio_enuReadChannel+0x1d6>

							*Add_pu8ChannelLevel = GET_BIT(PIND, LOC_u8Pin);
    1ea2:	e0 e3       	ldi	r30, 0x30	; 48
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	88 2f       	mov	r24, r24
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	a9 01       	movw	r20, r18
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <Dio_enuReadChannel+0x1c6>
    1eb6:	55 95       	asr	r21
    1eb8:	47 95       	ror	r20
    1eba:	8a 95       	dec	r24
    1ebc:	e2 f7       	brpl	.-8      	; 0x1eb6 <Dio_enuReadChannel+0x1c2>
    1ebe:	ca 01       	movw	r24, r20
    1ec0:	81 70       	andi	r24, 0x01	; 1
    1ec2:	ed 81       	ldd	r30, Y+5	; 0x05
    1ec4:	fe 81       	ldd	r31, Y+6	; 0x06
    1ec6:	80 83       	st	Z, r24
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <Dio_enuReadChannel+0x1da>
						}
					else {
									LOCEnumReturnState = Dio_DirectionError;
    1eca:	83 e0       	ldi	r24, 0x03	; 3
    1ecc:	8b 83       	std	Y+3, r24	; 0x03


		}
	}

return LOCEnumReturnState;
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1ed0:	28 96       	adiw	r28, 0x08	; 8
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <Dio_enuWritePort>:
Dio_EnumErrorState  Dio_enuWritePort(u8 Copy_u8PortId , u8 Copy_u8Value){
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <Dio_enuWritePort+0x6>
    1ee8:	00 d0       	rcall	.+0      	; 0x1eea <Dio_enuWritePort+0x8>
    1eea:	0f 92       	push	r0
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	8a 83       	std	Y+2, r24	; 0x02
    1ef2:	6b 83       	std	Y+3, r22	; 0x03
	Dio_EnumErrorState LOCEnumReturnState = Dio_Ok;
    1ef4:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortId > DIO_u8MAXNUMBER_OF_PORTS ){
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	84 30       	cpi	r24, 0x04	; 4
    1efa:	18 f0       	brcs	.+6      	; 0x1f02 <Dio_enuWritePort+0x20>
		LOCEnumReturnState = Dio_PortRangeError;
    1efc:	85 e0       	ldi	r24, 0x05	; 5
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	32 c0       	rjmp	.+100    	; 0x1f66 <Dio_enuWritePort+0x84>
	}
	else {
		switch (Copy_u8PortId){
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	3d 83       	std	Y+5, r19	; 0x05
    1f0a:	2c 83       	std	Y+4, r18	; 0x04
    1f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f10:	81 30       	cpi	r24, 0x01	; 1
    1f12:	91 05       	cpc	r25, r1
    1f14:	d1 f0       	breq	.+52     	; 0x1f4a <Dio_enuWritePort+0x68>
    1f16:	2c 81       	ldd	r18, Y+4	; 0x04
    1f18:	3d 81       	ldd	r19, Y+5	; 0x05
    1f1a:	22 30       	cpi	r18, 0x02	; 2
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	2c f4       	brge	.+10     	; 0x1f2a <Dio_enuWritePort+0x48>
    1f20:	8c 81       	ldd	r24, Y+4	; 0x04
    1f22:	9d 81       	ldd	r25, Y+5	; 0x05
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	61 f0       	breq	.+24     	; 0x1f40 <Dio_enuWritePort+0x5e>
    1f28:	1e c0       	rjmp	.+60     	; 0x1f66 <Dio_enuWritePort+0x84>
    1f2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f2e:	22 30       	cpi	r18, 0x02	; 2
    1f30:	31 05       	cpc	r19, r1
    1f32:	81 f0       	breq	.+32     	; 0x1f54 <Dio_enuWritePort+0x72>
    1f34:	8c 81       	ldd	r24, Y+4	; 0x04
    1f36:	9d 81       	ldd	r25, Y+5	; 0x05
    1f38:	83 30       	cpi	r24, 0x03	; 3
    1f3a:	91 05       	cpc	r25, r1
    1f3c:	81 f0       	breq	.+32     	; 0x1f5e <Dio_enuWritePort+0x7c>
    1f3e:	13 c0       	rjmp	.+38     	; 0x1f66 <Dio_enuWritePort+0x84>
			case DIO_u8PORTA:
							ASSIGN_REG(PORTA, Copy_u8Value);
    1f40:	eb e3       	ldi	r30, 0x3B	; 59
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	80 83       	st	Z, r24
    1f48:	0e c0       	rjmp	.+28     	; 0x1f66 <Dio_enuWritePort+0x84>
							break;
			case DIO_u8PORTB:
							ASSIGN_REG(PORTB, Copy_u8Value);
    1f4a:	e8 e3       	ldi	r30, 0x38	; 56
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	80 83       	st	Z, r24
    1f52:	09 c0       	rjmp	.+18     	; 0x1f66 <Dio_enuWritePort+0x84>
							break;
			case DIO_u8PORTC:
							ASSIGN_REG(PORTC, Copy_u8Value);
    1f54:	e5 e3       	ldi	r30, 0x35	; 53
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	80 83       	st	Z, r24
    1f5c:	04 c0       	rjmp	.+8      	; 0x1f66 <Dio_enuWritePort+0x84>
							break;
			case DIO_u8PORTD:
						ASSIGN_REG(PORTD, Copy_u8Value);
    1f5e:	e2 e3       	ldi	r30, 0x32	; 50
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	80 83       	st	Z, r24


	}

}
	return LOCEnumReturnState;
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <Dio_enuReadPort>:
Dio_EnumErrorState  Dio_enuReadPort(u8 Copy_u8PortId , pu8 Add_pu8PortValue){
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	00 d0       	rcall	.+0      	; 0x1f7e <Dio_enuReadPort+0x6>
    1f7e:	00 d0       	rcall	.+0      	; 0x1f80 <Dio_enuReadPort+0x8>
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <Dio_enuReadPort+0xa>
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	8a 83       	std	Y+2, r24	; 0x02
    1f88:	7c 83       	std	Y+4, r23	; 0x04
    1f8a:	6b 83       	std	Y+3, r22	; 0x03
	Dio_EnumErrorState LOCEnumReturnState = Dio_Ok;
    1f8c:	19 82       	std	Y+1, r1	; 0x01
		if (Copy_u8PortId > DIO_u8MAXNUMBER_OF_PORTS ){
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	84 30       	cpi	r24, 0x04	; 4
    1f92:	10 f0       	brcs	.+4      	; 0x1f98 <Dio_enuReadPort+0x20>
			LOCEnumReturnState = Dio_PortRangeError;
    1f94:	85 e0       	ldi	r24, 0x05	; 5
    1f96:	89 83       	std	Y+1, r24	; 0x01
		}
		if(Add_pu8PortValue == NULL){
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	19 f4       	brne	.+6      	; 0x1fa6 <Dio_enuReadPort+0x2e>
			LOCEnumReturnState = Dio_NullPointerError;
    1fa0:	84 e0       	ldi	r24, 0x04	; 4
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    1fa4:	3a c0       	rjmp	.+116    	; 0x201a <Dio_enuReadPort+0xa2>
		}
		else {
			switch (Copy_u8PortId){
    1fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa8:	28 2f       	mov	r18, r24
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	3e 83       	std	Y+6, r19	; 0x06
    1fae:	2d 83       	std	Y+5, r18	; 0x05
    1fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb4:	81 30       	cpi	r24, 0x01	; 1
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	e1 f0       	breq	.+56     	; 0x1ff2 <Dio_enuReadPort+0x7a>
    1fba:	2d 81       	ldd	r18, Y+5	; 0x05
    1fbc:	3e 81       	ldd	r19, Y+6	; 0x06
    1fbe:	22 30       	cpi	r18, 0x02	; 2
    1fc0:	31 05       	cpc	r19, r1
    1fc2:	2c f4       	brge	.+10     	; 0x1fce <Dio_enuReadPort+0x56>
    1fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	61 f0       	breq	.+24     	; 0x1fe4 <Dio_enuReadPort+0x6c>
    1fcc:	26 c0       	rjmp	.+76     	; 0x201a <Dio_enuReadPort+0xa2>
    1fce:	2d 81       	ldd	r18, Y+5	; 0x05
    1fd0:	3e 81       	ldd	r19, Y+6	; 0x06
    1fd2:	22 30       	cpi	r18, 0x02	; 2
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	a1 f0       	breq	.+40     	; 0x2000 <Dio_enuReadPort+0x88>
    1fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fda:	9e 81       	ldd	r25, Y+6	; 0x06
    1fdc:	83 30       	cpi	r24, 0x03	; 3
    1fde:	91 05       	cpc	r25, r1
    1fe0:	b1 f0       	breq	.+44     	; 0x200e <Dio_enuReadPort+0x96>
    1fe2:	1b c0       	rjmp	.+54     	; 0x201a <Dio_enuReadPort+0xa2>
				case DIO_u8PORTA:
					*Add_pu8PortValue = PINA;
    1fe4:	e9 e3       	ldi	r30, 0x39	; 57
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	eb 81       	ldd	r30, Y+3	; 0x03
    1fec:	fc 81       	ldd	r31, Y+4	; 0x04
    1fee:	80 83       	st	Z, r24
    1ff0:	14 c0       	rjmp	.+40     	; 0x201a <Dio_enuReadPort+0xa2>
								break;
				case DIO_u8PORTB:
					*Add_pu8PortValue = PINB;
    1ff2:	e6 e3       	ldi	r30, 0x36	; 54
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	eb 81       	ldd	r30, Y+3	; 0x03
    1ffa:	fc 81       	ldd	r31, Y+4	; 0x04
    1ffc:	80 83       	st	Z, r24
    1ffe:	0d c0       	rjmp	.+26     	; 0x201a <Dio_enuReadPort+0xa2>
								break;
				case DIO_u8PORTC:
					*Add_pu8PortValue = PINC;
    2000:	e3 e3       	ldi	r30, 0x33	; 51
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	eb 81       	ldd	r30, Y+3	; 0x03
    2008:	fc 81       	ldd	r31, Y+4	; 0x04
    200a:	80 83       	st	Z, r24
    200c:	06 c0       	rjmp	.+12     	; 0x201a <Dio_enuReadPort+0xa2>
								break;
				case DIO_u8PORTD:
					*Add_pu8PortValue = PIND;
    200e:	e0 e3       	ldi	r30, 0x30	; 48
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	eb 81       	ldd	r30, Y+3	; 0x03
    2016:	fc 81       	ldd	r31, Y+4	; 0x04
    2018:	80 83       	st	Z, r24


		}

	}
		return LOCEnumReturnState;
    201a:	89 81       	ldd	r24, Y+1	; 0x01
}
    201c:	26 96       	adiw	r28, 0x06	; 6
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <Dio_enuFlipChannel>:
Dio_EnumErrorState  Dio_enuFlipChannel(u8 Copy_u8ChannelId ){
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	00 d0       	rcall	.+0      	; 0x2034 <Dio_enuFlipChannel+0x6>
    2034:	00 d0       	rcall	.+0      	; 0x2036 <Dio_enuFlipChannel+0x8>
    2036:	00 d0       	rcall	.+0      	; 0x2038 <Dio_enuFlipChannel+0xa>
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	8c 83       	std	Y+4, r24	; 0x04

	Dio_EnumErrorState LOCEnumReturnState = Dio_Ok;
    203e:	1b 82       	std	Y+3, r1	; 0x03
		u8 LOC_u8Pin;
		u8 LOC_u8Port;
 if (Copy_u8ChannelId > DIO_u8MAXNUMBER_OF_PINS){
    2040:	8c 81       	ldd	r24, Y+4	; 0x04
    2042:	80 32       	cpi	r24, 0x20	; 32
    2044:	18 f0       	brcs	.+6      	; 0x204c <Dio_enuFlipChannel+0x1e>
			LOCEnumReturnState =Dio_ChannelError;
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	8b 83       	std	Y+3, r24	; 0x03
    204a:	c8 c0       	rjmp	.+400    	; 0x21dc <Dio_enuFlipChannel+0x1ae>
		}
		else{
			LOC_u8Port = Copy_u8ChannelId / DIO_u8REGISTER_SIZE;
    204c:	8c 81       	ldd	r24, Y+4	; 0x04
    204e:	86 95       	lsr	r24
    2050:	86 95       	lsr	r24
    2052:	86 95       	lsr	r24
    2054:	89 83       	std	Y+1, r24	; 0x01
			LOC_u8Pin = Copy_u8ChannelId % DIO_u8REGISTER_SIZE;
    2056:	8c 81       	ldd	r24, Y+4	; 0x04
    2058:	87 70       	andi	r24, 0x07	; 7
    205a:	8a 83       	std	Y+2, r24	; 0x02
			switch (LOC_u8Port) {
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	28 2f       	mov	r18, r24
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	3e 83       	std	Y+6, r19	; 0x06
    2064:	2d 83       	std	Y+5, r18	; 0x05
    2066:	4d 81       	ldd	r20, Y+5	; 0x05
    2068:	5e 81       	ldd	r21, Y+6	; 0x06
    206a:	41 30       	cpi	r20, 0x01	; 1
    206c:	51 05       	cpc	r21, r1
    206e:	09 f4       	brne	.+2      	; 0x2072 <Dio_enuFlipChannel+0x44>
    2070:	40 c0       	rjmp	.+128    	; 0x20f2 <Dio_enuFlipChannel+0xc4>
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	9e 81       	ldd	r25, Y+6	; 0x06
    2076:	82 30       	cpi	r24, 0x02	; 2
    2078:	91 05       	cpc	r25, r1
    207a:	34 f4       	brge	.+12     	; 0x2088 <Dio_enuFlipChannel+0x5a>
    207c:	2d 81       	ldd	r18, Y+5	; 0x05
    207e:	3e 81       	ldd	r19, Y+6	; 0x06
    2080:	21 15       	cp	r18, r1
    2082:	31 05       	cpc	r19, r1
    2084:	71 f0       	breq	.+28     	; 0x20a2 <Dio_enuFlipChannel+0x74>
    2086:	aa c0       	rjmp	.+340    	; 0x21dc <Dio_enuFlipChannel+0x1ae>
    2088:	4d 81       	ldd	r20, Y+5	; 0x05
    208a:	5e 81       	ldd	r21, Y+6	; 0x06
    208c:	42 30       	cpi	r20, 0x02	; 2
    208e:	51 05       	cpc	r21, r1
    2090:	09 f4       	brne	.+2      	; 0x2094 <Dio_enuFlipChannel+0x66>
    2092:	57 c0       	rjmp	.+174    	; 0x2142 <Dio_enuFlipChannel+0x114>
    2094:	8d 81       	ldd	r24, Y+5	; 0x05
    2096:	9e 81       	ldd	r25, Y+6	; 0x06
    2098:	83 30       	cpi	r24, 0x03	; 3
    209a:	91 05       	cpc	r25, r1
    209c:	09 f4       	brne	.+2      	; 0x20a0 <Dio_enuFlipChannel+0x72>
    209e:	78 c0       	rjmp	.+240    	; 0x2190 <Dio_enuFlipChannel+0x162>
    20a0:	9d c0       	rjmp	.+314    	; 0x21dc <Dio_enuFlipChannel+0x1ae>

					case DIO_u8PORTA:
						if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
    20a2:	ea e3       	ldi	r30, 0x3A	; 58
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	28 2f       	mov	r18, r24
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	88 2f       	mov	r24, r24
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	a9 01       	movw	r20, r18
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <Dio_enuFlipChannel+0x8c>
    20b6:	55 95       	asr	r21
    20b8:	47 95       	ror	r20
    20ba:	8a 95       	dec	r24
    20bc:	e2 f7       	brpl	.-8      	; 0x20b6 <Dio_enuFlipChannel+0x88>
    20be:	ca 01       	movw	r24, r20
    20c0:	81 70       	andi	r24, 0x01	; 1
    20c2:	90 70       	andi	r25, 0x00	; 0
    20c4:	88 23       	and	r24, r24
    20c6:	09 f4       	brne	.+2      	; 0x20ca <Dio_enuFlipChannel+0x9c>
    20c8:	89 c0       	rjmp	.+274    	; 0x21dc <Dio_enuFlipChannel+0x1ae>
							TGL_BIT(PORTA,LOC_u8Pin);
    20ca:	ab e3       	ldi	r26, 0x3B	; 59
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	eb e3       	ldi	r30, 0x3B	; 59
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	48 2f       	mov	r20, r24
    20d6:	8a 81       	ldd	r24, Y+2	; 0x02
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	02 2e       	mov	r0, r18
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <Dio_enuFlipChannel+0xba>
    20e4:	88 0f       	add	r24, r24
    20e6:	99 1f       	adc	r25, r25
    20e8:	0a 94       	dec	r0
    20ea:	e2 f7       	brpl	.-8      	; 0x20e4 <Dio_enuFlipChannel+0xb6>
    20ec:	84 27       	eor	r24, r20
    20ee:	8c 93       	st	X, r24
    20f0:	75 c0       	rjmp	.+234    	; 0x21dc <Dio_enuFlipChannel+0x1ae>

						}
						break;

					case DIO_u8PORTB:
						if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
    20f2:	e7 e3       	ldi	r30, 0x37	; 55
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	88 2f       	mov	r24, r24
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	a9 01       	movw	r20, r18
    2104:	02 c0       	rjmp	.+4      	; 0x210a <Dio_enuFlipChannel+0xdc>
    2106:	55 95       	asr	r21
    2108:	47 95       	ror	r20
    210a:	8a 95       	dec	r24
    210c:	e2 f7       	brpl	.-8      	; 0x2106 <Dio_enuFlipChannel+0xd8>
    210e:	ca 01       	movw	r24, r20
    2110:	81 70       	andi	r24, 0x01	; 1
    2112:	90 70       	andi	r25, 0x00	; 0
    2114:	88 23       	and	r24, r24
    2116:	09 f4       	brne	.+2      	; 0x211a <Dio_enuFlipChannel+0xec>
    2118:	61 c0       	rjmp	.+194    	; 0x21dc <Dio_enuFlipChannel+0x1ae>
							TGL_BIT(PORTB,LOC_u8Pin);
    211a:	a8 e3       	ldi	r26, 0x38	; 56
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e8 e3       	ldi	r30, 0x38	; 56
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	48 2f       	mov	r20, r24
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	28 2f       	mov	r18, r24
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	02 2e       	mov	r0, r18
    2132:	02 c0       	rjmp	.+4      	; 0x2138 <Dio_enuFlipChannel+0x10a>
    2134:	88 0f       	add	r24, r24
    2136:	99 1f       	adc	r25, r25
    2138:	0a 94       	dec	r0
    213a:	e2 f7       	brpl	.-8      	; 0x2134 <Dio_enuFlipChannel+0x106>
    213c:	84 27       	eor	r24, r20
    213e:	8c 93       	st	X, r24
    2140:	4d c0       	rjmp	.+154    	; 0x21dc <Dio_enuFlipChannel+0x1ae>
						}
						break;

					case DIO_u8PORTC:

						if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
    2142:	e4 e3       	ldi	r30, 0x34	; 52
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	28 2f       	mov	r18, r24
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	8a 81       	ldd	r24, Y+2	; 0x02
    214e:	88 2f       	mov	r24, r24
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	a9 01       	movw	r20, r18
    2154:	02 c0       	rjmp	.+4      	; 0x215a <Dio_enuFlipChannel+0x12c>
    2156:	55 95       	asr	r21
    2158:	47 95       	ror	r20
    215a:	8a 95       	dec	r24
    215c:	e2 f7       	brpl	.-8      	; 0x2156 <Dio_enuFlipChannel+0x128>
    215e:	ca 01       	movw	r24, r20
    2160:	81 70       	andi	r24, 0x01	; 1
    2162:	90 70       	andi	r25, 0x00	; 0
    2164:	88 23       	and	r24, r24
    2166:	d1 f1       	breq	.+116    	; 0x21dc <Dio_enuFlipChannel+0x1ae>
							TGL_BIT(PORTC,LOC_u8Pin);
    2168:	a5 e3       	ldi	r26, 0x35	; 53
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e5 e3       	ldi	r30, 0x35	; 53
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	48 2f       	mov	r20, r24
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	28 2f       	mov	r18, r24
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	02 2e       	mov	r0, r18
    2180:	02 c0       	rjmp	.+4      	; 0x2186 <Dio_enuFlipChannel+0x158>
    2182:	88 0f       	add	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	0a 94       	dec	r0
    2188:	e2 f7       	brpl	.-8      	; 0x2182 <Dio_enuFlipChannel+0x154>
    218a:	84 27       	eor	r24, r20
    218c:	8c 93       	st	X, r24
    218e:	26 c0       	rjmp	.+76     	; 0x21dc <Dio_enuFlipChannel+0x1ae>
						}
						break;

					case DIO_u8PORTD:

						if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
    2190:	e1 e3       	ldi	r30, 0x31	; 49
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	28 2f       	mov	r18, r24
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	88 2f       	mov	r24, r24
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	a9 01       	movw	r20, r18
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <Dio_enuFlipChannel+0x17a>
    21a4:	55 95       	asr	r21
    21a6:	47 95       	ror	r20
    21a8:	8a 95       	dec	r24
    21aa:	e2 f7       	brpl	.-8      	; 0x21a4 <Dio_enuFlipChannel+0x176>
    21ac:	ca 01       	movw	r24, r20
    21ae:	81 70       	andi	r24, 0x01	; 1
    21b0:	90 70       	andi	r25, 0x00	; 0
    21b2:	88 23       	and	r24, r24
    21b4:	99 f0       	breq	.+38     	; 0x21dc <Dio_enuFlipChannel+0x1ae>
							TGL_BIT(PORTD,LOC_u8Pin);
    21b6:	a2 e3       	ldi	r26, 0x32	; 50
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e2 e3       	ldi	r30, 0x32	; 50
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	48 2f       	mov	r20, r24
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	02 2e       	mov	r0, r18
    21ce:	02 c0       	rjmp	.+4      	; 0x21d4 <Dio_enuFlipChannel+0x1a6>
    21d0:	88 0f       	add	r24, r24
    21d2:	99 1f       	adc	r25, r25
    21d4:	0a 94       	dec	r0
    21d6:	e2 f7       	brpl	.-8      	; 0x21d0 <Dio_enuFlipChannel+0x1a2>
    21d8:	84 27       	eor	r24, r20
    21da:	8c 93       	st	X, r24
						}
						break;
			}

		}
	return LOCEnumReturnState;
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    21de:	26 96       	adiw	r28, 0x06	; 6
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	f8 94       	cli
    21e4:	de bf       	out	0x3e, r29	; 62
    21e6:	0f be       	out	0x3f, r0	; 63
    21e8:	cd bf       	out	0x3d, r28	; 61
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <DIO_SetNibbleValue>:
Dio_EnumErrorState  DIO_SetNibbleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value){
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	27 97       	sbiw	r28, 0x07	; 7
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	cd bf       	out	0x3d, r28	; 61
    2204:	8b 83       	std	Y+3, r24	; 0x03
    2206:	6c 83       	std	Y+4, r22	; 0x04
    2208:	4d 83       	std	Y+5, r20	; 0x05
	Dio_EnumErrorState LOCEnumReturnState = Dio_Ok;
    220a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8Value =Copy_u8Value;
    220c:	8d 81       	ldd	r24, Y+5	; 0x05
    220e:	89 83       	std	Y+1, r24	; 0x01
		 Loc_u8Value=((Loc_u8Value&(0x0F))<<Copy_u8PinStart);
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	9c 01       	movw	r18, r24
    2218:	2f 70       	andi	r18, 0x0F	; 15
    221a:	30 70       	andi	r19, 0x00	; 0
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	88 2f       	mov	r24, r24
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	a9 01       	movw	r20, r18
    2224:	02 c0       	rjmp	.+4      	; 0x222a <DIO_SetNibbleValue+0x3a>
    2226:	44 0f       	add	r20, r20
    2228:	55 1f       	adc	r21, r21
    222a:	8a 95       	dec	r24
    222c:	e2 f7       	brpl	.-8      	; 0x2226 <DIO_SetNibbleValue+0x36>
    222e:	ca 01       	movw	r24, r20
    2230:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PinStart<=4)&&(Copy_u8PinStart>=0)){
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	85 30       	cpi	r24, 0x05	; 5
    2236:	08 f0       	brcs	.+2      	; 0x223a <DIO_SetNibbleValue+0x4a>
    2238:	99 c0       	rjmp	.+306    	; 0x236c <DIO_SetNibbleValue+0x17c>
		switch (Copy_u8PortNumber){
    223a:	8c 81       	ldd	r24, Y+4	; 0x04
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	3f 83       	std	Y+7, r19	; 0x07
    2242:	2e 83       	std	Y+6, r18	; 0x06
    2244:	4e 81       	ldd	r20, Y+6	; 0x06
    2246:	5f 81       	ldd	r21, Y+7	; 0x07
    2248:	41 30       	cpi	r20, 0x01	; 1
    224a:	51 05       	cpc	r21, r1
    224c:	a9 f1       	breq	.+106    	; 0x22b8 <DIO_SetNibbleValue+0xc8>
    224e:	8e 81       	ldd	r24, Y+6	; 0x06
    2250:	9f 81       	ldd	r25, Y+7	; 0x07
    2252:	82 30       	cpi	r24, 0x02	; 2
    2254:	91 05       	cpc	r25, r1
    2256:	34 f4       	brge	.+12     	; 0x2264 <DIO_SetNibbleValue+0x74>
    2258:	2e 81       	ldd	r18, Y+6	; 0x06
    225a:	3f 81       	ldd	r19, Y+7	; 0x07
    225c:	21 15       	cp	r18, r1
    225e:	31 05       	cpc	r19, r1
    2260:	71 f0       	breq	.+28     	; 0x227e <DIO_SetNibbleValue+0x8e>
    2262:	81 c0       	rjmp	.+258    	; 0x2366 <DIO_SetNibbleValue+0x176>
    2264:	4e 81       	ldd	r20, Y+6	; 0x06
    2266:	5f 81       	ldd	r21, Y+7	; 0x07
    2268:	42 30       	cpi	r20, 0x02	; 2
    226a:	51 05       	cpc	r21, r1
    226c:	09 f4       	brne	.+2      	; 0x2270 <DIO_SetNibbleValue+0x80>
    226e:	41 c0       	rjmp	.+130    	; 0x22f2 <DIO_SetNibbleValue+0x102>
    2270:	8e 81       	ldd	r24, Y+6	; 0x06
    2272:	9f 81       	ldd	r25, Y+7	; 0x07
    2274:	83 30       	cpi	r24, 0x03	; 3
    2276:	91 05       	cpc	r25, r1
    2278:	09 f4       	brne	.+2      	; 0x227c <DIO_SetNibbleValue+0x8c>
    227a:	58 c0       	rjmp	.+176    	; 0x232c <DIO_SetNibbleValue+0x13c>
    227c:	74 c0       	rjmp	.+232    	; 0x2366 <DIO_SetNibbleValue+0x176>
		case DIO_u8PORTA :
			//mask port A
			PORTA&=(~((0x0F)<<Copy_u8PinStart));
    227e:	ab e3       	ldi	r26, 0x3B	; 59
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	eb e3       	ldi	r30, 0x3B	; 59
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	48 2f       	mov	r20, r24
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	28 2f       	mov	r18, r24
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	8f e0       	ldi	r24, 0x0F	; 15
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	02 2e       	mov	r0, r18
    2296:	02 c0       	rjmp	.+4      	; 0x229c <DIO_SetNibbleValue+0xac>
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	0a 94       	dec	r0
    229e:	e2 f7       	brpl	.-8      	; 0x2298 <DIO_SetNibbleValue+0xa8>
    22a0:	80 95       	com	r24
    22a2:	84 23       	and	r24, r20
    22a4:	8c 93       	st	X, r24
			PORTA|=Loc_u8Value;
    22a6:	ab e3       	ldi	r26, 0x3B	; 59
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	eb e3       	ldi	r30, 0x3B	; 59
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	90 81       	ld	r25, Z
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
    22b2:	89 2b       	or	r24, r25
    22b4:	8c 93       	st	X, r24
    22b6:	5c c0       	rjmp	.+184    	; 0x2370 <DIO_SetNibbleValue+0x180>
			break;
			case DIO_u8PORTB:
				PORTB&=(~(0X0F<<Copy_u8PinStart));
    22b8:	a8 e3       	ldi	r26, 0x38	; 56
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	e8 e3       	ldi	r30, 0x38	; 56
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	48 2f       	mov	r20, r24
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	28 2f       	mov	r18, r24
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	8f e0       	ldi	r24, 0x0F	; 15
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	02 2e       	mov	r0, r18
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <DIO_SetNibbleValue+0xe6>
    22d2:	88 0f       	add	r24, r24
    22d4:	99 1f       	adc	r25, r25
    22d6:	0a 94       	dec	r0
    22d8:	e2 f7       	brpl	.-8      	; 0x22d2 <DIO_SetNibbleValue+0xe2>
    22da:	80 95       	com	r24
    22dc:	84 23       	and	r24, r20
    22de:	8c 93       	st	X, r24
				PORTB|=Loc_u8Value;
    22e0:	a8 e3       	ldi	r26, 0x38	; 56
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	e8 e3       	ldi	r30, 0x38	; 56
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	90 81       	ld	r25, Z
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	89 2b       	or	r24, r25
    22ee:	8c 93       	st	X, r24
    22f0:	3f c0       	rjmp	.+126    	; 0x2370 <DIO_SetNibbleValue+0x180>
			break;
			case DIO_u8PORTC:
				PORTC&=(~(0X0F<<Copy_u8PinStart));
    22f2:	a5 e3       	ldi	r26, 0x35	; 53
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e5 e3       	ldi	r30, 0x35	; 53
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	48 2f       	mov	r20, r24
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	8f e0       	ldi	r24, 0x0F	; 15
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	02 2e       	mov	r0, r18
    230a:	02 c0       	rjmp	.+4      	; 0x2310 <DIO_SetNibbleValue+0x120>
    230c:	88 0f       	add	r24, r24
    230e:	99 1f       	adc	r25, r25
    2310:	0a 94       	dec	r0
    2312:	e2 f7       	brpl	.-8      	; 0x230c <DIO_SetNibbleValue+0x11c>
    2314:	80 95       	com	r24
    2316:	84 23       	and	r24, r20
    2318:	8c 93       	st	X, r24
				PORTC|=Loc_u8Value;
    231a:	a5 e3       	ldi	r26, 0x35	; 53
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e5 e3       	ldi	r30, 0x35	; 53
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	90 81       	ld	r25, Z
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	89 2b       	or	r24, r25
    2328:	8c 93       	st	X, r24
    232a:	22 c0       	rjmp	.+68     	; 0x2370 <DIO_SetNibbleValue+0x180>
			break;
			case DIO_u8PORTD:
				PORTD&=(~(0X0F<<Copy_u8PinStart));
    232c:	a2 e3       	ldi	r26, 0x32	; 50
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	e2 e3       	ldi	r30, 0x32	; 50
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	48 2f       	mov	r20, r24
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
    233a:	28 2f       	mov	r18, r24
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	8f e0       	ldi	r24, 0x0F	; 15
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	02 2e       	mov	r0, r18
    2344:	02 c0       	rjmp	.+4      	; 0x234a <DIO_SetNibbleValue+0x15a>
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	0a 94       	dec	r0
    234c:	e2 f7       	brpl	.-8      	; 0x2346 <DIO_SetNibbleValue+0x156>
    234e:	80 95       	com	r24
    2350:	84 23       	and	r24, r20
    2352:	8c 93       	st	X, r24
				PORTD|=Loc_u8Value;
    2354:	a2 e3       	ldi	r26, 0x32	; 50
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e2 e3       	ldi	r30, 0x32	; 50
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	90 81       	ld	r25, Z
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	89 2b       	or	r24, r25
    2362:	8c 93       	st	X, r24
    2364:	05 c0       	rjmp	.+10     	; 0x2370 <DIO_SetNibbleValue+0x180>
			break;
			default:{
				LOCEnumReturnState= Dio_PortRangeError;
    2366:	85 e0       	ldi	r24, 0x05	; 5
    2368:	8a 83       	std	Y+2, r24	; 0x02
    236a:	02 c0       	rjmp	.+4      	; 0x2370 <DIO_SetNibbleValue+0x180>

		}
		}
		else{
			/*wrong PINStartNumber*/
			LOCEnumReturnState= Dio_ChannelError;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	8a 83       	std	Y+2, r24	; 0x02
		}


return LOCEnumReturnState;
    2370:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2372:	27 96       	adiw	r28, 0x07	; 7
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <ADC_Init>:
	 * 1-Set Channel
	 * 2-Start Conversion
	 * 3-Poll on ADIF flag
	 * 4-Return ADC value
	 */
void ADC_Init(void){
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
		//Set Vreference
	#if ADC_SET_VREF==VREF_AREF_PIN
		CLR_BIT(ADMUX,REFS0);
		CLR_BIT(ADMUX,REFS1);
	#elif ADC_SET_VREF==VREF_AVCC_PIN
		SET_BIT(ADMUX,REFS0);
    238c:	a7 e2       	ldi	r26, 0x27	; 39
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e7 e2       	ldi	r30, 0x27	; 39
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	80 64       	ori	r24, 0x40	; 64
    2398:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
    239a:	a7 e2       	ldi	r26, 0x27	; 39
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e7 e2       	ldi	r30, 0x27	; 39
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	8f 77       	andi	r24, 0x7F	; 127
    23a6:	8c 93       	st	X, r24
	#elif ADC_SET_PRESCALAR==PRESCALER_DIVIDE_BY_4
	CLR_BIT(ADCSRA,ADPS0);
	SET_BIT(ADCSRA,ADPS1);
	CLR_BIT(ADCSRA,ADPS2);
	#elif ADC_SET_PRESCALAR==PRESCALER_DIVIDE_BY_8
	SET_BIT(ADCSRA,ADPS0);
    23a8:	a6 e2       	ldi	r26, 0x26	; 38
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e6 e2       	ldi	r30, 0x26	; 38
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	81 60       	ori	r24, 0x01	; 1
    23b4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
    23b6:	a6 e2       	ldi	r26, 0x26	; 38
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e6 e2       	ldi	r30, 0x26	; 38
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	82 60       	ori	r24, 0x02	; 2
    23c2:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADPS2);
    23c4:	a6 e2       	ldi	r26, 0x26	; 38
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e6 e2       	ldi	r30, 0x26	; 38
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	8b 7f       	andi	r24, 0xFB	; 251
    23d0:	8c 93       	st	X, r24
	#error"Wrong Prescalar Chosen"
	#endif

	//RIGHT/Adjust
	#if ADC_SET_ADJUST_LEVEL==ADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,ADLAR);
    23d2:	a7 e2       	ldi	r26, 0x27	; 39
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	e7 e2       	ldi	r30, 0x27	; 39
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	8f 7d       	andi	r24, 0xDF	; 223
    23de:	8c 93       	st	X, r24
	#elif ADC_SET_ADJUST_LEVEL==ADC_LEFT_ADJUST
	SET_BIT(ADMUX,ADLAR);
	#endif
	/*Enable ADC*/
	SET_BIT(ADCSRA,ADEN);
    23e0:	a6 e2       	ldi	r26, 0x26	; 38
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	e6 e2       	ldi	r30, 0x26	; 38
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	80 68       	ori	r24, 0x80	; 128
    23ec:	8c 93       	st	X, r24
	}
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <ADC_StartConversion>:

u16 ADC_StartConversion(u8 Copy_u8ADC_Channel)
	{
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <ADC_StartConversion+0x6>
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	8a 83       	std	Y+2, r24	; 0x02
		//Set Channel
		u8 Loc_u8ADC_Channel;
		 Loc_u8ADC_Channel =Copy_u8ADC_Channel&ADC_CHANNEL_INPUT_MASK;
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	8f 71       	andi	r24, 0x1F	; 31
    2404:	89 83       	std	Y+1, r24	; 0x01
		ADMUX&=ADC_ADMUX_REG_MASK;
    2406:	a7 e2       	ldi	r26, 0x27	; 39
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e7 e2       	ldi	r30, 0x27	; 39
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	80 7e       	andi	r24, 0xE0	; 224
    2412:	8c 93       	st	X, r24
		ADMUX|=Loc_u8ADC_Channel;
    2414:	a7 e2       	ldi	r26, 0x27	; 39
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	e7 e2       	ldi	r30, 0x27	; 39
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	90 81       	ld	r25, Z
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	89 2b       	or	r24, r25
    2422:	8c 93       	st	X, r24
		//set global Interrupt enable flag
		GIEMode(GIE_ENABLE);
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <GIEMode>

		//Start Conversion
		SET_BIT(ADCSRA,ADSC);
    242a:	a6 e2       	ldi	r26, 0x26	; 38
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	e6 e2       	ldi	r30, 0x26	; 38
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	80 64       	ori	r24, 0x40	; 64
    2436:	8c 93       	st	X, r24

		//Poll on the Flag the flag is 1 when conversion is done
		while(GET_BIT(ADCSRA,ADIF)==0);
    2438:	e6 e2       	ldi	r30, 0x26	; 38
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	82 95       	swap	r24
    2440:	8f 70       	andi	r24, 0x0F	; 15
    2442:	88 2f       	mov	r24, r24
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	81 70       	andi	r24, 0x01	; 1
    2448:	90 70       	andi	r25, 0x00	; 0
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	a9 f3       	breq	.-22     	; 0x2438 <ADC_StartConversion+0x44>

		//Conversion finished
		return ADCLH;
    244e:	e4 e2       	ldi	r30, 0x24	; 36
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	91 81       	ldd	r25, Z+1	; 0x01
	}
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <ADC_Stop>:

void ADC_Stop(void){
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADMUX,ADEN);
    2468:	a7 e2       	ldi	r26, 0x27	; 39
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	e7 e2       	ldi	r30, 0x27	; 39
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
    2472:	8f 77       	andi	r24, 0x7F	; 127
    2474:	8c 93       	st	X, r24
}
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <__vector_16>:
void __vector_16(void){
    247c:	1f 92       	push	r1
    247e:	0f 92       	push	r0
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	0f 92       	push	r0
    2484:	11 24       	eor	r1, r1
    2486:	8f 93       	push	r24
    2488:	af 93       	push	r26
    248a:	bf 93       	push	r27
    248c:	ef 93       	push	r30
    248e:	ff 93       	push	r31
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62

 SET_BIT(ADCSRA ,ADSC);
    2498:	a6 e2       	ldi	r26, 0x26	; 38
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	e6 e2       	ldi	r30, 0x26	; 38
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	80 64       	ori	r24, 0x40	; 64
    24a4:	8c 93       	st	X, r24
}
    24a6:	cf 91       	pop	r28
    24a8:	df 91       	pop	r29
    24aa:	ff 91       	pop	r31
    24ac:	ef 91       	pop	r30
    24ae:	bf 91       	pop	r27
    24b0:	af 91       	pop	r26
    24b2:	8f 91       	pop	r24
    24b4:	0f 90       	pop	r0
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	0f 90       	pop	r0
    24ba:	1f 90       	pop	r1
    24bc:	18 95       	reti

000024be <SEVENSEGMENT_Init>:
#include "SevenSegment.h"
#include "SevenSegment_cfg.h"
#include "SevenSegment_prv.h"
#include"../../MCAL/PORT/PORT.h"
#include"../../MCAL/DIO/DIO.h"
void SEVENSEGMENT_Init(SevenSeg_t* Ptr_SevenSegObj){
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	00 d0       	rcall	.+0      	; 0x24c4 <SEVENSEGMENT_Init+0x6>
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <SEVENSEGMENT_Init+0x8>
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	9c 83       	std	Y+4, r25	; 0x04
    24cc:	8b 83       	std	Y+3, r24	; 0x03
	u8 pinSegement;
	u8 pinButton;
	for(pinSegement=1; pinSegement<9;pinSegement++){
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	8a 83       	std	Y+2, r24	; 0x02
    24d2:	07 c0       	rjmp	.+14     	; 0x24e2 <SEVENSEGMENT_Init+0x24>
		Port_enuSetPinDirection(pinSegement,PORT_u8OUTPUT);
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	61 e0       	ldi	r22, 0x01	; 1
    24d8:	0e 94 3b 07 	call	0xe76	; 0xe76 <Port_enuSetPinDirection>
#include"../../MCAL/PORT/PORT.h"
#include"../../MCAL/DIO/DIO.h"
void SEVENSEGMENT_Init(SevenSeg_t* Ptr_SevenSegObj){
	u8 pinSegement;
	u8 pinButton;
	for(pinSegement=1; pinSegement<9;pinSegement++){
    24dc:	8a 81       	ldd	r24, Y+2	; 0x02
    24de:	8f 5f       	subi	r24, 0xFF	; 255
    24e0:	8a 83       	std	Y+2, r24	; 0x02
    24e2:	8a 81       	ldd	r24, Y+2	; 0x02
    24e4:	89 30       	cpi	r24, 0x09	; 9
    24e6:	b0 f3       	brcs	.-20     	; 0x24d4 <SEVENSEGMENT_Init+0x16>
		Port_enuSetPinDirection(pinSegement,PORT_u8OUTPUT);
		}
		for(pinButton=26; pinButton<29;pinButton++){
    24e8:	8a e1       	ldi	r24, 0x1A	; 26
    24ea:	89 83       	std	Y+1, r24	; 0x01
    24ec:	07 c0       	rjmp	.+14     	; 0x24fc <SEVENSEGMENT_Init+0x3e>
			Port_enuSetPinDirection(pinButton,PORT_u8INPUT);
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	60 e0       	ldi	r22, 0x00	; 0
    24f2:	0e 94 3b 07 	call	0xe76	; 0xe76 <Port_enuSetPinDirection>
	u8 pinSegement;
	u8 pinButton;
	for(pinSegement=1; pinSegement<9;pinSegement++){
		Port_enuSetPinDirection(pinSegement,PORT_u8OUTPUT);
		}
		for(pinButton=26; pinButton<29;pinButton++){
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	8f 5f       	subi	r24, 0xFF	; 255
    24fa:	89 83       	std	Y+1, r24	; 0x01
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	8d 31       	cpi	r24, 0x1D	; 29
    2500:	b0 f3       	brcs	.-20     	; 0x24ee <SEVENSEGMENT_Init+0x30>
			Port_enuSetPinDirection(pinButton,PORT_u8INPUT);
			}

		for(pinSegement=1; pinSegement<9;pinSegement++){
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	8a 83       	std	Y+2, r24	; 0x02
    2506:	07 c0       	rjmp	.+14     	; 0x2516 <SEVENSEGMENT_Init+0x58>
			Port_enuSetPinMode(pinSegement,PORT_u8OUTPUT_HIGH);
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	61 e0       	ldi	r22, 0x01	; 1
    250c:	0e 94 37 08 	call	0x106e	; 0x106e <Port_enuSetPinMode>
		}
		for(pinButton=26; pinButton<29;pinButton++){
			Port_enuSetPinDirection(pinButton,PORT_u8INPUT);
			}

		for(pinSegement=1; pinSegement<9;pinSegement++){
    2510:	8a 81       	ldd	r24, Y+2	; 0x02
    2512:	8f 5f       	subi	r24, 0xFF	; 255
    2514:	8a 83       	std	Y+2, r24	; 0x02
    2516:	8a 81       	ldd	r24, Y+2	; 0x02
    2518:	89 30       	cpi	r24, 0x09	; 9
    251a:	b0 f3       	brcs	.-20     	; 0x2508 <SEVENSEGMENT_Init+0x4a>
			Port_enuSetPinMode(pinSegement,PORT_u8OUTPUT_HIGH);
		}
		for(pinButton=26; pinButton<29;pinButton++){
    251c:	8a e1       	ldi	r24, 0x1A	; 26
    251e:	89 83       	std	Y+1, r24	; 0x01
    2520:	07 c0       	rjmp	.+14     	; 0x2530 <SEVENSEGMENT_Init+0x72>
			Port_enuSetPinMode(pinButton,PORT_u8INPUT_PULLUP);
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	63 e0       	ldi	r22, 0x03	; 3
    2526:	0e 94 37 08 	call	0x106e	; 0x106e <Port_enuSetPinMode>
			}

		for(pinSegement=1; pinSegement<9;pinSegement++){
			Port_enuSetPinMode(pinSegement,PORT_u8OUTPUT_HIGH);
		}
		for(pinButton=26; pinButton<29;pinButton++){
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	8f 5f       	subi	r24, 0xFF	; 255
    252e:	89 83       	std	Y+1, r24	; 0x01
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	8d 31       	cpi	r24, 0x1D	; 29
    2534:	b0 f3       	brcs	.-20     	; 0x2522 <SEVENSEGMENT_Init+0x64>
			Port_enuSetPinMode(pinButton,PORT_u8INPUT_PULLUP);
			}
}
    2536:	0f 90       	pop	r0
    2538:	0f 90       	pop	r0
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <SEVENSEGMENT_SetMode>:
void SEVENSEGMENT_SetMode(SevenSeg_t* Ptr_SevenSegObj,u8 Copy_u8SevenSegMode){
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	00 d0       	rcall	.+0      	; 0x254a <SEVENSEGMENT_SetMode+0x6>
    254a:	0f 92       	push	r0
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	9a 83       	std	Y+2, r25	; 0x02
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_u8SevenSegMode==SEVEN_SEG_ON){
    2556:	8b 81       	ldd	r24, Y+3	; 0x03
    2558:	81 30       	cpi	r24, 0x01	; 1
    255a:	39 f4       	brne	.+14     	; 0x256a <SEVENSEGMENT_SetMode+0x26>

		Dio_enuWriteChannel(Ptr_SevenSegObj->PinEn,DIO_u8LEVEL_HIGH);
    255c:	e9 81       	ldd	r30, Y+1	; 0x01
    255e:	fa 81       	ldd	r31, Y+2	; 0x02
    2560:	81 81       	ldd	r24, Z+1	; 0x01
    2562:	61 e0       	ldi	r22, 0x01	; 1
    2564:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
    2568:	09 c0       	rjmp	.+18     	; 0x257c <SEVENSEGMENT_SetMode+0x38>
	}
	else if(Copy_u8SevenSegMode==SEVEN_SEG_OFF){
    256a:	8b 81       	ldd	r24, Y+3	; 0x03
    256c:	88 23       	and	r24, r24
    256e:	31 f4       	brne	.+12     	; 0x257c <SEVENSEGMENT_SetMode+0x38>
		Dio_enuWriteChannel(Ptr_SevenSegObj->PinEn,DIO_u8LEVEL_LOW);
    2570:	e9 81       	ldd	r30, Y+1	; 0x01
    2572:	fa 81       	ldd	r31, Y+2	; 0x02
    2574:	81 81       	ldd	r24, Z+1	; 0x01
    2576:	60 e0       	ldi	r22, 0x00	; 0
    2578:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
	else {

		// wrong Mode ordered
	}

}
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	08 95       	ret

00002588 <LCDInit4BitMode>:
 *  Created on: Oct 21, 2023
 *      Author: Ismail
 */
#include "LCD.h"
#include <util/delay.h>
void LCDInit4BitMode(){
    2588:	0f 93       	push	r16
    258a:	1f 93       	push	r17
    258c:	df 93       	push	r29
    258e:	cf 93       	push	r28
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
    2594:	c6 54       	subi	r28, 0x46	; 70
    2596:	d0 40       	sbci	r29, 0x00	; 0
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	fe 01       	movw	r30, r28
    25a4:	ed 5b       	subi	r30, 0xBD	; 189
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	a0 ef       	ldi	r26, 0xF0	; 240
    25ae:	b1 e4       	ldi	r27, 0x41	; 65
    25b0:	80 83       	st	Z, r24
    25b2:	91 83       	std	Z+1, r25	; 0x01
    25b4:	a2 83       	std	Z+2, r26	; 0x02
    25b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b8:	8e 01       	movw	r16, r28
    25ba:	01 5c       	subi	r16, 0xC1	; 193
    25bc:	1f 4f       	sbci	r17, 0xFF	; 255
    25be:	fe 01       	movw	r30, r28
    25c0:	ed 5b       	subi	r30, 0xBD	; 189
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	60 81       	ld	r22, Z
    25c6:	71 81       	ldd	r23, Z+1	; 0x01
    25c8:	82 81       	ldd	r24, Z+2	; 0x02
    25ca:	93 81       	ldd	r25, Z+3	; 0x03
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	4a e7       	ldi	r20, 0x7A	; 122
    25d2:	53 e4       	ldi	r21, 0x43	; 67
    25d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	f8 01       	movw	r30, r16
    25de:	80 83       	st	Z, r24
    25e0:	91 83       	std	Z+1, r25	; 0x01
    25e2:	a2 83       	std	Z+2, r26	; 0x02
    25e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25e6:	fe 01       	movw	r30, r28
    25e8:	ff 96       	adiw	r30, 0x3f	; 63
    25ea:	60 81       	ld	r22, Z
    25ec:	71 81       	ldd	r23, Z+1	; 0x01
    25ee:	82 81       	ldd	r24, Z+2	; 0x02
    25f0:	93 81       	ldd	r25, Z+3	; 0x03
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e8       	ldi	r20, 0x80	; 128
    25f8:	5f e3       	ldi	r21, 0x3F	; 63
    25fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25fe:	88 23       	and	r24, r24
    2600:	2c f4       	brge	.+10     	; 0x260c <LCDInit4BitMode+0x84>
		__ticks = 1;
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	9e af       	std	Y+62, r25	; 0x3e
    2608:	8d af       	std	Y+61, r24	; 0x3d
    260a:	46 c0       	rjmp	.+140    	; 0x2698 <LCDInit4BitMode+0x110>
	else if (__tmp > 65535)
    260c:	fe 01       	movw	r30, r28
    260e:	ff 96       	adiw	r30, 0x3f	; 63
    2610:	60 81       	ld	r22, Z
    2612:	71 81       	ldd	r23, Z+1	; 0x01
    2614:	82 81       	ldd	r24, Z+2	; 0x02
    2616:	93 81       	ldd	r25, Z+3	; 0x03
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	3f ef       	ldi	r19, 0xFF	; 255
    261c:	4f e7       	ldi	r20, 0x7F	; 127
    261e:	57 e4       	ldi	r21, 0x47	; 71
    2620:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2624:	18 16       	cp	r1, r24
    2626:	64 f5       	brge	.+88     	; 0x2680 <LCDInit4BitMode+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2628:	fe 01       	movw	r30, r28
    262a:	ed 5b       	subi	r30, 0xBD	; 189
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	93 81       	ldd	r25, Z+3	; 0x03
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e2       	ldi	r20, 0x20	; 32
    263c:	51 e4       	ldi	r21, 0x41	; 65
    263e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	bc 01       	movw	r22, r24
    2648:	cd 01       	movw	r24, r26
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	9e af       	std	Y+62, r25	; 0x3e
    2654:	8d af       	std	Y+61, r24	; 0x3d
    2656:	0f c0       	rjmp	.+30     	; 0x2676 <LCDInit4BitMode+0xee>
    2658:	89 e1       	ldi	r24, 0x19	; 25
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	9c af       	std	Y+60, r25	; 0x3c
    265e:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2660:	8b ad       	ldd	r24, Y+59	; 0x3b
    2662:	9c ad       	ldd	r25, Y+60	; 0x3c
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <LCDInit4BitMode+0xdc>
    2668:	9c af       	std	Y+60, r25	; 0x3c
    266a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266c:	8d ad       	ldd	r24, Y+61	; 0x3d
    266e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	9e af       	std	Y+62, r25	; 0x3e
    2674:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2676:	8d ad       	ldd	r24, Y+61	; 0x3d
    2678:	9e ad       	ldd	r25, Y+62	; 0x3e
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	69 f7       	brne	.-38     	; 0x2658 <LCDInit4BitMode+0xd0>
    267e:	16 c0       	rjmp	.+44     	; 0x26ac <LCDInit4BitMode+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2680:	fe 01       	movw	r30, r28
    2682:	ff 96       	adiw	r30, 0x3f	; 63
    2684:	60 81       	ld	r22, Z
    2686:	71 81       	ldd	r23, Z+1	; 0x01
    2688:	82 81       	ldd	r24, Z+2	; 0x02
    268a:	93 81       	ldd	r25, Z+3	; 0x03
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9e af       	std	Y+62, r25	; 0x3e
    2696:	8d af       	std	Y+61, r24	; 0x3d
    2698:	8d ad       	ldd	r24, Y+61	; 0x3d
    269a:	9e ad       	ldd	r25, Y+62	; 0x3e
    269c:	9a af       	std	Y+58, r25	; 0x3a
    269e:	89 af       	std	Y+57, r24	; 0x39
    26a0:	89 ad       	ldd	r24, Y+57	; 0x39
    26a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <LCDInit4BitMode+0x11c>
    26a8:	9a af       	std	Y+58, r25	; 0x3a
    26aa:	89 af       	std	Y+57, r24	; 0x39
_delay_ms(30);

//SET DIRECTION OF THE used PINS
//PORTB PIN0 to pin3 DROM 8 -11 FOR DATA, RS =PA3 ,E= PA2

Port_enuSetPinDirection(8,PORT_u8OUTPUT);
    26ac:	88 e0       	ldi	r24, 0x08	; 8
    26ae:	61 e0       	ldi	r22, 0x01	; 1
    26b0:	0e 94 3b 07 	call	0xe76	; 0xe76 <Port_enuSetPinDirection>
Port_enuSetPinDirection(9,PORT_u8OUTPUT);
    26b4:	89 e0       	ldi	r24, 0x09	; 9
    26b6:	61 e0       	ldi	r22, 0x01	; 1
    26b8:	0e 94 3b 07 	call	0xe76	; 0xe76 <Port_enuSetPinDirection>
Port_enuSetPinDirection(10,PORT_u8OUTPUT);
    26bc:	8a e0       	ldi	r24, 0x0A	; 10
    26be:	61 e0       	ldi	r22, 0x01	; 1
    26c0:	0e 94 3b 07 	call	0xe76	; 0xe76 <Port_enuSetPinDirection>
Port_enuSetPinDirection(11,PORT_u8OUTPUT);
    26c4:	8b e0       	ldi	r24, 0x0B	; 11
    26c6:	61 e0       	ldi	r22, 0x01	; 1
    26c8:	0e 94 3b 07 	call	0xe76	; 0xe76 <Port_enuSetPinDirection>

//SET DIRECTION OF THE CONTROL PINS
Port_enuSetPinDirection(RS,PORT_u8OUTPUT);
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	61 e0       	ldi	r22, 0x01	; 1
    26d0:	0e 94 3b 07 	call	0xe76	; 0xe76 <Port_enuSetPinDirection>
Port_enuSetPinDirection(E,PORT_u8OUTPUT);
    26d4:	82 e0       	ldi	r24, 0x02	; 2
    26d6:	61 e0       	ldi	r22, 0x01	; 1
    26d8:	0e 94 3b 07 	call	0xe76	; 0xe76 <Port_enuSetPinDirection>
Port_enuSetPinDirection(RW,PORT_u8OUTPUT);
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	61 e0       	ldi	r22, 0x01	; 1
    26e0:	0e 94 3b 07 	call	0xe76	; 0xe76 <Port_enuSetPinDirection>

//START OF THE INTIALIZATION SEQUENCE
//SEND FUNCTION SET COMMAND
DIO_SetNibbleValue(LCD_PIN_START,DATA_PORT,FUNCTION_SET_MODE_COMMAND>>4);
    26e4:	84 e0       	ldi	r24, 0x04	; 4
    26e6:	61 e0       	ldi	r22, 0x01	; 1
    26e8:	42 e0       	ldi	r20, 0x02	; 2
    26ea:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <DIO_SetNibbleValue>
//SEND THE FALLING EDGE ENABLE
Dio_enuWriteChannel(E,DIO_u8LEVEL_HIGH);
    26ee:	82 e0       	ldi	r24, 0x02	; 2
    26f0:	61 e0       	ldi	r22, 0x01	; 1
    26f2:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	a0 e0       	ldi	r26, 0x00	; 0
    26fc:	b0 e4       	ldi	r27, 0x40	; 64
    26fe:	8d ab       	std	Y+53, r24	; 0x35
    2700:	9e ab       	std	Y+54, r25	; 0x36
    2702:	af ab       	std	Y+55, r26	; 0x37
    2704:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2706:	6d a9       	ldd	r22, Y+53	; 0x35
    2708:	7e a9       	ldd	r23, Y+54	; 0x36
    270a:	8f a9       	ldd	r24, Y+55	; 0x37
    270c:	98 ad       	ldd	r25, Y+56	; 0x38
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	4a e7       	ldi	r20, 0x7A	; 122
    2714:	53 e4       	ldi	r21, 0x43	; 67
    2716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	89 ab       	std	Y+49, r24	; 0x31
    2720:	9a ab       	std	Y+50, r25	; 0x32
    2722:	ab ab       	std	Y+51, r26	; 0x33
    2724:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2726:	69 a9       	ldd	r22, Y+49	; 0x31
    2728:	7a a9       	ldd	r23, Y+50	; 0x32
    272a:	8b a9       	ldd	r24, Y+51	; 0x33
    272c:	9c a9       	ldd	r25, Y+52	; 0x34
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e8       	ldi	r20, 0x80	; 128
    2734:	5f e3       	ldi	r21, 0x3F	; 63
    2736:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    273a:	88 23       	and	r24, r24
    273c:	2c f4       	brge	.+10     	; 0x2748 <LCDInit4BitMode+0x1c0>
		__ticks = 1;
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	98 ab       	std	Y+48, r25	; 0x30
    2744:	8f a7       	std	Y+47, r24	; 0x2f
    2746:	3f c0       	rjmp	.+126    	; 0x27c6 <LCDInit4BitMode+0x23e>
	else if (__tmp > 65535)
    2748:	69 a9       	ldd	r22, Y+49	; 0x31
    274a:	7a a9       	ldd	r23, Y+50	; 0x32
    274c:	8b a9       	ldd	r24, Y+51	; 0x33
    274e:	9c a9       	ldd	r25, Y+52	; 0x34
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	3f ef       	ldi	r19, 0xFF	; 255
    2754:	4f e7       	ldi	r20, 0x7F	; 127
    2756:	57 e4       	ldi	r21, 0x47	; 71
    2758:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    275c:	18 16       	cp	r1, r24
    275e:	4c f5       	brge	.+82     	; 0x27b2 <LCDInit4BitMode+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2760:	6d a9       	ldd	r22, Y+53	; 0x35
    2762:	7e a9       	ldd	r23, Y+54	; 0x36
    2764:	8f a9       	ldd	r24, Y+55	; 0x37
    2766:	98 ad       	ldd	r25, Y+56	; 0x38
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e2       	ldi	r20, 0x20	; 32
    276e:	51 e4       	ldi	r21, 0x41	; 65
    2770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	bc 01       	movw	r22, r24
    277a:	cd 01       	movw	r24, r26
    277c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	98 ab       	std	Y+48, r25	; 0x30
    2786:	8f a7       	std	Y+47, r24	; 0x2f
    2788:	0f c0       	rjmp	.+30     	; 0x27a8 <LCDInit4BitMode+0x220>
    278a:	89 e1       	ldi	r24, 0x19	; 25
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	9e a7       	std	Y+46, r25	; 0x2e
    2790:	8d a7       	std	Y+45, r24	; 0x2d
    2792:	8d a5       	ldd	r24, Y+45	; 0x2d
    2794:	9e a5       	ldd	r25, Y+46	; 0x2e
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	f1 f7       	brne	.-4      	; 0x2796 <LCDInit4BitMode+0x20e>
    279a:	9e a7       	std	Y+46, r25	; 0x2e
    279c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279e:	8f a5       	ldd	r24, Y+47	; 0x2f
    27a0:	98 a9       	ldd	r25, Y+48	; 0x30
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	98 ab       	std	Y+48, r25	; 0x30
    27a6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    27aa:	98 a9       	ldd	r25, Y+48	; 0x30
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	69 f7       	brne	.-38     	; 0x278a <LCDInit4BitMode+0x202>
    27b0:	14 c0       	rjmp	.+40     	; 0x27da <LCDInit4BitMode+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b2:	69 a9       	ldd	r22, Y+49	; 0x31
    27b4:	7a a9       	ldd	r23, Y+50	; 0x32
    27b6:	8b a9       	ldd	r24, Y+51	; 0x33
    27b8:	9c a9       	ldd	r25, Y+52	; 0x34
    27ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	98 ab       	std	Y+48, r25	; 0x30
    27c4:	8f a7       	std	Y+47, r24	; 0x2f
    27c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27c8:	98 a9       	ldd	r25, Y+48	; 0x30
    27ca:	9c a7       	std	Y+44, r25	; 0x2c
    27cc:	8b a7       	std	Y+43, r24	; 0x2b
    27ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    27d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	f1 f7       	brne	.-4      	; 0x27d2 <LCDInit4BitMode+0x24a>
    27d6:	9c a7       	std	Y+44, r25	; 0x2c
    27d8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
Dio_enuWriteChannel(E,DIO_u8LEVEL_LOW);
    27da:	82 e0       	ldi	r24, 0x02	; 2
    27dc:	60 e0       	ldi	r22, 0x00	; 0
    27de:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>

LCD_WriteCommand4Bit(FUNCTION_SET_MODE_COMMAND);
    27e2:	88 e2       	ldi	r24, 0x28	; 40
    27e4:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_WriteCommand4Bit>
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	a0 e8       	ldi	r26, 0x80	; 128
    27ee:	bf e3       	ldi	r27, 0x3F	; 63
    27f0:	8f a3       	std	Y+39, r24	; 0x27
    27f2:	98 a7       	std	Y+40, r25	; 0x28
    27f4:	a9 a7       	std	Y+41, r26	; 0x29
    27f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f8:	6f a1       	ldd	r22, Y+39	; 0x27
    27fa:	78 a5       	ldd	r23, Y+40	; 0x28
    27fc:	89 a5       	ldd	r24, Y+41	; 0x29
    27fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	4a e7       	ldi	r20, 0x7A	; 122
    2806:	53 e4       	ldi	r21, 0x43	; 67
    2808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	8b a3       	std	Y+35, r24	; 0x23
    2812:	9c a3       	std	Y+36, r25	; 0x24
    2814:	ad a3       	std	Y+37, r26	; 0x25
    2816:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2818:	6b a1       	ldd	r22, Y+35	; 0x23
    281a:	7c a1       	ldd	r23, Y+36	; 0x24
    281c:	8d a1       	ldd	r24, Y+37	; 0x25
    281e:	9e a1       	ldd	r25, Y+38	; 0x26
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	40 e8       	ldi	r20, 0x80	; 128
    2826:	5f e3       	ldi	r21, 0x3F	; 63
    2828:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    282c:	88 23       	and	r24, r24
    282e:	2c f4       	brge	.+10     	; 0x283a <LCDInit4BitMode+0x2b2>
		__ticks = 1;
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	9a a3       	std	Y+34, r25	; 0x22
    2836:	89 a3       	std	Y+33, r24	; 0x21
    2838:	3f c0       	rjmp	.+126    	; 0x28b8 <LCDInit4BitMode+0x330>
	else if (__tmp > 65535)
    283a:	6b a1       	ldd	r22, Y+35	; 0x23
    283c:	7c a1       	ldd	r23, Y+36	; 0x24
    283e:	8d a1       	ldd	r24, Y+37	; 0x25
    2840:	9e a1       	ldd	r25, Y+38	; 0x26
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	3f ef       	ldi	r19, 0xFF	; 255
    2846:	4f e7       	ldi	r20, 0x7F	; 127
    2848:	57 e4       	ldi	r21, 0x47	; 71
    284a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    284e:	18 16       	cp	r1, r24
    2850:	4c f5       	brge	.+82     	; 0x28a4 <LCDInit4BitMode+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2852:	6f a1       	ldd	r22, Y+39	; 0x27
    2854:	78 a5       	ldd	r23, Y+40	; 0x28
    2856:	89 a5       	ldd	r24, Y+41	; 0x29
    2858:	9a a5       	ldd	r25, Y+42	; 0x2a
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e2       	ldi	r20, 0x20	; 32
    2860:	51 e4       	ldi	r21, 0x41	; 65
    2862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	bc 01       	movw	r22, r24
    286c:	cd 01       	movw	r24, r26
    286e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	9a a3       	std	Y+34, r25	; 0x22
    2878:	89 a3       	std	Y+33, r24	; 0x21
    287a:	0f c0       	rjmp	.+30     	; 0x289a <LCDInit4BitMode+0x312>
    287c:	89 e1       	ldi	r24, 0x19	; 25
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	98 a3       	std	Y+32, r25	; 0x20
    2882:	8f 8f       	std	Y+31, r24	; 0x1f
    2884:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2886:	98 a1       	ldd	r25, Y+32	; 0x20
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	f1 f7       	brne	.-4      	; 0x2888 <LCDInit4BitMode+0x300>
    288c:	98 a3       	std	Y+32, r25	; 0x20
    288e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2890:	89 a1       	ldd	r24, Y+33	; 0x21
    2892:	9a a1       	ldd	r25, Y+34	; 0x22
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	9a a3       	std	Y+34, r25	; 0x22
    2898:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289a:	89 a1       	ldd	r24, Y+33	; 0x21
    289c:	9a a1       	ldd	r25, Y+34	; 0x22
    289e:	00 97       	sbiw	r24, 0x00	; 0
    28a0:	69 f7       	brne	.-38     	; 0x287c <LCDInit4BitMode+0x2f4>
    28a2:	14 c0       	rjmp	.+40     	; 0x28cc <LCDInit4BitMode+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a4:	6b a1       	ldd	r22, Y+35	; 0x23
    28a6:	7c a1       	ldd	r23, Y+36	; 0x24
    28a8:	8d a1       	ldd	r24, Y+37	; 0x25
    28aa:	9e a1       	ldd	r25, Y+38	; 0x26
    28ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	9a a3       	std	Y+34, r25	; 0x22
    28b6:	89 a3       	std	Y+33, r24	; 0x21
    28b8:	89 a1       	ldd	r24, Y+33	; 0x21
    28ba:	9a a1       	ldd	r25, Y+34	; 0x22
    28bc:	9e 8f       	std	Y+30, r25	; 0x1e
    28be:	8d 8f       	std	Y+29, r24	; 0x1d
    28c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	f1 f7       	brne	.-4      	; 0x28c4 <LCDInit4BitMode+0x33c>
    28c8:	9e 8f       	std	Y+30, r25	; 0x1e
    28ca:	8d 8f       	std	Y+29, r24	; 0x1d
//SEND DISPLAY CONTROL COMMAND
_delay_ms(1); //SHOULD BE 39US
LCD_WriteCommand4Bit(DISPALY_ON_OFF_COMMAND);
    28cc:	8e e0       	ldi	r24, 0x0E	; 14
    28ce:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_WriteCommand4Bit>
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	a0 e8       	ldi	r26, 0x80	; 128
    28d8:	bf e3       	ldi	r27, 0x3F	; 63
    28da:	89 8f       	std	Y+25, r24	; 0x19
    28dc:	9a 8f       	std	Y+26, r25	; 0x1a
    28de:	ab 8f       	std	Y+27, r26	; 0x1b
    28e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e2:	69 8d       	ldd	r22, Y+25	; 0x19
    28e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	4a e7       	ldi	r20, 0x7A	; 122
    28f0:	53 e4       	ldi	r21, 0x43	; 67
    28f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	8d 8b       	std	Y+21, r24	; 0x15
    28fc:	9e 8b       	std	Y+22, r25	; 0x16
    28fe:	af 8b       	std	Y+23, r26	; 0x17
    2900:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2902:	6d 89       	ldd	r22, Y+21	; 0x15
    2904:	7e 89       	ldd	r23, Y+22	; 0x16
    2906:	8f 89       	ldd	r24, Y+23	; 0x17
    2908:	98 8d       	ldd	r25, Y+24	; 0x18
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e8       	ldi	r20, 0x80	; 128
    2910:	5f e3       	ldi	r21, 0x3F	; 63
    2912:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2916:	88 23       	and	r24, r24
    2918:	2c f4       	brge	.+10     	; 0x2924 <LCDInit4BitMode+0x39c>
		__ticks = 1;
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	9c 8b       	std	Y+20, r25	; 0x14
    2920:	8b 8b       	std	Y+19, r24	; 0x13
    2922:	3f c0       	rjmp	.+126    	; 0x29a2 <LCDInit4BitMode+0x41a>
	else if (__tmp > 65535)
    2924:	6d 89       	ldd	r22, Y+21	; 0x15
    2926:	7e 89       	ldd	r23, Y+22	; 0x16
    2928:	8f 89       	ldd	r24, Y+23	; 0x17
    292a:	98 8d       	ldd	r25, Y+24	; 0x18
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	3f ef       	ldi	r19, 0xFF	; 255
    2930:	4f e7       	ldi	r20, 0x7F	; 127
    2932:	57 e4       	ldi	r21, 0x47	; 71
    2934:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2938:	18 16       	cp	r1, r24
    293a:	4c f5       	brge	.+82     	; 0x298e <LCDInit4BitMode+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293c:	69 8d       	ldd	r22, Y+25	; 0x19
    293e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2940:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2942:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e2       	ldi	r20, 0x20	; 32
    294a:	51 e4       	ldi	r21, 0x41	; 65
    294c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	bc 01       	movw	r22, r24
    2956:	cd 01       	movw	r24, r26
    2958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	9c 8b       	std	Y+20, r25	; 0x14
    2962:	8b 8b       	std	Y+19, r24	; 0x13
    2964:	0f c0       	rjmp	.+30     	; 0x2984 <LCDInit4BitMode+0x3fc>
    2966:	89 e1       	ldi	r24, 0x19	; 25
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	9a 8b       	std	Y+18, r25	; 0x12
    296c:	89 8b       	std	Y+17, r24	; 0x11
    296e:	89 89       	ldd	r24, Y+17	; 0x11
    2970:	9a 89       	ldd	r25, Y+18	; 0x12
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	f1 f7       	brne	.-4      	; 0x2972 <LCDInit4BitMode+0x3ea>
    2976:	9a 8b       	std	Y+18, r25	; 0x12
    2978:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    297a:	8b 89       	ldd	r24, Y+19	; 0x13
    297c:	9c 89       	ldd	r25, Y+20	; 0x14
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	9c 8b       	std	Y+20, r25	; 0x14
    2982:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2984:	8b 89       	ldd	r24, Y+19	; 0x13
    2986:	9c 89       	ldd	r25, Y+20	; 0x14
    2988:	00 97       	sbiw	r24, 0x00	; 0
    298a:	69 f7       	brne	.-38     	; 0x2966 <LCDInit4BitMode+0x3de>
    298c:	14 c0       	rjmp	.+40     	; 0x29b6 <LCDInit4BitMode+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298e:	6d 89       	ldd	r22, Y+21	; 0x15
    2990:	7e 89       	ldd	r23, Y+22	; 0x16
    2992:	8f 89       	ldd	r24, Y+23	; 0x17
    2994:	98 8d       	ldd	r25, Y+24	; 0x18
    2996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	9c 8b       	std	Y+20, r25	; 0x14
    29a0:	8b 8b       	std	Y+19, r24	; 0x13
    29a2:	8b 89       	ldd	r24, Y+19	; 0x13
    29a4:	9c 89       	ldd	r25, Y+20	; 0x14
    29a6:	98 8b       	std	Y+16, r25	; 0x10
    29a8:	8f 87       	std	Y+15, r24	; 0x0f
    29aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ac:	98 89       	ldd	r25, Y+16	; 0x10
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	f1 f7       	brne	.-4      	; 0x29ae <LCDInit4BitMode+0x426>
    29b2:	98 8b       	std	Y+16, r25	; 0x10
    29b4:	8f 87       	std	Y+15, r24	; 0x0f
//SEND CLEAR COMMAND
_delay_ms(1); //SHOULD BE 39US
LCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_WriteCommand4Bit>
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	a0 e0       	ldi	r26, 0x00	; 0
    29c2:	b0 e4       	ldi	r27, 0x40	; 64
    29c4:	8b 87       	std	Y+11, r24	; 0x0b
    29c6:	9c 87       	std	Y+12, r25	; 0x0c
    29c8:	ad 87       	std	Y+13, r26	; 0x0d
    29ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	4a e7       	ldi	r20, 0x7A	; 122
    29da:	53 e4       	ldi	r21, 0x43	; 67
    29dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	8f 83       	std	Y+7, r24	; 0x07
    29e6:	98 87       	std	Y+8, r25	; 0x08
    29e8:	a9 87       	std	Y+9, r26	; 0x09
    29ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ec:	6f 81       	ldd	r22, Y+7	; 0x07
    29ee:	78 85       	ldd	r23, Y+8	; 0x08
    29f0:	89 85       	ldd	r24, Y+9	; 0x09
    29f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	40 e8       	ldi	r20, 0x80	; 128
    29fa:	5f e3       	ldi	r21, 0x3F	; 63
    29fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a00:	88 23       	and	r24, r24
    2a02:	2c f4       	brge	.+10     	; 0x2a0e <LCDInit4BitMode+0x486>
		__ticks = 1;
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	9e 83       	std	Y+6, r25	; 0x06
    2a0a:	8d 83       	std	Y+5, r24	; 0x05
    2a0c:	3f c0       	rjmp	.+126    	; 0x2a8c <LCDInit4BitMode+0x504>
	else if (__tmp > 65535)
    2a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a10:	78 85       	ldd	r23, Y+8	; 0x08
    2a12:	89 85       	ldd	r24, Y+9	; 0x09
    2a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	3f ef       	ldi	r19, 0xFF	; 255
    2a1a:	4f e7       	ldi	r20, 0x7F	; 127
    2a1c:	57 e4       	ldi	r21, 0x47	; 71
    2a1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a22:	18 16       	cp	r1, r24
    2a24:	4c f5       	brge	.+82     	; 0x2a78 <LCDInit4BitMode+0x4f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a26:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a28:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	40 e2       	ldi	r20, 0x20	; 32
    2a34:	51 e4       	ldi	r21, 0x41	; 65
    2a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	bc 01       	movw	r22, r24
    2a40:	cd 01       	movw	r24, r26
    2a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	9e 83       	std	Y+6, r25	; 0x06
    2a4c:	8d 83       	std	Y+5, r24	; 0x05
    2a4e:	0f c0       	rjmp	.+30     	; 0x2a6e <LCDInit4BitMode+0x4e6>
    2a50:	89 e1       	ldi	r24, 0x19	; 25
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	9c 83       	std	Y+4, r25	; 0x04
    2a56:	8b 83       	std	Y+3, r24	; 0x03
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	f1 f7       	brne	.-4      	; 0x2a5c <LCDInit4BitMode+0x4d4>
    2a60:	9c 83       	std	Y+4, r25	; 0x04
    2a62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a64:	8d 81       	ldd	r24, Y+5	; 0x05
    2a66:	9e 81       	ldd	r25, Y+6	; 0x06
    2a68:	01 97       	sbiw	r24, 0x01	; 1
    2a6a:	9e 83       	std	Y+6, r25	; 0x06
    2a6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a70:	9e 81       	ldd	r25, Y+6	; 0x06
    2a72:	00 97       	sbiw	r24, 0x00	; 0
    2a74:	69 f7       	brne	.-38     	; 0x2a50 <LCDInit4BitMode+0x4c8>
    2a76:	14 c0       	rjmp	.+40     	; 0x2aa0 <LCDInit4BitMode+0x518>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a78:	6f 81       	ldd	r22, Y+7	; 0x07
    2a7a:	78 85       	ldd	r23, Y+8	; 0x08
    2a7c:	89 85       	ldd	r24, Y+9	; 0x09
    2a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	9e 83       	std	Y+6, r25	; 0x06
    2a8a:	8d 83       	std	Y+5, r24	; 0x05
    2a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a90:	9a 83       	std	Y+2, r25	; 0x02
    2a92:	89 83       	std	Y+1, r24	; 0x01
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	9a 81       	ldd	r25, Y+2	; 0x02
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	f1 f7       	brne	.-4      	; 0x2a98 <LCDInit4BitMode+0x510>
    2a9c:	9a 83       	std	Y+2, r25	; 0x02
    2a9e:	89 83       	std	Y+1, r24	; 0x01
//SEND ENRTYMODE COMMAND
_delay_ms(2);
LCD_WriteCommand4Bit(ENTRY_MODE_COMMAND);
    2aa0:	86 e0       	ldi	r24, 0x06	; 6
    2aa2:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_WriteCommand4Bit>
}
    2aa6:	ca 5b       	subi	r28, 0xBA	; 186
    2aa8:	df 4f       	sbci	r29, 0xFF	; 255
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	f8 94       	cli
    2aae:	de bf       	out	0x3e, r29	; 62
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	cd bf       	out	0x3d, r28	; 61
    2ab4:	cf 91       	pop	r28
    2ab6:	df 91       	pop	r29
    2ab8:	1f 91       	pop	r17
    2aba:	0f 91       	pop	r16
    2abc:	08 95       	ret

00002abe <LCD_WriteCommand4Bit>:
void LCD_WriteCommand4Bit(u8 Copy_u8Command){
    2abe:	df 93       	push	r29
    2ac0:	cf 93       	push	r28
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    2ac6:	6d 97       	sbiw	r28, 0x1d	; 29
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	de bf       	out	0x3e, r29	; 62
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	cd bf       	out	0x3d, r28	; 61
    2ad2:	8d 8f       	std	Y+29, r24	; 0x1d
	//SET RW TO ZERO
	Dio_enuWriteChannel(RW,DIO_u8LEVEL_LOW);
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	60 e0       	ldi	r22, 0x00	; 0
    2ad8:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
	//SET RS TO ZERO
	Dio_enuWriteChannel(RS,DIO_u8LEVEL_LOW);
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	60 e0       	ldi	r22, 0x00	; 0
    2ae0:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
	//set high nibble value of command
	DIO_SetNibbleValue(LCD_PIN_START,DATA_PORT,Copy_u8Command>>4);
    2ae4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ae6:	98 2f       	mov	r25, r24
    2ae8:	92 95       	swap	r25
    2aea:	9f 70       	andi	r25, 0x0F	; 15
    2aec:	84 e0       	ldi	r24, 0x04	; 4
    2aee:	61 e0       	ldi	r22, 0x01	; 1
    2af0:	49 2f       	mov	r20, r25
    2af2:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <DIO_SetNibbleValue>
	//SEND THE FALLING EDGE ENABLE
	Dio_enuWriteChannel(E,DIO_u8LEVEL_HIGH);
    2af6:	82 e0       	ldi	r24, 0x02	; 2
    2af8:	61 e0       	ldi	r22, 0x01	; 1
    2afa:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	a0 e0       	ldi	r26, 0x00	; 0
    2b04:	b0 e4       	ldi	r27, 0x40	; 64
    2b06:	89 8f       	std	Y+25, r24	; 0x19
    2b08:	9a 8f       	std	Y+26, r25	; 0x1a
    2b0a:	ab 8f       	std	Y+27, r26	; 0x1b
    2b0c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	4a e7       	ldi	r20, 0x7A	; 122
    2b1c:	53 e4       	ldi	r21, 0x43	; 67
    2b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	8d 8b       	std	Y+21, r24	; 0x15
    2b28:	9e 8b       	std	Y+22, r25	; 0x16
    2b2a:	af 8b       	std	Y+23, r26	; 0x17
    2b2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b30:	7e 89       	ldd	r23, Y+22	; 0x16
    2b32:	8f 89       	ldd	r24, Y+23	; 0x17
    2b34:	98 8d       	ldd	r25, Y+24	; 0x18
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e8       	ldi	r20, 0x80	; 128
    2b3c:	5f e3       	ldi	r21, 0x3F	; 63
    2b3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b42:	88 23       	and	r24, r24
    2b44:	2c f4       	brge	.+10     	; 0x2b50 <LCD_WriteCommand4Bit+0x92>
		__ticks = 1;
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	9c 8b       	std	Y+20, r25	; 0x14
    2b4c:	8b 8b       	std	Y+19, r24	; 0x13
    2b4e:	3f c0       	rjmp	.+126    	; 0x2bce <LCD_WriteCommand4Bit+0x110>
	else if (__tmp > 65535)
    2b50:	6d 89       	ldd	r22, Y+21	; 0x15
    2b52:	7e 89       	ldd	r23, Y+22	; 0x16
    2b54:	8f 89       	ldd	r24, Y+23	; 0x17
    2b56:	98 8d       	ldd	r25, Y+24	; 0x18
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	3f ef       	ldi	r19, 0xFF	; 255
    2b5c:	4f e7       	ldi	r20, 0x7F	; 127
    2b5e:	57 e4       	ldi	r21, 0x47	; 71
    2b60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b64:	18 16       	cp	r1, r24
    2b66:	4c f5       	brge	.+82     	; 0x2bba <LCD_WriteCommand4Bit+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b68:	69 8d       	ldd	r22, Y+25	; 0x19
    2b6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	40 e2       	ldi	r20, 0x20	; 32
    2b76:	51 e4       	ldi	r21, 0x41	; 65
    2b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	bc 01       	movw	r22, r24
    2b82:	cd 01       	movw	r24, r26
    2b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	9c 8b       	std	Y+20, r25	; 0x14
    2b8e:	8b 8b       	std	Y+19, r24	; 0x13
    2b90:	0f c0       	rjmp	.+30     	; 0x2bb0 <LCD_WriteCommand4Bit+0xf2>
    2b92:	89 e1       	ldi	r24, 0x19	; 25
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	9a 8b       	std	Y+18, r25	; 0x12
    2b98:	89 8b       	std	Y+17, r24	; 0x11
    2b9a:	89 89       	ldd	r24, Y+17	; 0x11
    2b9c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	f1 f7       	brne	.-4      	; 0x2b9e <LCD_WriteCommand4Bit+0xe0>
    2ba2:	9a 8b       	std	Y+18, r25	; 0x12
    2ba4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba8:	9c 89       	ldd	r25, Y+20	; 0x14
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	9c 8b       	std	Y+20, r25	; 0x14
    2bae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb0:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb2:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb4:	00 97       	sbiw	r24, 0x00	; 0
    2bb6:	69 f7       	brne	.-38     	; 0x2b92 <LCD_WriteCommand4Bit+0xd4>
    2bb8:	14 c0       	rjmp	.+40     	; 0x2be2 <LCD_WriteCommand4Bit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bba:	6d 89       	ldd	r22, Y+21	; 0x15
    2bbc:	7e 89       	ldd	r23, Y+22	; 0x16
    2bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	9c 8b       	std	Y+20, r25	; 0x14
    2bcc:	8b 8b       	std	Y+19, r24	; 0x13
    2bce:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd2:	98 8b       	std	Y+16, r25	; 0x10
    2bd4:	8f 87       	std	Y+15, r24	; 0x0f
    2bd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bd8:	98 89       	ldd	r25, Y+16	; 0x10
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	f1 f7       	brne	.-4      	; 0x2bda <LCD_WriteCommand4Bit+0x11c>
    2bde:	98 8b       	std	Y+16, r25	; 0x10
    2be0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	Dio_enuWriteChannel(E,DIO_u8LEVEL_LOW);
    2be2:	82 e0       	ldi	r24, 0x02	; 2
    2be4:	60 e0       	ldi	r22, 0x00	; 0
    2be6:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
	//set LOW nibble value of command
	DIO_SetNibbleValue(LCD_PIN_START,DATA_PORT,Copy_u8Command);
    2bea:	84 e0       	ldi	r24, 0x04	; 4
    2bec:	61 e0       	ldi	r22, 0x01	; 1
    2bee:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2bf0:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <DIO_SetNibbleValue>
	//SEND THE FALLING EDGE ENABLE
	Dio_enuWriteChannel(E,DIO_u8LEVEL_HIGH);
    2bf4:	82 e0       	ldi	r24, 0x02	; 2
    2bf6:	61 e0       	ldi	r22, 0x01	; 1
    2bf8:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	a0 e0       	ldi	r26, 0x00	; 0
    2c02:	b0 e4       	ldi	r27, 0x40	; 64
    2c04:	8b 87       	std	Y+11, r24	; 0x0b
    2c06:	9c 87       	std	Y+12, r25	; 0x0c
    2c08:	ad 87       	std	Y+13, r26	; 0x0d
    2c0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	4a e7       	ldi	r20, 0x7A	; 122
    2c1a:	53 e4       	ldi	r21, 0x43	; 67
    2c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	8f 83       	std	Y+7, r24	; 0x07
    2c26:	98 87       	std	Y+8, r25	; 0x08
    2c28:	a9 87       	std	Y+9, r26	; 0x09
    2c2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2e:	78 85       	ldd	r23, Y+8	; 0x08
    2c30:	89 85       	ldd	r24, Y+9	; 0x09
    2c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	40 e8       	ldi	r20, 0x80	; 128
    2c3a:	5f e3       	ldi	r21, 0x3F	; 63
    2c3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c40:	88 23       	and	r24, r24
    2c42:	2c f4       	brge	.+10     	; 0x2c4e <LCD_WriteCommand4Bit+0x190>
		__ticks = 1;
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	9e 83       	std	Y+6, r25	; 0x06
    2c4a:	8d 83       	std	Y+5, r24	; 0x05
    2c4c:	3f c0       	rjmp	.+126    	; 0x2ccc <LCD_WriteCommand4Bit+0x20e>
	else if (__tmp > 65535)
    2c4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c50:	78 85       	ldd	r23, Y+8	; 0x08
    2c52:	89 85       	ldd	r24, Y+9	; 0x09
    2c54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	3f ef       	ldi	r19, 0xFF	; 255
    2c5a:	4f e7       	ldi	r20, 0x7F	; 127
    2c5c:	57 e4       	ldi	r21, 0x47	; 71
    2c5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c62:	18 16       	cp	r1, r24
    2c64:	4c f5       	brge	.+82     	; 0x2cb8 <LCD_WriteCommand4Bit+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	40 e2       	ldi	r20, 0x20	; 32
    2c74:	51 e4       	ldi	r21, 0x41	; 65
    2c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	bc 01       	movw	r22, r24
    2c80:	cd 01       	movw	r24, r26
    2c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	9e 83       	std	Y+6, r25	; 0x06
    2c8c:	8d 83       	std	Y+5, r24	; 0x05
    2c8e:	0f c0       	rjmp	.+30     	; 0x2cae <LCD_WriteCommand4Bit+0x1f0>
    2c90:	89 e1       	ldi	r24, 0x19	; 25
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	9c 83       	std	Y+4, r25	; 0x04
    2c96:	8b 83       	std	Y+3, r24	; 0x03
    2c98:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	f1 f7       	brne	.-4      	; 0x2c9c <LCD_WriteCommand4Bit+0x1de>
    2ca0:	9c 83       	std	Y+4, r25	; 0x04
    2ca2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	9e 83       	std	Y+6, r25	; 0x06
    2cac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cae:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb2:	00 97       	sbiw	r24, 0x00	; 0
    2cb4:	69 f7       	brne	.-38     	; 0x2c90 <LCD_WriteCommand4Bit+0x1d2>
    2cb6:	14 c0       	rjmp	.+40     	; 0x2ce0 <LCD_WriteCommand4Bit+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cba:	78 85       	ldd	r23, Y+8	; 0x08
    2cbc:	89 85       	ldd	r24, Y+9	; 0x09
    2cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	9e 83       	std	Y+6, r25	; 0x06
    2cca:	8d 83       	std	Y+5, r24	; 0x05
    2ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cce:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd0:	9a 83       	std	Y+2, r25	; 0x02
    2cd2:	89 83       	std	Y+1, r24	; 0x01
    2cd4:	89 81       	ldd	r24, Y+1	; 0x01
    2cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	f1 f7       	brne	.-4      	; 0x2cd8 <LCD_WriteCommand4Bit+0x21a>
    2cdc:	9a 83       	std	Y+2, r25	; 0x02
    2cde:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		Dio_enuWriteChannel(E,DIO_u8LEVEL_LOW);
    2ce0:	82 e0       	ldi	r24, 0x02	; 2
    2ce2:	60 e0       	ldi	r22, 0x00	; 0
    2ce4:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
}
    2ce8:	6d 96       	adiw	r28, 0x1d	; 29
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	de bf       	out	0x3e, r29	; 62
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	cd bf       	out	0x3d, r28	; 61
    2cf4:	cf 91       	pop	r28
    2cf6:	df 91       	pop	r29
    2cf8:	08 95       	ret

00002cfa <LCD_WriteChar4Bit>:

/*sending this function an integer from 0 to 7 prints custom char stored in cgram*/
void LCD_WriteChar4Bit(u8 Copy_u8Data){
    2cfa:	df 93       	push	r29
    2cfc:	cf 93       	push	r28
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
    2d02:	6d 97       	sbiw	r28, 0x1d	; 29
    2d04:	0f b6       	in	r0, 0x3f	; 63
    2d06:	f8 94       	cli
    2d08:	de bf       	out	0x3e, r29	; 62
    2d0a:	0f be       	out	0x3f, r0	; 63
    2d0c:	cd bf       	out	0x3d, r28	; 61
    2d0e:	8d 8f       	std	Y+29, r24	; 0x1d
	//SET RW TO low
	Dio_enuWriteChannel(RW,DIO_u8LEVEL_LOW);
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	60 e0       	ldi	r22, 0x00	; 0
    2d14:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
	//SET RS TO high
	Dio_enuWriteChannel(RS,DIO_u8LEVEL_HIGH);
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	61 e0       	ldi	r22, 0x01	; 1
    2d1c:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
	//set high nibble value of DATA
	DIO_SetNibbleValue(LCD_PIN_START,DATA_PORT,Copy_u8Data>>4);
    2d20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d22:	98 2f       	mov	r25, r24
    2d24:	92 95       	swap	r25
    2d26:	9f 70       	andi	r25, 0x0F	; 15
    2d28:	84 e0       	ldi	r24, 0x04	; 4
    2d2a:	61 e0       	ldi	r22, 0x01	; 1
    2d2c:	49 2f       	mov	r20, r25
    2d2e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <DIO_SetNibbleValue>
	//SEND THE FALLING EDGE ENABLE
	Dio_enuWriteChannel(E,DIO_u8LEVEL_HIGH);
    2d32:	82 e0       	ldi	r24, 0x02	; 2
    2d34:	61 e0       	ldi	r22, 0x01	; 1
    2d36:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	a0 e0       	ldi	r26, 0x00	; 0
    2d40:	b0 e4       	ldi	r27, 0x40	; 64
    2d42:	89 8f       	std	Y+25, r24	; 0x19
    2d44:	9a 8f       	std	Y+26, r25	; 0x1a
    2d46:	ab 8f       	std	Y+27, r26	; 0x1b
    2d48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d4a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	4a e7       	ldi	r20, 0x7A	; 122
    2d58:	53 e4       	ldi	r21, 0x43	; 67
    2d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	8d 8b       	std	Y+21, r24	; 0x15
    2d64:	9e 8b       	std	Y+22, r25	; 0x16
    2d66:	af 8b       	std	Y+23, r26	; 0x17
    2d68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d6a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d6c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d6e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d70:	98 8d       	ldd	r25, Y+24	; 0x18
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	40 e8       	ldi	r20, 0x80	; 128
    2d78:	5f e3       	ldi	r21, 0x3F	; 63
    2d7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d7e:	88 23       	and	r24, r24
    2d80:	2c f4       	brge	.+10     	; 0x2d8c <LCD_WriteChar4Bit+0x92>
		__ticks = 1;
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	9c 8b       	std	Y+20, r25	; 0x14
    2d88:	8b 8b       	std	Y+19, r24	; 0x13
    2d8a:	3f c0       	rjmp	.+126    	; 0x2e0a <LCD_WriteChar4Bit+0x110>
	else if (__tmp > 65535)
    2d8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d90:	8f 89       	ldd	r24, Y+23	; 0x17
    2d92:	98 8d       	ldd	r25, Y+24	; 0x18
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	3f ef       	ldi	r19, 0xFF	; 255
    2d98:	4f e7       	ldi	r20, 0x7F	; 127
    2d9a:	57 e4       	ldi	r21, 0x47	; 71
    2d9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2da0:	18 16       	cp	r1, r24
    2da2:	4c f5       	brge	.+82     	; 0x2df6 <LCD_WriteChar4Bit+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da4:	69 8d       	ldd	r22, Y+25	; 0x19
    2da6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2da8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2daa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	40 e2       	ldi	r20, 0x20	; 32
    2db2:	51 e4       	ldi	r21, 0x41	; 65
    2db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	bc 01       	movw	r22, r24
    2dbe:	cd 01       	movw	r24, r26
    2dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	9c 8b       	std	Y+20, r25	; 0x14
    2dca:	8b 8b       	std	Y+19, r24	; 0x13
    2dcc:	0f c0       	rjmp	.+30     	; 0x2dec <LCD_WriteChar4Bit+0xf2>
    2dce:	89 e1       	ldi	r24, 0x19	; 25
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	9a 8b       	std	Y+18, r25	; 0x12
    2dd4:	89 8b       	std	Y+17, r24	; 0x11
    2dd6:	89 89       	ldd	r24, Y+17	; 0x11
    2dd8:	9a 89       	ldd	r25, Y+18	; 0x12
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	f1 f7       	brne	.-4      	; 0x2dda <LCD_WriteChar4Bit+0xe0>
    2dde:	9a 8b       	std	Y+18, r25	; 0x12
    2de0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de2:	8b 89       	ldd	r24, Y+19	; 0x13
    2de4:	9c 89       	ldd	r25, Y+20	; 0x14
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	9c 8b       	std	Y+20, r25	; 0x14
    2dea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dec:	8b 89       	ldd	r24, Y+19	; 0x13
    2dee:	9c 89       	ldd	r25, Y+20	; 0x14
    2df0:	00 97       	sbiw	r24, 0x00	; 0
    2df2:	69 f7       	brne	.-38     	; 0x2dce <LCD_WriteChar4Bit+0xd4>
    2df4:	14 c0       	rjmp	.+40     	; 0x2e1e <LCD_WriteChar4Bit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df6:	6d 89       	ldd	r22, Y+21	; 0x15
    2df8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dfa:	8f 89       	ldd	r24, Y+23	; 0x17
    2dfc:	98 8d       	ldd	r25, Y+24	; 0x18
    2dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	9c 8b       	std	Y+20, r25	; 0x14
    2e08:	8b 8b       	std	Y+19, r24	; 0x13
    2e0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e0e:	98 8b       	std	Y+16, r25	; 0x10
    2e10:	8f 87       	std	Y+15, r24	; 0x0f
    2e12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e14:	98 89       	ldd	r25, Y+16	; 0x10
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	f1 f7       	brne	.-4      	; 0x2e16 <LCD_WriteChar4Bit+0x11c>
    2e1a:	98 8b       	std	Y+16, r25	; 0x10
    2e1c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	Dio_enuWriteChannel(E,DIO_u8LEVEL_LOW);
    2e1e:	82 e0       	ldi	r24, 0x02	; 2
    2e20:	60 e0       	ldi	r22, 0x00	; 0
    2e22:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
	//set LOW nibble value of DATA
	DIO_SetNibbleValue(LCD_PIN_START,DATA_PORT,Copy_u8Data);
    2e26:	84 e0       	ldi	r24, 0x04	; 4
    2e28:	61 e0       	ldi	r22, 0x01	; 1
    2e2a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2e2c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <DIO_SetNibbleValue>
	//SEND THE FALLING EDGE ENABLE
	Dio_enuWriteChannel(E,DIO_u8LEVEL_HIGH);
    2e30:	82 e0       	ldi	r24, 0x02	; 2
    2e32:	61 e0       	ldi	r22, 0x01	; 1
    2e34:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	a0 e0       	ldi	r26, 0x00	; 0
    2e3e:	b0 e4       	ldi	r27, 0x40	; 64
    2e40:	8b 87       	std	Y+11, r24	; 0x0b
    2e42:	9c 87       	std	Y+12, r25	; 0x0c
    2e44:	ad 87       	std	Y+13, r26	; 0x0d
    2e46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	4a e7       	ldi	r20, 0x7A	; 122
    2e56:	53 e4       	ldi	r21, 0x43	; 67
    2e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	8f 83       	std	Y+7, r24	; 0x07
    2e62:	98 87       	std	Y+8, r25	; 0x08
    2e64:	a9 87       	std	Y+9, r26	; 0x09
    2e66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e68:	6f 81       	ldd	r22, Y+7	; 0x07
    2e6a:	78 85       	ldd	r23, Y+8	; 0x08
    2e6c:	89 85       	ldd	r24, Y+9	; 0x09
    2e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	40 e8       	ldi	r20, 0x80	; 128
    2e76:	5f e3       	ldi	r21, 0x3F	; 63
    2e78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e7c:	88 23       	and	r24, r24
    2e7e:	2c f4       	brge	.+10     	; 0x2e8a <LCD_WriteChar4Bit+0x190>
		__ticks = 1;
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	9e 83       	std	Y+6, r25	; 0x06
    2e86:	8d 83       	std	Y+5, r24	; 0x05
    2e88:	3f c0       	rjmp	.+126    	; 0x2f08 <LCD_WriteChar4Bit+0x20e>
	else if (__tmp > 65535)
    2e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e8c:	78 85       	ldd	r23, Y+8	; 0x08
    2e8e:	89 85       	ldd	r24, Y+9	; 0x09
    2e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	3f ef       	ldi	r19, 0xFF	; 255
    2e96:	4f e7       	ldi	r20, 0x7F	; 127
    2e98:	57 e4       	ldi	r21, 0x47	; 71
    2e9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e9e:	18 16       	cp	r1, r24
    2ea0:	4c f5       	brge	.+82     	; 0x2ef4 <LCD_WriteChar4Bit+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	40 e2       	ldi	r20, 0x20	; 32
    2eb0:	51 e4       	ldi	r21, 0x41	; 65
    2eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	bc 01       	movw	r22, r24
    2ebc:	cd 01       	movw	r24, r26
    2ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	9e 83       	std	Y+6, r25	; 0x06
    2ec8:	8d 83       	std	Y+5, r24	; 0x05
    2eca:	0f c0       	rjmp	.+30     	; 0x2eea <LCD_WriteChar4Bit+0x1f0>
    2ecc:	89 e1       	ldi	r24, 0x19	; 25
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	9c 83       	std	Y+4, r25	; 0x04
    2ed2:	8b 83       	std	Y+3, r24	; 0x03
    2ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	f1 f7       	brne	.-4      	; 0x2ed8 <LCD_WriteChar4Bit+0x1de>
    2edc:	9c 83       	std	Y+4, r25	; 0x04
    2ede:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	9e 83       	std	Y+6, r25	; 0x06
    2ee8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eea:	8d 81       	ldd	r24, Y+5	; 0x05
    2eec:	9e 81       	ldd	r25, Y+6	; 0x06
    2eee:	00 97       	sbiw	r24, 0x00	; 0
    2ef0:	69 f7       	brne	.-38     	; 0x2ecc <LCD_WriteChar4Bit+0x1d2>
    2ef2:	14 c0       	rjmp	.+40     	; 0x2f1c <LCD_WriteChar4Bit+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef6:	78 85       	ldd	r23, Y+8	; 0x08
    2ef8:	89 85       	ldd	r24, Y+9	; 0x09
    2efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	9e 83       	std	Y+6, r25	; 0x06
    2f06:	8d 83       	std	Y+5, r24	; 0x05
    2f08:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0c:	9a 83       	std	Y+2, r25	; 0x02
    2f0e:	89 83       	std	Y+1, r24	; 0x01
    2f10:	89 81       	ldd	r24, Y+1	; 0x01
    2f12:	9a 81       	ldd	r25, Y+2	; 0x02
    2f14:	01 97       	sbiw	r24, 0x01	; 1
    2f16:	f1 f7       	brne	.-4      	; 0x2f14 <LCD_WriteChar4Bit+0x21a>
    2f18:	9a 83       	std	Y+2, r25	; 0x02
    2f1a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		Dio_enuWriteChannel(E,DIO_u8LEVEL_LOW);
    2f1c:	82 e0       	ldi	r24, 0x02	; 2
    2f1e:	60 e0       	ldi	r22, 0x00	; 0
    2f20:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
}
    2f24:	6d 96       	adiw	r28, 0x1d	; 29
    2f26:	0f b6       	in	r0, 0x3f	; 63
    2f28:	f8 94       	cli
    2f2a:	de bf       	out	0x3e, r29	; 62
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	cd bf       	out	0x3d, r28	; 61
    2f30:	cf 91       	pop	r28
    2f32:	df 91       	pop	r29
    2f34:	08 95       	ret

00002f36 <LCD_WriteString>:
void LCD_WriteString(u8 *u8Copy_u8String){
    2f36:	df 93       	push	r29
    2f38:	cf 93       	push	r28
    2f3a:	00 d0       	rcall	.+0      	; 0x2f3c <LCD_WriteString+0x6>
    2f3c:	00 d0       	rcall	.+0      	; 0x2f3e <LCD_WriteString+0x8>
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
    2f42:	9c 83       	std	Y+4, r25	; 0x04
    2f44:	8b 83       	std	Y+3, r24	; 0x03
	u8 Loc_u8Counter=0;
    2f46:	1a 82       	std	Y+2, r1	; 0x02
	u8 Copy_u8Data_SizeofString =0;
    2f48:	19 82       	std	Y+1, r1	; 0x01
	for (Loc_u8Counter = 0; u8Copy_u8String[Loc_u8Counter] != '\0'; Loc_u8Counter++){
    2f4a:	1a 82       	std	Y+2, r1	; 0x02
    2f4c:	06 c0       	rjmp	.+12     	; 0x2f5a <LCD_WriteString+0x24>
		Copy_u8Data_SizeofString =Loc_u8Counter+1;
    2f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f50:	8f 5f       	subi	r24, 0xFF	; 255
    2f52:	89 83       	std	Y+1, r24	; 0x01
		Dio_enuWriteChannel(E,DIO_u8LEVEL_LOW);
}
void LCD_WriteString(u8 *u8Copy_u8String){
	u8 Loc_u8Counter=0;
	u8 Copy_u8Data_SizeofString =0;
	for (Loc_u8Counter = 0; u8Copy_u8String[Loc_u8Counter] != '\0'; Loc_u8Counter++){
    2f54:	8a 81       	ldd	r24, Y+2	; 0x02
    2f56:	8f 5f       	subi	r24, 0xFF	; 255
    2f58:	8a 83       	std	Y+2, r24	; 0x02
    2f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5c:	28 2f       	mov	r18, r24
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	8b 81       	ldd	r24, Y+3	; 0x03
    2f62:	9c 81       	ldd	r25, Y+4	; 0x04
    2f64:	fc 01       	movw	r30, r24
    2f66:	e2 0f       	add	r30, r18
    2f68:	f3 1f       	adc	r31, r19
    2f6a:	80 81       	ld	r24, Z
    2f6c:	88 23       	and	r24, r24
    2f6e:	79 f7       	brne	.-34     	; 0x2f4e <LCD_WriteString+0x18>
		Copy_u8Data_SizeofString =Loc_u8Counter+1;
	}
	if(Copy_u8Data_SizeofString>32){
    2f70:	89 81       	ldd	r24, Y+1	; 0x01
    2f72:	81 32       	cpi	r24, 0x21	; 33
    2f74:	90 f5       	brcc	.+100    	; 0x2fda <LCD_WriteString+0xa4>
	//print error

	}
	else{
	Loc_u8Counter =0;
    2f76:	1a 82       	std	Y+2, r1	; 0x02
    2f78:	2d c0       	rjmp	.+90     	; 0x2fd4 <LCD_WriteString+0x9e>
	while(Copy_u8Data_SizeofString>0){
		if(Loc_u8Counter<LCD_LINE_LENGTH){
    2f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7c:	80 31       	cpi	r24, 0x10	; 16
    2f7e:	90 f4       	brcc	.+36     	; 0x2fa4 <LCD_WriteString+0x6e>
			LCD_WriteChar4Bit(u8Copy_u8String[Loc_u8Counter]);
    2f80:	8a 81       	ldd	r24, Y+2	; 0x02
    2f82:	28 2f       	mov	r18, r24
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	8b 81       	ldd	r24, Y+3	; 0x03
    2f88:	9c 81       	ldd	r25, Y+4	; 0x04
    2f8a:	fc 01       	movw	r30, r24
    2f8c:	e2 0f       	add	r30, r18
    2f8e:	f3 1f       	adc	r31, r19
    2f90:	80 81       	ld	r24, Z
    2f92:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_WriteChar4Bit>
		     Loc_u8Counter++;
    2f96:	8a 81       	ldd	r24, Y+2	; 0x02
    2f98:	8f 5f       	subi	r24, 0xFF	; 255
    2f9a:	8a 83       	std	Y+2, r24	; 0x02
			 Copy_u8Data_SizeofString--;
    2f9c:	89 81       	ldd	r24, Y+1	; 0x01
    2f9e:	81 50       	subi	r24, 0x01	; 1
    2fa0:	89 83       	std	Y+1, r24	; 0x01
    2fa2:	18 c0       	rjmp	.+48     	; 0x2fd4 <LCD_WriteString+0x9e>
		}
		else{
			 LCD_SetCursorPosition(LCD_LINE_1, Loc_u8Counter-LCD_LINE_LENGTH);
    2fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa6:	98 2f       	mov	r25, r24
    2fa8:	90 51       	subi	r25, 0x10	; 16
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	69 2f       	mov	r22, r25
    2fae:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <LCD_SetCursorPosition>
			 LCD_WriteChar4Bit(u8Copy_u8String[Loc_u8Counter]);
    2fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb4:	28 2f       	mov	r18, r24
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fba:	9c 81       	ldd	r25, Y+4	; 0x04
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	e2 0f       	add	r30, r18
    2fc0:	f3 1f       	adc	r31, r19
    2fc2:	80 81       	ld	r24, Z
    2fc4:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_WriteChar4Bit>
			 Loc_u8Counter++;
    2fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fca:	8f 5f       	subi	r24, 0xFF	; 255
    2fcc:	8a 83       	std	Y+2, r24	; 0x02
			 Copy_u8Data_SizeofString--;
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
    2fd0:	81 50       	subi	r24, 0x01	; 1
    2fd2:	89 83       	std	Y+1, r24	; 0x01
	//print error

	}
	else{
	Loc_u8Counter =0;
	while(Copy_u8Data_SizeofString>0){
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	88 23       	and	r24, r24
    2fd8:	81 f6       	brne	.-96     	; 0x2f7a <LCD_WriteString+0x44>
			 Copy_u8Data_SizeofString--;
		}
	}
	}

}
    2fda:	0f 90       	pop	r0
    2fdc:	0f 90       	pop	r0
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	cf 91       	pop	r28
    2fe4:	df 91       	pop	r29
    2fe6:	08 95       	ret

00002fe8 <LCD_SetCursorPosition>:
void LCD_SetCursorPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    2fe8:	df 93       	push	r29
    2fea:	cf 93       	push	r28
    2fec:	00 d0       	rcall	.+0      	; 0x2fee <LCD_SetCursorPosition+0x6>
    2fee:	cd b7       	in	r28, 0x3d	; 61
    2ff0:	de b7       	in	r29, 0x3e	; 62
    2ff2:	89 83       	std	Y+1, r24	; 0x01
    2ff4:	6a 83       	std	Y+2, r22	; 0x02
if((Copy_u8LineNumber==LCD_LINE_0)||(Copy_u8LineNumber==LCD_LINE_1))
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	88 23       	and	r24, r24
    2ffa:	19 f0       	breq	.+6      	; 0x3002 <LCD_SetCursorPosition+0x1a>
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	81 30       	cpi	r24, 0x01	; 1
    3000:	79 f4       	brne	.+30     	; 0x3020 <LCD_SetCursorPosition+0x38>
{
	if(Copy_u8PositionNumber<16)
    3002:	8a 81       	ldd	r24, Y+2	; 0x02
    3004:	80 31       	cpi	r24, 0x10	; 16
    3006:	60 f4       	brcc	.+24     	; 0x3020 <LCD_SetCursorPosition+0x38>
	{
		if(Copy_u8LineNumber==LCD_LINE_0)
    3008:	89 81       	ldd	r24, Y+1	; 0x01
    300a:	88 23       	and	r24, r24
    300c:	29 f4       	brne	.+10     	; 0x3018 <LCD_SetCursorPosition+0x30>
		{
			LCD_WriteCommand4Bit(Copy_u8PositionNumber+LCD_LINE0_OFFSET);
    300e:	8a 81       	ldd	r24, Y+2	; 0x02
    3010:	80 58       	subi	r24, 0x80	; 128
    3012:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_WriteCommand4Bit>
    3016:	04 c0       	rjmp	.+8      	; 0x3020 <LCD_SetCursorPosition+0x38>
		}
		else
		{
			LCD_WriteCommand4Bit(Copy_u8PositionNumber+LCD_LINE1_OFFSET);
    3018:	8a 81       	ldd	r24, Y+2	; 0x02
    301a:	80 54       	subi	r24, 0x40	; 64
    301c:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_WriteCommand4Bit>
}
else
{
	//Wrong Line Chosen
}
}
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	cf 91       	pop	r28
    3026:	df 91       	pop	r29
    3028:	08 95       	ret

0000302a <LCD_WriteNumber>:
void LCD_WriteNumber(u32 Copy_u32Number)
	{
    302a:	0f 93       	push	r16
    302c:	1f 93       	push	r17
    302e:	df 93       	push	r29
    3030:	cf 93       	push	r28
    3032:	cd b7       	in	r28, 0x3d	; 61
    3034:	de b7       	in	r29, 0x3e	; 62
    3036:	60 97       	sbiw	r28, 0x10	; 16
    3038:	0f b6       	in	r0, 0x3f	; 63
    303a:	f8 94       	cli
    303c:	de bf       	out	0x3e, r29	; 62
    303e:	0f be       	out	0x3f, r0	; 63
    3040:	cd bf       	out	0x3d, r28	; 61
    3042:	6d 87       	std	Y+13, r22	; 0x0d
    3044:	7e 87       	std	Y+14, r23	; 0x0e
    3046:	8f 87       	std	Y+15, r24	; 0x0f
    3048:	98 8b       	std	Y+16, r25	; 0x10
		which is 10 digits
		 */
		u8 Loc_u8Arr_Digits[10];

		/*Define a Local Counter to traverse the array*/
		u8 Loc_Counter=0;
    304a:	1a 82       	std	Y+2, r1	; 0x02

		/*Check on the upcoming number*/
		if(Copy_u32Number>0)
    304c:	8d 85       	ldd	r24, Y+13	; 0x0d
    304e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3050:	af 85       	ldd	r26, Y+15	; 0x0f
    3052:	b8 89       	ldd	r27, Y+16	; 0x10
    3054:	00 97       	sbiw	r24, 0x00	; 0
    3056:	a1 05       	cpc	r26, r1
    3058:	b1 05       	cpc	r27, r1
    305a:	09 f4       	brne	.+2      	; 0x305e <LCD_WriteNumber+0x34>
    305c:	4f c0       	rjmp	.+158    	; 0x30fc <LCD_WriteNumber+0xd2>
    305e:	2d c0       	rjmp	.+90     	; 0x30ba <LCD_WriteNumber+0x90>
			/*Parsing the number into the array*/
			while(Copy_u32Number!=0) //Exit Condition means number is done parsing
			{
				//Extract the Least Significant Digit and Put it in the
				//Array
				Loc_u8Arr_Digits[Loc_Counter]=Copy_u32Number%10 ;
    3060:	8a 81       	ldd	r24, Y+2	; 0x02
    3062:	08 2f       	mov	r16, r24
    3064:	10 e0       	ldi	r17, 0x00	; 0
    3066:	8d 85       	ldd	r24, Y+13	; 0x0d
    3068:	9e 85       	ldd	r25, Y+14	; 0x0e
    306a:	af 85       	ldd	r26, Y+15	; 0x0f
    306c:	b8 89       	ldd	r27, Y+16	; 0x10
    306e:	2a e0       	ldi	r18, 0x0A	; 10
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	40 e0       	ldi	r20, 0x00	; 0
    3074:	50 e0       	ldi	r21, 0x00	; 0
    3076:	bc 01       	movw	r22, r24
    3078:	cd 01       	movw	r24, r26
    307a:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <__udivmodsi4>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	28 2f       	mov	r18, r24
    3084:	ce 01       	movw	r24, r28
    3086:	03 96       	adiw	r24, 0x03	; 3
    3088:	fc 01       	movw	r30, r24
    308a:	e0 0f       	add	r30, r16
    308c:	f1 1f       	adc	r31, r17
    308e:	20 83       	st	Z, r18

				//Removing the Extracted digit from the number
				Copy_u32Number=Copy_u32Number/10 ;
    3090:	8d 85       	ldd	r24, Y+13	; 0x0d
    3092:	9e 85       	ldd	r25, Y+14	; 0x0e
    3094:	af 85       	ldd	r26, Y+15	; 0x0f
    3096:	b8 89       	ldd	r27, Y+16	; 0x10
    3098:	2a e0       	ldi	r18, 0x0A	; 10
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e0       	ldi	r20, 0x00	; 0
    309e:	50 e0       	ldi	r21, 0x00	; 0
    30a0:	bc 01       	movw	r22, r24
    30a2:	cd 01       	movw	r24, r26
    30a4:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <__udivmodsi4>
    30a8:	da 01       	movw	r26, r20
    30aa:	c9 01       	movw	r24, r18
    30ac:	8d 87       	std	Y+13, r24	; 0x0d
    30ae:	9e 87       	std	Y+14, r25	; 0x0e
    30b0:	af 87       	std	Y+15, r26	; 0x0f
    30b2:	b8 8b       	std	Y+16, r27	; 0x10

				//Increasing the counter so the digits are saved in next array element
				Loc_Counter++;
    30b4:	8a 81       	ldd	r24, Y+2	; 0x02
    30b6:	8f 5f       	subi	r24, 0xFF	; 255
    30b8:	8a 83       	std	Y+2, r24	; 0x02

		/*Check on the upcoming number*/
		if(Copy_u32Number>0)
		{
			/*Parsing the number into the array*/
			while(Copy_u32Number!=0) //Exit Condition means number is done parsing
    30ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    30bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    30be:	af 85       	ldd	r26, Y+15	; 0x0f
    30c0:	b8 89       	ldd	r27, Y+16	; 0x10
    30c2:	00 97       	sbiw	r24, 0x00	; 0
    30c4:	a1 05       	cpc	r26, r1
    30c6:	b1 05       	cpc	r27, r1
    30c8:	59 f6       	brne	.-106    	; 0x3060 <LCD_WriteNumber+0x36>
			//in the array but backwards

			//Take Care Loc_forCounter is signed
			//because we are decrementing it
			s8 Loc_forCounter;
			for(Loc_forCounter=Loc_Counter-1;Loc_forCounter>=0;Loc_forCounter--)
    30ca:	8a 81       	ldd	r24, Y+2	; 0x02
    30cc:	81 50       	subi	r24, 0x01	; 1
    30ce:	89 83       	std	Y+1, r24	; 0x01
    30d0:	11 c0       	rjmp	.+34     	; 0x30f4 <LCD_WriteNumber+0xca>
			{
				//Write the digits to the screen in their right order
				//Notice the addition of the number to the ASCII Code
				//of the number 0 because our Function takes ASCII of character
				//to Print on the LCD
				LCD_WriteChar4Bit(Loc_u8Arr_Digits[Loc_forCounter]+'0');
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	28 2f       	mov	r18, r24
    30d6:	33 27       	eor	r19, r19
    30d8:	27 fd       	sbrc	r18, 7
    30da:	30 95       	com	r19
    30dc:	ce 01       	movw	r24, r28
    30de:	03 96       	adiw	r24, 0x03	; 3
    30e0:	fc 01       	movw	r30, r24
    30e2:	e2 0f       	add	r30, r18
    30e4:	f3 1f       	adc	r31, r19
    30e6:	80 81       	ld	r24, Z
    30e8:	80 5d       	subi	r24, 0xD0	; 208
    30ea:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_WriteChar4Bit>
			//in the array but backwards

			//Take Care Loc_forCounter is signed
			//because we are decrementing it
			s8 Loc_forCounter;
			for(Loc_forCounter=Loc_Counter-1;Loc_forCounter>=0;Loc_forCounter--)
    30ee:	89 81       	ldd	r24, Y+1	; 0x01
    30f0:	81 50       	subi	r24, 0x01	; 1
    30f2:	89 83       	std	Y+1, r24	; 0x01
    30f4:	89 81       	ldd	r24, Y+1	; 0x01
    30f6:	88 23       	and	r24, r24
    30f8:	64 f7       	brge	.-40     	; 0x30d2 <LCD_WriteNumber+0xa8>
    30fa:	03 c0       	rjmp	.+6      	; 0x3102 <LCD_WriteNumber+0xd8>

		}
		else
		{
			/*if the number is zero so we have to send ASCII Code of Zero*/
			LCD_WriteChar4Bit('0');
    30fc:	80 e3       	ldi	r24, 0x30	; 48
    30fe:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_WriteChar4Bit>
		}

	}
    3102:	60 96       	adiw	r28, 0x10	; 16
    3104:	0f b6       	in	r0, 0x3f	; 63
    3106:	f8 94       	cli
    3108:	de bf       	out	0x3e, r29	; 62
    310a:	0f be       	out	0x3f, r0	; 63
    310c:	cd bf       	out	0x3d, r28	; 61
    310e:	cf 91       	pop	r28
    3110:	df 91       	pop	r29
    3112:	1f 91       	pop	r17
    3114:	0f 91       	pop	r16
    3116:	08 95       	ret

00003118 <LCD_CustomChar>:
void LCD_CustomChar (pu8 AddCustomChar,u8 index)
{
    3118:	df 93       	push	r29
    311a:	cf 93       	push	r28
    311c:	00 d0       	rcall	.+0      	; 0x311e <LCD_CustomChar+0x6>
    311e:	00 d0       	rcall	.+0      	; 0x3120 <LCD_CustomChar+0x8>
    3120:	cd b7       	in	r28, 0x3d	; 61
    3122:	de b7       	in	r29, 0x3e	; 62
    3124:	9b 83       	std	Y+3, r25	; 0x03
    3126:	8a 83       	std	Y+2, r24	; 0x02
    3128:	6c 83       	std	Y+4, r22	; 0x04
    u8 Localu8Counter;
    if(index<8)
    312a:	8c 81       	ldd	r24, Y+4	; 0x04
    312c:	88 30       	cpi	r24, 0x08	; 8
    312e:	f8 f4       	brcc	.+62     	; 0x316e <LCD_CustomChar+0x56>
    {
    	LCD_WriteCommand4Bit (0x40 + (index*8));  /* Command 0x40 and onwards forces
    3130:	8c 81       	ldd	r24, Y+4	; 0x04
    3132:	88 2f       	mov	r24, r24
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	08 96       	adiw	r24, 0x08	; 8
    3138:	88 0f       	add	r24, r24
    313a:	99 1f       	adc	r25, r25
    313c:	88 0f       	add	r24, r24
    313e:	99 1f       	adc	r25, r25
    3140:	88 0f       	add	r24, r24
    3142:	99 1f       	adc	r25, r25
    3144:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_WriteCommand4Bit>
                                       	   	   	   	    CGRAM address */
       for(Localu8Counter=0;Localu8Counter<8;Localu8Counter++)  /* Write 8 arrays values for generation of 1 character */
    3148:	19 82       	std	Y+1, r1	; 0x01
    314a:	0e c0       	rjmp	.+28     	; 0x3168 <LCD_CustomChar+0x50>
    	   LCD_WriteChar4Bit(AddCustomChar[Localu8Counter]);
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	28 2f       	mov	r18, r24
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	8a 81       	ldd	r24, Y+2	; 0x02
    3154:	9b 81       	ldd	r25, Y+3	; 0x03
    3156:	fc 01       	movw	r30, r24
    3158:	e2 0f       	add	r30, r18
    315a:	f3 1f       	adc	r31, r19
    315c:	80 81       	ld	r24, Z
    315e:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_WriteChar4Bit>
    u8 Localu8Counter;
    if(index<8)
    {
    	LCD_WriteCommand4Bit (0x40 + (index*8));  /* Command 0x40 and onwards forces
                                       	   	   	   	    CGRAM address */
       for(Localu8Counter=0;Localu8Counter<8;Localu8Counter++)  /* Write 8 arrays values for generation of 1 character */
    3162:	89 81       	ldd	r24, Y+1	; 0x01
    3164:	8f 5f       	subi	r24, 0xFF	; 255
    3166:	89 83       	std	Y+1, r24	; 0x01
    3168:	89 81       	ldd	r24, Y+1	; 0x01
    316a:	88 30       	cpi	r24, 0x08	; 8
    316c:	78 f3       	brcs	.-34     	; 0x314c <LCD_CustomChar+0x34>
    	   LCD_WriteChar4Bit(AddCustomChar[Localu8Counter]);
    }
}
    316e:	0f 90       	pop	r0
    3170:	0f 90       	pop	r0
    3172:	0f 90       	pop	r0
    3174:	0f 90       	pop	r0
    3176:	cf 91       	pop	r28
    3178:	df 91       	pop	r29
    317a:	08 95       	ret

0000317c <KeyPad_Init>:
 *  Created on: Oct 22, 2023
 *      Author: Ismail
 */
#include "KeyPad.h"
#include <util/delay.h>
void KeyPad_Init(){
    317c:	df 93       	push	r29
    317e:	cf 93       	push	r28
    3180:	cd b7       	in	r28, 0x3d	; 61
    3182:	de b7       	in	r29, 0x3e	; 62
	/*Set Columns Pins Direction Output*/
	Port_enuSetPinDirection(27,PORT_u8OUTPUT);
    3184:	8b e1       	ldi	r24, 0x1B	; 27
    3186:	61 e0       	ldi	r22, 0x01	; 1
    3188:	0e 94 3b 07 	call	0xe76	; 0xe76 <Port_enuSetPinDirection>
	Port_enuSetPinDirection(28,PORT_u8OUTPUT);
    318c:	8c e1       	ldi	r24, 0x1C	; 28
    318e:	61 e0       	ldi	r22, 0x01	; 1
    3190:	0e 94 3b 07 	call	0xe76	; 0xe76 <Port_enuSetPinDirection>
	Port_enuSetPinDirection(29,PORT_u8OUTPUT);
    3194:	8d e1       	ldi	r24, 0x1D	; 29
    3196:	61 e0       	ldi	r22, 0x01	; 1
    3198:	0e 94 3b 07 	call	0xe76	; 0xe76 <Port_enuSetPinDirection>
	Port_enuSetPinDirection(30,PORT_u8OUTPUT);
    319c:	8e e1       	ldi	r24, 0x1E	; 30
    319e:	61 e0       	ldi	r22, 0x01	; 1
    31a0:	0e 94 3b 07 	call	0xe76	; 0xe76 <Port_enuSetPinDirection>

		/*Set Row Pins Direction Input*/
	Port_enuSetPinDirection(18,PORT_u8INPUT);
    31a4:	82 e1       	ldi	r24, 0x12	; 18
    31a6:	60 e0       	ldi	r22, 0x00	; 0
    31a8:	0e 94 3b 07 	call	0xe76	; 0xe76 <Port_enuSetPinDirection>
	Port_enuSetPinDirection(19,PORT_u8INPUT);
    31ac:	83 e1       	ldi	r24, 0x13	; 19
    31ae:	60 e0       	ldi	r22, 0x00	; 0
    31b0:	0e 94 3b 07 	call	0xe76	; 0xe76 <Port_enuSetPinDirection>
	Port_enuSetPinDirection(20,PORT_u8INPUT);
    31b4:	84 e1       	ldi	r24, 0x14	; 20
    31b6:	60 e0       	ldi	r22, 0x00	; 0
    31b8:	0e 94 3b 07 	call	0xe76	; 0xe76 <Port_enuSetPinDirection>
	Port_enuSetPinDirection(21,PORT_u8INPUT);
    31bc:	85 e1       	ldi	r24, 0x15	; 21
    31be:	60 e0       	ldi	r22, 0x00	; 0
    31c0:	0e 94 3b 07 	call	0xe76	; 0xe76 <Port_enuSetPinDirection>

		/*Activate Pull up Resistor */
	Port_enuSetPinMode(18,PORT_u8INPUT_PULLUP);
    31c4:	82 e1       	ldi	r24, 0x12	; 18
    31c6:	63 e0       	ldi	r22, 0x03	; 3
    31c8:	0e 94 37 08 	call	0x106e	; 0x106e <Port_enuSetPinMode>
	Port_enuSetPinMode(19,PORT_u8INPUT_PULLUP);
    31cc:	83 e1       	ldi	r24, 0x13	; 19
    31ce:	63 e0       	ldi	r22, 0x03	; 3
    31d0:	0e 94 37 08 	call	0x106e	; 0x106e <Port_enuSetPinMode>
	Port_enuSetPinMode(20,PORT_u8INPUT_PULLUP);
    31d4:	84 e1       	ldi	r24, 0x14	; 20
    31d6:	63 e0       	ldi	r22, 0x03	; 3
    31d8:	0e 94 37 08 	call	0x106e	; 0x106e <Port_enuSetPinMode>
	Port_enuSetPinMode(21,PORT_u8INPUT_PULLUP);
    31dc:	85 e1       	ldi	r24, 0x15	; 21
    31de:	63 e0       	ldi	r22, 0x03	; 3
    31e0:	0e 94 37 08 	call	0x106e	; 0x106e <Port_enuSetPinMode>
	/*DEACTIVATE COULMNS*/
	Dio_enuWriteChannel(27,DIO_u8LEVEL_HIGH);
    31e4:	8b e1       	ldi	r24, 0x1B	; 27
    31e6:	61 e0       	ldi	r22, 0x01	; 1
    31e8:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(28,DIO_u8LEVEL_HIGH);
    31ec:	8c e1       	ldi	r24, 0x1C	; 28
    31ee:	61 e0       	ldi	r22, 0x01	; 1
    31f0:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(29,DIO_u8LEVEL_HIGH);
    31f4:	8d e1       	ldi	r24, 0x1D	; 29
    31f6:	61 e0       	ldi	r22, 0x01	; 1
    31f8:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(30,DIO_u8LEVEL_HIGH);
    31fc:	8e e1       	ldi	r24, 0x1E	; 30
    31fe:	61 e0       	ldi	r22, 0x01	; 1
    3200:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>

}
    3204:	cf 91       	pop	r28
    3206:	df 91       	pop	r29
    3208:	08 95       	ret

0000320a <KeyPad_GetPressedButton>:
void KeyPad_GetPressedButton(u8 *u8PtrToPressedButton){
    320a:	df 93       	push	r29
    320c:	cf 93       	push	r28
    320e:	00 d0       	rcall	.+0      	; 0x3210 <KeyPad_GetPressedButton+0x6>
    3210:	00 d0       	rcall	.+0      	; 0x3212 <KeyPad_GetPressedButton+0x8>
    3212:	00 d0       	rcall	.+0      	; 0x3214 <KeyPad_GetPressedButton+0xa>
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
    3218:	9e 83       	std	Y+6, r25	; 0x06
    321a:	8d 83       	std	Y+5, r24	; 0x05

	 u8 Local_ColCount, Local_RowCount;
	    u8 rowVal;
	    u8 flag = 0;
    321c:	19 82       	std	Y+1, r1	; 0x01
	    if (u8PtrToPressedButton != NULL)
    321e:	8d 81       	ldd	r24, Y+5	; 0x05
    3220:	9e 81       	ldd	r25, Y+6	; 0x06
    3222:	00 97       	sbiw	r24, 0x00	; 0
    3224:	09 f4       	brne	.+2      	; 0x3228 <KeyPad_GetPressedButton+0x1e>
    3226:	50 c0       	rjmp	.+160    	; 0x32c8 <KeyPad_GetPressedButton+0xbe>
	    {
	        for (Local_ColCount = 0; Local_ColCount < KEYPADSIZE; Local_ColCount++)
    3228:	1b 82       	std	Y+3, r1	; 0x03
    322a:	4a c0       	rjmp	.+148    	; 0x32c0 <KeyPad_GetPressedButton+0xb6>
	        {
	            //activate current column
	        	Dio_enuWriteChannel(u8ColArr[Local_ColCount], DIO_u8LEVEL_LOW);
    322c:	8b 81       	ldd	r24, Y+3	; 0x03
    322e:	88 2f       	mov	r24, r24
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	fc 01       	movw	r30, r24
    3234:	e8 59       	subi	r30, 0x98	; 152
    3236:	fe 4f       	sbci	r31, 0xFE	; 254
    3238:	80 81       	ld	r24, Z
    323a:	60 e0       	ldi	r22, 0x00	; 0
    323c:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
	            for (Local_RowCount = 0; Local_RowCount < KEYPADSIZE; Local_RowCount++)
    3240:	1a 82       	std	Y+2, r1	; 0x02
    3242:	16 c0       	rjmp	.+44     	; 0x3270 <KeyPad_GetPressedButton+0x66>
	            {
	                //check row value if it is 0 then this column and row is connected
	            	Dio_enuReadChannel(u8RowArr[Local_RowCount], &rowVal);
    3244:	8a 81       	ldd	r24, Y+2	; 0x02
    3246:	88 2f       	mov	r24, r24
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	fc 01       	movw	r30, r24
    324c:	e4 59       	subi	r30, 0x94	; 148
    324e:	fe 4f       	sbci	r31, 0xFE	; 254
    3250:	80 81       	ld	r24, Z
    3252:	9e 01       	movw	r18, r28
    3254:	2c 5f       	subi	r18, 0xFC	; 252
    3256:	3f 4f       	sbci	r19, 0xFF	; 255
    3258:	b9 01       	movw	r22, r18
    325a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <Dio_enuReadChannel>
	                if (rowVal == 0)
    325e:	8c 81       	ldd	r24, Y+4	; 0x04
    3260:	88 23       	and	r24, r24
    3262:	19 f4       	brne	.+6      	; 0x326a <KeyPad_GetPressedButton+0x60>
	                {
	                    flag = 1;
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	89 83       	std	Y+1, r24	; 0x01
    3268:	06 c0       	rjmp	.+12     	; 0x3276 <KeyPad_GetPressedButton+0x6c>
	    {
	        for (Local_ColCount = 0; Local_ColCount < KEYPADSIZE; Local_ColCount++)
	        {
	            //activate current column
	        	Dio_enuWriteChannel(u8ColArr[Local_ColCount], DIO_u8LEVEL_LOW);
	            for (Local_RowCount = 0; Local_RowCount < KEYPADSIZE; Local_RowCount++)
    326a:	8a 81       	ldd	r24, Y+2	; 0x02
    326c:	8f 5f       	subi	r24, 0xFF	; 255
    326e:	8a 83       	std	Y+2, r24	; 0x02
    3270:	8a 81       	ldd	r24, Y+2	; 0x02
    3272:	84 30       	cpi	r24, 0x04	; 4
    3274:	38 f3       	brcs	.-50     	; 0x3244 <KeyPad_GetPressedButton+0x3a>
	                    break;
	                }
	            }
	            //if the inner row loop has broken and flag is set,
	            //place value in return pointer and exit outer column loop.
	            if (flag == 1)
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	81 30       	cpi	r24, 0x01	; 1
    327a:	a9 f4       	brne	.+42     	; 0x32a6 <KeyPad_GetPressedButton+0x9c>
	            {
	                *u8PtrToPressedButton = KeyPad_SwitchValues[Local_ColCount][Local_RowCount];
    327c:	8b 81       	ldd	r24, Y+3	; 0x03
    327e:	48 2f       	mov	r20, r24
    3280:	50 e0       	ldi	r21, 0x00	; 0
    3282:	8a 81       	ldd	r24, Y+2	; 0x02
    3284:	28 2f       	mov	r18, r24
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	ca 01       	movw	r24, r20
    328a:	88 0f       	add	r24, r24
    328c:	99 1f       	adc	r25, r25
    328e:	88 0f       	add	r24, r24
    3290:	99 1f       	adc	r25, r25
    3292:	82 0f       	add	r24, r18
    3294:	93 1f       	adc	r25, r19
    3296:	fc 01       	movw	r30, r24
    3298:	e0 59       	subi	r30, 0x90	; 144
    329a:	fe 4f       	sbci	r31, 0xFE	; 254
    329c:	80 81       	ld	r24, Z
    329e:	ed 81       	ldd	r30, Y+5	; 0x05
    32a0:	fe 81       	ldd	r31, Y+6	; 0x06
    32a2:	80 83       	st	Z, r24
    32a4:	11 c0       	rjmp	.+34     	; 0x32c8 <KeyPad_GetPressedButton+0xbe>
	                break;
	            }
	            //deactivate current column.
	            Dio_enuWriteChannel(u8ColArr[Local_ColCount], DIO_u8LEVEL_HIGH);
    32a6:	8b 81       	ldd	r24, Y+3	; 0x03
    32a8:	88 2f       	mov	r24, r24
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	fc 01       	movw	r30, r24
    32ae:	e8 59       	subi	r30, 0x98	; 152
    32b0:	fe 4f       	sbci	r31, 0xFE	; 254
    32b2:	80 81       	ld	r24, Z
    32b4:	61 e0       	ldi	r22, 0x01	; 1
    32b6:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
	 u8 Local_ColCount, Local_RowCount;
	    u8 rowVal;
	    u8 flag = 0;
	    if (u8PtrToPressedButton != NULL)
	    {
	        for (Local_ColCount = 0; Local_ColCount < KEYPADSIZE; Local_ColCount++)
    32ba:	8b 81       	ldd	r24, Y+3	; 0x03
    32bc:	8f 5f       	subi	r24, 0xFF	; 255
    32be:	8b 83       	std	Y+3, r24	; 0x03
    32c0:	8b 81       	ldd	r24, Y+3	; 0x03
    32c2:	84 30       	cpi	r24, 0x04	; 4
    32c4:	08 f4       	brcc	.+2      	; 0x32c8 <KeyPad_GetPressedButton+0xbe>
    32c6:	b2 cf       	rjmp	.-156    	; 0x322c <KeyPad_GetPressedButton+0x22>
	    }




}
    32c8:	26 96       	adiw	r28, 0x06	; 6
    32ca:	0f b6       	in	r0, 0x3f	; 63
    32cc:	f8 94       	cli
    32ce:	de bf       	out	0x3e, r29	; 62
    32d0:	0f be       	out	0x3f, r0	; 63
    32d2:	cd bf       	out	0x3d, r28	; 61
    32d4:	cf 91       	pop	r28
    32d6:	df 91       	pop	r29
    32d8:	08 95       	ret

000032da <Interrupt_SwitchReading>:
u8 data[12]= "ADC OUTPUT:";
u32 volt=0;
u16 Reading=0;
u8 flag =0;

void Interrupt_SwitchReading(void){
    32da:	df 93       	push	r29
    32dc:	cf 93       	push	r28
    32de:	cd b7       	in	r28, 0x3d	; 61
    32e0:	de b7       	in	r29, 0x3e	; 62
	if(flag ==0){
    32e2:	80 91 9a 01 	lds	r24, 0x019A
    32e6:	88 23       	and	r24, r24
    32e8:	21 f4       	brne	.+8      	; 0x32f2 <Interrupt_SwitchReading+0x18>
		flag =1;
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	80 93 9a 01 	sts	0x019A, r24
    32f0:	06 c0       	rjmp	.+12     	; 0x32fe <Interrupt_SwitchReading+0x24>
	}
	else if (flag ==1){
    32f2:	80 91 9a 01 	lds	r24, 0x019A
    32f6:	81 30       	cpi	r24, 0x01	; 1
    32f8:	11 f4       	brne	.+4      	; 0x32fe <Interrupt_SwitchReading+0x24>
		flag =0;
    32fa:	10 92 9a 01 	sts	0x019A, r1
	}

}
    32fe:	cf 91       	pop	r28
    3300:	df 91       	pop	r29
    3302:	08 95       	ret

00003304 <main>:

int main (){
    3304:	0f 93       	push	r16
    3306:	1f 93       	push	r17
    3308:	df 93       	push	r29
    330a:	cf 93       	push	r28
    330c:	cd b7       	in	r28, 0x3d	; 61
    330e:	de b7       	in	r29, 0x3e	; 62
    3310:	ca 59       	subi	r28, 0x9A	; 154
    3312:	d0 40       	sbci	r29, 0x00	; 0
    3314:	0f b6       	in	r0, 0x3f	; 63
    3316:	f8 94       	cli
    3318:	de bf       	out	0x3e, r29	; 62
    331a:	0f be       	out	0x3f, r0	; 63
    331c:	cd bf       	out	0x3d, r28	; 61
	Port_Init();
    331e:	0e 94 17 07 	call	0xe2e	; 0xe2e <Port_Init>
	Port_enuSetPinDirection(0,PORT_u8INPUT);
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	60 e0       	ldi	r22, 0x00	; 0
    3326:	0e 94 3b 07 	call	0xe76	; 0xe76 <Port_enuSetPinDirection>
	Port_enuSetPinDirection(26,PORT_u8INPUT);
    332a:	8a e1       	ldi	r24, 0x1A	; 26
    332c:	60 e0       	ldi	r22, 0x00	; 0
    332e:	0e 94 3b 07 	call	0xe76	; 0xe76 <Port_enuSetPinDirection>
	Dio_enuWriteChannel(26,DIO_u8LEVEL_HIGH);
    3332:	8a e1       	ldi	r24, 0x1A	; 26
    3334:	61 e0       	ldi	r22, 0x01	; 1
    3336:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Dio_enuWriteChannel>
	ADC_Init();
    333a:	0e 94 c2 11 	call	0x2384	; 0x2384 <ADC_Init>
	EXIT0_Init();
    333e:	0e 94 ad 0b 	call	0x175a	; 0x175a <EXIT0_Init>
	LCDInit4BitMode();
    3342:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCDInit4BitMode>
	EXTI_voidCallBack(Interrupt_SwitchReading,EXTI_LINE0);
    3346:	8d e6       	ldi	r24, 0x6D	; 109
    3348:	99 e1       	ldi	r25, 0x19	; 25
    334a:	60 e0       	ldi	r22, 0x00	; 0
    334c:	0e 94 31 0c 	call	0x1862	; 0x1862 <EXTI_voidCallBack>
	GIEMode(GIE_ENABLE);
    3350:	81 e0       	ldi	r24, 0x01	; 1
    3352:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <GIEMode>
	while(1){
	if(flag ==0){
    3356:	80 91 9a 01 	lds	r24, 0x019A
    335a:	88 23       	and	r24, r24
    335c:	09 f0       	breq	.+2      	; 0x3360 <main+0x5c>
    335e:	79 c4       	rjmp	.+2290   	; 0x3c52 <main+0x94e>
		Reading = ADC_StartConversion(ADC_CHANNEL_0);
    3360:	80 e0       	ldi	r24, 0x00	; 0
    3362:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <ADC_StartConversion>
    3366:	90 93 99 01 	sts	0x0199, r25
    336a:	80 93 98 01 	sts	0x0198, r24
		volt =(Reading*5)/1023;
    336e:	20 91 98 01 	lds	r18, 0x0198
    3372:	30 91 99 01 	lds	r19, 0x0199
    3376:	c9 01       	movw	r24, r18
    3378:	88 0f       	add	r24, r24
    337a:	99 1f       	adc	r25, r25
    337c:	88 0f       	add	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	82 0f       	add	r24, r18
    3382:	93 1f       	adc	r25, r19
    3384:	2f ef       	ldi	r18, 0xFF	; 255
    3386:	33 e0       	ldi	r19, 0x03	; 3
    3388:	b9 01       	movw	r22, r18
    338a:	0e 94 df 20 	call	0x41be	; 0x41be <__udivmodhi4>
    338e:	cb 01       	movw	r24, r22
    3390:	cc 01       	movw	r24, r24
    3392:	a0 e0       	ldi	r26, 0x00	; 0
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	80 93 94 01 	sts	0x0194, r24
    339a:	90 93 95 01 	sts	0x0195, r25
    339e:	a0 93 96 01 	sts	0x0196, r26
    33a2:	b0 93 97 01 	sts	0x0197, r27
		LCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_WriteCommand4Bit>
		LCD_WriteString(data); 	_delay_ms(40);
    33ac:	82 e8       	ldi	r24, 0x82	; 130
    33ae:	91 e0       	ldi	r25, 0x01	; 1
    33b0:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <LCD_WriteString>
    33b4:	fe 01       	movw	r30, r28
    33b6:	e9 56       	subi	r30, 0x69	; 105
    33b8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ba:	80 e0       	ldi	r24, 0x00	; 0
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	a0 e2       	ldi	r26, 0x20	; 32
    33c0:	b2 e4       	ldi	r27, 0x42	; 66
    33c2:	80 83       	st	Z, r24
    33c4:	91 83       	std	Z+1, r25	; 0x01
    33c6:	a2 83       	std	Z+2, r26	; 0x02
    33c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ca:	8e 01       	movw	r16, r28
    33cc:	0d 56       	subi	r16, 0x6D	; 109
    33ce:	1f 4f       	sbci	r17, 0xFF	; 255
    33d0:	fe 01       	movw	r30, r28
    33d2:	e9 56       	subi	r30, 0x69	; 105
    33d4:	ff 4f       	sbci	r31, 0xFF	; 255
    33d6:	60 81       	ld	r22, Z
    33d8:	71 81       	ldd	r23, Z+1	; 0x01
    33da:	82 81       	ldd	r24, Z+2	; 0x02
    33dc:	93 81       	ldd	r25, Z+3	; 0x03
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	4a e7       	ldi	r20, 0x7A	; 122
    33e4:	53 e4       	ldi	r21, 0x43	; 67
    33e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	f8 01       	movw	r30, r16
    33f0:	80 83       	st	Z, r24
    33f2:	91 83       	std	Z+1, r25	; 0x01
    33f4:	a2 83       	std	Z+2, r26	; 0x02
    33f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33f8:	fe 01       	movw	r30, r28
    33fa:	ed 56       	subi	r30, 0x6D	; 109
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	60 81       	ld	r22, Z
    3400:	71 81       	ldd	r23, Z+1	; 0x01
    3402:	82 81       	ldd	r24, Z+2	; 0x02
    3404:	93 81       	ldd	r25, Z+3	; 0x03
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	40 e8       	ldi	r20, 0x80	; 128
    340c:	5f e3       	ldi	r21, 0x3F	; 63
    340e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3412:	88 23       	and	r24, r24
    3414:	44 f4       	brge	.+16     	; 0x3426 <main+0x122>
		__ticks = 1;
    3416:	fe 01       	movw	r30, r28
    3418:	ef 56       	subi	r30, 0x6F	; 111
    341a:	ff 4f       	sbci	r31, 0xFF	; 255
    341c:	81 e0       	ldi	r24, 0x01	; 1
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	91 83       	std	Z+1, r25	; 0x01
    3422:	80 83       	st	Z, r24
    3424:	64 c0       	rjmp	.+200    	; 0x34ee <main+0x1ea>
	else if (__tmp > 65535)
    3426:	fe 01       	movw	r30, r28
    3428:	ed 56       	subi	r30, 0x6D	; 109
    342a:	ff 4f       	sbci	r31, 0xFF	; 255
    342c:	60 81       	ld	r22, Z
    342e:	71 81       	ldd	r23, Z+1	; 0x01
    3430:	82 81       	ldd	r24, Z+2	; 0x02
    3432:	93 81       	ldd	r25, Z+3	; 0x03
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	3f ef       	ldi	r19, 0xFF	; 255
    3438:	4f e7       	ldi	r20, 0x7F	; 127
    343a:	57 e4       	ldi	r21, 0x47	; 71
    343c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3440:	18 16       	cp	r1, r24
    3442:	0c f0       	brlt	.+2      	; 0x3446 <main+0x142>
    3444:	43 c0       	rjmp	.+134    	; 0x34cc <main+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3446:	fe 01       	movw	r30, r28
    3448:	e9 56       	subi	r30, 0x69	; 105
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	60 81       	ld	r22, Z
    344e:	71 81       	ldd	r23, Z+1	; 0x01
    3450:	82 81       	ldd	r24, Z+2	; 0x02
    3452:	93 81       	ldd	r25, Z+3	; 0x03
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	40 e2       	ldi	r20, 0x20	; 32
    345a:	51 e4       	ldi	r21, 0x41	; 65
    345c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	8e 01       	movw	r16, r28
    3466:	0f 56       	subi	r16, 0x6F	; 111
    3468:	1f 4f       	sbci	r17, 0xFF	; 255
    346a:	bc 01       	movw	r22, r24
    346c:	cd 01       	movw	r24, r26
    346e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3472:	dc 01       	movw	r26, r24
    3474:	cb 01       	movw	r24, r22
    3476:	f8 01       	movw	r30, r16
    3478:	91 83       	std	Z+1, r25	; 0x01
    347a:	80 83       	st	Z, r24
    347c:	1f c0       	rjmp	.+62     	; 0x34bc <main+0x1b8>
    347e:	fe 01       	movw	r30, r28
    3480:	e1 57       	subi	r30, 0x71	; 113
    3482:	ff 4f       	sbci	r31, 0xFF	; 255
    3484:	89 e1       	ldi	r24, 0x19	; 25
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	91 83       	std	Z+1, r25	; 0x01
    348a:	80 83       	st	Z, r24
    348c:	fe 01       	movw	r30, r28
    348e:	e1 57       	subi	r30, 0x71	; 113
    3490:	ff 4f       	sbci	r31, 0xFF	; 255
    3492:	80 81       	ld	r24, Z
    3494:	91 81       	ldd	r25, Z+1	; 0x01
    3496:	01 97       	sbiw	r24, 0x01	; 1
    3498:	f1 f7       	brne	.-4      	; 0x3496 <main+0x192>
    349a:	fe 01       	movw	r30, r28
    349c:	e1 57       	subi	r30, 0x71	; 113
    349e:	ff 4f       	sbci	r31, 0xFF	; 255
    34a0:	91 83       	std	Z+1, r25	; 0x01
    34a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a4:	de 01       	movw	r26, r28
    34a6:	af 56       	subi	r26, 0x6F	; 111
    34a8:	bf 4f       	sbci	r27, 0xFF	; 255
    34aa:	fe 01       	movw	r30, r28
    34ac:	ef 56       	subi	r30, 0x6F	; 111
    34ae:	ff 4f       	sbci	r31, 0xFF	; 255
    34b0:	80 81       	ld	r24, Z
    34b2:	91 81       	ldd	r25, Z+1	; 0x01
    34b4:	01 97       	sbiw	r24, 0x01	; 1
    34b6:	11 96       	adiw	r26, 0x01	; 1
    34b8:	9c 93       	st	X, r25
    34ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34bc:	fe 01       	movw	r30, r28
    34be:	ef 56       	subi	r30, 0x6F	; 111
    34c0:	ff 4f       	sbci	r31, 0xFF	; 255
    34c2:	80 81       	ld	r24, Z
    34c4:	91 81       	ldd	r25, Z+1	; 0x01
    34c6:	00 97       	sbiw	r24, 0x00	; 0
    34c8:	d1 f6       	brne	.-76     	; 0x347e <main+0x17a>
    34ca:	27 c0       	rjmp	.+78     	; 0x351a <main+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34cc:	8e 01       	movw	r16, r28
    34ce:	0f 56       	subi	r16, 0x6F	; 111
    34d0:	1f 4f       	sbci	r17, 0xFF	; 255
    34d2:	fe 01       	movw	r30, r28
    34d4:	ed 56       	subi	r30, 0x6D	; 109
    34d6:	ff 4f       	sbci	r31, 0xFF	; 255
    34d8:	60 81       	ld	r22, Z
    34da:	71 81       	ldd	r23, Z+1	; 0x01
    34dc:	82 81       	ldd	r24, Z+2	; 0x02
    34de:	93 81       	ldd	r25, Z+3	; 0x03
    34e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e4:	dc 01       	movw	r26, r24
    34e6:	cb 01       	movw	r24, r22
    34e8:	f8 01       	movw	r30, r16
    34ea:	91 83       	std	Z+1, r25	; 0x01
    34ec:	80 83       	st	Z, r24
    34ee:	de 01       	movw	r26, r28
    34f0:	a3 57       	subi	r26, 0x73	; 115
    34f2:	bf 4f       	sbci	r27, 0xFF	; 255
    34f4:	fe 01       	movw	r30, r28
    34f6:	ef 56       	subi	r30, 0x6F	; 111
    34f8:	ff 4f       	sbci	r31, 0xFF	; 255
    34fa:	80 81       	ld	r24, Z
    34fc:	91 81       	ldd	r25, Z+1	; 0x01
    34fe:	8d 93       	st	X+, r24
    3500:	9c 93       	st	X, r25
    3502:	fe 01       	movw	r30, r28
    3504:	e3 57       	subi	r30, 0x73	; 115
    3506:	ff 4f       	sbci	r31, 0xFF	; 255
    3508:	80 81       	ld	r24, Z
    350a:	91 81       	ldd	r25, Z+1	; 0x01
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	f1 f7       	brne	.-4      	; 0x350c <main+0x208>
    3510:	fe 01       	movw	r30, r28
    3512:	e3 57       	subi	r30, 0x73	; 115
    3514:	ff 4f       	sbci	r31, 0xFF	; 255
    3516:	91 83       	std	Z+1, r25	; 0x01
    3518:	80 83       	st	Z, r24
		LCD_SetCursorPosition(LCD_LINE_0,12); 	_delay_ms(40);
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	6c e0       	ldi	r22, 0x0C	; 12
    351e:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <LCD_SetCursorPosition>
    3522:	fe 01       	movw	r30, r28
    3524:	e7 57       	subi	r30, 0x77	; 119
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	80 e0       	ldi	r24, 0x00	; 0
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	a0 e2       	ldi	r26, 0x20	; 32
    352e:	b2 e4       	ldi	r27, 0x42	; 66
    3530:	80 83       	st	Z, r24
    3532:	91 83       	std	Z+1, r25	; 0x01
    3534:	a2 83       	std	Z+2, r26	; 0x02
    3536:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3538:	8e 01       	movw	r16, r28
    353a:	0b 57       	subi	r16, 0x7B	; 123
    353c:	1f 4f       	sbci	r17, 0xFF	; 255
    353e:	fe 01       	movw	r30, r28
    3540:	e7 57       	subi	r30, 0x77	; 119
    3542:	ff 4f       	sbci	r31, 0xFF	; 255
    3544:	60 81       	ld	r22, Z
    3546:	71 81       	ldd	r23, Z+1	; 0x01
    3548:	82 81       	ldd	r24, Z+2	; 0x02
    354a:	93 81       	ldd	r25, Z+3	; 0x03
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	4a e7       	ldi	r20, 0x7A	; 122
    3552:	53 e4       	ldi	r21, 0x43	; 67
    3554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3558:	dc 01       	movw	r26, r24
    355a:	cb 01       	movw	r24, r22
    355c:	f8 01       	movw	r30, r16
    355e:	80 83       	st	Z, r24
    3560:	91 83       	std	Z+1, r25	; 0x01
    3562:	a2 83       	std	Z+2, r26	; 0x02
    3564:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3566:	fe 01       	movw	r30, r28
    3568:	eb 57       	subi	r30, 0x7B	; 123
    356a:	ff 4f       	sbci	r31, 0xFF	; 255
    356c:	60 81       	ld	r22, Z
    356e:	71 81       	ldd	r23, Z+1	; 0x01
    3570:	82 81       	ldd	r24, Z+2	; 0x02
    3572:	93 81       	ldd	r25, Z+3	; 0x03
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	40 e8       	ldi	r20, 0x80	; 128
    357a:	5f e3       	ldi	r21, 0x3F	; 63
    357c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3580:	88 23       	and	r24, r24
    3582:	44 f4       	brge	.+16     	; 0x3594 <main+0x290>
		__ticks = 1;
    3584:	fe 01       	movw	r30, r28
    3586:	ed 57       	subi	r30, 0x7D	; 125
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	91 83       	std	Z+1, r25	; 0x01
    3590:	80 83       	st	Z, r24
    3592:	64 c0       	rjmp	.+200    	; 0x365c <main+0x358>
	else if (__tmp > 65535)
    3594:	fe 01       	movw	r30, r28
    3596:	eb 57       	subi	r30, 0x7B	; 123
    3598:	ff 4f       	sbci	r31, 0xFF	; 255
    359a:	60 81       	ld	r22, Z
    359c:	71 81       	ldd	r23, Z+1	; 0x01
    359e:	82 81       	ldd	r24, Z+2	; 0x02
    35a0:	93 81       	ldd	r25, Z+3	; 0x03
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	3f ef       	ldi	r19, 0xFF	; 255
    35a6:	4f e7       	ldi	r20, 0x7F	; 127
    35a8:	57 e4       	ldi	r21, 0x47	; 71
    35aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ae:	18 16       	cp	r1, r24
    35b0:	0c f0       	brlt	.+2      	; 0x35b4 <main+0x2b0>
    35b2:	43 c0       	rjmp	.+134    	; 0x363a <main+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35b4:	fe 01       	movw	r30, r28
    35b6:	e7 57       	subi	r30, 0x77	; 119
    35b8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ba:	60 81       	ld	r22, Z
    35bc:	71 81       	ldd	r23, Z+1	; 0x01
    35be:	82 81       	ldd	r24, Z+2	; 0x02
    35c0:	93 81       	ldd	r25, Z+3	; 0x03
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	40 e2       	ldi	r20, 0x20	; 32
    35c8:	51 e4       	ldi	r21, 0x41	; 65
    35ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	8e 01       	movw	r16, r28
    35d4:	0d 57       	subi	r16, 0x7D	; 125
    35d6:	1f 4f       	sbci	r17, 0xFF	; 255
    35d8:	bc 01       	movw	r22, r24
    35da:	cd 01       	movw	r24, r26
    35dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	f8 01       	movw	r30, r16
    35e6:	91 83       	std	Z+1, r25	; 0x01
    35e8:	80 83       	st	Z, r24
    35ea:	1f c0       	rjmp	.+62     	; 0x362a <main+0x326>
    35ec:	fe 01       	movw	r30, r28
    35ee:	ef 57       	subi	r30, 0x7F	; 127
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	89 e1       	ldi	r24, 0x19	; 25
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	91 83       	std	Z+1, r25	; 0x01
    35f8:	80 83       	st	Z, r24
    35fa:	fe 01       	movw	r30, r28
    35fc:	ef 57       	subi	r30, 0x7F	; 127
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	80 81       	ld	r24, Z
    3602:	91 81       	ldd	r25, Z+1	; 0x01
    3604:	01 97       	sbiw	r24, 0x01	; 1
    3606:	f1 f7       	brne	.-4      	; 0x3604 <main+0x300>
    3608:	fe 01       	movw	r30, r28
    360a:	ef 57       	subi	r30, 0x7F	; 127
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	91 83       	std	Z+1, r25	; 0x01
    3610:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3612:	de 01       	movw	r26, r28
    3614:	ad 57       	subi	r26, 0x7D	; 125
    3616:	bf 4f       	sbci	r27, 0xFF	; 255
    3618:	fe 01       	movw	r30, r28
    361a:	ed 57       	subi	r30, 0x7D	; 125
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	80 81       	ld	r24, Z
    3620:	91 81       	ldd	r25, Z+1	; 0x01
    3622:	01 97       	sbiw	r24, 0x01	; 1
    3624:	11 96       	adiw	r26, 0x01	; 1
    3626:	9c 93       	st	X, r25
    3628:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    362a:	fe 01       	movw	r30, r28
    362c:	ed 57       	subi	r30, 0x7D	; 125
    362e:	ff 4f       	sbci	r31, 0xFF	; 255
    3630:	80 81       	ld	r24, Z
    3632:	91 81       	ldd	r25, Z+1	; 0x01
    3634:	00 97       	sbiw	r24, 0x00	; 0
    3636:	d1 f6       	brne	.-76     	; 0x35ec <main+0x2e8>
    3638:	27 c0       	rjmp	.+78     	; 0x3688 <main+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    363a:	8e 01       	movw	r16, r28
    363c:	0d 57       	subi	r16, 0x7D	; 125
    363e:	1f 4f       	sbci	r17, 0xFF	; 255
    3640:	fe 01       	movw	r30, r28
    3642:	eb 57       	subi	r30, 0x7B	; 123
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	60 81       	ld	r22, Z
    3648:	71 81       	ldd	r23, Z+1	; 0x01
    364a:	82 81       	ldd	r24, Z+2	; 0x02
    364c:	93 81       	ldd	r25, Z+3	; 0x03
    364e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	f8 01       	movw	r30, r16
    3658:	91 83       	std	Z+1, r25	; 0x01
    365a:	80 83       	st	Z, r24
    365c:	de 01       	movw	r26, r28
    365e:	a1 58       	subi	r26, 0x81	; 129
    3660:	bf 4f       	sbci	r27, 0xFF	; 255
    3662:	fe 01       	movw	r30, r28
    3664:	ed 57       	subi	r30, 0x7D	; 125
    3666:	ff 4f       	sbci	r31, 0xFF	; 255
    3668:	80 81       	ld	r24, Z
    366a:	91 81       	ldd	r25, Z+1	; 0x01
    366c:	8d 93       	st	X+, r24
    366e:	9c 93       	st	X, r25
    3670:	fe 01       	movw	r30, r28
    3672:	e1 58       	subi	r30, 0x81	; 129
    3674:	ff 4f       	sbci	r31, 0xFF	; 255
    3676:	80 81       	ld	r24, Z
    3678:	91 81       	ldd	r25, Z+1	; 0x01
    367a:	01 97       	sbiw	r24, 0x01	; 1
    367c:	f1 f7       	brne	.-4      	; 0x367a <main+0x376>
    367e:	fe 01       	movw	r30, r28
    3680:	e1 58       	subi	r30, 0x81	; 129
    3682:	ff 4f       	sbci	r31, 0xFF	; 255
    3684:	91 83       	std	Z+1, r25	; 0x01
    3686:	80 83       	st	Z, r24
		LCD_WriteNumber(volt); 	_delay_ms(40);
    3688:	80 91 94 01 	lds	r24, 0x0194
    368c:	90 91 95 01 	lds	r25, 0x0195
    3690:	a0 91 96 01 	lds	r26, 0x0196
    3694:	b0 91 97 01 	lds	r27, 0x0197
    3698:	bc 01       	movw	r22, r24
    369a:	cd 01       	movw	r24, r26
    369c:	0e 94 15 18 	call	0x302a	; 0x302a <LCD_WriteNumber>
    36a0:	fe 01       	movw	r30, r28
    36a2:	e5 58       	subi	r30, 0x85	; 133
    36a4:	ff 4f       	sbci	r31, 0xFF	; 255
    36a6:	80 e0       	ldi	r24, 0x00	; 0
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	a0 e2       	ldi	r26, 0x20	; 32
    36ac:	b2 e4       	ldi	r27, 0x42	; 66
    36ae:	80 83       	st	Z, r24
    36b0:	91 83       	std	Z+1, r25	; 0x01
    36b2:	a2 83       	std	Z+2, r26	; 0x02
    36b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b6:	8e 01       	movw	r16, r28
    36b8:	09 58       	subi	r16, 0x89	; 137
    36ba:	1f 4f       	sbci	r17, 0xFF	; 255
    36bc:	fe 01       	movw	r30, r28
    36be:	e5 58       	subi	r30, 0x85	; 133
    36c0:	ff 4f       	sbci	r31, 0xFF	; 255
    36c2:	60 81       	ld	r22, Z
    36c4:	71 81       	ldd	r23, Z+1	; 0x01
    36c6:	82 81       	ldd	r24, Z+2	; 0x02
    36c8:	93 81       	ldd	r25, Z+3	; 0x03
    36ca:	20 e0       	ldi	r18, 0x00	; 0
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	4a e7       	ldi	r20, 0x7A	; 122
    36d0:	53 e4       	ldi	r21, 0x43	; 67
    36d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d6:	dc 01       	movw	r26, r24
    36d8:	cb 01       	movw	r24, r22
    36da:	f8 01       	movw	r30, r16
    36dc:	80 83       	st	Z, r24
    36de:	91 83       	std	Z+1, r25	; 0x01
    36e0:	a2 83       	std	Z+2, r26	; 0x02
    36e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36e4:	fe 01       	movw	r30, r28
    36e6:	e9 58       	subi	r30, 0x89	; 137
    36e8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ea:	60 81       	ld	r22, Z
    36ec:	71 81       	ldd	r23, Z+1	; 0x01
    36ee:	82 81       	ldd	r24, Z+2	; 0x02
    36f0:	93 81       	ldd	r25, Z+3	; 0x03
    36f2:	20 e0       	ldi	r18, 0x00	; 0
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	40 e8       	ldi	r20, 0x80	; 128
    36f8:	5f e3       	ldi	r21, 0x3F	; 63
    36fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36fe:	88 23       	and	r24, r24
    3700:	44 f4       	brge	.+16     	; 0x3712 <main+0x40e>
		__ticks = 1;
    3702:	fe 01       	movw	r30, r28
    3704:	eb 58       	subi	r30, 0x8B	; 139
    3706:	ff 4f       	sbci	r31, 0xFF	; 255
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	91 83       	std	Z+1, r25	; 0x01
    370e:	80 83       	st	Z, r24
    3710:	64 c0       	rjmp	.+200    	; 0x37da <main+0x4d6>
	else if (__tmp > 65535)
    3712:	fe 01       	movw	r30, r28
    3714:	e9 58       	subi	r30, 0x89	; 137
    3716:	ff 4f       	sbci	r31, 0xFF	; 255
    3718:	60 81       	ld	r22, Z
    371a:	71 81       	ldd	r23, Z+1	; 0x01
    371c:	82 81       	ldd	r24, Z+2	; 0x02
    371e:	93 81       	ldd	r25, Z+3	; 0x03
    3720:	20 e0       	ldi	r18, 0x00	; 0
    3722:	3f ef       	ldi	r19, 0xFF	; 255
    3724:	4f e7       	ldi	r20, 0x7F	; 127
    3726:	57 e4       	ldi	r21, 0x47	; 71
    3728:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    372c:	18 16       	cp	r1, r24
    372e:	0c f0       	brlt	.+2      	; 0x3732 <main+0x42e>
    3730:	43 c0       	rjmp	.+134    	; 0x37b8 <main+0x4b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3732:	fe 01       	movw	r30, r28
    3734:	e5 58       	subi	r30, 0x85	; 133
    3736:	ff 4f       	sbci	r31, 0xFF	; 255
    3738:	60 81       	ld	r22, Z
    373a:	71 81       	ldd	r23, Z+1	; 0x01
    373c:	82 81       	ldd	r24, Z+2	; 0x02
    373e:	93 81       	ldd	r25, Z+3	; 0x03
    3740:	20 e0       	ldi	r18, 0x00	; 0
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	40 e2       	ldi	r20, 0x20	; 32
    3746:	51 e4       	ldi	r21, 0x41	; 65
    3748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    374c:	dc 01       	movw	r26, r24
    374e:	cb 01       	movw	r24, r22
    3750:	8e 01       	movw	r16, r28
    3752:	0b 58       	subi	r16, 0x8B	; 139
    3754:	1f 4f       	sbci	r17, 0xFF	; 255
    3756:	bc 01       	movw	r22, r24
    3758:	cd 01       	movw	r24, r26
    375a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    375e:	dc 01       	movw	r26, r24
    3760:	cb 01       	movw	r24, r22
    3762:	f8 01       	movw	r30, r16
    3764:	91 83       	std	Z+1, r25	; 0x01
    3766:	80 83       	st	Z, r24
    3768:	1f c0       	rjmp	.+62     	; 0x37a8 <main+0x4a4>
    376a:	fe 01       	movw	r30, r28
    376c:	ed 58       	subi	r30, 0x8D	; 141
    376e:	ff 4f       	sbci	r31, 0xFF	; 255
    3770:	89 e1       	ldi	r24, 0x19	; 25
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	91 83       	std	Z+1, r25	; 0x01
    3776:	80 83       	st	Z, r24
    3778:	fe 01       	movw	r30, r28
    377a:	ed 58       	subi	r30, 0x8D	; 141
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	80 81       	ld	r24, Z
    3780:	91 81       	ldd	r25, Z+1	; 0x01
    3782:	01 97       	sbiw	r24, 0x01	; 1
    3784:	f1 f7       	brne	.-4      	; 0x3782 <main+0x47e>
    3786:	fe 01       	movw	r30, r28
    3788:	ed 58       	subi	r30, 0x8D	; 141
    378a:	ff 4f       	sbci	r31, 0xFF	; 255
    378c:	91 83       	std	Z+1, r25	; 0x01
    378e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3790:	de 01       	movw	r26, r28
    3792:	ab 58       	subi	r26, 0x8B	; 139
    3794:	bf 4f       	sbci	r27, 0xFF	; 255
    3796:	fe 01       	movw	r30, r28
    3798:	eb 58       	subi	r30, 0x8B	; 139
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	80 81       	ld	r24, Z
    379e:	91 81       	ldd	r25, Z+1	; 0x01
    37a0:	01 97       	sbiw	r24, 0x01	; 1
    37a2:	11 96       	adiw	r26, 0x01	; 1
    37a4:	9c 93       	st	X, r25
    37a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37a8:	fe 01       	movw	r30, r28
    37aa:	eb 58       	subi	r30, 0x8B	; 139
    37ac:	ff 4f       	sbci	r31, 0xFF	; 255
    37ae:	80 81       	ld	r24, Z
    37b0:	91 81       	ldd	r25, Z+1	; 0x01
    37b2:	00 97       	sbiw	r24, 0x00	; 0
    37b4:	d1 f6       	brne	.-76     	; 0x376a <main+0x466>
    37b6:	27 c0       	rjmp	.+78     	; 0x3806 <main+0x502>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37b8:	8e 01       	movw	r16, r28
    37ba:	0b 58       	subi	r16, 0x8B	; 139
    37bc:	1f 4f       	sbci	r17, 0xFF	; 255
    37be:	fe 01       	movw	r30, r28
    37c0:	e9 58       	subi	r30, 0x89	; 137
    37c2:	ff 4f       	sbci	r31, 0xFF	; 255
    37c4:	60 81       	ld	r22, Z
    37c6:	71 81       	ldd	r23, Z+1	; 0x01
    37c8:	82 81       	ldd	r24, Z+2	; 0x02
    37ca:	93 81       	ldd	r25, Z+3	; 0x03
    37cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d0:	dc 01       	movw	r26, r24
    37d2:	cb 01       	movw	r24, r22
    37d4:	f8 01       	movw	r30, r16
    37d6:	91 83       	std	Z+1, r25	; 0x01
    37d8:	80 83       	st	Z, r24
    37da:	de 01       	movw	r26, r28
    37dc:	af 58       	subi	r26, 0x8F	; 143
    37de:	bf 4f       	sbci	r27, 0xFF	; 255
    37e0:	fe 01       	movw	r30, r28
    37e2:	eb 58       	subi	r30, 0x8B	; 139
    37e4:	ff 4f       	sbci	r31, 0xFF	; 255
    37e6:	80 81       	ld	r24, Z
    37e8:	91 81       	ldd	r25, Z+1	; 0x01
    37ea:	8d 93       	st	X+, r24
    37ec:	9c 93       	st	X, r25
    37ee:	fe 01       	movw	r30, r28
    37f0:	ef 58       	subi	r30, 0x8F	; 143
    37f2:	ff 4f       	sbci	r31, 0xFF	; 255
    37f4:	80 81       	ld	r24, Z
    37f6:	91 81       	ldd	r25, Z+1	; 0x01
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	f1 f7       	brne	.-4      	; 0x37f8 <main+0x4f4>
    37fc:	fe 01       	movw	r30, r28
    37fe:	ef 58       	subi	r30, 0x8F	; 143
    3800:	ff 4f       	sbci	r31, 0xFF	; 255
    3802:	91 83       	std	Z+1, r25	; 0x01
    3804:	80 83       	st	Z, r24
		LCD_SetCursorPosition(LCD_LINE_1,14); 	_delay_ms(40);
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	6e e0       	ldi	r22, 0x0E	; 14
    380a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <LCD_SetCursorPosition>
    380e:	fe 01       	movw	r30, r28
    3810:	e3 59       	subi	r30, 0x93	; 147
    3812:	ff 4f       	sbci	r31, 0xFF	; 255
    3814:	80 e0       	ldi	r24, 0x00	; 0
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	a0 e2       	ldi	r26, 0x20	; 32
    381a:	b2 e4       	ldi	r27, 0x42	; 66
    381c:	80 83       	st	Z, r24
    381e:	91 83       	std	Z+1, r25	; 0x01
    3820:	a2 83       	std	Z+2, r26	; 0x02
    3822:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3824:	8e 01       	movw	r16, r28
    3826:	07 59       	subi	r16, 0x97	; 151
    3828:	1f 4f       	sbci	r17, 0xFF	; 255
    382a:	fe 01       	movw	r30, r28
    382c:	e3 59       	subi	r30, 0x93	; 147
    382e:	ff 4f       	sbci	r31, 0xFF	; 255
    3830:	60 81       	ld	r22, Z
    3832:	71 81       	ldd	r23, Z+1	; 0x01
    3834:	82 81       	ldd	r24, Z+2	; 0x02
    3836:	93 81       	ldd	r25, Z+3	; 0x03
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	4a e7       	ldi	r20, 0x7A	; 122
    383e:	53 e4       	ldi	r21, 0x43	; 67
    3840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	f8 01       	movw	r30, r16
    384a:	80 83       	st	Z, r24
    384c:	91 83       	std	Z+1, r25	; 0x01
    384e:	a2 83       	std	Z+2, r26	; 0x02
    3850:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3852:	fe 01       	movw	r30, r28
    3854:	e7 59       	subi	r30, 0x97	; 151
    3856:	ff 4f       	sbci	r31, 0xFF	; 255
    3858:	60 81       	ld	r22, Z
    385a:	71 81       	ldd	r23, Z+1	; 0x01
    385c:	82 81       	ldd	r24, Z+2	; 0x02
    385e:	93 81       	ldd	r25, Z+3	; 0x03
    3860:	20 e0       	ldi	r18, 0x00	; 0
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	40 e8       	ldi	r20, 0x80	; 128
    3866:	5f e3       	ldi	r21, 0x3F	; 63
    3868:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    386c:	88 23       	and	r24, r24
    386e:	44 f4       	brge	.+16     	; 0x3880 <main+0x57c>
		__ticks = 1;
    3870:	fe 01       	movw	r30, r28
    3872:	e9 59       	subi	r30, 0x99	; 153
    3874:	ff 4f       	sbci	r31, 0xFF	; 255
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	91 83       	std	Z+1, r25	; 0x01
    387c:	80 83       	st	Z, r24
    387e:	64 c0       	rjmp	.+200    	; 0x3948 <main+0x644>
	else if (__tmp > 65535)
    3880:	fe 01       	movw	r30, r28
    3882:	e7 59       	subi	r30, 0x97	; 151
    3884:	ff 4f       	sbci	r31, 0xFF	; 255
    3886:	60 81       	ld	r22, Z
    3888:	71 81       	ldd	r23, Z+1	; 0x01
    388a:	82 81       	ldd	r24, Z+2	; 0x02
    388c:	93 81       	ldd	r25, Z+3	; 0x03
    388e:	20 e0       	ldi	r18, 0x00	; 0
    3890:	3f ef       	ldi	r19, 0xFF	; 255
    3892:	4f e7       	ldi	r20, 0x7F	; 127
    3894:	57 e4       	ldi	r21, 0x47	; 71
    3896:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    389a:	18 16       	cp	r1, r24
    389c:	0c f0       	brlt	.+2      	; 0x38a0 <main+0x59c>
    389e:	43 c0       	rjmp	.+134    	; 0x3926 <main+0x622>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a0:	fe 01       	movw	r30, r28
    38a2:	e3 59       	subi	r30, 0x93	; 147
    38a4:	ff 4f       	sbci	r31, 0xFF	; 255
    38a6:	60 81       	ld	r22, Z
    38a8:	71 81       	ldd	r23, Z+1	; 0x01
    38aa:	82 81       	ldd	r24, Z+2	; 0x02
    38ac:	93 81       	ldd	r25, Z+3	; 0x03
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	40 e2       	ldi	r20, 0x20	; 32
    38b4:	51 e4       	ldi	r21, 0x41	; 65
    38b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ba:	dc 01       	movw	r26, r24
    38bc:	cb 01       	movw	r24, r22
    38be:	8e 01       	movw	r16, r28
    38c0:	09 59       	subi	r16, 0x99	; 153
    38c2:	1f 4f       	sbci	r17, 0xFF	; 255
    38c4:	bc 01       	movw	r22, r24
    38c6:	cd 01       	movw	r24, r26
    38c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	f8 01       	movw	r30, r16
    38d2:	91 83       	std	Z+1, r25	; 0x01
    38d4:	80 83       	st	Z, r24
    38d6:	1f c0       	rjmp	.+62     	; 0x3916 <main+0x612>
    38d8:	fe 01       	movw	r30, r28
    38da:	eb 59       	subi	r30, 0x9B	; 155
    38dc:	ff 4f       	sbci	r31, 0xFF	; 255
    38de:	89 e1       	ldi	r24, 0x19	; 25
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	91 83       	std	Z+1, r25	; 0x01
    38e4:	80 83       	st	Z, r24
    38e6:	fe 01       	movw	r30, r28
    38e8:	eb 59       	subi	r30, 0x9B	; 155
    38ea:	ff 4f       	sbci	r31, 0xFF	; 255
    38ec:	80 81       	ld	r24, Z
    38ee:	91 81       	ldd	r25, Z+1	; 0x01
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	f1 f7       	brne	.-4      	; 0x38f0 <main+0x5ec>
    38f4:	fe 01       	movw	r30, r28
    38f6:	eb 59       	subi	r30, 0x9B	; 155
    38f8:	ff 4f       	sbci	r31, 0xFF	; 255
    38fa:	91 83       	std	Z+1, r25	; 0x01
    38fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38fe:	de 01       	movw	r26, r28
    3900:	a9 59       	subi	r26, 0x99	; 153
    3902:	bf 4f       	sbci	r27, 0xFF	; 255
    3904:	fe 01       	movw	r30, r28
    3906:	e9 59       	subi	r30, 0x99	; 153
    3908:	ff 4f       	sbci	r31, 0xFF	; 255
    390a:	80 81       	ld	r24, Z
    390c:	91 81       	ldd	r25, Z+1	; 0x01
    390e:	01 97       	sbiw	r24, 0x01	; 1
    3910:	11 96       	adiw	r26, 0x01	; 1
    3912:	9c 93       	st	X, r25
    3914:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3916:	fe 01       	movw	r30, r28
    3918:	e9 59       	subi	r30, 0x99	; 153
    391a:	ff 4f       	sbci	r31, 0xFF	; 255
    391c:	80 81       	ld	r24, Z
    391e:	91 81       	ldd	r25, Z+1	; 0x01
    3920:	00 97       	sbiw	r24, 0x00	; 0
    3922:	d1 f6       	brne	.-76     	; 0x38d8 <main+0x5d4>
    3924:	27 c0       	rjmp	.+78     	; 0x3974 <main+0x670>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3926:	8e 01       	movw	r16, r28
    3928:	09 59       	subi	r16, 0x99	; 153
    392a:	1f 4f       	sbci	r17, 0xFF	; 255
    392c:	fe 01       	movw	r30, r28
    392e:	e7 59       	subi	r30, 0x97	; 151
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	60 81       	ld	r22, Z
    3934:	71 81       	ldd	r23, Z+1	; 0x01
    3936:	82 81       	ldd	r24, Z+2	; 0x02
    3938:	93 81       	ldd	r25, Z+3	; 0x03
    393a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	f8 01       	movw	r30, r16
    3944:	91 83       	std	Z+1, r25	; 0x01
    3946:	80 83       	st	Z, r24
    3948:	de 01       	movw	r26, r28
    394a:	ad 59       	subi	r26, 0x9D	; 157
    394c:	bf 4f       	sbci	r27, 0xFF	; 255
    394e:	fe 01       	movw	r30, r28
    3950:	e9 59       	subi	r30, 0x99	; 153
    3952:	ff 4f       	sbci	r31, 0xFF	; 255
    3954:	80 81       	ld	r24, Z
    3956:	91 81       	ldd	r25, Z+1	; 0x01
    3958:	8d 93       	st	X+, r24
    395a:	9c 93       	st	X, r25
    395c:	fe 01       	movw	r30, r28
    395e:	ed 59       	subi	r30, 0x9D	; 157
    3960:	ff 4f       	sbci	r31, 0xFF	; 255
    3962:	80 81       	ld	r24, Z
    3964:	91 81       	ldd	r25, Z+1	; 0x01
    3966:	01 97       	sbiw	r24, 0x01	; 1
    3968:	f1 f7       	brne	.-4      	; 0x3966 <main+0x662>
    396a:	fe 01       	movw	r30, r28
    396c:	ed 59       	subi	r30, 0x9D	; 157
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	91 83       	std	Z+1, r25	; 0x01
    3972:	80 83       	st	Z, r24
		LCD_WriteChar4Bit('V'); 	_delay_ms(40);
    3974:	86 e5       	ldi	r24, 0x56	; 86
    3976:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_WriteChar4Bit>
    397a:	fe 01       	movw	r30, r28
    397c:	e1 5a       	subi	r30, 0xA1	; 161
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	80 e0       	ldi	r24, 0x00	; 0
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	a0 e2       	ldi	r26, 0x20	; 32
    3986:	b2 e4       	ldi	r27, 0x42	; 66
    3988:	80 83       	st	Z, r24
    398a:	91 83       	std	Z+1, r25	; 0x01
    398c:	a2 83       	std	Z+2, r26	; 0x02
    398e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3990:	8e 01       	movw	r16, r28
    3992:	05 5a       	subi	r16, 0xA5	; 165
    3994:	1f 4f       	sbci	r17, 0xFF	; 255
    3996:	fe 01       	movw	r30, r28
    3998:	e1 5a       	subi	r30, 0xA1	; 161
    399a:	ff 4f       	sbci	r31, 0xFF	; 255
    399c:	60 81       	ld	r22, Z
    399e:	71 81       	ldd	r23, Z+1	; 0x01
    39a0:	82 81       	ldd	r24, Z+2	; 0x02
    39a2:	93 81       	ldd	r25, Z+3	; 0x03
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	4a e7       	ldi	r20, 0x7A	; 122
    39aa:	53 e4       	ldi	r21, 0x43	; 67
    39ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b0:	dc 01       	movw	r26, r24
    39b2:	cb 01       	movw	r24, r22
    39b4:	f8 01       	movw	r30, r16
    39b6:	80 83       	st	Z, r24
    39b8:	91 83       	std	Z+1, r25	; 0x01
    39ba:	a2 83       	std	Z+2, r26	; 0x02
    39bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39be:	fe 01       	movw	r30, r28
    39c0:	e5 5a       	subi	r30, 0xA5	; 165
    39c2:	ff 4f       	sbci	r31, 0xFF	; 255
    39c4:	60 81       	ld	r22, Z
    39c6:	71 81       	ldd	r23, Z+1	; 0x01
    39c8:	82 81       	ldd	r24, Z+2	; 0x02
    39ca:	93 81       	ldd	r25, Z+3	; 0x03
    39cc:	20 e0       	ldi	r18, 0x00	; 0
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	40 e8       	ldi	r20, 0x80	; 128
    39d2:	5f e3       	ldi	r21, 0x3F	; 63
    39d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39d8:	88 23       	and	r24, r24
    39da:	44 f4       	brge	.+16     	; 0x39ec <main+0x6e8>
		__ticks = 1;
    39dc:	fe 01       	movw	r30, r28
    39de:	e7 5a       	subi	r30, 0xA7	; 167
    39e0:	ff 4f       	sbci	r31, 0xFF	; 255
    39e2:	81 e0       	ldi	r24, 0x01	; 1
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	91 83       	std	Z+1, r25	; 0x01
    39e8:	80 83       	st	Z, r24
    39ea:	64 c0       	rjmp	.+200    	; 0x3ab4 <main+0x7b0>
	else if (__tmp > 65535)
    39ec:	fe 01       	movw	r30, r28
    39ee:	e5 5a       	subi	r30, 0xA5	; 165
    39f0:	ff 4f       	sbci	r31, 0xFF	; 255
    39f2:	60 81       	ld	r22, Z
    39f4:	71 81       	ldd	r23, Z+1	; 0x01
    39f6:	82 81       	ldd	r24, Z+2	; 0x02
    39f8:	93 81       	ldd	r25, Z+3	; 0x03
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	3f ef       	ldi	r19, 0xFF	; 255
    39fe:	4f e7       	ldi	r20, 0x7F	; 127
    3a00:	57 e4       	ldi	r21, 0x47	; 71
    3a02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a06:	18 16       	cp	r1, r24
    3a08:	0c f0       	brlt	.+2      	; 0x3a0c <main+0x708>
    3a0a:	43 c0       	rjmp	.+134    	; 0x3a92 <main+0x78e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a0c:	fe 01       	movw	r30, r28
    3a0e:	e1 5a       	subi	r30, 0xA1	; 161
    3a10:	ff 4f       	sbci	r31, 0xFF	; 255
    3a12:	60 81       	ld	r22, Z
    3a14:	71 81       	ldd	r23, Z+1	; 0x01
    3a16:	82 81       	ldd	r24, Z+2	; 0x02
    3a18:	93 81       	ldd	r25, Z+3	; 0x03
    3a1a:	20 e0       	ldi	r18, 0x00	; 0
    3a1c:	30 e0       	ldi	r19, 0x00	; 0
    3a1e:	40 e2       	ldi	r20, 0x20	; 32
    3a20:	51 e4       	ldi	r21, 0x41	; 65
    3a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a26:	dc 01       	movw	r26, r24
    3a28:	cb 01       	movw	r24, r22
    3a2a:	8e 01       	movw	r16, r28
    3a2c:	07 5a       	subi	r16, 0xA7	; 167
    3a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a30:	bc 01       	movw	r22, r24
    3a32:	cd 01       	movw	r24, r26
    3a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a38:	dc 01       	movw	r26, r24
    3a3a:	cb 01       	movw	r24, r22
    3a3c:	f8 01       	movw	r30, r16
    3a3e:	91 83       	std	Z+1, r25	; 0x01
    3a40:	80 83       	st	Z, r24
    3a42:	1f c0       	rjmp	.+62     	; 0x3a82 <main+0x77e>
    3a44:	fe 01       	movw	r30, r28
    3a46:	e9 5a       	subi	r30, 0xA9	; 169
    3a48:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4a:	89 e1       	ldi	r24, 0x19	; 25
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	91 83       	std	Z+1, r25	; 0x01
    3a50:	80 83       	st	Z, r24
    3a52:	fe 01       	movw	r30, r28
    3a54:	e9 5a       	subi	r30, 0xA9	; 169
    3a56:	ff 4f       	sbci	r31, 0xFF	; 255
    3a58:	80 81       	ld	r24, Z
    3a5a:	91 81       	ldd	r25, Z+1	; 0x01
    3a5c:	01 97       	sbiw	r24, 0x01	; 1
    3a5e:	f1 f7       	brne	.-4      	; 0x3a5c <main+0x758>
    3a60:	fe 01       	movw	r30, r28
    3a62:	e9 5a       	subi	r30, 0xA9	; 169
    3a64:	ff 4f       	sbci	r31, 0xFF	; 255
    3a66:	91 83       	std	Z+1, r25	; 0x01
    3a68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a6a:	de 01       	movw	r26, r28
    3a6c:	a7 5a       	subi	r26, 0xA7	; 167
    3a6e:	bf 4f       	sbci	r27, 0xFF	; 255
    3a70:	fe 01       	movw	r30, r28
    3a72:	e7 5a       	subi	r30, 0xA7	; 167
    3a74:	ff 4f       	sbci	r31, 0xFF	; 255
    3a76:	80 81       	ld	r24, Z
    3a78:	91 81       	ldd	r25, Z+1	; 0x01
    3a7a:	01 97       	sbiw	r24, 0x01	; 1
    3a7c:	11 96       	adiw	r26, 0x01	; 1
    3a7e:	9c 93       	st	X, r25
    3a80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a82:	fe 01       	movw	r30, r28
    3a84:	e7 5a       	subi	r30, 0xA7	; 167
    3a86:	ff 4f       	sbci	r31, 0xFF	; 255
    3a88:	80 81       	ld	r24, Z
    3a8a:	91 81       	ldd	r25, Z+1	; 0x01
    3a8c:	00 97       	sbiw	r24, 0x00	; 0
    3a8e:	d1 f6       	brne	.-76     	; 0x3a44 <main+0x740>
    3a90:	27 c0       	rjmp	.+78     	; 0x3ae0 <main+0x7dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a92:	8e 01       	movw	r16, r28
    3a94:	07 5a       	subi	r16, 0xA7	; 167
    3a96:	1f 4f       	sbci	r17, 0xFF	; 255
    3a98:	fe 01       	movw	r30, r28
    3a9a:	e5 5a       	subi	r30, 0xA5	; 165
    3a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9e:	60 81       	ld	r22, Z
    3aa0:	71 81       	ldd	r23, Z+1	; 0x01
    3aa2:	82 81       	ldd	r24, Z+2	; 0x02
    3aa4:	93 81       	ldd	r25, Z+3	; 0x03
    3aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aaa:	dc 01       	movw	r26, r24
    3aac:	cb 01       	movw	r24, r22
    3aae:	f8 01       	movw	r30, r16
    3ab0:	91 83       	std	Z+1, r25	; 0x01
    3ab2:	80 83       	st	Z, r24
    3ab4:	de 01       	movw	r26, r28
    3ab6:	ab 5a       	subi	r26, 0xAB	; 171
    3ab8:	bf 4f       	sbci	r27, 0xFF	; 255
    3aba:	fe 01       	movw	r30, r28
    3abc:	e7 5a       	subi	r30, 0xA7	; 167
    3abe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac0:	80 81       	ld	r24, Z
    3ac2:	91 81       	ldd	r25, Z+1	; 0x01
    3ac4:	8d 93       	st	X+, r24
    3ac6:	9c 93       	st	X, r25
    3ac8:	fe 01       	movw	r30, r28
    3aca:	eb 5a       	subi	r30, 0xAB	; 171
    3acc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ace:	80 81       	ld	r24, Z
    3ad0:	91 81       	ldd	r25, Z+1	; 0x01
    3ad2:	01 97       	sbiw	r24, 0x01	; 1
    3ad4:	f1 f7       	brne	.-4      	; 0x3ad2 <main+0x7ce>
    3ad6:	fe 01       	movw	r30, r28
    3ad8:	eb 5a       	subi	r30, 0xAB	; 171
    3ada:	ff 4f       	sbci	r31, 0xFF	; 255
    3adc:	91 83       	std	Z+1, r25	; 0x01
    3ade:	80 83       	st	Z, r24
		LCD_SetCursorPosition(LCD_LINE_0,0);
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	60 e0       	ldi	r22, 0x00	; 0
    3ae4:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <LCD_SetCursorPosition>
    3ae8:	fe 01       	movw	r30, r28
    3aea:	ef 5a       	subi	r30, 0xAF	; 175
    3aec:	ff 4f       	sbci	r31, 0xFF	; 255
    3aee:	80 e0       	ldi	r24, 0x00	; 0
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	a0 e2       	ldi	r26, 0x20	; 32
    3af4:	b2 e4       	ldi	r27, 0x42	; 66
    3af6:	80 83       	st	Z, r24
    3af8:	91 83       	std	Z+1, r25	; 0x01
    3afa:	a2 83       	std	Z+2, r26	; 0x02
    3afc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3afe:	8e 01       	movw	r16, r28
    3b00:	03 5b       	subi	r16, 0xB3	; 179
    3b02:	1f 4f       	sbci	r17, 0xFF	; 255
    3b04:	fe 01       	movw	r30, r28
    3b06:	ef 5a       	subi	r30, 0xAF	; 175
    3b08:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0a:	60 81       	ld	r22, Z
    3b0c:	71 81       	ldd	r23, Z+1	; 0x01
    3b0e:	82 81       	ldd	r24, Z+2	; 0x02
    3b10:	93 81       	ldd	r25, Z+3	; 0x03
    3b12:	20 e0       	ldi	r18, 0x00	; 0
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	4a e7       	ldi	r20, 0x7A	; 122
    3b18:	53 e4       	ldi	r21, 0x43	; 67
    3b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b1e:	dc 01       	movw	r26, r24
    3b20:	cb 01       	movw	r24, r22
    3b22:	f8 01       	movw	r30, r16
    3b24:	80 83       	st	Z, r24
    3b26:	91 83       	std	Z+1, r25	; 0x01
    3b28:	a2 83       	std	Z+2, r26	; 0x02
    3b2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b2c:	fe 01       	movw	r30, r28
    3b2e:	e3 5b       	subi	r30, 0xB3	; 179
    3b30:	ff 4f       	sbci	r31, 0xFF	; 255
    3b32:	60 81       	ld	r22, Z
    3b34:	71 81       	ldd	r23, Z+1	; 0x01
    3b36:	82 81       	ldd	r24, Z+2	; 0x02
    3b38:	93 81       	ldd	r25, Z+3	; 0x03
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	40 e8       	ldi	r20, 0x80	; 128
    3b40:	5f e3       	ldi	r21, 0x3F	; 63
    3b42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b46:	88 23       	and	r24, r24
    3b48:	44 f4       	brge	.+16     	; 0x3b5a <main+0x856>
		__ticks = 1;
    3b4a:	fe 01       	movw	r30, r28
    3b4c:	e5 5b       	subi	r30, 0xB5	; 181
    3b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b50:	81 e0       	ldi	r24, 0x01	; 1
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	91 83       	std	Z+1, r25	; 0x01
    3b56:	80 83       	st	Z, r24
    3b58:	64 c0       	rjmp	.+200    	; 0x3c22 <main+0x91e>
	else if (__tmp > 65535)
    3b5a:	fe 01       	movw	r30, r28
    3b5c:	e3 5b       	subi	r30, 0xB3	; 179
    3b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b60:	60 81       	ld	r22, Z
    3b62:	71 81       	ldd	r23, Z+1	; 0x01
    3b64:	82 81       	ldd	r24, Z+2	; 0x02
    3b66:	93 81       	ldd	r25, Z+3	; 0x03
    3b68:	20 e0       	ldi	r18, 0x00	; 0
    3b6a:	3f ef       	ldi	r19, 0xFF	; 255
    3b6c:	4f e7       	ldi	r20, 0x7F	; 127
    3b6e:	57 e4       	ldi	r21, 0x47	; 71
    3b70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b74:	18 16       	cp	r1, r24
    3b76:	0c f0       	brlt	.+2      	; 0x3b7a <main+0x876>
    3b78:	43 c0       	rjmp	.+134    	; 0x3c00 <main+0x8fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b7a:	fe 01       	movw	r30, r28
    3b7c:	ef 5a       	subi	r30, 0xAF	; 175
    3b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b80:	60 81       	ld	r22, Z
    3b82:	71 81       	ldd	r23, Z+1	; 0x01
    3b84:	82 81       	ldd	r24, Z+2	; 0x02
    3b86:	93 81       	ldd	r25, Z+3	; 0x03
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	40 e2       	ldi	r20, 0x20	; 32
    3b8e:	51 e4       	ldi	r21, 0x41	; 65
    3b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	8e 01       	movw	r16, r28
    3b9a:	05 5b       	subi	r16, 0xB5	; 181
    3b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b9e:	bc 01       	movw	r22, r24
    3ba0:	cd 01       	movw	r24, r26
    3ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba6:	dc 01       	movw	r26, r24
    3ba8:	cb 01       	movw	r24, r22
    3baa:	f8 01       	movw	r30, r16
    3bac:	91 83       	std	Z+1, r25	; 0x01
    3bae:	80 83       	st	Z, r24
    3bb0:	1f c0       	rjmp	.+62     	; 0x3bf0 <main+0x8ec>
    3bb2:	fe 01       	movw	r30, r28
    3bb4:	e7 5b       	subi	r30, 0xB7	; 183
    3bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb8:	89 e1       	ldi	r24, 0x19	; 25
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	91 83       	std	Z+1, r25	; 0x01
    3bbe:	80 83       	st	Z, r24
    3bc0:	fe 01       	movw	r30, r28
    3bc2:	e7 5b       	subi	r30, 0xB7	; 183
    3bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc6:	80 81       	ld	r24, Z
    3bc8:	91 81       	ldd	r25, Z+1	; 0x01
    3bca:	01 97       	sbiw	r24, 0x01	; 1
    3bcc:	f1 f7       	brne	.-4      	; 0x3bca <main+0x8c6>
    3bce:	fe 01       	movw	r30, r28
    3bd0:	e7 5b       	subi	r30, 0xB7	; 183
    3bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd4:	91 83       	std	Z+1, r25	; 0x01
    3bd6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bd8:	de 01       	movw	r26, r28
    3bda:	a5 5b       	subi	r26, 0xB5	; 181
    3bdc:	bf 4f       	sbci	r27, 0xFF	; 255
    3bde:	fe 01       	movw	r30, r28
    3be0:	e5 5b       	subi	r30, 0xB5	; 181
    3be2:	ff 4f       	sbci	r31, 0xFF	; 255
    3be4:	80 81       	ld	r24, Z
    3be6:	91 81       	ldd	r25, Z+1	; 0x01
    3be8:	01 97       	sbiw	r24, 0x01	; 1
    3bea:	11 96       	adiw	r26, 0x01	; 1
    3bec:	9c 93       	st	X, r25
    3bee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bf0:	fe 01       	movw	r30, r28
    3bf2:	e5 5b       	subi	r30, 0xB5	; 181
    3bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf6:	80 81       	ld	r24, Z
    3bf8:	91 81       	ldd	r25, Z+1	; 0x01
    3bfa:	00 97       	sbiw	r24, 0x00	; 0
    3bfc:	d1 f6       	brne	.-76     	; 0x3bb2 <main+0x8ae>
    3bfe:	ab cb       	rjmp	.-2218   	; 0x3356 <main+0x52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c00:	8e 01       	movw	r16, r28
    3c02:	05 5b       	subi	r16, 0xB5	; 181
    3c04:	1f 4f       	sbci	r17, 0xFF	; 255
    3c06:	fe 01       	movw	r30, r28
    3c08:	e3 5b       	subi	r30, 0xB3	; 179
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	60 81       	ld	r22, Z
    3c0e:	71 81       	ldd	r23, Z+1	; 0x01
    3c10:	82 81       	ldd	r24, Z+2	; 0x02
    3c12:	93 81       	ldd	r25, Z+3	; 0x03
    3c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c18:	dc 01       	movw	r26, r24
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	f8 01       	movw	r30, r16
    3c1e:	91 83       	std	Z+1, r25	; 0x01
    3c20:	80 83       	st	Z, r24
    3c22:	de 01       	movw	r26, r28
    3c24:	a9 5b       	subi	r26, 0xB9	; 185
    3c26:	bf 4f       	sbci	r27, 0xFF	; 255
    3c28:	fe 01       	movw	r30, r28
    3c2a:	e5 5b       	subi	r30, 0xB5	; 181
    3c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2e:	80 81       	ld	r24, Z
    3c30:	91 81       	ldd	r25, Z+1	; 0x01
    3c32:	11 96       	adiw	r26, 0x01	; 1
    3c34:	9c 93       	st	X, r25
    3c36:	8e 93       	st	-X, r24
    3c38:	fe 01       	movw	r30, r28
    3c3a:	e9 5b       	subi	r30, 0xB9	; 185
    3c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3e:	80 81       	ld	r24, Z
    3c40:	91 81       	ldd	r25, Z+1	; 0x01
    3c42:	01 97       	sbiw	r24, 0x01	; 1
    3c44:	f1 f7       	brne	.-4      	; 0x3c42 <main+0x93e>
    3c46:	fe 01       	movw	r30, r28
    3c48:	e9 5b       	subi	r30, 0xB9	; 185
    3c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4c:	91 83       	std	Z+1, r25	; 0x01
    3c4e:	80 83       	st	Z, r24
    3c50:	82 cb       	rjmp	.-2300   	; 0x3356 <main+0x52>
		_delay_ms(40);
	}
	else if (flag ==1)
    3c52:	80 91 9a 01 	lds	r24, 0x019A
    3c56:	81 30       	cpi	r24, 0x01	; 1
    3c58:	09 f0       	breq	.+2      	; 0x3c5c <main+0x958>
    3c5a:	7d cb       	rjmp	.-2310   	; 0x3356 <main+0x52>
	{
		Reading = ADC_StartConversion(ADC_CHANNEL_0);
    3c5c:	80 e0       	ldi	r24, 0x00	; 0
    3c5e:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <ADC_StartConversion>
    3c62:	90 93 99 01 	sts	0x0199, r25
    3c66:	80 93 98 01 	sts	0x0198, r24
		volt =1000*(Reading*5.00)/1023;
    3c6a:	80 91 98 01 	lds	r24, 0x0198
    3c6e:	90 91 99 01 	lds	r25, 0x0199
    3c72:	cc 01       	movw	r24, r24
    3c74:	a0 e0       	ldi	r26, 0x00	; 0
    3c76:	b0 e0       	ldi	r27, 0x00	; 0
    3c78:	bc 01       	movw	r22, r24
    3c7a:	cd 01       	movw	r24, r26
    3c7c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3c80:	dc 01       	movw	r26, r24
    3c82:	cb 01       	movw	r24, r22
    3c84:	bc 01       	movw	r22, r24
    3c86:	cd 01       	movw	r24, r26
    3c88:	20 e0       	ldi	r18, 0x00	; 0
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	40 ea       	ldi	r20, 0xA0	; 160
    3c8e:	50 e4       	ldi	r21, 0x40	; 64
    3c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c94:	dc 01       	movw	r26, r24
    3c96:	cb 01       	movw	r24, r22
    3c98:	bc 01       	movw	r22, r24
    3c9a:	cd 01       	movw	r24, r26
    3c9c:	20 e0       	ldi	r18, 0x00	; 0
    3c9e:	30 e0       	ldi	r19, 0x00	; 0
    3ca0:	4a e7       	ldi	r20, 0x7A	; 122
    3ca2:	54 e4       	ldi	r21, 0x44	; 68
    3ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca8:	dc 01       	movw	r26, r24
    3caa:	cb 01       	movw	r24, r22
    3cac:	bc 01       	movw	r22, r24
    3cae:	cd 01       	movw	r24, r26
    3cb0:	20 e0       	ldi	r18, 0x00	; 0
    3cb2:	30 ec       	ldi	r19, 0xC0	; 192
    3cb4:	4f e7       	ldi	r20, 0x7F	; 127
    3cb6:	54 e4       	ldi	r21, 0x44	; 68
    3cb8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	cb 01       	movw	r24, r22
    3cc0:	bc 01       	movw	r22, r24
    3cc2:	cd 01       	movw	r24, r26
    3cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc8:	dc 01       	movw	r26, r24
    3cca:	cb 01       	movw	r24, r22
    3ccc:	80 93 94 01 	sts	0x0194, r24
    3cd0:	90 93 95 01 	sts	0x0195, r25
    3cd4:	a0 93 96 01 	sts	0x0196, r26
    3cd8:	b0 93 97 01 	sts	0x0197, r27
		LCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    3cdc:	81 e0       	ldi	r24, 0x01	; 1
    3cde:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_WriteCommand4Bit>
					LCD_WriteString(data);
    3ce2:	82 e8       	ldi	r24, 0x82	; 130
    3ce4:	91 e0       	ldi	r25, 0x01	; 1
    3ce6:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <LCD_WriteString>
    3cea:	fe 01       	movw	r30, r28
    3cec:	ed 5b       	subi	r30, 0xBD	; 189
    3cee:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf0:	80 e0       	ldi	r24, 0x00	; 0
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	a0 e2       	ldi	r26, 0x20	; 32
    3cf6:	b2 e4       	ldi	r27, 0x42	; 66
    3cf8:	80 83       	st	Z, r24
    3cfa:	91 83       	std	Z+1, r25	; 0x01
    3cfc:	a2 83       	std	Z+2, r26	; 0x02
    3cfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d00:	8e 01       	movw	r16, r28
    3d02:	01 5c       	subi	r16, 0xC1	; 193
    3d04:	1f 4f       	sbci	r17, 0xFF	; 255
    3d06:	fe 01       	movw	r30, r28
    3d08:	ed 5b       	subi	r30, 0xBD	; 189
    3d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0c:	60 81       	ld	r22, Z
    3d0e:	71 81       	ldd	r23, Z+1	; 0x01
    3d10:	82 81       	ldd	r24, Z+2	; 0x02
    3d12:	93 81       	ldd	r25, Z+3	; 0x03
    3d14:	20 e0       	ldi	r18, 0x00	; 0
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	4a e7       	ldi	r20, 0x7A	; 122
    3d1a:	53 e4       	ldi	r21, 0x43	; 67
    3d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d20:	dc 01       	movw	r26, r24
    3d22:	cb 01       	movw	r24, r22
    3d24:	f8 01       	movw	r30, r16
    3d26:	80 83       	st	Z, r24
    3d28:	91 83       	std	Z+1, r25	; 0x01
    3d2a:	a2 83       	std	Z+2, r26	; 0x02
    3d2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d2e:	fe 01       	movw	r30, r28
    3d30:	ff 96       	adiw	r30, 0x3f	; 63
    3d32:	60 81       	ld	r22, Z
    3d34:	71 81       	ldd	r23, Z+1	; 0x01
    3d36:	82 81       	ldd	r24, Z+2	; 0x02
    3d38:	93 81       	ldd	r25, Z+3	; 0x03
    3d3a:	20 e0       	ldi	r18, 0x00	; 0
    3d3c:	30 e0       	ldi	r19, 0x00	; 0
    3d3e:	40 e8       	ldi	r20, 0x80	; 128
    3d40:	5f e3       	ldi	r21, 0x3F	; 63
    3d42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d46:	88 23       	and	r24, r24
    3d48:	2c f4       	brge	.+10     	; 0x3d54 <main+0xa50>
		__ticks = 1;
    3d4a:	81 e0       	ldi	r24, 0x01	; 1
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	9e af       	std	Y+62, r25	; 0x3e
    3d50:	8d af       	std	Y+61, r24	; 0x3d
    3d52:	46 c0       	rjmp	.+140    	; 0x3de0 <main+0xadc>
	else if (__tmp > 65535)
    3d54:	fe 01       	movw	r30, r28
    3d56:	ff 96       	adiw	r30, 0x3f	; 63
    3d58:	60 81       	ld	r22, Z
    3d5a:	71 81       	ldd	r23, Z+1	; 0x01
    3d5c:	82 81       	ldd	r24, Z+2	; 0x02
    3d5e:	93 81       	ldd	r25, Z+3	; 0x03
    3d60:	20 e0       	ldi	r18, 0x00	; 0
    3d62:	3f ef       	ldi	r19, 0xFF	; 255
    3d64:	4f e7       	ldi	r20, 0x7F	; 127
    3d66:	57 e4       	ldi	r21, 0x47	; 71
    3d68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d6c:	18 16       	cp	r1, r24
    3d6e:	64 f5       	brge	.+88     	; 0x3dc8 <main+0xac4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d70:	fe 01       	movw	r30, r28
    3d72:	ed 5b       	subi	r30, 0xBD	; 189
    3d74:	ff 4f       	sbci	r31, 0xFF	; 255
    3d76:	60 81       	ld	r22, Z
    3d78:	71 81       	ldd	r23, Z+1	; 0x01
    3d7a:	82 81       	ldd	r24, Z+2	; 0x02
    3d7c:	93 81       	ldd	r25, Z+3	; 0x03
    3d7e:	20 e0       	ldi	r18, 0x00	; 0
    3d80:	30 e0       	ldi	r19, 0x00	; 0
    3d82:	40 e2       	ldi	r20, 0x20	; 32
    3d84:	51 e4       	ldi	r21, 0x41	; 65
    3d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d8a:	dc 01       	movw	r26, r24
    3d8c:	cb 01       	movw	r24, r22
    3d8e:	bc 01       	movw	r22, r24
    3d90:	cd 01       	movw	r24, r26
    3d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d96:	dc 01       	movw	r26, r24
    3d98:	cb 01       	movw	r24, r22
    3d9a:	9e af       	std	Y+62, r25	; 0x3e
    3d9c:	8d af       	std	Y+61, r24	; 0x3d
    3d9e:	0f c0       	rjmp	.+30     	; 0x3dbe <main+0xaba>
    3da0:	89 e1       	ldi	r24, 0x19	; 25
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	9c af       	std	Y+60, r25	; 0x3c
    3da6:	8b af       	std	Y+59, r24	; 0x3b
    3da8:	8b ad       	ldd	r24, Y+59	; 0x3b
    3daa:	9c ad       	ldd	r25, Y+60	; 0x3c
    3dac:	01 97       	sbiw	r24, 0x01	; 1
    3dae:	f1 f7       	brne	.-4      	; 0x3dac <main+0xaa8>
    3db0:	9c af       	std	Y+60, r25	; 0x3c
    3db2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3db4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3db6:	9e ad       	ldd	r25, Y+62	; 0x3e
    3db8:	01 97       	sbiw	r24, 0x01	; 1
    3dba:	9e af       	std	Y+62, r25	; 0x3e
    3dbc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dbe:	8d ad       	ldd	r24, Y+61	; 0x3d
    3dc0:	9e ad       	ldd	r25, Y+62	; 0x3e
    3dc2:	00 97       	sbiw	r24, 0x00	; 0
    3dc4:	69 f7       	brne	.-38     	; 0x3da0 <main+0xa9c>
    3dc6:	16 c0       	rjmp	.+44     	; 0x3df4 <main+0xaf0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc8:	fe 01       	movw	r30, r28
    3dca:	ff 96       	adiw	r30, 0x3f	; 63
    3dcc:	60 81       	ld	r22, Z
    3dce:	71 81       	ldd	r23, Z+1	; 0x01
    3dd0:	82 81       	ldd	r24, Z+2	; 0x02
    3dd2:	93 81       	ldd	r25, Z+3	; 0x03
    3dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd8:	dc 01       	movw	r26, r24
    3dda:	cb 01       	movw	r24, r22
    3ddc:	9e af       	std	Y+62, r25	; 0x3e
    3dde:	8d af       	std	Y+61, r24	; 0x3d
    3de0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3de2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3de4:	9a af       	std	Y+58, r25	; 0x3a
    3de6:	89 af       	std	Y+57, r24	; 0x39
    3de8:	89 ad       	ldd	r24, Y+57	; 0x39
    3dea:	9a ad       	ldd	r25, Y+58	; 0x3a
    3dec:	01 97       	sbiw	r24, 0x01	; 1
    3dee:	f1 f7       	brne	.-4      	; 0x3dec <main+0xae8>
    3df0:	9a af       	std	Y+58, r25	; 0x3a
    3df2:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(40);
					LCD_SetCursorPosition(LCD_LINE_0,12);
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	6c e0       	ldi	r22, 0x0C	; 12
    3df8:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <LCD_SetCursorPosition>
    3dfc:	80 e0       	ldi	r24, 0x00	; 0
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	a0 e2       	ldi	r26, 0x20	; 32
    3e02:	b2 e4       	ldi	r27, 0x42	; 66
    3e04:	8d ab       	std	Y+53, r24	; 0x35
    3e06:	9e ab       	std	Y+54, r25	; 0x36
    3e08:	af ab       	std	Y+55, r26	; 0x37
    3e0a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e0c:	6d a9       	ldd	r22, Y+53	; 0x35
    3e0e:	7e a9       	ldd	r23, Y+54	; 0x36
    3e10:	8f a9       	ldd	r24, Y+55	; 0x37
    3e12:	98 ad       	ldd	r25, Y+56	; 0x38
    3e14:	20 e0       	ldi	r18, 0x00	; 0
    3e16:	30 e0       	ldi	r19, 0x00	; 0
    3e18:	4a e7       	ldi	r20, 0x7A	; 122
    3e1a:	53 e4       	ldi	r21, 0x43	; 67
    3e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e20:	dc 01       	movw	r26, r24
    3e22:	cb 01       	movw	r24, r22
    3e24:	89 ab       	std	Y+49, r24	; 0x31
    3e26:	9a ab       	std	Y+50, r25	; 0x32
    3e28:	ab ab       	std	Y+51, r26	; 0x33
    3e2a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3e2c:	69 a9       	ldd	r22, Y+49	; 0x31
    3e2e:	7a a9       	ldd	r23, Y+50	; 0x32
    3e30:	8b a9       	ldd	r24, Y+51	; 0x33
    3e32:	9c a9       	ldd	r25, Y+52	; 0x34
    3e34:	20 e0       	ldi	r18, 0x00	; 0
    3e36:	30 e0       	ldi	r19, 0x00	; 0
    3e38:	40 e8       	ldi	r20, 0x80	; 128
    3e3a:	5f e3       	ldi	r21, 0x3F	; 63
    3e3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e40:	88 23       	and	r24, r24
    3e42:	2c f4       	brge	.+10     	; 0x3e4e <main+0xb4a>
		__ticks = 1;
    3e44:	81 e0       	ldi	r24, 0x01	; 1
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	98 ab       	std	Y+48, r25	; 0x30
    3e4a:	8f a7       	std	Y+47, r24	; 0x2f
    3e4c:	3f c0       	rjmp	.+126    	; 0x3ecc <main+0xbc8>
	else if (__tmp > 65535)
    3e4e:	69 a9       	ldd	r22, Y+49	; 0x31
    3e50:	7a a9       	ldd	r23, Y+50	; 0x32
    3e52:	8b a9       	ldd	r24, Y+51	; 0x33
    3e54:	9c a9       	ldd	r25, Y+52	; 0x34
    3e56:	20 e0       	ldi	r18, 0x00	; 0
    3e58:	3f ef       	ldi	r19, 0xFF	; 255
    3e5a:	4f e7       	ldi	r20, 0x7F	; 127
    3e5c:	57 e4       	ldi	r21, 0x47	; 71
    3e5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e62:	18 16       	cp	r1, r24
    3e64:	4c f5       	brge	.+82     	; 0x3eb8 <main+0xbb4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e66:	6d a9       	ldd	r22, Y+53	; 0x35
    3e68:	7e a9       	ldd	r23, Y+54	; 0x36
    3e6a:	8f a9       	ldd	r24, Y+55	; 0x37
    3e6c:	98 ad       	ldd	r25, Y+56	; 0x38
    3e6e:	20 e0       	ldi	r18, 0x00	; 0
    3e70:	30 e0       	ldi	r19, 0x00	; 0
    3e72:	40 e2       	ldi	r20, 0x20	; 32
    3e74:	51 e4       	ldi	r21, 0x41	; 65
    3e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e7a:	dc 01       	movw	r26, r24
    3e7c:	cb 01       	movw	r24, r22
    3e7e:	bc 01       	movw	r22, r24
    3e80:	cd 01       	movw	r24, r26
    3e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e86:	dc 01       	movw	r26, r24
    3e88:	cb 01       	movw	r24, r22
    3e8a:	98 ab       	std	Y+48, r25	; 0x30
    3e8c:	8f a7       	std	Y+47, r24	; 0x2f
    3e8e:	0f c0       	rjmp	.+30     	; 0x3eae <main+0xbaa>
    3e90:	89 e1       	ldi	r24, 0x19	; 25
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	9e a7       	std	Y+46, r25	; 0x2e
    3e96:	8d a7       	std	Y+45, r24	; 0x2d
    3e98:	8d a5       	ldd	r24, Y+45	; 0x2d
    3e9a:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e9c:	01 97       	sbiw	r24, 0x01	; 1
    3e9e:	f1 f7       	brne	.-4      	; 0x3e9c <main+0xb98>
    3ea0:	9e a7       	std	Y+46, r25	; 0x2e
    3ea2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ea4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ea6:	98 a9       	ldd	r25, Y+48	; 0x30
    3ea8:	01 97       	sbiw	r24, 0x01	; 1
    3eaa:	98 ab       	std	Y+48, r25	; 0x30
    3eac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eae:	8f a5       	ldd	r24, Y+47	; 0x2f
    3eb0:	98 a9       	ldd	r25, Y+48	; 0x30
    3eb2:	00 97       	sbiw	r24, 0x00	; 0
    3eb4:	69 f7       	brne	.-38     	; 0x3e90 <main+0xb8c>
    3eb6:	14 c0       	rjmp	.+40     	; 0x3ee0 <main+0xbdc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eb8:	69 a9       	ldd	r22, Y+49	; 0x31
    3eba:	7a a9       	ldd	r23, Y+50	; 0x32
    3ebc:	8b a9       	ldd	r24, Y+51	; 0x33
    3ebe:	9c a9       	ldd	r25, Y+52	; 0x34
    3ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	cb 01       	movw	r24, r22
    3ec8:	98 ab       	std	Y+48, r25	; 0x30
    3eca:	8f a7       	std	Y+47, r24	; 0x2f
    3ecc:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ece:	98 a9       	ldd	r25, Y+48	; 0x30
    3ed0:	9c a7       	std	Y+44, r25	; 0x2c
    3ed2:	8b a7       	std	Y+43, r24	; 0x2b
    3ed4:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ed6:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ed8:	01 97       	sbiw	r24, 0x01	; 1
    3eda:	f1 f7       	brne	.-4      	; 0x3ed8 <main+0xbd4>
    3edc:	9c a7       	std	Y+44, r25	; 0x2c
    3ede:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(40);
					LCD_WriteNumber(volt);
    3ee0:	80 91 94 01 	lds	r24, 0x0194
    3ee4:	90 91 95 01 	lds	r25, 0x0195
    3ee8:	a0 91 96 01 	lds	r26, 0x0196
    3eec:	b0 91 97 01 	lds	r27, 0x0197
    3ef0:	bc 01       	movw	r22, r24
    3ef2:	cd 01       	movw	r24, r26
    3ef4:	0e 94 15 18 	call	0x302a	; 0x302a <LCD_WriteNumber>
    3ef8:	80 e0       	ldi	r24, 0x00	; 0
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	a0 e2       	ldi	r26, 0x20	; 32
    3efe:	b2 e4       	ldi	r27, 0x42	; 66
    3f00:	8f a3       	std	Y+39, r24	; 0x27
    3f02:	98 a7       	std	Y+40, r25	; 0x28
    3f04:	a9 a7       	std	Y+41, r26	; 0x29
    3f06:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f08:	6f a1       	ldd	r22, Y+39	; 0x27
    3f0a:	78 a5       	ldd	r23, Y+40	; 0x28
    3f0c:	89 a5       	ldd	r24, Y+41	; 0x29
    3f0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f10:	20 e0       	ldi	r18, 0x00	; 0
    3f12:	30 e0       	ldi	r19, 0x00	; 0
    3f14:	4a e7       	ldi	r20, 0x7A	; 122
    3f16:	53 e4       	ldi	r21, 0x43	; 67
    3f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f1c:	dc 01       	movw	r26, r24
    3f1e:	cb 01       	movw	r24, r22
    3f20:	8b a3       	std	Y+35, r24	; 0x23
    3f22:	9c a3       	std	Y+36, r25	; 0x24
    3f24:	ad a3       	std	Y+37, r26	; 0x25
    3f26:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f28:	6b a1       	ldd	r22, Y+35	; 0x23
    3f2a:	7c a1       	ldd	r23, Y+36	; 0x24
    3f2c:	8d a1       	ldd	r24, Y+37	; 0x25
    3f2e:	9e a1       	ldd	r25, Y+38	; 0x26
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	40 e8       	ldi	r20, 0x80	; 128
    3f36:	5f e3       	ldi	r21, 0x3F	; 63
    3f38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f3c:	88 23       	and	r24, r24
    3f3e:	2c f4       	brge	.+10     	; 0x3f4a <main+0xc46>
		__ticks = 1;
    3f40:	81 e0       	ldi	r24, 0x01	; 1
    3f42:	90 e0       	ldi	r25, 0x00	; 0
    3f44:	9a a3       	std	Y+34, r25	; 0x22
    3f46:	89 a3       	std	Y+33, r24	; 0x21
    3f48:	3f c0       	rjmp	.+126    	; 0x3fc8 <main+0xcc4>
	else if (__tmp > 65535)
    3f4a:	6b a1       	ldd	r22, Y+35	; 0x23
    3f4c:	7c a1       	ldd	r23, Y+36	; 0x24
    3f4e:	8d a1       	ldd	r24, Y+37	; 0x25
    3f50:	9e a1       	ldd	r25, Y+38	; 0x26
    3f52:	20 e0       	ldi	r18, 0x00	; 0
    3f54:	3f ef       	ldi	r19, 0xFF	; 255
    3f56:	4f e7       	ldi	r20, 0x7F	; 127
    3f58:	57 e4       	ldi	r21, 0x47	; 71
    3f5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f5e:	18 16       	cp	r1, r24
    3f60:	4c f5       	brge	.+82     	; 0x3fb4 <main+0xcb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f62:	6f a1       	ldd	r22, Y+39	; 0x27
    3f64:	78 a5       	ldd	r23, Y+40	; 0x28
    3f66:	89 a5       	ldd	r24, Y+41	; 0x29
    3f68:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f6a:	20 e0       	ldi	r18, 0x00	; 0
    3f6c:	30 e0       	ldi	r19, 0x00	; 0
    3f6e:	40 e2       	ldi	r20, 0x20	; 32
    3f70:	51 e4       	ldi	r21, 0x41	; 65
    3f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f76:	dc 01       	movw	r26, r24
    3f78:	cb 01       	movw	r24, r22
    3f7a:	bc 01       	movw	r22, r24
    3f7c:	cd 01       	movw	r24, r26
    3f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f82:	dc 01       	movw	r26, r24
    3f84:	cb 01       	movw	r24, r22
    3f86:	9a a3       	std	Y+34, r25	; 0x22
    3f88:	89 a3       	std	Y+33, r24	; 0x21
    3f8a:	0f c0       	rjmp	.+30     	; 0x3faa <main+0xca6>
    3f8c:	89 e1       	ldi	r24, 0x19	; 25
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	98 a3       	std	Y+32, r25	; 0x20
    3f92:	8f 8f       	std	Y+31, r24	; 0x1f
    3f94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f96:	98 a1       	ldd	r25, Y+32	; 0x20
    3f98:	01 97       	sbiw	r24, 0x01	; 1
    3f9a:	f1 f7       	brne	.-4      	; 0x3f98 <main+0xc94>
    3f9c:	98 a3       	std	Y+32, r25	; 0x20
    3f9e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fa0:	89 a1       	ldd	r24, Y+33	; 0x21
    3fa2:	9a a1       	ldd	r25, Y+34	; 0x22
    3fa4:	01 97       	sbiw	r24, 0x01	; 1
    3fa6:	9a a3       	std	Y+34, r25	; 0x22
    3fa8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3faa:	89 a1       	ldd	r24, Y+33	; 0x21
    3fac:	9a a1       	ldd	r25, Y+34	; 0x22
    3fae:	00 97       	sbiw	r24, 0x00	; 0
    3fb0:	69 f7       	brne	.-38     	; 0x3f8c <main+0xc88>
    3fb2:	14 c0       	rjmp	.+40     	; 0x3fdc <main+0xcd8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fb4:	6b a1       	ldd	r22, Y+35	; 0x23
    3fb6:	7c a1       	ldd	r23, Y+36	; 0x24
    3fb8:	8d a1       	ldd	r24, Y+37	; 0x25
    3fba:	9e a1       	ldd	r25, Y+38	; 0x26
    3fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc0:	dc 01       	movw	r26, r24
    3fc2:	cb 01       	movw	r24, r22
    3fc4:	9a a3       	std	Y+34, r25	; 0x22
    3fc6:	89 a3       	std	Y+33, r24	; 0x21
    3fc8:	89 a1       	ldd	r24, Y+33	; 0x21
    3fca:	9a a1       	ldd	r25, Y+34	; 0x22
    3fcc:	9e 8f       	std	Y+30, r25	; 0x1e
    3fce:	8d 8f       	std	Y+29, r24	; 0x1d
    3fd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fd2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3fd4:	01 97       	sbiw	r24, 0x01	; 1
    3fd6:	f1 f7       	brne	.-4      	; 0x3fd4 <main+0xcd0>
    3fd8:	9e 8f       	std	Y+30, r25	; 0x1e
    3fda:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(40);
					LCD_SetCursorPosition(LCD_LINE_1,14);
    3fdc:	81 e0       	ldi	r24, 0x01	; 1
    3fde:	6e e0       	ldi	r22, 0x0E	; 14
    3fe0:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <LCD_SetCursorPosition>
    3fe4:	80 e0       	ldi	r24, 0x00	; 0
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	a0 e2       	ldi	r26, 0x20	; 32
    3fea:	b2 e4       	ldi	r27, 0x42	; 66
    3fec:	89 8f       	std	Y+25, r24	; 0x19
    3fee:	9a 8f       	std	Y+26, r25	; 0x1a
    3ff0:	ab 8f       	std	Y+27, r26	; 0x1b
    3ff2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ff4:	69 8d       	ldd	r22, Y+25	; 0x19
    3ff6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ff8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ffa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ffc:	20 e0       	ldi	r18, 0x00	; 0
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	4a e7       	ldi	r20, 0x7A	; 122
    4002:	53 e4       	ldi	r21, 0x43	; 67
    4004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4008:	dc 01       	movw	r26, r24
    400a:	cb 01       	movw	r24, r22
    400c:	8d 8b       	std	Y+21, r24	; 0x15
    400e:	9e 8b       	std	Y+22, r25	; 0x16
    4010:	af 8b       	std	Y+23, r26	; 0x17
    4012:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4014:	6d 89       	ldd	r22, Y+21	; 0x15
    4016:	7e 89       	ldd	r23, Y+22	; 0x16
    4018:	8f 89       	ldd	r24, Y+23	; 0x17
    401a:	98 8d       	ldd	r25, Y+24	; 0x18
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	40 e8       	ldi	r20, 0x80	; 128
    4022:	5f e3       	ldi	r21, 0x3F	; 63
    4024:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4028:	88 23       	and	r24, r24
    402a:	2c f4       	brge	.+10     	; 0x4036 <main+0xd32>
		__ticks = 1;
    402c:	81 e0       	ldi	r24, 0x01	; 1
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	9c 8b       	std	Y+20, r25	; 0x14
    4032:	8b 8b       	std	Y+19, r24	; 0x13
    4034:	3f c0       	rjmp	.+126    	; 0x40b4 <main+0xdb0>
	else if (__tmp > 65535)
    4036:	6d 89       	ldd	r22, Y+21	; 0x15
    4038:	7e 89       	ldd	r23, Y+22	; 0x16
    403a:	8f 89       	ldd	r24, Y+23	; 0x17
    403c:	98 8d       	ldd	r25, Y+24	; 0x18
    403e:	20 e0       	ldi	r18, 0x00	; 0
    4040:	3f ef       	ldi	r19, 0xFF	; 255
    4042:	4f e7       	ldi	r20, 0x7F	; 127
    4044:	57 e4       	ldi	r21, 0x47	; 71
    4046:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    404a:	18 16       	cp	r1, r24
    404c:	4c f5       	brge	.+82     	; 0x40a0 <main+0xd9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    404e:	69 8d       	ldd	r22, Y+25	; 0x19
    4050:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4052:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4054:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4056:	20 e0       	ldi	r18, 0x00	; 0
    4058:	30 e0       	ldi	r19, 0x00	; 0
    405a:	40 e2       	ldi	r20, 0x20	; 32
    405c:	51 e4       	ldi	r21, 0x41	; 65
    405e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4062:	dc 01       	movw	r26, r24
    4064:	cb 01       	movw	r24, r22
    4066:	bc 01       	movw	r22, r24
    4068:	cd 01       	movw	r24, r26
    406a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    406e:	dc 01       	movw	r26, r24
    4070:	cb 01       	movw	r24, r22
    4072:	9c 8b       	std	Y+20, r25	; 0x14
    4074:	8b 8b       	std	Y+19, r24	; 0x13
    4076:	0f c0       	rjmp	.+30     	; 0x4096 <main+0xd92>
    4078:	89 e1       	ldi	r24, 0x19	; 25
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	9a 8b       	std	Y+18, r25	; 0x12
    407e:	89 8b       	std	Y+17, r24	; 0x11
    4080:	89 89       	ldd	r24, Y+17	; 0x11
    4082:	9a 89       	ldd	r25, Y+18	; 0x12
    4084:	01 97       	sbiw	r24, 0x01	; 1
    4086:	f1 f7       	brne	.-4      	; 0x4084 <main+0xd80>
    4088:	9a 8b       	std	Y+18, r25	; 0x12
    408a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    408c:	8b 89       	ldd	r24, Y+19	; 0x13
    408e:	9c 89       	ldd	r25, Y+20	; 0x14
    4090:	01 97       	sbiw	r24, 0x01	; 1
    4092:	9c 8b       	std	Y+20, r25	; 0x14
    4094:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4096:	8b 89       	ldd	r24, Y+19	; 0x13
    4098:	9c 89       	ldd	r25, Y+20	; 0x14
    409a:	00 97       	sbiw	r24, 0x00	; 0
    409c:	69 f7       	brne	.-38     	; 0x4078 <main+0xd74>
    409e:	14 c0       	rjmp	.+40     	; 0x40c8 <main+0xdc4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40a0:	6d 89       	ldd	r22, Y+21	; 0x15
    40a2:	7e 89       	ldd	r23, Y+22	; 0x16
    40a4:	8f 89       	ldd	r24, Y+23	; 0x17
    40a6:	98 8d       	ldd	r25, Y+24	; 0x18
    40a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ac:	dc 01       	movw	r26, r24
    40ae:	cb 01       	movw	r24, r22
    40b0:	9c 8b       	std	Y+20, r25	; 0x14
    40b2:	8b 8b       	std	Y+19, r24	; 0x13
    40b4:	8b 89       	ldd	r24, Y+19	; 0x13
    40b6:	9c 89       	ldd	r25, Y+20	; 0x14
    40b8:	98 8b       	std	Y+16, r25	; 0x10
    40ba:	8f 87       	std	Y+15, r24	; 0x0f
    40bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    40be:	98 89       	ldd	r25, Y+16	; 0x10
    40c0:	01 97       	sbiw	r24, 0x01	; 1
    40c2:	f1 f7       	brne	.-4      	; 0x40c0 <main+0xdbc>
    40c4:	98 8b       	std	Y+16, r25	; 0x10
    40c6:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(40);
					LCD_WriteString(conv);
    40c8:	80 e8       	ldi	r24, 0x80	; 128
    40ca:	91 e0       	ldi	r25, 0x01	; 1
    40cc:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <LCD_WriteString>
    40d0:	80 e0       	ldi	r24, 0x00	; 0
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	a0 e2       	ldi	r26, 0x20	; 32
    40d6:	b2 e4       	ldi	r27, 0x42	; 66
    40d8:	8b 87       	std	Y+11, r24	; 0x0b
    40da:	9c 87       	std	Y+12, r25	; 0x0c
    40dc:	ad 87       	std	Y+13, r26	; 0x0d
    40de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    40e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    40e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    40e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    40e8:	20 e0       	ldi	r18, 0x00	; 0
    40ea:	30 e0       	ldi	r19, 0x00	; 0
    40ec:	4a e7       	ldi	r20, 0x7A	; 122
    40ee:	53 e4       	ldi	r21, 0x43	; 67
    40f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f4:	dc 01       	movw	r26, r24
    40f6:	cb 01       	movw	r24, r22
    40f8:	8f 83       	std	Y+7, r24	; 0x07
    40fa:	98 87       	std	Y+8, r25	; 0x08
    40fc:	a9 87       	std	Y+9, r26	; 0x09
    40fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4100:	6f 81       	ldd	r22, Y+7	; 0x07
    4102:	78 85       	ldd	r23, Y+8	; 0x08
    4104:	89 85       	ldd	r24, Y+9	; 0x09
    4106:	9a 85       	ldd	r25, Y+10	; 0x0a
    4108:	20 e0       	ldi	r18, 0x00	; 0
    410a:	30 e0       	ldi	r19, 0x00	; 0
    410c:	40 e8       	ldi	r20, 0x80	; 128
    410e:	5f e3       	ldi	r21, 0x3F	; 63
    4110:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4114:	88 23       	and	r24, r24
    4116:	2c f4       	brge	.+10     	; 0x4122 <main+0xe1e>
		__ticks = 1;
    4118:	81 e0       	ldi	r24, 0x01	; 1
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	9e 83       	std	Y+6, r25	; 0x06
    411e:	8d 83       	std	Y+5, r24	; 0x05
    4120:	3f c0       	rjmp	.+126    	; 0x41a0 <main+0xe9c>
	else if (__tmp > 65535)
    4122:	6f 81       	ldd	r22, Y+7	; 0x07
    4124:	78 85       	ldd	r23, Y+8	; 0x08
    4126:	89 85       	ldd	r24, Y+9	; 0x09
    4128:	9a 85       	ldd	r25, Y+10	; 0x0a
    412a:	20 e0       	ldi	r18, 0x00	; 0
    412c:	3f ef       	ldi	r19, 0xFF	; 255
    412e:	4f e7       	ldi	r20, 0x7F	; 127
    4130:	57 e4       	ldi	r21, 0x47	; 71
    4132:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4136:	18 16       	cp	r1, r24
    4138:	4c f5       	brge	.+82     	; 0x418c <main+0xe88>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    413a:	6b 85       	ldd	r22, Y+11	; 0x0b
    413c:	7c 85       	ldd	r23, Y+12	; 0x0c
    413e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4140:	9e 85       	ldd	r25, Y+14	; 0x0e
    4142:	20 e0       	ldi	r18, 0x00	; 0
    4144:	30 e0       	ldi	r19, 0x00	; 0
    4146:	40 e2       	ldi	r20, 0x20	; 32
    4148:	51 e4       	ldi	r21, 0x41	; 65
    414a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    414e:	dc 01       	movw	r26, r24
    4150:	cb 01       	movw	r24, r22
    4152:	bc 01       	movw	r22, r24
    4154:	cd 01       	movw	r24, r26
    4156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    415a:	dc 01       	movw	r26, r24
    415c:	cb 01       	movw	r24, r22
    415e:	9e 83       	std	Y+6, r25	; 0x06
    4160:	8d 83       	std	Y+5, r24	; 0x05
    4162:	0f c0       	rjmp	.+30     	; 0x4182 <main+0xe7e>
    4164:	89 e1       	ldi	r24, 0x19	; 25
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	9c 83       	std	Y+4, r25	; 0x04
    416a:	8b 83       	std	Y+3, r24	; 0x03
    416c:	8b 81       	ldd	r24, Y+3	; 0x03
    416e:	9c 81       	ldd	r25, Y+4	; 0x04
    4170:	01 97       	sbiw	r24, 0x01	; 1
    4172:	f1 f7       	brne	.-4      	; 0x4170 <main+0xe6c>
    4174:	9c 83       	std	Y+4, r25	; 0x04
    4176:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4178:	8d 81       	ldd	r24, Y+5	; 0x05
    417a:	9e 81       	ldd	r25, Y+6	; 0x06
    417c:	01 97       	sbiw	r24, 0x01	; 1
    417e:	9e 83       	std	Y+6, r25	; 0x06
    4180:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4182:	8d 81       	ldd	r24, Y+5	; 0x05
    4184:	9e 81       	ldd	r25, Y+6	; 0x06
    4186:	00 97       	sbiw	r24, 0x00	; 0
    4188:	69 f7       	brne	.-38     	; 0x4164 <main+0xe60>
    418a:	14 c0       	rjmp	.+40     	; 0x41b4 <main+0xeb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    418c:	6f 81       	ldd	r22, Y+7	; 0x07
    418e:	78 85       	ldd	r23, Y+8	; 0x08
    4190:	89 85       	ldd	r24, Y+9	; 0x09
    4192:	9a 85       	ldd	r25, Y+10	; 0x0a
    4194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4198:	dc 01       	movw	r26, r24
    419a:	cb 01       	movw	r24, r22
    419c:	9e 83       	std	Y+6, r25	; 0x06
    419e:	8d 83       	std	Y+5, r24	; 0x05
    41a0:	8d 81       	ldd	r24, Y+5	; 0x05
    41a2:	9e 81       	ldd	r25, Y+6	; 0x06
    41a4:	9a 83       	std	Y+2, r25	; 0x02
    41a6:	89 83       	std	Y+1, r24	; 0x01
    41a8:	89 81       	ldd	r24, Y+1	; 0x01
    41aa:	9a 81       	ldd	r25, Y+2	; 0x02
    41ac:	01 97       	sbiw	r24, 0x01	; 1
    41ae:	f1 f7       	brne	.-4      	; 0x41ac <main+0xea8>
    41b0:	9a 83       	std	Y+2, r25	; 0x02
    41b2:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(40);
					LCD_SetCursorPosition(LCD_LINE_0,0);
    41b4:	80 e0       	ldi	r24, 0x00	; 0
    41b6:	60 e0       	ldi	r22, 0x00	; 0
    41b8:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <LCD_SetCursorPosition>
    41bc:	cc c8       	rjmp	.-3688   	; 0x3356 <main+0x52>

000041be <__udivmodhi4>:
    41be:	aa 1b       	sub	r26, r26
    41c0:	bb 1b       	sub	r27, r27
    41c2:	51 e1       	ldi	r21, 0x11	; 17
    41c4:	07 c0       	rjmp	.+14     	; 0x41d4 <__udivmodhi4_ep>

000041c6 <__udivmodhi4_loop>:
    41c6:	aa 1f       	adc	r26, r26
    41c8:	bb 1f       	adc	r27, r27
    41ca:	a6 17       	cp	r26, r22
    41cc:	b7 07       	cpc	r27, r23
    41ce:	10 f0       	brcs	.+4      	; 0x41d4 <__udivmodhi4_ep>
    41d0:	a6 1b       	sub	r26, r22
    41d2:	b7 0b       	sbc	r27, r23

000041d4 <__udivmodhi4_ep>:
    41d4:	88 1f       	adc	r24, r24
    41d6:	99 1f       	adc	r25, r25
    41d8:	5a 95       	dec	r21
    41da:	a9 f7       	brne	.-22     	; 0x41c6 <__udivmodhi4_loop>
    41dc:	80 95       	com	r24
    41de:	90 95       	com	r25
    41e0:	bc 01       	movw	r22, r24
    41e2:	cd 01       	movw	r24, r26
    41e4:	08 95       	ret

000041e6 <__udivmodsi4>:
    41e6:	a1 e2       	ldi	r26, 0x21	; 33
    41e8:	1a 2e       	mov	r1, r26
    41ea:	aa 1b       	sub	r26, r26
    41ec:	bb 1b       	sub	r27, r27
    41ee:	fd 01       	movw	r30, r26
    41f0:	0d c0       	rjmp	.+26     	; 0x420c <__udivmodsi4_ep>

000041f2 <__udivmodsi4_loop>:
    41f2:	aa 1f       	adc	r26, r26
    41f4:	bb 1f       	adc	r27, r27
    41f6:	ee 1f       	adc	r30, r30
    41f8:	ff 1f       	adc	r31, r31
    41fa:	a2 17       	cp	r26, r18
    41fc:	b3 07       	cpc	r27, r19
    41fe:	e4 07       	cpc	r30, r20
    4200:	f5 07       	cpc	r31, r21
    4202:	20 f0       	brcs	.+8      	; 0x420c <__udivmodsi4_ep>
    4204:	a2 1b       	sub	r26, r18
    4206:	b3 0b       	sbc	r27, r19
    4208:	e4 0b       	sbc	r30, r20
    420a:	f5 0b       	sbc	r31, r21

0000420c <__udivmodsi4_ep>:
    420c:	66 1f       	adc	r22, r22
    420e:	77 1f       	adc	r23, r23
    4210:	88 1f       	adc	r24, r24
    4212:	99 1f       	adc	r25, r25
    4214:	1a 94       	dec	r1
    4216:	69 f7       	brne	.-38     	; 0x41f2 <__udivmodsi4_loop>
    4218:	60 95       	com	r22
    421a:	70 95       	com	r23
    421c:	80 95       	com	r24
    421e:	90 95       	com	r25
    4220:	9b 01       	movw	r18, r22
    4222:	ac 01       	movw	r20, r24
    4224:	bd 01       	movw	r22, r26
    4226:	cf 01       	movw	r24, r30
    4228:	08 95       	ret

0000422a <__prologue_saves__>:
    422a:	2f 92       	push	r2
    422c:	3f 92       	push	r3
    422e:	4f 92       	push	r4
    4230:	5f 92       	push	r5
    4232:	6f 92       	push	r6
    4234:	7f 92       	push	r7
    4236:	8f 92       	push	r8
    4238:	9f 92       	push	r9
    423a:	af 92       	push	r10
    423c:	bf 92       	push	r11
    423e:	cf 92       	push	r12
    4240:	df 92       	push	r13
    4242:	ef 92       	push	r14
    4244:	ff 92       	push	r15
    4246:	0f 93       	push	r16
    4248:	1f 93       	push	r17
    424a:	cf 93       	push	r28
    424c:	df 93       	push	r29
    424e:	cd b7       	in	r28, 0x3d	; 61
    4250:	de b7       	in	r29, 0x3e	; 62
    4252:	ca 1b       	sub	r28, r26
    4254:	db 0b       	sbc	r29, r27
    4256:	0f b6       	in	r0, 0x3f	; 63
    4258:	f8 94       	cli
    425a:	de bf       	out	0x3e, r29	; 62
    425c:	0f be       	out	0x3f, r0	; 63
    425e:	cd bf       	out	0x3d, r28	; 61
    4260:	09 94       	ijmp

00004262 <__epilogue_restores__>:
    4262:	2a 88       	ldd	r2, Y+18	; 0x12
    4264:	39 88       	ldd	r3, Y+17	; 0x11
    4266:	48 88       	ldd	r4, Y+16	; 0x10
    4268:	5f 84       	ldd	r5, Y+15	; 0x0f
    426a:	6e 84       	ldd	r6, Y+14	; 0x0e
    426c:	7d 84       	ldd	r7, Y+13	; 0x0d
    426e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4270:	9b 84       	ldd	r9, Y+11	; 0x0b
    4272:	aa 84       	ldd	r10, Y+10	; 0x0a
    4274:	b9 84       	ldd	r11, Y+9	; 0x09
    4276:	c8 84       	ldd	r12, Y+8	; 0x08
    4278:	df 80       	ldd	r13, Y+7	; 0x07
    427a:	ee 80       	ldd	r14, Y+6	; 0x06
    427c:	fd 80       	ldd	r15, Y+5	; 0x05
    427e:	0c 81       	ldd	r16, Y+4	; 0x04
    4280:	1b 81       	ldd	r17, Y+3	; 0x03
    4282:	aa 81       	ldd	r26, Y+2	; 0x02
    4284:	b9 81       	ldd	r27, Y+1	; 0x01
    4286:	ce 0f       	add	r28, r30
    4288:	d1 1d       	adc	r29, r1
    428a:	0f b6       	in	r0, 0x3f	; 63
    428c:	f8 94       	cli
    428e:	de bf       	out	0x3e, r29	; 62
    4290:	0f be       	out	0x3f, r0	; 63
    4292:	cd bf       	out	0x3d, r28	; 61
    4294:	ed 01       	movw	r28, r26
    4296:	08 95       	ret

00004298 <_exit>:
    4298:	f8 94       	cli

0000429a <__stop_program>:
    429a:	ff cf       	rjmp	.-2      	; 0x429a <__stop_program>
