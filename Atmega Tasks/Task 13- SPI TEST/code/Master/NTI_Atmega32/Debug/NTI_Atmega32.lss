
NTI_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005d54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000082  00800060  00005d54  00005de8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  008000e2  008000e2  00005e6a  2**0
                  ALLOC
  3 .stab         0000db78  00000000  00000000  00005e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a519  00000000  00000000  000139e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0001defd  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0001df10  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  0001df4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  0001e432  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0001e8d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  0001e8ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <__vector_1>
       8:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__vector_2>
       c:	0c 94 2d 18 	jmp	0x305a	; 0x305a <__vector_3>
      10:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__vector_4>
      14:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__vector_5>
      18:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <__vector_6>
      1c:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__vector_7>
      20:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__vector_8>
      24:	0c 94 6d 0d 	jmp	0x1ada	; 0x1ada <__vector_9>
      28:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__vector_10>
      2c:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__vector_11>
      30:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <__vector_12>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 3a 1d 	jmp	0x3a74	; 0x3a74 <__vector_16>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      54:	6e 08       	sbc	r6, r14
      56:	c9 08       	sbc	r12, r9
      58:	6e 08       	sbc	r6, r14
      5a:	c9 08       	sbc	r12, r9
      5c:	c9 08       	sbc	r12, r9
      5e:	c9 08       	sbc	r12, r9
      60:	6e 08       	sbc	r6, r14
      62:	c9 08       	sbc	r12, r9
      64:	c9 08       	sbc	r12, r9
      66:	9d 08       	sbc	r9, r13
      68:	6e 08       	sbc	r6, r14
      6a:	9d 08       	sbc	r9, r13
      6c:	c9 08       	sbc	r12, r9
      6e:	70 08       	sbc	r7, r0
      70:	6e 08       	sbc	r6, r14
      72:	70 08       	sbc	r7, r0
      74:	02 11       	cpse	r16, r2
      76:	5d 11       	cpse	r21, r13
      78:	02 11       	cpse	r16, r2
      7a:	5d 11       	cpse	r21, r13
      7c:	5d 11       	cpse	r21, r13
      7e:	5d 11       	cpse	r21, r13
      80:	02 11       	cpse	r16, r2
      82:	5d 11       	cpse	r21, r13
      84:	5d 11       	cpse	r21, r13
      86:	31 11       	cpse	r19, r1
      88:	02 11       	cpse	r16, r2
      8a:	31 11       	cpse	r19, r1
      8c:	5d 11       	cpse	r21, r13
      8e:	04 11       	cpse	r16, r4
      90:	02 11       	cpse	r16, r2
      92:	04 11       	cpse	r16, r4

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf e5       	ldi	r28, 0x5F	; 95
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	10 e0       	ldi	r17, 0x00	; 0
      a2:	a0 e6       	ldi	r26, 0x60	; 96
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	e4 e5       	ldi	r30, 0x54	; 84
      a8:	fd e5       	ldi	r31, 0x5D	; 93
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	a2 3e       	cpi	r26, 0xE2	; 226
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	21 e0       	ldi	r18, 0x01	; 1
      b8:	a2 ee       	ldi	r26, 0xE2	; 226
      ba:	b0 e0       	ldi	r27, 0x00	; 0
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	aa 33       	cpi	r26, 0x3A	; 58
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 0a 29 	call	0x5214	; 0x5214 <main>
      ca:	0c 94 a8 2e 	jmp	0x5d50	; 0x5d50 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <Convert_IntToString>:
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	27 97       	sbiw	r28, 0x07	; 7
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
      e6:	6a 83       	std	Y+2, r22	; 0x02
      e8:	7b 83       	std	Y+3, r23	; 0x03
      ea:	8c 83       	std	Y+4, r24	; 0x04
      ec:	9d 83       	std	Y+5, r25	; 0x05
      ee:	5f 83       	std	Y+7, r21	; 0x07
      f0:	4e 83       	std	Y+6, r20	; 0x06
      f2:	19 82       	std	Y+1, r1	; 0x01
      f4:	8e 81       	ldd	r24, Y+6	; 0x06
      f6:	9f 81       	ldd	r25, Y+7	; 0x07
      f8:	89 2b       	or	r24, r25
      fa:	19 f4       	brne	.+6      	; 0x102 <Convert_IntToString+0x30>
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	89 83       	std	Y+1, r24	; 0x01
     100:	1d c0       	rjmp	.+58     	; 0x13c <Convert_IntToString+0x6a>
     102:	8d 81       	ldd	r24, Y+5	; 0x05
     104:	8f 93       	push	r24
     106:	8c 81       	ldd	r24, Y+4	; 0x04
     108:	8f 93       	push	r24
     10a:	8b 81       	ldd	r24, Y+3	; 0x03
     10c:	8f 93       	push	r24
     10e:	8a 81       	ldd	r24, Y+2	; 0x02
     110:	8f 93       	push	r24
     112:	8f ea       	ldi	r24, 0xAF	; 175
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	89 2f       	mov	r24, r25
     118:	8f 93       	push	r24
     11a:	8f ea       	ldi	r24, 0xAF	; 175
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	8f 93       	push	r24
     120:	8f 81       	ldd	r24, Y+7	; 0x07
     122:	8f 93       	push	r24
     124:	8e 81       	ldd	r24, Y+6	; 0x06
     126:	8f 93       	push	r24
     128:	0e 94 be 2b 	call	0x577c	; 0x577c <sprintf>
     12c:	8d b7       	in	r24, 0x3d	; 61
     12e:	9e b7       	in	r25, 0x3e	; 62
     130:	08 96       	adiw	r24, 0x08	; 8
     132:	0f b6       	in	r0, 0x3f	; 63
     134:	f8 94       	cli
     136:	de bf       	out	0x3e, r29	; 62
     138:	0f be       	out	0x3f, r0	; 63
     13a:	cd bf       	out	0x3d, r28	; 61
     13c:	89 81       	ldd	r24, Y+1	; 0x01
     13e:	27 96       	adiw	r28, 0x07	; 7
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	f8 94       	cli
     144:	de bf       	out	0x3e, r29	; 62
     146:	0f be       	out	0x3f, r0	; 63
     148:	cd bf       	out	0x3d, r28	; 61
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	08 95       	ret

00000150 <Convert_FloatToString>:
		sprintf(Address_str, "%lu", Copy_u32Number);
	}

	return Loc_enuStatus;
}
Std_StatusType Convert_FloatToString (f64 Copy_f64Number, pu8 Address_str){
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
     158:	65 97       	sbiw	r28, 0x15	; 21
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	f8 94       	cli
     15e:	de bf       	out	0x3e, r29	; 62
     160:	0f be       	out	0x3f, r0	; 63
     162:	cd bf       	out	0x3d, r28	; 61
     164:	68 8b       	std	Y+16, r22	; 0x10
     166:	79 8b       	std	Y+17, r23	; 0x11
     168:	8a 8b       	std	Y+18, r24	; 0x12
     16a:	9b 8b       	std	Y+19, r25	; 0x13
     16c:	5d 8b       	std	Y+21, r21	; 0x15
     16e:	4c 8b       	std	Y+20, r20	; 0x14

	//-5.99

	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     170:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8TempSign[2]="";
     172:	1f 86       	std	Y+15, r1	; 0x0f
     174:	1e 86       	std	Y+14, r1	; 0x0e
	s32  Loc_s64IntPart;
	f32 Loc_f32FractionPart;
	s32  Loc_s64FractionPartAsInteger;


		if(NULL == Address_str){
     176:	8c 89       	ldd	r24, Y+20	; 0x14
     178:	9d 89       	ldd	r25, Y+21	; 0x15
     17a:	89 2b       	or	r24, r25
     17c:	19 f4       	brne	.+6      	; 0x184 <Convert_FloatToString+0x34>
			Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	89 83       	std	Y+1, r24	; 0x01
     182:	78 c0       	rjmp	.+240    	; 0x274 <Convert_FloatToString+0x124>
		}

		else{

			if(Copy_f64Number<0){
     184:	20 e0       	ldi	r18, 0x00	; 0
     186:	30 e0       	ldi	r19, 0x00	; 0
     188:	a9 01       	movw	r20, r18
     18a:	68 89       	ldd	r22, Y+16	; 0x10
     18c:	79 89       	ldd	r23, Y+17	; 0x11
     18e:	8a 89       	ldd	r24, Y+18	; 0x12
     190:	9b 89       	ldd	r25, Y+19	; 0x13
     192:	0e 94 ed 29 	call	0x53da	; 0x53da <__cmpsf2>
     196:	88 23       	and	r24, r24
     198:	5c f4       	brge	.+22     	; 0x1b0 <Convert_FloatToString+0x60>
				Copy_f64Number = -Copy_f64Number ;
     19a:	88 89       	ldd	r24, Y+16	; 0x10
     19c:	99 89       	ldd	r25, Y+17	; 0x11
     19e:	aa 89       	ldd	r26, Y+18	; 0x12
     1a0:	bb 89       	ldd	r27, Y+19	; 0x13
     1a2:	b0 58       	subi	r27, 0x80	; 128
     1a4:	88 8b       	std	Y+16, r24	; 0x10
     1a6:	99 8b       	std	Y+17, r25	; 0x11
     1a8:	aa 8b       	std	Y+18, r26	; 0x12
     1aa:	bb 8b       	std	Y+19, r27	; 0x13
				Loc_u8TempSign[0] ='-';
     1ac:	8d e2       	ldi	r24, 0x2D	; 45
     1ae:	8e 87       	std	Y+14, r24	; 0x0e
			}


			Loc_s64IntPart = Copy_f64Number;                  // Get the integer (5).
     1b0:	68 89       	ldd	r22, Y+16	; 0x10
     1b2:	79 89       	ldd	r23, Y+17	; 0x11
     1b4:	8a 89       	ldd	r24, Y+18	; 0x12
     1b6:	9b 89       	ldd	r25, Y+19	; 0x13
     1b8:	0e 94 64 2a 	call	0x54c8	; 0x54c8 <__fixsfsi>
     1bc:	dc 01       	movw	r26, r24
     1be:	cb 01       	movw	r24, r22
     1c0:	8a 83       	std	Y+2, r24	; 0x02
     1c2:	9b 83       	std	Y+3, r25	; 0x03
     1c4:	ac 83       	std	Y+4, r26	; 0x04
     1c6:	bd 83       	std	Y+5, r27	; 0x05
			Loc_f32FractionPart = Copy_f64Number - Loc_s64IntPart;      // Get fraction (.99).
     1c8:	6a 81       	ldd	r22, Y+2	; 0x02
     1ca:	7b 81       	ldd	r23, Y+3	; 0x03
     1cc:	8c 81       	ldd	r24, Y+4	; 0x04
     1ce:	9d 81       	ldd	r25, Y+5	; 0x05
     1d0:	0e 94 9c 2a 	call	0x5538	; 0x5538 <__floatsisf>
     1d4:	dc 01       	movw	r26, r24
     1d6:	cb 01       	movw	r24, r22
     1d8:	9c 01       	movw	r18, r24
     1da:	ad 01       	movw	r20, r26
     1dc:	68 89       	ldd	r22, Y+16	; 0x10
     1de:	79 89       	ldd	r23, Y+17	; 0x11
     1e0:	8a 89       	ldd	r24, Y+18	; 0x12
     1e2:	9b 89       	ldd	r25, Y+19	; 0x13
     1e4:	0e 94 80 29 	call	0x5300	; 0x5300 <__subsf3>
     1e8:	dc 01       	movw	r26, r24
     1ea:	cb 01       	movw	r24, r22
     1ec:	8e 83       	std	Y+6, r24	; 0x06
     1ee:	9f 83       	std	Y+7, r25	; 0x07
     1f0:	a8 87       	std	Y+8, r26	; 0x08
     1f2:	b9 87       	std	Y+9, r27	; 0x09
			 Loc_s64FractionPartAsInteger = (Loc_f32FractionPart * 10000);  // Turn into integer (9900).
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	30 e4       	ldi	r19, 0x40	; 64
     1f8:	4c e1       	ldi	r20, 0x1C	; 28
     1fa:	56 e4       	ldi	r21, 0x46	; 70
     1fc:	6e 81       	ldd	r22, Y+6	; 0x06
     1fe:	7f 81       	ldd	r23, Y+7	; 0x07
     200:	88 85       	ldd	r24, Y+8	; 0x08
     202:	99 85       	ldd	r25, Y+9	; 0x09
     204:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
     208:	dc 01       	movw	r26, r24
     20a:	cb 01       	movw	r24, r22
     20c:	bc 01       	movw	r22, r24
     20e:	cd 01       	movw	r24, r26
     210:	0e 94 64 2a 	call	0x54c8	; 0x54c8 <__fixsfsi>
     214:	dc 01       	movw	r26, r24
     216:	cb 01       	movw	r24, r22
     218:	8a 87       	std	Y+10, r24	; 0x0a
     21a:	9b 87       	std	Y+11, r25	; 0x0b
     21c:	ac 87       	std	Y+12, r26	; 0x0c
     21e:	bd 87       	std	Y+13, r27	; 0x0d

			// Print as parts, note that you need 0-padding for fractional bit.

			sprintf (Address_str, "%s%ld.%04d", Loc_u8TempSign, Loc_s64IntPart, Loc_s64FractionPartAsInteger);
     220:	8d 85       	ldd	r24, Y+13	; 0x0d
     222:	8f 93       	push	r24
     224:	8c 85       	ldd	r24, Y+12	; 0x0c
     226:	8f 93       	push	r24
     228:	8b 85       	ldd	r24, Y+11	; 0x0b
     22a:	8f 93       	push	r24
     22c:	8a 85       	ldd	r24, Y+10	; 0x0a
     22e:	8f 93       	push	r24
     230:	8d 81       	ldd	r24, Y+5	; 0x05
     232:	8f 93       	push	r24
     234:	8c 81       	ldd	r24, Y+4	; 0x04
     236:	8f 93       	push	r24
     238:	8b 81       	ldd	r24, Y+3	; 0x03
     23a:	8f 93       	push	r24
     23c:	8a 81       	ldd	r24, Y+2	; 0x02
     23e:	8f 93       	push	r24
     240:	ce 01       	movw	r24, r28
     242:	0e 96       	adiw	r24, 0x0e	; 14
     244:	29 2f       	mov	r18, r25
     246:	2f 93       	push	r18
     248:	8f 93       	push	r24
     24a:	83 eb       	ldi	r24, 0xB3	; 179
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	89 2f       	mov	r24, r25
     250:	8f 93       	push	r24
     252:	83 eb       	ldi	r24, 0xB3	; 179
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	8f 93       	push	r24
     258:	8d 89       	ldd	r24, Y+21	; 0x15
     25a:	8f 93       	push	r24
     25c:	8c 89       	ldd	r24, Y+20	; 0x14
     25e:	8f 93       	push	r24
     260:	0e 94 be 2b 	call	0x577c	; 0x577c <sprintf>
     264:	8d b7       	in	r24, 0x3d	; 61
     266:	9e b7       	in	r25, 0x3e	; 62
     268:	0e 96       	adiw	r24, 0x0e	; 14
     26a:	0f b6       	in	r0, 0x3f	; 63
     26c:	f8 94       	cli
     26e:	de bf       	out	0x3e, r29	; 62
     270:	0f be       	out	0x3f, r0	; 63
     272:	cd bf       	out	0x3d, r28	; 61



		}

		return Loc_enuStatus;
     274:	89 81       	ldd	r24, Y+1	; 0x01


}
     276:	65 96       	adiw	r28, 0x15	; 21
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	08 95       	ret

00000288 <Convert_StringTou8>:



Std_StatusType Convert_StringTou8 (u8* Address_Number, pu8 Address_str){
     288:	2f 92       	push	r2
     28a:	3f 92       	push	r3
     28c:	4f 92       	push	r4
     28e:	5f 92       	push	r5
     290:	6f 92       	push	r6
     292:	7f 92       	push	r7
     294:	8f 92       	push	r8
     296:	9f 92       	push	r9
     298:	af 92       	push	r10
     29a:	bf 92       	push	r11
     29c:	cf 92       	push	r12
     29e:	df 92       	push	r13
     2a0:	ef 92       	push	r14
     2a2:	ff 92       	push	r15
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	6e 97       	sbiw	r28, 0x1e	; 30
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
     2bc:	9c 87       	std	Y+12, r25	; 0x0c
     2be:	8b 87       	std	Y+11, r24	; 0x0b
     2c0:	7e 87       	std	Y+14, r23	; 0x0e
     2c2:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     2c4:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     2c6:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     2c8:	1b 82       	std	Y+3, r1	; 0x03
     2ca:	1c 82       	std	Y+4, r1	; 0x04
     2cc:	1d 82       	std	Y+5, r1	; 0x05
     2ce:	1e 82       	std	Y+6, r1	; 0x06
     2d0:	1f 82       	std	Y+7, r1	; 0x07
     2d2:	18 86       	std	Y+8, r1	; 0x08
     2d4:	19 86       	std	Y+9, r1	; 0x09
     2d6:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     2d8:	8d 85       	ldd	r24, Y+13	; 0x0d
     2da:	9e 85       	ldd	r25, Y+14	; 0x0e
     2dc:	89 2b       	or	r24, r25
     2de:	21 f0       	breq	.+8      	; 0x2e8 <Convert_StringTou8+0x60>
     2e0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2e2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2e4:	89 2b       	or	r24, r25
     2e6:	19 f4       	brne	.+6      	; 0x2ee <Convert_StringTou8+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	89 83       	std	Y+1, r24	; 0x01
     2ec:	9f c0       	rjmp	.+318    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     2ee:	1a 82       	std	Y+2, r1	; 0x02
     2f0:	8c c0       	rjmp	.+280    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     2f2:	2b 81       	ldd	r18, Y+3	; 0x03
     2f4:	3c 81       	ldd	r19, Y+4	; 0x04
     2f6:	4d 81       	ldd	r20, Y+5	; 0x05
     2f8:	5e 81       	ldd	r21, Y+6	; 0x06
     2fa:	6f 81       	ldd	r22, Y+7	; 0x07
     2fc:	78 85       	ldd	r23, Y+8	; 0x08
     2fe:	89 85       	ldd	r24, Y+9	; 0x09
     300:	9a 85       	ldd	r25, Y+10	; 0x0a
     302:	22 2e       	mov	r2, r18
     304:	33 2e       	mov	r3, r19
     306:	44 2e       	mov	r4, r20
     308:	55 2e       	mov	r5, r21
     30a:	66 2e       	mov	r6, r22
     30c:	77 2e       	mov	r7, r23
     30e:	88 2e       	mov	r8, r24
     310:	99 2e       	mov	r9, r25
     312:	22 2d       	mov	r18, r2
     314:	33 2d       	mov	r19, r3
     316:	44 2d       	mov	r20, r4
     318:	55 2d       	mov	r21, r5
     31a:	66 2d       	mov	r22, r6
     31c:	77 2d       	mov	r23, r7
     31e:	88 2d       	mov	r24, r8
     320:	99 2d       	mov	r25, r9
     322:	01 e0       	ldi	r16, 0x01	; 1
     324:	0e 94 5e 29 	call	0x52bc	; 0x52bc <__ashldi3>
     328:	a2 2e       	mov	r10, r18
     32a:	b3 2e       	mov	r11, r19
     32c:	c4 2e       	mov	r12, r20
     32e:	d5 2e       	mov	r13, r21
     330:	e6 2e       	mov	r14, r22
     332:	f7 2e       	mov	r15, r23
     334:	08 2f       	mov	r16, r24
     336:	19 2f       	mov	r17, r25
     338:	2a 2c       	mov	r2, r10
     33a:	3b 2c       	mov	r3, r11
     33c:	4c 2c       	mov	r4, r12
     33e:	5d 2c       	mov	r5, r13
     340:	6e 2c       	mov	r6, r14
     342:	7f 2c       	mov	r7, r15
     344:	80 2e       	mov	r8, r16
     346:	91 2e       	mov	r9, r17
     348:	22 2d       	mov	r18, r2
     34a:	33 2d       	mov	r19, r3
     34c:	44 2d       	mov	r20, r4
     34e:	55 2d       	mov	r21, r5
     350:	66 2d       	mov	r22, r6
     352:	77 2d       	mov	r23, r7
     354:	88 2d       	mov	r24, r8
     356:	99 2d       	mov	r25, r9
     358:	02 e0       	ldi	r16, 0x02	; 2
     35a:	0e 94 5e 29 	call	0x52bc	; 0x52bc <__ashldi3>
     35e:	2f 8b       	std	Y+23, r18	; 0x17
     360:	38 8f       	std	Y+24, r19	; 0x18
     362:	49 8f       	std	Y+25, r20	; 0x19
     364:	5a 8f       	std	Y+26, r21	; 0x1a
     366:	6b 8f       	std	Y+27, r22	; 0x1b
     368:	7c 8f       	std	Y+28, r23	; 0x1c
     36a:	8d 8f       	std	Y+29, r24	; 0x1d
     36c:	9e 8f       	std	Y+30, r25	; 0x1e
     36e:	22 2d       	mov	r18, r2
     370:	33 2d       	mov	r19, r3
     372:	44 2d       	mov	r20, r4
     374:	55 2d       	mov	r21, r5
     376:	66 2d       	mov	r22, r6
     378:	77 2d       	mov	r23, r7
     37a:	88 2d       	mov	r24, r8
     37c:	99 2d       	mov	r25, r9
     37e:	af 88       	ldd	r10, Y+23	; 0x17
     380:	b8 8c       	ldd	r11, Y+24	; 0x18
     382:	c9 8c       	ldd	r12, Y+25	; 0x19
     384:	da 8c       	ldd	r13, Y+26	; 0x1a
     386:	eb 8c       	ldd	r14, Y+27	; 0x1b
     388:	fc 8c       	ldd	r15, Y+28	; 0x1c
     38a:	0d 8d       	ldd	r16, Y+29	; 0x1d
     38c:	1e 8d       	ldd	r17, Y+30	; 0x1e
     38e:	0e 94 77 29 	call	0x52ee	; 0x52ee <__adddi3>
     392:	a2 2e       	mov	r10, r18
     394:	b3 2e       	mov	r11, r19
     396:	c4 2e       	mov	r12, r20
     398:	d5 2e       	mov	r13, r21
     39a:	e6 2e       	mov	r14, r22
     39c:	f7 2e       	mov	r15, r23
     39e:	08 2f       	mov	r16, r24
     3a0:	19 2f       	mov	r17, r25
     3a2:	8a 81       	ldd	r24, Y+2	; 0x02
     3a4:	88 2f       	mov	r24, r24
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	2d 85       	ldd	r18, Y+13	; 0x0d
     3aa:	3e 85       	ldd	r19, Y+14	; 0x0e
     3ac:	82 0f       	add	r24, r18
     3ae:	93 1f       	adc	r25, r19
     3b0:	fc 01       	movw	r30, r24
     3b2:	80 81       	ld	r24, Z
     3b4:	88 2f       	mov	r24, r24
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	c0 97       	sbiw	r24, 0x30	; 48
     3ba:	98 8b       	std	Y+16, r25	; 0x10
     3bc:	8f 87       	std	Y+15, r24	; 0x0f
     3be:	89 2f       	mov	r24, r25
     3c0:	88 0f       	add	r24, r24
     3c2:	88 0b       	sbc	r24, r24
     3c4:	89 8b       	std	Y+17, r24	; 0x11
     3c6:	8a 8b       	std	Y+18, r24	; 0x12
     3c8:	8b 8b       	std	Y+19, r24	; 0x13
     3ca:	8c 8b       	std	Y+20, r24	; 0x14
     3cc:	8d 8b       	std	Y+21, r24	; 0x15
     3ce:	8e 8b       	std	Y+22, r24	; 0x16
     3d0:	2a 2d       	mov	r18, r10
     3d2:	3b 2d       	mov	r19, r11
     3d4:	4c 2d       	mov	r20, r12
     3d6:	5d 2d       	mov	r21, r13
     3d8:	6e 2d       	mov	r22, r14
     3da:	7f 2d       	mov	r23, r15
     3dc:	80 2f       	mov	r24, r16
     3de:	91 2f       	mov	r25, r17
     3e0:	af 84       	ldd	r10, Y+15	; 0x0f
     3e2:	b8 88       	ldd	r11, Y+16	; 0x10
     3e4:	c9 88       	ldd	r12, Y+17	; 0x11
     3e6:	da 88       	ldd	r13, Y+18	; 0x12
     3e8:	eb 88       	ldd	r14, Y+19	; 0x13
     3ea:	fc 88       	ldd	r15, Y+20	; 0x14
     3ec:	0d 89       	ldd	r16, Y+21	; 0x15
     3ee:	1e 89       	ldd	r17, Y+22	; 0x16
     3f0:	0e 94 77 29 	call	0x52ee	; 0x52ee <__adddi3>
     3f4:	2b 83       	std	Y+3, r18	; 0x03
     3f6:	3c 83       	std	Y+4, r19	; 0x04
     3f8:	4d 83       	std	Y+5, r20	; 0x05
     3fa:	5e 83       	std	Y+6, r21	; 0x06
     3fc:	6f 83       	std	Y+7, r22	; 0x07
     3fe:	78 87       	std	Y+8, r23	; 0x08
     400:	89 87       	std	Y+9, r24	; 0x09
     402:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     404:	8a 81       	ldd	r24, Y+2	; 0x02
     406:	8f 5f       	subi	r24, 0xFF	; 255
     408:	8a 83       	std	Y+2, r24	; 0x02
     40a:	8a 81       	ldd	r24, Y+2	; 0x02
     40c:	88 2f       	mov	r24, r24
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	2d 85       	ldd	r18, Y+13	; 0x0d
     412:	3e 85       	ldd	r19, Y+14	; 0x0e
     414:	82 0f       	add	r24, r18
     416:	93 1f       	adc	r25, r19
     418:	fc 01       	movw	r30, r24
     41a:	80 81       	ld	r24, Z
     41c:	88 23       	and	r24, r24
     41e:	09 f0       	breq	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     420:	68 cf       	rjmp	.-304    	; 0x2f2 <Convert_StringTou8+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     422:	2b 81       	ldd	r18, Y+3	; 0x03
     424:	8b 85       	ldd	r24, Y+11	; 0x0b
     426:	9c 85       	ldd	r25, Y+12	; 0x0c
     428:	fc 01       	movw	r30, r24
     42a:	20 83       	st	Z, r18
			}

			return Loc_enuStatus;
     42c:	89 81       	ldd	r24, Y+1	; 0x01

}
     42e:	6e 96       	adiw	r28, 0x1e	; 30
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
     434:	de bf       	out	0x3e, r29	; 62
     436:	0f be       	out	0x3f, r0	; 63
     438:	cd bf       	out	0x3d, r28	; 61
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	ff 90       	pop	r15
     444:	ef 90       	pop	r14
     446:	df 90       	pop	r13
     448:	cf 90       	pop	r12
     44a:	bf 90       	pop	r11
     44c:	af 90       	pop	r10
     44e:	9f 90       	pop	r9
     450:	8f 90       	pop	r8
     452:	7f 90       	pop	r7
     454:	6f 90       	pop	r6
     456:	5f 90       	pop	r5
     458:	4f 90       	pop	r4
     45a:	3f 90       	pop	r3
     45c:	2f 90       	pop	r2
     45e:	08 95       	ret

00000460 <Convert_StringTou16>:


Std_StatusType Convert_StringTou16 (u16* Address_Number, pu8 Address_str){
     460:	2f 92       	push	r2
     462:	3f 92       	push	r3
     464:	4f 92       	push	r4
     466:	5f 92       	push	r5
     468:	6f 92       	push	r6
     46a:	7f 92       	push	r7
     46c:	8f 92       	push	r8
     46e:	9f 92       	push	r9
     470:	af 92       	push	r10
     472:	bf 92       	push	r11
     474:	cf 92       	push	r12
     476:	df 92       	push	r13
     478:	ef 92       	push	r14
     47a:	ff 92       	push	r15
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
     488:	6e 97       	sbiw	r28, 0x1e	; 30
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	de bf       	out	0x3e, r29	; 62
     490:	0f be       	out	0x3f, r0	; 63
     492:	cd bf       	out	0x3d, r28	; 61
     494:	9c 87       	std	Y+12, r25	; 0x0c
     496:	8b 87       	std	Y+11, r24	; 0x0b
     498:	7e 87       	std	Y+14, r23	; 0x0e
     49a:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     49c:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     49e:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     4a0:	1b 82       	std	Y+3, r1	; 0x03
     4a2:	1c 82       	std	Y+4, r1	; 0x04
     4a4:	1d 82       	std	Y+5, r1	; 0x05
     4a6:	1e 82       	std	Y+6, r1	; 0x06
     4a8:	1f 82       	std	Y+7, r1	; 0x07
     4aa:	18 86       	std	Y+8, r1	; 0x08
     4ac:	19 86       	std	Y+9, r1	; 0x09
     4ae:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     4b0:	8d 85       	ldd	r24, Y+13	; 0x0d
     4b2:	9e 85       	ldd	r25, Y+14	; 0x0e
     4b4:	89 2b       	or	r24, r25
     4b6:	21 f0       	breq	.+8      	; 0x4c0 <Convert_StringTou16+0x60>
     4b8:	8b 85       	ldd	r24, Y+11	; 0x0b
     4ba:	9c 85       	ldd	r25, Y+12	; 0x0c
     4bc:	89 2b       	or	r24, r25
     4be:	19 f4       	brne	.+6      	; 0x4c6 <Convert_StringTou16+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	89 83       	std	Y+1, r24	; 0x01
     4c4:	a1 c0       	rjmp	.+322    	; 0x608 <Convert_StringTou16+0x1a8>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     4c6:	1a 82       	std	Y+2, r1	; 0x02
     4c8:	8c c0       	rjmp	.+280    	; 0x5e2 <Convert_StringTou16+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     4ca:	2b 81       	ldd	r18, Y+3	; 0x03
     4cc:	3c 81       	ldd	r19, Y+4	; 0x04
     4ce:	4d 81       	ldd	r20, Y+5	; 0x05
     4d0:	5e 81       	ldd	r21, Y+6	; 0x06
     4d2:	6f 81       	ldd	r22, Y+7	; 0x07
     4d4:	78 85       	ldd	r23, Y+8	; 0x08
     4d6:	89 85       	ldd	r24, Y+9	; 0x09
     4d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     4da:	22 2e       	mov	r2, r18
     4dc:	33 2e       	mov	r3, r19
     4de:	44 2e       	mov	r4, r20
     4e0:	55 2e       	mov	r5, r21
     4e2:	66 2e       	mov	r6, r22
     4e4:	77 2e       	mov	r7, r23
     4e6:	88 2e       	mov	r8, r24
     4e8:	99 2e       	mov	r9, r25
     4ea:	22 2d       	mov	r18, r2
     4ec:	33 2d       	mov	r19, r3
     4ee:	44 2d       	mov	r20, r4
     4f0:	55 2d       	mov	r21, r5
     4f2:	66 2d       	mov	r22, r6
     4f4:	77 2d       	mov	r23, r7
     4f6:	88 2d       	mov	r24, r8
     4f8:	99 2d       	mov	r25, r9
     4fa:	01 e0       	ldi	r16, 0x01	; 1
     4fc:	0e 94 5e 29 	call	0x52bc	; 0x52bc <__ashldi3>
     500:	a2 2e       	mov	r10, r18
     502:	b3 2e       	mov	r11, r19
     504:	c4 2e       	mov	r12, r20
     506:	d5 2e       	mov	r13, r21
     508:	e6 2e       	mov	r14, r22
     50a:	f7 2e       	mov	r15, r23
     50c:	08 2f       	mov	r16, r24
     50e:	19 2f       	mov	r17, r25
     510:	2a 2c       	mov	r2, r10
     512:	3b 2c       	mov	r3, r11
     514:	4c 2c       	mov	r4, r12
     516:	5d 2c       	mov	r5, r13
     518:	6e 2c       	mov	r6, r14
     51a:	7f 2c       	mov	r7, r15
     51c:	80 2e       	mov	r8, r16
     51e:	91 2e       	mov	r9, r17
     520:	22 2d       	mov	r18, r2
     522:	33 2d       	mov	r19, r3
     524:	44 2d       	mov	r20, r4
     526:	55 2d       	mov	r21, r5
     528:	66 2d       	mov	r22, r6
     52a:	77 2d       	mov	r23, r7
     52c:	88 2d       	mov	r24, r8
     52e:	99 2d       	mov	r25, r9
     530:	02 e0       	ldi	r16, 0x02	; 2
     532:	0e 94 5e 29 	call	0x52bc	; 0x52bc <__ashldi3>
     536:	2f 8b       	std	Y+23, r18	; 0x17
     538:	38 8f       	std	Y+24, r19	; 0x18
     53a:	49 8f       	std	Y+25, r20	; 0x19
     53c:	5a 8f       	std	Y+26, r21	; 0x1a
     53e:	6b 8f       	std	Y+27, r22	; 0x1b
     540:	7c 8f       	std	Y+28, r23	; 0x1c
     542:	8d 8f       	std	Y+29, r24	; 0x1d
     544:	9e 8f       	std	Y+30, r25	; 0x1e
     546:	22 2d       	mov	r18, r2
     548:	33 2d       	mov	r19, r3
     54a:	44 2d       	mov	r20, r4
     54c:	55 2d       	mov	r21, r5
     54e:	66 2d       	mov	r22, r6
     550:	77 2d       	mov	r23, r7
     552:	88 2d       	mov	r24, r8
     554:	99 2d       	mov	r25, r9
     556:	af 88       	ldd	r10, Y+23	; 0x17
     558:	b8 8c       	ldd	r11, Y+24	; 0x18
     55a:	c9 8c       	ldd	r12, Y+25	; 0x19
     55c:	da 8c       	ldd	r13, Y+26	; 0x1a
     55e:	eb 8c       	ldd	r14, Y+27	; 0x1b
     560:	fc 8c       	ldd	r15, Y+28	; 0x1c
     562:	0d 8d       	ldd	r16, Y+29	; 0x1d
     564:	1e 8d       	ldd	r17, Y+30	; 0x1e
     566:	0e 94 77 29 	call	0x52ee	; 0x52ee <__adddi3>
     56a:	a2 2e       	mov	r10, r18
     56c:	b3 2e       	mov	r11, r19
     56e:	c4 2e       	mov	r12, r20
     570:	d5 2e       	mov	r13, r21
     572:	e6 2e       	mov	r14, r22
     574:	f7 2e       	mov	r15, r23
     576:	08 2f       	mov	r16, r24
     578:	19 2f       	mov	r17, r25
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	88 2f       	mov	r24, r24
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	2d 85       	ldd	r18, Y+13	; 0x0d
     582:	3e 85       	ldd	r19, Y+14	; 0x0e
     584:	82 0f       	add	r24, r18
     586:	93 1f       	adc	r25, r19
     588:	fc 01       	movw	r30, r24
     58a:	80 81       	ld	r24, Z
     58c:	88 2f       	mov	r24, r24
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	c0 97       	sbiw	r24, 0x30	; 48
     592:	98 8b       	std	Y+16, r25	; 0x10
     594:	8f 87       	std	Y+15, r24	; 0x0f
     596:	89 2f       	mov	r24, r25
     598:	88 0f       	add	r24, r24
     59a:	88 0b       	sbc	r24, r24
     59c:	89 8b       	std	Y+17, r24	; 0x11
     59e:	8a 8b       	std	Y+18, r24	; 0x12
     5a0:	8b 8b       	std	Y+19, r24	; 0x13
     5a2:	8c 8b       	std	Y+20, r24	; 0x14
     5a4:	8d 8b       	std	Y+21, r24	; 0x15
     5a6:	8e 8b       	std	Y+22, r24	; 0x16
     5a8:	2a 2d       	mov	r18, r10
     5aa:	3b 2d       	mov	r19, r11
     5ac:	4c 2d       	mov	r20, r12
     5ae:	5d 2d       	mov	r21, r13
     5b0:	6e 2d       	mov	r22, r14
     5b2:	7f 2d       	mov	r23, r15
     5b4:	80 2f       	mov	r24, r16
     5b6:	91 2f       	mov	r25, r17
     5b8:	af 84       	ldd	r10, Y+15	; 0x0f
     5ba:	b8 88       	ldd	r11, Y+16	; 0x10
     5bc:	c9 88       	ldd	r12, Y+17	; 0x11
     5be:	da 88       	ldd	r13, Y+18	; 0x12
     5c0:	eb 88       	ldd	r14, Y+19	; 0x13
     5c2:	fc 88       	ldd	r15, Y+20	; 0x14
     5c4:	0d 89       	ldd	r16, Y+21	; 0x15
     5c6:	1e 89       	ldd	r17, Y+22	; 0x16
     5c8:	0e 94 77 29 	call	0x52ee	; 0x52ee <__adddi3>
     5cc:	2b 83       	std	Y+3, r18	; 0x03
     5ce:	3c 83       	std	Y+4, r19	; 0x04
     5d0:	4d 83       	std	Y+5, r20	; 0x05
     5d2:	5e 83       	std	Y+6, r21	; 0x06
     5d4:	6f 83       	std	Y+7, r22	; 0x07
     5d6:	78 87       	std	Y+8, r23	; 0x08
     5d8:	89 87       	std	Y+9, r24	; 0x09
     5da:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     5dc:	8a 81       	ldd	r24, Y+2	; 0x02
     5de:	8f 5f       	subi	r24, 0xFF	; 255
     5e0:	8a 83       	std	Y+2, r24	; 0x02
     5e2:	8a 81       	ldd	r24, Y+2	; 0x02
     5e4:	88 2f       	mov	r24, r24
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	2d 85       	ldd	r18, Y+13	; 0x0d
     5ea:	3e 85       	ldd	r19, Y+14	; 0x0e
     5ec:	82 0f       	add	r24, r18
     5ee:	93 1f       	adc	r25, r19
     5f0:	fc 01       	movw	r30, r24
     5f2:	80 81       	ld	r24, Z
     5f4:	88 23       	and	r24, r24
     5f6:	09 f0       	breq	.+2      	; 0x5fa <Convert_StringTou16+0x19a>
     5f8:	68 cf       	rjmp	.-304    	; 0x4ca <Convert_StringTou16+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     5fa:	2b 81       	ldd	r18, Y+3	; 0x03
     5fc:	3c 81       	ldd	r19, Y+4	; 0x04
     5fe:	8b 85       	ldd	r24, Y+11	; 0x0b
     600:	9c 85       	ldd	r25, Y+12	; 0x0c
     602:	fc 01       	movw	r30, r24
     604:	31 83       	std	Z+1, r19	; 0x01
     606:	20 83       	st	Z, r18
			}

			return Loc_enuStatus;
     608:	89 81       	ldd	r24, Y+1	; 0x01

}
     60a:	6e 96       	adiw	r28, 0x1e	; 30
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	1f 91       	pop	r17
     61c:	0f 91       	pop	r16
     61e:	ff 90       	pop	r15
     620:	ef 90       	pop	r14
     622:	df 90       	pop	r13
     624:	cf 90       	pop	r12
     626:	bf 90       	pop	r11
     628:	af 90       	pop	r10
     62a:	9f 90       	pop	r9
     62c:	8f 90       	pop	r8
     62e:	7f 90       	pop	r7
     630:	6f 90       	pop	r6
     632:	5f 90       	pop	r5
     634:	4f 90       	pop	r4
     636:	3f 90       	pop	r3
     638:	2f 90       	pop	r2
     63a:	08 95       	ret

0000063c <Convert_StringTou32>:


Std_StatusType Convert_StringTou32 (u32* Address_Number, pu8 Address_str){
     63c:	2f 92       	push	r2
     63e:	3f 92       	push	r3
     640:	4f 92       	push	r4
     642:	5f 92       	push	r5
     644:	6f 92       	push	r6
     646:	7f 92       	push	r7
     648:	8f 92       	push	r8
     64a:	9f 92       	push	r9
     64c:	af 92       	push	r10
     64e:	bf 92       	push	r11
     650:	cf 92       	push	r12
     652:	df 92       	push	r13
     654:	ef 92       	push	r14
     656:	ff 92       	push	r15
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	6e 97       	sbiw	r28, 0x1e	; 30
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	f8 94       	cli
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	cd bf       	out	0x3d, r28	; 61
     670:	9c 87       	std	Y+12, r25	; 0x0c
     672:	8b 87       	std	Y+11, r24	; 0x0b
     674:	7e 87       	std	Y+14, r23	; 0x0e
     676:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     678:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     67a:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     67c:	1b 82       	std	Y+3, r1	; 0x03
     67e:	1c 82       	std	Y+4, r1	; 0x04
     680:	1d 82       	std	Y+5, r1	; 0x05
     682:	1e 82       	std	Y+6, r1	; 0x06
     684:	1f 82       	std	Y+7, r1	; 0x07
     686:	18 86       	std	Y+8, r1	; 0x08
     688:	19 86       	std	Y+9, r1	; 0x09
     68a:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     68c:	8d 85       	ldd	r24, Y+13	; 0x0d
     68e:	9e 85       	ldd	r25, Y+14	; 0x0e
     690:	89 2b       	or	r24, r25
     692:	21 f0       	breq	.+8      	; 0x69c <Convert_StringTou32+0x60>
     694:	8b 85       	ldd	r24, Y+11	; 0x0b
     696:	9c 85       	ldd	r25, Y+12	; 0x0c
     698:	89 2b       	or	r24, r25
     69a:	19 f4       	brne	.+6      	; 0x6a2 <Convert_StringTou32+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	89 83       	std	Y+1, r24	; 0x01
     6a0:	a5 c0       	rjmp	.+330    	; 0x7ec <Convert_StringTou32+0x1b0>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     6a2:	1a 82       	std	Y+2, r1	; 0x02
     6a4:	8c c0       	rjmp	.+280    	; 0x7be <Convert_StringTou32+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     6a6:	2b 81       	ldd	r18, Y+3	; 0x03
     6a8:	3c 81       	ldd	r19, Y+4	; 0x04
     6aa:	4d 81       	ldd	r20, Y+5	; 0x05
     6ac:	5e 81       	ldd	r21, Y+6	; 0x06
     6ae:	6f 81       	ldd	r22, Y+7	; 0x07
     6b0:	78 85       	ldd	r23, Y+8	; 0x08
     6b2:	89 85       	ldd	r24, Y+9	; 0x09
     6b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     6b6:	22 2e       	mov	r2, r18
     6b8:	33 2e       	mov	r3, r19
     6ba:	44 2e       	mov	r4, r20
     6bc:	55 2e       	mov	r5, r21
     6be:	66 2e       	mov	r6, r22
     6c0:	77 2e       	mov	r7, r23
     6c2:	88 2e       	mov	r8, r24
     6c4:	99 2e       	mov	r9, r25
     6c6:	22 2d       	mov	r18, r2
     6c8:	33 2d       	mov	r19, r3
     6ca:	44 2d       	mov	r20, r4
     6cc:	55 2d       	mov	r21, r5
     6ce:	66 2d       	mov	r22, r6
     6d0:	77 2d       	mov	r23, r7
     6d2:	88 2d       	mov	r24, r8
     6d4:	99 2d       	mov	r25, r9
     6d6:	01 e0       	ldi	r16, 0x01	; 1
     6d8:	0e 94 5e 29 	call	0x52bc	; 0x52bc <__ashldi3>
     6dc:	a2 2e       	mov	r10, r18
     6de:	b3 2e       	mov	r11, r19
     6e0:	c4 2e       	mov	r12, r20
     6e2:	d5 2e       	mov	r13, r21
     6e4:	e6 2e       	mov	r14, r22
     6e6:	f7 2e       	mov	r15, r23
     6e8:	08 2f       	mov	r16, r24
     6ea:	19 2f       	mov	r17, r25
     6ec:	2a 2c       	mov	r2, r10
     6ee:	3b 2c       	mov	r3, r11
     6f0:	4c 2c       	mov	r4, r12
     6f2:	5d 2c       	mov	r5, r13
     6f4:	6e 2c       	mov	r6, r14
     6f6:	7f 2c       	mov	r7, r15
     6f8:	80 2e       	mov	r8, r16
     6fa:	91 2e       	mov	r9, r17
     6fc:	22 2d       	mov	r18, r2
     6fe:	33 2d       	mov	r19, r3
     700:	44 2d       	mov	r20, r4
     702:	55 2d       	mov	r21, r5
     704:	66 2d       	mov	r22, r6
     706:	77 2d       	mov	r23, r7
     708:	88 2d       	mov	r24, r8
     70a:	99 2d       	mov	r25, r9
     70c:	02 e0       	ldi	r16, 0x02	; 2
     70e:	0e 94 5e 29 	call	0x52bc	; 0x52bc <__ashldi3>
     712:	2f 8b       	std	Y+23, r18	; 0x17
     714:	38 8f       	std	Y+24, r19	; 0x18
     716:	49 8f       	std	Y+25, r20	; 0x19
     718:	5a 8f       	std	Y+26, r21	; 0x1a
     71a:	6b 8f       	std	Y+27, r22	; 0x1b
     71c:	7c 8f       	std	Y+28, r23	; 0x1c
     71e:	8d 8f       	std	Y+29, r24	; 0x1d
     720:	9e 8f       	std	Y+30, r25	; 0x1e
     722:	22 2d       	mov	r18, r2
     724:	33 2d       	mov	r19, r3
     726:	44 2d       	mov	r20, r4
     728:	55 2d       	mov	r21, r5
     72a:	66 2d       	mov	r22, r6
     72c:	77 2d       	mov	r23, r7
     72e:	88 2d       	mov	r24, r8
     730:	99 2d       	mov	r25, r9
     732:	af 88       	ldd	r10, Y+23	; 0x17
     734:	b8 8c       	ldd	r11, Y+24	; 0x18
     736:	c9 8c       	ldd	r12, Y+25	; 0x19
     738:	da 8c       	ldd	r13, Y+26	; 0x1a
     73a:	eb 8c       	ldd	r14, Y+27	; 0x1b
     73c:	fc 8c       	ldd	r15, Y+28	; 0x1c
     73e:	0d 8d       	ldd	r16, Y+29	; 0x1d
     740:	1e 8d       	ldd	r17, Y+30	; 0x1e
     742:	0e 94 77 29 	call	0x52ee	; 0x52ee <__adddi3>
     746:	a2 2e       	mov	r10, r18
     748:	b3 2e       	mov	r11, r19
     74a:	c4 2e       	mov	r12, r20
     74c:	d5 2e       	mov	r13, r21
     74e:	e6 2e       	mov	r14, r22
     750:	f7 2e       	mov	r15, r23
     752:	08 2f       	mov	r16, r24
     754:	19 2f       	mov	r17, r25
     756:	8a 81       	ldd	r24, Y+2	; 0x02
     758:	88 2f       	mov	r24, r24
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	2d 85       	ldd	r18, Y+13	; 0x0d
     75e:	3e 85       	ldd	r19, Y+14	; 0x0e
     760:	82 0f       	add	r24, r18
     762:	93 1f       	adc	r25, r19
     764:	fc 01       	movw	r30, r24
     766:	80 81       	ld	r24, Z
     768:	88 2f       	mov	r24, r24
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	c0 97       	sbiw	r24, 0x30	; 48
     76e:	98 8b       	std	Y+16, r25	; 0x10
     770:	8f 87       	std	Y+15, r24	; 0x0f
     772:	89 2f       	mov	r24, r25
     774:	88 0f       	add	r24, r24
     776:	88 0b       	sbc	r24, r24
     778:	89 8b       	std	Y+17, r24	; 0x11
     77a:	8a 8b       	std	Y+18, r24	; 0x12
     77c:	8b 8b       	std	Y+19, r24	; 0x13
     77e:	8c 8b       	std	Y+20, r24	; 0x14
     780:	8d 8b       	std	Y+21, r24	; 0x15
     782:	8e 8b       	std	Y+22, r24	; 0x16
     784:	2a 2d       	mov	r18, r10
     786:	3b 2d       	mov	r19, r11
     788:	4c 2d       	mov	r20, r12
     78a:	5d 2d       	mov	r21, r13
     78c:	6e 2d       	mov	r22, r14
     78e:	7f 2d       	mov	r23, r15
     790:	80 2f       	mov	r24, r16
     792:	91 2f       	mov	r25, r17
     794:	af 84       	ldd	r10, Y+15	; 0x0f
     796:	b8 88       	ldd	r11, Y+16	; 0x10
     798:	c9 88       	ldd	r12, Y+17	; 0x11
     79a:	da 88       	ldd	r13, Y+18	; 0x12
     79c:	eb 88       	ldd	r14, Y+19	; 0x13
     79e:	fc 88       	ldd	r15, Y+20	; 0x14
     7a0:	0d 89       	ldd	r16, Y+21	; 0x15
     7a2:	1e 89       	ldd	r17, Y+22	; 0x16
     7a4:	0e 94 77 29 	call	0x52ee	; 0x52ee <__adddi3>
     7a8:	2b 83       	std	Y+3, r18	; 0x03
     7aa:	3c 83       	std	Y+4, r19	; 0x04
     7ac:	4d 83       	std	Y+5, r20	; 0x05
     7ae:	5e 83       	std	Y+6, r21	; 0x06
     7b0:	6f 83       	std	Y+7, r22	; 0x07
     7b2:	78 87       	std	Y+8, r23	; 0x08
     7b4:	89 87       	std	Y+9, r24	; 0x09
     7b6:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     7b8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ba:	8f 5f       	subi	r24, 0xFF	; 255
     7bc:	8a 83       	std	Y+2, r24	; 0x02
     7be:	8a 81       	ldd	r24, Y+2	; 0x02
     7c0:	88 2f       	mov	r24, r24
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	2d 85       	ldd	r18, Y+13	; 0x0d
     7c6:	3e 85       	ldd	r19, Y+14	; 0x0e
     7c8:	82 0f       	add	r24, r18
     7ca:	93 1f       	adc	r25, r19
     7cc:	fc 01       	movw	r30, r24
     7ce:	80 81       	ld	r24, Z
     7d0:	88 23       	and	r24, r24
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <Convert_StringTou32+0x19a>
     7d4:	68 cf       	rjmp	.-304    	; 0x6a6 <Convert_StringTou32+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     7d6:	8b 81       	ldd	r24, Y+3	; 0x03
     7d8:	9c 81       	ldd	r25, Y+4	; 0x04
     7da:	ad 81       	ldd	r26, Y+5	; 0x05
     7dc:	be 81       	ldd	r27, Y+6	; 0x06
     7de:	2b 85       	ldd	r18, Y+11	; 0x0b
     7e0:	3c 85       	ldd	r19, Y+12	; 0x0c
     7e2:	f9 01       	movw	r30, r18
     7e4:	80 83       	st	Z, r24
     7e6:	91 83       	std	Z+1, r25	; 0x01
     7e8:	a2 83       	std	Z+2, r26	; 0x02
     7ea:	b3 83       	std	Z+3, r27	; 0x03
			}

			return Loc_enuStatus;
     7ec:	89 81       	ldd	r24, Y+1	; 0x01

}
     7ee:	6e 96       	adiw	r28, 0x1e	; 30
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	ff 90       	pop	r15
     804:	ef 90       	pop	r14
     806:	df 90       	pop	r13
     808:	cf 90       	pop	r12
     80a:	bf 90       	pop	r11
     80c:	af 90       	pop	r10
     80e:	9f 90       	pop	r9
     810:	8f 90       	pop	r8
     812:	7f 90       	pop	r7
     814:	6f 90       	pop	r6
     816:	5f 90       	pop	r5
     818:	4f 90       	pop	r4
     81a:	3f 90       	pop	r3
     81c:	2f 90       	pop	r2
     81e:	08 95       	ret

00000820 <Convert_StringTou64>:


Std_StatusType Convert_StringTou64 (u64* Address_Number, pu8 Address_str){
     820:	2f 92       	push	r2
     822:	3f 92       	push	r3
     824:	4f 92       	push	r4
     826:	5f 92       	push	r5
     828:	6f 92       	push	r6
     82a:	7f 92       	push	r7
     82c:	8f 92       	push	r8
     82e:	9f 92       	push	r9
     830:	af 92       	push	r10
     832:	bf 92       	push	r11
     834:	cf 92       	push	r12
     836:	df 92       	push	r13
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
     848:	6e 97       	sbiw	r28, 0x1e	; 30
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	9c 87       	std	Y+12, r25	; 0x0c
     856:	8b 87       	std	Y+11, r24	; 0x0b
     858:	7e 87       	std	Y+14, r23	; 0x0e
     85a:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     85c:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     85e:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     860:	1b 82       	std	Y+3, r1	; 0x03
     862:	1c 82       	std	Y+4, r1	; 0x04
     864:	1d 82       	std	Y+5, r1	; 0x05
     866:	1e 82       	std	Y+6, r1	; 0x06
     868:	1f 82       	std	Y+7, r1	; 0x07
     86a:	18 86       	std	Y+8, r1	; 0x08
     86c:	19 86       	std	Y+9, r1	; 0x09
     86e:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     870:	8d 85       	ldd	r24, Y+13	; 0x0d
     872:	9e 85       	ldd	r25, Y+14	; 0x0e
     874:	89 2b       	or	r24, r25
     876:	21 f0       	breq	.+8      	; 0x880 <__stack+0x21>
     878:	8b 85       	ldd	r24, Y+11	; 0x0b
     87a:	9c 85       	ldd	r25, Y+12	; 0x0c
     87c:	89 2b       	or	r24, r25
     87e:	19 f4       	brne	.+6      	; 0x886 <__stack+0x27>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	89 83       	std	Y+1, r24	; 0x01
     884:	b4 c0       	rjmp	.+360    	; 0x9ee <__stack+0x18f>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     886:	1a 82       	std	Y+2, r1	; 0x02
     888:	8c c0       	rjmp	.+280    	; 0x9a2 <__stack+0x143>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     88a:	2b 81       	ldd	r18, Y+3	; 0x03
     88c:	3c 81       	ldd	r19, Y+4	; 0x04
     88e:	4d 81       	ldd	r20, Y+5	; 0x05
     890:	5e 81       	ldd	r21, Y+6	; 0x06
     892:	6f 81       	ldd	r22, Y+7	; 0x07
     894:	78 85       	ldd	r23, Y+8	; 0x08
     896:	89 85       	ldd	r24, Y+9	; 0x09
     898:	9a 85       	ldd	r25, Y+10	; 0x0a
     89a:	22 2e       	mov	r2, r18
     89c:	33 2e       	mov	r3, r19
     89e:	44 2e       	mov	r4, r20
     8a0:	55 2e       	mov	r5, r21
     8a2:	66 2e       	mov	r6, r22
     8a4:	77 2e       	mov	r7, r23
     8a6:	88 2e       	mov	r8, r24
     8a8:	99 2e       	mov	r9, r25
     8aa:	22 2d       	mov	r18, r2
     8ac:	33 2d       	mov	r19, r3
     8ae:	44 2d       	mov	r20, r4
     8b0:	55 2d       	mov	r21, r5
     8b2:	66 2d       	mov	r22, r6
     8b4:	77 2d       	mov	r23, r7
     8b6:	88 2d       	mov	r24, r8
     8b8:	99 2d       	mov	r25, r9
     8ba:	01 e0       	ldi	r16, 0x01	; 1
     8bc:	0e 94 5e 29 	call	0x52bc	; 0x52bc <__ashldi3>
     8c0:	a2 2e       	mov	r10, r18
     8c2:	b3 2e       	mov	r11, r19
     8c4:	c4 2e       	mov	r12, r20
     8c6:	d5 2e       	mov	r13, r21
     8c8:	e6 2e       	mov	r14, r22
     8ca:	f7 2e       	mov	r15, r23
     8cc:	08 2f       	mov	r16, r24
     8ce:	19 2f       	mov	r17, r25
     8d0:	2a 2c       	mov	r2, r10
     8d2:	3b 2c       	mov	r3, r11
     8d4:	4c 2c       	mov	r4, r12
     8d6:	5d 2c       	mov	r5, r13
     8d8:	6e 2c       	mov	r6, r14
     8da:	7f 2c       	mov	r7, r15
     8dc:	80 2e       	mov	r8, r16
     8de:	91 2e       	mov	r9, r17
     8e0:	22 2d       	mov	r18, r2
     8e2:	33 2d       	mov	r19, r3
     8e4:	44 2d       	mov	r20, r4
     8e6:	55 2d       	mov	r21, r5
     8e8:	66 2d       	mov	r22, r6
     8ea:	77 2d       	mov	r23, r7
     8ec:	88 2d       	mov	r24, r8
     8ee:	99 2d       	mov	r25, r9
     8f0:	02 e0       	ldi	r16, 0x02	; 2
     8f2:	0e 94 5e 29 	call	0x52bc	; 0x52bc <__ashldi3>
     8f6:	2f 8b       	std	Y+23, r18	; 0x17
     8f8:	38 8f       	std	Y+24, r19	; 0x18
     8fa:	49 8f       	std	Y+25, r20	; 0x19
     8fc:	5a 8f       	std	Y+26, r21	; 0x1a
     8fe:	6b 8f       	std	Y+27, r22	; 0x1b
     900:	7c 8f       	std	Y+28, r23	; 0x1c
     902:	8d 8f       	std	Y+29, r24	; 0x1d
     904:	9e 8f       	std	Y+30, r25	; 0x1e
     906:	22 2d       	mov	r18, r2
     908:	33 2d       	mov	r19, r3
     90a:	44 2d       	mov	r20, r4
     90c:	55 2d       	mov	r21, r5
     90e:	66 2d       	mov	r22, r6
     910:	77 2d       	mov	r23, r7
     912:	88 2d       	mov	r24, r8
     914:	99 2d       	mov	r25, r9
     916:	af 88       	ldd	r10, Y+23	; 0x17
     918:	b8 8c       	ldd	r11, Y+24	; 0x18
     91a:	c9 8c       	ldd	r12, Y+25	; 0x19
     91c:	da 8c       	ldd	r13, Y+26	; 0x1a
     91e:	eb 8c       	ldd	r14, Y+27	; 0x1b
     920:	fc 8c       	ldd	r15, Y+28	; 0x1c
     922:	0d 8d       	ldd	r16, Y+29	; 0x1d
     924:	1e 8d       	ldd	r17, Y+30	; 0x1e
     926:	0e 94 77 29 	call	0x52ee	; 0x52ee <__adddi3>
     92a:	a2 2e       	mov	r10, r18
     92c:	b3 2e       	mov	r11, r19
     92e:	c4 2e       	mov	r12, r20
     930:	d5 2e       	mov	r13, r21
     932:	e6 2e       	mov	r14, r22
     934:	f7 2e       	mov	r15, r23
     936:	08 2f       	mov	r16, r24
     938:	19 2f       	mov	r17, r25
     93a:	8a 81       	ldd	r24, Y+2	; 0x02
     93c:	88 2f       	mov	r24, r24
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	2d 85       	ldd	r18, Y+13	; 0x0d
     942:	3e 85       	ldd	r19, Y+14	; 0x0e
     944:	82 0f       	add	r24, r18
     946:	93 1f       	adc	r25, r19
     948:	fc 01       	movw	r30, r24
     94a:	80 81       	ld	r24, Z
     94c:	88 2f       	mov	r24, r24
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	c0 97       	sbiw	r24, 0x30	; 48
     952:	98 8b       	std	Y+16, r25	; 0x10
     954:	8f 87       	std	Y+15, r24	; 0x0f
     956:	89 2f       	mov	r24, r25
     958:	88 0f       	add	r24, r24
     95a:	88 0b       	sbc	r24, r24
     95c:	89 8b       	std	Y+17, r24	; 0x11
     95e:	8a 8b       	std	Y+18, r24	; 0x12
     960:	8b 8b       	std	Y+19, r24	; 0x13
     962:	8c 8b       	std	Y+20, r24	; 0x14
     964:	8d 8b       	std	Y+21, r24	; 0x15
     966:	8e 8b       	std	Y+22, r24	; 0x16
     968:	2a 2d       	mov	r18, r10
     96a:	3b 2d       	mov	r19, r11
     96c:	4c 2d       	mov	r20, r12
     96e:	5d 2d       	mov	r21, r13
     970:	6e 2d       	mov	r22, r14
     972:	7f 2d       	mov	r23, r15
     974:	80 2f       	mov	r24, r16
     976:	91 2f       	mov	r25, r17
     978:	af 84       	ldd	r10, Y+15	; 0x0f
     97a:	b8 88       	ldd	r11, Y+16	; 0x10
     97c:	c9 88       	ldd	r12, Y+17	; 0x11
     97e:	da 88       	ldd	r13, Y+18	; 0x12
     980:	eb 88       	ldd	r14, Y+19	; 0x13
     982:	fc 88       	ldd	r15, Y+20	; 0x14
     984:	0d 89       	ldd	r16, Y+21	; 0x15
     986:	1e 89       	ldd	r17, Y+22	; 0x16
     988:	0e 94 77 29 	call	0x52ee	; 0x52ee <__adddi3>
     98c:	2b 83       	std	Y+3, r18	; 0x03
     98e:	3c 83       	std	Y+4, r19	; 0x04
     990:	4d 83       	std	Y+5, r20	; 0x05
     992:	5e 83       	std	Y+6, r21	; 0x06
     994:	6f 83       	std	Y+7, r22	; 0x07
     996:	78 87       	std	Y+8, r23	; 0x08
     998:	89 87       	std	Y+9, r24	; 0x09
     99a:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     99c:	8a 81       	ldd	r24, Y+2	; 0x02
     99e:	8f 5f       	subi	r24, 0xFF	; 255
     9a0:	8a 83       	std	Y+2, r24	; 0x02
     9a2:	8a 81       	ldd	r24, Y+2	; 0x02
     9a4:	88 2f       	mov	r24, r24
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	2d 85       	ldd	r18, Y+13	; 0x0d
     9aa:	3e 85       	ldd	r19, Y+14	; 0x0e
     9ac:	82 0f       	add	r24, r18
     9ae:	93 1f       	adc	r25, r19
     9b0:	fc 01       	movw	r30, r24
     9b2:	80 81       	ld	r24, Z
     9b4:	88 23       	and	r24, r24
     9b6:	09 f0       	breq	.+2      	; 0x9ba <__stack+0x15b>
     9b8:	68 cf       	rjmp	.-304    	; 0x88a <__stack+0x2b>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     9ba:	8b 85       	ldd	r24, Y+11	; 0x0b
     9bc:	9c 85       	ldd	r25, Y+12	; 0x0c
     9be:	2b 81       	ldd	r18, Y+3	; 0x03
     9c0:	fc 01       	movw	r30, r24
     9c2:	20 83       	st	Z, r18
     9c4:	2c 81       	ldd	r18, Y+4	; 0x04
     9c6:	fc 01       	movw	r30, r24
     9c8:	21 83       	std	Z+1, r18	; 0x01
     9ca:	2d 81       	ldd	r18, Y+5	; 0x05
     9cc:	fc 01       	movw	r30, r24
     9ce:	22 83       	std	Z+2, r18	; 0x02
     9d0:	2e 81       	ldd	r18, Y+6	; 0x06
     9d2:	fc 01       	movw	r30, r24
     9d4:	23 83       	std	Z+3, r18	; 0x03
     9d6:	2f 81       	ldd	r18, Y+7	; 0x07
     9d8:	fc 01       	movw	r30, r24
     9da:	24 83       	std	Z+4, r18	; 0x04
     9dc:	28 85       	ldd	r18, Y+8	; 0x08
     9de:	fc 01       	movw	r30, r24
     9e0:	25 83       	std	Z+5, r18	; 0x05
     9e2:	29 85       	ldd	r18, Y+9	; 0x09
     9e4:	fc 01       	movw	r30, r24
     9e6:	26 83       	std	Z+6, r18	; 0x06
     9e8:	2a 85       	ldd	r18, Y+10	; 0x0a
     9ea:	fc 01       	movw	r30, r24
     9ec:	27 83       	std	Z+7, r18	; 0x07
			}

			return Loc_enuStatus;
     9ee:	89 81       	ldd	r24, Y+1	; 0x01

}
     9f0:	6e 96       	adiw	r28, 0x1e	; 30
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	f8 94       	cli
     9f6:	de bf       	out	0x3e, r29	; 62
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	cd bf       	out	0x3d, r28	; 61
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	bf 90       	pop	r11
     a0e:	af 90       	pop	r10
     a10:	9f 90       	pop	r9
     a12:	8f 90       	pop	r8
     a14:	7f 90       	pop	r7
     a16:	6f 90       	pop	r6
     a18:	5f 90       	pop	r5
     a1a:	4f 90       	pop	r4
     a1c:	3f 90       	pop	r3
     a1e:	2f 90       	pop	r2
     a20:	08 95       	ret

00000a22 <Wtd_enuSleep>:



/********************************** Software Interfaces Declarations *******************/

Wtd_StatusErrorType Wtd_enuSleep (Wtd_SelectSleepTime Copy_enuSleepTime){
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	00 d0       	rcall	.+0      	; 0xa28 <Wtd_enuSleep+0x6>
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	8a 83       	std	Y+2, r24	; 0x02
	Wtd_StatusErrorType Loc_enuWtdStatus = WTD_STATUS_OK;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	89 83       	std	Y+1, r24	; 0x01

	Wtd_Enable(Copy_enuSleepTime);
     a32:	81 e4       	ldi	r24, 0x41	; 65
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	21 e4       	ldi	r18, 0x41	; 65
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	f9 01       	movw	r30, r18
     a3c:	20 81       	ld	r18, Z
     a3e:	32 2f       	mov	r19, r18
     a40:	30 7e       	andi	r19, 0xE0	; 224
     a42:	2a 81       	ldd	r18, Y+2	; 0x02
     a44:	23 2b       	or	r18, r19
     a46:	28 60       	ori	r18, 0x08	; 8
     a48:	fc 01       	movw	r30, r24
     a4a:	20 83       	st	Z, r18

			return Loc_enuWtdStatus;
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
}
     a4e:	0f 90       	pop	r0
     a50:	0f 90       	pop	r0
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	08 95       	ret

00000a58 <Wtd_enuDisable>:

Wtd_StatusErrorType Wtd_enuDisable (void){
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	1f 92       	push	r1
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62

	Wtd_StatusErrorType Loc_enuWtdStatus = WTD_STATUS_OK;
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	89 83       	std	Y+1, r24	; 0x01
	Wtd_Disable();
     a66:	81 e4       	ldi	r24, 0x41	; 65
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	21 e4       	ldi	r18, 0x41	; 65
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	f9 01       	movw	r30, r18
     a70:	20 81       	ld	r18, Z
     a72:	20 7e       	andi	r18, 0xE0	; 224
     a74:	28 61       	ori	r18, 0x18	; 24
     a76:	fc 01       	movw	r30, r24
     a78:	20 83       	st	Z, r18
     a7a:	81 e4       	ldi	r24, 0x41	; 65
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	fc 01       	movw	r30, r24
     a80:	10 82       	st	Z, r1



	return Loc_enuWtdStatus;
     a82:	89 81       	ldd	r24, Y+1	; 0x01
}
     a84:	0f 90       	pop	r0
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	08 95       	ret

00000a8c <Usart_enuInit>:




/********************************** Software Interfaces Declarations *******************/
Usart_StatusErrorType Usart_enuInit(const Usart_ConfigType* Address_Usart){
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	27 97       	sbiw	r28, 0x07	; 7
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	f8 94       	cli
     a9a:	de bf       	out	0x3e, r29	; 62
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	cd bf       	out	0x3d, r28	; 61
     aa0:	9f 83       	std	Y+7, r25	; 0x07
     aa2:	8e 83       	std	Y+6, r24	; 0x06

	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	89 83       	std	Y+1, r24	; 0x01
	u16 Loc_u16BuadRateEquation ;
	u16 Loc_u16TempUsrc = 0b10000000;
     aa8:	80 e8       	ldi	r24, 0x80	; 128
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	9b 83       	std	Y+3, r25	; 0x03
     aae:	8a 83       	std	Y+2, r24	; 0x02

	if(Address_Usart == NULL){
     ab0:	8e 81       	ldd	r24, Y+6	; 0x06
     ab2:	9f 81       	ldd	r25, Y+7	; 0x07
     ab4:	89 2b       	or	r24, r25
     ab6:	19 f4       	brne	.+6      	; 0xabe <Usart_enuInit+0x32>
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
     ab8:	82 e0       	ldi	r24, 0x02	; 2
     aba:	89 83       	std	Y+1, r24	; 0x01
     abc:	bc c0       	rjmp	.+376    	; 0xc36 <Usart_enuInit+0x1aa>
	}
	else{

		/* Enable Tx, RX */
		SET_BIT(UCSRB ,UCSRB_RX_EN_BIT );
     abe:	8a e2       	ldi	r24, 0x2A	; 42
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	2a e2       	ldi	r18, 0x2A	; 42
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	f9 01       	movw	r30, r18
     ac8:	20 81       	ld	r18, Z
     aca:	20 61       	ori	r18, 0x10	; 16
     acc:	fc 01       	movw	r30, r24
     ace:	20 83       	st	Z, r18
		SET_BIT(UCSRB ,UCSRB_TX_EN_BIT );
     ad0:	8a e2       	ldi	r24, 0x2A	; 42
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	2a e2       	ldi	r18, 0x2A	; 42
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	f9 01       	movw	r30, r18
     ada:	20 81       	ld	r18, Z
     adc:	28 60       	ori	r18, 0x08	; 8
     ade:	fc 01       	movw	r30, r24
     ae0:	20 83       	st	Z, r18


		/* Select Data Size */
		Usart_SelectCharacterSize(Address_Usart->character_size);
     ae2:	80 e4       	ldi	r24, 0x40	; 64
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	20 e4       	ldi	r18, 0x40	; 64
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	f9 01       	movw	r30, r18
     aec:	20 81       	ld	r18, Z
     aee:	20 68       	ori	r18, 0x80	; 128
     af0:	fc 01       	movw	r30, r24
     af2:	20 83       	st	Z, r18
     af4:	80 e4       	ldi	r24, 0x40	; 64
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	20 e4       	ldi	r18, 0x40	; 64
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	f9 01       	movw	r30, r18
     afe:	20 81       	ld	r18, Z
     b00:	42 2f       	mov	r20, r18
     b02:	49 7f       	andi	r20, 0xF9	; 249
     b04:	2e 81       	ldd	r18, Y+6	; 0x06
     b06:	3f 81       	ldd	r19, Y+7	; 0x07
     b08:	f9 01       	movw	r30, r18
     b0a:	20 81       	ld	r18, Z
     b0c:	22 2f       	mov	r18, r18
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	22 0f       	add	r18, r18
     b12:	33 1f       	adc	r19, r19
     b14:	26 70       	andi	r18, 0x06	; 6
     b16:	24 2b       	or	r18, r20
     b18:	fc 01       	movw	r30, r24
     b1a:	20 83       	st	Z, r18
     b1c:	8a e2       	ldi	r24, 0x2A	; 42
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	2a e2       	ldi	r18, 0x2A	; 42
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	f9 01       	movw	r30, r18
     b26:	20 81       	ld	r18, Z
     b28:	42 2f       	mov	r20, r18
     b2a:	4b 7f       	andi	r20, 0xFB	; 251
     b2c:	2e 81       	ldd	r18, Y+6	; 0x06
     b2e:	3f 81       	ldd	r19, Y+7	; 0x07
     b30:	f9 01       	movw	r30, r18
     b32:	20 81       	ld	r18, Z
     b34:	24 70       	andi	r18, 0x04	; 4
     b36:	24 2b       	or	r18, r20
     b38:	fc 01       	movw	r30, r24
     b3a:	20 83       	st	Z, r18

		/* Select Parity Bit */
		Usart_SelectParityBitConfg(Address_Usart->parity_bits);
     b3c:	80 e4       	ldi	r24, 0x40	; 64
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	20 e4       	ldi	r18, 0x40	; 64
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	f9 01       	movw	r30, r18
     b46:	20 81       	ld	r18, Z
     b48:	42 2f       	mov	r20, r18
     b4a:	4f 7c       	andi	r20, 0xCF	; 207
     b4c:	2e 81       	ldd	r18, Y+6	; 0x06
     b4e:	3f 81       	ldd	r19, Y+7	; 0x07
     b50:	f9 01       	movw	r30, r18
     b52:	23 81       	ldd	r18, Z+3	; 0x03
     b54:	22 2f       	mov	r18, r18
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	22 95       	swap	r18
     b5a:	32 95       	swap	r19
     b5c:	30 7f       	andi	r19, 0xF0	; 240
     b5e:	32 27       	eor	r19, r18
     b60:	20 7f       	andi	r18, 0xF0	; 240
     b62:	32 27       	eor	r19, r18
     b64:	24 2b       	or	r18, r20
     b66:	fc 01       	movw	r30, r24
     b68:	20 83       	st	Z, r18

		/* Select STOP Bit */
		Usart_SelectStopBitConfig(Address_Usart->stop_bits);
     b6a:	80 e4       	ldi	r24, 0x40	; 64
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	20 e4       	ldi	r18, 0x40	; 64
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	f9 01       	movw	r30, r18
     b74:	20 81       	ld	r18, Z
     b76:	42 2f       	mov	r20, r18
     b78:	47 7f       	andi	r20, 0xF7	; 247
     b7a:	2e 81       	ldd	r18, Y+6	; 0x06
     b7c:	3f 81       	ldd	r19, Y+7	; 0x07
     b7e:	f9 01       	movw	r30, r18
     b80:	22 81       	ldd	r18, Z+2	; 0x02
     b82:	22 2f       	mov	r18, r18
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	22 0f       	add	r18, r18
     b88:	33 1f       	adc	r19, r19
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	22 0f       	add	r18, r18
     b90:	33 1f       	adc	r19, r19
     b92:	24 2b       	or	r18, r20
     b94:	fc 01       	movw	r30, r24
     b96:	20 83       	st	Z, r18

		/* Select Sync Mode */
		Usart_SelectStopBitConfig(Address_Usart->stop_bits);
     b98:	80 e4       	ldi	r24, 0x40	; 64
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	20 e4       	ldi	r18, 0x40	; 64
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	f9 01       	movw	r30, r18
     ba2:	20 81       	ld	r18, Z
     ba4:	42 2f       	mov	r20, r18
     ba6:	47 7f       	andi	r20, 0xF7	; 247
     ba8:	2e 81       	ldd	r18, Y+6	; 0x06
     baa:	3f 81       	ldd	r19, Y+7	; 0x07
     bac:	f9 01       	movw	r30, r18
     bae:	22 81       	ldd	r18, Z+2	; 0x02
     bb0:	22 2f       	mov	r18, r18
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	22 0f       	add	r18, r18
     bb6:	33 1f       	adc	r19, r19
     bb8:	22 0f       	add	r18, r18
     bba:	33 1f       	adc	r19, r19
     bbc:	22 0f       	add	r18, r18
     bbe:	33 1f       	adc	r19, r19
     bc0:	24 2b       	or	r18, r20
     bc2:	fc 01       	movw	r30, r24
     bc4:	20 83       	st	Z, r18


//		Usart_SelectUbbrhReg();
		switch(Address_Usart->sync_mode){
     bc6:	8e 81       	ldd	r24, Y+6	; 0x06
     bc8:	9f 81       	ldd	r25, Y+7	; 0x07
     bca:	fc 01       	movw	r30, r24
     bcc:	81 81       	ldd	r24, Z+1	; 0x01
     bce:	88 2f       	mov	r24, r24
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	89 2b       	or	r24, r25
     bd4:	79 f5       	brne	.+94     	; 0xc34 <Usart_enuInit+0x1a8>

			case USAR_SELECT_ASYNCHRONOUS_MODE:
				Loc_u16BuadRateEquation = (USART_F_CPU/16.0/Address_Usart->baude_rate)-1;
     bd6:	8e 81       	ldd	r24, Y+6	; 0x06
     bd8:	9f 81       	ldd	r25, Y+7	; 0x07
     bda:	fc 01       	movw	r30, r24
     bdc:	84 81       	ldd	r24, Z+4	; 0x04
     bde:	95 81       	ldd	r25, Z+5	; 0x05
     be0:	a6 81       	ldd	r26, Z+6	; 0x06
     be2:	b7 81       	ldd	r27, Z+7	; 0x07
     be4:	bc 01       	movw	r22, r24
     be6:	cd 01       	movw	r24, r26
     be8:	0e 94 9a 2a 	call	0x5534	; 0x5534 <__floatunsisf>
     bec:	dc 01       	movw	r26, r24
     bee:	cb 01       	movw	r24, r22
     bf0:	9c 01       	movw	r18, r24
     bf2:	ad 01       	movw	r20, r26
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	74 e2       	ldi	r23, 0x24	; 36
     bf8:	84 e7       	ldi	r24, 0x74	; 116
     bfa:	99 e4       	ldi	r25, 0x49	; 73
     bfc:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <__divsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e8       	ldi	r20, 0x80	; 128
     c0a:	5f e3       	ldi	r21, 0x3F	; 63
     c0c:	bc 01       	movw	r22, r24
     c0e:	cd 01       	movw	r24, r26
     c10:	0e 94 80 29 	call	0x5300	; 0x5300 <__subsf3>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	bc 01       	movw	r22, r24
     c1a:	cd 01       	movw	r24, r26
     c1c:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	9d 83       	std	Y+5, r25	; 0x05
     c26:	8c 83       	std	Y+4, r24	; 0x04
				ASSIGN_REG(UBRRL,(u8)Loc_u16BuadRateEquation);
     c28:	89 e2       	ldi	r24, 0x29	; 41
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	2c 81       	ldd	r18, Y+4	; 0x04
     c2e:	fc 01       	movw	r30, r24
     c30:	20 83       	st	Z, r18
//				ASSIGN_REG(UBRRH,((u8)Loc_u16BuadRateEquation)>>8);
				break;
     c32:	01 c0       	rjmp	.+2      	; 0xc36 <Usart_enuInit+0x1aa>

			case USAR_SELET_SYNCHRONOUS_MODE:

			break;
     c34:	00 00       	nop

		}

	}
		return Loc_enuUsartStatus;
     c36:	89 81       	ldd	r24, Y+1	; 0x01
}
     c38:	27 96       	adiw	r28, 0x07	; 7
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	08 95       	ret

00000c4a <Usart_enuTransmitCharBlocking>:



Usart_StatusErrorType Usart_enuTransmitCharBlocking(const Usart_ConfigType* Address_Usart, u16 Copy_u16Data){
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <Usart_enuTransmitCharBlocking+0x6>
     c50:	00 d0       	rcall	.+0      	; 0xc52 <Usart_enuTransmitCharBlocking+0x8>
     c52:	1f 92       	push	r1
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	9b 83       	std	Y+3, r25	; 0x03
     c5a:	8a 83       	std	Y+2, r24	; 0x02
     c5c:	7d 83       	std	Y+5, r23	; 0x05
     c5e:	6c 83       	std	Y+4, r22	; 0x04

	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	89 83       	std	Y+1, r24	; 0x01

	if(Address_Usart == NULL){
     c64:	8a 81       	ldd	r24, Y+2	; 0x02
     c66:	9b 81       	ldd	r25, Y+3	; 0x03
     c68:	89 2b       	or	r24, r25
     c6a:	19 f4       	brne	.+6      	; 0xc72 <Usart_enuTransmitCharBlocking+0x28>
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	89 83       	std	Y+1, r24	; 0x01
     c70:	13 c0       	rjmp	.+38     	; 0xc98 <Usart_enuTransmitCharBlocking+0x4e>
	}
	else{

		while(Usart_IsRegisterDataEmpty() == ZERO_VALUE);
     c72:	00 00       	nop
     c74:	8b e2       	ldi	r24, 0x2B	; 43
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	fc 01       	movw	r30, r24
     c7a:	80 81       	ld	r24, Z
     c7c:	82 95       	swap	r24
     c7e:	86 95       	lsr	r24
     c80:	87 70       	andi	r24, 0x07	; 7
     c82:	88 2f       	mov	r24, r24
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	81 70       	andi	r24, 0x01	; 1
     c88:	99 27       	eor	r25, r25
     c8a:	89 2b       	or	r24, r25
     c8c:	99 f3       	breq	.-26     	; 0xc74 <Usart_enuTransmitCharBlocking+0x2a>

			UDR = (u8)Copy_u16Data;
     c8e:	8c e2       	ldi	r24, 0x2C	; 44
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	2c 81       	ldd	r18, Y+4	; 0x04
     c94:	fc 01       	movw	r30, r24
     c96:	20 83       	st	Z, r18
	}
		return Loc_enuUsartStatus;
     c98:	89 81       	ldd	r24, Y+1	; 0x01
}
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	08 95       	ret

00000caa <Usart_enuReceiveBlocking>:

Usart_StatusErrorType Usart_enuReceiveBlocking(const Usart_ConfigType* Address_Usart, u16* Address_Data){
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	00 d0       	rcall	.+0      	; 0xcb0 <Usart_enuReceiveBlocking+0x6>
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <Usart_enuReceiveBlocking+0x8>
     cb2:	1f 92       	push	r1
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	9b 83       	std	Y+3, r25	; 0x03
     cba:	8a 83       	std	Y+2, r24	; 0x02
     cbc:	7d 83       	std	Y+5, r23	; 0x05
     cbe:	6c 83       	std	Y+4, r22	; 0x04

	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	89 83       	std	Y+1, r24	; 0x01

	if(Address_Usart == NULL || Address_Data == NULL){
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	9b 81       	ldd	r25, Y+3	; 0x03
     cc8:	89 2b       	or	r24, r25
     cca:	21 f0       	breq	.+8      	; 0xcd4 <Usart_enuReceiveBlocking+0x2a>
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	9d 81       	ldd	r25, Y+5	; 0x05
     cd0:	89 2b       	or	r24, r25
     cd2:	19 f4       	brne	.+6      	; 0xcda <Usart_enuReceiveBlocking+0x30>
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
     cd4:	82 e0       	ldi	r24, 0x02	; 2
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	19 c0       	rjmp	.+50     	; 0xd0c <Usart_enuReceiveBlocking+0x62>
	}
	else{

		while(Usart_IsRecevingDone() == ZERO_VALUE);
     cda:	00 00       	nop
     cdc:	8b e2       	ldi	r24, 0x2B	; 43
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	fc 01       	movw	r30, r24
     ce2:	80 81       	ld	r24, Z
     ce4:	88 1f       	adc	r24, r24
     ce6:	88 27       	eor	r24, r24
     ce8:	88 1f       	adc	r24, r24
     cea:	88 2f       	mov	r24, r24
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	81 70       	andi	r24, 0x01	; 1
     cf0:	99 27       	eor	r25, r25
     cf2:	89 2b       	or	r24, r25
     cf4:	99 f3       	breq	.-26     	; 0xcdc <Usart_enuReceiveBlocking+0x32>

		*Address_Data = UDR ;
     cf6:	8c e2       	ldi	r24, 0x2C	; 44
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	fc 01       	movw	r30, r24
     cfc:	80 81       	ld	r24, Z
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	8c 81       	ldd	r24, Y+4	; 0x04
     d04:	9d 81       	ldd	r25, Y+5	; 0x05
     d06:	fc 01       	movw	r30, r24
     d08:	31 83       	std	Z+1, r19	; 0x01
     d0a:	20 83       	st	Z, r18
	}
		return Loc_enuUsartStatus;
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	08 95       	ret

00000d1e <Usart_enuTransmitStringBlocking>:


Usart_StatusErrorType Usart_enuTransmitStringBlocking(const Usart_ConfigType* Address_Usart, u8* Address_Data){
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	00 d0       	rcall	.+0      	; 0xd24 <Usart_enuTransmitStringBlocking+0x6>
     d24:	00 d0       	rcall	.+0      	; 0xd26 <Usart_enuTransmitStringBlocking+0x8>
     d26:	00 d0       	rcall	.+0      	; 0xd28 <Usart_enuTransmitStringBlocking+0xa>
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	9c 83       	std	Y+4, r25	; 0x04
     d2e:	8b 83       	std	Y+3, r24	; 0x03
     d30:	7e 83       	std	Y+6, r23	; 0x06
     d32:	6d 83       	std	Y+5, r22	; 0x05

	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	89 83       	std	Y+1, r24	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
     d38:	1a 82       	std	Y+2, r1	; 0x02

	if(Address_Usart == NULL || Address_Data == NULL){
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	9c 81       	ldd	r25, Y+4	; 0x04
     d3e:	89 2b       	or	r24, r25
     d40:	21 f0       	breq	.+8      	; 0xd4a <Usart_enuTransmitStringBlocking+0x2c>
     d42:	8d 81       	ldd	r24, Y+5	; 0x05
     d44:	9e 81       	ldd	r25, Y+6	; 0x06
     d46:	89 2b       	or	r24, r25
     d48:	b9 f4       	brne	.+46     	; 0xd78 <Usart_enuTransmitStringBlocking+0x5a>
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
     d4a:	82 e0       	ldi	r24, 0x02	; 2
     d4c:	89 83       	std	Y+1, r24	; 0x01
     d4e:	1f c0       	rjmp	.+62     	; 0xd8e <Usart_enuTransmitStringBlocking+0x70>
	}
	else{
		while(Address_Data[Loc_u8Counter] ){
			Loc_enuUsartStatus = Usart_enuTransmitCharBlocking(Address_Usart,Address_Data[Loc_u8Counter++]);
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	98 0f       	add	r25, r24
     d56:	9a 83       	std	Y+2, r25	; 0x02
     d58:	88 2f       	mov	r24, r24
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	2d 81       	ldd	r18, Y+5	; 0x05
     d5e:	3e 81       	ldd	r19, Y+6	; 0x06
     d60:	82 0f       	add	r24, r18
     d62:	93 1f       	adc	r25, r19
     d64:	fc 01       	movw	r30, r24
     d66:	80 81       	ld	r24, Z
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	9c 81       	ldd	r25, Y+4	; 0x04
     d70:	b9 01       	movw	r22, r18
     d72:	0e 94 25 06 	call	0xc4a	; 0xc4a <Usart_enuTransmitCharBlocking>
     d76:	89 83       	std	Y+1, r24	; 0x01

	if(Address_Usart == NULL || Address_Data == NULL){
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
	}
	else{
		while(Address_Data[Loc_u8Counter] ){
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	88 2f       	mov	r24, r24
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	2d 81       	ldd	r18, Y+5	; 0x05
     d80:	3e 81       	ldd	r19, Y+6	; 0x06
     d82:	82 0f       	add	r24, r18
     d84:	93 1f       	adc	r25, r19
     d86:	fc 01       	movw	r30, r24
     d88:	80 81       	ld	r24, Z
     d8a:	88 23       	and	r24, r24
     d8c:	09 f7       	brne	.-62     	; 0xd50 <Usart_enuTransmitStringBlocking+0x32>
			Loc_enuUsartStatus = Usart_enuTransmitCharBlocking(Address_Usart,Address_Data[Loc_u8Counter++]);
		}
	}
		return Loc_enuUsartStatus;
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d90:	26 96       	adiw	r28, 0x06	; 6
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	f8 94       	cli
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	cd bf       	out	0x3d, r28	; 61
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <Timer2_enuInit>:




/********************************** Software Interfaces Declarations *******************/
Timer2_StatusErrorType Timer2_enuInit(const Timer2_ConfigType* Address_Timer2){
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	00 d0       	rcall	.+0      	; 0xda8 <Timer2_enuInit+0x6>
     da8:	1f 92       	push	r1
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	9b 83       	std	Y+3, r25	; 0x03
     db0:	8a 83       	std	Y+2, r24	; 0x02
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	89 83       	std	Y+1, r24	; 0x01

			    if(NULL == Address_Timer2){
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	9b 81       	ldd	r25, Y+3	; 0x03
     dba:	89 2b       	or	r24, r25
     dbc:	19 f4       	brne	.+6      	; 0xdc4 <Timer2_enuInit+0x22>

			    	Loc_enuTimer2Status = TIMER2_STATUS_NULL_POINTER_ADDRESS;
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	89 83       	std	Y+1, r24	; 0x01
     dc2:	9a c0       	rjmp	.+308    	; 0xef8 <Timer2_enuInit+0x156>
			    }
			    else{

			    	/* Disable Timer2 Peripheral */
			    	        Timer2_Disable();
     dc4:	85 e4       	ldi	r24, 0x45	; 69
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	25 e4       	ldi	r18, 0x45	; 69
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	f9 01       	movw	r30, r18
     dce:	20 81       	ld	r18, Z
     dd0:	28 7f       	andi	r18, 0xF8	; 248
     dd2:	fc 01       	movw	r30, r24
     dd4:	20 83       	st	Z, r18

			    	        /* Select Mode timer */
			    	        Timer2_SelectMode((Address_Timer2->select_mode));
     dd6:	85 e4       	ldi	r24, 0x45	; 69
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	25 e4       	ldi	r18, 0x45	; 69
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	f9 01       	movw	r30, r18
     de0:	20 81       	ld	r18, Z
     de2:	42 2f       	mov	r20, r18
     de4:	4f 7b       	andi	r20, 0xBF	; 191
     de6:	2a 81       	ldd	r18, Y+2	; 0x02
     de8:	3b 81       	ldd	r19, Y+3	; 0x03
     dea:	f9 01       	movw	r30, r18
     dec:	21 81       	ldd	r18, Z+1	; 0x01
     dee:	22 2f       	mov	r18, r18
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	21 70       	andi	r18, 0x01	; 1
     df4:	33 27       	eor	r19, r19
     df6:	00 24       	eor	r0, r0
     df8:	36 95       	lsr	r19
     dfa:	27 95       	ror	r18
     dfc:	07 94       	ror	r0
     dfe:	36 95       	lsr	r19
     e00:	27 95       	ror	r18
     e02:	07 94       	ror	r0
     e04:	32 2f       	mov	r19, r18
     e06:	20 2d       	mov	r18, r0
     e08:	24 2b       	or	r18, r20
     e0a:	fc 01       	movw	r30, r24
     e0c:	20 83       	st	Z, r18
     e0e:	85 e4       	ldi	r24, 0x45	; 69
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	25 e4       	ldi	r18, 0x45	; 69
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	f9 01       	movw	r30, r18
     e18:	20 81       	ld	r18, Z
     e1a:	42 2f       	mov	r20, r18
     e1c:	47 7f       	andi	r20, 0xF7	; 247
     e1e:	2a 81       	ldd	r18, Y+2	; 0x02
     e20:	3b 81       	ldd	r19, Y+3	; 0x03
     e22:	f9 01       	movw	r30, r18
     e24:	21 81       	ldd	r18, Z+1	; 0x01
     e26:	26 95       	lsr	r18
     e28:	22 2f       	mov	r18, r18
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	21 70       	andi	r18, 0x01	; 1
     e2e:	33 27       	eor	r19, r19
     e30:	22 0f       	add	r18, r18
     e32:	33 1f       	adc	r19, r19
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	22 0f       	add	r18, r18
     e3a:	33 1f       	adc	r19, r19
     e3c:	24 2b       	or	r18, r20
     e3e:	fc 01       	movw	r30, r24
     e40:	20 83       	st	Z, r18
     e42:	85 e4       	ldi	r24, 0x45	; 69
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	25 e4       	ldi	r18, 0x45	; 69
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	f9 01       	movw	r30, r18
     e4c:	20 81       	ld	r18, Z
     e4e:	42 2f       	mov	r20, r18
     e50:	4f 7e       	andi	r20, 0xEF	; 239
     e52:	2a 81       	ldd	r18, Y+2	; 0x02
     e54:	3b 81       	ldd	r19, Y+3	; 0x03
     e56:	f9 01       	movw	r30, r18
     e58:	21 81       	ldd	r18, Z+1	; 0x01
     e5a:	26 95       	lsr	r18
     e5c:	26 95       	lsr	r18
     e5e:	22 2f       	mov	r18, r18
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	21 70       	andi	r18, 0x01	; 1
     e64:	33 27       	eor	r19, r19
     e66:	22 95       	swap	r18
     e68:	32 95       	swap	r19
     e6a:	30 7f       	andi	r19, 0xF0	; 240
     e6c:	32 27       	eor	r19, r18
     e6e:	20 7f       	andi	r18, 0xF0	; 240
     e70:	32 27       	eor	r19, r18
     e72:	24 2b       	or	r18, r20
     e74:	fc 01       	movw	r30, r24
     e76:	20 83       	st	Z, r18
     e78:	85 e4       	ldi	r24, 0x45	; 69
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	25 e4       	ldi	r18, 0x45	; 69
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	f9 01       	movw	r30, r18
     e82:	20 81       	ld	r18, Z
     e84:	42 2f       	mov	r20, r18
     e86:	4f 7d       	andi	r20, 0xDF	; 223
     e88:	2a 81       	ldd	r18, Y+2	; 0x02
     e8a:	3b 81       	ldd	r19, Y+3	; 0x03
     e8c:	f9 01       	movw	r30, r18
     e8e:	21 81       	ldd	r18, Z+1	; 0x01
     e90:	26 95       	lsr	r18
     e92:	26 95       	lsr	r18
     e94:	26 95       	lsr	r18
     e96:	22 2f       	mov	r18, r18
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	21 70       	andi	r18, 0x01	; 1
     e9c:	33 27       	eor	r19, r19
     e9e:	22 0f       	add	r18, r18
     ea0:	33 1f       	adc	r19, r19
     ea2:	22 95       	swap	r18
     ea4:	32 95       	swap	r19
     ea6:	30 7f       	andi	r19, 0xF0	; 240
     ea8:	32 27       	eor	r19, r18
     eaa:	20 7f       	andi	r18, 0xF0	; 240
     eac:	32 27       	eor	r19, r18
     eae:	24 2b       	or	r18, r20
     eb0:	fc 01       	movw	r30, r24
     eb2:	20 83       	st	Z, r18

			    	        Global_StaticU8InitValueTimer2 = Address_Timer2->init_value_general_counter;
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	9b 81       	ldd	r25, Y+3	; 0x03
     eb8:	fc 01       	movw	r30, r24
     eba:	82 81       	ldd	r24, Z+2	; 0x02
     ebc:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <Global_StaticU8InitValueTimer2>
			    	        Global_enuTimer2Mode = Address_Timer2->select_mode;
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	9b 81       	ldd	r25, Y+3	; 0x03
     ec4:	fc 01       	movw	r30, r24
     ec6:	81 81       	ldd	r24, Z+1	; 0x01
     ec8:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <Global_enuTimer2Mode>
			    	        /* Update Init Value*/
			    	        Loc_enuTimer2Status= Timer2_enuSetValueNormalCounter(Address_Timer2->init_value_general_counter);
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	9b 81       	ldd	r25, Y+3	; 0x03
     ed0:	fc 01       	movw	r30, r24
     ed2:	82 81       	ldd	r24, Z+2	; 0x02
     ed4:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <Timer2_enuSetValueNormalCounter>
     ed8:	89 83       	std	Y+1, r24	; 0x01

			    	        /* Enable Timer2 Peripheral */
			    	        Timer2_Enable(Address_Timer2->prescaler_value);
     eda:	85 e4       	ldi	r24, 0x45	; 69
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	25 e4       	ldi	r18, 0x45	; 69
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	f9 01       	movw	r30, r18
     ee4:	20 81       	ld	r18, Z
     ee6:	42 2f       	mov	r20, r18
     ee8:	48 7f       	andi	r20, 0xF8	; 248
     eea:	2a 81       	ldd	r18, Y+2	; 0x02
     eec:	3b 81       	ldd	r19, Y+3	; 0x03
     eee:	f9 01       	movw	r30, r18
     ef0:	20 81       	ld	r18, Z
     ef2:	24 2b       	or	r18, r20
     ef4:	fc 01       	movw	r30, r24
     ef6:	20 83       	st	Z, r18

			    }

			    return Loc_enuTimer2Status;
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
}
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	08 95       	ret

00000f06 <Timer2_DeInit>:

Timer2_StatusErrorType Timer2_DeInit(const Timer2_ConfigType* Address_Timer2){
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <Timer2_DeInit+0x6>
     f0c:	1f 92       	push	r1
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	9b 83       	std	Y+3, r25	; 0x03
     f14:	8a 83       	std	Y+2, r24	; 0x02
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	89 83       	std	Y+1, r24	; 0x01

			    if(NULL == Address_Timer2){
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	9b 81       	ldd	r25, Y+3	; 0x03
     f1e:	89 2b       	or	r24, r25
     f20:	19 f4       	brne	.+6      	; 0xf28 <Timer2_DeInit+0x22>

			    	Loc_enuTimer2Status = TIMER2_STATUS_NULL_POINTER_ADDRESS;
     f22:	82 e0       	ldi	r24, 0x02	; 2
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	09 c0       	rjmp	.+18     	; 0xf3a <Timer2_DeInit+0x34>
			    }
			    else{
			    	/* Disable Timer2 Peripheral */
			    	Timer2_Disable();
     f28:	85 e4       	ldi	r24, 0x45	; 69
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	25 e4       	ldi	r18, 0x45	; 69
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	f9 01       	movw	r30, r18
     f32:	20 81       	ld	r18, Z
     f34:	28 7f       	andi	r18, 0xF8	; 248
     f36:	fc 01       	movw	r30, r24
     f38:	20 83       	st	Z, r18


			    }

			    return Loc_enuTimer2Status;
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	08 95       	ret

00000f48 <Timer2_enuEnableOverflowInterrupt>:

Timer2_StatusErrorType Timer2_enuEnableOverflowInterrupt(void){
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	1f 92       	push	r1
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	89 83       	std	Y+1, r24	; 0x01

	Timer2_EnableOverviewInterrupt();
     f56:	89 e5       	ldi	r24, 0x59	; 89
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	29 e5       	ldi	r18, 0x59	; 89
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	f9 01       	movw	r30, r18
     f60:	20 81       	ld	r18, Z
     f62:	20 64       	ori	r18, 0x40	; 64
     f64:	fc 01       	movw	r30, r24
     f66:	20 83       	st	Z, r18

	return Loc_enuTimer2Status;
     f68:	89 81       	ldd	r24, Y+1	; 0x01
}
     f6a:	0f 90       	pop	r0
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret

00000f72 <Timer2_enuEnableCaptureInterrupt>:


Timer2_StatusErrorType Timer2_enuEnableCaptureInterrupt(void){
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	1f 92       	push	r1
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	89 83       	std	Y+1, r24	; 0x01

	Timer2_EnableComparePwmInterrupt();
     f80:	89 e5       	ldi	r24, 0x59	; 89
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	29 e5       	ldi	r18, 0x59	; 89
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	f9 01       	movw	r30, r18
     f8a:	20 81       	ld	r18, Z
     f8c:	20 68       	ori	r18, 0x80	; 128
     f8e:	fc 01       	movw	r30, r24
     f90:	20 83       	st	Z, r18
	return Loc_enuTimer2Status;
     f92:	89 81       	ldd	r24, Y+1	; 0x01
}
     f94:	0f 90       	pop	r0
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	08 95       	ret

00000f9c <Timer2_enuDisableOverflowInterrupt>:

Timer2_StatusErrorType Timer2_enuDisableOverflowInterrupt(void){
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	1f 92       	push	r1
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	89 83       	std	Y+1, r24	; 0x01

	Timer2_DisableOverviewInterrupt();
     faa:	89 e5       	ldi	r24, 0x59	; 89
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	29 e5       	ldi	r18, 0x59	; 89
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	f9 01       	movw	r30, r18
     fb4:	20 81       	ld	r18, Z
     fb6:	2f 7b       	andi	r18, 0xBF	; 191
     fb8:	fc 01       	movw	r30, r24
     fba:	20 83       	st	Z, r18

	return Loc_enuTimer2Status;
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
}
     fbe:	0f 90       	pop	r0
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	08 95       	ret

00000fc6 <Timer2_enuDisableCaptureInterrupt>:
Timer2_StatusErrorType Timer2_enuDisableCaptureInterrupt(void){
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	1f 92       	push	r1
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	89 83       	std	Y+1, r24	; 0x01
	Timer2_DisbleComparePwmInterrupt();
     fd4:	89 e5       	ldi	r24, 0x59	; 89
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	29 e5       	ldi	r18, 0x59	; 89
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	f9 01       	movw	r30, r18
     fde:	20 81       	ld	r18, Z
     fe0:	2f 77       	andi	r18, 0x7F	; 127
     fe2:	fc 01       	movw	r30, r24
     fe4:	20 83       	st	Z, r18

	return Loc_enuTimer2Status;
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe8:	0f 90       	pop	r0
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	08 95       	ret

00000ff0 <Timer2_enuSetCallbackOverflowInterrupt>:

Timer2_StatusErrorType Timer2_enuSetCallbackOverflowInterrupt(void (*callback)(void)){
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <Timer2_enuSetCallbackOverflowInterrupt+0x6>
     ff6:	1f 92       	push	r1
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	9b 83       	std	Y+3, r25	; 0x03
     ffe:	8a 83       	std	Y+2, r24	; 0x02
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	89 83       	std	Y+1, r24	; 0x01

	if(NULL == callback){
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	9b 81       	ldd	r25, Y+3	; 0x03
    1008:	89 2b       	or	r24, r25
    100a:	19 f4       	brne	.+6      	; 0x1012 <Timer2_enuSetCallbackOverflowInterrupt+0x22>

		Loc_enuTimer2Status = TIMER2_STATUS_NULL_POINTER_ADDRESS;
    100c:	82 e0       	ldi	r24, 0x02	; 2
    100e:	89 83       	std	Y+1, r24	; 0x01
    1010:	06 c0       	rjmp	.+12     	; 0x101e <Timer2_enuSetCallbackOverflowInterrupt+0x2e>
	}
	else{
		Timer2_OverflowInterruptHandler = callback;
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	9b 81       	ldd	r25, Y+3	; 0x03
    1016:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <__data_end+0x1>
    101a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__data_end>


	}

	return Loc_enuTimer2Status;
    101e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	08 95       	ret

0000102c <Timer2_enuSetCallbackCompareInterrupt>:

Timer2_StatusErrorType Timer2_enuSetCallbackCompareInterrupt(void (*callback)(void)){
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	00 d0       	rcall	.+0      	; 0x1032 <Timer2_enuSetCallbackCompareInterrupt+0x6>
    1032:	1f 92       	push	r1
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	9b 83       	std	Y+3, r25	; 0x03
    103a:	8a 83       	std	Y+2, r24	; 0x02
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	89 83       	std	Y+1, r24	; 0x01

			    if(NULL == callback){
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	9b 81       	ldd	r25, Y+3	; 0x03
    1044:	89 2b       	or	r24, r25
    1046:	19 f4       	brne	.+6      	; 0x104e <Timer2_enuSetCallbackCompareInterrupt+0x22>

			    	Loc_enuTimer2Status = TIMER2_STATUS_NULL_POINTER_ADDRESS;
    1048:	82 e0       	ldi	r24, 0x02	; 2
    104a:	89 83       	std	Y+1, r24	; 0x01
    104c:	06 c0       	rjmp	.+12     	; 0x105a <Timer2_enuSetCallbackCompareInterrupt+0x2e>
			    }
			    else{

			    	Timer2_CompareInterruptHandler = callback;
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	9b 81       	ldd	r25, Y+3	; 0x03
    1052:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <Timer2_CompareInterruptHandler+0x1>
    1056:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <Timer2_CompareInterruptHandler>

			    }

			    return Loc_enuTimer2Status;
    105a:	89 81       	ldd	r24, Y+1	; 0x01
}
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	08 95       	ret

00001068 <Timer2_enuCtcForcePinImmediatly>:

Timer2_StatusErrorType Timer2_enuCtcForcePinImmediatly(void){
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	1f 92       	push	r1
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	89 83       	std	Y+1, r24	; 0x01

	SET_BIT(TCCR2,TCCR2_FOC2_BIT);
    1076:	85 e4       	ldi	r24, 0x45	; 69
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	25 e4       	ldi	r18, 0x45	; 69
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	f9 01       	movw	r30, r18
    1080:	20 81       	ld	r18, Z
    1082:	20 68       	ori	r18, 0x80	; 128
    1084:	fc 01       	movw	r30, r24
    1086:	20 83       	st	Z, r18

	return Loc_enuTimer2Status;
    1088:	89 81       	ldd	r24, Y+1	; 0x01
}
    108a:	0f 90       	pop	r0
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <Timer2_enuSetDutyCyclePwm>:




Timer2_StatusErrorType Timer2_enuSetDutyCyclePwm(u8 Copy_u8DutyCylePrecentage){
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	00 d0       	rcall	.+0      	; 0x1098 <Timer2_enuSetDutyCyclePwm+0x6>
    1098:	1f 92       	push	r1
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	8b 83       	std	Y+3, r24	; 0x03
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	89 83       	std	Y+1, r24	; 0x01
	u8 Loc_u8DutyCycle;
	Copy_u8DutyCylePrecentage = (Copy_u8DutyCylePrecentage >= 100) ? 100 :Copy_u8DutyCylePrecentage;
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	85 36       	cpi	r24, 0x65	; 101
    10a8:	08 f0       	brcs	.+2      	; 0x10ac <Timer2_enuSetDutyCyclePwm+0x1a>
    10aa:	84 e6       	ldi	r24, 0x64	; 100
    10ac:	8b 83       	std	Y+3, r24	; 0x03

	switch(Global_enuTimer2Mode){
    10ae:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <Global_enuTimer2Mode>
    10b2:	88 2f       	mov	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	09 2e       	mov	r0, r25
    10b8:	00 0c       	add	r0, r0
    10ba:	aa 0b       	sbc	r26, r26
    10bc:	bb 0b       	sbc	r27, r27
    10be:	40 e0       	ldi	r20, 0x00	; 0
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	2f e0       	ldi	r18, 0x0F	; 15
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	84 1b       	sub	r24, r20
    10c8:	95 0b       	sbc	r25, r21
    10ca:	28 17       	cp	r18, r24
    10cc:	39 07       	cpc	r19, r25
    10ce:	08 f4       	brcc	.+2      	; 0x10d2 <Timer2_enuSetDutyCyclePwm+0x40>
    10d0:	60 c0       	rjmp	.+192    	; 0x1192 <Timer2_enuSetDutyCyclePwm+0x100>
    10d2:	86 5d       	subi	r24, 0xD6	; 214
    10d4:	9f 4f       	sbci	r25, 0xFF	; 255
    10d6:	fc 01       	movw	r30, r24
    10d8:	0c 94 58 29 	jmp	0x52b0	; 0x52b0 <__tablejump2__>
	case  TIMER2_SELECT_MODE_NORMAL:
	case  TIMER2_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC2_NORMAEL:
	case  TIMER2_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC2_TOGGLE :
	case  TIMER2_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC2_CLEAR  :
	case  TIMER2_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC2_SET :
		Loc_enuTimer2Status = TIMER2_STATUS_FAIL;
    10dc:	19 82       	std	Y+1, r1	; 0x01
		break;
    10de:	59 c0       	rjmp	.+178    	; 0x1192 <Timer2_enuSetDutyCyclePwm+0x100>
		/* i don't know what is the usage of this */
		break;

	case TIMER2_SELECT_MODE_PWM_FAST_INVERTED_OC2_SET_ON_MATCH_CLEAR_AT_TOP:
	case TIMER2_SELECT_MODE_PWM_PHASE_CORRECT_OC2_SET_ON_MATCH_UPCOUNTING_CLEAR_ON_MATCH_DOWNCOUNTING:
		Loc_u8DutyCycle = TIMER2_FULL_VALUE_IN_REGISTER- (u8)((f32)Copy_u8DutyCylePrecentage/100 * TIMER2_FULL_VALUE_IN_REGISTER);
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	88 2f       	mov	r24, r24
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	a0 e0       	ldi	r26, 0x00	; 0
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	0e 94 9a 2a 	call	0x5534	; 0x5534 <__floatunsisf>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	48 ec       	ldi	r20, 0xC8	; 200
    10fc:	52 e4       	ldi	r21, 0x42	; 66
    10fe:	bc 01       	movw	r22, r24
    1100:	cd 01       	movw	r24, r26
    1102:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <__divsf3>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	4f e7       	ldi	r20, 0x7F	; 127
    1110:	53 e4       	ldi	r21, 0x43	; 67
    1112:	bc 01       	movw	r22, r24
    1114:	cd 01       	movw	r24, r26
    1116:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	bc 01       	movw	r22, r24
    1120:	cd 01       	movw	r24, r26
    1122:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	80 95       	com	r24
    112c:	8a 83       	std	Y+2, r24	; 0x02
		ASSIGN_REG(OCR2,Loc_u8DutyCycle);
    112e:	83 e4       	ldi	r24, 0x43	; 67
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	2a 81       	ldd	r18, Y+2	; 0x02
    1134:	fc 01       	movw	r30, r24
    1136:	20 83       	st	Z, r18

		break;
    1138:	2c c0       	rjmp	.+88     	; 0x1192 <Timer2_enuSetDutyCyclePwm+0x100>

	case TIMER2_SELECT_MODE_PWM_FAST_NOT_INVERTED_OC2_CLEAR_ON_MATCH_SET_AT_TOP:
	case TIMER2_SELECT_MODE_PWM_PHASE_CORRECT_OC2_CLEAR_ON_MATCH_UPCOUNTING_SET_ON_MATCH_DOWNCOUNTING:
		Loc_u8DutyCycle = (u8)((f32)Copy_u8DutyCylePrecentage/100 * TIMER2_FULL_VALUE_IN_REGISTER);
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	88 2f       	mov	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	a0 e0       	ldi	r26, 0x00	; 0
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	bc 01       	movw	r22, r24
    1146:	cd 01       	movw	r24, r26
    1148:	0e 94 9a 2a 	call	0x5534	; 0x5534 <__floatunsisf>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	48 ec       	ldi	r20, 0xC8	; 200
    1156:	52 e4       	ldi	r21, 0x42	; 66
    1158:	bc 01       	movw	r22, r24
    115a:	cd 01       	movw	r24, r26
    115c:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <__divsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	4f e7       	ldi	r20, 0x7F	; 127
    116a:	53 e4       	ldi	r21, 0x43	; 67
    116c:	bc 01       	movw	r22, r24
    116e:	cd 01       	movw	r24, r26
    1170:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	bc 01       	movw	r22, r24
    117a:	cd 01       	movw	r24, r26
    117c:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	8a 83       	std	Y+2, r24	; 0x02
		ASSIGN_REG(OCR2,Loc_u8DutyCycle);
    1186:	83 e4       	ldi	r24, 0x43	; 67
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	2a 81       	ldd	r18, Y+2	; 0x02
    118c:	fc 01       	movw	r30, r24
    118e:	20 83       	st	Z, r18

		break;
    1190:	00 00       	nop

	}

	return Loc_enuTimer2Status;
    1192:	89 81       	ldd	r24, Y+1	; 0x01
}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	08 95       	ret

000011a0 <Timer2_enuSetValueNormalCounter>:



Timer2_StatusErrorType Timer2_enuSetValueNormalCounter(u8 Copy_u8Value){
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <Timer2_enuSetValueNormalCounter+0x6>
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	8a 83       	std	Y+2, r24	; 0x02
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	89 83       	std	Y+1, r24	; 0x01
	ASSIGN_REG(TCNT2,Copy_u8Value);
    11b0:	84 e4       	ldi	r24, 0x44	; 68
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	2a 81       	ldd	r18, Y+2	; 0x02
    11b6:	fc 01       	movw	r30, r24
    11b8:	20 83       	st	Z, r18

	return Loc_enuTimer2Status;
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	08 95       	ret

000011c6 <Timer2_enuGetTimeElapsedNormalCounter>:
Timer2_StatusErrorType Timer2_enuGetTimeElapsedNormalCounter(u8* Address_Value){
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <Timer2_enuGetTimeElapsedNormalCounter+0x6>
    11cc:	1f 92       	push	r1
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	9b 83       	std	Y+3, r25	; 0x03
    11d4:	8a 83       	std	Y+2, r24	; 0x02
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	89 83       	std	Y+1, r24	; 0x01

	if(NULL == Address_Value){
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	9b 81       	ldd	r25, Y+3	; 0x03
    11de:	89 2b       	or	r24, r25
    11e0:	19 f4       	brne	.+6      	; 0x11e8 <Timer2_enuGetTimeElapsedNormalCounter+0x22>

		Loc_enuTimer2Status = TIMER2_STATUS_NULL_POINTER_ADDRESS;
    11e2:	82 e0       	ldi	r24, 0x02	; 2
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	08 c0       	rjmp	.+16     	; 0x11f8 <Timer2_enuGetTimeElapsedNormalCounter+0x32>
	}
	else{

		*Address_Value = TCNT2;
    11e8:	84 e4       	ldi	r24, 0x44	; 68
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	fc 01       	movw	r30, r24
    11ee:	20 81       	ld	r18, Z
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	9b 81       	ldd	r25, Y+3	; 0x03
    11f4:	fc 01       	movw	r30, r24
    11f6:	20 83       	st	Z, r18

	}

	return Loc_enuTimer2Status;
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	08 95       	ret

00001206 <Timer2_enuGetRemainingNormalCounter>:


Timer2_StatusErrorType Timer2_enuGetRemainingNormalCounter(u8* Address_Value){
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	00 d0       	rcall	.+0      	; 0x120c <Timer2_enuGetRemainingNormalCounter+0x6>
    120c:	1f 92       	push	r1
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	9b 83       	std	Y+3, r25	; 0x03
    1214:	8a 83       	std	Y+2, r24	; 0x02
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	89 83       	std	Y+1, r24	; 0x01

	if(NULL == Address_Value){
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	9b 81       	ldd	r25, Y+3	; 0x03
    121e:	89 2b       	or	r24, r25
    1220:	19 f4       	brne	.+6      	; 0x1228 <Timer2_enuGetRemainingNormalCounter+0x22>

		Loc_enuTimer2Status = TIMER2_STATUS_NULL_POINTER_ADDRESS;
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	0a c0       	rjmp	.+20     	; 0x123c <Timer2_enuGetRemainingNormalCounter+0x36>
	}
	else{

		*Address_Value = TIMER2_FULL_VALUE_IN_REGISTER - TCNT2;
    1228:	84 e4       	ldi	r24, 0x44	; 68
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	fc 01       	movw	r30, r24
    122e:	80 81       	ld	r24, Z
    1230:	28 2f       	mov	r18, r24
    1232:	20 95       	com	r18
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	9b 81       	ldd	r25, Y+3	; 0x03
    1238:	fc 01       	movw	r30, r24
    123a:	20 83       	st	Z, r18

	}

	return Loc_enuTimer2Status;
    123c:	89 81       	ldd	r24, Y+1	; 0x01
}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	08 95       	ret

0000124a <Timer2_enuSetValueCompareMode>:



Timer2_StatusErrorType Timer2_enuSetValueCompareMode(u8 Copy_u8Value){
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	00 d0       	rcall	.+0      	; 0x1250 <Timer2_enuSetValueCompareMode+0x6>
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	8a 83       	std	Y+2, r24	; 0x02
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	89 83       	std	Y+1, r24	; 0x01

	ASSIGN_REG(OCR2,Copy_u8Value);
    125a:	83 e4       	ldi	r24, 0x43	; 67
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	2a 81       	ldd	r18, Y+2	; 0x02
    1260:	fc 01       	movw	r30, r24
    1262:	20 83       	st	Z, r18

	return Loc_enuTimer2Status;
    1264:	89 81       	ldd	r24, Y+1	; 0x01
}
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <Timer2_enuGetTimeElapsedCompareMode>:


Timer2_StatusErrorType Timer2_enuGetTimeElapsedCompareMode(u8* Address_Value){
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	00 d0       	rcall	.+0      	; 0x1276 <Timer2_enuGetTimeElapsedCompareMode+0x6>
    1276:	1f 92       	push	r1
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	9b 83       	std	Y+3, r25	; 0x03
    127e:	8a 83       	std	Y+2, r24	; 0x02
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	89 83       	std	Y+1, r24	; 0x01

	if(NULL == Address_Value){
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	9b 81       	ldd	r25, Y+3	; 0x03
    1288:	89 2b       	or	r24, r25
    128a:	19 f4       	brne	.+6      	; 0x1292 <Timer2_enuGetTimeElapsedCompareMode+0x22>

		Loc_enuTimer2Status = TIMER2_STATUS_NULL_POINTER_ADDRESS;
    128c:	82 e0       	ldi	r24, 0x02	; 2
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	08 c0       	rjmp	.+16     	; 0x12a2 <Timer2_enuGetTimeElapsedCompareMode+0x32>
	}
	else{

		*Address_Value = TCNT2;
    1292:	84 e4       	ldi	r24, 0x44	; 68
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	fc 01       	movw	r30, r24
    1298:	20 81       	ld	r18, Z
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	9b 81       	ldd	r25, Y+3	; 0x03
    129e:	fc 01       	movw	r30, r24
    12a0:	20 83       	st	Z, r18

	}

			    return Loc_enuTimer2Status;
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	08 95       	ret

000012b0 <Timer2_enuGetRemainingCompareMode>:
Timer2_StatusErrorType Timer2_enuGetRemainingCompareMode(u8* Address_Value){
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <Timer2_enuGetRemainingCompareMode+0x6>
    12b6:	1f 92       	push	r1
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	9b 83       	std	Y+3, r25	; 0x03
    12be:	8a 83       	std	Y+2, r24	; 0x02
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	89 83       	std	Y+1, r24	; 0x01

			    if(NULL == Address_Value){
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	9b 81       	ldd	r25, Y+3	; 0x03
    12c8:	89 2b       	or	r24, r25
    12ca:	19 f4       	brne	.+6      	; 0x12d2 <Timer2_enuGetRemainingCompareMode+0x22>

			    	Loc_enuTimer2Status = TIMER2_STATUS_NULL_POINTER_ADDRESS;
    12cc:	82 e0       	ldi	r24, 0x02	; 2
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	0d c0       	rjmp	.+26     	; 0x12ec <Timer2_enuGetRemainingCompareMode+0x3c>
			    }
			    else{

			    	*Address_Value = OCR2 - TCNT2;
    12d2:	83 e4       	ldi	r24, 0x43	; 67
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	fc 01       	movw	r30, r24
    12d8:	20 81       	ld	r18, Z
    12da:	84 e4       	ldi	r24, 0x44	; 68
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	fc 01       	movw	r30, r24
    12e0:	80 81       	ld	r24, Z
    12e2:	28 1b       	sub	r18, r24
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	9b 81       	ldd	r25, Y+3	; 0x03
    12e8:	fc 01       	movw	r30, r24
    12ea:	20 83       	st	Z, r18

			    }

			    return Loc_enuTimer2Status;
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	08 95       	ret

000012fa <__vector_4>:


// ISR function For TIMER2 Compare Match
void __vector_4(void) __attribute__((signal));

void __vector_4(void){
    12fa:	1f 92       	push	r1
    12fc:	0f 92       	push	r0
    12fe:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1302:	0f 92       	push	r0
    1304:	11 24       	eor	r1, r1
    1306:	2f 93       	push	r18
    1308:	3f 93       	push	r19
    130a:	4f 93       	push	r20
    130c:	5f 93       	push	r21
    130e:	6f 93       	push	r22
    1310:	7f 93       	push	r23
    1312:	8f 93       	push	r24
    1314:	9f 93       	push	r25
    1316:	af 93       	push	r26
    1318:	bf 93       	push	r27
    131a:	ef 93       	push	r30
    131c:	ff 93       	push	r31
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62

	    if(NULL !=Timer2_CompareInterruptHandler ){
    1326:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <Timer2_CompareInterruptHandler>
    132a:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <Timer2_CompareInterruptHandler+0x1>
    132e:	89 2b       	or	r24, r25
    1330:	31 f0       	breq	.+12     	; 0x133e <__vector_4+0x44>
	    	Timer2_CompareInterruptHandler();
    1332:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <Timer2_CompareInterruptHandler>
    1336:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <Timer2_CompareInterruptHandler+0x1>
    133a:	fc 01       	movw	r30, r24
    133c:	09 95       	icall
	    }
	    else {/*  error in declaration */}

}
    133e:	00 00       	nop
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	ff 91       	pop	r31
    1346:	ef 91       	pop	r30
    1348:	bf 91       	pop	r27
    134a:	af 91       	pop	r26
    134c:	9f 91       	pop	r25
    134e:	8f 91       	pop	r24
    1350:	7f 91       	pop	r23
    1352:	6f 91       	pop	r22
    1354:	5f 91       	pop	r21
    1356:	4f 91       	pop	r20
    1358:	3f 91       	pop	r19
    135a:	2f 91       	pop	r18
    135c:	0f 90       	pop	r0
    135e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1362:	0f 90       	pop	r0
    1364:	1f 90       	pop	r1
    1366:	18 95       	reti

00001368 <__vector_5>:


// ISR function For TIMER2 OverFlow
void __vector_5(void) __attribute__((signal));

void __vector_5(void){
    1368:	1f 92       	push	r1
    136a:	0f 92       	push	r0
    136c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1370:	0f 92       	push	r0
    1372:	11 24       	eor	r1, r1
    1374:	2f 93       	push	r18
    1376:	3f 93       	push	r19
    1378:	4f 93       	push	r20
    137a:	5f 93       	push	r21
    137c:	6f 93       	push	r22
    137e:	7f 93       	push	r23
    1380:	8f 93       	push	r24
    1382:	9f 93       	push	r25
    1384:	af 93       	push	r26
    1386:	bf 93       	push	r27
    1388:	ef 93       	push	r30
    138a:	ff 93       	push	r31
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62

//	Timer0_DisableOverviewInterrupt();



    if(NULL !=Timer2_OverflowInterruptHandler ){
    1394:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__data_end>
    1398:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <__data_end+0x1>
    139c:	89 2b       	or	r24, r25
    139e:	61 f0       	breq	.+24     	; 0x13b8 <__vector_5+0x50>

    	TCNT2= Global_StaticU8InitValueTimer2;
    13a0:	84 e4       	ldi	r24, 0x44	; 68
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	20 91 e6 00 	lds	r18, 0x00E6	; 0x8000e6 <Global_StaticU8InitValueTimer2>
    13a8:	fc 01       	movw	r30, r24
    13aa:	20 83       	st	Z, r18
    	Timer2_OverflowInterruptHandler();
    13ac:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__data_end>
    13b0:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <__data_end+0x1>
    13b4:	fc 01       	movw	r30, r24
    13b6:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer0_EnableOverviewInterrupt();
}
    13b8:	00 00       	nop
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	ff 91       	pop	r31
    13c0:	ef 91       	pop	r30
    13c2:	bf 91       	pop	r27
    13c4:	af 91       	pop	r26
    13c6:	9f 91       	pop	r25
    13c8:	8f 91       	pop	r24
    13ca:	7f 91       	pop	r23
    13cc:	6f 91       	pop	r22
    13ce:	5f 91       	pop	r21
    13d0:	4f 91       	pop	r20
    13d2:	3f 91       	pop	r19
    13d4:	2f 91       	pop	r18
    13d6:	0f 90       	pop	r0
    13d8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    13dc:	0f 90       	pop	r0
    13de:	1f 90       	pop	r1
    13e0:	18 95       	reti

000013e2 <Timer1_enuInit>:



/********************************** Software Interfaces Declarations *******************/

Timer1_StatusErrorType Timer1_enuInit(const Timer1_ConfigType* Address_Timer1){
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <Timer1_enuInit+0x6>
    13e8:	1f 92       	push	r1
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	9b 83       	std	Y+3, r25	; 0x03
    13f0:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    13f2:	19 82       	std	Y+1, r1	; 0x01

			    if(NULL == Address_Timer1){
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	9b 81       	ldd	r25, Y+3	; 0x03
    13f8:	89 2b       	or	r24, r25
    13fa:	19 f4       	brne	.+6      	; 0x1402 <Timer1_enuInit+0x20>

			    	Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    13fc:	82 e0       	ldi	r24, 0x02	; 2
    13fe:	89 83       	std	Y+1, r24	; 0x01
    1400:	7c c0       	rjmp	.+248    	; 0x14fa <Timer1_enuInit+0x118>
			    }
			    else{

			    	/* Disable Timer1 Peripheral */
			    	        Timer1_Disable();
    1402:	8e e4       	ldi	r24, 0x4E	; 78
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	2e e4       	ldi	r18, 0x4E	; 78
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	f9 01       	movw	r30, r18
    140c:	20 81       	ld	r18, Z
    140e:	28 7f       	andi	r18, 0xF8	; 248
    1410:	fc 01       	movw	r30, r24
    1412:	20 83       	st	Z, r18

			    	        /* Select Mode timer */
			    	        Timer1_SelectMode((Address_Timer1->select_mode));
    1414:	8f e4       	ldi	r24, 0x4F	; 79
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	2f e4       	ldi	r18, 0x4F	; 79
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	f9 01       	movw	r30, r18
    141e:	20 81       	ld	r18, Z
    1420:	42 2f       	mov	r20, r18
    1422:	4c 7f       	andi	r20, 0xFC	; 252
    1424:	2a 81       	ldd	r18, Y+2	; 0x02
    1426:	3b 81       	ldd	r19, Y+3	; 0x03
    1428:	f9 01       	movw	r30, r18
    142a:	21 81       	ldd	r18, Z+1	; 0x01
    142c:	24 2b       	or	r18, r20
    142e:	fc 01       	movw	r30, r24
    1430:	20 83       	st	Z, r18
    1432:	8e e4       	ldi	r24, 0x4E	; 78
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	2e e4       	ldi	r18, 0x4E	; 78
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	f9 01       	movw	r30, r18
    143c:	20 81       	ld	r18, Z
    143e:	42 2f       	mov	r20, r18
    1440:	47 7e       	andi	r20, 0xE7	; 231
    1442:	2a 81       	ldd	r18, Y+2	; 0x02
    1444:	3b 81       	ldd	r19, Y+3	; 0x03
    1446:	f9 01       	movw	r30, r18
    1448:	21 81       	ldd	r18, Z+1	; 0x01
    144a:	22 2f       	mov	r18, r18
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	22 0f       	add	r18, r18
    1450:	33 1f       	adc	r19, r19
    1452:	24 2b       	or	r18, r20
    1454:	fc 01       	movw	r30, r24
    1456:	20 83       	st	Z, r18

			    	        /* Select Mode timer ChannelA*/
			    	        Timer1_SelectOutputModeChannelA(Address_Timer1->select_output_mode_channelA);
    1458:	8f e4       	ldi	r24, 0x4F	; 79
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	2f e4       	ldi	r18, 0x4F	; 79
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	f9 01       	movw	r30, r18
    1462:	20 81       	ld	r18, Z
    1464:	42 2f       	mov	r20, r18
    1466:	4f 73       	andi	r20, 0x3F	; 63
    1468:	2a 81       	ldd	r18, Y+2	; 0x02
    146a:	3b 81       	ldd	r19, Y+3	; 0x03
    146c:	f9 01       	movw	r30, r18
    146e:	22 81       	ldd	r18, Z+2	; 0x02
    1470:	22 2f       	mov	r18, r18
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	00 24       	eor	r0, r0
    1476:	36 95       	lsr	r19
    1478:	27 95       	ror	r18
    147a:	07 94       	ror	r0
    147c:	36 95       	lsr	r19
    147e:	27 95       	ror	r18
    1480:	07 94       	ror	r0
    1482:	32 2f       	mov	r19, r18
    1484:	20 2d       	mov	r18, r0
    1486:	24 2b       	or	r18, r20
    1488:	fc 01       	movw	r30, r24
    148a:	20 83       	st	Z, r18

			    	        /* Select Mode timer Channel B*/
			    	        Timer1_SelectOutputModeChannelB((Address_Timer1->select_output_mode_channelB));
    148c:	8f e4       	ldi	r24, 0x4F	; 79
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	2f e4       	ldi	r18, 0x4F	; 79
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	f9 01       	movw	r30, r18
    1496:	20 81       	ld	r18, Z
    1498:	42 2f       	mov	r20, r18
    149a:	4c 70       	andi	r20, 0x0C	; 12
    149c:	2a 81       	ldd	r18, Y+2	; 0x02
    149e:	3b 81       	ldd	r19, Y+3	; 0x03
    14a0:	f9 01       	movw	r30, r18
    14a2:	23 81       	ldd	r18, Z+3	; 0x03
    14a4:	22 2f       	mov	r18, r18
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	22 95       	swap	r18
    14aa:	32 95       	swap	r19
    14ac:	30 7f       	andi	r19, 0xF0	; 240
    14ae:	32 27       	eor	r19, r18
    14b0:	20 7f       	andi	r18, 0xF0	; 240
    14b2:	32 27       	eor	r19, r18
    14b4:	24 2b       	or	r18, r20
    14b6:	fc 01       	movw	r30, r24
    14b8:	20 83       	st	Z, r18

			    	        Timer1_StaticU16InitValue = Address_Timer1->init_counter_value;
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	9b 81       	ldd	r25, Y+3	; 0x03
    14be:	fc 01       	movw	r30, r24
    14c0:	84 81       	ldd	r24, Z+4	; 0x04
    14c2:	95 81       	ldd	r25, Z+5	; 0x05
    14c4:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <Timer1_StaticU16InitValue+0x1>
    14c8:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <Timer1_StaticU16InitValue>

			    	        /* Update Init Value*/
			    	        Loc_enuTimer1Status= Timer1_enuSetValueNormalCounter(Address_Timer1->init_counter_value);
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	9b 81       	ldd	r25, Y+3	; 0x03
    14d0:	fc 01       	movw	r30, r24
    14d2:	84 81       	ldd	r24, Z+4	; 0x04
    14d4:	95 81       	ldd	r25, Z+5	; 0x05
    14d6:	0e 94 b8 0b 	call	0x1770	; 0x1770 <Timer1_enuSetValueNormalCounter>
    14da:	89 83       	std	Y+1, r24	; 0x01

			    	        /* Enable Timer1 Peripheral */
			    	        Timer1_Enable(Address_Timer1->prescaler_value);
    14dc:	8e e4       	ldi	r24, 0x4E	; 78
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	2e e4       	ldi	r18, 0x4E	; 78
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	f9 01       	movw	r30, r18
    14e6:	20 81       	ld	r18, Z
    14e8:	42 2f       	mov	r20, r18
    14ea:	48 7f       	andi	r20, 0xF8	; 248
    14ec:	2a 81       	ldd	r18, Y+2	; 0x02
    14ee:	3b 81       	ldd	r19, Y+3	; 0x03
    14f0:	f9 01       	movw	r30, r18
    14f2:	20 81       	ld	r18, Z
    14f4:	24 2b       	or	r18, r20
    14f6:	fc 01       	movw	r30, r24
    14f8:	20 83       	st	Z, r18

			    }

			    return Loc_enuTimer1Status;
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	08 95       	ret

00001508 <Timer1_DeInit>:

Timer1_StatusErrorType Timer1_DeInit(const Timer1_ConfigType* Address_Timer1){
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	00 d0       	rcall	.+0      	; 0x150e <Timer1_DeInit+0x6>
    150e:	1f 92       	push	r1
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	9b 83       	std	Y+3, r25	; 0x03
    1516:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1518:	19 82       	std	Y+1, r1	; 0x01

			    if(NULL == Address_Timer1){
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	9b 81       	ldd	r25, Y+3	; 0x03
    151e:	89 2b       	or	r24, r25
    1520:	19 f4       	brne	.+6      	; 0x1528 <Timer1_DeInit+0x20>

			    	Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    1522:	82 e0       	ldi	r24, 0x02	; 2
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	09 c0       	rjmp	.+18     	; 0x153a <Timer1_DeInit+0x32>
			    }
			    else{

			    	/* Disable Timer1 Peripheral */
			    	        Timer1_Disable();
    1528:	8e e4       	ldi	r24, 0x4E	; 78
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	2e e4       	ldi	r18, 0x4E	; 78
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	f9 01       	movw	r30, r18
    1532:	20 81       	ld	r18, Z
    1534:	28 7f       	andi	r18, 0xF8	; 248
    1536:	fc 01       	movw	r30, r24
    1538:	20 83       	st	Z, r18
			    }

			    return Loc_enuTimer1Status;
    153a:	89 81       	ldd	r24, Y+1	; 0x01
}
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	08 95       	ret

00001548 <Timer1_enuEnableInterruptOverflow>:

Timer1_StatusErrorType Timer1_enuEnableInterruptOverflow(void){
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	1f 92       	push	r1
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1552:	19 82       	std	Y+1, r1	; 0x01
	Timer1_EnableOverviewInterrupt();
    1554:	89 e5       	ldi	r24, 0x59	; 89
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	29 e5       	ldi	r18, 0x59	; 89
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	f9 01       	movw	r30, r18
    155e:	20 81       	ld	r18, Z
    1560:	24 60       	ori	r18, 0x04	; 4
    1562:	fc 01       	movw	r30, r24
    1564:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1566:	89 81       	ldd	r24, Y+1	; 0x01
}
    1568:	0f 90       	pop	r0
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	08 95       	ret

00001570 <Timer1_enuDisableInterruptOverflow>:

Timer1_StatusErrorType Timer1_enuDisableInterruptOverflow(void){
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	1f 92       	push	r1
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    157a:	19 82       	std	Y+1, r1	; 0x01

	Timer1_DisableOverviewInterrupt();
    157c:	89 e5       	ldi	r24, 0x59	; 89
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	29 e5       	ldi	r18, 0x59	; 89
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	f9 01       	movw	r30, r18
    1586:	20 81       	ld	r18, Z
    1588:	2b 7f       	andi	r18, 0xFB	; 251
    158a:	fc 01       	movw	r30, r24
    158c:	20 83       	st	Z, r18
	return Loc_enuTimer1Status;
    158e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1590:	0f 90       	pop	r0
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	08 95       	ret

00001598 <Timer1_enuEnableInterruptCompareChannelA>:

Timer1_StatusErrorType Timer1_enuEnableInterruptCompareChannelA(void){
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	1f 92       	push	r1
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    15a2:	19 82       	std	Y+1, r1	; 0x01
	Timer1_EnableChannelA_ComparePwmInterrupt();
    15a4:	89 e5       	ldi	r24, 0x59	; 89
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	29 e5       	ldi	r18, 0x59	; 89
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	f9 01       	movw	r30, r18
    15ae:	20 81       	ld	r18, Z
    15b0:	28 60       	ori	r18, 0x08	; 8
    15b2:	fc 01       	movw	r30, r24
    15b4:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b8:	0f 90       	pop	r0
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	08 95       	ret

000015c0 <Timer1_enuDisableInterruptCompareChannelA>:
Timer1_StatusErrorType Timer1_enuDisableInterruptCompareChannelA(void){
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	1f 92       	push	r1
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    15ca:	19 82       	std	Y+1, r1	; 0x01
	Timer1_DisbleChannelA_ComparePwmInterrupt();
    15cc:	89 e5       	ldi	r24, 0x59	; 89
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	29 e5       	ldi	r18, 0x59	; 89
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	f9 01       	movw	r30, r18
    15d6:	20 81       	ld	r18, Z
    15d8:	27 7f       	andi	r18, 0xF7	; 247
    15da:	fc 01       	movw	r30, r24
    15dc:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    15de:	89 81       	ldd	r24, Y+1	; 0x01
}
    15e0:	0f 90       	pop	r0
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	08 95       	ret

000015e8 <Timer1_enuEnableInterruptCompareChannelB>:


Timer1_StatusErrorType Timer1_enuEnableInterruptCompareChannelB(void){
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	1f 92       	push	r1
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    15f2:	19 82       	std	Y+1, r1	; 0x01

	Timer1_EnableChannelB_ComparePwmInterrupt();
    15f4:	89 e5       	ldi	r24, 0x59	; 89
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	29 e5       	ldi	r18, 0x59	; 89
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	f9 01       	movw	r30, r18
    15fe:	20 81       	ld	r18, Z
    1600:	20 61       	ori	r18, 0x10	; 16
    1602:	fc 01       	movw	r30, r24
    1604:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1606:	89 81       	ldd	r24, Y+1	; 0x01
}
    1608:	0f 90       	pop	r0
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	08 95       	ret

00001610 <Timer1_enuDisableInterruptCompareChannelB>:
Timer1_StatusErrorType Timer1_enuDisableInterruptCompareChannelB(void){
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	1f 92       	push	r1
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    161a:	19 82       	std	Y+1, r1	; 0x01
	Timer1_DisbleChannelB_ComparePwmInterrupt();
    161c:	89 e5       	ldi	r24, 0x59	; 89
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	29 e5       	ldi	r18, 0x59	; 89
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	f9 01       	movw	r30, r18
    1626:	20 81       	ld	r18, Z
    1628:	2f 7e       	andi	r18, 0xEF	; 239
    162a:	fc 01       	movw	r30, r24
    162c:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    162e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1630:	0f 90       	pop	r0
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	08 95       	ret

00001638 <Timer1_enuEnableInterruptIcu>:


Timer1_StatusErrorType Timer1_enuEnableInterruptIcu(void){
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	1f 92       	push	r1
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1642:	19 82       	std	Y+1, r1	; 0x01
	Timer1_EnableIcuInterrupt();
    1644:	89 e5       	ldi	r24, 0x59	; 89
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	29 e5       	ldi	r18, 0x59	; 89
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	f9 01       	movw	r30, r18
    164e:	20 81       	ld	r18, Z
    1650:	20 62       	ori	r18, 0x20	; 32
    1652:	fc 01       	movw	r30, r24
    1654:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1656:	89 81       	ldd	r24, Y+1	; 0x01
}
    1658:	0f 90       	pop	r0
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	08 95       	ret

00001660 <Timer1_enuDisableInterruptIcu>:
Timer1_StatusErrorType Timer1_enuDisableInterruptIcu(void){
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	1f 92       	push	r1
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    166a:	19 82       	std	Y+1, r1	; 0x01
	Timer1_DisableIcuInterrupt();
    166c:	89 e5       	ldi	r24, 0x59	; 89
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	29 e5       	ldi	r18, 0x59	; 89
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	f9 01       	movw	r30, r18
    1676:	20 81       	ld	r18, Z
    1678:	2f 7d       	andi	r18, 0xDF	; 223
    167a:	fc 01       	movw	r30, r24
    167c:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    167e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1680:	0f 90       	pop	r0
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	08 95       	ret

00001688 <Timer1_enuSetCallbackFunctionOverflow>:



Timer1_StatusErrorType Timer1_enuSetCallbackFunctionOverflow(void (*callback)(void)){
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	00 d0       	rcall	.+0      	; 0x168e <Timer1_enuSetCallbackFunctionOverflow+0x6>
    168e:	1f 92       	push	r1
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	9b 83       	std	Y+3, r25	; 0x03
    1696:	8a 83       	std	Y+2, r24	; 0x02

		Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1698:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == callback){
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	9b 81       	ldd	r25, Y+3	; 0x03
    169e:	89 2b       	or	r24, r25
    16a0:	19 f4       	brne	.+6      	; 0x16a8 <Timer1_enuSetCallbackFunctionOverflow+0x20>

			Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    16a2:	82 e0       	ldi	r24, 0x02	; 2
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	06 c0       	rjmp	.+12     	; 0x16b4 <Timer1_enuSetCallbackFunctionOverflow+0x2c>
		}
		else{
			Timer1_OverflowInterruptHandler = callback;
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	9b 81       	ldd	r25, Y+3	; 0x03
    16ac:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <Timer1_OverflowInterruptHandler+0x1>
    16b0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <Timer1_OverflowInterruptHandler>
		}

		return Loc_enuTimer1Status;
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	08 95       	ret

000016c2 <Timer1_enuSetCallbackFunctionCompareChannelA>:
Timer1_StatusErrorType Timer1_enuSetCallbackFunctionCompareChannelA(void (*callback)(void)){
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <Timer1_enuSetCallbackFunctionCompareChannelA+0x6>
    16c8:	1f 92       	push	r1
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	9b 83       	std	Y+3, r25	; 0x03
    16d0:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    16d2:	19 82       	std	Y+1, r1	; 0x01

			if(NULL == callback){
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	9b 81       	ldd	r25, Y+3	; 0x03
    16d8:	89 2b       	or	r24, r25
    16da:	19 f4       	brne	.+6      	; 0x16e2 <Timer1_enuSetCallbackFunctionCompareChannelA+0x20>

				Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    16dc:	82 e0       	ldi	r24, 0x02	; 2
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	06 c0       	rjmp	.+12     	; 0x16ee <Timer1_enuSetCallbackFunctionCompareChannelA+0x2c>
			}
			else{
				Timer1_CompareChannelAInterruptHandler = callback;
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	9b 81       	ldd	r25, Y+3	; 0x03
    16e6:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <Timer1_CompareChannelAInterruptHandler+0x1>
    16ea:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <Timer1_CompareChannelAInterruptHandler>
			}

			return Loc_enuTimer1Status;
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	08 95       	ret

000016fc <Timer1_enuSetCallbackFunctionCompareChannelB>:
Timer1_StatusErrorType Timer1_enuSetCallbackFunctionCompareChannelB(void (*callback)(void)){
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
    1700:	00 d0       	rcall	.+0      	; 0x1702 <Timer1_enuSetCallbackFunctionCompareChannelB+0x6>
    1702:	1f 92       	push	r1
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	9b 83       	std	Y+3, r25	; 0x03
    170a:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    170c:	19 82       	std	Y+1, r1	; 0x01

				if(NULL == callback){
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	9b 81       	ldd	r25, Y+3	; 0x03
    1712:	89 2b       	or	r24, r25
    1714:	19 f4       	brne	.+6      	; 0x171c <Timer1_enuSetCallbackFunctionCompareChannelB+0x20>

					Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    1716:	82 e0       	ldi	r24, 0x02	; 2
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	06 c0       	rjmp	.+12     	; 0x1728 <Timer1_enuSetCallbackFunctionCompareChannelB+0x2c>
				}
				else{
					Timer1_CompareChannelBInterruptHandler = callback;
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	9b 81       	ldd	r25, Y+3	; 0x03
    1720:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <Timer1_CompareChannelBInterruptHandler+0x1>
    1724:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <Timer1_CompareChannelBInterruptHandler>
				}

				return Loc_enuTimer1Status;
    1728:	89 81       	ldd	r24, Y+1	; 0x01
}
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	08 95       	ret

00001736 <Timer1_enuSetCallbackFunctionIcu>:

Timer1_StatusErrorType Timer1_enuSetCallbackFunctionIcu(void (*callback)(void)){
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	00 d0       	rcall	.+0      	; 0x173c <Timer1_enuSetCallbackFunctionIcu+0x6>
    173c:	1f 92       	push	r1
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	9b 83       	std	Y+3, r25	; 0x03
    1744:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1746:	19 82       	std	Y+1, r1	; 0x01

				if(NULL == callback){
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	9b 81       	ldd	r25, Y+3	; 0x03
    174c:	89 2b       	or	r24, r25
    174e:	19 f4       	brne	.+6      	; 0x1756 <Timer1_enuSetCallbackFunctionIcu+0x20>

					Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    1750:	82 e0       	ldi	r24, 0x02	; 2
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	06 c0       	rjmp	.+12     	; 0x1762 <Timer1_enuSetCallbackFunctionIcu+0x2c>
				}
				else{
					Timer1_IcuInterruptHandler = callback;
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	9b 81       	ldd	r25, Y+3	; 0x03
    175a:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <Timer1_IcuInterruptHandler+0x1>
    175e:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <Timer1_IcuInterruptHandler>
				}

				return Loc_enuTimer1Status;
    1762:	89 81       	ldd	r24, Y+1	; 0x01
}
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	08 95       	ret

00001770 <Timer1_enuSetValueNormalCounter>:


Timer1_StatusErrorType Timer1_enuSetValueNormalCounter(u16 Copy_u16Value){
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	00 d0       	rcall	.+0      	; 0x1776 <Timer1_enuSetValueNormalCounter+0x6>
    1776:	1f 92       	push	r1
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	9b 83       	std	Y+3, r25	; 0x03
    177e:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1780:	19 82       	std	Y+1, r1	; 0x01
	ASSIGN_REG(TCNT1H,(Copy_u16Value>>8));
    1782:	8d e4       	ldi	r24, 0x4D	; 77
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	2a 81       	ldd	r18, Y+2	; 0x02
    1788:	3b 81       	ldd	r19, Y+3	; 0x03
    178a:	23 2f       	mov	r18, r19
    178c:	33 27       	eor	r19, r19
    178e:	fc 01       	movw	r30, r24
    1790:	20 83       	st	Z, r18
	ASSIGN_REG(TCNT1L,(Copy_u16Value &0x0F));
    1792:	8c e4       	ldi	r24, 0x4C	; 76
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	2a 81       	ldd	r18, Y+2	; 0x02
    1798:	2f 70       	andi	r18, 0x0F	; 15
    179a:	fc 01       	movw	r30, r24
    179c:	20 83       	st	Z, r18

		return Loc_enuTimer1Status;
    179e:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	08 95       	ret

000017ac <Timer1_enuSetValueCompareChannelA>:
Timer1_StatusErrorType Timer1_enuSetValueCompareChannelA(u16 Copy_u16Value){
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <Timer1_enuSetValueCompareChannelA+0x6>
    17b2:	1f 92       	push	r1
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	9b 83       	std	Y+3, r25	; 0x03
    17ba:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    17bc:	19 82       	std	Y+1, r1	; 0x01
	ASSIGN_REG(OCR1AH,(Copy_u16Value>>8));
    17be:	8b e4       	ldi	r24, 0x4B	; 75
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	2a 81       	ldd	r18, Y+2	; 0x02
    17c4:	3b 81       	ldd	r19, Y+3	; 0x03
    17c6:	23 2f       	mov	r18, r19
    17c8:	33 27       	eor	r19, r19
    17ca:	fc 01       	movw	r30, r24
    17cc:	20 83       	st	Z, r18
	ASSIGN_REG(OCR1AL,(Copy_u16Value &0x0F));
    17ce:	8a e4       	ldi	r24, 0x4A	; 74
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	2a 81       	ldd	r18, Y+2	; 0x02
    17d4:	2f 70       	andi	r18, 0x0F	; 15
    17d6:	fc 01       	movw	r30, r24
    17d8:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    17da:	89 81       	ldd	r24, Y+1	; 0x01
}
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	08 95       	ret

000017e8 <Timer1_enuSetValueCompareChannelB>:
Timer1_StatusErrorType Timer1_enuSetValueCompareChannelB(u16 Copy_u16Value){
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <Timer1_enuSetValueCompareChannelB+0x6>
    17ee:	1f 92       	push	r1
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	9b 83       	std	Y+3, r25	; 0x03
    17f6:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    17f8:	19 82       	std	Y+1, r1	; 0x01
	ASSIGN_REG(OCR1BH,(Copy_u16Value>>8));
    17fa:	89 e4       	ldi	r24, 0x49	; 73
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1800:	3b 81       	ldd	r19, Y+3	; 0x03
    1802:	23 2f       	mov	r18, r19
    1804:	33 27       	eor	r19, r19
    1806:	fc 01       	movw	r30, r24
    1808:	20 83       	st	Z, r18
	ASSIGN_REG(OCR1BL,(Copy_u16Value &0x0F));
    180a:	88 e4       	ldi	r24, 0x48	; 72
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	2a 81       	ldd	r18, Y+2	; 0x02
    1810:	2f 70       	andi	r18, 0x0F	; 15
    1812:	fc 01       	movw	r30, r24
    1814:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1816:	89 81       	ldd	r24, Y+1	; 0x01
}
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	08 95       	ret

00001824 <Timer1_enuSetValueIcu>:
Timer1_StatusErrorType Timer1_enuSetValueIcu(u16 Copy_u16Value){
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	00 d0       	rcall	.+0      	; 0x182a <Timer1_enuSetValueIcu+0x6>
    182a:	1f 92       	push	r1
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	9b 83       	std	Y+3, r25	; 0x03
    1832:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1834:	19 82       	std	Y+1, r1	; 0x01
	ASSIGN_REG(ICR1H,(Copy_u16Value>>8));
    1836:	87 e4       	ldi	r24, 0x47	; 71
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	2a 81       	ldd	r18, Y+2	; 0x02
    183c:	3b 81       	ldd	r19, Y+3	; 0x03
    183e:	23 2f       	mov	r18, r19
    1840:	33 27       	eor	r19, r19
    1842:	fc 01       	movw	r30, r24
    1844:	20 83       	st	Z, r18
	ASSIGN_REG(ICR1L,(Copy_u16Value &0x0F));
    1846:	86 e4       	ldi	r24, 0x46	; 70
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	2a 81       	ldd	r18, Y+2	; 0x02
    184c:	2f 70       	andi	r18, 0x0F	; 15
    184e:	fc 01       	movw	r30, r24
    1850:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1852:	89 81       	ldd	r24, Y+1	; 0x01
}
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	08 95       	ret

00001860 <Timer1_enuGetTimeElapsedNormalCounter>:

Timer1_StatusErrorType Timer1_enuGetTimeElapsedNormalCounter(u16* Address_Value){
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	00 d0       	rcall	.+0      	; 0x1866 <Timer1_enuGetTimeElapsedNormalCounter+0x6>
    1866:	1f 92       	push	r1
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	9b 83       	std	Y+3, r25	; 0x03
    186e:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1870:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Value){
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	9b 81       	ldd	r25, Y+3	; 0x03
    1876:	89 2b       	or	r24, r25
    1878:	19 f4       	brne	.+6      	; 0x1880 <Timer1_enuGetTimeElapsedNormalCounter+0x20>

		Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    187a:	82 e0       	ldi	r24, 0x02	; 2
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	1f c0       	rjmp	.+62     	; 0x18be <Timer1_enuGetTimeElapsedNormalCounter+0x5e>
	}
	else{
		*Address_Value=TCNT1L;
    1880:	8c e4       	ldi	r24, 0x4C	; 76
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	fc 01       	movw	r30, r24
    1886:	80 81       	ld	r24, Z
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	9b 81       	ldd	r25, Y+3	; 0x03
    1890:	fc 01       	movw	r30, r24
    1892:	31 83       	std	Z+1, r19	; 0x01
    1894:	20 83       	st	Z, r18
		*Address_Value|=(TCNT1H<<EIGHT_VALUE);
    1896:	8d e4       	ldi	r24, 0x4D	; 77
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	fc 01       	movw	r30, r24
    189c:	80 81       	ld	r24, Z
    189e:	88 2f       	mov	r24, r24
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	38 2f       	mov	r19, r24
    18a4:	22 27       	eor	r18, r18
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	9b 81       	ldd	r25, Y+3	; 0x03
    18aa:	fc 01       	movw	r30, r24
    18ac:	80 81       	ld	r24, Z
    18ae:	91 81       	ldd	r25, Z+1	; 0x01
    18b0:	28 2b       	or	r18, r24
    18b2:	39 2b       	or	r19, r25
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	9b 81       	ldd	r25, Y+3	; 0x03
    18b8:	fc 01       	movw	r30, r24
    18ba:	31 83       	std	Z+1, r19	; 0x01
    18bc:	20 83       	st	Z, r18
	}

	return Loc_enuTimer1Status;
    18be:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	08 95       	ret

000018cc <Timer1_enuGetTimeElapsedCompareChannelA>:
Timer1_StatusErrorType Timer1_enuGetTimeElapsedCompareChannelA(u16* Address_Value){
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <Timer1_enuGetTimeElapsedCompareChannelA+0x6>
    18d2:	1f 92       	push	r1
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	9b 83       	std	Y+3, r25	; 0x03
    18da:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    18dc:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Value){
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	9b 81       	ldd	r25, Y+3	; 0x03
    18e2:	89 2b       	or	r24, r25
    18e4:	19 f4       	brne	.+6      	; 0x18ec <Timer1_enuGetTimeElapsedCompareChannelA+0x20>

		Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	89 83       	std	Y+1, r24	; 0x01
    18ea:	1f c0       	rjmp	.+62     	; 0x192a <Timer1_enuGetTimeElapsedCompareChannelA+0x5e>
	}
	else{
		*Address_Value=OCR1AL;
    18ec:	8a e4       	ldi	r24, 0x4A	; 74
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	fc 01       	movw	r30, r24
    18f2:	80 81       	ld	r24, Z
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	9b 81       	ldd	r25, Y+3	; 0x03
    18fc:	fc 01       	movw	r30, r24
    18fe:	31 83       	std	Z+1, r19	; 0x01
    1900:	20 83       	st	Z, r18
		*Address_Value|=(OCR1AH<<EIGHT_VALUE);
    1902:	8b e4       	ldi	r24, 0x4B	; 75
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	fc 01       	movw	r30, r24
    1908:	80 81       	ld	r24, Z
    190a:	88 2f       	mov	r24, r24
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	38 2f       	mov	r19, r24
    1910:	22 27       	eor	r18, r18
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	9b 81       	ldd	r25, Y+3	; 0x03
    1916:	fc 01       	movw	r30, r24
    1918:	80 81       	ld	r24, Z
    191a:	91 81       	ldd	r25, Z+1	; 0x01
    191c:	28 2b       	or	r18, r24
    191e:	39 2b       	or	r19, r25
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	9b 81       	ldd	r25, Y+3	; 0x03
    1924:	fc 01       	movw	r30, r24
    1926:	31 83       	std	Z+1, r19	; 0x01
    1928:	20 83       	st	Z, r18
	}

	return Loc_enuTimer1Status;
    192a:	89 81       	ldd	r24, Y+1	; 0x01

}
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	08 95       	ret

00001938 <Timer1_enuGetTimeElapsedCompareChannelB>:

Timer1_StatusErrorType Timer1_enuGetTimeElapsedCompareChannelB(u16* Address_Value){
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	00 d0       	rcall	.+0      	; 0x193e <Timer1_enuGetTimeElapsedCompareChannelB+0x6>
    193e:	1f 92       	push	r1
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	9b 83       	std	Y+3, r25	; 0x03
    1946:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1948:	19 82       	std	Y+1, r1	; 0x01

				    if(NULL == Address_Value){
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	9b 81       	ldd	r25, Y+3	; 0x03
    194e:	89 2b       	or	r24, r25
    1950:	19 f4       	brne	.+6      	; 0x1958 <Timer1_enuGetTimeElapsedCompareChannelB+0x20>

				    	Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	1f c0       	rjmp	.+62     	; 0x1996 <Timer1_enuGetTimeElapsedCompareChannelB+0x5e>
				    }
				    else{
						*Address_Value=OCR1BL;
    1958:	88 e4       	ldi	r24, 0x48	; 72
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	fc 01       	movw	r30, r24
    195e:	80 81       	ld	r24, Z
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	9b 81       	ldd	r25, Y+3	; 0x03
    1968:	fc 01       	movw	r30, r24
    196a:	31 83       	std	Z+1, r19	; 0x01
    196c:	20 83       	st	Z, r18
						*Address_Value|=(OCR1BH<<EIGHT_VALUE);
    196e:	89 e4       	ldi	r24, 0x49	; 73
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	fc 01       	movw	r30, r24
    1974:	80 81       	ld	r24, Z
    1976:	88 2f       	mov	r24, r24
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	38 2f       	mov	r19, r24
    197c:	22 27       	eor	r18, r18
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	9b 81       	ldd	r25, Y+3	; 0x03
    1982:	fc 01       	movw	r30, r24
    1984:	80 81       	ld	r24, Z
    1986:	91 81       	ldd	r25, Z+1	; 0x01
    1988:	28 2b       	or	r18, r24
    198a:	39 2b       	or	r19, r25
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	9b 81       	ldd	r25, Y+3	; 0x03
    1990:	fc 01       	movw	r30, r24
    1992:	31 83       	std	Z+1, r19	; 0x01
    1994:	20 83       	st	Z, r18
				    }

				    return Loc_enuTimer1Status;
    1996:	89 81       	ldd	r24, Y+1	; 0x01

}
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	08 95       	ret

000019a4 <Timer1_enuGetTimeElapsedIcu>:

Timer1_StatusErrorType Timer1_enuGetTimeElapsedIcu(u16* Address_Value){
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <Timer1_enuGetTimeElapsedIcu+0x6>
    19aa:	1f 92       	push	r1
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	9b 83       	std	Y+3, r25	; 0x03
    19b2:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    19b4:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Value){
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ba:	89 2b       	or	r24, r25
    19bc:	19 f4       	brne	.+6      	; 0x19c4 <Timer1_enuGetTimeElapsedIcu+0x20>

		Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    19be:	82 e0       	ldi	r24, 0x02	; 2
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	1f c0       	rjmp	.+62     	; 0x1a02 <Timer1_enuGetTimeElapsedIcu+0x5e>
	}
	else{
		*Address_Value=ICR1L;
    19c4:	86 e4       	ldi	r24, 0x46	; 70
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	fc 01       	movw	r30, r24
    19ca:	80 81       	ld	r24, Z
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	9b 81       	ldd	r25, Y+3	; 0x03
    19d4:	fc 01       	movw	r30, r24
    19d6:	31 83       	std	Z+1, r19	; 0x01
    19d8:	20 83       	st	Z, r18
		*Address_Value|=(ICR1H<<EIGHT_VALUE);
    19da:	87 e4       	ldi	r24, 0x47	; 71
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	fc 01       	movw	r30, r24
    19e0:	80 81       	ld	r24, Z
    19e2:	88 2f       	mov	r24, r24
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	38 2f       	mov	r19, r24
    19e8:	22 27       	eor	r18, r18
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	9b 81       	ldd	r25, Y+3	; 0x03
    19ee:	fc 01       	movw	r30, r24
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	28 2b       	or	r18, r24
    19f6:	39 2b       	or	r19, r25
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	9b 81       	ldd	r25, Y+3	; 0x03
    19fc:	fc 01       	movw	r30, r24
    19fe:	31 83       	std	Z+1, r19	; 0x01
    1a00:	20 83       	st	Z, r18
	}

	return Loc_enuTimer1Status;
    1a02:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	08 95       	ret

00001a10 <Timer1_enuCtcForcePinImmediatlyChannelA>:




Timer1_StatusErrorType Timer1_enuCtcForcePinImmediatlyChannelA(void){
    1a10:	cf 93       	push	r28
    1a12:	df 93       	push	r29
    1a14:	1f 92       	push	r1
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1a1a:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(TCCR1A,TCCR1A_FOC1A_BIT);
    1a1c:	8f e4       	ldi	r24, 0x4F	; 79
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	2f e4       	ldi	r18, 0x4F	; 79
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	f9 01       	movw	r30, r18
    1a26:	20 81       	ld	r18, Z
    1a28:	28 60       	ori	r18, 0x08	; 8
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a30:	0f 90       	pop	r0
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	08 95       	ret

00001a38 <Timer1_enuCtcForcePinImmediatlyChannelB>:
Timer1_StatusErrorType Timer1_enuCtcForcePinImmediatlyChannelB(void){
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	1f 92       	push	r1
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1a42:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(TCCR1A,TCCR1A_FOC1B_BIT);
    1a44:	8f e4       	ldi	r24, 0x4F	; 79
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	2f e4       	ldi	r18, 0x4F	; 79
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	f9 01       	movw	r30, r18
    1a4e:	20 81       	ld	r18, Z
    1a50:	24 60       	ori	r18, 0x04	; 4
    1a52:	fc 01       	movw	r30, r24
    1a54:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a58:	0f 90       	pop	r0
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	08 95       	ret

00001a60 <Timer1_enuSetRisingEdgeIcu>:

Timer1_StatusErrorType Timer1_enuSetRisingEdgeIcu(void){
    1a60:	cf 93       	push	r28
    1a62:	df 93       	push	r29
    1a64:	1f 92       	push	r1
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1a6a:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(TCCR1B,TCCR1B_ICES1_BIT);
    1a6c:	8e e4       	ldi	r24, 0x4E	; 78
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	2e e4       	ldi	r18, 0x4E	; 78
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	f9 01       	movw	r30, r18
    1a76:	20 81       	ld	r18, Z
    1a78:	20 64       	ori	r18, 0x40	; 64
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a80:	0f 90       	pop	r0
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	08 95       	ret

00001a88 <Timer1_enuSetFailingEdgeIcu>:
Timer1_StatusErrorType Timer1_enuSetFailingEdgeIcu(void){
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	1f 92       	push	r1
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1a92:	19 82       	std	Y+1, r1	; 0x01
	CLEAR_BIT(TCCR1B,TCCR1B_ICES1_BIT);
    1a94:	8e e4       	ldi	r24, 0x4E	; 78
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	2e e4       	ldi	r18, 0x4E	; 78
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	f9 01       	movw	r30, r18
    1a9e:	20 81       	ld	r18, Z
    1aa0:	2f 7b       	andi	r18, 0xBF	; 191
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aa8:	0f 90       	pop	r0
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	08 95       	ret

00001ab0 <Timer1_enuToggleEdgeIcu>:
Timer1_StatusErrorType Timer1_enuToggleEdgeIcu(void){
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	1f 92       	push	r1
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1aba:	19 82       	std	Y+1, r1	; 0x01
	TOGGLE_BIT(TCCR1B,TCCR1B_ICES1_BIT);
    1abc:	8e e4       	ldi	r24, 0x4E	; 78
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	2e e4       	ldi	r18, 0x4E	; 78
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	f9 01       	movw	r30, r18
    1ac6:	30 81       	ld	r19, Z
    1ac8:	20 e4       	ldi	r18, 0x40	; 64
    1aca:	23 27       	eor	r18, r19
    1acc:	fc 01       	movw	r30, r24
    1ace:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad2:	0f 90       	pop	r0
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	08 95       	ret

00001ada <__vector_9>:
///////////////////////////////////////////////////////////////////////////////////////////

// ISR function For TIMER1 OverFlow
void __vector_9(void) __attribute__((signal));

void __vector_9(void){
    1ada:	1f 92       	push	r1
    1adc:	0f 92       	push	r0
    1ade:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1ae2:	0f 92       	push	r0
    1ae4:	11 24       	eor	r1, r1
    1ae6:	2f 93       	push	r18
    1ae8:	3f 93       	push	r19
    1aea:	4f 93       	push	r20
    1aec:	5f 93       	push	r21
    1aee:	6f 93       	push	r22
    1af0:	7f 93       	push	r23
    1af2:	8f 93       	push	r24
    1af4:	9f 93       	push	r25
    1af6:	af 93       	push	r26
    1af8:	bf 93       	push	r27
    1afa:	ef 93       	push	r30
    1afc:	ff 93       	push	r31
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62

//	Timer1_DisableOverviewInterrupt();



    if(NULL !=Timer1_OverflowInterruptHandler ){
    1b06:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <Timer1_OverflowInterruptHandler>
    1b0a:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <Timer1_OverflowInterruptHandler+0x1>
    1b0e:	89 2b       	or	r24, r25
    1b10:	61 f0       	breq	.+24     	; 0x1b2a <__vector_9+0x50>

    	Timer1_enuSetValueNormalCounter(Timer1_StaticU16InitValue);
    1b12:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <Timer1_StaticU16InitValue>
    1b16:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <Timer1_StaticU16InitValue+0x1>
    1b1a:	0e 94 b8 0b 	call	0x1770	; 0x1770 <Timer1_enuSetValueNormalCounter>
    	Timer1_OverflowInterruptHandler();
    1b1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <Timer1_OverflowInterruptHandler>
    1b22:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <Timer1_OverflowInterruptHandler+0x1>
    1b26:	fc 01       	movw	r30, r24
    1b28:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer1_EnableOverviewInterrupt();
}
    1b2a:	00 00       	nop
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	ff 91       	pop	r31
    1b32:	ef 91       	pop	r30
    1b34:	bf 91       	pop	r27
    1b36:	af 91       	pop	r26
    1b38:	9f 91       	pop	r25
    1b3a:	8f 91       	pop	r24
    1b3c:	7f 91       	pop	r23
    1b3e:	6f 91       	pop	r22
    1b40:	5f 91       	pop	r21
    1b42:	4f 91       	pop	r20
    1b44:	3f 91       	pop	r19
    1b46:	2f 91       	pop	r18
    1b48:	0f 90       	pop	r0
    1b4a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1b4e:	0f 90       	pop	r0
    1b50:	1f 90       	pop	r1
    1b52:	18 95       	reti

00001b54 <__vector_6>:


// ISR function For TIMER1 ICU
void __vector_6(void) __attribute__((signal));

void __vector_6(void){
    1b54:	1f 92       	push	r1
    1b56:	0f 92       	push	r0
    1b58:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1b5c:	0f 92       	push	r0
    1b5e:	11 24       	eor	r1, r1
    1b60:	2f 93       	push	r18
    1b62:	3f 93       	push	r19
    1b64:	4f 93       	push	r20
    1b66:	5f 93       	push	r21
    1b68:	6f 93       	push	r22
    1b6a:	7f 93       	push	r23
    1b6c:	8f 93       	push	r24
    1b6e:	9f 93       	push	r25
    1b70:	af 93       	push	r26
    1b72:	bf 93       	push	r27
    1b74:	ef 93       	push	r30
    1b76:	ff 93       	push	r31
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62

//	Timer1_DisableOverviewInterrupt();



    if(NULL !=Timer1_IcuInterruptHandler ){
    1b80:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <Timer1_IcuInterruptHandler>
    1b84:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <Timer1_IcuInterruptHandler+0x1>
    1b88:	89 2b       	or	r24, r25
    1b8a:	31 f0       	breq	.+12     	; 0x1b98 <__vector_6+0x44>

    	Timer1_IcuInterruptHandler();
    1b8c:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <Timer1_IcuInterruptHandler>
    1b90:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <Timer1_IcuInterruptHandler+0x1>
    1b94:	fc 01       	movw	r30, r24
    1b96:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer1_EnableOverviewInterrupt();
}
    1b98:	00 00       	nop
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	ff 91       	pop	r31
    1ba0:	ef 91       	pop	r30
    1ba2:	bf 91       	pop	r27
    1ba4:	af 91       	pop	r26
    1ba6:	9f 91       	pop	r25
    1ba8:	8f 91       	pop	r24
    1baa:	7f 91       	pop	r23
    1bac:	6f 91       	pop	r22
    1bae:	5f 91       	pop	r21
    1bb0:	4f 91       	pop	r20
    1bb2:	3f 91       	pop	r19
    1bb4:	2f 91       	pop	r18
    1bb6:	0f 90       	pop	r0
    1bb8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1bbc:	0f 90       	pop	r0
    1bbe:	1f 90       	pop	r1
    1bc0:	18 95       	reti

00001bc2 <__vector_8>:


// ISR function For TIMER1 Compare Channel B
void __vector_8(void) __attribute__((signal));

void __vector_8(void){
    1bc2:	1f 92       	push	r1
    1bc4:	0f 92       	push	r0
    1bc6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1bca:	0f 92       	push	r0
    1bcc:	11 24       	eor	r1, r1
    1bce:	2f 93       	push	r18
    1bd0:	3f 93       	push	r19
    1bd2:	4f 93       	push	r20
    1bd4:	5f 93       	push	r21
    1bd6:	6f 93       	push	r22
    1bd8:	7f 93       	push	r23
    1bda:	8f 93       	push	r24
    1bdc:	9f 93       	push	r25
    1bde:	af 93       	push	r26
    1be0:	bf 93       	push	r27
    1be2:	ef 93       	push	r30
    1be4:	ff 93       	push	r31
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62

//	Timer1_DisableOverviewInterrupt();



    if(NULL !=Timer1_CompareChannelBInterruptHandler ){
    1bee:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <Timer1_CompareChannelBInterruptHandler>
    1bf2:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <Timer1_CompareChannelBInterruptHandler+0x1>
    1bf6:	89 2b       	or	r24, r25
    1bf8:	31 f0       	breq	.+12     	; 0x1c06 <__vector_8+0x44>

    	Timer1_CompareChannelBInterruptHandler();
    1bfa:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <Timer1_CompareChannelBInterruptHandler>
    1bfe:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <Timer1_CompareChannelBInterruptHandler+0x1>
    1c02:	fc 01       	movw	r30, r24
    1c04:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer1_EnableOverviewInterrupt();
}
    1c06:	00 00       	nop
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	ff 91       	pop	r31
    1c0e:	ef 91       	pop	r30
    1c10:	bf 91       	pop	r27
    1c12:	af 91       	pop	r26
    1c14:	9f 91       	pop	r25
    1c16:	8f 91       	pop	r24
    1c18:	7f 91       	pop	r23
    1c1a:	6f 91       	pop	r22
    1c1c:	5f 91       	pop	r21
    1c1e:	4f 91       	pop	r20
    1c20:	3f 91       	pop	r19
    1c22:	2f 91       	pop	r18
    1c24:	0f 90       	pop	r0
    1c26:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1c2a:	0f 90       	pop	r0
    1c2c:	1f 90       	pop	r1
    1c2e:	18 95       	reti

00001c30 <__vector_7>:


// ISR function For TIMER1 Compare Channel A
void __vector_7(void) __attribute__((signal));

void __vector_7(void){
    1c30:	1f 92       	push	r1
    1c32:	0f 92       	push	r0
    1c34:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1c38:	0f 92       	push	r0
    1c3a:	11 24       	eor	r1, r1
    1c3c:	2f 93       	push	r18
    1c3e:	3f 93       	push	r19
    1c40:	4f 93       	push	r20
    1c42:	5f 93       	push	r21
    1c44:	6f 93       	push	r22
    1c46:	7f 93       	push	r23
    1c48:	8f 93       	push	r24
    1c4a:	9f 93       	push	r25
    1c4c:	af 93       	push	r26
    1c4e:	bf 93       	push	r27
    1c50:	ef 93       	push	r30
    1c52:	ff 93       	push	r31
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62

//	Timer1_DisableOverviewInterrupt();



    if(NULL !=Timer1_CompareChannelAInterruptHandler ){
    1c5c:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <Timer1_CompareChannelAInterruptHandler>
    1c60:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <Timer1_CompareChannelAInterruptHandler+0x1>
    1c64:	89 2b       	or	r24, r25
    1c66:	31 f0       	breq	.+12     	; 0x1c74 <__vector_7+0x44>

    	Timer1_CompareChannelAInterruptHandler();
    1c68:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <Timer1_CompareChannelAInterruptHandler>
    1c6c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <Timer1_CompareChannelAInterruptHandler+0x1>
    1c70:	fc 01       	movw	r30, r24
    1c72:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer1_EnableOverviewInterrupt();
}
    1c74:	00 00       	nop
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
    1c7a:	ff 91       	pop	r31
    1c7c:	ef 91       	pop	r30
    1c7e:	bf 91       	pop	r27
    1c80:	af 91       	pop	r26
    1c82:	9f 91       	pop	r25
    1c84:	8f 91       	pop	r24
    1c86:	7f 91       	pop	r23
    1c88:	6f 91       	pop	r22
    1c8a:	5f 91       	pop	r21
    1c8c:	4f 91       	pop	r20
    1c8e:	3f 91       	pop	r19
    1c90:	2f 91       	pop	r18
    1c92:	0f 90       	pop	r0
    1c94:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1c98:	0f 90       	pop	r0
    1c9a:	1f 90       	pop	r1
    1c9c:	18 95       	reti

00001c9e <Timer0_enuInit>:
static  u8 Timer0_InitValue;
/********************************** Software Interfaces Declarations *******************/



Timer0_StatusErrorType Timer0_enuInit(const Timer0_ConfigType* Address_Timer0){
    1c9e:	cf 93       	push	r28
    1ca0:	df 93       	push	r29
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <Timer0_enuInit+0x6>
    1ca4:	1f 92       	push	r1
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	9b 83       	std	Y+3, r25	; 0x03
    1cac:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb6:	89 2b       	or	r24, r25
    1cb8:	19 f4       	brne	.+6      	; 0x1cc0 <Timer0_enuInit+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    1cba:	82 e0       	ldi	r24, 0x02	; 2
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	97 c0       	rjmp	.+302    	; 0x1dee <Timer0_enuInit+0x150>
		    }
		    else{

		    	/* Disable Timer0 Peripheral */
		    	        Timer0_Disable();
    1cc0:	83 e5       	ldi	r24, 0x53	; 83
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	23 e5       	ldi	r18, 0x53	; 83
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	f9 01       	movw	r30, r18
    1cca:	20 81       	ld	r18, Z
    1ccc:	28 7f       	andi	r18, 0xF8	; 248
    1cce:	fc 01       	movw	r30, r24
    1cd0:	20 83       	st	Z, r18

		    	        /* Select Mode timer */
		    	        Timer0_SelectMode((Address_Timer0->select_mode));
    1cd2:	83 e5       	ldi	r24, 0x53	; 83
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	23 e5       	ldi	r18, 0x53	; 83
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	f9 01       	movw	r30, r18
    1cdc:	20 81       	ld	r18, Z
    1cde:	42 2f       	mov	r20, r18
    1ce0:	4f 7b       	andi	r20, 0xBF	; 191
    1ce2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ce4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ce6:	f9 01       	movw	r30, r18
    1ce8:	21 81       	ldd	r18, Z+1	; 0x01
    1cea:	22 2f       	mov	r18, r18
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	21 70       	andi	r18, 0x01	; 1
    1cf0:	33 27       	eor	r19, r19
    1cf2:	00 24       	eor	r0, r0
    1cf4:	36 95       	lsr	r19
    1cf6:	27 95       	ror	r18
    1cf8:	07 94       	ror	r0
    1cfa:	36 95       	lsr	r19
    1cfc:	27 95       	ror	r18
    1cfe:	07 94       	ror	r0
    1d00:	32 2f       	mov	r19, r18
    1d02:	20 2d       	mov	r18, r0
    1d04:	24 2b       	or	r18, r20
    1d06:	fc 01       	movw	r30, r24
    1d08:	20 83       	st	Z, r18
    1d0a:	83 e5       	ldi	r24, 0x53	; 83
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	23 e5       	ldi	r18, 0x53	; 83
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	f9 01       	movw	r30, r18
    1d14:	20 81       	ld	r18, Z
    1d16:	42 2f       	mov	r20, r18
    1d18:	47 7f       	andi	r20, 0xF7	; 247
    1d1a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d1c:	3b 81       	ldd	r19, Y+3	; 0x03
    1d1e:	f9 01       	movw	r30, r18
    1d20:	21 81       	ldd	r18, Z+1	; 0x01
    1d22:	26 95       	lsr	r18
    1d24:	22 2f       	mov	r18, r18
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	21 70       	andi	r18, 0x01	; 1
    1d2a:	33 27       	eor	r19, r19
    1d2c:	22 0f       	add	r18, r18
    1d2e:	33 1f       	adc	r19, r19
    1d30:	22 0f       	add	r18, r18
    1d32:	33 1f       	adc	r19, r19
    1d34:	22 0f       	add	r18, r18
    1d36:	33 1f       	adc	r19, r19
    1d38:	24 2b       	or	r18, r20
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	20 83       	st	Z, r18
    1d3e:	83 e5       	ldi	r24, 0x53	; 83
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	23 e5       	ldi	r18, 0x53	; 83
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	f9 01       	movw	r30, r18
    1d48:	20 81       	ld	r18, Z
    1d4a:	42 2f       	mov	r20, r18
    1d4c:	4f 7e       	andi	r20, 0xEF	; 239
    1d4e:	2a 81       	ldd	r18, Y+2	; 0x02
    1d50:	3b 81       	ldd	r19, Y+3	; 0x03
    1d52:	f9 01       	movw	r30, r18
    1d54:	21 81       	ldd	r18, Z+1	; 0x01
    1d56:	26 95       	lsr	r18
    1d58:	26 95       	lsr	r18
    1d5a:	22 2f       	mov	r18, r18
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	21 70       	andi	r18, 0x01	; 1
    1d60:	33 27       	eor	r19, r19
    1d62:	22 95       	swap	r18
    1d64:	32 95       	swap	r19
    1d66:	30 7f       	andi	r19, 0xF0	; 240
    1d68:	32 27       	eor	r19, r18
    1d6a:	20 7f       	andi	r18, 0xF0	; 240
    1d6c:	32 27       	eor	r19, r18
    1d6e:	24 2b       	or	r18, r20
    1d70:	fc 01       	movw	r30, r24
    1d72:	20 83       	st	Z, r18
    1d74:	83 e5       	ldi	r24, 0x53	; 83
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	23 e5       	ldi	r18, 0x53	; 83
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	f9 01       	movw	r30, r18
    1d7e:	20 81       	ld	r18, Z
    1d80:	42 2f       	mov	r20, r18
    1d82:	4f 7d       	andi	r20, 0xDF	; 223
    1d84:	2a 81       	ldd	r18, Y+2	; 0x02
    1d86:	3b 81       	ldd	r19, Y+3	; 0x03
    1d88:	f9 01       	movw	r30, r18
    1d8a:	21 81       	ldd	r18, Z+1	; 0x01
    1d8c:	26 95       	lsr	r18
    1d8e:	26 95       	lsr	r18
    1d90:	26 95       	lsr	r18
    1d92:	22 2f       	mov	r18, r18
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	21 70       	andi	r18, 0x01	; 1
    1d98:	33 27       	eor	r19, r19
    1d9a:	22 0f       	add	r18, r18
    1d9c:	33 1f       	adc	r19, r19
    1d9e:	22 95       	swap	r18
    1da0:	32 95       	swap	r19
    1da2:	30 7f       	andi	r19, 0xF0	; 240
    1da4:	32 27       	eor	r19, r18
    1da6:	20 7f       	andi	r18, 0xF0	; 240
    1da8:	32 27       	eor	r19, r18
    1daa:	24 2b       	or	r18, r20
    1dac:	fc 01       	movw	r30, r24
    1dae:	20 83       	st	Z, r18

		    	        Timer0_InitValue = Address_Timer0->init_value;
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	9b 81       	ldd	r25, Y+3	; 0x03
    1db4:	fc 01       	movw	r30, r24
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <Timer0_InitValue>
		    	        /* Update Init Value*/
		    	       Loc_enuTimer0Status= Timer0_enuSetValue(Address_Timer0, Address_Timer0->init_value);
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	22 81       	ldd	r18, Z+2	; 0x02
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc8:	62 2f       	mov	r22, r18
    1dca:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <Timer0_enuSetValue>
    1dce:	89 83       	std	Y+1, r24	; 0x01

		    	        /* Enable Timer0 Peripheral */
		    	        Timer0_Enable(Address_Timer0->prescaler_value);
    1dd0:	83 e5       	ldi	r24, 0x53	; 83
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	23 e5       	ldi	r18, 0x53	; 83
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	f9 01       	movw	r30, r18
    1dda:	20 81       	ld	r18, Z
    1ddc:	42 2f       	mov	r20, r18
    1dde:	48 7f       	andi	r20, 0xF8	; 248
    1de0:	2a 81       	ldd	r18, Y+2	; 0x02
    1de2:	3b 81       	ldd	r19, Y+3	; 0x03
    1de4:	f9 01       	movw	r30, r18
    1de6:	20 81       	ld	r18, Z
    1de8:	24 2b       	or	r18, r20
    1dea:	fc 01       	movw	r30, r24
    1dec:	20 83       	st	Z, r18

		    }

		    return Loc_enuTimer0Status;
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	df 91       	pop	r29
    1df8:	cf 91       	pop	r28
    1dfa:	08 95       	ret

00001dfc <Timer0_enuDeInit>:

Timer0_StatusErrorType Timer0_enuDeInit(const Timer0_ConfigType* Address_Timer0){
    1dfc:	cf 93       	push	r28
    1dfe:	df 93       	push	r29
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <Timer0_enuDeInit+0x6>
    1e02:	1f 92       	push	r1
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	9b 83       	std	Y+3, r25	; 0x03
    1e0a:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	9b 81       	ldd	r25, Y+3	; 0x03
    1e14:	89 2b       	or	r24, r25
    1e16:	19 f4       	brne	.+6      	; 0x1e1e <Timer0_enuDeInit+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    1e18:	82 e0       	ldi	r24, 0x02	; 2
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	09 c0       	rjmp	.+18     	; 0x1e30 <Timer0_enuDeInit+0x34>
		    }
		    else{

		    	/* Disable Timer0 Peripheral */
		    	Timer0_Disable();
    1e1e:	83 e5       	ldi	r24, 0x53	; 83
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	23 e5       	ldi	r18, 0x53	; 83
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	f9 01       	movw	r30, r18
    1e28:	20 81       	ld	r18, Z
    1e2a:	28 7f       	andi	r18, 0xF8	; 248
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	20 83       	st	Z, r18

		    }

		    return Loc_enuTimer0Status;
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	08 95       	ret

00001e3e <Timer0_enuEnableInterrupt>:

Timer0_StatusErrorType Timer0_enuEnableInterrupt(const Timer0_ConfigType* Address_Timer0){
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <Timer0_enuEnableInterrupt+0x6>
    1e44:	1f 92       	push	r1
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	9b 83       	std	Y+3, r25	; 0x03
    1e4c:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	9b 81       	ldd	r25, Y+3	; 0x03
    1e56:	89 2b       	or	r24, r25
    1e58:	19 f4       	brne	.+6      	; 0x1e60 <Timer0_enuEnableInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	19 c0       	rjmp	.+50     	; 0x1e92 <Timer0_enuEnableInterrupt+0x54>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	9b 81       	ldd	r25, Y+3	; 0x03
    1e64:	fc 01       	movw	r30, r24
    1e66:	81 81       	ldd	r24, Z+1	; 0x01
    1e68:	88 23       	and	r24, r24
    1e6a:	51 f4       	brne	.+20     	; 0x1e80 <Timer0_enuEnableInterrupt+0x42>

		    		Timer0_EnableOverviewInterrupt();
    1e6c:	89 e5       	ldi	r24, 0x59	; 89
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	29 e5       	ldi	r18, 0x59	; 89
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	f9 01       	movw	r30, r18
    1e76:	20 81       	ld	r18, Z
    1e78:	21 60       	ori	r18, 0x01	; 1
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	20 83       	st	Z, r18
    1e7e:	09 c0       	rjmp	.+18     	; 0x1e92 <Timer0_enuEnableInterrupt+0x54>


		    	}
		    	else{
		    		Timer0_EnableComparePwmInterrupt();
    1e80:	89 e5       	ldi	r24, 0x59	; 89
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	29 e5       	ldi	r18, 0x59	; 89
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	f9 01       	movw	r30, r18
    1e8a:	20 81       	ld	r18, Z
    1e8c:	22 60       	ori	r18, 0x02	; 2
    1e8e:	fc 01       	movw	r30, r24
    1e90:	20 83       	st	Z, r18
		    	}

		    }

		    return Loc_enuTimer0Status;
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	08 95       	ret

00001ea0 <Timer0_enuDisableInterrupt>:

Timer0_StatusErrorType Timer0_enuDisableInterrupt(const Timer0_ConfigType* Address_Timer0){
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	00 d0       	rcall	.+0      	; 0x1ea6 <Timer0_enuDisableInterrupt+0x6>
    1ea6:	1f 92       	push	r1
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
    1eac:	9b 83       	std	Y+3, r25	; 0x03
    1eae:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb8:	89 2b       	or	r24, r25
    1eba:	19 f4       	brne	.+6      	; 0x1ec2 <Timer0_enuDisableInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    1ebc:	82 e0       	ldi	r24, 0x02	; 2
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	19 c0       	rjmp	.+50     	; 0x1ef4 <Timer0_enuDisableInterrupt+0x54>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	81 81       	ldd	r24, Z+1	; 0x01
    1eca:	88 23       	and	r24, r24
    1ecc:	51 f4       	brne	.+20     	; 0x1ee2 <Timer0_enuDisableInterrupt+0x42>

		    		Timer0_DisableOverviewInterrupt();
    1ece:	89 e5       	ldi	r24, 0x59	; 89
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	29 e5       	ldi	r18, 0x59	; 89
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	f9 01       	movw	r30, r18
    1ed8:	20 81       	ld	r18, Z
    1eda:	2e 7f       	andi	r18, 0xFE	; 254
    1edc:	fc 01       	movw	r30, r24
    1ede:	20 83       	st	Z, r18
    1ee0:	09 c0       	rjmp	.+18     	; 0x1ef4 <Timer0_enuDisableInterrupt+0x54>


		    	}
		    	else{
		    		Timer0_DisbleComparePwmInterrupt();
    1ee2:	89 e5       	ldi	r24, 0x59	; 89
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	29 e5       	ldi	r18, 0x59	; 89
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	f9 01       	movw	r30, r18
    1eec:	20 81       	ld	r18, Z
    1eee:	2d 7f       	andi	r18, 0xFD	; 253
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	20 83       	st	Z, r18
		    	}

		    }

		    return Loc_enuTimer0Status;
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	df 91       	pop	r29
    1efe:	cf 91       	pop	r28
    1f00:	08 95       	ret

00001f02 <Timer0_enuSetValue>:


Timer0_StatusErrorType Timer0_enuSetValue(const Timer0_ConfigType* Address_Timer0, u8 Copy_u8Value){
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <Timer0_enuSetValue+0x6>
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <Timer0_enuSetValue+0x8>
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	9b 83       	std	Y+3, r25	; 0x03
    1f10:	8a 83       	std	Y+2, r24	; 0x02
    1f12:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f1c:	89 2b       	or	r24, r25
    1f1e:	19 f4       	brne	.+6      	; 0x1f26 <Timer0_enuSetValue+0x24>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    1f20:	82 e0       	ldi	r24, 0x02	; 2
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	11 c0       	rjmp	.+34     	; 0x1f48 <Timer0_enuSetValue+0x46>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	81 81       	ldd	r24, Z+1	; 0x01
    1f2e:	88 23       	and	r24, r24
    1f30:	31 f4       	brne	.+12     	; 0x1f3e <Timer0_enuSetValue+0x3c>



		    		ASSIGN_REG(TCNT0,Copy_u8Value);
    1f32:	82 e5       	ldi	r24, 0x52	; 82
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	2c 81       	ldd	r18, Y+4	; 0x04
    1f38:	fc 01       	movw	r30, r24
    1f3a:	20 83       	st	Z, r18
    1f3c:	05 c0       	rjmp	.+10     	; 0x1f48 <Timer0_enuSetValue+0x46>

		    	}
		    	else{
		    		ASSIGN_REG(OCR0,Copy_u8Value);
    1f3e:	8c e5       	ldi	r24, 0x5C	; 92
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	2c 81       	ldd	r18, Y+4	; 0x04
    1f44:	fc 01       	movw	r30, r24
    1f46:	20 83       	st	Z, r18



		    }

		    return Loc_enuTimer0Status;
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	df 91       	pop	r29
    1f54:	cf 91       	pop	r28
    1f56:	08 95       	ret

00001f58 <Timer0_enuGetTimeElapsed>:
Timer0_StatusErrorType Timer0_enuGetTimeElapsed(const Timer0_ConfigType* Address_Timer0, u16* Address_Value){
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	00 d0       	rcall	.+0      	; 0x1f5e <Timer0_enuGetTimeElapsed+0x6>
    1f5e:	00 d0       	rcall	.+0      	; 0x1f60 <Timer0_enuGetTimeElapsed+0x8>
    1f60:	1f 92       	push	r1
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	9b 83       	std	Y+3, r25	; 0x03
    1f68:	8a 83       	std	Y+2, r24	; 0x02
    1f6a:	7d 83       	std	Y+5, r23	; 0x05
    1f6c:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	9b 81       	ldd	r25, Y+3	; 0x03
    1f76:	89 2b       	or	r24, r25
    1f78:	19 f4       	brne	.+6      	; 0x1f80 <Timer0_enuGetTimeElapsed+0x28>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    1f7a:	82 e0       	ldi	r24, 0x02	; 2
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	0b c0       	rjmp	.+22     	; 0x1f96 <Timer0_enuGetTimeElapsed+0x3e>
		    }
		    else{

		    	*Address_Value = TCNT0;
    1f80:	82 e5       	ldi	r24, 0x52	; 82
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	fc 01       	movw	r30, r24
    1f86:	80 81       	ld	r24, Z
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f90:	fc 01       	movw	r30, r24
    1f92:	31 83       	std	Z+1, r19	; 0x01
    1f94:	20 83       	st	Z, r18
		    }

		    return Loc_enuTimer0Status;
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	df 91       	pop	r29
    1fa4:	cf 91       	pop	r28
    1fa6:	08 95       	ret

00001fa8 <Timer0_enuGetRemaining>:
Timer0_StatusErrorType Timer0_enuGetRemaining(const Timer0_ConfigType* Address_Timer0, u16* Address_Value){
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	00 d0       	rcall	.+0      	; 0x1fae <Timer0_enuGetRemaining+0x6>
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <Timer0_enuGetRemaining+0x8>
    1fb0:	1f 92       	push	r1
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
    1fb6:	9b 83       	std	Y+3, r25	; 0x03
    1fb8:	8a 83       	std	Y+2, r24	; 0x02
    1fba:	7d 83       	std	Y+5, r23	; 0x05
    1fbc:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc6:	89 2b       	or	r24, r25
    1fc8:	11 f4       	brne	.+4      	; 0x1fce <Timer0_enuGetRemaining+0x26>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    1fca:	82 e0       	ldi	r24, 0x02	; 2
    1fcc:	89 83       	std	Y+1, r24	; 0x01
		    else{


		    }

		    return Loc_enuTimer0Status;
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	df 91       	pop	r29
    1fdc:	cf 91       	pop	r28
    1fde:	08 95       	ret

00001fe0 <Timer0_enuSetCallbackFunction>:


Timer0_StatusErrorType Timer0_enuSetCallbackFunction(const Timer0_ConfigType* Address_Timer0,void (*callback)(void)){
    1fe0:	cf 93       	push	r28
    1fe2:	df 93       	push	r29
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <Timer0_enuSetCallbackFunction+0x6>
    1fe6:	00 d0       	rcall	.+0      	; 0x1fe8 <Timer0_enuSetCallbackFunction+0x8>
    1fe8:	1f 92       	push	r1
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	9b 83       	std	Y+3, r25	; 0x03
    1ff0:	8a 83       	std	Y+2, r24	; 0x02
    1ff2:	7d 83       	std	Y+5, r23	; 0x05
    1ff4:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffe:	89 2b       	or	r24, r25
    2000:	19 f4       	brne	.+6      	; 0x2008 <Timer0_enuSetCallbackFunction+0x28>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    2002:	82 e0       	ldi	r24, 0x02	; 2
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	13 c0       	rjmp	.+38     	; 0x202e <Timer0_enuSetCallbackFunction+0x4e>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	9b 81       	ldd	r25, Y+3	; 0x03
    200c:	fc 01       	movw	r30, r24
    200e:	81 81       	ldd	r24, Z+1	; 0x01
    2010:	88 23       	and	r24, r24
    2012:	39 f4       	brne	.+14     	; 0x2022 <Timer0_enuSetCallbackFunction+0x42>

		    		Timer0_OverflowInterruptHandler = callback;
    2014:	8c 81       	ldd	r24, Y+4	; 0x04
    2016:	9d 81       	ldd	r25, Y+5	; 0x05
    2018:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <Timer0_OverflowInterruptHandler+0x1>
    201c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <Timer0_OverflowInterruptHandler>
    2020:	06 c0       	rjmp	.+12     	; 0x202e <Timer0_enuSetCallbackFunction+0x4e>


		    	}
		    	else{
		    		Timer0_CompareInterruptHandler = callback;
    2022:	8c 81       	ldd	r24, Y+4	; 0x04
    2024:	9d 81       	ldd	r25, Y+5	; 0x05
    2026:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <Timer0_CompareInterruptHandler+0x1>
    202a:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <Timer0_CompareInterruptHandler>
		    	}


		    }

		    return Loc_enuTimer0Status;
    202e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	df 91       	pop	r29
    203c:	cf 91       	pop	r28
    203e:	08 95       	ret

00002040 <Timer0_enuEnableOverflowInterrupt>:

Timer0_StatusErrorType Timer0_enuEnableOverflowInterrupt(void){
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	1f 92       	push	r1
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	89 83       	std	Y+1, r24	; 0x01

			Timer0_EnableOverviewInterrupt();
    204e:	89 e5       	ldi	r24, 0x59	; 89
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	29 e5       	ldi	r18, 0x59	; 89
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	f9 01       	movw	r30, r18
    2058:	20 81       	ld	r18, Z
    205a:	21 60       	ori	r18, 0x01	; 1
    205c:	fc 01       	movw	r30, r24
    205e:	20 83       	st	Z, r18

		    return Loc_enuTimer0Status;
    2060:	89 81       	ldd	r24, Y+1	; 0x01
}
    2062:	0f 90       	pop	r0
    2064:	df 91       	pop	r29
    2066:	cf 91       	pop	r28
    2068:	08 95       	ret

0000206a <Timer0_enuEnableCaptureInterrupt>:

Timer0_StatusErrorType Timer0_enuEnableCaptureInterrupt(void){
    206a:	cf 93       	push	r28
    206c:	df 93       	push	r29
    206e:	1f 92       	push	r1
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	89 83       	std	Y+1, r24	; 0x01

			Timer0_EnableComparePwmInterrupt();
    2078:	89 e5       	ldi	r24, 0x59	; 89
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	29 e5       	ldi	r18, 0x59	; 89
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	f9 01       	movw	r30, r18
    2082:	20 81       	ld	r18, Z
    2084:	22 60       	ori	r18, 0x02	; 2
    2086:	fc 01       	movw	r30, r24
    2088:	20 83       	st	Z, r18

		    return Loc_enuTimer0Status;
    208a:	89 81       	ldd	r24, Y+1	; 0x01
}
    208c:	0f 90       	pop	r0
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	08 95       	ret

00002094 <Timer0_enuSetCallbackOverflowInterrupt>:


Timer0_StatusErrorType Timer0_enuSetCallbackOverflowInterrupt(void (*callback)(void)){
    2094:	cf 93       	push	r28
    2096:	df 93       	push	r29
    2098:	00 d0       	rcall	.+0      	; 0x209a <Timer0_enuSetCallbackOverflowInterrupt+0x6>
    209a:	1f 92       	push	r1
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	9b 83       	std	Y+3, r25	; 0x03
    20a2:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == callback){
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	9b 81       	ldd	r25, Y+3	; 0x03
    20ac:	89 2b       	or	r24, r25
    20ae:	19 f4       	brne	.+6      	; 0x20b6 <Timer0_enuSetCallbackOverflowInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    20b0:	82 e0       	ldi	r24, 0x02	; 2
    20b2:	89 83       	std	Y+1, r24	; 0x01
    20b4:	06 c0       	rjmp	.+12     	; 0x20c2 <Timer0_enuSetCallbackOverflowInterrupt+0x2e>
		    }

		    else{
		    		Timer0_OverflowInterruptHandler = callback;
    20b6:	8a 81       	ldd	r24, Y+2	; 0x02
    20b8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ba:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <Timer0_OverflowInterruptHandler+0x1>
    20be:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <Timer0_OverflowInterruptHandler>


		    }

		    return Loc_enuTimer0Status;
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	df 91       	pop	r29
    20cc:	cf 91       	pop	r28
    20ce:	08 95       	ret

000020d0 <Timer0_enuSetCallbackCompareInterrupt>:
Timer0_StatusErrorType Timer0_enuSetCallbackCompareInterrupt(void (*callback)(void)){
    20d0:	cf 93       	push	r28
    20d2:	df 93       	push	r29
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <Timer0_enuSetCallbackCompareInterrupt+0x6>
    20d6:	1f 92       	push	r1
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	9b 83       	std	Y+3, r25	; 0x03
    20de:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == callback){
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	9b 81       	ldd	r25, Y+3	; 0x03
    20e8:	89 2b       	or	r24, r25
    20ea:	19 f4       	brne	.+6      	; 0x20f2 <Timer0_enuSetCallbackCompareInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    20ec:	82 e0       	ldi	r24, 0x02	; 2
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	06 c0       	rjmp	.+12     	; 0x20fe <Timer0_enuSetCallbackCompareInterrupt+0x2e>
		    }

		    else{
		    		Timer0_CompareInterruptHandler = callback;
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	9b 81       	ldd	r25, Y+3	; 0x03
    20f6:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <Timer0_CompareInterruptHandler+0x1>
    20fa:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <Timer0_CompareInterruptHandler>


		    }

		    return Loc_enuTimer0Status;
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	08 95       	ret

0000210c <Timer0_enuDisableOverflowInterrupt>:


Timer0_StatusErrorType Timer0_enuDisableOverflowInterrupt(void){
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
    2110:	1f 92       	push	r1
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	89 83       	std	Y+1, r24	; 0x01

			Timer0_DisableOverviewInterrupt();
    211a:	89 e5       	ldi	r24, 0x59	; 89
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	29 e5       	ldi	r18, 0x59	; 89
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	f9 01       	movw	r30, r18
    2124:	20 81       	ld	r18, Z
    2126:	2e 7f       	andi	r18, 0xFE	; 254
    2128:	fc 01       	movw	r30, r24
    212a:	20 83       	st	Z, r18

		    return Loc_enuTimer0Status;
    212c:	89 81       	ldd	r24, Y+1	; 0x01
}
    212e:	0f 90       	pop	r0
    2130:	df 91       	pop	r29
    2132:	cf 91       	pop	r28
    2134:	08 95       	ret

00002136 <Timer0_enuDisableCaptureInterrupt>:

Timer0_StatusErrorType Timer0_enuDisableCaptureInterrupt(void){
    2136:	cf 93       	push	r28
    2138:	df 93       	push	r29
    213a:	1f 92       	push	r1
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62

		Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	89 83       	std	Y+1, r24	; 0x01

	  	Timer0_DisbleComparePwmInterrupt();
    2144:	89 e5       	ldi	r24, 0x59	; 89
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	29 e5       	ldi	r18, 0x59	; 89
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	f9 01       	movw	r30, r18
    214e:	20 81       	ld	r18, Z
    2150:	2d 7f       	andi	r18, 0xFD	; 253
    2152:	fc 01       	movw	r30, r24
    2154:	20 83       	st	Z, r18

			    return Loc_enuTimer0Status;
    2156:	89 81       	ldd	r24, Y+1	; 0x01

}
    2158:	0f 90       	pop	r0
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	08 95       	ret

00002160 <Timer0_enuCtcForcePinImmediatly>:



Timer0_StatusErrorType Timer0_enuCtcForcePinImmediatly(const Timer0_ConfigType* Address_Timer0){
    2160:	cf 93       	push	r28
    2162:	df 93       	push	r29
    2164:	00 d0       	rcall	.+0      	; 0x2166 <Timer0_enuCtcForcePinImmediatly+0x6>
    2166:	1f 92       	push	r1
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	9b 83       	std	Y+3, r25	; 0x03
    216e:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	9b 81       	ldd	r25, Y+3	; 0x03
    2178:	89 2b       	or	r24, r25
    217a:	19 f4       	brne	.+6      	; 0x2182 <Timer0_enuCtcForcePinImmediatly+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    217c:	82 e0       	ldi	r24, 0x02	; 2
    217e:	89 83       	std	Y+1, r24	; 0x01
    2180:	09 c0       	rjmp	.+18     	; 0x2194 <Timer0_enuCtcForcePinImmediatly+0x34>
		    }
		    else{

		    	SET_BIT(TCCR0,FOC0_BIT);
    2182:	83 e5       	ldi	r24, 0x53	; 83
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	23 e5       	ldi	r18, 0x53	; 83
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	f9 01       	movw	r30, r18
    218c:	20 81       	ld	r18, Z
    218e:	20 68       	ori	r18, 0x80	; 128
    2190:	fc 01       	movw	r30, r24
    2192:	20 83       	st	Z, r18


		    }

		    return Loc_enuTimer0Status;
    2194:	89 81       	ldd	r24, Y+1	; 0x01
}
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	df 91       	pop	r29
    219e:	cf 91       	pop	r28
    21a0:	08 95       	ret

000021a2 <Timer0_enuSetDutyCyclePwm>:


Timer0_StatusErrorType Timer0_enuSetDutyCyclePwm(const Timer0_ConfigType* Address_Timer0,u8 Copy_u8DutyCylePrecentage){
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
    21a6:	00 d0       	rcall	.+0      	; 0x21a8 <Timer0_enuSetDutyCyclePwm+0x6>
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <Timer0_enuSetDutyCyclePwm+0x8>
    21aa:	1f 92       	push	r1
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	9c 83       	std	Y+4, r25	; 0x04
    21b2:	8b 83       	std	Y+3, r24	; 0x03
    21b4:	6d 83       	std	Y+5, r22	; 0x05
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	89 83       	std	Y+1, r24	; 0x01

//	u8 Loc_u8DutyCycle = (u8)((f32)Copy_u8DutyCylePrecentage/100 * 255);
	u8 Loc_u8DutyCycle;

		    if(NULL == Address_Timer0){
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	9c 81       	ldd	r25, Y+4	; 0x04
    21be:	89 2b       	or	r24, r25
    21c0:	19 f4       	brne	.+6      	; 0x21c8 <Timer0_enuSetDutyCyclePwm+0x26>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    21c2:	82 e0       	ldi	r24, 0x02	; 2
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	79 c0       	rjmp	.+242    	; 0x22ba <Timer0_enuSetDutyCyclePwm+0x118>
		    }

		    else {

		    	Copy_u8DutyCylePrecentage = (Copy_u8DutyCylePrecentage >= 100) ? 100 :Copy_u8DutyCylePrecentage;
    21c8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ca:	85 36       	cpi	r24, 0x65	; 101
    21cc:	08 f0       	brcs	.+2      	; 0x21d0 <Timer0_enuSetDutyCyclePwm+0x2e>
    21ce:	84 e6       	ldi	r24, 0x64	; 100
    21d0:	8d 83       	std	Y+5, r24	; 0x05

		    	switch(Address_Timer0->select_mode){
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	9c 81       	ldd	r25, Y+4	; 0x04
    21d6:	fc 01       	movw	r30, r24
    21d8:	81 81       	ldd	r24, Z+1	; 0x01
    21da:	88 2f       	mov	r24, r24
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	09 2e       	mov	r0, r25
    21e0:	00 0c       	add	r0, r0
    21e2:	aa 0b       	sbc	r26, r26
    21e4:	bb 0b       	sbc	r27, r27
    21e6:	40 e0       	ldi	r20, 0x00	; 0
    21e8:	50 e0       	ldi	r21, 0x00	; 0
    21ea:	2f e0       	ldi	r18, 0x0F	; 15
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	84 1b       	sub	r24, r20
    21f0:	95 0b       	sbc	r25, r21
    21f2:	28 17       	cp	r18, r24
    21f4:	39 07       	cpc	r19, r25
    21f6:	08 f4       	brcc	.+2      	; 0x21fa <Timer0_enuSetDutyCyclePwm+0x58>
    21f8:	60 c0       	rjmp	.+192    	; 0x22ba <Timer0_enuSetDutyCyclePwm+0x118>
    21fa:	86 5c       	subi	r24, 0xC6	; 198
    21fc:	9f 4f       	sbci	r25, 0xFF	; 255
    21fe:	fc 01       	movw	r30, r24
    2200:	0c 94 58 29 	jmp	0x52b0	; 0x52b0 <__tablejump2__>
		    	case  TIMER0_SELECT_MODE_NORMAL:
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_NORMAEL:
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_TOGGLE :
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_CLEAR  :
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_SET :
		    		Loc_enuTimer0Status = TIMER0_STATUS_FAIL;
    2204:	19 82       	std	Y+1, r1	; 0x01
		    		break;
    2206:	59 c0       	rjmp	.+178    	; 0x22ba <Timer0_enuSetDutyCyclePwm+0x118>
		    		/* i don't know what is the usage of this */
		    		break;

		    	case TIMER0_SELECT_MODE_PWM_FAST_INVERTED_OC0_SET_ON_MATCH_CLEAR_AT_TOP:
		    	case TIMER0_SELECT_MODE_PWM_PHASE_CORRECT_OC0_SET_ON_MATCH_UPCOUNTING_CLEAR_ON_MATCH_DOWNCOUNTING:
		    		Loc_u8DutyCycle = TIMER0_FULL_VALUE_IN_REGISTER- (u8)((f32)Copy_u8DutyCylePrecentage/100 * TIMER0_FULL_VALUE_IN_REGISTER);
    2208:	8d 81       	ldd	r24, Y+5	; 0x05
    220a:	88 2f       	mov	r24, r24
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	a0 e0       	ldi	r26, 0x00	; 0
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	bc 01       	movw	r22, r24
    2214:	cd 01       	movw	r24, r26
    2216:	0e 94 9a 2a 	call	0x5534	; 0x5534 <__floatunsisf>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	48 ec       	ldi	r20, 0xC8	; 200
    2224:	52 e4       	ldi	r21, 0x42	; 66
    2226:	bc 01       	movw	r22, r24
    2228:	cd 01       	movw	r24, r26
    222a:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <__divsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	4f e7       	ldi	r20, 0x7F	; 127
    2238:	53 e4       	ldi	r21, 0x43	; 67
    223a:	bc 01       	movw	r22, r24
    223c:	cd 01       	movw	r24, r26
    223e:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	bc 01       	movw	r22, r24
    2248:	cd 01       	movw	r24, r26
    224a:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	80 95       	com	r24
    2254:	8a 83       	std	Y+2, r24	; 0x02
		    		ASSIGN_REG(OCR0,Loc_u8DutyCycle);
    2256:	8c e5       	ldi	r24, 0x5C	; 92
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	2a 81       	ldd	r18, Y+2	; 0x02
    225c:	fc 01       	movw	r30, r24
    225e:	20 83       	st	Z, r18

		    		break;
    2260:	2c c0       	rjmp	.+88     	; 0x22ba <Timer0_enuSetDutyCyclePwm+0x118>

		    	case TIMER0_SELECT_MODE_PWM_FAST_NOT_INVERTED_OC0_CLEAR_ON_MATCH_SET_AT_TOP:
		    	case TIMER0_SELECT_MODE_PWM_PHASE_CORRECT_OC0_CLEAR_ON_MATCH_UPCOUNTING_SET_ON_MATCH_DOWNCOUNTING:
		    		Loc_u8DutyCycle = (u8)((f32)Copy_u8DutyCylePrecentage/100 * TIMER0_FULL_VALUE_IN_REGISTER);
    2262:	8d 81       	ldd	r24, Y+5	; 0x05
    2264:	88 2f       	mov	r24, r24
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	a0 e0       	ldi	r26, 0x00	; 0
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	bc 01       	movw	r22, r24
    226e:	cd 01       	movw	r24, r26
    2270:	0e 94 9a 2a 	call	0x5534	; 0x5534 <__floatunsisf>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	48 ec       	ldi	r20, 0xC8	; 200
    227e:	52 e4       	ldi	r21, 0x42	; 66
    2280:	bc 01       	movw	r22, r24
    2282:	cd 01       	movw	r24, r26
    2284:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <__divsf3>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	4f e7       	ldi	r20, 0x7F	; 127
    2292:	53 e4       	ldi	r21, 0x43	; 67
    2294:	bc 01       	movw	r22, r24
    2296:	cd 01       	movw	r24, r26
    2298:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	bc 01       	movw	r22, r24
    22a2:	cd 01       	movw	r24, r26
    22a4:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	8a 83       	std	Y+2, r24	; 0x02
		    		ASSIGN_REG(OCR0,Loc_u8DutyCycle);
    22ae:	8c e5       	ldi	r24, 0x5C	; 92
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	2a 81       	ldd	r18, Y+2	; 0x02
    22b4:	fc 01       	movw	r30, r24
    22b6:	20 83       	st	Z, r18

		    		break;
    22b8:	00 00       	nop

		    }


		    }
		    return Loc_enuTimer0Status;
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	08 95       	ret

000022cc <__vector_10>:


// ISR function For TIMER0 Compare Match
void __vector_10(void) __attribute__((signal));

void __vector_10(void){
    22cc:	1f 92       	push	r1
    22ce:	0f 92       	push	r0
    22d0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    22d4:	0f 92       	push	r0
    22d6:	11 24       	eor	r1, r1
    22d8:	2f 93       	push	r18
    22da:	3f 93       	push	r19
    22dc:	4f 93       	push	r20
    22de:	5f 93       	push	r21
    22e0:	6f 93       	push	r22
    22e2:	7f 93       	push	r23
    22e4:	8f 93       	push	r24
    22e6:	9f 93       	push	r25
    22e8:	af 93       	push	r26
    22ea:	bf 93       	push	r27
    22ec:	ef 93       	push	r30
    22ee:	ff 93       	push	r31
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62

	    if(NULL !=Timer0_CompareInterruptHandler ){
    22f8:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <Timer0_CompareInterruptHandler>
    22fc:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <Timer0_CompareInterruptHandler+0x1>
    2300:	89 2b       	or	r24, r25
    2302:	31 f0       	breq	.+12     	; 0x2310 <__vector_10+0x44>
	    	Timer0_CompareInterruptHandler();
    2304:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <Timer0_CompareInterruptHandler>
    2308:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <Timer0_CompareInterruptHandler+0x1>
    230c:	fc 01       	movw	r30, r24
    230e:	09 95       	icall
	    }
	    else {/*  error in declaration */}

}
    2310:	00 00       	nop
    2312:	df 91       	pop	r29
    2314:	cf 91       	pop	r28
    2316:	ff 91       	pop	r31
    2318:	ef 91       	pop	r30
    231a:	bf 91       	pop	r27
    231c:	af 91       	pop	r26
    231e:	9f 91       	pop	r25
    2320:	8f 91       	pop	r24
    2322:	7f 91       	pop	r23
    2324:	6f 91       	pop	r22
    2326:	5f 91       	pop	r21
    2328:	4f 91       	pop	r20
    232a:	3f 91       	pop	r19
    232c:	2f 91       	pop	r18
    232e:	0f 90       	pop	r0
    2330:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2334:	0f 90       	pop	r0
    2336:	1f 90       	pop	r1
    2338:	18 95       	reti

0000233a <__vector_11>:


// ISR function For TIMER0 OverFlow
void __vector_11(void) __attribute__((signal));

void __vector_11(void){
    233a:	1f 92       	push	r1
    233c:	0f 92       	push	r0
    233e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2342:	0f 92       	push	r0
    2344:	11 24       	eor	r1, r1
    2346:	2f 93       	push	r18
    2348:	3f 93       	push	r19
    234a:	4f 93       	push	r20
    234c:	5f 93       	push	r21
    234e:	6f 93       	push	r22
    2350:	7f 93       	push	r23
    2352:	8f 93       	push	r24
    2354:	9f 93       	push	r25
    2356:	af 93       	push	r26
    2358:	bf 93       	push	r27
    235a:	ef 93       	push	r30
    235c:	ff 93       	push	r31
    235e:	cf 93       	push	r28
    2360:	df 93       	push	r29
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62

//	Timer0_DisableOverviewInterrupt();



    if(NULL !=Timer0_OverflowInterruptHandler ){
    2366:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <Timer0_OverflowInterruptHandler>
    236a:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <Timer0_OverflowInterruptHandler+0x1>
    236e:	89 2b       	or	r24, r25
    2370:	61 f0       	breq	.+24     	; 0x238a <__vector_11+0x50>

    	TCNT0 = Timer0_InitValue;
    2372:	82 e5       	ldi	r24, 0x52	; 82
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <Timer0_InitValue>
    237a:	fc 01       	movw	r30, r24
    237c:	20 83       	st	Z, r18
    	Timer0_OverflowInterruptHandler();
    237e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <Timer0_OverflowInterruptHandler>
    2382:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <Timer0_OverflowInterruptHandler+0x1>
    2386:	fc 01       	movw	r30, r24
    2388:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer0_EnableOverviewInterrupt();
}
    238a:	00 00       	nop
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	ff 91       	pop	r31
    2392:	ef 91       	pop	r30
    2394:	bf 91       	pop	r27
    2396:	af 91       	pop	r26
    2398:	9f 91       	pop	r25
    239a:	8f 91       	pop	r24
    239c:	7f 91       	pop	r23
    239e:	6f 91       	pop	r22
    23a0:	5f 91       	pop	r21
    23a2:	4f 91       	pop	r20
    23a4:	3f 91       	pop	r19
    23a6:	2f 91       	pop	r18
    23a8:	0f 90       	pop	r0
    23aa:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    23ae:	0f 90       	pop	r0
    23b0:	1f 90       	pop	r1
    23b2:	18 95       	reti

000023b4 <Spi_enuInit>:
/********************************** Data Type Declarations ****************************/


/********************************** Software Interfaces Declarations *******************/

Spi_StatusErrorType Spi_enuInit(const Spi_ConfigType* Address_Spi){
    23b4:	cf 93       	push	r28
    23b6:	df 93       	push	r29
    23b8:	00 d0       	rcall	.+0      	; 0x23ba <Spi_enuInit+0x6>
    23ba:	1f 92       	push	r1
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	9b 83       	std	Y+3, r25	; 0x03
    23c2:	8a 83       	std	Y+2, r24	; 0x02
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_Spi){
    23c8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ca:	9b 81       	ldd	r25, Y+3	; 0x03
    23cc:	89 2b       	or	r24, r25
    23ce:	19 f4       	brne	.+6      	; 0x23d6 <Spi_enuInit+0x22>
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
    23d0:	82 e0       	ldi	r24, 0x02	; 2
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	8f c0       	rjmp	.+286    	; 0x24f4 <Spi_enuInit+0x140>
	}
	else{

		/* Disable During Configuration */
		Spi_Disable();
    23d6:	8d e2       	ldi	r24, 0x2D	; 45
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	2d e2       	ldi	r18, 0x2D	; 45
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	f9 01       	movw	r30, r18
    23e0:	20 81       	ld	r18, Z
    23e2:	2f 7b       	andi	r18, 0xBF	; 191
    23e4:	fc 01       	movw	r30, r24
    23e6:	20 83       	st	Z, r18

		/* Select MasterSlaveType */
		Spi_SelectMasterSlave(Address_Spi->select_master_or_slave);
    23e8:	8d e2       	ldi	r24, 0x2D	; 45
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	2d e2       	ldi	r18, 0x2D	; 45
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	f9 01       	movw	r30, r18
    23f2:	20 81       	ld	r18, Z
    23f4:	42 2f       	mov	r20, r18
    23f6:	4f 7e       	andi	r20, 0xEF	; 239
    23f8:	2a 81       	ldd	r18, Y+2	; 0x02
    23fa:	3b 81       	ldd	r19, Y+3	; 0x03
    23fc:	f9 01       	movw	r30, r18
    23fe:	20 81       	ld	r18, Z
    2400:	22 2f       	mov	r18, r18
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	22 95       	swap	r18
    2406:	32 95       	swap	r19
    2408:	30 7f       	andi	r19, 0xF0	; 240
    240a:	32 27       	eor	r19, r18
    240c:	20 7f       	andi	r18, 0xF0	; 240
    240e:	32 27       	eor	r19, r18
    2410:	24 2b       	or	r18, r20
    2412:	fc 01       	movw	r30, r24
    2414:	20 83       	st	Z, r18

		/* Select data ording */
		Spi_SelectDataOrding(Address_Spi->select_data_ording);
    2416:	8d e2       	ldi	r24, 0x2D	; 45
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	2d e2       	ldi	r18, 0x2D	; 45
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	f9 01       	movw	r30, r18
    2420:	20 81       	ld	r18, Z
    2422:	42 2f       	mov	r20, r18
    2424:	4f 7d       	andi	r20, 0xDF	; 223
    2426:	2a 81       	ldd	r18, Y+2	; 0x02
    2428:	3b 81       	ldd	r19, Y+3	; 0x03
    242a:	f9 01       	movw	r30, r18
    242c:	21 81       	ldd	r18, Z+1	; 0x01
    242e:	22 2f       	mov	r18, r18
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	22 0f       	add	r18, r18
    2434:	33 1f       	adc	r19, r19
    2436:	22 95       	swap	r18
    2438:	32 95       	swap	r19
    243a:	30 7f       	andi	r19, 0xF0	; 240
    243c:	32 27       	eor	r19, r18
    243e:	20 7f       	andi	r18, 0xF0	; 240
    2440:	32 27       	eor	r19, r18
    2442:	24 2b       	or	r18, r20
    2444:	fc 01       	movw	r30, r24
    2446:	20 83       	st	Z, r18

		/* Select Polarity */
		Spi_SelectPolarity(Address_Spi->select_polarity);
    2448:	8d e2       	ldi	r24, 0x2D	; 45
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	2d e2       	ldi	r18, 0x2D	; 45
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	f9 01       	movw	r30, r18
    2452:	20 81       	ld	r18, Z
    2454:	42 2f       	mov	r20, r18
    2456:	47 7f       	andi	r20, 0xF7	; 247
    2458:	2a 81       	ldd	r18, Y+2	; 0x02
    245a:	3b 81       	ldd	r19, Y+3	; 0x03
    245c:	f9 01       	movw	r30, r18
    245e:	22 81       	ldd	r18, Z+2	; 0x02
    2460:	22 2f       	mov	r18, r18
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	22 0f       	add	r18, r18
    2466:	33 1f       	adc	r19, r19
    2468:	22 0f       	add	r18, r18
    246a:	33 1f       	adc	r19, r19
    246c:	22 0f       	add	r18, r18
    246e:	33 1f       	adc	r19, r19
    2470:	24 2b       	or	r18, r20
    2472:	fc 01       	movw	r30, r24
    2474:	20 83       	st	Z, r18

		/* Select Phase */
		Spi_SelectPhase(Address_Spi->select_phase);
    2476:	8d e2       	ldi	r24, 0x2D	; 45
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	2d e2       	ldi	r18, 0x2D	; 45
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	f9 01       	movw	r30, r18
    2480:	20 81       	ld	r18, Z
    2482:	42 2f       	mov	r20, r18
    2484:	4b 7f       	andi	r20, 0xFB	; 251
    2486:	2a 81       	ldd	r18, Y+2	; 0x02
    2488:	3b 81       	ldd	r19, Y+3	; 0x03
    248a:	f9 01       	movw	r30, r18
    248c:	23 81       	ldd	r18, Z+3	; 0x03
    248e:	22 2f       	mov	r18, r18
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	22 0f       	add	r18, r18
    2494:	33 1f       	adc	r19, r19
    2496:	22 0f       	add	r18, r18
    2498:	33 1f       	adc	r19, r19
    249a:	24 2b       	or	r18, r20
    249c:	fc 01       	movw	r30, r24
    249e:	20 83       	st	Z, r18

		/* Select Clock Speed */
		Spi_SelectClkSpeed(Address_Spi->select_clk_speed);
    24a0:	8d e2       	ldi	r24, 0x2D	; 45
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	2d e2       	ldi	r18, 0x2D	; 45
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	f9 01       	movw	r30, r18
    24aa:	20 81       	ld	r18, Z
    24ac:	42 2f       	mov	r20, r18
    24ae:	4c 7f       	andi	r20, 0xFC	; 252
    24b0:	2a 81       	ldd	r18, Y+2	; 0x02
    24b2:	3b 81       	ldd	r19, Y+3	; 0x03
    24b4:	f9 01       	movw	r30, r18
    24b6:	24 81       	ldd	r18, Z+4	; 0x04
    24b8:	23 70       	andi	r18, 0x03	; 3
    24ba:	24 2b       	or	r18, r20
    24bc:	fc 01       	movw	r30, r24
    24be:	20 83       	st	Z, r18
    24c0:	8e e2       	ldi	r24, 0x2E	; 46
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	2e e2       	ldi	r18, 0x2E	; 46
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	f9 01       	movw	r30, r18
    24ca:	20 81       	ld	r18, Z
    24cc:	42 2f       	mov	r20, r18
    24ce:	4e 7f       	andi	r20, 0xFE	; 254
    24d0:	2a 81       	ldd	r18, Y+2	; 0x02
    24d2:	3b 81       	ldd	r19, Y+3	; 0x03
    24d4:	f9 01       	movw	r30, r18
    24d6:	24 81       	ldd	r18, Z+4	; 0x04
    24d8:	26 95       	lsr	r18
    24da:	26 95       	lsr	r18
    24dc:	24 2b       	or	r18, r20
    24de:	fc 01       	movw	r30, r24
    24e0:	20 83       	st	Z, r18

		/* Enable During Configuration */
		Spi_Enable();
    24e2:	8d e2       	ldi	r24, 0x2D	; 45
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	2d e2       	ldi	r18, 0x2D	; 45
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	f9 01       	movw	r30, r18
    24ec:	20 81       	ld	r18, Z
    24ee:	20 64       	ori	r18, 0x40	; 64
    24f0:	fc 01       	movw	r30, r24
    24f2:	20 83       	st	Z, r18

	}

	return Loc_enuSpiStatus;
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	08 95       	ret

00002502 <Spi_enuDeInit>:

Spi_StatusErrorType Spi_enuDeInit(void){
    2502:	cf 93       	push	r28
    2504:	df 93       	push	r29
    2506:	1f 92       	push	r1
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	89 83       	std	Y+1, r24	; 0x01

	/* Disable  */
	Spi_Disable();
    2510:	8d e2       	ldi	r24, 0x2D	; 45
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	2d e2       	ldi	r18, 0x2D	; 45
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	f9 01       	movw	r30, r18
    251a:	20 81       	ld	r18, Z
    251c:	2f 7b       	andi	r18, 0xBF	; 191
    251e:	fc 01       	movw	r30, r24
    2520:	20 83       	st	Z, r18

	return Loc_enuSpiStatus;
    2522:	89 81       	ldd	r24, Y+1	; 0x01
}
    2524:	0f 90       	pop	r0
    2526:	df 91       	pop	r29
    2528:	cf 91       	pop	r28
    252a:	08 95       	ret

0000252c <Spi_enuEnableInterrupt>:

Spi_StatusErrorType Spi_enuEnableInterrupt(void){
    252c:	cf 93       	push	r28
    252e:	df 93       	push	r29
    2530:	1f 92       	push	r1
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	89 83       	std	Y+1, r24	; 0x01

	Spi_EnableInterrupt();
    253a:	8d e2       	ldi	r24, 0x2D	; 45
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	2d e2       	ldi	r18, 0x2D	; 45
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	f9 01       	movw	r30, r18
    2544:	20 81       	ld	r18, Z
    2546:	20 68       	ori	r18, 0x80	; 128
    2548:	fc 01       	movw	r30, r24
    254a:	20 83       	st	Z, r18

	return Loc_enuSpiStatus;
    254c:	89 81       	ldd	r24, Y+1	; 0x01
}
    254e:	0f 90       	pop	r0
    2550:	df 91       	pop	r29
    2552:	cf 91       	pop	r28
    2554:	08 95       	ret

00002556 <Spi_enuDisableInterrupt>:

Spi_StatusErrorType Spi_enuDisableInterrupt(void){
    2556:	cf 93       	push	r28
    2558:	df 93       	push	r29
    255a:	1f 92       	push	r1
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	89 83       	std	Y+1, r24	; 0x01

	Spi_DisableInterrupt();
    2564:	8d e2       	ldi	r24, 0x2D	; 45
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	2d e2       	ldi	r18, 0x2D	; 45
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	f9 01       	movw	r30, r18
    256e:	20 81       	ld	r18, Z
    2570:	2f 77       	andi	r18, 0x7F	; 127
    2572:	fc 01       	movw	r30, r24
    2574:	20 83       	st	Z, r18

	return Loc_enuSpiStatus;
    2576:	89 81       	ldd	r24, Y+1	; 0x01
}
    2578:	0f 90       	pop	r0
    257a:	df 91       	pop	r29
    257c:	cf 91       	pop	r28
    257e:	08 95       	ret

00002580 <Spi_enuSetCallbackFunction>:

Spi_StatusErrorType Spi_enuSetCallbackFunction(void (*callback)(u8 Copy_u8Result)){
    2580:	cf 93       	push	r28
    2582:	df 93       	push	r29
    2584:	00 d0       	rcall	.+0      	; 0x2586 <Spi_enuSetCallbackFunction+0x6>
    2586:	1f 92       	push	r1
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	9b 83       	std	Y+3, r25	; 0x03
    258e:	8a 83       	std	Y+2, r24	; 0x02
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == callback){
    2594:	8a 81       	ldd	r24, Y+2	; 0x02
    2596:	9b 81       	ldd	r25, Y+3	; 0x03
    2598:	89 2b       	or	r24, r25
    259a:	19 f4       	brne	.+6      	; 0x25a2 <Spi_enuSetCallbackFunction+0x22>
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
    259c:	82 e0       	ldi	r24, 0x02	; 2
    259e:	89 83       	std	Y+1, r24	; 0x01
    25a0:	06 c0       	rjmp	.+12     	; 0x25ae <Spi_enuSetCallbackFunction+0x2e>
	}
	else{

		Spi_InterruptHandler = callback;
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	9b 81       	ldd	r25, Y+3	; 0x03
    25a6:	90 93 f8 00 	sts	0x00F8, r25	; 0x8000f8 <Spi_InterruptHandler+0x1>
    25aa:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <Spi_InterruptHandler>
	}

	return Loc_enuSpiStatus;
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    25b0:	0f 90       	pop	r0
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	df 91       	pop	r29
    25b8:	cf 91       	pop	r28
    25ba:	08 95       	ret

000025bc <Spi_enuChangeClk>:



Spi_StatusErrorType Spi_enuChangeClk(Spi_SelectClkSpeedType Copy_enuClkSpeed){
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	00 d0       	rcall	.+0      	; 0x25c2 <Spi_enuChangeClk+0x6>
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	8a 83       	std	Y+2, r24	; 0x02
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	89 83       	std	Y+1, r24	; 0x01

	/* Disable During Configuration */
		Spi_Disable();
    25cc:	8d e2       	ldi	r24, 0x2D	; 45
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	2d e2       	ldi	r18, 0x2D	; 45
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	f9 01       	movw	r30, r18
    25d6:	20 81       	ld	r18, Z
    25d8:	2f 7b       	andi	r18, 0xBF	; 191
    25da:	fc 01       	movw	r30, r24
    25dc:	20 83       	st	Z, r18

		/* Select Clock Speed */
		Spi_SelectClkSpeed(Copy_enuClkSpeed);
    25de:	8d e2       	ldi	r24, 0x2D	; 45
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	2d e2       	ldi	r18, 0x2D	; 45
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	f9 01       	movw	r30, r18
    25e8:	20 81       	ld	r18, Z
    25ea:	32 2f       	mov	r19, r18
    25ec:	3c 7f       	andi	r19, 0xFC	; 252
    25ee:	2a 81       	ldd	r18, Y+2	; 0x02
    25f0:	23 70       	andi	r18, 0x03	; 3
    25f2:	23 2b       	or	r18, r19
    25f4:	fc 01       	movw	r30, r24
    25f6:	20 83       	st	Z, r18
    25f8:	8e e2       	ldi	r24, 0x2E	; 46
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	2e e2       	ldi	r18, 0x2E	; 46
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	f9 01       	movw	r30, r18
    2602:	20 81       	ld	r18, Z
    2604:	2e 7f       	andi	r18, 0xFE	; 254
    2606:	3a 81       	ldd	r19, Y+2	; 0x02
    2608:	36 95       	lsr	r19
    260a:	36 95       	lsr	r19
    260c:	23 2b       	or	r18, r19
    260e:	fc 01       	movw	r30, r24
    2610:	20 83       	st	Z, r18

		/* Enable During Configuration */
		Spi_Enable();
    2612:	8d e2       	ldi	r24, 0x2D	; 45
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	2d e2       	ldi	r18, 0x2D	; 45
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	f9 01       	movw	r30, r18
    261c:	20 81       	ld	r18, Z
    261e:	20 64       	ori	r18, 0x40	; 64
    2620:	fc 01       	movw	r30, r24
    2622:	20 83       	st	Z, r18


	return Loc_enuSpiStatus;
    2624:	89 81       	ldd	r24, Y+1	; 0x01
}
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	08 95       	ret

00002630 <Spi_enuIsWriteCollisionHappened>:

Spi_StatusErrorType Spi_enuIsWriteCollisionHappened(Spi_IsWriteCollisionHappenedType* Address_Result){
    2630:	cf 93       	push	r28
    2632:	df 93       	push	r29
    2634:	00 d0       	rcall	.+0      	; 0x2636 <Spi_enuIsWriteCollisionHappened+0x6>
    2636:	1f 92       	push	r1
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	9b 83       	std	Y+3, r25	; 0x03
    263e:	8a 83       	std	Y+2, r24	; 0x02
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_Result){
    2644:	8a 81       	ldd	r24, Y+2	; 0x02
    2646:	9b 81       	ldd	r25, Y+3	; 0x03
    2648:	89 2b       	or	r24, r25
    264a:	19 f4       	brne	.+6      	; 0x2652 <Spi_enuIsWriteCollisionHappened+0x22>
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
    264c:	82 e0       	ldi	r24, 0x02	; 2
    264e:	89 83       	std	Y+1, r24	; 0x01
    2650:	14 c0       	rjmp	.+40     	; 0x267a <Spi_enuIsWriteCollisionHappened+0x4a>
	}
	else{
		*Address_Result = Spi_isWirteCollisionHappened();
    2652:	8e e2       	ldi	r24, 0x2E	; 46
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	fc 01       	movw	r30, r24
    2658:	80 81       	ld	r24, Z
    265a:	82 95       	swap	r24
    265c:	86 95       	lsr	r24
    265e:	86 95       	lsr	r24
    2660:	83 70       	andi	r24, 0x03	; 3
    2662:	88 2f       	mov	r24, r24
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	81 70       	andi	r24, 0x01	; 1
    2668:	99 27       	eor	r25, r25
    266a:	21 e0       	ldi	r18, 0x01	; 1
    266c:	89 2b       	or	r24, r25
    266e:	09 f4       	brne	.+2      	; 0x2672 <Spi_enuIsWriteCollisionHappened+0x42>
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	9b 81       	ldd	r25, Y+3	; 0x03
    2676:	fc 01       	movw	r30, r24
    2678:	20 83       	st	Z, r18
	}

	return Loc_enuSpiStatus;
    267a:	89 81       	ldd	r24, Y+1	; 0x01
}
    267c:	0f 90       	pop	r0
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	df 91       	pop	r29
    2684:	cf 91       	pop	r28
    2686:	08 95       	ret

00002688 <Spi_enuReceiveBlocking>:


Spi_StatusErrorType Spi_enuReceiveBlocking(pu8 Address_ReceiveDataFromMaster, u8 Copy_u8SendDataToMaster){
    2688:	cf 93       	push	r28
    268a:	df 93       	push	r29
    268c:	00 d0       	rcall	.+0      	; 0x268e <Spi_enuReceiveBlocking+0x6>
    268e:	00 d0       	rcall	.+0      	; 0x2690 <Spi_enuReceiveBlocking+0x8>
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	9b 83       	std	Y+3, r25	; 0x03
    2696:	8a 83       	std	Y+2, r24	; 0x02
    2698:	6c 83       	std	Y+4, r22	; 0x04
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_ReceiveDataFromMaster){
    269e:	8a 81       	ldd	r24, Y+2	; 0x02
    26a0:	9b 81       	ldd	r25, Y+3	; 0x03
    26a2:	89 2b       	or	r24, r25
    26a4:	19 f4       	brne	.+6      	; 0x26ac <Spi_enuReceiveBlocking+0x24>
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
    26a6:	82 e0       	ldi	r24, 0x02	; 2
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	1b c0       	rjmp	.+54     	; 0x26e2 <Spi_enuReceiveBlocking+0x5a>
	}
	else{

		// data that will send to master
		Spi_SetDataRegister(Copy_u8SendDataToMaster); // might cause logical error here
    26ac:	8f e2       	ldi	r24, 0x2F	; 47
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	2c 81       	ldd	r18, Y+4	; 0x04
    26b2:	fc 01       	movw	r30, r24
    26b4:	20 83       	st	Z, r18
		while(Spi_IsRecevingDone() == ZERO_VALUE);
    26b6:	00 00       	nop
    26b8:	8e e2       	ldi	r24, 0x2E	; 46
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	fc 01       	movw	r30, r24
    26be:	80 81       	ld	r24, Z
    26c0:	88 1f       	adc	r24, r24
    26c2:	88 27       	eor	r24, r24
    26c4:	88 1f       	adc	r24, r24
    26c6:	88 2f       	mov	r24, r24
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	81 70       	andi	r24, 0x01	; 1
    26cc:	99 27       	eor	r25, r25
    26ce:	89 2b       	or	r24, r25
    26d0:	99 f3       	breq	.-26     	; 0x26b8 <Spi_enuReceiveBlocking+0x30>
		*Address_ReceiveDataFromMaster = Spi_GetDataRegister();
    26d2:	8f e2       	ldi	r24, 0x2F	; 47
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	fc 01       	movw	r30, r24
    26d8:	20 81       	ld	r18, Z
    26da:	8a 81       	ldd	r24, Y+2	; 0x02
    26dc:	9b 81       	ldd	r25, Y+3	; 0x03
    26de:	fc 01       	movw	r30, r24
    26e0:	20 83       	st	Z, r18

	}

	return Loc_enuSpiStatus;
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	df 91       	pop	r29
    26ee:	cf 91       	pop	r28
    26f0:	08 95       	ret

000026f2 <Spi_enuTransmitBlocking>:


Spi_StatusErrorType Spi_enuTransmitBlocking(u8 Copy_u8SlaveSelectPin, u8 Copy_u8SendData, pu8 Address_ReceiveDataFromSlave){
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
    26f6:	00 d0       	rcall	.+0      	; 0x26f8 <Spi_enuTransmitBlocking+0x6>
    26f8:	00 d0       	rcall	.+0      	; 0x26fa <Spi_enuTransmitBlocking+0x8>
    26fa:	1f 92       	push	r1
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	8a 83       	std	Y+2, r24	; 0x02
    2702:	6b 83       	std	Y+3, r22	; 0x03
    2704:	5d 83       	std	Y+5, r21	; 0x05
    2706:	4c 83       	std	Y+4, r20	; 0x04
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_ReceiveDataFromSlave){
    270c:	8c 81       	ldd	r24, Y+4	; 0x04
    270e:	9d 81       	ldd	r25, Y+5	; 0x05
    2710:	89 2b       	or	r24, r25
    2712:	19 f4       	brne	.+6      	; 0x271a <Spi_enuTransmitBlocking+0x28>
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
    2714:	82 e0       	ldi	r24, 0x02	; 2
    2716:	89 83       	std	Y+1, r24	; 0x01
    2718:	23 c0       	rjmp	.+70     	; 0x2760 <Spi_enuTransmitBlocking+0x6e>
	}
	else{
		Dio_enuWriteChannel(Copy_u8SlaveSelectPin, DIO_LOW);
    271a:	60 e0       	ldi	r22, 0x00	; 0
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	0e 94 64 18 	call	0x30c8	; 0x30c8 <Dio_enuWriteChannel>
		Spi_SetDataRegister(Copy_u8SendData);
    2722:	8f e2       	ldi	r24, 0x2F	; 47
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	2b 81       	ldd	r18, Y+3	; 0x03
    2728:	fc 01       	movw	r30, r24
    272a:	20 83       	st	Z, r18
		while(Spi_IsTransmittingDone() == ZERO_VALUE);
    272c:	00 00       	nop
    272e:	8e e2       	ldi	r24, 0x2E	; 46
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	fc 01       	movw	r30, r24
    2734:	80 81       	ld	r24, Z
    2736:	88 1f       	adc	r24, r24
    2738:	88 27       	eor	r24, r24
    273a:	88 1f       	adc	r24, r24
    273c:	88 2f       	mov	r24, r24
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	81 70       	andi	r24, 0x01	; 1
    2742:	99 27       	eor	r25, r25
    2744:	89 2b       	or	r24, r25
    2746:	99 f3       	breq	.-26     	; 0x272e <Spi_enuTransmitBlocking+0x3c>
		*Address_ReceiveDataFromSlave = Spi_GetDataRegister();
    2748:	8f e2       	ldi	r24, 0x2F	; 47
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	fc 01       	movw	r30, r24
    274e:	20 81       	ld	r18, Z
    2750:	8c 81       	ldd	r24, Y+4	; 0x04
    2752:	9d 81       	ldd	r25, Y+5	; 0x05
    2754:	fc 01       	movw	r30, r24
    2756:	20 83       	st	Z, r18
		Dio_enuWriteChannel(Copy_u8SlaveSelectPin, DIO_HIGH);
    2758:	61 e0       	ldi	r22, 0x01	; 1
    275a:	8a 81       	ldd	r24, Y+2	; 0x02
    275c:	0e 94 64 18 	call	0x30c8	; 0x30c8 <Dio_enuWriteChannel>

	}

	return Loc_enuSpiStatus;
    2760:	89 81       	ldd	r24, Y+1	; 0x01
}
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	df 91       	pop	r29
    276e:	cf 91       	pop	r28
    2770:	08 95       	ret

00002772 <Spi_enuTransmitNonBlockingMasterMode>:



Spi_StatusErrorType Spi_enuTransmitNonBlockingMasterMode(u8 Copy_u8SlaveSelectPin, u8 Copy_u8SendDataToSlave){
    2772:	cf 93       	push	r28
    2774:	df 93       	push	r29
    2776:	00 d0       	rcall	.+0      	; 0x2778 <Spi_enuTransmitNonBlockingMasterMode+0x6>
    2778:	1f 92       	push	r1
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
    277e:	8a 83       	std	Y+2, r24	; 0x02
    2780:	6b 83       	std	Y+3, r22	; 0x03

	// interrupt happens when transmiting is done, so read in ISR
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	89 83       	std	Y+1, r24	; 0x01

	Dio_enuWriteChannel(Copy_u8SlaveSelectPin, DIO_LOW);
    2786:	60 e0       	ldi	r22, 0x00	; 0
    2788:	8a 81       	ldd	r24, Y+2	; 0x02
    278a:	0e 94 64 18 	call	0x30c8	; 0x30c8 <Dio_enuWriteChannel>
	Global_StaticU8SlavePin = Copy_u8SlaveSelectPin;
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <Global_StaticU8SlavePin>
	Spi_SetDataRegister(Copy_u8SendDataToSlave);
    2794:	8f e2       	ldi	r24, 0x2F	; 47
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	2b 81       	ldd	r18, Y+3	; 0x03
    279a:	fc 01       	movw	r30, r24
    279c:	20 83       	st	Z, r18


		return Loc_enuSpiStatus;
    279e:	89 81       	ldd	r24, Y+1	; 0x01
}
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	df 91       	pop	r29
    27a8:	cf 91       	pop	r28
    27aa:	08 95       	ret

000027ac <Spi_enuRecevingNonBlockingSlaveModeForever>:

Spi_StatusErrorType Spi_enuRecevingNonBlockingSlaveModeForever( u8 Copy_u8SendDataToMaster){
    27ac:	cf 93       	push	r28
    27ae:	df 93       	push	r29
    27b0:	00 d0       	rcall	.+0      	; 0x27b2 <Spi_enuRecevingNonBlockingSlaveModeForever+0x6>
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    27b6:	8a 83       	std	Y+2, r24	; 0x02
	// interrupt happens when transmiting is done, so read in ISR


		Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	89 83       	std	Y+1, r24	; 0x01
		Spi_SetDataRegister(Copy_u8SendDataToMaster);
    27bc:	8f e2       	ldi	r24, 0x2F	; 47
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	2a 81       	ldd	r18, Y+2	; 0x02
    27c2:	fc 01       	movw	r30, r24
    27c4:	20 83       	st	Z, r18

		return Loc_enuSpiStatus;
    27c6:	89 81       	ldd	r24, Y+1	; 0x01

}
    27c8:	0f 90       	pop	r0
    27ca:	0f 90       	pop	r0
    27cc:	df 91       	pop	r29
    27ce:	cf 91       	pop	r28
    27d0:	08 95       	ret

000027d2 <__vector_12>:


// ISR function For SPI
void __vector_12(void) __attribute__((signal));

void __vector_12(void){
    27d2:	1f 92       	push	r1
    27d4:	0f 92       	push	r0
    27d6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    27da:	0f 92       	push	r0
    27dc:	11 24       	eor	r1, r1
    27de:	2f 93       	push	r18
    27e0:	3f 93       	push	r19
    27e2:	4f 93       	push	r20
    27e4:	5f 93       	push	r21
    27e6:	6f 93       	push	r22
    27e8:	7f 93       	push	r23
    27ea:	8f 93       	push	r24
    27ec:	9f 93       	push	r25
    27ee:	af 93       	push	r26
    27f0:	bf 93       	push	r27
    27f2:	ef 93       	push	r30
    27f4:	ff 93       	push	r31
    27f6:	cf 93       	push	r28
    27f8:	df 93       	push	r29
    27fa:	1f 92       	push	r1
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62

u8 Loc_u8Result ;
/* don't forget in master mode, to make ss high after reading from slave */

    if(NULL !=Spi_InterruptHandler ){
    2800:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <Spi_InterruptHandler>
    2804:	90 91 f8 00 	lds	r25, 0x00F8	; 0x8000f8 <Spi_InterruptHandler+0x1>
    2808:	89 2b       	or	r24, r25
    280a:	c9 f0       	breq	.+50     	; 0x283e <__vector_12+0x6c>

    	Loc_u8Result = Spi_GetDataRegister();
    280c:	8f e2       	ldi	r24, 0x2F	; 47
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	fc 01       	movw	r30, r24
    2812:	80 81       	ld	r24, Z
    2814:	89 83       	std	Y+1, r24	; 0x01
    	Spi_InterruptHandler(Loc_u8Result);
    2816:	20 91 f7 00 	lds	r18, 0x00F7	; 0x8000f7 <Spi_InterruptHandler>
    281a:	30 91 f8 00 	lds	r19, 0x00F8	; 0x8000f8 <Spi_InterruptHandler+0x1>
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	f9 01       	movw	r30, r18
    2822:	09 95       	icall

    	switch (Global_StaticEnuMode){
    2824:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <Global_StaticEnuMode>
    2828:	88 2f       	mov	r24, r24
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	09 f0       	breq	.+2      	; 0x2832 <__vector_12+0x60>
    	case SPI_SELECT_MASTER_MODE:
    		Dio_enuWriteChannel(Global_StaticU8SlavePin, DIO_HIGH);
    		break;

    	default:
    		break;
    2830:	06 c0       	rjmp	.+12     	; 0x283e <__vector_12+0x6c>
    	Spi_InterruptHandler(Loc_u8Result);

    	switch (Global_StaticEnuMode){

    	case SPI_SELECT_MASTER_MODE:
    		Dio_enuWriteChannel(Global_StaticU8SlavePin, DIO_HIGH);
    2832:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <Global_StaticU8SlavePin>
    2836:	61 e0       	ldi	r22, 0x01	; 1
    2838:	0e 94 64 18 	call	0x30c8	; 0x30c8 <Dio_enuWriteChannel>
    		break;
    283c:	00 00       	nop
    	}

    }
    else {/*  error in declaration */   }

}
    283e:	00 00       	nop
    2840:	0f 90       	pop	r0
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	ff 91       	pop	r31
    2848:	ef 91       	pop	r30
    284a:	bf 91       	pop	r27
    284c:	af 91       	pop	r26
    284e:	9f 91       	pop	r25
    2850:	8f 91       	pop	r24
    2852:	7f 91       	pop	r23
    2854:	6f 91       	pop	r22
    2856:	5f 91       	pop	r21
    2858:	4f 91       	pop	r20
    285a:	3f 91       	pop	r19
    285c:	2f 91       	pop	r18
    285e:	0f 90       	pop	r0
    2860:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2864:	0f 90       	pop	r0
    2866:	1f 90       	pop	r1
    2868:	18 95       	reti

0000286a <Port_voidInit>:


/********************************** Software Interfaces implementation *******************************/


void Port_voidInit(void){
    286a:	cf 93       	push	r28
    286c:	df 93       	push	r29
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
	#define PORT_STATUS_PIN_MODE_OUTPUT_HIGH			1
	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			0
	#define PORT_STATUS_PIN_MODE_INPUT_FLOAT			0

	ASSIGN_REG(DDRA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
    2872:	8a e3       	ldi	r24, 0x3A	; 58
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	2d ef       	ldi	r18, 0xFD	; 253
    2878:	fc 01       	movw	r30, r24
    287a:	20 83       	st	Z, r18
	ASSIGN_REG(DDRB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
    287c:	87 e3       	ldi	r24, 0x37	; 55
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	27 ea       	ldi	r18, 0xA7	; 167
    2882:	fc 01       	movw	r30, r24
    2884:	20 83       	st	Z, r18
	ASSIGN_REG(DDRC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
    2886:	84 e3       	ldi	r24, 0x34	; 52
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	2f ef       	ldi	r18, 0xFF	; 255
    288c:	fc 01       	movw	r30, r24
    288e:	20 83       	st	Z, r18

	ASSIGN_REG(DDRD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
    2890:	81 e3       	ldi	r24, 0x31	; 49
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	2f e3       	ldi	r18, 0x3F	; 63
    2896:	fc 01       	movw	r30, r24
    2898:	20 83       	st	Z, r18

	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				0
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			1


	ASSIGN_REG(PORTA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
    289a:	8b e3       	ldi	r24, 0x3B	; 59
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	21 e0       	ldi	r18, 0x01	; 1
    28a0:	fc 01       	movw	r30, r24
    28a2:	20 83       	st	Z, r18
	ASSIGN_REG(PORTB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
    28a4:	88 e3       	ldi	r24, 0x38	; 56
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	28 e1       	ldi	r18, 0x18	; 24
    28aa:	fc 01       	movw	r30, r24
    28ac:	20 83       	st	Z, r18
	ASSIGN_REG(PORTC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
    28ae:	85 e3       	ldi	r24, 0x35	; 53
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	fc 01       	movw	r30, r24
    28b4:	10 82       	st	Z, r1

	ASSIGN_REG(PORTD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
    28b6:	82 e3       	ldi	r24, 0x32	; 50
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	20 e8       	ldi	r18, 0x80	; 128
    28bc:	fc 01       	movw	r30, r24
    28be:	20 83       	st	Z, r18
#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
#define PORT_STATUS_PIN_MODE_INPUT_FLOAT				2
#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			3


}
    28c0:	00 00       	nop
    28c2:	df 91       	pop	r29
    28c4:	cf 91       	pop	r28
    28c6:	08 95       	ret

000028c8 <Port_enuSetPinDirection>:

Port_ErrorStatusType Port_enuSetPinDirection(u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
    28c8:	cf 93       	push	r28
    28ca:	df 93       	push	r29
    28cc:	00 d0       	rcall	.+0      	; 0x28ce <Port_enuSetPinDirection+0x6>
    28ce:	00 d0       	rcall	.+0      	; 0x28d0 <Port_enuSetPinDirection+0x8>
    28d0:	1f 92       	push	r1
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
    28d6:	8c 83       	std	Y+4, r24	; 0x04
    28d8:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
    28da:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
    28dc:	8c 81       	ldd	r24, Y+4	; 0x04
    28de:	87 70       	andi	r24, 0x07	; 7
    28e0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
    28e2:	8c 81       	ldd	r24, Y+4	; 0x04
    28e4:	86 95       	lsr	r24
    28e6:	86 95       	lsr	r24
    28e8:	86 95       	lsr	r24
    28ea:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
    28ec:	8c 81       	ldd	r24, Y+4	; 0x04
    28ee:	80 32       	cpi	r24, 0x20	; 32
    28f0:	18 f0       	brcs	.+6      	; 0x28f8 <Port_enuSetPinDirection+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
    28f2:	82 e0       	ldi	r24, 0x02	; 2
    28f4:	89 83       	std	Y+1, r24	; 0x01
    28f6:	59 c0       	rjmp	.+178    	; 0x29aa <Port_enuSetPinDirection+0xe2>
	}

	else if(Copy_u8PinDirection > PORT_MAX_INDEX_OF_DIRECTION ){
    28f8:	8d 81       	ldd	r24, Y+5	; 0x05
    28fa:	82 30       	cpi	r24, 0x02	; 2
    28fc:	18 f0       	brcs	.+6      	; 0x2904 <Port_enuSetPinDirection+0x3c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	89 83       	std	Y+1, r24	; 0x01
    2902:	53 c0       	rjmp	.+166    	; 0x29aa <Port_enuSetPinDirection+0xe2>
		}

	else{

			switch(Copy_u8PinDirection){
    2904:	8d 81       	ldd	r24, Y+5	; 0x05
    2906:	88 2f       	mov	r24, r24
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	00 97       	sbiw	r24, 0x00	; 0
    290c:	41 f1       	breq	.+80     	; 0x295e <Port_enuSetPinDirection+0x96>
    290e:	01 97       	sbiw	r24, 0x01	; 1
    2910:	09 f0       	breq	.+2      	; 0x2914 <Port_enuSetPinDirection+0x4c>
							break;

			default:

				// impossible
					break;
    2912:	4b c0       	rjmp	.+150    	; 0x29aa <Port_enuSetPinDirection+0xe2>
	else{

			switch(Copy_u8PinDirection){

			case PORT_PIN_DIRECTION_OUTPUT :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    2914:	8b 81       	ldd	r24, Y+3	; 0x03
    2916:	88 2f       	mov	r24, r24
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	88 0f       	add	r24, r24
    291c:	99 1f       	adc	r25, r25
    291e:	80 5a       	subi	r24, 0xA0	; 160
    2920:	9f 4f       	sbci	r25, 0xFF	; 255
    2922:	fc 01       	movw	r30, r24
    2924:	80 81       	ld	r24, Z
    2926:	91 81       	ldd	r25, Z+1	; 0x01
    2928:	2b 81       	ldd	r18, Y+3	; 0x03
    292a:	22 2f       	mov	r18, r18
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	22 0f       	add	r18, r18
    2930:	33 1f       	adc	r19, r19
    2932:	20 5a       	subi	r18, 0xA0	; 160
    2934:	3f 4f       	sbci	r19, 0xFF	; 255
    2936:	f9 01       	movw	r30, r18
    2938:	20 81       	ld	r18, Z
    293a:	31 81       	ldd	r19, Z+1	; 0x01
    293c:	f9 01       	movw	r30, r18
    293e:	20 81       	ld	r18, Z
    2940:	62 2f       	mov	r22, r18
    2942:	2a 81       	ldd	r18, Y+2	; 0x02
    2944:	42 2f       	mov	r20, r18
    2946:	50 e0       	ldi	r21, 0x00	; 0
    2948:	21 e0       	ldi	r18, 0x01	; 1
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <Port_enuSetPinDirection+0x8a>
    294e:	22 0f       	add	r18, r18
    2950:	33 1f       	adc	r19, r19
    2952:	4a 95       	dec	r20
    2954:	e2 f7       	brpl	.-8      	; 0x294e <Port_enuSetPinDirection+0x86>
    2956:	26 2b       	or	r18, r22
    2958:	fc 01       	movw	r30, r24
    295a:	20 83       	st	Z, r18
					break;
    295c:	26 c0       	rjmp	.+76     	; 0x29aa <Port_enuSetPinDirection+0xe2>

			case PORT_PIN_DIRECTION_INPUT :
							CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
    2960:	88 2f       	mov	r24, r24
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	88 0f       	add	r24, r24
    2966:	99 1f       	adc	r25, r25
    2968:	80 5a       	subi	r24, 0xA0	; 160
    296a:	9f 4f       	sbci	r25, 0xFF	; 255
    296c:	fc 01       	movw	r30, r24
    296e:	80 81       	ld	r24, Z
    2970:	91 81       	ldd	r25, Z+1	; 0x01
    2972:	2b 81       	ldd	r18, Y+3	; 0x03
    2974:	22 2f       	mov	r18, r18
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	22 0f       	add	r18, r18
    297a:	33 1f       	adc	r19, r19
    297c:	20 5a       	subi	r18, 0xA0	; 160
    297e:	3f 4f       	sbci	r19, 0xFF	; 255
    2980:	f9 01       	movw	r30, r18
    2982:	20 81       	ld	r18, Z
    2984:	31 81       	ldd	r19, Z+1	; 0x01
    2986:	f9 01       	movw	r30, r18
    2988:	20 81       	ld	r18, Z
    298a:	62 2f       	mov	r22, r18
    298c:	2a 81       	ldd	r18, Y+2	; 0x02
    298e:	42 2f       	mov	r20, r18
    2990:	50 e0       	ldi	r21, 0x00	; 0
    2992:	21 e0       	ldi	r18, 0x01	; 1
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	02 c0       	rjmp	.+4      	; 0x299c <Port_enuSetPinDirection+0xd4>
    2998:	22 0f       	add	r18, r18
    299a:	33 1f       	adc	r19, r19
    299c:	4a 95       	dec	r20
    299e:	e2 f7       	brpl	.-8      	; 0x2998 <Port_enuSetPinDirection+0xd0>
    29a0:	20 95       	com	r18
    29a2:	26 23       	and	r18, r22
    29a4:	fc 01       	movw	r30, r24
    29a6:	20 83       	st	Z, r18
							break;
    29a8:	00 00       	nop

	}



	return Loc_enuState;
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	df 91       	pop	r29
    29b8:	cf 91       	pop	r28
    29ba:	08 95       	ret

000029bc <Port_enuSetPinMode>:
Port_ErrorStatusType Port_enuSetPinMode(u8 Copy_u8PinNumber, u8 Copy_u8PinMode){
    29bc:	cf 93       	push	r28
    29be:	df 93       	push	r29
    29c0:	00 d0       	rcall	.+0      	; 0x29c2 <Port_enuSetPinMode+0x6>
    29c2:	00 d0       	rcall	.+0      	; 0x29c4 <Port_enuSetPinMode+0x8>
    29c4:	1f 92       	push	r1
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    29ca:	8c 83       	std	Y+4, r24	; 0x04
    29cc:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
    29ce:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
    29d0:	8c 81       	ldd	r24, Y+4	; 0x04
    29d2:	87 70       	andi	r24, 0x07	; 7
    29d4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
    29d6:	8c 81       	ldd	r24, Y+4	; 0x04
    29d8:	86 95       	lsr	r24
    29da:	86 95       	lsr	r24
    29dc:	86 95       	lsr	r24
    29de:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
    29e0:	8c 81       	ldd	r24, Y+4	; 0x04
    29e2:	80 32       	cpi	r24, 0x20	; 32
    29e4:	18 f0       	brcs	.+6      	; 0x29ec <Port_enuSetPinMode+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
    29e6:	82 e0       	ldi	r24, 0x02	; 2
    29e8:	89 83       	std	Y+1, r24	; 0x01
    29ea:	43 c1       	rjmp	.+646    	; 0x2c72 <Port_enuSetPinMode+0x2b6>
	}

	else if(Copy_u8PinMode > PORT_MAX_INDEX_OF_PIN_MODE ){
    29ec:	8d 81       	ldd	r24, Y+5	; 0x05
    29ee:	84 30       	cpi	r24, 0x04	; 4
    29f0:	18 f0       	brcs	.+6      	; 0x29f8 <Port_enuSetPinMode+0x3c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	89 83       	std	Y+1, r24	; 0x01
    29f6:	3d c1       	rjmp	.+634    	; 0x2c72 <Port_enuSetPinMode+0x2b6>
		}

	else{

			switch(Copy_u8PinMode){
    29f8:	8d 81       	ldd	r24, Y+5	; 0x05
    29fa:	88 2f       	mov	r24, r24
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	81 30       	cpi	r24, 0x01	; 1
    2a00:	91 05       	cpc	r25, r1
    2a02:	09 f4       	brne	.+2      	; 0x2a06 <Port_enuSetPinMode+0x4a>
    2a04:	57 c0       	rjmp	.+174    	; 0x2ab4 <Port_enuSetPinMode+0xf8>
    2a06:	82 30       	cpi	r24, 0x02	; 2
    2a08:	91 05       	cpc	r25, r1
    2a0a:	1c f4       	brge	.+6      	; 0x2a12 <Port_enuSetPinMode+0x56>
    2a0c:	89 2b       	or	r24, r25
    2a0e:	49 f0       	breq	.+18     	; 0x2a22 <Port_enuSetPinMode+0x66>


			default:

				// impossible
					break;
    2a10:	30 c1       	rjmp	.+608    	; 0x2c72 <Port_enuSetPinMode+0x2b6>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
		}

	else{

			switch(Copy_u8PinMode){
    2a12:	82 30       	cpi	r24, 0x02	; 2
    2a14:	91 05       	cpc	r25, r1
    2a16:	09 f4       	brne	.+2      	; 0x2a1a <Port_enuSetPinMode+0x5e>
    2a18:	97 c0       	rjmp	.+302    	; 0x2b48 <Port_enuSetPinMode+0x18c>
    2a1a:	03 97       	sbiw	r24, 0x03	; 3
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <Port_enuSetPinMode+0x64>
    2a1e:	df c0       	rjmp	.+446    	; 0x2bde <Port_enuSetPinMode+0x222>


			default:

				// impossible
					break;
    2a20:	28 c1       	rjmp	.+592    	; 0x2c72 <Port_enuSetPinMode+0x2b6>
	else{

			switch(Copy_u8PinMode){

			case PORT_STATUS_PIN_MODE_OUTPUT_HIGH :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    2a22:	8b 81       	ldd	r24, Y+3	; 0x03
    2a24:	88 2f       	mov	r24, r24
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	88 0f       	add	r24, r24
    2a2a:	99 1f       	adc	r25, r25
    2a2c:	80 5a       	subi	r24, 0xA0	; 160
    2a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a30:	fc 01       	movw	r30, r24
    2a32:	80 81       	ld	r24, Z
    2a34:	91 81       	ldd	r25, Z+1	; 0x01
    2a36:	2b 81       	ldd	r18, Y+3	; 0x03
    2a38:	22 2f       	mov	r18, r18
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	22 0f       	add	r18, r18
    2a3e:	33 1f       	adc	r19, r19
    2a40:	20 5a       	subi	r18, 0xA0	; 160
    2a42:	3f 4f       	sbci	r19, 0xFF	; 255
    2a44:	f9 01       	movw	r30, r18
    2a46:	20 81       	ld	r18, Z
    2a48:	31 81       	ldd	r19, Z+1	; 0x01
    2a4a:	f9 01       	movw	r30, r18
    2a4c:	20 81       	ld	r18, Z
    2a4e:	62 2f       	mov	r22, r18
    2a50:	2a 81       	ldd	r18, Y+2	; 0x02
    2a52:	42 2f       	mov	r20, r18
    2a54:	50 e0       	ldi	r21, 0x00	; 0
    2a56:	21 e0       	ldi	r18, 0x01	; 1
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	02 c0       	rjmp	.+4      	; 0x2a60 <Port_enuSetPinMode+0xa4>
    2a5c:	22 0f       	add	r18, r18
    2a5e:	33 1f       	adc	r19, r19
    2a60:	4a 95       	dec	r20
    2a62:	e2 f7       	brpl	.-8      	; 0x2a5c <Port_enuSetPinMode+0xa0>
    2a64:	26 2b       	or	r18, r22
    2a66:	fc 01       	movw	r30, r24
    2a68:	20 83       	st	Z, r18
					SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    2a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6c:	88 2f       	mov	r24, r24
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	88 0f       	add	r24, r24
    2a72:	99 1f       	adc	r25, r25
    2a74:	88 59       	subi	r24, 0x98	; 152
    2a76:	9f 4f       	sbci	r25, 0xFF	; 255
    2a78:	fc 01       	movw	r30, r24
    2a7a:	80 81       	ld	r24, Z
    2a7c:	91 81       	ldd	r25, Z+1	; 0x01
    2a7e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a80:	22 2f       	mov	r18, r18
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	22 0f       	add	r18, r18
    2a86:	33 1f       	adc	r19, r19
    2a88:	28 59       	subi	r18, 0x98	; 152
    2a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8c:	f9 01       	movw	r30, r18
    2a8e:	20 81       	ld	r18, Z
    2a90:	31 81       	ldd	r19, Z+1	; 0x01
    2a92:	f9 01       	movw	r30, r18
    2a94:	20 81       	ld	r18, Z
    2a96:	62 2f       	mov	r22, r18
    2a98:	2a 81       	ldd	r18, Y+2	; 0x02
    2a9a:	42 2f       	mov	r20, r18
    2a9c:	50 e0       	ldi	r21, 0x00	; 0
    2a9e:	21 e0       	ldi	r18, 0x01	; 1
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	02 c0       	rjmp	.+4      	; 0x2aa8 <Port_enuSetPinMode+0xec>
    2aa4:	22 0f       	add	r18, r18
    2aa6:	33 1f       	adc	r19, r19
    2aa8:	4a 95       	dec	r20
    2aaa:	e2 f7       	brpl	.-8      	; 0x2aa4 <Port_enuSetPinMode+0xe8>
    2aac:	26 2b       	or	r18, r22
    2aae:	fc 01       	movw	r30, r24
    2ab0:	20 83       	st	Z, r18
					break;
    2ab2:	df c0       	rjmp	.+446    	; 0x2c72 <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_OUTPUT_LOW :
						SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    2ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab6:	88 2f       	mov	r24, r24
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	88 0f       	add	r24, r24
    2abc:	99 1f       	adc	r25, r25
    2abe:	80 5a       	subi	r24, 0xA0	; 160
    2ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ac2:	fc 01       	movw	r30, r24
    2ac4:	80 81       	ld	r24, Z
    2ac6:	91 81       	ldd	r25, Z+1	; 0x01
    2ac8:	2b 81       	ldd	r18, Y+3	; 0x03
    2aca:	22 2f       	mov	r18, r18
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	22 0f       	add	r18, r18
    2ad0:	33 1f       	adc	r19, r19
    2ad2:	20 5a       	subi	r18, 0xA0	; 160
    2ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad6:	f9 01       	movw	r30, r18
    2ad8:	20 81       	ld	r18, Z
    2ada:	31 81       	ldd	r19, Z+1	; 0x01
    2adc:	f9 01       	movw	r30, r18
    2ade:	20 81       	ld	r18, Z
    2ae0:	62 2f       	mov	r22, r18
    2ae2:	2a 81       	ldd	r18, Y+2	; 0x02
    2ae4:	42 2f       	mov	r20, r18
    2ae6:	50 e0       	ldi	r21, 0x00	; 0
    2ae8:	21 e0       	ldi	r18, 0x01	; 1
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	02 c0       	rjmp	.+4      	; 0x2af2 <Port_enuSetPinMode+0x136>
    2aee:	22 0f       	add	r18, r18
    2af0:	33 1f       	adc	r19, r19
    2af2:	4a 95       	dec	r20
    2af4:	e2 f7       	brpl	.-8      	; 0x2aee <Port_enuSetPinMode+0x132>
    2af6:	26 2b       	or	r18, r22
    2af8:	fc 01       	movw	r30, r24
    2afa:	20 83       	st	Z, r18
						CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    2afc:	8b 81       	ldd	r24, Y+3	; 0x03
    2afe:	88 2f       	mov	r24, r24
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	88 0f       	add	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	88 59       	subi	r24, 0x98	; 152
    2b08:	9f 4f       	sbci	r25, 0xFF	; 255
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	80 81       	ld	r24, Z
    2b0e:	91 81       	ldd	r25, Z+1	; 0x01
    2b10:	2b 81       	ldd	r18, Y+3	; 0x03
    2b12:	22 2f       	mov	r18, r18
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	22 0f       	add	r18, r18
    2b18:	33 1f       	adc	r19, r19
    2b1a:	28 59       	subi	r18, 0x98	; 152
    2b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b1e:	f9 01       	movw	r30, r18
    2b20:	20 81       	ld	r18, Z
    2b22:	31 81       	ldd	r19, Z+1	; 0x01
    2b24:	f9 01       	movw	r30, r18
    2b26:	20 81       	ld	r18, Z
    2b28:	62 2f       	mov	r22, r18
    2b2a:	2a 81       	ldd	r18, Y+2	; 0x02
    2b2c:	42 2f       	mov	r20, r18
    2b2e:	50 e0       	ldi	r21, 0x00	; 0
    2b30:	21 e0       	ldi	r18, 0x01	; 1
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	02 c0       	rjmp	.+4      	; 0x2b3a <Port_enuSetPinMode+0x17e>
    2b36:	22 0f       	add	r18, r18
    2b38:	33 1f       	adc	r19, r19
    2b3a:	4a 95       	dec	r20
    2b3c:	e2 f7       	brpl	.-8      	; 0x2b36 <Port_enuSetPinMode+0x17a>
    2b3e:	20 95       	com	r18
    2b40:	26 23       	and	r18, r22
    2b42:	fc 01       	movw	r30, r24
    2b44:	20 83       	st	Z, r18
							break;
    2b46:	95 c0       	rjmp	.+298    	; 0x2c72 <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_INPUT_FLOAT :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	88 2f       	mov	r24, r24
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	88 0f       	add	r24, r24
    2b50:	99 1f       	adc	r25, r25
    2b52:	80 5a       	subi	r24, 0xA0	; 160
    2b54:	9f 4f       	sbci	r25, 0xFF	; 255
    2b56:	fc 01       	movw	r30, r24
    2b58:	80 81       	ld	r24, Z
    2b5a:	91 81       	ldd	r25, Z+1	; 0x01
    2b5c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b5e:	22 2f       	mov	r18, r18
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	22 0f       	add	r18, r18
    2b64:	33 1f       	adc	r19, r19
    2b66:	20 5a       	subi	r18, 0xA0	; 160
    2b68:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6a:	f9 01       	movw	r30, r18
    2b6c:	20 81       	ld	r18, Z
    2b6e:	31 81       	ldd	r19, Z+1	; 0x01
    2b70:	f9 01       	movw	r30, r18
    2b72:	20 81       	ld	r18, Z
    2b74:	62 2f       	mov	r22, r18
    2b76:	2a 81       	ldd	r18, Y+2	; 0x02
    2b78:	42 2f       	mov	r20, r18
    2b7a:	50 e0       	ldi	r21, 0x00	; 0
    2b7c:	21 e0       	ldi	r18, 0x01	; 1
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	02 c0       	rjmp	.+4      	; 0x2b86 <Port_enuSetPinMode+0x1ca>
    2b82:	22 0f       	add	r18, r18
    2b84:	33 1f       	adc	r19, r19
    2b86:	4a 95       	dec	r20
    2b88:	e2 f7       	brpl	.-8      	; 0x2b82 <Port_enuSetPinMode+0x1c6>
    2b8a:	20 95       	com	r18
    2b8c:	26 23       	and	r18, r22
    2b8e:	fc 01       	movw	r30, r24
    2b90:	20 83       	st	Z, r18
								CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    2b92:	8b 81       	ldd	r24, Y+3	; 0x03
    2b94:	88 2f       	mov	r24, r24
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	88 0f       	add	r24, r24
    2b9a:	99 1f       	adc	r25, r25
    2b9c:	88 59       	subi	r24, 0x98	; 152
    2b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba0:	fc 01       	movw	r30, r24
    2ba2:	80 81       	ld	r24, Z
    2ba4:	91 81       	ldd	r25, Z+1	; 0x01
    2ba6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ba8:	22 2f       	mov	r18, r18
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	22 0f       	add	r18, r18
    2bae:	33 1f       	adc	r19, r19
    2bb0:	28 59       	subi	r18, 0x98	; 152
    2bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb4:	f9 01       	movw	r30, r18
    2bb6:	20 81       	ld	r18, Z
    2bb8:	31 81       	ldd	r19, Z+1	; 0x01
    2bba:	f9 01       	movw	r30, r18
    2bbc:	20 81       	ld	r18, Z
    2bbe:	62 2f       	mov	r22, r18
    2bc0:	2a 81       	ldd	r18, Y+2	; 0x02
    2bc2:	42 2f       	mov	r20, r18
    2bc4:	50 e0       	ldi	r21, 0x00	; 0
    2bc6:	21 e0       	ldi	r18, 0x01	; 1
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	02 c0       	rjmp	.+4      	; 0x2bd0 <Port_enuSetPinMode+0x214>
    2bcc:	22 0f       	add	r18, r18
    2bce:	33 1f       	adc	r19, r19
    2bd0:	4a 95       	dec	r20
    2bd2:	e2 f7       	brpl	.-8      	; 0x2bcc <Port_enuSetPinMode+0x210>
    2bd4:	20 95       	com	r18
    2bd6:	26 23       	and	r18, r22
    2bd8:	fc 01       	movw	r30, r24
    2bda:	20 83       	st	Z, r18
								break;
    2bdc:	4a c0       	rjmp	.+148    	; 0x2c72 <Port_enuSetPinMode+0x2b6>
			case PORT_STATUS_PIN_MODE_INPUT_PULL_UP :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    2bde:	8b 81       	ldd	r24, Y+3	; 0x03
    2be0:	88 2f       	mov	r24, r24
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	88 0f       	add	r24, r24
    2be6:	99 1f       	adc	r25, r25
    2be8:	80 5a       	subi	r24, 0xA0	; 160
    2bea:	9f 4f       	sbci	r25, 0xFF	; 255
    2bec:	fc 01       	movw	r30, r24
    2bee:	80 81       	ld	r24, Z
    2bf0:	91 81       	ldd	r25, Z+1	; 0x01
    2bf2:	2b 81       	ldd	r18, Y+3	; 0x03
    2bf4:	22 2f       	mov	r18, r18
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	22 0f       	add	r18, r18
    2bfa:	33 1f       	adc	r19, r19
    2bfc:	20 5a       	subi	r18, 0xA0	; 160
    2bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    2c00:	f9 01       	movw	r30, r18
    2c02:	20 81       	ld	r18, Z
    2c04:	31 81       	ldd	r19, Z+1	; 0x01
    2c06:	f9 01       	movw	r30, r18
    2c08:	20 81       	ld	r18, Z
    2c0a:	62 2f       	mov	r22, r18
    2c0c:	2a 81       	ldd	r18, Y+2	; 0x02
    2c0e:	42 2f       	mov	r20, r18
    2c10:	50 e0       	ldi	r21, 0x00	; 0
    2c12:	21 e0       	ldi	r18, 0x01	; 1
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	02 c0       	rjmp	.+4      	; 0x2c1c <Port_enuSetPinMode+0x260>
    2c18:	22 0f       	add	r18, r18
    2c1a:	33 1f       	adc	r19, r19
    2c1c:	4a 95       	dec	r20
    2c1e:	e2 f7       	brpl	.-8      	; 0x2c18 <Port_enuSetPinMode+0x25c>
    2c20:	20 95       	com	r18
    2c22:	26 23       	and	r18, r22
    2c24:	fc 01       	movw	r30, r24
    2c26:	20 83       	st	Z, r18
								SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    2c28:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2a:	88 2f       	mov	r24, r24
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	88 0f       	add	r24, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	88 59       	subi	r24, 0x98	; 152
    2c34:	9f 4f       	sbci	r25, 0xFF	; 255
    2c36:	fc 01       	movw	r30, r24
    2c38:	80 81       	ld	r24, Z
    2c3a:	91 81       	ldd	r25, Z+1	; 0x01
    2c3c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c3e:	22 2f       	mov	r18, r18
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	22 0f       	add	r18, r18
    2c44:	33 1f       	adc	r19, r19
    2c46:	28 59       	subi	r18, 0x98	; 152
    2c48:	3f 4f       	sbci	r19, 0xFF	; 255
    2c4a:	f9 01       	movw	r30, r18
    2c4c:	20 81       	ld	r18, Z
    2c4e:	31 81       	ldd	r19, Z+1	; 0x01
    2c50:	f9 01       	movw	r30, r18
    2c52:	20 81       	ld	r18, Z
    2c54:	62 2f       	mov	r22, r18
    2c56:	2a 81       	ldd	r18, Y+2	; 0x02
    2c58:	42 2f       	mov	r20, r18
    2c5a:	50 e0       	ldi	r21, 0x00	; 0
    2c5c:	21 e0       	ldi	r18, 0x01	; 1
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	02 c0       	rjmp	.+4      	; 0x2c66 <Port_enuSetPinMode+0x2aa>
    2c62:	22 0f       	add	r18, r18
    2c64:	33 1f       	adc	r19, r19
    2c66:	4a 95       	dec	r20
    2c68:	e2 f7       	brpl	.-8      	; 0x2c62 <Port_enuSetPinMode+0x2a6>
    2c6a:	26 2b       	or	r18, r22
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	20 83       	st	Z, r18
								break;
    2c70:	00 00       	nop



	}

	return Loc_enuState;
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	df 91       	pop	r29
    2c80:	cf 91       	pop	r28
    2c82:	08 95       	ret

00002c84 <Gie_enuEnableGlobalInterrupt>:


/********************************** Software Interfaces Declarations *******************/


Gie_ErrorStatusType Gie_enuEnableGlobalInterrupt(void){
    2c84:	cf 93       	push	r28
    2c86:	df 93       	push	r29
    2c88:	1f 92       	push	r1
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    2c8e:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(SREG,GIE_BIT);
    2c90:	8f e5       	ldi	r24, 0x5F	; 95
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	2f e5       	ldi	r18, 0x5F	; 95
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	f9 01       	movw	r30, r18
    2c9a:	20 81       	ld	r18, Z
    2c9c:	20 68       	ori	r18, 0x80	; 128
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	20 83       	st	Z, r18

	return Loc_enuGieState;
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01

}
    2ca4:	0f 90       	pop	r0
    2ca6:	df 91       	pop	r29
    2ca8:	cf 91       	pop	r28
    2caa:	08 95       	ret

00002cac <Gie_enuDisableGlobalInterrupt>:
Gie_ErrorStatusType Gie_enuDisableGlobalInterrupt(void){
    2cac:	cf 93       	push	r28
    2cae:	df 93       	push	r29
    2cb0:	1f 92       	push	r1
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    2cb6:	19 82       	std	Y+1, r1	; 0x01

		CLEAR_BIT(SREG,GIE_BIT);
    2cb8:	8f e5       	ldi	r24, 0x5F	; 95
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	2f e5       	ldi	r18, 0x5F	; 95
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	f9 01       	movw	r30, r18
    2cc2:	20 81       	ld	r18, Z
    2cc4:	2f 77       	andi	r18, 0x7F	; 127
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	20 83       	st	Z, r18

		return Loc_enuGieState;
    2cca:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ccc:	0f 90       	pop	r0
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	08 95       	ret

00002cd4 <Gie_enuSetGloablInterrupt>:

Gie_ErrorStatusType Gie_enuSetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState){
    2cd4:	cf 93       	push	r28
    2cd6:	df 93       	push	r29
    2cd8:	00 d0       	rcall	.+0      	; 0x2cda <Gie_enuSetGloablInterrupt+0x6>
    2cda:	cd b7       	in	r28, 0x3d	; 61
    2cdc:	de b7       	in	r29, 0x3e	; 62
    2cde:	8a 83       	std	Y+2, r24	; 0x02

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    2ce0:	19 82       	std	Y+1, r1	; 0x01

			WRITE_BIT(SREG,GIE_BIT,Copy_enuGlobalState);
    2ce2:	8f e5       	ldi	r24, 0x5F	; 95
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	2f e5       	ldi	r18, 0x5F	; 95
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	f9 01       	movw	r30, r18
    2cec:	20 81       	ld	r18, Z
    2cee:	42 2f       	mov	r20, r18
    2cf0:	4f 77       	andi	r20, 0x7F	; 127
    2cf2:	2a 81       	ldd	r18, Y+2	; 0x02
    2cf4:	22 2f       	mov	r18, r18
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	36 95       	lsr	r19
    2cfa:	32 2f       	mov	r19, r18
    2cfc:	22 27       	eor	r18, r18
    2cfe:	37 95       	ror	r19
    2d00:	27 95       	ror	r18
    2d02:	24 2b       	or	r18, r20
    2d04:	fc 01       	movw	r30, r24
    2d06:	20 83       	st	Z, r18

			return Loc_enuGieState;
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	df 91       	pop	r29
    2d10:	cf 91       	pop	r28
    2d12:	08 95       	ret

00002d14 <Gie_enuGetGloablInterrupt>:


Gie_ErrorStatusType Gie_enuGetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState, Gie_EnableDisableType* Address_GlobalStateResult){
    2d14:	cf 93       	push	r28
    2d16:	df 93       	push	r29
    2d18:	00 d0       	rcall	.+0      	; 0x2d1a <Gie_enuGetGloablInterrupt+0x6>
    2d1a:	00 d0       	rcall	.+0      	; 0x2d1c <Gie_enuGetGloablInterrupt+0x8>
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
    2d20:	8a 83       	std	Y+2, r24	; 0x02
    2d22:	7c 83       	std	Y+4, r23	; 0x04
    2d24:	6b 83       	std	Y+3, r22	; 0x03

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    2d26:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_GlobalStateResult){
    2d28:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d2c:	89 2b       	or	r24, r25
    2d2e:	19 f4       	brne	.+6      	; 0x2d36 <Gie_enuGetGloablInterrupt+0x22>
		Loc_enuGieState = GIE_STATUS_NULL_POINTER_ADDRESS;
    2d30:	82 e0       	ldi	r24, 0x02	; 2
    2d32:	89 83       	std	Y+1, r24	; 0x01
    2d34:	0c c0       	rjmp	.+24     	; 0x2d4e <Gie_enuGetGloablInterrupt+0x3a>
	}
	else {
		*Address_GlobalStateResult = (Gie_EnableDisableType)READ_BIT(SREG,GIE_BIT);
    2d36:	8f e5       	ldi	r24, 0x5F	; 95
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	80 81       	ld	r24, Z
    2d3e:	28 2f       	mov	r18, r24
    2d40:	22 1f       	adc	r18, r18
    2d42:	22 27       	eor	r18, r18
    2d44:	22 1f       	adc	r18, r18
    2d46:	8b 81       	ldd	r24, Y+3	; 0x03
    2d48:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	20 83       	st	Z, r18

	}

			return Loc_enuGieState;
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	0f 90       	pop	r0
    2d56:	0f 90       	pop	r0
    2d58:	df 91       	pop	r29
    2d5a:	cf 91       	pop	r28
    2d5c:	08 95       	ret

00002d5e <Exti_enuEnable>:


/********************************** Software Interfaces Declarations *******************/


Exti_StatusErrorType Exti_enuEnable(Exti_IntIndexType Copy_enuIntIndex,  Exti_Intx_SelectConfigType Copy_enuConfiguration){
    2d5e:	cf 93       	push	r28
    2d60:	df 93       	push	r29
    2d62:	00 d0       	rcall	.+0      	; 0x2d64 <Exti_enuEnable+0x6>
    2d64:	1f 92       	push	r1
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
    2d6a:	8a 83       	std	Y+2, r24	; 0x02
    2d6c:	6b 83       	std	Y+3, r22	; 0x03

	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
    2d72:	8a 81       	ldd	r24, Y+2	; 0x02
    2d74:	83 30       	cpi	r24, 0x03	; 3
    2d76:	18 f0       	brcs	.+6      	; 0x2d7e <Exti_enuEnable+0x20>
		Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
    2d78:	83 e0       	ldi	r24, 0x03	; 3
    2d7a:	89 83       	std	Y+1, r24	; 0x01
    2d7c:	8f c0       	rjmp	.+286    	; 0x2e9c <Exti_enuEnable+0x13e>
	}
	else{
		switch(Copy_enuIntIndex){
    2d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d80:	88 2f       	mov	r24, r24
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	81 30       	cpi	r24, 0x01	; 1
    2d86:	91 05       	cpc	r25, r1
    2d88:	89 f1       	breq	.+98     	; 0x2dec <Exti_enuEnable+0x8e>
    2d8a:	82 30       	cpi	r24, 0x02	; 2
    2d8c:	91 05       	cpc	r25, r1
    2d8e:	09 f4       	brne	.+2      	; 0x2d92 <Exti_enuEnable+0x34>
    2d90:	62 c0       	rjmp	.+196    	; 0x2e56 <Exti_enuEnable+0xf8>
    2d92:	89 2b       	or	r24, r25
    2d94:	09 f0       	breq	.+2      	; 0x2d98 <Exti_enuEnable+0x3a>
			WRITE_BIT(MCUCSR,6,(Copy_enuConfiguration>>0)& 0x01);
			Int2_EnableInterrupt();
			break;

		default:
			break;
    2d96:	82 c0       	rjmp	.+260    	; 0x2e9c <Exti_enuEnable+0x13e>
	}
	else{
		switch(Copy_enuIntIndex){

		case EXTI_INT0_INDEX :
			WRITE_BIT(MCUCR,0,(Copy_enuConfiguration>>0)& 0x01);
    2d98:	85 e5       	ldi	r24, 0x55	; 85
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	25 e5       	ldi	r18, 0x55	; 85
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	f9 01       	movw	r30, r18
    2da2:	20 81       	ld	r18, Z
    2da4:	32 2f       	mov	r19, r18
    2da6:	3e 7f       	andi	r19, 0xFE	; 254
    2da8:	2b 81       	ldd	r18, Y+3	; 0x03
    2daa:	21 70       	andi	r18, 0x01	; 1
    2dac:	23 2b       	or	r18, r19
    2dae:	fc 01       	movw	r30, r24
    2db0:	20 83       	st	Z, r18
			WRITE_BIT(MCUCR,1,(Copy_enuConfiguration>>1)& 0x01);
    2db2:	85 e5       	ldi	r24, 0x55	; 85
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	25 e5       	ldi	r18, 0x55	; 85
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	f9 01       	movw	r30, r18
    2dbc:	20 81       	ld	r18, Z
    2dbe:	42 2f       	mov	r20, r18
    2dc0:	4d 7f       	andi	r20, 0xFD	; 253
    2dc2:	2b 81       	ldd	r18, Y+3	; 0x03
    2dc4:	26 95       	lsr	r18
    2dc6:	22 2f       	mov	r18, r18
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	21 70       	andi	r18, 0x01	; 1
    2dcc:	33 27       	eor	r19, r19
    2dce:	22 0f       	add	r18, r18
    2dd0:	33 1f       	adc	r19, r19
    2dd2:	24 2b       	or	r18, r20
    2dd4:	fc 01       	movw	r30, r24
    2dd6:	20 83       	st	Z, r18

			Int0_EnableInterrupt();
    2dd8:	8b e5       	ldi	r24, 0x5B	; 91
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	2b e5       	ldi	r18, 0x5B	; 91
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	f9 01       	movw	r30, r18
    2de2:	20 81       	ld	r18, Z
    2de4:	20 64       	ori	r18, 0x40	; 64
    2de6:	fc 01       	movw	r30, r24
    2de8:	20 83       	st	Z, r18

			break;
    2dea:	58 c0       	rjmp	.+176    	; 0x2e9c <Exti_enuEnable+0x13e>

		case EXTI_INT1_INDEX :
			WRITE_BIT(MCUCR,2,(Copy_enuConfiguration>>0)& 0x01);
    2dec:	85 e5       	ldi	r24, 0x55	; 85
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	25 e5       	ldi	r18, 0x55	; 85
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	f9 01       	movw	r30, r18
    2df6:	20 81       	ld	r18, Z
    2df8:	42 2f       	mov	r20, r18
    2dfa:	4b 7f       	andi	r20, 0xFB	; 251
    2dfc:	2b 81       	ldd	r18, Y+3	; 0x03
    2dfe:	22 2f       	mov	r18, r18
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	21 70       	andi	r18, 0x01	; 1
    2e04:	33 27       	eor	r19, r19
    2e06:	22 0f       	add	r18, r18
    2e08:	33 1f       	adc	r19, r19
    2e0a:	22 0f       	add	r18, r18
    2e0c:	33 1f       	adc	r19, r19
    2e0e:	24 2b       	or	r18, r20
    2e10:	fc 01       	movw	r30, r24
    2e12:	20 83       	st	Z, r18
			WRITE_BIT(MCUCR,3,(Copy_enuConfiguration>>1)& 0x01);
    2e14:	85 e5       	ldi	r24, 0x55	; 85
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	25 e5       	ldi	r18, 0x55	; 85
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	f9 01       	movw	r30, r18
    2e1e:	20 81       	ld	r18, Z
    2e20:	42 2f       	mov	r20, r18
    2e22:	47 7f       	andi	r20, 0xF7	; 247
    2e24:	2b 81       	ldd	r18, Y+3	; 0x03
    2e26:	26 95       	lsr	r18
    2e28:	22 2f       	mov	r18, r18
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	21 70       	andi	r18, 0x01	; 1
    2e2e:	33 27       	eor	r19, r19
    2e30:	22 0f       	add	r18, r18
    2e32:	33 1f       	adc	r19, r19
    2e34:	22 0f       	add	r18, r18
    2e36:	33 1f       	adc	r19, r19
    2e38:	22 0f       	add	r18, r18
    2e3a:	33 1f       	adc	r19, r19
    2e3c:	24 2b       	or	r18, r20
    2e3e:	fc 01       	movw	r30, r24
    2e40:	20 83       	st	Z, r18
			Int1_EnableInterrupt();
    2e42:	8b e5       	ldi	r24, 0x5B	; 91
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	2b e5       	ldi	r18, 0x5B	; 91
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	f9 01       	movw	r30, r18
    2e4c:	20 81       	ld	r18, Z
    2e4e:	20 68       	ori	r18, 0x80	; 128
    2e50:	fc 01       	movw	r30, r24
    2e52:	20 83       	st	Z, r18
			break;
    2e54:	23 c0       	rjmp	.+70     	; 0x2e9c <Exti_enuEnable+0x13e>

		case EXTI_INT2_INDEX :
			WRITE_BIT(MCUCSR,6,(Copy_enuConfiguration>>0)& 0x01);
    2e56:	84 e5       	ldi	r24, 0x54	; 84
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	24 e5       	ldi	r18, 0x54	; 84
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	f9 01       	movw	r30, r18
    2e60:	20 81       	ld	r18, Z
    2e62:	42 2f       	mov	r20, r18
    2e64:	4f 7b       	andi	r20, 0xBF	; 191
    2e66:	2b 81       	ldd	r18, Y+3	; 0x03
    2e68:	22 2f       	mov	r18, r18
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	21 70       	andi	r18, 0x01	; 1
    2e6e:	33 27       	eor	r19, r19
    2e70:	00 24       	eor	r0, r0
    2e72:	36 95       	lsr	r19
    2e74:	27 95       	ror	r18
    2e76:	07 94       	ror	r0
    2e78:	36 95       	lsr	r19
    2e7a:	27 95       	ror	r18
    2e7c:	07 94       	ror	r0
    2e7e:	32 2f       	mov	r19, r18
    2e80:	20 2d       	mov	r18, r0
    2e82:	24 2b       	or	r18, r20
    2e84:	fc 01       	movw	r30, r24
    2e86:	20 83       	st	Z, r18
			Int2_EnableInterrupt();
    2e88:	8b e5       	ldi	r24, 0x5B	; 91
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	2b e5       	ldi	r18, 0x5B	; 91
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	f9 01       	movw	r30, r18
    2e92:	20 81       	ld	r18, Z
    2e94:	20 62       	ori	r18, 0x20	; 32
    2e96:	fc 01       	movw	r30, r24
    2e98:	20 83       	st	Z, r18
			break;
    2e9a:	00 00       	nop

		}

	}

	return Loc_enuExtiStatus;
    2e9c:	89 81       	ldd	r24, Y+1	; 0x01

}
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	0f 90       	pop	r0
    2ea4:	df 91       	pop	r29
    2ea6:	cf 91       	pop	r28
    2ea8:	08 95       	ret

00002eaa <Exti_enuDisable>:
Exti_StatusErrorType	Exti_enuDisable(Exti_IntIndexType Copy_enuIntIndex){
    2eaa:	cf 93       	push	r28
    2eac:	df 93       	push	r29
    2eae:	00 d0       	rcall	.+0      	; 0x2eb0 <Exti_enuDisable+0x6>
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
    2eb4:	8a 83       	std	Y+2, r24	; 0x02

	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
    2eba:	8a 81       	ldd	r24, Y+2	; 0x02
    2ebc:	83 30       	cpi	r24, 0x03	; 3
    2ebe:	18 f0       	brcs	.+6      	; 0x2ec6 <Exti_enuDisable+0x1c>
		Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
    2ec0:	83 e0       	ldi	r24, 0x03	; 3
    2ec2:	89 83       	std	Y+1, r24	; 0x01
    2ec4:	2a c0       	rjmp	.+84     	; 0x2f1a <Exti_enuDisable+0x70>
	}
	else{
		switch(Copy_enuIntIndex){
    2ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec8:	88 2f       	mov	r24, r24
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	81 30       	cpi	r24, 0x01	; 1
    2ece:	91 05       	cpc	r25, r1
    2ed0:	81 f0       	breq	.+32     	; 0x2ef2 <Exti_enuDisable+0x48>
    2ed2:	82 30       	cpi	r24, 0x02	; 2
    2ed4:	91 05       	cpc	r25, r1
    2ed6:	b9 f0       	breq	.+46     	; 0x2f06 <Exti_enuDisable+0x5c>
    2ed8:	89 2b       	or	r24, r25
    2eda:	09 f0       	breq	.+2      	; 0x2ede <Exti_enuDisable+0x34>
			Int2_DisableInterrupt();
			break;

		default:
				// impossible
			break;
    2edc:	1e c0       	rjmp	.+60     	; 0x2f1a <Exti_enuDisable+0x70>
	else{
		switch(Copy_enuIntIndex){

		case EXTI_INT0_INDEX :

			Int0_DisableInterrupt();
    2ede:	8b e5       	ldi	r24, 0x5B	; 91
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	2b e5       	ldi	r18, 0x5B	; 91
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	f9 01       	movw	r30, r18
    2ee8:	20 81       	ld	r18, Z
    2eea:	2f 7b       	andi	r18, 0xBF	; 191
    2eec:	fc 01       	movw	r30, r24
    2eee:	20 83       	st	Z, r18
			break;
    2ef0:	14 c0       	rjmp	.+40     	; 0x2f1a <Exti_enuDisable+0x70>

		case EXTI_INT1_INDEX :

			Int1_DisableInterrupt();
    2ef2:	8b e5       	ldi	r24, 0x5B	; 91
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	2b e5       	ldi	r18, 0x5B	; 91
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	f9 01       	movw	r30, r18
    2efc:	20 81       	ld	r18, Z
    2efe:	2f 77       	andi	r18, 0x7F	; 127
    2f00:	fc 01       	movw	r30, r24
    2f02:	20 83       	st	Z, r18
			break;
    2f04:	0a c0       	rjmp	.+20     	; 0x2f1a <Exti_enuDisable+0x70>

		case EXTI_INT2_INDEX :
			Int2_DisableInterrupt();
    2f06:	8b e5       	ldi	r24, 0x5B	; 91
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	2b e5       	ldi	r18, 0x5B	; 91
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	f9 01       	movw	r30, r18
    2f10:	20 81       	ld	r18, Z
    2f12:	2f 7d       	andi	r18, 0xDF	; 223
    2f14:	fc 01       	movw	r30, r24
    2f16:	20 83       	st	Z, r18
			break;
    2f18:	00 00       	nop

		}

	}

	return Loc_enuExtiStatus;
    2f1a:	89 81       	ldd	r24, Y+1	; 0x01

}
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	df 91       	pop	r29
    2f22:	cf 91       	pop	r28
    2f24:	08 95       	ret

00002f26 <Exti_enuSetCallbackFunction>:

Exti_StatusErrorType	Exti_enuSetCallbackFunction(Exti_IntIndexType Copy_enuIntIndex, void (*Address_Interrupt)(void)  ){
    2f26:	cf 93       	push	r28
    2f28:	df 93       	push	r29
    2f2a:	00 d0       	rcall	.+0      	; 0x2f2c <Exti_enuSetCallbackFunction+0x6>
    2f2c:	00 d0       	rcall	.+0      	; 0x2f2e <Exti_enuSetCallbackFunction+0x8>
    2f2e:	cd b7       	in	r28, 0x3d	; 61
    2f30:	de b7       	in	r29, 0x3e	; 62
    2f32:	8a 83       	std	Y+2, r24	; 0x02
    2f34:	7c 83       	std	Y+4, r23	; 0x04
    2f36:	6b 83       	std	Y+3, r22	; 0x03
	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
    2f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3e:	83 30       	cpi	r24, 0x03	; 3
    2f40:	18 f0       	brcs	.+6      	; 0x2f48 <Exti_enuSetCallbackFunction+0x22>
			Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
    2f42:	83 e0       	ldi	r24, 0x03	; 3
    2f44:	89 83       	std	Y+1, r24	; 0x01
    2f46:	13 c0       	rjmp	.+38     	; 0x2f6e <Exti_enuSetCallbackFunction+0x48>

		}
		else if(Address_Interrupt == NULL){
    2f48:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f4c:	89 2b       	or	r24, r25
    2f4e:	19 f4       	brne	.+6      	; 0x2f56 <Exti_enuSetCallbackFunction+0x30>
			Loc_enuExtiStatus = EXTI_STATUS_NULL_POINTER_ADDRESS;
    2f50:	82 e0       	ldi	r24, 0x02	; 2
    2f52:	89 83       	std	Y+1, r24	; 0x01
    2f54:	0c c0       	rjmp	.+24     	; 0x2f6e <Exti_enuSetCallbackFunction+0x48>
		}
		else{
			Exti_InterruptHandler[Copy_enuIntIndex] = Address_Interrupt;
    2f56:	8a 81       	ldd	r24, Y+2	; 0x02
    2f58:	88 2f       	mov	r24, r24
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	88 0f       	add	r24, r24
    2f5e:	99 1f       	adc	r25, r25
    2f60:	85 50       	subi	r24, 0x05	; 5
    2f62:	9f 4f       	sbci	r25, 0xFF	; 255
    2f64:	2b 81       	ldd	r18, Y+3	; 0x03
    2f66:	3c 81       	ldd	r19, Y+4	; 0x04
    2f68:	fc 01       	movw	r30, r24
    2f6a:	31 83       	std	Z+1, r19	; 0x01
    2f6c:	20 83       	st	Z, r18

		}

		return Loc_enuExtiStatus;
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2f70:	0f 90       	pop	r0
    2f72:	0f 90       	pop	r0
    2f74:	0f 90       	pop	r0
    2f76:	0f 90       	pop	r0
    2f78:	df 91       	pop	r29
    2f7a:	cf 91       	pop	r28
    2f7c:	08 95       	ret

00002f7e <__vector_1>:


// ISR function For INT0
void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    2f7e:	1f 92       	push	r1
    2f80:	0f 92       	push	r0
    2f82:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2f86:	0f 92       	push	r0
    2f88:	11 24       	eor	r1, r1
    2f8a:	2f 93       	push	r18
    2f8c:	3f 93       	push	r19
    2f8e:	4f 93       	push	r20
    2f90:	5f 93       	push	r21
    2f92:	6f 93       	push	r22
    2f94:	7f 93       	push	r23
    2f96:	8f 93       	push	r24
    2f98:	9f 93       	push	r25
    2f9a:	af 93       	push	r26
    2f9c:	bf 93       	push	r27
    2f9e:	ef 93       	push	r30
    2fa0:	ff 93       	push	r31
    2fa2:	cf 93       	push	r28
    2fa4:	df 93       	push	r29
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62

		if(Exti_InterruptHandler[EXTI_INT0_INDEX] != NULL)
    2faa:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <Exti_InterruptHandler>
    2fae:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <Exti_InterruptHandler+0x1>
    2fb2:	89 2b       	or	r24, r25
    2fb4:	31 f0       	breq	.+12     	; 0x2fc2 <__vector_1+0x44>
			Exti_InterruptHandler[EXTI_INT0_INDEX]();
    2fb6:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <Exti_InterruptHandler>
    2fba:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <Exti_InterruptHandler+0x1>
    2fbe:	fc 01       	movw	r30, r24
    2fc0:	09 95       	icall

}
    2fc2:	00 00       	nop
    2fc4:	df 91       	pop	r29
    2fc6:	cf 91       	pop	r28
    2fc8:	ff 91       	pop	r31
    2fca:	ef 91       	pop	r30
    2fcc:	bf 91       	pop	r27
    2fce:	af 91       	pop	r26
    2fd0:	9f 91       	pop	r25
    2fd2:	8f 91       	pop	r24
    2fd4:	7f 91       	pop	r23
    2fd6:	6f 91       	pop	r22
    2fd8:	5f 91       	pop	r21
    2fda:	4f 91       	pop	r20
    2fdc:	3f 91       	pop	r19
    2fde:	2f 91       	pop	r18
    2fe0:	0f 90       	pop	r0
    2fe2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2fe6:	0f 90       	pop	r0
    2fe8:	1f 90       	pop	r1
    2fea:	18 95       	reti

00002fec <__vector_2>:

// ISR function For INT1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    2fec:	1f 92       	push	r1
    2fee:	0f 92       	push	r0
    2ff0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2ff4:	0f 92       	push	r0
    2ff6:	11 24       	eor	r1, r1
    2ff8:	2f 93       	push	r18
    2ffa:	3f 93       	push	r19
    2ffc:	4f 93       	push	r20
    2ffe:	5f 93       	push	r21
    3000:	6f 93       	push	r22
    3002:	7f 93       	push	r23
    3004:	8f 93       	push	r24
    3006:	9f 93       	push	r25
    3008:	af 93       	push	r26
    300a:	bf 93       	push	r27
    300c:	ef 93       	push	r30
    300e:	ff 93       	push	r31
    3010:	cf 93       	push	r28
    3012:	df 93       	push	r29
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62

	if(Exti_InterruptHandler[EXTI_INT1_INDEX] != NULL)
    3018:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <Exti_InterruptHandler+0x2>
    301c:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <Exti_InterruptHandler+0x3>
    3020:	89 2b       	or	r24, r25
    3022:	31 f0       	breq	.+12     	; 0x3030 <__vector_2+0x44>
		Exti_InterruptHandler[EXTI_INT1_INDEX]();
    3024:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <Exti_InterruptHandler+0x2>
    3028:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <Exti_InterruptHandler+0x3>
    302c:	fc 01       	movw	r30, r24
    302e:	09 95       	icall

}
    3030:	00 00       	nop
    3032:	df 91       	pop	r29
    3034:	cf 91       	pop	r28
    3036:	ff 91       	pop	r31
    3038:	ef 91       	pop	r30
    303a:	bf 91       	pop	r27
    303c:	af 91       	pop	r26
    303e:	9f 91       	pop	r25
    3040:	8f 91       	pop	r24
    3042:	7f 91       	pop	r23
    3044:	6f 91       	pop	r22
    3046:	5f 91       	pop	r21
    3048:	4f 91       	pop	r20
    304a:	3f 91       	pop	r19
    304c:	2f 91       	pop	r18
    304e:	0f 90       	pop	r0
    3050:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    3054:	0f 90       	pop	r0
    3056:	1f 90       	pop	r1
    3058:	18 95       	reti

0000305a <__vector_3>:


// ISR function For INT2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    305a:	1f 92       	push	r1
    305c:	0f 92       	push	r0
    305e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    3062:	0f 92       	push	r0
    3064:	11 24       	eor	r1, r1
    3066:	2f 93       	push	r18
    3068:	3f 93       	push	r19
    306a:	4f 93       	push	r20
    306c:	5f 93       	push	r21
    306e:	6f 93       	push	r22
    3070:	7f 93       	push	r23
    3072:	8f 93       	push	r24
    3074:	9f 93       	push	r25
    3076:	af 93       	push	r26
    3078:	bf 93       	push	r27
    307a:	ef 93       	push	r30
    307c:	ff 93       	push	r31
    307e:	cf 93       	push	r28
    3080:	df 93       	push	r29
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
	if(Exti_InterruptHandler[EXTI_INT2_INDEX] != NULL)
    3086:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <Exti_InterruptHandler+0x4>
    308a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <Exti_InterruptHandler+0x5>
    308e:	89 2b       	or	r24, r25
    3090:	31 f0       	breq	.+12     	; 0x309e <__vector_3+0x44>
			Exti_InterruptHandler[EXTI_INT2_INDEX]();
    3092:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <Exti_InterruptHandler+0x4>
    3096:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <Exti_InterruptHandler+0x5>
    309a:	fc 01       	movw	r30, r24
    309c:	09 95       	icall

}
    309e:	00 00       	nop
    30a0:	df 91       	pop	r29
    30a2:	cf 91       	pop	r28
    30a4:	ff 91       	pop	r31
    30a6:	ef 91       	pop	r30
    30a8:	bf 91       	pop	r27
    30aa:	af 91       	pop	r26
    30ac:	9f 91       	pop	r25
    30ae:	8f 91       	pop	r24
    30b0:	7f 91       	pop	r23
    30b2:	6f 91       	pop	r22
    30b4:	5f 91       	pop	r21
    30b6:	4f 91       	pop	r20
    30b8:	3f 91       	pop	r19
    30ba:	2f 91       	pop	r18
    30bc:	0f 90       	pop	r0
    30be:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    30c2:	0f 90       	pop	r0
    30c4:	1f 90       	pop	r1
    30c6:	18 95       	reti

000030c8 <Dio_enuWriteChannel>:



/********************************** Software Interfaces Declarations *******************************/

Dio_ErrorStatusType	Dio_enuWriteChannel(u8 Copy_u8ChannelId,u8 Copy_u8Level){
    30c8:	cf 93       	push	r28
    30ca:	df 93       	push	r29
    30cc:	00 d0       	rcall	.+0      	; 0x30ce <Dio_enuWriteChannel+0x6>
    30ce:	00 d0       	rcall	.+0      	; 0x30d0 <Dio_enuWriteChannel+0x8>
    30d0:	1f 92       	push	r1
    30d2:	cd b7       	in	r28, 0x3d	; 61
    30d4:	de b7       	in	r29, 0x3e	; 62
    30d6:	8c 83       	std	Y+4, r24	; 0x04
    30d8:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    30da:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8ChannelId %8;
    30dc:	8c 81       	ldd	r24, Y+4	; 0x04
    30de:	87 70       	andi	r24, 0x07	; 7
    30e0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8ChannelId /8;
    30e2:	8c 81       	ldd	r24, Y+4	; 0x04
    30e4:	86 95       	lsr	r24
    30e6:	86 95       	lsr	r24
    30e8:	86 95       	lsr	r24
    30ea:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    30ec:	8c 81       	ldd	r24, Y+4	; 0x04
    30ee:	80 32       	cpi	r24, 0x20	; 32
    30f0:	18 f0       	brcs	.+6      	; 0x30f8 <Dio_enuWriteChannel+0x30>
		Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    30f2:	82 e0       	ldi	r24, 0x02	; 2
    30f4:	89 83       	std	Y+1, r24	; 0x01
    30f6:	4e c0       	rjmp	.+156    	; 0x3194 <Dio_enuWriteChannel+0xcc>
	}

	else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
    30f8:	8b 81       	ldd	r24, Y+3	; 0x03
    30fa:	88 2f       	mov	r24, r24
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	88 0f       	add	r24, r24
    3100:	99 1f       	adc	r25, r25
    3102:	80 59       	subi	r24, 0x90	; 144
    3104:	9f 4f       	sbci	r25, 0xFF	; 255
    3106:	fc 01       	movw	r30, r24
    3108:	80 81       	ld	r24, Z
    310a:	91 81       	ldd	r25, Z+1	; 0x01
    310c:	fc 01       	movw	r30, r24
    310e:	80 81       	ld	r24, Z
    3110:	88 2f       	mov	r24, r24
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	2a 81       	ldd	r18, Y+2	; 0x02
    3116:	22 2f       	mov	r18, r18
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	02 c0       	rjmp	.+4      	; 0x3120 <Dio_enuWriteChannel+0x58>
    311c:	95 95       	asr	r25
    311e:	87 95       	ror	r24
    3120:	2a 95       	dec	r18
    3122:	e2 f7       	brpl	.-8      	; 0x311c <Dio_enuWriteChannel+0x54>
    3124:	81 70       	andi	r24, 0x01	; 1
    3126:	99 27       	eor	r25, r25
    3128:	89 2b       	or	r24, r25
    312a:	19 f4       	brne	.+6      	; 0x3132 <Dio_enuWriteChannel+0x6a>
			Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	89 83       	std	Y+1, r24	; 0x01
    3130:	31 c0       	rjmp	.+98     	; 0x3194 <Dio_enuWriteChannel+0xcc>
		}

	else{

		WRITE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber  ,  (Copy_u8Level) );
    3132:	8b 81       	ldd	r24, Y+3	; 0x03
    3134:	88 2f       	mov	r24, r24
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	88 0f       	add	r24, r24
    313a:	99 1f       	adc	r25, r25
    313c:	88 58       	subi	r24, 0x88	; 136
    313e:	9f 4f       	sbci	r25, 0xFF	; 255
    3140:	fc 01       	movw	r30, r24
    3142:	80 81       	ld	r24, Z
    3144:	91 81       	ldd	r25, Z+1	; 0x01
    3146:	2b 81       	ldd	r18, Y+3	; 0x03
    3148:	22 2f       	mov	r18, r18
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	22 0f       	add	r18, r18
    314e:	33 1f       	adc	r19, r19
    3150:	28 58       	subi	r18, 0x88	; 136
    3152:	3f 4f       	sbci	r19, 0xFF	; 255
    3154:	f9 01       	movw	r30, r18
    3156:	20 81       	ld	r18, Z
    3158:	31 81       	ldd	r19, Z+1	; 0x01
    315a:	f9 01       	movw	r30, r18
    315c:	20 81       	ld	r18, Z
    315e:	62 2f       	mov	r22, r18
    3160:	2a 81       	ldd	r18, Y+2	; 0x02
    3162:	42 2f       	mov	r20, r18
    3164:	50 e0       	ldi	r21, 0x00	; 0
    3166:	21 e0       	ldi	r18, 0x01	; 1
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	02 c0       	rjmp	.+4      	; 0x3170 <Dio_enuWriteChannel+0xa8>
    316c:	22 0f       	add	r18, r18
    316e:	33 1f       	adc	r19, r19
    3170:	4a 95       	dec	r20
    3172:	e2 f7       	brpl	.-8      	; 0x316c <Dio_enuWriteChannel+0xa4>
    3174:	20 95       	com	r18
    3176:	62 23       	and	r22, r18
    3178:	2d 81       	ldd	r18, Y+5	; 0x05
    317a:	22 2f       	mov	r18, r18
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	4a 81       	ldd	r20, Y+2	; 0x02
    3180:	44 2f       	mov	r20, r20
    3182:	50 e0       	ldi	r21, 0x00	; 0
    3184:	02 c0       	rjmp	.+4      	; 0x318a <Dio_enuWriteChannel+0xc2>
    3186:	22 0f       	add	r18, r18
    3188:	33 1f       	adc	r19, r19
    318a:	4a 95       	dec	r20
    318c:	e2 f7       	brpl	.-8      	; 0x3186 <Dio_enuWriteChannel+0xbe>
    318e:	26 2b       	or	r18, r22
    3190:	fc 01       	movw	r30, r24
    3192:	20 83       	st	Z, r18

}

	return Loc_enuState;
    3194:	89 81       	ldd	r24, Y+1	; 0x01
}
    3196:	0f 90       	pop	r0
    3198:	0f 90       	pop	r0
    319a:	0f 90       	pop	r0
    319c:	0f 90       	pop	r0
    319e:	0f 90       	pop	r0
    31a0:	df 91       	pop	r29
    31a2:	cf 91       	pop	r28
    31a4:	08 95       	ret

000031a6 <Dio_enuReadChannel>:
Dio_ErrorStatusType	Dio_enuReadChannel(u8 Copy_u8ChannelId,pu8 Address_pu8ChannelLevel){
    31a6:	cf 93       	push	r28
    31a8:	df 93       	push	r29
    31aa:	00 d0       	rcall	.+0      	; 0x31ac <Dio_enuReadChannel+0x6>
    31ac:	00 d0       	rcall	.+0      	; 0x31ae <Dio_enuReadChannel+0x8>
    31ae:	00 d0       	rcall	.+0      	; 0x31b0 <Dio_enuReadChannel+0xa>
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
    31b4:	8c 83       	std	Y+4, r24	; 0x04
    31b6:	7e 83       	std	Y+6, r23	; 0x06
    31b8:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    31ba:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
    31bc:	8c 81       	ldd	r24, Y+4	; 0x04
    31be:	87 70       	andi	r24, 0x07	; 7
    31c0:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
    31c2:	8c 81       	ldd	r24, Y+4	; 0x04
    31c4:	86 95       	lsr	r24
    31c6:	86 95       	lsr	r24
    31c8:	86 95       	lsr	r24
    31ca:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    31cc:	8c 81       	ldd	r24, Y+4	; 0x04
    31ce:	80 32       	cpi	r24, 0x20	; 32
    31d0:	18 f0       	brcs	.+6      	; 0x31d8 <Dio_enuReadChannel+0x32>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    31d2:	82 e0       	ldi	r24, 0x02	; 2
    31d4:	89 83       	std	Y+1, r24	; 0x01
    31d6:	40 c0       	rjmp	.+128    	; 0x3258 <Dio_enuReadChannel+0xb2>
		}

		else if(  (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_INPUT){
    31d8:	8b 81       	ldd	r24, Y+3	; 0x03
    31da:	88 2f       	mov	r24, r24
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	88 0f       	add	r24, r24
    31e0:	99 1f       	adc	r25, r25
    31e2:	80 59       	subi	r24, 0x90	; 144
    31e4:	9f 4f       	sbci	r25, 0xFF	; 255
    31e6:	fc 01       	movw	r30, r24
    31e8:	80 81       	ld	r24, Z
    31ea:	91 81       	ldd	r25, Z+1	; 0x01
    31ec:	fc 01       	movw	r30, r24
    31ee:	80 81       	ld	r24, Z
    31f0:	88 2f       	mov	r24, r24
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	2a 81       	ldd	r18, Y+2	; 0x02
    31f6:	22 2f       	mov	r18, r18
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	02 c0       	rjmp	.+4      	; 0x3200 <Dio_enuReadChannel+0x5a>
    31fc:	95 95       	asr	r25
    31fe:	87 95       	ror	r24
    3200:	2a 95       	dec	r18
    3202:	e2 f7       	brpl	.-8      	; 0x31fc <Dio_enuReadChannel+0x56>
    3204:	81 70       	andi	r24, 0x01	; 1
    3206:	99 27       	eor	r25, r25
    3208:	89 2b       	or	r24, r25
    320a:	19 f0       	breq	.+6      	; 0x3212 <Dio_enuReadChannel+0x6c>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	89 83       	std	Y+1, r24	; 0x01
    3210:	23 c0       	rjmp	.+70     	; 0x3258 <Dio_enuReadChannel+0xb2>
			}

		else if(Address_pu8ChannelLevel == NULL){
    3212:	8d 81       	ldd	r24, Y+5	; 0x05
    3214:	9e 81       	ldd	r25, Y+6	; 0x06
    3216:	89 2b       	or	r24, r25
    3218:	19 f4       	brne	.+6      	; 0x3220 <Dio_enuReadChannel+0x7a>
			Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
    321a:	84 e0       	ldi	r24, 0x04	; 4
    321c:	89 83       	std	Y+1, r24	; 0x01
    321e:	1c c0       	rjmp	.+56     	; 0x3258 <Dio_enuReadChannel+0xb2>

		}

		else{

			*Address_pu8ChannelLevel = READ_BIT(*Dio_PinRegistersArr[Loc_PortNumber],Loc_PinNumber);
    3220:	8b 81       	ldd	r24, Y+3	; 0x03
    3222:	88 2f       	mov	r24, r24
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	88 0f       	add	r24, r24
    3228:	99 1f       	adc	r25, r25
    322a:	80 58       	subi	r24, 0x80	; 128
    322c:	9f 4f       	sbci	r25, 0xFF	; 255
    322e:	fc 01       	movw	r30, r24
    3230:	80 81       	ld	r24, Z
    3232:	91 81       	ldd	r25, Z+1	; 0x01
    3234:	fc 01       	movw	r30, r24
    3236:	80 81       	ld	r24, Z
    3238:	88 2f       	mov	r24, r24
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	2a 81       	ldd	r18, Y+2	; 0x02
    323e:	22 2f       	mov	r18, r18
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	02 c0       	rjmp	.+4      	; 0x3248 <Dio_enuReadChannel+0xa2>
    3244:	95 95       	asr	r25
    3246:	87 95       	ror	r24
    3248:	2a 95       	dec	r18
    324a:	e2 f7       	brpl	.-8      	; 0x3244 <Dio_enuReadChannel+0x9e>
    324c:	28 2f       	mov	r18, r24
    324e:	21 70       	andi	r18, 0x01	; 1
    3250:	8d 81       	ldd	r24, Y+5	; 0x05
    3252:	9e 81       	ldd	r25, Y+6	; 0x06
    3254:	fc 01       	movw	r30, r24
    3256:	20 83       	st	Z, r18


	}

		return Loc_enuState;
    3258:	89 81       	ldd	r24, Y+1	; 0x01

}
    325a:	26 96       	adiw	r28, 0x06	; 6
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	f8 94       	cli
    3260:	de bf       	out	0x3e, r29	; 62
    3262:	0f be       	out	0x3f, r0	; 63
    3264:	cd bf       	out	0x3d, r28	; 61
    3266:	df 91       	pop	r29
    3268:	cf 91       	pop	r28
    326a:	08 95       	ret

0000326c <Dio_enuWritePort>:



Dio_ErrorStatusType	Dio_enuWritePort(u8 Copy_u8PortId,u8 Copy_u8Value){
    326c:	cf 93       	push	r28
    326e:	df 93       	push	r29
    3270:	00 d0       	rcall	.+0      	; 0x3272 <Dio_enuWritePort+0x6>
    3272:	1f 92       	push	r1
    3274:	cd b7       	in	r28, 0x3d	; 61
    3276:	de b7       	in	r29, 0x3e	; 62
    3278:	8a 83       	std	Y+2, r24	; 0x02
    327a:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    327c:	19 82       	std	Y+1, r1	; 0x01


		if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
    327e:	8a 81       	ldd	r24, Y+2	; 0x02
    3280:	84 30       	cpi	r24, 0x04	; 4
    3282:	18 f0       	brcs	.+6      	; 0x328a <Dio_enuWritePort+0x1e>
			Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
    3284:	83 e0       	ldi	r24, 0x03	; 3
    3286:	89 83       	std	Y+1, r24	; 0x01
    3288:	1e c0       	rjmp	.+60     	; 0x32c6 <Dio_enuWritePort+0x5a>
		}

		else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_OUTPUT ){
    328a:	8a 81       	ldd	r24, Y+2	; 0x02
    328c:	88 2f       	mov	r24, r24
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	88 0f       	add	r24, r24
    3292:	99 1f       	adc	r25, r25
    3294:	80 59       	subi	r24, 0x90	; 144
    3296:	9f 4f       	sbci	r25, 0xFF	; 255
    3298:	fc 01       	movw	r30, r24
    329a:	80 81       	ld	r24, Z
    329c:	91 81       	ldd	r25, Z+1	; 0x01
    329e:	fc 01       	movw	r30, r24
    32a0:	80 81       	ld	r24, Z
    32a2:	8f 3f       	cpi	r24, 0xFF	; 255
    32a4:	19 f0       	breq	.+6      	; 0x32ac <Dio_enuWritePort+0x40>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	89 83       	std	Y+1, r24	; 0x01
    32aa:	0d c0       	rjmp	.+26     	; 0x32c6 <Dio_enuWritePort+0x5a>
			}

		else{

			ASSIGN_REG(*Dio_PortRegistersArr[Copy_u8PortId], Copy_u8Value);
    32ac:	8a 81       	ldd	r24, Y+2	; 0x02
    32ae:	88 2f       	mov	r24, r24
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	88 0f       	add	r24, r24
    32b4:	99 1f       	adc	r25, r25
    32b6:	88 58       	subi	r24, 0x88	; 136
    32b8:	9f 4f       	sbci	r25, 0xFF	; 255
    32ba:	fc 01       	movw	r30, r24
    32bc:	80 81       	ld	r24, Z
    32be:	91 81       	ldd	r25, Z+1	; 0x01
    32c0:	2b 81       	ldd	r18, Y+3	; 0x03
    32c2:	fc 01       	movw	r30, r24
    32c4:	20 83       	st	Z, r18

	}

		return Loc_enuState;
    32c6:	89 81       	ldd	r24, Y+1	; 0x01



}
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	df 91       	pop	r29
    32d0:	cf 91       	pop	r28
    32d2:	08 95       	ret

000032d4 <Dio_enuReadPort>:


Dio_ErrorStatusType	Dio_enuReadPort(u8 Copy_u8PortId,pu8 Address_pu8PortVAlue){
    32d4:	cf 93       	push	r28
    32d6:	df 93       	push	r29
    32d8:	00 d0       	rcall	.+0      	; 0x32da <Dio_enuReadPort+0x6>
    32da:	00 d0       	rcall	.+0      	; 0x32dc <Dio_enuReadPort+0x8>
    32dc:	cd b7       	in	r28, 0x3d	; 61
    32de:	de b7       	in	r29, 0x3e	; 62
    32e0:	8a 83       	std	Y+2, r24	; 0x02
    32e2:	7c 83       	std	Y+4, r23	; 0x04
    32e4:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    32e6:	19 82       	std	Y+1, r1	; 0x01


			if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	84 30       	cpi	r24, 0x04	; 4
    32ec:	18 f0       	brcs	.+6      	; 0x32f4 <Dio_enuReadPort+0x20>
				Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
    32ee:	83 e0       	ldi	r24, 0x03	; 3
    32f0:	89 83       	std	Y+1, r24	; 0x01
    32f2:	28 c0       	rjmp	.+80     	; 0x3344 <Dio_enuReadPort+0x70>
			}

			else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_INPUT ){
    32f4:	8a 81       	ldd	r24, Y+2	; 0x02
    32f6:	88 2f       	mov	r24, r24
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	88 0f       	add	r24, r24
    32fc:	99 1f       	adc	r25, r25
    32fe:	80 59       	subi	r24, 0x90	; 144
    3300:	9f 4f       	sbci	r25, 0xFF	; 255
    3302:	fc 01       	movw	r30, r24
    3304:	80 81       	ld	r24, Z
    3306:	91 81       	ldd	r25, Z+1	; 0x01
    3308:	fc 01       	movw	r30, r24
    330a:	80 81       	ld	r24, Z
    330c:	88 23       	and	r24, r24
    330e:	19 f0       	breq	.+6      	; 0x3316 <Dio_enuReadPort+0x42>
					Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	89 83       	std	Y+1, r24	; 0x01
    3314:	17 c0       	rjmp	.+46     	; 0x3344 <Dio_enuReadPort+0x70>
				}

			else if(Address_pu8PortVAlue == NULL){
    3316:	8b 81       	ldd	r24, Y+3	; 0x03
    3318:	9c 81       	ldd	r25, Y+4	; 0x04
    331a:	89 2b       	or	r24, r25
    331c:	19 f4       	brne	.+6      	; 0x3324 <Dio_enuReadPort+0x50>
				Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
    331e:	84 e0       	ldi	r24, 0x04	; 4
    3320:	89 83       	std	Y+1, r24	; 0x01
    3322:	10 c0       	rjmp	.+32     	; 0x3344 <Dio_enuReadPort+0x70>
			}
			else{

				*Address_pu8PortVAlue = *Dio_PinRegistersArr[Copy_u8PortId];
    3324:	8a 81       	ldd	r24, Y+2	; 0x02
    3326:	88 2f       	mov	r24, r24
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	88 0f       	add	r24, r24
    332c:	99 1f       	adc	r25, r25
    332e:	80 58       	subi	r24, 0x80	; 128
    3330:	9f 4f       	sbci	r25, 0xFF	; 255
    3332:	fc 01       	movw	r30, r24
    3334:	80 81       	ld	r24, Z
    3336:	91 81       	ldd	r25, Z+1	; 0x01
    3338:	fc 01       	movw	r30, r24
    333a:	20 81       	ld	r18, Z
    333c:	8b 81       	ldd	r24, Y+3	; 0x03
    333e:	9c 81       	ldd	r25, Y+4	; 0x04
    3340:	fc 01       	movw	r30, r24
    3342:	20 83       	st	Z, r18

		}

			return Loc_enuState;
    3344:	89 81       	ldd	r24, Y+1	; 0x01

}
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	0f 90       	pop	r0
    334c:	0f 90       	pop	r0
    334e:	df 91       	pop	r29
    3350:	cf 91       	pop	r28
    3352:	08 95       	ret

00003354 <Dio_enuFlipChannel>:
Dio_ErrorStatusType	Dio_enuFlipChannel(u8 Copy_u8ChannelId){
    3354:	cf 93       	push	r28
    3356:	df 93       	push	r29
    3358:	00 d0       	rcall	.+0      	; 0x335a <Dio_enuFlipChannel+0x6>
    335a:	00 d0       	rcall	.+0      	; 0x335c <Dio_enuFlipChannel+0x8>
    335c:	cd b7       	in	r28, 0x3d	; 61
    335e:	de b7       	in	r29, 0x3e	; 62
    3360:	8c 83       	std	Y+4, r24	; 0x04

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    3362:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
    3364:	8c 81       	ldd	r24, Y+4	; 0x04
    3366:	87 70       	andi	r24, 0x07	; 7
    3368:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
    336a:	8c 81       	ldd	r24, Y+4	; 0x04
    336c:	86 95       	lsr	r24
    336e:	86 95       	lsr	r24
    3370:	86 95       	lsr	r24
    3372:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    3374:	8c 81       	ldd	r24, Y+4	; 0x04
    3376:	80 32       	cpi	r24, 0x20	; 32
    3378:	18 f0       	brcs	.+6      	; 0x3380 <Dio_enuFlipChannel+0x2c>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    337a:	82 e0       	ldi	r24, 0x02	; 2
    337c:	89 83       	std	Y+1, r24	; 0x01
    337e:	41 c0       	rjmp	.+130    	; 0x3402 <Dio_enuFlipChannel+0xae>
		}

		else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
    3380:	8b 81       	ldd	r24, Y+3	; 0x03
    3382:	88 2f       	mov	r24, r24
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	88 0f       	add	r24, r24
    3388:	99 1f       	adc	r25, r25
    338a:	80 59       	subi	r24, 0x90	; 144
    338c:	9f 4f       	sbci	r25, 0xFF	; 255
    338e:	fc 01       	movw	r30, r24
    3390:	80 81       	ld	r24, Z
    3392:	91 81       	ldd	r25, Z+1	; 0x01
    3394:	fc 01       	movw	r30, r24
    3396:	80 81       	ld	r24, Z
    3398:	88 2f       	mov	r24, r24
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	2a 81       	ldd	r18, Y+2	; 0x02
    339e:	22 2f       	mov	r18, r18
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	02 c0       	rjmp	.+4      	; 0x33a8 <Dio_enuFlipChannel+0x54>
    33a4:	95 95       	asr	r25
    33a6:	87 95       	ror	r24
    33a8:	2a 95       	dec	r18
    33aa:	e2 f7       	brpl	.-8      	; 0x33a4 <Dio_enuFlipChannel+0x50>
    33ac:	81 70       	andi	r24, 0x01	; 1
    33ae:	99 27       	eor	r25, r25
    33b0:	89 2b       	or	r24, r25
    33b2:	19 f4       	brne	.+6      	; 0x33ba <Dio_enuFlipChannel+0x66>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	89 83       	std	Y+1, r24	; 0x01
    33b8:	24 c0       	rjmp	.+72     	; 0x3402 <Dio_enuFlipChannel+0xae>
			}

		else{

			TOGGLE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber);
    33ba:	8b 81       	ldd	r24, Y+3	; 0x03
    33bc:	88 2f       	mov	r24, r24
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	88 0f       	add	r24, r24
    33c2:	99 1f       	adc	r25, r25
    33c4:	88 58       	subi	r24, 0x88	; 136
    33c6:	9f 4f       	sbci	r25, 0xFF	; 255
    33c8:	fc 01       	movw	r30, r24
    33ca:	80 81       	ld	r24, Z
    33cc:	91 81       	ldd	r25, Z+1	; 0x01
    33ce:	2b 81       	ldd	r18, Y+3	; 0x03
    33d0:	22 2f       	mov	r18, r18
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	22 0f       	add	r18, r18
    33d6:	33 1f       	adc	r19, r19
    33d8:	28 58       	subi	r18, 0x88	; 136
    33da:	3f 4f       	sbci	r19, 0xFF	; 255
    33dc:	f9 01       	movw	r30, r18
    33de:	20 81       	ld	r18, Z
    33e0:	31 81       	ldd	r19, Z+1	; 0x01
    33e2:	f9 01       	movw	r30, r18
    33e4:	20 81       	ld	r18, Z
    33e6:	62 2f       	mov	r22, r18
    33e8:	2a 81       	ldd	r18, Y+2	; 0x02
    33ea:	42 2f       	mov	r20, r18
    33ec:	50 e0       	ldi	r21, 0x00	; 0
    33ee:	21 e0       	ldi	r18, 0x01	; 1
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	02 c0       	rjmp	.+4      	; 0x33f8 <Dio_enuFlipChannel+0xa4>
    33f4:	22 0f       	add	r18, r18
    33f6:	33 1f       	adc	r19, r19
    33f8:	4a 95       	dec	r20
    33fa:	e2 f7       	brpl	.-8      	; 0x33f4 <Dio_enuFlipChannel+0xa0>
    33fc:	26 27       	eor	r18, r22
    33fe:	fc 01       	movw	r30, r24
    3400:	20 83       	st	Z, r18

	}

		return Loc_enuState;
    3402:	89 81       	ldd	r24, Y+1	; 0x01
}
    3404:	0f 90       	pop	r0
    3406:	0f 90       	pop	r0
    3408:	0f 90       	pop	r0
    340a:	0f 90       	pop	r0
    340c:	df 91       	pop	r29
    340e:	cf 91       	pop	r28
    3410:	08 95       	ret

00003412 <Adc_enuInit>:
/********************************** Data Type Declarations ****************************/

/********************************** Software Interfaces Declarations *******************/


Adc_StatusErrorType Adc_enuInit(const Adc_PinConfigType* Address_Adc){
    3412:	cf 93       	push	r28
    3414:	df 93       	push	r29
    3416:	00 d0       	rcall	.+0      	; 0x3418 <Adc_enuInit+0x6>
    3418:	1f 92       	push	r1
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
    341e:	9b 83       	std	Y+3, r25	; 0x03
    3420:	8a 83       	std	Y+2, r24	; 0x02

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Adc){
    3426:	8a 81       	ldd	r24, Y+2	; 0x02
    3428:	9b 81       	ldd	r25, Y+3	; 0x03
    342a:	89 2b       	or	r24, r25
    342c:	19 f4       	brne	.+6      	; 0x3434 <Adc_enuInit+0x22>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    342e:	82 e0       	ldi	r24, 0x02	; 2
    3430:	89 83       	std	Y+1, r24	; 0x01
    3432:	65 c0       	rjmp	.+202    	; 0x34fe <Adc_enuInit+0xec>
	    }
	    else{
	    	 /* Disable Adc Peripheral */
	    	        Adc_Disable();
    3434:	86 e2       	ldi	r24, 0x26	; 38
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	26 e2       	ldi	r18, 0x26	; 38
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	f9 01       	movw	r30, r18
    343e:	20 81       	ld	r18, Z
    3440:	2f 77       	andi	r18, 0x7F	; 127
    3442:	fc 01       	movw	r30, r24
    3444:	20 83       	st	Z, r18



	    	        /* Choose Conversion Clock  */
	    	        Adc_SelectConversionClock(Address_Adc->conversion_frequancy);
    3446:	86 e2       	ldi	r24, 0x26	; 38
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	26 e2       	ldi	r18, 0x26	; 38
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	f9 01       	movw	r30, r18
    3450:	20 81       	ld	r18, Z
    3452:	42 2f       	mov	r20, r18
    3454:	40 77       	andi	r20, 0x70	; 112
    3456:	2a 81       	ldd	r18, Y+2	; 0x02
    3458:	3b 81       	ldd	r19, Y+3	; 0x03
    345a:	f9 01       	movw	r30, r18
    345c:	23 81       	ldd	r18, Z+3	; 0x03
    345e:	27 70       	andi	r18, 0x07	; 7
    3460:	24 2b       	or	r18, r20
    3462:	fc 01       	movw	r30, r24
    3464:	20 83       	st	Z, r18

	    	        /* Choose Selected Channel */
	    	        Adc_SelectChannel(Address_Adc->channel_number);
    3466:	87 e2       	ldi	r24, 0x27	; 39
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	27 e2       	ldi	r18, 0x27	; 39
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	f9 01       	movw	r30, r18
    3470:	20 81       	ld	r18, Z
    3472:	42 2f       	mov	r20, r18
    3474:	48 7f       	andi	r20, 0xF8	; 248
    3476:	2a 81       	ldd	r18, Y+2	; 0x02
    3478:	3b 81       	ldd	r19, Y+3	; 0x03
    347a:	f9 01       	movw	r30, r18
    347c:	20 81       	ld	r18, Z
    347e:	27 70       	andi	r18, 0x07	; 7
    3480:	24 2b       	or	r18, r20
    3482:	fc 01       	movw	r30, r24
    3484:	20 83       	st	Z, r18


	    	        /*Configure Result Format */
	    	        Adc_SelectResultFormat(Address_Adc->result_format);
    3486:	87 e2       	ldi	r24, 0x27	; 39
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	27 e2       	ldi	r18, 0x27	; 39
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	f9 01       	movw	r30, r18
    3490:	20 81       	ld	r18, Z
    3492:	42 2f       	mov	r20, r18
    3494:	4f 7d       	andi	r20, 0xDF	; 223
    3496:	2a 81       	ldd	r18, Y+2	; 0x02
    3498:	3b 81       	ldd	r19, Y+3	; 0x03
    349a:	f9 01       	movw	r30, r18
    349c:	22 81       	ldd	r18, Z+2	; 0x02
    349e:	22 2f       	mov	r18, r18
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	22 0f       	add	r18, r18
    34a4:	33 1f       	adc	r19, r19
    34a6:	22 95       	swap	r18
    34a8:	32 95       	swap	r19
    34aa:	30 7f       	andi	r19, 0xF0	; 240
    34ac:	32 27       	eor	r19, r18
    34ae:	20 7f       	andi	r18, 0xF0	; 240
    34b0:	32 27       	eor	r19, r18
    34b2:	24 2b       	or	r18, r20
    34b4:	fc 01       	movw	r30, r24
    34b6:	20 83       	st	Z, r18

	    	        /* Configure Voltage Reference*/
	    	        Adc_SelectRefVoltageSource(Address_Adc->vref_source);
    34b8:	87 e2       	ldi	r24, 0x27	; 39
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	27 e2       	ldi	r18, 0x27	; 39
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	f9 01       	movw	r30, r18
    34c2:	20 81       	ld	r18, Z
    34c4:	42 2f       	mov	r20, r18
    34c6:	4f 73       	andi	r20, 0x3F	; 63
    34c8:	2a 81       	ldd	r18, Y+2	; 0x02
    34ca:	3b 81       	ldd	r19, Y+3	; 0x03
    34cc:	f9 01       	movw	r30, r18
    34ce:	21 81       	ldd	r18, Z+1	; 0x01
    34d0:	22 2f       	mov	r18, r18
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	00 24       	eor	r0, r0
    34d6:	36 95       	lsr	r19
    34d8:	27 95       	ror	r18
    34da:	07 94       	ror	r0
    34dc:	36 95       	lsr	r19
    34de:	27 95       	ror	r18
    34e0:	07 94       	ror	r0
    34e2:	32 2f       	mov	r19, r18
    34e4:	20 2d       	mov	r18, r0
    34e6:	24 2b       	or	r18, r20
    34e8:	fc 01       	movw	r30, r24
    34ea:	20 83       	st	Z, r18

	    	        /* Enable Adc Peripheral */
	    	        Adc_Enable();
    34ec:	86 e2       	ldi	r24, 0x26	; 38
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	26 e2       	ldi	r18, 0x26	; 38
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	f9 01       	movw	r30, r18
    34f6:	20 81       	ld	r18, Z
    34f8:	20 68       	ori	r18, 0x80	; 128
    34fa:	fc 01       	movw	r30, r24
    34fc:	20 83       	st	Z, r18

	    }

	    return Loc_enuAdcStatus;
    34fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3500:	0f 90       	pop	r0
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	df 91       	pop	r29
    3508:	cf 91       	pop	r28
    350a:	08 95       	ret

0000350c <Adc_enuDeInit>:

Adc_StatusErrorType Adc_enuDeInit(void){
    350c:	cf 93       	push	r28
    350e:	df 93       	push	r29
    3510:	1f 92       	push	r1
    3512:	cd b7       	in	r28, 0x3d	; 61
    3514:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	89 83       	std	Y+1, r24	; 0x01

	Adc_Disable();
    351a:	86 e2       	ldi	r24, 0x26	; 38
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	26 e2       	ldi	r18, 0x26	; 38
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	f9 01       	movw	r30, r18
    3524:	20 81       	ld	r18, Z
    3526:	2f 77       	andi	r18, 0x7F	; 127
    3528:	fc 01       	movw	r30, r24
    352a:	20 83       	st	Z, r18
	    return Loc_enuAdcStatus;
    352c:	89 81       	ldd	r24, Y+1	; 0x01
}
    352e:	0f 90       	pop	r0
    3530:	df 91       	pop	r29
    3532:	cf 91       	pop	r28
    3534:	08 95       	ret

00003536 <Adc_enuStartConversionSync>:


Adc_StatusErrorType Adc_enuStartConversionSync(const Adc_PinConfigType* Address_Adc, u16* Address_ResultDigitalVoltage){
    3536:	cf 93       	push	r28
    3538:	df 93       	push	r29
    353a:	cd b7       	in	r28, 0x3d	; 61
    353c:	de b7       	in	r29, 0x3e	; 62
    353e:	a6 97       	sbiw	r28, 0x26	; 38
    3540:	0f b6       	in	r0, 0x3f	; 63
    3542:	f8 94       	cli
    3544:	de bf       	out	0x3e, r29	; 62
    3546:	0f be       	out	0x3f, r0	; 63
    3548:	cd bf       	out	0x3d, r28	; 61
    354a:	9c a3       	std	Y+36, r25	; 0x24
    354c:	8b a3       	std	Y+35, r24	; 0x23
    354e:	7e a3       	std	Y+38, r23	; 0x26
    3550:	6d a3       	std	Y+37, r22	; 0x25

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    3552:	81 e0       	ldi	r24, 0x01	; 1
    3554:	89 83       	std	Y+1, r24	; 0x01
	u8 Loc_u8AdcInterruptStatus = ZERO_VALUE;
    3556:	1a 82       	std	Y+2, r1	; 0x02
	    if(NULL == Address_Adc || Address_ResultDigitalVoltage == NULL){
    3558:	8b a1       	ldd	r24, Y+35	; 0x23
    355a:	9c a1       	ldd	r25, Y+36	; 0x24
    355c:	89 2b       	or	r24, r25
    355e:	21 f0       	breq	.+8      	; 0x3568 <Adc_enuStartConversionSync+0x32>
    3560:	8d a1       	ldd	r24, Y+37	; 0x25
    3562:	9e a1       	ldd	r25, Y+38	; 0x26
    3564:	89 2b       	or	r24, r25
    3566:	19 f4       	brne	.+6      	; 0x356e <Adc_enuStartConversionSync+0x38>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    3568:	82 e0       	ldi	r24, 0x02	; 2
    356a:	89 83       	std	Y+1, r24	; 0x01
    356c:	54 c1       	rjmp	.+680    	; 0x3816 <Adc_enuStartConversionSync+0x2e0>
	    }
	    else{

	            /* Read Status of The interrupt */
	    	    Loc_u8AdcInterruptStatus = Adc_GetInterruptEnableStatus();
    356e:	86 e2       	ldi	r24, 0x26	; 38
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	fc 01       	movw	r30, r24
    3574:	80 81       	ld	r24, Z
    3576:	86 95       	lsr	r24
    3578:	86 95       	lsr	r24
    357a:	86 95       	lsr	r24
    357c:	81 70       	andi	r24, 0x01	; 1
    357e:	8a 83       	std	Y+2, r24	; 0x02

	            /* Choose Selected Channel */
	            Adc_SelectChannel(Address_Adc->channel_number);
    3580:	87 e2       	ldi	r24, 0x27	; 39
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	27 e2       	ldi	r18, 0x27	; 39
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	f9 01       	movw	r30, r18
    358a:	20 81       	ld	r18, Z
    358c:	42 2f       	mov	r20, r18
    358e:	48 7f       	andi	r20, 0xF8	; 248
    3590:	2b a1       	ldd	r18, Y+35	; 0x23
    3592:	3c a1       	ldd	r19, Y+36	; 0x24
    3594:	f9 01       	movw	r30, r18
    3596:	20 81       	ld	r18, Z
    3598:	27 70       	andi	r18, 0x07	; 7
    359a:	24 2b       	or	r18, r20
    359c:	fc 01       	movw	r30, r24
    359e:	20 83       	st	Z, r18


	            /* Disable Interrupt not to jump after completing*/
	            Adc_SetInterruptEnable(ZERO_VALUE);
    35a0:	86 e2       	ldi	r24, 0x26	; 38
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	26 e2       	ldi	r18, 0x26	; 38
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	f9 01       	movw	r30, r18
    35aa:	20 81       	ld	r18, Z
    35ac:	27 7f       	andi	r18, 0xF7	; 247
    35ae:	fc 01       	movw	r30, r24
    35b0:	20 83       	st	Z, r18


	            /* Start Conversion  */
	            Adc_StartConversion();
    35b2:	86 e2       	ldi	r24, 0x26	; 38
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	26 e2       	ldi	r18, 0x26	; 38
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	f9 01       	movw	r30, r18
    35bc:	20 81       	ld	r18, Z
    35be:	20 64       	ori	r18, 0x40	; 64
    35c0:	fc 01       	movw	r30, r24
    35c2:	20 83       	st	Z, r18



	            /* wait =polling for conversion */
	            while( ZERO_VALUE == Adc_IsConversionCompleted() );
    35c4:	00 00       	nop
    35c6:	86 e2       	ldi	r24, 0x26	; 38
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	fc 01       	movw	r30, r24
    35cc:	80 81       	ld	r24, Z
    35ce:	82 95       	swap	r24
    35d0:	86 95       	lsr	r24
    35d2:	86 95       	lsr	r24
    35d4:	83 70       	andi	r24, 0x03	; 3
    35d6:	88 2f       	mov	r24, r24
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	81 70       	andi	r24, 0x01	; 1
    35dc:	99 27       	eor	r25, r25
    35de:	89 2b       	or	r24, r25
    35e0:	91 f7       	brne	.-28     	; 0x35c6 <Adc_enuStartConversionSync+0x90>
    35e2:	80 e0       	ldi	r24, 0x00	; 0
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	a0 e2       	ldi	r26, 0x20	; 32
    35e8:	b1 e4       	ldi	r27, 0x41	; 65
    35ea:	8b 83       	std	Y+3, r24	; 0x03
    35ec:	9c 83       	std	Y+4, r25	; 0x04
    35ee:	ad 83       	std	Y+5, r26	; 0x05
    35f0:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    35f2:	2b ea       	ldi	r18, 0xAB	; 171
    35f4:	3a ea       	ldi	r19, 0xAA	; 170
    35f6:	4a ea       	ldi	r20, 0xAA	; 170
    35f8:	50 e4       	ldi	r21, 0x40	; 64
    35fa:	6b 81       	ldd	r22, Y+3	; 0x03
    35fc:	7c 81       	ldd	r23, Y+4	; 0x04
    35fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3600:	9e 81       	ldd	r25, Y+6	; 0x06
    3602:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    3606:	dc 01       	movw	r26, r24
    3608:	cb 01       	movw	r24, r22
    360a:	8f 83       	std	Y+7, r24	; 0x07
    360c:	98 87       	std	Y+8, r25	; 0x08
    360e:	a9 87       	std	Y+9, r26	; 0x09
    3610:	ba 87       	std	Y+10, r27	; 0x0a
	__tmp2 = ((F_CPU) / 4e6) * __us;
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	40 e8       	ldi	r20, 0x80	; 128
    3618:	50 e4       	ldi	r21, 0x40	; 64
    361a:	6b 81       	ldd	r22, Y+3	; 0x03
    361c:	7c 81       	ldd	r23, Y+4	; 0x04
    361e:	8d 81       	ldd	r24, Y+5	; 0x05
    3620:	9e 81       	ldd	r25, Y+6	; 0x06
    3622:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    3626:	dc 01       	movw	r26, r24
    3628:	cb 01       	movw	r24, r22
    362a:	8b 87       	std	Y+11, r24	; 0x0b
    362c:	9c 87       	std	Y+12, r25	; 0x0c
    362e:	ad 87       	std	Y+13, r26	; 0x0d
    3630:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	40 e8       	ldi	r20, 0x80	; 128
    3638:	5f e3       	ldi	r21, 0x3F	; 63
    363a:	6f 81       	ldd	r22, Y+7	; 0x07
    363c:	78 85       	ldd	r23, Y+8	; 0x08
    363e:	89 85       	ldd	r24, Y+9	; 0x09
    3640:	9a 85       	ldd	r25, Y+10	; 0x0a
    3642:	0e 94 ed 29 	call	0x53da	; 0x53da <__cmpsf2>
    3646:	88 23       	and	r24, r24
    3648:	1c f4       	brge	.+6      	; 0x3650 <Adc_enuStartConversionSync+0x11a>
		__ticks = 1;
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	8f 87       	std	Y+15, r24	; 0x0f
    364e:	b2 c0       	rjmp	.+356    	; 0x37b4 <Adc_enuStartConversionSync+0x27e>
	else if (__tmp2 > 65535)
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	3f ef       	ldi	r19, 0xFF	; 255
    3654:	4f e7       	ldi	r20, 0x7F	; 127
    3656:	57 e4       	ldi	r21, 0x47	; 71
    3658:	6b 85       	ldd	r22, Y+11	; 0x0b
    365a:	7c 85       	ldd	r23, Y+12	; 0x0c
    365c:	8d 85       	ldd	r24, Y+13	; 0x0d
    365e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3660:	0e 94 4c 2b 	call	0x5698	; 0x5698 <__gesf2>
    3664:	18 16       	cp	r1, r24
    3666:	0c f0       	brlt	.+2      	; 0x366a <Adc_enuStartConversionSync+0x134>
    3668:	7b c0       	rjmp	.+246    	; 0x3760 <Adc_enuStartConversionSync+0x22a>
	{
		_delay_ms(__us / 1000.0);
    366a:	20 e0       	ldi	r18, 0x00	; 0
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	4a e7       	ldi	r20, 0x7A	; 122
    3670:	54 e4       	ldi	r21, 0x44	; 68
    3672:	6b 81       	ldd	r22, Y+3	; 0x03
    3674:	7c 81       	ldd	r23, Y+4	; 0x04
    3676:	8d 81       	ldd	r24, Y+5	; 0x05
    3678:	9e 81       	ldd	r25, Y+6	; 0x06
    367a:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <__divsf3>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	88 8b       	std	Y+16, r24	; 0x10
    3684:	99 8b       	std	Y+17, r25	; 0x11
    3686:	aa 8b       	std	Y+18, r26	; 0x12
    3688:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	4a e7       	ldi	r20, 0x7A	; 122
    3690:	55 e4       	ldi	r21, 0x45	; 69
    3692:	68 89       	ldd	r22, Y+16	; 0x10
    3694:	79 89       	ldd	r23, Y+17	; 0x11
    3696:	8a 89       	ldd	r24, Y+18	; 0x12
    3698:	9b 89       	ldd	r25, Y+19	; 0x13
    369a:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    369e:	dc 01       	movw	r26, r24
    36a0:	cb 01       	movw	r24, r22
    36a2:	8c 8b       	std	Y+20, r24	; 0x14
    36a4:	9d 8b       	std	Y+21, r25	; 0x15
    36a6:	ae 8b       	std	Y+22, r26	; 0x16
    36a8:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	40 e8       	ldi	r20, 0x80	; 128
    36b0:	5f e3       	ldi	r21, 0x3F	; 63
    36b2:	6c 89       	ldd	r22, Y+20	; 0x14
    36b4:	7d 89       	ldd	r23, Y+21	; 0x15
    36b6:	8e 89       	ldd	r24, Y+22	; 0x16
    36b8:	9f 89       	ldd	r25, Y+23	; 0x17
    36ba:	0e 94 ed 29 	call	0x53da	; 0x53da <__cmpsf2>
    36be:	88 23       	and	r24, r24
    36c0:	2c f4       	brge	.+10     	; 0x36cc <Adc_enuStartConversionSync+0x196>
		__ticks = 1;
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	99 8f       	std	Y+25, r25	; 0x19
    36c8:	88 8f       	std	Y+24, r24	; 0x18
    36ca:	3f c0       	rjmp	.+126    	; 0x374a <Adc_enuStartConversionSync+0x214>
	else if (__tmp > 65535)
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	3f ef       	ldi	r19, 0xFF	; 255
    36d0:	4f e7       	ldi	r20, 0x7F	; 127
    36d2:	57 e4       	ldi	r21, 0x47	; 71
    36d4:	6c 89       	ldd	r22, Y+20	; 0x14
    36d6:	7d 89       	ldd	r23, Y+21	; 0x15
    36d8:	8e 89       	ldd	r24, Y+22	; 0x16
    36da:	9f 89       	ldd	r25, Y+23	; 0x17
    36dc:	0e 94 4c 2b 	call	0x5698	; 0x5698 <__gesf2>
    36e0:	18 16       	cp	r1, r24
    36e2:	4c f5       	brge	.+82     	; 0x3736 <Adc_enuStartConversionSync+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36e4:	20 e0       	ldi	r18, 0x00	; 0
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	40 e2       	ldi	r20, 0x20	; 32
    36ea:	51 e4       	ldi	r21, 0x41	; 65
    36ec:	68 89       	ldd	r22, Y+16	; 0x10
    36ee:	79 89       	ldd	r23, Y+17	; 0x11
    36f0:	8a 89       	ldd	r24, Y+18	; 0x12
    36f2:	9b 89       	ldd	r25, Y+19	; 0x13
    36f4:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    36f8:	dc 01       	movw	r26, r24
    36fa:	cb 01       	movw	r24, r22
    36fc:	bc 01       	movw	r22, r24
    36fe:	cd 01       	movw	r24, r26
    3700:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    3704:	dc 01       	movw	r26, r24
    3706:	cb 01       	movw	r24, r22
    3708:	99 8f       	std	Y+25, r25	; 0x19
    370a:	88 8f       	std	Y+24, r24	; 0x18
    370c:	0f c0       	rjmp	.+30     	; 0x372c <Adc_enuStartConversionSync+0x1f6>
    370e:	80 e9       	ldi	r24, 0x90	; 144
    3710:	91 e0       	ldi	r25, 0x01	; 1
    3712:	9b 8f       	std	Y+27, r25	; 0x1b
    3714:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3716:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3718:	9b 8d       	ldd	r25, Y+27	; 0x1b
    371a:	01 97       	sbiw	r24, 0x01	; 1
    371c:	f1 f7       	brne	.-4      	; 0x371a <Adc_enuStartConversionSync+0x1e4>
    371e:	9b 8f       	std	Y+27, r25	; 0x1b
    3720:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3722:	88 8d       	ldd	r24, Y+24	; 0x18
    3724:	99 8d       	ldd	r25, Y+25	; 0x19
    3726:	01 97       	sbiw	r24, 0x01	; 1
    3728:	99 8f       	std	Y+25, r25	; 0x19
    372a:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    372c:	88 8d       	ldd	r24, Y+24	; 0x18
    372e:	99 8d       	ldd	r25, Y+25	; 0x19
    3730:	89 2b       	or	r24, r25
    3732:	69 f7       	brne	.-38     	; 0x370e <Adc_enuStartConversionSync+0x1d8>
    3734:	3f c0       	rjmp	.+126    	; 0x37b4 <Adc_enuStartConversionSync+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3736:	6c 89       	ldd	r22, Y+20	; 0x14
    3738:	7d 89       	ldd	r23, Y+21	; 0x15
    373a:	8e 89       	ldd	r24, Y+22	; 0x16
    373c:	9f 89       	ldd	r25, Y+23	; 0x17
    373e:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    3742:	dc 01       	movw	r26, r24
    3744:	cb 01       	movw	r24, r22
    3746:	99 8f       	std	Y+25, r25	; 0x19
    3748:	88 8f       	std	Y+24, r24	; 0x18
    374a:	88 8d       	ldd	r24, Y+24	; 0x18
    374c:	99 8d       	ldd	r25, Y+25	; 0x19
    374e:	9d 8f       	std	Y+29, r25	; 0x1d
    3750:	8c 8f       	std	Y+28, r24	; 0x1c
    3752:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3754:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3756:	01 97       	sbiw	r24, 0x01	; 1
    3758:	f1 f7       	brne	.-4      	; 0x3756 <Adc_enuStartConversionSync+0x220>
    375a:	9d 8f       	std	Y+29, r25	; 0x1d
    375c:	8c 8f       	std	Y+28, r24	; 0x1c
    375e:	2a c0       	rjmp	.+84     	; 0x37b4 <Adc_enuStartConversionSync+0x27e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	4f e7       	ldi	r20, 0x7F	; 127
    3766:	53 e4       	ldi	r21, 0x43	; 67
    3768:	6f 81       	ldd	r22, Y+7	; 0x07
    376a:	78 85       	ldd	r23, Y+8	; 0x08
    376c:	89 85       	ldd	r24, Y+9	; 0x09
    376e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3770:	0e 94 4c 2b 	call	0x5698	; 0x5698 <__gesf2>
    3774:	18 16       	cp	r1, r24
    3776:	ac f4       	brge	.+42     	; 0x37a2 <Adc_enuStartConversionSync+0x26c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    3778:	6b 85       	ldd	r22, Y+11	; 0x0b
    377a:	7c 85       	ldd	r23, Y+12	; 0x0c
    377c:	8d 85       	ldd	r24, Y+13	; 0x0d
    377e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3780:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    3784:	dc 01       	movw	r26, r24
    3786:	cb 01       	movw	r24, r22
    3788:	9f 8f       	std	Y+31, r25	; 0x1f
    378a:	8e 8f       	std	Y+30, r24	; 0x1e
    378c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    378e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3790:	99 a3       	std	Y+33, r25	; 0x21
    3792:	88 a3       	std	Y+32, r24	; 0x20
    3794:	88 a1       	ldd	r24, Y+32	; 0x20
    3796:	99 a1       	ldd	r25, Y+33	; 0x21
    3798:	01 97       	sbiw	r24, 0x01	; 1
    379a:	f1 f7       	brne	.-4      	; 0x3798 <Adc_enuStartConversionSync+0x262>
    379c:	99 a3       	std	Y+33, r25	; 0x21
    379e:	88 a3       	std	Y+32, r24	; 0x20
    37a0:	0f c0       	rjmp	.+30     	; 0x37c0 <Adc_enuStartConversionSync+0x28a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    37a2:	6f 81       	ldd	r22, Y+7	; 0x07
    37a4:	78 85       	ldd	r23, Y+8	; 0x08
    37a6:	89 85       	ldd	r24, Y+9	; 0x09
    37a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    37aa:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    37ae:	dc 01       	movw	r26, r24
    37b0:	cb 01       	movw	r24, r22
    37b2:	8f 87       	std	Y+15, r24	; 0x0f
    37b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    37b6:	8a a3       	std	Y+34, r24	; 0x22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    37b8:	8a a1       	ldd	r24, Y+34	; 0x22
    37ba:	8a 95       	dec	r24
    37bc:	f1 f7       	brne	.-4      	; 0x37ba <Adc_enuStartConversionSync+0x284>
    37be:	8a a3       	std	Y+34, r24	; 0x22
	            _delay_us(10);

	            Loc_enuAdcStatus &= Adc_GetResult(Address_Adc->result_format ,Address_ResultDigitalVoltage);
    37c0:	8b a1       	ldd	r24, Y+35	; 0x23
    37c2:	9c a1       	ldd	r25, Y+36	; 0x24
    37c4:	fc 01       	movw	r30, r24
    37c6:	22 81       	ldd	r18, Z+2	; 0x02
    37c8:	8d a1       	ldd	r24, Y+37	; 0x25
    37ca:	9e a1       	ldd	r25, Y+38	; 0x26
    37cc:	bc 01       	movw	r22, r24
    37ce:	82 2f       	mov	r24, r18
    37d0:	0e 94 c4 1c 	call	0x3988	; 0x3988 <Adc_GetResult>
    37d4:	98 2f       	mov	r25, r24
    37d6:	89 81       	ldd	r24, Y+1	; 0x01
    37d8:	89 23       	and	r24, r25
    37da:	89 83       	std	Y+1, r24	; 0x01

	            /* Return Status Of The Adc Interrupt*/
	            Adc_ClearInterruptFlag();
    37dc:	86 e2       	ldi	r24, 0x26	; 38
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	26 e2       	ldi	r18, 0x26	; 38
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	f9 01       	movw	r30, r18
    37e6:	20 81       	ld	r18, Z
    37e8:	20 61       	ori	r18, 0x10	; 16
    37ea:	fc 01       	movw	r30, r24
    37ec:	20 83       	st	Z, r18
	            Adc_SetInterruptEnable(Loc_u8AdcInterruptStatus);
    37ee:	86 e2       	ldi	r24, 0x26	; 38
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	26 e2       	ldi	r18, 0x26	; 38
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	f9 01       	movw	r30, r18
    37f8:	20 81       	ld	r18, Z
    37fa:	42 2f       	mov	r20, r18
    37fc:	47 7f       	andi	r20, 0xF7	; 247
    37fe:	2a 81       	ldd	r18, Y+2	; 0x02
    3800:	22 2f       	mov	r18, r18
    3802:	30 e0       	ldi	r19, 0x00	; 0
    3804:	22 0f       	add	r18, r18
    3806:	33 1f       	adc	r19, r19
    3808:	22 0f       	add	r18, r18
    380a:	33 1f       	adc	r19, r19
    380c:	22 0f       	add	r18, r18
    380e:	33 1f       	adc	r19, r19
    3810:	24 2b       	or	r18, r20
    3812:	fc 01       	movw	r30, r24
    3814:	20 83       	st	Z, r18
	        }

	    return Loc_enuAdcStatus;
    3816:	89 81       	ldd	r24, Y+1	; 0x01
}
    3818:	a6 96       	adiw	r28, 0x26	; 38
    381a:	0f b6       	in	r0, 0x3f	; 63
    381c:	f8 94       	cli
    381e:	de bf       	out	0x3e, r29	; 62
    3820:	0f be       	out	0x3f, r0	; 63
    3822:	cd bf       	out	0x3d, r28	; 61
    3824:	df 91       	pop	r29
    3826:	cf 91       	pop	r28
    3828:	08 95       	ret

0000382a <Adc_ConvertResultToVoltage>:



Adc_StatusErrorType Adc_ConvertResultToVoltage( u16 Copy_u16DigitalValue, f32* Address_ResultAnalogVoltage){
    382a:	cf 93       	push	r28
    382c:	df 93       	push	r29
    382e:	00 d0       	rcall	.+0      	; 0x3830 <Adc_ConvertResultToVoltage+0x6>
    3830:	00 d0       	rcall	.+0      	; 0x3832 <Adc_ConvertResultToVoltage+0x8>
    3832:	1f 92       	push	r1
    3834:	cd b7       	in	r28, 0x3d	; 61
    3836:	de b7       	in	r29, 0x3e	; 62
    3838:	9b 83       	std	Y+3, r25	; 0x03
    383a:	8a 83       	std	Y+2, r24	; 0x02
    383c:	7d 83       	std	Y+5, r23	; 0x05
    383e:	6c 83       	std	Y+4, r22	; 0x04

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_ResultAnalogVoltage){
    3844:	8c 81       	ldd	r24, Y+4	; 0x04
    3846:	9d 81       	ldd	r25, Y+5	; 0x05
    3848:	89 2b       	or	r24, r25
    384a:	19 f4       	brne	.+6      	; 0x3852 <Adc_ConvertResultToVoltage+0x28>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    384c:	82 e0       	ldi	r24, 0x02	; 2
    384e:	89 83       	std	Y+1, r24	; 0x01
    3850:	1c c0       	rjmp	.+56     	; 0x388a <Adc_ConvertResultToVoltage+0x60>
	    }
	    else{
	           /* Vanalog = Vdigital * step    */
	           /* Step Size = (Vmax-Vmin)/2^n      */
	           *Address_ResultAnalogVoltage = Copy_u16DigitalValue*0.004883F;
    3852:	8a 81       	ldd	r24, Y+2	; 0x02
    3854:	9b 81       	ldd	r25, Y+3	; 0x03
    3856:	cc 01       	movw	r24, r24
    3858:	a0 e0       	ldi	r26, 0x00	; 0
    385a:	b0 e0       	ldi	r27, 0x00	; 0
    385c:	bc 01       	movw	r22, r24
    385e:	cd 01       	movw	r24, r26
    3860:	0e 94 9a 2a 	call	0x5534	; 0x5534 <__floatunsisf>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	23 e9       	ldi	r18, 0x93	; 147
    386a:	31 e0       	ldi	r19, 0x01	; 1
    386c:	40 ea       	ldi	r20, 0xA0	; 160
    386e:	5b e3       	ldi	r21, 0x3B	; 59
    3870:	bc 01       	movw	r22, r24
    3872:	cd 01       	movw	r24, r26
    3874:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	2c 81       	ldd	r18, Y+4	; 0x04
    387e:	3d 81       	ldd	r19, Y+5	; 0x05
    3880:	f9 01       	movw	r30, r18
    3882:	80 83       	st	Z, r24
    3884:	91 83       	std	Z+1, r25	; 0x01
    3886:	a2 83       	std	Z+2, r26	; 0x02
    3888:	b3 83       	std	Z+3, r27	; 0x03
	       }

	    return Loc_enuAdcStatus;
    388a:	89 81       	ldd	r24, Y+1	; 0x01
}
    388c:	0f 90       	pop	r0
    388e:	0f 90       	pop	r0
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
    3894:	0f 90       	pop	r0
    3896:	df 91       	pop	r29
    3898:	cf 91       	pop	r28
    389a:	08 95       	ret

0000389c <Adc_StartConversionAsync>:


Adc_StatusErrorType Adc_StartConversionAsync(const Adc_PinConfigType* Address_Adc){
    389c:	cf 93       	push	r28
    389e:	df 93       	push	r29
    38a0:	00 d0       	rcall	.+0      	; 0x38a2 <Adc_StartConversionAsync+0x6>
    38a2:	1f 92       	push	r1
    38a4:	cd b7       	in	r28, 0x3d	; 61
    38a6:	de b7       	in	r29, 0x3e	; 62
    38a8:	9b 83       	std	Y+3, r25	; 0x03
    38aa:	8a 83       	std	Y+2, r24	; 0x02

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Adc){
    38b0:	8a 81       	ldd	r24, Y+2	; 0x02
    38b2:	9b 81       	ldd	r25, Y+3	; 0x03
    38b4:	89 2b       	or	r24, r25
    38b6:	19 f4       	brne	.+6      	; 0x38be <Adc_StartConversionAsync+0x22>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    38b8:	82 e0       	ldi	r24, 0x02	; 2
    38ba:	89 83       	std	Y+1, r24	; 0x01
    38bc:	34 c0       	rjmp	.+104    	; 0x3926 <Adc_StartConversionAsync+0x8a>
	    }
	    else{
	    	 /* You can't start A new Conversion Unless The old One Is Done*/
	    	        while( ZERO_VALUE == Adc_IsConversionCompleted() );
    38be:	00 00       	nop
    38c0:	86 e2       	ldi	r24, 0x26	; 38
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	fc 01       	movw	r30, r24
    38c6:	80 81       	ld	r24, Z
    38c8:	82 95       	swap	r24
    38ca:	86 95       	lsr	r24
    38cc:	86 95       	lsr	r24
    38ce:	83 70       	andi	r24, 0x03	; 3
    38d0:	88 2f       	mov	r24, r24
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	81 70       	andi	r24, 0x01	; 1
    38d6:	99 27       	eor	r25, r25
    38d8:	89 2b       	or	r24, r25
    38da:	91 f7       	brne	.-28     	; 0x38c0 <Adc_StartConversionAsync+0x24>

	    	        Global_AdcInterruptIndex = (u8)Address_Adc->channel_number;
    38dc:	8a 81       	ldd	r24, Y+2	; 0x02
    38de:	9b 81       	ldd	r25, Y+3	; 0x03
    38e0:	fc 01       	movw	r30, r24
    38e2:	80 81       	ld	r24, Z
    38e4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <Global_AdcInterruptIndex>
	    	        current_format = Address_Adc->result_format;
    38e8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ea:	9b 81       	ldd	r25, Y+3	; 0x03
    38ec:	fc 01       	movw	r30, r24
    38ee:	82 81       	ldd	r24, Z+2	; 0x02
    38f0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <current_format>
	    	        /* Choose Selected Channel */
	    	        Adc_SelectChannel(Address_Adc->channel_number);
    38f4:	87 e2       	ldi	r24, 0x27	; 39
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	27 e2       	ldi	r18, 0x27	; 39
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	f9 01       	movw	r30, r18
    38fe:	20 81       	ld	r18, Z
    3900:	42 2f       	mov	r20, r18
    3902:	48 7f       	andi	r20, 0xF8	; 248
    3904:	2a 81       	ldd	r18, Y+2	; 0x02
    3906:	3b 81       	ldd	r19, Y+3	; 0x03
    3908:	f9 01       	movw	r30, r18
    390a:	20 81       	ld	r18, Z
    390c:	27 70       	andi	r18, 0x07	; 7
    390e:	24 2b       	or	r18, r20
    3910:	fc 01       	movw	r30, r24
    3912:	20 83       	st	Z, r18


	    	        /* Start Conversion  */
	    	        Adc_StartConversion();
    3914:	86 e2       	ldi	r24, 0x26	; 38
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	26 e2       	ldi	r18, 0x26	; 38
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	f9 01       	movw	r30, r18
    391e:	20 81       	ld	r18, Z
    3920:	20 64       	ori	r18, 0x40	; 64
    3922:	fc 01       	movw	r30, r24
    3924:	20 83       	st	Z, r18
	    }

	    return Loc_enuAdcStatus;
    3926:	89 81       	ldd	r24, Y+1	; 0x01
}
    3928:	0f 90       	pop	r0
    392a:	0f 90       	pop	r0
    392c:	0f 90       	pop	r0
    392e:	df 91       	pop	r29
    3930:	cf 91       	pop	r28
    3932:	08 95       	ret

00003934 <Adc_enuEnableInterrupt>:


Adc_StatusErrorType Adc_enuEnableInterrupt(void){
    3934:	cf 93       	push	r28
    3936:	df 93       	push	r29
    3938:	1f 92       	push	r1
    393a:	cd b7       	in	r28, 0x3d	; 61
    393c:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	89 83       	std	Y+1, r24	; 0x01
	Adc_EnableInterrupt();
    3942:	86 e2       	ldi	r24, 0x26	; 38
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	26 e2       	ldi	r18, 0x26	; 38
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	f9 01       	movw	r30, r18
    394c:	20 81       	ld	r18, Z
    394e:	28 60       	ori	r18, 0x08	; 8
    3950:	fc 01       	movw	r30, r24
    3952:	20 83       	st	Z, r18

		    return Loc_enuAdcStatus;
    3954:	89 81       	ldd	r24, Y+1	; 0x01
}
    3956:	0f 90       	pop	r0
    3958:	df 91       	pop	r29
    395a:	cf 91       	pop	r28
    395c:	08 95       	ret

0000395e <Adc_enuDisableInterrupt>:


Adc_StatusErrorType Adc_enuDisableInterrupt(void){
    395e:	cf 93       	push	r28
    3960:	df 93       	push	r29
    3962:	1f 92       	push	r1
    3964:	cd b7       	in	r28, 0x3d	; 61
    3966:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	89 83       	std	Y+1, r24	; 0x01
	Adc_DisableInterrupt();
    396c:	86 e2       	ldi	r24, 0x26	; 38
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	26 e2       	ldi	r18, 0x26	; 38
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	f9 01       	movw	r30, r18
    3976:	20 81       	ld	r18, Z
    3978:	27 7f       	andi	r18, 0xF7	; 247
    397a:	fc 01       	movw	r30, r24
    397c:	20 83       	st	Z, r18

		    return Loc_enuAdcStatus;
    397e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3980:	0f 90       	pop	r0
    3982:	df 91       	pop	r29
    3984:	cf 91       	pop	r28
    3986:	08 95       	ret

00003988 <Adc_GetResult>:




////////////////////////////////////////////////Helpers Functions ///////////////////////////
static Adc_StatusErrorType Adc_GetResult(const Adc_ResultFormartType Copy_enuResultFormat, u16* Address_Result){
    3988:	cf 93       	push	r28
    398a:	df 93       	push	r29
    398c:	00 d0       	rcall	.+0      	; 0x398e <Adc_GetResult+0x6>
    398e:	00 d0       	rcall	.+0      	; 0x3990 <Adc_GetResult+0x8>
    3990:	cd b7       	in	r28, 0x3d	; 61
    3992:	de b7       	in	r29, 0x3e	; 62
    3994:	8a 83       	std	Y+2, r24	; 0x02
    3996:	7c 83       	std	Y+4, r23	; 0x04
    3998:	6b 83       	std	Y+3, r22	; 0x03

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    399a:	81 e0       	ldi	r24, 0x01	; 1
    399c:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Result){
    399e:	8b 81       	ldd	r24, Y+3	; 0x03
    39a0:	9c 81       	ldd	r25, Y+4	; 0x04
    39a2:	89 2b       	or	r24, r25
    39a4:	19 f4       	brne	.+6      	; 0x39ac <Adc_GetResult+0x24>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    39a6:	82 e0       	ldi	r24, 0x02	; 2
    39a8:	89 83       	std	Y+1, r24	; 0x01
    39aa:	30 c0       	rjmp	.+96     	; 0x3a0c <Adc_GetResult+0x84>
	    }

	    	else{
	    	        switch(Copy_enuResultFormat){
    39ac:	8a 81       	ldd	r24, Y+2	; 0x02
    39ae:	88 2f       	mov	r24, r24
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	89 2b       	or	r24, r25
    39b4:	b9 f4       	brne	.+46     	; 0x39e4 <Adc_GetResult+0x5c>

	    	        case ADC_RIGHT_JUSTIFIED:



	    	                *Address_Result = (ADCL) | (ADCH <<8) ;
    39b6:	84 e2       	ldi	r24, 0x24	; 36
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	fc 01       	movw	r30, r24
    39bc:	80 81       	ld	r24, Z
    39be:	28 2f       	mov	r18, r24
    39c0:	30 e0       	ldi	r19, 0x00	; 0
    39c2:	85 e2       	ldi	r24, 0x25	; 37
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	fc 01       	movw	r30, r24
    39c8:	80 81       	ld	r24, Z
    39ca:	88 2f       	mov	r24, r24
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	98 2f       	mov	r25, r24
    39d0:	88 27       	eor	r24, r24
    39d2:	82 2b       	or	r24, r18
    39d4:	93 2b       	or	r25, r19
    39d6:	9c 01       	movw	r18, r24
    39d8:	8b 81       	ldd	r24, Y+3	; 0x03
    39da:	9c 81       	ldd	r25, Y+4	; 0x04
    39dc:	fc 01       	movw	r30, r24
    39de:	31 83       	std	Z+1, r19	; 0x01
    39e0:	20 83       	st	Z, r18
	    	                break;
    39e2:	14 c0       	rjmp	.+40     	; 0x3a0c <Adc_GetResult+0x84>

	    	            default:
	    	            	*Address_Result = (ADCHL>>6) & 0x3FF;
    39e4:	84 e2       	ldi	r24, 0x24	; 36
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	fc 01       	movw	r30, r24
    39ea:	80 81       	ld	r24, Z
    39ec:	91 81       	ldd	r25, Z+1	; 0x01
    39ee:	9c 01       	movw	r18, r24
    39f0:	00 24       	eor	r0, r0
    39f2:	22 0f       	add	r18, r18
    39f4:	33 1f       	adc	r19, r19
    39f6:	00 1c       	adc	r0, r0
    39f8:	22 0f       	add	r18, r18
    39fa:	33 1f       	adc	r19, r19
    39fc:	00 1c       	adc	r0, r0
    39fe:	23 2f       	mov	r18, r19
    3a00:	30 2d       	mov	r19, r0
    3a02:	8b 81       	ldd	r24, Y+3	; 0x03
    3a04:	9c 81       	ldd	r25, Y+4	; 0x04
    3a06:	fc 01       	movw	r30, r24
    3a08:	31 83       	std	Z+1, r19	; 0x01
    3a0a:	20 83       	st	Z, r18

	    	        }
	    	    }


	    return Loc_enuAdcStatus;
    3a0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a0e:	0f 90       	pop	r0
    3a10:	0f 90       	pop	r0
    3a12:	0f 90       	pop	r0
    3a14:	0f 90       	pop	r0
    3a16:	df 91       	pop	r29
    3a18:	cf 91       	pop	r28
    3a1a:	08 95       	ret

00003a1c <Adc_SetCallbackFunction>:

Adc_StatusErrorType Adc_SetCallbackFunction(const Adc_PinConfigType* Address_Adc, void (*callback)(u16)){
    3a1c:	cf 93       	push	r28
    3a1e:	df 93       	push	r29
    3a20:	00 d0       	rcall	.+0      	; 0x3a22 <Adc_SetCallbackFunction+0x6>
    3a22:	00 d0       	rcall	.+0      	; 0x3a24 <Adc_SetCallbackFunction+0x8>
    3a24:	1f 92       	push	r1
    3a26:	cd b7       	in	r28, 0x3d	; 61
    3a28:	de b7       	in	r29, 0x3e	; 62
    3a2a:	9b 83       	std	Y+3, r25	; 0x03
    3a2c:	8a 83       	std	Y+2, r24	; 0x02
    3a2e:	7d 83       	std	Y+5, r23	; 0x05
    3a30:	6c 83       	std	Y+4, r22	; 0x04
	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	89 83       	std	Y+1, r24	; 0x01
		    if(NULL == Address_Adc){
    3a36:	8a 81       	ldd	r24, Y+2	; 0x02
    3a38:	9b 81       	ldd	r25, Y+3	; 0x03
    3a3a:	89 2b       	or	r24, r25
    3a3c:	19 f4       	brne	.+6      	; 0x3a44 <Adc_SetCallbackFunction+0x28>
		    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    3a3e:	82 e0       	ldi	r24, 0x02	; 2
    3a40:	89 83       	std	Y+1, r24	; 0x01
    3a42:	0f c0       	rjmp	.+30     	; 0x3a62 <Adc_SetCallbackFunction+0x46>
		    }
		    else{
		    	Adc_InterruptHandlerArr[Address_Adc->channel_number] = callback;
    3a44:	8a 81       	ldd	r24, Y+2	; 0x02
    3a46:	9b 81       	ldd	r25, Y+3	; 0x03
    3a48:	fc 01       	movw	r30, r24
    3a4a:	80 81       	ld	r24, Z
    3a4c:	88 2f       	mov	r24, r24
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	88 0f       	add	r24, r24
    3a52:	99 1f       	adc	r25, r25
    3a54:	8f 5f       	subi	r24, 0xFF	; 255
    3a56:	9e 4f       	sbci	r25, 0xFE	; 254
    3a58:	2c 81       	ldd	r18, Y+4	; 0x04
    3a5a:	3d 81       	ldd	r19, Y+5	; 0x05
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	31 83       	std	Z+1, r19	; 0x01
    3a60:	20 83       	st	Z, r18
		    }
		    return Loc_enuAdcStatus;
    3a62:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a64:	0f 90       	pop	r0
    3a66:	0f 90       	pop	r0
    3a68:	0f 90       	pop	r0
    3a6a:	0f 90       	pop	r0
    3a6c:	0f 90       	pop	r0
    3a6e:	df 91       	pop	r29
    3a70:	cf 91       	pop	r28
    3a72:	08 95       	ret

00003a74 <__vector_16>:

// ISR function For ADC
void __vector_16(void) __attribute__((signal));

void __vector_16(void){
    3a74:	1f 92       	push	r1
    3a76:	0f 92       	push	r0
    3a78:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    3a7c:	0f 92       	push	r0
    3a7e:	11 24       	eor	r1, r1
    3a80:	2f 93       	push	r18
    3a82:	3f 93       	push	r19
    3a84:	4f 93       	push	r20
    3a86:	5f 93       	push	r21
    3a88:	6f 93       	push	r22
    3a8a:	7f 93       	push	r23
    3a8c:	8f 93       	push	r24
    3a8e:	9f 93       	push	r25
    3a90:	af 93       	push	r26
    3a92:	bf 93       	push	r27
    3a94:	ef 93       	push	r30
    3a96:	ff 93       	push	r31
    3a98:	cf 93       	push	r28
    3a9a:	df 93       	push	r29
    3a9c:	00 d0       	rcall	.+0      	; 0x3a9e <__vector_16+0x2a>
    3a9e:	1f 92       	push	r1
    3aa0:	cd b7       	in	r28, 0x3d	; 61
    3aa2:	de b7       	in	r29, 0x3e	; 62

	    u16 Loc_u16Result;
	    Adc_StatusErrorType Loc_enuAdcStatus  = ADC_STATUS_OK;
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	89 83       	std	Y+1, r24	; 0x01

	    Loc_enuAdcStatus = Adc_GetResult(current_format,&Loc_u16Result);
    3aa8:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <current_format>
    3aac:	ce 01       	movw	r24, r28
    3aae:	02 96       	adiw	r24, 0x02	; 2
    3ab0:	bc 01       	movw	r22, r24
    3ab2:	82 2f       	mov	r24, r18
    3ab4:	0e 94 c4 1c 	call	0x3988	; 0x3988 <Adc_GetResult>
    3ab8:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL != Adc_InterruptHandlerArr[Global_AdcInterruptIndex]){
    3aba:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Global_AdcInterruptIndex>
    3abe:	88 2f       	mov	r24, r24
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	88 0f       	add	r24, r24
    3ac4:	99 1f       	adc	r25, r25
    3ac6:	8f 5f       	subi	r24, 0xFF	; 255
    3ac8:	9e 4f       	sbci	r25, 0xFE	; 254
    3aca:	fc 01       	movw	r30, r24
    3acc:	80 81       	ld	r24, Z
    3ace:	91 81       	ldd	r25, Z+1	; 0x01
    3ad0:	89 2b       	or	r24, r25
    3ad2:	79 f0       	breq	.+30     	; 0x3af2 <__vector_16+0x7e>
	        Adc_InterruptHandlerArr[Global_AdcInterruptIndex](Loc_u16Result);
    3ad4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Global_AdcInterruptIndex>
    3ad8:	88 2f       	mov	r24, r24
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	88 0f       	add	r24, r24
    3ade:	99 1f       	adc	r25, r25
    3ae0:	8f 5f       	subi	r24, 0xFF	; 255
    3ae2:	9e 4f       	sbci	r25, 0xFE	; 254
    3ae4:	fc 01       	movw	r30, r24
    3ae6:	20 81       	ld	r18, Z
    3ae8:	31 81       	ldd	r19, Z+1	; 0x01
    3aea:	8a 81       	ldd	r24, Y+2	; 0x02
    3aec:	9b 81       	ldd	r25, Y+3	; 0x03
    3aee:	f9 01       	movw	r30, r18
    3af0:	09 95       	icall
	    }
	    else {/* do nothing , error in declaration */ }

}
    3af2:	00 00       	nop
    3af4:	0f 90       	pop	r0
    3af6:	0f 90       	pop	r0
    3af8:	0f 90       	pop	r0
    3afa:	df 91       	pop	r29
    3afc:	cf 91       	pop	r28
    3afe:	ff 91       	pop	r31
    3b00:	ef 91       	pop	r30
    3b02:	bf 91       	pop	r27
    3b04:	af 91       	pop	r26
    3b06:	9f 91       	pop	r25
    3b08:	8f 91       	pop	r24
    3b0a:	7f 91       	pop	r23
    3b0c:	6f 91       	pop	r22
    3b0e:	5f 91       	pop	r21
    3b10:	4f 91       	pop	r20
    3b12:	3f 91       	pop	r19
    3b14:	2f 91       	pop	r18
    3b16:	0f 90       	pop	r0
    3b18:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    3b1c:	0f 90       	pop	r0
    3b1e:	1f 90       	pop	r1
    3b20:	18 95       	reti

00003b22 <Seven_Segment_WriteBCDConnection>:



/********************************** Software Interfaces Declarations *******************/

Seven_Segment_StatusErrorType  Seven_Segment_WriteBCDConnection(const Seven_Segment_BCDType* Address_Segment, u8 Copy_u8Value){
    3b22:	cf 93       	push	r28
    3b24:	df 93       	push	r29
    3b26:	cd b7       	in	r28, 0x3d	; 61
    3b28:	de b7       	in	r29, 0x3e	; 62
    3b2a:	27 97       	sbiw	r28, 0x07	; 7
    3b2c:	0f b6       	in	r0, 0x3f	; 63
    3b2e:	f8 94       	cli
    3b30:	de bf       	out	0x3e, r29	; 62
    3b32:	0f be       	out	0x3f, r0	; 63
    3b34:	cd bf       	out	0x3d, r28	; 61
    3b36:	9e 83       	std	Y+6, r25	; 0x06
    3b38:	8d 83       	std	Y+5, r24	; 0x05
    3b3a:	6f 83       	std	Y+7, r22	; 0x07

	Seven_Segment_StatusErrorType Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_OK;
    3b3c:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioState = DIO_STATUS_OK;
    3b3e:	1b 82       	std	Y+3, r1	; 0x03
	    u8 Loc_u8FinalBit = DIO_LOW;
    3b40:	1c 82       	std	Y+4, r1	; 0x04
	    u8 Loc_u8Counter=ZERO_VALUE;
    3b42:	1a 82       	std	Y+2, r1	; 0x02

	    if (NULL == Address_Segment  ){
    3b44:	8d 81       	ldd	r24, Y+5	; 0x05
    3b46:	9e 81       	ldd	r25, Y+6	; 0x06
    3b48:	89 2b       	or	r24, r25
    3b4a:	19 f4       	brne	.+6      	; 0x3b52 <Seven_Segment_WriteBCDConnection+0x30>

	    	Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_NULL_POINTER_ADDRESS;
    3b4c:	82 e0       	ldi	r24, 0x02	; 2
    3b4e:	89 83       	std	Y+1, r24	; 0x01
    3b50:	22 c0       	rjmp	.+68     	; 0x3b96 <Seven_Segment_WriteBCDConnection+0x74>
	    }

	    else{

	        for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<4;Loc_u8Counter++){
    3b52:	1a 82       	std	Y+2, r1	; 0x02
    3b54:	1d c0       	rjmp	.+58     	; 0x3b90 <Seven_Segment_WriteBCDConnection+0x6e>
	        	Loc_u8FinalBit = (Copy_u8Value>>Loc_u8Counter)& (ONE_VALUE);
    3b56:	8f 81       	ldd	r24, Y+7	; 0x07
    3b58:	88 2f       	mov	r24, r24
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	2a 81       	ldd	r18, Y+2	; 0x02
    3b5e:	22 2f       	mov	r18, r18
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	02 c0       	rjmp	.+4      	; 0x3b68 <Seven_Segment_WriteBCDConnection+0x46>
    3b64:	95 95       	asr	r25
    3b66:	87 95       	ror	r24
    3b68:	2a 95       	dec	r18
    3b6a:	e2 f7       	brpl	.-8      	; 0x3b64 <Seven_Segment_WriteBCDConnection+0x42>
    3b6c:	81 70       	andi	r24, 0x01	; 1
    3b6e:	8c 83       	std	Y+4, r24	; 0x04
	        	Loc_enuDioState= Dio_enuWriteChannel(Address_Segment->seven_segment_pins[Loc_u8Counter], Loc_u8FinalBit );
    3b70:	8a 81       	ldd	r24, Y+2	; 0x02
    3b72:	88 2f       	mov	r24, r24
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	2d 81       	ldd	r18, Y+5	; 0x05
    3b78:	3e 81       	ldd	r19, Y+6	; 0x06
    3b7a:	82 0f       	add	r24, r18
    3b7c:	93 1f       	adc	r25, r19
    3b7e:	fc 01       	movw	r30, r24
    3b80:	80 81       	ld	r24, Z
    3b82:	6c 81       	ldd	r22, Y+4	; 0x04
    3b84:	0e 94 64 18 	call	0x30c8	; 0x30c8 <Dio_enuWriteChannel>
    3b88:	8b 83       	std	Y+3, r24	; 0x03
	    	Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_NULL_POINTER_ADDRESS;
	    }

	    else{

	        for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<4;Loc_u8Counter++){
    3b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b8c:	8f 5f       	subi	r24, 0xFF	; 255
    3b8e:	8a 83       	std	Y+2, r24	; 0x02
    3b90:	8a 81       	ldd	r24, Y+2	; 0x02
    3b92:	84 30       	cpi	r24, 0x04	; 4
    3b94:	00 f3       	brcs	.-64     	; 0x3b56 <Seven_Segment_WriteBCDConnection+0x34>
	        	Loc_u8FinalBit = (Copy_u8Value>>Loc_u8Counter)& (ONE_VALUE);
	        	Loc_enuDioState= Dio_enuWriteChannel(Address_Segment->seven_segment_pins[Loc_u8Counter], Loc_u8FinalBit );
	        }
	    }

	    return Loc_enuSegmentState;
    3b96:	89 81       	ldd	r24, Y+1	; 0x01

}
    3b98:	27 96       	adiw	r28, 0x07	; 7
    3b9a:	0f b6       	in	r0, 0x3f	; 63
    3b9c:	f8 94       	cli
    3b9e:	de bf       	out	0x3e, r29	; 62
    3ba0:	0f be       	out	0x3f, r0	; 63
    3ba2:	cd bf       	out	0x3d, r28	; 61
    3ba4:	df 91       	pop	r29
    3ba6:	cf 91       	pop	r28
    3ba8:	08 95       	ret

00003baa <Lcd_4bit_enuInit>:


/********************************** Software Interfaces Declarations *******************/


Lcd_ErrorStatusType Lcd_4bit_enuInit(const Lcd_4bitType* Address_lcd){
    3baa:	cf 93       	push	r28
    3bac:	df 93       	push	r29
    3bae:	cd b7       	in	r28, 0x3d	; 61
    3bb0:	de b7       	in	r29, 0x3e	; 62
    3bb2:	ef 97       	sbiw	r28, 0x3f	; 63
    3bb4:	0f b6       	in	r0, 0x3f	; 63
    3bb6:	f8 94       	cli
    3bb8:	de bf       	out	0x3e, r29	; 62
    3bba:	0f be       	out	0x3f, r0	; 63
    3bbc:	cd bf       	out	0x3d, r28	; 61
    3bbe:	9f af       	std	Y+63, r25	; 0x3f
    3bc0:	8e af       	std	Y+62, r24	; 0x3e

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    3bc2:	19 82       	std	Y+1, r1	; 0x01
	if( NULL == Address_lcd){
    3bc4:	8e ad       	ldd	r24, Y+62	; 0x3e
    3bc6:	9f ad       	ldd	r25, Y+63	; 0x3f
    3bc8:	89 2b       	or	r24, r25
    3bca:	19 f4       	brne	.+6      	; 0x3bd2 <Lcd_4bit_enuInit+0x28>
		Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    3bcc:	82 e0       	ldi	r24, 0x02	; 2
    3bce:	89 83       	std	Y+1, r24	; 0x01
    3bd0:	0f c2       	rjmp	.+1054   	; 0x3ff0 <Lcd_4bit_enuInit+0x446>

	}
	else{

			  Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    3bd2:	8e ad       	ldd	r24, Y+62	; 0x3e
    3bd4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3bd6:	68 e3       	ldi	r22, 0x38	; 56
    3bd8:	0e 94 02 20 	call	0x4004	; 0x4004 <Lcd_4bit_enuSendCommand>
    3bdc:	89 83       	std	Y+1, r24	; 0x01
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	a0 ea       	ldi	r26, 0xA0	; 160
    3be4:	b0 e4       	ldi	r27, 0x40	; 64
    3be6:	8a 83       	std	Y+2, r24	; 0x02
    3be8:	9b 83       	std	Y+3, r25	; 0x03
    3bea:	ac 83       	std	Y+4, r26	; 0x04
    3bec:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3bee:	20 e0       	ldi	r18, 0x00	; 0
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	4a e7       	ldi	r20, 0x7A	; 122
    3bf4:	55 e4       	ldi	r21, 0x45	; 69
    3bf6:	6a 81       	ldd	r22, Y+2	; 0x02
    3bf8:	7b 81       	ldd	r23, Y+3	; 0x03
    3bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    3bfc:	9d 81       	ldd	r25, Y+5	; 0x05
    3bfe:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    3c02:	dc 01       	movw	r26, r24
    3c04:	cb 01       	movw	r24, r22
    3c06:	8c ab       	std	Y+52, r24	; 0x34
    3c08:	9d ab       	std	Y+53, r25	; 0x35
    3c0a:	ae ab       	std	Y+54, r26	; 0x36
    3c0c:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
    3c0e:	20 e0       	ldi	r18, 0x00	; 0
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	40 e8       	ldi	r20, 0x80	; 128
    3c14:	5f e3       	ldi	r21, 0x3F	; 63
    3c16:	6c a9       	ldd	r22, Y+52	; 0x34
    3c18:	7d a9       	ldd	r23, Y+53	; 0x35
    3c1a:	8e a9       	ldd	r24, Y+54	; 0x36
    3c1c:	9f a9       	ldd	r25, Y+55	; 0x37
    3c1e:	0e 94 ed 29 	call	0x53da	; 0x53da <__cmpsf2>
    3c22:	88 23       	and	r24, r24
    3c24:	2c f4       	brge	.+10     	; 0x3c30 <Lcd_4bit_enuInit+0x86>
		__ticks = 1;
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	99 af       	std	Y+57, r25	; 0x39
    3c2c:	88 af       	std	Y+56, r24	; 0x38
    3c2e:	3f c0       	rjmp	.+126    	; 0x3cae <Lcd_4bit_enuInit+0x104>
	else if (__tmp > 65535)
    3c30:	20 e0       	ldi	r18, 0x00	; 0
    3c32:	3f ef       	ldi	r19, 0xFF	; 255
    3c34:	4f e7       	ldi	r20, 0x7F	; 127
    3c36:	57 e4       	ldi	r21, 0x47	; 71
    3c38:	6c a9       	ldd	r22, Y+52	; 0x34
    3c3a:	7d a9       	ldd	r23, Y+53	; 0x35
    3c3c:	8e a9       	ldd	r24, Y+54	; 0x36
    3c3e:	9f a9       	ldd	r25, Y+55	; 0x37
    3c40:	0e 94 4c 2b 	call	0x5698	; 0x5698 <__gesf2>
    3c44:	18 16       	cp	r1, r24
    3c46:	4c f5       	brge	.+82     	; 0x3c9a <Lcd_4bit_enuInit+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c48:	20 e0       	ldi	r18, 0x00	; 0
    3c4a:	30 e0       	ldi	r19, 0x00	; 0
    3c4c:	40 e2       	ldi	r20, 0x20	; 32
    3c4e:	51 e4       	ldi	r21, 0x41	; 65
    3c50:	6a 81       	ldd	r22, Y+2	; 0x02
    3c52:	7b 81       	ldd	r23, Y+3	; 0x03
    3c54:	8c 81       	ldd	r24, Y+4	; 0x04
    3c56:	9d 81       	ldd	r25, Y+5	; 0x05
    3c58:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    3c5c:	dc 01       	movw	r26, r24
    3c5e:	cb 01       	movw	r24, r22
    3c60:	bc 01       	movw	r22, r24
    3c62:	cd 01       	movw	r24, r26
    3c64:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    3c68:	dc 01       	movw	r26, r24
    3c6a:	cb 01       	movw	r24, r22
    3c6c:	99 af       	std	Y+57, r25	; 0x39
    3c6e:	88 af       	std	Y+56, r24	; 0x38
    3c70:	0f c0       	rjmp	.+30     	; 0x3c90 <Lcd_4bit_enuInit+0xe6>
    3c72:	80 e9       	ldi	r24, 0x90	; 144
    3c74:	91 e0       	ldi	r25, 0x01	; 1
    3c76:	9b af       	std	Y+59, r25	; 0x3b
    3c78:	8a af       	std	Y+58, r24	; 0x3a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3c7a:	8a ad       	ldd	r24, Y+58	; 0x3a
    3c7c:	9b ad       	ldd	r25, Y+59	; 0x3b
    3c7e:	01 97       	sbiw	r24, 0x01	; 1
    3c80:	f1 f7       	brne	.-4      	; 0x3c7e <Lcd_4bit_enuInit+0xd4>
    3c82:	9b af       	std	Y+59, r25	; 0x3b
    3c84:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c86:	88 ad       	ldd	r24, Y+56	; 0x38
    3c88:	99 ad       	ldd	r25, Y+57	; 0x39
    3c8a:	01 97       	sbiw	r24, 0x01	; 1
    3c8c:	99 af       	std	Y+57, r25	; 0x39
    3c8e:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c90:	88 ad       	ldd	r24, Y+56	; 0x38
    3c92:	99 ad       	ldd	r25, Y+57	; 0x39
    3c94:	89 2b       	or	r24, r25
    3c96:	69 f7       	brne	.-38     	; 0x3c72 <Lcd_4bit_enuInit+0xc8>
    3c98:	14 c0       	rjmp	.+40     	; 0x3cc2 <Lcd_4bit_enuInit+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c9a:	6c a9       	ldd	r22, Y+52	; 0x34
    3c9c:	7d a9       	ldd	r23, Y+53	; 0x35
    3c9e:	8e a9       	ldd	r24, Y+54	; 0x36
    3ca0:	9f a9       	ldd	r25, Y+55	; 0x37
    3ca2:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    3ca6:	dc 01       	movw	r26, r24
    3ca8:	cb 01       	movw	r24, r22
    3caa:	99 af       	std	Y+57, r25	; 0x39
    3cac:	88 af       	std	Y+56, r24	; 0x38
    3cae:	88 ad       	ldd	r24, Y+56	; 0x38
    3cb0:	99 ad       	ldd	r25, Y+57	; 0x39
    3cb2:	9d af       	std	Y+61, r25	; 0x3d
    3cb4:	8c af       	std	Y+60, r24	; 0x3c
    3cb6:	8c ad       	ldd	r24, Y+60	; 0x3c
    3cb8:	9d ad       	ldd	r25, Y+61	; 0x3d
    3cba:	01 97       	sbiw	r24, 0x01	; 1
    3cbc:	f1 f7       	brne	.-4      	; 0x3cba <Lcd_4bit_enuInit+0x110>
    3cbe:	9d af       	std	Y+61, r25	; 0x3d
    3cc0:	8c af       	std	Y+60, r24	; 0x3c
			        _delay_ms(5);
			   Loc_enuStatus=  Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    3cc2:	8e ad       	ldd	r24, Y+62	; 0x3e
    3cc4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cc6:	68 e3       	ldi	r22, 0x38	; 56
    3cc8:	0e 94 02 20 	call	0x4004	; 0x4004 <Lcd_4bit_enuSendCommand>
    3ccc:	89 83       	std	Y+1, r24	; 0x01
    3cce:	80 e0       	ldi	r24, 0x00	; 0
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	a6 e1       	ldi	r26, 0x16	; 22
    3cd4:	b3 e4       	ldi	r27, 0x43	; 67
    3cd6:	8e 83       	std	Y+6, r24	; 0x06
    3cd8:	9f 83       	std	Y+7, r25	; 0x07
    3cda:	a8 87       	std	Y+8, r26	; 0x08
    3cdc:	b9 87       	std	Y+9, r27	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    3cde:	2b ea       	ldi	r18, 0xAB	; 171
    3ce0:	3a ea       	ldi	r19, 0xAA	; 170
    3ce2:	4a ea       	ldi	r20, 0xAA	; 170
    3ce4:	50 e4       	ldi	r21, 0x40	; 64
    3ce6:	6e 81       	ldd	r22, Y+6	; 0x06
    3ce8:	7f 81       	ldd	r23, Y+7	; 0x07
    3cea:	88 85       	ldd	r24, Y+8	; 0x08
    3cec:	99 85       	ldd	r25, Y+9	; 0x09
    3cee:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    3cf2:	dc 01       	movw	r26, r24
    3cf4:	cb 01       	movw	r24, r22
    3cf6:	88 8f       	std	Y+24, r24	; 0x18
    3cf8:	99 8f       	std	Y+25, r25	; 0x19
    3cfa:	aa 8f       	std	Y+26, r26	; 0x1a
    3cfc:	bb 8f       	std	Y+27, r27	; 0x1b
	__tmp2 = ((F_CPU) / 4e6) * __us;
    3cfe:	20 e0       	ldi	r18, 0x00	; 0
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	40 e8       	ldi	r20, 0x80	; 128
    3d04:	50 e4       	ldi	r21, 0x40	; 64
    3d06:	6e 81       	ldd	r22, Y+6	; 0x06
    3d08:	7f 81       	ldd	r23, Y+7	; 0x07
    3d0a:	88 85       	ldd	r24, Y+8	; 0x08
    3d0c:	99 85       	ldd	r25, Y+9	; 0x09
    3d0e:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    3d12:	dc 01       	movw	r26, r24
    3d14:	cb 01       	movw	r24, r22
    3d16:	8c 8f       	std	Y+28, r24	; 0x1c
    3d18:	9d 8f       	std	Y+29, r25	; 0x1d
    3d1a:	ae 8f       	std	Y+30, r26	; 0x1e
    3d1c:	bf 8f       	std	Y+31, r27	; 0x1f
	if (__tmp < 1.0)
    3d1e:	20 e0       	ldi	r18, 0x00	; 0
    3d20:	30 e0       	ldi	r19, 0x00	; 0
    3d22:	40 e8       	ldi	r20, 0x80	; 128
    3d24:	5f e3       	ldi	r21, 0x3F	; 63
    3d26:	68 8d       	ldd	r22, Y+24	; 0x18
    3d28:	79 8d       	ldd	r23, Y+25	; 0x19
    3d2a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3d2c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3d2e:	0e 94 ed 29 	call	0x53da	; 0x53da <__cmpsf2>
    3d32:	88 23       	and	r24, r24
    3d34:	1c f4       	brge	.+6      	; 0x3d3c <Lcd_4bit_enuInit+0x192>
		__ticks = 1;
    3d36:	81 e0       	ldi	r24, 0x01	; 1
    3d38:	88 a3       	std	Y+32, r24	; 0x20
    3d3a:	b2 c0       	rjmp	.+356    	; 0x3ea0 <Lcd_4bit_enuInit+0x2f6>
	else if (__tmp2 > 65535)
    3d3c:	20 e0       	ldi	r18, 0x00	; 0
    3d3e:	3f ef       	ldi	r19, 0xFF	; 255
    3d40:	4f e7       	ldi	r20, 0x7F	; 127
    3d42:	57 e4       	ldi	r21, 0x47	; 71
    3d44:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3d46:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3d48:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d4a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d4c:	0e 94 4c 2b 	call	0x5698	; 0x5698 <__gesf2>
    3d50:	18 16       	cp	r1, r24
    3d52:	0c f0       	brlt	.+2      	; 0x3d56 <Lcd_4bit_enuInit+0x1ac>
    3d54:	7b c0       	rjmp	.+246    	; 0x3e4c <Lcd_4bit_enuInit+0x2a2>
	{
		_delay_ms(__us / 1000.0);
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	4a e7       	ldi	r20, 0x7A	; 122
    3d5c:	54 e4       	ldi	r21, 0x44	; 68
    3d5e:	6e 81       	ldd	r22, Y+6	; 0x06
    3d60:	7f 81       	ldd	r23, Y+7	; 0x07
    3d62:	88 85       	ldd	r24, Y+8	; 0x08
    3d64:	99 85       	ldd	r25, Y+9	; 0x09
    3d66:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <__divsf3>
    3d6a:	dc 01       	movw	r26, r24
    3d6c:	cb 01       	movw	r24, r22
    3d6e:	89 a3       	std	Y+33, r24	; 0x21
    3d70:	9a a3       	std	Y+34, r25	; 0x22
    3d72:	ab a3       	std	Y+35, r26	; 0x23
    3d74:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3d76:	20 e0       	ldi	r18, 0x00	; 0
    3d78:	30 e0       	ldi	r19, 0x00	; 0
    3d7a:	4a e7       	ldi	r20, 0x7A	; 122
    3d7c:	55 e4       	ldi	r21, 0x45	; 69
    3d7e:	69 a1       	ldd	r22, Y+33	; 0x21
    3d80:	7a a1       	ldd	r23, Y+34	; 0x22
    3d82:	8b a1       	ldd	r24, Y+35	; 0x23
    3d84:	9c a1       	ldd	r25, Y+36	; 0x24
    3d86:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    3d8a:	dc 01       	movw	r26, r24
    3d8c:	cb 01       	movw	r24, r22
    3d8e:	8d a3       	std	Y+37, r24	; 0x25
    3d90:	9e a3       	std	Y+38, r25	; 0x26
    3d92:	af a3       	std	Y+39, r26	; 0x27
    3d94:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    3d96:	20 e0       	ldi	r18, 0x00	; 0
    3d98:	30 e0       	ldi	r19, 0x00	; 0
    3d9a:	40 e8       	ldi	r20, 0x80	; 128
    3d9c:	5f e3       	ldi	r21, 0x3F	; 63
    3d9e:	6d a1       	ldd	r22, Y+37	; 0x25
    3da0:	7e a1       	ldd	r23, Y+38	; 0x26
    3da2:	8f a1       	ldd	r24, Y+39	; 0x27
    3da4:	98 a5       	ldd	r25, Y+40	; 0x28
    3da6:	0e 94 ed 29 	call	0x53da	; 0x53da <__cmpsf2>
    3daa:	88 23       	and	r24, r24
    3dac:	2c f4       	brge	.+10     	; 0x3db8 <Lcd_4bit_enuInit+0x20e>
		__ticks = 1;
    3dae:	81 e0       	ldi	r24, 0x01	; 1
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	9a a7       	std	Y+42, r25	; 0x2a
    3db4:	89 a7       	std	Y+41, r24	; 0x29
    3db6:	3f c0       	rjmp	.+126    	; 0x3e36 <Lcd_4bit_enuInit+0x28c>
	else if (__tmp > 65535)
    3db8:	20 e0       	ldi	r18, 0x00	; 0
    3dba:	3f ef       	ldi	r19, 0xFF	; 255
    3dbc:	4f e7       	ldi	r20, 0x7F	; 127
    3dbe:	57 e4       	ldi	r21, 0x47	; 71
    3dc0:	6d a1       	ldd	r22, Y+37	; 0x25
    3dc2:	7e a1       	ldd	r23, Y+38	; 0x26
    3dc4:	8f a1       	ldd	r24, Y+39	; 0x27
    3dc6:	98 a5       	ldd	r25, Y+40	; 0x28
    3dc8:	0e 94 4c 2b 	call	0x5698	; 0x5698 <__gesf2>
    3dcc:	18 16       	cp	r1, r24
    3dce:	4c f5       	brge	.+82     	; 0x3e22 <Lcd_4bit_enuInit+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dd0:	20 e0       	ldi	r18, 0x00	; 0
    3dd2:	30 e0       	ldi	r19, 0x00	; 0
    3dd4:	40 e2       	ldi	r20, 0x20	; 32
    3dd6:	51 e4       	ldi	r21, 0x41	; 65
    3dd8:	69 a1       	ldd	r22, Y+33	; 0x21
    3dda:	7a a1       	ldd	r23, Y+34	; 0x22
    3ddc:	8b a1       	ldd	r24, Y+35	; 0x23
    3dde:	9c a1       	ldd	r25, Y+36	; 0x24
    3de0:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    3de4:	dc 01       	movw	r26, r24
    3de6:	cb 01       	movw	r24, r22
    3de8:	bc 01       	movw	r22, r24
    3dea:	cd 01       	movw	r24, r26
    3dec:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    3df0:	dc 01       	movw	r26, r24
    3df2:	cb 01       	movw	r24, r22
    3df4:	9a a7       	std	Y+42, r25	; 0x2a
    3df6:	89 a7       	std	Y+41, r24	; 0x29
    3df8:	0f c0       	rjmp	.+30     	; 0x3e18 <Lcd_4bit_enuInit+0x26e>
    3dfa:	80 e9       	ldi	r24, 0x90	; 144
    3dfc:	91 e0       	ldi	r25, 0x01	; 1
    3dfe:	9c a7       	std	Y+44, r25	; 0x2c
    3e00:	8b a7       	std	Y+43, r24	; 0x2b
    3e02:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e04:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e06:	01 97       	sbiw	r24, 0x01	; 1
    3e08:	f1 f7       	brne	.-4      	; 0x3e06 <Lcd_4bit_enuInit+0x25c>
    3e0a:	9c a7       	std	Y+44, r25	; 0x2c
    3e0c:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e0e:	89 a5       	ldd	r24, Y+41	; 0x29
    3e10:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e12:	01 97       	sbiw	r24, 0x01	; 1
    3e14:	9a a7       	std	Y+42, r25	; 0x2a
    3e16:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e18:	89 a5       	ldd	r24, Y+41	; 0x29
    3e1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e1c:	89 2b       	or	r24, r25
    3e1e:	69 f7       	brne	.-38     	; 0x3dfa <Lcd_4bit_enuInit+0x250>
    3e20:	3f c0       	rjmp	.+126    	; 0x3ea0 <Lcd_4bit_enuInit+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e22:	6d a1       	ldd	r22, Y+37	; 0x25
    3e24:	7e a1       	ldd	r23, Y+38	; 0x26
    3e26:	8f a1       	ldd	r24, Y+39	; 0x27
    3e28:	98 a5       	ldd	r25, Y+40	; 0x28
    3e2a:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    3e2e:	dc 01       	movw	r26, r24
    3e30:	cb 01       	movw	r24, r22
    3e32:	9a a7       	std	Y+42, r25	; 0x2a
    3e34:	89 a7       	std	Y+41, r24	; 0x29
    3e36:	89 a5       	ldd	r24, Y+41	; 0x29
    3e38:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e3a:	9e a7       	std	Y+46, r25	; 0x2e
    3e3c:	8d a7       	std	Y+45, r24	; 0x2d
    3e3e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3e40:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e42:	01 97       	sbiw	r24, 0x01	; 1
    3e44:	f1 f7       	brne	.-4      	; 0x3e42 <Lcd_4bit_enuInit+0x298>
    3e46:	9e a7       	std	Y+46, r25	; 0x2e
    3e48:	8d a7       	std	Y+45, r24	; 0x2d
    3e4a:	2a c0       	rjmp	.+84     	; 0x3ea0 <Lcd_4bit_enuInit+0x2f6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	4f e7       	ldi	r20, 0x7F	; 127
    3e52:	53 e4       	ldi	r21, 0x43	; 67
    3e54:	68 8d       	ldd	r22, Y+24	; 0x18
    3e56:	79 8d       	ldd	r23, Y+25	; 0x19
    3e58:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3e5a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3e5c:	0e 94 4c 2b 	call	0x5698	; 0x5698 <__gesf2>
    3e60:	18 16       	cp	r1, r24
    3e62:	ac f4       	brge	.+42     	; 0x3e8e <Lcd_4bit_enuInit+0x2e4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    3e64:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3e66:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3e68:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e6a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3e6c:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    3e70:	dc 01       	movw	r26, r24
    3e72:	cb 01       	movw	r24, r22
    3e74:	98 ab       	std	Y+48, r25	; 0x30
    3e76:	8f a7       	std	Y+47, r24	; 0x2f
    3e78:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e7a:	98 a9       	ldd	r25, Y+48	; 0x30
    3e7c:	9a ab       	std	Y+50, r25	; 0x32
    3e7e:	89 ab       	std	Y+49, r24	; 0x31
    3e80:	89 a9       	ldd	r24, Y+49	; 0x31
    3e82:	9a a9       	ldd	r25, Y+50	; 0x32
    3e84:	01 97       	sbiw	r24, 0x01	; 1
    3e86:	f1 f7       	brne	.-4      	; 0x3e84 <Lcd_4bit_enuInit+0x2da>
    3e88:	9a ab       	std	Y+50, r25	; 0x32
    3e8a:	89 ab       	std	Y+49, r24	; 0x31
    3e8c:	0f c0       	rjmp	.+30     	; 0x3eac <Lcd_4bit_enuInit+0x302>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3e8e:	68 8d       	ldd	r22, Y+24	; 0x18
    3e90:	79 8d       	ldd	r23, Y+25	; 0x19
    3e92:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3e94:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3e96:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	88 a3       	std	Y+32, r24	; 0x20
    3ea0:	88 a1       	ldd	r24, Y+32	; 0x20
    3ea2:	8b ab       	std	Y+51, r24	; 0x33
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3ea4:	8b a9       	ldd	r24, Y+51	; 0x33
    3ea6:	8a 95       	dec	r24
    3ea8:	f1 f7       	brne	.-4      	; 0x3ea6 <Lcd_4bit_enuInit+0x2fc>
    3eaa:	8b ab       	std	Y+51, r24	; 0x33
			       _delay_us(150);
			   Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    3eac:	8e ad       	ldd	r24, Y+62	; 0x3e
    3eae:	9f ad       	ldd	r25, Y+63	; 0x3f
    3eb0:	68 e3       	ldi	r22, 0x38	; 56
    3eb2:	0e 94 02 20 	call	0x4004	; 0x4004 <Lcd_4bit_enuSendCommand>
    3eb6:	89 83       	std	Y+1, r24	; 0x01

			       /* This is optional */
				   Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CLEAR_COMMAND);
    3eb8:	8e ad       	ldd	r24, Y+62	; 0x3e
    3eba:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ebc:	61 e0       	ldi	r22, 0x01	; 1
    3ebe:	0e 94 02 20 	call	0x4004	; 0x4004 <Lcd_4bit_enuSendCommand>
    3ec2:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CURSOR_HOME);
    3ec4:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ec6:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ec8:	62 e0       	ldi	r22, 0x02	; 2
    3eca:	0e 94 02 20 	call	0x4004	; 0x4004 <Lcd_4bit_enuSendCommand>
    3ece:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_ENTRY_MODE_INC_SHIFT_OFF);
    3ed0:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ed2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ed4:	66 e0       	ldi	r22, 0x06	; 6
    3ed6:	0e 94 02 20 	call	0x4004	; 0x4004 <Lcd_4bit_enuSendCommand>
    3eda:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    3edc:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ede:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ee0:	6c e0       	ldi	r22, 0x0C	; 12
    3ee2:	0e 94 02 20 	call	0x4004	; 0x4004 <Lcd_4bit_enuSendCommand>
    3ee6:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_4_BIT_2_LINE_8_DOTS);
    3ee8:	8e ad       	ldd	r24, Y+62	; 0x3e
    3eea:	9f ad       	ldd	r25, Y+63	; 0x3f
    3eec:	68 e2       	ldi	r22, 0x28	; 40
    3eee:	0e 94 02 20 	call	0x4004	; 0x4004 <Lcd_4bit_enuSendCommand>
    3ef2:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd,0x80);
    3ef4:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ef6:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ef8:	60 e8       	ldi	r22, 0x80	; 128
    3efa:	0e 94 02 20 	call	0x4004	; 0x4004 <Lcd_4bit_enuSendCommand>
    3efe:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_CLEAR_COMMAND);
    3f00:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f02:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f04:	61 e0       	ldi	r22, 0x01	; 1
    3f06:	0e 94 02 20 	call	0x4004	; 0x4004 <Lcd_4bit_enuSendCommand>
    3f0a:	89 83       	std	Y+1, r24	; 0x01
    3f0c:	80 e0       	ldi	r24, 0x00	; 0
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	a0 ea       	ldi	r26, 0xA0	; 160
    3f12:	b0 e4       	ldi	r27, 0x40	; 64
    3f14:	8a 87       	std	Y+10, r24	; 0x0a
    3f16:	9b 87       	std	Y+11, r25	; 0x0b
    3f18:	ac 87       	std	Y+12, r26	; 0x0c
    3f1a:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3f1c:	20 e0       	ldi	r18, 0x00	; 0
    3f1e:	30 e0       	ldi	r19, 0x00	; 0
    3f20:	4a e7       	ldi	r20, 0x7A	; 122
    3f22:	55 e4       	ldi	r21, 0x45	; 69
    3f24:	6a 85       	ldd	r22, Y+10	; 0x0a
    3f26:	7b 85       	ldd	r23, Y+11	; 0x0b
    3f28:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f2a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f2c:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    3f30:	dc 01       	movw	r26, r24
    3f32:	cb 01       	movw	r24, r22
    3f34:	8e 87       	std	Y+14, r24	; 0x0e
    3f36:	9f 87       	std	Y+15, r25	; 0x0f
    3f38:	a8 8b       	std	Y+16, r26	; 0x10
    3f3a:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    3f3c:	20 e0       	ldi	r18, 0x00	; 0
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	40 e8       	ldi	r20, 0x80	; 128
    3f42:	5f e3       	ldi	r21, 0x3F	; 63
    3f44:	6e 85       	ldd	r22, Y+14	; 0x0e
    3f46:	7f 85       	ldd	r23, Y+15	; 0x0f
    3f48:	88 89       	ldd	r24, Y+16	; 0x10
    3f4a:	99 89       	ldd	r25, Y+17	; 0x11
    3f4c:	0e 94 ed 29 	call	0x53da	; 0x53da <__cmpsf2>
    3f50:	88 23       	and	r24, r24
    3f52:	2c f4       	brge	.+10     	; 0x3f5e <Lcd_4bit_enuInit+0x3b4>
		__ticks = 1;
    3f54:	81 e0       	ldi	r24, 0x01	; 1
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	9b 8b       	std	Y+19, r25	; 0x13
    3f5a:	8a 8b       	std	Y+18, r24	; 0x12
    3f5c:	3f c0       	rjmp	.+126    	; 0x3fdc <Lcd_4bit_enuInit+0x432>
	else if (__tmp > 65535)
    3f5e:	20 e0       	ldi	r18, 0x00	; 0
    3f60:	3f ef       	ldi	r19, 0xFF	; 255
    3f62:	4f e7       	ldi	r20, 0x7F	; 127
    3f64:	57 e4       	ldi	r21, 0x47	; 71
    3f66:	6e 85       	ldd	r22, Y+14	; 0x0e
    3f68:	7f 85       	ldd	r23, Y+15	; 0x0f
    3f6a:	88 89       	ldd	r24, Y+16	; 0x10
    3f6c:	99 89       	ldd	r25, Y+17	; 0x11
    3f6e:	0e 94 4c 2b 	call	0x5698	; 0x5698 <__gesf2>
    3f72:	18 16       	cp	r1, r24
    3f74:	4c f5       	brge	.+82     	; 0x3fc8 <Lcd_4bit_enuInit+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	40 e2       	ldi	r20, 0x20	; 32
    3f7c:	51 e4       	ldi	r21, 0x41	; 65
    3f7e:	6a 85       	ldd	r22, Y+10	; 0x0a
    3f80:	7b 85       	ldd	r23, Y+11	; 0x0b
    3f82:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f84:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f86:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    3f8a:	dc 01       	movw	r26, r24
    3f8c:	cb 01       	movw	r24, r22
    3f8e:	bc 01       	movw	r22, r24
    3f90:	cd 01       	movw	r24, r26
    3f92:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    3f96:	dc 01       	movw	r26, r24
    3f98:	cb 01       	movw	r24, r22
    3f9a:	9b 8b       	std	Y+19, r25	; 0x13
    3f9c:	8a 8b       	std	Y+18, r24	; 0x12
    3f9e:	0f c0       	rjmp	.+30     	; 0x3fbe <Lcd_4bit_enuInit+0x414>
    3fa0:	80 e9       	ldi	r24, 0x90	; 144
    3fa2:	91 e0       	ldi	r25, 0x01	; 1
    3fa4:	9d 8b       	std	Y+21, r25	; 0x15
    3fa6:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3fa8:	8c 89       	ldd	r24, Y+20	; 0x14
    3faa:	9d 89       	ldd	r25, Y+21	; 0x15
    3fac:	01 97       	sbiw	r24, 0x01	; 1
    3fae:	f1 f7       	brne	.-4      	; 0x3fac <Lcd_4bit_enuInit+0x402>
    3fb0:	9d 8b       	std	Y+21, r25	; 0x15
    3fb2:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fb4:	8a 89       	ldd	r24, Y+18	; 0x12
    3fb6:	9b 89       	ldd	r25, Y+19	; 0x13
    3fb8:	01 97       	sbiw	r24, 0x01	; 1
    3fba:	9b 8b       	std	Y+19, r25	; 0x13
    3fbc:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fbe:	8a 89       	ldd	r24, Y+18	; 0x12
    3fc0:	9b 89       	ldd	r25, Y+19	; 0x13
    3fc2:	89 2b       	or	r24, r25
    3fc4:	69 f7       	brne	.-38     	; 0x3fa0 <Lcd_4bit_enuInit+0x3f6>
    3fc6:	14 c0       	rjmp	.+40     	; 0x3ff0 <Lcd_4bit_enuInit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fc8:	6e 85       	ldd	r22, Y+14	; 0x0e
    3fca:	7f 85       	ldd	r23, Y+15	; 0x0f
    3fcc:	88 89       	ldd	r24, Y+16	; 0x10
    3fce:	99 89       	ldd	r25, Y+17	; 0x11
    3fd0:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    3fd4:	dc 01       	movw	r26, r24
    3fd6:	cb 01       	movw	r24, r22
    3fd8:	9b 8b       	std	Y+19, r25	; 0x13
    3fda:	8a 8b       	std	Y+18, r24	; 0x12
    3fdc:	8a 89       	ldd	r24, Y+18	; 0x12
    3fde:	9b 89       	ldd	r25, Y+19	; 0x13
    3fe0:	9f 8b       	std	Y+23, r25	; 0x17
    3fe2:	8e 8b       	std	Y+22, r24	; 0x16
    3fe4:	8e 89       	ldd	r24, Y+22	; 0x16
    3fe6:	9f 89       	ldd	r25, Y+23	; 0x17
    3fe8:	01 97       	sbiw	r24, 0x01	; 1
    3fea:	f1 f7       	brne	.-4      	; 0x3fe8 <Lcd_4bit_enuInit+0x43e>
    3fec:	9f 8b       	std	Y+23, r25	; 0x17
    3fee:	8e 8b       	std	Y+22, r24	; 0x16
	}




	return Loc_enuStatus;
    3ff0:	89 81       	ldd	r24, Y+1	; 0x01

}
    3ff2:	ef 96       	adiw	r28, 0x3f	; 63
    3ff4:	0f b6       	in	r0, 0x3f	; 63
    3ff6:	f8 94       	cli
    3ff8:	de bf       	out	0x3e, r29	; 62
    3ffa:	0f be       	out	0x3f, r0	; 63
    3ffc:	cd bf       	out	0x3d, r28	; 61
    3ffe:	df 91       	pop	r29
    4000:	cf 91       	pop	r28
    4002:	08 95       	ret

00004004 <Lcd_4bit_enuSendCommand>:


Lcd_ErrorStatusType Lcd_4bit_enuSendCommand(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Command){
    4004:	cf 93       	push	r28
    4006:	df 93       	push	r29
    4008:	00 d0       	rcall	.+0      	; 0x400a <Lcd_4bit_enuSendCommand+0x6>
    400a:	00 d0       	rcall	.+0      	; 0x400c <Lcd_4bit_enuSendCommand+0x8>
    400c:	1f 92       	push	r1
    400e:	cd b7       	in	r28, 0x3d	; 61
    4010:	de b7       	in	r29, 0x3e	; 62
    4012:	9c 83       	std	Y+4, r25	; 0x04
    4014:	8b 83       	std	Y+3, r24	; 0x03
    4016:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    4018:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioStatus = DIO_STATUS_OK;
    401a:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    401c:	8b 81       	ldd	r24, Y+3	; 0x03
    401e:	9c 81       	ldd	r25, Y+4	; 0x04
    4020:	89 2b       	or	r24, r25
    4022:	19 f4       	brne	.+6      	; 0x402a <Lcd_4bit_enuSendCommand+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    4024:	82 e0       	ldi	r24, 0x02	; 2
    4026:	89 83       	std	Y+1, r24	; 0x01
    4028:	22 c0       	rjmp	.+68     	; 0x406e <Lcd_4bit_enuSendCommand+0x6a>

		}
		else {

			Loc_enuDioStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin, DIO_LOW);
    402a:	8b 81       	ldd	r24, Y+3	; 0x03
    402c:	9c 81       	ldd	r25, Y+4	; 0x04
    402e:	fc 01       	movw	r30, r24
    4030:	84 81       	ldd	r24, Z+4	; 0x04
    4032:	60 e0       	ldi	r22, 0x00	; 0
    4034:	0e 94 64 18 	call	0x30c8	; 0x30c8 <Dio_enuWriteChannel>
    4038:	8a 83       	std	Y+2, r24	; 0x02
//			Loc_enuDioStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Command>>4) &0xF);  // higher nibble first
    403a:	8d 81       	ldd	r24, Y+5	; 0x05
    403c:	28 2f       	mov	r18, r24
    403e:	22 95       	swap	r18
    4040:	2f 70       	andi	r18, 0x0F	; 15
    4042:	8b 81       	ldd	r24, Y+3	; 0x03
    4044:	9c 81       	ldd	r25, Y+4	; 0x04
    4046:	62 2f       	mov	r22, r18
    4048:	0e 94 21 23 	call	0x4642	; 0x4642 <Lcd_4bit_enuSet4BitsOnPins>
    404c:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    404e:	8b 81       	ldd	r24, Y+3	; 0x03
    4050:	9c 81       	ldd	r25, Y+4	; 0x04
    4052:	0e 94 5f 23 	call	0x46be	; 0x46be <Lcd_4bit_enuSendEnableSignal>
    4056:	89 83       	std	Y+1, r24	; 0x01

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Command);  // lower nibble
    4058:	8b 81       	ldd	r24, Y+3	; 0x03
    405a:	9c 81       	ldd	r25, Y+4	; 0x04
    405c:	6d 81       	ldd	r22, Y+5	; 0x05
    405e:	0e 94 21 23 	call	0x4642	; 0x4642 <Lcd_4bit_enuSet4BitsOnPins>
    4062:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    4064:	8b 81       	ldd	r24, Y+3	; 0x03
    4066:	9c 81       	ldd	r25, Y+4	; 0x04
    4068:	0e 94 5f 23 	call	0x46be	; 0x46be <Lcd_4bit_enuSendEnableSignal>
    406c:	89 83       	std	Y+1, r24	; 0x01


		// 1111 0000


		return Loc_enuStatus;
    406e:	89 81       	ldd	r24, Y+1	; 0x01

}
    4070:	0f 90       	pop	r0
    4072:	0f 90       	pop	r0
    4074:	0f 90       	pop	r0
    4076:	0f 90       	pop	r0
    4078:	0f 90       	pop	r0
    407a:	df 91       	pop	r29
    407c:	cf 91       	pop	r28
    407e:	08 95       	ret

00004080 <Lcd_4bit_enuDisplayCharacter>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacter(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data){
    4080:	cf 93       	push	r28
    4082:	df 93       	push	r29
    4084:	00 d0       	rcall	.+0      	; 0x4086 <Lcd_4bit_enuDisplayCharacter+0x6>
    4086:	00 d0       	rcall	.+0      	; 0x4088 <Lcd_4bit_enuDisplayCharacter+0x8>
    4088:	cd b7       	in	r28, 0x3d	; 61
    408a:	de b7       	in	r29, 0x3e	; 62
    408c:	9b 83       	std	Y+3, r25	; 0x03
    408e:	8a 83       	std	Y+2, r24	; 0x02
    4090:	6c 83       	std	Y+4, r22	; 0x04

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    4092:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    4094:	8a 81       	ldd	r24, Y+2	; 0x02
    4096:	9b 81       	ldd	r25, Y+3	; 0x03
    4098:	89 2b       	or	r24, r25
    409a:	19 f4       	brne	.+6      	; 0x40a2 <Lcd_4bit_enuDisplayCharacter+0x22>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    409c:	82 e0       	ldi	r24, 0x02	; 2
    409e:	89 83       	std	Y+1, r24	; 0x01
    40a0:	22 c0       	rjmp	.+68     	; 0x40e6 <Lcd_4bit_enuDisplayCharacter+0x66>

		}
		else{


				   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    40a2:	8a 81       	ldd	r24, Y+2	; 0x02
    40a4:	9b 81       	ldd	r25, Y+3	; 0x03
    40a6:	fc 01       	movw	r30, r24
    40a8:	84 81       	ldd	r24, Z+4	; 0x04
    40aa:	61 e0       	ldi	r22, 0x01	; 1
    40ac:	0e 94 64 18 	call	0x30c8	; 0x30c8 <Dio_enuWriteChannel>
    40b0:	89 83       	std	Y+1, r24	; 0x01
//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    40b2:	8c 81       	ldd	r24, Y+4	; 0x04
    40b4:	28 2f       	mov	r18, r24
    40b6:	22 95       	swap	r18
    40b8:	2f 70       	andi	r18, 0x0F	; 15
    40ba:	8a 81       	ldd	r24, Y+2	; 0x02
    40bc:	9b 81       	ldd	r25, Y+3	; 0x03
    40be:	62 2f       	mov	r22, r18
    40c0:	0e 94 21 23 	call	0x4642	; 0x4642 <Lcd_4bit_enuSet4BitsOnPins>
    40c4:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    40c6:	8a 81       	ldd	r24, Y+2	; 0x02
    40c8:	9b 81       	ldd	r25, Y+3	; 0x03
    40ca:	0e 94 5f 23 	call	0x46be	; 0x46be <Lcd_4bit_enuSendEnableSignal>
    40ce:	89 83       	std	Y+1, r24	; 0x01

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    40d0:	8a 81       	ldd	r24, Y+2	; 0x02
    40d2:	9b 81       	ldd	r25, Y+3	; 0x03
    40d4:	6c 81       	ldd	r22, Y+4	; 0x04
    40d6:	0e 94 21 23 	call	0x4642	; 0x4642 <Lcd_4bit_enuSet4BitsOnPins>
    40da:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    40dc:	8a 81       	ldd	r24, Y+2	; 0x02
    40de:	9b 81       	ldd	r25, Y+3	; 0x03
    40e0:	0e 94 5f 23 	call	0x46be	; 0x46be <Lcd_4bit_enuSendEnableSignal>
    40e4:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    40e6:	89 81       	ldd	r24, Y+1	; 0x01

}
    40e8:	0f 90       	pop	r0
    40ea:	0f 90       	pop	r0
    40ec:	0f 90       	pop	r0
    40ee:	0f 90       	pop	r0
    40f0:	df 91       	pop	r29
    40f2:	cf 91       	pop	r28
    40f4:	08 95       	ret

000040f6 <Lcd_4bit_enuDisplayCharacterWithPosition>:


Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacterWithPosition(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data, u8 Copy_u8Row, u8 Copy_u8Col){
    40f6:	cf 93       	push	r28
    40f8:	df 93       	push	r29
    40fa:	00 d0       	rcall	.+0      	; 0x40fc <Lcd_4bit_enuDisplayCharacterWithPosition+0x6>
    40fc:	00 d0       	rcall	.+0      	; 0x40fe <Lcd_4bit_enuDisplayCharacterWithPosition+0x8>
    40fe:	00 d0       	rcall	.+0      	; 0x4100 <Lcd_4bit_enuDisplayCharacterWithPosition+0xa>
    4100:	cd b7       	in	r28, 0x3d	; 61
    4102:	de b7       	in	r29, 0x3e	; 62
    4104:	9b 83       	std	Y+3, r25	; 0x03
    4106:	8a 83       	std	Y+2, r24	; 0x02
    4108:	6c 83       	std	Y+4, r22	; 0x04
    410a:	4d 83       	std	Y+5, r20	; 0x05
    410c:	2e 83       	std	Y+6, r18	; 0x06
	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    410e:	19 82       	std	Y+1, r1	; 0x01
			if( NULL == Address_Lcd){
    4110:	8a 81       	ldd	r24, Y+2	; 0x02
    4112:	9b 81       	ldd	r25, Y+3	; 0x03
    4114:	89 2b       	or	r24, r25
    4116:	19 f4       	brne	.+6      	; 0x411e <Lcd_4bit_enuDisplayCharacterWithPosition+0x28>
				Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    4118:	82 e0       	ldi	r24, 0x02	; 2
    411a:	89 83       	std	Y+1, r24	; 0x01
    411c:	29 c0       	rjmp	.+82     	; 0x4170 <Lcd_4bit_enuDisplayCharacterWithPosition+0x7a>

			}
			else{


					    Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    411e:	8a 81       	ldd	r24, Y+2	; 0x02
    4120:	9b 81       	ldd	r25, Y+3	; 0x03
    4122:	4e 81       	ldd	r20, Y+6	; 0x06
    4124:	6d 81       	ldd	r22, Y+5	; 0x05
    4126:	0e 94 64 21 	call	0x42c8	; 0x42c8 <Lcd_4bit_enuGoToXY>
    412a:	89 83       	std	Y+1, r24	; 0x01
					   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    412c:	8a 81       	ldd	r24, Y+2	; 0x02
    412e:	9b 81       	ldd	r25, Y+3	; 0x03
    4130:	fc 01       	movw	r30, r24
    4132:	84 81       	ldd	r24, Z+4	; 0x04
    4134:	61 e0       	ldi	r22, 0x01	; 1
    4136:	0e 94 64 18 	call	0x30c8	; 0x30c8 <Dio_enuWriteChannel>
    413a:	89 83       	std	Y+1, r24	; 0x01
	//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    413c:	8c 81       	ldd	r24, Y+4	; 0x04
    413e:	28 2f       	mov	r18, r24
    4140:	22 95       	swap	r18
    4142:	2f 70       	andi	r18, 0x0F	; 15
    4144:	8a 81       	ldd	r24, Y+2	; 0x02
    4146:	9b 81       	ldd	r25, Y+3	; 0x03
    4148:	62 2f       	mov	r22, r18
    414a:	0e 94 21 23 	call	0x4642	; 0x4642 <Lcd_4bit_enuSet4BitsOnPins>
    414e:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    4150:	8a 81       	ldd	r24, Y+2	; 0x02
    4152:	9b 81       	ldd	r25, Y+3	; 0x03
    4154:	0e 94 5f 23 	call	0x46be	; 0x46be <Lcd_4bit_enuSendEnableSignal>
    4158:	89 83       	std	Y+1, r24	; 0x01

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    415a:	8a 81       	ldd	r24, Y+2	; 0x02
    415c:	9b 81       	ldd	r25, Y+3	; 0x03
    415e:	6c 81       	ldd	r22, Y+4	; 0x04
    4160:	0e 94 21 23 	call	0x4642	; 0x4642 <Lcd_4bit_enuSet4BitsOnPins>
    4164:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    4166:	8a 81       	ldd	r24, Y+2	; 0x02
    4168:	9b 81       	ldd	r25, Y+3	; 0x03
    416a:	0e 94 5f 23 	call	0x46be	; 0x46be <Lcd_4bit_enuSendEnableSignal>
    416e:	89 83       	std	Y+1, r24	; 0x01
			}




			return Loc_enuStatus;
    4170:	89 81       	ldd	r24, Y+1	; 0x01
}
    4172:	26 96       	adiw	r28, 0x06	; 6
    4174:	0f b6       	in	r0, 0x3f	; 63
    4176:	f8 94       	cli
    4178:	de bf       	out	0x3e, r29	; 62
    417a:	0f be       	out	0x3f, r0	; 63
    417c:	cd bf       	out	0x3d, r28	; 61
    417e:	df 91       	pop	r29
    4180:	cf 91       	pop	r28
    4182:	08 95       	ret

00004184 <Lcd_4bit_enuDisplayStringWithPosition>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayStringWithPosition(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String, u8 Copy_u8Row, u8 Copy_u8Col){
    4184:	cf 93       	push	r28
    4186:	df 93       	push	r29
    4188:	cd b7       	in	r28, 0x3d	; 61
    418a:	de b7       	in	r29, 0x3e	; 62
    418c:	28 97       	sbiw	r28, 0x08	; 8
    418e:	0f b6       	in	r0, 0x3f	; 63
    4190:	f8 94       	cli
    4192:	de bf       	out	0x3e, r29	; 62
    4194:	0f be       	out	0x3f, r0	; 63
    4196:	cd bf       	out	0x3d, r28	; 61
    4198:	9c 83       	std	Y+4, r25	; 0x04
    419a:	8b 83       	std	Y+3, r24	; 0x03
    419c:	7e 83       	std	Y+6, r23	; 0x06
    419e:	6d 83       	std	Y+5, r22	; 0x05
    41a0:	4f 83       	std	Y+7, r20	; 0x07
    41a2:	28 87       	std	Y+8, r18	; 0x08

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    41a4:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    41a6:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
    41a8:	8b 81       	ldd	r24, Y+3	; 0x03
    41aa:	9c 81       	ldd	r25, Y+4	; 0x04
    41ac:	89 2b       	or	r24, r25
    41ae:	21 f0       	breq	.+8      	; 0x41b8 <Lcd_4bit_enuDisplayStringWithPosition+0x34>
    41b0:	8d 81       	ldd	r24, Y+5	; 0x05
    41b2:	9e 81       	ldd	r25, Y+6	; 0x06
    41b4:	89 2b       	or	r24, r25
    41b6:	19 f4       	brne	.+6      	; 0x41be <Lcd_4bit_enuDisplayStringWithPosition+0x3a>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    41b8:	82 e0       	ldi	r24, 0x02	; 2
    41ba:	89 83       	std	Y+1, r24	; 0x01
    41bc:	25 c0       	rjmp	.+74     	; 0x4208 <Lcd_4bit_enuDisplayStringWithPosition+0x84>

		}
		else{
			Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    41be:	8b 81       	ldd	r24, Y+3	; 0x03
    41c0:	9c 81       	ldd	r25, Y+4	; 0x04
    41c2:	48 85       	ldd	r20, Y+8	; 0x08
    41c4:	6f 81       	ldd	r22, Y+7	; 0x07
    41c6:	0e 94 64 21 	call	0x42c8	; 0x42c8 <Lcd_4bit_enuGoToXY>
    41ca:	89 83       	std	Y+1, r24	; 0x01
			while(Address_pu8String[Loc_u8Counter] !=0){
    41cc:	12 c0       	rjmp	.+36     	; 0x41f2 <Lcd_4bit_enuDisplayStringWithPosition+0x6e>
			            Loc_enuStatus = Lcd_4bit_enuDisplayCharacter(Address_Lcd,Address_pu8String[Loc_u8Counter]);
    41ce:	8a 81       	ldd	r24, Y+2	; 0x02
    41d0:	88 2f       	mov	r24, r24
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	2d 81       	ldd	r18, Y+5	; 0x05
    41d6:	3e 81       	ldd	r19, Y+6	; 0x06
    41d8:	82 0f       	add	r24, r18
    41da:	93 1f       	adc	r25, r19
    41dc:	fc 01       	movw	r30, r24
    41de:	20 81       	ld	r18, Z
    41e0:	8b 81       	ldd	r24, Y+3	; 0x03
    41e2:	9c 81       	ldd	r25, Y+4	; 0x04
    41e4:	62 2f       	mov	r22, r18
    41e6:	0e 94 40 20 	call	0x4080	; 0x4080 <Lcd_4bit_enuDisplayCharacter>
    41ea:	89 83       	std	Y+1, r24	; 0x01
			            Loc_u8Counter++;
    41ec:	8a 81       	ldd	r24, Y+2	; 0x02
    41ee:	8f 5f       	subi	r24, 0xFF	; 255
    41f0:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{
			Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
			while(Address_pu8String[Loc_u8Counter] !=0){
    41f2:	8a 81       	ldd	r24, Y+2	; 0x02
    41f4:	88 2f       	mov	r24, r24
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	2d 81       	ldd	r18, Y+5	; 0x05
    41fa:	3e 81       	ldd	r19, Y+6	; 0x06
    41fc:	82 0f       	add	r24, r18
    41fe:	93 1f       	adc	r25, r19
    4200:	fc 01       	movw	r30, r24
    4202:	80 81       	ld	r24, Z
    4204:	88 23       	and	r24, r24
    4206:	19 f7       	brne	.-58     	; 0x41ce <Lcd_4bit_enuDisplayStringWithPosition+0x4a>
		}




		return Loc_enuStatus;
    4208:	89 81       	ldd	r24, Y+1	; 0x01

}
    420a:	28 96       	adiw	r28, 0x08	; 8
    420c:	0f b6       	in	r0, 0x3f	; 63
    420e:	f8 94       	cli
    4210:	de bf       	out	0x3e, r29	; 62
    4212:	0f be       	out	0x3f, r0	; 63
    4214:	cd bf       	out	0x3d, r28	; 61
    4216:	df 91       	pop	r29
    4218:	cf 91       	pop	r28
    421a:	08 95       	ret

0000421c <Lcd_4bit_enuCreateCustomCharacter>:

Lcd_ErrorStatusType Lcd_4bit_enuCreateCustomCharacter(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8CustomCharacter, u8 Copy_u8MemoryIndex){
    421c:	cf 93       	push	r28
    421e:	df 93       	push	r29
    4220:	cd b7       	in	r28, 0x3d	; 61
    4222:	de b7       	in	r29, 0x3e	; 62
    4224:	27 97       	sbiw	r28, 0x07	; 7
    4226:	0f b6       	in	r0, 0x3f	; 63
    4228:	f8 94       	cli
    422a:	de bf       	out	0x3e, r29	; 62
    422c:	0f be       	out	0x3f, r0	; 63
    422e:	cd bf       	out	0x3d, r28	; 61
    4230:	9c 83       	std	Y+4, r25	; 0x04
    4232:	8b 83       	std	Y+3, r24	; 0x03
    4234:	7e 83       	std	Y+6, r23	; 0x06
    4236:	6d 83       	std	Y+5, r22	; 0x05
    4238:	4f 83       	std	Y+7, r20	; 0x07

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    423a:	19 82       	std	Y+1, r1	; 0x01
	u8	Loc_u8Counter =ZERO_VALUE;
    423c:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8CustomCharacter)){
    423e:	8b 81       	ldd	r24, Y+3	; 0x03
    4240:	9c 81       	ldd	r25, Y+4	; 0x04
    4242:	89 2b       	or	r24, r25
    4244:	21 f0       	breq	.+8      	; 0x424e <Lcd_4bit_enuCreateCustomCharacter+0x32>
    4246:	8d 81       	ldd	r24, Y+5	; 0x05
    4248:	9e 81       	ldd	r25, Y+6	; 0x06
    424a:	89 2b       	or	r24, r25
    424c:	19 f4       	brne	.+6      	; 0x4254 <Lcd_4bit_enuCreateCustomCharacter+0x38>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    424e:	82 e0       	ldi	r24, 0x02	; 2
    4250:	89 83       	std	Y+1, r24	; 0x01
    4252:	30 c0       	rjmp	.+96     	; 0x42b4 <Lcd_4bit_enuCreateCustomCharacter+0x98>

		}
		else if (Copy_u8MemoryIndex> LCD_MAX_INDEX_OF_CUSTOM_CHAR){
    4254:	8f 81       	ldd	r24, Y+7	; 0x07
    4256:	88 30       	cpi	r24, 0x08	; 8
    4258:	18 f0       	brcs	.+6      	; 0x4260 <Lcd_4bit_enuCreateCustomCharacter+0x44>
			Loc_enuStatus = LCD_STATUS_WRONG_CUSTOM_CHAR_INDEX;
    425a:	83 e0       	ldi	r24, 0x03	; 3
    425c:	89 83       	std	Y+1, r24	; 0x01
    425e:	2a c0       	rjmp	.+84     	; 0x42b4 <Lcd_4bit_enuCreateCustomCharacter+0x98>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));
    4260:	8f 81       	ldd	r24, Y+7	; 0x07
    4262:	88 2f       	mov	r24, r24
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	08 96       	adiw	r24, 0x08	; 8
    4268:	28 2f       	mov	r18, r24
    426a:	22 0f       	add	r18, r18
    426c:	22 0f       	add	r18, r18
    426e:	22 0f       	add	r18, r18
    4270:	8b 81       	ldd	r24, Y+3	; 0x03
    4272:	9c 81       	ldd	r25, Y+4	; 0x04
    4274:	62 2f       	mov	r22, r18
    4276:	0e 94 02 20 	call	0x4004	; 0x4004 <Lcd_4bit_enuSendCommand>
    427a:	89 83       	std	Y+1, r24	; 0x01

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    427c:	1a 82       	std	Y+2, r1	; 0x02
    427e:	11 c0       	rjmp	.+34     	; 0x42a2 <Lcd_4bit_enuCreateCustomCharacter+0x86>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);
    4280:	8a 81       	ldd	r24, Y+2	; 0x02
    4282:	88 2f       	mov	r24, r24
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	2d 81       	ldd	r18, Y+5	; 0x05
    4288:	3e 81       	ldd	r19, Y+6	; 0x06
    428a:	82 0f       	add	r24, r18
    428c:	93 1f       	adc	r25, r19
    428e:	fc 01       	movw	r30, r24
    4290:	20 81       	ld	r18, Z
    4292:	8b 81       	ldd	r24, Y+3	; 0x03
    4294:	9c 81       	ldd	r25, Y+4	; 0x04
    4296:	62 2f       	mov	r22, r18
    4298:	0e 94 40 20 	call	0x4080	; 0x4080 <Lcd_4bit_enuDisplayCharacter>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    429c:	8a 81       	ldd	r24, Y+2	; 0x02
    429e:	8f 5f       	subi	r24, 0xFF	; 255
    42a0:	8a 83       	std	Y+2, r24	; 0x02
    42a2:	8a 81       	ldd	r24, Y+2	; 0x02
    42a4:	88 30       	cpi	r24, 0x08	; 8
    42a6:	60 f3       	brcs	.-40     	; 0x4280 <Lcd_4bit_enuCreateCustomCharacter+0x64>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);

			        Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,0x80);
    42a8:	8b 81       	ldd	r24, Y+3	; 0x03
    42aa:	9c 81       	ldd	r25, Y+4	; 0x04
    42ac:	60 e8       	ldi	r22, 0x80	; 128
    42ae:	0e 94 02 20 	call	0x4004	; 0x4004 <Lcd_4bit_enuSendCommand>
    42b2:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    42b4:	89 81       	ldd	r24, Y+1	; 0x01

}
    42b6:	27 96       	adiw	r28, 0x07	; 7
    42b8:	0f b6       	in	r0, 0x3f	; 63
    42ba:	f8 94       	cli
    42bc:	de bf       	out	0x3e, r29	; 62
    42be:	0f be       	out	0x3f, r0	; 63
    42c0:	cd bf       	out	0x3d, r28	; 61
    42c2:	df 91       	pop	r29
    42c4:	cf 91       	pop	r28
    42c6:	08 95       	ret

000042c8 <Lcd_4bit_enuGoToXY>:

Lcd_ErrorStatusType Lcd_4bit_enuGoToXY(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Row, u8 Copy_u8Col){
    42c8:	cf 93       	push	r28
    42ca:	df 93       	push	r29
    42cc:	00 d0       	rcall	.+0      	; 0x42ce <Lcd_4bit_enuGoToXY+0x6>
    42ce:	00 d0       	rcall	.+0      	; 0x42d0 <Lcd_4bit_enuGoToXY+0x8>
    42d0:	1f 92       	push	r1
    42d2:	cd b7       	in	r28, 0x3d	; 61
    42d4:	de b7       	in	r29, 0x3e	; 62
    42d6:	9b 83       	std	Y+3, r25	; 0x03
    42d8:	8a 83       	std	Y+2, r24	; 0x02
    42da:	6c 83       	std	Y+4, r22	; 0x04
    42dc:	4d 83       	std	Y+5, r20	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    42de:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    42e0:	8a 81       	ldd	r24, Y+2	; 0x02
    42e2:	9b 81       	ldd	r25, Y+3	; 0x03
    42e4:	89 2b       	or	r24, r25
    42e6:	19 f4       	brne	.+6      	; 0x42ee <Lcd_4bit_enuGoToXY+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    42e8:	82 e0       	ldi	r24, 0x02	; 2
    42ea:	89 83       	std	Y+1, r24	; 0x01
    42ec:	56 c0       	rjmp	.+172    	; 0x439a <Lcd_4bit_enuGoToXY+0xd2>

		}
		else if (Copy_u8Row > LCD_ROW_NUMBERS){
    42ee:	8c 81       	ldd	r24, Y+4	; 0x04
    42f0:	85 30       	cpi	r24, 0x05	; 5
    42f2:	18 f0       	brcs	.+6      	; 0x42fa <Lcd_4bit_enuGoToXY+0x32>
			Loc_enuStatus = LCD_STATUS_WRONG_ROW_INDEX;
    42f4:	85 e0       	ldi	r24, 0x05	; 5
    42f6:	89 83       	std	Y+1, r24	; 0x01
    42f8:	50 c0       	rjmp	.+160    	; 0x439a <Lcd_4bit_enuGoToXY+0xd2>
		}

		else if (Copy_u8Col > LCD_COL_NUMBERS){
    42fa:	8d 81       	ldd	r24, Y+5	; 0x05
    42fc:	85 31       	cpi	r24, 0x15	; 21
    42fe:	18 f0       	brcs	.+6      	; 0x4306 <Lcd_4bit_enuGoToXY+0x3e>
			Loc_enuStatus = LCD_STATUS_WRONG_COL_INDEX;
    4300:	84 e0       	ldi	r24, 0x04	; 4
    4302:	89 83       	std	Y+1, r24	; 0x01
    4304:	4a c0       	rjmp	.+148    	; 0x439a <Lcd_4bit_enuGoToXY+0xd2>
		}
		else{

			/* decrement col because use it as row1 col 1 which means col 0*/
			Copy_u8Col--;
    4306:	8d 81       	ldd	r24, Y+5	; 0x05
    4308:	81 50       	subi	r24, 0x01	; 1
    430a:	8d 83       	std	Y+5, r24	; 0x05

			        switch(Copy_u8Row){
    430c:	8c 81       	ldd	r24, Y+4	; 0x04
    430e:	88 2f       	mov	r24, r24
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	82 30       	cpi	r24, 0x02	; 2
    4314:	91 05       	cpc	r25, r1
    4316:	c9 f0       	breq	.+50     	; 0x434a <Lcd_4bit_enuGoToXY+0x82>
    4318:	83 30       	cpi	r24, 0x03	; 3
    431a:	91 05       	cpc	r25, r1
    431c:	1c f4       	brge	.+6      	; 0x4324 <Lcd_4bit_enuGoToXY+0x5c>
    431e:	01 97       	sbiw	r24, 0x01	; 1
    4320:	39 f0       	breq	.+14     	; 0x4330 <Lcd_4bit_enuGoToXY+0x68>
    4322:	3a c0       	rjmp	.+116    	; 0x4398 <Lcd_4bit_enuGoToXY+0xd0>
    4324:	83 30       	cpi	r24, 0x03	; 3
    4326:	91 05       	cpc	r25, r1
    4328:	e9 f0       	breq	.+58     	; 0x4364 <Lcd_4bit_enuGoToXY+0x9c>
    432a:	04 97       	sbiw	r24, 0x04	; 4
    432c:	41 f1       	breq	.+80     	; 0x437e <Lcd_4bit_enuGoToXY+0xb6>
    432e:	34 c0       	rjmp	.+104    	; 0x4398 <Lcd_4bit_enuGoToXY+0xd0>

			            case LCD_ROW1:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x80+Copy_u8Col));
    4330:	8d 81       	ldd	r24, Y+5	; 0x05
    4332:	20 e8       	ldi	r18, 0x80	; 128
    4334:	28 0f       	add	r18, r24
    4336:	8a 81       	ldd	r24, Y+2	; 0x02
    4338:	9b 81       	ldd	r25, Y+3	; 0x03
    433a:	62 2f       	mov	r22, r18
    433c:	0e 94 02 20 	call	0x4004	; 0x4004 <Lcd_4bit_enuSendCommand>
    4340:	98 2f       	mov	r25, r24
    4342:	89 81       	ldd	r24, Y+1	; 0x01
    4344:	89 23       	and	r24, r25
    4346:	89 83       	std	Y+1, r24	; 0x01
			                break;
    4348:	28 c0       	rjmp	.+80     	; 0x439a <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW2:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xc0+Copy_u8Col));
    434a:	8d 81       	ldd	r24, Y+5	; 0x05
    434c:	20 ec       	ldi	r18, 0xC0	; 192
    434e:	28 0f       	add	r18, r24
    4350:	8a 81       	ldd	r24, Y+2	; 0x02
    4352:	9b 81       	ldd	r25, Y+3	; 0x03
    4354:	62 2f       	mov	r22, r18
    4356:	0e 94 02 20 	call	0x4004	; 0x4004 <Lcd_4bit_enuSendCommand>
    435a:	98 2f       	mov	r25, r24
    435c:	89 81       	ldd	r24, Y+1	; 0x01
    435e:	89 23       	and	r24, r25
    4360:	89 83       	std	Y+1, r24	; 0x01
			                break;
    4362:	1b c0       	rjmp	.+54     	; 0x439a <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW3:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x94+Copy_u8Col));
    4364:	8d 81       	ldd	r24, Y+5	; 0x05
    4366:	24 e9       	ldi	r18, 0x94	; 148
    4368:	28 0f       	add	r18, r24
    436a:	8a 81       	ldd	r24, Y+2	; 0x02
    436c:	9b 81       	ldd	r25, Y+3	; 0x03
    436e:	62 2f       	mov	r22, r18
    4370:	0e 94 02 20 	call	0x4004	; 0x4004 <Lcd_4bit_enuSendCommand>
    4374:	98 2f       	mov	r25, r24
    4376:	89 81       	ldd	r24, Y+1	; 0x01
    4378:	89 23       	and	r24, r25
    437a:	89 83       	std	Y+1, r24	; 0x01
			                break;
    437c:	0e c0       	rjmp	.+28     	; 0x439a <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW4:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xd4+Copy_u8Col));
    437e:	8d 81       	ldd	r24, Y+5	; 0x05
    4380:	24 ed       	ldi	r18, 0xD4	; 212
    4382:	28 0f       	add	r18, r24
    4384:	8a 81       	ldd	r24, Y+2	; 0x02
    4386:	9b 81       	ldd	r25, Y+3	; 0x03
    4388:	62 2f       	mov	r22, r18
    438a:	0e 94 02 20 	call	0x4004	; 0x4004 <Lcd_4bit_enuSendCommand>
    438e:	98 2f       	mov	r25, r24
    4390:	89 81       	ldd	r24, Y+1	; 0x01
    4392:	89 23       	and	r24, r25
    4394:	89 83       	std	Y+1, r24	; 0x01
			                break;
    4396:	01 c0       	rjmp	.+2      	; 0x439a <Lcd_4bit_enuGoToXY+0xd2>

			            default :
			                Loc_enuStatus = LCD_STATUS_OK;
    4398:	19 82       	std	Y+1, r1	; 0x01
		}




		return Loc_enuStatus;
    439a:	89 81       	ldd	r24, Y+1	; 0x01

}
    439c:	0f 90       	pop	r0
    439e:	0f 90       	pop	r0
    43a0:	0f 90       	pop	r0
    43a2:	0f 90       	pop	r0
    43a4:	0f 90       	pop	r0
    43a6:	df 91       	pop	r29
    43a8:	cf 91       	pop	r28
    43aa:	08 95       	ret

000043ac <Lcd_4bit_enuDisplayString>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayString(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String){
    43ac:	cf 93       	push	r28
    43ae:	df 93       	push	r29
    43b0:	00 d0       	rcall	.+0      	; 0x43b2 <Lcd_4bit_enuDisplayString+0x6>
    43b2:	00 d0       	rcall	.+0      	; 0x43b4 <Lcd_4bit_enuDisplayString+0x8>
    43b4:	00 d0       	rcall	.+0      	; 0x43b6 <Lcd_4bit_enuDisplayString+0xa>
    43b6:	cd b7       	in	r28, 0x3d	; 61
    43b8:	de b7       	in	r29, 0x3e	; 62
    43ba:	9c 83       	std	Y+4, r25	; 0x04
    43bc:	8b 83       	std	Y+3, r24	; 0x03
    43be:	7e 83       	std	Y+6, r23	; 0x06
    43c0:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    43c2:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    43c4:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
    43c6:	8b 81       	ldd	r24, Y+3	; 0x03
    43c8:	9c 81       	ldd	r25, Y+4	; 0x04
    43ca:	89 2b       	or	r24, r25
    43cc:	21 f0       	breq	.+8      	; 0x43d6 <Lcd_4bit_enuDisplayString+0x2a>
    43ce:	8d 81       	ldd	r24, Y+5	; 0x05
    43d0:	9e 81       	ldd	r25, Y+6	; 0x06
    43d2:	89 2b       	or	r24, r25
    43d4:	a9 f4       	brne	.+42     	; 0x4400 <Lcd_4bit_enuDisplayString+0x54>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    43d6:	82 e0       	ldi	r24, 0x02	; 2
    43d8:	89 83       	std	Y+1, r24	; 0x01
    43da:	1d c0       	rjmp	.+58     	; 0x4416 <Lcd_4bit_enuDisplayString+0x6a>

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
			            Loc_enuStatus = Lcd_4bit_enuDisplayCharacter(Address_Lcd,Address_pu8String[Loc_u8Counter]);
    43dc:	8a 81       	ldd	r24, Y+2	; 0x02
    43de:	88 2f       	mov	r24, r24
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	2d 81       	ldd	r18, Y+5	; 0x05
    43e4:	3e 81       	ldd	r19, Y+6	; 0x06
    43e6:	82 0f       	add	r24, r18
    43e8:	93 1f       	adc	r25, r19
    43ea:	fc 01       	movw	r30, r24
    43ec:	20 81       	ld	r18, Z
    43ee:	8b 81       	ldd	r24, Y+3	; 0x03
    43f0:	9c 81       	ldd	r25, Y+4	; 0x04
    43f2:	62 2f       	mov	r22, r18
    43f4:	0e 94 40 20 	call	0x4080	; 0x4080 <Lcd_4bit_enuDisplayCharacter>
    43f8:	89 83       	std	Y+1, r24	; 0x01
			            Loc_u8Counter++;
    43fa:	8a 81       	ldd	r24, Y+2	; 0x02
    43fc:	8f 5f       	subi	r24, 0xFF	; 255
    43fe:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
    4400:	8a 81       	ldd	r24, Y+2	; 0x02
    4402:	88 2f       	mov	r24, r24
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	2d 81       	ldd	r18, Y+5	; 0x05
    4408:	3e 81       	ldd	r19, Y+6	; 0x06
    440a:	82 0f       	add	r24, r18
    440c:	93 1f       	adc	r25, r19
    440e:	fc 01       	movw	r30, r24
    4410:	80 81       	ld	r24, Z
    4412:	88 23       	and	r24, r24
    4414:	19 f7       	brne	.-58     	; 0x43dc <Lcd_4bit_enuDisplayString+0x30>
		}




		return Loc_enuStatus;
    4416:	89 81       	ldd	r24, Y+1	; 0x01

}
    4418:	26 96       	adiw	r28, 0x06	; 6
    441a:	0f b6       	in	r0, 0x3f	; 63
    441c:	f8 94       	cli
    441e:	de bf       	out	0x3e, r29	; 62
    4420:	0f be       	out	0x3f, r0	; 63
    4422:	cd bf       	out	0x3d, r28	; 61
    4424:	df 91       	pop	r29
    4426:	cf 91       	pop	r28
    4428:	08 95       	ret

0000442a <Lcd_4bit_enuDisplayNumber>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayNumber(const Lcd_4bitType* Address_Lcd, u32 Copy_u32Number){
    442a:	cf 93       	push	r28
    442c:	df 93       	push	r29
    442e:	cd b7       	in	r28, 0x3d	; 61
    4430:	de b7       	in	r29, 0x3e	; 62
    4432:	cc 56       	subi	r28, 0x6C	; 108
    4434:	d1 09       	sbc	r29, r1
    4436:	0f b6       	in	r0, 0x3f	; 63
    4438:	f8 94       	cli
    443a:	de bf       	out	0x3e, r29	; 62
    443c:	0f be       	out	0x3f, r0	; 63
    443e:	cd bf       	out	0x3d, r28	; 61
    4440:	9e 01       	movw	r18, r28
    4442:	29 59       	subi	r18, 0x99	; 153
    4444:	3f 4f       	sbci	r19, 0xFF	; 255
    4446:	f9 01       	movw	r30, r18
    4448:	91 83       	std	Z+1, r25	; 0x01
    444a:	80 83       	st	Z, r24
    444c:	ce 01       	movw	r24, r28
    444e:	87 59       	subi	r24, 0x97	; 151
    4450:	9f 4f       	sbci	r25, 0xFF	; 255
    4452:	fc 01       	movw	r30, r24
    4454:	40 83       	st	Z, r20
    4456:	51 83       	std	Z+1, r21	; 0x01
    4458:	62 83       	std	Z+2, r22	; 0x02
    445a:	73 83       	std	Z+3, r23	; 0x03

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    445c:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    445e:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    4460:	ce 01       	movw	r24, r28
    4462:	89 59       	subi	r24, 0x99	; 153
    4464:	9f 4f       	sbci	r25, 0xFF	; 255
    4466:	fc 01       	movw	r30, r24
    4468:	80 81       	ld	r24, Z
    446a:	91 81       	ldd	r25, Z+1	; 0x01
    446c:	89 2b       	or	r24, r25
    446e:	19 f4       	brne	.+6      	; 0x4476 <Lcd_4bit_enuDisplayNumber+0x4c>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    4470:	82 e0       	ldi	r24, 0x02	; 2
    4472:	89 83       	std	Y+1, r24	; 0x01
    4474:	1e c0       	rjmp	.+60     	; 0x44b2 <Lcd_4bit_enuDisplayNumber+0x88>

		}
		else{

			Loc_enuStdStatus= Convert_IntToString(Copy_u32Number, Loc_u8ConvertedNumberInArray);
    4476:	9e 01       	movw	r18, r28
    4478:	2d 5f       	subi	r18, 0xFD	; 253
    447a:	3f 4f       	sbci	r19, 0xFF	; 255
    447c:	ce 01       	movw	r24, r28
    447e:	87 59       	subi	r24, 0x97	; 151
    4480:	9f 4f       	sbci	r25, 0xFF	; 255
    4482:	fc 01       	movw	r30, r24
    4484:	80 81       	ld	r24, Z
    4486:	91 81       	ldd	r25, Z+1	; 0x01
    4488:	a2 81       	ldd	r26, Z+2	; 0x02
    448a:	b3 81       	ldd	r27, Z+3	; 0x03
    448c:	a9 01       	movw	r20, r18
    448e:	bc 01       	movw	r22, r24
    4490:	cd 01       	movw	r24, r26
    4492:	0e 94 69 00 	call	0xd2	; 0xd2 <Convert_IntToString>
    4496:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    4498:	9e 01       	movw	r18, r28
    449a:	2d 5f       	subi	r18, 0xFD	; 253
    449c:	3f 4f       	sbci	r19, 0xFF	; 255
    449e:	ce 01       	movw	r24, r28
    44a0:	89 59       	subi	r24, 0x99	; 153
    44a2:	9f 4f       	sbci	r25, 0xFF	; 255
    44a4:	fc 01       	movw	r30, r24
    44a6:	80 81       	ld	r24, Z
    44a8:	91 81       	ldd	r25, Z+1	; 0x01
    44aa:	b9 01       	movw	r22, r18
    44ac:	0e 94 d6 21 	call	0x43ac	; 0x43ac <Lcd_4bit_enuDisplayString>
    44b0:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    44b2:	89 81       	ldd	r24, Y+1	; 0x01

}
    44b4:	c4 59       	subi	r28, 0x94	; 148
    44b6:	df 4f       	sbci	r29, 0xFF	; 255
    44b8:	0f b6       	in	r0, 0x3f	; 63
    44ba:	f8 94       	cli
    44bc:	de bf       	out	0x3e, r29	; 62
    44be:	0f be       	out	0x3f, r0	; 63
    44c0:	cd bf       	out	0x3d, r28	; 61
    44c2:	df 91       	pop	r29
    44c4:	cf 91       	pop	r28
    44c6:	08 95       	ret

000044c8 <Lcd_4bit_enuDisplayNumberWithPosition>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayNumberWithPosition(const Lcd_4bitType* Address_Lcd, u32 Copy_u32Number, u8 Copy_u8Row, u8 Copy_u8Col){
    44c8:	0f 93       	push	r16
    44ca:	cf 93       	push	r28
    44cc:	df 93       	push	r29
    44ce:	cd b7       	in	r28, 0x3d	; 61
    44d0:	de b7       	in	r29, 0x3e	; 62
    44d2:	ce 56       	subi	r28, 0x6E	; 110
    44d4:	d1 09       	sbc	r29, r1
    44d6:	0f b6       	in	r0, 0x3f	; 63
    44d8:	f8 94       	cli
    44da:	de bf       	out	0x3e, r29	; 62
    44dc:	0f be       	out	0x3f, r0	; 63
    44de:	cd bf       	out	0x3d, r28	; 61
    44e0:	fe 01       	movw	r30, r28
    44e2:	e9 59       	subi	r30, 0x99	; 153
    44e4:	ff 4f       	sbci	r31, 0xFF	; 255
    44e6:	91 83       	std	Z+1, r25	; 0x01
    44e8:	80 83       	st	Z, r24
    44ea:	ce 01       	movw	r24, r28
    44ec:	87 59       	subi	r24, 0x97	; 151
    44ee:	9f 4f       	sbci	r25, 0xFF	; 255
    44f0:	dc 01       	movw	r26, r24
    44f2:	4d 93       	st	X+, r20
    44f4:	5d 93       	st	X+, r21
    44f6:	6d 93       	st	X+, r22
    44f8:	7c 93       	st	X, r23
    44fa:	13 97       	sbiw	r26, 0x03	; 3
    44fc:	ce 01       	movw	r24, r28
    44fe:	83 59       	subi	r24, 0x93	; 147
    4500:	9f 4f       	sbci	r25, 0xFF	; 255
    4502:	fc 01       	movw	r30, r24
    4504:	20 83       	st	Z, r18
    4506:	ce 01       	movw	r24, r28
    4508:	82 59       	subi	r24, 0x92	; 146
    450a:	9f 4f       	sbci	r25, 0xFF	; 255
    450c:	dc 01       	movw	r26, r24
    450e:	0c 93       	st	X, r16

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    4510:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    4512:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    4514:	ce 01       	movw	r24, r28
    4516:	89 59       	subi	r24, 0x99	; 153
    4518:	9f 4f       	sbci	r25, 0xFF	; 255
    451a:	fc 01       	movw	r30, r24
    451c:	80 81       	ld	r24, Z
    451e:	91 81       	ldd	r25, Z+1	; 0x01
    4520:	89 2b       	or	r24, r25
    4522:	19 f4       	brne	.+6      	; 0x452a <Lcd_4bit_enuDisplayNumberWithPosition+0x62>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    4524:	82 e0       	ldi	r24, 0x02	; 2
    4526:	89 83       	std	Y+1, r24	; 0x01
    4528:	31 c0       	rjmp	.+98     	; 0x458c <Lcd_4bit_enuDisplayNumberWithPosition+0xc4>

		}
		else{

			Loc_enuStdStatus= Convert_IntToString(Copy_u32Number, Loc_u8ConvertedNumberInArray);
    452a:	9e 01       	movw	r18, r28
    452c:	2d 5f       	subi	r18, 0xFD	; 253
    452e:	3f 4f       	sbci	r19, 0xFF	; 255
    4530:	ce 01       	movw	r24, r28
    4532:	87 59       	subi	r24, 0x97	; 151
    4534:	9f 4f       	sbci	r25, 0xFF	; 255
    4536:	fc 01       	movw	r30, r24
    4538:	80 81       	ld	r24, Z
    453a:	91 81       	ldd	r25, Z+1	; 0x01
    453c:	a2 81       	ldd	r26, Z+2	; 0x02
    453e:	b3 81       	ldd	r27, Z+3	; 0x03
    4540:	a9 01       	movw	r20, r18
    4542:	bc 01       	movw	r22, r24
    4544:	cd 01       	movw	r24, r26
    4546:	0e 94 69 00 	call	0xd2	; 0xd2 <Convert_IntToString>
    454a:	8a 83       	std	Y+2, r24	; 0x02
			Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    454c:	9e 01       	movw	r18, r28
    454e:	22 59       	subi	r18, 0x92	; 146
    4550:	3f 4f       	sbci	r19, 0xFF	; 255
    4552:	ce 01       	movw	r24, r28
    4554:	83 59       	subi	r24, 0x93	; 147
    4556:	9f 4f       	sbci	r25, 0xFF	; 255
    4558:	ae 01       	movw	r20, r28
    455a:	49 59       	subi	r20, 0x99	; 153
    455c:	5f 4f       	sbci	r21, 0xFF	; 255
    455e:	da 01       	movw	r26, r20
    4560:	ed 91       	ld	r30, X+
    4562:	fc 91       	ld	r31, X
    4564:	d9 01       	movw	r26, r18
    4566:	4c 91       	ld	r20, X
    4568:	dc 01       	movw	r26, r24
    456a:	6c 91       	ld	r22, X
    456c:	cf 01       	movw	r24, r30
    456e:	0e 94 64 21 	call	0x42c8	; 0x42c8 <Lcd_4bit_enuGoToXY>
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    4572:	9e 01       	movw	r18, r28
    4574:	2d 5f       	subi	r18, 0xFD	; 253
    4576:	3f 4f       	sbci	r19, 0xFF	; 255
    4578:	ce 01       	movw	r24, r28
    457a:	89 59       	subi	r24, 0x99	; 153
    457c:	9f 4f       	sbci	r25, 0xFF	; 255
    457e:	fc 01       	movw	r30, r24
    4580:	80 81       	ld	r24, Z
    4582:	91 81       	ldd	r25, Z+1	; 0x01
    4584:	b9 01       	movw	r22, r18
    4586:	0e 94 d6 21 	call	0x43ac	; 0x43ac <Lcd_4bit_enuDisplayString>
    458a:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    458c:	89 81       	ldd	r24, Y+1	; 0x01

}
    458e:	c2 59       	subi	r28, 0x92	; 146
    4590:	df 4f       	sbci	r29, 0xFF	; 255
    4592:	0f b6       	in	r0, 0x3f	; 63
    4594:	f8 94       	cli
    4596:	de bf       	out	0x3e, r29	; 62
    4598:	0f be       	out	0x3f, r0	; 63
    459a:	cd bf       	out	0x3d, r28	; 61
    459c:	df 91       	pop	r29
    459e:	cf 91       	pop	r28
    45a0:	0f 91       	pop	r16
    45a2:	08 95       	ret

000045a4 <Lcd_4bit_enuDisplayFloatNumber>:



Lcd_ErrorStatusType Lcd_4bit_enuDisplayFloatNumber(const Lcd_4bitType* Address_Lcd, f64 Copy_f64Number){
    45a4:	cf 93       	push	r28
    45a6:	df 93       	push	r29
    45a8:	cd b7       	in	r28, 0x3d	; 61
    45aa:	de b7       	in	r29, 0x3e	; 62
    45ac:	cc 56       	subi	r28, 0x6C	; 108
    45ae:	d1 09       	sbc	r29, r1
    45b0:	0f b6       	in	r0, 0x3f	; 63
    45b2:	f8 94       	cli
    45b4:	de bf       	out	0x3e, r29	; 62
    45b6:	0f be       	out	0x3f, r0	; 63
    45b8:	cd bf       	out	0x3d, r28	; 61
    45ba:	9e 01       	movw	r18, r28
    45bc:	29 59       	subi	r18, 0x99	; 153
    45be:	3f 4f       	sbci	r19, 0xFF	; 255
    45c0:	f9 01       	movw	r30, r18
    45c2:	91 83       	std	Z+1, r25	; 0x01
    45c4:	80 83       	st	Z, r24
    45c6:	ce 01       	movw	r24, r28
    45c8:	87 59       	subi	r24, 0x97	; 151
    45ca:	9f 4f       	sbci	r25, 0xFF	; 255
    45cc:	fc 01       	movw	r30, r24
    45ce:	40 83       	st	Z, r20
    45d0:	51 83       	std	Z+1, r21	; 0x01
    45d2:	62 83       	std	Z+2, r22	; 0x02
    45d4:	73 83       	std	Z+3, r23	; 0x03

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    45d6:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    45d8:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    45da:	ce 01       	movw	r24, r28
    45dc:	89 59       	subi	r24, 0x99	; 153
    45de:	9f 4f       	sbci	r25, 0xFF	; 255
    45e0:	fc 01       	movw	r30, r24
    45e2:	80 81       	ld	r24, Z
    45e4:	91 81       	ldd	r25, Z+1	; 0x01
    45e6:	89 2b       	or	r24, r25
    45e8:	19 f4       	brne	.+6      	; 0x45f0 <Lcd_4bit_enuDisplayFloatNumber+0x4c>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    45ea:	82 e0       	ldi	r24, 0x02	; 2
    45ec:	89 83       	std	Y+1, r24	; 0x01
    45ee:	1e c0       	rjmp	.+60     	; 0x462c <Lcd_4bit_enuDisplayFloatNumber+0x88>

		}
		else{

			Loc_enuStdStatus= Convert_FloatToString(Copy_f64Number, Loc_u8ConvertedNumberInArray);
    45f0:	9e 01       	movw	r18, r28
    45f2:	2d 5f       	subi	r18, 0xFD	; 253
    45f4:	3f 4f       	sbci	r19, 0xFF	; 255
    45f6:	ce 01       	movw	r24, r28
    45f8:	87 59       	subi	r24, 0x97	; 151
    45fa:	9f 4f       	sbci	r25, 0xFF	; 255
    45fc:	fc 01       	movw	r30, r24
    45fe:	80 81       	ld	r24, Z
    4600:	91 81       	ldd	r25, Z+1	; 0x01
    4602:	a2 81       	ldd	r26, Z+2	; 0x02
    4604:	b3 81       	ldd	r27, Z+3	; 0x03
    4606:	a9 01       	movw	r20, r18
    4608:	bc 01       	movw	r22, r24
    460a:	cd 01       	movw	r24, r26
    460c:	0e 94 a8 00 	call	0x150	; 0x150 <Convert_FloatToString>
    4610:	8a 83       	std	Y+2, r24	; 0x02
//			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
				Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd, Loc_u8ConvertedNumberInArray);
    4612:	9e 01       	movw	r18, r28
    4614:	2d 5f       	subi	r18, 0xFD	; 253
    4616:	3f 4f       	sbci	r19, 0xFF	; 255
    4618:	ce 01       	movw	r24, r28
    461a:	89 59       	subi	r24, 0x99	; 153
    461c:	9f 4f       	sbci	r25, 0xFF	; 255
    461e:	fc 01       	movw	r30, r24
    4620:	80 81       	ld	r24, Z
    4622:	91 81       	ldd	r25, Z+1	; 0x01
    4624:	b9 01       	movw	r22, r18
    4626:	0e 94 d6 21 	call	0x43ac	; 0x43ac <Lcd_4bit_enuDisplayString>
    462a:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    462c:	89 81       	ldd	r24, Y+1	; 0x01

}
    462e:	c4 59       	subi	r28, 0x94	; 148
    4630:	df 4f       	sbci	r29, 0xFF	; 255
    4632:	0f b6       	in	r0, 0x3f	; 63
    4634:	f8 94       	cli
    4636:	de bf       	out	0x3e, r29	; 62
    4638:	0f be       	out	0x3f, r0	; 63
    463a:	cd bf       	out	0x3d, r28	; 61
    463c:	df 91       	pop	r29
    463e:	cf 91       	pop	r28
    4640:	08 95       	ret

00004642 <Lcd_4bit_enuSet4BitsOnPins>:



//////////////////////////////////////*Implementation of Private Functions*////////////////////////////

static Lcd_ErrorStatusType Lcd_4bit_enuSet4BitsOnPins(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data4Bits){
    4642:	cf 93       	push	r28
    4644:	df 93       	push	r29
    4646:	00 d0       	rcall	.+0      	; 0x4648 <Lcd_4bit_enuSet4BitsOnPins+0x6>
    4648:	00 d0       	rcall	.+0      	; 0x464a <Lcd_4bit_enuSet4BitsOnPins+0x8>
    464a:	1f 92       	push	r1
    464c:	cd b7       	in	r28, 0x3d	; 61
    464e:	de b7       	in	r29, 0x3e	; 62
    4650:	9c 83       	std	Y+4, r25	; 0x04
    4652:	8b 83       	std	Y+3, r24	; 0x03
    4654:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    4656:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    4658:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    465a:	8b 81       	ldd	r24, Y+3	; 0x03
    465c:	9c 81       	ldd	r25, Y+4	; 0x04
    465e:	89 2b       	or	r24, r25
    4660:	19 f4       	brne	.+6      	; 0x4668 <Lcd_4bit_enuSet4BitsOnPins+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    4662:	82 e0       	ldi	r24, 0x02	; 2
    4664:	89 83       	std	Y+1, r24	; 0x01
    4666:	22 c0       	rjmp	.+68     	; 0x46ac <Lcd_4bit_enuSet4BitsOnPins+0x6a>

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    4668:	1a 82       	std	Y+2, r1	; 0x02
    466a:	1d c0       	rjmp	.+58     	; 0x46a6 <Lcd_4bit_enuSet4BitsOnPins+0x64>

				 Loc_enuStatus =Dio_enuWriteChannel((Address_Lcd->lcd_data_pins[Loc_u8Counter]),(Copy_u8Data4Bits>>Loc_u8Counter)& ONE_VALUE);
    466c:	8d 81       	ldd	r24, Y+5	; 0x05
    466e:	88 2f       	mov	r24, r24
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	2a 81       	ldd	r18, Y+2	; 0x02
    4674:	22 2f       	mov	r18, r18
    4676:	30 e0       	ldi	r19, 0x00	; 0
    4678:	02 c0       	rjmp	.+4      	; 0x467e <Lcd_4bit_enuSet4BitsOnPins+0x3c>
    467a:	95 95       	asr	r25
    467c:	87 95       	ror	r24
    467e:	2a 95       	dec	r18
    4680:	e2 f7       	brpl	.-8      	; 0x467a <Lcd_4bit_enuSet4BitsOnPins+0x38>
    4682:	48 2f       	mov	r20, r24
    4684:	41 70       	andi	r20, 0x01	; 1
    4686:	8a 81       	ldd	r24, Y+2	; 0x02
    4688:	88 2f       	mov	r24, r24
    468a:	90 e0       	ldi	r25, 0x00	; 0
    468c:	2b 81       	ldd	r18, Y+3	; 0x03
    468e:	3c 81       	ldd	r19, Y+4	; 0x04
    4690:	82 0f       	add	r24, r18
    4692:	93 1f       	adc	r25, r19
    4694:	fc 01       	movw	r30, r24
    4696:	80 81       	ld	r24, Z
    4698:	64 2f       	mov	r22, r20
    469a:	0e 94 64 18 	call	0x30c8	; 0x30c8 <Dio_enuWriteChannel>
    469e:	89 83       	std	Y+1, r24	; 0x01
		if( NULL == Address_Lcd){
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    46a0:	8a 81       	ldd	r24, Y+2	; 0x02
    46a2:	8f 5f       	subi	r24, 0xFF	; 255
    46a4:	8a 83       	std	Y+2, r24	; 0x02
    46a6:	8a 81       	ldd	r24, Y+2	; 0x02
    46a8:	84 30       	cpi	r24, 0x04	; 4
    46aa:	00 f3       	brcs	.-64     	; 0x466c <Lcd_4bit_enuSet4BitsOnPins+0x2a>
		}




		return Loc_enuStatus;
    46ac:	89 81       	ldd	r24, Y+1	; 0x01

}
    46ae:	0f 90       	pop	r0
    46b0:	0f 90       	pop	r0
    46b2:	0f 90       	pop	r0
    46b4:	0f 90       	pop	r0
    46b6:	0f 90       	pop	r0
    46b8:	df 91       	pop	r29
    46ba:	cf 91       	pop	r28
    46bc:	08 95       	ret

000046be <Lcd_4bit_enuSendEnableSignal>:



static Lcd_ErrorStatusType Lcd_4bit_enuSendEnableSignal(const Lcd_4bitType* Address_Lcd){
    46be:	cf 93       	push	r28
    46c0:	df 93       	push	r29
    46c2:	cd b7       	in	r28, 0x3d	; 61
    46c4:	de b7       	in	r29, 0x3e	; 62
    46c6:	a3 97       	sbiw	r28, 0x23	; 35
    46c8:	0f b6       	in	r0, 0x3f	; 63
    46ca:	f8 94       	cli
    46cc:	de bf       	out	0x3e, r29	; 62
    46ce:	0f be       	out	0x3f, r0	; 63
    46d0:	cd bf       	out	0x3d, r28	; 61
    46d2:	9b a3       	std	Y+35, r25	; 0x23
    46d4:	8a a3       	std	Y+34, r24	; 0x22

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    46d6:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    46d8:	8a a1       	ldd	r24, Y+34	; 0x22
    46da:	9b a1       	ldd	r25, Y+35	; 0x23
    46dc:	89 2b       	or	r24, r25
    46de:	19 f4       	brne	.+6      	; 0x46e6 <Lcd_4bit_enuSendEnableSignal+0x28>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    46e0:	82 e0       	ldi	r24, 0x02	; 2
    46e2:	89 83       	std	Y+1, r24	; 0x01
    46e4:	ff c0       	rjmp	.+510    	; 0x48e4 <Lcd_4bit_enuSendEnableSignal+0x226>

		}
		else{

			   Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_HIGH);
    46e6:	8a a1       	ldd	r24, Y+34	; 0x22
    46e8:	9b a1       	ldd	r25, Y+35	; 0x23
    46ea:	fc 01       	movw	r30, r24
    46ec:	85 81       	ldd	r24, Z+5	; 0x05
    46ee:	61 e0       	ldi	r22, 0x01	; 1
    46f0:	0e 94 64 18 	call	0x30c8	; 0x30c8 <Dio_enuWriteChannel>
    46f4:	89 83       	std	Y+1, r24	; 0x01
    46f6:	80 e0       	ldi	r24, 0x00	; 0
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	a0 ea       	ldi	r26, 0xA0	; 160
    46fc:	b0 e4       	ldi	r27, 0x40	; 64
    46fe:	8a 83       	std	Y+2, r24	; 0x02
    4700:	9b 83       	std	Y+3, r25	; 0x03
    4702:	ac 83       	std	Y+4, r26	; 0x04
    4704:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    4706:	2b ea       	ldi	r18, 0xAB	; 171
    4708:	3a ea       	ldi	r19, 0xAA	; 170
    470a:	4a ea       	ldi	r20, 0xAA	; 170
    470c:	50 e4       	ldi	r21, 0x40	; 64
    470e:	6a 81       	ldd	r22, Y+2	; 0x02
    4710:	7b 81       	ldd	r23, Y+3	; 0x03
    4712:	8c 81       	ldd	r24, Y+4	; 0x04
    4714:	9d 81       	ldd	r25, Y+5	; 0x05
    4716:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    471a:	dc 01       	movw	r26, r24
    471c:	cb 01       	movw	r24, r22
    471e:	8e 83       	std	Y+6, r24	; 0x06
    4720:	9f 83       	std	Y+7, r25	; 0x07
    4722:	a8 87       	std	Y+8, r26	; 0x08
    4724:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
    4726:	20 e0       	ldi	r18, 0x00	; 0
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	40 e8       	ldi	r20, 0x80	; 128
    472c:	50 e4       	ldi	r21, 0x40	; 64
    472e:	6a 81       	ldd	r22, Y+2	; 0x02
    4730:	7b 81       	ldd	r23, Y+3	; 0x03
    4732:	8c 81       	ldd	r24, Y+4	; 0x04
    4734:	9d 81       	ldd	r25, Y+5	; 0x05
    4736:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    473a:	dc 01       	movw	r26, r24
    473c:	cb 01       	movw	r24, r22
    473e:	8a 87       	std	Y+10, r24	; 0x0a
    4740:	9b 87       	std	Y+11, r25	; 0x0b
    4742:	ac 87       	std	Y+12, r26	; 0x0c
    4744:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    4746:	20 e0       	ldi	r18, 0x00	; 0
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	40 e8       	ldi	r20, 0x80	; 128
    474c:	5f e3       	ldi	r21, 0x3F	; 63
    474e:	6e 81       	ldd	r22, Y+6	; 0x06
    4750:	7f 81       	ldd	r23, Y+7	; 0x07
    4752:	88 85       	ldd	r24, Y+8	; 0x08
    4754:	99 85       	ldd	r25, Y+9	; 0x09
    4756:	0e 94 ed 29 	call	0x53da	; 0x53da <__cmpsf2>
    475a:	88 23       	and	r24, r24
    475c:	1c f4       	brge	.+6      	; 0x4764 <Lcd_4bit_enuSendEnableSignal+0xa6>
		__ticks = 1;
    475e:	81 e0       	ldi	r24, 0x01	; 1
    4760:	8e 87       	std	Y+14, r24	; 0x0e
    4762:	b2 c0       	rjmp	.+356    	; 0x48c8 <Lcd_4bit_enuSendEnableSignal+0x20a>
	else if (__tmp2 > 65535)
    4764:	20 e0       	ldi	r18, 0x00	; 0
    4766:	3f ef       	ldi	r19, 0xFF	; 255
    4768:	4f e7       	ldi	r20, 0x7F	; 127
    476a:	57 e4       	ldi	r21, 0x47	; 71
    476c:	6a 85       	ldd	r22, Y+10	; 0x0a
    476e:	7b 85       	ldd	r23, Y+11	; 0x0b
    4770:	8c 85       	ldd	r24, Y+12	; 0x0c
    4772:	9d 85       	ldd	r25, Y+13	; 0x0d
    4774:	0e 94 4c 2b 	call	0x5698	; 0x5698 <__gesf2>
    4778:	18 16       	cp	r1, r24
    477a:	0c f0       	brlt	.+2      	; 0x477e <Lcd_4bit_enuSendEnableSignal+0xc0>
    477c:	7b c0       	rjmp	.+246    	; 0x4874 <Lcd_4bit_enuSendEnableSignal+0x1b6>
	{
		_delay_ms(__us / 1000.0);
    477e:	20 e0       	ldi	r18, 0x00	; 0
    4780:	30 e0       	ldi	r19, 0x00	; 0
    4782:	4a e7       	ldi	r20, 0x7A	; 122
    4784:	54 e4       	ldi	r21, 0x44	; 68
    4786:	6a 81       	ldd	r22, Y+2	; 0x02
    4788:	7b 81       	ldd	r23, Y+3	; 0x03
    478a:	8c 81       	ldd	r24, Y+4	; 0x04
    478c:	9d 81       	ldd	r25, Y+5	; 0x05
    478e:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <__divsf3>
    4792:	dc 01       	movw	r26, r24
    4794:	cb 01       	movw	r24, r22
    4796:	8f 87       	std	Y+15, r24	; 0x0f
    4798:	98 8b       	std	Y+16, r25	; 0x10
    479a:	a9 8b       	std	Y+17, r26	; 0x11
    479c:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    479e:	20 e0       	ldi	r18, 0x00	; 0
    47a0:	30 e0       	ldi	r19, 0x00	; 0
    47a2:	4a e7       	ldi	r20, 0x7A	; 122
    47a4:	55 e4       	ldi	r21, 0x45	; 69
    47a6:	6f 85       	ldd	r22, Y+15	; 0x0f
    47a8:	78 89       	ldd	r23, Y+16	; 0x10
    47aa:	89 89       	ldd	r24, Y+17	; 0x11
    47ac:	9a 89       	ldd	r25, Y+18	; 0x12
    47ae:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    47b2:	dc 01       	movw	r26, r24
    47b4:	cb 01       	movw	r24, r22
    47b6:	8b 8b       	std	Y+19, r24	; 0x13
    47b8:	9c 8b       	std	Y+20, r25	; 0x14
    47ba:	ad 8b       	std	Y+21, r26	; 0x15
    47bc:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    47be:	20 e0       	ldi	r18, 0x00	; 0
    47c0:	30 e0       	ldi	r19, 0x00	; 0
    47c2:	40 e8       	ldi	r20, 0x80	; 128
    47c4:	5f e3       	ldi	r21, 0x3F	; 63
    47c6:	6b 89       	ldd	r22, Y+19	; 0x13
    47c8:	7c 89       	ldd	r23, Y+20	; 0x14
    47ca:	8d 89       	ldd	r24, Y+21	; 0x15
    47cc:	9e 89       	ldd	r25, Y+22	; 0x16
    47ce:	0e 94 ed 29 	call	0x53da	; 0x53da <__cmpsf2>
    47d2:	88 23       	and	r24, r24
    47d4:	2c f4       	brge	.+10     	; 0x47e0 <Lcd_4bit_enuSendEnableSignal+0x122>
		__ticks = 1;
    47d6:	81 e0       	ldi	r24, 0x01	; 1
    47d8:	90 e0       	ldi	r25, 0x00	; 0
    47da:	98 8f       	std	Y+24, r25	; 0x18
    47dc:	8f 8b       	std	Y+23, r24	; 0x17
    47de:	3f c0       	rjmp	.+126    	; 0x485e <Lcd_4bit_enuSendEnableSignal+0x1a0>
	else if (__tmp > 65535)
    47e0:	20 e0       	ldi	r18, 0x00	; 0
    47e2:	3f ef       	ldi	r19, 0xFF	; 255
    47e4:	4f e7       	ldi	r20, 0x7F	; 127
    47e6:	57 e4       	ldi	r21, 0x47	; 71
    47e8:	6b 89       	ldd	r22, Y+19	; 0x13
    47ea:	7c 89       	ldd	r23, Y+20	; 0x14
    47ec:	8d 89       	ldd	r24, Y+21	; 0x15
    47ee:	9e 89       	ldd	r25, Y+22	; 0x16
    47f0:	0e 94 4c 2b 	call	0x5698	; 0x5698 <__gesf2>
    47f4:	18 16       	cp	r1, r24
    47f6:	4c f5       	brge	.+82     	; 0x484a <Lcd_4bit_enuSendEnableSignal+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47f8:	20 e0       	ldi	r18, 0x00	; 0
    47fa:	30 e0       	ldi	r19, 0x00	; 0
    47fc:	40 e2       	ldi	r20, 0x20	; 32
    47fe:	51 e4       	ldi	r21, 0x41	; 65
    4800:	6f 85       	ldd	r22, Y+15	; 0x0f
    4802:	78 89       	ldd	r23, Y+16	; 0x10
    4804:	89 89       	ldd	r24, Y+17	; 0x11
    4806:	9a 89       	ldd	r25, Y+18	; 0x12
    4808:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    480c:	dc 01       	movw	r26, r24
    480e:	cb 01       	movw	r24, r22
    4810:	bc 01       	movw	r22, r24
    4812:	cd 01       	movw	r24, r26
    4814:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    4818:	dc 01       	movw	r26, r24
    481a:	cb 01       	movw	r24, r22
    481c:	98 8f       	std	Y+24, r25	; 0x18
    481e:	8f 8b       	std	Y+23, r24	; 0x17
    4820:	0f c0       	rjmp	.+30     	; 0x4840 <Lcd_4bit_enuSendEnableSignal+0x182>
    4822:	80 e9       	ldi	r24, 0x90	; 144
    4824:	91 e0       	ldi	r25, 0x01	; 1
    4826:	9a 8f       	std	Y+26, r25	; 0x1a
    4828:	89 8f       	std	Y+25, r24	; 0x19
    482a:	89 8d       	ldd	r24, Y+25	; 0x19
    482c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    482e:	01 97       	sbiw	r24, 0x01	; 1
    4830:	f1 f7       	brne	.-4      	; 0x482e <Lcd_4bit_enuSendEnableSignal+0x170>
    4832:	9a 8f       	std	Y+26, r25	; 0x1a
    4834:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4836:	8f 89       	ldd	r24, Y+23	; 0x17
    4838:	98 8d       	ldd	r25, Y+24	; 0x18
    483a:	01 97       	sbiw	r24, 0x01	; 1
    483c:	98 8f       	std	Y+24, r25	; 0x18
    483e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4840:	8f 89       	ldd	r24, Y+23	; 0x17
    4842:	98 8d       	ldd	r25, Y+24	; 0x18
    4844:	89 2b       	or	r24, r25
    4846:	69 f7       	brne	.-38     	; 0x4822 <Lcd_4bit_enuSendEnableSignal+0x164>
    4848:	3f c0       	rjmp	.+126    	; 0x48c8 <Lcd_4bit_enuSendEnableSignal+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    484a:	6b 89       	ldd	r22, Y+19	; 0x13
    484c:	7c 89       	ldd	r23, Y+20	; 0x14
    484e:	8d 89       	ldd	r24, Y+21	; 0x15
    4850:	9e 89       	ldd	r25, Y+22	; 0x16
    4852:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    4856:	dc 01       	movw	r26, r24
    4858:	cb 01       	movw	r24, r22
    485a:	98 8f       	std	Y+24, r25	; 0x18
    485c:	8f 8b       	std	Y+23, r24	; 0x17
    485e:	8f 89       	ldd	r24, Y+23	; 0x17
    4860:	98 8d       	ldd	r25, Y+24	; 0x18
    4862:	9c 8f       	std	Y+28, r25	; 0x1c
    4864:	8b 8f       	std	Y+27, r24	; 0x1b
    4866:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4868:	9c 8d       	ldd	r25, Y+28	; 0x1c
    486a:	01 97       	sbiw	r24, 0x01	; 1
    486c:	f1 f7       	brne	.-4      	; 0x486a <Lcd_4bit_enuSendEnableSignal+0x1ac>
    486e:	9c 8f       	std	Y+28, r25	; 0x1c
    4870:	8b 8f       	std	Y+27, r24	; 0x1b
    4872:	2a c0       	rjmp	.+84     	; 0x48c8 <Lcd_4bit_enuSendEnableSignal+0x20a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    4874:	20 e0       	ldi	r18, 0x00	; 0
    4876:	30 e0       	ldi	r19, 0x00	; 0
    4878:	4f e7       	ldi	r20, 0x7F	; 127
    487a:	53 e4       	ldi	r21, 0x43	; 67
    487c:	6e 81       	ldd	r22, Y+6	; 0x06
    487e:	7f 81       	ldd	r23, Y+7	; 0x07
    4880:	88 85       	ldd	r24, Y+8	; 0x08
    4882:	99 85       	ldd	r25, Y+9	; 0x09
    4884:	0e 94 4c 2b 	call	0x5698	; 0x5698 <__gesf2>
    4888:	18 16       	cp	r1, r24
    488a:	ac f4       	brge	.+42     	; 0x48b6 <Lcd_4bit_enuSendEnableSignal+0x1f8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    488c:	6a 85       	ldd	r22, Y+10	; 0x0a
    488e:	7b 85       	ldd	r23, Y+11	; 0x0b
    4890:	8c 85       	ldd	r24, Y+12	; 0x0c
    4892:	9d 85       	ldd	r25, Y+13	; 0x0d
    4894:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    4898:	dc 01       	movw	r26, r24
    489a:	cb 01       	movw	r24, r22
    489c:	9e 8f       	std	Y+30, r25	; 0x1e
    489e:	8d 8f       	std	Y+29, r24	; 0x1d
    48a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    48a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    48a4:	98 a3       	std	Y+32, r25	; 0x20
    48a6:	8f 8f       	std	Y+31, r24	; 0x1f
    48a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    48aa:	98 a1       	ldd	r25, Y+32	; 0x20
    48ac:	01 97       	sbiw	r24, 0x01	; 1
    48ae:	f1 f7       	brne	.-4      	; 0x48ac <Lcd_4bit_enuSendEnableSignal+0x1ee>
    48b0:	98 a3       	std	Y+32, r25	; 0x20
    48b2:	8f 8f       	std	Y+31, r24	; 0x1f
    48b4:	0f c0       	rjmp	.+30     	; 0x48d4 <Lcd_4bit_enuSendEnableSignal+0x216>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    48b6:	6e 81       	ldd	r22, Y+6	; 0x06
    48b8:	7f 81       	ldd	r23, Y+7	; 0x07
    48ba:	88 85       	ldd	r24, Y+8	; 0x08
    48bc:	99 85       	ldd	r25, Y+9	; 0x09
    48be:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    48c2:	dc 01       	movw	r26, r24
    48c4:	cb 01       	movw	r24, r22
    48c6:	8e 87       	std	Y+14, r24	; 0x0e
    48c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    48ca:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    48cc:	89 a1       	ldd	r24, Y+33	; 0x21
    48ce:	8a 95       	dec	r24
    48d0:	f1 f7       	brne	.-4      	; 0x48ce <Lcd_4bit_enuSendEnableSignal+0x210>
    48d2:	89 a3       	std	Y+33, r24	; 0x21
			        _delay_us(5);
			  Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_LOW);
    48d4:	8a a1       	ldd	r24, Y+34	; 0x22
    48d6:	9b a1       	ldd	r25, Y+35	; 0x23
    48d8:	fc 01       	movw	r30, r24
    48da:	85 81       	ldd	r24, Z+5	; 0x05
    48dc:	60 e0       	ldi	r22, 0x00	; 0
    48de:	0e 94 64 18 	call	0x30c8	; 0x30c8 <Dio_enuWriteChannel>
    48e2:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    48e4:	89 81       	ldd	r24, Y+1	; 0x01

}
    48e6:	a3 96       	adiw	r28, 0x23	; 35
    48e8:	0f b6       	in	r0, 0x3f	; 63
    48ea:	f8 94       	cli
    48ec:	de bf       	out	0x3e, r29	; 62
    48ee:	0f be       	out	0x3f, r0	; 63
    48f0:	cd bf       	out	0x3d, r28	; 61
    48f2:	df 91       	pop	r29
    48f4:	cf 91       	pop	r28
    48f6:	08 95       	ret

000048f8 <Keypad_enuRead>:


/********************************** Software Interfaces Declarations *******************/


Keypad_ErrorStatusType Keypad_enuRead(const Keypad_ConfigType* Address_Keypad, pu8 Address_ResultValue){
    48f8:	cf 93       	push	r28
    48fa:	df 93       	push	r29
    48fc:	cd b7       	in	r28, 0x3d	; 61
    48fe:	de b7       	in	r29, 0x3e	; 62
    4900:	29 97       	sbiw	r28, 0x09	; 9
    4902:	0f b6       	in	r0, 0x3f	; 63
    4904:	f8 94       	cli
    4906:	de bf       	out	0x3e, r29	; 62
    4908:	0f be       	out	0x3f, r0	; 63
    490a:	cd bf       	out	0x3d, r28	; 61
    490c:	9f 83       	std	Y+7, r25	; 0x07
    490e:	8e 83       	std	Y+6, r24	; 0x06
    4910:	79 87       	std	Y+9, r23	; 0x09
    4912:	68 87       	std	Y+8, r22	; 0x08

	extern const u8 Keypad_Matrix[KEYPAD_ROWS_NUMBER][KEYPAD_COLS_NUMBER];
	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    4914:	83 e0       	ldi	r24, 0x03	; 3
    4916:	89 83       	std	Y+1, r24	; 0x01
	Dio_ErrorStatusType Loc_DioStatusError =DIO_STATUS_OK;
    4918:	1c 82       	std	Y+4, r1	; 0x04
	u8 Loc_u8RowsCounter = ZERO_VALUE;
    491a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ColsCounter = ZERO_VALUE;
    491c:	1b 82       	std	Y+3, r1	; 0x03
	u8 Loc_u8Check = Address_Keypad->keypad_idle_volt;
    491e:	8e 81       	ldd	r24, Y+6	; 0x06
    4920:	9f 81       	ldd	r25, Y+7	; 0x07
    4922:	fc 01       	movw	r30, r24
    4924:	81 85       	ldd	r24, Z+9	; 0x09
    4926:	8d 83       	std	Y+5, r24	; 0x05
	if (NULL == Address_Keypad || (NULL == Address_ResultValue ) ){
    4928:	8e 81       	ldd	r24, Y+6	; 0x06
    492a:	9f 81       	ldd	r25, Y+7	; 0x07
    492c:	89 2b       	or	r24, r25
    492e:	21 f0       	breq	.+8      	; 0x4938 <Keypad_enuRead+0x40>
    4930:	88 85       	ldd	r24, Y+8	; 0x08
    4932:	99 85       	ldd	r25, Y+9	; 0x09
    4934:	89 2b       	or	r24, r25
    4936:	19 f4       	brne	.+6      	; 0x493e <Keypad_enuRead+0x46>

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    4938:	82 e0       	ldi	r24, 0x02	; 2
    493a:	89 83       	std	Y+1, r24	; 0x01
    493c:	df c0       	rjmp	.+446    	; 0x4afc <Keypad_enuRead+0x204>
	    }

	     else{
	    	  Loc_KeypadStatusError = Keypad_DisableControlPins(Address_Keypad);
    493e:	8e 81       	ldd	r24, Y+6	; 0x06
    4940:	9f 81       	ldd	r25, Y+7	; 0x07
    4942:	0e 94 88 25 	call	0x4b10	; 0x4b10 <Keypad_DisableControlPins>
    4946:	89 83       	std	Y+1, r24	; 0x01

	    	  switch(Address_Keypad->keypad_control_pins){
    4948:	8e 81       	ldd	r24, Y+6	; 0x06
    494a:	9f 81       	ldd	r25, Y+7	; 0x07
    494c:	fc 01       	movw	r30, r24
    494e:	80 85       	ldd	r24, Z+8	; 0x08
    4950:	88 2f       	mov	r24, r24
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	00 97       	sbiw	r24, 0x00	; 0
    4956:	21 f0       	breq	.+8      	; 0x4960 <Keypad_enuRead+0x68>
    4958:	01 97       	sbiw	r24, 0x01	; 1
    495a:	09 f4       	brne	.+2      	; 0x495e <Keypad_enuRead+0x66>
    495c:	67 c0       	rjmp	.+206    	; 0x4a2c <Keypad_enuRead+0x134>
    495e:	cc c0       	rjmp	.+408    	; 0x4af8 <Keypad_enuRead+0x200>
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    4960:	1a 82       	std	Y+2, r1	; 0x02
    4962:	5f c0       	rjmp	.+190    	; 0x4a22 <Keypad_enuRead+0x12a>
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    4964:	8e 81       	ldd	r24, Y+6	; 0x06
    4966:	9f 81       	ldd	r25, Y+7	; 0x07
    4968:	fc 01       	movw	r30, r24
    496a:	91 85       	ldd	r25, Z+9	; 0x09
    496c:	81 e0       	ldi	r24, 0x01	; 1
    496e:	99 23       	and	r25, r25
    4970:	09 f0       	breq	.+2      	; 0x4974 <Keypad_enuRead+0x7c>
    4972:	80 e0       	ldi	r24, 0x00	; 0
    4974:	48 2f       	mov	r20, r24
    4976:	8a 81       	ldd	r24, Y+2	; 0x02
    4978:	88 2f       	mov	r24, r24
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	2e 81       	ldd	r18, Y+6	; 0x06
    497e:	3f 81       	ldd	r19, Y+7	; 0x07
    4980:	82 0f       	add	r24, r18
    4982:	93 1f       	adc	r25, r19
    4984:	fc 01       	movw	r30, r24
    4986:	80 81       	ld	r24, Z
    4988:	64 2f       	mov	r22, r20
    498a:	0e 94 64 18 	call	0x30c8	; 0x30c8 <Dio_enuWriteChannel>
    498e:	8c 83       	std	Y+4, r24	; 0x04

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    4990:	1b 82       	std	Y+3, r1	; 0x03
    4992:	30 c0       	rjmp	.+96     	; 0x49f4 <Keypad_enuRead+0xfc>
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), &Loc_u8Check);
    4994:	8b 81       	ldd	r24, Y+3	; 0x03
    4996:	88 2f       	mov	r24, r24
    4998:	90 e0       	ldi	r25, 0x00	; 0
    499a:	2e 81       	ldd	r18, Y+6	; 0x06
    499c:	3f 81       	ldd	r19, Y+7	; 0x07
    499e:	82 0f       	add	r24, r18
    49a0:	93 1f       	adc	r25, r19
    49a2:	04 96       	adiw	r24, 0x04	; 4
    49a4:	fc 01       	movw	r30, r24
    49a6:	20 81       	ld	r18, Z
    49a8:	ce 01       	movw	r24, r28
    49aa:	05 96       	adiw	r24, 0x05	; 5
    49ac:	bc 01       	movw	r22, r24
    49ae:	82 2f       	mov	r24, r18
    49b0:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <Dio_enuReadChannel>
    49b4:	8c 83       	std	Y+4, r24	; 0x04

	    	                         if( Loc_u8Check != Address_Keypad->keypad_idle_volt )
    49b6:	8e 81       	ldd	r24, Y+6	; 0x06
    49b8:	9f 81       	ldd	r25, Y+7	; 0x07
    49ba:	fc 01       	movw	r30, r24
    49bc:	91 85       	ldd	r25, Z+9	; 0x09
    49be:	8d 81       	ldd	r24, Y+5	; 0x05
    49c0:	98 17       	cp	r25, r24
    49c2:	a9 f0       	breq	.+42     	; 0x49ee <Keypad_enuRead+0xf6>
	    	                         {
	    	                              *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    49c4:	8a 81       	ldd	r24, Y+2	; 0x02
    49c6:	28 2f       	mov	r18, r24
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	8b 81       	ldd	r24, Y+3	; 0x03
    49cc:	88 2f       	mov	r24, r24
    49ce:	90 e0       	ldi	r25, 0x00	; 0
    49d0:	22 0f       	add	r18, r18
    49d2:	33 1f       	adc	r19, r19
    49d4:	22 0f       	add	r18, r18
    49d6:	33 1f       	adc	r19, r19
    49d8:	82 0f       	add	r24, r18
    49da:	93 1f       	adc	r25, r19
    49dc:	8e 52       	subi	r24, 0x2E	; 46
    49de:	9f 4f       	sbci	r25, 0xFF	; 255
    49e0:	fc 01       	movw	r30, r24
    49e2:	20 81       	ld	r18, Z
    49e4:	88 85       	ldd	r24, Y+8	; 0x08
    49e6:	99 85       	ldd	r25, Y+9	; 0x09
    49e8:	fc 01       	movw	r30, r24
    49ea:	20 83       	st	Z, r18
	    	                              Loc_KeypadStatusError = KEYPAD_IS_PRESSED;
    49ec:	19 82       	std	Y+1, r1	; 0x01
	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    49ee:	8b 81       	ldd	r24, Y+3	; 0x03
    49f0:	8f 5f       	subi	r24, 0xFF	; 255
    49f2:	8b 83       	std	Y+3, r24	; 0x03
    49f4:	8b 81       	ldd	r24, Y+3	; 0x03
    49f6:	84 30       	cpi	r24, 0x04	; 4
    49f8:	68 f2       	brcs	.-102    	; 0x4994 <Keypad_enuRead+0x9c>
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
    49fa:	8e 81       	ldd	r24, Y+6	; 0x06
    49fc:	9f 81       	ldd	r25, Y+7	; 0x07
    49fe:	fc 01       	movw	r30, r24
    4a00:	41 85       	ldd	r20, Z+9	; 0x09
    4a02:	8a 81       	ldd	r24, Y+2	; 0x02
    4a04:	88 2f       	mov	r24, r24
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	2e 81       	ldd	r18, Y+6	; 0x06
    4a0a:	3f 81       	ldd	r19, Y+7	; 0x07
    4a0c:	82 0f       	add	r24, r18
    4a0e:	93 1f       	adc	r25, r19
    4a10:	fc 01       	movw	r30, r24
    4a12:	80 81       	ld	r24, Z
    4a14:	64 2f       	mov	r22, r20
    4a16:	0e 94 64 18 	call	0x30c8	; 0x30c8 <Dio_enuWriteChannel>
    4a1a:	8c 83       	std	Y+4, r24	; 0x04

	    	  switch(Address_Keypad->keypad_control_pins){
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    4a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a1e:	8f 5f       	subi	r24, 0xFF	; 255
    4a20:	8a 83       	std	Y+2, r24	; 0x02
    4a22:	8a 81       	ldd	r24, Y+2	; 0x02
    4a24:	84 30       	cpi	r24, 0x04	; 4
    4a26:	08 f4       	brcc	.+2      	; 0x4a2a <Keypad_enuRead+0x132>
    4a28:	9d cf       	rjmp	.-198    	; 0x4964 <Keypad_enuRead+0x6c>


	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
	    	                 }

	    	                 break;
    4a2a:	68 c0       	rjmp	.+208    	; 0x4afc <Keypad_enuRead+0x204>

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    4a2c:	1b 82       	std	Y+3, r1	; 0x03
    4a2e:	5f c0       	rjmp	.+190    	; 0x4aee <Keypad_enuRead+0x1f6>
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    4a30:	8e 81       	ldd	r24, Y+6	; 0x06
    4a32:	9f 81       	ldd	r25, Y+7	; 0x07
    4a34:	fc 01       	movw	r30, r24
    4a36:	91 85       	ldd	r25, Z+9	; 0x09
    4a38:	81 e0       	ldi	r24, 0x01	; 1
    4a3a:	99 23       	and	r25, r25
    4a3c:	09 f0       	breq	.+2      	; 0x4a40 <Keypad_enuRead+0x148>
    4a3e:	80 e0       	ldi	r24, 0x00	; 0
    4a40:	48 2f       	mov	r20, r24
    4a42:	8b 81       	ldd	r24, Y+3	; 0x03
    4a44:	88 2f       	mov	r24, r24
    4a46:	90 e0       	ldi	r25, 0x00	; 0
    4a48:	2e 81       	ldd	r18, Y+6	; 0x06
    4a4a:	3f 81       	ldd	r19, Y+7	; 0x07
    4a4c:	82 0f       	add	r24, r18
    4a4e:	93 1f       	adc	r25, r19
    4a50:	04 96       	adiw	r24, 0x04	; 4
    4a52:	fc 01       	movw	r30, r24
    4a54:	80 81       	ld	r24, Z
    4a56:	64 2f       	mov	r22, r20
    4a58:	0e 94 64 18 	call	0x30c8	; 0x30c8 <Dio_enuWriteChannel>
    4a5c:	8c 83       	std	Y+4, r24	; 0x04

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    4a5e:	1a 82       	std	Y+2, r1	; 0x02
    4a60:	2e c0       	rjmp	.+92     	; 0x4abe <Keypad_enuRead+0x1c6>
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),&Loc_u8Check );
    4a62:	8a 81       	ldd	r24, Y+2	; 0x02
    4a64:	88 2f       	mov	r24, r24
    4a66:	90 e0       	ldi	r25, 0x00	; 0
    4a68:	2e 81       	ldd	r18, Y+6	; 0x06
    4a6a:	3f 81       	ldd	r19, Y+7	; 0x07
    4a6c:	82 0f       	add	r24, r18
    4a6e:	93 1f       	adc	r25, r19
    4a70:	fc 01       	movw	r30, r24
    4a72:	20 81       	ld	r18, Z
    4a74:	ce 01       	movw	r24, r28
    4a76:	05 96       	adiw	r24, 0x05	; 5
    4a78:	bc 01       	movw	r22, r24
    4a7a:	82 2f       	mov	r24, r18
    4a7c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <Dio_enuReadChannel>
    4a80:	8c 83       	std	Y+4, r24	; 0x04

	    	                         if(Loc_u8Check != Address_Keypad->keypad_idle_volt )
    4a82:	8e 81       	ldd	r24, Y+6	; 0x06
    4a84:	9f 81       	ldd	r25, Y+7	; 0x07
    4a86:	fc 01       	movw	r30, r24
    4a88:	91 85       	ldd	r25, Z+9	; 0x09
    4a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a8c:	98 17       	cp	r25, r24
    4a8e:	a1 f0       	breq	.+40     	; 0x4ab8 <Keypad_enuRead+0x1c0>
	    	                         {
	    	                             *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    4a90:	8a 81       	ldd	r24, Y+2	; 0x02
    4a92:	28 2f       	mov	r18, r24
    4a94:	30 e0       	ldi	r19, 0x00	; 0
    4a96:	8b 81       	ldd	r24, Y+3	; 0x03
    4a98:	88 2f       	mov	r24, r24
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	22 0f       	add	r18, r18
    4a9e:	33 1f       	adc	r19, r19
    4aa0:	22 0f       	add	r18, r18
    4aa2:	33 1f       	adc	r19, r19
    4aa4:	82 0f       	add	r24, r18
    4aa6:	93 1f       	adc	r25, r19
    4aa8:	8e 52       	subi	r24, 0x2E	; 46
    4aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    4aac:	fc 01       	movw	r30, r24
    4aae:	20 81       	ld	r18, Z
    4ab0:	88 85       	ldd	r24, Y+8	; 0x08
    4ab2:	99 85       	ldd	r25, Y+9	; 0x09
    4ab4:	fc 01       	movw	r30, r24
    4ab6:	20 83       	st	Z, r18
	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    4ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aba:	8f 5f       	subi	r24, 0xFF	; 255
    4abc:	8a 83       	std	Y+2, r24	; 0x02
    4abe:	8a 81       	ldd	r24, Y+2	; 0x02
    4ac0:	84 30       	cpi	r24, 0x04	; 4
    4ac2:	78 f2       	brcs	.-98     	; 0x4a62 <Keypad_enuRead+0x16a>
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
    4ac4:	8e 81       	ldd	r24, Y+6	; 0x06
    4ac6:	9f 81       	ldd	r25, Y+7	; 0x07
    4ac8:	fc 01       	movw	r30, r24
    4aca:	41 85       	ldd	r20, Z+9	; 0x09
    4acc:	8b 81       	ldd	r24, Y+3	; 0x03
    4ace:	88 2f       	mov	r24, r24
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	2e 81       	ldd	r18, Y+6	; 0x06
    4ad4:	3f 81       	ldd	r19, Y+7	; 0x07
    4ad6:	82 0f       	add	r24, r18
    4ad8:	93 1f       	adc	r25, r19
    4ada:	04 96       	adiw	r24, 0x04	; 4
    4adc:	fc 01       	movw	r30, r24
    4ade:	80 81       	ld	r24, Z
    4ae0:	64 2f       	mov	r22, r20
    4ae2:	0e 94 64 18 	call	0x30c8	; 0x30c8 <Dio_enuWriteChannel>
    4ae6:	8c 83       	std	Y+4, r24	; 0x04
	    	                 break;

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    4ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    4aea:	8f 5f       	subi	r24, 0xFF	; 255
    4aec:	8b 83       	std	Y+3, r24	; 0x03
    4aee:	8b 81       	ldd	r24, Y+3	; 0x03
    4af0:	84 30       	cpi	r24, 0x04	; 4
    4af2:	08 f4       	brcc	.+2      	; 0x4af6 <Keypad_enuRead+0x1fe>
    4af4:	9d cf       	rjmp	.-198    	; 0x4a30 <Keypad_enuRead+0x138>


	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
	    	                 }

	    	                 break;
    4af6:	02 c0       	rjmp	.+4      	; 0x4afc <Keypad_enuRead+0x204>

	    	             default :
	    	                 Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    4af8:	81 e0       	ldi	r24, 0x01	; 1
    4afa:	89 83       	std	Y+1, r24	; 0x01
	    	         }


	     }
	return Loc_KeypadStatusError;
    4afc:	89 81       	ldd	r24, Y+1	; 0x01
}
    4afe:	29 96       	adiw	r28, 0x09	; 9
    4b00:	0f b6       	in	r0, 0x3f	; 63
    4b02:	f8 94       	cli
    4b04:	de bf       	out	0x3e, r29	; 62
    4b06:	0f be       	out	0x3f, r0	; 63
    4b08:	cd bf       	out	0x3d, r28	; 61
    4b0a:	df 91       	pop	r29
    4b0c:	cf 91       	pop	r28
    4b0e:	08 95       	ret

00004b10 <Keypad_DisableControlPins>:


/********************************** Static  Interfaces Implementation *******************/
static Keypad_ErrorStatusType Keypad_DisableControlPins(const Keypad_ConfigType* Address_Keypad){
    4b10:	cf 93       	push	r28
    4b12:	df 93       	push	r29
    4b14:	00 d0       	rcall	.+0      	; 0x4b16 <Keypad_DisableControlPins+0x6>
    4b16:	00 d0       	rcall	.+0      	; 0x4b18 <Keypad_DisableControlPins+0x8>
    4b18:	1f 92       	push	r1
    4b1a:	cd b7       	in	r28, 0x3d	; 61
    4b1c:	de b7       	in	r29, 0x3e	; 62
    4b1e:	9d 83       	std	Y+5, r25	; 0x05
    4b20:	8c 83       	std	Y+4, r24	; 0x04

	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    4b22:	83 e0       	ldi	r24, 0x03	; 3
    4b24:	89 83       	std	Y+1, r24	; 0x01
	Dio_ErrorStatusType Loc_DioStatusError = DIO_STATUS_OK;
    4b26:	1b 82       	std	Y+3, r1	; 0x03
    	u8 Loc_u8Counter = ZERO_VALUE;
    4b28:	1a 82       	std	Y+2, r1	; 0x02
	if (NULL == Address_Keypad   ){
    4b2a:	8c 81       	ldd	r24, Y+4	; 0x04
    4b2c:	9d 81       	ldd	r25, Y+5	; 0x05
    4b2e:	89 2b       	or	r24, r25
    4b30:	19 f4       	brne	.+6      	; 0x4b38 <Keypad_DisableControlPins+0x28>

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    4b32:	82 e0       	ldi	r24, 0x02	; 2
    4b34:	89 83       	std	Y+1, r24	; 0x01
    4b36:	42 c0       	rjmp	.+132    	; 0x4bbc <Keypad_DisableControlPins+0xac>
	    }

	else{

	        switch(Address_Keypad->keypad_control_pins){
    4b38:	8c 81       	ldd	r24, Y+4	; 0x04
    4b3a:	9d 81       	ldd	r25, Y+5	; 0x05
    4b3c:	fc 01       	movw	r30, r24
    4b3e:	80 85       	ldd	r24, Z+8	; 0x08
    4b40:	88 2f       	mov	r24, r24
    4b42:	90 e0       	ldi	r25, 0x00	; 0
    4b44:	00 97       	sbiw	r24, 0x00	; 0
    4b46:	19 f0       	breq	.+6      	; 0x4b4e <Keypad_DisableControlPins+0x3e>
    4b48:	01 97       	sbiw	r24, 0x01	; 1
    4b4a:	d9 f0       	breq	.+54     	; 0x4b82 <Keypad_DisableControlPins+0x72>
    4b4c:	35 c0       	rjmp	.+106    	; 0x4bb8 <Keypad_DisableControlPins+0xa8>
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    4b4e:	1a 82       	std	Y+2, r1	; 0x02
    4b50:	14 c0       	rjmp	.+40     	; 0x4b7a <Keypad_DisableControlPins+0x6a>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    4b52:	8c 81       	ldd	r24, Y+4	; 0x04
    4b54:	9d 81       	ldd	r25, Y+5	; 0x05
    4b56:	fc 01       	movw	r30, r24
    4b58:	41 85       	ldd	r20, Z+9	; 0x09
    4b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b5c:	88 2f       	mov	r24, r24
    4b5e:	90 e0       	ldi	r25, 0x00	; 0
    4b60:	2c 81       	ldd	r18, Y+4	; 0x04
    4b62:	3d 81       	ldd	r19, Y+5	; 0x05
    4b64:	82 0f       	add	r24, r18
    4b66:	93 1f       	adc	r25, r19
    4b68:	fc 01       	movw	r30, r24
    4b6a:	80 81       	ld	r24, Z
    4b6c:	64 2f       	mov	r22, r20
    4b6e:	0e 94 64 18 	call	0x30c8	; 0x30c8 <Dio_enuWriteChannel>
    4b72:	8b 83       	std	Y+3, r24	; 0x03
	else{

	        switch(Address_Keypad->keypad_control_pins){
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    4b74:	8a 81       	ldd	r24, Y+2	; 0x02
    4b76:	8f 5f       	subi	r24, 0xFF	; 255
    4b78:	8a 83       	std	Y+2, r24	; 0x02
    4b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b7c:	84 30       	cpi	r24, 0x04	; 4
    4b7e:	48 f3       	brcs	.-46     	; 0x4b52 <Keypad_DisableControlPins+0x42>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }

	                break;
    4b80:	1d c0       	rjmp	.+58     	; 0x4bbc <Keypad_DisableControlPins+0xac>

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    4b82:	1a 82       	std	Y+2, r1	; 0x02
    4b84:	15 c0       	rjmp	.+42     	; 0x4bb0 <Keypad_DisableControlPins+0xa0>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    4b86:	8c 81       	ldd	r24, Y+4	; 0x04
    4b88:	9d 81       	ldd	r25, Y+5	; 0x05
    4b8a:	fc 01       	movw	r30, r24
    4b8c:	41 85       	ldd	r20, Z+9	; 0x09
    4b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b90:	88 2f       	mov	r24, r24
    4b92:	90 e0       	ldi	r25, 0x00	; 0
    4b94:	2c 81       	ldd	r18, Y+4	; 0x04
    4b96:	3d 81       	ldd	r19, Y+5	; 0x05
    4b98:	82 0f       	add	r24, r18
    4b9a:	93 1f       	adc	r25, r19
    4b9c:	04 96       	adiw	r24, 0x04	; 4
    4b9e:	fc 01       	movw	r30, r24
    4ba0:	80 81       	ld	r24, Z
    4ba2:	64 2f       	mov	r22, r20
    4ba4:	0e 94 64 18 	call	0x30c8	; 0x30c8 <Dio_enuWriteChannel>
    4ba8:	8b 83       	std	Y+3, r24	; 0x03

	                break;

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    4baa:	8a 81       	ldd	r24, Y+2	; 0x02
    4bac:	8f 5f       	subi	r24, 0xFF	; 255
    4bae:	8a 83       	std	Y+2, r24	; 0x02
    4bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    4bb2:	84 30       	cpi	r24, 0x04	; 4
    4bb4:	40 f3       	brcs	.-48     	; 0x4b86 <Keypad_DisableControlPins+0x76>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }
	                break;
    4bb6:	02 c0       	rjmp	.+4      	; 0x4bbc <Keypad_DisableControlPins+0xac>

	            default :
	                Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    4bb8:	81 e0       	ldi	r24, 0x01	; 1
    4bba:	89 83       	std	Y+1, r24	; 0x01
	        }

	    }
	return Loc_KeypadStatusError;
    4bbc:	89 81       	ldd	r24, Y+1	; 0x01
}
    4bbe:	0f 90       	pop	r0
    4bc0:	0f 90       	pop	r0
    4bc2:	0f 90       	pop	r0
    4bc4:	0f 90       	pop	r0
    4bc6:	0f 90       	pop	r0
    4bc8:	df 91       	pop	r29
    4bca:	cf 91       	pop	r28
    4bcc:	08 95       	ret

00004bce <Icusw_enuInit>:


/********************************** Software Interfaces Declarations *******************/


Icusw_StatusErrorType Icusw_enuInit(Icusw_ConfigType* Address_Icusw ){
    4bce:	cf 93       	push	r28
    4bd0:	df 93       	push	r29
    4bd2:	00 d0       	rcall	.+0      	; 0x4bd4 <Icusw_enuInit+0x6>
    4bd4:	00 d0       	rcall	.+0      	; 0x4bd6 <Icusw_enuInit+0x8>
    4bd6:	cd b7       	in	r28, 0x3d	; 61
    4bd8:	de b7       	in	r29, 0x3e	; 62
    4bda:	9c 83       	std	Y+4, r25	; 0x04
    4bdc:	8b 83       	std	Y+3, r24	; 0x03
	Icusw_StatusErrorType Loc_enuIcuswStatus = ICUSW_STATUS_OK;
    4bde:	19 82       	std	Y+1, r1	; 0x01
	Exti_StatusErrorType Loc_enuExtiswStatus = EXTI_STATUS_OK;
    4be0:	81 e0       	ldi	r24, 0x01	; 1
    4be2:	8a 83       	std	Y+2, r24	; 0x02

	if(NULL == Address_Icusw){
    4be4:	8b 81       	ldd	r24, Y+3	; 0x03
    4be6:	9c 81       	ldd	r25, Y+4	; 0x04
    4be8:	89 2b       	or	r24, r25
    4bea:	19 f4       	brne	.+6      	; 0x4bf2 <Icusw_enuInit+0x24>
		Loc_enuIcuswStatus = ICUSW_STATUS_NULL_POINTER_ADDRESS;
    4bec:	82 e0       	ldi	r24, 0x02	; 2
    4bee:	89 83       	std	Y+1, r24	; 0x01
    4bf0:	68 c0       	rjmp	.+208    	; 0x4cc2 <Icusw_enuInit+0xf4>
	}
	else{

		switch(Address_Icusw->exti_Intx_Index){
    4bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    4bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    4bf6:	fc 01       	movw	r30, r24
    4bf8:	80 81       	ld	r24, Z
    4bfa:	88 2f       	mov	r24, r24
    4bfc:	90 e0       	ldi	r25, 0x00	; 0
    4bfe:	81 30       	cpi	r24, 0x01	; 1
    4c00:	91 05       	cpc	r25, r1
    4c02:	89 f0       	breq	.+34     	; 0x4c26 <Icusw_enuInit+0x58>
    4c04:	82 30       	cpi	r24, 0x02	; 2
    4c06:	91 05       	cpc	r25, r1
    4c08:	d1 f0       	breq	.+52     	; 0x4c3e <Icusw_enuInit+0x70>
    4c0a:	89 2b       	or	r24, r25
    4c0c:	21 f5       	brne	.+72     	; 0x4c56 <Icusw_enuInit+0x88>
		case EXTI_INT0_INDEX :
			Loc_enuExtiswStatus = Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_RISING_EDGE);
    4c0e:	63 e0       	ldi	r22, 0x03	; 3
    4c10:	80 e0       	ldi	r24, 0x00	; 0
    4c12:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <Exti_enuEnable>
    4c16:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuExtiswStatus = Exti_enuSetCallbackFunction(EXTI_INT0_INDEX, Icusw_voidINT0Isr);
    4c18:	69 e2       	ldi	r22, 0x29	; 41
    4c1a:	77 e2       	ldi	r23, 0x27	; 39
    4c1c:	80 e0       	ldi	r24, 0x00	; 0
    4c1e:	0e 94 93 17 	call	0x2f26	; 0x2f26 <Exti_enuSetCallbackFunction>
    4c22:	8a 83       	std	Y+2, r24	; 0x02

			break;
    4c24:	1a c0       	rjmp	.+52     	; 0x4c5a <Icusw_enuInit+0x8c>
		case EXTI_INT1_INDEX :
			Loc_enuExtiswStatus = Exti_enuEnable(EXTI_INT1_INDEX,EXTI_INT1_SELECT_RISING_EDGE);
    4c26:	63 e0       	ldi	r22, 0x03	; 3
    4c28:	81 e0       	ldi	r24, 0x01	; 1
    4c2a:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <Exti_enuEnable>
    4c2e:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuExtiswStatus = Exti_enuSetCallbackFunction(EXTI_INT1_INDEX, Icusw_voidINT1Isr);
    4c30:	67 ea       	ldi	r22, 0xA7	; 167
    4c32:	78 e2       	ldi	r23, 0x28	; 40
    4c34:	81 e0       	ldi	r24, 0x01	; 1
    4c36:	0e 94 93 17 	call	0x2f26	; 0x2f26 <Exti_enuSetCallbackFunction>
    4c3a:	8a 83       	std	Y+2, r24	; 0x02

			break;
    4c3c:	0e c0       	rjmp	.+28     	; 0x4c5a <Icusw_enuInit+0x8c>
		case EXTI_INT2_INDEX :
			Loc_enuExtiswStatus = Exti_enuEnable(EXTI_INT2_INDEX,EXTI_INT2_SELECT_RISING_EDGE);
    4c3e:	61 e0       	ldi	r22, 0x01	; 1
    4c40:	82 e0       	ldi	r24, 0x02	; 2
    4c42:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <Exti_enuEnable>
    4c46:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuExtiswStatus = Exti_enuSetCallbackFunction(EXTI_INT2_INDEX, Icusw_voidINT2Isr);
    4c48:	6f ea       	ldi	r22, 0xAF	; 175
    4c4a:	78 e2       	ldi	r23, 0x28	; 40
    4c4c:	82 e0       	ldi	r24, 0x02	; 2
    4c4e:	0e 94 93 17 	call	0x2f26	; 0x2f26 <Exti_enuSetCallbackFunction>
    4c52:	8a 83       	std	Y+2, r24	; 0x02


			break;
    4c54:	02 c0       	rjmp	.+4      	; 0x4c5a <Icusw_enuInit+0x8c>
		default:

			Loc_enuExtiswStatus = EXTI_STATUS_FAIL;
    4c56:	1a 82       	std	Y+2, r1	; 0x02
			break;
    4c58:	00 00       	nop

		}

		switch(Address_Icusw->timer_index){
    4c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c5e:	fc 01       	movw	r30, r24
    4c60:	81 81       	ldd	r24, Z+1	; 0x01
    4c62:	88 2f       	mov	r24, r24
    4c64:	90 e0       	ldi	r25, 0x00	; 0
    4c66:	81 30       	cpi	r24, 0x01	; 1
    4c68:	91 05       	cpc	r25, r1
    4c6a:	41 f1       	breq	.+80     	; 0x4cbc <Icusw_enuInit+0xee>
    4c6c:	82 30       	cpi	r24, 0x02	; 2
    4c6e:	91 05       	cpc	r25, r1
    4c70:	39 f1       	breq	.+78     	; 0x4cc0 <Icusw_enuInit+0xf2>
    4c72:	89 2b       	or	r24, r25
    4c74:	01 f5       	brne	.+64     	; 0x4cb6 <Icusw_enuInit+0xe8>

		case ICUSW_TIMER_INDEX_TIMER0 :

			Timer0_enuInit(&Global_StaticTimer0);
    4c76:	81 ea       	ldi	r24, 0xA1	; 161
    4c78:	90 e0       	ldi	r25, 0x00	; 0
    4c7a:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <Timer0_enuInit>
			Timer0_enuSetCallbackFunction(&Global_StaticTimer0,Timer_voidTimerOverflowIsr);
    4c7e:	6e e0       	ldi	r22, 0x0E	; 14
    4c80:	77 e2       	ldi	r23, 0x27	; 39
    4c82:	81 ea       	ldi	r24, 0xA1	; 161
    4c84:	90 e0       	ldi	r25, 0x00	; 0
    4c86:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <Timer0_enuSetCallbackFunction>
			Timer0_enuEnableInterrupt(&Global_StaticTimer0);
    4c8a:	81 ea       	ldi	r24, 0xA1	; 161
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <Timer0_enuEnableInterrupt>
			Global_StaticINTxWhichTimer[Address_Icusw->exti_Intx_Index]=ICUSW_TIMER_INDEX_TIMER0;
    4c92:	8b 81       	ldd	r24, Y+3	; 0x03
    4c94:	9c 81       	ldd	r25, Y+4	; 0x04
    4c96:	fc 01       	movw	r30, r24
    4c98:	80 81       	ld	r24, Z
    4c9a:	88 2f       	mov	r24, r24
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	88 0f       	add	r24, r24
    4ca0:	99 1f       	adc	r25, r25
    4ca2:	88 0f       	add	r24, r24
    4ca4:	99 1f       	adc	r25, r25
    4ca6:	8d 5d       	subi	r24, 0xDD	; 221
    4ca8:	9e 4f       	sbci	r25, 0xFE	; 254
    4caa:	fc 01       	movw	r30, r24
    4cac:	10 82       	st	Z, r1
    4cae:	11 82       	std	Z+1, r1	; 0x01
    4cb0:	12 82       	std	Z+2, r1	; 0x02
    4cb2:	13 82       	std	Z+3, r1	; 0x03

			break;
    4cb4:	06 c0       	rjmp	.+12     	; 0x4cc2 <Icusw_enuInit+0xf4>

			break;

		default:

			Loc_enuIcuswStatus = ICUSW_STATUS_FAIL;
    4cb6:	81 e0       	ldi	r24, 0x01	; 1
    4cb8:	89 83       	std	Y+1, r24	; 0x01
			break;
    4cba:	03 c0       	rjmp	.+6      	; 0x4cc2 <Icusw_enuInit+0xf4>
			Global_StaticINTxWhichTimer[Address_Icusw->exti_Intx_Index]=ICUSW_TIMER_INDEX_TIMER0;

			break;
		case ICUSW_TIMER_INDEX_TIMER1:

			break;
    4cbc:	00 00       	nop
    4cbe:	01 c0       	rjmp	.+2      	; 0x4cc2 <Icusw_enuInit+0xf4>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;
    4cc0:	00 00       	nop
			break;
		}


	}
	Gie_enuEnableGlobalInterrupt();
    4cc2:	0e 94 42 16 	call	0x2c84	; 0x2c84 <Gie_enuEnableGlobalInterrupt>

	return Loc_enuIcuswStatus;
    4cc6:	89 81       	ldd	r24, Y+1	; 0x01
}
    4cc8:	0f 90       	pop	r0
    4cca:	0f 90       	pop	r0
    4ccc:	0f 90       	pop	r0
    4cce:	0f 90       	pop	r0
    4cd0:	df 91       	pop	r29
    4cd2:	cf 91       	pop	r28
    4cd4:	08 95       	ret

00004cd6 <Icusw_enuDeint>:

Icusw_StatusErrorType Icusw_enuDeint(Icusw_ConfigType* Address_Icusw ){
    4cd6:	cf 93       	push	r28
    4cd8:	df 93       	push	r29
    4cda:	00 d0       	rcall	.+0      	; 0x4cdc <Icusw_enuDeint+0x6>
    4cdc:	1f 92       	push	r1
    4cde:	cd b7       	in	r28, 0x3d	; 61
    4ce0:	de b7       	in	r29, 0x3e	; 62
    4ce2:	9b 83       	std	Y+3, r25	; 0x03
    4ce4:	8a 83       	std	Y+2, r24	; 0x02
	Icusw_StatusErrorType Loc_enuIcuswStatus = ICUSW_STATUS_OK;
    4ce6:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Icusw){
    4ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    4cea:	9b 81       	ldd	r25, Y+3	; 0x03
    4cec:	89 2b       	or	r24, r25
    4cee:	11 f4       	brne	.+4      	; 0x4cf4 <Icusw_enuDeint+0x1e>
		Loc_enuIcuswStatus = ICUSW_STATUS_NULL_POINTER_ADDRESS;
    4cf0:	82 e0       	ldi	r24, 0x02	; 2
    4cf2:	89 83       	std	Y+1, r24	; 0x01
	}
	else{

	}

	return Loc_enuIcuswStatus;
    4cf4:	89 81       	ldd	r24, Y+1	; 0x01
}
    4cf6:	0f 90       	pop	r0
    4cf8:	0f 90       	pop	r0
    4cfa:	0f 90       	pop	r0
    4cfc:	df 91       	pop	r29
    4cfe:	cf 91       	pop	r28
    4d00:	08 95       	ret

00004d02 <Icusw_enuGetOnTimeMilliSeconds>:
Icusw_StatusErrorType Icusw_enuGetOnTimeMilliSeconds(Icusw_ConfigType* Address_Icusw, u32* Address_OnTime){
    4d02:	cf 93       	push	r28
    4d04:	df 93       	push	r29
    4d06:	00 d0       	rcall	.+0      	; 0x4d08 <Icusw_enuGetOnTimeMilliSeconds+0x6>
    4d08:	00 d0       	rcall	.+0      	; 0x4d0a <Icusw_enuGetOnTimeMilliSeconds+0x8>
    4d0a:	1f 92       	push	r1
    4d0c:	cd b7       	in	r28, 0x3d	; 61
    4d0e:	de b7       	in	r29, 0x3e	; 62
    4d10:	9b 83       	std	Y+3, r25	; 0x03
    4d12:	8a 83       	std	Y+2, r24	; 0x02
    4d14:	7d 83       	std	Y+5, r23	; 0x05
    4d16:	6c 83       	std	Y+4, r22	; 0x04
	Icusw_StatusErrorType Loc_enuIcuswStatus = ICUSW_STATUS_OK;
    4d18:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Icusw ||NULL == Address_OnTime ){
    4d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    4d1e:	89 2b       	or	r24, r25
    4d20:	21 f0       	breq	.+8      	; 0x4d2a <Icusw_enuGetOnTimeMilliSeconds+0x28>
    4d22:	8c 81       	ldd	r24, Y+4	; 0x04
    4d24:	9d 81       	ldd	r25, Y+5	; 0x05
    4d26:	89 2b       	or	r24, r25
    4d28:	19 f4       	brne	.+6      	; 0x4d30 <Icusw_enuGetOnTimeMilliSeconds+0x2e>
		Loc_enuIcuswStatus = ICUSW_STATUS_NULL_POINTER_ADDRESS;
    4d2a:	82 e0       	ldi	r24, 0x02	; 2
    4d2c:	89 83       	std	Y+1, r24	; 0x01
    4d2e:	0f c0       	rjmp	.+30     	; 0x4d4e <Icusw_enuGetOnTimeMilliSeconds+0x4c>
	}
	else{

		*Address_OnTime = Global_StaticU32OnTime;
    4d30:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Global_StaticU32OnTime>
    4d34:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <Global_StaticU32OnTime+0x1>
    4d38:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <Global_StaticU32OnTime+0x2>
    4d3c:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <Global_StaticU32OnTime+0x3>
    4d40:	2c 81       	ldd	r18, Y+4	; 0x04
    4d42:	3d 81       	ldd	r19, Y+5	; 0x05
    4d44:	f9 01       	movw	r30, r18
    4d46:	80 83       	st	Z, r24
    4d48:	91 83       	std	Z+1, r25	; 0x01
    4d4a:	a2 83       	std	Z+2, r26	; 0x02
    4d4c:	b3 83       	std	Z+3, r27	; 0x03
	}

	return Loc_enuIcuswStatus;
    4d4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d50:	0f 90       	pop	r0
    4d52:	0f 90       	pop	r0
    4d54:	0f 90       	pop	r0
    4d56:	0f 90       	pop	r0
    4d58:	0f 90       	pop	r0
    4d5a:	df 91       	pop	r29
    4d5c:	cf 91       	pop	r28
    4d5e:	08 95       	ret

00004d60 <Icusw_enuGetTotalTimeMilliSeconds>:

Icusw_StatusErrorType Icusw_enuGetTotalTimeMilliSeconds(Icusw_ConfigType* Address_Icusw, u32* Address_TotalTime){
    4d60:	cf 93       	push	r28
    4d62:	df 93       	push	r29
    4d64:	00 d0       	rcall	.+0      	; 0x4d66 <Icusw_enuGetTotalTimeMilliSeconds+0x6>
    4d66:	00 d0       	rcall	.+0      	; 0x4d68 <Icusw_enuGetTotalTimeMilliSeconds+0x8>
    4d68:	1f 92       	push	r1
    4d6a:	cd b7       	in	r28, 0x3d	; 61
    4d6c:	de b7       	in	r29, 0x3e	; 62
    4d6e:	9b 83       	std	Y+3, r25	; 0x03
    4d70:	8a 83       	std	Y+2, r24	; 0x02
    4d72:	7d 83       	std	Y+5, r23	; 0x05
    4d74:	6c 83       	std	Y+4, r22	; 0x04
	Icusw_StatusErrorType Loc_enuIcuswStatus = ICUSW_STATUS_OK;
    4d76:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Icusw||NULL == Address_TotalTime ){
    4d78:	8a 81       	ldd	r24, Y+2	; 0x02
    4d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d7c:	89 2b       	or	r24, r25
    4d7e:	21 f0       	breq	.+8      	; 0x4d88 <Icusw_enuGetTotalTimeMilliSeconds+0x28>
    4d80:	8c 81       	ldd	r24, Y+4	; 0x04
    4d82:	9d 81       	ldd	r25, Y+5	; 0x05
    4d84:	89 2b       	or	r24, r25
    4d86:	19 f4       	brne	.+6      	; 0x4d8e <Icusw_enuGetTotalTimeMilliSeconds+0x2e>
		Loc_enuIcuswStatus = ICUSW_STATUS_NULL_POINTER_ADDRESS;
    4d88:	82 e0       	ldi	r24, 0x02	; 2
    4d8a:	89 83       	std	Y+1, r24	; 0x01
    4d8c:	0f c0       	rjmp	.+30     	; 0x4dac <Icusw_enuGetTotalTimeMilliSeconds+0x4c>
	}
	else{
		*Address_TotalTime = Global_StaticU32TotalTime;
    4d8e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Global_StaticU32TotalTime>
    4d92:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <Global_StaticU32TotalTime+0x1>
    4d96:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <Global_StaticU32TotalTime+0x2>
    4d9a:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <Global_StaticU32TotalTime+0x3>
    4d9e:	2c 81       	ldd	r18, Y+4	; 0x04
    4da0:	3d 81       	ldd	r19, Y+5	; 0x05
    4da2:	f9 01       	movw	r30, r18
    4da4:	80 83       	st	Z, r24
    4da6:	91 83       	std	Z+1, r25	; 0x01
    4da8:	a2 83       	std	Z+2, r26	; 0x02
    4daa:	b3 83       	std	Z+3, r27	; 0x03
	}

	return Loc_enuIcuswStatus;
    4dac:	89 81       	ldd	r24, Y+1	; 0x01
}
    4dae:	0f 90       	pop	r0
    4db0:	0f 90       	pop	r0
    4db2:	0f 90       	pop	r0
    4db4:	0f 90       	pop	r0
    4db6:	0f 90       	pop	r0
    4db8:	df 91       	pop	r29
    4dba:	cf 91       	pop	r28
    4dbc:	08 95       	ret

00004dbe <Icusw_enuGetDutyCycleMilliSeconds>:

Icusw_StatusErrorType Icusw_enuGetDutyCycleMilliSeconds(Icusw_ConfigType* Address_Icusw, u32* Address_DutyTime){
    4dbe:	cf 93       	push	r28
    4dc0:	df 93       	push	r29
    4dc2:	00 d0       	rcall	.+0      	; 0x4dc4 <Icusw_enuGetDutyCycleMilliSeconds+0x6>
    4dc4:	00 d0       	rcall	.+0      	; 0x4dc6 <Icusw_enuGetDutyCycleMilliSeconds+0x8>
    4dc6:	1f 92       	push	r1
    4dc8:	cd b7       	in	r28, 0x3d	; 61
    4dca:	de b7       	in	r29, 0x3e	; 62
    4dcc:	9b 83       	std	Y+3, r25	; 0x03
    4dce:	8a 83       	std	Y+2, r24	; 0x02
    4dd0:	7d 83       	std	Y+5, r23	; 0x05
    4dd2:	6c 83       	std	Y+4, r22	; 0x04
	Icusw_StatusErrorType Loc_enuIcuswStatus = ICUSW_STATUS_OK;
    4dd4:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Icusw ||NULL ==Address_DutyTime){
    4dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd8:	9b 81       	ldd	r25, Y+3	; 0x03
    4dda:	89 2b       	or	r24, r25
    4ddc:	21 f0       	breq	.+8      	; 0x4de6 <Icusw_enuGetDutyCycleMilliSeconds+0x28>
    4dde:	8c 81       	ldd	r24, Y+4	; 0x04
    4de0:	9d 81       	ldd	r25, Y+5	; 0x05
    4de2:	89 2b       	or	r24, r25
    4de4:	19 f4       	brne	.+6      	; 0x4dec <Icusw_enuGetDutyCycleMilliSeconds+0x2e>
		Loc_enuIcuswStatus = ICUSW_STATUS_NULL_POINTER_ADDRESS;
    4de6:	82 e0       	ldi	r24, 0x02	; 2
    4de8:	89 83       	std	Y+1, r24	; 0x01
    4dea:	0f c0       	rjmp	.+30     	; 0x4e0a <Icusw_enuGetDutyCycleMilliSeconds+0x4c>
	}
	else{
		*Address_DutyTime = Global_StaticU32DutyTime;
    4dec:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <Global_StaticU32DutyTime>
    4df0:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <Global_StaticU32DutyTime+0x1>
    4df4:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <Global_StaticU32DutyTime+0x2>
    4df8:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <Global_StaticU32DutyTime+0x3>
    4dfc:	2c 81       	ldd	r18, Y+4	; 0x04
    4dfe:	3d 81       	ldd	r19, Y+5	; 0x05
    4e00:	f9 01       	movw	r30, r18
    4e02:	80 83       	st	Z, r24
    4e04:	91 83       	std	Z+1, r25	; 0x01
    4e06:	a2 83       	std	Z+2, r26	; 0x02
    4e08:	b3 83       	std	Z+3, r27	; 0x03
	}

	return Loc_enuIcuswStatus;
    4e0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e0c:	0f 90       	pop	r0
    4e0e:	0f 90       	pop	r0
    4e10:	0f 90       	pop	r0
    4e12:	0f 90       	pop	r0
    4e14:	0f 90       	pop	r0
    4e16:	df 91       	pop	r29
    4e18:	cf 91       	pop	r28
    4e1a:	08 95       	ret

00004e1c <Timer_voidTimerOverflowIsr>:


/************************************Static implementation ************************/

void Timer_voidTimerOverflowIsr(void){
    4e1c:	cf 93       	push	r28
    4e1e:	df 93       	push	r29
    4e20:	cd b7       	in	r28, 0x3d	; 61
    4e22:	de b7       	in	r29, 0x3e	; 62
	Global_StaticU32OverflowCounter++;
    4e24:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Global_StaticU32OverflowCounter>
    4e28:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <Global_StaticU32OverflowCounter+0x1>
    4e2c:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <Global_StaticU32OverflowCounter+0x2>
    4e30:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <Global_StaticU32OverflowCounter+0x3>
    4e34:	01 96       	adiw	r24, 0x01	; 1
    4e36:	a1 1d       	adc	r26, r1
    4e38:	b1 1d       	adc	r27, r1
    4e3a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <Global_StaticU32OverflowCounter>
    4e3e:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <Global_StaticU32OverflowCounter+0x1>
    4e42:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <Global_StaticU32OverflowCounter+0x2>
    4e46:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <Global_StaticU32OverflowCounter+0x3>

}
    4e4a:	00 00       	nop
    4e4c:	df 91       	pop	r29
    4e4e:	cf 91       	pop	r28
    4e50:	08 95       	ret

00004e52 <Icusw_voidINT0Isr>:



void Icusw_voidINT0Isr(void){
    4e52:	cf 92       	push	r12
    4e54:	df 92       	push	r13
    4e56:	ef 92       	push	r14
    4e58:	ff 92       	push	r15
    4e5a:	cf 93       	push	r28
    4e5c:	df 93       	push	r29
    4e5e:	cd b7       	in	r28, 0x3d	; 61
    4e60:	de b7       	in	r29, 0x3e	; 62

	static u16 Loc_u32OnTicks = ZERO_VALUE;
	static u16 Loc_u32TotalTicks = ZERO_VALUE;

	// first edge = Rising
	if(Loc_u8Counter == ZERO_VALUE){
    4e62:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Loc_u8Counter.1797>
    4e66:	88 23       	and	r24, r24
    4e68:	89 f5       	brne	.+98     	; 0x4ecc <Icusw_voidINT0Isr+0x7a>
		Loc_u8Counter++;
    4e6a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Loc_u8Counter.1797>
    4e6e:	8f 5f       	subi	r24, 0xFF	; 255
    4e70:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <Loc_u8Counter.1797>
		Global_StaticU32OverflowCounter = ZERO_VALUE;
    4e74:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <Global_StaticU32OverflowCounter>
    4e78:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <Global_StaticU32OverflowCounter+0x1>
    4e7c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <Global_StaticU32OverflowCounter+0x2>
    4e80:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <Global_StaticU32OverflowCounter+0x3>
		 Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_FAILING_EDGE);
    4e84:	62 e0       	ldi	r22, 0x02	; 2
    4e86:	80 e0       	ldi	r24, 0x00	; 0
    4e88:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <Exti_enuEnable>

		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){
    4e8c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <Global_StaticINTxWhichTimer>
    4e90:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <Global_StaticINTxWhichTimer+0x1>
    4e94:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <Global_StaticINTxWhichTimer+0x2>
    4e98:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <Global_StaticINTxWhichTimer+0x3>
    4e9c:	81 30       	cpi	r24, 0x01	; 1
    4e9e:	91 05       	cpc	r25, r1
    4ea0:	a1 05       	cpc	r26, r1
    4ea2:	b1 05       	cpc	r27, r1
    4ea4:	09 f4       	brne	.+2      	; 0x4ea8 <Icusw_voidINT0Isr+0x56>
    4ea6:	44 c1       	rjmp	.+648    	; 0x5130 <Icusw_voidINT0Isr+0x2de>
    4ea8:	81 30       	cpi	r24, 0x01	; 1
    4eaa:	91 05       	cpc	r25, r1
    4eac:	a1 05       	cpc	r26, r1
    4eae:	b1 05       	cpc	r27, r1
    4eb0:	30 f0       	brcs	.+12     	; 0x4ebe <Icusw_voidINT0Isr+0x6c>
    4eb2:	02 97       	sbiw	r24, 0x02	; 2
    4eb4:	a1 05       	cpc	r26, r1
    4eb6:	b1 05       	cpc	r27, r1
    4eb8:	09 f4       	brne	.+2      	; 0x4ebc <Icusw_voidINT0Isr+0x6a>
    4eba:	3c c1       	rjmp	.+632    	; 0x5134 <Icusw_voidINT0Isr+0x2e2>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;

		default:
			break;
    4ebc:	40 c1       	rjmp	.+640    	; 0x513e <Icusw_voidINT0Isr+0x2ec>
		 Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_FAILING_EDGE);

		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){

		case ICUSW_TIMER_INDEX_TIMER0 :
			Timer0_enuGetTimeElapsed(&Global_StaticTimer0, &Loc_u16FirstTicks);
    4ebe:	60 e3       	ldi	r22, 0x30	; 48
    4ec0:	71 e0       	ldi	r23, 0x01	; 1
    4ec2:	81 ea       	ldi	r24, 0xA1	; 161
    4ec4:	90 e0       	ldi	r25, 0x00	; 0
    4ec6:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <Timer0_enuGetTimeElapsed>

			break;
    4eca:	39 c1       	rjmp	.+626    	; 0x513e <Icusw_voidINT0Isr+0x2ec>
		}


	}

	else if(Loc_u8Counter == ONE_VALUE){
    4ecc:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Loc_u8Counter.1797>
    4ed0:	81 30       	cpi	r24, 0x01	; 1
    4ed2:	09 f0       	breq	.+2      	; 0x4ed6 <Icusw_voidINT0Isr+0x84>
    4ed4:	49 c0       	rjmp	.+146    	; 0x4f68 <Icusw_voidINT0Isr+0x116>

		Loc_u8Counter++;
    4ed6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Loc_u8Counter.1797>
    4eda:	8f 5f       	subi	r24, 0xFF	; 255
    4edc:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <Loc_u8Counter.1797>
		Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_RISING_EDGE);
    4ee0:	63 e0       	ldi	r22, 0x03	; 3
    4ee2:	80 e0       	ldi	r24, 0x00	; 0
    4ee4:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <Exti_enuEnable>
		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){
    4ee8:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <Global_StaticINTxWhichTimer>
    4eec:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <Global_StaticINTxWhichTimer+0x1>
    4ef0:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <Global_StaticINTxWhichTimer+0x2>
    4ef4:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <Global_StaticINTxWhichTimer+0x3>
    4ef8:	81 30       	cpi	r24, 0x01	; 1
    4efa:	91 05       	cpc	r25, r1
    4efc:	a1 05       	cpc	r26, r1
    4efe:	b1 05       	cpc	r27, r1
    4f00:	09 f4       	brne	.+2      	; 0x4f04 <Icusw_voidINT0Isr+0xb2>
    4f02:	1a c1       	rjmp	.+564    	; 0x5138 <Icusw_voidINT0Isr+0x2e6>
    4f04:	81 30       	cpi	r24, 0x01	; 1
    4f06:	91 05       	cpc	r25, r1
    4f08:	a1 05       	cpc	r26, r1
    4f0a:	b1 05       	cpc	r27, r1
    4f0c:	30 f0       	brcs	.+12     	; 0x4f1a <Icusw_voidINT0Isr+0xc8>
    4f0e:	02 97       	sbiw	r24, 0x02	; 2
    4f10:	a1 05       	cpc	r26, r1
    4f12:	b1 05       	cpc	r27, r1
    4f14:	09 f4       	brne	.+2      	; 0x4f18 <Icusw_voidINT0Isr+0xc6>
    4f16:	12 c1       	rjmp	.+548    	; 0x513c <Icusw_voidINT0Isr+0x2ea>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;

		default:
			break;
    4f18:	12 c1       	rjmp	.+548    	; 0x513e <Icusw_voidINT0Isr+0x2ec>
		Loc_u8Counter++;
		Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_RISING_EDGE);
		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){

		case ICUSW_TIMER_INDEX_TIMER0 :
			Timer0_enuGetTimeElapsed(&Global_StaticTimer0, &Loc_u16SecondTicks);
    4f1a:	62 e3       	ldi	r22, 0x32	; 50
    4f1c:	71 e0       	ldi	r23, 0x01	; 1
    4f1e:	81 ea       	ldi	r24, 0xA1	; 161
    4f20:	90 e0       	ldi	r25, 0x00	; 0
    4f22:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <Timer0_enuGetTimeElapsed>
			Loc_u32OnTicks = Loc_u16SecondTicks + (Global_StaticU32OverflowCounter*255)-Loc_u16FirstTicks;
    4f26:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Global_StaticU32OverflowCounter>
    4f2a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <Global_StaticU32OverflowCounter+0x1>
    4f2e:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <Global_StaticU32OverflowCounter+0x2>
    4f32:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <Global_StaticU32OverflowCounter+0x3>
    4f36:	4f ef       	ldi	r20, 0xFF	; 255
    4f38:	48 9f       	mul	r20, r24
    4f3a:	90 01       	movw	r18, r0
    4f3c:	49 9f       	mul	r20, r25
    4f3e:	30 0d       	add	r19, r0
    4f40:	11 24       	eor	r1, r1
    4f42:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <Loc_u16SecondTicks.1799>
    4f46:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <Loc_u16SecondTicks.1799+0x1>
    4f4a:	28 0f       	add	r18, r24
    4f4c:	39 1f       	adc	r19, r25
    4f4e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <Loc_u16FirstTicks.1798>
    4f52:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <Loc_u16FirstTicks.1798+0x1>
    4f56:	a9 01       	movw	r20, r18
    4f58:	48 1b       	sub	r20, r24
    4f5a:	59 0b       	sbc	r21, r25
    4f5c:	ca 01       	movw	r24, r20
    4f5e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <Loc_u32OnTicks.1801+0x1>
    4f62:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <Loc_u32OnTicks.1801>



			break;
    4f66:	eb c0       	rjmp	.+470    	; 0x513e <Icusw_voidINT0Isr+0x2ec>
		default:
			break;
		}
	}

	else if(Loc_u8Counter == TWO_VALUE){
    4f68:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Loc_u8Counter.1797>
    4f6c:	82 30       	cpi	r24, 0x02	; 2
    4f6e:	09 f0       	breq	.+2      	; 0x4f72 <Icusw_voidINT0Isr+0x120>
    4f70:	e6 c0       	rjmp	.+460    	; 0x513e <Icusw_voidINT0Isr+0x2ec>
		Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_FAILING_EDGE);
    4f72:	62 e0       	ldi	r22, 0x02	; 2
    4f74:	80 e0       	ldi	r24, 0x00	; 0
    4f76:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <Exti_enuEnable>

		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){
    4f7a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <Global_StaticINTxWhichTimer>
    4f7e:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <Global_StaticINTxWhichTimer+0x1>
    4f82:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <Global_StaticINTxWhichTimer+0x2>
    4f86:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <Global_StaticINTxWhichTimer+0x3>
    4f8a:	81 30       	cpi	r24, 0x01	; 1
    4f8c:	91 05       	cpc	r25, r1
    4f8e:	a1 05       	cpc	r26, r1
    4f90:	b1 05       	cpc	r27, r1
    4f92:	89 f1       	breq	.+98     	; 0x4ff6 <Icusw_voidINT0Isr+0x1a4>
    4f94:	81 30       	cpi	r24, 0x01	; 1
    4f96:	91 05       	cpc	r25, r1
    4f98:	a1 05       	cpc	r26, r1
    4f9a:	b1 05       	cpc	r27, r1
    4f9c:	28 f0       	brcs	.+10     	; 0x4fa8 <Icusw_voidINT0Isr+0x156>
    4f9e:	02 97       	sbiw	r24, 0x02	; 2
    4fa0:	a1 05       	cpc	r26, r1
    4fa2:	b1 05       	cpc	r27, r1
    4fa4:	51 f1       	breq	.+84     	; 0x4ffa <Icusw_voidINT0Isr+0x1a8>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;

		default:
			break;
    4fa6:	2a c0       	rjmp	.+84     	; 0x4ffc <Icusw_voidINT0Isr+0x1aa>
		Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_FAILING_EDGE);

		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){

		case ICUSW_TIMER_INDEX_TIMER0 :
			Timer0_enuGetTimeElapsed(&Global_StaticTimer0, &Loc_u16ThirdTicks);
    4fa8:	66 e3       	ldi	r22, 0x36	; 54
    4faa:	71 e0       	ldi	r23, 0x01	; 1
    4fac:	81 ea       	ldi	r24, 0xA1	; 161
    4fae:	90 e0       	ldi	r25, 0x00	; 0
    4fb0:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <Timer0_enuGetTimeElapsed>
			Loc_u32TotalTicks = Loc_u16ThirdTicks + (Global_StaticU32OverflowCounter*255)-Loc_u16FirstTicks;
    4fb4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Global_StaticU32OverflowCounter>
    4fb8:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <Global_StaticU32OverflowCounter+0x1>
    4fbc:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <Global_StaticU32OverflowCounter+0x2>
    4fc0:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <Global_StaticU32OverflowCounter+0x3>
    4fc4:	4f ef       	ldi	r20, 0xFF	; 255
    4fc6:	48 9f       	mul	r20, r24
    4fc8:	90 01       	movw	r18, r0
    4fca:	49 9f       	mul	r20, r25
    4fcc:	30 0d       	add	r19, r0
    4fce:	11 24       	eor	r1, r1
    4fd0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <Loc_u16ThirdTicks.1800>
    4fd4:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <Loc_u16ThirdTicks.1800+0x1>
    4fd8:	28 0f       	add	r18, r24
    4fda:	39 1f       	adc	r19, r25
    4fdc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <Loc_u16FirstTicks.1798>
    4fe0:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <Loc_u16FirstTicks.1798+0x1>
    4fe4:	a9 01       	movw	r20, r18
    4fe6:	48 1b       	sub	r20, r24
    4fe8:	59 0b       	sbc	r21, r25
    4fea:	ca 01       	movw	r24, r20
    4fec:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <Loc_u32TotalTicks.1802+0x1>
    4ff0:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <Loc_u32TotalTicks.1802>


			break;
    4ff4:	03 c0       	rjmp	.+6      	; 0x4ffc <Icusw_voidINT0Isr+0x1aa>
		case ICUSW_TIMER_INDEX_TIMER1:

			break;
    4ff6:	00 00       	nop
    4ff8:	01 c0       	rjmp	.+2      	; 0x4ffc <Icusw_voidINT0Isr+0x1aa>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;
    4ffa:	00 00       	nop

		default:
			break;
		}

		Global_StaticU32TotalTime = Loc_u32TotalTicks*ICUSW_16M_PRESCALER_DIV_1024_TIMER0;
    4ffc:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Loc_u32TotalTicks.1802>
    5000:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <Loc_u32TotalTicks.1802+0x1>
    5004:	cc 01       	movw	r24, r24
    5006:	a0 e0       	ldi	r26, 0x00	; 0
    5008:	b0 e0       	ldi	r27, 0x00	; 0
    500a:	bc 01       	movw	r22, r24
    500c:	cd 01       	movw	r24, r26
    500e:	0e 94 9a 2a 	call	0x5534	; 0x5534 <__floatunsisf>
    5012:	dc 01       	movw	r26, r24
    5014:	cb 01       	movw	r24, r22
    5016:	2f e6       	ldi	r18, 0x6F	; 111
    5018:	32 e1       	ldi	r19, 0x12	; 18
    501a:	43 e8       	ldi	r20, 0x83	; 131
    501c:	5d e3       	ldi	r21, 0x3D	; 61
    501e:	bc 01       	movw	r22, r24
    5020:	cd 01       	movw	r24, r26
    5022:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    5026:	dc 01       	movw	r26, r24
    5028:	cb 01       	movw	r24, r22
    502a:	bc 01       	movw	r22, r24
    502c:	cd 01       	movw	r24, r26
    502e:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    5032:	dc 01       	movw	r26, r24
    5034:	cb 01       	movw	r24, r22
    5036:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <Global_StaticU32TotalTime>
    503a:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <Global_StaticU32TotalTime+0x1>
    503e:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <Global_StaticU32TotalTime+0x2>
    5042:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <Global_StaticU32TotalTime+0x3>
		Global_StaticU32OnTime = Loc_u32OnTicks*ICUSW_16M_PRESCALER_DIV_1024_TIMER0 ;
    5046:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <Loc_u32OnTicks.1801>
    504a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Loc_u32OnTicks.1801+0x1>
    504e:	cc 01       	movw	r24, r24
    5050:	a0 e0       	ldi	r26, 0x00	; 0
    5052:	b0 e0       	ldi	r27, 0x00	; 0
    5054:	bc 01       	movw	r22, r24
    5056:	cd 01       	movw	r24, r26
    5058:	0e 94 9a 2a 	call	0x5534	; 0x5534 <__floatunsisf>
    505c:	dc 01       	movw	r26, r24
    505e:	cb 01       	movw	r24, r22
    5060:	2f e6       	ldi	r18, 0x6F	; 111
    5062:	32 e1       	ldi	r19, 0x12	; 18
    5064:	43 e8       	ldi	r20, 0x83	; 131
    5066:	5d e3       	ldi	r21, 0x3D	; 61
    5068:	bc 01       	movw	r22, r24
    506a:	cd 01       	movw	r24, r26
    506c:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    5070:	dc 01       	movw	r26, r24
    5072:	cb 01       	movw	r24, r22
    5074:	bc 01       	movw	r22, r24
    5076:	cd 01       	movw	r24, r26
    5078:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    507c:	dc 01       	movw	r26, r24
    507e:	cb 01       	movw	r24, r22
    5080:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <Global_StaticU32OnTime>
    5084:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <Global_StaticU32OnTime+0x1>
    5088:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <Global_StaticU32OnTime+0x2>
    508c:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <Global_StaticU32OnTime+0x3>
		Global_StaticU32DutyTime = ((f32)Global_StaticU32OnTime /Global_StaticU32TotalTime)*100;
    5090:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Global_StaticU32OnTime>
    5094:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <Global_StaticU32OnTime+0x1>
    5098:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <Global_StaticU32OnTime+0x2>
    509c:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <Global_StaticU32OnTime+0x3>
    50a0:	bc 01       	movw	r22, r24
    50a2:	cd 01       	movw	r24, r26
    50a4:	0e 94 9a 2a 	call	0x5534	; 0x5534 <__floatunsisf>
    50a8:	6b 01       	movw	r12, r22
    50aa:	7c 01       	movw	r14, r24
    50ac:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Global_StaticU32TotalTime>
    50b0:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <Global_StaticU32TotalTime+0x1>
    50b4:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <Global_StaticU32TotalTime+0x2>
    50b8:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <Global_StaticU32TotalTime+0x3>
    50bc:	bc 01       	movw	r22, r24
    50be:	cd 01       	movw	r24, r26
    50c0:	0e 94 9a 2a 	call	0x5534	; 0x5534 <__floatunsisf>
    50c4:	dc 01       	movw	r26, r24
    50c6:	cb 01       	movw	r24, r22
    50c8:	9c 01       	movw	r18, r24
    50ca:	ad 01       	movw	r20, r26
    50cc:	c7 01       	movw	r24, r14
    50ce:	b6 01       	movw	r22, r12
    50d0:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <__divsf3>
    50d4:	dc 01       	movw	r26, r24
    50d6:	cb 01       	movw	r24, r22
    50d8:	20 e0       	ldi	r18, 0x00	; 0
    50da:	30 e0       	ldi	r19, 0x00	; 0
    50dc:	48 ec       	ldi	r20, 0xC8	; 200
    50de:	52 e4       	ldi	r21, 0x42	; 66
    50e0:	bc 01       	movw	r22, r24
    50e2:	cd 01       	movw	r24, r26
    50e4:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <__mulsf3>
    50e8:	dc 01       	movw	r26, r24
    50ea:	cb 01       	movw	r24, r22
    50ec:	bc 01       	movw	r22, r24
    50ee:	cd 01       	movw	r24, r26
    50f0:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    50f4:	dc 01       	movw	r26, r24
    50f6:	cb 01       	movw	r24, r22
    50f8:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Global_StaticU32DutyTime>
    50fc:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <Global_StaticU32DutyTime+0x1>
    5100:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <Global_StaticU32DutyTime+0x2>
    5104:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <Global_StaticU32DutyTime+0x3>

		Global_StaticU32OverflowCounter = ZERO_VALUE;
    5108:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <Global_StaticU32OverflowCounter>
    510c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <Global_StaticU32OverflowCounter+0x1>
    5110:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <Global_StaticU32OverflowCounter+0x2>
    5114:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <Global_StaticU32OverflowCounter+0x3>
		Loc_u8Counter = ONE_VALUE;
    5118:	81 e0       	ldi	r24, 0x01	; 1
    511a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <Loc_u8Counter.1797>
		Loc_u16FirstTicks =Loc_u16ThirdTicks;
    511e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <Loc_u16ThirdTicks.1800>
    5122:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <Loc_u16ThirdTicks.1800+0x1>
    5126:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <Loc_u16FirstTicks.1798+0x1>
    512a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <Loc_u16FirstTicks.1798>



	}

}
    512e:	07 c0       	rjmp	.+14     	; 0x513e <Icusw_voidINT0Isr+0x2ec>
			Timer0_enuGetTimeElapsed(&Global_StaticTimer0, &Loc_u16FirstTicks);

			break;
		case ICUSW_TIMER_INDEX_TIMER1:

			break;
    5130:	00 00       	nop
    5132:	05 c0       	rjmp	.+10     	; 0x513e <Icusw_voidINT0Isr+0x2ec>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;
    5134:	00 00       	nop
    5136:	03 c0       	rjmp	.+6      	; 0x513e <Icusw_voidINT0Isr+0x2ec>


			break;
		case ICUSW_TIMER_INDEX_TIMER1:

			break;
    5138:	00 00       	nop
    513a:	01 c0       	rjmp	.+2      	; 0x513e <Icusw_voidINT0Isr+0x2ec>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;
    513c:	00 00       	nop



	}

}
    513e:	00 00       	nop
    5140:	df 91       	pop	r29
    5142:	cf 91       	pop	r28
    5144:	ff 90       	pop	r15
    5146:	ef 90       	pop	r14
    5148:	df 90       	pop	r13
    514a:	cf 90       	pop	r12
    514c:	08 95       	ret

0000514e <Icusw_voidINT1Isr>:


void Icusw_voidINT1Isr(void){
    514e:	cf 93       	push	r28
    5150:	df 93       	push	r29
    5152:	cd b7       	in	r28, 0x3d	; 61
    5154:	de b7       	in	r29, 0x3e	; 62

}
    5156:	00 00       	nop
    5158:	df 91       	pop	r29
    515a:	cf 91       	pop	r28
    515c:	08 95       	ret

0000515e <Icusw_voidINT2Isr>:
void Icusw_voidINT2Isr(void){
    515e:	cf 93       	push	r28
    5160:	df 93       	push	r29
    5162:	cd b7       	in	r28, 0x3d	; 61
    5164:	de b7       	in	r29, 0x3e	; 62

}
    5166:	00 00       	nop
    5168:	df 91       	pop	r29
    516a:	cf 91       	pop	r28
    516c:	08 95       	ret

0000516e <Button_enuRead>:



/********************************** Software Interfaces Declarations *******************/

Button_StatusErrorType Button_enuRead(const Button_ConfigType *Address_Button,Button_PressStatusType* Address_State ){
    516e:	cf 93       	push	r28
    5170:	df 93       	push	r29
    5172:	00 d0       	rcall	.+0      	; 0x5174 <Button_enuRead+0x6>
    5174:	00 d0       	rcall	.+0      	; 0x5176 <Button_enuRead+0x8>
    5176:	00 d0       	rcall	.+0      	; 0x5178 <Button_enuRead+0xa>
    5178:	cd b7       	in	r28, 0x3d	; 61
    517a:	de b7       	in	r29, 0x3e	; 62
    517c:	9c 83       	std	Y+4, r25	; 0x04
    517e:	8b 83       	std	Y+3, r24	; 0x03
    5180:	7e 83       	std	Y+6, r23	; 0x06
    5182:	6d 83       	std	Y+5, r22	; 0x05

	Button_StatusErrorType Loc_enuStatus = BUTTON_STATUS_OK;
    5184:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioState = DIO_STATUS_OK;
    5186:	1a 82       	std	Y+2, r1	; 0x02
	if( NULL == Address_Button || NULL == Address_State ){
    5188:	8b 81       	ldd	r24, Y+3	; 0x03
    518a:	9c 81       	ldd	r25, Y+4	; 0x04
    518c:	89 2b       	or	r24, r25
    518e:	21 f0       	breq	.+8      	; 0x5198 <Button_enuRead+0x2a>
    5190:	8d 81       	ldd	r24, Y+5	; 0x05
    5192:	9e 81       	ldd	r25, Y+6	; 0x06
    5194:	89 2b       	or	r24, r25
    5196:	19 f4       	brne	.+6      	; 0x519e <Button_enuRead+0x30>
		Loc_enuStatus = BUTTON_STATUS_NULL_POINTER_ADDRESS;
    5198:	82 e0       	ldi	r24, 0x02	; 2
    519a:	89 83       	std	Y+1, r24	; 0x01
    519c:	31 c0       	rjmp	.+98     	; 0x5200 <Button_enuRead+0x92>

	}
	else{
	        switch(Address_Button->button_connection){
    519e:	8b 81       	ldd	r24, Y+3	; 0x03
    51a0:	9c 81       	ldd	r25, Y+4	; 0x04
    51a2:	fc 01       	movw	r30, r24
    51a4:	81 81       	ldd	r24, Z+1	; 0x01
    51a6:	88 2f       	mov	r24, r24
    51a8:	90 e0       	ldi	r25, 0x00	; 0
    51aa:	00 97       	sbiw	r24, 0x00	; 0
    51ac:	71 f0       	breq	.+28     	; 0x51ca <Button_enuRead+0x5c>
    51ae:	01 97       	sbiw	r24, 0x01	; 1
    51b0:	29 f5       	brne	.+74     	; 0x51fc <Button_enuRead+0x8e>

	            case BUTTON_CONNECTION_PULL_DOWN:
	            	Loc_enuDioState = Dio_enuReadChannel( (Address_Button->button_pin), (pu8) Address_State);
    51b2:	8b 81       	ldd	r24, Y+3	; 0x03
    51b4:	9c 81       	ldd	r25, Y+4	; 0x04
    51b6:	fc 01       	movw	r30, r24
    51b8:	20 81       	ld	r18, Z
    51ba:	8d 81       	ldd	r24, Y+5	; 0x05
    51bc:	9e 81       	ldd	r25, Y+6	; 0x06
    51be:	bc 01       	movw	r22, r24
    51c0:	82 2f       	mov	r24, r18
    51c2:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <Dio_enuReadChannel>
    51c6:	8a 83       	std	Y+2, r24	; 0x02
	                break;
    51c8:	1b c0       	rjmp	.+54     	; 0x5200 <Button_enuRead+0x92>
	            case BUTTON_CONNECTION_PULL_UP:

	            	Loc_enuDioState = Dio_enuReadChannel( (Address_Button->button_pin), (pu8) Address_State);
    51ca:	8b 81       	ldd	r24, Y+3	; 0x03
    51cc:	9c 81       	ldd	r25, Y+4	; 0x04
    51ce:	fc 01       	movw	r30, r24
    51d0:	20 81       	ld	r18, Z
    51d2:	8d 81       	ldd	r24, Y+5	; 0x05
    51d4:	9e 81       	ldd	r25, Y+6	; 0x06
    51d6:	bc 01       	movw	r22, r24
    51d8:	82 2f       	mov	r24, r18
    51da:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <Dio_enuReadChannel>
    51de:	8a 83       	std	Y+2, r24	; 0x02
	                *Address_State = !(*Address_State);
    51e0:	8d 81       	ldd	r24, Y+5	; 0x05
    51e2:	9e 81       	ldd	r25, Y+6	; 0x06
    51e4:	fc 01       	movw	r30, r24
    51e6:	90 81       	ld	r25, Z
    51e8:	81 e0       	ldi	r24, 0x01	; 1
    51ea:	99 23       	and	r25, r25
    51ec:	09 f0       	breq	.+2      	; 0x51f0 <Button_enuRead+0x82>
    51ee:	80 e0       	ldi	r24, 0x00	; 0
    51f0:	28 2f       	mov	r18, r24
    51f2:	8d 81       	ldd	r24, Y+5	; 0x05
    51f4:	9e 81       	ldd	r25, Y+6	; 0x06
    51f6:	fc 01       	movw	r30, r24
    51f8:	20 83       	st	Z, r18
	                break;
    51fa:	02 c0       	rjmp	.+4      	; 0x5200 <Button_enuRead+0x92>

	            default:
	                Loc_enuStatus = BUTTON_STATUS_FAIL;
    51fc:	81 e0       	ldi	r24, 0x01	; 1
    51fe:	89 83       	std	Y+1, r24	; 0x01
	    }




	return Loc_enuStatus;
    5200:	89 81       	ldd	r24, Y+1	; 0x01

}
    5202:	26 96       	adiw	r28, 0x06	; 6
    5204:	0f b6       	in	r0, 0x3f	; 63
    5206:	f8 94       	cli
    5208:	de bf       	out	0x3e, r29	; 62
    520a:	0f be       	out	0x3f, r0	; 63
    520c:	cd bf       	out	0x3d, r28	; 61
    520e:	df 91       	pop	r29
    5210:	cf 91       	pop	r28
    5212:	08 95       	ret

00005214 <main>:
		.select_master_or_slave = SPI_SELECT_MASTER_MODE,
		.select_phase = SPI_SELECT_PHASE_SETUP_WRITE_FIRST_AT_LEADING_EDGE,
		.select_polarity = SPI_SELECT_POLARITY_IDLE_LOW_LEADING_EDGE_RISING
};

int main(void){
    5214:	cf 93       	push	r28
    5216:	df 93       	push	r29
    5218:	cd b7       	in	r28, 0x3d	; 61
    521a:	de b7       	in	r29, 0x3e	; 62
    521c:	67 97       	sbiw	r28, 0x17	; 23
    521e:	0f b6       	in	r0, 0x3f	; 63
    5220:	f8 94       	cli
    5222:	de bf       	out	0x3e, r29	; 62
    5224:	0f be       	out	0x3f, r0	; 63
    5226:	cd bf       	out	0x3d, r28	; 61

	Port_voidInit();
    5228:	0e 94 35 14 	call	0x286a	; 0x286a <Port_voidInit>
	u8 Data;
	Spi_enuInit(&Spi);
    522c:	8a ea       	ldi	r24, 0xAA	; 170
    522e:	90 e0       	ldi	r25, 0x00	; 0
    5230:	0e 94 da 11 	call	0x23b4	; 0x23b4 <Spi_enuInit>
	Lcd_4bit_enuInit(&Lcd);
    5234:	80 e9       	ldi	r24, 0x90	; 144
    5236:	90 e0       	ldi	r25, 0x00	; 0
    5238:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <Lcd_4bit_enuInit>





	u8 arr[]="Node2: Data is Sent";
    523c:	84 e1       	ldi	r24, 0x14	; 20
    523e:	ee eb       	ldi	r30, 0xBE	; 190
    5240:	f0 e0       	ldi	r31, 0x00	; 0
    5242:	de 01       	movw	r26, r28
    5244:	14 96       	adiw	r26, 0x04	; 4
    5246:	01 90       	ld	r0, Z+
    5248:	0d 92       	st	X+, r0
    524a:	8a 95       	dec	r24
    524c:	e1 f7       	brne	.-8      	; 0x5246 <main+0x32>
	int i = 0;
    524e:	1a 82       	std	Y+2, r1	; 0x02
    5250:	19 82       	std	Y+1, r1	; 0x01
	while(arr[i]){
    5252:	22 c0       	rjmp	.+68     	; 0x5298 <main+0x84>
		Spi_enuTransmitBlocking(SLAVE_SS1, arr[i++], &Data);
    5254:	89 81       	ldd	r24, Y+1	; 0x01
    5256:	9a 81       	ldd	r25, Y+2	; 0x02
    5258:	9c 01       	movw	r18, r24
    525a:	2f 5f       	subi	r18, 0xFF	; 255
    525c:	3f 4f       	sbci	r19, 0xFF	; 255
    525e:	3a 83       	std	Y+2, r19	; 0x02
    5260:	29 83       	std	Y+1, r18	; 0x01
    5262:	9e 01       	movw	r18, r28
    5264:	2c 5f       	subi	r18, 0xFC	; 252
    5266:	3f 4f       	sbci	r19, 0xFF	; 255
    5268:	82 0f       	add	r24, r18
    526a:	93 1f       	adc	r25, r19
    526c:	fc 01       	movw	r30, r24
    526e:	20 81       	ld	r18, Z
    5270:	ce 01       	movw	r24, r28
    5272:	03 96       	adiw	r24, 0x03	; 3
    5274:	ac 01       	movw	r20, r24
    5276:	62 2f       	mov	r22, r18
    5278:	80 e0       	ldi	r24, 0x00	; 0
    527a:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Spi_enuTransmitBlocking>
		Lcd_4bit_enuDisplayCharacter(&Lcd, Data);
    527e:	8b 81       	ldd	r24, Y+3	; 0x03
    5280:	68 2f       	mov	r22, r24
    5282:	80 e9       	ldi	r24, 0x90	; 144
    5284:	90 e0       	ldi	r25, 0x00	; 0
    5286:	0e 94 40 20 	call	0x4080	; 0x4080 <Lcd_4bit_enuDisplayCharacter>
		if(Data == 'l'){
    528a:	8b 81       	ldd	r24, Y+3	; 0x03
    528c:	8c 36       	cpi	r24, 0x6C	; 108
    528e:	21 f4       	brne	.+8      	; 0x5298 <main+0x84>
			Dio_enuWriteChannel(DIO_PINC0_CHANNEL16, DIO_HIGH);
    5290:	61 e0       	ldi	r22, 0x01	; 1
    5292:	80 e1       	ldi	r24, 0x10	; 16
    5294:	0e 94 64 18 	call	0x30c8	; 0x30c8 <Dio_enuWriteChannel>



	u8 arr[]="Node2: Data is Sent";
	int i = 0;
	while(arr[i]){
    5298:	9e 01       	movw	r18, r28
    529a:	2c 5f       	subi	r18, 0xFC	; 252
    529c:	3f 4f       	sbci	r19, 0xFF	; 255
    529e:	89 81       	ldd	r24, Y+1	; 0x01
    52a0:	9a 81       	ldd	r25, Y+2	; 0x02
    52a2:	82 0f       	add	r24, r18
    52a4:	93 1f       	adc	r25, r19
    52a6:	fc 01       	movw	r30, r24
    52a8:	80 81       	ld	r24, Z
    52aa:	88 23       	and	r24, r24
    52ac:	99 f6       	brne	.-90     	; 0x5254 <main+0x40>
	}
	while(1){



	}
    52ae:	ff cf       	rjmp	.-2      	; 0x52ae <main+0x9a>

000052b0 <__tablejump2__>:
    52b0:	ee 0f       	add	r30, r30
    52b2:	ff 1f       	adc	r31, r31
    52b4:	05 90       	lpm	r0, Z+
    52b6:	f4 91       	lpm	r31, Z
    52b8:	e0 2d       	mov	r30, r0
    52ba:	09 94       	ijmp

000052bc <__ashldi3>:
    52bc:	0f 93       	push	r16
    52be:	08 30       	cpi	r16, 0x08	; 8
    52c0:	90 f0       	brcs	.+36     	; 0x52e6 <__ashldi3+0x2a>
    52c2:	98 2f       	mov	r25, r24
    52c4:	87 2f       	mov	r24, r23
    52c6:	76 2f       	mov	r23, r22
    52c8:	65 2f       	mov	r22, r21
    52ca:	54 2f       	mov	r21, r20
    52cc:	43 2f       	mov	r20, r19
    52ce:	32 2f       	mov	r19, r18
    52d0:	22 27       	eor	r18, r18
    52d2:	08 50       	subi	r16, 0x08	; 8
    52d4:	f4 cf       	rjmp	.-24     	; 0x52be <__ashldi3+0x2>
    52d6:	22 0f       	add	r18, r18
    52d8:	33 1f       	adc	r19, r19
    52da:	44 1f       	adc	r20, r20
    52dc:	55 1f       	adc	r21, r21
    52de:	66 1f       	adc	r22, r22
    52e0:	77 1f       	adc	r23, r23
    52e2:	88 1f       	adc	r24, r24
    52e4:	99 1f       	adc	r25, r25
    52e6:	0a 95       	dec	r16
    52e8:	b2 f7       	brpl	.-20     	; 0x52d6 <__ashldi3+0x1a>
    52ea:	0f 91       	pop	r16
    52ec:	08 95       	ret

000052ee <__adddi3>:
    52ee:	2a 0d       	add	r18, r10
    52f0:	3b 1d       	adc	r19, r11
    52f2:	4c 1d       	adc	r20, r12
    52f4:	5d 1d       	adc	r21, r13
    52f6:	6e 1d       	adc	r22, r14
    52f8:	7f 1d       	adc	r23, r15
    52fa:	80 1f       	adc	r24, r16
    52fc:	91 1f       	adc	r25, r17
    52fe:	08 95       	ret

00005300 <__subsf3>:
    5300:	50 58       	subi	r21, 0x80	; 128

00005302 <__addsf3>:
    5302:	bb 27       	eor	r27, r27
    5304:	aa 27       	eor	r26, r26
    5306:	0e 94 98 29 	call	0x5330	; 0x5330 <__addsf3x>
    530a:	0c 94 12 2b 	jmp	0x5624	; 0x5624 <__fp_round>
    530e:	0e 94 04 2b 	call	0x5608	; 0x5608 <__fp_pscA>
    5312:	38 f0       	brcs	.+14     	; 0x5322 <__addsf3+0x20>
    5314:	0e 94 0b 2b 	call	0x5616	; 0x5616 <__fp_pscB>
    5318:	20 f0       	brcs	.+8      	; 0x5322 <__addsf3+0x20>
    531a:	39 f4       	brne	.+14     	; 0x532a <__addsf3+0x28>
    531c:	9f 3f       	cpi	r25, 0xFF	; 255
    531e:	19 f4       	brne	.+6      	; 0x5326 <__addsf3+0x24>
    5320:	26 f4       	brtc	.+8      	; 0x532a <__addsf3+0x28>
    5322:	0c 94 01 2b 	jmp	0x5602	; 0x5602 <__fp_nan>
    5326:	0e f4       	brtc	.+2      	; 0x532a <__addsf3+0x28>
    5328:	e0 95       	com	r30
    532a:	e7 fb       	bst	r30, 7
    532c:	0c 94 fb 2a 	jmp	0x55f6	; 0x55f6 <__fp_inf>

00005330 <__addsf3x>:
    5330:	e9 2f       	mov	r30, r25
    5332:	0e 94 23 2b 	call	0x5646	; 0x5646 <__fp_split3>
    5336:	58 f3       	brcs	.-42     	; 0x530e <__addsf3+0xc>
    5338:	ba 17       	cp	r27, r26
    533a:	62 07       	cpc	r22, r18
    533c:	73 07       	cpc	r23, r19
    533e:	84 07       	cpc	r24, r20
    5340:	95 07       	cpc	r25, r21
    5342:	20 f0       	brcs	.+8      	; 0x534c <__addsf3x+0x1c>
    5344:	79 f4       	brne	.+30     	; 0x5364 <__addsf3x+0x34>
    5346:	a6 f5       	brtc	.+104    	; 0x53b0 <__addsf3x+0x80>
    5348:	0c 94 45 2b 	jmp	0x568a	; 0x568a <__fp_zero>
    534c:	0e f4       	brtc	.+2      	; 0x5350 <__addsf3x+0x20>
    534e:	e0 95       	com	r30
    5350:	0b 2e       	mov	r0, r27
    5352:	ba 2f       	mov	r27, r26
    5354:	a0 2d       	mov	r26, r0
    5356:	0b 01       	movw	r0, r22
    5358:	b9 01       	movw	r22, r18
    535a:	90 01       	movw	r18, r0
    535c:	0c 01       	movw	r0, r24
    535e:	ca 01       	movw	r24, r20
    5360:	a0 01       	movw	r20, r0
    5362:	11 24       	eor	r1, r1
    5364:	ff 27       	eor	r31, r31
    5366:	59 1b       	sub	r21, r25
    5368:	99 f0       	breq	.+38     	; 0x5390 <__addsf3x+0x60>
    536a:	59 3f       	cpi	r21, 0xF9	; 249
    536c:	50 f4       	brcc	.+20     	; 0x5382 <__addsf3x+0x52>
    536e:	50 3e       	cpi	r21, 0xE0	; 224
    5370:	68 f1       	brcs	.+90     	; 0x53cc <__addsf3x+0x9c>
    5372:	1a 16       	cp	r1, r26
    5374:	f0 40       	sbci	r31, 0x00	; 0
    5376:	a2 2f       	mov	r26, r18
    5378:	23 2f       	mov	r18, r19
    537a:	34 2f       	mov	r19, r20
    537c:	44 27       	eor	r20, r20
    537e:	58 5f       	subi	r21, 0xF8	; 248
    5380:	f3 cf       	rjmp	.-26     	; 0x5368 <__addsf3x+0x38>
    5382:	46 95       	lsr	r20
    5384:	37 95       	ror	r19
    5386:	27 95       	ror	r18
    5388:	a7 95       	ror	r26
    538a:	f0 40       	sbci	r31, 0x00	; 0
    538c:	53 95       	inc	r21
    538e:	c9 f7       	brne	.-14     	; 0x5382 <__addsf3x+0x52>
    5390:	7e f4       	brtc	.+30     	; 0x53b0 <__addsf3x+0x80>
    5392:	1f 16       	cp	r1, r31
    5394:	ba 0b       	sbc	r27, r26
    5396:	62 0b       	sbc	r22, r18
    5398:	73 0b       	sbc	r23, r19
    539a:	84 0b       	sbc	r24, r20
    539c:	ba f0       	brmi	.+46     	; 0x53cc <__addsf3x+0x9c>
    539e:	91 50       	subi	r25, 0x01	; 1
    53a0:	a1 f0       	breq	.+40     	; 0x53ca <__addsf3x+0x9a>
    53a2:	ff 0f       	add	r31, r31
    53a4:	bb 1f       	adc	r27, r27
    53a6:	66 1f       	adc	r22, r22
    53a8:	77 1f       	adc	r23, r23
    53aa:	88 1f       	adc	r24, r24
    53ac:	c2 f7       	brpl	.-16     	; 0x539e <__addsf3x+0x6e>
    53ae:	0e c0       	rjmp	.+28     	; 0x53cc <__addsf3x+0x9c>
    53b0:	ba 0f       	add	r27, r26
    53b2:	62 1f       	adc	r22, r18
    53b4:	73 1f       	adc	r23, r19
    53b6:	84 1f       	adc	r24, r20
    53b8:	48 f4       	brcc	.+18     	; 0x53cc <__addsf3x+0x9c>
    53ba:	87 95       	ror	r24
    53bc:	77 95       	ror	r23
    53be:	67 95       	ror	r22
    53c0:	b7 95       	ror	r27
    53c2:	f7 95       	ror	r31
    53c4:	9e 3f       	cpi	r25, 0xFE	; 254
    53c6:	08 f0       	brcs	.+2      	; 0x53ca <__addsf3x+0x9a>
    53c8:	b0 cf       	rjmp	.-160    	; 0x532a <__addsf3+0x28>
    53ca:	93 95       	inc	r25
    53cc:	88 0f       	add	r24, r24
    53ce:	08 f0       	brcs	.+2      	; 0x53d2 <__addsf3x+0xa2>
    53d0:	99 27       	eor	r25, r25
    53d2:	ee 0f       	add	r30, r30
    53d4:	97 95       	ror	r25
    53d6:	87 95       	ror	r24
    53d8:	08 95       	ret

000053da <__cmpsf2>:
    53da:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__fp_cmp>
    53de:	08 f4       	brcc	.+2      	; 0x53e2 <__cmpsf2+0x8>
    53e0:	81 e0       	ldi	r24, 0x01	; 1
    53e2:	08 95       	ret

000053e4 <__divsf3>:
    53e4:	0e 94 06 2a 	call	0x540c	; 0x540c <__divsf3x>
    53e8:	0c 94 12 2b 	jmp	0x5624	; 0x5624 <__fp_round>
    53ec:	0e 94 0b 2b 	call	0x5616	; 0x5616 <__fp_pscB>
    53f0:	58 f0       	brcs	.+22     	; 0x5408 <__divsf3+0x24>
    53f2:	0e 94 04 2b 	call	0x5608	; 0x5608 <__fp_pscA>
    53f6:	40 f0       	brcs	.+16     	; 0x5408 <__divsf3+0x24>
    53f8:	29 f4       	brne	.+10     	; 0x5404 <__divsf3+0x20>
    53fa:	5f 3f       	cpi	r21, 0xFF	; 255
    53fc:	29 f0       	breq	.+10     	; 0x5408 <__divsf3+0x24>
    53fe:	0c 94 fb 2a 	jmp	0x55f6	; 0x55f6 <__fp_inf>
    5402:	51 11       	cpse	r21, r1
    5404:	0c 94 46 2b 	jmp	0x568c	; 0x568c <__fp_szero>
    5408:	0c 94 01 2b 	jmp	0x5602	; 0x5602 <__fp_nan>

0000540c <__divsf3x>:
    540c:	0e 94 23 2b 	call	0x5646	; 0x5646 <__fp_split3>
    5410:	68 f3       	brcs	.-38     	; 0x53ec <__divsf3+0x8>

00005412 <__divsf3_pse>:
    5412:	99 23       	and	r25, r25
    5414:	b1 f3       	breq	.-20     	; 0x5402 <__divsf3+0x1e>
    5416:	55 23       	and	r21, r21
    5418:	91 f3       	breq	.-28     	; 0x53fe <__divsf3+0x1a>
    541a:	95 1b       	sub	r25, r21
    541c:	55 0b       	sbc	r21, r21
    541e:	bb 27       	eor	r27, r27
    5420:	aa 27       	eor	r26, r26
    5422:	62 17       	cp	r22, r18
    5424:	73 07       	cpc	r23, r19
    5426:	84 07       	cpc	r24, r20
    5428:	38 f0       	brcs	.+14     	; 0x5438 <__divsf3_pse+0x26>
    542a:	9f 5f       	subi	r25, 0xFF	; 255
    542c:	5f 4f       	sbci	r21, 0xFF	; 255
    542e:	22 0f       	add	r18, r18
    5430:	33 1f       	adc	r19, r19
    5432:	44 1f       	adc	r20, r20
    5434:	aa 1f       	adc	r26, r26
    5436:	a9 f3       	breq	.-22     	; 0x5422 <__divsf3_pse+0x10>
    5438:	35 d0       	rcall	.+106    	; 0x54a4 <__divsf3_pse+0x92>
    543a:	0e 2e       	mov	r0, r30
    543c:	3a f0       	brmi	.+14     	; 0x544c <__divsf3_pse+0x3a>
    543e:	e0 e8       	ldi	r30, 0x80	; 128
    5440:	32 d0       	rcall	.+100    	; 0x54a6 <__divsf3_pse+0x94>
    5442:	91 50       	subi	r25, 0x01	; 1
    5444:	50 40       	sbci	r21, 0x00	; 0
    5446:	e6 95       	lsr	r30
    5448:	00 1c       	adc	r0, r0
    544a:	ca f7       	brpl	.-14     	; 0x543e <__divsf3_pse+0x2c>
    544c:	2b d0       	rcall	.+86     	; 0x54a4 <__divsf3_pse+0x92>
    544e:	fe 2f       	mov	r31, r30
    5450:	29 d0       	rcall	.+82     	; 0x54a4 <__divsf3_pse+0x92>
    5452:	66 0f       	add	r22, r22
    5454:	77 1f       	adc	r23, r23
    5456:	88 1f       	adc	r24, r24
    5458:	bb 1f       	adc	r27, r27
    545a:	26 17       	cp	r18, r22
    545c:	37 07       	cpc	r19, r23
    545e:	48 07       	cpc	r20, r24
    5460:	ab 07       	cpc	r26, r27
    5462:	b0 e8       	ldi	r27, 0x80	; 128
    5464:	09 f0       	breq	.+2      	; 0x5468 <__divsf3_pse+0x56>
    5466:	bb 0b       	sbc	r27, r27
    5468:	80 2d       	mov	r24, r0
    546a:	bf 01       	movw	r22, r30
    546c:	ff 27       	eor	r31, r31
    546e:	93 58       	subi	r25, 0x83	; 131
    5470:	5f 4f       	sbci	r21, 0xFF	; 255
    5472:	3a f0       	brmi	.+14     	; 0x5482 <__divsf3_pse+0x70>
    5474:	9e 3f       	cpi	r25, 0xFE	; 254
    5476:	51 05       	cpc	r21, r1
    5478:	78 f0       	brcs	.+30     	; 0x5498 <__divsf3_pse+0x86>
    547a:	0c 94 fb 2a 	jmp	0x55f6	; 0x55f6 <__fp_inf>
    547e:	0c 94 46 2b 	jmp	0x568c	; 0x568c <__fp_szero>
    5482:	5f 3f       	cpi	r21, 0xFF	; 255
    5484:	e4 f3       	brlt	.-8      	; 0x547e <__divsf3_pse+0x6c>
    5486:	98 3e       	cpi	r25, 0xE8	; 232
    5488:	d4 f3       	brlt	.-12     	; 0x547e <__divsf3_pse+0x6c>
    548a:	86 95       	lsr	r24
    548c:	77 95       	ror	r23
    548e:	67 95       	ror	r22
    5490:	b7 95       	ror	r27
    5492:	f7 95       	ror	r31
    5494:	9f 5f       	subi	r25, 0xFF	; 255
    5496:	c9 f7       	brne	.-14     	; 0x548a <__divsf3_pse+0x78>
    5498:	88 0f       	add	r24, r24
    549a:	91 1d       	adc	r25, r1
    549c:	96 95       	lsr	r25
    549e:	87 95       	ror	r24
    54a0:	97 f9       	bld	r25, 7
    54a2:	08 95       	ret
    54a4:	e1 e0       	ldi	r30, 0x01	; 1
    54a6:	66 0f       	add	r22, r22
    54a8:	77 1f       	adc	r23, r23
    54aa:	88 1f       	adc	r24, r24
    54ac:	bb 1f       	adc	r27, r27
    54ae:	62 17       	cp	r22, r18
    54b0:	73 07       	cpc	r23, r19
    54b2:	84 07       	cpc	r24, r20
    54b4:	ba 07       	cpc	r27, r26
    54b6:	20 f0       	brcs	.+8      	; 0x54c0 <__divsf3_pse+0xae>
    54b8:	62 1b       	sub	r22, r18
    54ba:	73 0b       	sbc	r23, r19
    54bc:	84 0b       	sbc	r24, r20
    54be:	ba 0b       	sbc	r27, r26
    54c0:	ee 1f       	adc	r30, r30
    54c2:	88 f7       	brcc	.-30     	; 0x54a6 <__divsf3_pse+0x94>
    54c4:	e0 95       	com	r30
    54c6:	08 95       	ret

000054c8 <__fixsfsi>:
    54c8:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <__fixunssfsi>
    54cc:	68 94       	set
    54ce:	b1 11       	cpse	r27, r1
    54d0:	0c 94 46 2b 	jmp	0x568c	; 0x568c <__fp_szero>
    54d4:	08 95       	ret

000054d6 <__fixunssfsi>:
    54d6:	0e 94 2b 2b 	call	0x5656	; 0x5656 <__fp_splitA>
    54da:	88 f0       	brcs	.+34     	; 0x54fe <__fixunssfsi+0x28>
    54dc:	9f 57       	subi	r25, 0x7F	; 127
    54de:	98 f0       	brcs	.+38     	; 0x5506 <__fixunssfsi+0x30>
    54e0:	b9 2f       	mov	r27, r25
    54e2:	99 27       	eor	r25, r25
    54e4:	b7 51       	subi	r27, 0x17	; 23
    54e6:	b0 f0       	brcs	.+44     	; 0x5514 <__fixunssfsi+0x3e>
    54e8:	e1 f0       	breq	.+56     	; 0x5522 <__fixunssfsi+0x4c>
    54ea:	66 0f       	add	r22, r22
    54ec:	77 1f       	adc	r23, r23
    54ee:	88 1f       	adc	r24, r24
    54f0:	99 1f       	adc	r25, r25
    54f2:	1a f0       	brmi	.+6      	; 0x54fa <__fixunssfsi+0x24>
    54f4:	ba 95       	dec	r27
    54f6:	c9 f7       	brne	.-14     	; 0x54ea <__fixunssfsi+0x14>
    54f8:	14 c0       	rjmp	.+40     	; 0x5522 <__fixunssfsi+0x4c>
    54fa:	b1 30       	cpi	r27, 0x01	; 1
    54fc:	91 f0       	breq	.+36     	; 0x5522 <__fixunssfsi+0x4c>
    54fe:	0e 94 45 2b 	call	0x568a	; 0x568a <__fp_zero>
    5502:	b1 e0       	ldi	r27, 0x01	; 1
    5504:	08 95       	ret
    5506:	0c 94 45 2b 	jmp	0x568a	; 0x568a <__fp_zero>
    550a:	67 2f       	mov	r22, r23
    550c:	78 2f       	mov	r23, r24
    550e:	88 27       	eor	r24, r24
    5510:	b8 5f       	subi	r27, 0xF8	; 248
    5512:	39 f0       	breq	.+14     	; 0x5522 <__fixunssfsi+0x4c>
    5514:	b9 3f       	cpi	r27, 0xF9	; 249
    5516:	cc f3       	brlt	.-14     	; 0x550a <__fixunssfsi+0x34>
    5518:	86 95       	lsr	r24
    551a:	77 95       	ror	r23
    551c:	67 95       	ror	r22
    551e:	b3 95       	inc	r27
    5520:	d9 f7       	brne	.-10     	; 0x5518 <__fixunssfsi+0x42>
    5522:	3e f4       	brtc	.+14     	; 0x5532 <__fixunssfsi+0x5c>
    5524:	90 95       	com	r25
    5526:	80 95       	com	r24
    5528:	70 95       	com	r23
    552a:	61 95       	neg	r22
    552c:	7f 4f       	sbci	r23, 0xFF	; 255
    552e:	8f 4f       	sbci	r24, 0xFF	; 255
    5530:	9f 4f       	sbci	r25, 0xFF	; 255
    5532:	08 95       	ret

00005534 <__floatunsisf>:
    5534:	e8 94       	clt
    5536:	09 c0       	rjmp	.+18     	; 0x554a <__floatsisf+0x12>

00005538 <__floatsisf>:
    5538:	97 fb       	bst	r25, 7
    553a:	3e f4       	brtc	.+14     	; 0x554a <__floatsisf+0x12>
    553c:	90 95       	com	r25
    553e:	80 95       	com	r24
    5540:	70 95       	com	r23
    5542:	61 95       	neg	r22
    5544:	7f 4f       	sbci	r23, 0xFF	; 255
    5546:	8f 4f       	sbci	r24, 0xFF	; 255
    5548:	9f 4f       	sbci	r25, 0xFF	; 255
    554a:	99 23       	and	r25, r25
    554c:	a9 f0       	breq	.+42     	; 0x5578 <__floatsisf+0x40>
    554e:	f9 2f       	mov	r31, r25
    5550:	96 e9       	ldi	r25, 0x96	; 150
    5552:	bb 27       	eor	r27, r27
    5554:	93 95       	inc	r25
    5556:	f6 95       	lsr	r31
    5558:	87 95       	ror	r24
    555a:	77 95       	ror	r23
    555c:	67 95       	ror	r22
    555e:	b7 95       	ror	r27
    5560:	f1 11       	cpse	r31, r1
    5562:	f8 cf       	rjmp	.-16     	; 0x5554 <__floatsisf+0x1c>
    5564:	fa f4       	brpl	.+62     	; 0x55a4 <__floatsisf+0x6c>
    5566:	bb 0f       	add	r27, r27
    5568:	11 f4       	brne	.+4      	; 0x556e <__floatsisf+0x36>
    556a:	60 ff       	sbrs	r22, 0
    556c:	1b c0       	rjmp	.+54     	; 0x55a4 <__floatsisf+0x6c>
    556e:	6f 5f       	subi	r22, 0xFF	; 255
    5570:	7f 4f       	sbci	r23, 0xFF	; 255
    5572:	8f 4f       	sbci	r24, 0xFF	; 255
    5574:	9f 4f       	sbci	r25, 0xFF	; 255
    5576:	16 c0       	rjmp	.+44     	; 0x55a4 <__floatsisf+0x6c>
    5578:	88 23       	and	r24, r24
    557a:	11 f0       	breq	.+4      	; 0x5580 <__floatsisf+0x48>
    557c:	96 e9       	ldi	r25, 0x96	; 150
    557e:	11 c0       	rjmp	.+34     	; 0x55a2 <__floatsisf+0x6a>
    5580:	77 23       	and	r23, r23
    5582:	21 f0       	breq	.+8      	; 0x558c <__floatsisf+0x54>
    5584:	9e e8       	ldi	r25, 0x8E	; 142
    5586:	87 2f       	mov	r24, r23
    5588:	76 2f       	mov	r23, r22
    558a:	05 c0       	rjmp	.+10     	; 0x5596 <__floatsisf+0x5e>
    558c:	66 23       	and	r22, r22
    558e:	71 f0       	breq	.+28     	; 0x55ac <__floatsisf+0x74>
    5590:	96 e8       	ldi	r25, 0x86	; 134
    5592:	86 2f       	mov	r24, r22
    5594:	70 e0       	ldi	r23, 0x00	; 0
    5596:	60 e0       	ldi	r22, 0x00	; 0
    5598:	2a f0       	brmi	.+10     	; 0x55a4 <__floatsisf+0x6c>
    559a:	9a 95       	dec	r25
    559c:	66 0f       	add	r22, r22
    559e:	77 1f       	adc	r23, r23
    55a0:	88 1f       	adc	r24, r24
    55a2:	da f7       	brpl	.-10     	; 0x559a <__floatsisf+0x62>
    55a4:	88 0f       	add	r24, r24
    55a6:	96 95       	lsr	r25
    55a8:	87 95       	ror	r24
    55aa:	97 f9       	bld	r25, 7
    55ac:	08 95       	ret

000055ae <__fp_cmp>:
    55ae:	99 0f       	add	r25, r25
    55b0:	00 08       	sbc	r0, r0
    55b2:	55 0f       	add	r21, r21
    55b4:	aa 0b       	sbc	r26, r26
    55b6:	e0 e8       	ldi	r30, 0x80	; 128
    55b8:	fe ef       	ldi	r31, 0xFE	; 254
    55ba:	16 16       	cp	r1, r22
    55bc:	17 06       	cpc	r1, r23
    55be:	e8 07       	cpc	r30, r24
    55c0:	f9 07       	cpc	r31, r25
    55c2:	c0 f0       	brcs	.+48     	; 0x55f4 <__fp_cmp+0x46>
    55c4:	12 16       	cp	r1, r18
    55c6:	13 06       	cpc	r1, r19
    55c8:	e4 07       	cpc	r30, r20
    55ca:	f5 07       	cpc	r31, r21
    55cc:	98 f0       	brcs	.+38     	; 0x55f4 <__fp_cmp+0x46>
    55ce:	62 1b       	sub	r22, r18
    55d0:	73 0b       	sbc	r23, r19
    55d2:	84 0b       	sbc	r24, r20
    55d4:	95 0b       	sbc	r25, r21
    55d6:	39 f4       	brne	.+14     	; 0x55e6 <__fp_cmp+0x38>
    55d8:	0a 26       	eor	r0, r26
    55da:	61 f0       	breq	.+24     	; 0x55f4 <__fp_cmp+0x46>
    55dc:	23 2b       	or	r18, r19
    55de:	24 2b       	or	r18, r20
    55e0:	25 2b       	or	r18, r21
    55e2:	21 f4       	brne	.+8      	; 0x55ec <__fp_cmp+0x3e>
    55e4:	08 95       	ret
    55e6:	0a 26       	eor	r0, r26
    55e8:	09 f4       	brne	.+2      	; 0x55ec <__fp_cmp+0x3e>
    55ea:	a1 40       	sbci	r26, 0x01	; 1
    55ec:	a6 95       	lsr	r26
    55ee:	8f ef       	ldi	r24, 0xFF	; 255
    55f0:	81 1d       	adc	r24, r1
    55f2:	81 1d       	adc	r24, r1
    55f4:	08 95       	ret

000055f6 <__fp_inf>:
    55f6:	97 f9       	bld	r25, 7
    55f8:	9f 67       	ori	r25, 0x7F	; 127
    55fa:	80 e8       	ldi	r24, 0x80	; 128
    55fc:	70 e0       	ldi	r23, 0x00	; 0
    55fe:	60 e0       	ldi	r22, 0x00	; 0
    5600:	08 95       	ret

00005602 <__fp_nan>:
    5602:	9f ef       	ldi	r25, 0xFF	; 255
    5604:	80 ec       	ldi	r24, 0xC0	; 192
    5606:	08 95       	ret

00005608 <__fp_pscA>:
    5608:	00 24       	eor	r0, r0
    560a:	0a 94       	dec	r0
    560c:	16 16       	cp	r1, r22
    560e:	17 06       	cpc	r1, r23
    5610:	18 06       	cpc	r1, r24
    5612:	09 06       	cpc	r0, r25
    5614:	08 95       	ret

00005616 <__fp_pscB>:
    5616:	00 24       	eor	r0, r0
    5618:	0a 94       	dec	r0
    561a:	12 16       	cp	r1, r18
    561c:	13 06       	cpc	r1, r19
    561e:	14 06       	cpc	r1, r20
    5620:	05 06       	cpc	r0, r21
    5622:	08 95       	ret

00005624 <__fp_round>:
    5624:	09 2e       	mov	r0, r25
    5626:	03 94       	inc	r0
    5628:	00 0c       	add	r0, r0
    562a:	11 f4       	brne	.+4      	; 0x5630 <__fp_round+0xc>
    562c:	88 23       	and	r24, r24
    562e:	52 f0       	brmi	.+20     	; 0x5644 <__fp_round+0x20>
    5630:	bb 0f       	add	r27, r27
    5632:	40 f4       	brcc	.+16     	; 0x5644 <__fp_round+0x20>
    5634:	bf 2b       	or	r27, r31
    5636:	11 f4       	brne	.+4      	; 0x563c <__fp_round+0x18>
    5638:	60 ff       	sbrs	r22, 0
    563a:	04 c0       	rjmp	.+8      	; 0x5644 <__fp_round+0x20>
    563c:	6f 5f       	subi	r22, 0xFF	; 255
    563e:	7f 4f       	sbci	r23, 0xFF	; 255
    5640:	8f 4f       	sbci	r24, 0xFF	; 255
    5642:	9f 4f       	sbci	r25, 0xFF	; 255
    5644:	08 95       	ret

00005646 <__fp_split3>:
    5646:	57 fd       	sbrc	r21, 7
    5648:	90 58       	subi	r25, 0x80	; 128
    564a:	44 0f       	add	r20, r20
    564c:	55 1f       	adc	r21, r21
    564e:	59 f0       	breq	.+22     	; 0x5666 <__fp_splitA+0x10>
    5650:	5f 3f       	cpi	r21, 0xFF	; 255
    5652:	71 f0       	breq	.+28     	; 0x5670 <__fp_splitA+0x1a>
    5654:	47 95       	ror	r20

00005656 <__fp_splitA>:
    5656:	88 0f       	add	r24, r24
    5658:	97 fb       	bst	r25, 7
    565a:	99 1f       	adc	r25, r25
    565c:	61 f0       	breq	.+24     	; 0x5676 <__fp_splitA+0x20>
    565e:	9f 3f       	cpi	r25, 0xFF	; 255
    5660:	79 f0       	breq	.+30     	; 0x5680 <__fp_splitA+0x2a>
    5662:	87 95       	ror	r24
    5664:	08 95       	ret
    5666:	12 16       	cp	r1, r18
    5668:	13 06       	cpc	r1, r19
    566a:	14 06       	cpc	r1, r20
    566c:	55 1f       	adc	r21, r21
    566e:	f2 cf       	rjmp	.-28     	; 0x5654 <__fp_split3+0xe>
    5670:	46 95       	lsr	r20
    5672:	f1 df       	rcall	.-30     	; 0x5656 <__fp_splitA>
    5674:	08 c0       	rjmp	.+16     	; 0x5686 <__fp_splitA+0x30>
    5676:	16 16       	cp	r1, r22
    5678:	17 06       	cpc	r1, r23
    567a:	18 06       	cpc	r1, r24
    567c:	99 1f       	adc	r25, r25
    567e:	f1 cf       	rjmp	.-30     	; 0x5662 <__fp_splitA+0xc>
    5680:	86 95       	lsr	r24
    5682:	71 05       	cpc	r23, r1
    5684:	61 05       	cpc	r22, r1
    5686:	08 94       	sec
    5688:	08 95       	ret

0000568a <__fp_zero>:
    568a:	e8 94       	clt

0000568c <__fp_szero>:
    568c:	bb 27       	eor	r27, r27
    568e:	66 27       	eor	r22, r22
    5690:	77 27       	eor	r23, r23
    5692:	cb 01       	movw	r24, r22
    5694:	97 f9       	bld	r25, 7
    5696:	08 95       	ret

00005698 <__gesf2>:
    5698:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <__fp_cmp>
    569c:	08 f4       	brcc	.+2      	; 0x56a0 <__gesf2+0x8>
    569e:	8f ef       	ldi	r24, 0xFF	; 255
    56a0:	08 95       	ret

000056a2 <__mulsf3>:
    56a2:	0e 94 64 2b 	call	0x56c8	; 0x56c8 <__mulsf3x>
    56a6:	0c 94 12 2b 	jmp	0x5624	; 0x5624 <__fp_round>
    56aa:	0e 94 04 2b 	call	0x5608	; 0x5608 <__fp_pscA>
    56ae:	38 f0       	brcs	.+14     	; 0x56be <__mulsf3+0x1c>
    56b0:	0e 94 0b 2b 	call	0x5616	; 0x5616 <__fp_pscB>
    56b4:	20 f0       	brcs	.+8      	; 0x56be <__mulsf3+0x1c>
    56b6:	95 23       	and	r25, r21
    56b8:	11 f0       	breq	.+4      	; 0x56be <__mulsf3+0x1c>
    56ba:	0c 94 fb 2a 	jmp	0x55f6	; 0x55f6 <__fp_inf>
    56be:	0c 94 01 2b 	jmp	0x5602	; 0x5602 <__fp_nan>
    56c2:	11 24       	eor	r1, r1
    56c4:	0c 94 46 2b 	jmp	0x568c	; 0x568c <__fp_szero>

000056c8 <__mulsf3x>:
    56c8:	0e 94 23 2b 	call	0x5646	; 0x5646 <__fp_split3>
    56cc:	70 f3       	brcs	.-36     	; 0x56aa <__mulsf3+0x8>

000056ce <__mulsf3_pse>:
    56ce:	95 9f       	mul	r25, r21
    56d0:	c1 f3       	breq	.-16     	; 0x56c2 <__mulsf3+0x20>
    56d2:	95 0f       	add	r25, r21
    56d4:	50 e0       	ldi	r21, 0x00	; 0
    56d6:	55 1f       	adc	r21, r21
    56d8:	62 9f       	mul	r22, r18
    56da:	f0 01       	movw	r30, r0
    56dc:	72 9f       	mul	r23, r18
    56de:	bb 27       	eor	r27, r27
    56e0:	f0 0d       	add	r31, r0
    56e2:	b1 1d       	adc	r27, r1
    56e4:	63 9f       	mul	r22, r19
    56e6:	aa 27       	eor	r26, r26
    56e8:	f0 0d       	add	r31, r0
    56ea:	b1 1d       	adc	r27, r1
    56ec:	aa 1f       	adc	r26, r26
    56ee:	64 9f       	mul	r22, r20
    56f0:	66 27       	eor	r22, r22
    56f2:	b0 0d       	add	r27, r0
    56f4:	a1 1d       	adc	r26, r1
    56f6:	66 1f       	adc	r22, r22
    56f8:	82 9f       	mul	r24, r18
    56fa:	22 27       	eor	r18, r18
    56fc:	b0 0d       	add	r27, r0
    56fe:	a1 1d       	adc	r26, r1
    5700:	62 1f       	adc	r22, r18
    5702:	73 9f       	mul	r23, r19
    5704:	b0 0d       	add	r27, r0
    5706:	a1 1d       	adc	r26, r1
    5708:	62 1f       	adc	r22, r18
    570a:	83 9f       	mul	r24, r19
    570c:	a0 0d       	add	r26, r0
    570e:	61 1d       	adc	r22, r1
    5710:	22 1f       	adc	r18, r18
    5712:	74 9f       	mul	r23, r20
    5714:	33 27       	eor	r19, r19
    5716:	a0 0d       	add	r26, r0
    5718:	61 1d       	adc	r22, r1
    571a:	23 1f       	adc	r18, r19
    571c:	84 9f       	mul	r24, r20
    571e:	60 0d       	add	r22, r0
    5720:	21 1d       	adc	r18, r1
    5722:	82 2f       	mov	r24, r18
    5724:	76 2f       	mov	r23, r22
    5726:	6a 2f       	mov	r22, r26
    5728:	11 24       	eor	r1, r1
    572a:	9f 57       	subi	r25, 0x7F	; 127
    572c:	50 40       	sbci	r21, 0x00	; 0
    572e:	9a f0       	brmi	.+38     	; 0x5756 <__mulsf3_pse+0x88>
    5730:	f1 f0       	breq	.+60     	; 0x576e <__mulsf3_pse+0xa0>
    5732:	88 23       	and	r24, r24
    5734:	4a f0       	brmi	.+18     	; 0x5748 <__mulsf3_pse+0x7a>
    5736:	ee 0f       	add	r30, r30
    5738:	ff 1f       	adc	r31, r31
    573a:	bb 1f       	adc	r27, r27
    573c:	66 1f       	adc	r22, r22
    573e:	77 1f       	adc	r23, r23
    5740:	88 1f       	adc	r24, r24
    5742:	91 50       	subi	r25, 0x01	; 1
    5744:	50 40       	sbci	r21, 0x00	; 0
    5746:	a9 f7       	brne	.-22     	; 0x5732 <__mulsf3_pse+0x64>
    5748:	9e 3f       	cpi	r25, 0xFE	; 254
    574a:	51 05       	cpc	r21, r1
    574c:	80 f0       	brcs	.+32     	; 0x576e <__mulsf3_pse+0xa0>
    574e:	0c 94 fb 2a 	jmp	0x55f6	; 0x55f6 <__fp_inf>
    5752:	0c 94 46 2b 	jmp	0x568c	; 0x568c <__fp_szero>
    5756:	5f 3f       	cpi	r21, 0xFF	; 255
    5758:	e4 f3       	brlt	.-8      	; 0x5752 <__mulsf3_pse+0x84>
    575a:	98 3e       	cpi	r25, 0xE8	; 232
    575c:	d4 f3       	brlt	.-12     	; 0x5752 <__mulsf3_pse+0x84>
    575e:	86 95       	lsr	r24
    5760:	77 95       	ror	r23
    5762:	67 95       	ror	r22
    5764:	b7 95       	ror	r27
    5766:	f7 95       	ror	r31
    5768:	e7 95       	ror	r30
    576a:	9f 5f       	subi	r25, 0xFF	; 255
    576c:	c1 f7       	brne	.-16     	; 0x575e <__mulsf3_pse+0x90>
    576e:	fe 2b       	or	r31, r30
    5770:	88 0f       	add	r24, r24
    5772:	91 1d       	adc	r25, r1
    5774:	96 95       	lsr	r25
    5776:	87 95       	ror	r24
    5778:	97 f9       	bld	r25, 7
    577a:	08 95       	ret

0000577c <sprintf>:
    577c:	ae e0       	ldi	r26, 0x0E	; 14
    577e:	b0 e0       	ldi	r27, 0x00	; 0
    5780:	e4 ec       	ldi	r30, 0xC4	; 196
    5782:	fb e2       	ldi	r31, 0x2B	; 43
    5784:	0c 94 7f 2e 	jmp	0x5cfe	; 0x5cfe <__prologue_saves__+0x1c>
    5788:	0d 89       	ldd	r16, Y+21	; 0x15
    578a:	1e 89       	ldd	r17, Y+22	; 0x16
    578c:	86 e0       	ldi	r24, 0x06	; 6
    578e:	8c 83       	std	Y+4, r24	; 0x04
    5790:	1a 83       	std	Y+2, r17	; 0x02
    5792:	09 83       	std	Y+1, r16	; 0x01
    5794:	8f ef       	ldi	r24, 0xFF	; 255
    5796:	9f e7       	ldi	r25, 0x7F	; 127
    5798:	9e 83       	std	Y+6, r25	; 0x06
    579a:	8d 83       	std	Y+5, r24	; 0x05
    579c:	ae 01       	movw	r20, r28
    579e:	47 5e       	subi	r20, 0xE7	; 231
    57a0:	5f 4f       	sbci	r21, 0xFF	; 255
    57a2:	6f 89       	ldd	r22, Y+23	; 0x17
    57a4:	78 8d       	ldd	r23, Y+24	; 0x18
    57a6:	ce 01       	movw	r24, r28
    57a8:	01 96       	adiw	r24, 0x01	; 1
    57aa:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <vfprintf>
    57ae:	ef 81       	ldd	r30, Y+7	; 0x07
    57b0:	f8 85       	ldd	r31, Y+8	; 0x08
    57b2:	e0 0f       	add	r30, r16
    57b4:	f1 1f       	adc	r31, r17
    57b6:	10 82       	st	Z, r1
    57b8:	2e 96       	adiw	r28, 0x0e	; 14
    57ba:	e4 e0       	ldi	r30, 0x04	; 4
    57bc:	0c 94 9b 2e 	jmp	0x5d36	; 0x5d36 <__epilogue_restores__+0x1c>

000057c0 <vfprintf>:
    57c0:	ab e0       	ldi	r26, 0x0B	; 11
    57c2:	b0 e0       	ldi	r27, 0x00	; 0
    57c4:	e6 ee       	ldi	r30, 0xE6	; 230
    57c6:	fb e2       	ldi	r31, 0x2B	; 43
    57c8:	0c 94 71 2e 	jmp	0x5ce2	; 0x5ce2 <__prologue_saves__>
    57cc:	6c 01       	movw	r12, r24
    57ce:	7b 01       	movw	r14, r22
    57d0:	8a 01       	movw	r16, r20
    57d2:	fc 01       	movw	r30, r24
    57d4:	17 82       	std	Z+7, r1	; 0x07
    57d6:	16 82       	std	Z+6, r1	; 0x06
    57d8:	83 81       	ldd	r24, Z+3	; 0x03
    57da:	81 ff       	sbrs	r24, 1
    57dc:	cc c1       	rjmp	.+920    	; 0x5b76 <vfprintf+0x3b6>
    57de:	ce 01       	movw	r24, r28
    57e0:	01 96       	adiw	r24, 0x01	; 1
    57e2:	3c 01       	movw	r6, r24
    57e4:	f6 01       	movw	r30, r12
    57e6:	93 81       	ldd	r25, Z+3	; 0x03
    57e8:	f7 01       	movw	r30, r14
    57ea:	93 fd       	sbrc	r25, 3
    57ec:	85 91       	lpm	r24, Z+
    57ee:	93 ff       	sbrs	r25, 3
    57f0:	81 91       	ld	r24, Z+
    57f2:	7f 01       	movw	r14, r30
    57f4:	88 23       	and	r24, r24
    57f6:	09 f4       	brne	.+2      	; 0x57fa <vfprintf+0x3a>
    57f8:	ba c1       	rjmp	.+884    	; 0x5b6e <vfprintf+0x3ae>
    57fa:	85 32       	cpi	r24, 0x25	; 37
    57fc:	39 f4       	brne	.+14     	; 0x580c <vfprintf+0x4c>
    57fe:	93 fd       	sbrc	r25, 3
    5800:	85 91       	lpm	r24, Z+
    5802:	93 ff       	sbrs	r25, 3
    5804:	81 91       	ld	r24, Z+
    5806:	7f 01       	movw	r14, r30
    5808:	85 32       	cpi	r24, 0x25	; 37
    580a:	29 f4       	brne	.+10     	; 0x5816 <vfprintf+0x56>
    580c:	b6 01       	movw	r22, r12
    580e:	90 e0       	ldi	r25, 0x00	; 0
    5810:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <fputc>
    5814:	e7 cf       	rjmp	.-50     	; 0x57e4 <vfprintf+0x24>
    5816:	91 2c       	mov	r9, r1
    5818:	21 2c       	mov	r2, r1
    581a:	31 2c       	mov	r3, r1
    581c:	ff e1       	ldi	r31, 0x1F	; 31
    581e:	f3 15       	cp	r31, r3
    5820:	d8 f0       	brcs	.+54     	; 0x5858 <vfprintf+0x98>
    5822:	8b 32       	cpi	r24, 0x2B	; 43
    5824:	79 f0       	breq	.+30     	; 0x5844 <vfprintf+0x84>
    5826:	38 f4       	brcc	.+14     	; 0x5836 <vfprintf+0x76>
    5828:	80 32       	cpi	r24, 0x20	; 32
    582a:	79 f0       	breq	.+30     	; 0x584a <vfprintf+0x8a>
    582c:	83 32       	cpi	r24, 0x23	; 35
    582e:	a1 f4       	brne	.+40     	; 0x5858 <vfprintf+0x98>
    5830:	23 2d       	mov	r18, r3
    5832:	20 61       	ori	r18, 0x10	; 16
    5834:	1d c0       	rjmp	.+58     	; 0x5870 <vfprintf+0xb0>
    5836:	8d 32       	cpi	r24, 0x2D	; 45
    5838:	61 f0       	breq	.+24     	; 0x5852 <vfprintf+0x92>
    583a:	80 33       	cpi	r24, 0x30	; 48
    583c:	69 f4       	brne	.+26     	; 0x5858 <vfprintf+0x98>
    583e:	23 2d       	mov	r18, r3
    5840:	21 60       	ori	r18, 0x01	; 1
    5842:	16 c0       	rjmp	.+44     	; 0x5870 <vfprintf+0xb0>
    5844:	83 2d       	mov	r24, r3
    5846:	82 60       	ori	r24, 0x02	; 2
    5848:	38 2e       	mov	r3, r24
    584a:	e3 2d       	mov	r30, r3
    584c:	e4 60       	ori	r30, 0x04	; 4
    584e:	3e 2e       	mov	r3, r30
    5850:	2a c0       	rjmp	.+84     	; 0x58a6 <vfprintf+0xe6>
    5852:	f3 2d       	mov	r31, r3
    5854:	f8 60       	ori	r31, 0x08	; 8
    5856:	1d c0       	rjmp	.+58     	; 0x5892 <vfprintf+0xd2>
    5858:	37 fc       	sbrc	r3, 7
    585a:	2d c0       	rjmp	.+90     	; 0x58b6 <vfprintf+0xf6>
    585c:	20 ed       	ldi	r18, 0xD0	; 208
    585e:	28 0f       	add	r18, r24
    5860:	2a 30       	cpi	r18, 0x0A	; 10
    5862:	40 f0       	brcs	.+16     	; 0x5874 <vfprintf+0xb4>
    5864:	8e 32       	cpi	r24, 0x2E	; 46
    5866:	b9 f4       	brne	.+46     	; 0x5896 <vfprintf+0xd6>
    5868:	36 fc       	sbrc	r3, 6
    586a:	81 c1       	rjmp	.+770    	; 0x5b6e <vfprintf+0x3ae>
    586c:	23 2d       	mov	r18, r3
    586e:	20 64       	ori	r18, 0x40	; 64
    5870:	32 2e       	mov	r3, r18
    5872:	19 c0       	rjmp	.+50     	; 0x58a6 <vfprintf+0xe6>
    5874:	36 fe       	sbrs	r3, 6
    5876:	06 c0       	rjmp	.+12     	; 0x5884 <vfprintf+0xc4>
    5878:	8a e0       	ldi	r24, 0x0A	; 10
    587a:	98 9e       	mul	r9, r24
    587c:	20 0d       	add	r18, r0
    587e:	11 24       	eor	r1, r1
    5880:	92 2e       	mov	r9, r18
    5882:	11 c0       	rjmp	.+34     	; 0x58a6 <vfprintf+0xe6>
    5884:	ea e0       	ldi	r30, 0x0A	; 10
    5886:	2e 9e       	mul	r2, r30
    5888:	20 0d       	add	r18, r0
    588a:	11 24       	eor	r1, r1
    588c:	22 2e       	mov	r2, r18
    588e:	f3 2d       	mov	r31, r3
    5890:	f0 62       	ori	r31, 0x20	; 32
    5892:	3f 2e       	mov	r3, r31
    5894:	08 c0       	rjmp	.+16     	; 0x58a6 <vfprintf+0xe6>
    5896:	8c 36       	cpi	r24, 0x6C	; 108
    5898:	21 f4       	brne	.+8      	; 0x58a2 <vfprintf+0xe2>
    589a:	83 2d       	mov	r24, r3
    589c:	80 68       	ori	r24, 0x80	; 128
    589e:	38 2e       	mov	r3, r24
    58a0:	02 c0       	rjmp	.+4      	; 0x58a6 <vfprintf+0xe6>
    58a2:	88 36       	cpi	r24, 0x68	; 104
    58a4:	41 f4       	brne	.+16     	; 0x58b6 <vfprintf+0xf6>
    58a6:	f7 01       	movw	r30, r14
    58a8:	93 fd       	sbrc	r25, 3
    58aa:	85 91       	lpm	r24, Z+
    58ac:	93 ff       	sbrs	r25, 3
    58ae:	81 91       	ld	r24, Z+
    58b0:	7f 01       	movw	r14, r30
    58b2:	81 11       	cpse	r24, r1
    58b4:	b3 cf       	rjmp	.-154    	; 0x581c <vfprintf+0x5c>
    58b6:	98 2f       	mov	r25, r24
    58b8:	9f 7d       	andi	r25, 0xDF	; 223
    58ba:	95 54       	subi	r25, 0x45	; 69
    58bc:	93 30       	cpi	r25, 0x03	; 3
    58be:	28 f4       	brcc	.+10     	; 0x58ca <vfprintf+0x10a>
    58c0:	0c 5f       	subi	r16, 0xFC	; 252
    58c2:	1f 4f       	sbci	r17, 0xFF	; 255
    58c4:	9f e3       	ldi	r25, 0x3F	; 63
    58c6:	99 83       	std	Y+1, r25	; 0x01
    58c8:	0d c0       	rjmp	.+26     	; 0x58e4 <vfprintf+0x124>
    58ca:	83 36       	cpi	r24, 0x63	; 99
    58cc:	31 f0       	breq	.+12     	; 0x58da <vfprintf+0x11a>
    58ce:	83 37       	cpi	r24, 0x73	; 115
    58d0:	71 f0       	breq	.+28     	; 0x58ee <vfprintf+0x12e>
    58d2:	83 35       	cpi	r24, 0x53	; 83
    58d4:	09 f0       	breq	.+2      	; 0x58d8 <vfprintf+0x118>
    58d6:	59 c0       	rjmp	.+178    	; 0x598a <vfprintf+0x1ca>
    58d8:	21 c0       	rjmp	.+66     	; 0x591c <vfprintf+0x15c>
    58da:	f8 01       	movw	r30, r16
    58dc:	80 81       	ld	r24, Z
    58de:	89 83       	std	Y+1, r24	; 0x01
    58e0:	0e 5f       	subi	r16, 0xFE	; 254
    58e2:	1f 4f       	sbci	r17, 0xFF	; 255
    58e4:	88 24       	eor	r8, r8
    58e6:	83 94       	inc	r8
    58e8:	91 2c       	mov	r9, r1
    58ea:	53 01       	movw	r10, r6
    58ec:	13 c0       	rjmp	.+38     	; 0x5914 <vfprintf+0x154>
    58ee:	28 01       	movw	r4, r16
    58f0:	f2 e0       	ldi	r31, 0x02	; 2
    58f2:	4f 0e       	add	r4, r31
    58f4:	51 1c       	adc	r5, r1
    58f6:	f8 01       	movw	r30, r16
    58f8:	a0 80       	ld	r10, Z
    58fa:	b1 80       	ldd	r11, Z+1	; 0x01
    58fc:	36 fe       	sbrs	r3, 6
    58fe:	03 c0       	rjmp	.+6      	; 0x5906 <vfprintf+0x146>
    5900:	69 2d       	mov	r22, r9
    5902:	70 e0       	ldi	r23, 0x00	; 0
    5904:	02 c0       	rjmp	.+4      	; 0x590a <vfprintf+0x14a>
    5906:	6f ef       	ldi	r22, 0xFF	; 255
    5908:	7f ef       	ldi	r23, 0xFF	; 255
    590a:	c5 01       	movw	r24, r10
    590c:	0e 94 cc 2d 	call	0x5b98	; 0x5b98 <strnlen>
    5910:	4c 01       	movw	r8, r24
    5912:	82 01       	movw	r16, r4
    5914:	f3 2d       	mov	r31, r3
    5916:	ff 77       	andi	r31, 0x7F	; 127
    5918:	3f 2e       	mov	r3, r31
    591a:	16 c0       	rjmp	.+44     	; 0x5948 <vfprintf+0x188>
    591c:	28 01       	movw	r4, r16
    591e:	22 e0       	ldi	r18, 0x02	; 2
    5920:	42 0e       	add	r4, r18
    5922:	51 1c       	adc	r5, r1
    5924:	f8 01       	movw	r30, r16
    5926:	a0 80       	ld	r10, Z
    5928:	b1 80       	ldd	r11, Z+1	; 0x01
    592a:	36 fe       	sbrs	r3, 6
    592c:	03 c0       	rjmp	.+6      	; 0x5934 <vfprintf+0x174>
    592e:	69 2d       	mov	r22, r9
    5930:	70 e0       	ldi	r23, 0x00	; 0
    5932:	02 c0       	rjmp	.+4      	; 0x5938 <vfprintf+0x178>
    5934:	6f ef       	ldi	r22, 0xFF	; 255
    5936:	7f ef       	ldi	r23, 0xFF	; 255
    5938:	c5 01       	movw	r24, r10
    593a:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <strnlen_P>
    593e:	4c 01       	movw	r8, r24
    5940:	f3 2d       	mov	r31, r3
    5942:	f0 68       	ori	r31, 0x80	; 128
    5944:	3f 2e       	mov	r3, r31
    5946:	82 01       	movw	r16, r4
    5948:	33 fc       	sbrc	r3, 3
    594a:	1b c0       	rjmp	.+54     	; 0x5982 <vfprintf+0x1c2>
    594c:	82 2d       	mov	r24, r2
    594e:	90 e0       	ldi	r25, 0x00	; 0
    5950:	88 16       	cp	r8, r24
    5952:	99 06       	cpc	r9, r25
    5954:	b0 f4       	brcc	.+44     	; 0x5982 <vfprintf+0x1c2>
    5956:	b6 01       	movw	r22, r12
    5958:	80 e2       	ldi	r24, 0x20	; 32
    595a:	90 e0       	ldi	r25, 0x00	; 0
    595c:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <fputc>
    5960:	2a 94       	dec	r2
    5962:	f4 cf       	rjmp	.-24     	; 0x594c <vfprintf+0x18c>
    5964:	f5 01       	movw	r30, r10
    5966:	37 fc       	sbrc	r3, 7
    5968:	85 91       	lpm	r24, Z+
    596a:	37 fe       	sbrs	r3, 7
    596c:	81 91       	ld	r24, Z+
    596e:	5f 01       	movw	r10, r30
    5970:	b6 01       	movw	r22, r12
    5972:	90 e0       	ldi	r25, 0x00	; 0
    5974:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <fputc>
    5978:	21 10       	cpse	r2, r1
    597a:	2a 94       	dec	r2
    597c:	21 e0       	ldi	r18, 0x01	; 1
    597e:	82 1a       	sub	r8, r18
    5980:	91 08       	sbc	r9, r1
    5982:	81 14       	cp	r8, r1
    5984:	91 04       	cpc	r9, r1
    5986:	71 f7       	brne	.-36     	; 0x5964 <vfprintf+0x1a4>
    5988:	e8 c0       	rjmp	.+464    	; 0x5b5a <vfprintf+0x39a>
    598a:	84 36       	cpi	r24, 0x64	; 100
    598c:	11 f0       	breq	.+4      	; 0x5992 <vfprintf+0x1d2>
    598e:	89 36       	cpi	r24, 0x69	; 105
    5990:	41 f5       	brne	.+80     	; 0x59e2 <vfprintf+0x222>
    5992:	f8 01       	movw	r30, r16
    5994:	37 fe       	sbrs	r3, 7
    5996:	07 c0       	rjmp	.+14     	; 0x59a6 <vfprintf+0x1e6>
    5998:	60 81       	ld	r22, Z
    599a:	71 81       	ldd	r23, Z+1	; 0x01
    599c:	82 81       	ldd	r24, Z+2	; 0x02
    599e:	93 81       	ldd	r25, Z+3	; 0x03
    59a0:	0c 5f       	subi	r16, 0xFC	; 252
    59a2:	1f 4f       	sbci	r17, 0xFF	; 255
    59a4:	08 c0       	rjmp	.+16     	; 0x59b6 <vfprintf+0x1f6>
    59a6:	60 81       	ld	r22, Z
    59a8:	71 81       	ldd	r23, Z+1	; 0x01
    59aa:	07 2e       	mov	r0, r23
    59ac:	00 0c       	add	r0, r0
    59ae:	88 0b       	sbc	r24, r24
    59b0:	99 0b       	sbc	r25, r25
    59b2:	0e 5f       	subi	r16, 0xFE	; 254
    59b4:	1f 4f       	sbci	r17, 0xFF	; 255
    59b6:	f3 2d       	mov	r31, r3
    59b8:	ff 76       	andi	r31, 0x6F	; 111
    59ba:	3f 2e       	mov	r3, r31
    59bc:	97 ff       	sbrs	r25, 7
    59be:	09 c0       	rjmp	.+18     	; 0x59d2 <vfprintf+0x212>
    59c0:	90 95       	com	r25
    59c2:	80 95       	com	r24
    59c4:	70 95       	com	r23
    59c6:	61 95       	neg	r22
    59c8:	7f 4f       	sbci	r23, 0xFF	; 255
    59ca:	8f 4f       	sbci	r24, 0xFF	; 255
    59cc:	9f 4f       	sbci	r25, 0xFF	; 255
    59ce:	f0 68       	ori	r31, 0x80	; 128
    59d0:	3f 2e       	mov	r3, r31
    59d2:	2a e0       	ldi	r18, 0x0A	; 10
    59d4:	30 e0       	ldi	r19, 0x00	; 0
    59d6:	a3 01       	movw	r20, r6
    59d8:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__ultoa_invert>
    59dc:	88 2e       	mov	r8, r24
    59de:	86 18       	sub	r8, r6
    59e0:	45 c0       	rjmp	.+138    	; 0x5a6c <vfprintf+0x2ac>
    59e2:	85 37       	cpi	r24, 0x75	; 117
    59e4:	31 f4       	brne	.+12     	; 0x59f2 <vfprintf+0x232>
    59e6:	23 2d       	mov	r18, r3
    59e8:	2f 7e       	andi	r18, 0xEF	; 239
    59ea:	b2 2e       	mov	r11, r18
    59ec:	2a e0       	ldi	r18, 0x0A	; 10
    59ee:	30 e0       	ldi	r19, 0x00	; 0
    59f0:	25 c0       	rjmp	.+74     	; 0x5a3c <vfprintf+0x27c>
    59f2:	93 2d       	mov	r25, r3
    59f4:	99 7f       	andi	r25, 0xF9	; 249
    59f6:	b9 2e       	mov	r11, r25
    59f8:	8f 36       	cpi	r24, 0x6F	; 111
    59fa:	c1 f0       	breq	.+48     	; 0x5a2c <vfprintf+0x26c>
    59fc:	18 f4       	brcc	.+6      	; 0x5a04 <vfprintf+0x244>
    59fe:	88 35       	cpi	r24, 0x58	; 88
    5a00:	79 f0       	breq	.+30     	; 0x5a20 <vfprintf+0x260>
    5a02:	b5 c0       	rjmp	.+362    	; 0x5b6e <vfprintf+0x3ae>
    5a04:	80 37       	cpi	r24, 0x70	; 112
    5a06:	19 f0       	breq	.+6      	; 0x5a0e <vfprintf+0x24e>
    5a08:	88 37       	cpi	r24, 0x78	; 120
    5a0a:	21 f0       	breq	.+8      	; 0x5a14 <vfprintf+0x254>
    5a0c:	b0 c0       	rjmp	.+352    	; 0x5b6e <vfprintf+0x3ae>
    5a0e:	e9 2f       	mov	r30, r25
    5a10:	e0 61       	ori	r30, 0x10	; 16
    5a12:	be 2e       	mov	r11, r30
    5a14:	b4 fe       	sbrs	r11, 4
    5a16:	0d c0       	rjmp	.+26     	; 0x5a32 <vfprintf+0x272>
    5a18:	fb 2d       	mov	r31, r11
    5a1a:	f4 60       	ori	r31, 0x04	; 4
    5a1c:	bf 2e       	mov	r11, r31
    5a1e:	09 c0       	rjmp	.+18     	; 0x5a32 <vfprintf+0x272>
    5a20:	34 fe       	sbrs	r3, 4
    5a22:	0a c0       	rjmp	.+20     	; 0x5a38 <vfprintf+0x278>
    5a24:	29 2f       	mov	r18, r25
    5a26:	26 60       	ori	r18, 0x06	; 6
    5a28:	b2 2e       	mov	r11, r18
    5a2a:	06 c0       	rjmp	.+12     	; 0x5a38 <vfprintf+0x278>
    5a2c:	28 e0       	ldi	r18, 0x08	; 8
    5a2e:	30 e0       	ldi	r19, 0x00	; 0
    5a30:	05 c0       	rjmp	.+10     	; 0x5a3c <vfprintf+0x27c>
    5a32:	20 e1       	ldi	r18, 0x10	; 16
    5a34:	30 e0       	ldi	r19, 0x00	; 0
    5a36:	02 c0       	rjmp	.+4      	; 0x5a3c <vfprintf+0x27c>
    5a38:	20 e1       	ldi	r18, 0x10	; 16
    5a3a:	32 e0       	ldi	r19, 0x02	; 2
    5a3c:	f8 01       	movw	r30, r16
    5a3e:	b7 fe       	sbrs	r11, 7
    5a40:	07 c0       	rjmp	.+14     	; 0x5a50 <vfprintf+0x290>
    5a42:	60 81       	ld	r22, Z
    5a44:	71 81       	ldd	r23, Z+1	; 0x01
    5a46:	82 81       	ldd	r24, Z+2	; 0x02
    5a48:	93 81       	ldd	r25, Z+3	; 0x03
    5a4a:	0c 5f       	subi	r16, 0xFC	; 252
    5a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    5a4e:	06 c0       	rjmp	.+12     	; 0x5a5c <vfprintf+0x29c>
    5a50:	60 81       	ld	r22, Z
    5a52:	71 81       	ldd	r23, Z+1	; 0x01
    5a54:	80 e0       	ldi	r24, 0x00	; 0
    5a56:	90 e0       	ldi	r25, 0x00	; 0
    5a58:	0e 5f       	subi	r16, 0xFE	; 254
    5a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    5a5c:	a3 01       	movw	r20, r6
    5a5e:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__ultoa_invert>
    5a62:	88 2e       	mov	r8, r24
    5a64:	86 18       	sub	r8, r6
    5a66:	fb 2d       	mov	r31, r11
    5a68:	ff 77       	andi	r31, 0x7F	; 127
    5a6a:	3f 2e       	mov	r3, r31
    5a6c:	36 fe       	sbrs	r3, 6
    5a6e:	0d c0       	rjmp	.+26     	; 0x5a8a <vfprintf+0x2ca>
    5a70:	23 2d       	mov	r18, r3
    5a72:	2e 7f       	andi	r18, 0xFE	; 254
    5a74:	a2 2e       	mov	r10, r18
    5a76:	89 14       	cp	r8, r9
    5a78:	58 f4       	brcc	.+22     	; 0x5a90 <vfprintf+0x2d0>
    5a7a:	34 fe       	sbrs	r3, 4
    5a7c:	0b c0       	rjmp	.+22     	; 0x5a94 <vfprintf+0x2d4>
    5a7e:	32 fc       	sbrc	r3, 2
    5a80:	09 c0       	rjmp	.+18     	; 0x5a94 <vfprintf+0x2d4>
    5a82:	83 2d       	mov	r24, r3
    5a84:	8e 7e       	andi	r24, 0xEE	; 238
    5a86:	a8 2e       	mov	r10, r24
    5a88:	05 c0       	rjmp	.+10     	; 0x5a94 <vfprintf+0x2d4>
    5a8a:	b8 2c       	mov	r11, r8
    5a8c:	a3 2c       	mov	r10, r3
    5a8e:	03 c0       	rjmp	.+6      	; 0x5a96 <vfprintf+0x2d6>
    5a90:	b8 2c       	mov	r11, r8
    5a92:	01 c0       	rjmp	.+2      	; 0x5a96 <vfprintf+0x2d6>
    5a94:	b9 2c       	mov	r11, r9
    5a96:	a4 fe       	sbrs	r10, 4
    5a98:	0f c0       	rjmp	.+30     	; 0x5ab8 <vfprintf+0x2f8>
    5a9a:	fe 01       	movw	r30, r28
    5a9c:	e8 0d       	add	r30, r8
    5a9e:	f1 1d       	adc	r31, r1
    5aa0:	80 81       	ld	r24, Z
    5aa2:	80 33       	cpi	r24, 0x30	; 48
    5aa4:	21 f4       	brne	.+8      	; 0x5aae <vfprintf+0x2ee>
    5aa6:	9a 2d       	mov	r25, r10
    5aa8:	99 7e       	andi	r25, 0xE9	; 233
    5aaa:	a9 2e       	mov	r10, r25
    5aac:	09 c0       	rjmp	.+18     	; 0x5ac0 <vfprintf+0x300>
    5aae:	a2 fe       	sbrs	r10, 2
    5ab0:	06 c0       	rjmp	.+12     	; 0x5abe <vfprintf+0x2fe>
    5ab2:	b3 94       	inc	r11
    5ab4:	b3 94       	inc	r11
    5ab6:	04 c0       	rjmp	.+8      	; 0x5ac0 <vfprintf+0x300>
    5ab8:	8a 2d       	mov	r24, r10
    5aba:	86 78       	andi	r24, 0x86	; 134
    5abc:	09 f0       	breq	.+2      	; 0x5ac0 <vfprintf+0x300>
    5abe:	b3 94       	inc	r11
    5ac0:	a3 fc       	sbrc	r10, 3
    5ac2:	11 c0       	rjmp	.+34     	; 0x5ae6 <vfprintf+0x326>
    5ac4:	a0 fe       	sbrs	r10, 0
    5ac6:	06 c0       	rjmp	.+12     	; 0x5ad4 <vfprintf+0x314>
    5ac8:	b2 14       	cp	r11, r2
    5aca:	88 f4       	brcc	.+34     	; 0x5aee <vfprintf+0x32e>
    5acc:	28 0c       	add	r2, r8
    5ace:	92 2c       	mov	r9, r2
    5ad0:	9b 18       	sub	r9, r11
    5ad2:	0e c0       	rjmp	.+28     	; 0x5af0 <vfprintf+0x330>
    5ad4:	b2 14       	cp	r11, r2
    5ad6:	60 f4       	brcc	.+24     	; 0x5af0 <vfprintf+0x330>
    5ad8:	b6 01       	movw	r22, r12
    5ada:	80 e2       	ldi	r24, 0x20	; 32
    5adc:	90 e0       	ldi	r25, 0x00	; 0
    5ade:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <fputc>
    5ae2:	b3 94       	inc	r11
    5ae4:	f7 cf       	rjmp	.-18     	; 0x5ad4 <vfprintf+0x314>
    5ae6:	b2 14       	cp	r11, r2
    5ae8:	18 f4       	brcc	.+6      	; 0x5af0 <vfprintf+0x330>
    5aea:	2b 18       	sub	r2, r11
    5aec:	02 c0       	rjmp	.+4      	; 0x5af2 <vfprintf+0x332>
    5aee:	98 2c       	mov	r9, r8
    5af0:	21 2c       	mov	r2, r1
    5af2:	a4 fe       	sbrs	r10, 4
    5af4:	10 c0       	rjmp	.+32     	; 0x5b16 <vfprintf+0x356>
    5af6:	b6 01       	movw	r22, r12
    5af8:	80 e3       	ldi	r24, 0x30	; 48
    5afa:	90 e0       	ldi	r25, 0x00	; 0
    5afc:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <fputc>
    5b00:	a2 fe       	sbrs	r10, 2
    5b02:	17 c0       	rjmp	.+46     	; 0x5b32 <vfprintf+0x372>
    5b04:	a1 fc       	sbrc	r10, 1
    5b06:	03 c0       	rjmp	.+6      	; 0x5b0e <vfprintf+0x34e>
    5b08:	88 e7       	ldi	r24, 0x78	; 120
    5b0a:	90 e0       	ldi	r25, 0x00	; 0
    5b0c:	02 c0       	rjmp	.+4      	; 0x5b12 <vfprintf+0x352>
    5b0e:	88 e5       	ldi	r24, 0x58	; 88
    5b10:	90 e0       	ldi	r25, 0x00	; 0
    5b12:	b6 01       	movw	r22, r12
    5b14:	0c c0       	rjmp	.+24     	; 0x5b2e <vfprintf+0x36e>
    5b16:	8a 2d       	mov	r24, r10
    5b18:	86 78       	andi	r24, 0x86	; 134
    5b1a:	59 f0       	breq	.+22     	; 0x5b32 <vfprintf+0x372>
    5b1c:	a1 fe       	sbrs	r10, 1
    5b1e:	02 c0       	rjmp	.+4      	; 0x5b24 <vfprintf+0x364>
    5b20:	8b e2       	ldi	r24, 0x2B	; 43
    5b22:	01 c0       	rjmp	.+2      	; 0x5b26 <vfprintf+0x366>
    5b24:	80 e2       	ldi	r24, 0x20	; 32
    5b26:	a7 fc       	sbrc	r10, 7
    5b28:	8d e2       	ldi	r24, 0x2D	; 45
    5b2a:	b6 01       	movw	r22, r12
    5b2c:	90 e0       	ldi	r25, 0x00	; 0
    5b2e:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <fputc>
    5b32:	89 14       	cp	r8, r9
    5b34:	38 f4       	brcc	.+14     	; 0x5b44 <vfprintf+0x384>
    5b36:	b6 01       	movw	r22, r12
    5b38:	80 e3       	ldi	r24, 0x30	; 48
    5b3a:	90 e0       	ldi	r25, 0x00	; 0
    5b3c:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <fputc>
    5b40:	9a 94       	dec	r9
    5b42:	f7 cf       	rjmp	.-18     	; 0x5b32 <vfprintf+0x372>
    5b44:	8a 94       	dec	r8
    5b46:	f3 01       	movw	r30, r6
    5b48:	e8 0d       	add	r30, r8
    5b4a:	f1 1d       	adc	r31, r1
    5b4c:	80 81       	ld	r24, Z
    5b4e:	b6 01       	movw	r22, r12
    5b50:	90 e0       	ldi	r25, 0x00	; 0
    5b52:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <fputc>
    5b56:	81 10       	cpse	r8, r1
    5b58:	f5 cf       	rjmp	.-22     	; 0x5b44 <vfprintf+0x384>
    5b5a:	22 20       	and	r2, r2
    5b5c:	09 f4       	brne	.+2      	; 0x5b60 <vfprintf+0x3a0>
    5b5e:	42 ce       	rjmp	.-892    	; 0x57e4 <vfprintf+0x24>
    5b60:	b6 01       	movw	r22, r12
    5b62:	80 e2       	ldi	r24, 0x20	; 32
    5b64:	90 e0       	ldi	r25, 0x00	; 0
    5b66:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <fputc>
    5b6a:	2a 94       	dec	r2
    5b6c:	f6 cf       	rjmp	.-20     	; 0x5b5a <vfprintf+0x39a>
    5b6e:	f6 01       	movw	r30, r12
    5b70:	86 81       	ldd	r24, Z+6	; 0x06
    5b72:	97 81       	ldd	r25, Z+7	; 0x07
    5b74:	02 c0       	rjmp	.+4      	; 0x5b7a <vfprintf+0x3ba>
    5b76:	8f ef       	ldi	r24, 0xFF	; 255
    5b78:	9f ef       	ldi	r25, 0xFF	; 255
    5b7a:	2b 96       	adiw	r28, 0x0b	; 11
    5b7c:	e2 e1       	ldi	r30, 0x12	; 18
    5b7e:	0c 94 8d 2e 	jmp	0x5d1a	; 0x5d1a <__epilogue_restores__>

00005b82 <strnlen_P>:
    5b82:	fc 01       	movw	r30, r24
    5b84:	05 90       	lpm	r0, Z+
    5b86:	61 50       	subi	r22, 0x01	; 1
    5b88:	70 40       	sbci	r23, 0x00	; 0
    5b8a:	01 10       	cpse	r0, r1
    5b8c:	d8 f7       	brcc	.-10     	; 0x5b84 <strnlen_P+0x2>
    5b8e:	80 95       	com	r24
    5b90:	90 95       	com	r25
    5b92:	8e 0f       	add	r24, r30
    5b94:	9f 1f       	adc	r25, r31
    5b96:	08 95       	ret

00005b98 <strnlen>:
    5b98:	fc 01       	movw	r30, r24
    5b9a:	61 50       	subi	r22, 0x01	; 1
    5b9c:	70 40       	sbci	r23, 0x00	; 0
    5b9e:	01 90       	ld	r0, Z+
    5ba0:	01 10       	cpse	r0, r1
    5ba2:	d8 f7       	brcc	.-10     	; 0x5b9a <strnlen+0x2>
    5ba4:	80 95       	com	r24
    5ba6:	90 95       	com	r25
    5ba8:	8e 0f       	add	r24, r30
    5baa:	9f 1f       	adc	r25, r31
    5bac:	08 95       	ret

00005bae <fputc>:
    5bae:	0f 93       	push	r16
    5bb0:	1f 93       	push	r17
    5bb2:	cf 93       	push	r28
    5bb4:	df 93       	push	r29
    5bb6:	fb 01       	movw	r30, r22
    5bb8:	23 81       	ldd	r18, Z+3	; 0x03
    5bba:	21 fd       	sbrc	r18, 1
    5bbc:	03 c0       	rjmp	.+6      	; 0x5bc4 <fputc+0x16>
    5bbe:	8f ef       	ldi	r24, 0xFF	; 255
    5bc0:	9f ef       	ldi	r25, 0xFF	; 255
    5bc2:	2c c0       	rjmp	.+88     	; 0x5c1c <fputc+0x6e>
    5bc4:	22 ff       	sbrs	r18, 2
    5bc6:	16 c0       	rjmp	.+44     	; 0x5bf4 <fputc+0x46>
    5bc8:	46 81       	ldd	r20, Z+6	; 0x06
    5bca:	57 81       	ldd	r21, Z+7	; 0x07
    5bcc:	24 81       	ldd	r18, Z+4	; 0x04
    5bce:	35 81       	ldd	r19, Z+5	; 0x05
    5bd0:	42 17       	cp	r20, r18
    5bd2:	53 07       	cpc	r21, r19
    5bd4:	44 f4       	brge	.+16     	; 0x5be6 <fputc+0x38>
    5bd6:	a0 81       	ld	r26, Z
    5bd8:	b1 81       	ldd	r27, Z+1	; 0x01
    5bda:	9d 01       	movw	r18, r26
    5bdc:	2f 5f       	subi	r18, 0xFF	; 255
    5bde:	3f 4f       	sbci	r19, 0xFF	; 255
    5be0:	31 83       	std	Z+1, r19	; 0x01
    5be2:	20 83       	st	Z, r18
    5be4:	8c 93       	st	X, r24
    5be6:	26 81       	ldd	r18, Z+6	; 0x06
    5be8:	37 81       	ldd	r19, Z+7	; 0x07
    5bea:	2f 5f       	subi	r18, 0xFF	; 255
    5bec:	3f 4f       	sbci	r19, 0xFF	; 255
    5bee:	37 83       	std	Z+7, r19	; 0x07
    5bf0:	26 83       	std	Z+6, r18	; 0x06
    5bf2:	14 c0       	rjmp	.+40     	; 0x5c1c <fputc+0x6e>
    5bf4:	8b 01       	movw	r16, r22
    5bf6:	ec 01       	movw	r28, r24
    5bf8:	fb 01       	movw	r30, r22
    5bfa:	00 84       	ldd	r0, Z+8	; 0x08
    5bfc:	f1 85       	ldd	r31, Z+9	; 0x09
    5bfe:	e0 2d       	mov	r30, r0
    5c00:	09 95       	icall
    5c02:	89 2b       	or	r24, r25
    5c04:	e1 f6       	brne	.-72     	; 0x5bbe <fputc+0x10>
    5c06:	d8 01       	movw	r26, r16
    5c08:	16 96       	adiw	r26, 0x06	; 6
    5c0a:	8d 91       	ld	r24, X+
    5c0c:	9c 91       	ld	r25, X
    5c0e:	17 97       	sbiw	r26, 0x07	; 7
    5c10:	01 96       	adiw	r24, 0x01	; 1
    5c12:	17 96       	adiw	r26, 0x07	; 7
    5c14:	9c 93       	st	X, r25
    5c16:	8e 93       	st	-X, r24
    5c18:	16 97       	sbiw	r26, 0x06	; 6
    5c1a:	ce 01       	movw	r24, r28
    5c1c:	df 91       	pop	r29
    5c1e:	cf 91       	pop	r28
    5c20:	1f 91       	pop	r17
    5c22:	0f 91       	pop	r16
    5c24:	08 95       	ret

00005c26 <__ultoa_invert>:
    5c26:	fa 01       	movw	r30, r20
    5c28:	aa 27       	eor	r26, r26
    5c2a:	28 30       	cpi	r18, 0x08	; 8
    5c2c:	51 f1       	breq	.+84     	; 0x5c82 <__ultoa_invert+0x5c>
    5c2e:	20 31       	cpi	r18, 0x10	; 16
    5c30:	81 f1       	breq	.+96     	; 0x5c92 <__ultoa_invert+0x6c>
    5c32:	e8 94       	clt
    5c34:	6f 93       	push	r22
    5c36:	6e 7f       	andi	r22, 0xFE	; 254
    5c38:	6e 5f       	subi	r22, 0xFE	; 254
    5c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    5c3c:	8f 4f       	sbci	r24, 0xFF	; 255
    5c3e:	9f 4f       	sbci	r25, 0xFF	; 255
    5c40:	af 4f       	sbci	r26, 0xFF	; 255
    5c42:	b1 e0       	ldi	r27, 0x01	; 1
    5c44:	3e d0       	rcall	.+124    	; 0x5cc2 <__ultoa_invert+0x9c>
    5c46:	b4 e0       	ldi	r27, 0x04	; 4
    5c48:	3c d0       	rcall	.+120    	; 0x5cc2 <__ultoa_invert+0x9c>
    5c4a:	67 0f       	add	r22, r23
    5c4c:	78 1f       	adc	r23, r24
    5c4e:	89 1f       	adc	r24, r25
    5c50:	9a 1f       	adc	r25, r26
    5c52:	a1 1d       	adc	r26, r1
    5c54:	68 0f       	add	r22, r24
    5c56:	79 1f       	adc	r23, r25
    5c58:	8a 1f       	adc	r24, r26
    5c5a:	91 1d       	adc	r25, r1
    5c5c:	a1 1d       	adc	r26, r1
    5c5e:	6a 0f       	add	r22, r26
    5c60:	71 1d       	adc	r23, r1
    5c62:	81 1d       	adc	r24, r1
    5c64:	91 1d       	adc	r25, r1
    5c66:	a1 1d       	adc	r26, r1
    5c68:	20 d0       	rcall	.+64     	; 0x5caa <__ultoa_invert+0x84>
    5c6a:	09 f4       	brne	.+2      	; 0x5c6e <__ultoa_invert+0x48>
    5c6c:	68 94       	set
    5c6e:	3f 91       	pop	r19
    5c70:	2a e0       	ldi	r18, 0x0A	; 10
    5c72:	26 9f       	mul	r18, r22
    5c74:	11 24       	eor	r1, r1
    5c76:	30 19       	sub	r19, r0
    5c78:	30 5d       	subi	r19, 0xD0	; 208
    5c7a:	31 93       	st	Z+, r19
    5c7c:	de f6       	brtc	.-74     	; 0x5c34 <__ultoa_invert+0xe>
    5c7e:	cf 01       	movw	r24, r30
    5c80:	08 95       	ret
    5c82:	46 2f       	mov	r20, r22
    5c84:	47 70       	andi	r20, 0x07	; 7
    5c86:	40 5d       	subi	r20, 0xD0	; 208
    5c88:	41 93       	st	Z+, r20
    5c8a:	b3 e0       	ldi	r27, 0x03	; 3
    5c8c:	0f d0       	rcall	.+30     	; 0x5cac <__ultoa_invert+0x86>
    5c8e:	c9 f7       	brne	.-14     	; 0x5c82 <__ultoa_invert+0x5c>
    5c90:	f6 cf       	rjmp	.-20     	; 0x5c7e <__ultoa_invert+0x58>
    5c92:	46 2f       	mov	r20, r22
    5c94:	4f 70       	andi	r20, 0x0F	; 15
    5c96:	40 5d       	subi	r20, 0xD0	; 208
    5c98:	4a 33       	cpi	r20, 0x3A	; 58
    5c9a:	18 f0       	brcs	.+6      	; 0x5ca2 <__ultoa_invert+0x7c>
    5c9c:	49 5d       	subi	r20, 0xD9	; 217
    5c9e:	31 fd       	sbrc	r19, 1
    5ca0:	40 52       	subi	r20, 0x20	; 32
    5ca2:	41 93       	st	Z+, r20
    5ca4:	02 d0       	rcall	.+4      	; 0x5caa <__ultoa_invert+0x84>
    5ca6:	a9 f7       	brne	.-22     	; 0x5c92 <__ultoa_invert+0x6c>
    5ca8:	ea cf       	rjmp	.-44     	; 0x5c7e <__ultoa_invert+0x58>
    5caa:	b4 e0       	ldi	r27, 0x04	; 4
    5cac:	a6 95       	lsr	r26
    5cae:	97 95       	ror	r25
    5cb0:	87 95       	ror	r24
    5cb2:	77 95       	ror	r23
    5cb4:	67 95       	ror	r22
    5cb6:	ba 95       	dec	r27
    5cb8:	c9 f7       	brne	.-14     	; 0x5cac <__ultoa_invert+0x86>
    5cba:	00 97       	sbiw	r24, 0x00	; 0
    5cbc:	61 05       	cpc	r22, r1
    5cbe:	71 05       	cpc	r23, r1
    5cc0:	08 95       	ret
    5cc2:	9b 01       	movw	r18, r22
    5cc4:	ac 01       	movw	r20, r24
    5cc6:	0a 2e       	mov	r0, r26
    5cc8:	06 94       	lsr	r0
    5cca:	57 95       	ror	r21
    5ccc:	47 95       	ror	r20
    5cce:	37 95       	ror	r19
    5cd0:	27 95       	ror	r18
    5cd2:	ba 95       	dec	r27
    5cd4:	c9 f7       	brne	.-14     	; 0x5cc8 <__ultoa_invert+0xa2>
    5cd6:	62 0f       	add	r22, r18
    5cd8:	73 1f       	adc	r23, r19
    5cda:	84 1f       	adc	r24, r20
    5cdc:	95 1f       	adc	r25, r21
    5cde:	a0 1d       	adc	r26, r0
    5ce0:	08 95       	ret

00005ce2 <__prologue_saves__>:
    5ce2:	2f 92       	push	r2
    5ce4:	3f 92       	push	r3
    5ce6:	4f 92       	push	r4
    5ce8:	5f 92       	push	r5
    5cea:	6f 92       	push	r6
    5cec:	7f 92       	push	r7
    5cee:	8f 92       	push	r8
    5cf0:	9f 92       	push	r9
    5cf2:	af 92       	push	r10
    5cf4:	bf 92       	push	r11
    5cf6:	cf 92       	push	r12
    5cf8:	df 92       	push	r13
    5cfa:	ef 92       	push	r14
    5cfc:	ff 92       	push	r15
    5cfe:	0f 93       	push	r16
    5d00:	1f 93       	push	r17
    5d02:	cf 93       	push	r28
    5d04:	df 93       	push	r29
    5d06:	cd b7       	in	r28, 0x3d	; 61
    5d08:	de b7       	in	r29, 0x3e	; 62
    5d0a:	ca 1b       	sub	r28, r26
    5d0c:	db 0b       	sbc	r29, r27
    5d0e:	0f b6       	in	r0, 0x3f	; 63
    5d10:	f8 94       	cli
    5d12:	de bf       	out	0x3e, r29	; 62
    5d14:	0f be       	out	0x3f, r0	; 63
    5d16:	cd bf       	out	0x3d, r28	; 61
    5d18:	09 94       	ijmp

00005d1a <__epilogue_restores__>:
    5d1a:	2a 88       	ldd	r2, Y+18	; 0x12
    5d1c:	39 88       	ldd	r3, Y+17	; 0x11
    5d1e:	48 88       	ldd	r4, Y+16	; 0x10
    5d20:	5f 84       	ldd	r5, Y+15	; 0x0f
    5d22:	6e 84       	ldd	r6, Y+14	; 0x0e
    5d24:	7d 84       	ldd	r7, Y+13	; 0x0d
    5d26:	8c 84       	ldd	r8, Y+12	; 0x0c
    5d28:	9b 84       	ldd	r9, Y+11	; 0x0b
    5d2a:	aa 84       	ldd	r10, Y+10	; 0x0a
    5d2c:	b9 84       	ldd	r11, Y+9	; 0x09
    5d2e:	c8 84       	ldd	r12, Y+8	; 0x08
    5d30:	df 80       	ldd	r13, Y+7	; 0x07
    5d32:	ee 80       	ldd	r14, Y+6	; 0x06
    5d34:	fd 80       	ldd	r15, Y+5	; 0x05
    5d36:	0c 81       	ldd	r16, Y+4	; 0x04
    5d38:	1b 81       	ldd	r17, Y+3	; 0x03
    5d3a:	aa 81       	ldd	r26, Y+2	; 0x02
    5d3c:	b9 81       	ldd	r27, Y+1	; 0x01
    5d3e:	ce 0f       	add	r28, r30
    5d40:	d1 1d       	adc	r29, r1
    5d42:	0f b6       	in	r0, 0x3f	; 63
    5d44:	f8 94       	cli
    5d46:	de bf       	out	0x3e, r29	; 62
    5d48:	0f be       	out	0x3f, r0	; 63
    5d4a:	cd bf       	out	0x3d, r28	; 61
    5d4c:	ed 01       	movw	r28, r26
    5d4e:	08 95       	ret

00005d50 <_exit>:
    5d50:	f8 94       	cli

00005d52 <__stop_program>:
    5d52:	ff cf       	rjmp	.-2      	; 0x5d52 <__stop_program>
