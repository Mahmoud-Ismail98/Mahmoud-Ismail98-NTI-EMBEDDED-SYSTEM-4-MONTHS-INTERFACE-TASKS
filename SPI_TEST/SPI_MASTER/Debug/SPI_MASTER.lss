
SPI_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002668  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002668  000026dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000021cc  00000000  00000000  000026f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000012ec  00000000  00000000  000048bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000898c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000973c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000989c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a2f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 be 12 	call	0x257c	; 0x257c <main>
      7a:	0c 94 32 13 	jmp	0x2664	; 0x2664 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac e6       	ldi	r26, 0x6C	; 108
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 17 13 	jmp	0x262e	; 0x262e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 07 13 	jmp	0x260e	; 0x260e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 07 13 	jmp	0x260e	; 0x260e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c e6       	ldi	r24, 0x6C	; 108
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 17 13 	jmp	0x262e	; 0x262e <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 07 13 	jmp	0x260e	; 0x260e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 07 13 	jmp	0x260e	; 0x260e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 07 13 	jmp	0x260e	; 0x260e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 27 13 	jmp	0x264e	; 0x264e <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <SPI_voidMasterInit>:
#include "../Include/SPI_interface.h"
#include "../Include/SPI_private.h"
#include "../Include/SPI_config.h"

void SPI_voidMasterInit(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
    /* select the clk prescaler */
    #if   SPI_u8_CLK_PRESCALING == SPI_CLK_PRESC_4
        CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_SPR0_BIT);
     b3e:	ad e2       	ldi	r26, 0x2D	; 45
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	ed e2       	ldi	r30, 0x2D	; 45
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8e 7f       	andi	r24, 0xFE	; 254
     b4a:	8c 93       	st	X, r24
        CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_SPR1_BIT);
     b4c:	ad e2       	ldi	r26, 0x2D	; 45
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	ed e2       	ldi	r30, 0x2D	; 45
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	8d 7f       	andi	r24, 0xFD	; 253
     b58:	8c 93       	st	X, r24
        SET_BIT(SPI_u8_SPCR_REG,SPI_u8_SPR0_BIT);
        SET_BIT(SPI_u8_SPCR_REG,SPI_u8_SPR1_BIT);
    #endif
    /* select the clock phase */
    #if   SPI_u8_CLOCK_PHASE == SPI_SAMPLE_SETUP
        CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_CPHA_BIT);
     b5a:	ad e2       	ldi	r26, 0x2D	; 45
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ed e2       	ldi	r30, 0x2D	; 45
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	8b 7f       	andi	r24, 0xFB	; 251
     b66:	8c 93       	st	X, r24
    #elif SPI_u8_CLOCK_PHASE == SPI_SETUP_SAMPLE
        SET_BIT(SPI_u8_SPCR_REG,SPI_u8_CPHA_BIT);
    #endif
    /* select the clock polarity */
    #if   SPI_u8_CLOCK_POLARITY == SPI_RISING_FALLING
        CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_CPOL_BIT);
     b68:	ad e2       	ldi	r26, 0x2D	; 45
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	ed e2       	ldi	r30, 0x2D	; 45
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	87 7f       	andi	r24, 0xF7	; 247
     b74:	8c 93       	st	X, r24
    #elif SPI_u8_CLOCK_POLARITY == SPI_FALLING_RISING
        SET_BIT(SPI_u8_SPCR_REG,SPI_u8_CPOL_BIT);
    #endif
    /* select the shifting register */
    #if   SPI_u8_SHIFTING_MODE == SPI_SHIFTING_LSB
        SET_BIT(SPI_u8_SPCR_REG,SPI_u8_DORD_BIT);
     b76:	ad e2       	ldi	r26, 0x2D	; 45
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	ed e2       	ldi	r30, 0x2D	; 45
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	80 62       	ori	r24, 0x20	; 32
     b82:	8c 93       	st	X, r24
    #elif SPI_u8_SHIFTING_MODE == SPI_SHIFTING_MSB
        CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_DORD_BIT);
    #endif
    /* initial as master */
    SET_BIT(SPI_u8_SPCR_REG,SPI_u8_MSTR_BIT);
     b84:	ad e2       	ldi	r26, 0x2D	; 45
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	ed e2       	ldi	r30, 0x2D	; 45
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	80 61       	ori	r24, 0x10	; 16
     b90:	8c 93       	st	X, r24
    /* enable SPI */
    SET_BIT(SPI_u8_SPCR_REG,SPI_u8_SPE_BIT);
     b92:	ad e2       	ldi	r26, 0x2D	; 45
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	ed e2       	ldi	r30, 0x2D	; 45
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	80 64       	ori	r24, 0x40	; 64
     b9e:	8c 93       	st	X, r24
}
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <SPI_voidSlaveInit>:

void SPI_voidSlaveInit(void)
{
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
    /* select the clock phase */
    #if   SPI_u8_CLOCK_PHASE == SPI_SAMPLE_SETUP
        CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_CPHA_BIT);
     bae:	ad e2       	ldi	r26, 0x2D	; 45
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	ed e2       	ldi	r30, 0x2D	; 45
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	8b 7f       	andi	r24, 0xFB	; 251
     bba:	8c 93       	st	X, r24
    #elif SPI_u8_CLOCK_PHASE == SPI_SETUP_SAMPLE
        SET_BIT(SPI_u8_SPCR_REG,SPI_u8_CPHA_BIT);
    #endif
    /* select the clock polarity */
    #if   SPI_u8_CLOCK_POLARITY == SPI_RISING_FALLING
        CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_CPOL_BIT);
     bbc:	ad e2       	ldi	r26, 0x2D	; 45
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	ed e2       	ldi	r30, 0x2D	; 45
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	87 7f       	andi	r24, 0xF7	; 247
     bc8:	8c 93       	st	X, r24
    #elif SPI_u8_CLOCK_POLARITY == SPI_FALLING_RISING
        SET_BIT(SPI_u8_SPCR_REG,SPI_u8_CPOL_BIT);
    #endif
    /* select the shifting register */
    #if   SPI_u8_SHIFTING_MODE == SPI_SHIFTING_LSB
        SET_BIT(SPI_u8_SPCR_REG,SPI_u8_DORD_BIT);
     bca:	ad e2       	ldi	r26, 0x2D	; 45
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	ed e2       	ldi	r30, 0x2D	; 45
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	80 62       	ori	r24, 0x20	; 32
     bd6:	8c 93       	st	X, r24
    #elif SPI_u8_SHIFTING_MODE == SPI_SHIFTING_MSB
        CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_DORD_BIT);
    #endif
    /* initial as slave */
    CLR_BIT(SPI_u8_SPCR_REG,SPI_u8_MSTR_BIT);
     bd8:	ad e2       	ldi	r26, 0x2D	; 45
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	ed e2       	ldi	r30, 0x2D	; 45
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	8f 7e       	andi	r24, 0xEF	; 239
     be4:	8c 93       	st	X, r24
    /* enable SPI */
    SET_BIT(SPI_u8_SPCR_REG,SPI_u8_SPE_BIT);
     be6:	ad e2       	ldi	r26, 0x2D	; 45
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	ed e2       	ldi	r30, 0x2D	; 45
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	80 64       	ori	r24, 0x40	; 64
     bf2:	8c 93       	st	X, r24
}
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	08 95       	ret

00000bfa <SPI_SPIEnumSendReceiveData>:
SPIEnum SPI_SPIEnumSendReceiveData(u8 copy_u8SendData,pu8 copy_pu8ReceiveData)
{
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <SPI_SPIEnumSendReceiveData+0x6>
     c00:	00 d0       	rcall	.+0      	; 0xc02 <SPI_SPIEnumSendReceiveData+0x8>
     c02:	00 d0       	rcall	.+0      	; 0xc04 <SPI_SPIEnumSendReceiveData+0xa>
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	8c 83       	std	Y+4, r24	; 0x04
     c0a:	7e 83       	std	Y+6, r23	; 0x06
     c0c:	6d 83       	std	Y+5, r22	; 0x05
    SPIEnum local_u8SPIEnumErrorState = SPI_SR_BYTE_OK;
     c0e:	1b 82       	std	Y+3, r1	; 0x03
    u16 local_u16TimeCount = 0;
     c10:	1a 82       	std	Y+2, r1	; 0x02
     c12:	19 82       	std	Y+1, r1	; 0x01
    if((copy_u8SendData <= 255) && (copy_pu8ReceiveData != NULL))
     c14:	8d 81       	ldd	r24, Y+5	; 0x05
     c16:	9e 81       	ldd	r25, Y+6	; 0x06
     c18:	00 97       	sbiw	r24, 0x00	; 0
     c1a:	e1 f0       	breq	.+56     	; 0xc54 <SPI_SPIEnumSendReceiveData+0x5a>
    {
        /* send the Data */
        SPI_u8_SPDR_REG = copy_u8SendData;
     c1c:	ef e2       	ldi	r30, 0x2F	; 47
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	8c 81       	ldd	r24, Y+4	; 0x04
     c22:	80 83       	st	Z, r24
     c24:	05 c0       	rjmp	.+10     	; 0xc30 <SPI_SPIEnumSendReceiveData+0x36>
        /*  wait until transmition is completed => non blocking mechanism*/
        while((GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT)==0) && (local_u16TimeCount < SPI_TIME_OUT))
        {
            local_u16TimeCount++;
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	9a 81       	ldd	r25, Y+2	; 0x02
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	9a 83       	std	Y+2, r25	; 0x02
     c2e:	89 83       	std	Y+1, r24	; 0x01
    if((copy_u8SendData <= 255) && (copy_pu8ReceiveData != NULL))
    {
        /* send the Data */
        SPI_u8_SPDR_REG = copy_u8SendData;
        /*  wait until transmition is completed => non blocking mechanism*/
        while((GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT)==0) && (local_u16TimeCount < SPI_TIME_OUT))
     c30:	ee e2       	ldi	r30, 0x2E	; 46
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	88 23       	and	r24, r24
     c38:	34 f0       	brlt	.+12     	; 0xc46 <SPI_SPIEnumSendReceiveData+0x4c>
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	9a 81       	ldd	r25, Y+2	; 0x02
     c3e:	23 ec       	ldi	r18, 0xC3	; 195
     c40:	80 35       	cpi	r24, 0x50	; 80
     c42:	92 07       	cpc	r25, r18
     c44:	80 f3       	brcs	.-32     	; 0xc26 <SPI_SPIEnumSendReceiveData+0x2c>
        {
            local_u16TimeCount++;
        }
        /* receive the data */
        *copy_pu8ReceiveData = SPI_u8_SPDR_REG;
     c46:	ef e2       	ldi	r30, 0x2F	; 47
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	ed 81       	ldd	r30, Y+5	; 0x05
     c4e:	fe 81       	ldd	r31, Y+6	; 0x06
     c50:	80 83       	st	Z, r24
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <SPI_SPIEnumSendReceiveData+0x5e>
    }
    else
    {
        local_u8SPIEnumErrorState = SPI_SR_BYTE_NOK;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	8b 83       	std	Y+3, r24	; 0x03
    }
    return local_u8SPIEnumErrorState;
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
}
     c5a:	26 96       	adiw	r28, 0x06	; 6
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	08 95       	ret

00000c6c <SPI_SPIEnumSendReceiveString>:

SPIEnum SPI_SPIEnumSendReceiveString(pu8 copy_pu8SendString,pu8 copy_pu8ReceiveString)
{
     c6c:	df 93       	push	r29
     c6e:	cf 93       	push	r28
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	28 97       	sbiw	r28, 0x08	; 8
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
     c80:	9e 83       	std	Y+6, r25	; 0x06
     c82:	8d 83       	std	Y+5, r24	; 0x05
     c84:	78 87       	std	Y+8, r23	; 0x08
     c86:	6f 83       	std	Y+7, r22	; 0x07
    SPIEnum local_u8SPIEnumErrorState = SPI_SR_STRING_OK;
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	8c 83       	std	Y+4, r24	; 0x04
    u8 local_u8SendCounter = 0;
     c8c:	1b 82       	std	Y+3, r1	; 0x03
    u16 local_u16TimeCounter = 0;
     c8e:	1a 82       	std	Y+2, r1	; 0x02
     c90:	19 82       	std	Y+1, r1	; 0x01
    if((copy_pu8SendString != NULL) && (copy_pu8ReceiveString != NULL))
     c92:	8d 81       	ldd	r24, Y+5	; 0x05
     c94:	9e 81       	ldd	r25, Y+6	; 0x06
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	09 f4       	brne	.+2      	; 0xc9c <SPI_SPIEnumSendReceiveString+0x30>
     c9a:	3d c0       	rjmp	.+122    	; 0xd16 <SPI_SPIEnumSendReceiveString+0xaa>
     c9c:	8f 81       	ldd	r24, Y+7	; 0x07
     c9e:	98 85       	ldd	r25, Y+8	; 0x08
     ca0:	00 97       	sbiw	r24, 0x00	; 0
     ca2:	c9 f1       	breq	.+114    	; 0xd16 <SPI_SPIEnumSendReceiveString+0xaa>
     ca4:	2c c0       	rjmp	.+88     	; 0xcfe <SPI_SPIEnumSendReceiveString+0x92>
    {
        /* send the string */
        while(copy_pu8SendString[local_u8SendCounter] != '\0')
        {
            SPI_u8_SPDR_REG = copy_pu8SendString[local_u8SendCounter];
     ca6:	af e2       	ldi	r26, 0x2F	; 47
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	8d 81       	ldd	r24, Y+5	; 0x05
     cb2:	9e 81       	ldd	r25, Y+6	; 0x06
     cb4:	fc 01       	movw	r30, r24
     cb6:	e2 0f       	add	r30, r18
     cb8:	f3 1f       	adc	r31, r19
     cba:	80 81       	ld	r24, Z
     cbc:	8c 93       	st	X, r24
     cbe:	05 c0       	rjmp	.+10     	; 0xcca <SPI_SPIEnumSendReceiveString+0x5e>
            /*  wait until transmition is completed => non blocking mechanism*/
            while((GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT)==0) && (local_u16TimeCounter < SPI_TIME_OUT))
            {
                local_u16TimeCounter++;
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	9a 81       	ldd	r25, Y+2	; 0x02
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	9a 83       	std	Y+2, r25	; 0x02
     cc8:	89 83       	std	Y+1, r24	; 0x01
        /* send the string */
        while(copy_pu8SendString[local_u8SendCounter] != '\0')
        {
            SPI_u8_SPDR_REG = copy_pu8SendString[local_u8SendCounter];
            /*  wait until transmition is completed => non blocking mechanism*/
            while((GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT)==0) && (local_u16TimeCounter < SPI_TIME_OUT))
     cca:	ee e2       	ldi	r30, 0x2E	; 46
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	88 23       	and	r24, r24
     cd2:	34 f0       	brlt	.+12     	; 0xce0 <SPI_SPIEnumSendReceiveString+0x74>
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	9a 81       	ldd	r25, Y+2	; 0x02
     cd8:	23 ec       	ldi	r18, 0xC3	; 195
     cda:	80 35       	cpi	r24, 0x50	; 80
     cdc:	92 07       	cpc	r25, r18
     cde:	80 f3       	brcs	.-32     	; 0xcc0 <SPI_SPIEnumSendReceiveString+0x54>
            {
                local_u16TimeCounter++;
            }
            copy_pu8ReceiveString[local_u8SendCounter] = SPI_u8_SPDR_REG;
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	8f 81       	ldd	r24, Y+7	; 0x07
     ce8:	98 85       	ldd	r25, Y+8	; 0x08
     cea:	dc 01       	movw	r26, r24
     cec:	a2 0f       	add	r26, r18
     cee:	b3 1f       	adc	r27, r19
     cf0:	ef e2       	ldi	r30, 0x2F	; 47
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8c 93       	st	X, r24
            local_u8SendCounter++;
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	8f 5f       	subi	r24, 0xFF	; 255
     cfc:	8b 83       	std	Y+3, r24	; 0x03
    u8 local_u8SendCounter = 0;
    u16 local_u16TimeCounter = 0;
    if((copy_pu8SendString != NULL) && (copy_pu8ReceiveString != NULL))
    {
        /* send the string */
        while(copy_pu8SendString[local_u8SendCounter] != '\0')
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	8d 81       	ldd	r24, Y+5	; 0x05
     d06:	9e 81       	ldd	r25, Y+6	; 0x06
     d08:	fc 01       	movw	r30, r24
     d0a:	e2 0f       	add	r30, r18
     d0c:	f3 1f       	adc	r31, r19
     d0e:	80 81       	ld	r24, Z
     d10:	88 23       	and	r24, r24
     d12:	49 f6       	brne	.-110    	; 0xca6 <SPI_SPIEnumSendReceiveString+0x3a>
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <SPI_SPIEnumSendReceiveString+0xae>
            local_u8SendCounter++;
        }
    }
    else
    {
        local_u8SPIEnumErrorState = SPI_SR_STRING_NOK;
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	8c 83       	std	Y+4, r24	; 0x04
    }
    return local_u8SPIEnumErrorState;
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
}
     d1c:	28 96       	adiw	r28, 0x08	; 8
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <SPI_SPIEnumSendString>:

SPIEnum SPI_SPIEnumSendString(pu8 copy_pu8SendString)
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	00 d0       	rcall	.+0      	; 0xd34 <SPI_SPIEnumSendString+0x6>
     d34:	00 d0       	rcall	.+0      	; 0xd36 <SPI_SPIEnumSendString+0x8>
     d36:	00 d0       	rcall	.+0      	; 0xd38 <SPI_SPIEnumSendString+0xa>
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	9e 83       	std	Y+6, r25	; 0x06
     d3e:	8d 83       	std	Y+5, r24	; 0x05
    SPIEnum local_u8SPIEnumErrorState = SPI_SR_STRING_OK;
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	8c 83       	std	Y+4, r24	; 0x04
    u8 local_u8SendCounter = 0;
     d44:	1b 82       	std	Y+3, r1	; 0x03
    u16 local_u16TimeCounter = 0;
     d46:	1a 82       	std	Y+2, r1	; 0x02
     d48:	19 82       	std	Y+1, r1	; 0x01
    if(copy_pu8SendString != NULL)
     d4a:	8d 81       	ldd	r24, Y+5	; 0x05
     d4c:	9e 81       	ldd	r25, Y+6	; 0x06
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	69 f1       	breq	.+90     	; 0xdac <SPI_SPIEnumSendString+0x7e>
     d52:	20 c0       	rjmp	.+64     	; 0xd94 <SPI_SPIEnumSendString+0x66>
    {
        /* send the string */
        while(copy_pu8SendString[local_u8SendCounter] != '\0')
        {
            SPI_u8_SPDR_REG = copy_pu8SendString[local_u8SendCounter];
     d54:	af e2       	ldi	r26, 0x2F	; 47
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	8d 81       	ldd	r24, Y+5	; 0x05
     d60:	9e 81       	ldd	r25, Y+6	; 0x06
     d62:	fc 01       	movw	r30, r24
     d64:	e2 0f       	add	r30, r18
     d66:	f3 1f       	adc	r31, r19
     d68:	80 81       	ld	r24, Z
     d6a:	8c 93       	st	X, r24
     d6c:	05 c0       	rjmp	.+10     	; 0xd78 <SPI_SPIEnumSendString+0x4a>
            /*  wait until transmition is completed => non blocking mechanism*/
            while((GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT)==0) && (local_u16TimeCounter < SPI_TIME_OUT))
            {
                local_u16TimeCounter++;
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	9a 81       	ldd	r25, Y+2	; 0x02
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	9a 83       	std	Y+2, r25	; 0x02
     d76:	89 83       	std	Y+1, r24	; 0x01
        /* send the string */
        while(copy_pu8SendString[local_u8SendCounter] != '\0')
        {
            SPI_u8_SPDR_REG = copy_pu8SendString[local_u8SendCounter];
            /*  wait until transmition is completed => non blocking mechanism*/
            while((GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT)==0) && (local_u16TimeCounter < SPI_TIME_OUT))
     d78:	ee e2       	ldi	r30, 0x2E	; 46
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	88 23       	and	r24, r24
     d80:	34 f0       	brlt	.+12     	; 0xd8e <SPI_SPIEnumSendString+0x60>
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	9a 81       	ldd	r25, Y+2	; 0x02
     d86:	23 ec       	ldi	r18, 0xC3	; 195
     d88:	80 35       	cpi	r24, 0x50	; 80
     d8a:	92 07       	cpc	r25, r18
     d8c:	80 f3       	brcs	.-32     	; 0xd6e <SPI_SPIEnumSendString+0x40>
            {
                local_u16TimeCounter++;
            }
            local_u8SendCounter++;
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	8f 5f       	subi	r24, 0xFF	; 255
     d92:	8b 83       	std	Y+3, r24	; 0x03
    u8 local_u8SendCounter = 0;
    u16 local_u16TimeCounter = 0;
    if(copy_pu8SendString != NULL)
    {
        /* send the string */
        while(copy_pu8SendString[local_u8SendCounter] != '\0')
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	8d 81       	ldd	r24, Y+5	; 0x05
     d9c:	9e 81       	ldd	r25, Y+6	; 0x06
     d9e:	fc 01       	movw	r30, r24
     da0:	e2 0f       	add	r30, r18
     da2:	f3 1f       	adc	r31, r19
     da4:	80 81       	ld	r24, Z
     da6:	88 23       	and	r24, r24
     da8:	a9 f6       	brne	.-86     	; 0xd54 <SPI_SPIEnumSendString+0x26>
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <SPI_SPIEnumSendString+0x82>
            local_u8SendCounter++;
        }
    }
    else
    {
        local_u8SPIEnumErrorState = SPI_SR_STRING_NOK;
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	8c 83       	std	Y+4, r24	; 0x04
    }
    return local_u8SPIEnumErrorState;
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
}
     db2:	26 96       	adiw	r28, 0x06	; 6
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	cd bf       	out	0x3d, r28	; 61
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <SPI_SPIEnumReceiveString>:
SPIEnum SPI_SPIEnumReceiveString(pu8 copy_pu8ReceiveString,u8 copy_u8StringLen)
{
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	27 97       	sbiw	r28, 0x07	; 7
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	9e 83       	std	Y+6, r25	; 0x06
     dda:	8d 83       	std	Y+5, r24	; 0x05
     ddc:	6f 83       	std	Y+7, r22	; 0x07
    SPIEnum local_u8SPIEnumErrorState = SPI_SR_STRING_OK;
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	8c 83       	std	Y+4, r24	; 0x04
    u8 local_u8ReceiveCounter = 0;
     de2:	1b 82       	std	Y+3, r1	; 0x03
    u16 local_u16TimeCounter = 0;
     de4:	1a 82       	std	Y+2, r1	; 0x02
     de6:	19 82       	std	Y+1, r1	; 0x01
    if(copy_pu8ReceiveString != NULL)
     de8:	8d 81       	ldd	r24, Y+5	; 0x05
     dea:	9e 81       	ldd	r25, Y+6	; 0x06
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	29 f1       	breq	.+74     	; 0xe3a <SPI_SPIEnumReceiveString+0x76>
     df0:	1f c0       	rjmp	.+62     	; 0xe30 <SPI_SPIEnumReceiveString+0x6c>
//    		while(copy_pu8ReceiveString[local_u8ReceiveCounter] != '\0')
//    		{
    			/*  wait until transmition is completed => non blocking mechanism*/
    			while((GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT)==0) && (local_u16TimeCounter < SPI_TIME_OUT))
    			{
    				local_u16TimeCounter++;
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
    	while(local_u8ReceiveCounter < copy_u8StringLen)
    	{
//    		while(copy_pu8ReceiveString[local_u8ReceiveCounter] != '\0')
//    		{
    			/*  wait until transmition is completed => non blocking mechanism*/
    			while((GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPIF_BIT)==0) && (local_u16TimeCounter < SPI_TIME_OUT))
     dfc:	ee e2       	ldi	r30, 0x2E	; 46
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	88 23       	and	r24, r24
     e04:	34 f0       	brlt	.+12     	; 0xe12 <SPI_SPIEnumReceiveString+0x4e>
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	9a 81       	ldd	r25, Y+2	; 0x02
     e0a:	23 ec       	ldi	r18, 0xC3	; 195
     e0c:	80 35       	cpi	r24, 0x50	; 80
     e0e:	92 07       	cpc	r25, r18
     e10:	80 f3       	brcs	.-32     	; 0xdf2 <SPI_SPIEnumReceiveString+0x2e>
    			{
    				local_u16TimeCounter++;
    			}
    			copy_pu8ReceiveString[local_u8ReceiveCounter] = SPI_u8_SPDR_REG;
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	8d 81       	ldd	r24, Y+5	; 0x05
     e1a:	9e 81       	ldd	r25, Y+6	; 0x06
     e1c:	dc 01       	movw	r26, r24
     e1e:	a2 0f       	add	r26, r18
     e20:	b3 1f       	adc	r27, r19
     e22:	ef e2       	ldi	r30, 0x2F	; 47
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	8c 93       	st	X, r24
    			local_u8ReceiveCounter++;
     e2a:	8b 81       	ldd	r24, Y+3	; 0x03
     e2c:	8f 5f       	subi	r24, 0xFF	; 255
     e2e:	8b 83       	std	Y+3, r24	; 0x03
    SPIEnum local_u8SPIEnumErrorState = SPI_SR_STRING_OK;
    u8 local_u8ReceiveCounter = 0;
    u16 local_u16TimeCounter = 0;
    if(copy_pu8ReceiveString != NULL)
    {
    	while(local_u8ReceiveCounter < copy_u8StringLen)
     e30:	9b 81       	ldd	r25, Y+3	; 0x03
     e32:	8f 81       	ldd	r24, Y+7	; 0x07
     e34:	98 17       	cp	r25, r24
     e36:	10 f3       	brcs	.-60     	; 0xdfc <SPI_SPIEnumReceiveString+0x38>
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <SPI_SPIEnumReceiveString+0x7a>
//    		}
    	}
    }
    else
    {
        local_u8SPIEnumErrorState = SPI_SR_STRING_NOK;
     e3a:	83 e0       	ldi	r24, 0x03	; 3
     e3c:	8c 83       	std	Y+4, r24	; 0x04
    }
    return local_u8SPIEnumErrorState;
     e3e:	8c 81       	ldd	r24, Y+4	; 0x04
}
     e40:	27 96       	adiw	r28, 0x07	; 7
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <PORT_voidInit>:
#include "../Include/PORT_private.h"
#include "../Include/PORT_config.h"


void PORT_voidInit(void)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
	/* Initialization Direction for all Pins */
	// PORTA
	PORT_u8_DDRA_REG = CONC(PORT_u8_PA7_DIRECTION,PORT_u8_PA6_DIRECTION,PORT_u8_PA5_DIRECTION,PORT_u8_PA4_DIRECTION,
     e5a:	ea e3       	ldi	r30, 0x3A	; 58
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	8f ef       	ldi	r24, 0xFF	; 255
     e60:	80 83       	st	Z, r24
	                        PORT_u8_PA3_DIRECTION,PORT_u8_PA2_DIRECTION,PORT_u8_PA1_DIRECTION,PORT_u8_PA0_DIRECTION);
	// PORTB
	PORT_u8_DDRB_REG = CONC(PORT_u8_PB7_DIRECTION,PORT_u8_PB6_DIRECTION,PORT_u8_PB5_DIRECTION,PORT_u8_PB4_DIRECTION,
     e62:	e7 e3       	ldi	r30, 0x37	; 55
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	8f eb       	ldi	r24, 0xBF	; 191
     e68:	80 83       	st	Z, r24
	                        PORT_u8_PB3_DIRECTION,PORT_u8_PB2_DIRECTION,PORT_u8_PB1_DIRECTION,PORT_u8_PB0_DIRECTION);
	// PORTC
	PORT_u8_DDRC_REG = CONC(PORT_u8_PC7_DIRECTION,PORT_u8_PC6_DIRECTION,PORT_u8_PC5_DIRECTION,PORT_u8_PC4_DIRECTION,
     e6a:	e4 e3       	ldi	r30, 0x34	; 52
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 ef       	ldi	r24, 0xF0	; 240
     e70:	80 83       	st	Z, r24
							PORT_u8_PC3_DIRECTION,PORT_u8_PC2_DIRECTION,PORT_u8_PC1_DIRECTION,PORT_u8_PC0_DIRECTION);
	// PORTD
	PORT_u8_DDRD_REG = CONC(PORT_u8_PD7_DIRECTION,PORT_u8_PD6_DIRECTION,PORT_u8_PD5_DIRECTION,PORT_u8_PD4_DIRECTION,
     e72:	e1 e3       	ldi	r30, 0x31	; 49
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	8e ef       	ldi	r24, 0xFE	; 254
     e78:	80 83       	st	Z, r24
							PORT_u8_PD3_DIRECTION,PORT_u8_PD2_DIRECTION,PORT_u8_PD1_DIRECTION,PORT_u8_PD0_DIRECTION);
					
	/* Initialization Value for all Pins  */
	// PORTA
	PORT_u8_PORTA_REG = CONC(PORT_u8_PA7_VALUE,PORT_u8_PA6_VALUE,PORT_u8_PA5_VALUE,PORT_u8_PA4_VALUE,
     e7a:	eb e3       	ldi	r30, 0x3B	; 59
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	10 82       	st	Z, r1
							 PORT_u8_PA3_VALUE,PORT_u8_PA2_VALUE,PORT_u8_PA1_VALUE,PORT_u8_PA0_VALUE);
	// PORTB
	PORT_u8_PORTB_REG = CONC(PORT_u8_PB7_VALUE,PORT_u8_PB6_VALUE,PORT_u8_PB5_VALUE,PORT_u8_PB4_VALUE,
     e80:	e8 e3       	ldi	r30, 0x38	; 56
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	8f e0       	ldi	r24, 0x0F	; 15
     e86:	80 83       	st	Z, r24
							 PORT_u8_PB3_VALUE,PORT_u8_PB2_VALUE,PORT_u8_PB1_VALUE,PORT_u8_PB0_VALUE);
	// PORTC
	PORT_u8_PORTC_REG = CONC(PORT_u8_PC7_VALUE,PORT_u8_PC6_VALUE,PORT_u8_PC5_VALUE,PORT_u8_PC4_VALUE,
     e88:	e5 e3       	ldi	r30, 0x35	; 53
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	8f e0       	ldi	r24, 0x0F	; 15
     e8e:	80 83       	st	Z, r24
							 PORT_u8_PC3_VALUE,PORT_u8_PC2_VALUE,PORT_u8_PC1_VALUE,PORT_u8_PC0_VALUE);
	// PORTD
	PORT_u8_PORTD_REG = CONC(PORT_u8_PD7_VALUE,PORT_u8_PD6_VALUE,PORT_u8_PD5_VALUE,PORT_u8_PD4_VALUE,
     e90:	e2 e3       	ldi	r30, 0x32	; 50
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	10 82       	st	Z, r1
							 PORT_u8_PD3_VALUE,PORT_u8_PD2_VALUE,PORT_u8_PD1_VALUE,PORT_u8_PD0_VALUE);
}
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <PORT_PortEnumSetPinDirection>:

PortEnum PORT_PortEnumSetPinDirection(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Direction)
{
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	2e 97       	sbiw	r28, 0x0e	; 14
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	8a 83       	std	Y+2, r24	; 0x02
     eb2:	6b 83       	std	Y+3, r22	; 0x03
     eb4:	4c 83       	std	Y+4, r20	; 0x04
	PortEnum local_PortEnumErrorState = PORT_DIRECTION_OK;
     eb6:	19 82       	std	Y+1, r1	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= PORT_u8_PORTD) && (copy_u8PinId <= PORT_u8_PIN7))
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	84 30       	cpi	r24, 0x04	; 4
     ebc:	08 f0       	brcs	.+2      	; 0xec0 <PORT_PortEnumSetPinDirection+0x24>
     ebe:	05 c1       	rjmp	.+522    	; 0x10ca <PORT_PortEnumSetPinDirection+0x22e>
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	88 30       	cpi	r24, 0x08	; 8
     ec4:	08 f0       	brcs	.+2      	; 0xec8 <PORT_PortEnumSetPinDirection+0x2c>
     ec6:	01 c1       	rjmp	.+514    	; 0x10ca <PORT_PortEnumSetPinDirection+0x22e>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	3e 87       	std	Y+14, r19	; 0x0e
     ed0:	2d 87       	std	Y+13, r18	; 0x0d
     ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	91 05       	cpc	r25, r1
     eda:	09 f4       	brne	.+2      	; 0xede <PORT_PortEnumSetPinDirection+0x42>
     edc:	4f c0       	rjmp	.+158    	; 0xf7c <PORT_PortEnumSetPinDirection+0xe0>
     ede:	2d 85       	ldd	r18, Y+13	; 0x0d
     ee0:	3e 85       	ldd	r19, Y+14	; 0x0e
     ee2:	22 30       	cpi	r18, 0x02	; 2
     ee4:	31 05       	cpc	r19, r1
     ee6:	2c f4       	brge	.+10     	; 0xef2 <PORT_PortEnumSetPinDirection+0x56>
     ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eea:	9e 85       	ldd	r25, Y+14	; 0x0e
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	71 f0       	breq	.+28     	; 0xf0c <PORT_PortEnumSetPinDirection+0x70>
     ef0:	ee c0       	rjmp	.+476    	; 0x10ce <PORT_PortEnumSetPinDirection+0x232>
     ef2:	2d 85       	ldd	r18, Y+13	; 0x0d
     ef4:	3e 85       	ldd	r19, Y+14	; 0x0e
     ef6:	22 30       	cpi	r18, 0x02	; 2
     ef8:	31 05       	cpc	r19, r1
     efa:	09 f4       	brne	.+2      	; 0xefe <PORT_PortEnumSetPinDirection+0x62>
     efc:	77 c0       	rjmp	.+238    	; 0xfec <PORT_PortEnumSetPinDirection+0x150>
     efe:	8d 85       	ldd	r24, Y+13	; 0x0d
     f00:	9e 85       	ldd	r25, Y+14	; 0x0e
     f02:	83 30       	cpi	r24, 0x03	; 3
     f04:	91 05       	cpc	r25, r1
     f06:	09 f4       	brne	.+2      	; 0xf0a <PORT_PortEnumSetPinDirection+0x6e>
     f08:	a9 c0       	rjmp	.+338    	; 0x105c <PORT_PortEnumSetPinDirection+0x1c0>
     f0a:	e1 c0       	rjmp	.+450    	; 0x10ce <PORT_PortEnumSetPinDirection+0x232>
		{
			case PORT_u8_PORTA:   // PORTA
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
     f0c:	8c 81       	ldd	r24, Y+4	; 0x04
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	3c 87       	std	Y+12, r19	; 0x0c
     f14:	2b 87       	std	Y+11, r18	; 0x0b
     f16:	8b 85       	ldd	r24, Y+11	; 0x0b
     f18:	9c 85       	ldd	r25, Y+12	; 0x0c
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	d1 f0       	breq	.+52     	; 0xf52 <PORT_PortEnumSetPinDirection+0xb6>
     f1e:	2b 85       	ldd	r18, Y+11	; 0x0b
     f20:	3c 85       	ldd	r19, Y+12	; 0x0c
     f22:	21 30       	cpi	r18, 0x01	; 1
     f24:	31 05       	cpc	r19, r1
     f26:	09 f0       	breq	.+2      	; 0xf2a <PORT_PortEnumSetPinDirection+0x8e>
     f28:	d2 c0       	rjmp	.+420    	; 0x10ce <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRA_REG,copy_u8PinId);     break;
     f2a:	aa e3       	ldi	r26, 0x3A	; 58
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	ea e3       	ldi	r30, 0x3A	; 58
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <PORT_PortEnumSetPinDirection+0xac>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <PORT_PortEnumSetPinDirection+0xa8>
     f4c:	84 2b       	or	r24, r20
     f4e:	8c 93       	st	X, r24
     f50:	be c0       	rjmp	.+380    	; 0x10ce <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRA_REG,copy_u8PinId);     break;
     f52:	aa e3       	ldi	r26, 0x3A	; 58
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	ea e3       	ldi	r30, 0x3A	; 58
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <PORT_PortEnumSetPinDirection+0xd4>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <PORT_PortEnumSetPinDirection+0xd0>
     f74:	80 95       	com	r24
     f76:	84 23       	and	r24, r20
     f78:	8c 93       	st	X, r24
     f7a:	a9 c0       	rjmp	.+338    	; 0x10ce <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTB:   // PORTB
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	3a 87       	std	Y+10, r19	; 0x0a
     f84:	29 87       	std	Y+9, r18	; 0x09
     f86:	89 85       	ldd	r24, Y+9	; 0x09
     f88:	9a 85       	ldd	r25, Y+10	; 0x0a
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	d1 f0       	breq	.+52     	; 0xfc2 <PORT_PortEnumSetPinDirection+0x126>
     f8e:	29 85       	ldd	r18, Y+9	; 0x09
     f90:	3a 85       	ldd	r19, Y+10	; 0x0a
     f92:	21 30       	cpi	r18, 0x01	; 1
     f94:	31 05       	cpc	r19, r1
     f96:	09 f0       	breq	.+2      	; 0xf9a <PORT_PortEnumSetPinDirection+0xfe>
     f98:	9a c0       	rjmp	.+308    	; 0x10ce <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRB_REG,copy_u8PinId);     break;
     f9a:	a7 e3       	ldi	r26, 0x37	; 55
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e7 e3       	ldi	r30, 0x37	; 55
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <PORT_PortEnumSetPinDirection+0x11c>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <PORT_PortEnumSetPinDirection+0x118>
     fbc:	84 2b       	or	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	86 c0       	rjmp	.+268    	; 0x10ce <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRB_REG,copy_u8PinId);     break;
     fc2:	a7 e3       	ldi	r26, 0x37	; 55
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e7 e3       	ldi	r30, 0x37	; 55
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <PORT_PortEnumSetPinDirection+0x144>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <PORT_PortEnumSetPinDirection+0x140>
     fe4:	80 95       	com	r24
     fe6:	84 23       	and	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	71 c0       	rjmp	.+226    	; 0x10ce <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTC:  // PORTC
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
     fec:	8c 81       	ldd	r24, Y+4	; 0x04
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	38 87       	std	Y+8, r19	; 0x08
     ff4:	2f 83       	std	Y+7, r18	; 0x07
     ff6:	8f 81       	ldd	r24, Y+7	; 0x07
     ff8:	98 85       	ldd	r25, Y+8	; 0x08
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	d1 f0       	breq	.+52     	; 0x1032 <PORT_PortEnumSetPinDirection+0x196>
     ffe:	2f 81       	ldd	r18, Y+7	; 0x07
    1000:	38 85       	ldd	r19, Y+8	; 0x08
    1002:	21 30       	cpi	r18, 0x01	; 1
    1004:	31 05       	cpc	r19, r1
    1006:	09 f0       	breq	.+2      	; 0x100a <PORT_PortEnumSetPinDirection+0x16e>
    1008:	62 c0       	rjmp	.+196    	; 0x10ce <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRC_REG,copy_u8PinId);     break;
    100a:	a4 e3       	ldi	r26, 0x34	; 52
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e4 e3       	ldi	r30, 0x34	; 52
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <PORT_PortEnumSetPinDirection+0x18c>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <PORT_PortEnumSetPinDirection+0x188>
    102c:	84 2b       	or	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	4e c0       	rjmp	.+156    	; 0x10ce <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRC_REG,copy_u8PinId);     break;
    1032:	a4 e3       	ldi	r26, 0x34	; 52
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e4 e3       	ldi	r30, 0x34	; 52
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <PORT_PortEnumSetPinDirection+0x1b4>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <PORT_PortEnumSetPinDirection+0x1b0>
    1054:	80 95       	com	r24
    1056:	84 23       	and	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	39 c0       	rjmp	.+114    	; 0x10ce <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTD:  // PORTD
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	3e 83       	std	Y+6, r19	; 0x06
    1064:	2d 83       	std	Y+5, r18	; 0x05
    1066:	8d 81       	ldd	r24, Y+5	; 0x05
    1068:	9e 81       	ldd	r25, Y+6	; 0x06
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	c9 f0       	breq	.+50     	; 0x10a0 <PORT_PortEnumSetPinDirection+0x204>
    106e:	2d 81       	ldd	r18, Y+5	; 0x05
    1070:	3e 81       	ldd	r19, Y+6	; 0x06
    1072:	21 30       	cpi	r18, 0x01	; 1
    1074:	31 05       	cpc	r19, r1
    1076:	59 f5       	brne	.+86     	; 0x10ce <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRD_REG,copy_u8PinId);     break;
    1078:	a1 e3       	ldi	r26, 0x31	; 49
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e1 e3       	ldi	r30, 0x31	; 49
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <PORT_PortEnumSetPinDirection+0x1fa>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <PORT_PortEnumSetPinDirection+0x1f6>
    109a:	84 2b       	or	r24, r20
    109c:	8c 93       	st	X, r24
    109e:	17 c0       	rjmp	.+46     	; 0x10ce <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRD_REG,copy_u8PinId);     break;
    10a0:	a1 e3       	ldi	r26, 0x31	; 49
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e1 e3       	ldi	r30, 0x31	; 49
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <PORT_PortEnumSetPinDirection+0x222>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <PORT_PortEnumSetPinDirection+0x21e>
    10c2:	80 95       	com	r24
    10c4:	84 23       	and	r24, r20
    10c6:	8c 93       	st	X, r24
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <PORT_PortEnumSetPinDirection+0x232>
			break;
		}
	}
	else
	{
		local_PortEnumErrorState = PORT_DIRECTION_NOK;
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_PortEnumErrorState;
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    10d0:	2e 96       	adiw	r28, 0x0e	; 14
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <PORT_PortEnumSetPinMode>:


PortEnum PORT_PortEnumSetPinMode(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Mode)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	2e 97       	sbiw	r28, 0x0e	; 14
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	8a 83       	std	Y+2, r24	; 0x02
    10f8:	6b 83       	std	Y+3, r22	; 0x03
    10fa:	4c 83       	std	Y+4, r20	; 0x04
	PortEnum local_PortEnumErrorState = PORT_MODE_OK;
    10fc:	82 e0       	ldi	r24, 0x02	; 2
    10fe:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= PORT_u8_PORTD) && (copy_u8PinId <= PORT_u8_PIN7))
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	84 30       	cpi	r24, 0x04	; 4
    1104:	08 f0       	brcs	.+2      	; 0x1108 <PORT_PortEnumSetPinMode+0x26>
    1106:	ee c1       	rjmp	.+988    	; 0x14e4 <PORT_PortEnumSetPinMode+0x402>
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	88 30       	cpi	r24, 0x08	; 8
    110c:	08 f0       	brcs	.+2      	; 0x1110 <PORT_PortEnumSetPinMode+0x2e>
    110e:	ea c1       	rjmp	.+980    	; 0x14e4 <PORT_PortEnumSetPinMode+0x402>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	3e 87       	std	Y+14, r19	; 0x0e
    1118:	2d 87       	std	Y+13, r18	; 0x0d
    111a:	8d 85       	ldd	r24, Y+13	; 0x0d
    111c:	9e 85       	ldd	r25, Y+14	; 0x0e
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	91 05       	cpc	r25, r1
    1122:	09 f4       	brne	.+2      	; 0x1126 <PORT_PortEnumSetPinMode+0x44>
    1124:	89 c0       	rjmp	.+274    	; 0x1238 <PORT_PortEnumSetPinMode+0x156>
    1126:	2d 85       	ldd	r18, Y+13	; 0x0d
    1128:	3e 85       	ldd	r19, Y+14	; 0x0e
    112a:	22 30       	cpi	r18, 0x02	; 2
    112c:	31 05       	cpc	r19, r1
    112e:	2c f4       	brge	.+10     	; 0x113a <PORT_PortEnumSetPinMode+0x58>
    1130:	8d 85       	ldd	r24, Y+13	; 0x0d
    1132:	9e 85       	ldd	r25, Y+14	; 0x0e
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	71 f0       	breq	.+28     	; 0x1154 <PORT_PortEnumSetPinMode+0x72>
    1138:	d7 c1       	rjmp	.+942    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
    113a:	2d 85       	ldd	r18, Y+13	; 0x0d
    113c:	3e 85       	ldd	r19, Y+14	; 0x0e
    113e:	22 30       	cpi	r18, 0x02	; 2
    1140:	31 05       	cpc	r19, r1
    1142:	09 f4       	brne	.+2      	; 0x1146 <PORT_PortEnumSetPinMode+0x64>
    1144:	eb c0       	rjmp	.+470    	; 0x131c <PORT_PortEnumSetPinMode+0x23a>
    1146:	8d 85       	ldd	r24, Y+13	; 0x0d
    1148:	9e 85       	ldd	r25, Y+14	; 0x0e
    114a:	83 30       	cpi	r24, 0x03	; 3
    114c:	91 05       	cpc	r25, r1
    114e:	09 f4       	brne	.+2      	; 0x1152 <PORT_PortEnumSetPinMode+0x70>
    1150:	57 c1       	rjmp	.+686    	; 0x1400 <PORT_PortEnumSetPinMode+0x31e>
    1152:	ca c1       	rjmp	.+916    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
		{
			case PORT_u8_PORTA:  // PORTA
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	3c 87       	std	Y+12, r19	; 0x0c
    115c:	2b 87       	std	Y+11, r18	; 0x0b
    115e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1160:	9c 85       	ldd	r25, Y+12	; 0x0c
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	91 05       	cpc	r25, r1
    1166:	b1 f0       	breq	.+44     	; 0x1194 <PORT_PortEnumSetPinMode+0xb2>
    1168:	2b 85       	ldd	r18, Y+11	; 0x0b
    116a:	3c 85       	ldd	r19, Y+12	; 0x0c
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	2c f4       	brge	.+10     	; 0x117c <PORT_PortEnumSetPinMode+0x9a>
    1172:	8b 85       	ldd	r24, Y+11	; 0x0b
    1174:	9c 85       	ldd	r25, Y+12	; 0x0c
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	09 f1       	breq	.+66     	; 0x11bc <PORT_PortEnumSetPinMode+0xda>
    117a:	b6 c1       	rjmp	.+876    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
    117c:	2b 85       	ldd	r18, Y+11	; 0x0b
    117e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	81 f1       	breq	.+96     	; 0x11e6 <PORT_PortEnumSetPinMode+0x104>
    1186:	8b 85       	ldd	r24, Y+11	; 0x0b
    1188:	9c 85       	ldd	r25, Y+12	; 0x0c
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	91 05       	cpc	r25, r1
    118e:	09 f4       	brne	.+2      	; 0x1192 <PORT_PortEnumSetPinMode+0xb0>
    1190:	3e c0       	rjmp	.+124    	; 0x120e <PORT_PortEnumSetPinMode+0x12c>
    1192:	aa c1       	rjmp	.+852    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
    1194:	ab e3       	ldi	r26, 0x3B	; 59
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	eb e3       	ldi	r30, 0x3B	; 59
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <PORT_PortEnumSetPinMode+0xd0>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <PORT_PortEnumSetPinMode+0xcc>
    11b6:	84 2b       	or	r24, r20
    11b8:	8c 93       	st	X, r24
    11ba:	96 c1       	rjmp	.+812    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
    11bc:	ab e3       	ldi	r26, 0x3B	; 59
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	eb e3       	ldi	r30, 0x3B	; 59
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <PORT_PortEnumSetPinMode+0xf8>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <PORT_PortEnumSetPinMode+0xf4>
    11de:	80 95       	com	r24
    11e0:	84 23       	and	r24, r20
    11e2:	8c 93       	st	X, r24
    11e4:	81 c1       	rjmp	.+770    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
    11e6:	ab e3       	ldi	r26, 0x3B	; 59
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	eb e3       	ldi	r30, 0x3B	; 59
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <PORT_PortEnumSetPinMode+0x122>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <PORT_PortEnumSetPinMode+0x11e>
    1208:	84 2b       	or	r24, r20
    120a:	8c 93       	st	X, r24
    120c:	6d c1       	rjmp	.+730    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
    120e:	ab e3       	ldi	r26, 0x3B	; 59
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	eb e3       	ldi	r30, 0x3B	; 59
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <PORT_PortEnumSetPinMode+0x14a>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <PORT_PortEnumSetPinMode+0x146>
    1230:	80 95       	com	r24
    1232:	84 23       	and	r24, r20
    1234:	8c 93       	st	X, r24
    1236:	58 c1       	rjmp	.+688    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTB:  // PORTB
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	3a 87       	std	Y+10, r19	; 0x0a
    1240:	29 87       	std	Y+9, r18	; 0x09
    1242:	89 85       	ldd	r24, Y+9	; 0x09
    1244:	9a 85       	ldd	r25, Y+10	; 0x0a
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	91 05       	cpc	r25, r1
    124a:	b1 f0       	breq	.+44     	; 0x1278 <PORT_PortEnumSetPinMode+0x196>
    124c:	29 85       	ldd	r18, Y+9	; 0x09
    124e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1250:	22 30       	cpi	r18, 0x02	; 2
    1252:	31 05       	cpc	r19, r1
    1254:	2c f4       	brge	.+10     	; 0x1260 <PORT_PortEnumSetPinMode+0x17e>
    1256:	89 85       	ldd	r24, Y+9	; 0x09
    1258:	9a 85       	ldd	r25, Y+10	; 0x0a
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	09 f1       	breq	.+66     	; 0x12a0 <PORT_PortEnumSetPinMode+0x1be>
    125e:	44 c1       	rjmp	.+648    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
    1260:	29 85       	ldd	r18, Y+9	; 0x09
    1262:	3a 85       	ldd	r19, Y+10	; 0x0a
    1264:	22 30       	cpi	r18, 0x02	; 2
    1266:	31 05       	cpc	r19, r1
    1268:	81 f1       	breq	.+96     	; 0x12ca <PORT_PortEnumSetPinMode+0x1e8>
    126a:	89 85       	ldd	r24, Y+9	; 0x09
    126c:	9a 85       	ldd	r25, Y+10	; 0x0a
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	91 05       	cpc	r25, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <PORT_PortEnumSetPinMode+0x194>
    1274:	3e c0       	rjmp	.+124    	; 0x12f2 <PORT_PortEnumSetPinMode+0x210>
    1276:	38 c1       	rjmp	.+624    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
    1278:	a8 e3       	ldi	r26, 0x38	; 56
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e8 e3       	ldi	r30, 0x38	; 56
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <PORT_PortEnumSetPinMode+0x1b4>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <PORT_PortEnumSetPinMode+0x1b0>
    129a:	84 2b       	or	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	24 c1       	rjmp	.+584    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
    12a0:	a8 e3       	ldi	r26, 0x38	; 56
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e8 e3       	ldi	r30, 0x38	; 56
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <PORT_PortEnumSetPinMode+0x1dc>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <PORT_PortEnumSetPinMode+0x1d8>
    12c2:	80 95       	com	r24
    12c4:	84 23       	and	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	0f c1       	rjmp	.+542    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
    12ca:	a8 e3       	ldi	r26, 0x38	; 56
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e8 e3       	ldi	r30, 0x38	; 56
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <PORT_PortEnumSetPinMode+0x206>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <PORT_PortEnumSetPinMode+0x202>
    12ec:	84 2b       	or	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	fb c0       	rjmp	.+502    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
    12f2:	a8 e3       	ldi	r26, 0x38	; 56
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e8 e3       	ldi	r30, 0x38	; 56
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <PORT_PortEnumSetPinMode+0x22e>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <PORT_PortEnumSetPinMode+0x22a>
    1314:	80 95       	com	r24
    1316:	84 23       	and	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	e6 c0       	rjmp	.+460    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTC:  // PORTC
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	38 87       	std	Y+8, r19	; 0x08
    1324:	2f 83       	std	Y+7, r18	; 0x07
    1326:	8f 81       	ldd	r24, Y+7	; 0x07
    1328:	98 85       	ldd	r25, Y+8	; 0x08
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	91 05       	cpc	r25, r1
    132e:	b1 f0       	breq	.+44     	; 0x135c <PORT_PortEnumSetPinMode+0x27a>
    1330:	2f 81       	ldd	r18, Y+7	; 0x07
    1332:	38 85       	ldd	r19, Y+8	; 0x08
    1334:	22 30       	cpi	r18, 0x02	; 2
    1336:	31 05       	cpc	r19, r1
    1338:	2c f4       	brge	.+10     	; 0x1344 <PORT_PortEnumSetPinMode+0x262>
    133a:	8f 81       	ldd	r24, Y+7	; 0x07
    133c:	98 85       	ldd	r25, Y+8	; 0x08
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	09 f1       	breq	.+66     	; 0x1384 <PORT_PortEnumSetPinMode+0x2a2>
    1342:	d2 c0       	rjmp	.+420    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
    1344:	2f 81       	ldd	r18, Y+7	; 0x07
    1346:	38 85       	ldd	r19, Y+8	; 0x08
    1348:	22 30       	cpi	r18, 0x02	; 2
    134a:	31 05       	cpc	r19, r1
    134c:	81 f1       	breq	.+96     	; 0x13ae <PORT_PortEnumSetPinMode+0x2cc>
    134e:	8f 81       	ldd	r24, Y+7	; 0x07
    1350:	98 85       	ldd	r25, Y+8	; 0x08
    1352:	83 30       	cpi	r24, 0x03	; 3
    1354:	91 05       	cpc	r25, r1
    1356:	09 f4       	brne	.+2      	; 0x135a <PORT_PortEnumSetPinMode+0x278>
    1358:	3e c0       	rjmp	.+124    	; 0x13d6 <PORT_PortEnumSetPinMode+0x2f4>
    135a:	c6 c0       	rjmp	.+396    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    135c:	a5 e3       	ldi	r26, 0x35	; 53
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e5 e3       	ldi	r30, 0x35	; 53
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 2e       	mov	r0, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <PORT_PortEnumSetPinMode+0x298>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <PORT_PortEnumSetPinMode+0x294>
    137e:	84 2b       	or	r24, r20
    1380:	8c 93       	st	X, r24
    1382:	b2 c0       	rjmp	.+356    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    1384:	a5 e3       	ldi	r26, 0x35	; 53
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e5 e3       	ldi	r30, 0x35	; 53
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <PORT_PortEnumSetPinMode+0x2c0>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <PORT_PortEnumSetPinMode+0x2bc>
    13a6:	80 95       	com	r24
    13a8:	84 23       	and	r24, r20
    13aa:	8c 93       	st	X, r24
    13ac:	9d c0       	rjmp	.+314    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    13ae:	a5 e3       	ldi	r26, 0x35	; 53
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e5 e3       	ldi	r30, 0x35	; 53
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <PORT_PortEnumSetPinMode+0x2ea>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <PORT_PortEnumSetPinMode+0x2e6>
    13d0:	84 2b       	or	r24, r20
    13d2:	8c 93       	st	X, r24
    13d4:	89 c0       	rjmp	.+274    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    13d6:	a5 e3       	ldi	r26, 0x35	; 53
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e5 e3       	ldi	r30, 0x35	; 53
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	48 2f       	mov	r20, r24
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <PORT_PortEnumSetPinMode+0x312>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <PORT_PortEnumSetPinMode+0x30e>
    13f8:	80 95       	com	r24
    13fa:	84 23       	and	r24, r20
    13fc:	8c 93       	st	X, r24
    13fe:	74 c0       	rjmp	.+232    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTD:  // PORTD
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    1400:	8c 81       	ldd	r24, Y+4	; 0x04
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	3e 83       	std	Y+6, r19	; 0x06
    1408:	2d 83       	std	Y+5, r18	; 0x05
    140a:	8d 81       	ldd	r24, Y+5	; 0x05
    140c:	9e 81       	ldd	r25, Y+6	; 0x06
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	91 05       	cpc	r25, r1
    1412:	b1 f0       	breq	.+44     	; 0x1440 <PORT_PortEnumSetPinMode+0x35e>
    1414:	2d 81       	ldd	r18, Y+5	; 0x05
    1416:	3e 81       	ldd	r19, Y+6	; 0x06
    1418:	22 30       	cpi	r18, 0x02	; 2
    141a:	31 05       	cpc	r19, r1
    141c:	2c f4       	brge	.+10     	; 0x1428 <PORT_PortEnumSetPinMode+0x346>
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
    1420:	9e 81       	ldd	r25, Y+6	; 0x06
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	09 f1       	breq	.+66     	; 0x1468 <PORT_PortEnumSetPinMode+0x386>
    1426:	60 c0       	rjmp	.+192    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
    1428:	2d 81       	ldd	r18, Y+5	; 0x05
    142a:	3e 81       	ldd	r19, Y+6	; 0x06
    142c:	22 30       	cpi	r18, 0x02	; 2
    142e:	31 05       	cpc	r19, r1
    1430:	81 f1       	breq	.+96     	; 0x1492 <PORT_PortEnumSetPinMode+0x3b0>
    1432:	8d 81       	ldd	r24, Y+5	; 0x05
    1434:	9e 81       	ldd	r25, Y+6	; 0x06
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	91 05       	cpc	r25, r1
    143a:	09 f4       	brne	.+2      	; 0x143e <PORT_PortEnumSetPinMode+0x35c>
    143c:	3e c0       	rjmp	.+124    	; 0x14ba <PORT_PortEnumSetPinMode+0x3d8>
    143e:	54 c0       	rjmp	.+168    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    1440:	a2 e3       	ldi	r26, 0x32	; 50
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e2 e3       	ldi	r30, 0x32	; 50
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 2e       	mov	r0, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <PORT_PortEnumSetPinMode+0x37c>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	0a 94       	dec	r0
    1460:	e2 f7       	brpl	.-8      	; 0x145a <PORT_PortEnumSetPinMode+0x378>
    1462:	84 2b       	or	r24, r20
    1464:	8c 93       	st	X, r24
    1466:	40 c0       	rjmp	.+128    	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    1468:	a2 e3       	ldi	r26, 0x32	; 50
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e2 e3       	ldi	r30, 0x32	; 50
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <PORT_PortEnumSetPinMode+0x3a4>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <PORT_PortEnumSetPinMode+0x3a0>
    148a:	80 95       	com	r24
    148c:	84 23       	and	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	2b c0       	rjmp	.+86     	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    1492:	a2 e3       	ldi	r26, 0x32	; 50
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e2 e3       	ldi	r30, 0x32	; 50
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <PORT_PortEnumSetPinMode+0x3ce>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <PORT_PortEnumSetPinMode+0x3ca>
    14b4:	84 2b       	or	r24, r20
    14b6:	8c 93       	st	X, r24
    14b8:	17 c0       	rjmp	.+46     	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    14ba:	a2 e3       	ldi	r26, 0x32	; 50
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e2 e3       	ldi	r30, 0x32	; 50
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 2e       	mov	r0, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <PORT_PortEnumSetPinMode+0x3f6>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <PORT_PortEnumSetPinMode+0x3f2>
    14dc:	80 95       	com	r24
    14de:	84 23       	and	r24, r20
    14e0:	8c 93       	st	X, r24
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <PORT_PortEnumSetPinMode+0x406>
			break;
		}
	}
	else
	{
		local_PortEnumErrorState = PORT_MODE_NOK;
    14e4:	83 e0       	ldi	r24, 0x03	; 3
    14e6:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_PortEnumErrorState;
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ea:	2e 96       	adiw	r28, 0x0e	; 14
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <DIO_DioEnumWriteChannel>:
#include "../Include/DIO_interface.h"
#include "../Include/DIO_private.h"
#include "../Include/DIO_config.h"

DioEnum DIO_DioEnumWriteChannel(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Level)
{
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	2e 97       	sbiw	r28, 0x0e	; 14
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	8a 83       	std	Y+2, r24	; 0x02
    1512:	6b 83       	std	Y+3, r22	; 0x03
    1514:	4c 83       	std	Y+4, r20	; 0x04
	DioEnum local_DioEnumErrorState = DIO_WRITE_OK;
    1516:	19 82       	std	Y+1, r1	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7))
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	84 30       	cpi	r24, 0x04	; 4
    151c:	08 f0       	brcs	.+2      	; 0x1520 <DIO_DioEnumWriteChannel+0x24>
    151e:	05 c1       	rjmp	.+522    	; 0x172a <DIO_DioEnumWriteChannel+0x22e>
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	88 30       	cpi	r24, 0x08	; 8
    1524:	08 f0       	brcs	.+2      	; 0x1528 <DIO_DioEnumWriteChannel+0x2c>
    1526:	01 c1       	rjmp	.+514    	; 0x172a <DIO_DioEnumWriteChannel+0x22e>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	3e 87       	std	Y+14, r19	; 0x0e
    1530:	2d 87       	std	Y+13, r18	; 0x0d
    1532:	8d 85       	ldd	r24, Y+13	; 0x0d
    1534:	9e 85       	ldd	r25, Y+14	; 0x0e
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	91 05       	cpc	r25, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <DIO_DioEnumWriteChannel+0x42>
    153c:	4f c0       	rjmp	.+158    	; 0x15dc <DIO_DioEnumWriteChannel+0xe0>
    153e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1540:	3e 85       	ldd	r19, Y+14	; 0x0e
    1542:	22 30       	cpi	r18, 0x02	; 2
    1544:	31 05       	cpc	r19, r1
    1546:	2c f4       	brge	.+10     	; 0x1552 <DIO_DioEnumWriteChannel+0x56>
    1548:	8d 85       	ldd	r24, Y+13	; 0x0d
    154a:	9e 85       	ldd	r25, Y+14	; 0x0e
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	71 f0       	breq	.+28     	; 0x156c <DIO_DioEnumWriteChannel+0x70>
    1550:	ee c0       	rjmp	.+476    	; 0x172e <DIO_DioEnumWriteChannel+0x232>
    1552:	2d 85       	ldd	r18, Y+13	; 0x0d
    1554:	3e 85       	ldd	r19, Y+14	; 0x0e
    1556:	22 30       	cpi	r18, 0x02	; 2
    1558:	31 05       	cpc	r19, r1
    155a:	09 f4       	brne	.+2      	; 0x155e <DIO_DioEnumWriteChannel+0x62>
    155c:	77 c0       	rjmp	.+238    	; 0x164c <DIO_DioEnumWriteChannel+0x150>
    155e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1560:	9e 85       	ldd	r25, Y+14	; 0x0e
    1562:	83 30       	cpi	r24, 0x03	; 3
    1564:	91 05       	cpc	r25, r1
    1566:	09 f4       	brne	.+2      	; 0x156a <DIO_DioEnumWriteChannel+0x6e>
    1568:	a9 c0       	rjmp	.+338    	; 0x16bc <DIO_DioEnumWriteChannel+0x1c0>
    156a:	e1 c0       	rjmp	.+450    	; 0x172e <DIO_DioEnumWriteChannel+0x232>
		{
			case DIO_u8_PORTA:  // PORTA
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	3c 87       	std	Y+12, r19	; 0x0c
    1574:	2b 87       	std	Y+11, r18	; 0x0b
    1576:	8b 85       	ldd	r24, Y+11	; 0x0b
    1578:	9c 85       	ldd	r25, Y+12	; 0x0c
    157a:	00 97       	sbiw	r24, 0x00	; 0
    157c:	d1 f0       	breq	.+52     	; 0x15b2 <DIO_DioEnumWriteChannel+0xb6>
    157e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1580:	3c 85       	ldd	r19, Y+12	; 0x0c
    1582:	21 30       	cpi	r18, 0x01	; 1
    1584:	31 05       	cpc	r19, r1
    1586:	09 f0       	breq	.+2      	; 0x158a <DIO_DioEnumWriteChannel+0x8e>
    1588:	d2 c0       	rjmp	.+420    	; 0x172e <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,copy_u8PinId);     break;
    158a:	ab e3       	ldi	r26, 0x3B	; 59
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	eb e3       	ldi	r30, 0x3B	; 59
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 2e       	mov	r0, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <DIO_DioEnumWriteChannel+0xac>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <DIO_DioEnumWriteChannel+0xa8>
    15ac:	84 2b       	or	r24, r20
    15ae:	8c 93       	st	X, r24
    15b0:	be c0       	rjmp	.+380    	; 0x172e <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,copy_u8PinId);     break;
    15b2:	ab e3       	ldi	r26, 0x3B	; 59
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	eb e3       	ldi	r30, 0x3B	; 59
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	48 2f       	mov	r20, r24
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	02 2e       	mov	r0, r18
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <DIO_DioEnumWriteChannel+0xd4>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	0a 94       	dec	r0
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <DIO_DioEnumWriteChannel+0xd0>
    15d4:	80 95       	com	r24
    15d6:	84 23       	and	r24, r20
    15d8:	8c 93       	st	X, r24
    15da:	a9 c0       	rjmp	.+338    	; 0x172e <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTB:  // PORTB
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    15dc:	8c 81       	ldd	r24, Y+4	; 0x04
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	3a 87       	std	Y+10, r19	; 0x0a
    15e4:	29 87       	std	Y+9, r18	; 0x09
    15e6:	89 85       	ldd	r24, Y+9	; 0x09
    15e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	d1 f0       	breq	.+52     	; 0x1622 <DIO_DioEnumWriteChannel+0x126>
    15ee:	29 85       	ldd	r18, Y+9	; 0x09
    15f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    15f2:	21 30       	cpi	r18, 0x01	; 1
    15f4:	31 05       	cpc	r19, r1
    15f6:	09 f0       	breq	.+2      	; 0x15fa <DIO_DioEnumWriteChannel+0xfe>
    15f8:	9a c0       	rjmp	.+308    	; 0x172e <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,copy_u8PinId);     break;
    15fa:	a8 e3       	ldi	r26, 0x38	; 56
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e8 e3       	ldi	r30, 0x38	; 56
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <DIO_DioEnumWriteChannel+0x11c>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <DIO_DioEnumWriteChannel+0x118>
    161c:	84 2b       	or	r24, r20
    161e:	8c 93       	st	X, r24
    1620:	86 c0       	rjmp	.+268    	; 0x172e <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,copy_u8PinId);     break;
    1622:	a8 e3       	ldi	r26, 0x38	; 56
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e8 e3       	ldi	r30, 0x38	; 56
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <DIO_DioEnumWriteChannel+0x144>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <DIO_DioEnumWriteChannel+0x140>
    1644:	80 95       	com	r24
    1646:	84 23       	and	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	71 c0       	rjmp	.+226    	; 0x172e <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTC:  // PORTC
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    164c:	8c 81       	ldd	r24, Y+4	; 0x04
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	38 87       	std	Y+8, r19	; 0x08
    1654:	2f 83       	std	Y+7, r18	; 0x07
    1656:	8f 81       	ldd	r24, Y+7	; 0x07
    1658:	98 85       	ldd	r25, Y+8	; 0x08
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	d1 f0       	breq	.+52     	; 0x1692 <DIO_DioEnumWriteChannel+0x196>
    165e:	2f 81       	ldd	r18, Y+7	; 0x07
    1660:	38 85       	ldd	r19, Y+8	; 0x08
    1662:	21 30       	cpi	r18, 0x01	; 1
    1664:	31 05       	cpc	r19, r1
    1666:	09 f0       	breq	.+2      	; 0x166a <DIO_DioEnumWriteChannel+0x16e>
    1668:	62 c0       	rjmp	.+196    	; 0x172e <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,copy_u8PinId);     break;
    166a:	a5 e3       	ldi	r26, 0x35	; 53
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e5 e3       	ldi	r30, 0x35	; 53
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	48 2f       	mov	r20, r24
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	02 2e       	mov	r0, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <DIO_DioEnumWriteChannel+0x18c>
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	0a 94       	dec	r0
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <DIO_DioEnumWriteChannel+0x188>
    168c:	84 2b       	or	r24, r20
    168e:	8c 93       	st	X, r24
    1690:	4e c0       	rjmp	.+156    	; 0x172e <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,copy_u8PinId);     break;
    1692:	a5 e3       	ldi	r26, 0x35	; 53
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e5 e3       	ldi	r30, 0x35	; 53
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_DioEnumWriteChannel+0x1b4>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_DioEnumWriteChannel+0x1b0>
    16b4:	80 95       	com	r24
    16b6:	84 23       	and	r24, r20
    16b8:	8c 93       	st	X, r24
    16ba:	39 c0       	rjmp	.+114    	; 0x172e <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTD:  // PORTD
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    16bc:	8c 81       	ldd	r24, Y+4	; 0x04
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	3e 83       	std	Y+6, r19	; 0x06
    16c4:	2d 83       	std	Y+5, r18	; 0x05
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	c9 f0       	breq	.+50     	; 0x1700 <DIO_DioEnumWriteChannel+0x204>
    16ce:	2d 81       	ldd	r18, Y+5	; 0x05
    16d0:	3e 81       	ldd	r19, Y+6	; 0x06
    16d2:	21 30       	cpi	r18, 0x01	; 1
    16d4:	31 05       	cpc	r19, r1
    16d6:	59 f5       	brne	.+86     	; 0x172e <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,copy_u8PinId);     break;
    16d8:	a2 e3       	ldi	r26, 0x32	; 50
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e2 e3       	ldi	r30, 0x32	; 50
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_DioEnumWriteChannel+0x1fa>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_DioEnumWriteChannel+0x1f6>
    16fa:	84 2b       	or	r24, r20
    16fc:	8c 93       	st	X, r24
    16fe:	17 c0       	rjmp	.+46     	; 0x172e <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,copy_u8PinId);     break;
    1700:	a2 e3       	ldi	r26, 0x32	; 50
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e2 e3       	ldi	r30, 0x32	; 50
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <DIO_DioEnumWriteChannel+0x222>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <DIO_DioEnumWriteChannel+0x21e>
    1722:	80 95       	com	r24
    1724:	84 23       	and	r24, r20
    1726:	8c 93       	st	X, r24
    1728:	02 c0       	rjmp	.+4      	; 0x172e <DIO_DioEnumWriteChannel+0x232>
			break;
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_WRITE_NOK;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    172e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1730:	2e 96       	adiw	r28, 0x0e	; 14
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <DIO_DioEnumReadChannel>:

DioEnum DIO_DioEnumReadChannel(u8 copy_u8PortId,u8 copy_u8PinId,pu8 copy_pu8ReadChannel)
{
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	28 97       	sbiw	r28, 0x08	; 8
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	8b 83       	std	Y+3, r24	; 0x03
    1758:	6c 83       	std	Y+4, r22	; 0x04
    175a:	5e 83       	std	Y+6, r21	; 0x06
    175c:	4d 83       	std	Y+5, r20	; 0x05
	DioEnum local_DioEnumErrorState = DIO_READ_OK;
    175e:	82 e0       	ldi	r24, 0x02	; 2
    1760:	8a 83       	std	Y+2, r24	; 0x02
	/* local variable to store in value of the pin */
	u8 local_u8GetValue;
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7) && (copy_pu8ReadChannel != NULL))
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	84 30       	cpi	r24, 0x04	; 4
    1766:	08 f0       	brcs	.+2      	; 0x176a <DIO_DioEnumReadChannel+0x28>
    1768:	9f c0       	rjmp	.+318    	; 0x18a8 <DIO_DioEnumReadChannel+0x166>
    176a:	8c 81       	ldd	r24, Y+4	; 0x04
    176c:	88 30       	cpi	r24, 0x08	; 8
    176e:	08 f0       	brcs	.+2      	; 0x1772 <DIO_DioEnumReadChannel+0x30>
    1770:	9b c0       	rjmp	.+310    	; 0x18a8 <DIO_DioEnumReadChannel+0x166>
    1772:	8d 81       	ldd	r24, Y+5	; 0x05
    1774:	9e 81       	ldd	r25, Y+6	; 0x06
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	09 f4       	brne	.+2      	; 0x177c <DIO_DioEnumReadChannel+0x3a>
    177a:	96 c0       	rjmp	.+300    	; 0x18a8 <DIO_DioEnumReadChannel+0x166>
	{
		/* step1: check about which port you want to read */
		switch(copy_u8PortId)
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	38 87       	std	Y+8, r19	; 0x08
    1784:	2f 83       	std	Y+7, r18	; 0x07
    1786:	4f 81       	ldd	r20, Y+7	; 0x07
    1788:	58 85       	ldd	r21, Y+8	; 0x08
    178a:	41 30       	cpi	r20, 0x01	; 1
    178c:	51 05       	cpc	r21, r1
    178e:	a9 f1       	breq	.+106    	; 0x17fa <DIO_DioEnumReadChannel+0xb8>
    1790:	8f 81       	ldd	r24, Y+7	; 0x07
    1792:	98 85       	ldd	r25, Y+8	; 0x08
    1794:	82 30       	cpi	r24, 0x02	; 2
    1796:	91 05       	cpc	r25, r1
    1798:	34 f4       	brge	.+12     	; 0x17a6 <DIO_DioEnumReadChannel+0x64>
    179a:	2f 81       	ldd	r18, Y+7	; 0x07
    179c:	38 85       	ldd	r19, Y+8	; 0x08
    179e:	21 15       	cp	r18, r1
    17a0:	31 05       	cpc	r19, r1
    17a2:	71 f0       	breq	.+28     	; 0x17c0 <DIO_DioEnumReadChannel+0x7e>
    17a4:	83 c0       	rjmp	.+262    	; 0x18ac <DIO_DioEnumReadChannel+0x16a>
    17a6:	4f 81       	ldd	r20, Y+7	; 0x07
    17a8:	58 85       	ldd	r21, Y+8	; 0x08
    17aa:	42 30       	cpi	r20, 0x02	; 2
    17ac:	51 05       	cpc	r21, r1
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <DIO_DioEnumReadChannel+0x70>
    17b0:	41 c0       	rjmp	.+130    	; 0x1834 <DIO_DioEnumReadChannel+0xf2>
    17b2:	8f 81       	ldd	r24, Y+7	; 0x07
    17b4:	98 85       	ldd	r25, Y+8	; 0x08
    17b6:	83 30       	cpi	r24, 0x03	; 3
    17b8:	91 05       	cpc	r25, r1
    17ba:	09 f4       	brne	.+2      	; 0x17be <DIO_DioEnumReadChannel+0x7c>
    17bc:	58 c0       	rjmp	.+176    	; 0x186e <DIO_DioEnumReadChannel+0x12c>
    17be:	76 c0       	rjmp	.+236    	; 0x18ac <DIO_DioEnumReadChannel+0x16a>
		{
			case DIO_u8_PORTA:  // PORTA
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINA_REG,copy_u8PinId);
    17c0:	e9 e3       	ldi	r30, 0x39	; 57
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	8c 81       	ldd	r24, Y+4	; 0x04
    17cc:	88 2f       	mov	r24, r24
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	a9 01       	movw	r20, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <DIO_DioEnumReadChannel+0x96>
    17d4:	55 95       	asr	r21
    17d6:	47 95       	ror	r20
    17d8:	8a 95       	dec	r24
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <DIO_DioEnumReadChannel+0x92>
    17dc:	ca 01       	movw	r24, r20
    17de:	81 70       	andi	r24, 0x01	; 1
    17e0:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	88 23       	and	r24, r24
    17e6:	21 f4       	brne	.+8      	; 0x17f0 <DIO_DioEnumReadChannel+0xae>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    17e8:	ed 81       	ldd	r30, Y+5	; 0x05
    17ea:	fe 81       	ldd	r31, Y+6	; 0x06
    17ec:	10 82       	st	Z, r1
    17ee:	5e c0       	rjmp	.+188    	; 0x18ac <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    17f0:	ed 81       	ldd	r30, Y+5	; 0x05
    17f2:	fe 81       	ldd	r31, Y+6	; 0x06
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	80 83       	st	Z, r24
    17f8:	59 c0       	rjmp	.+178    	; 0x18ac <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTB:  // PORTB
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINB_REG,copy_u8PinId);
    17fa:	e6 e3       	ldi	r30, 0x36	; 54
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	8c 81       	ldd	r24, Y+4	; 0x04
    1806:	88 2f       	mov	r24, r24
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a9 01       	movw	r20, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <DIO_DioEnumReadChannel+0xd0>
    180e:	55 95       	asr	r21
    1810:	47 95       	ror	r20
    1812:	8a 95       	dec	r24
    1814:	e2 f7       	brpl	.-8      	; 0x180e <DIO_DioEnumReadChannel+0xcc>
    1816:	ca 01       	movw	r24, r20
    1818:	81 70       	andi	r24, 0x01	; 1
    181a:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	88 23       	and	r24, r24
    1820:	21 f4       	brne	.+8      	; 0x182a <DIO_DioEnumReadChannel+0xe8>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    1822:	ed 81       	ldd	r30, Y+5	; 0x05
    1824:	fe 81       	ldd	r31, Y+6	; 0x06
    1826:	10 82       	st	Z, r1
    1828:	41 c0       	rjmp	.+130    	; 0x18ac <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    182a:	ed 81       	ldd	r30, Y+5	; 0x05
    182c:	fe 81       	ldd	r31, Y+6	; 0x06
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	80 83       	st	Z, r24
    1832:	3c c0       	rjmp	.+120    	; 0x18ac <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTC:  // PORTC
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINC_REG,copy_u8PinId);
    1834:	e3 e3       	ldi	r30, 0x33	; 51
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	8c 81       	ldd	r24, Y+4	; 0x04
    1840:	88 2f       	mov	r24, r24
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	a9 01       	movw	r20, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <DIO_DioEnumReadChannel+0x10a>
    1848:	55 95       	asr	r21
    184a:	47 95       	ror	r20
    184c:	8a 95       	dec	r24
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <DIO_DioEnumReadChannel+0x106>
    1850:	ca 01       	movw	r24, r20
    1852:	81 70       	andi	r24, 0x01	; 1
    1854:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	88 23       	and	r24, r24
    185a:	21 f4       	brne	.+8      	; 0x1864 <DIO_DioEnumReadChannel+0x122>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    185c:	ed 81       	ldd	r30, Y+5	; 0x05
    185e:	fe 81       	ldd	r31, Y+6	; 0x06
    1860:	10 82       	st	Z, r1
    1862:	24 c0       	rjmp	.+72     	; 0x18ac <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    1864:	ed 81       	ldd	r30, Y+5	; 0x05
    1866:	fe 81       	ldd	r31, Y+6	; 0x06
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	80 83       	st	Z, r24
    186c:	1f c0       	rjmp	.+62     	; 0x18ac <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTD:  // PORTD
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PIND_REG,copy_u8PinId);
    186e:	e0 e3       	ldi	r30, 0x30	; 48
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	8c 81       	ldd	r24, Y+4	; 0x04
    187a:	88 2f       	mov	r24, r24
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a9 01       	movw	r20, r18
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <DIO_DioEnumReadChannel+0x144>
    1882:	55 95       	asr	r21
    1884:	47 95       	ror	r20
    1886:	8a 95       	dec	r24
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <DIO_DioEnumReadChannel+0x140>
    188a:	ca 01       	movw	r24, r20
    188c:	81 70       	andi	r24, 0x01	; 1
    188e:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	88 23       	and	r24, r24
    1894:	21 f4       	brne	.+8      	; 0x189e <DIO_DioEnumReadChannel+0x15c>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    1896:	ed 81       	ldd	r30, Y+5	; 0x05
    1898:	fe 81       	ldd	r31, Y+6	; 0x06
    189a:	10 82       	st	Z, r1
    189c:	07 c0       	rjmp	.+14     	; 0x18ac <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    189e:	ed 81       	ldd	r30, Y+5	; 0x05
    18a0:	fe 81       	ldd	r31, Y+6	; 0x06
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	80 83       	st	Z, r24
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <DIO_DioEnumReadChannel+0x16a>
			break;
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_READ_NOK;
    18a8:	83 e0       	ldi	r24, 0x03	; 3
    18aa:	8a 83       	std	Y+2, r24	; 0x02
	}
	return local_DioEnumErrorState;
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
}
    18ae:	28 96       	adiw	r28, 0x08	; 8
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	f8 94       	cli
    18b4:	de bf       	out	0x3e, r29	; 62
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	cd bf       	out	0x3d, r28	; 61
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <DIO_DioEnumWritePort>:

DioEnum DIO_DioEnumWritePort(u8 copy_u8PortId,u8 copy_u8Value)
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <DIO_DioEnumWritePort+0x6>
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <DIO_DioEnumWritePort+0x8>
    18c8:	0f 92       	push	r0
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	8a 83       	std	Y+2, r24	; 0x02
    18d0:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_WPORT_OK;
    18d2:	84 e0       	ldi	r24, 0x04	; 4
    18d4:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if(copy_u8PortId <= DIO_u8_PORTD)
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	84 30       	cpi	r24, 0x04	; 4
    18da:	98 f5       	brcc	.+102    	; 0x1942 <DIO_DioEnumWritePort+0x82>
	{
		/* check about which port you want to write into the value */
		switch(copy_u8PortId)
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	3d 83       	std	Y+5, r19	; 0x05
    18e4:	2c 83       	std	Y+4, r18	; 0x04
    18e6:	8c 81       	ldd	r24, Y+4	; 0x04
    18e8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ea:	81 30       	cpi	r24, 0x01	; 1
    18ec:	91 05       	cpc	r25, r1
    18ee:	d1 f0       	breq	.+52     	; 0x1924 <DIO_DioEnumWritePort+0x64>
    18f0:	2c 81       	ldd	r18, Y+4	; 0x04
    18f2:	3d 81       	ldd	r19, Y+5	; 0x05
    18f4:	22 30       	cpi	r18, 0x02	; 2
    18f6:	31 05       	cpc	r19, r1
    18f8:	2c f4       	brge	.+10     	; 0x1904 <DIO_DioEnumWritePort+0x44>
    18fa:	8c 81       	ldd	r24, Y+4	; 0x04
    18fc:	9d 81       	ldd	r25, Y+5	; 0x05
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	61 f0       	breq	.+24     	; 0x191a <DIO_DioEnumWritePort+0x5a>
    1902:	21 c0       	rjmp	.+66     	; 0x1946 <DIO_DioEnumWritePort+0x86>
    1904:	2c 81       	ldd	r18, Y+4	; 0x04
    1906:	3d 81       	ldd	r19, Y+5	; 0x05
    1908:	22 30       	cpi	r18, 0x02	; 2
    190a:	31 05       	cpc	r19, r1
    190c:	81 f0       	breq	.+32     	; 0x192e <DIO_DioEnumWritePort+0x6e>
    190e:	8c 81       	ldd	r24, Y+4	; 0x04
    1910:	9d 81       	ldd	r25, Y+5	; 0x05
    1912:	83 30       	cpi	r24, 0x03	; 3
    1914:	91 05       	cpc	r25, r1
    1916:	81 f0       	breq	.+32     	; 0x1938 <DIO_DioEnumWritePort+0x78>
    1918:	16 c0       	rjmp	.+44     	; 0x1946 <DIO_DioEnumWritePort+0x86>
		{
			case DIO_u8_PORTA: DIO_u8_PORTA_REG = copy_u8Value;      break;
    191a:	eb e3       	ldi	r30, 0x3B	; 59
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	80 83       	st	Z, r24
    1922:	11 c0       	rjmp	.+34     	; 0x1946 <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTB: DIO_u8_PORTB_REG = copy_u8Value;      break;
    1924:	e8 e3       	ldi	r30, 0x38	; 56
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	80 83       	st	Z, r24
    192c:	0c c0       	rjmp	.+24     	; 0x1946 <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTC: DIO_u8_PORTC_REG = copy_u8Value;      break;
    192e:	e5 e3       	ldi	r30, 0x35	; 53
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	80 83       	st	Z, r24
    1936:	07 c0       	rjmp	.+14     	; 0x1946 <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTD: DIO_u8_PORTD_REG = copy_u8Value;      break;
    1938:	e2 e3       	ldi	r30, 0x32	; 50
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	80 83       	st	Z, r24
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_DioEnumWritePort+0x86>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_WPORT_NOK;
    1942:	85 e0       	ldi	r24, 0x05	; 5
    1944:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    1946:	89 81       	ldd	r24, Y+1	; 0x01
}
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <DIO_DioEnumReadPort>:

DioEnum DIO_DioEnumReadPort(u8 copy_u8PortId,pu8 copy_pu8ReadPort)
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	00 d0       	rcall	.+0      	; 0x195e <DIO_DioEnumReadPort+0x6>
    195e:	00 d0       	rcall	.+0      	; 0x1960 <DIO_DioEnumReadPort+0x8>
    1960:	00 d0       	rcall	.+0      	; 0x1962 <DIO_DioEnumReadPort+0xa>
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	8a 83       	std	Y+2, r24	; 0x02
    1968:	7c 83       	std	Y+4, r23	; 0x04
    196a:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_RPORT_OK;
    196c:	86 e0       	ldi	r24, 0x06	; 6
    196e:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_pu8ReadPort != NULL))
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	84 30       	cpi	r24, 0x04	; 4
    1974:	08 f0       	brcs	.+2      	; 0x1978 <DIO_DioEnumReadPort+0x20>
    1976:	3f c0       	rjmp	.+126    	; 0x19f6 <DIO_DioEnumReadPort+0x9e>
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	9c 81       	ldd	r25, Y+4	; 0x04
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	d9 f1       	breq	.+118    	; 0x19f6 <DIO_DioEnumReadPort+0x9e>
	{
		/* check about which port you want to read this value */
		switch(copy_u8PortId)
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	3e 83       	std	Y+6, r19	; 0x06
    1988:	2d 83       	std	Y+5, r18	; 0x05
    198a:	8d 81       	ldd	r24, Y+5	; 0x05
    198c:	9e 81       	ldd	r25, Y+6	; 0x06
    198e:	81 30       	cpi	r24, 0x01	; 1
    1990:	91 05       	cpc	r25, r1
    1992:	e1 f0       	breq	.+56     	; 0x19cc <DIO_DioEnumReadPort+0x74>
    1994:	2d 81       	ldd	r18, Y+5	; 0x05
    1996:	3e 81       	ldd	r19, Y+6	; 0x06
    1998:	22 30       	cpi	r18, 0x02	; 2
    199a:	31 05       	cpc	r19, r1
    199c:	2c f4       	brge	.+10     	; 0x19a8 <DIO_DioEnumReadPort+0x50>
    199e:	8d 81       	ldd	r24, Y+5	; 0x05
    19a0:	9e 81       	ldd	r25, Y+6	; 0x06
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	61 f0       	breq	.+24     	; 0x19be <DIO_DioEnumReadPort+0x66>
    19a6:	29 c0       	rjmp	.+82     	; 0x19fa <DIO_DioEnumReadPort+0xa2>
    19a8:	2d 81       	ldd	r18, Y+5	; 0x05
    19aa:	3e 81       	ldd	r19, Y+6	; 0x06
    19ac:	22 30       	cpi	r18, 0x02	; 2
    19ae:	31 05       	cpc	r19, r1
    19b0:	a1 f0       	breq	.+40     	; 0x19da <DIO_DioEnumReadPort+0x82>
    19b2:	8d 81       	ldd	r24, Y+5	; 0x05
    19b4:	9e 81       	ldd	r25, Y+6	; 0x06
    19b6:	83 30       	cpi	r24, 0x03	; 3
    19b8:	91 05       	cpc	r25, r1
    19ba:	b1 f0       	breq	.+44     	; 0x19e8 <DIO_DioEnumReadPort+0x90>
    19bc:	1e c0       	rjmp	.+60     	; 0x19fa <DIO_DioEnumReadPort+0xa2>
		{
			case DIO_u8_PORTA: *copy_pu8ReadPort = DIO_u8_PINA_REG;      break;
    19be:	e9 e3       	ldi	r30, 0x39	; 57
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	eb 81       	ldd	r30, Y+3	; 0x03
    19c6:	fc 81       	ldd	r31, Y+4	; 0x04
    19c8:	80 83       	st	Z, r24
    19ca:	17 c0       	rjmp	.+46     	; 0x19fa <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTB: *copy_pu8ReadPort = DIO_u8_PINB_REG;      break;
    19cc:	e6 e3       	ldi	r30, 0x36	; 54
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	eb 81       	ldd	r30, Y+3	; 0x03
    19d4:	fc 81       	ldd	r31, Y+4	; 0x04
    19d6:	80 83       	st	Z, r24
    19d8:	10 c0       	rjmp	.+32     	; 0x19fa <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTC: *copy_pu8ReadPort = DIO_u8_PINC_REG;      break;
    19da:	e3 e3       	ldi	r30, 0x33	; 51
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	eb 81       	ldd	r30, Y+3	; 0x03
    19e2:	fc 81       	ldd	r31, Y+4	; 0x04
    19e4:	80 83       	st	Z, r24
    19e6:	09 c0       	rjmp	.+18     	; 0x19fa <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTD: *copy_pu8ReadPort = DIO_u8_PIND_REG;      break;
    19e8:	e0 e3       	ldi	r30, 0x30	; 48
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	eb 81       	ldd	r30, Y+3	; 0x03
    19f0:	fc 81       	ldd	r31, Y+4	; 0x04
    19f2:	80 83       	st	Z, r24
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <DIO_DioEnumReadPort+0xa2>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_RPORT_NOK;
    19f6:	87 e0       	ldi	r24, 0x07	; 7
    19f8:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    19fc:	26 96       	adiw	r28, 0x06	; 6
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <DIO_DioEnumFlibChannel>:

DioEnum DIO_DioEnumFlibChannel(u8 copy_u8PortId,u8 copy_u8PinId)
{
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <DIO_DioEnumFlibChannel+0x6>
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <DIO_DioEnumFlibChannel+0x8>
    1a16:	0f 92       	push	r0
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	8a 83       	std	Y+2, r24	; 0x02
    1a1e:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_FLIB_OK;
    1a20:	88 e0       	ldi	r24, 0x08	; 8
    1a22:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7))
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	84 30       	cpi	r24, 0x04	; 4
    1a28:	08 f0       	brcs	.+2      	; 0x1a2c <DIO_DioEnumFlibChannel+0x1e>
    1a2a:	73 c0       	rjmp	.+230    	; 0x1b12 <DIO_DioEnumFlibChannel+0x104>
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	88 30       	cpi	r24, 0x08	; 8
    1a30:	08 f0       	brcs	.+2      	; 0x1a34 <DIO_DioEnumFlibChannel+0x26>
    1a32:	6f c0       	rjmp	.+222    	; 0x1b12 <DIO_DioEnumFlibChannel+0x104>
	{
		/* check about which port you want to toggle your pins */
		switch(copy_u8PortId)
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	3d 83       	std	Y+5, r19	; 0x05
    1a3c:	2c 83       	std	Y+4, r18	; 0x04
    1a3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a40:	9d 81       	ldd	r25, Y+5	; 0x05
    1a42:	81 30       	cpi	r24, 0x01	; 1
    1a44:	91 05       	cpc	r25, r1
    1a46:	49 f1       	breq	.+82     	; 0x1a9a <DIO_DioEnumFlibChannel+0x8c>
    1a48:	2c 81       	ldd	r18, Y+4	; 0x04
    1a4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a4c:	22 30       	cpi	r18, 0x02	; 2
    1a4e:	31 05       	cpc	r19, r1
    1a50:	2c f4       	brge	.+10     	; 0x1a5c <DIO_DioEnumFlibChannel+0x4e>
    1a52:	8c 81       	ldd	r24, Y+4	; 0x04
    1a54:	9d 81       	ldd	r25, Y+5	; 0x05
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	61 f0       	breq	.+24     	; 0x1a72 <DIO_DioEnumFlibChannel+0x64>
    1a5a:	5d c0       	rjmp	.+186    	; 0x1b16 <DIO_DioEnumFlibChannel+0x108>
    1a5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a60:	22 30       	cpi	r18, 0x02	; 2
    1a62:	31 05       	cpc	r19, r1
    1a64:	71 f1       	breq	.+92     	; 0x1ac2 <DIO_DioEnumFlibChannel+0xb4>
    1a66:	8c 81       	ldd	r24, Y+4	; 0x04
    1a68:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6a:	83 30       	cpi	r24, 0x03	; 3
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	e9 f1       	breq	.+122    	; 0x1aea <DIO_DioEnumFlibChannel+0xdc>
    1a70:	52 c0       	rjmp	.+164    	; 0x1b16 <DIO_DioEnumFlibChannel+0x108>
		{
			case DIO_u8_PORTA: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    1a72:	ab e3       	ldi	r26, 0x3B	; 59
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	eb e3       	ldi	r30, 0x3B	; 59
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	48 2f       	mov	r20, r24
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	02 2e       	mov	r0, r18
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <DIO_DioEnumFlibChannel+0x82>
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	0a 94       	dec	r0
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <DIO_DioEnumFlibChannel+0x7e>
    1a94:	84 27       	eor	r24, r20
    1a96:	8c 93       	st	X, r24
    1a98:	3e c0       	rjmp	.+124    	; 0x1b16 <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTB: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    1a9a:	ab e3       	ldi	r26, 0x3B	; 59
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	eb e3       	ldi	r30, 0x3B	; 59
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	48 2f       	mov	r20, r24
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	02 2e       	mov	r0, r18
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <DIO_DioEnumFlibChannel+0xaa>
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	0a 94       	dec	r0
    1aba:	e2 f7       	brpl	.-8      	; 0x1ab4 <DIO_DioEnumFlibChannel+0xa6>
    1abc:	84 27       	eor	r24, r20
    1abe:	8c 93       	st	X, r24
    1ac0:	2a c0       	rjmp	.+84     	; 0x1b16 <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTC: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    1ac2:	ab e3       	ldi	r26, 0x3B	; 59
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	eb e3       	ldi	r30, 0x3B	; 59
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	48 2f       	mov	r20, r24
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	02 2e       	mov	r0, r18
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <DIO_DioEnumFlibChannel+0xd2>
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	0a 94       	dec	r0
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <DIO_DioEnumFlibChannel+0xce>
    1ae4:	84 27       	eor	r24, r20
    1ae6:	8c 93       	st	X, r24
    1ae8:	16 c0       	rjmp	.+44     	; 0x1b16 <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTD: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    1aea:	ab e3       	ldi	r26, 0x3B	; 59
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	eb e3       	ldi	r30, 0x3B	; 59
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	48 2f       	mov	r20, r24
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	02 2e       	mov	r0, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <DIO_DioEnumFlibChannel+0xfa>
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	0a 94       	dec	r0
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <DIO_DioEnumFlibChannel+0xf6>
    1b0c:	84 27       	eor	r24, r20
    1b0e:	8c 93       	st	X, r24
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <DIO_DioEnumFlibChannel+0x108>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_FLIB_NOK;
    1b12:	89 e0       	ldi	r24, 0x09	; 9
    1b14:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	08 95       	ret

00001b28 <LCD_voidInit>:
#include "../Include/LCD_config.h"
#define F_CPU    8000000UL
#include <util/delay.h>

void LCD_voidInit(void)
{
    1b28:	df 93       	push	r29
    1b2a:	cf 93       	push	r28
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	e8 97       	sbiw	r28, 0x38	; 56
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	cd bf       	out	0x3d, r28	; 61
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	a8 e4       	ldi	r26, 0x48	; 72
    1b42:	b2 e4       	ldi	r27, 0x42	; 66
    1b44:	8d ab       	std	Y+53, r24	; 0x35
    1b46:	9e ab       	std	Y+54, r25	; 0x36
    1b48:	af ab       	std	Y+55, r26	; 0x37
    1b4a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b4e:	7e a9       	ldd	r23, Y+54	; 0x36
    1b50:	8f a9       	ldd	r24, Y+55	; 0x37
    1b52:	98 ad       	ldd	r25, Y+56	; 0x38
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	4a ef       	ldi	r20, 0xFA	; 250
    1b5a:	54 e4       	ldi	r21, 0x44	; 68
    1b5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	89 ab       	std	Y+49, r24	; 0x31
    1b66:	9a ab       	std	Y+50, r25	; 0x32
    1b68:	ab ab       	std	Y+51, r26	; 0x33
    1b6a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b6e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b70:	8b a9       	ldd	r24, Y+51	; 0x33
    1b72:	9c a9       	ldd	r25, Y+52	; 0x34
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e8       	ldi	r20, 0x80	; 128
    1b7a:	5f e3       	ldi	r21, 0x3F	; 63
    1b7c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b80:	88 23       	and	r24, r24
    1b82:	2c f4       	brge	.+10     	; 0x1b8e <LCD_voidInit+0x66>
		__ticks = 1;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	98 ab       	std	Y+48, r25	; 0x30
    1b8a:	8f a7       	std	Y+47, r24	; 0x2f
    1b8c:	3f c0       	rjmp	.+126    	; 0x1c0c <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1b8e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b90:	7a a9       	ldd	r23, Y+50	; 0x32
    1b92:	8b a9       	ldd	r24, Y+51	; 0x33
    1b94:	9c a9       	ldd	r25, Y+52	; 0x34
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	3f ef       	ldi	r19, 0xFF	; 255
    1b9a:	4f e7       	ldi	r20, 0x7F	; 127
    1b9c:	57 e4       	ldi	r21, 0x47	; 71
    1b9e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ba2:	18 16       	cp	r1, r24
    1ba4:	4c f5       	brge	.+82     	; 0x1bf8 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ba8:	7e a9       	ldd	r23, Y+54	; 0x36
    1baa:	8f a9       	ldd	r24, Y+55	; 0x37
    1bac:	98 ad       	ldd	r25, Y+56	; 0x38
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e2       	ldi	r20, 0x20	; 32
    1bb4:	51 e4       	ldi	r21, 0x41	; 65
    1bb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	bc 01       	movw	r22, r24
    1bc0:	cd 01       	movw	r24, r26
    1bc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	98 ab       	std	Y+48, r25	; 0x30
    1bcc:	8f a7       	std	Y+47, r24	; 0x2f
    1bce:	0f c0       	rjmp	.+30     	; 0x1bee <LCD_voidInit+0xc6>
    1bd0:	88 ec       	ldi	r24, 0xC8	; 200
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	9e a7       	std	Y+46, r25	; 0x2e
    1bd6:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bd8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bda:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <LCD_voidInit+0xb4>
    1be0:	9e a7       	std	Y+46, r25	; 0x2e
    1be2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1be6:	98 a9       	ldd	r25, Y+48	; 0x30
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	98 ab       	std	Y+48, r25	; 0x30
    1bec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bf0:	98 a9       	ldd	r25, Y+48	; 0x30
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	69 f7       	brne	.-38     	; 0x1bd0 <LCD_voidInit+0xa8>
    1bf6:	14 c0       	rjmp	.+40     	; 0x1c20 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf8:	69 a9       	ldd	r22, Y+49	; 0x31
    1bfa:	7a a9       	ldd	r23, Y+50	; 0x32
    1bfc:	8b a9       	ldd	r24, Y+51	; 0x33
    1bfe:	9c a9       	ldd	r25, Y+52	; 0x34
    1c00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	98 ab       	std	Y+48, r25	; 0x30
    1c0a:	8f a7       	std	Y+47, r24	; 0x2f
    1c0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c10:	9c a7       	std	Y+44, r25	; 0x2c
    1c12:	8b a7       	std	Y+43, r24	; 0x2b
    1c14:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c16:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <LCD_voidInit+0xf0>
    1c1c:	9c a7       	std	Y+44, r25	; 0x2c
    1c1e:	8b a7       	std	Y+43, r24	; 0x2b
    /* delay more than 30 msec */
    _delay_ms(50);
    LCD_voidSendCommand(LCD_u8_CURSOR_HOME);
    1c20:	82 e0       	ldi	r24, 0x02	; 2
    1c22:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LCD_voidSendCommand>
    #if   LCD_u8_MODE == LCD_u8_MODE_8_BIT
        /* function set => call send_command func */
        LCD_voidSendCommand(LCD_u8_8B_Mode);
    #elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
        /* function set => call send_command func */
        LCD_voidSendCommand(LCD_u8_4B_Mode);
    1c26:	88 e2       	ldi	r24, 0x28	; 40
    1c28:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LCD_voidSendCommand>
    #endif 
    /* display clear => call send_command func */
    LCD_voidSendCommand(LCD_u8_DISPLAY_CLEAR);
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LCD_voidSendCommand>
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	a0 e8       	ldi	r26, 0x80	; 128
    1c38:	b0 e4       	ldi	r27, 0x40	; 64
    1c3a:	8f a3       	std	Y+39, r24	; 0x27
    1c3c:	98 a7       	std	Y+40, r25	; 0x28
    1c3e:	a9 a7       	std	Y+41, r26	; 0x29
    1c40:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c42:	6f a1       	ldd	r22, Y+39	; 0x27
    1c44:	78 a5       	ldd	r23, Y+40	; 0x28
    1c46:	89 a5       	ldd	r24, Y+41	; 0x29
    1c48:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	4a ef       	ldi	r20, 0xFA	; 250
    1c50:	54 e4       	ldi	r21, 0x44	; 68
    1c52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	8b a3       	std	Y+35, r24	; 0x23
    1c5c:	9c a3       	std	Y+36, r25	; 0x24
    1c5e:	ad a3       	std	Y+37, r26	; 0x25
    1c60:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c62:	6b a1       	ldd	r22, Y+35	; 0x23
    1c64:	7c a1       	ldd	r23, Y+36	; 0x24
    1c66:	8d a1       	ldd	r24, Y+37	; 0x25
    1c68:	9e a1       	ldd	r25, Y+38	; 0x26
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e8       	ldi	r20, 0x80	; 128
    1c70:	5f e3       	ldi	r21, 0x3F	; 63
    1c72:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c76:	88 23       	and	r24, r24
    1c78:	2c f4       	brge	.+10     	; 0x1c84 <LCD_voidInit+0x15c>
		__ticks = 1;
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	9a a3       	std	Y+34, r25	; 0x22
    1c80:	89 a3       	std	Y+33, r24	; 0x21
    1c82:	3f c0       	rjmp	.+126    	; 0x1d02 <LCD_voidInit+0x1da>
	else if (__tmp > 65535)
    1c84:	6b a1       	ldd	r22, Y+35	; 0x23
    1c86:	7c a1       	ldd	r23, Y+36	; 0x24
    1c88:	8d a1       	ldd	r24, Y+37	; 0x25
    1c8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	3f ef       	ldi	r19, 0xFF	; 255
    1c90:	4f e7       	ldi	r20, 0x7F	; 127
    1c92:	57 e4       	ldi	r21, 0x47	; 71
    1c94:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c98:	18 16       	cp	r1, r24
    1c9a:	4c f5       	brge	.+82     	; 0x1cee <LCD_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9c:	6f a1       	ldd	r22, Y+39	; 0x27
    1c9e:	78 a5       	ldd	r23, Y+40	; 0x28
    1ca0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ca2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e2       	ldi	r20, 0x20	; 32
    1caa:	51 e4       	ldi	r21, 0x41	; 65
    1cac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	bc 01       	movw	r22, r24
    1cb6:	cd 01       	movw	r24, r26
    1cb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	9a a3       	std	Y+34, r25	; 0x22
    1cc2:	89 a3       	std	Y+33, r24	; 0x21
    1cc4:	0f c0       	rjmp	.+30     	; 0x1ce4 <LCD_voidInit+0x1bc>
    1cc6:	88 ec       	ldi	r24, 0xC8	; 200
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	98 a3       	std	Y+32, r25	; 0x20
    1ccc:	8f 8f       	std	Y+31, r24	; 0x1f
    1cce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cd0:	98 a1       	ldd	r25, Y+32	; 0x20
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <LCD_voidInit+0x1aa>
    1cd6:	98 a3       	std	Y+32, r25	; 0x20
    1cd8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cda:	89 a1       	ldd	r24, Y+33	; 0x21
    1cdc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	9a a3       	std	Y+34, r25	; 0x22
    1ce2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	69 f7       	brne	.-38     	; 0x1cc6 <LCD_voidInit+0x19e>
    1cec:	14 c0       	rjmp	.+40     	; 0x1d16 <LCD_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cee:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	9a a3       	std	Y+34, r25	; 0x22
    1d00:	89 a3       	std	Y+33, r24	; 0x21
    1d02:	89 a1       	ldd	r24, Y+33	; 0x21
    1d04:	9a a1       	ldd	r25, Y+34	; 0x22
    1d06:	9e 8f       	std	Y+30, r25	; 0x1e
    1d08:	8d 8f       	std	Y+29, r24	; 0x1d
    1d0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <LCD_voidInit+0x1e6>
    1d12:	9e 8f       	std	Y+30, r25	; 0x1e
    1d14:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(4);
    /* entry mode => call send_command func */
    LCD_voidSendCommand(LCD_u8_ENTRY_Mode);
    1d16:	86 e0       	ldi	r24, 0x06	; 6
    1d18:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LCD_voidSendCommand>
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	a0 e8       	ldi	r26, 0x80	; 128
    1d22:	bf e3       	ldi	r27, 0x3F	; 63
    1d24:	89 8f       	std	Y+25, r24	; 0x19
    1d26:	9a 8f       	std	Y+26, r25	; 0x1a
    1d28:	ab 8f       	std	Y+27, r26	; 0x1b
    1d2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	4a ef       	ldi	r20, 0xFA	; 250
    1d3a:	54 e4       	ldi	r21, 0x44	; 68
    1d3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	8d 8b       	std	Y+21, r24	; 0x15
    1d46:	9e 8b       	std	Y+22, r25	; 0x16
    1d48:	af 8b       	std	Y+23, r26	; 0x17
    1d4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d50:	8f 89       	ldd	r24, Y+23	; 0x17
    1d52:	98 8d       	ldd	r25, Y+24	; 0x18
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	40 e8       	ldi	r20, 0x80	; 128
    1d5a:	5f e3       	ldi	r21, 0x3F	; 63
    1d5c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d60:	88 23       	and	r24, r24
    1d62:	2c f4       	brge	.+10     	; 0x1d6e <LCD_voidInit+0x246>
		__ticks = 1;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	9c 8b       	std	Y+20, r25	; 0x14
    1d6a:	8b 8b       	std	Y+19, r24	; 0x13
    1d6c:	3f c0       	rjmp	.+126    	; 0x1dec <LCD_voidInit+0x2c4>
	else if (__tmp > 65535)
    1d6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d70:	7e 89       	ldd	r23, Y+22	; 0x16
    1d72:	8f 89       	ldd	r24, Y+23	; 0x17
    1d74:	98 8d       	ldd	r25, Y+24	; 0x18
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	3f ef       	ldi	r19, 0xFF	; 255
    1d7a:	4f e7       	ldi	r20, 0x7F	; 127
    1d7c:	57 e4       	ldi	r21, 0x47	; 71
    1d7e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d82:	18 16       	cp	r1, r24
    1d84:	4c f5       	brge	.+82     	; 0x1dd8 <LCD_voidInit+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d86:	69 8d       	ldd	r22, Y+25	; 0x19
    1d88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e2       	ldi	r20, 0x20	; 32
    1d94:	51 e4       	ldi	r21, 0x41	; 65
    1d96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	bc 01       	movw	r22, r24
    1da0:	cd 01       	movw	r24, r26
    1da2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	9c 8b       	std	Y+20, r25	; 0x14
    1dac:	8b 8b       	std	Y+19, r24	; 0x13
    1dae:	0f c0       	rjmp	.+30     	; 0x1dce <LCD_voidInit+0x2a6>
    1db0:	88 ec       	ldi	r24, 0xC8	; 200
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	9a 8b       	std	Y+18, r25	; 0x12
    1db6:	89 8b       	std	Y+17, r24	; 0x11
    1db8:	89 89       	ldd	r24, Y+17	; 0x11
    1dba:	9a 89       	ldd	r25, Y+18	; 0x12
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <LCD_voidInit+0x294>
    1dc0:	9a 8b       	std	Y+18, r25	; 0x12
    1dc2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	9c 8b       	std	Y+20, r25	; 0x14
    1dcc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dce:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	69 f7       	brne	.-38     	; 0x1db0 <LCD_voidInit+0x288>
    1dd6:	14 c0       	rjmp	.+40     	; 0x1e00 <LCD_voidInit+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dda:	7e 89       	ldd	r23, Y+22	; 0x16
    1ddc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dde:	98 8d       	ldd	r25, Y+24	; 0x18
    1de0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	9c 8b       	std	Y+20, r25	; 0x14
    1dea:	8b 8b       	std	Y+19, r24	; 0x13
    1dec:	8b 89       	ldd	r24, Y+19	; 0x13
    1dee:	9c 89       	ldd	r25, Y+20	; 0x14
    1df0:	98 8b       	std	Y+16, r25	; 0x10
    1df2:	8f 87       	std	Y+15, r24	; 0x0f
    1df4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1df6:	98 89       	ldd	r25, Y+16	; 0x10
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	f1 f7       	brne	.-4      	; 0x1df8 <LCD_voidInit+0x2d0>
    1dfc:	98 8b       	std	Y+16, r25	; 0x10
    1dfe:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);  
    /* display uursor on/off control => call send_command func */
    LCD_voidSendCommand(LCD_u8_DISPLAY_CURSOR_ON);
    1e00:	8c e0       	ldi	r24, 0x0C	; 12
    1e02:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LCD_voidSendCommand>
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	a0 e8       	ldi	r26, 0x80	; 128
    1e0c:	bf e3       	ldi	r27, 0x3F	; 63
    1e0e:	8b 87       	std	Y+11, r24	; 0x0b
    1e10:	9c 87       	std	Y+12, r25	; 0x0c
    1e12:	ad 87       	std	Y+13, r26	; 0x0d
    1e14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	4a ef       	ldi	r20, 0xFA	; 250
    1e24:	54 e4       	ldi	r21, 0x44	; 68
    1e26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	8f 83       	std	Y+7, r24	; 0x07
    1e30:	98 87       	std	Y+8, r25	; 0x08
    1e32:	a9 87       	std	Y+9, r26	; 0x09
    1e34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e36:	6f 81       	ldd	r22, Y+7	; 0x07
    1e38:	78 85       	ldd	r23, Y+8	; 0x08
    1e3a:	89 85       	ldd	r24, Y+9	; 0x09
    1e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	40 e8       	ldi	r20, 0x80	; 128
    1e44:	5f e3       	ldi	r21, 0x3F	; 63
    1e46:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e4a:	88 23       	and	r24, r24
    1e4c:	2c f4       	brge	.+10     	; 0x1e58 <LCD_voidInit+0x330>
		__ticks = 1;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	8d 83       	std	Y+5, r24	; 0x05
    1e56:	3f c0       	rjmp	.+126    	; 0x1ed6 <LCD_voidInit+0x3ae>
	else if (__tmp > 65535)
    1e58:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5a:	78 85       	ldd	r23, Y+8	; 0x08
    1e5c:	89 85       	ldd	r24, Y+9	; 0x09
    1e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	3f ef       	ldi	r19, 0xFF	; 255
    1e64:	4f e7       	ldi	r20, 0x7F	; 127
    1e66:	57 e4       	ldi	r21, 0x47	; 71
    1e68:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e6c:	18 16       	cp	r1, r24
    1e6e:	4c f5       	brge	.+82     	; 0x1ec2 <LCD_voidInit+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	40 e2       	ldi	r20, 0x20	; 32
    1e7e:	51 e4       	ldi	r21, 0x41	; 65
    1e80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	bc 01       	movw	r22, r24
    1e8a:	cd 01       	movw	r24, r26
    1e8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	9e 83       	std	Y+6, r25	; 0x06
    1e96:	8d 83       	std	Y+5, r24	; 0x05
    1e98:	0f c0       	rjmp	.+30     	; 0x1eb8 <LCD_voidInit+0x390>
    1e9a:	88 ec       	ldi	r24, 0xC8	; 200
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	9c 83       	std	Y+4, r25	; 0x04
    1ea0:	8b 83       	std	Y+3, r24	; 0x03
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	f1 f7       	brne	.-4      	; 0x1ea6 <LCD_voidInit+0x37e>
    1eaa:	9c 83       	std	Y+4, r25	; 0x04
    1eac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eae:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	9e 83       	std	Y+6, r25	; 0x06
    1eb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eba:	9e 81       	ldd	r25, Y+6	; 0x06
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	69 f7       	brne	.-38     	; 0x1e9a <LCD_voidInit+0x372>
    1ec0:	14 c0       	rjmp	.+40     	; 0x1eea <LCD_voidInit+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec4:	78 85       	ldd	r23, Y+8	; 0x08
    1ec6:	89 85       	ldd	r24, Y+9	; 0x09
    1ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	9e 83       	std	Y+6, r25	; 0x06
    1ed4:	8d 83       	std	Y+5, r24	; 0x05
    1ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eda:	9a 83       	std	Y+2, r25	; 0x02
    1edc:	89 83       	std	Y+1, r24	; 0x01
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	f1 f7       	brne	.-4      	; 0x1ee2 <LCD_voidInit+0x3ba>
    1ee6:	9a 83       	std	Y+2, r25	; 0x02
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);  
}
    1eea:	e8 96       	adiw	r28, 0x38	; 56
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 copy_u8Comand)
{
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	6d 97       	sbiw	r28, 0x1d	; 29
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	cd bf       	out	0x3d, r28	; 61
    1f10:	8d 8f       	std	Y+29, r24	; 0x1d
    /* write 0 to RS pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	60 e0       	ldi	r22, 0x00	; 0
    1f16:	40 e0       	ldi	r20, 0x00	; 0
    1f18:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <DIO_DioEnumWriteChannel>
    /* write 0 to RW pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	61 e0       	ldi	r22, 0x01	; 1
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <DIO_DioEnumWriteChannel>
    /* write 1 to enable pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	62 e0       	ldi	r22, 0x02	; 2
    1f2a:	41 e0       	ldi	r20, 0x01	; 1
    1f2c:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <DIO_DioEnumWriteChannel>
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    #elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
        /* write the command to Data Port => 4_Bit high */
        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Comand);
    1f30:	83 e0       	ldi	r24, 0x03	; 3
    1f32:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1f34:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <DIO_DioEnumWritePort>
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	62 e0       	ldi	r22, 0x02	; 2
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <DIO_DioEnumWriteChannel>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	a0 e8       	ldi	r26, 0x80	; 128
    1f48:	bf e3       	ldi	r27, 0x3F	; 63
    1f4a:	89 8f       	std	Y+25, r24	; 0x19
    1f4c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f4e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f52:	69 8d       	ldd	r22, Y+25	; 0x19
    1f54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	4a ef       	ldi	r20, 0xFA	; 250
    1f60:	54 e4       	ldi	r21, 0x44	; 68
    1f62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	8d 8b       	std	Y+21, r24	; 0x15
    1f6c:	9e 8b       	std	Y+22, r25	; 0x16
    1f6e:	af 8b       	std	Y+23, r26	; 0x17
    1f70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f72:	6d 89       	ldd	r22, Y+21	; 0x15
    1f74:	7e 89       	ldd	r23, Y+22	; 0x16
    1f76:	8f 89       	ldd	r24, Y+23	; 0x17
    1f78:	98 8d       	ldd	r25, Y+24	; 0x18
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e8       	ldi	r20, 0x80	; 128
    1f80:	5f e3       	ldi	r21, 0x3F	; 63
    1f82:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f86:	88 23       	and	r24, r24
    1f88:	2c f4       	brge	.+10     	; 0x1f94 <LCD_voidSendCommand+0x98>
		__ticks = 1;
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	9c 8b       	std	Y+20, r25	; 0x14
    1f90:	8b 8b       	std	Y+19, r24	; 0x13
    1f92:	3f c0       	rjmp	.+126    	; 0x2012 <LCD_voidSendCommand+0x116>
	else if (__tmp > 65535)
    1f94:	6d 89       	ldd	r22, Y+21	; 0x15
    1f96:	7e 89       	ldd	r23, Y+22	; 0x16
    1f98:	8f 89       	ldd	r24, Y+23	; 0x17
    1f9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	3f ef       	ldi	r19, 0xFF	; 255
    1fa0:	4f e7       	ldi	r20, 0x7F	; 127
    1fa2:	57 e4       	ldi	r21, 0x47	; 71
    1fa4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fa8:	18 16       	cp	r1, r24
    1faa:	4c f5       	brge	.+82     	; 0x1ffe <LCD_voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fac:	69 8d       	ldd	r22, Y+25	; 0x19
    1fae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e2       	ldi	r20, 0x20	; 32
    1fba:	51 e4       	ldi	r21, 0x41	; 65
    1fbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	9c 8b       	std	Y+20, r25	; 0x14
    1fd2:	8b 8b       	std	Y+19, r24	; 0x13
    1fd4:	0f c0       	rjmp	.+30     	; 0x1ff4 <LCD_voidSendCommand+0xf8>
    1fd6:	88 ec       	ldi	r24, 0xC8	; 200
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	9a 8b       	std	Y+18, r25	; 0x12
    1fdc:	89 8b       	std	Y+17, r24	; 0x11
    1fde:	89 89       	ldd	r24, Y+17	; 0x11
    1fe0:	9a 89       	ldd	r25, Y+18	; 0x12
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <LCD_voidSendCommand+0xe6>
    1fe6:	9a 8b       	std	Y+18, r25	; 0x12
    1fe8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fea:	8b 89       	ldd	r24, Y+19	; 0x13
    1fec:	9c 89       	ldd	r25, Y+20	; 0x14
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	9c 8b       	std	Y+20, r25	; 0x14
    1ff2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	69 f7       	brne	.-38     	; 0x1fd6 <LCD_voidSendCommand+0xda>
    1ffc:	14 c0       	rjmp	.+40     	; 0x2026 <LCD_voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffe:	6d 89       	ldd	r22, Y+21	; 0x15
    2000:	7e 89       	ldd	r23, Y+22	; 0x16
    2002:	8f 89       	ldd	r24, Y+23	; 0x17
    2004:	98 8d       	ldd	r25, Y+24	; 0x18
    2006:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	9c 8b       	std	Y+20, r25	; 0x14
    2010:	8b 8b       	std	Y+19, r24	; 0x13
    2012:	8b 89       	ldd	r24, Y+19	; 0x13
    2014:	9c 89       	ldd	r25, Y+20	; 0x14
    2016:	98 8b       	std	Y+16, r25	; 0x10
    2018:	8f 87       	std	Y+15, r24	; 0x0f
    201a:	8f 85       	ldd	r24, Y+15	; 0x0f
    201c:	98 89       	ldd	r25, Y+16	; 0x10
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	f1 f7       	brne	.-4      	; 0x201e <LCD_voidSendCommand+0x122>
    2022:	98 8b       	std	Y+16, r25	; 0x10
    2024:	8f 87       	std	Y+15, r24	; 0x0f
        /* delay 1msec */
        _delay_ms(1);
        /* write the command to Data Port => 4_Bit low */
        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Comand<<4);
    2026:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2028:	98 2f       	mov	r25, r24
    202a:	92 95       	swap	r25
    202c:	90 7f       	andi	r25, 0xF0	; 240
    202e:	83 e0       	ldi	r24, 0x03	; 3
    2030:	69 2f       	mov	r22, r25
    2032:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <DIO_DioEnumWritePort>
        /* set enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	62 e0       	ldi	r22, 0x02	; 2
    203a:	41 e0       	ldi	r20, 0x01	; 1
    203c:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <DIO_DioEnumWriteChannel>
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	a0 e8       	ldi	r26, 0x80	; 128
    2046:	bf e3       	ldi	r27, 0x3F	; 63
    2048:	8b 87       	std	Y+11, r24	; 0x0b
    204a:	9c 87       	std	Y+12, r25	; 0x0c
    204c:	ad 87       	std	Y+13, r26	; 0x0d
    204e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2050:	6b 85       	ldd	r22, Y+11	; 0x0b
    2052:	7c 85       	ldd	r23, Y+12	; 0x0c
    2054:	8d 85       	ldd	r24, Y+13	; 0x0d
    2056:	9e 85       	ldd	r25, Y+14	; 0x0e
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	4a ef       	ldi	r20, 0xFA	; 250
    205e:	54 e4       	ldi	r21, 0x44	; 68
    2060:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	8f 83       	std	Y+7, r24	; 0x07
    206a:	98 87       	std	Y+8, r25	; 0x08
    206c:	a9 87       	std	Y+9, r26	; 0x09
    206e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2070:	6f 81       	ldd	r22, Y+7	; 0x07
    2072:	78 85       	ldd	r23, Y+8	; 0x08
    2074:	89 85       	ldd	r24, Y+9	; 0x09
    2076:	9a 85       	ldd	r25, Y+10	; 0x0a
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e8       	ldi	r20, 0x80	; 128
    207e:	5f e3       	ldi	r21, 0x3F	; 63
    2080:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2084:	88 23       	and	r24, r24
    2086:	2c f4       	brge	.+10     	; 0x2092 <LCD_voidSendCommand+0x196>
		__ticks = 1;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
    2090:	3f c0       	rjmp	.+126    	; 0x2110 <LCD_voidSendCommand+0x214>
	else if (__tmp > 65535)
    2092:	6f 81       	ldd	r22, Y+7	; 0x07
    2094:	78 85       	ldd	r23, Y+8	; 0x08
    2096:	89 85       	ldd	r24, Y+9	; 0x09
    2098:	9a 85       	ldd	r25, Y+10	; 0x0a
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	3f ef       	ldi	r19, 0xFF	; 255
    209e:	4f e7       	ldi	r20, 0x7F	; 127
    20a0:	57 e4       	ldi	r21, 0x47	; 71
    20a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20a6:	18 16       	cp	r1, r24
    20a8:	4c f5       	brge	.+82     	; 0x20fc <LCD_voidSendCommand+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e2       	ldi	r20, 0x20	; 32
    20b8:	51 e4       	ldi	r21, 0x41	; 65
    20ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	bc 01       	movw	r22, r24
    20c4:	cd 01       	movw	r24, r26
    20c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	0f c0       	rjmp	.+30     	; 0x20f2 <LCD_voidSendCommand+0x1f6>
    20d4:	88 ec       	ldi	r24, 0xC8	; 200
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	9c 83       	std	Y+4, r25	; 0x04
    20da:	8b 83       	std	Y+3, r24	; 0x03
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	9c 81       	ldd	r25, Y+4	; 0x04
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <LCD_voidSendCommand+0x1e4>
    20e4:	9c 83       	std	Y+4, r25	; 0x04
    20e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	9e 81       	ldd	r25, Y+6	; 0x06
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	9e 83       	std	Y+6, r25	; 0x06
    20f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f2:	8d 81       	ldd	r24, Y+5	; 0x05
    20f4:	9e 81       	ldd	r25, Y+6	; 0x06
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	69 f7       	brne	.-38     	; 0x20d4 <LCD_voidSendCommand+0x1d8>
    20fa:	14 c0       	rjmp	.+40     	; 0x2124 <LCD_voidSendCommand+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fc:	6f 81       	ldd	r22, Y+7	; 0x07
    20fe:	78 85       	ldd	r23, Y+8	; 0x08
    2100:	89 85       	ldd	r24, Y+9	; 0x09
    2102:	9a 85       	ldd	r25, Y+10	; 0x0a
    2104:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	9e 83       	std	Y+6, r25	; 0x06
    210e:	8d 83       	std	Y+5, r24	; 0x05
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	9e 81       	ldd	r25, Y+6	; 0x06
    2114:	9a 83       	std	Y+2, r25	; 0x02
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	9a 81       	ldd	r25, Y+2	; 0x02
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <LCD_voidSendCommand+0x220>
    2120:	9a 83       	std	Y+2, r25	; 0x02
    2122:	89 83       	std	Y+1, r24	; 0x01
        /* delay 1msec */
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	62 e0       	ldi	r22, 0x02	; 2
    2128:	40 e0       	ldi	r20, 0x00	; 0
    212a:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <DIO_DioEnumWriteChannel>
    #endif 
}
    212e:	6d 96       	adiw	r28, 0x1d	; 29
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <LCD_voidDisplayCharacter>:

void LCD_voidDisplayCharacter(u8 copy_u8Data)
{
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	6d 97       	sbiw	r28, 0x1d	; 29
    214a:	0f b6       	in	r0, 0x3f	; 63
    214c:	f8 94       	cli
    214e:	de bf       	out	0x3e, r29	; 62
    2150:	0f be       	out	0x3f, r0	; 63
    2152:	cd bf       	out	0x3d, r28	; 61
    2154:	8d 8f       	std	Y+29, r24	; 0x1d
    /* write 1 to RS pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	41 e0       	ldi	r20, 0x01	; 1
    215c:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <DIO_DioEnumWriteChannel>
    /* write 0 to RW pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	61 e0       	ldi	r22, 0x01	; 1
    2164:	40 e0       	ldi	r20, 0x00	; 0
    2166:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <DIO_DioEnumWriteChannel>
    /* write 1 to enable pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	62 e0       	ldi	r22, 0x02	; 2
    216e:	41 e0       	ldi	r20, 0x01	; 1
    2170:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <DIO_DioEnumWriteChannel>
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    #elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
        /* write the character to Data Port => 4_Bit high */
        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Data);
    2174:	83 e0       	ldi	r24, 0x03	; 3
    2176:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2178:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <DIO_DioEnumWritePort>
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	62 e0       	ldi	r22, 0x02	; 2
    2180:	40 e0       	ldi	r20, 0x00	; 0
    2182:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <DIO_DioEnumWriteChannel>
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	a0 e8       	ldi	r26, 0x80	; 128
    218c:	bf e3       	ldi	r27, 0x3F	; 63
    218e:	89 8f       	std	Y+25, r24	; 0x19
    2190:	9a 8f       	std	Y+26, r25	; 0x1a
    2192:	ab 8f       	std	Y+27, r26	; 0x1b
    2194:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2196:	69 8d       	ldd	r22, Y+25	; 0x19
    2198:	7a 8d       	ldd	r23, Y+26	; 0x1a
    219a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    219c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	4a ef       	ldi	r20, 0xFA	; 250
    21a4:	54 e4       	ldi	r21, 0x44	; 68
    21a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	8d 8b       	std	Y+21, r24	; 0x15
    21b0:	9e 8b       	std	Y+22, r25	; 0x16
    21b2:	af 8b       	std	Y+23, r26	; 0x17
    21b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21b6:	6d 89       	ldd	r22, Y+21	; 0x15
    21b8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ba:	8f 89       	ldd	r24, Y+23	; 0x17
    21bc:	98 8d       	ldd	r25, Y+24	; 0x18
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e8       	ldi	r20, 0x80	; 128
    21c4:	5f e3       	ldi	r21, 0x3F	; 63
    21c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21ca:	88 23       	and	r24, r24
    21cc:	2c f4       	brge	.+10     	; 0x21d8 <LCD_voidDisplayCharacter+0x98>
		__ticks = 1;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	9c 8b       	std	Y+20, r25	; 0x14
    21d4:	8b 8b       	std	Y+19, r24	; 0x13
    21d6:	3f c0       	rjmp	.+126    	; 0x2256 <LCD_voidDisplayCharacter+0x116>
	else if (__tmp > 65535)
    21d8:	6d 89       	ldd	r22, Y+21	; 0x15
    21da:	7e 89       	ldd	r23, Y+22	; 0x16
    21dc:	8f 89       	ldd	r24, Y+23	; 0x17
    21de:	98 8d       	ldd	r25, Y+24	; 0x18
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	3f ef       	ldi	r19, 0xFF	; 255
    21e4:	4f e7       	ldi	r20, 0x7F	; 127
    21e6:	57 e4       	ldi	r21, 0x47	; 71
    21e8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21ec:	18 16       	cp	r1, r24
    21ee:	4c f5       	brge	.+82     	; 0x2242 <LCD_voidDisplayCharacter+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f0:	69 8d       	ldd	r22, Y+25	; 0x19
    21f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e2       	ldi	r20, 0x20	; 32
    21fe:	51 e4       	ldi	r21, 0x41	; 65
    2200:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	bc 01       	movw	r22, r24
    220a:	cd 01       	movw	r24, r26
    220c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9c 8b       	std	Y+20, r25	; 0x14
    2216:	8b 8b       	std	Y+19, r24	; 0x13
    2218:	0f c0       	rjmp	.+30     	; 0x2238 <LCD_voidDisplayCharacter+0xf8>
    221a:	88 ec       	ldi	r24, 0xC8	; 200
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	9a 8b       	std	Y+18, r25	; 0x12
    2220:	89 8b       	std	Y+17, r24	; 0x11
    2222:	89 89       	ldd	r24, Y+17	; 0x11
    2224:	9a 89       	ldd	r25, Y+18	; 0x12
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <LCD_voidDisplayCharacter+0xe6>
    222a:	9a 8b       	std	Y+18, r25	; 0x12
    222c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222e:	8b 89       	ldd	r24, Y+19	; 0x13
    2230:	9c 89       	ldd	r25, Y+20	; 0x14
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	9c 8b       	std	Y+20, r25	; 0x14
    2236:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2238:	8b 89       	ldd	r24, Y+19	; 0x13
    223a:	9c 89       	ldd	r25, Y+20	; 0x14
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	69 f7       	brne	.-38     	; 0x221a <LCD_voidDisplayCharacter+0xda>
    2240:	14 c0       	rjmp	.+40     	; 0x226a <LCD_voidDisplayCharacter+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2242:	6d 89       	ldd	r22, Y+21	; 0x15
    2244:	7e 89       	ldd	r23, Y+22	; 0x16
    2246:	8f 89       	ldd	r24, Y+23	; 0x17
    2248:	98 8d       	ldd	r25, Y+24	; 0x18
    224a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	9c 8b       	std	Y+20, r25	; 0x14
    2254:	8b 8b       	std	Y+19, r24	; 0x13
    2256:	8b 89       	ldd	r24, Y+19	; 0x13
    2258:	9c 89       	ldd	r25, Y+20	; 0x14
    225a:	98 8b       	std	Y+16, r25	; 0x10
    225c:	8f 87       	std	Y+15, r24	; 0x0f
    225e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2260:	98 89       	ldd	r25, Y+16	; 0x10
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <LCD_voidDisplayCharacter+0x122>
    2266:	98 8b       	std	Y+16, r25	; 0x10
    2268:	8f 87       	std	Y+15, r24	; 0x0f
        /* delay 1msec */
        _delay_ms(1);
        /* write the character to Data Port => 4_Bit low */
        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Data<<4);
    226a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    226c:	98 2f       	mov	r25, r24
    226e:	92 95       	swap	r25
    2270:	90 7f       	andi	r25, 0xF0	; 240
    2272:	83 e0       	ldi	r24, 0x03	; 3
    2274:	69 2f       	mov	r22, r25
    2276:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <DIO_DioEnumWritePort>
        /* set enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	62 e0       	ldi	r22, 0x02	; 2
    227e:	41 e0       	ldi	r20, 0x01	; 1
    2280:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <DIO_DioEnumWriteChannel>
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	a0 e8       	ldi	r26, 0x80	; 128
    228a:	bf e3       	ldi	r27, 0x3F	; 63
    228c:	8b 87       	std	Y+11, r24	; 0x0b
    228e:	9c 87       	std	Y+12, r25	; 0x0c
    2290:	ad 87       	std	Y+13, r26	; 0x0d
    2292:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2294:	6b 85       	ldd	r22, Y+11	; 0x0b
    2296:	7c 85       	ldd	r23, Y+12	; 0x0c
    2298:	8d 85       	ldd	r24, Y+13	; 0x0d
    229a:	9e 85       	ldd	r25, Y+14	; 0x0e
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	4a ef       	ldi	r20, 0xFA	; 250
    22a2:	54 e4       	ldi	r21, 0x44	; 68
    22a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	8f 83       	std	Y+7, r24	; 0x07
    22ae:	98 87       	std	Y+8, r25	; 0x08
    22b0:	a9 87       	std	Y+9, r26	; 0x09
    22b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b4:	6f 81       	ldd	r22, Y+7	; 0x07
    22b6:	78 85       	ldd	r23, Y+8	; 0x08
    22b8:	89 85       	ldd	r24, Y+9	; 0x09
    22ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e8       	ldi	r20, 0x80	; 128
    22c2:	5f e3       	ldi	r21, 0x3F	; 63
    22c4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22c8:	88 23       	and	r24, r24
    22ca:	2c f4       	brge	.+10     	; 0x22d6 <LCD_voidDisplayCharacter+0x196>
		__ticks = 1;
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	9e 83       	std	Y+6, r25	; 0x06
    22d2:	8d 83       	std	Y+5, r24	; 0x05
    22d4:	3f c0       	rjmp	.+126    	; 0x2354 <LCD_voidDisplayCharacter+0x214>
	else if (__tmp > 65535)
    22d6:	6f 81       	ldd	r22, Y+7	; 0x07
    22d8:	78 85       	ldd	r23, Y+8	; 0x08
    22da:	89 85       	ldd	r24, Y+9	; 0x09
    22dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	3f ef       	ldi	r19, 0xFF	; 255
    22e2:	4f e7       	ldi	r20, 0x7F	; 127
    22e4:	57 e4       	ldi	r21, 0x47	; 71
    22e6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22ea:	18 16       	cp	r1, r24
    22ec:	4c f5       	brge	.+82     	; 0x2340 <LCD_voidDisplayCharacter+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	40 e2       	ldi	r20, 0x20	; 32
    22fc:	51 e4       	ldi	r21, 0x41	; 65
    22fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	bc 01       	movw	r22, r24
    2308:	cd 01       	movw	r24, r26
    230a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	9e 83       	std	Y+6, r25	; 0x06
    2314:	8d 83       	std	Y+5, r24	; 0x05
    2316:	0f c0       	rjmp	.+30     	; 0x2336 <LCD_voidDisplayCharacter+0x1f6>
    2318:	88 ec       	ldi	r24, 0xC8	; 200
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	9c 83       	std	Y+4, r25	; 0x04
    231e:	8b 83       	std	Y+3, r24	; 0x03
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	9c 81       	ldd	r25, Y+4	; 0x04
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	f1 f7       	brne	.-4      	; 0x2324 <LCD_voidDisplayCharacter+0x1e4>
    2328:	9c 83       	std	Y+4, r25	; 0x04
    232a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	9e 81       	ldd	r25, Y+6	; 0x06
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	9e 83       	std	Y+6, r25	; 0x06
    2334:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2336:	8d 81       	ldd	r24, Y+5	; 0x05
    2338:	9e 81       	ldd	r25, Y+6	; 0x06
    233a:	00 97       	sbiw	r24, 0x00	; 0
    233c:	69 f7       	brne	.-38     	; 0x2318 <LCD_voidDisplayCharacter+0x1d8>
    233e:	14 c0       	rjmp	.+40     	; 0x2368 <LCD_voidDisplayCharacter+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2340:	6f 81       	ldd	r22, Y+7	; 0x07
    2342:	78 85       	ldd	r23, Y+8	; 0x08
    2344:	89 85       	ldd	r24, Y+9	; 0x09
    2346:	9a 85       	ldd	r25, Y+10	; 0x0a
    2348:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	9e 83       	std	Y+6, r25	; 0x06
    2352:	8d 83       	std	Y+5, r24	; 0x05
    2354:	8d 81       	ldd	r24, Y+5	; 0x05
    2356:	9e 81       	ldd	r25, Y+6	; 0x06
    2358:	9a 83       	std	Y+2, r25	; 0x02
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	9a 81       	ldd	r25, Y+2	; 0x02
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	f1 f7       	brne	.-4      	; 0x2360 <LCD_voidDisplayCharacter+0x220>
    2364:	9a 83       	std	Y+2, r25	; 0x02
    2366:	89 83       	std	Y+1, r24	; 0x01
        /* delay 1msec */
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	62 e0       	ldi	r22, 0x02	; 2
    236c:	40 e0       	ldi	r20, 0x00	; 0
    236e:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <DIO_DioEnumWriteChannel>
    #endif
}
    2372:	6d 96       	adiw	r28, 0x1d	; 29
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <LCD_voidCreateCustomCharacter>:

void LCD_voidCreateCustomCharacter(pu8 copy_pu8Character,u8 copy_u8PatternIndex,u8 copy_u8Row,u8 copy_u8Col)
{
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	27 97       	sbiw	r28, 0x07	; 7
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
    2398:	9c 83       	std	Y+4, r25	; 0x04
    239a:	8b 83       	std	Y+3, r24	; 0x03
    239c:	6d 83       	std	Y+5, r22	; 0x05
    239e:	4e 83       	std	Y+6, r20	; 0x06
    23a0:	2f 83       	std	Y+7, r18	; 0x07
    u8 local_u8Count;
    /* to set CGRAM Address: 1- Index * 8 */
    u8 local_u8Adress = copy_u8PatternIndex * 8;
    23a2:	8d 81       	ldd	r24, Y+5	; 0x05
    23a4:	88 2f       	mov	r24, r24
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	88 0f       	add	r24, r24
    23ae:	99 1f       	adc	r25, r25
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	89 83       	std	Y+1, r24	; 0x01
    /* 2- set the address in the last special character */
    LCD_voidSendCommand(local_u8Adress + 64);
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	80 5c       	subi	r24, 0xC0	; 192
    23ba:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LCD_voidSendCommand>
    /* to write the data to CGRAM or DDRAM */
    for(local_u8Count = 0;local_u8Count <8;local_u8Count++)
    23be:	1a 82       	std	Y+2, r1	; 0x02
    23c0:	0e c0       	rjmp	.+28     	; 0x23de <LCD_voidCreateCustomCharacter+0x5a>
    {
        LCD_voidDisplayCharacter(copy_pu8Character[local_u8Count]);
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	28 2f       	mov	r18, r24
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	9c 81       	ldd	r25, Y+4	; 0x04
    23cc:	fc 01       	movw	r30, r24
    23ce:	e2 0f       	add	r30, r18
    23d0:	f3 1f       	adc	r31, r19
    23d2:	80 81       	ld	r24, Z
    23d4:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_voidDisplayCharacter>
    /* to set CGRAM Address: 1- Index * 8 */
    u8 local_u8Adress = copy_u8PatternIndex * 8;
    /* 2- set the address in the last special character */
    LCD_voidSendCommand(local_u8Adress + 64);
    /* to write the data to CGRAM or DDRAM */
    for(local_u8Count = 0;local_u8Count <8;local_u8Count++)
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	8f 5f       	subi	r24, 0xFF	; 255
    23dc:	8a 83       	std	Y+2, r24	; 0x02
    23de:	8a 81       	ldd	r24, Y+2	; 0x02
    23e0:	88 30       	cpi	r24, 0x08	; 8
    23e2:	78 f3       	brcs	.-34     	; 0x23c2 <LCD_voidCreateCustomCharacter+0x3e>
    {
        LCD_voidDisplayCharacter(copy_pu8Character[local_u8Count]);
    }
    /* set DDRAM address */
    LCD_voidGoToXY(copy_u8Row,copy_u8Col);
    23e4:	8e 81       	ldd	r24, Y+6	; 0x06
    23e6:	6f 81       	ldd	r22, Y+7	; 0x07
    23e8:	0e 94 02 12 	call	0x2404	; 0x2404 <LCD_voidGoToXY>
    /* display the pattern */
    LCD_voidDisplayCharacter(copy_u8PatternIndex);
    23ec:	8d 81       	ldd	r24, Y+5	; 0x05
    23ee:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_voidDisplayCharacter>
}
    23f2:	27 96       	adiw	r28, 0x07	; 7
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	de bf       	out	0x3e, r29	; 62
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	cd bf       	out	0x3d, r28	; 61
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 copy_u8Row,u8 copy_u8Col)
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	00 d0       	rcall	.+0      	; 0x240a <LCD_voidGoToXY+0x6>
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	6a 83       	std	Y+2, r22	; 0x02
    /* to select the row and the column*/
    LCD_voidSendCommand(LCD_u8_ADRESS + copy_u8Row + copy_u8Col);
    2412:	99 81       	ldd	r25, Y+1	; 0x01
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	89 0f       	add	r24, r25
    2418:	80 58       	subi	r24, 0x80	; 128
    241a:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LCD_voidSendCommand>
}
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	cf 91       	pop	r28
    2424:	df 91       	pop	r29
    2426:	08 95       	ret

00002428 <LCD_u8DisplayString>:

u8 LCD_u8DisplayString(pu8 copy_pu8String)
{
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	00 d0       	rcall	.+0      	; 0x242e <LCD_u8DisplayString+0x6>
    242e:	00 d0       	rcall	.+0      	; 0x2430 <LCD_u8DisplayString+0x8>
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
    2434:	9c 83       	std	Y+4, r25	; 0x04
    2436:	8b 83       	std	Y+3, r24	; 0x03
    u8 local_u8ErrorState = STD_TYPES_OK;
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Count = 0;
    243c:	19 82       	std	Y+1, r1	; 0x01
    if(copy_pu8String != NULL)
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	9c 81       	ldd	r25, Y+4	; 0x04
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	d9 f0       	breq	.+54     	; 0x247c <LCD_u8DisplayString+0x54>
    2446:	0e c0       	rjmp	.+28     	; 0x2464 <LCD_u8DisplayString+0x3c>
    {
        /* check to the end of the string */
        while(copy_pu8String[local_u8Count] != '\0')
        {
            /* diplay the first character in the string */
           LCD_voidDisplayCharacter(copy_pu8String[local_u8Count]);
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	28 2f       	mov	r18, r24
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	9c 81       	ldd	r25, Y+4	; 0x04
    2452:	fc 01       	movw	r30, r24
    2454:	e2 0f       	add	r30, r18
    2456:	f3 1f       	adc	r31, r19
    2458:	80 81       	ld	r24, Z
    245a:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_voidDisplayCharacter>
           local_u8Count++; 
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	8f 5f       	subi	r24, 0xFF	; 255
    2462:	89 83       	std	Y+1, r24	; 0x01
    u8 local_u8ErrorState = STD_TYPES_OK;
    u8 local_u8Count = 0;
    if(copy_pu8String != NULL)
    {
        /* check to the end of the string */
        while(copy_pu8String[local_u8Count] != '\0')
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	9c 81       	ldd	r25, Y+4	; 0x04
    246e:	fc 01       	movw	r30, r24
    2470:	e2 0f       	add	r30, r18
    2472:	f3 1f       	adc	r31, r19
    2474:	80 81       	ld	r24, Z
    2476:	88 23       	and	r24, r24
    2478:	39 f7       	brne	.-50     	; 0x2448 <LCD_u8DisplayString+0x20>
    247a:	01 c0       	rjmp	.+2      	; 0x247e <LCD_u8DisplayString+0x56>
           local_u8Count++; 
        }
    }
    else
    {
        local_u8ErrorState = STD_TYPES_NOK;
    247c:	1a 82       	std	Y+2, r1	; 0x02
    }
    return local_u8ErrorState;
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2480:	0f 90       	pop	r0
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	0f 90       	pop	r0
    2488:	cf 91       	pop	r28
    248a:	df 91       	pop	r29
    248c:	08 95       	ret

0000248e <LCD_voidDisplayNumber>:

void LCD_voidDisplayNumber(u32 copy_u32Number)
{
    248e:	1f 93       	push	r17
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	00 d0       	rcall	.+0      	; 0x2496 <LCD_voidDisplayNumber+0x8>
    2496:	00 d0       	rcall	.+0      	; 0x2498 <LCD_voidDisplayNumber+0xa>
    2498:	0f 92       	push	r0
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	6a 83       	std	Y+2, r22	; 0x02
    24a0:	7b 83       	std	Y+3, r23	; 0x03
    24a2:	8c 83       	std	Y+4, r24	; 0x04
    24a4:	9d 83       	std	Y+5, r25	; 0x05
    u8 local_u8Reserved = 1;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	89 83       	std	Y+1, r24	; 0x01
    if(copy_u32Number == 0)
    24aa:	8a 81       	ldd	r24, Y+2	; 0x02
    24ac:	9b 81       	ldd	r25, Y+3	; 0x03
    24ae:	ac 81       	ldd	r26, Y+4	; 0x04
    24b0:	bd 81       	ldd	r27, Y+5	; 0x05
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	a1 05       	cpc	r26, r1
    24b6:	b1 05       	cpc	r27, r1
    24b8:	a1 f5       	brne	.+104    	; 0x2522 <LCD_voidDisplayNumber+0x94>
    {
        LCD_voidDisplayCharacter(0);   
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_voidDisplayCharacter>
    24c0:	4a c0       	rjmp	.+148    	; 0x2556 <LCD_voidDisplayNumber+0xc8>
    }
    else
    {
        while(copy_u32Number != 0)
        {
            local_u8Reserved = (local_u8Reserved * 10) + (copy_u32Number % 10);
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	88 2f       	mov	r24, r24
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	9c 01       	movw	r18, r24
    24ca:	22 0f       	add	r18, r18
    24cc:	33 1f       	adc	r19, r19
    24ce:	c9 01       	movw	r24, r18
    24d0:	88 0f       	add	r24, r24
    24d2:	99 1f       	adc	r25, r25
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	82 0f       	add	r24, r18
    24da:	93 1f       	adc	r25, r19
    24dc:	18 2f       	mov	r17, r24
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	9b 81       	ldd	r25, Y+3	; 0x03
    24e2:	ac 81       	ldd	r26, Y+4	; 0x04
    24e4:	bd 81       	ldd	r27, Y+5	; 0x05
    24e6:	2a e0       	ldi	r18, 0x0A	; 10
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e0       	ldi	r20, 0x00	; 0
    24ec:	50 e0       	ldi	r21, 0x00	; 0
    24ee:	bc 01       	movw	r22, r24
    24f0:	cd 01       	movw	r24, r26
    24f2:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__udivmodsi4>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	81 0f       	add	r24, r17
    24fc:	89 83       	std	Y+1, r24	; 0x01
            copy_u32Number /= 10;
    24fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2500:	9b 81       	ldd	r25, Y+3	; 0x03
    2502:	ac 81       	ldd	r26, Y+4	; 0x04
    2504:	bd 81       	ldd	r27, Y+5	; 0x05
    2506:	2a e0       	ldi	r18, 0x0A	; 10
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e0       	ldi	r20, 0x00	; 0
    250c:	50 e0       	ldi	r21, 0x00	; 0
    250e:	bc 01       	movw	r22, r24
    2510:	cd 01       	movw	r24, r26
    2512:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__udivmodsi4>
    2516:	da 01       	movw	r26, r20
    2518:	c9 01       	movw	r24, r18
    251a:	8a 83       	std	Y+2, r24	; 0x02
    251c:	9b 83       	std	Y+3, r25	; 0x03
    251e:	ac 83       	std	Y+4, r26	; 0x04
    2520:	bd 83       	std	Y+5, r27	; 0x05
    {
        LCD_voidDisplayCharacter(0);   
    }
    else
    {
        while(copy_u32Number != 0)
    2522:	8a 81       	ldd	r24, Y+2	; 0x02
    2524:	9b 81       	ldd	r25, Y+3	; 0x03
    2526:	ac 81       	ldd	r26, Y+4	; 0x04
    2528:	bd 81       	ldd	r27, Y+5	; 0x05
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	a1 05       	cpc	r26, r1
    252e:	b1 05       	cpc	r27, r1
    2530:	41 f6       	brne	.-112    	; 0x24c2 <LCD_voidDisplayNumber+0x34>
            local_u8Reserved = (local_u8Reserved * 10) + (copy_u32Number % 10);
            copy_u32Number /= 10;
        }
        do
        {
            LCD_voidDisplayCharacter((local_u8Reserved % 10) + '0');
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	9a e0       	ldi	r25, 0x0A	; 10
    2536:	69 2f       	mov	r22, r25
    2538:	0e 94 cd 12 	call	0x259a	; 0x259a <__udivmodqi4>
    253c:	89 2f       	mov	r24, r25
    253e:	80 5d       	subi	r24, 0xD0	; 208
    2540:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_voidDisplayCharacter>
            local_u8Reserved /= 10;
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	9a e0       	ldi	r25, 0x0A	; 10
    2548:	69 2f       	mov	r22, r25
    254a:	0e 94 cd 12 	call	0x259a	; 0x259a <__udivmodqi4>
    254e:	89 83       	std	Y+1, r24	; 0x01
        }while(local_u8Reserved != 1);
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	81 30       	cpi	r24, 0x01	; 1
    2554:	71 f7       	brne	.-36     	; 0x2532 <LCD_voidDisplayNumber+0xa4>
    }
}
    2556:	0f 90       	pop	r0
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	0f 90       	pop	r0
    2560:	cf 91       	pop	r28
    2562:	df 91       	pop	r29
    2564:	1f 91       	pop	r17
    2566:	08 95       	ret

00002568 <LCD_voidDisplayClear>:

void LCD_voidDisplayClear(void)
{
    2568:	df 93       	push	r29
    256a:	cf 93       	push	r28
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(0x01);
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LCD_voidSendCommand>
}
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <main>:
#include "../MCAL/DIO/Include/DIO_interface.h"
#include "../MCAL/SPI/Include/SPI_interface.h"
#include "../HAL/LCD/Include/LCD_interface.h"

int main(void)
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
	//u8 local_u8Data[11];
	PORT_voidInit();
    2584:	0e 94 29 07 	call	0xe52	; 0xe52 <PORT_voidInit>
	SPI_voidMasterInit();
    2588:	0e 94 9b 05 	call	0xb36	; 0xb36 <SPI_voidMasterInit>
	LCD_voidInit();
    258c:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <LCD_voidInit>
	SPI_SPIEnumSendString("ahmed mohey");
    2590:	80 e6       	ldi	r24, 0x60	; 96
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SPIEnumSendString>
    2598:	ff cf       	rjmp	.-2      	; 0x2598 <main+0x1c>

0000259a <__udivmodqi4>:
    259a:	99 1b       	sub	r25, r25
    259c:	79 e0       	ldi	r23, 0x09	; 9
    259e:	04 c0       	rjmp	.+8      	; 0x25a8 <__udivmodqi4_ep>

000025a0 <__udivmodqi4_loop>:
    25a0:	99 1f       	adc	r25, r25
    25a2:	96 17       	cp	r25, r22
    25a4:	08 f0       	brcs	.+2      	; 0x25a8 <__udivmodqi4_ep>
    25a6:	96 1b       	sub	r25, r22

000025a8 <__udivmodqi4_ep>:
    25a8:	88 1f       	adc	r24, r24
    25aa:	7a 95       	dec	r23
    25ac:	c9 f7       	brne	.-14     	; 0x25a0 <__udivmodqi4_loop>
    25ae:	80 95       	com	r24
    25b0:	08 95       	ret

000025b2 <__udivmodsi4>:
    25b2:	a1 e2       	ldi	r26, 0x21	; 33
    25b4:	1a 2e       	mov	r1, r26
    25b6:	aa 1b       	sub	r26, r26
    25b8:	bb 1b       	sub	r27, r27
    25ba:	fd 01       	movw	r30, r26
    25bc:	0d c0       	rjmp	.+26     	; 0x25d8 <__udivmodsi4_ep>

000025be <__udivmodsi4_loop>:
    25be:	aa 1f       	adc	r26, r26
    25c0:	bb 1f       	adc	r27, r27
    25c2:	ee 1f       	adc	r30, r30
    25c4:	ff 1f       	adc	r31, r31
    25c6:	a2 17       	cp	r26, r18
    25c8:	b3 07       	cpc	r27, r19
    25ca:	e4 07       	cpc	r30, r20
    25cc:	f5 07       	cpc	r31, r21
    25ce:	20 f0       	brcs	.+8      	; 0x25d8 <__udivmodsi4_ep>
    25d0:	a2 1b       	sub	r26, r18
    25d2:	b3 0b       	sbc	r27, r19
    25d4:	e4 0b       	sbc	r30, r20
    25d6:	f5 0b       	sbc	r31, r21

000025d8 <__udivmodsi4_ep>:
    25d8:	66 1f       	adc	r22, r22
    25da:	77 1f       	adc	r23, r23
    25dc:	88 1f       	adc	r24, r24
    25de:	99 1f       	adc	r25, r25
    25e0:	1a 94       	dec	r1
    25e2:	69 f7       	brne	.-38     	; 0x25be <__udivmodsi4_loop>
    25e4:	60 95       	com	r22
    25e6:	70 95       	com	r23
    25e8:	80 95       	com	r24
    25ea:	90 95       	com	r25
    25ec:	9b 01       	movw	r18, r22
    25ee:	ac 01       	movw	r20, r24
    25f0:	bd 01       	movw	r22, r26
    25f2:	cf 01       	movw	r24, r30
    25f4:	08 95       	ret

000025f6 <__prologue_saves__>:
    25f6:	2f 92       	push	r2
    25f8:	3f 92       	push	r3
    25fa:	4f 92       	push	r4
    25fc:	5f 92       	push	r5
    25fe:	6f 92       	push	r6
    2600:	7f 92       	push	r7
    2602:	8f 92       	push	r8
    2604:	9f 92       	push	r9
    2606:	af 92       	push	r10
    2608:	bf 92       	push	r11
    260a:	cf 92       	push	r12
    260c:	df 92       	push	r13
    260e:	ef 92       	push	r14
    2610:	ff 92       	push	r15
    2612:	0f 93       	push	r16
    2614:	1f 93       	push	r17
    2616:	cf 93       	push	r28
    2618:	df 93       	push	r29
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
    261e:	ca 1b       	sub	r28, r26
    2620:	db 0b       	sbc	r29, r27
    2622:	0f b6       	in	r0, 0x3f	; 63
    2624:	f8 94       	cli
    2626:	de bf       	out	0x3e, r29	; 62
    2628:	0f be       	out	0x3f, r0	; 63
    262a:	cd bf       	out	0x3d, r28	; 61
    262c:	09 94       	ijmp

0000262e <__epilogue_restores__>:
    262e:	2a 88       	ldd	r2, Y+18	; 0x12
    2630:	39 88       	ldd	r3, Y+17	; 0x11
    2632:	48 88       	ldd	r4, Y+16	; 0x10
    2634:	5f 84       	ldd	r5, Y+15	; 0x0f
    2636:	6e 84       	ldd	r6, Y+14	; 0x0e
    2638:	7d 84       	ldd	r7, Y+13	; 0x0d
    263a:	8c 84       	ldd	r8, Y+12	; 0x0c
    263c:	9b 84       	ldd	r9, Y+11	; 0x0b
    263e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2640:	b9 84       	ldd	r11, Y+9	; 0x09
    2642:	c8 84       	ldd	r12, Y+8	; 0x08
    2644:	df 80       	ldd	r13, Y+7	; 0x07
    2646:	ee 80       	ldd	r14, Y+6	; 0x06
    2648:	fd 80       	ldd	r15, Y+5	; 0x05
    264a:	0c 81       	ldd	r16, Y+4	; 0x04
    264c:	1b 81       	ldd	r17, Y+3	; 0x03
    264e:	aa 81       	ldd	r26, Y+2	; 0x02
    2650:	b9 81       	ldd	r27, Y+1	; 0x01
    2652:	ce 0f       	add	r28, r30
    2654:	d1 1d       	adc	r29, r1
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	de bf       	out	0x3e, r29	; 62
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	cd bf       	out	0x3d, r28	; 61
    2660:	ed 01       	movw	r28, r26
    2662:	08 95       	ret

00002664 <_exit>:
    2664:	f8 94       	cli

00002666 <__stop_program>:
    2666:	ff cf       	rjmp	.-2      	; 0x2666 <__stop_program>
