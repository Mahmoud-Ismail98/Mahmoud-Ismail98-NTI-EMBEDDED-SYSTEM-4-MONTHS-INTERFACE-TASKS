
runningBoy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bb0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00002bb0  00002c24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000021fc  00000000  00000000  00002c34  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f05  00000000  00000000  00004e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005e75  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008b19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000098c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a483  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 8a 06 	call	0xd14	; 0xd14 <main>
      7a:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 cb 15 	jmp	0x2b96	; 0x2b96 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <runningBoy_dispaly>:

#include "../includes/Hal/lcd.h"


void runningBoy_dispaly(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	6e 97       	sbiw	r28, 0x1e	; 30
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
			  0b01001,
			  0b10010,
			  0b10010,
			  0b01010,
			  0b01110
			};
     b4a:	ce 01       	movw	r24, r28
     b4c:	42 96       	adiw	r24, 0x12	; 18
     b4e:	9b 8f       	std	Y+27, r25	; 0x1b
     b50:	8a 8f       	std	Y+26, r24	; 0x1a
     b52:	e8 e6       	ldi	r30, 0x68	; 104
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	fd 8f       	std	Y+29, r31	; 0x1d
     b58:	ec 8f       	std	Y+28, r30	; 0x1c
     b5a:	f8 e0       	ldi	r31, 0x08	; 8
     b5c:	fe 8f       	std	Y+30, r31	; 0x1e
     b5e:	ec 8d       	ldd	r30, Y+28	; 0x1c
     b60:	fd 8d       	ldd	r31, Y+29	; 0x1d
     b62:	00 80       	ld	r0, Z
     b64:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b66:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	9d 8f       	std	Y+29, r25	; 0x1d
     b6c:	8c 8f       	std	Y+28, r24	; 0x1c
     b6e:	ea 8d       	ldd	r30, Y+26	; 0x1a
     b70:	fb 8d       	ldd	r31, Y+27	; 0x1b
     b72:	00 82       	st	Z, r0
     b74:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b76:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	9b 8f       	std	Y+27, r25	; 0x1b
     b7c:	8a 8f       	std	Y+26, r24	; 0x1a
     b7e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b80:	91 50       	subi	r25, 0x01	; 1
     b82:	9e 8f       	std	Y+30, r25	; 0x1e
     b84:	ee 8d       	ldd	r30, Y+30	; 0x1e
     b86:	ee 23       	and	r30, r30
     b88:	51 f7       	brne	.-44     	; 0xb5e <runningBoy_dispaly+0x28>
	LCD_creatCustomCharacter(customChar,0);
     b8a:	ce 01       	movw	r24, r28
     b8c:	42 96       	adiw	r24, 0x12	; 18
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_creatCustomCharacter>

	u8 row = 0,col = 0;
     b94:	19 8a       	std	Y+17, r1	; 0x11
     b96:	18 8a       	std	Y+16, r1	; 0x10
	u8 flag = 0;
     b98:	1f 86       	std	Y+15, r1	; 0x0f
     b9a:	ab c0       	rjmp	.+342    	; 0xcf2 <runningBoy_dispaly+0x1bc>

	while( (row < 2) || (col < 16) )
	{

		if(col == 15 && row == 1)
     b9c:	88 89       	ldd	r24, Y+16	; 0x10
     b9e:	8f 30       	cpi	r24, 0x0F	; 15
     ba0:	29 f4       	brne	.+10     	; 0xbac <runningBoy_dispaly+0x76>
     ba2:	89 89       	ldd	r24, Y+17	; 0x11
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	11 f4       	brne	.+4      	; 0xbac <runningBoy_dispaly+0x76>
		{
			row = 0;
     ba8:	19 8a       	std	Y+17, r1	; 0x11
			col = 0;
     baa:	18 8a       	std	Y+16, r1	; 0x10
		}
		if(flag == 2)
     bac:	8f 85       	ldd	r24, Y+15	; 0x0f
     bae:	82 30       	cpi	r24, 0x02	; 2
     bb0:	29 f4       	brne	.+10     	; 0xbbc <runningBoy_dispaly+0x86>
		{
			flag = 0;
     bb2:	1f 86       	std	Y+15, r1	; 0x0f
			col = 9;
     bb4:	89 e0       	ldi	r24, 0x09	; 9
     bb6:	88 8b       	std	Y+16, r24	; 0x10
			row = 1;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	89 8b       	std	Y+17, r24	; 0x11

		}
		if( (row == 1 ) && ( col == 7) )
     bbc:	89 89       	ldd	r24, Y+17	; 0x11
     bbe:	81 30       	cpi	r24, 0x01	; 1
     bc0:	49 f4       	brne	.+18     	; 0xbd4 <runningBoy_dispaly+0x9e>
     bc2:	88 89       	ldd	r24, Y+16	; 0x10
     bc4:	87 30       	cpi	r24, 0x07	; 7
     bc6:	31 f4       	brne	.+12     	; 0xbd4 <runningBoy_dispaly+0x9e>
		{
			row = 0;
     bc8:	19 8a       	std	Y+17, r1	; 0x11
			col = 6;
     bca:	86 e0       	ldi	r24, 0x06	; 6
     bcc:	88 8b       	std	Y+16, r24	; 0x10
			flag++;
     bce:	8f 85       	ldd	r24, Y+15	; 0x0f
     bd0:	8f 5f       	subi	r24, 0xFF	; 255
     bd2:	8f 87       	std	Y+15, r24	; 0x0f
		}
    	LCD_moveCurser(1,8);
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	68 e0       	ldi	r22, 0x08	; 8
     bd8:	0e 94 c3 13 	call	0x2786	; 0x2786 <LCD_moveCurser>
    	LCD_displayCharacter('/');
     bdc:	8f e2       	ldi	r24, 0x2F	; 47
     bde:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_displayCharacter>

		LCD_moveCurser(row,col);
     be2:	89 89       	ldd	r24, Y+17	; 0x11
     be4:	68 89       	ldd	r22, Y+16	; 0x10
     be6:	0e 94 c3 13 	call	0x2786	; 0x2786 <LCD_moveCurser>

		LCD_displayCharacter(0);
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_displayCharacter>

		LCD_sendCommand(0xc0);
     bf0:	80 ec       	ldi	r24, 0xC0	; 192
     bf2:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_sendCommand>
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	a8 e4       	ldi	r26, 0x48	; 72
     bfc:	b3 e4       	ldi	r27, 0x43	; 67
     bfe:	8b 87       	std	Y+11, r24	; 0x0b
     c00:	9c 87       	std	Y+12, r25	; 0x0c
     c02:	ad 87       	std	Y+13, r26	; 0x0d
     c04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c06:	6b 85       	ldd	r22, Y+11	; 0x0b
     c08:	7c 85       	ldd	r23, Y+12	; 0x0c
     c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	4a e7       	ldi	r20, 0x7A	; 122
     c14:	53 e4       	ldi	r21, 0x43	; 67
     c16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	8f 83       	std	Y+7, r24	; 0x07
     c20:	98 87       	std	Y+8, r25	; 0x08
     c22:	a9 87       	std	Y+9, r26	; 0x09
     c24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c26:	6f 81       	ldd	r22, Y+7	; 0x07
     c28:	78 85       	ldd	r23, Y+8	; 0x08
     c2a:	89 85       	ldd	r24, Y+9	; 0x09
     c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	40 e8       	ldi	r20, 0x80	; 128
     c34:	5f e3       	ldi	r21, 0x3F	; 63
     c36:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c3a:	88 23       	and	r24, r24
     c3c:	2c f4       	brge	.+10     	; 0xc48 <runningBoy_dispaly+0x112>
		__ticks = 1;
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	9e 83       	std	Y+6, r25	; 0x06
     c44:	8d 83       	std	Y+5, r24	; 0x05
     c46:	3f c0       	rjmp	.+126    	; 0xcc6 <runningBoy_dispaly+0x190>
	else if (__tmp > 65535)
     c48:	6f 81       	ldd	r22, Y+7	; 0x07
     c4a:	78 85       	ldd	r23, Y+8	; 0x08
     c4c:	89 85       	ldd	r24, Y+9	; 0x09
     c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	3f ef       	ldi	r19, 0xFF	; 255
     c54:	4f e7       	ldi	r20, 0x7F	; 127
     c56:	57 e4       	ldi	r21, 0x47	; 71
     c58:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c5c:	18 16       	cp	r1, r24
     c5e:	4c f5       	brge	.+82     	; 0xcb2 <runningBoy_dispaly+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c60:	6b 85       	ldd	r22, Y+11	; 0x0b
     c62:	7c 85       	ldd	r23, Y+12	; 0x0c
     c64:	8d 85       	ldd	r24, Y+13	; 0x0d
     c66:	9e 85       	ldd	r25, Y+14	; 0x0e
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	40 e2       	ldi	r20, 0x20	; 32
     c6e:	51 e4       	ldi	r21, 0x41	; 65
     c70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	bc 01       	movw	r22, r24
     c7a:	cd 01       	movw	r24, r26
     c7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	9e 83       	std	Y+6, r25	; 0x06
     c86:	8d 83       	std	Y+5, r24	; 0x05
     c88:	0f c0       	rjmp	.+30     	; 0xca8 <runningBoy_dispaly+0x172>
     c8a:	89 e1       	ldi	r24, 0x19	; 25
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	9c 83       	std	Y+4, r25	; 0x04
     c90:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	9c 81       	ldd	r25, Y+4	; 0x04
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	f1 f7       	brne	.-4      	; 0xc96 <runningBoy_dispaly+0x160>
     c9a:	9c 83       	std	Y+4, r25	; 0x04
     c9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ca0:	9e 81       	ldd	r25, Y+6	; 0x06
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	9e 83       	std	Y+6, r25	; 0x06
     ca6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca8:	8d 81       	ldd	r24, Y+5	; 0x05
     caa:	9e 81       	ldd	r25, Y+6	; 0x06
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	69 f7       	brne	.-38     	; 0xc8a <runningBoy_dispaly+0x154>
     cb0:	14 c0       	rjmp	.+40     	; 0xcda <runningBoy_dispaly+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cb2:	6f 81       	ldd	r22, Y+7	; 0x07
     cb4:	78 85       	ldd	r23, Y+8	; 0x08
     cb6:	89 85       	ldd	r24, Y+9	; 0x09
     cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     cbe:	dc 01       	movw	r26, r24
     cc0:	cb 01       	movw	r24, r22
     cc2:	9e 83       	std	Y+6, r25	; 0x06
     cc4:	8d 83       	std	Y+5, r24	; 0x05
     cc6:	8d 81       	ldd	r24, Y+5	; 0x05
     cc8:	9e 81       	ldd	r25, Y+6	; 0x06
     cca:	9a 83       	std	Y+2, r25	; 0x02
     ccc:	89 83       	std	Y+1, r24	; 0x01
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	9a 81       	ldd	r25, Y+2	; 0x02
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	f1 f7       	brne	.-4      	; 0xcd2 <runningBoy_dispaly+0x19c>
     cd6:	9a 83       	std	Y+2, r25	; 0x02
     cd8:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(200);
		LCD_clearScreen();
     cda:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <LCD_clearScreen>

		if(col == 15)
     cde:	88 89       	ldd	r24, Y+16	; 0x10
     ce0:	8f 30       	cpi	r24, 0x0F	; 15
     ce2:	21 f4       	brne	.+8      	; 0xcec <runningBoy_dispaly+0x1b6>
		{
			row++;
     ce4:	89 89       	ldd	r24, Y+17	; 0x11
     ce6:	8f 5f       	subi	r24, 0xFF	; 255
     ce8:	89 8b       	std	Y+17, r24	; 0x11
			col = 0;
     cea:	18 8a       	std	Y+16, r1	; 0x10

		}


		col++;
     cec:	88 89       	ldd	r24, Y+16	; 0x10
     cee:	8f 5f       	subi	r24, 0xFF	; 255
     cf0:	88 8b       	std	Y+16, r24	; 0x10
	LCD_creatCustomCharacter(customChar,0);

	u8 row = 0,col = 0;
	u8 flag = 0;

	while( (row < 2) || (col < 16) )
     cf2:	89 89       	ldd	r24, Y+17	; 0x11
     cf4:	82 30       	cpi	r24, 0x02	; 2
     cf6:	08 f4       	brcc	.+2      	; 0xcfa <runningBoy_dispaly+0x1c4>
     cf8:	51 cf       	rjmp	.-350    	; 0xb9c <runningBoy_dispaly+0x66>
     cfa:	88 89       	ldd	r24, Y+16	; 0x10
     cfc:	80 31       	cpi	r24, 0x10	; 16
     cfe:	08 f4       	brcc	.+2      	; 0xd02 <runningBoy_dispaly+0x1cc>
     d00:	4d cf       	rjmp	.-358    	; 0xb9c <runningBoy_dispaly+0x66>

		col++;
	}


}
     d02:	6e 96       	adiw	r28, 0x1e	; 30
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	cf 91       	pop	r28
     d10:	df 91       	pop	r29
     d12:	08 95       	ret

00000d14 <main>:

int main(void)
{
     d14:	df 93       	push	r29
     d16:	cf 93       	push	r28
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62

	port_init();
     d1c:	0e 94 cc 0a 	call	0x1598	; 0x1598 <port_init>
	LCD_init();
     d20:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_init>


    while(1)
    {
    	runningBoy_dispaly();
     d24:	0e 94 9b 05 	call	0xb36	; 0xb36 <runningBoy_dispaly>
     d28:	fd cf       	rjmp	.-6      	; 0xd24 <main+0x10>

00000d2a <dio_writePin>:
#include"dio_prv.h"
#include"dio_cfg.h"
#include<avr/io.h>

DIO_errorStatus dio_writePin(u8 pin_id, u8 value)
{
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	2f 97       	sbiw	r28, 0x0f	; 15
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	8c 83       	std	Y+4, r24	; 0x04
     d40:	6d 83       	std	Y+5, r22	; 0x05
	DIO_errorStatus return_errorStatus = Dio_Ok;
     d42:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_port;

	u8 loc_pin;

	if(pin_id > NUM_OF_PINS)
     d44:	8c 81       	ldd	r24, Y+4	; 0x04
     d46:	80 32       	cpi	r24, 0x20	; 32
     d48:	18 f0       	brcs	.+6      	; 0xd50 <dio_writePin+0x26>
	{
		return_errorStatus = Dio_pinError;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	8b 83       	std	Y+3, r24	; 0x03
     d4e:	0e c1       	rjmp	.+540    	; 0xf6c <dio_writePin+0x242>
	}
	else if(value > NUM_OF_LEVELS)
     d50:	8d 81       	ldd	r24, Y+5	; 0x05
     d52:	82 30       	cpi	r24, 0x02	; 2
     d54:	18 f0       	brcs	.+6      	; 0xd5c <dio_writePin+0x32>
	{
		return_errorStatus = Dio_levelError;
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	08 c1       	rjmp	.+528    	; 0xf6c <dio_writePin+0x242>
	}
	else
	{
		loc_pin = pin_id % NUM_OF_PINS_PER_PORT;
     d5c:	8c 81       	ldd	r24, Y+4	; 0x04
     d5e:	87 70       	andi	r24, 0x07	; 7
     d60:	89 83       	std	Y+1, r24	; 0x01
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
     d62:	8c 81       	ldd	r24, Y+4	; 0x04
     d64:	86 95       	lsr	r24
     d66:	86 95       	lsr	r24
     d68:	86 95       	lsr	r24
     d6a:	8a 83       	std	Y+2, r24	; 0x02

		switch(loc_port)
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	3f 87       	std	Y+15, r19	; 0x0f
     d74:	2e 87       	std	Y+14, r18	; 0x0e
     d76:	8e 85       	ldd	r24, Y+14	; 0x0e
     d78:	9f 85       	ldd	r25, Y+15	; 0x0f
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <dio_writePin+0x58>
     d80:	4f c0       	rjmp	.+158    	; 0xe20 <dio_writePin+0xf6>
     d82:	2e 85       	ldd	r18, Y+14	; 0x0e
     d84:	3f 85       	ldd	r19, Y+15	; 0x0f
     d86:	22 30       	cpi	r18, 0x02	; 2
     d88:	31 05       	cpc	r19, r1
     d8a:	2c f4       	brge	.+10     	; 0xd96 <dio_writePin+0x6c>
     d8c:	8e 85       	ldd	r24, Y+14	; 0x0e
     d8e:	9f 85       	ldd	r25, Y+15	; 0x0f
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	71 f0       	breq	.+28     	; 0xdb0 <dio_writePin+0x86>
     d94:	eb c0       	rjmp	.+470    	; 0xf6c <dio_writePin+0x242>
     d96:	2e 85       	ldd	r18, Y+14	; 0x0e
     d98:	3f 85       	ldd	r19, Y+15	; 0x0f
     d9a:	22 30       	cpi	r18, 0x02	; 2
     d9c:	31 05       	cpc	r19, r1
     d9e:	09 f4       	brne	.+2      	; 0xda2 <dio_writePin+0x78>
     da0:	77 c0       	rjmp	.+238    	; 0xe90 <dio_writePin+0x166>
     da2:	8e 85       	ldd	r24, Y+14	; 0x0e
     da4:	9f 85       	ldd	r25, Y+15	; 0x0f
     da6:	83 30       	cpi	r24, 0x03	; 3
     da8:	91 05       	cpc	r25, r1
     daa:	09 f4       	brne	.+2      	; 0xdae <dio_writePin+0x84>
     dac:	a9 c0       	rjmp	.+338    	; 0xf00 <dio_writePin+0x1d6>
     dae:	de c0       	rjmp	.+444    	; 0xf6c <dio_writePin+0x242>
		{

		case DIO_PORTA:

			switch (value)
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	3d 87       	std	Y+13, r19	; 0x0d
     db8:	2c 87       	std	Y+12, r18	; 0x0c
     dba:	8c 85       	ldd	r24, Y+12	; 0x0c
     dbc:	9d 85       	ldd	r25, Y+13	; 0x0d
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	d1 f0       	breq	.+52     	; 0xdf6 <dio_writePin+0xcc>
     dc2:	2c 85       	ldd	r18, Y+12	; 0x0c
     dc4:	3d 85       	ldd	r19, Y+13	; 0x0d
     dc6:	21 30       	cpi	r18, 0x01	; 1
     dc8:	31 05       	cpc	r19, r1
     dca:	09 f0       	breq	.+2      	; 0xdce <dio_writePin+0xa4>
     dcc:	cf c0       	rjmp	.+414    	; 0xf6c <dio_writePin+0x242>
			{

			case DIO_HIGH:

				SET_BIT(PORTA, loc_pin);
     dce:	ab e3       	ldi	r26, 0x3B	; 59
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	eb e3       	ldi	r30, 0x3B	; 59
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	48 2f       	mov	r20, r24
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 2e       	mov	r0, r18
     de6:	02 c0       	rjmp	.+4      	; 0xdec <dio_writePin+0xc2>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	0a 94       	dec	r0
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <dio_writePin+0xbe>
     df0:	84 2b       	or	r24, r20
     df2:	8c 93       	st	X, r24
     df4:	bb c0       	rjmp	.+374    	; 0xf6c <dio_writePin+0x242>

				break;

			case DIO_LOW:

				CLEAR_BIT(PORTA, loc_pin);
     df6:	ab e3       	ldi	r26, 0x3B	; 59
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	eb e3       	ldi	r30, 0x3B	; 59
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <dio_writePin+0xea>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <dio_writePin+0xe6>
     e18:	80 95       	com	r24
     e1a:	84 23       	and	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	a6 c0       	rjmp	.+332    	; 0xf6c <dio_writePin+0x242>
			}
			break;

		case DIO_PORTB:

			switch (value)
     e20:	8d 81       	ldd	r24, Y+5	; 0x05
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	3b 87       	std	Y+11, r19	; 0x0b
     e28:	2a 87       	std	Y+10, r18	; 0x0a
     e2a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e2c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	d1 f0       	breq	.+52     	; 0xe66 <dio_writePin+0x13c>
     e32:	2a 85       	ldd	r18, Y+10	; 0x0a
     e34:	3b 85       	ldd	r19, Y+11	; 0x0b
     e36:	21 30       	cpi	r18, 0x01	; 1
     e38:	31 05       	cpc	r19, r1
     e3a:	09 f0       	breq	.+2      	; 0xe3e <dio_writePin+0x114>
     e3c:	97 c0       	rjmp	.+302    	; 0xf6c <dio_writePin+0x242>
			{

			case DIO_HIGH:

				SET_BIT(PORTB, loc_pin);
     e3e:	a8 e3       	ldi	r26, 0x38	; 56
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e8 e3       	ldi	r30, 0x38	; 56
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	48 2f       	mov	r20, r24
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 2e       	mov	r0, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <dio_writePin+0x132>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <dio_writePin+0x12e>
     e60:	84 2b       	or	r24, r20
     e62:	8c 93       	st	X, r24
     e64:	83 c0       	rjmp	.+262    	; 0xf6c <dio_writePin+0x242>

				break;

			case DIO_LOW:

				CLEAR_BIT(PORTB, loc_pin);
     e66:	a8 e3       	ldi	r26, 0x38	; 56
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e8 e3       	ldi	r30, 0x38	; 56
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <dio_writePin+0x15a>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <dio_writePin+0x156>
     e88:	80 95       	com	r24
     e8a:	84 23       	and	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	6e c0       	rjmp	.+220    	; 0xf6c <dio_writePin+0x242>
			break;


		case DIO_PORTC:

			switch (value)
     e90:	8d 81       	ldd	r24, Y+5	; 0x05
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	39 87       	std	Y+9, r19	; 0x09
     e98:	28 87       	std	Y+8, r18	; 0x08
     e9a:	88 85       	ldd	r24, Y+8	; 0x08
     e9c:	99 85       	ldd	r25, Y+9	; 0x09
     e9e:	00 97       	sbiw	r24, 0x00	; 0
     ea0:	d1 f0       	breq	.+52     	; 0xed6 <dio_writePin+0x1ac>
     ea2:	28 85       	ldd	r18, Y+8	; 0x08
     ea4:	39 85       	ldd	r19, Y+9	; 0x09
     ea6:	21 30       	cpi	r18, 0x01	; 1
     ea8:	31 05       	cpc	r19, r1
     eaa:	09 f0       	breq	.+2      	; 0xeae <dio_writePin+0x184>
     eac:	5f c0       	rjmp	.+190    	; 0xf6c <dio_writePin+0x242>
			{

			case DIO_HIGH:

				SET_BIT(PORTC, loc_pin);
     eae:	a5 e3       	ldi	r26, 0x35	; 53
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e5 e3       	ldi	r30, 0x35	; 53
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <dio_writePin+0x1a2>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <dio_writePin+0x19e>
     ed0:	84 2b       	or	r24, r20
     ed2:	8c 93       	st	X, r24
     ed4:	4b c0       	rjmp	.+150    	; 0xf6c <dio_writePin+0x242>

				break;

			case DIO_LOW:

				CLEAR_BIT(PORTC, loc_pin);
     ed6:	a5 e3       	ldi	r26, 0x35	; 53
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e5 e3       	ldi	r30, 0x35	; 53
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <dio_writePin+0x1ca>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <dio_writePin+0x1c6>
     ef8:	80 95       	com	r24
     efa:	84 23       	and	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	36 c0       	rjmp	.+108    	; 0xf6c <dio_writePin+0x242>



		case DIO_PORTD:

			switch (value)
     f00:	8d 81       	ldd	r24, Y+5	; 0x05
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	3f 83       	std	Y+7, r19	; 0x07
     f08:	2e 83       	std	Y+6, r18	; 0x06
     f0a:	8e 81       	ldd	r24, Y+6	; 0x06
     f0c:	9f 81       	ldd	r25, Y+7	; 0x07
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	c9 f0       	breq	.+50     	; 0xf44 <dio_writePin+0x21a>
     f12:	2e 81       	ldd	r18, Y+6	; 0x06
     f14:	3f 81       	ldd	r19, Y+7	; 0x07
     f16:	21 30       	cpi	r18, 0x01	; 1
     f18:	31 05       	cpc	r19, r1
     f1a:	41 f5       	brne	.+80     	; 0xf6c <dio_writePin+0x242>
			{

			case DIO_HIGH:

				SET_BIT(PORTD, loc_pin);
     f1c:	a2 e3       	ldi	r26, 0x32	; 50
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e2 e3       	ldi	r30, 0x32	; 50
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <dio_writePin+0x210>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <dio_writePin+0x20c>
     f3e:	84 2b       	or	r24, r20
     f40:	8c 93       	st	X, r24
     f42:	14 c0       	rjmp	.+40     	; 0xf6c <dio_writePin+0x242>

				break;

			case DIO_LOW:

				CLEAR_BIT(PORTD, loc_pin);
     f44:	a2 e3       	ldi	r26, 0x32	; 50
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e2 e3       	ldi	r30, 0x32	; 50
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <dio_writePin+0x238>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <dio_writePin+0x234>
     f66:	80 95       	com	r24
     f68:	84 23       	and	r24, r20
     f6a:	8c 93       	st	X, r24


		}
	}

	return return_errorStatus;
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f6e:	2f 96       	adiw	r28, 0x0f	; 15
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <dio_readPin>:
DIO_errorStatus dio_readPin(u8 pin_id, pu8 level)
{
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	28 97       	sbiw	r28, 0x08	; 8
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
     f94:	8c 83       	std	Y+4, r24	; 0x04
     f96:	7e 83       	std	Y+6, r23	; 0x06
     f98:	6d 83       	std	Y+5, r22	; 0x05
	DIO_errorStatus return_errorStatus = Dio_Ok;
     f9a:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_port;

	u8 loc_pin;

	if(pin_id > NUM_OF_PINS)
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	80 32       	cpi	r24, 0x20	; 32
     fa0:	18 f0       	brcs	.+6      	; 0xfa8 <dio_readPin+0x28>
	{
		return_errorStatus = Dio_pinError;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	8b 83       	std	Y+3, r24	; 0x03
     fa6:	35 c1       	rjmp	.+618    	; 0x1212 <dio_readPin+0x292>
	}
	else if(level == NULL)
     fa8:	8d 81       	ldd	r24, Y+5	; 0x05
     faa:	9e 81       	ldd	r25, Y+6	; 0x06
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	19 f4       	brne	.+6      	; 0xfb6 <dio_readPin+0x36>
	{
		return_errorStatus = Dio_NullPointerError;
     fb0:	84 e0       	ldi	r24, 0x04	; 4
     fb2:	8b 83       	std	Y+3, r24	; 0x03
     fb4:	2e c1       	rjmp	.+604    	; 0x1212 <dio_readPin+0x292>
	}
	else
	{
		loc_pin = pin_id % NUM_OF_PINS_PER_PORT;
     fb6:	8c 81       	ldd	r24, Y+4	; 0x04
     fb8:	87 70       	andi	r24, 0x07	; 7
     fba:	89 83       	std	Y+1, r24	; 0x01
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
     fbc:	8c 81       	ldd	r24, Y+4	; 0x04
     fbe:	86 95       	lsr	r24
     fc0:	86 95       	lsr	r24
     fc2:	86 95       	lsr	r24
     fc4:	8a 83       	std	Y+2, r24	; 0x02

		switch(loc_port)
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	38 87       	std	Y+8, r19	; 0x08
     fce:	2f 83       	std	Y+7, r18	; 0x07
     fd0:	4f 81       	ldd	r20, Y+7	; 0x07
     fd2:	58 85       	ldd	r21, Y+8	; 0x08
     fd4:	41 30       	cpi	r20, 0x01	; 1
     fd6:	51 05       	cpc	r21, r1
     fd8:	09 f4       	brne	.+2      	; 0xfdc <dio_readPin+0x5c>
     fda:	59 c0       	rjmp	.+178    	; 0x108e <dio_readPin+0x10e>
     fdc:	8f 81       	ldd	r24, Y+7	; 0x07
     fde:	98 85       	ldd	r25, Y+8	; 0x08
     fe0:	82 30       	cpi	r24, 0x02	; 2
     fe2:	91 05       	cpc	r25, r1
     fe4:	34 f4       	brge	.+12     	; 0xff2 <dio_readPin+0x72>
     fe6:	2f 81       	ldd	r18, Y+7	; 0x07
     fe8:	38 85       	ldd	r19, Y+8	; 0x08
     fea:	21 15       	cp	r18, r1
     fec:	31 05       	cpc	r19, r1
     fee:	71 f0       	breq	.+28     	; 0x100c <dio_readPin+0x8c>
     ff0:	10 c1       	rjmp	.+544    	; 0x1212 <dio_readPin+0x292>
     ff2:	4f 81       	ldd	r20, Y+7	; 0x07
     ff4:	58 85       	ldd	r21, Y+8	; 0x08
     ff6:	42 30       	cpi	r20, 0x02	; 2
     ff8:	51 05       	cpc	r21, r1
     ffa:	09 f4       	brne	.+2      	; 0xffe <dio_readPin+0x7e>
     ffc:	89 c0       	rjmp	.+274    	; 0x1110 <dio_readPin+0x190>
     ffe:	8f 81       	ldd	r24, Y+7	; 0x07
    1000:	98 85       	ldd	r25, Y+8	; 0x08
    1002:	83 30       	cpi	r24, 0x03	; 3
    1004:	91 05       	cpc	r25, r1
    1006:	09 f4       	brne	.+2      	; 0x100a <dio_readPin+0x8a>
    1008:	c4 c0       	rjmp	.+392    	; 0x1192 <dio_readPin+0x212>
    100a:	03 c1       	rjmp	.+518    	; 0x1212 <dio_readPin+0x292>
		{

		case DIO_PORTA:

			if (GET_BIT(DDRA,loc_pin) == PORT_INPUT)
    100c:	ea e3       	ldi	r30, 0x3A	; 58
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <dio_readPin+0xa6>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	2a 95       	dec	r18
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <dio_readPin+0xa2>
    102a:	9a 01       	movw	r18, r20
    102c:	28 23       	and	r18, r24
    102e:	39 23       	and	r19, r25
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	a9 01       	movw	r20, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <dio_readPin+0xbe>
    103a:	55 95       	asr	r21
    103c:	47 95       	ror	r20
    103e:	8a 95       	dec	r24
    1040:	e2 f7       	brpl	.-8      	; 0x103a <dio_readPin+0xba>
    1042:	ca 01       	movw	r24, r20
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	01 f5       	brne	.+64     	; 0x1088 <dio_readPin+0x108>
			{
				*level = GET_BIT(PINA, loc_pin);
    1048:	e9 e3       	ldi	r30, 0x39	; 57
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <dio_readPin+0xe2>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	2a 95       	dec	r18
    1064:	e2 f7       	brpl	.-8      	; 0x105e <dio_readPin+0xde>
    1066:	9a 01       	movw	r18, r20
    1068:	28 23       	and	r18, r24
    106a:	39 23       	and	r19, r25
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	88 2f       	mov	r24, r24
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	a9 01       	movw	r20, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <dio_readPin+0xfa>
    1076:	55 95       	asr	r21
    1078:	47 95       	ror	r20
    107a:	8a 95       	dec	r24
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <dio_readPin+0xf6>
    107e:	ca 01       	movw	r24, r20
    1080:	ed 81       	ldd	r30, Y+5	; 0x05
    1082:	fe 81       	ldd	r31, Y+6	; 0x06
    1084:	80 83       	st	Z, r24
    1086:	c5 c0       	rjmp	.+394    	; 0x1212 <dio_readPin+0x292>
			}
			else
			{
				return_errorStatus = Dio_directionError;
    1088:	83 e0       	ldi	r24, 0x03	; 3
    108a:	8b 83       	std	Y+3, r24	; 0x03
    108c:	c2 c0       	rjmp	.+388    	; 0x1212 <dio_readPin+0x292>
				break;


		case DIO_PORTB:

			if (GET_BIT(DDRB,loc_pin) == PORT_INPUT)
    108e:	e7 e3       	ldi	r30, 0x37	; 55
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <dio_readPin+0x128>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	2a 95       	dec	r18
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <dio_readPin+0x124>
    10ac:	9a 01       	movw	r18, r20
    10ae:	28 23       	and	r18, r24
    10b0:	39 23       	and	r19, r25
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a9 01       	movw	r20, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <dio_readPin+0x140>
    10bc:	55 95       	asr	r21
    10be:	47 95       	ror	r20
    10c0:	8a 95       	dec	r24
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <dio_readPin+0x13c>
    10c4:	ca 01       	movw	r24, r20
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	01 f5       	brne	.+64     	; 0x110a <dio_readPin+0x18a>
			{
				*level = GET_BIT(PINB, loc_pin);
    10ca:	e6 e3       	ldi	r30, 0x36	; 54
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <dio_readPin+0x164>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	2a 95       	dec	r18
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <dio_readPin+0x160>
    10e8:	9a 01       	movw	r18, r20
    10ea:	28 23       	and	r18, r24
    10ec:	39 23       	and	r19, r25
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	a9 01       	movw	r20, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <dio_readPin+0x17c>
    10f8:	55 95       	asr	r21
    10fa:	47 95       	ror	r20
    10fc:	8a 95       	dec	r24
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <dio_readPin+0x178>
    1100:	ca 01       	movw	r24, r20
    1102:	ed 81       	ldd	r30, Y+5	; 0x05
    1104:	fe 81       	ldd	r31, Y+6	; 0x06
    1106:	80 83       	st	Z, r24
    1108:	84 c0       	rjmp	.+264    	; 0x1212 <dio_readPin+0x292>
			}
			else
			{
				return_errorStatus = Dio_directionError;
    110a:	83 e0       	ldi	r24, 0x03	; 3
    110c:	8b 83       	std	Y+3, r24	; 0x03
    110e:	81 c0       	rjmp	.+258    	; 0x1212 <dio_readPin+0x292>



		case DIO_PORTC:

			if (GET_BIT(DDRC,loc_pin) == PORT_INPUT)
    1110:	e4 e3       	ldi	r30, 0x34	; 52
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 c0       	rjmp	.+4      	; 0x112a <dio_readPin+0x1aa>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	2a 95       	dec	r18
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <dio_readPin+0x1a6>
    112e:	9a 01       	movw	r18, r20
    1130:	28 23       	and	r18, r24
    1132:	39 23       	and	r19, r25
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a9 01       	movw	r20, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <dio_readPin+0x1c2>
    113e:	55 95       	asr	r21
    1140:	47 95       	ror	r20
    1142:	8a 95       	dec	r24
    1144:	e2 f7       	brpl	.-8      	; 0x113e <dio_readPin+0x1be>
    1146:	ca 01       	movw	r24, r20
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	01 f5       	brne	.+64     	; 0x118c <dio_readPin+0x20c>
			{

				*level = GET_BIT(PINC, loc_pin);
    114c:	e3 e3       	ldi	r30, 0x33	; 51
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <dio_readPin+0x1e6>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	2a 95       	dec	r18
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <dio_readPin+0x1e2>
    116a:	9a 01       	movw	r18, r20
    116c:	28 23       	and	r18, r24
    116e:	39 23       	and	r19, r25
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	a9 01       	movw	r20, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <dio_readPin+0x1fe>
    117a:	55 95       	asr	r21
    117c:	47 95       	ror	r20
    117e:	8a 95       	dec	r24
    1180:	e2 f7       	brpl	.-8      	; 0x117a <dio_readPin+0x1fa>
    1182:	ca 01       	movw	r24, r20
    1184:	ed 81       	ldd	r30, Y+5	; 0x05
    1186:	fe 81       	ldd	r31, Y+6	; 0x06
    1188:	80 83       	st	Z, r24
    118a:	43 c0       	rjmp	.+134    	; 0x1212 <dio_readPin+0x292>

			}
			else
			{
				return_errorStatus = Dio_directionError;
    118c:	83 e0       	ldi	r24, 0x03	; 3
    118e:	8b 83       	std	Y+3, r24	; 0x03
    1190:	40 c0       	rjmp	.+128    	; 0x1212 <dio_readPin+0x292>
				break;


		case DIO_PORTD:

			if (GET_BIT(DDRD,loc_pin) == PORT_INPUT)
    1192:	e1 e3       	ldi	r30, 0x31	; 49
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	50 e0       	ldi	r21, 0x00	; 0
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <dio_readPin+0x22c>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	2a 95       	dec	r18
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <dio_readPin+0x228>
    11b0:	9a 01       	movw	r18, r20
    11b2:	28 23       	and	r18, r24
    11b4:	39 23       	and	r19, r25
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	a9 01       	movw	r20, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <dio_readPin+0x244>
    11c0:	55 95       	asr	r21
    11c2:	47 95       	ror	r20
    11c4:	8a 95       	dec	r24
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <dio_readPin+0x240>
    11c8:	ca 01       	movw	r24, r20
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	01 f5       	brne	.+64     	; 0x120e <dio_readPin+0x28e>
			{

				*level = GET_BIT(PIND, loc_pin);
    11ce:	e0 e3       	ldi	r30, 0x30	; 48
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <dio_readPin+0x268>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	2a 95       	dec	r18
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <dio_readPin+0x264>
    11ec:	9a 01       	movw	r18, r20
    11ee:	28 23       	and	r18, r24
    11f0:	39 23       	and	r19, r25
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	88 2f       	mov	r24, r24
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	a9 01       	movw	r20, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <dio_readPin+0x280>
    11fc:	55 95       	asr	r21
    11fe:	47 95       	ror	r20
    1200:	8a 95       	dec	r24
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <dio_readPin+0x27c>
    1204:	ca 01       	movw	r24, r20
    1206:	ed 81       	ldd	r30, Y+5	; 0x05
    1208:	fe 81       	ldd	r31, Y+6	; 0x06
    120a:	80 83       	st	Z, r24
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <dio_readPin+0x292>

			}
			else
			{
				return_errorStatus = Dio_directionError;
    120e:	83 e0       	ldi	r24, 0x03	; 3
    1210:	8b 83       	std	Y+3, r24	; 0x03
				break;

		}
	}

	return return_errorStatus;
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1214:	28 96       	adiw	r28, 0x08	; 8
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <dio_writePort>:
DIO_errorStatus dio_writePort(u8 port_id, u8 value)
{
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	00 d0       	rcall	.+0      	; 0x122c <dio_writePort+0x6>
    122c:	00 d0       	rcall	.+0      	; 0x122e <dio_writePort+0x8>
    122e:	0f 92       	push	r0
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	8a 83       	std	Y+2, r24	; 0x02
    1236:	6b 83       	std	Y+3, r22	; 0x03
	DIO_errorStatus return_errorStatus = Dio_Ok;
    1238:	19 82       	std	Y+1, r1	; 0x01

	if (port_id > NUM_OF_PORTS) {
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	84 30       	cpi	r24, 0x04	; 4
    123e:	18 f0       	brcs	.+6      	; 0x1246 <dio_writePort+0x20>

		return_errorStatus = Dio_portError;
    1240:	85 e0       	ldi	r24, 0x05	; 5
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	32 c0       	rjmp	.+100    	; 0x12aa <dio_writePort+0x84>
	}

	else {

		switch (port_id) {
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	3d 83       	std	Y+5, r19	; 0x05
    124e:	2c 83       	std	Y+4, r18	; 0x04
    1250:	8c 81       	ldd	r24, Y+4	; 0x04
    1252:	9d 81       	ldd	r25, Y+5	; 0x05
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	91 05       	cpc	r25, r1
    1258:	d1 f0       	breq	.+52     	; 0x128e <dio_writePort+0x68>
    125a:	2c 81       	ldd	r18, Y+4	; 0x04
    125c:	3d 81       	ldd	r19, Y+5	; 0x05
    125e:	22 30       	cpi	r18, 0x02	; 2
    1260:	31 05       	cpc	r19, r1
    1262:	2c f4       	brge	.+10     	; 0x126e <dio_writePort+0x48>
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	9d 81       	ldd	r25, Y+5	; 0x05
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	61 f0       	breq	.+24     	; 0x1284 <dio_writePort+0x5e>
    126c:	1e c0       	rjmp	.+60     	; 0x12aa <dio_writePort+0x84>
    126e:	2c 81       	ldd	r18, Y+4	; 0x04
    1270:	3d 81       	ldd	r19, Y+5	; 0x05
    1272:	22 30       	cpi	r18, 0x02	; 2
    1274:	31 05       	cpc	r19, r1
    1276:	81 f0       	breq	.+32     	; 0x1298 <dio_writePort+0x72>
    1278:	8c 81       	ldd	r24, Y+4	; 0x04
    127a:	9d 81       	ldd	r25, Y+5	; 0x05
    127c:	83 30       	cpi	r24, 0x03	; 3
    127e:	91 05       	cpc	r25, r1
    1280:	81 f0       	breq	.+32     	; 0x12a2 <dio_writePort+0x7c>
    1282:	13 c0       	rjmp	.+38     	; 0x12aa <dio_writePort+0x84>

		case DIO_PORTA:

			ASSIGN_REG(PORTA, value);
    1284:	eb e3       	ldi	r30, 0x3B	; 59
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	80 83       	st	Z, r24
    128c:	0e c0       	rjmp	.+28     	; 0x12aa <dio_writePort+0x84>

			break;

		case DIO_PORTB:

			ASSIGN_REG(PORTB, value);
    128e:	e8 e3       	ldi	r30, 0x38	; 56
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	80 83       	st	Z, r24
    1296:	09 c0       	rjmp	.+18     	; 0x12aa <dio_writePort+0x84>

			break;

		case DIO_PORTC:

			ASSIGN_REG(PORTC, value);
    1298:	e5 e3       	ldi	r30, 0x35	; 53
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	80 83       	st	Z, r24
    12a0:	04 c0       	rjmp	.+8      	; 0x12aa <dio_writePort+0x84>

			break;

		case DIO_PORTD:

			ASSIGN_REG(PORTD, value);
    12a2:	e2 e3       	ldi	r30, 0x32	; 50
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	80 83       	st	Z, r24

		}

	}

	return return_errorStatus;
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <dio_readPort>:
DIO_errorStatus dio_readPort(u8 port_id, pu8 level)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <dio_readPort+0x6>
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <dio_readPort+0x8>
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <dio_readPort+0xa>
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	8a 83       	std	Y+2, r24	; 0x02
    12cc:	7c 83       	std	Y+4, r23	; 0x04
    12ce:	6b 83       	std	Y+3, r22	; 0x03
	DIO_errorStatus return_errorStatus = Dio_Ok;
    12d0:	19 82       	std	Y+1, r1	; 0x01

	if (level == NULL) {
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	19 f4       	brne	.+6      	; 0x12e0 <dio_readPort+0x24>

		return_errorStatus = Dio_NullPointerError;
    12da:	84 e0       	ldi	r24, 0x04	; 4
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	40 c0       	rjmp	.+128    	; 0x1360 <dio_readPort+0xa4>
	}

	else if (port_id > NUM_OF_PORTS)
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	84 30       	cpi	r24, 0x04	; 4
    12e4:	18 f0       	brcs	.+6      	; 0x12ec <dio_readPort+0x30>
	{

		return_errorStatus = Dio_portError;
    12e6:	85 e0       	ldi	r24, 0x05	; 5
    12e8:	89 83       	std	Y+1, r24	; 0x01
    12ea:	3a c0       	rjmp	.+116    	; 0x1360 <dio_readPort+0xa4>
	}

	else
	{

		switch (port_id) {
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	3e 83       	std	Y+6, r19	; 0x06
    12f4:	2d 83       	std	Y+5, r18	; 0x05
    12f6:	8d 81       	ldd	r24, Y+5	; 0x05
    12f8:	9e 81       	ldd	r25, Y+6	; 0x06
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	91 05       	cpc	r25, r1
    12fe:	e1 f0       	breq	.+56     	; 0x1338 <dio_readPort+0x7c>
    1300:	2d 81       	ldd	r18, Y+5	; 0x05
    1302:	3e 81       	ldd	r19, Y+6	; 0x06
    1304:	22 30       	cpi	r18, 0x02	; 2
    1306:	31 05       	cpc	r19, r1
    1308:	2c f4       	brge	.+10     	; 0x1314 <dio_readPort+0x58>
    130a:	8d 81       	ldd	r24, Y+5	; 0x05
    130c:	9e 81       	ldd	r25, Y+6	; 0x06
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	61 f0       	breq	.+24     	; 0x132a <dio_readPort+0x6e>
    1312:	26 c0       	rjmp	.+76     	; 0x1360 <dio_readPort+0xa4>
    1314:	2d 81       	ldd	r18, Y+5	; 0x05
    1316:	3e 81       	ldd	r19, Y+6	; 0x06
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	a1 f0       	breq	.+40     	; 0x1346 <dio_readPort+0x8a>
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	83 30       	cpi	r24, 0x03	; 3
    1324:	91 05       	cpc	r25, r1
    1326:	b1 f0       	breq	.+44     	; 0x1354 <dio_readPort+0x98>
    1328:	1b c0       	rjmp	.+54     	; 0x1360 <dio_readPort+0xa4>

		case DIO_PORTA:

			*level = PINA;
    132a:	e9 e3       	ldi	r30, 0x39	; 57
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	eb 81       	ldd	r30, Y+3	; 0x03
    1332:	fc 81       	ldd	r31, Y+4	; 0x04
    1334:	80 83       	st	Z, r24
    1336:	14 c0       	rjmp	.+40     	; 0x1360 <dio_readPort+0xa4>

			break;

		case DIO_PORTB:

			*level = PINB;
    1338:	e6 e3       	ldi	r30, 0x36	; 54
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	eb 81       	ldd	r30, Y+3	; 0x03
    1340:	fc 81       	ldd	r31, Y+4	; 0x04
    1342:	80 83       	st	Z, r24
    1344:	0d c0       	rjmp	.+26     	; 0x1360 <dio_readPort+0xa4>

			break;

		case DIO_PORTC:

			*level = PINC;
    1346:	e3 e3       	ldi	r30, 0x33	; 51
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	eb 81       	ldd	r30, Y+3	; 0x03
    134e:	fc 81       	ldd	r31, Y+4	; 0x04
    1350:	80 83       	st	Z, r24
    1352:	06 c0       	rjmp	.+12     	; 0x1360 <dio_readPort+0xa4>

			break;

		case DIO_PORTD:

			*level = PIND;
    1354:	e0 e3       	ldi	r30, 0x30	; 48
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	eb 81       	ldd	r30, Y+3	; 0x03
    135c:	fc 81       	ldd	r31, Y+4	; 0x04
    135e:	80 83       	st	Z, r24
			break;

		}

	}
	return return_errorStatus;
    1360:	89 81       	ldd	r24, Y+1	; 0x01
}
    1362:	26 96       	adiw	r28, 0x06	; 6
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <dio_tooglePin>:
DIO_errorStatus dio_tooglePin(u8 pin_id)
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <dio_tooglePin+0x6>
    137a:	00 d0       	rcall	.+0      	; 0x137c <dio_tooglePin+0x8>
    137c:	00 d0       	rcall	.+0      	; 0x137e <dio_tooglePin+0xa>
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	8c 83       	std	Y+4, r24	; 0x04
	DIO_errorStatus return_errorStatus = Dio_Ok;
    1384:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_pin;
	u8 loc_port;

	if (pin_id > NUM_OF_PINS)
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	80 32       	cpi	r24, 0x20	; 32
    138a:	18 f0       	brcs	.+6      	; 0x1392 <dio_tooglePin+0x1e>
	{

		return_errorStatus = Dio_pinError;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	8b 83       	std	Y+3, r24	; 0x03
    1390:	f9 c0       	rjmp	.+498    	; 0x1584 <dio_tooglePin+0x210>
	}

	else
	{
		loc_pin = pin_id % NUM_OF_PINS_PER_PORT;
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	87 70       	andi	r24, 0x07	; 7
    1396:	8a 83       	std	Y+2, r24	; 0x02
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
    1398:	8c 81       	ldd	r24, Y+4	; 0x04
    139a:	86 95       	lsr	r24
    139c:	86 95       	lsr	r24
    139e:	86 95       	lsr	r24
    13a0:	89 83       	std	Y+1, r24	; 0x01

		switch (loc_port)
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	3e 83       	std	Y+6, r19	; 0x06
    13aa:	2d 83       	std	Y+5, r18	; 0x05
    13ac:	4d 81       	ldd	r20, Y+5	; 0x05
    13ae:	5e 81       	ldd	r21, Y+6	; 0x06
    13b0:	41 30       	cpi	r20, 0x01	; 1
    13b2:	51 05       	cpc	r21, r1
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <dio_tooglePin+0x44>
    13b6:	4c c0       	rjmp	.+152    	; 0x1450 <dio_tooglePin+0xdc>
    13b8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ba:	9e 81       	ldd	r25, Y+6	; 0x06
    13bc:	82 30       	cpi	r24, 0x02	; 2
    13be:	91 05       	cpc	r25, r1
    13c0:	34 f4       	brge	.+12     	; 0x13ce <dio_tooglePin+0x5a>
    13c2:	2d 81       	ldd	r18, Y+5	; 0x05
    13c4:	3e 81       	ldd	r19, Y+6	; 0x06
    13c6:	21 15       	cp	r18, r1
    13c8:	31 05       	cpc	r19, r1
    13ca:	71 f0       	breq	.+28     	; 0x13e8 <dio_tooglePin+0x74>
    13cc:	db c0       	rjmp	.+438    	; 0x1584 <dio_tooglePin+0x210>
    13ce:	4d 81       	ldd	r20, Y+5	; 0x05
    13d0:	5e 81       	ldd	r21, Y+6	; 0x06
    13d2:	42 30       	cpi	r20, 0x02	; 2
    13d4:	51 05       	cpc	r21, r1
    13d6:	09 f4       	brne	.+2      	; 0x13da <dio_tooglePin+0x66>
    13d8:	6f c0       	rjmp	.+222    	; 0x14b8 <dio_tooglePin+0x144>
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	9e 81       	ldd	r25, Y+6	; 0x06
    13de:	83 30       	cpi	r24, 0x03	; 3
    13e0:	91 05       	cpc	r25, r1
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <dio_tooglePin+0x72>
    13e4:	9d c0       	rjmp	.+314    	; 0x1520 <dio_tooglePin+0x1ac>
    13e6:	ce c0       	rjmp	.+412    	; 0x1584 <dio_tooglePin+0x210>
		{

		case DIO_PORTA:

			if (GET_BIT(DDRA,loc_pin) == PORT_OUTPUT)
    13e8:	ea e3       	ldi	r30, 0x3A	; 58
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	50 e0       	ldi	r21, 0x00	; 0
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <dio_tooglePin+0x8e>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	2a 95       	dec	r18
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <dio_tooglePin+0x8a>
    1406:	9a 01       	movw	r18, r20
    1408:	28 23       	and	r18, r24
    140a:	39 23       	and	r19, r25
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	88 2f       	mov	r24, r24
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	a9 01       	movw	r20, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <dio_tooglePin+0xa6>
    1416:	55 95       	asr	r21
    1418:	47 95       	ror	r20
    141a:	8a 95       	dec	r24
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <dio_tooglePin+0xa2>
    141e:	ca 01       	movw	r24, r20
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	91 05       	cpc	r25, r1
    1424:	09 f0       	breq	.+2      	; 0x1428 <dio_tooglePin+0xb4>
    1426:	ae c0       	rjmp	.+348    	; 0x1584 <dio_tooglePin+0x210>
			{
				TOGGLE_BIT(PORTA, loc_pin);
    1428:	ab e3       	ldi	r26, 0x3B	; 59
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	eb e3       	ldi	r30, 0x3B	; 59
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	48 2f       	mov	r20, r24
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 2e       	mov	r0, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <dio_tooglePin+0xd2>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	0a 94       	dec	r0
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <dio_tooglePin+0xce>
    144a:	84 27       	eor	r24, r20
    144c:	8c 93       	st	X, r24
    144e:	9a c0       	rjmp	.+308    	; 0x1584 <dio_tooglePin+0x210>
			}
			break;

		case DIO_PORTB:

			if (GET_BIT(DDRB,loc_pin) == PORT_OUTPUT)
    1450:	e7 e3       	ldi	r30, 0x37	; 55
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	48 2f       	mov	r20, r24
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 c0       	rjmp	.+4      	; 0x146a <dio_tooglePin+0xf6>
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	2a 95       	dec	r18
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <dio_tooglePin+0xf2>
    146e:	9a 01       	movw	r18, r20
    1470:	28 23       	and	r18, r24
    1472:	39 23       	and	r19, r25
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	88 2f       	mov	r24, r24
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	a9 01       	movw	r20, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <dio_tooglePin+0x10e>
    147e:	55 95       	asr	r21
    1480:	47 95       	ror	r20
    1482:	8a 95       	dec	r24
    1484:	e2 f7       	brpl	.-8      	; 0x147e <dio_tooglePin+0x10a>
    1486:	ca 01       	movw	r24, r20
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	91 05       	cpc	r25, r1
    148c:	09 f0       	breq	.+2      	; 0x1490 <dio_tooglePin+0x11c>
    148e:	7a c0       	rjmp	.+244    	; 0x1584 <dio_tooglePin+0x210>
			{
				TOGGLE_BIT(PORTB, loc_pin);
    1490:	a8 e3       	ldi	r26, 0x38	; 56
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e8 e3       	ldi	r30, 0x38	; 56
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 2e       	mov	r0, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <dio_tooglePin+0x13a>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <dio_tooglePin+0x136>
    14b2:	84 27       	eor	r24, r20
    14b4:	8c 93       	st	X, r24
    14b6:	66 c0       	rjmp	.+204    	; 0x1584 <dio_tooglePin+0x210>
			}
			break;

		case DIO_PORTC:

			if (GET_BIT(DDRC,loc_pin) == PORT_OUTPUT)
    14b8:	e4 e3       	ldi	r30, 0x34	; 52
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	48 2f       	mov	r20, r24
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <dio_tooglePin+0x15e>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	2a 95       	dec	r18
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <dio_tooglePin+0x15a>
    14d6:	9a 01       	movw	r18, r20
    14d8:	28 23       	and	r18, r24
    14da:	39 23       	and	r19, r25
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	88 2f       	mov	r24, r24
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	a9 01       	movw	r20, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <dio_tooglePin+0x176>
    14e6:	55 95       	asr	r21
    14e8:	47 95       	ror	r20
    14ea:	8a 95       	dec	r24
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <dio_tooglePin+0x172>
    14ee:	ca 01       	movw	r24, r20
    14f0:	81 30       	cpi	r24, 0x01	; 1
    14f2:	91 05       	cpc	r25, r1
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <dio_tooglePin+0x184>
    14f6:	46 c0       	rjmp	.+140    	; 0x1584 <dio_tooglePin+0x210>
			{
				TOGGLE_BIT(PORTC, loc_pin);
    14f8:	a5 e3       	ldi	r26, 0x35	; 53
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e5 e3       	ldi	r30, 0x35	; 53
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <dio_tooglePin+0x1a2>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <dio_tooglePin+0x19e>
    151a:	84 27       	eor	r24, r20
    151c:	8c 93       	st	X, r24
    151e:	32 c0       	rjmp	.+100    	; 0x1584 <dio_tooglePin+0x210>
			}
			break;

		case DIO_PORTD:

			if (GET_BIT(DDRD,loc_pin) == PORT_OUTPUT)
    1520:	e1 e3       	ldi	r30, 0x31	; 49
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 c0       	rjmp	.+4      	; 0x153a <dio_tooglePin+0x1c6>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	2a 95       	dec	r18
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <dio_tooglePin+0x1c2>
    153e:	9a 01       	movw	r18, r20
    1540:	28 23       	and	r18, r24
    1542:	39 23       	and	r19, r25
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	88 2f       	mov	r24, r24
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	a9 01       	movw	r20, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <dio_tooglePin+0x1de>
    154e:	55 95       	asr	r21
    1550:	47 95       	ror	r20
    1552:	8a 95       	dec	r24
    1554:	e2 f7       	brpl	.-8      	; 0x154e <dio_tooglePin+0x1da>
    1556:	ca 01       	movw	r24, r20
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	91 05       	cpc	r25, r1
    155c:	99 f4       	brne	.+38     	; 0x1584 <dio_tooglePin+0x210>
			{
				TOGGLE_BIT(PORTD, loc_pin);
    155e:	a2 e3       	ldi	r26, 0x32	; 50
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e2 e3       	ldi	r30, 0x32	; 50
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <dio_tooglePin+0x208>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <dio_tooglePin+0x204>
    1580:	84 27       	eor	r24, r20
    1582:	8c 93       	st	X, r24
			break;

		}

	}
	return return_errorStatus;
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1586:	26 96       	adiw	r28, 0x06	; 6
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <port_init>:
#include"port_config.h"
#include<avr/io.h>
/*initialize based on user configuration*/

void port_init(void)
{
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
#define PIN_OUTPUT_LOW               1

#undef PIN_OUTPUT_HIGH
#define PIN_OUTPUT_HIGH              1

	DDRA = CONC(DIO_u8_PIN0,DIO_u8_PIN1,DIO_u8_PIN2,DIO_u8_PIN3,DIO_u8_PIN4,DIO_u8_PIN5,DIO_u8_PIN6,DIO_u8_PIN7);
    15a0:	ea e3       	ldi	r30, 0x3A	; 58
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	8f ef       	ldi	r24, 0xFF	; 255
    15a6:	80 83       	st	Z, r24
	DDRB = CONC(DIO_u8_PIN8,DIO_u8_PIN9,DIO_u8_PIN10,DIO_u8_PIN11,DIO_u8_PIN12,DIO_u8_PIN13,DIO_u8_PIN14,DIO_u8_PIN15);
    15a8:	e7 e3       	ldi	r30, 0x37	; 55
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	8f ef       	ldi	r24, 0xFF	; 255
    15ae:	80 83       	st	Z, r24
	DDRC = CONC(DIO_u8_PIN16,DIO_u8_PIN17,DIO_u8_PIN18,DIO_u8_PIN19,DIO_u8_PIN20,DIO_u8_PIN21,DIO_u8_PIN22,DIO_u8_PIN23);
    15b0:	e4 e3       	ldi	r30, 0x34	; 52
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	8f ef       	ldi	r24, 0xFF	; 255
    15b6:	80 83       	st	Z, r24
	DDRD = CONC(DIO_u8_PIN24,DIO_u8_PIN25,DIO_u8_PIN26,DIO_u8_PIN27,DIO_u8_PIN28,DIO_u8_PIN29,DIO_u8_PIN30,DIO_u8_PIN31);
    15b8:	e1 e3       	ldi	r30, 0x31	; 49
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	10 82       	st	Z, r1
#define PIN_OUTPUT_LOW               0

#undef PIN_OUTPUT_HIGH
#define PIN_OUTPUT_HIGH              1

	PORTA = CONC(DIO_u8_PIN0,DIO_u8_PIN1,DIO_u8_PIN2,DIO_u8_PIN3,DIO_u8_PIN4,DIO_u8_PIN5,DIO_u8_PIN6,DIO_u8_PIN7);
    15be:	eb e3       	ldi	r30, 0x3B	; 59
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	8f ef       	ldi	r24, 0xFF	; 255
    15c4:	80 83       	st	Z, r24
	PORTB = CONC(DIO_u8_PIN8,DIO_u8_PIN9,DIO_u8_PIN10,DIO_u8_PIN11,DIO_u8_PIN12,DIO_u8_PIN13,DIO_u8_PIN14,DIO_u8_PIN15);
    15c6:	e8 e3       	ldi	r30, 0x38	; 56
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	8f ef       	ldi	r24, 0xFF	; 255
    15cc:	80 83       	st	Z, r24
	PORTC = CONC(DIO_u8_PIN16,DIO_u8_PIN17,DIO_u8_PIN18,DIO_u8_PIN19,DIO_u8_PIN20,DIO_u8_PIN21,DIO_u8_PIN22,DIO_u8_PIN23);
    15ce:	e5 e3       	ldi	r30, 0x35	; 53
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	10 82       	st	Z, r1
	PORTD = CONC(DIO_u8_PIN24,DIO_u8_PIN25,DIO_u8_PIN26,DIO_u8_PIN27,DIO_u8_PIN28,DIO_u8_PIN29,DIO_u8_PIN30,DIO_u8_PIN31);
    15d4:	e2 e3       	ldi	r30, 0x32	; 50
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	10 82       	st	Z, r1
#define PIN_OUTPUT_LOW              1
#define PIN_OUTPUT_HIGH             2
#define PIN_INPUT_PULL_UP           3
#define PIN_INPUT_FLOATING          4

}
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <setPinDirection>:

/*set pin direction*/
port_errorStatus setPinDirection(u8 pin_id, u8 direction)
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	27 97       	sbiw	r28, 0x07	; 7
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	8c 83       	std	Y+4, r24	; 0x04
    15f6:	6d 83       	std	Y+5, r22	; 0x05
	port_errorStatus return_errorStatus = port_OK;
    15f8:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_pn;
	u8 loc_port;

	if(pin_id > NUM_OF_PINS)
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	80 32       	cpi	r24, 0x20	; 32
    15fe:	18 f0       	brcs	.+6      	; 0x1606 <setPinDirection+0x26>
	{
		return_errorStatus = pinError;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	8b 83       	std	Y+3, r24	; 0x03
    1604:	df c0       	rjmp	.+446    	; 0x17c4 <setPinDirection+0x1e4>
	}
	else if(direction > NUM_OF_DIRECTION)
    1606:	8d 81       	ldd	r24, Y+5	; 0x05
    1608:	82 30       	cpi	r24, 0x02	; 2
    160a:	18 f0       	brcs	.+6      	; 0x1612 <setPinDirection+0x32>
	{
		return_errorStatus = pinDirectionError;
    160c:	82 e0       	ldi	r24, 0x02	; 2
    160e:	8b 83       	std	Y+3, r24	; 0x03
    1610:	d9 c0       	rjmp	.+434    	; 0x17c4 <setPinDirection+0x1e4>
	}
	else
	{
		loc_pn = pin_id % NUM_OF_PINS_PER_PORT;
    1612:	8c 81       	ldd	r24, Y+4	; 0x04
    1614:	87 70       	andi	r24, 0x07	; 7
    1616:	8a 83       	std	Y+2, r24	; 0x02
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
    1618:	8c 81       	ldd	r24, Y+4	; 0x04
    161a:	86 95       	lsr	r24
    161c:	86 95       	lsr	r24
    161e:	86 95       	lsr	r24
    1620:	89 83       	std	Y+1, r24	; 0x01

		switch(loc_port)
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	3f 83       	std	Y+7, r19	; 0x07
    162a:	2e 83       	std	Y+6, r18	; 0x06
    162c:	8e 81       	ldd	r24, Y+6	; 0x06
    162e:	9f 81       	ldd	r25, Y+7	; 0x07
    1630:	81 30       	cpi	r24, 0x01	; 1
    1632:	91 05       	cpc	r25, r1
    1634:	09 f4       	brne	.+2      	; 0x1638 <setPinDirection+0x58>
    1636:	43 c0       	rjmp	.+134    	; 0x16be <setPinDirection+0xde>
    1638:	2e 81       	ldd	r18, Y+6	; 0x06
    163a:	3f 81       	ldd	r19, Y+7	; 0x07
    163c:	22 30       	cpi	r18, 0x02	; 2
    163e:	31 05       	cpc	r19, r1
    1640:	2c f4       	brge	.+10     	; 0x164c <setPinDirection+0x6c>
    1642:	8e 81       	ldd	r24, Y+6	; 0x06
    1644:	9f 81       	ldd	r25, Y+7	; 0x07
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	71 f0       	breq	.+28     	; 0x1666 <setPinDirection+0x86>
    164a:	bc c0       	rjmp	.+376    	; 0x17c4 <setPinDirection+0x1e4>
    164c:	2e 81       	ldd	r18, Y+6	; 0x06
    164e:	3f 81       	ldd	r19, Y+7	; 0x07
    1650:	22 30       	cpi	r18, 0x02	; 2
    1652:	31 05       	cpc	r19, r1
    1654:	09 f4       	brne	.+2      	; 0x1658 <setPinDirection+0x78>
    1656:	5f c0       	rjmp	.+190    	; 0x1716 <setPinDirection+0x136>
    1658:	8e 81       	ldd	r24, Y+6	; 0x06
    165a:	9f 81       	ldd	r25, Y+7	; 0x07
    165c:	83 30       	cpi	r24, 0x03	; 3
    165e:	91 05       	cpc	r25, r1
    1660:	09 f4       	brne	.+2      	; 0x1664 <setPinDirection+0x84>
    1662:	85 c0       	rjmp	.+266    	; 0x176e <setPinDirection+0x18e>
    1664:	af c0       	rjmp	.+350    	; 0x17c4 <setPinDirection+0x1e4>
		{
		case PORT_PORTA:
			if (direction == PIN_OUTPUT_HIGH)
    1666:	8d 81       	ldd	r24, Y+5	; 0x05
    1668:	82 30       	cpi	r24, 0x02	; 2
    166a:	a1 f4       	brne	.+40     	; 0x1694 <setPinDirection+0xb4>
			{
				SET_BIT(DDRA, loc_pn);
    166c:	aa e3       	ldi	r26, 0x3A	; 58
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	ea e3       	ldi	r30, 0x3A	; 58
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	48 2f       	mov	r20, r24
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 2e       	mov	r0, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <setPinDirection+0xaa>
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	0a 94       	dec	r0
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <setPinDirection+0xa6>
    168e:	84 2b       	or	r24, r20
    1690:	8c 93       	st	X, r24
    1692:	98 c0       	rjmp	.+304    	; 0x17c4 <setPinDirection+0x1e4>
			}
			else
			{
				CLEAR_BIT(DDRA, loc_pn);
    1694:	aa e3       	ldi	r26, 0x3A	; 58
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	ea e3       	ldi	r30, 0x3A	; 58
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	48 2f       	mov	r20, r24
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	02 2e       	mov	r0, r18
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <setPinDirection+0xd2>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	0a 94       	dec	r0
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <setPinDirection+0xce>
    16b6:	80 95       	com	r24
    16b8:	84 23       	and	r24, r20
    16ba:	8c 93       	st	X, r24
    16bc:	83 c0       	rjmp	.+262    	; 0x17c4 <setPinDirection+0x1e4>
			}
			break;

		case PORT_PORTB:
			if (direction == PIN_OUTPUT_HIGH)
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	82 30       	cpi	r24, 0x02	; 2
    16c2:	a1 f4       	brne	.+40     	; 0x16ec <setPinDirection+0x10c>
			{
				SET_BIT(DDRB, loc_pn);
    16c4:	a7 e3       	ldi	r26, 0x37	; 55
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e7 e3       	ldi	r30, 0x37	; 55
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	48 2f       	mov	r20, r24
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 2e       	mov	r0, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <setPinDirection+0x102>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <setPinDirection+0xfe>
    16e6:	84 2b       	or	r24, r20
    16e8:	8c 93       	st	X, r24
    16ea:	6c c0       	rjmp	.+216    	; 0x17c4 <setPinDirection+0x1e4>
			}
			else
			{
				CLEAR_BIT(DDRB, loc_pn);
    16ec:	a7 e3       	ldi	r26, 0x37	; 55
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e7 e3       	ldi	r30, 0x37	; 55
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	48 2f       	mov	r20, r24
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	02 2e       	mov	r0, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <setPinDirection+0x12a>
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	0a 94       	dec	r0
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <setPinDirection+0x126>
    170e:	80 95       	com	r24
    1710:	84 23       	and	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	57 c0       	rjmp	.+174    	; 0x17c4 <setPinDirection+0x1e4>
			}
			break;
		case PORT_PORTC:
			if (direction == PIN_OUTPUT_HIGH)
    1716:	8d 81       	ldd	r24, Y+5	; 0x05
    1718:	82 30       	cpi	r24, 0x02	; 2
    171a:	a1 f4       	brne	.+40     	; 0x1744 <setPinDirection+0x164>
			{
				SET_BIT(DDRC, loc_pn);
    171c:	a4 e3       	ldi	r26, 0x34	; 52
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e4 e3       	ldi	r30, 0x34	; 52
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	48 2f       	mov	r20, r24
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	02 2e       	mov	r0, r18
    1734:	02 c0       	rjmp	.+4      	; 0x173a <setPinDirection+0x15a>
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	0a 94       	dec	r0
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <setPinDirection+0x156>
    173e:	84 2b       	or	r24, r20
    1740:	8c 93       	st	X, r24
    1742:	40 c0       	rjmp	.+128    	; 0x17c4 <setPinDirection+0x1e4>
			}
			else
			{
				CLEAR_BIT(DDRC, loc_pn);
    1744:	a4 e3       	ldi	r26, 0x34	; 52
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e4 e3       	ldi	r30, 0x34	; 52
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	48 2f       	mov	r20, r24
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 2e       	mov	r0, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <setPinDirection+0x182>
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	0a 94       	dec	r0
    1764:	e2 f7       	brpl	.-8      	; 0x175e <setPinDirection+0x17e>
    1766:	80 95       	com	r24
    1768:	84 23       	and	r24, r20
    176a:	8c 93       	st	X, r24
    176c:	2b c0       	rjmp	.+86     	; 0x17c4 <setPinDirection+0x1e4>
			}
			break;
		case PORT_PORTD:
			if (direction == PIN_OUTPUT_HIGH)
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	82 30       	cpi	r24, 0x02	; 2
    1772:	a1 f4       	brne	.+40     	; 0x179c <setPinDirection+0x1bc>
			{
				SET_BIT(DDRD, loc_pn);
    1774:	a1 e3       	ldi	r26, 0x31	; 49
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e1 e3       	ldi	r30, 0x31	; 49
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	48 2f       	mov	r20, r24
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 2e       	mov	r0, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <setPinDirection+0x1b2>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	0a 94       	dec	r0
    1794:	e2 f7       	brpl	.-8      	; 0x178e <setPinDirection+0x1ae>
    1796:	84 2b       	or	r24, r20
    1798:	8c 93       	st	X, r24
    179a:	14 c0       	rjmp	.+40     	; 0x17c4 <setPinDirection+0x1e4>
			}
			else
			{
				CLEAR_BIT(DDRD, loc_pn);
    179c:	a1 e3       	ldi	r26, 0x31	; 49
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e1 e3       	ldi	r30, 0x31	; 49
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	48 2f       	mov	r20, r24
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 2e       	mov	r0, r18
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <setPinDirection+0x1da>
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	0a 94       	dec	r0
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <setPinDirection+0x1d6>
    17be:	80 95       	com	r24
    17c0:	84 23       	and	r24, r20
    17c2:	8c 93       	st	X, r24
			}
			break;
		}
	}

		return return_errorStatus;
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03


}
    17c6:	27 96       	adiw	r28, 0x07	; 7
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <setMode>:
/*
*choose between four modes
*change the state of pin in specific time
* */
port_errorStatus setMode(u8 pin_id, u8 mode)
{
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	2f 97       	sbiw	r28, 0x0f	; 15
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	8c 83       	std	Y+4, r24	; 0x04
    17ee:	6d 83       	std	Y+5, r22	; 0x05
	port_errorStatus return_errorStatus = port_OK;
    17f0:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_port;

	u8 loc_pin;

	if(pin_id > NUM_OF_PINS)
    17f2:	8c 81       	ldd	r24, Y+4	; 0x04
    17f4:	80 32       	cpi	r24, 0x20	; 32
    17f6:	18 f0       	brcs	.+6      	; 0x17fe <setMode+0x26>
	{
		return_errorStatus = pinError;
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	8b 83       	std	Y+3, r24	; 0x03
    17fc:	2b c3       	rjmp	.+1622   	; 0x1e54 <setMode+0x67c>
	}
	else if(mode > NUM_OF_MODES)
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	84 30       	cpi	r24, 0x04	; 4
    1802:	18 f0       	brcs	.+6      	; 0x180a <setMode+0x32>
	{
		return_errorStatus = pinDirectionError;
    1804:	82 e0       	ldi	r24, 0x02	; 2
    1806:	8b 83       	std	Y+3, r24	; 0x03
    1808:	25 c3       	rjmp	.+1610   	; 0x1e54 <setMode+0x67c>
	}
	else
	{
		loc_pin = pin_id % NUM_OF_PINS_PER_PORT;
    180a:	8c 81       	ldd	r24, Y+4	; 0x04
    180c:	87 70       	andi	r24, 0x07	; 7
    180e:	89 83       	std	Y+1, r24	; 0x01
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
    1810:	8c 81       	ldd	r24, Y+4	; 0x04
    1812:	86 95       	lsr	r24
    1814:	86 95       	lsr	r24
    1816:	86 95       	lsr	r24
    1818:	8a 83       	std	Y+2, r24	; 0x02

		switch(loc_port)
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	3f 87       	std	Y+15, r19	; 0x0f
    1822:	2e 87       	std	Y+14, r18	; 0x0e
    1824:	8e 85       	ldd	r24, Y+14	; 0x0e
    1826:	9f 85       	ldd	r25, Y+15	; 0x0f
    1828:	81 30       	cpi	r24, 0x01	; 1
    182a:	91 05       	cpc	r25, r1
    182c:	09 f4       	brne	.+2      	; 0x1830 <setMode+0x58>
    182e:	d6 c0       	rjmp	.+428    	; 0x19dc <setMode+0x204>
    1830:	2e 85       	ldd	r18, Y+14	; 0x0e
    1832:	3f 85       	ldd	r19, Y+15	; 0x0f
    1834:	22 30       	cpi	r18, 0x02	; 2
    1836:	31 05       	cpc	r19, r1
    1838:	2c f4       	brge	.+10     	; 0x1844 <setMode+0x6c>
    183a:	8e 85       	ldd	r24, Y+14	; 0x0e
    183c:	9f 85       	ldd	r25, Y+15	; 0x0f
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	71 f0       	breq	.+28     	; 0x185e <setMode+0x86>
    1842:	08 c3       	rjmp	.+1552   	; 0x1e54 <setMode+0x67c>
    1844:	2e 85       	ldd	r18, Y+14	; 0x0e
    1846:	3f 85       	ldd	r19, Y+15	; 0x0f
    1848:	22 30       	cpi	r18, 0x02	; 2
    184a:	31 05       	cpc	r19, r1
    184c:	09 f4       	brne	.+2      	; 0x1850 <setMode+0x78>
    184e:	85 c1       	rjmp	.+778    	; 0x1b5a <setMode+0x382>
    1850:	8e 85       	ldd	r24, Y+14	; 0x0e
    1852:	9f 85       	ldd	r25, Y+15	; 0x0f
    1854:	83 30       	cpi	r24, 0x03	; 3
    1856:	91 05       	cpc	r25, r1
    1858:	09 f4       	brne	.+2      	; 0x185c <setMode+0x84>
    185a:	3e c2       	rjmp	.+1148   	; 0x1cd8 <setMode+0x500>
    185c:	fb c2       	rjmp	.+1526   	; 0x1e54 <setMode+0x67c>
		{

		case PORT_PORTA:

			switch (mode)
    185e:	8d 81       	ldd	r24, Y+5	; 0x05
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	3d 87       	std	Y+13, r19	; 0x0d
    1866:	2c 87       	std	Y+12, r18	; 0x0c
    1868:	8c 85       	ldd	r24, Y+12	; 0x0c
    186a:	9d 85       	ldd	r25, Y+13	; 0x0d
    186c:	82 30       	cpi	r24, 0x02	; 2
    186e:	91 05       	cpc	r25, r1
    1870:	09 f4       	brne	.+2      	; 0x1874 <setMode+0x9c>
    1872:	3f c0       	rjmp	.+126    	; 0x18f2 <setMode+0x11a>
    1874:	2c 85       	ldd	r18, Y+12	; 0x0c
    1876:	3d 85       	ldd	r19, Y+13	; 0x0d
    1878:	23 30       	cpi	r18, 0x03	; 3
    187a:	31 05       	cpc	r19, r1
    187c:	34 f4       	brge	.+12     	; 0x188a <setMode+0xb2>
    187e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1880:	9d 85       	ldd	r25, Y+13	; 0x0d
    1882:	81 30       	cpi	r24, 0x01	; 1
    1884:	91 05       	cpc	r25, r1
    1886:	71 f0       	breq	.+28     	; 0x18a4 <setMode+0xcc>
    1888:	e5 c2       	rjmp	.+1482   	; 0x1e54 <setMode+0x67c>
    188a:	2c 85       	ldd	r18, Y+12	; 0x0c
    188c:	3d 85       	ldd	r19, Y+13	; 0x0d
    188e:	23 30       	cpi	r18, 0x03	; 3
    1890:	31 05       	cpc	r19, r1
    1892:	09 f4       	brne	.+2      	; 0x1896 <setMode+0xbe>
    1894:	7c c0       	rjmp	.+248    	; 0x198e <setMode+0x1b6>
    1896:	8c 85       	ldd	r24, Y+12	; 0x0c
    1898:	9d 85       	ldd	r25, Y+13	; 0x0d
    189a:	84 30       	cpi	r24, 0x04	; 4
    189c:	91 05       	cpc	r25, r1
    189e:	09 f4       	brne	.+2      	; 0x18a2 <setMode+0xca>
    18a0:	4e c0       	rjmp	.+156    	; 0x193e <setMode+0x166>
    18a2:	d8 c2       	rjmp	.+1456   	; 0x1e54 <setMode+0x67c>
			{

			case PIN_OUTPUT_LOW:

				SET_BIT(DDRA, loc_pin);
    18a4:	aa e3       	ldi	r26, 0x3A	; 58
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	ea e3       	ldi	r30, 0x3A	; 58
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	48 2f       	mov	r20, r24
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <setMode+0xe8>
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	2a 95       	dec	r18
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <setMode+0xe4>
    18c4:	84 2b       	or	r24, r20
    18c6:	8c 93       	st	X, r24

				CLEAR_BIT(PORTA, loc_pin);
    18c8:	ab e3       	ldi	r26, 0x3B	; 59
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	eb e3       	ldi	r30, 0x3B	; 59
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 2e       	mov	r0, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <setMode+0x10e>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <setMode+0x10a>
    18ea:	80 95       	com	r24
    18ec:	84 23       	and	r24, r20
    18ee:	8c 93       	st	X, r24
    18f0:	b1 c2       	rjmp	.+1378   	; 0x1e54 <setMode+0x67c>

				break;

			case PIN_OUTPUT_HIGH:

				SET_BIT(DDRA, loc_pin);
    18f2:	aa e3       	ldi	r26, 0x3A	; 58
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	ea e3       	ldi	r30, 0x3A	; 58
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	48 2f       	mov	r20, r24
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 c0       	rjmp	.+4      	; 0x190e <setMode+0x136>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	2a 95       	dec	r18
    1910:	e2 f7       	brpl	.-8      	; 0x190a <setMode+0x132>
    1912:	84 2b       	or	r24, r20
    1914:	8c 93       	st	X, r24

				SET_BIT(PORTA, loc_pin);
    1916:	ab e3       	ldi	r26, 0x3B	; 59
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	eb e3       	ldi	r30, 0x3B	; 59
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	48 2f       	mov	r20, r24
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	02 2e       	mov	r0, r18
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <setMode+0x15c>
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	0a 94       	dec	r0
    1936:	e2 f7       	brpl	.-8      	; 0x1930 <setMode+0x158>
    1938:	84 2b       	or	r24, r20
    193a:	8c 93       	st	X, r24
    193c:	8b c2       	rjmp	.+1302   	; 0x1e54 <setMode+0x67c>

				break;

			case PIN_INPUT_FLOATING:

				CLEAR_BIT(DDRA, loc_pin);
    193e:	aa e3       	ldi	r26, 0x3A	; 58
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	ea e3       	ldi	r30, 0x3A	; 58
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	48 2f       	mov	r20, r24
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	02 c0       	rjmp	.+4      	; 0x195a <setMode+0x182>
    1956:	88 0f       	add	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	2a 95       	dec	r18
    195c:	e2 f7       	brpl	.-8      	; 0x1956 <setMode+0x17e>
    195e:	80 95       	com	r24
    1960:	84 23       	and	r24, r20
    1962:	8c 93       	st	X, r24

				CLEAR_BIT(PORTA, loc_pin);
    1964:	ab e3       	ldi	r26, 0x3B	; 59
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	eb e3       	ldi	r30, 0x3B	; 59
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	48 2f       	mov	r20, r24
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	02 2e       	mov	r0, r18
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <setMode+0x1aa>
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	0a 94       	dec	r0
    1984:	e2 f7       	brpl	.-8      	; 0x197e <setMode+0x1a6>
    1986:	80 95       	com	r24
    1988:	84 23       	and	r24, r20
    198a:	8c 93       	st	X, r24
    198c:	63 c2       	rjmp	.+1222   	; 0x1e54 <setMode+0x67c>

				break;

			case PIN_INPUT_PULL_UP:

				CLEAR_BIT(DDRA, loc_pin);
    198e:	aa e3       	ldi	r26, 0x3A	; 58
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	ea e3       	ldi	r30, 0x3A	; 58
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	48 2f       	mov	r20, r24
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <setMode+0x1d2>
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	2a 95       	dec	r18
    19ac:	e2 f7       	brpl	.-8      	; 0x19a6 <setMode+0x1ce>
    19ae:	80 95       	com	r24
    19b0:	84 23       	and	r24, r20
    19b2:	8c 93       	st	X, r24

				SET_BIT(PORTA, loc_pin);
    19b4:	ab e3       	ldi	r26, 0x3B	; 59
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	eb e3       	ldi	r30, 0x3B	; 59
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	48 2f       	mov	r20, r24
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	02 2e       	mov	r0, r18
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <setMode+0x1fa>
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	0a 94       	dec	r0
    19d4:	e2 f7       	brpl	.-8      	; 0x19ce <setMode+0x1f6>
    19d6:	84 2b       	or	r24, r20
    19d8:	8c 93       	st	X, r24
    19da:	3c c2       	rjmp	.+1144   	; 0x1e54 <setMode+0x67c>
			}
			break;

		case PORT_PORTB:

			switch (mode)
    19dc:	8d 81       	ldd	r24, Y+5	; 0x05
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	3b 87       	std	Y+11, r19	; 0x0b
    19e4:	2a 87       	std	Y+10, r18	; 0x0a
    19e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    19e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    19ea:	82 30       	cpi	r24, 0x02	; 2
    19ec:	91 05       	cpc	r25, r1
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <setMode+0x21a>
    19f0:	3f c0       	rjmp	.+126    	; 0x1a70 <setMode+0x298>
    19f2:	2a 85       	ldd	r18, Y+10	; 0x0a
    19f4:	3b 85       	ldd	r19, Y+11	; 0x0b
    19f6:	23 30       	cpi	r18, 0x03	; 3
    19f8:	31 05       	cpc	r19, r1
    19fa:	34 f4       	brge	.+12     	; 0x1a08 <setMode+0x230>
    19fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    19fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a00:	81 30       	cpi	r24, 0x01	; 1
    1a02:	91 05       	cpc	r25, r1
    1a04:	71 f0       	breq	.+28     	; 0x1a22 <setMode+0x24a>
    1a06:	26 c2       	rjmp	.+1100   	; 0x1e54 <setMode+0x67c>
    1a08:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a0a:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a0c:	23 30       	cpi	r18, 0x03	; 3
    1a0e:	31 05       	cpc	r19, r1
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <setMode+0x23c>
    1a12:	7c c0       	rjmp	.+248    	; 0x1b0c <setMode+0x334>
    1a14:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a16:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a18:	84 30       	cpi	r24, 0x04	; 4
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <setMode+0x248>
    1a1e:	4e c0       	rjmp	.+156    	; 0x1abc <setMode+0x2e4>
    1a20:	19 c2       	rjmp	.+1074   	; 0x1e54 <setMode+0x67c>
			{

			case PIN_OUTPUT_LOW:

				SET_BIT(DDRB, loc_pin);
    1a22:	a7 e3       	ldi	r26, 0x37	; 55
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e7 e3       	ldi	r30, 0x37	; 55
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	48 2f       	mov	r20, r24
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <setMode+0x266>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	2a 95       	dec	r18
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <setMode+0x262>
    1a42:	84 2b       	or	r24, r20
    1a44:	8c 93       	st	X, r24

				CLEAR_BIT(PORTB, loc_pin);
    1a46:	a8 e3       	ldi	r26, 0x38	; 56
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e8 e3       	ldi	r30, 0x38	; 56
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	48 2f       	mov	r20, r24
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	02 2e       	mov	r0, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <setMode+0x28c>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	0a 94       	dec	r0
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <setMode+0x288>
    1a68:	80 95       	com	r24
    1a6a:	84 23       	and	r24, r20
    1a6c:	8c 93       	st	X, r24
    1a6e:	f2 c1       	rjmp	.+996    	; 0x1e54 <setMode+0x67c>

				break;

			case PIN_OUTPUT_HIGH:

				SET_BIT(DDRB, loc_pin);
    1a70:	a7 e3       	ldi	r26, 0x37	; 55
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e7 e3       	ldi	r30, 0x37	; 55
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	48 2f       	mov	r20, r24
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <setMode+0x2b4>
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	2a 95       	dec	r18
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <setMode+0x2b0>
    1a90:	84 2b       	or	r24, r20
    1a92:	8c 93       	st	X, r24

				SET_BIT(PORTB, loc_pin);
    1a94:	a8 e3       	ldi	r26, 0x38	; 56
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e8 e3       	ldi	r30, 0x38	; 56
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	48 2f       	mov	r20, r24
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	02 2e       	mov	r0, r18
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <setMode+0x2da>
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	0a 94       	dec	r0
    1ab4:	e2 f7       	brpl	.-8      	; 0x1aae <setMode+0x2d6>
    1ab6:	84 2b       	or	r24, r20
    1ab8:	8c 93       	st	X, r24
    1aba:	cc c1       	rjmp	.+920    	; 0x1e54 <setMode+0x67c>

				break;

			case PIN_INPUT_FLOATING:

				CLEAR_BIT(DDRB, loc_pin);
    1abc:	a7 e3       	ldi	r26, 0x37	; 55
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e7 e3       	ldi	r30, 0x37	; 55
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	48 2f       	mov	r20, r24
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <setMode+0x300>
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	2a 95       	dec	r18
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <setMode+0x2fc>
    1adc:	80 95       	com	r24
    1ade:	84 23       	and	r24, r20
    1ae0:	8c 93       	st	X, r24

				CLEAR_BIT(PORTB, loc_pin);
    1ae2:	a8 e3       	ldi	r26, 0x38	; 56
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e8 e3       	ldi	r30, 0x38	; 56
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	48 2f       	mov	r20, r24
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	02 2e       	mov	r0, r18
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <setMode+0x328>
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	0a 94       	dec	r0
    1b02:	e2 f7       	brpl	.-8      	; 0x1afc <setMode+0x324>
    1b04:	80 95       	com	r24
    1b06:	84 23       	and	r24, r20
    1b08:	8c 93       	st	X, r24
    1b0a:	a4 c1       	rjmp	.+840    	; 0x1e54 <setMode+0x67c>

				break;

			case PIN_INPUT_PULL_UP:

				CLEAR_BIT(DDRB, loc_pin);
    1b0c:	a7 e3       	ldi	r26, 0x37	; 55
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e7 e3       	ldi	r30, 0x37	; 55
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	48 2f       	mov	r20, r24
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <setMode+0x350>
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	2a 95       	dec	r18
    1b2a:	e2 f7       	brpl	.-8      	; 0x1b24 <setMode+0x34c>
    1b2c:	80 95       	com	r24
    1b2e:	84 23       	and	r24, r20
    1b30:	8c 93       	st	X, r24

				SET_BIT(PORTB, loc_pin);
    1b32:	a8 e3       	ldi	r26, 0x38	; 56
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e8 e3       	ldi	r30, 0x38	; 56
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	48 2f       	mov	r20, r24
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	02 2e       	mov	r0, r18
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <setMode+0x378>
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	0a 94       	dec	r0
    1b52:	e2 f7       	brpl	.-8      	; 0x1b4c <setMode+0x374>
    1b54:	84 2b       	or	r24, r20
    1b56:	8c 93       	st	X, r24
    1b58:	7d c1       	rjmp	.+762    	; 0x1e54 <setMode+0x67c>
			break;


		case PORT_PORTC:

			switch (mode)
    1b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	39 87       	std	Y+9, r19	; 0x09
    1b62:	28 87       	std	Y+8, r18	; 0x08
    1b64:	88 85       	ldd	r24, Y+8	; 0x08
    1b66:	99 85       	ldd	r25, Y+9	; 0x09
    1b68:	82 30       	cpi	r24, 0x02	; 2
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	09 f4       	brne	.+2      	; 0x1b70 <setMode+0x398>
    1b6e:	3f c0       	rjmp	.+126    	; 0x1bee <setMode+0x416>
    1b70:	28 85       	ldd	r18, Y+8	; 0x08
    1b72:	39 85       	ldd	r19, Y+9	; 0x09
    1b74:	23 30       	cpi	r18, 0x03	; 3
    1b76:	31 05       	cpc	r19, r1
    1b78:	34 f4       	brge	.+12     	; 0x1b86 <setMode+0x3ae>
    1b7a:	88 85       	ldd	r24, Y+8	; 0x08
    1b7c:	99 85       	ldd	r25, Y+9	; 0x09
    1b7e:	81 30       	cpi	r24, 0x01	; 1
    1b80:	91 05       	cpc	r25, r1
    1b82:	71 f0       	breq	.+28     	; 0x1ba0 <setMode+0x3c8>
    1b84:	67 c1       	rjmp	.+718    	; 0x1e54 <setMode+0x67c>
    1b86:	28 85       	ldd	r18, Y+8	; 0x08
    1b88:	39 85       	ldd	r19, Y+9	; 0x09
    1b8a:	23 30       	cpi	r18, 0x03	; 3
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <setMode+0x3ba>
    1b90:	7c c0       	rjmp	.+248    	; 0x1c8a <setMode+0x4b2>
    1b92:	88 85       	ldd	r24, Y+8	; 0x08
    1b94:	99 85       	ldd	r25, Y+9	; 0x09
    1b96:	84 30       	cpi	r24, 0x04	; 4
    1b98:	91 05       	cpc	r25, r1
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <setMode+0x3c6>
    1b9c:	4e c0       	rjmp	.+156    	; 0x1c3a <setMode+0x462>
    1b9e:	5a c1       	rjmp	.+692    	; 0x1e54 <setMode+0x67c>
			{

			case PIN_OUTPUT_LOW:

				SET_BIT(DDRC, loc_pin);
    1ba0:	a4 e3       	ldi	r26, 0x34	; 52
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e4 e3       	ldi	r30, 0x34	; 52
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	48 2f       	mov	r20, r24
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <setMode+0x3e4>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	2a 95       	dec	r18
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <setMode+0x3e0>
    1bc0:	84 2b       	or	r24, r20
    1bc2:	8c 93       	st	X, r24

				CLEAR_BIT(PORTC, loc_pin);
    1bc4:	a5 e3       	ldi	r26, 0x35	; 53
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e5 e3       	ldi	r30, 0x35	; 53
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	48 2f       	mov	r20, r24
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	02 2e       	mov	r0, r18
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <setMode+0x40a>
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	0a 94       	dec	r0
    1be4:	e2 f7       	brpl	.-8      	; 0x1bde <setMode+0x406>
    1be6:	80 95       	com	r24
    1be8:	84 23       	and	r24, r20
    1bea:	8c 93       	st	X, r24
    1bec:	33 c1       	rjmp	.+614    	; 0x1e54 <setMode+0x67c>

				break;

			case PIN_OUTPUT_HIGH:

				SET_BIT(DDRC, loc_pin);
    1bee:	a4 e3       	ldi	r26, 0x34	; 52
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e4 e3       	ldi	r30, 0x34	; 52
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	48 2f       	mov	r20, r24
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <setMode+0x432>
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	2a 95       	dec	r18
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <setMode+0x42e>
    1c0e:	84 2b       	or	r24, r20
    1c10:	8c 93       	st	X, r24

				SET_BIT(PORTC, loc_pin);
    1c12:	a5 e3       	ldi	r26, 0x35	; 53
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e5 e3       	ldi	r30, 0x35	; 53
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	48 2f       	mov	r20, r24
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 2e       	mov	r0, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <setMode+0x458>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	0a 94       	dec	r0
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <setMode+0x454>
    1c34:	84 2b       	or	r24, r20
    1c36:	8c 93       	st	X, r24
    1c38:	0d c1       	rjmp	.+538    	; 0x1e54 <setMode+0x67c>

				break;

			case PIN_INPUT_FLOATING:

				CLEAR_BIT(DDRC, loc_pin);
    1c3a:	a4 e3       	ldi	r26, 0x34	; 52
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e4 e3       	ldi	r30, 0x34	; 52
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	48 2f       	mov	r20, r24
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <setMode+0x47e>
    1c52:	88 0f       	add	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	2a 95       	dec	r18
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <setMode+0x47a>
    1c5a:	80 95       	com	r24
    1c5c:	84 23       	and	r24, r20
    1c5e:	8c 93       	st	X, r24

				CLEAR_BIT(PORTC, loc_pin);
    1c60:	a5 e3       	ldi	r26, 0x35	; 53
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e5 e3       	ldi	r30, 0x35	; 53
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	48 2f       	mov	r20, r24
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	02 2e       	mov	r0, r18
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <setMode+0x4a6>
    1c7a:	88 0f       	add	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	0a 94       	dec	r0
    1c80:	e2 f7       	brpl	.-8      	; 0x1c7a <setMode+0x4a2>
    1c82:	80 95       	com	r24
    1c84:	84 23       	and	r24, r20
    1c86:	8c 93       	st	X, r24
    1c88:	e5 c0       	rjmp	.+458    	; 0x1e54 <setMode+0x67c>

				break;

			case PIN_INPUT_PULL_UP:

				CLEAR_BIT(DDRC, loc_pin);
    1c8a:	a4 e3       	ldi	r26, 0x34	; 52
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e4 e3       	ldi	r30, 0x34	; 52
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	48 2f       	mov	r20, r24
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <setMode+0x4ce>
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	2a 95       	dec	r18
    1ca8:	e2 f7       	brpl	.-8      	; 0x1ca2 <setMode+0x4ca>
    1caa:	80 95       	com	r24
    1cac:	84 23       	and	r24, r20
    1cae:	8c 93       	st	X, r24

				SET_BIT(PORTC, loc_pin);
    1cb0:	a5 e3       	ldi	r26, 0x35	; 53
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e5 e3       	ldi	r30, 0x35	; 53
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	48 2f       	mov	r20, r24
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	02 2e       	mov	r0, r18
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <setMode+0x4f6>
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	0a 94       	dec	r0
    1cd0:	e2 f7       	brpl	.-8      	; 0x1cca <setMode+0x4f2>
    1cd2:	84 2b       	or	r24, r20
    1cd4:	8c 93       	st	X, r24
    1cd6:	be c0       	rjmp	.+380    	; 0x1e54 <setMode+0x67c>



		case PORT_PORTD:

			switch (mode)
    1cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	3f 83       	std	Y+7, r19	; 0x07
    1ce0:	2e 83       	std	Y+6, r18	; 0x06
    1ce2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ce6:	82 30       	cpi	r24, 0x02	; 2
    1ce8:	91 05       	cpc	r25, r1
    1cea:	09 f4       	brne	.+2      	; 0x1cee <setMode+0x516>
    1cec:	3f c0       	rjmp	.+126    	; 0x1d6c <setMode+0x594>
    1cee:	2e 81       	ldd	r18, Y+6	; 0x06
    1cf0:	3f 81       	ldd	r19, Y+7	; 0x07
    1cf2:	23 30       	cpi	r18, 0x03	; 3
    1cf4:	31 05       	cpc	r19, r1
    1cf6:	34 f4       	brge	.+12     	; 0x1d04 <setMode+0x52c>
    1cf8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfa:	9f 81       	ldd	r25, Y+7	; 0x07
    1cfc:	81 30       	cpi	r24, 0x01	; 1
    1cfe:	91 05       	cpc	r25, r1
    1d00:	71 f0       	breq	.+28     	; 0x1d1e <setMode+0x546>
    1d02:	a8 c0       	rjmp	.+336    	; 0x1e54 <setMode+0x67c>
    1d04:	2e 81       	ldd	r18, Y+6	; 0x06
    1d06:	3f 81       	ldd	r19, Y+7	; 0x07
    1d08:	23 30       	cpi	r18, 0x03	; 3
    1d0a:	31 05       	cpc	r19, r1
    1d0c:	09 f4       	brne	.+2      	; 0x1d10 <setMode+0x538>
    1d0e:	7c c0       	rjmp	.+248    	; 0x1e08 <setMode+0x630>
    1d10:	8e 81       	ldd	r24, Y+6	; 0x06
    1d12:	9f 81       	ldd	r25, Y+7	; 0x07
    1d14:	84 30       	cpi	r24, 0x04	; 4
    1d16:	91 05       	cpc	r25, r1
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <setMode+0x544>
    1d1a:	4e c0       	rjmp	.+156    	; 0x1db8 <setMode+0x5e0>
    1d1c:	9b c0       	rjmp	.+310    	; 0x1e54 <setMode+0x67c>
			{

			case PIN_OUTPUT_LOW:

				SET_BIT(DDRD, loc_pin);
    1d1e:	a1 e3       	ldi	r26, 0x31	; 49
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e1 e3       	ldi	r30, 0x31	; 49
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	48 2f       	mov	r20, r24
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <setMode+0x562>
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	2a 95       	dec	r18
    1d3c:	e2 f7       	brpl	.-8      	; 0x1d36 <setMode+0x55e>
    1d3e:	84 2b       	or	r24, r20
    1d40:	8c 93       	st	X, r24

				CLEAR_BIT(PORTD, loc_pin);
    1d42:	a2 e3       	ldi	r26, 0x32	; 50
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	e2 e3       	ldi	r30, 0x32	; 50
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	48 2f       	mov	r20, r24
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	02 2e       	mov	r0, r18
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <setMode+0x588>
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	0a 94       	dec	r0
    1d62:	e2 f7       	brpl	.-8      	; 0x1d5c <setMode+0x584>
    1d64:	80 95       	com	r24
    1d66:	84 23       	and	r24, r20
    1d68:	8c 93       	st	X, r24
    1d6a:	74 c0       	rjmp	.+232    	; 0x1e54 <setMode+0x67c>

				break;

			case PIN_OUTPUT_HIGH:

				SET_BIT(DDRD, loc_pin);
    1d6c:	a1 e3       	ldi	r26, 0x31	; 49
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e1 e3       	ldi	r30, 0x31	; 49
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	48 2f       	mov	r20, r24
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <setMode+0x5b0>
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	2a 95       	dec	r18
    1d8a:	e2 f7       	brpl	.-8      	; 0x1d84 <setMode+0x5ac>
    1d8c:	84 2b       	or	r24, r20
    1d8e:	8c 93       	st	X, r24

				SET_BIT(PORTD, loc_pin);
    1d90:	a2 e3       	ldi	r26, 0x32	; 50
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e2 e3       	ldi	r30, 0x32	; 50
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	48 2f       	mov	r20, r24
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	02 2e       	mov	r0, r18
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <setMode+0x5d6>
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	0a 94       	dec	r0
    1db0:	e2 f7       	brpl	.-8      	; 0x1daa <setMode+0x5d2>
    1db2:	84 2b       	or	r24, r20
    1db4:	8c 93       	st	X, r24
    1db6:	4e c0       	rjmp	.+156    	; 0x1e54 <setMode+0x67c>

				break;

			case PIN_INPUT_FLOATING:

				CLEAR_BIT(DDRD, loc_pin);
    1db8:	a1 e3       	ldi	r26, 0x31	; 49
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e1 e3       	ldi	r30, 0x31	; 49
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	48 2f       	mov	r20, r24
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <setMode+0x5fc>
    1dd0:	88 0f       	add	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	2a 95       	dec	r18
    1dd6:	e2 f7       	brpl	.-8      	; 0x1dd0 <setMode+0x5f8>
    1dd8:	80 95       	com	r24
    1dda:	84 23       	and	r24, r20
    1ddc:	8c 93       	st	X, r24

				CLEAR_BIT(PORTD, loc_pin);
    1dde:	a2 e3       	ldi	r26, 0x32	; 50
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e2 e3       	ldi	r30, 0x32	; 50
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	48 2f       	mov	r20, r24
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	02 2e       	mov	r0, r18
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <setMode+0x624>
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	0a 94       	dec	r0
    1dfe:	e2 f7       	brpl	.-8      	; 0x1df8 <setMode+0x620>
    1e00:	80 95       	com	r24
    1e02:	84 23       	and	r24, r20
    1e04:	8c 93       	st	X, r24
    1e06:	26 c0       	rjmp	.+76     	; 0x1e54 <setMode+0x67c>

				break;

			case PIN_INPUT_PULL_UP:

				CLEAR_BIT(DDRD, loc_pin);
    1e08:	a1 e3       	ldi	r26, 0x31	; 49
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e1 e3       	ldi	r30, 0x31	; 49
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	48 2f       	mov	r20, r24
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <setMode+0x64c>
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	2a 95       	dec	r18
    1e26:	e2 f7       	brpl	.-8      	; 0x1e20 <setMode+0x648>
    1e28:	80 95       	com	r24
    1e2a:	84 23       	and	r24, r20
    1e2c:	8c 93       	st	X, r24

				SET_BIT(PORTD, loc_pin);
    1e2e:	a2 e3       	ldi	r26, 0x32	; 50
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e2 e3       	ldi	r30, 0x32	; 50
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	48 2f       	mov	r20, r24
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	02 2e       	mov	r0, r18
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <setMode+0x674>
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	0a 94       	dec	r0
    1e4e:	e2 f7       	brpl	.-8      	; 0x1e48 <setMode+0x670>
    1e50:	84 2b       	or	r24, r20
    1e52:	8c 93       	st	X, r24


		}
	}

	return return_errorStatus;
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e56:	2f 96       	adiw	r28, 0x0f	; 15
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <LCD_init>:
#include"lcd_cfg.h"
#include"lcd_prv.h"


void LCD_init(void)
{
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	2e 97       	sbiw	r28, 0x0e	; 14
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	a0 ef       	ldi	r26, 0xF0	; 240
    1e82:	b1 e4       	ldi	r27, 0x41	; 65
    1e84:	8b 87       	std	Y+11, r24	; 0x0b
    1e86:	9c 87       	std	Y+12, r25	; 0x0c
    1e88:	ad 87       	std	Y+13, r26	; 0x0d
    1e8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	4a e7       	ldi	r20, 0x7A	; 122
    1e9a:	53 e4       	ldi	r21, 0x43	; 67
    1e9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	8f 83       	std	Y+7, r24	; 0x07
    1ea6:	98 87       	std	Y+8, r25	; 0x08
    1ea8:	a9 87       	std	Y+9, r26	; 0x09
    1eaa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eac:	6f 81       	ldd	r22, Y+7	; 0x07
    1eae:	78 85       	ldd	r23, Y+8	; 0x08
    1eb0:	89 85       	ldd	r24, Y+9	; 0x09
    1eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 e8       	ldi	r20, 0x80	; 128
    1eba:	5f e3       	ldi	r21, 0x3F	; 63
    1ebc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ec0:	88 23       	and	r24, r24
    1ec2:	2c f4       	brge	.+10     	; 0x1ece <LCD_init+0x66>
		__ticks = 1;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	9e 83       	std	Y+6, r25	; 0x06
    1eca:	8d 83       	std	Y+5, r24	; 0x05
    1ecc:	3f c0       	rjmp	.+126    	; 0x1f4c <LCD_init+0xe4>
	else if (__tmp > 65535)
    1ece:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed0:	78 85       	ldd	r23, Y+8	; 0x08
    1ed2:	89 85       	ldd	r24, Y+9	; 0x09
    1ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	3f ef       	ldi	r19, 0xFF	; 255
    1eda:	4f e7       	ldi	r20, 0x7F	; 127
    1edc:	57 e4       	ldi	r21, 0x47	; 71
    1ede:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ee2:	18 16       	cp	r1, r24
    1ee4:	4c f5       	brge	.+82     	; 0x1f38 <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e2       	ldi	r20, 0x20	; 32
    1ef4:	51 e4       	ldi	r21, 0x41	; 65
    1ef6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	bc 01       	movw	r22, r24
    1f00:	cd 01       	movw	r24, r26
    1f02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
    1f0e:	0f c0       	rjmp	.+30     	; 0x1f2e <LCD_init+0xc6>
    1f10:	89 e1       	ldi	r24, 0x19	; 25
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	9c 83       	std	Y+4, r25	; 0x04
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <LCD_init+0xb4>
    1f20:	9c 83       	std	Y+4, r25	; 0x04
    1f22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f24:	8d 81       	ldd	r24, Y+5	; 0x05
    1f26:	9e 81       	ldd	r25, Y+6	; 0x06
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	69 f7       	brne	.-38     	; 0x1f10 <LCD_init+0xa8>
    1f36:	14 c0       	rjmp	.+40     	; 0x1f60 <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f38:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3a:	78 85       	ldd	r23, Y+8	; 0x08
    1f3c:	89 85       	ldd	r24, Y+9	; 0x09
    1f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	9e 83       	std	Y+6, r25	; 0x06
    1f4a:	8d 83       	std	Y+5, r24	; 0x05
    1f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f50:	9a 83       	std	Y+2, r25	; 0x02
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	9a 81       	ldd	r25, Y+2	; 0x02
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <LCD_init+0xf0>
    1f5c:	9a 83       	std	Y+2, r25	; 0x02
    1f5e:	89 83       	std	Y+1, r24	; 0x01
#if(DATA_BITS_MODE == EIGHT_BITS_MODE)

	_delay_ms(30);

	LCD_sendCommand(LCD8_2_LINES_COMMAND);
    1f60:	88 e3       	ldi	r24, 0x38	; 56
    1f62:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_sendCommand>
		_delay_ms(1);
		LCD_sendCommand(LCD4_2_LINES_SET_COMMAND);

#endif

		LCD_sendCommand(LCD_CURSOR_OFF);
    1f66:	8c e0       	ldi	r24, 0x0C	; 12
    1f68:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_sendCommand>
		LCD_sendCommand(LCD_SCREEN_CLEAR);
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_sendCommand>
}
    1f72:	2e 96       	adiw	r28, 0x0e	; 14
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <LCD_sendCommand>:
void LCD_sendCommand(u8 command)
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	e9 97       	sbiw	r28, 0x39	; 57
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	f8 94       	cli
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	cd bf       	out	0x3d, r28	; 61
    1f98:	89 af       	std	Y+57, r24	; 0x39
	dio_writePin(LCD_RS_PIN_ID,LOGIC_LOW);
    1f9a:	88 e0       	ldi	r24, 0x08	; 8
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	0e 94 95 06 	call	0xd2a	; 0xd2a <dio_writePin>
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	a0 e8       	ldi	r26, 0x80	; 128
    1fa8:	bf e3       	ldi	r27, 0x3F	; 63
    1faa:	8d ab       	std	Y+53, r24	; 0x35
    1fac:	9e ab       	std	Y+54, r25	; 0x36
    1fae:	af ab       	std	Y+55, r26	; 0x37
    1fb0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb2:	6d a9       	ldd	r22, Y+53	; 0x35
    1fb4:	7e a9       	ldd	r23, Y+54	; 0x36
    1fb6:	8f a9       	ldd	r24, Y+55	; 0x37
    1fb8:	98 ad       	ldd	r25, Y+56	; 0x38
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	4a e7       	ldi	r20, 0x7A	; 122
    1fc0:	53 e4       	ldi	r21, 0x43	; 67
    1fc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	89 ab       	std	Y+49, r24	; 0x31
    1fcc:	9a ab       	std	Y+50, r25	; 0x32
    1fce:	ab ab       	std	Y+51, r26	; 0x33
    1fd0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fd2:	69 a9       	ldd	r22, Y+49	; 0x31
    1fd4:	7a a9       	ldd	r23, Y+50	; 0x32
    1fd6:	8b a9       	ldd	r24, Y+51	; 0x33
    1fd8:	9c a9       	ldd	r25, Y+52	; 0x34
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	40 e8       	ldi	r20, 0x80	; 128
    1fe0:	5f e3       	ldi	r21, 0x3F	; 63
    1fe2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fe6:	88 23       	and	r24, r24
    1fe8:	2c f4       	brge	.+10     	; 0x1ff4 <LCD_sendCommand+0x70>
		__ticks = 1;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	98 ab       	std	Y+48, r25	; 0x30
    1ff0:	8f a7       	std	Y+47, r24	; 0x2f
    1ff2:	3f c0       	rjmp	.+126    	; 0x2072 <LCD_sendCommand+0xee>
	else if (__tmp > 65535)
    1ff4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ff6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ff8:	8b a9       	ldd	r24, Y+51	; 0x33
    1ffa:	9c a9       	ldd	r25, Y+52	; 0x34
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	3f ef       	ldi	r19, 0xFF	; 255
    2000:	4f e7       	ldi	r20, 0x7F	; 127
    2002:	57 e4       	ldi	r21, 0x47	; 71
    2004:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2008:	18 16       	cp	r1, r24
    200a:	4c f5       	brge	.+82     	; 0x205e <LCD_sendCommand+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200c:	6d a9       	ldd	r22, Y+53	; 0x35
    200e:	7e a9       	ldd	r23, Y+54	; 0x36
    2010:	8f a9       	ldd	r24, Y+55	; 0x37
    2012:	98 ad       	ldd	r25, Y+56	; 0x38
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	40 e2       	ldi	r20, 0x20	; 32
    201a:	51 e4       	ldi	r21, 0x41	; 65
    201c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	bc 01       	movw	r22, r24
    2026:	cd 01       	movw	r24, r26
    2028:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	98 ab       	std	Y+48, r25	; 0x30
    2032:	8f a7       	std	Y+47, r24	; 0x2f
    2034:	0f c0       	rjmp	.+30     	; 0x2054 <LCD_sendCommand+0xd0>
    2036:	89 e1       	ldi	r24, 0x19	; 25
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9e a7       	std	Y+46, r25	; 0x2e
    203c:	8d a7       	std	Y+45, r24	; 0x2d
    203e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2040:	9e a5       	ldd	r25, Y+46	; 0x2e
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <LCD_sendCommand+0xbe>
    2046:	9e a7       	std	Y+46, r25	; 0x2e
    2048:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204a:	8f a5       	ldd	r24, Y+47	; 0x2f
    204c:	98 a9       	ldd	r25, Y+48	; 0x30
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	98 ab       	std	Y+48, r25	; 0x30
    2052:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2054:	8f a5       	ldd	r24, Y+47	; 0x2f
    2056:	98 a9       	ldd	r25, Y+48	; 0x30
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	69 f7       	brne	.-38     	; 0x2036 <LCD_sendCommand+0xb2>
    205c:	14 c0       	rjmp	.+40     	; 0x2086 <LCD_sendCommand+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205e:	69 a9       	ldd	r22, Y+49	; 0x31
    2060:	7a a9       	ldd	r23, Y+50	; 0x32
    2062:	8b a9       	ldd	r24, Y+51	; 0x33
    2064:	9c a9       	ldd	r25, Y+52	; 0x34
    2066:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	98 ab       	std	Y+48, r25	; 0x30
    2070:	8f a7       	std	Y+47, r24	; 0x2f
    2072:	8f a5       	ldd	r24, Y+47	; 0x2f
    2074:	98 a9       	ldd	r25, Y+48	; 0x30
    2076:	9c a7       	std	Y+44, r25	; 0x2c
    2078:	8b a7       	std	Y+43, r24	; 0x2b
    207a:	8b a5       	ldd	r24, Y+43	; 0x2b
    207c:	9c a5       	ldd	r25, Y+44	; 0x2c
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	f1 f7       	brne	.-4      	; 0x207e <LCD_sendCommand+0xfa>
    2082:	9c a7       	std	Y+44, r25	; 0x2c
    2084:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	dio_writePin(LCD_E_PIN_ID,LOGIC_HIGH);
    2086:	89 e0       	ldi	r24, 0x09	; 9
    2088:	61 e0       	ldi	r22, 0x01	; 1
    208a:	0e 94 95 06 	call	0xd2a	; 0xd2a <dio_writePin>
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	a0 e8       	ldi	r26, 0x80	; 128
    2094:	bf e3       	ldi	r27, 0x3F	; 63
    2096:	8f a3       	std	Y+39, r24	; 0x27
    2098:	98 a7       	std	Y+40, r25	; 0x28
    209a:	a9 a7       	std	Y+41, r26	; 0x29
    209c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209e:	6f a1       	ldd	r22, Y+39	; 0x27
    20a0:	78 a5       	ldd	r23, Y+40	; 0x28
    20a2:	89 a5       	ldd	r24, Y+41	; 0x29
    20a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	4a e7       	ldi	r20, 0x7A	; 122
    20ac:	53 e4       	ldi	r21, 0x43	; 67
    20ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	8b a3       	std	Y+35, r24	; 0x23
    20b8:	9c a3       	std	Y+36, r25	; 0x24
    20ba:	ad a3       	std	Y+37, r26	; 0x25
    20bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20be:	6b a1       	ldd	r22, Y+35	; 0x23
    20c0:	7c a1       	ldd	r23, Y+36	; 0x24
    20c2:	8d a1       	ldd	r24, Y+37	; 0x25
    20c4:	9e a1       	ldd	r25, Y+38	; 0x26
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	40 e8       	ldi	r20, 0x80	; 128
    20cc:	5f e3       	ldi	r21, 0x3F	; 63
    20ce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20d2:	88 23       	and	r24, r24
    20d4:	2c f4       	brge	.+10     	; 0x20e0 <LCD_sendCommand+0x15c>
		__ticks = 1;
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	9a a3       	std	Y+34, r25	; 0x22
    20dc:	89 a3       	std	Y+33, r24	; 0x21
    20de:	3f c0       	rjmp	.+126    	; 0x215e <LCD_sendCommand+0x1da>
	else if (__tmp > 65535)
    20e0:	6b a1       	ldd	r22, Y+35	; 0x23
    20e2:	7c a1       	ldd	r23, Y+36	; 0x24
    20e4:	8d a1       	ldd	r24, Y+37	; 0x25
    20e6:	9e a1       	ldd	r25, Y+38	; 0x26
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	3f ef       	ldi	r19, 0xFF	; 255
    20ec:	4f e7       	ldi	r20, 0x7F	; 127
    20ee:	57 e4       	ldi	r21, 0x47	; 71
    20f0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20f4:	18 16       	cp	r1, r24
    20f6:	4c f5       	brge	.+82     	; 0x214a <LCD_sendCommand+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f8:	6f a1       	ldd	r22, Y+39	; 0x27
    20fa:	78 a5       	ldd	r23, Y+40	; 0x28
    20fc:	89 a5       	ldd	r24, Y+41	; 0x29
    20fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e2       	ldi	r20, 0x20	; 32
    2106:	51 e4       	ldi	r21, 0x41	; 65
    2108:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	bc 01       	movw	r22, r24
    2112:	cd 01       	movw	r24, r26
    2114:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	9a a3       	std	Y+34, r25	; 0x22
    211e:	89 a3       	std	Y+33, r24	; 0x21
    2120:	0f c0       	rjmp	.+30     	; 0x2140 <LCD_sendCommand+0x1bc>
    2122:	89 e1       	ldi	r24, 0x19	; 25
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	98 a3       	std	Y+32, r25	; 0x20
    2128:	8f 8f       	std	Y+31, r24	; 0x1f
    212a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    212c:	98 a1       	ldd	r25, Y+32	; 0x20
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <LCD_sendCommand+0x1aa>
    2132:	98 a3       	std	Y+32, r25	; 0x20
    2134:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2136:	89 a1       	ldd	r24, Y+33	; 0x21
    2138:	9a a1       	ldd	r25, Y+34	; 0x22
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	9a a3       	std	Y+34, r25	; 0x22
    213e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2140:	89 a1       	ldd	r24, Y+33	; 0x21
    2142:	9a a1       	ldd	r25, Y+34	; 0x22
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	69 f7       	brne	.-38     	; 0x2122 <LCD_sendCommand+0x19e>
    2148:	14 c0       	rjmp	.+40     	; 0x2172 <LCD_sendCommand+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214a:	6b a1       	ldd	r22, Y+35	; 0x23
    214c:	7c a1       	ldd	r23, Y+36	; 0x24
    214e:	8d a1       	ldd	r24, Y+37	; 0x25
    2150:	9e a1       	ldd	r25, Y+38	; 0x26
    2152:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	9a a3       	std	Y+34, r25	; 0x22
    215c:	89 a3       	std	Y+33, r24	; 0x21
    215e:	89 a1       	ldd	r24, Y+33	; 0x21
    2160:	9a a1       	ldd	r25, Y+34	; 0x22
    2162:	9e 8f       	std	Y+30, r25	; 0x1e
    2164:	8d 8f       	std	Y+29, r24	; 0x1d
    2166:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2168:	9e 8d       	ldd	r25, Y+30	; 0x1e
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <LCD_sendCommand+0x1e6>
    216e:	9e 8f       	std	Y+30, r25	; 0x1e
    2170:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if(DATA_BITS_MODE == EIGHT_BITS_MODE)

	dio_writePort(LCD_DATA_PORT_ID,command);
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	69 ad       	ldd	r22, Y+57	; 0x39
    2176:	0e 94 13 09 	call	0x1226	; 0x1226 <dio_writePort>
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	a0 e8       	ldi	r26, 0x80	; 128
    2180:	bf e3       	ldi	r27, 0x3F	; 63
    2182:	89 8f       	std	Y+25, r24	; 0x19
    2184:	9a 8f       	std	Y+26, r25	; 0x1a
    2186:	ab 8f       	std	Y+27, r26	; 0x1b
    2188:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218a:	69 8d       	ldd	r22, Y+25	; 0x19
    218c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    218e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2190:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	4a e7       	ldi	r20, 0x7A	; 122
    2198:	53 e4       	ldi	r21, 0x43	; 67
    219a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	8d 8b       	std	Y+21, r24	; 0x15
    21a4:	9e 8b       	std	Y+22, r25	; 0x16
    21a6:	af 8b       	std	Y+23, r26	; 0x17
    21a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21aa:	6d 89       	ldd	r22, Y+21	; 0x15
    21ac:	7e 89       	ldd	r23, Y+22	; 0x16
    21ae:	8f 89       	ldd	r24, Y+23	; 0x17
    21b0:	98 8d       	ldd	r25, Y+24	; 0x18
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e8       	ldi	r20, 0x80	; 128
    21b8:	5f e3       	ldi	r21, 0x3F	; 63
    21ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21be:	88 23       	and	r24, r24
    21c0:	2c f4       	brge	.+10     	; 0x21cc <LCD_sendCommand+0x248>
		__ticks = 1;
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9c 8b       	std	Y+20, r25	; 0x14
    21c8:	8b 8b       	std	Y+19, r24	; 0x13
    21ca:	3f c0       	rjmp	.+126    	; 0x224a <LCD_sendCommand+0x2c6>
	else if (__tmp > 65535)
    21cc:	6d 89       	ldd	r22, Y+21	; 0x15
    21ce:	7e 89       	ldd	r23, Y+22	; 0x16
    21d0:	8f 89       	ldd	r24, Y+23	; 0x17
    21d2:	98 8d       	ldd	r25, Y+24	; 0x18
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	3f ef       	ldi	r19, 0xFF	; 255
    21d8:	4f e7       	ldi	r20, 0x7F	; 127
    21da:	57 e4       	ldi	r21, 0x47	; 71
    21dc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21e0:	18 16       	cp	r1, r24
    21e2:	4c f5       	brge	.+82     	; 0x2236 <LCD_sendCommand+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e4:	69 8d       	ldd	r22, Y+25	; 0x19
    21e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e2       	ldi	r20, 0x20	; 32
    21f2:	51 e4       	ldi	r21, 0x41	; 65
    21f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	bc 01       	movw	r22, r24
    21fe:	cd 01       	movw	r24, r26
    2200:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	9c 8b       	std	Y+20, r25	; 0x14
    220a:	8b 8b       	std	Y+19, r24	; 0x13
    220c:	0f c0       	rjmp	.+30     	; 0x222c <LCD_sendCommand+0x2a8>
    220e:	89 e1       	ldi	r24, 0x19	; 25
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	9a 8b       	std	Y+18, r25	; 0x12
    2214:	89 8b       	std	Y+17, r24	; 0x11
    2216:	89 89       	ldd	r24, Y+17	; 0x11
    2218:	9a 89       	ldd	r25, Y+18	; 0x12
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <LCD_sendCommand+0x296>
    221e:	9a 8b       	std	Y+18, r25	; 0x12
    2220:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2222:	8b 89       	ldd	r24, Y+19	; 0x13
    2224:	9c 89       	ldd	r25, Y+20	; 0x14
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	9c 8b       	std	Y+20, r25	; 0x14
    222a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222c:	8b 89       	ldd	r24, Y+19	; 0x13
    222e:	9c 89       	ldd	r25, Y+20	; 0x14
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	69 f7       	brne	.-38     	; 0x220e <LCD_sendCommand+0x28a>
    2234:	14 c0       	rjmp	.+40     	; 0x225e <LCD_sendCommand+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2236:	6d 89       	ldd	r22, Y+21	; 0x15
    2238:	7e 89       	ldd	r23, Y+22	; 0x16
    223a:	8f 89       	ldd	r24, Y+23	; 0x17
    223c:	98 8d       	ldd	r25, Y+24	; 0x18
    223e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	9c 8b       	std	Y+20, r25	; 0x14
    2248:	8b 8b       	std	Y+19, r24	; 0x13
    224a:	8b 89       	ldd	r24, Y+19	; 0x13
    224c:	9c 89       	ldd	r25, Y+20	; 0x14
    224e:	98 8b       	std	Y+16, r25	; 0x10
    2250:	8f 87       	std	Y+15, r24	; 0x0f
    2252:	8f 85       	ldd	r24, Y+15	; 0x0f
    2254:	98 89       	ldd	r25, Y+16	; 0x10
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	f1 f7       	brne	.-4      	; 0x2256 <LCD_sendCommand+0x2d2>
    225a:	98 8b       	std	Y+16, r25	; 0x10
    225c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	dio_writePin(LCD_E_PIN_ID,LOGIC_LOW);
    225e:	89 e0       	ldi	r24, 0x09	; 9
    2260:	60 e0       	ldi	r22, 0x00	; 0
    2262:	0e 94 95 06 	call	0xd2a	; 0xd2a <dio_writePin>
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	a0 e8       	ldi	r26, 0x80	; 128
    226c:	bf e3       	ldi	r27, 0x3F	; 63
    226e:	8b 87       	std	Y+11, r24	; 0x0b
    2270:	9c 87       	std	Y+12, r25	; 0x0c
    2272:	ad 87       	std	Y+13, r26	; 0x0d
    2274:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2276:	6b 85       	ldd	r22, Y+11	; 0x0b
    2278:	7c 85       	ldd	r23, Y+12	; 0x0c
    227a:	8d 85       	ldd	r24, Y+13	; 0x0d
    227c:	9e 85       	ldd	r25, Y+14	; 0x0e
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	4a e7       	ldi	r20, 0x7A	; 122
    2284:	53 e4       	ldi	r21, 0x43	; 67
    2286:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	8f 83       	std	Y+7, r24	; 0x07
    2290:	98 87       	std	Y+8, r25	; 0x08
    2292:	a9 87       	std	Y+9, r26	; 0x09
    2294:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2296:	6f 81       	ldd	r22, Y+7	; 0x07
    2298:	78 85       	ldd	r23, Y+8	; 0x08
    229a:	89 85       	ldd	r24, Y+9	; 0x09
    229c:	9a 85       	ldd	r25, Y+10	; 0x0a
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e8       	ldi	r20, 0x80	; 128
    22a4:	5f e3       	ldi	r21, 0x3F	; 63
    22a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22aa:	88 23       	and	r24, r24
    22ac:	2c f4       	brge	.+10     	; 0x22b8 <LCD_sendCommand+0x334>
		__ticks = 1;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	9e 83       	std	Y+6, r25	; 0x06
    22b4:	8d 83       	std	Y+5, r24	; 0x05
    22b6:	3f c0       	rjmp	.+126    	; 0x2336 <LCD_sendCommand+0x3b2>
	else if (__tmp > 65535)
    22b8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ba:	78 85       	ldd	r23, Y+8	; 0x08
    22bc:	89 85       	ldd	r24, Y+9	; 0x09
    22be:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	3f ef       	ldi	r19, 0xFF	; 255
    22c4:	4f e7       	ldi	r20, 0x7F	; 127
    22c6:	57 e4       	ldi	r21, 0x47	; 71
    22c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22cc:	18 16       	cp	r1, r24
    22ce:	4c f5       	brge	.+82     	; 0x2322 <LCD_sendCommand+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e2       	ldi	r20, 0x20	; 32
    22de:	51 e4       	ldi	r21, 0x41	; 65
    22e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	bc 01       	movw	r22, r24
    22ea:	cd 01       	movw	r24, r26
    22ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	9e 83       	std	Y+6, r25	; 0x06
    22f6:	8d 83       	std	Y+5, r24	; 0x05
    22f8:	0f c0       	rjmp	.+30     	; 0x2318 <LCD_sendCommand+0x394>
    22fa:	89 e1       	ldi	r24, 0x19	; 25
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	9c 83       	std	Y+4, r25	; 0x04
    2300:	8b 83       	std	Y+3, r24	; 0x03
    2302:	8b 81       	ldd	r24, Y+3	; 0x03
    2304:	9c 81       	ldd	r25, Y+4	; 0x04
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <LCD_sendCommand+0x382>
    230a:	9c 83       	std	Y+4, r25	; 0x04
    230c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	9e 81       	ldd	r25, Y+6	; 0x06
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	9e 83       	std	Y+6, r25	; 0x06
    2316:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2318:	8d 81       	ldd	r24, Y+5	; 0x05
    231a:	9e 81       	ldd	r25, Y+6	; 0x06
    231c:	00 97       	sbiw	r24, 0x00	; 0
    231e:	69 f7       	brne	.-38     	; 0x22fa <LCD_sendCommand+0x376>
    2320:	14 c0       	rjmp	.+40     	; 0x234a <LCD_sendCommand+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2322:	6f 81       	ldd	r22, Y+7	; 0x07
    2324:	78 85       	ldd	r23, Y+8	; 0x08
    2326:	89 85       	ldd	r24, Y+9	; 0x09
    2328:	9a 85       	ldd	r25, Y+10	; 0x0a
    232a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9e 83       	std	Y+6, r25	; 0x06
    2334:	8d 83       	std	Y+5, r24	; 0x05
    2336:	8d 81       	ldd	r24, Y+5	; 0x05
    2338:	9e 81       	ldd	r25, Y+6	; 0x06
    233a:	9a 83       	std	Y+2, r25	; 0x02
    233c:	89 83       	std	Y+1, r24	; 0x01
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	9a 81       	ldd	r25, Y+2	; 0x02
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <LCD_sendCommand+0x3be>
    2346:	9a 83       	std	Y+2, r25	; 0x02
    2348:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	dio_writePin(LCD_E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);
#endif

}
    234a:	e9 96       	adiw	r28, 0x39	; 57
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <LCD_displayCharacter>:
void LCD_displayCharacter(u8 character)
{
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	e9 97       	sbiw	r28, 0x39	; 57
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
    2370:	89 af       	std	Y+57, r24	; 0x39
	dio_writePin(LCD_RS_PIN_ID,LOGIC_HIGH);
    2372:	88 e0       	ldi	r24, 0x08	; 8
    2374:	61 e0       	ldi	r22, 0x01	; 1
    2376:	0e 94 95 06 	call	0xd2a	; 0xd2a <dio_writePin>
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	a0 e8       	ldi	r26, 0x80	; 128
    2380:	bf e3       	ldi	r27, 0x3F	; 63
    2382:	8d ab       	std	Y+53, r24	; 0x35
    2384:	9e ab       	std	Y+54, r25	; 0x36
    2386:	af ab       	std	Y+55, r26	; 0x37
    2388:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238a:	6d a9       	ldd	r22, Y+53	; 0x35
    238c:	7e a9       	ldd	r23, Y+54	; 0x36
    238e:	8f a9       	ldd	r24, Y+55	; 0x37
    2390:	98 ad       	ldd	r25, Y+56	; 0x38
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	4a e7       	ldi	r20, 0x7A	; 122
    2398:	53 e4       	ldi	r21, 0x43	; 67
    239a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	89 ab       	std	Y+49, r24	; 0x31
    23a4:	9a ab       	std	Y+50, r25	; 0x32
    23a6:	ab ab       	std	Y+51, r26	; 0x33
    23a8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23aa:	69 a9       	ldd	r22, Y+49	; 0x31
    23ac:	7a a9       	ldd	r23, Y+50	; 0x32
    23ae:	8b a9       	ldd	r24, Y+51	; 0x33
    23b0:	9c a9       	ldd	r25, Y+52	; 0x34
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e8       	ldi	r20, 0x80	; 128
    23b8:	5f e3       	ldi	r21, 0x3F	; 63
    23ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23be:	88 23       	and	r24, r24
    23c0:	2c f4       	brge	.+10     	; 0x23cc <LCD_displayCharacter+0x70>
		__ticks = 1;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	98 ab       	std	Y+48, r25	; 0x30
    23c8:	8f a7       	std	Y+47, r24	; 0x2f
    23ca:	3f c0       	rjmp	.+126    	; 0x244a <LCD_displayCharacter+0xee>
	else if (__tmp > 65535)
    23cc:	69 a9       	ldd	r22, Y+49	; 0x31
    23ce:	7a a9       	ldd	r23, Y+50	; 0x32
    23d0:	8b a9       	ldd	r24, Y+51	; 0x33
    23d2:	9c a9       	ldd	r25, Y+52	; 0x34
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	3f ef       	ldi	r19, 0xFF	; 255
    23d8:	4f e7       	ldi	r20, 0x7F	; 127
    23da:	57 e4       	ldi	r21, 0x47	; 71
    23dc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23e0:	18 16       	cp	r1, r24
    23e2:	4c f5       	brge	.+82     	; 0x2436 <LCD_displayCharacter+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e4:	6d a9       	ldd	r22, Y+53	; 0x35
    23e6:	7e a9       	ldd	r23, Y+54	; 0x36
    23e8:	8f a9       	ldd	r24, Y+55	; 0x37
    23ea:	98 ad       	ldd	r25, Y+56	; 0x38
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e2       	ldi	r20, 0x20	; 32
    23f2:	51 e4       	ldi	r21, 0x41	; 65
    23f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	bc 01       	movw	r22, r24
    23fe:	cd 01       	movw	r24, r26
    2400:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	98 ab       	std	Y+48, r25	; 0x30
    240a:	8f a7       	std	Y+47, r24	; 0x2f
    240c:	0f c0       	rjmp	.+30     	; 0x242c <LCD_displayCharacter+0xd0>
    240e:	89 e1       	ldi	r24, 0x19	; 25
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	9e a7       	std	Y+46, r25	; 0x2e
    2414:	8d a7       	std	Y+45, r24	; 0x2d
    2416:	8d a5       	ldd	r24, Y+45	; 0x2d
    2418:	9e a5       	ldd	r25, Y+46	; 0x2e
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <LCD_displayCharacter+0xbe>
    241e:	9e a7       	std	Y+46, r25	; 0x2e
    2420:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2422:	8f a5       	ldd	r24, Y+47	; 0x2f
    2424:	98 a9       	ldd	r25, Y+48	; 0x30
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	98 ab       	std	Y+48, r25	; 0x30
    242a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242c:	8f a5       	ldd	r24, Y+47	; 0x2f
    242e:	98 a9       	ldd	r25, Y+48	; 0x30
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	69 f7       	brne	.-38     	; 0x240e <LCD_displayCharacter+0xb2>
    2434:	14 c0       	rjmp	.+40     	; 0x245e <LCD_displayCharacter+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2436:	69 a9       	ldd	r22, Y+49	; 0x31
    2438:	7a a9       	ldd	r23, Y+50	; 0x32
    243a:	8b a9       	ldd	r24, Y+51	; 0x33
    243c:	9c a9       	ldd	r25, Y+52	; 0x34
    243e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	98 ab       	std	Y+48, r25	; 0x30
    2448:	8f a7       	std	Y+47, r24	; 0x2f
    244a:	8f a5       	ldd	r24, Y+47	; 0x2f
    244c:	98 a9       	ldd	r25, Y+48	; 0x30
    244e:	9c a7       	std	Y+44, r25	; 0x2c
    2450:	8b a7       	std	Y+43, r24	; 0x2b
    2452:	8b a5       	ldd	r24, Y+43	; 0x2b
    2454:	9c a5       	ldd	r25, Y+44	; 0x2c
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <LCD_displayCharacter+0xfa>
    245a:	9c a7       	std	Y+44, r25	; 0x2c
    245c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	dio_writePin(LCD_E_PIN_ID,LOGIC_HIGH);
    245e:	89 e0       	ldi	r24, 0x09	; 9
    2460:	61 e0       	ldi	r22, 0x01	; 1
    2462:	0e 94 95 06 	call	0xd2a	; 0xd2a <dio_writePin>
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	a0 e8       	ldi	r26, 0x80	; 128
    246c:	bf e3       	ldi	r27, 0x3F	; 63
    246e:	8f a3       	std	Y+39, r24	; 0x27
    2470:	98 a7       	std	Y+40, r25	; 0x28
    2472:	a9 a7       	std	Y+41, r26	; 0x29
    2474:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2476:	6f a1       	ldd	r22, Y+39	; 0x27
    2478:	78 a5       	ldd	r23, Y+40	; 0x28
    247a:	89 a5       	ldd	r24, Y+41	; 0x29
    247c:	9a a5       	ldd	r25, Y+42	; 0x2a
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	4a e7       	ldi	r20, 0x7A	; 122
    2484:	53 e4       	ldi	r21, 0x43	; 67
    2486:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	8b a3       	std	Y+35, r24	; 0x23
    2490:	9c a3       	std	Y+36, r25	; 0x24
    2492:	ad a3       	std	Y+37, r26	; 0x25
    2494:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2496:	6b a1       	ldd	r22, Y+35	; 0x23
    2498:	7c a1       	ldd	r23, Y+36	; 0x24
    249a:	8d a1       	ldd	r24, Y+37	; 0x25
    249c:	9e a1       	ldd	r25, Y+38	; 0x26
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e8       	ldi	r20, 0x80	; 128
    24a4:	5f e3       	ldi	r21, 0x3F	; 63
    24a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24aa:	88 23       	and	r24, r24
    24ac:	2c f4       	brge	.+10     	; 0x24b8 <LCD_displayCharacter+0x15c>
		__ticks = 1;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	9a a3       	std	Y+34, r25	; 0x22
    24b4:	89 a3       	std	Y+33, r24	; 0x21
    24b6:	3f c0       	rjmp	.+126    	; 0x2536 <LCD_displayCharacter+0x1da>
	else if (__tmp > 65535)
    24b8:	6b a1       	ldd	r22, Y+35	; 0x23
    24ba:	7c a1       	ldd	r23, Y+36	; 0x24
    24bc:	8d a1       	ldd	r24, Y+37	; 0x25
    24be:	9e a1       	ldd	r25, Y+38	; 0x26
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	3f ef       	ldi	r19, 0xFF	; 255
    24c4:	4f e7       	ldi	r20, 0x7F	; 127
    24c6:	57 e4       	ldi	r21, 0x47	; 71
    24c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24cc:	18 16       	cp	r1, r24
    24ce:	4c f5       	brge	.+82     	; 0x2522 <LCD_displayCharacter+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d0:	6f a1       	ldd	r22, Y+39	; 0x27
    24d2:	78 a5       	ldd	r23, Y+40	; 0x28
    24d4:	89 a5       	ldd	r24, Y+41	; 0x29
    24d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	40 e2       	ldi	r20, 0x20	; 32
    24de:	51 e4       	ldi	r21, 0x41	; 65
    24e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	bc 01       	movw	r22, r24
    24ea:	cd 01       	movw	r24, r26
    24ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	9a a3       	std	Y+34, r25	; 0x22
    24f6:	89 a3       	std	Y+33, r24	; 0x21
    24f8:	0f c0       	rjmp	.+30     	; 0x2518 <LCD_displayCharacter+0x1bc>
    24fa:	89 e1       	ldi	r24, 0x19	; 25
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	98 a3       	std	Y+32, r25	; 0x20
    2500:	8f 8f       	std	Y+31, r24	; 0x1f
    2502:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2504:	98 a1       	ldd	r25, Y+32	; 0x20
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	f1 f7       	brne	.-4      	; 0x2506 <LCD_displayCharacter+0x1aa>
    250a:	98 a3       	std	Y+32, r25	; 0x20
    250c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250e:	89 a1       	ldd	r24, Y+33	; 0x21
    2510:	9a a1       	ldd	r25, Y+34	; 0x22
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	9a a3       	std	Y+34, r25	; 0x22
    2516:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2518:	89 a1       	ldd	r24, Y+33	; 0x21
    251a:	9a a1       	ldd	r25, Y+34	; 0x22
    251c:	00 97       	sbiw	r24, 0x00	; 0
    251e:	69 f7       	brne	.-38     	; 0x24fa <LCD_displayCharacter+0x19e>
    2520:	14 c0       	rjmp	.+40     	; 0x254a <LCD_displayCharacter+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2522:	6b a1       	ldd	r22, Y+35	; 0x23
    2524:	7c a1       	ldd	r23, Y+36	; 0x24
    2526:	8d a1       	ldd	r24, Y+37	; 0x25
    2528:	9e a1       	ldd	r25, Y+38	; 0x26
    252a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	9a a3       	std	Y+34, r25	; 0x22
    2534:	89 a3       	std	Y+33, r24	; 0x21
    2536:	89 a1       	ldd	r24, Y+33	; 0x21
    2538:	9a a1       	ldd	r25, Y+34	; 0x22
    253a:	9e 8f       	std	Y+30, r25	; 0x1e
    253c:	8d 8f       	std	Y+29, r24	; 0x1d
    253e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2540:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <LCD_displayCharacter+0x1e6>
    2546:	9e 8f       	std	Y+30, r25	; 0x1e
    2548:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if(DATA_BITS_MODE == EIGHT_BITS_MODE)

	dio_writePort(LCD_DATA_PORT_ID,character);
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	69 ad       	ldd	r22, Y+57	; 0x39
    254e:	0e 94 13 09 	call	0x1226	; 0x1226 <dio_writePort>
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	a0 e8       	ldi	r26, 0x80	; 128
    2558:	bf e3       	ldi	r27, 0x3F	; 63
    255a:	89 8f       	std	Y+25, r24	; 0x19
    255c:	9a 8f       	std	Y+26, r25	; 0x1a
    255e:	ab 8f       	std	Y+27, r26	; 0x1b
    2560:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2562:	69 8d       	ldd	r22, Y+25	; 0x19
    2564:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2566:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2568:	9c 8d       	ldd	r25, Y+28	; 0x1c
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	4a e7       	ldi	r20, 0x7A	; 122
    2570:	53 e4       	ldi	r21, 0x43	; 67
    2572:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	8d 8b       	std	Y+21, r24	; 0x15
    257c:	9e 8b       	std	Y+22, r25	; 0x16
    257e:	af 8b       	std	Y+23, r26	; 0x17
    2580:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2582:	6d 89       	ldd	r22, Y+21	; 0x15
    2584:	7e 89       	ldd	r23, Y+22	; 0x16
    2586:	8f 89       	ldd	r24, Y+23	; 0x17
    2588:	98 8d       	ldd	r25, Y+24	; 0x18
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	40 e8       	ldi	r20, 0x80	; 128
    2590:	5f e3       	ldi	r21, 0x3F	; 63
    2592:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2596:	88 23       	and	r24, r24
    2598:	2c f4       	brge	.+10     	; 0x25a4 <LCD_displayCharacter+0x248>
		__ticks = 1;
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	9c 8b       	std	Y+20, r25	; 0x14
    25a0:	8b 8b       	std	Y+19, r24	; 0x13
    25a2:	3f c0       	rjmp	.+126    	; 0x2622 <LCD_displayCharacter+0x2c6>
	else if (__tmp > 65535)
    25a4:	6d 89       	ldd	r22, Y+21	; 0x15
    25a6:	7e 89       	ldd	r23, Y+22	; 0x16
    25a8:	8f 89       	ldd	r24, Y+23	; 0x17
    25aa:	98 8d       	ldd	r25, Y+24	; 0x18
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	3f ef       	ldi	r19, 0xFF	; 255
    25b0:	4f e7       	ldi	r20, 0x7F	; 127
    25b2:	57 e4       	ldi	r21, 0x47	; 71
    25b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25b8:	18 16       	cp	r1, r24
    25ba:	4c f5       	brge	.+82     	; 0x260e <LCD_displayCharacter+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25bc:	69 8d       	ldd	r22, Y+25	; 0x19
    25be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e2       	ldi	r20, 0x20	; 32
    25ca:	51 e4       	ldi	r21, 0x41	; 65
    25cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	bc 01       	movw	r22, r24
    25d6:	cd 01       	movw	r24, r26
    25d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	9c 8b       	std	Y+20, r25	; 0x14
    25e2:	8b 8b       	std	Y+19, r24	; 0x13
    25e4:	0f c0       	rjmp	.+30     	; 0x2604 <LCD_displayCharacter+0x2a8>
    25e6:	89 e1       	ldi	r24, 0x19	; 25
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	9a 8b       	std	Y+18, r25	; 0x12
    25ec:	89 8b       	std	Y+17, r24	; 0x11
    25ee:	89 89       	ldd	r24, Y+17	; 0x11
    25f0:	9a 89       	ldd	r25, Y+18	; 0x12
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	f1 f7       	brne	.-4      	; 0x25f2 <LCD_displayCharacter+0x296>
    25f6:	9a 8b       	std	Y+18, r25	; 0x12
    25f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fa:	8b 89       	ldd	r24, Y+19	; 0x13
    25fc:	9c 89       	ldd	r25, Y+20	; 0x14
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	9c 8b       	std	Y+20, r25	; 0x14
    2602:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2604:	8b 89       	ldd	r24, Y+19	; 0x13
    2606:	9c 89       	ldd	r25, Y+20	; 0x14
    2608:	00 97       	sbiw	r24, 0x00	; 0
    260a:	69 f7       	brne	.-38     	; 0x25e6 <LCD_displayCharacter+0x28a>
    260c:	14 c0       	rjmp	.+40     	; 0x2636 <LCD_displayCharacter+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260e:	6d 89       	ldd	r22, Y+21	; 0x15
    2610:	7e 89       	ldd	r23, Y+22	; 0x16
    2612:	8f 89       	ldd	r24, Y+23	; 0x17
    2614:	98 8d       	ldd	r25, Y+24	; 0x18
    2616:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	9c 8b       	std	Y+20, r25	; 0x14
    2620:	8b 8b       	std	Y+19, r24	; 0x13
    2622:	8b 89       	ldd	r24, Y+19	; 0x13
    2624:	9c 89       	ldd	r25, Y+20	; 0x14
    2626:	98 8b       	std	Y+16, r25	; 0x10
    2628:	8f 87       	std	Y+15, r24	; 0x0f
    262a:	8f 85       	ldd	r24, Y+15	; 0x0f
    262c:	98 89       	ldd	r25, Y+16	; 0x10
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	f1 f7       	brne	.-4      	; 0x262e <LCD_displayCharacter+0x2d2>
    2632:	98 8b       	std	Y+16, r25	; 0x10
    2634:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	dio_writePin(LCD_E_PIN_ID,LOGIC_LOW);
    2636:	89 e0       	ldi	r24, 0x09	; 9
    2638:	60 e0       	ldi	r22, 0x00	; 0
    263a:	0e 94 95 06 	call	0xd2a	; 0xd2a <dio_writePin>
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	a0 e8       	ldi	r26, 0x80	; 128
    2644:	bf e3       	ldi	r27, 0x3F	; 63
    2646:	8b 87       	std	Y+11, r24	; 0x0b
    2648:	9c 87       	std	Y+12, r25	; 0x0c
    264a:	ad 87       	std	Y+13, r26	; 0x0d
    264c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2650:	7c 85       	ldd	r23, Y+12	; 0x0c
    2652:	8d 85       	ldd	r24, Y+13	; 0x0d
    2654:	9e 85       	ldd	r25, Y+14	; 0x0e
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	4a e7       	ldi	r20, 0x7A	; 122
    265c:	53 e4       	ldi	r21, 0x43	; 67
    265e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	8f 83       	std	Y+7, r24	; 0x07
    2668:	98 87       	std	Y+8, r25	; 0x08
    266a:	a9 87       	std	Y+9, r26	; 0x09
    266c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    266e:	6f 81       	ldd	r22, Y+7	; 0x07
    2670:	78 85       	ldd	r23, Y+8	; 0x08
    2672:	89 85       	ldd	r24, Y+9	; 0x09
    2674:	9a 85       	ldd	r25, Y+10	; 0x0a
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e8       	ldi	r20, 0x80	; 128
    267c:	5f e3       	ldi	r21, 0x3F	; 63
    267e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2682:	88 23       	and	r24, r24
    2684:	2c f4       	brge	.+10     	; 0x2690 <LCD_displayCharacter+0x334>
		__ticks = 1;
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	9e 83       	std	Y+6, r25	; 0x06
    268c:	8d 83       	std	Y+5, r24	; 0x05
    268e:	3f c0       	rjmp	.+126    	; 0x270e <LCD_displayCharacter+0x3b2>
	else if (__tmp > 65535)
    2690:	6f 81       	ldd	r22, Y+7	; 0x07
    2692:	78 85       	ldd	r23, Y+8	; 0x08
    2694:	89 85       	ldd	r24, Y+9	; 0x09
    2696:	9a 85       	ldd	r25, Y+10	; 0x0a
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	3f ef       	ldi	r19, 0xFF	; 255
    269c:	4f e7       	ldi	r20, 0x7F	; 127
    269e:	57 e4       	ldi	r21, 0x47	; 71
    26a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26a4:	18 16       	cp	r1, r24
    26a6:	4c f5       	brge	.+82     	; 0x26fa <LCD_displayCharacter+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	40 e2       	ldi	r20, 0x20	; 32
    26b6:	51 e4       	ldi	r21, 0x41	; 65
    26b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	bc 01       	movw	r22, r24
    26c2:	cd 01       	movw	r24, r26
    26c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	9e 83       	std	Y+6, r25	; 0x06
    26ce:	8d 83       	std	Y+5, r24	; 0x05
    26d0:	0f c0       	rjmp	.+30     	; 0x26f0 <LCD_displayCharacter+0x394>
    26d2:	89 e1       	ldi	r24, 0x19	; 25
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	9c 83       	std	Y+4, r25	; 0x04
    26d8:	8b 83       	std	Y+3, r24	; 0x03
    26da:	8b 81       	ldd	r24, Y+3	; 0x03
    26dc:	9c 81       	ldd	r25, Y+4	; 0x04
    26de:	01 97       	sbiw	r24, 0x01	; 1
    26e0:	f1 f7       	brne	.-4      	; 0x26de <LCD_displayCharacter+0x382>
    26e2:	9c 83       	std	Y+4, r25	; 0x04
    26e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e6:	8d 81       	ldd	r24, Y+5	; 0x05
    26e8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	9e 83       	std	Y+6, r25	; 0x06
    26ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f0:	8d 81       	ldd	r24, Y+5	; 0x05
    26f2:	9e 81       	ldd	r25, Y+6	; 0x06
    26f4:	00 97       	sbiw	r24, 0x00	; 0
    26f6:	69 f7       	brne	.-38     	; 0x26d2 <LCD_displayCharacter+0x376>
    26f8:	14 c0       	rjmp	.+40     	; 0x2722 <LCD_displayCharacter+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26fa:	6f 81       	ldd	r22, Y+7	; 0x07
    26fc:	78 85       	ldd	r23, Y+8	; 0x08
    26fe:	89 85       	ldd	r24, Y+9	; 0x09
    2700:	9a 85       	ldd	r25, Y+10	; 0x0a
    2702:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	9e 83       	std	Y+6, r25	; 0x06
    270c:	8d 83       	std	Y+5, r24	; 0x05
    270e:	8d 81       	ldd	r24, Y+5	; 0x05
    2710:	9e 81       	ldd	r25, Y+6	; 0x06
    2712:	9a 83       	std	Y+2, r25	; 0x02
    2714:	89 83       	std	Y+1, r24	; 0x01
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	9a 81       	ldd	r25, Y+2	; 0x02
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <LCD_displayCharacter+0x3be>
    271e:	9a 83       	std	Y+2, r25	; 0x02
    2720:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	dio_writePin(LCD_E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);
#endif

}
    2722:	e9 96       	adiw	r28, 0x39	; 57
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	08 95       	ret

00002734 <LCD_displayString>:
void LCD_displayString(pu8 str)
{
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	00 d0       	rcall	.+0      	; 0x273a <LCD_displayString+0x6>
    273a:	0f 92       	push	r0
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
    2740:	9b 83       	std	Y+3, r25	; 0x03
    2742:	8a 83       	std	Y+2, r24	; 0x02
	u8 iterator;
	for (iterator = 0; str[iterator] != '\0'; iterator++)
    2744:	19 82       	std	Y+1, r1	; 0x01
    2746:	0e c0       	rjmp	.+28     	; 0x2764 <LCD_displayString+0x30>
	{
		LCD_displayCharacter(str[iterator]);
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	28 2f       	mov	r18, r24
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	8a 81       	ldd	r24, Y+2	; 0x02
    2750:	9b 81       	ldd	r25, Y+3	; 0x03
    2752:	fc 01       	movw	r30, r24
    2754:	e2 0f       	add	r30, r18
    2756:	f3 1f       	adc	r31, r19
    2758:	80 81       	ld	r24, Z
    275a:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_displayCharacter>

}
void LCD_displayString(pu8 str)
{
	u8 iterator;
	for (iterator = 0; str[iterator] != '\0'; iterator++)
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	8f 5f       	subi	r24, 0xFF	; 255
    2762:	89 83       	std	Y+1, r24	; 0x01
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	28 2f       	mov	r18, r24
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	9b 81       	ldd	r25, Y+3	; 0x03
    276e:	fc 01       	movw	r30, r24
    2770:	e2 0f       	add	r30, r18
    2772:	f3 1f       	adc	r31, r19
    2774:	80 81       	ld	r24, Z
    2776:	88 23       	and	r24, r24
    2778:	39 f7       	brne	.-50     	; 0x2748 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[iterator]);
	}
}
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	08 95       	ret

00002786 <LCD_moveCurser>:
void LCD_moveCurser(u8 row,u8 col)
{
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	00 d0       	rcall	.+0      	; 0x278c <LCD_moveCurser+0x6>
    278c:	00 d0       	rcall	.+0      	; 0x278e <LCD_moveCurser+0x8>
    278e:	0f 92       	push	r0
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
    2794:	8a 83       	std	Y+2, r24	; 0x02
    2796:	6b 83       	std	Y+3, r22	; 0x03
	u8 lcd_memory_adress;

#if(LCD_NUM_OF_COLUMNS == LCD_16_COLS)
	switch(row)
    2798:	8a 81       	ldd	r24, Y+2	; 0x02
    279a:	28 2f       	mov	r18, r24
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	3d 83       	std	Y+5, r19	; 0x05
    27a0:	2c 83       	std	Y+4, r18	; 0x04
    27a2:	8c 81       	ldd	r24, Y+4	; 0x04
    27a4:	9d 81       	ldd	r25, Y+5	; 0x05
    27a6:	81 30       	cpi	r24, 0x01	; 1
    27a8:	91 05       	cpc	r25, r1
    27aa:	c1 f0       	breq	.+48     	; 0x27dc <LCD_moveCurser+0x56>
    27ac:	2c 81       	ldd	r18, Y+4	; 0x04
    27ae:	3d 81       	ldd	r19, Y+5	; 0x05
    27b0:	22 30       	cpi	r18, 0x02	; 2
    27b2:	31 05       	cpc	r19, r1
    27b4:	2c f4       	brge	.+10     	; 0x27c0 <LCD_moveCurser+0x3a>
    27b6:	8c 81       	ldd	r24, Y+4	; 0x04
    27b8:	9d 81       	ldd	r25, Y+5	; 0x05
    27ba:	00 97       	sbiw	r24, 0x00	; 0
    27bc:	61 f0       	breq	.+24     	; 0x27d6 <LCD_moveCurser+0x50>
    27be:	19 c0       	rjmp	.+50     	; 0x27f2 <LCD_moveCurser+0x6c>
    27c0:	2c 81       	ldd	r18, Y+4	; 0x04
    27c2:	3d 81       	ldd	r19, Y+5	; 0x05
    27c4:	22 30       	cpi	r18, 0x02	; 2
    27c6:	31 05       	cpc	r19, r1
    27c8:	69 f0       	breq	.+26     	; 0x27e4 <LCD_moveCurser+0x5e>
    27ca:	8c 81       	ldd	r24, Y+4	; 0x04
    27cc:	9d 81       	ldd	r25, Y+5	; 0x05
    27ce:	83 30       	cpi	r24, 0x03	; 3
    27d0:	91 05       	cpc	r25, r1
    27d2:	61 f0       	breq	.+24     	; 0x27ec <LCD_moveCurser+0x66>
    27d4:	0e c0       	rjmp	.+28     	; 0x27f2 <LCD_moveCurser+0x6c>
	{
	case 0:
		lcd_memory_adress = col;
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	89 83       	std	Y+1, r24	; 0x01
    27da:	0b c0       	rjmp	.+22     	; 0x27f2 <LCD_moveCurser+0x6c>
		break;
	case 1:
		lcd_memory_adress = col + 0x40;
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	80 5c       	subi	r24, 0xC0	; 192
    27e0:	89 83       	std	Y+1, r24	; 0x01
    27e2:	07 c0       	rjmp	.+14     	; 0x27f2 <LCD_moveCurser+0x6c>
		break;
	case 2:
		lcd_memory_adress = col + 0x14;
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	8c 5e       	subi	r24, 0xEC	; 236
    27e8:	89 83       	std	Y+1, r24	; 0x01
    27ea:	03 c0       	rjmp	.+6      	; 0x27f2 <LCD_moveCurser+0x6c>
		break;
	case 3:
		lcd_memory_adress = col + 0x54;
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	8c 5a       	subi	r24, 0xAC	; 172
    27f0:	89 83       	std	Y+1, r24	; 0x01
		break;

	}
#endif

	LCD_sendCommand(lcd_memory_adress | LCD_SET_CURSOR_LOCATION);
    27f2:	89 81       	ldd	r24, Y+1	; 0x01
    27f4:	80 68       	ori	r24, 0x80	; 128
    27f6:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_sendCommand>
}
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	08 95       	ret

0000280a <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(u8 row,u8 col,pu8 str)
{
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	00 d0       	rcall	.+0      	; 0x2810 <LCD_displayStringRowColumn+0x6>
    2810:	00 d0       	rcall	.+0      	; 0x2812 <LCD_displayStringRowColumn+0x8>
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	89 83       	std	Y+1, r24	; 0x01
    2818:	6a 83       	std	Y+2, r22	; 0x02
    281a:	5c 83       	std	Y+4, r21	; 0x04
    281c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCurser(row,col);
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	6a 81       	ldd	r22, Y+2	; 0x02
    2822:	0e 94 c3 13 	call	0x2786	; 0x2786 <LCD_moveCurser>
	LCD_displayString(str);
    2826:	8b 81       	ldd	r24, Y+3	; 0x03
    2828:	9c 81       	ldd	r25, Y+4	; 0x04
    282a:	0e 94 9a 13 	call	0x2734	; 0x2734 <LCD_displayString>
}
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	cf 91       	pop	r28
    2838:	df 91       	pop	r29
    283a:	08 95       	ret

0000283c <LCD_displayNumber>:
void LCD_displayNumber(u32 number)
{
    283c:	ef 92       	push	r14
    283e:	ff 92       	push	r15
    2840:	0f 93       	push	r16
    2842:	1f 93       	push	r17
    2844:	df 93       	push	r29
    2846:	cf 93       	push	r28
    2848:	cd b7       	in	r28, 0x3d	; 61
    284a:	de b7       	in	r29, 0x3e	; 62
    284c:	28 97       	sbiw	r28, 0x08	; 8
    284e:	0f b6       	in	r0, 0x3f	; 63
    2850:	f8 94       	cli
    2852:	de bf       	out	0x3e, r29	; 62
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	cd bf       	out	0x3d, r28	; 61
    2858:	6d 83       	std	Y+5, r22	; 0x05
    285a:	7e 83       	std	Y+6, r23	; 0x06
    285c:	8f 83       	std	Y+7, r24	; 0x07
    285e:	98 87       	std	Y+8, r25	; 0x08
	u32 loc_inverse = 0;
    2860:	19 82       	std	Y+1, r1	; 0x01
    2862:	1a 82       	std	Y+2, r1	; 0x02
    2864:	1b 82       	std	Y+3, r1	; 0x03
    2866:	1c 82       	std	Y+4, r1	; 0x04
    2868:	24 c0       	rjmp	.+72     	; 0x28b2 <LCD_displayNumber+0x76>
	while(number != 0)
	{
	loc_inverse = ( (loc_inverse * 10) + (number % 10) );
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	9a 81       	ldd	r25, Y+2	; 0x02
    286e:	ab 81       	ldd	r26, Y+3	; 0x03
    2870:	bc 81       	ldd	r27, Y+4	; 0x04
    2872:	2a e0       	ldi	r18, 0x0A	; 10
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e0       	ldi	r20, 0x00	; 0
    2878:	50 e0       	ldi	r21, 0x00	; 0
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	0e 94 5e 15 	call	0x2abc	; 0x2abc <__mulsi3>
    2882:	7b 01       	movw	r14, r22
    2884:	8c 01       	movw	r16, r24
    2886:	8d 81       	ldd	r24, Y+5	; 0x05
    2888:	9e 81       	ldd	r25, Y+6	; 0x06
    288a:	af 81       	ldd	r26, Y+7	; 0x07
    288c:	b8 85       	ldd	r27, Y+8	; 0x08
    288e:	2a e0       	ldi	r18, 0x0A	; 10
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e0       	ldi	r20, 0x00	; 0
    2894:	50 e0       	ldi	r21, 0x00	; 0
    2896:	bc 01       	movw	r22, r24
    2898:	cd 01       	movw	r24, r26
    289a:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__udivmodsi4>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	8e 0d       	add	r24, r14
    28a4:	9f 1d       	adc	r25, r15
    28a6:	a0 1f       	adc	r26, r16
    28a8:	b1 1f       	adc	r27, r17
    28aa:	89 83       	std	Y+1, r24	; 0x01
    28ac:	9a 83       	std	Y+2, r25	; 0x02
    28ae:	ab 83       	std	Y+3, r26	; 0x03
    28b0:	bc 83       	std	Y+4, r27	; 0x04
	LCD_displayString(str);
}
void LCD_displayNumber(u32 number)
{
	u32 loc_inverse = 0;
	while(number != 0)
    28b2:	8d 81       	ldd	r24, Y+5	; 0x05
    28b4:	9e 81       	ldd	r25, Y+6	; 0x06
    28b6:	af 81       	ldd	r26, Y+7	; 0x07
    28b8:	b8 85       	ldd	r27, Y+8	; 0x08
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	a1 05       	cpc	r26, r1
    28be:	b1 05       	cpc	r27, r1
    28c0:	a1 f6       	brne	.-88     	; 0x286a <LCD_displayNumber+0x2e>
    28c2:	23 c0       	rjmp	.+70     	; 0x290a <LCD_displayNumber+0xce>
	loc_inverse = ( (loc_inverse * 10) + (number % 10) );
	}

	while(loc_inverse != 0)
	{
		LCD_displayCharacter( (loc_inverse % 10) + '0' );
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	9a 81       	ldd	r25, Y+2	; 0x02
    28c8:	ab 81       	ldd	r26, Y+3	; 0x03
    28ca:	bc 81       	ldd	r27, Y+4	; 0x04
    28cc:	2a e0       	ldi	r18, 0x0A	; 10
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	40 e0       	ldi	r20, 0x00	; 0
    28d2:	50 e0       	ldi	r21, 0x00	; 0
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__udivmodsi4>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	80 5d       	subi	r24, 0xD0	; 208
    28e2:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_displayCharacter>
		loc_inverse /= 10;
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ea:	ab 81       	ldd	r26, Y+3	; 0x03
    28ec:	bc 81       	ldd	r27, Y+4	; 0x04
    28ee:	2a e0       	ldi	r18, 0x0A	; 10
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	40 e0       	ldi	r20, 0x00	; 0
    28f4:	50 e0       	ldi	r21, 0x00	; 0
    28f6:	bc 01       	movw	r22, r24
    28f8:	cd 01       	movw	r24, r26
    28fa:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__udivmodsi4>
    28fe:	da 01       	movw	r26, r20
    2900:	c9 01       	movw	r24, r18
    2902:	89 83       	std	Y+1, r24	; 0x01
    2904:	9a 83       	std	Y+2, r25	; 0x02
    2906:	ab 83       	std	Y+3, r26	; 0x03
    2908:	bc 83       	std	Y+4, r27	; 0x04
	while(number != 0)
	{
	loc_inverse = ( (loc_inverse * 10) + (number % 10) );
	}

	while(loc_inverse != 0)
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	9a 81       	ldd	r25, Y+2	; 0x02
    290e:	ab 81       	ldd	r26, Y+3	; 0x03
    2910:	bc 81       	ldd	r27, Y+4	; 0x04
    2912:	00 97       	sbiw	r24, 0x00	; 0
    2914:	a1 05       	cpc	r26, r1
    2916:	b1 05       	cpc	r27, r1
    2918:	a9 f6       	brne	.-86     	; 0x28c4 <LCD_displayNumber+0x88>
	{
		LCD_displayCharacter( (loc_inverse % 10) + '0' );
		loc_inverse /= 10;
	}
}
    291a:	28 96       	adiw	r28, 0x08	; 8
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	1f 91       	pop	r17
    292c:	0f 91       	pop	r16
    292e:	ff 90       	pop	r15
    2930:	ef 90       	pop	r14
    2932:	08 95       	ret

00002934 <LCD_creatCustomCharacter>:
void LCD_creatCustomCharacter(pu8 character, u8 index)
{
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	63 97       	sbiw	r28, 0x13	; 19
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	9a 8b       	std	Y+18, r25	; 0x12
    294a:	89 8b       	std	Y+17, r24	; 0x11
    294c:	6b 8b       	std	Y+19, r22	; 0x13
	u8 iterator;
	u8 loc_CGRAM_aaddress;

	if(index < 8)
    294e:	8b 89       	ldd	r24, Y+19	; 0x13
    2950:	88 30       	cpi	r24, 0x08	; 8
    2952:	08 f0       	brcs	.+2      	; 0x2956 <LCD_creatCustomCharacter+0x22>
    2954:	96 c0       	rjmp	.+300    	; 0x2a82 <LCD_creatCustomCharacter+0x14e>
	{
		loc_CGRAM_aaddress =( LCD_CGRAM_BASE_ADDRESS + (index * LCD_NUMBER_OF_LOCATIONS_IN_CGRAM) );
    2956:	8b 89       	ldd	r24, Y+19	; 0x13
    2958:	88 2f       	mov	r24, r24
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	08 96       	adiw	r24, 0x08	; 8
    295e:	88 0f       	add	r24, r24
    2960:	99 1f       	adc	r25, r25
    2962:	88 0f       	add	r24, r24
    2964:	99 1f       	adc	r25, r25
    2966:	88 0f       	add	r24, r24
    2968:	99 1f       	adc	r25, r25
    296a:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_sendCommand(loc_CGRAM_aaddress);
    296c:	8f 85       	ldd	r24, Y+15	; 0x0f
    296e:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_sendCommand>

		for(iterator = 0; iterator < LCD_NUMBER_OF_LOCATIONS_IN_CGRAM; iterator++)
    2972:	18 8a       	std	Y+16, r1	; 0x10
    2974:	0e c0       	rjmp	.+28     	; 0x2992 <LCD_creatCustomCharacter+0x5e>
		{
			LCD_displayCharacter(character[iterator]);
    2976:	88 89       	ldd	r24, Y+16	; 0x10
    2978:	28 2f       	mov	r18, r24
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	89 89       	ldd	r24, Y+17	; 0x11
    297e:	9a 89       	ldd	r25, Y+18	; 0x12
    2980:	fc 01       	movw	r30, r24
    2982:	e2 0f       	add	r30, r18
    2984:	f3 1f       	adc	r31, r19
    2986:	80 81       	ld	r24, Z
    2988:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_displayCharacter>
	if(index < 8)
	{
		loc_CGRAM_aaddress =( LCD_CGRAM_BASE_ADDRESS + (index * LCD_NUMBER_OF_LOCATIONS_IN_CGRAM) );
		LCD_sendCommand(loc_CGRAM_aaddress);

		for(iterator = 0; iterator < LCD_NUMBER_OF_LOCATIONS_IN_CGRAM; iterator++)
    298c:	88 89       	ldd	r24, Y+16	; 0x10
    298e:	8f 5f       	subi	r24, 0xFF	; 255
    2990:	88 8b       	std	Y+16, r24	; 0x10
    2992:	88 89       	ldd	r24, Y+16	; 0x10
    2994:	88 30       	cpi	r24, 0x08	; 8
    2996:	78 f3       	brcs	.-34     	; 0x2976 <LCD_creatCustomCharacter+0x42>
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	a0 e0       	ldi	r26, 0x00	; 0
    299e:	b0 e4       	ldi	r27, 0x40	; 64
    29a0:	8b 87       	std	Y+11, r24	; 0x0b
    29a2:	9c 87       	std	Y+12, r25	; 0x0c
    29a4:	ad 87       	std	Y+13, r26	; 0x0d
    29a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	4a e7       	ldi	r20, 0x7A	; 122
    29b6:	53 e4       	ldi	r21, 0x43	; 67
    29b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	8f 83       	std	Y+7, r24	; 0x07
    29c2:	98 87       	std	Y+8, r25	; 0x08
    29c4:	a9 87       	std	Y+9, r26	; 0x09
    29c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29c8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ca:	78 85       	ldd	r23, Y+8	; 0x08
    29cc:	89 85       	ldd	r24, Y+9	; 0x09
    29ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	40 e8       	ldi	r20, 0x80	; 128
    29d6:	5f e3       	ldi	r21, 0x3F	; 63
    29d8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29dc:	88 23       	and	r24, r24
    29de:	2c f4       	brge	.+10     	; 0x29ea <LCD_creatCustomCharacter+0xb6>
		__ticks = 1;
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	9e 83       	std	Y+6, r25	; 0x06
    29e6:	8d 83       	std	Y+5, r24	; 0x05
    29e8:	3f c0       	rjmp	.+126    	; 0x2a68 <LCD_creatCustomCharacter+0x134>
	else if (__tmp > 65535)
    29ea:	6f 81       	ldd	r22, Y+7	; 0x07
    29ec:	78 85       	ldd	r23, Y+8	; 0x08
    29ee:	89 85       	ldd	r24, Y+9	; 0x09
    29f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	3f ef       	ldi	r19, 0xFF	; 255
    29f6:	4f e7       	ldi	r20, 0x7F	; 127
    29f8:	57 e4       	ldi	r21, 0x47	; 71
    29fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29fe:	18 16       	cp	r1, r24
    2a00:	4c f5       	brge	.+82     	; 0x2a54 <LCD_creatCustomCharacter+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	40 e2       	ldi	r20, 0x20	; 32
    2a10:	51 e4       	ldi	r21, 0x41	; 65
    2a12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	bc 01       	movw	r22, r24
    2a1c:	cd 01       	movw	r24, r26
    2a1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	9e 83       	std	Y+6, r25	; 0x06
    2a28:	8d 83       	std	Y+5, r24	; 0x05
    2a2a:	0f c0       	rjmp	.+30     	; 0x2a4a <LCD_creatCustomCharacter+0x116>
    2a2c:	89 e1       	ldi	r24, 0x19	; 25
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	9c 83       	std	Y+4, r25	; 0x04
    2a32:	8b 83       	std	Y+3, r24	; 0x03
    2a34:	8b 81       	ldd	r24, Y+3	; 0x03
    2a36:	9c 81       	ldd	r25, Y+4	; 0x04
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	f1 f7       	brne	.-4      	; 0x2a38 <LCD_creatCustomCharacter+0x104>
    2a3c:	9c 83       	std	Y+4, r25	; 0x04
    2a3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a40:	8d 81       	ldd	r24, Y+5	; 0x05
    2a42:	9e 81       	ldd	r25, Y+6	; 0x06
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	9e 83       	std	Y+6, r25	; 0x06
    2a48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4e:	00 97       	sbiw	r24, 0x00	; 0
    2a50:	69 f7       	brne	.-38     	; 0x2a2c <LCD_creatCustomCharacter+0xf8>
    2a52:	14 c0       	rjmp	.+40     	; 0x2a7c <LCD_creatCustomCharacter+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a54:	6f 81       	ldd	r22, Y+7	; 0x07
    2a56:	78 85       	ldd	r23, Y+8	; 0x08
    2a58:	89 85       	ldd	r24, Y+9	; 0x09
    2a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	9e 83       	std	Y+6, r25	; 0x06
    2a66:	8d 83       	std	Y+5, r24	; 0x05
    2a68:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6c:	9a 83       	std	Y+2, r25	; 0x02
    2a6e:	89 83       	std	Y+1, r24	; 0x01
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	9a 81       	ldd	r25, Y+2	; 0x02
    2a74:	01 97       	sbiw	r24, 0x01	; 1
    2a76:	f1 f7       	brne	.-4      	; 0x2a74 <LCD_creatCustomCharacter+0x140>
    2a78:	9a 83       	std	Y+2, r25	; 0x02
    2a7a:	89 83       	std	Y+1, r24	; 0x01
		{
			LCD_displayCharacter(character[iterator]);
		}
		_delay_ms(2);
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION);
    2a7c:	80 e8       	ldi	r24, 0x80	; 128
    2a7e:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_sendCommand>
	}
}
    2a82:	63 96       	adiw	r28, 0x13	; 19
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	cd bf       	out	0x3d, r28	; 61
    2a8e:	cf 91       	pop	r28
    2a90:	df 91       	pop	r29
    2a92:	08 95       	ret

00002a94 <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    2a94:	df 93       	push	r29
    2a96:	cf 93       	push	r28
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_SCREEN_CLEAR);
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_sendCommand>
}
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	08 95       	ret

00002aa8 <shiftDisplay_right>:
void shiftDisplay_right(void)
{
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_SHIFT_DISPLAY_RIGHT);
    2ab0:	85 e0       	ldi	r24, 0x05	; 5
    2ab2:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_sendCommand>
}
    2ab6:	cf 91       	pop	r28
    2ab8:	df 91       	pop	r29
    2aba:	08 95       	ret

00002abc <__mulsi3>:
    2abc:	62 9f       	mul	r22, r18
    2abe:	d0 01       	movw	r26, r0
    2ac0:	73 9f       	mul	r23, r19
    2ac2:	f0 01       	movw	r30, r0
    2ac4:	82 9f       	mul	r24, r18
    2ac6:	e0 0d       	add	r30, r0
    2ac8:	f1 1d       	adc	r31, r1
    2aca:	64 9f       	mul	r22, r20
    2acc:	e0 0d       	add	r30, r0
    2ace:	f1 1d       	adc	r31, r1
    2ad0:	92 9f       	mul	r25, r18
    2ad2:	f0 0d       	add	r31, r0
    2ad4:	83 9f       	mul	r24, r19
    2ad6:	f0 0d       	add	r31, r0
    2ad8:	74 9f       	mul	r23, r20
    2ada:	f0 0d       	add	r31, r0
    2adc:	65 9f       	mul	r22, r21
    2ade:	f0 0d       	add	r31, r0
    2ae0:	99 27       	eor	r25, r25
    2ae2:	72 9f       	mul	r23, r18
    2ae4:	b0 0d       	add	r27, r0
    2ae6:	e1 1d       	adc	r30, r1
    2ae8:	f9 1f       	adc	r31, r25
    2aea:	63 9f       	mul	r22, r19
    2aec:	b0 0d       	add	r27, r0
    2aee:	e1 1d       	adc	r30, r1
    2af0:	f9 1f       	adc	r31, r25
    2af2:	bd 01       	movw	r22, r26
    2af4:	cf 01       	movw	r24, r30
    2af6:	11 24       	eor	r1, r1
    2af8:	08 95       	ret

00002afa <__udivmodsi4>:
    2afa:	a1 e2       	ldi	r26, 0x21	; 33
    2afc:	1a 2e       	mov	r1, r26
    2afe:	aa 1b       	sub	r26, r26
    2b00:	bb 1b       	sub	r27, r27
    2b02:	fd 01       	movw	r30, r26
    2b04:	0d c0       	rjmp	.+26     	; 0x2b20 <__udivmodsi4_ep>

00002b06 <__udivmodsi4_loop>:
    2b06:	aa 1f       	adc	r26, r26
    2b08:	bb 1f       	adc	r27, r27
    2b0a:	ee 1f       	adc	r30, r30
    2b0c:	ff 1f       	adc	r31, r31
    2b0e:	a2 17       	cp	r26, r18
    2b10:	b3 07       	cpc	r27, r19
    2b12:	e4 07       	cpc	r30, r20
    2b14:	f5 07       	cpc	r31, r21
    2b16:	20 f0       	brcs	.+8      	; 0x2b20 <__udivmodsi4_ep>
    2b18:	a2 1b       	sub	r26, r18
    2b1a:	b3 0b       	sbc	r27, r19
    2b1c:	e4 0b       	sbc	r30, r20
    2b1e:	f5 0b       	sbc	r31, r21

00002b20 <__udivmodsi4_ep>:
    2b20:	66 1f       	adc	r22, r22
    2b22:	77 1f       	adc	r23, r23
    2b24:	88 1f       	adc	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	1a 94       	dec	r1
    2b2a:	69 f7       	brne	.-38     	; 0x2b06 <__udivmodsi4_loop>
    2b2c:	60 95       	com	r22
    2b2e:	70 95       	com	r23
    2b30:	80 95       	com	r24
    2b32:	90 95       	com	r25
    2b34:	9b 01       	movw	r18, r22
    2b36:	ac 01       	movw	r20, r24
    2b38:	bd 01       	movw	r22, r26
    2b3a:	cf 01       	movw	r24, r30
    2b3c:	08 95       	ret

00002b3e <__prologue_saves__>:
    2b3e:	2f 92       	push	r2
    2b40:	3f 92       	push	r3
    2b42:	4f 92       	push	r4
    2b44:	5f 92       	push	r5
    2b46:	6f 92       	push	r6
    2b48:	7f 92       	push	r7
    2b4a:	8f 92       	push	r8
    2b4c:	9f 92       	push	r9
    2b4e:	af 92       	push	r10
    2b50:	bf 92       	push	r11
    2b52:	cf 92       	push	r12
    2b54:	df 92       	push	r13
    2b56:	ef 92       	push	r14
    2b58:	ff 92       	push	r15
    2b5a:	0f 93       	push	r16
    2b5c:	1f 93       	push	r17
    2b5e:	cf 93       	push	r28
    2b60:	df 93       	push	r29
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
    2b66:	ca 1b       	sub	r28, r26
    2b68:	db 0b       	sbc	r29, r27
    2b6a:	0f b6       	in	r0, 0x3f	; 63
    2b6c:	f8 94       	cli
    2b6e:	de bf       	out	0x3e, r29	; 62
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	cd bf       	out	0x3d, r28	; 61
    2b74:	09 94       	ijmp

00002b76 <__epilogue_restores__>:
    2b76:	2a 88       	ldd	r2, Y+18	; 0x12
    2b78:	39 88       	ldd	r3, Y+17	; 0x11
    2b7a:	48 88       	ldd	r4, Y+16	; 0x10
    2b7c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b7e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b80:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b82:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b84:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b86:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b88:	b9 84       	ldd	r11, Y+9	; 0x09
    2b8a:	c8 84       	ldd	r12, Y+8	; 0x08
    2b8c:	df 80       	ldd	r13, Y+7	; 0x07
    2b8e:	ee 80       	ldd	r14, Y+6	; 0x06
    2b90:	fd 80       	ldd	r15, Y+5	; 0x05
    2b92:	0c 81       	ldd	r16, Y+4	; 0x04
    2b94:	1b 81       	ldd	r17, Y+3	; 0x03
    2b96:	aa 81       	ldd	r26, Y+2	; 0x02
    2b98:	b9 81       	ldd	r27, Y+1	; 0x01
    2b9a:	ce 0f       	add	r28, r30
    2b9c:	d1 1d       	adc	r29, r1
    2b9e:	0f b6       	in	r0, 0x3f	; 63
    2ba0:	f8 94       	cli
    2ba2:	de bf       	out	0x3e, r29	; 62
    2ba4:	0f be       	out	0x3f, r0	; 63
    2ba6:	cd bf       	out	0x3d, r28	; 61
    2ba8:	ed 01       	movw	r28, r26
    2baa:	08 95       	ret

00002bac <_exit>:
    2bac:	f8 94       	cli

00002bae <__stop_program>:
    2bae:	ff cf       	rjmp	.-2      	; 0x2bae <__stop_program>
