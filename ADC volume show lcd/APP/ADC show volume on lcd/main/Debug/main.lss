
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000bb6  00000c4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800094  00800094  00000c7e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000c80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  000013d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dc0  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e1  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007be  00000000  00000000  00002779  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00002f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000438  00000000  00000000  0000310c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006b3  00000000  00000000  00003544  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00003bf7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 39       	cpi	r26, 0x96	; 150
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2a 03 	call	0x654	; 0x654 <main>
  8a:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidInit>:
#define ADC_START_CONVERSATIONPin 6
#define INTERRUPT_MODE	INTERUPT_DISABLE
void ADC_voidInit(void)
{  
	
	SET_BIT(ADCSRA,ADC_enable_pin);  //ADC_enable_pin
  92:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA|=(PRESCALER);
  94:	86 b1       	in	r24, 0x06	; 6
  96:	87 60       	ori	r24, 0x07	; 7
  98:	86 b9       	out	0x06, r24	; 6
	ADMUX|=(Ref_VOLT_MODE<<6);  //6
  9a:	3e 9a       	sbi	0x07, 6	; 7
	//ADMUX|=(ADC_CHA);
	//ADMUX |= (1<<5);	//ADLAR to left adjust the result	


#ifdef ADC_CHA
ADMUX|=(ADC_CHA);
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	87 b9       	out	0x07, r24	; 7
#endif

#if INTERRUPT_MODE==INTERRUPT_ENABLE
SET_BIT(ADCSRA ,3);  //Bit 3 â€“ ADIE: ADC Interrupt Enable 
#endif	
}
  a0:	08 95       	ret

000000a2 <ADC_read>:


ADC_ERROR_STATE ADC_read(u8 ADC_CHANEL,u16 *loc_AdcVal)
{
  a2:	fb 01       	movw	r30, r22
	ADC_ERROR_STATE ADC_ERROR =ADC_ERROR_FREE;
	ADMUX|=(ADC_CHA);
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADC_START_CONVERSATIONPin);		/*6 IS  Start_conversion_pin  */
  a8:	36 9a       	sbi	0x06, 6	; 6

		
while((ADCSRA&(1<<ADC_INT_PIN))==0);	/*check for interrupt if */
  aa:	34 9b       	sbis	0x06, 4	; 6
  ac:	fe cf       	rjmp	.-4      	; 0xaa <ADC_read+0x8>

	*loc_AdcVal = (u16)ADCL ;
  ae:	24 b1       	in	r18, 0x04	; 4
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	31 83       	std	Z+1, r19	; 0x01
  b4:	20 83       	st	Z, r18
	*loc_AdcVal = *loc_AdcVal+(u16)ADCH*256 ;
  b6:	45 b1       	in	r20, 0x05	; 5
  b8:	94 2f       	mov	r25, r20
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	82 0f       	add	r24, r18
  be:	93 1f       	adc	r25, r19
  c0:	91 83       	std	Z+1, r25	; 0x01
  c2:	80 83       	st	Z, r24
/*	*loc_AdcVal|=ADCL;
	*loc_AdcVal|=(ADCH<<8);	*/			
//	CLR_BIT(ADCSRA,4); 		
	return ADC_ERROR;

}
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	08 95       	ret

000000c8 <ADC_Disable>:

void ADC_Disable(void)
{
		  CLR_BIT(ADCSRA,ADC_START_CONVERSATIONPin); //sart conversation pin 	
  c8:	36 98       	cbi	0x06, 6	; 6

}
  ca:	08 95       	ret

000000cc <DIO_WritrPin>:

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
if (pin_id>31)  /*in case not valid pin id */
  cc:	80 32       	cpi	r24, 0x20	; 32
  ce:	08 f0       	brcs	.+2      	; 0xd2 <DIO_WritrPin+0x6>
  d0:	08 95       	ret
{
	ERROR_LOC_RET=PIN_NUMBER_ERROR;
}
else	 /*case valid id pin*/
{	
	u8 loc_pin_id =pin_id % 8;
  d2:	98 2f       	mov	r25, r24
  d4:	97 70       	andi	r25, 0x07	; 7

	u8 loc_port_num=pin_id/8;
  d6:	86 95       	lsr	r24
  d8:	86 95       	lsr	r24
  da:	86 95       	lsr	r24
	switch(loc_port_num)
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	a9 f1       	breq	.+106    	; 0x14a <DIO_WritrPin+0x7e>
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	38 f0       	brcs	.+14     	; 0xf2 <DIO_WritrPin+0x26>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	09 f4       	brne	.+2      	; 0xea <DIO_WritrPin+0x1e>
  e8:	5c c0       	rjmp	.+184    	; 0x1a2 <DIO_WritrPin+0xd6>
  ea:	83 30       	cpi	r24, 0x03	; 3
  ec:	09 f0       	breq	.+2      	; 0xf0 <DIO_WritrPin+0x24>
  ee:	b0 c0       	rjmp	.+352    	; 0x250 <DIO_WritrPin+0x184>
  f0:	84 c0       	rjmp	.+264    	; 0x1fa <DIO_WritrPin+0x12e>
	{
		case u8PORTA:
		if (GET_BIT(DDRA,loc_pin_id)==PIN_OUTPUT)
  f2:	2a b3       	in	r18, 0x1a	; 26
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	09 2e       	mov	r0, r25
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_WritrPin+0x32>
  fa:	35 95       	asr	r19
  fc:	27 95       	ror	r18
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_WritrPin+0x2e>
 102:	20 ff       	sbrs	r18, 0
 104:	a7 c0       	rjmp	.+334    	; 0x254 <DIO_WritrPin+0x188>
		{
			switch (level_value)
 106:	66 23       	and	r22, r22
 108:	89 f0       	breq	.+34     	; 0x12c <DIO_WritrPin+0x60>
 10a:	61 30       	cpi	r22, 0x01	; 1
 10c:	09 f0       	breq	.+2      	; 0x110 <DIO_WritrPin+0x44>
 10e:	a4 c0       	rjmp	.+328    	; 0x258 <DIO_WritrPin+0x18c>
			{
				case HIGH_LEVEL:
				SET_BIT(PORTA,loc_pin_id);
 110:	4b b3       	in	r20, 0x1b	; 27
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	b9 01       	movw	r22, r18
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_WritrPin+0x52>
 11a:	66 0f       	add	r22, r22
 11c:	77 1f       	adc	r23, r23
 11e:	9a 95       	dec	r25
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_WritrPin+0x4e>
 122:	cb 01       	movw	r24, r22
 124:	84 2b       	or	r24, r20
 126:	8b bb       	out	0x1b, r24	; 27
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 128:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (level_value)
			{
				case HIGH_LEVEL:
				SET_BIT(PORTA,loc_pin_id);
				break;
 12a:	08 95       	ret
				case LOW_LEVEL:
				CLR_BIT(PORTA,loc_pin_id);
 12c:	4b b3       	in	r20, 0x1b	; 27
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	b9 01       	movw	r22, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_WritrPin+0x6e>
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	9a 95       	dec	r25
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_WritrPin+0x6a>
 13e:	cb 01       	movw	r24, r22
 140:	80 95       	com	r24
 142:	84 23       	and	r24, r20
 144:	8b bb       	out	0x1b, r24	; 27
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 146:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH_LEVEL:
				SET_BIT(PORTA,loc_pin_id);
				break;
				case LOW_LEVEL:
				CLR_BIT(PORTA,loc_pin_id);
				break;
 148:	08 95       	ret
		else
		{	ERROR_LOCRET=PIN_DIR_ERROR;
		}
		break;
		case u8PORTB:
		if (GET_BIT(DDRB,loc_pin_id)==PIN_OUTPUT)
 14a:	27 b3       	in	r18, 0x17	; 23
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	09 2e       	mov	r0, r25
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_WritrPin+0x8a>
 152:	35 95       	asr	r19
 154:	27 95       	ror	r18
 156:	0a 94       	dec	r0
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_WritrPin+0x86>
 15a:	20 ff       	sbrs	r18, 0
 15c:	7f c0       	rjmp	.+254    	; 0x25c <DIO_WritrPin+0x190>
		{
			switch (level_value)
 15e:	66 23       	and	r22, r22
 160:	89 f0       	breq	.+34     	; 0x184 <DIO_WritrPin+0xb8>
 162:	61 30       	cpi	r22, 0x01	; 1
 164:	09 f0       	breq	.+2      	; 0x168 <DIO_WritrPin+0x9c>
 166:	7c c0       	rjmp	.+248    	; 0x260 <DIO_WritrPin+0x194>
			{
				case HIGH_LEVEL :
				SET_BIT(PORTB,loc_pin_id);
 168:	48 b3       	in	r20, 0x18	; 24
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	b9 01       	movw	r22, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_WritrPin+0xaa>
 172:	66 0f       	add	r22, r22
 174:	77 1f       	adc	r23, r23
 176:	9a 95       	dec	r25
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_WritrPin+0xa6>
 17a:	cb 01       	movw	r24, r22
 17c:	84 2b       	or	r24, r20
 17e:	88 bb       	out	0x18, r24	; 24
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 180:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (level_value)
			{
				case HIGH_LEVEL :
				SET_BIT(PORTB,loc_pin_id);
				break;
 182:	08 95       	ret
				case LOW_LEVEL : 
				CLR_BIT(PORTB,loc_pin_id);
 184:	48 b3       	in	r20, 0x18	; 24
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	b9 01       	movw	r22, r18
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_WritrPin+0xc6>
 18e:	66 0f       	add	r22, r22
 190:	77 1f       	adc	r23, r23
 192:	9a 95       	dec	r25
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_WritrPin+0xc2>
 196:	cb 01       	movw	r24, r22
 198:	80 95       	com	r24
 19a:	84 23       	and	r24, r20
 19c:	88 bb       	out	0x18, r24	; 24
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 19e:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH_LEVEL :
				SET_BIT(PORTB,loc_pin_id);
				break;
				case LOW_LEVEL : 
				CLR_BIT(PORTB,loc_pin_id);
				break;
 1a0:	08 95       	ret
		{	ERROR_LOCRET=PIN_DIR_ERROR;
		}
		break;
		
		case u8PORTC:
		if (GET_BIT(DDRC,loc_pin_id)==PIN_OUTPUT)
 1a2:	24 b3       	in	r18, 0x14	; 20
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	09 2e       	mov	r0, r25
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_WritrPin+0xe2>
 1aa:	35 95       	asr	r19
 1ac:	27 95       	ror	r18
 1ae:	0a 94       	dec	r0
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_WritrPin+0xde>
 1b2:	20 ff       	sbrs	r18, 0
 1b4:	57 c0       	rjmp	.+174    	; 0x264 <DIO_WritrPin+0x198>
		{
			switch (level_value)
 1b6:	66 23       	and	r22, r22
 1b8:	89 f0       	breq	.+34     	; 0x1dc <DIO_WritrPin+0x110>
 1ba:	61 30       	cpi	r22, 0x01	; 1
 1bc:	09 f0       	breq	.+2      	; 0x1c0 <DIO_WritrPin+0xf4>
 1be:	54 c0       	rjmp	.+168    	; 0x268 <DIO_WritrPin+0x19c>
			{
				case HIGH_LEVEL :
				SET_BIT(PORTC,loc_pin_id);
 1c0:	45 b3       	in	r20, 0x15	; 21
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	b9 01       	movw	r22, r18
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_WritrPin+0x102>
 1ca:	66 0f       	add	r22, r22
 1cc:	77 1f       	adc	r23, r23
 1ce:	9a 95       	dec	r25
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_WritrPin+0xfe>
 1d2:	cb 01       	movw	r24, r22
 1d4:	84 2b       	or	r24, r20
 1d6:	85 bb       	out	0x15, r24	; 21
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 1d8:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (level_value)
			{
				case HIGH_LEVEL :
				SET_BIT(PORTC,loc_pin_id);
				break;
 1da:	08 95       	ret
				case  LOW_LEVEL :
				CLR_BIT(PORTC,loc_pin_id);
 1dc:	45 b3       	in	r20, 0x15	; 21
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	b9 01       	movw	r22, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_WritrPin+0x11e>
 1e6:	66 0f       	add	r22, r22
 1e8:	77 1f       	adc	r23, r23
 1ea:	9a 95       	dec	r25
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_WritrPin+0x11a>
 1ee:	cb 01       	movw	r24, r22
 1f0:	80 95       	com	r24
 1f2:	84 23       	and	r24, r20
 1f4:	85 bb       	out	0x15, r24	; 21
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 1f6:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH_LEVEL :
				SET_BIT(PORTC,loc_pin_id);
				break;
				case  LOW_LEVEL :
				CLR_BIT(PORTC,loc_pin_id);
				break;
 1f8:	08 95       	ret
		{	ERROR_LOCRET=PIN_DIR_ERROR;
		}
		break;

		case u8PORTD:
		if (GET_BIT(DDRD,loc_pin_id)==PIN_OUTPUT)
 1fa:	21 b3       	in	r18, 0x11	; 17
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	09 2e       	mov	r0, r25
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_WritrPin+0x13a>
 202:	35 95       	asr	r19
 204:	27 95       	ror	r18
 206:	0a 94       	dec	r0
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_WritrPin+0x136>
 20a:	20 ff       	sbrs	r18, 0
 20c:	2f c0       	rjmp	.+94     	; 0x26c <DIO_WritrPin+0x1a0>
		{
			switch (level_value)
 20e:	66 23       	and	r22, r22
 210:	81 f0       	breq	.+32     	; 0x232 <DIO_WritrPin+0x166>
 212:	61 30       	cpi	r22, 0x01	; 1
 214:	69 f5       	brne	.+90     	; 0x270 <DIO_WritrPin+0x1a4>
			{
				case HIGH_LEVEL:
				SET_BIT(PORTD,loc_pin_id);
 216:	42 b3       	in	r20, 0x12	; 18
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	b9 01       	movw	r22, r18
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_WritrPin+0x158>
 220:	66 0f       	add	r22, r22
 222:	77 1f       	adc	r23, r23
 224:	9a 95       	dec	r25
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_WritrPin+0x154>
 228:	cb 01       	movw	r24, r22
 22a:	84 2b       	or	r24, r20
 22c:	82 bb       	out	0x12, r24	; 18
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 22e:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (level_value)
			{
				case HIGH_LEVEL:
				SET_BIT(PORTD,loc_pin_id);
				break;
 230:	08 95       	ret
				case LOW_LEVEL:
				CLR_BIT(PORTD,loc_pin_id);
 232:	42 b3       	in	r20, 0x12	; 18
 234:	21 e0       	ldi	r18, 0x01	; 1
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	b9 01       	movw	r22, r18
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_WritrPin+0x174>
 23c:	66 0f       	add	r22, r22
 23e:	77 1f       	adc	r23, r23
 240:	9a 95       	dec	r25
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_WritrPin+0x170>
 244:	cb 01       	movw	r24, r22
 246:	80 95       	com	r24
 248:	84 23       	and	r24, r20
 24a:	82 bb       	out	0x12, r24	; 18
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 24c:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH_LEVEL:
				SET_BIT(PORTD,loc_pin_id);
				break;
				case LOW_LEVEL:
				CLR_BIT(PORTD,loc_pin_id);
				break;
 24e:	08 95       	ret
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	08 95       	ret
				CLR_BIT(PORTA,loc_pin_id);
				break;
			}
		}
		else
		{	ERROR_LOCRET=PIN_DIR_ERROR;
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	08 95       	ret
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	08 95       	ret
				CLR_BIT(PORTB,loc_pin_id);
				break;
			}
		}
		else
		{	ERROR_LOCRET=PIN_DIR_ERROR;
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	08 95       	ret
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 95       	ret
				CLR_BIT(PORTC,loc_pin_id);
				break;
			}
		}
		else
		{	ERROR_LOCRET=PIN_DIR_ERROR;
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	08 95       	ret
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	08 95       	ret
				CLR_BIT(PORTD,loc_pin_id);
				break;
			}
		}
		else
		{	ERROR_LOCRET=PIN_DIR_ERROR;
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	08 95       	ret
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 270:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}
	return ERROR_LOCRET;
}
}
 272:	08 95       	ret

00000274 <DIO_READ_PIN>:
PIN_ERROR_TYPES  DIO_READ_PIN(u8 pin_id,u8 *ptr_val)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
if (pin_id>31)  /*in case not valid pin id */
 274:	80 32       	cpi	r24, 0x20	; 32
 276:	08 f0       	brcs	.+2      	; 0x27a <DIO_READ_PIN+0x6>
 278:	08 95       	ret
else	 /*case valid id pin*/
{	
	PIN_ERROR_TYPES ERROR_LOCRET=ERROR_FREE;
	u8 *Loc_ptr= ptr_val;

	u8 loc_pin_id =pin_id % 8;
 27a:	98 2f       	mov	r25, r24
 27c:	97 70       	andi	r25, 0x07	; 7
	u8 loc_port_num=pin_id/8;
 27e:	86 95       	lsr	r24
 280:	86 95       	lsr	r24
 282:	86 95       	lsr	r24
	
	switch(loc_port_num)
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	f9 f0       	breq	.+62     	; 0x2c6 <DIO_READ_PIN+0x52>
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	30 f0       	brcs	.+12     	; 0x298 <DIO_READ_PIN+0x24>
 28c:	82 30       	cpi	r24, 0x02	; 2
 28e:	99 f1       	breq	.+102    	; 0x2f6 <DIO_READ_PIN+0x82>
 290:	83 30       	cpi	r24, 0x03	; 3
 292:	09 f0       	breq	.+2      	; 0x296 <DIO_READ_PIN+0x22>
 294:	60 c0       	rjmp	.+192    	; 0x356 <DIO_READ_PIN+0xe2>
 296:	47 c0       	rjmp	.+142    	; 0x326 <DIO_READ_PIN+0xb2>
	{
		case u8PORTA:
		if(GET_BIT(DDRA,loc_pin_id)==PIN_INPUT)
 298:	2a b3       	in	r18, 0x1a	; 26
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	09 2e       	mov	r0, r25
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_READ_PIN+0x30>
 2a0:	35 95       	asr	r19
 2a2:	27 95       	ror	r18
 2a4:	0a 94       	dec	r0
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_READ_PIN+0x2c>
 2a8:	20 fd       	sbrc	r18, 0
 2aa:	0f c0       	rjmp	.+30     	; 0x2ca <DIO_READ_PIN+0x56>
		*Loc_ptr=(GET_BIT(PINA,loc_pin_id));
 2ac:	29 b3       	in	r18, 0x19	; 25
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	09 2e       	mov	r0, r25
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_READ_PIN+0x44>
 2b4:	35 95       	asr	r19
 2b6:	27 95       	ror	r18
 2b8:	0a 94       	dec	r0
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_READ_PIN+0x40>
 2bc:	21 70       	andi	r18, 0x01	; 1
 2be:	fb 01       	movw	r30, r22
 2c0:	20 83       	st	Z, r18
{
	ERROR_LOC_RET=PIN_NUMBER_ERROR;
}
else	 /*case valid id pin*/
{	
	PIN_ERROR_TYPES ERROR_LOCRET=ERROR_FREE;
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	03 c0       	rjmp	.+6      	; 0x2cc <DIO_READ_PIN+0x58>
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	01 c0       	rjmp	.+2      	; 0x2cc <DIO_READ_PIN+0x58>
	{
		case u8PORTA:
		if(GET_BIT(DDRA,loc_pin_id)==PIN_INPUT)
		*Loc_ptr=(GET_BIT(PINA,loc_pin_id));
		
		else   ERROR_LOCRET=PIN_DIR_ERROR;
 2ca:	82 e0       	ldi	r24, 0x02	; 2
		
		case u8PORTB:
		if(GET_BIT(DDRB,loc_pin_id)==PIN_INPUT)
 2cc:	27 b3       	in	r18, 0x17	; 23
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	09 2e       	mov	r0, r25
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_READ_PIN+0x64>
 2d4:	35 95       	asr	r19
 2d6:	27 95       	ror	r18
 2d8:	0a 94       	dec	r0
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_READ_PIN+0x60>
 2dc:	20 fd       	sbrc	r18, 0
 2de:	3d c0       	rjmp	.+122    	; 0x35a <DIO_READ_PIN+0xe6>
		*Loc_ptr=(GET_BIT(PINB,loc_pin_id));
 2e0:	26 b3       	in	r18, 0x16	; 22
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_READ_PIN+0x76>
 2e6:	35 95       	asr	r19
 2e8:	27 95       	ror	r18
 2ea:	9a 95       	dec	r25
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_READ_PIN+0x72>
 2ee:	21 70       	andi	r18, 0x01	; 1
 2f0:	fb 01       	movw	r30, r22
 2f2:	20 83       	st	Z, r18
 2f4:	08 95       	ret
		else   ERROR_LOCRET=PIN_DIR_ERROR;
		
		break;
		
		case u8PORTC:
		if(GET_BIT(DDRC,loc_pin_id)==PIN_INPUT)
 2f6:	24 b3       	in	r18, 0x14	; 20
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	09 2e       	mov	r0, r25
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_READ_PIN+0x8e>
 2fe:	35 95       	asr	r19
 300:	27 95       	ror	r18
 302:	0a 94       	dec	r0
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_READ_PIN+0x8a>
 306:	20 fd       	sbrc	r18, 0
 308:	2a c0       	rjmp	.+84     	; 0x35e <DIO_READ_PIN+0xea>
		*Loc_ptr=(GET_BIT(PINC,loc_pin_id));
 30a:	23 b3       	in	r18, 0x13	; 19
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	a9 01       	movw	r20, r18
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_READ_PIN+0xa2>
 312:	55 95       	asr	r21
 314:	47 95       	ror	r20
 316:	9a 95       	dec	r25
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_READ_PIN+0x9e>
 31a:	ca 01       	movw	r24, r20
 31c:	81 70       	andi	r24, 0x01	; 1
 31e:	fb 01       	movw	r30, r22
 320:	80 83       	st	Z, r24
{
	ERROR_LOC_RET=PIN_NUMBER_ERROR;
}
else	 /*case valid id pin*/
{	
	PIN_ERROR_TYPES ERROR_LOCRET=ERROR_FREE;
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	08 95       	ret
		else   ERROR_LOCRET=PIN_DIR_ERROR;
		
		break;
		
		case u8PORTD:
		if(GET_BIT(DDRD,loc_pin_id)==PIN_INPUT)
 326:	21 b3       	in	r18, 0x11	; 17
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	09 2e       	mov	r0, r25
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_READ_PIN+0xbe>
 32e:	35 95       	asr	r19
 330:	27 95       	ror	r18
 332:	0a 94       	dec	r0
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_READ_PIN+0xba>
 336:	20 fd       	sbrc	r18, 0
 338:	14 c0       	rjmp	.+40     	; 0x362 <DIO_READ_PIN+0xee>
		*Loc_ptr=(GET_BIT(PIND,loc_pin_id));
 33a:	20 b3       	in	r18, 0x10	; 16
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	a9 01       	movw	r20, r18
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_READ_PIN+0xd2>
 342:	55 95       	asr	r21
 344:	47 95       	ror	r20
 346:	9a 95       	dec	r25
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_READ_PIN+0xce>
 34a:	ca 01       	movw	r24, r20
 34c:	81 70       	andi	r24, 0x01	; 1
 34e:	fb 01       	movw	r30, r22
 350:	80 83       	st	Z, r24
{
	ERROR_LOC_RET=PIN_NUMBER_ERROR;
}
else	 /*case valid id pin*/
{	
	PIN_ERROR_TYPES ERROR_LOCRET=ERROR_FREE;
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	08 95       	ret
		else   ERROR_LOCRET=PIN_DIR_ERROR;
		
		break;
		
		default :
		ERROR_LOCRET = PORT_ERROR;
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	08 95       	ret
		
		case u8PORTB:
		if(GET_BIT(DDRB,loc_pin_id)==PIN_INPUT)
		*Loc_ptr=(GET_BIT(PINB,loc_pin_id));
		
		else   ERROR_LOCRET=PIN_DIR_ERROR;
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	08 95       	ret
		
		case u8PORTC:
		if(GET_BIT(DDRC,loc_pin_id)==PIN_INPUT)
		*Loc_ptr=(GET_BIT(PINC,loc_pin_id));
		
		else   ERROR_LOCRET=PIN_DIR_ERROR;
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	08 95       	ret
		
		case u8PORTD:
		if(GET_BIT(DDRD,loc_pin_id)==PIN_INPUT)
		*Loc_ptr=(GET_BIT(PIND,loc_pin_id));
		
		else   ERROR_LOCRET=PIN_DIR_ERROR;
 362:	82 e0       	ldi	r24, 0x02	; 2
		break;
	}
	
	return ERROR_LOCRET;
}
}
 364:	08 95       	ret

00000366 <DIO_WritePort>:

PIN_ERROR_TYPES  DIO_WritePort(u8 port_num,u8 port_value)
{
	PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
	
	switch(port_num)
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	51 f0       	breq	.+20     	; 0x37e <DIO_WritePort+0x18>
 36a:	81 30       	cpi	r24, 0x01	; 1
 36c:	28 f0       	brcs	.+10     	; 0x378 <DIO_WritePort+0x12>
 36e:	82 30       	cpi	r24, 0x02	; 2
 370:	49 f0       	breq	.+18     	; 0x384 <DIO_WritePort+0x1e>
 372:	83 30       	cpi	r24, 0x03	; 3
 374:	69 f4       	brne	.+26     	; 0x390 <DIO_WritePort+0x2a>
 376:	09 c0       	rjmp	.+18     	; 0x38a <DIO_WritePort+0x24>
	{
		case u8PORTA:
		PORTA = port_value;
 378:	6b bb       	out	0x1b, r22	; 27
}
}

PIN_ERROR_TYPES  DIO_WritePort(u8 port_num,u8 port_value)
{
	PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 37a:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(port_num)
	{
		case u8PORTA:
		PORTA = port_value;
		break;
 37c:	08 95       	ret
		
		case u8PORTB:
		PORTB = port_value;
 37e:	68 bb       	out	0x18, r22	; 24
}
}

PIN_ERROR_TYPES  DIO_WritePort(u8 port_num,u8 port_value)
{
	PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 380:	80 e0       	ldi	r24, 0x00	; 0
		PORTA = port_value;
		break;
		
		case u8PORTB:
		PORTB = port_value;
		break;
 382:	08 95       	ret

		case u8PORTC:
		PORTC = port_value;
 384:	65 bb       	out	0x15, r22	; 21
}
}

PIN_ERROR_TYPES  DIO_WritePort(u8 port_num,u8 port_value)
{
	PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 386:	80 e0       	ldi	r24, 0x00	; 0
		PORTB = port_value;
		break;

		case u8PORTC:
		PORTC = port_value;
		break;
 388:	08 95       	ret

		case u8PORTD:
		PORTD = port_value;
 38a:	62 bb       	out	0x12, r22	; 18
}
}

PIN_ERROR_TYPES  DIO_WritePort(u8 port_num,u8 port_value)
{
	PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 38c:	80 e0       	ldi	r24, 0x00	; 0
		PORTC = port_value;
		break;

		case u8PORTD:
		PORTD = port_value;
		break;
 38e:	08 95       	ret
		
		default:
		ERROR_LOCRET=PORT_ERROR;
 390:	83 e0       	ldi	r24, 0x03	; 3
		
	}
	return ERROR_LOCRET;
}
 392:	08 95       	ret

00000394 <DIO_ReadPort>:
{
	
	PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
	
	u8 *loc_ptr =ptr_val;
	switch(port_num)
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	61 f0       	breq	.+24     	; 0x3b0 <DIO_ReadPort+0x1c>
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	28 f0       	brcs	.+10     	; 0x3a6 <DIO_ReadPort+0x12>
 39c:	82 30       	cpi	r24, 0x02	; 2
 39e:	69 f0       	breq	.+26     	; 0x3ba <DIO_ReadPort+0x26>
 3a0:	83 30       	cpi	r24, 0x03	; 3
 3a2:	a9 f4       	brne	.+42     	; 0x3ce <DIO_ReadPort+0x3a>
 3a4:	0f c0       	rjmp	.+30     	; 0x3c4 <DIO_ReadPort+0x30>
	{
		case u8PORTA:
		*loc_ptr=PINA;
 3a6:	89 b3       	in	r24, 0x19	; 25
 3a8:	fb 01       	movw	r30, r22
 3aa:	80 83       	st	Z, r24
}

PIN_ERROR_TYPES  DIO_ReadPort(u8 port_num,u8 *ptr_val)
{
	
	PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 3ac:	80 e0       	ldi	r24, 0x00	; 0
	u8 *loc_ptr =ptr_val;
	switch(port_num)
	{
		case u8PORTA:
		*loc_ptr=PINA;
		break;
 3ae:	08 95       	ret
		
		case u8PORTB:
		*loc_ptr=PINB;
 3b0:	86 b3       	in	r24, 0x16	; 22
 3b2:	fb 01       	movw	r30, r22
 3b4:	80 83       	st	Z, r24
}

PIN_ERROR_TYPES  DIO_ReadPort(u8 port_num,u8 *ptr_val)
{
	
	PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 3b6:	80 e0       	ldi	r24, 0x00	; 0
		*loc_ptr=PINA;
		break;
		
		case u8PORTB:
		*loc_ptr=PINB;
		break;
 3b8:	08 95       	ret

		case u8PORTC:
		*loc_ptr=PINC;
 3ba:	83 b3       	in	r24, 0x13	; 19
 3bc:	fb 01       	movw	r30, r22
 3be:	80 83       	st	Z, r24
}

PIN_ERROR_TYPES  DIO_ReadPort(u8 port_num,u8 *ptr_val)
{
	
	PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 3c0:	80 e0       	ldi	r24, 0x00	; 0
		*loc_ptr=PINB;
		break;

		case u8PORTC:
		*loc_ptr=PINC;
		break;
 3c2:	08 95       	ret

		case u8PORTD:
		*loc_ptr=PIND;
 3c4:	80 b3       	in	r24, 0x10	; 16
 3c6:	fb 01       	movw	r30, r22
 3c8:	80 83       	st	Z, r24
}

PIN_ERROR_TYPES  DIO_ReadPort(u8 port_num,u8 *ptr_val)
{
	
	PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
 3ca:	80 e0       	ldi	r24, 0x00	; 0
		*loc_ptr=PINC;
		break;

		case u8PORTD:
		*loc_ptr=PIND;
		break;
 3cc:	08 95       	ret
		
		default:
		ERROR_LOCRET=PORT_ERROR;
 3ce:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ERROR_LOCRET;
 3d0:	08 95       	ret

000003d2 <LCD_voidWriteCharacter>:
	LCD_voidSendCommand(0x0C);   //hide CURSOR 

}

void LCD_voidWriteCharacter(u8 Character)
{
 3d2:	cf 93       	push	r28
 3d4:	c8 2f       	mov	r28, r24

	DIO_WritrPin(RW_PIN,LOW_LEVEL);
 3d6:	89 e0       	ldi	r24, 0x09	; 9
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>
	DIO_WritrPin(RS_PIN,HIGH_LEVEL);
 3de:	8a e0       	ldi	r24, 0x0A	; 10
 3e0:	61 e0       	ldi	r22, 0x01	; 1
 3e2:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>
	//DIO_WritePin(RW_PORT,RW_PIN,LOW_LEVEL);

	DIO_WritrPin(D0_PIN,GET_BIT(Character,0));
 3e6:	6c 2f       	mov	r22, r28
 3e8:	61 70       	andi	r22, 0x01	; 1
 3ea:	80 e1       	ldi	r24, 0x10	; 16
 3ec:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>
	DIO_WritrPin(D1_PIN,GET_BIT(Character,1));
 3f0:	6c 2f       	mov	r22, r28
 3f2:	66 95       	lsr	r22
 3f4:	61 70       	andi	r22, 0x01	; 1
 3f6:	81 e1       	ldi	r24, 0x11	; 17
 3f8:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>
	DIO_WritrPin(D2_PIN,GET_BIT(Character,2));
 3fc:	6c 2f       	mov	r22, r28
 3fe:	66 95       	lsr	r22
 400:	66 95       	lsr	r22
 402:	61 70       	andi	r22, 0x01	; 1
 404:	82 e1       	ldi	r24, 0x12	; 18
 406:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>
	DIO_WritrPin(D3_PIN,GET_BIT(Character,3));
 40a:	6c 2f       	mov	r22, r28
 40c:	66 95       	lsr	r22
 40e:	66 95       	lsr	r22
 410:	66 95       	lsr	r22
 412:	61 70       	andi	r22, 0x01	; 1
 414:	83 e1       	ldi	r24, 0x13	; 19
 416:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>
	DIO_WritrPin(D4_PIN,GET_BIT(Character,4));
 41a:	6c 2f       	mov	r22, r28
 41c:	62 95       	swap	r22
 41e:	6f 70       	andi	r22, 0x0F	; 15
 420:	61 70       	andi	r22, 0x01	; 1
 422:	84 e1       	ldi	r24, 0x14	; 20
 424:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>
	DIO_WritrPin(D5_PIN,GET_BIT(Character,5));
 428:	6c 2f       	mov	r22, r28
 42a:	62 95       	swap	r22
 42c:	66 95       	lsr	r22
 42e:	67 70       	andi	r22, 0x07	; 7
 430:	61 70       	andi	r22, 0x01	; 1
 432:	85 e1       	ldi	r24, 0x15	; 21
 434:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>
	DIO_WritrPin(D6_PIN,GET_BIT(Character,6));
 438:	6c 2f       	mov	r22, r28
 43a:	62 95       	swap	r22
 43c:	66 95       	lsr	r22
 43e:	66 95       	lsr	r22
 440:	63 70       	andi	r22, 0x03	; 3
 442:	61 70       	andi	r22, 0x01	; 1
 444:	86 e1       	ldi	r24, 0x16	; 22
 446:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>
	DIO_WritrPin(D7_PIN,GET_BIT(Character,7));
 44a:	6c 2f       	mov	r22, r28
 44c:	66 1f       	adc	r22, r22
 44e:	66 27       	eor	r22, r22
 450:	66 1f       	adc	r22, r22
 452:	87 e1       	ldi	r24, 0x17	; 23
 454:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>

	DIO_WritrPin(EN_PIN,HIGH_LEVEL);
 458:	88 e0       	ldi	r24, 0x08	; 8
 45a:	61 e0       	ldi	r22, 0x01	; 1
 45c:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>
	_delay_ms(00);
	DIO_WritrPin(EN_PIN,LOW_LEVEL);
 460:	88 e0       	ldi	r24, 0x08	; 8
 462:	60 e0       	ldi	r22, 0x00	; 0
 464:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>

}
 468:	cf 91       	pop	r28
 46a:	08 95       	ret

0000046c <LCD_voidSendCommand>:
void LCD_voidSendCommand(u8 Command)
{
 46c:	cf 93       	push	r28
 46e:	c8 2f       	mov	r28, r24
	DIO_WritrPin(RS_PIN,LOW_LEVEL);
 470:	8a e0       	ldi	r24, 0x0A	; 10
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>
	DIO_WritrPin(RW_PIN,LOW_LEVEL);
 478:	89 e0       	ldi	r24, 0x09	; 9
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>

	DIO_WritrPin(D0_PIN,GET_BIT(Command,0));
 480:	6c 2f       	mov	r22, r28
 482:	61 70       	andi	r22, 0x01	; 1
 484:	80 e1       	ldi	r24, 0x10	; 16
 486:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>
	DIO_WritrPin(D1_PIN,GET_BIT(Command,1));
 48a:	6c 2f       	mov	r22, r28
 48c:	66 95       	lsr	r22
 48e:	61 70       	andi	r22, 0x01	; 1
 490:	81 e1       	ldi	r24, 0x11	; 17
 492:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>
	DIO_WritrPin(D2_PIN,GET_BIT(Command,2));
 496:	6c 2f       	mov	r22, r28
 498:	66 95       	lsr	r22
 49a:	66 95       	lsr	r22
 49c:	61 70       	andi	r22, 0x01	; 1
 49e:	82 e1       	ldi	r24, 0x12	; 18
 4a0:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>
	DIO_WritrPin(D3_PIN,GET_BIT(Command,3));
 4a4:	6c 2f       	mov	r22, r28
 4a6:	66 95       	lsr	r22
 4a8:	66 95       	lsr	r22
 4aa:	66 95       	lsr	r22
 4ac:	61 70       	andi	r22, 0x01	; 1
 4ae:	83 e1       	ldi	r24, 0x13	; 19
 4b0:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>
	DIO_WritrPin(D4_PIN,GET_BIT(Command,4));
 4b4:	6c 2f       	mov	r22, r28
 4b6:	62 95       	swap	r22
 4b8:	6f 70       	andi	r22, 0x0F	; 15
 4ba:	61 70       	andi	r22, 0x01	; 1
 4bc:	84 e1       	ldi	r24, 0x14	; 20
 4be:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>
	DIO_WritrPin(D5_PIN,GET_BIT(Command,5));
 4c2:	6c 2f       	mov	r22, r28
 4c4:	62 95       	swap	r22
 4c6:	66 95       	lsr	r22
 4c8:	67 70       	andi	r22, 0x07	; 7
 4ca:	61 70       	andi	r22, 0x01	; 1
 4cc:	85 e1       	ldi	r24, 0x15	; 21
 4ce:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>
	DIO_WritrPin(D6_PIN,GET_BIT(Command,6));
 4d2:	6c 2f       	mov	r22, r28
 4d4:	62 95       	swap	r22
 4d6:	66 95       	lsr	r22
 4d8:	66 95       	lsr	r22
 4da:	63 70       	andi	r22, 0x03	; 3
 4dc:	61 70       	andi	r22, 0x01	; 1
 4de:	86 e1       	ldi	r24, 0x16	; 22
 4e0:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>
	DIO_WritrPin(D7_PIN,GET_BIT(Command,7));
 4e4:	6c 2f       	mov	r22, r28
 4e6:	66 1f       	adc	r22, r22
 4e8:	66 27       	eor	r22, r22
 4ea:	66 1f       	adc	r22, r22
 4ec:	87 e1       	ldi	r24, 0x17	; 23
 4ee:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>

	DIO_WritrPin(EN_PIN,HIGH_LEVEL);
 4f2:	88 e0       	ldi	r24, 0x08	; 8
 4f4:	61 e0       	ldi	r22, 0x01	; 1
 4f6:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4fa:	00 00       	nop
		_delay_us(1);
	//_delay_ms(2);				
	DIO_WritrPin(EN_PIN,LOW_LEVEL);
 4fc:	88 e0       	ldi	r24, 0x08	; 8
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_WritrPin>
 504:	81 e2       	ldi	r24, 0x21	; 33
 506:	8a 95       	dec	r24
 508:	f1 f7       	brne	.-4      	; 0x506 <LCD_voidSendCommand+0x9a>
 50a:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 50c:	83 ec       	ldi	r24, 0xC3	; 195
 50e:	99 e0       	ldi	r25, 0x09	; 9
 510:	01 97       	sbiw	r24, 0x01	; 1
 512:	f1 f7       	brne	.-4      	; 0x510 <LCD_voidSendCommand+0xa4>
 514:	00 c0       	rjmp	.+0      	; 0x516 <LCD_voidSendCommand+0xaa>
 516:	00 00       	nop
		_delay_us(100);
		_delay_ms(10);


}
 518:	cf 91       	pop	r28
 51a:	08 95       	ret

0000051c <LCD_voidInit>:
void LCD_voidInit(void)
{



	Port_setPinDirection(D0_PIN,PIN_OUTPUT);
 51c:	80 e1       	ldi	r24, 0x10	; 16
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <Port_setPinDirection>
	Port_setPinDirection(D1_PIN,PIN_OUTPUT);
 524:	81 e1       	ldi	r24, 0x11	; 17
 526:	61 e0       	ldi	r22, 0x01	; 1
 528:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <Port_setPinDirection>
	Port_setPinDirection(D2_PIN,PIN_OUTPUT);
 52c:	82 e1       	ldi	r24, 0x12	; 18
 52e:	61 e0       	ldi	r22, 0x01	; 1
 530:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <Port_setPinDirection>
	Port_setPinDirection(D3_PIN,PIN_OUTPUT);
 534:	83 e1       	ldi	r24, 0x13	; 19
 536:	61 e0       	ldi	r22, 0x01	; 1
 538:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <Port_setPinDirection>
	Port_setPinDirection(D4_PIN,PIN_OUTPUT);
 53c:	84 e1       	ldi	r24, 0x14	; 20
 53e:	61 e0       	ldi	r22, 0x01	; 1
 540:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <Port_setPinDirection>
	Port_setPinDirection(D5_PIN,PIN_OUTPUT);
 544:	85 e1       	ldi	r24, 0x15	; 21
 546:	61 e0       	ldi	r22, 0x01	; 1
 548:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <Port_setPinDirection>
	Port_setPinDirection(D6_PIN,PIN_OUTPUT);
 54c:	86 e1       	ldi	r24, 0x16	; 22
 54e:	61 e0       	ldi	r22, 0x01	; 1
 550:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <Port_setPinDirection>
	Port_setPinDirection(D7_PIN,PIN_OUTPUT);
 554:	87 e1       	ldi	r24, 0x17	; 23
 556:	61 e0       	ldi	r22, 0x01	; 1
 558:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <Port_setPinDirection>

	Port_setPinDirection(RS_PIN,PIN_OUTPUT);
 55c:	8a e0       	ldi	r24, 0x0A	; 10
 55e:	61 e0       	ldi	r22, 0x01	; 1
 560:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <Port_setPinDirection>
	Port_setPinDirection(RW_PIN,PIN_OUTPUT);
 564:	89 e0       	ldi	r24, 0x09	; 9
 566:	61 e0       	ldi	r22, 0x01	; 1
 568:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <Port_setPinDirection>
	Port_setPinDirection(EN_PIN,PIN_OUTPUT);
 56c:	88 e0       	ldi	r24, 0x08	; 8
 56e:	61 e0       	ldi	r22, 0x01	; 1
 570:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <Port_setPinDirection>
 574:	81 ee       	ldi	r24, 0xE1	; 225
 576:	94 e0       	ldi	r25, 0x04	; 4
 578:	01 97       	sbiw	r24, 0x01	; 1
 57a:	f1 f7       	brne	.-4      	; 0x578 <LCD_voidInit+0x5c>
 57c:	00 c0       	rjmp	.+0      	; 0x57e <LCD_voidInit+0x62>
 57e:	00 00       	nop
 580:	87 e8       	ldi	r24, 0x87	; 135
 582:	93 e1       	ldi	r25, 0x13	; 19
 584:	01 97       	sbiw	r24, 0x01	; 1
 586:	f1 f7       	brne	.-4      	; 0x584 <LCD_voidInit+0x68>
 588:	00 c0       	rjmp	.+0      	; 0x58a <LCD_voidInit+0x6e>
 58a:	00 00       	nop
	
	_delay_ms(5);
	_delay_ms(20);       //wait for start initialization
	LCD_voidSendCommand(0x38);   //8bit mode
 58c:	88 e3       	ldi	r24, 0x38	; 56
 58e:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_voidSendCommand>
	LCD_voidSendCommand(0x0E);   //curser not be blinking
 592:	8e e0       	ldi	r24, 0x0E	; 14
 594:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_voidSendCommand>
	LCD_voidSendCommand(0x01);   // clear display
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_voidSendCommand>
 59e:	83 ef       	ldi	r24, 0xF3	; 243
 5a0:	91 e0       	ldi	r25, 0x01	; 1
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <LCD_voidInit+0x86>
 5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <LCD_voidInit+0x8c>
 5a8:	00 00       	nop
	_delay_ms(2);
	//LCD_voidSendCommand(0x06);   //INCREAMENT CURSOR TO RIGHT
	LCD_voidSendCommand(0x0C);   //hide CURSOR 
 5aa:	8c e0       	ldi	r24, 0x0C	; 12
 5ac:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_voidSendCommand>

}
 5b0:	08 95       	ret

000005b2 <LCD_voidCustomChar>:
		_delay_ms(10);


}
void LCD_voidCustomChar (unsigned char loc, unsigned char *msg)
{
 5b2:	0f 93       	push	r16
 5b4:	1f 93       	push	r17
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	06 2f       	mov	r16, r22
 5bc:	17 2f       	mov	r17, r23
	unsigned char i;
	if(loc<8)
 5be:	88 30       	cpi	r24, 0x08	; 8
 5c0:	70 f4       	brcc	.+28     	; 0x5de <LCD_voidCustomChar+0x2c>
	{
		LCD_voidSendCommand (0x40 + (loc*8));	/* Command 0x40  point CGRAM address */
 5c2:	88 0f       	add	r24, r24
 5c4:	88 0f       	add	r24, r24
 5c6:	88 0f       	add	r24, r24
 5c8:	80 5c       	subi	r24, 0xC0	; 192
 5ca:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_voidSendCommand>
 5ce:	c0 2f       	mov	r28, r16
 5d0:	d1 2f       	mov	r29, r17
 5d2:	18 e0       	ldi	r17, 0x08	; 8
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
		LCD_voidWriteCharacter(msg[i]);
 5d4:	89 91       	ld	r24, Y+
 5d6:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_voidWriteCharacter>
 5da:	11 50       	subi	r17, 0x01	; 1
{
	unsigned char i;
	if(loc<8)
	{
		LCD_voidSendCommand (0x40 + (loc*8));	/* Command 0x40  point CGRAM address */
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
 5dc:	d9 f7       	brne	.-10     	; 0x5d4 <LCD_voidCustomChar+0x22>
		LCD_voidWriteCharacter(msg[i]);
	}
	  LCD_voidSendCommand(0x80); //shift back to DDRAM location 0
 5de:	80 e8       	ldi	r24, 0x80	; 128
 5e0:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_voidSendCommand>
}
 5e4:	df 91       	pop	r29
 5e6:	cf 91       	pop	r28
 5e8:	1f 91       	pop	r17
 5ea:	0f 91       	pop	r16
 5ec:	08 95       	ret

000005ee <LCD_voidWriteString>:
void LCD_voidWriteString(u8 *string)
{
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	ec 01       	movw	r28, r24

	while(*string!='\0')
 5f4:	88 81       	ld	r24, Y
 5f6:	88 23       	and	r24, r24
 5f8:	31 f0       	breq	.+12     	; 0x606 <LCD_voidWriteString+0x18>
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
		LCD_voidWriteCharacter(msg[i]);
	}
	  LCD_voidSendCommand(0x80); //shift back to DDRAM location 0
}
void LCD_voidWriteString(u8 *string)
 5fa:	21 96       	adiw	r28, 0x01	; 1
{

	while(*string!='\0')
	{
		LCD_voidWriteCharacter(*string);
 5fc:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_voidWriteCharacter>
	  LCD_voidSendCommand(0x80); //shift back to DDRAM location 0
}
void LCD_voidWriteString(u8 *string)
{

	while(*string!='\0')
 600:	89 91       	ld	r24, Y+
 602:	88 23       	and	r24, r24
 604:	d9 f7       	brne	.-10     	; 0x5fc <LCD_voidWriteString+0xe>
		string++;

	}


}
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	08 95       	ret

0000060c <LCD_voidSetCursor>:
	LCD_voidSendCommand(ARR_LOC_ROWS[x-1]+(y-1));
}
*/
void LCD_voidSetCursor(u8 x, u8 y)
{
	if((x<20)&&(y<4))
 60c:	84 31       	cpi	r24, 0x14	; 20
 60e:	a8 f4       	brcc	.+42     	; 0x63a <LCD_voidSetCursor+0x2e>
 610:	64 30       	cpi	r22, 0x04	; 4
 612:	98 f4       	brcc	.+38     	; 0x63a <LCD_voidSetCursor+0x2e>
	{
		
		u8 loc_address;
		switch(y)
 614:	61 30       	cpi	r22, 0x01	; 1
 616:	39 f0       	breq	.+14     	; 0x626 <LCD_voidSetCursor+0x1a>
 618:	61 30       	cpi	r22, 0x01	; 1
 61a:	58 f0       	brcs	.+22     	; 0x632 <LCD_voidSetCursor+0x26>
 61c:	62 30       	cpi	r22, 0x02	; 2
 61e:	29 f0       	breq	.+10     	; 0x62a <LCD_voidSetCursor+0x1e>
 620:	63 30       	cpi	r22, 0x03	; 3
 622:	41 f4       	brne	.+16     	; 0x634 <LCD_voidSetCursor+0x28>
 624:	04 c0       	rjmp	.+8      	; 0x62e <LCD_voidSetCursor+0x22>
		{
			case 0:loc_address=0x80+0x00; break;
			case 1:loc_address=0x80+0x40; break;
 626:	90 ec       	ldi	r25, 0xC0	; 192
 628:	05 c0       	rjmp	.+10     	; 0x634 <LCD_voidSetCursor+0x28>
			case 2:loc_address=0x80+0x14; break;						
 62a:	94 e9       	ldi	r25, 0x94	; 148
 62c:	03 c0       	rjmp	.+6      	; 0x634 <LCD_voidSetCursor+0x28>
			case 3:loc_address=0x80+0x54; break;			
 62e:	94 ed       	ldi	r25, 0xD4	; 212
 630:	01 c0       	rjmp	.+2      	; 0x634 <LCD_voidSetCursor+0x28>
	{
		
		u8 loc_address;
		switch(y)
		{
			case 0:loc_address=0x80+0x00; break;
 632:	90 e8       	ldi	r25, 0x80	; 128
			case 1:loc_address=0x80+0x40; break;
			case 2:loc_address=0x80+0x14; break;						
			case 3:loc_address=0x80+0x54; break;			
		}	
		LCD_voidSendCommand(loc_address+x);   
 634:	89 0f       	add	r24, r25
 636:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_voidSendCommand>
 63a:	08 95       	ret

0000063c <LCD_voidClear>:
		}		
}

void LCD_voidClear(void)
{
	LCD_voidSendCommand(0x01);
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_voidSendCommand>
}
 642:	08 95       	ret

00000644 <Lcd_voidShiftRight>:

void Lcd_voidShiftRight(void)
{
	LCD_voidSendCommand(0x1C);
 644:	8c e1       	ldi	r24, 0x1C	; 28
 646:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_voidSendCommand>
	//LCD_voidSendCommand(0x14);   //INCREAMENT CURSOR TO RIGHT
}
 64a:	08 95       	ret

0000064c <Lcd_voidShiftLeft>:

void Lcd_voidShiftLeft(void)
{
	LCD_voidSendCommand(0x18);
 64c:	88 e1       	ldi	r24, 0x18	; 24
 64e:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_voidSendCommand>
}
 652:	08 95       	ret

00000654 <main>:
  0x1F
};
u16 ADC_RAED=0;
int main(void)
{
	ADC_voidInit();
 654:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidInit>
	LCD_voidInit(); 
 658:	0e 94 8e 02 	call	0x51c	; 0x51c <LCD_voidInit>
	LCD_voidCustomChar(0, customChar1); 
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	6c e8       	ldi	r22, 0x8C	; 140
 662:	70 e0       	ldi	r23, 0x00	; 0
 664:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_voidCustomChar>
	LCD_voidCustomChar(1, customChar2); 
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	64 e8       	ldi	r22, 0x84	; 132
 66e:	70 e0       	ldi	r23, 0x00	; 0
 670:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_voidCustomChar>
    LCD_voidCustomChar(2, customChar3); 
 674:	82 e0       	ldi	r24, 0x02	; 2
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	6c e7       	ldi	r22, 0x7C	; 124
 67a:	70 e0       	ldi	r23, 0x00	; 0
 67c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_voidCustomChar>
	LCD_voidCustomChar(3, customChar4); 			  
 680:	83 e0       	ldi	r24, 0x03	; 3
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	64 e7       	ldi	r22, 0x74	; 116
 686:	70 e0       	ldi	r23, 0x00	; 0
 688:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_voidCustomChar>
	//LCD_voidCustomChar(1, customChar2); 	
	ADC_read(ADC_CH0,&ADC_RAED);
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	64 e9       	ldi	r22, 0x94	; 148
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	0e 94 51 00 	call	0xa2	; 0xa2 <ADC_read>
	LCD_voidSetCursor(0,1);
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	61 e0       	ldi	r22, 0x01	; 1
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_voidSetCursor>
    LCD_voidWriteString("VOLUME");
 6a2:	84 e6       	ldi	r24, 0x64	; 100
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LCD_voidWriteString>
	u16 last_read=0;
 6aa:	c0 e0       	ldi	r28, 0x00	; 0
 6ac:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
	 ADC_read(ADC_CH0,&ADC_RAED);
 6ae:	04 e9       	ldi	r16, 0x94	; 148
 6b0:	10 e0       	ldi	r17, 0x00	; 0
		}
		if(ADC_RAED>=600)//&&ADC_RAED<900)
		{
			LCD_voidSetCursor(11,1);
			LCD_voidWriteCharacter(2); 	
			LCD_voidWriteString(" ");	
 6b2:	0f 2e       	mov	r0, r31
 6b4:	f2 e7       	ldi	r31, 0x72	; 114
 6b6:	ef 2e       	mov	r14, r31
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	ff 2e       	mov	r15, r31
 6bc:	f0 2d       	mov	r31, r0
		}
		if(ADC_RAED>=300)//&&ADC_RAED<=600)
		{
			LCD_voidSetCursor(10,1);
			LCD_voidWriteCharacter(1); 	
			LCD_voidWriteString("  ");
 6be:	0f 2e       	mov	r0, r31
 6c0:	ff e6       	ldi	r31, 0x6F	; 111
 6c2:	cf 2e       	mov	r12, r31
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	df 2e       	mov	r13, r31
 6c8:	f0 2d       	mov	r31, r0
		if(ADC_RAED>0)//&&ADC_RAED<300)
		{
			LCD_voidSetCursor(9,1);
			LCD_voidWriteCharacter(0); 	
			//LCD_voidWriteCharacter(0); 
			LCD_voidWriteString("   ");	
 6ca:	0f 2e       	mov	r0, r31
 6cc:	fb e6       	ldi	r31, 0x6B	; 107
 6ce:	af 2e       	mov	r10, r31
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	bf 2e       	mov	r11, r31
 6d4:	f0 2d       	mov	r31, r0
	LCD_voidSetCursor(0,1);
    LCD_voidWriteString("VOLUME");
	u16 last_read=0;
	while (1)
	{
	 ADC_read(ADC_CH0,&ADC_RAED);
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	b8 01       	movw	r22, r16
 6da:	0e 94 51 00 	call	0xa2	; 0xa2 <ADC_read>
	 if (last_read==ADC_RAED)
 6de:	80 91 94 00 	lds	r24, 0x0094
 6e2:	90 91 95 00 	lds	r25, 0x0095
 6e6:	c8 17       	cp	r28, r24
 6e8:	d9 07       	cpc	r29, r25
 6ea:	a9 f3       	breq	.-22     	; 0x6d6 <main+0x82>
	 {
		
	 } 
	 else
	 {	 
		if(ADC_RAED>0)//&&ADC_RAED<300)
 6ec:	00 97       	sbiw	r24, 0x00	; 0
 6ee:	69 f0       	breq	.+26     	; 0x70a <main+0xb6>
		{
			LCD_voidSetCursor(9,1);
 6f0:	89 e0       	ldi	r24, 0x09	; 9
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	61 e0       	ldi	r22, 0x01	; 1
 6f6:	70 e0       	ldi	r23, 0x00	; 0
 6f8:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_voidSetCursor>
			LCD_voidWriteCharacter(0); 	
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_voidWriteCharacter>
			//LCD_voidWriteCharacter(0); 
			LCD_voidWriteString("   ");	
 704:	c5 01       	movw	r24, r10
 706:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LCD_voidWriteString>
		}
		if(ADC_RAED>=300)//&&ADC_RAED<=600)
 70a:	80 91 94 00 	lds	r24, 0x0094
 70e:	90 91 95 00 	lds	r25, 0x0095
 712:	21 e0       	ldi	r18, 0x01	; 1
 714:	8c 32       	cpi	r24, 0x2C	; 44
 716:	92 07       	cpc	r25, r18
 718:	68 f0       	brcs	.+26     	; 0x734 <main+0xe0>
		{
			LCD_voidSetCursor(10,1);
 71a:	8a e0       	ldi	r24, 0x0A	; 10
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	61 e0       	ldi	r22, 0x01	; 1
 720:	70 e0       	ldi	r23, 0x00	; 0
 722:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_voidSetCursor>
			LCD_voidWriteCharacter(1); 	
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_voidWriteCharacter>
			LCD_voidWriteString("  ");
 72e:	c6 01       	movw	r24, r12
 730:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LCD_voidWriteString>
		}
		if(ADC_RAED>=600)//&&ADC_RAED<900)
 734:	80 91 94 00 	lds	r24, 0x0094
 738:	90 91 95 00 	lds	r25, 0x0095
 73c:	22 e0       	ldi	r18, 0x02	; 2
 73e:	88 35       	cpi	r24, 0x58	; 88
 740:	92 07       	cpc	r25, r18
 742:	68 f0       	brcs	.+26     	; 0x75e <main+0x10a>
		{
			LCD_voidSetCursor(11,1);
 744:	8b e0       	ldi	r24, 0x0B	; 11
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	61 e0       	ldi	r22, 0x01	; 1
 74a:	70 e0       	ldi	r23, 0x00	; 0
 74c:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_voidSetCursor>
			LCD_voidWriteCharacter(2); 	
 750:	82 e0       	ldi	r24, 0x02	; 2
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_voidWriteCharacter>
			LCD_voidWriteString(" ");	
 758:	c7 01       	movw	r24, r14
 75a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LCD_voidWriteString>
		}
		if(ADC_RAED>=900)//&&ADC_RAED<1024)
 75e:	80 91 94 00 	lds	r24, 0x0094
 762:	90 91 95 00 	lds	r25, 0x0095
 766:	23 e0       	ldi	r18, 0x03	; 3
 768:	84 38       	cpi	r24, 0x84	; 132
 76a:	92 07       	cpc	r25, r18
 76c:	50 f0       	brcs	.+20     	; 0x782 <main+0x12e>
		{
			LCD_voidSetCursor(12,1);
 76e:	8c e0       	ldi	r24, 0x0C	; 12
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	61 e0       	ldi	r22, 0x01	; 1
 774:	70 e0       	ldi	r23, 0x00	; 0
 776:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_voidSetCursor>
			LCD_voidWriteCharacter(3); 	
 77a:	83 e0       	ldi	r24, 0x03	; 3
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_voidWriteCharacter>
		}
		last_read=ADC_RAED;				
 782:	c0 91 94 00 	lds	r28, 0x0094
 786:	d0 91 95 00 	lds	r29, 0x0095
 78a:	a5 cf       	rjmp	.-182    	; 0x6d6 <main+0x82>

0000078c <Port_Init>:
    #define PIN_IN_PULLUP 0

    #undef  PIN_OUT_LOW
    #define PIN_OUT_LOW 1

    DDRA=CONC(PORTA_PIN7_MODE,PORTA_PIN6_MODE,PORTA_PIN5_MODE,PORTA_PIN4_MODE,PORTA_PIN3_MODE,PORTA_PIN2_MODE,PORTA_PIN1_MODE,PORTA_PIN0_MODE);
 78c:	83 e0       	ldi	r24, 0x03	; 3
 78e:	8a bb       	out	0x1a, r24	; 26
    DDRB=CONC(PORTA_PIN7_MODE,PORTB_PIN6_MODE,PORTB_PIN5_MODE,PORTB_PIN4_MODE,PORTB_PIN3_MODE,PORTB_PIN2_MODE,PORTA_PIN1_MODE,PORTB_PIN0_MODE);
 790:	8f e7       	ldi	r24, 0x7F	; 127
 792:	87 bb       	out	0x17, r24	; 23
    DDRC=CONC(PORTC_PIN7_MODE,PORTC_PIN6_MODE,PORTC_PIN5_MODE,PORTC_PIN4_MODE,PORTC_PIN3_MODE,PORTC_PIN2_MODE,PORTC_PIN1_MODE,PORTC_PIN0_MODE);
 794:	14 ba       	out	0x14, r1	; 20
    DDRD=CONC(PORTD_PIN7_MODE,PORTD_PIN6_MODE,PORTD_PIN5_MODE,PORTD_PIN4_MODE,PORTD_PIN3_MODE,PORTD_PIN2_MODE,PORTD_PIN1_MODE,PORTD_PIN0_MODE);
 796:	11 ba       	out	0x11, r1	; 17
    #define PIN_IN_FLOAT 0

    #undef PIN_IN_PULLUP
    #define PIN_IN_PULLUP 1
	
    PORTA=CONC(PORTA_PIN7_MODE,PORTA_PIN6_MODE,PORTA_PIN5_MODE,PORTA_PIN4_MODE,PORTA_PIN3_MODE,PORTA_PIN2_MODE,PORTA_PIN1_MODE,PORTA_PIN0_MODE);
 798:	89 e0       	ldi	r24, 0x09	; 9
 79a:	8b bb       	out	0x1b, r24	; 27
    PORTB=CONC(PORTA_PIN7_MODE,PORTB_PIN6_MODE,PORTB_PIN5_MODE,PORTB_PIN4_MODE,PORTB_PIN3_MODE,PORTB_PIN2_MODE,PORTA_PIN1_MODE,PORTB_PIN0_MODE);
 79c:	18 ba       	out	0x18, r1	; 24
    PORTC=CONC(PORTC_PIN7_MODE,PORTC_PIN6_MODE,PORTC_PIN5_MODE,PORTC_PIN4_MODE,PORTC_PIN3_MODE,PORTC_PIN2_MODE,PORTC_PIN1_MODE,PORTC_PIN0_MODE);
 79e:	15 ba       	out	0x15, r1	; 21
    PORTD=CONC(PORTD_PIN7_MODE,PORTD_PIN6_MODE,PORTD_PIN5_MODE,PORTD_PIN4_MODE,PORTD_PIN3_MODE,PORTD_PIN2_MODE,PORTD_PIN1_MODE,PORTD_PIN0_MODE);
 7a0:	12 ba       	out	0x12, r1	; 18
	#define PIN_IN_FLOAT 2
	#undef PIN_IN_PULLUP
	#define PIN_IN_PULLUP 3	


}
 7a2:	08 95       	ret

000007a4 <Port_setPinDirection>:
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
if (pin_id>31)  /* in case not valid id pin */
 7a4:	80 32       	cpi	r24, 0x20	; 32
 7a6:	08 f0       	brcs	.+2      	; 0x7aa <Port_setPinDirection+0x6>
 7a8:	08 95       	ret
{
	ERROR_LOC_RET=PIN_NUMBER_ERROR;
} 
else           /*in case valid id pin */
{	
    u8 loc_pin_id =pin_id % 8;
 7aa:	98 2f       	mov	r25, r24
 7ac:	97 70       	andi	r25, 0x07	; 7
    u8 loc_port_num=pin_id/8;
 7ae:	86 95       	lsr	r24
 7b0:	86 95       	lsr	r24
 7b2:	86 95       	lsr	r24
    switch(loc_port_num)
 7b4:	81 30       	cpi	r24, 0x01	; 1
 7b6:	59 f1       	breq	.+86     	; 0x80e <Port_setPinDirection+0x6a>
 7b8:	81 30       	cpi	r24, 0x01	; 1
 7ba:	38 f0       	brcs	.+14     	; 0x7ca <Port_setPinDirection+0x26>
 7bc:	82 30       	cpi	r24, 0x02	; 2
 7be:	09 f4       	brne	.+2      	; 0x7c2 <Port_setPinDirection+0x1e>
 7c0:	48 c0       	rjmp	.+144    	; 0x852 <Port_setPinDirection+0xae>
 7c2:	83 30       	cpi	r24, 0x03	; 3
 7c4:	09 f0       	breq	.+2      	; 0x7c8 <Port_setPinDirection+0x24>
 7c6:	87 c0       	rjmp	.+270    	; 0x8d6 <__stack+0x77>
 7c8:	65 c0       	rjmp	.+202    	; 0x894 <__stack+0x35>
    {
        case u8PORTA:
        if(pin_direction==PIN_OUTPUT)
 7ca:	61 30       	cpi	r22, 0x01	; 1
 7cc:	71 f4       	brne	.+28     	; 0x7ea <Port_setPinDirection+0x46>
        {
            SET_BIT(DDRA,loc_pin_id);   
 7ce:	4a b3       	in	r20, 0x1a	; 26
 7d0:	21 e0       	ldi	r18, 0x01	; 1
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	b9 01       	movw	r22, r18
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <Port_setPinDirection+0x38>
 7d8:	66 0f       	add	r22, r22
 7da:	77 1f       	adc	r23, r23
 7dc:	9a 95       	dec	r25
 7de:	e2 f7       	brpl	.-8      	; 0x7d8 <Port_setPinDirection+0x34>
 7e0:	cb 01       	movw	r24, r22
 7e2:	84 2b       	or	r24, r20
 7e4:	8a bb       	out	0x1a, r24	; 26


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	08 95       	ret
        case u8PORTA:
        if(pin_direction==PIN_OUTPUT)
        {
            SET_BIT(DDRA,loc_pin_id);   
        }
        else if(pin_direction==PIN_INPUT)
 7ea:	66 23       	and	r22, r22
 7ec:	09 f0       	breq	.+2      	; 0x7f0 <Port_setPinDirection+0x4c>
 7ee:	75 c0       	rjmp	.+234    	; 0x8da <__stack+0x7b>
        {
            CLR_BIT(DDRA,loc_pin_id);
 7f0:	4a b3       	in	r20, 0x1a	; 26
 7f2:	21 e0       	ldi	r18, 0x01	; 1
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	b9 01       	movw	r22, r18
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <Port_setPinDirection+0x5a>
 7fa:	66 0f       	add	r22, r22
 7fc:	77 1f       	adc	r23, r23
 7fe:	9a 95       	dec	r25
 800:	e2 f7       	brpl	.-8      	; 0x7fa <Port_setPinDirection+0x56>
 802:	cb 01       	movw	r24, r22
 804:	80 95       	com	r24
 806:	84 23       	and	r24, r20
 808:	8a bb       	out	0x1a, r24	; 26


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	08 95       	ret
        {
            CLR_BIT(DDRA,loc_pin_id);
        } 
		break;     
        case u8PORTB:
        if(pin_direction==PIN_OUTPUT)
 80e:	61 30       	cpi	r22, 0x01	; 1
 810:	71 f4       	brne	.+28     	; 0x82e <Port_setPinDirection+0x8a>
        {
           SET_BIT(DDRB,loc_pin_id);
 812:	47 b3       	in	r20, 0x17	; 23
 814:	21 e0       	ldi	r18, 0x01	; 1
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	b9 01       	movw	r22, r18
 81a:	02 c0       	rjmp	.+4      	; 0x820 <Port_setPinDirection+0x7c>
 81c:	66 0f       	add	r22, r22
 81e:	77 1f       	adc	r23, r23
 820:	9a 95       	dec	r25
 822:	e2 f7       	brpl	.-8      	; 0x81c <Port_setPinDirection+0x78>
 824:	cb 01       	movw	r24, r22
 826:	84 2b       	or	r24, r20
 828:	87 bb       	out	0x17, r24	; 23


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	08 95       	ret
        case u8PORTB:
        if(pin_direction==PIN_OUTPUT)
        {
           SET_BIT(DDRB,loc_pin_id);
        }
        else if(pin_direction==PIN_INPUT)
 82e:	66 23       	and	r22, r22
 830:	09 f0       	breq	.+2      	; 0x834 <Port_setPinDirection+0x90>
 832:	55 c0       	rjmp	.+170    	; 0x8de <__stack+0x7f>
        {
            CLR_BIT(DDRB,loc_pin_id);
 834:	47 b3       	in	r20, 0x17	; 23
 836:	21 e0       	ldi	r18, 0x01	; 1
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	b9 01       	movw	r22, r18
 83c:	02 c0       	rjmp	.+4      	; 0x842 <Port_setPinDirection+0x9e>
 83e:	66 0f       	add	r22, r22
 840:	77 1f       	adc	r23, r23
 842:	9a 95       	dec	r25
 844:	e2 f7       	brpl	.-8      	; 0x83e <Port_setPinDirection+0x9a>
 846:	cb 01       	movw	r24, r22
 848:	80 95       	com	r24
 84a:	84 23       	and	r24, r20
 84c:	87 bb       	out	0x17, r24	; 23


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	08 95       	ret
            CLR_BIT(DDRB,loc_pin_id);
        }
        break;
        case u8PORTC:

        if(pin_direction==PIN_OUTPUT)
 852:	61 30       	cpi	r22, 0x01	; 1
 854:	71 f4       	brne	.+28     	; 0x872 <__stack+0x13>
        {
            SET_BIT(DDRC,loc_pin_id);
 856:	44 b3       	in	r20, 0x14	; 20
 858:	21 e0       	ldi	r18, 0x01	; 1
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	b9 01       	movw	r22, r18
 85e:	02 c0       	rjmp	.+4      	; 0x864 <__stack+0x5>
 860:	66 0f       	add	r22, r22
 862:	77 1f       	adc	r23, r23
 864:	9a 95       	dec	r25
 866:	e2 f7       	brpl	.-8      	; 0x860 <__stack+0x1>
 868:	cb 01       	movw	r24, r22
 86a:	84 2b       	or	r24, r20
 86c:	84 bb       	out	0x14, r24	; 20


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	08 95       	ret

        if(pin_direction==PIN_OUTPUT)
        {
            SET_BIT(DDRC,loc_pin_id);
        }
        else if(pin_direction==PIN_INPUT)
 872:	66 23       	and	r22, r22
 874:	b1 f5       	brne	.+108    	; 0x8e2 <__stack+0x83>
        {
            CLR_BIT(DDRC,loc_pin_id);
 876:	44 b3       	in	r20, 0x14	; 20
 878:	21 e0       	ldi	r18, 0x01	; 1
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	b9 01       	movw	r22, r18
 87e:	02 c0       	rjmp	.+4      	; 0x884 <__stack+0x25>
 880:	66 0f       	add	r22, r22
 882:	77 1f       	adc	r23, r23
 884:	9a 95       	dec	r25
 886:	e2 f7       	brpl	.-8      	; 0x880 <__stack+0x21>
 888:	cb 01       	movw	r24, r22
 88a:	80 95       	com	r24
 88c:	84 23       	and	r24, r20
 88e:	84 bb       	out	0x14, r24	; 20


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	08 95       	ret
        {
            CLR_BIT(DDRC,loc_pin_id);
        }
        break;
        case u8PORTD:
        if(pin_direction==PIN_OUTPUT)
 894:	61 30       	cpi	r22, 0x01	; 1
 896:	71 f4       	brne	.+28     	; 0x8b4 <__stack+0x55>
        {
            SET_BIT(DDRD,loc_pin_id);
 898:	41 b3       	in	r20, 0x11	; 17
 89a:	21 e0       	ldi	r18, 0x01	; 1
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	b9 01       	movw	r22, r18
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <__stack+0x47>
 8a2:	66 0f       	add	r22, r22
 8a4:	77 1f       	adc	r23, r23
 8a6:	9a 95       	dec	r25
 8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <__stack+0x43>
 8aa:	cb 01       	movw	r24, r22
 8ac:	84 2b       	or	r24, r20
 8ae:	81 bb       	out	0x11, r24	; 17


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
 8b0:	80 e0       	ldi	r24, 0x00	; 0
 8b2:	08 95       	ret
        case u8PORTD:
        if(pin_direction==PIN_OUTPUT)
        {
            SET_BIT(DDRD,loc_pin_id);
        }
        else if(pin_direction==PIN_INPUT)
 8b4:	66 23       	and	r22, r22
 8b6:	b9 f4       	brne	.+46     	; 0x8e6 <__stack+0x87>
        {
            CLR_BIT(DDRD,loc_pin_id);
 8b8:	41 b3       	in	r20, 0x11	; 17
 8ba:	21 e0       	ldi	r18, 0x01	; 1
 8bc:	30 e0       	ldi	r19, 0x00	; 0
 8be:	b9 01       	movw	r22, r18
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <__stack+0x67>
 8c2:	66 0f       	add	r22, r22
 8c4:	77 1f       	adc	r23, r23
 8c6:	9a 95       	dec	r25
 8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <__stack+0x63>
 8ca:	cb 01       	movw	r24, r22
 8cc:	80 95       	com	r24
 8ce:	84 23       	and	r24, r20
 8d0:	81 bb       	out	0x11, r24	; 17


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	08 95       	ret
        {
            CLR_BIT(DDRD,loc_pin_id);
        }
        break;
    default:
	 ERROR_LOC_RET =PIN_DIR_ERROR;
 8d6:	82 e0       	ldi	r24, 0x02	; 2
 8d8:	08 95       	ret


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	08 95       	ret
 8de:	80 e0       	ldi	r24, 0x00	; 0
 8e0:	08 95       	ret
 8e2:	80 e0       	ldi	r24, 0x00	; 0
 8e4:	08 95       	ret
 8e6:	80 e0       	ldi	r24, 0x00	; 0
	 ERROR_LOC_RET =PIN_DIR_ERROR;
		
    }
 return ERROR_LOC_RET;   
}
}
 8e8:	08 95       	ret

000008ea <Port_SetPinMode>:
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
if (pin_id>31)  /*in case not valid pin id */
 8ea:	80 32       	cpi	r24, 0x20	; 32
 8ec:	08 f0       	brcs	.+2      	; 0x8f0 <Port_SetPinMode+0x6>
 8ee:	55 c1       	rjmp	.+682    	; 0xb9a <Port_SetPinMode+0x2b0>
{
	ERROR_LOC_RET=PIN_NUMBER_ERROR;
}
else	 /*case valid id pin*/
{
    u8 loc_Pin_id= pin_id % 8;
 8f0:	98 2f       	mov	r25, r24
 8f2:	97 70       	andi	r25, 0x07	; 7
    u8 loc_port_num=pin_id/8;
 8f4:	86 95       	lsr	r24
 8f6:	86 95       	lsr	r24
 8f8:	86 95       	lsr	r24
    switch(loc_port_num)
 8fa:	81 30       	cpi	r24, 0x01	; 1
 8fc:	09 f4       	brne	.+2      	; 0x900 <Port_SetPinMode+0x16>
 8fe:	5a c0       	rjmp	.+180    	; 0x9b4 <Port_SetPinMode+0xca>
 900:	81 30       	cpi	r24, 0x01	; 1
 902:	38 f0       	brcs	.+14     	; 0x912 <Port_SetPinMode+0x28>
 904:	82 30       	cpi	r24, 0x02	; 2
 906:	09 f4       	brne	.+2      	; 0x90a <Port_SetPinMode+0x20>
 908:	a6 c0       	rjmp	.+332    	; 0xa56 <Port_SetPinMode+0x16c>
 90a:	83 30       	cpi	r24, 0x03	; 3
 90c:	09 f0       	breq	.+2      	; 0x910 <Port_SetPinMode+0x26>
 90e:	47 c1       	rjmp	.+654    	; 0xb9e <Port_SetPinMode+0x2b4>
 910:	f3 c0       	rjmp	.+486    	; 0xaf8 <Port_SetPinMode+0x20e>
    {
        case u8PORTA:
          switch(pin_mode){
 912:	61 30       	cpi	r22, 0x01	; 1
 914:	41 f0       	breq	.+16     	; 0x926 <Port_SetPinMode+0x3c>
 916:	61 30       	cpi	r22, 0x01	; 1
 918:	a0 f0       	brcs	.+40     	; 0x942 <Port_SetPinMode+0x58>
 91a:	62 30       	cpi	r22, 0x02	; 2
 91c:	29 f1       	breq	.+74     	; 0x968 <Port_SetPinMode+0x7e>
 91e:	63 30       	cpi	r22, 0x03	; 3
 920:	09 f0       	breq	.+2      	; 0x924 <Port_SetPinMode+0x3a>
 922:	3f c1       	rjmp	.+638    	; 0xba2 <Port_SetPinMode+0x2b8>
 924:	34 c0       	rjmp	.+104    	; 0x98e <Port_SetPinMode+0xa4>
            case PIN_OUT_HIGH:
			SET_BIT(DDRA,loc_Pin_id);
 926:	8a b3       	in	r24, 0x1a	; 26
 928:	21 e0       	ldi	r18, 0x01	; 1
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	01 c0       	rjmp	.+2      	; 0x930 <Port_SetPinMode+0x46>
 92e:	22 0f       	add	r18, r18
 930:	9a 95       	dec	r25
 932:	ea f7       	brpl	.-6      	; 0x92e <Port_SetPinMode+0x44>
 934:	82 2b       	or	r24, r18
 936:	8a bb       	out	0x1a, r24	; 26
			SET_BIT(PORTA,loc_Pin_id);
 938:	8b b3       	in	r24, 0x1b	; 27
 93a:	28 2b       	or	r18, r24
 93c:	2b bb       	out	0x1b, r18	; 27
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
 93e:	80 e0       	ldi	r24, 0x00	; 0
        case u8PORTA:
          switch(pin_mode){
            case PIN_OUT_HIGH:
			SET_BIT(DDRA,loc_Pin_id);
			SET_BIT(PORTA,loc_Pin_id);
			break;
 940:	08 95       	ret
			case  PIN_OUT_LOW:
			SET_BIT(DDRA,loc_Pin_id);
 942:	4a b3       	in	r20, 0x1a	; 26
 944:	21 e0       	ldi	r18, 0x01	; 1
 946:	30 e0       	ldi	r19, 0x00	; 0
 948:	b9 01       	movw	r22, r18
 94a:	02 c0       	rjmp	.+4      	; 0x950 <Port_SetPinMode+0x66>
 94c:	66 0f       	add	r22, r22
 94e:	77 1f       	adc	r23, r23
 950:	9a 95       	dec	r25
 952:	e2 f7       	brpl	.-8      	; 0x94c <Port_SetPinMode+0x62>
 954:	cb 01       	movw	r24, r22
 956:	94 2f       	mov	r25, r20
 958:	98 2b       	or	r25, r24
 95a:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,loc_Pin_id);
 95c:	2b b3       	in	r18, 0x1b	; 27
 95e:	80 95       	com	r24
 960:	82 23       	and	r24, r18
 962:	8b bb       	out	0x1b, r24	; 27
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
 964:	80 e0       	ldi	r24, 0x00	; 0
			SET_BIT(PORTA,loc_Pin_id);
			break;
			case  PIN_OUT_LOW:
			SET_BIT(DDRA,loc_Pin_id);
			CLR_BIT(PORTA,loc_Pin_id);
			break;	
 966:	08 95       	ret
            case   PIN_IN_FLOAT:
		    CLR_BIT(DDRA,loc_Pin_id);
 968:	4a b3       	in	r20, 0x1a	; 26
 96a:	21 e0       	ldi	r18, 0x01	; 1
 96c:	30 e0       	ldi	r19, 0x00	; 0
 96e:	b9 01       	movw	r22, r18
 970:	02 c0       	rjmp	.+4      	; 0x976 <Port_SetPinMode+0x8c>
 972:	66 0f       	add	r22, r22
 974:	77 1f       	adc	r23, r23
 976:	9a 95       	dec	r25
 978:	e2 f7       	brpl	.-8      	; 0x972 <Port_SetPinMode+0x88>
 97a:	cb 01       	movw	r24, r22
 97c:	80 95       	com	r24
 97e:	98 2f       	mov	r25, r24
 980:	94 23       	and	r25, r20
 982:	9a bb       	out	0x1a, r25	; 26
		    CLR_BIT(PORTA,loc_Pin_id);                     
 984:	9b b3       	in	r25, 0x1b	; 27
 986:	89 23       	and	r24, r25
 988:	8b bb       	out	0x1b, r24	; 27
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
 98a:	80 e0       	ldi	r24, 0x00	; 0
			CLR_BIT(PORTA,loc_Pin_id);
			break;	
            case   PIN_IN_FLOAT:
		    CLR_BIT(DDRA,loc_Pin_id);
		    CLR_BIT(PORTA,loc_Pin_id);                     
		    break;
 98c:	08 95       	ret
            case   PIN_IN_PULLUP:
			CLR_BIT(DDRA,loc_Pin_id);
 98e:	4a b3       	in	r20, 0x1a	; 26
 990:	21 e0       	ldi	r18, 0x01	; 1
 992:	30 e0       	ldi	r19, 0x00	; 0
 994:	b9 01       	movw	r22, r18
 996:	02 c0       	rjmp	.+4      	; 0x99c <Port_SetPinMode+0xb2>
 998:	66 0f       	add	r22, r22
 99a:	77 1f       	adc	r23, r23
 99c:	9a 95       	dec	r25
 99e:	e2 f7       	brpl	.-8      	; 0x998 <Port_SetPinMode+0xae>
 9a0:	cb 01       	movw	r24, r22
 9a2:	96 2f       	mov	r25, r22
 9a4:	90 95       	com	r25
 9a6:	94 23       	and	r25, r20
 9a8:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,loc_Pin_id);                     
 9aa:	9b b3       	in	r25, 0x1b	; 27
 9ac:	89 2b       	or	r24, r25
 9ae:	8b bb       	out	0x1b, r24	; 27
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
 9b0:	80 e0       	ldi	r24, 0x00	; 0
		    CLR_BIT(PORTA,loc_Pin_id);                     
		    break;
            case   PIN_IN_PULLUP:
			CLR_BIT(DDRA,loc_Pin_id);
			SET_BIT(PORTA,loc_Pin_id);                     
			break;   				         
 9b2:	08 95       	ret
            default:
			ERROR_LOC_RET= PIN_MODE_ERROR;
		  }
		  break;			
        case u8PORTB:
          switch(pin_mode){		  
 9b4:	61 30       	cpi	r22, 0x01	; 1
 9b6:	41 f0       	breq	.+16     	; 0x9c8 <Port_SetPinMode+0xde>
 9b8:	61 30       	cpi	r22, 0x01	; 1
 9ba:	a0 f0       	brcs	.+40     	; 0x9e4 <Port_SetPinMode+0xfa>
 9bc:	62 30       	cpi	r22, 0x02	; 2
 9be:	29 f1       	breq	.+74     	; 0xa0a <Port_SetPinMode+0x120>
 9c0:	63 30       	cpi	r22, 0x03	; 3
 9c2:	09 f0       	breq	.+2      	; 0x9c6 <Port_SetPinMode+0xdc>
 9c4:	f0 c0       	rjmp	.+480    	; 0xba6 <Port_SetPinMode+0x2bc>
 9c6:	34 c0       	rjmp	.+104    	; 0xa30 <Port_SetPinMode+0x146>
            case PIN_OUT_HIGH:
            SET_BIT(DDRB,loc_Pin_id);
 9c8:	87 b3       	in	r24, 0x17	; 23
 9ca:	21 e0       	ldi	r18, 0x01	; 1
 9cc:	30 e0       	ldi	r19, 0x00	; 0
 9ce:	01 c0       	rjmp	.+2      	; 0x9d2 <Port_SetPinMode+0xe8>
 9d0:	22 0f       	add	r18, r18
 9d2:	9a 95       	dec	r25
 9d4:	ea f7       	brpl	.-6      	; 0x9d0 <Port_SetPinMode+0xe6>
 9d6:	82 2b       	or	r24, r18
 9d8:	87 bb       	out	0x17, r24	; 23
            SET_BIT(PORTB,loc_Pin_id);
 9da:	88 b3       	in	r24, 0x18	; 24
 9dc:	28 2b       	or	r18, r24
 9de:	28 bb       	out	0x18, r18	; 24
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
 9e0:	80 e0       	ldi	r24, 0x00	; 0
        case u8PORTB:
          switch(pin_mode){		  
            case PIN_OUT_HIGH:
            SET_BIT(DDRB,loc_Pin_id);
            SET_BIT(PORTB,loc_Pin_id);
            break;
 9e2:	08 95       	ret
           case PIN_OUT_LOW:
            SET_BIT(DDRB,loc_Pin_id);
 9e4:	47 b3       	in	r20, 0x17	; 23
 9e6:	21 e0       	ldi	r18, 0x01	; 1
 9e8:	30 e0       	ldi	r19, 0x00	; 0
 9ea:	b9 01       	movw	r22, r18
 9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <Port_SetPinMode+0x108>
 9ee:	66 0f       	add	r22, r22
 9f0:	77 1f       	adc	r23, r23
 9f2:	9a 95       	dec	r25
 9f4:	e2 f7       	brpl	.-8      	; 0x9ee <Port_SetPinMode+0x104>
 9f6:	cb 01       	movw	r24, r22
 9f8:	94 2f       	mov	r25, r20
 9fa:	98 2b       	or	r25, r24
 9fc:	97 bb       	out	0x17, r25	; 23
            CLR_BIT(PORTB,loc_Pin_id);
 9fe:	28 b3       	in	r18, 0x18	; 24
 a00:	80 95       	com	r24
 a02:	82 23       	and	r24, r18
 a04:	88 bb       	out	0x18, r24	; 24
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
 a06:	80 e0       	ldi	r24, 0x00	; 0
            SET_BIT(PORTB,loc_Pin_id);
            break;
           case PIN_OUT_LOW:
            SET_BIT(DDRB,loc_Pin_id);
            CLR_BIT(PORTB,loc_Pin_id);
            break;
 a08:	08 95       	ret
            case   PIN_IN_FLOAT:
            CLR_BIT(DDRB,loc_Pin_id);
 a0a:	47 b3       	in	r20, 0x17	; 23
 a0c:	21 e0       	ldi	r18, 0x01	; 1
 a0e:	30 e0       	ldi	r19, 0x00	; 0
 a10:	b9 01       	movw	r22, r18
 a12:	02 c0       	rjmp	.+4      	; 0xa18 <Port_SetPinMode+0x12e>
 a14:	66 0f       	add	r22, r22
 a16:	77 1f       	adc	r23, r23
 a18:	9a 95       	dec	r25
 a1a:	e2 f7       	brpl	.-8      	; 0xa14 <Port_SetPinMode+0x12a>
 a1c:	cb 01       	movw	r24, r22
 a1e:	80 95       	com	r24
 a20:	98 2f       	mov	r25, r24
 a22:	94 23       	and	r25, r20
 a24:	97 bb       	out	0x17, r25	; 23
            CLR_BIT(PORTB,loc_Pin_id);                     
 a26:	98 b3       	in	r25, 0x18	; 24
 a28:	89 23       	and	r24, r25
 a2a:	88 bb       	out	0x18, r24	; 24
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
 a2c:	80 e0       	ldi	r24, 0x00	; 0
            CLR_BIT(PORTB,loc_Pin_id);
            break;
            case   PIN_IN_FLOAT:
            CLR_BIT(DDRB,loc_Pin_id);
            CLR_BIT(PORTB,loc_Pin_id);                     
            break;
 a2e:	08 95       	ret
            case   PIN_IN_PULLUP:
            CLR_BIT(DDRB,loc_Pin_id);
 a30:	47 b3       	in	r20, 0x17	; 23
 a32:	21 e0       	ldi	r18, 0x01	; 1
 a34:	30 e0       	ldi	r19, 0x00	; 0
 a36:	b9 01       	movw	r22, r18
 a38:	02 c0       	rjmp	.+4      	; 0xa3e <Port_SetPinMode+0x154>
 a3a:	66 0f       	add	r22, r22
 a3c:	77 1f       	adc	r23, r23
 a3e:	9a 95       	dec	r25
 a40:	e2 f7       	brpl	.-8      	; 0xa3a <Port_SetPinMode+0x150>
 a42:	cb 01       	movw	r24, r22
 a44:	96 2f       	mov	r25, r22
 a46:	90 95       	com	r25
 a48:	94 23       	and	r25, r20
 a4a:	97 bb       	out	0x17, r25	; 23
            SET_BIT(PORTB,loc_Pin_id);                     
 a4c:	98 b3       	in	r25, 0x18	; 24
 a4e:	89 2b       	or	r24, r25
 a50:	88 bb       	out	0x18, r24	; 24
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
 a52:	80 e0       	ldi	r24, 0x00	; 0
            CLR_BIT(PORTB,loc_Pin_id);                     
            break;
            case   PIN_IN_PULLUP:
            CLR_BIT(DDRB,loc_Pin_id);
            SET_BIT(PORTB,loc_Pin_id);                     
            break;            
 a54:	08 95       	ret
            default:
			ERROR_LOC_RET=PIN_MODE_ERROR;			  
		  }
		  break;			
        case u8PORTC:
          switch(pin_mode){
 a56:	61 30       	cpi	r22, 0x01	; 1
 a58:	41 f0       	breq	.+16     	; 0xa6a <Port_SetPinMode+0x180>
 a5a:	61 30       	cpi	r22, 0x01	; 1
 a5c:	a0 f0       	brcs	.+40     	; 0xa86 <Port_SetPinMode+0x19c>
 a5e:	62 30       	cpi	r22, 0x02	; 2
 a60:	29 f1       	breq	.+74     	; 0xaac <Port_SetPinMode+0x1c2>
 a62:	63 30       	cpi	r22, 0x03	; 3
 a64:	09 f0       	breq	.+2      	; 0xa68 <Port_SetPinMode+0x17e>
 a66:	a1 c0       	rjmp	.+322    	; 0xbaa <Port_SetPinMode+0x2c0>
 a68:	34 c0       	rjmp	.+104    	; 0xad2 <Port_SetPinMode+0x1e8>
            case PIN_OUT_HIGH:
            SET_BIT(DDRC,loc_Pin_id);
 a6a:	84 b3       	in	r24, 0x14	; 20
 a6c:	21 e0       	ldi	r18, 0x01	; 1
 a6e:	30 e0       	ldi	r19, 0x00	; 0
 a70:	01 c0       	rjmp	.+2      	; 0xa74 <Port_SetPinMode+0x18a>
 a72:	22 0f       	add	r18, r18
 a74:	9a 95       	dec	r25
 a76:	ea f7       	brpl	.-6      	; 0xa72 <Port_SetPinMode+0x188>
 a78:	82 2b       	or	r24, r18
 a7a:	84 bb       	out	0x14, r24	; 20
            SET_BIT(PORTC,loc_Pin_id);
 a7c:	85 b3       	in	r24, 0x15	; 21
 a7e:	28 2b       	or	r18, r24
 a80:	25 bb       	out	0x15, r18	; 21
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
 a82:	80 e0       	ldi	r24, 0x00	; 0
        case u8PORTC:
          switch(pin_mode){
            case PIN_OUT_HIGH:
            SET_BIT(DDRC,loc_Pin_id);
            SET_BIT(PORTC,loc_Pin_id);
            break;
 a84:	08 95       	ret
		    case PIN_OUT_LOW:
            SET_BIT(DDRC,loc_Pin_id);
 a86:	44 b3       	in	r20, 0x14	; 20
 a88:	21 e0       	ldi	r18, 0x01	; 1
 a8a:	30 e0       	ldi	r19, 0x00	; 0
 a8c:	b9 01       	movw	r22, r18
 a8e:	02 c0       	rjmp	.+4      	; 0xa94 <Port_SetPinMode+0x1aa>
 a90:	66 0f       	add	r22, r22
 a92:	77 1f       	adc	r23, r23
 a94:	9a 95       	dec	r25
 a96:	e2 f7       	brpl	.-8      	; 0xa90 <Port_SetPinMode+0x1a6>
 a98:	cb 01       	movw	r24, r22
 a9a:	94 2f       	mov	r25, r20
 a9c:	98 2b       	or	r25, r24
 a9e:	94 bb       	out	0x14, r25	; 20
            CLR_BIT(PORTC,loc_Pin_id);
 aa0:	25 b3       	in	r18, 0x15	; 21
 aa2:	80 95       	com	r24
 aa4:	82 23       	and	r24, r18
 aa6:	85 bb       	out	0x15, r24	; 21
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
 aa8:	80 e0       	ldi	r24, 0x00	; 0
            SET_BIT(PORTC,loc_Pin_id);
            break;
		    case PIN_OUT_LOW:
            SET_BIT(DDRC,loc_Pin_id);
            CLR_BIT(PORTC,loc_Pin_id);
            break;
 aaa:	08 95       	ret
            case   PIN_IN_FLOAT:
            CLR_BIT(DDRC,loc_Pin_id);
 aac:	44 b3       	in	r20, 0x14	; 20
 aae:	21 e0       	ldi	r18, 0x01	; 1
 ab0:	30 e0       	ldi	r19, 0x00	; 0
 ab2:	b9 01       	movw	r22, r18
 ab4:	02 c0       	rjmp	.+4      	; 0xaba <Port_SetPinMode+0x1d0>
 ab6:	66 0f       	add	r22, r22
 ab8:	77 1f       	adc	r23, r23
 aba:	9a 95       	dec	r25
 abc:	e2 f7       	brpl	.-8      	; 0xab6 <Port_SetPinMode+0x1cc>
 abe:	cb 01       	movw	r24, r22
 ac0:	80 95       	com	r24
 ac2:	98 2f       	mov	r25, r24
 ac4:	94 23       	and	r25, r20
 ac6:	94 bb       	out	0x14, r25	; 20
            CLR_BIT(PORTC,loc_Pin_id);                     
 ac8:	95 b3       	in	r25, 0x15	; 21
 aca:	89 23       	and	r24, r25
 acc:	85 bb       	out	0x15, r24	; 21
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
 ace:	80 e0       	ldi	r24, 0x00	; 0
            CLR_BIT(PORTC,loc_Pin_id);
            break;
            case   PIN_IN_FLOAT:
            CLR_BIT(DDRC,loc_Pin_id);
            CLR_BIT(PORTC,loc_Pin_id);                     
            break;
 ad0:	08 95       	ret

            case   PIN_IN_PULLUP:
            CLR_BIT(DDRC,loc_Pin_id);
 ad2:	44 b3       	in	r20, 0x14	; 20
 ad4:	21 e0       	ldi	r18, 0x01	; 1
 ad6:	30 e0       	ldi	r19, 0x00	; 0
 ad8:	b9 01       	movw	r22, r18
 ada:	02 c0       	rjmp	.+4      	; 0xae0 <Port_SetPinMode+0x1f6>
 adc:	66 0f       	add	r22, r22
 ade:	77 1f       	adc	r23, r23
 ae0:	9a 95       	dec	r25
 ae2:	e2 f7       	brpl	.-8      	; 0xadc <Port_SetPinMode+0x1f2>
 ae4:	cb 01       	movw	r24, r22
 ae6:	96 2f       	mov	r25, r22
 ae8:	90 95       	com	r25
 aea:	94 23       	and	r25, r20
 aec:	94 bb       	out	0x14, r25	; 20
            SET_BIT(PORTC,loc_Pin_id);                     
 aee:	95 b3       	in	r25, 0x15	; 21
 af0:	89 2b       	or	r24, r25
 af2:	85 bb       	out	0x15, r24	; 21
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
 af4:	80 e0       	ldi	r24, 0x00	; 0
            break;

            case   PIN_IN_PULLUP:
            CLR_BIT(DDRC,loc_Pin_id);
            SET_BIT(PORTC,loc_Pin_id);                     
            break;            
 af6:	08 95       	ret
            default:
			ERROR_LOC_RET=PIN_MODE_ERROR;	
		  }
		  break;					 
        case u8PORTD:
          switch(pin_mode){
 af8:	61 30       	cpi	r22, 0x01	; 1
 afa:	41 f0       	breq	.+16     	; 0xb0c <Port_SetPinMode+0x222>
 afc:	61 30       	cpi	r22, 0x01	; 1
 afe:	a0 f0       	brcs	.+40     	; 0xb28 <Port_SetPinMode+0x23e>
 b00:	62 30       	cpi	r22, 0x02	; 2
 b02:	29 f1       	breq	.+74     	; 0xb4e <Port_SetPinMode+0x264>
 b04:	63 30       	cpi	r22, 0x03	; 3
 b06:	09 f0       	breq	.+2      	; 0xb0a <Port_SetPinMode+0x220>
 b08:	52 c0       	rjmp	.+164    	; 0xbae <Port_SetPinMode+0x2c4>
 b0a:	34 c0       	rjmp	.+104    	; 0xb74 <Port_SetPinMode+0x28a>
            case PIN_OUT_HIGH:
            SET_BIT(DDRD,loc_Pin_id);
 b0c:	81 b3       	in	r24, 0x11	; 17
 b0e:	21 e0       	ldi	r18, 0x01	; 1
 b10:	30 e0       	ldi	r19, 0x00	; 0
 b12:	01 c0       	rjmp	.+2      	; 0xb16 <Port_SetPinMode+0x22c>
 b14:	22 0f       	add	r18, r18
 b16:	9a 95       	dec	r25
 b18:	ea f7       	brpl	.-6      	; 0xb14 <Port_SetPinMode+0x22a>
 b1a:	82 2b       	or	r24, r18
 b1c:	81 bb       	out	0x11, r24	; 17
            SET_BIT(PORTD,loc_Pin_id);
 b1e:	82 b3       	in	r24, 0x12	; 18
 b20:	28 2b       	or	r18, r24
 b22:	22 bb       	out	0x12, r18	; 18
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
 b24:	80 e0       	ldi	r24, 0x00	; 0
        case u8PORTD:
          switch(pin_mode){
            case PIN_OUT_HIGH:
            SET_BIT(DDRD,loc_Pin_id);
            SET_BIT(PORTD,loc_Pin_id);
            break;
 b26:	08 95       	ret
            case PIN_OUT_LOW:
            SET_BIT(DDRD,loc_Pin_id);
 b28:	41 b3       	in	r20, 0x11	; 17
 b2a:	21 e0       	ldi	r18, 0x01	; 1
 b2c:	30 e0       	ldi	r19, 0x00	; 0
 b2e:	b9 01       	movw	r22, r18
 b30:	02 c0       	rjmp	.+4      	; 0xb36 <Port_SetPinMode+0x24c>
 b32:	66 0f       	add	r22, r22
 b34:	77 1f       	adc	r23, r23
 b36:	9a 95       	dec	r25
 b38:	e2 f7       	brpl	.-8      	; 0xb32 <Port_SetPinMode+0x248>
 b3a:	cb 01       	movw	r24, r22
 b3c:	94 2f       	mov	r25, r20
 b3e:	98 2b       	or	r25, r24
 b40:	91 bb       	out	0x11, r25	; 17
            CLR_BIT(PORTD,loc_Pin_id);
 b42:	22 b3       	in	r18, 0x12	; 18
 b44:	80 95       	com	r24
 b46:	82 23       	and	r24, r18
 b48:	82 bb       	out	0x12, r24	; 18
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
 b4a:	80 e0       	ldi	r24, 0x00	; 0
            SET_BIT(PORTD,loc_Pin_id);
            break;
            case PIN_OUT_LOW:
            SET_BIT(DDRD,loc_Pin_id);
            CLR_BIT(PORTD,loc_Pin_id);
            break;			
 b4c:	08 95       	ret
            case PIN_IN_FLOAT:
            CLR_BIT(DDRD,loc_Pin_id);
 b4e:	41 b3       	in	r20, 0x11	; 17
 b50:	21 e0       	ldi	r18, 0x01	; 1
 b52:	30 e0       	ldi	r19, 0x00	; 0
 b54:	b9 01       	movw	r22, r18
 b56:	02 c0       	rjmp	.+4      	; 0xb5c <Port_SetPinMode+0x272>
 b58:	66 0f       	add	r22, r22
 b5a:	77 1f       	adc	r23, r23
 b5c:	9a 95       	dec	r25
 b5e:	e2 f7       	brpl	.-8      	; 0xb58 <Port_SetPinMode+0x26e>
 b60:	cb 01       	movw	r24, r22
 b62:	80 95       	com	r24
 b64:	98 2f       	mov	r25, r24
 b66:	94 23       	and	r25, r20
 b68:	91 bb       	out	0x11, r25	; 17
            CLR_BIT(PORTD,loc_Pin_id);                     
 b6a:	92 b3       	in	r25, 0x12	; 18
 b6c:	89 23       	and	r24, r25
 b6e:	82 bb       	out	0x12, r24	; 18
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
 b70:	80 e0       	ldi	r24, 0x00	; 0
            CLR_BIT(PORTD,loc_Pin_id);
            break;			
            case PIN_IN_FLOAT:
            CLR_BIT(DDRD,loc_Pin_id);
            CLR_BIT(PORTD,loc_Pin_id);                     
            break;
 b72:	08 95       	ret
            case PIN_IN_PULLUP:
            CLR_BIT(DDRD,loc_Pin_id);
 b74:	41 b3       	in	r20, 0x11	; 17
 b76:	21 e0       	ldi	r18, 0x01	; 1
 b78:	30 e0       	ldi	r19, 0x00	; 0
 b7a:	b9 01       	movw	r22, r18
 b7c:	02 c0       	rjmp	.+4      	; 0xb82 <Port_SetPinMode+0x298>
 b7e:	66 0f       	add	r22, r22
 b80:	77 1f       	adc	r23, r23
 b82:	9a 95       	dec	r25
 b84:	e2 f7       	brpl	.-8      	; 0xb7e <Port_SetPinMode+0x294>
 b86:	cb 01       	movw	r24, r22
 b88:	96 2f       	mov	r25, r22
 b8a:	90 95       	com	r25
 b8c:	94 23       	and	r25, r20
 b8e:	91 bb       	out	0x11, r25	; 17
            SET_BIT(PORTD,loc_Pin_id);                     
 b90:	92 b3       	in	r25, 0x12	; 18
 b92:	89 2b       	or	r24, r25
 b94:	82 bb       	out	0x12, r24	; 18
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
 b96:	80 e0       	ldi	r24, 0x00	; 0
            CLR_BIT(PORTD,loc_Pin_id);                     
            break;
            case PIN_IN_PULLUP:
            CLR_BIT(DDRD,loc_Pin_id);
            SET_BIT(PORTD,loc_Pin_id);                     
            break;            
 b98:	08 95       	ret
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
if (pin_id>31)  /*in case not valid pin id */
{
	ERROR_LOC_RET=PIN_NUMBER_ERROR;
 b9a:	81 e0       	ldi	r24, 0x01	; 1
 b9c:	08 95       	ret
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
 b9e:	80 e0       	ldi	r24, 0x00	; 0
 ba0:	08 95       	ret
            case   PIN_IN_PULLUP:
			CLR_BIT(DDRA,loc_Pin_id);
			SET_BIT(PORTA,loc_Pin_id);                     
			break;   				         
            default:
			ERROR_LOC_RET= PIN_MODE_ERROR;
 ba2:	84 e0       	ldi	r24, 0x04	; 4
 ba4:	08 95       	ret
            case   PIN_IN_PULLUP:
            CLR_BIT(DDRB,loc_Pin_id);
            SET_BIT(PORTB,loc_Pin_id);                     
            break;            
            default:
			ERROR_LOC_RET=PIN_MODE_ERROR;			  
 ba6:	84 e0       	ldi	r24, 0x04	; 4
 ba8:	08 95       	ret
            case   PIN_IN_PULLUP:
            CLR_BIT(DDRC,loc_Pin_id);
            SET_BIT(PORTC,loc_Pin_id);                     
            break;            
            default:
			ERROR_LOC_RET=PIN_MODE_ERROR;	
 baa:	84 e0       	ldi	r24, 0x04	; 4
 bac:	08 95       	ret
            case PIN_IN_PULLUP:
            CLR_BIT(DDRD,loc_Pin_id);
            SET_BIT(PORTD,loc_Pin_id);                     
            break;            
            default: 
			ERROR_LOC_RET=PIN_MODE_ERROR;	
 bae:	84 e0       	ldi	r24, 0x04	; 4
			}
			break;		
        }   
	}	
	return ERROR_LOC_RET;	
	}
 bb0:	08 95       	ret

00000bb2 <_exit>:
 bb2:	f8 94       	cli

00000bb4 <__stop_program>:
 bb4:	ff cf       	rjmp	.-2      	; 0xbb4 <__stop_program>
