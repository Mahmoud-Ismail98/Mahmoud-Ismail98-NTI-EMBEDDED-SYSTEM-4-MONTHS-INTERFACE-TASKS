
TIMER_TASK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007a  00800060  000030b6  0000314a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  008000da  008000da  000031c4  2**0
                  ALLOC
  3 .stab         0000309c  00000000  00000000  000031c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001890  00000000  00000000  00006260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000099e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a8d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b684  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b7e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ba71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c23f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__vector_9>
      28:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__vector_10>
      2c:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3d       	cpi	r26, 0xDA	; 218
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ed       	ldi	r26, 0xDA	; 218
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3f       	cpi	r26, 0xF2	; 242
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 94 16 	call	0x2d28	; 0x2d28 <main>
      8a:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 eb       	ldi	r26, 0xB5	; 181
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3e 18 	jmp	0x307c	; 0x307c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 eb       	ldi	r24, 0xB5	; 181
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3e 18 	jmp	0x307c	; 0x307c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER_TIMEREnumTimer0Init>:

/* Global Pointer to Function => Timer0 */
static void (*TIMER_ApfTimer1[2])(void);

TIMEREnum TIMER_TIMEREnumTimer0Init(u8 copy_u8TimerMode)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <TIMER_TIMEREnumTimer0Init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <TIMER_TIMEREnumTimer0Init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	8a 83       	std	Y+2, r24	; 0x02
    TIMEREnum local_TIMEREnumErrorState = TIMER_OK;
     b54:	19 82       	std	Y+1, r1	; 0x01
    /* check about input parameters */
    if(copy_u8TimerMode <= TIMER_PHASE_CORR_MODE)
     b56:	8a 81       	ldd	r24, Y+2	; 0x02
     b58:	84 30       	cpi	r24, 0x04	; 4
     b5a:	08 f0       	brcs	.+2      	; 0xb5e <TIMER_TIMEREnumTimer0Init+0x18>
     b5c:	c1 c0       	rjmp	.+386    	; 0xce0 <TIMER_TIMEREnumTimer0Init+0x19a>
    {
        /* to configure which mode you need */
        switch(copy_u8TimerMode)
     b5e:	8a 81       	ldd	r24, Y+2	; 0x02
     b60:	28 2f       	mov	r18, r24
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	3c 83       	std	Y+4, r19	; 0x04
     b66:	2b 83       	std	Y+3, r18	; 0x03
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	9c 81       	ldd	r25, Y+4	; 0x04
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	91 05       	cpc	r25, r1
     b70:	09 f4       	brne	.+2      	; 0xb74 <TIMER_TIMEREnumTimer0Init+0x2e>
     b72:	3f c0       	rjmp	.+126    	; 0xbf2 <TIMER_TIMEREnumTimer0Init+0xac>
     b74:	2b 81       	ldd	r18, Y+3	; 0x03
     b76:	3c 81       	ldd	r19, Y+4	; 0x04
     b78:	22 30       	cpi	r18, 0x02	; 2
     b7a:	31 05       	cpc	r19, r1
     b7c:	2c f4       	brge	.+10     	; 0xb88 <TIMER_TIMEREnumTimer0Init+0x42>
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	9c 81       	ldd	r25, Y+4	; 0x04
     b82:	00 97       	sbiw	r24, 0x00	; 0
     b84:	71 f0       	breq	.+28     	; 0xba2 <TIMER_TIMEREnumTimer0Init+0x5c>
     b86:	96 c0       	rjmp	.+300    	; 0xcb4 <TIMER_TIMEREnumTimer0Init+0x16e>
     b88:	2b 81       	ldd	r18, Y+3	; 0x03
     b8a:	3c 81       	ldd	r19, Y+4	; 0x04
     b8c:	22 30       	cpi	r18, 0x02	; 2
     b8e:	31 05       	cpc	r19, r1
     b90:	09 f4       	brne	.+2      	; 0xb94 <TIMER_TIMEREnumTimer0Init+0x4e>
     b92:	57 c0       	rjmp	.+174    	; 0xc42 <TIMER_TIMEREnumTimer0Init+0xfc>
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	9c 81       	ldd	r25, Y+4	; 0x04
     b98:	83 30       	cpi	r24, 0x03	; 3
     b9a:	91 05       	cpc	r25, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <TIMER_TIMEREnumTimer0Init+0x5a>
     b9e:	6e c0       	rjmp	.+220    	; 0xc7c <TIMER_TIMEREnumTimer0Init+0x136>
     ba0:	89 c0       	rjmp	.+274    	; 0xcb4 <TIMER_TIMEREnumTimer0Init+0x16e>
        {
            case TIMER_NORMAL_MODE    :  // In the normal Mode
            /* set the generation mode */
            CLR_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_WGM00_BIT);
     ba2:	a3 e5       	ldi	r26, 0x53	; 83
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e3 e5       	ldi	r30, 0x53	; 83
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8f 7b       	andi	r24, 0xBF	; 191
     bae:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_WGM01_BIT);
     bb0:	a3 e5       	ldi	r26, 0x53	; 83
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e3 e5       	ldi	r30, 0x53	; 83
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	87 7f       	andi	r24, 0xF7	; 247
     bbc:	8c 93       	st	X, r24
            /* configuration of the compare output mode  => OC HW Pin */
            #if   TIMER_NORM_CTC_MODE == TIMER_NORMAL_PORT  // Normal Port => OC disconnected
                CLR_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_COM00_BIT);
     bbe:	a3 e5       	ldi	r26, 0x53	; 83
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e3 e5       	ldi	r30, 0x53	; 83
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8f 7e       	andi	r24, 0xEF	; 239
     bca:	8c 93       	st	X, r24
                CLR_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_COM01_BIT);
     bcc:	a3 e5       	ldi	r26, 0x53	; 83
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e3 e5       	ldi	r30, 0x53	; 83
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8f 7d       	andi	r24, 0xDF	; 223
     bd8:	8c 93       	st	X, r24
            #elif TIMER_NORM_CTC_MODE == TIMER_SET_ON_CMATCH  // Set OC on compare match
                SET_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_COM00_BIT);
                SET_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_COM01_BIT);
            #endif
            /* Update the preload Value */
            TIMER0_u8_TCNT0_REG = TIMER0_u8_PRELOAD_VALUE;
     bda:	e2 e5       	ldi	r30, 0x52	; 82
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 ec       	ldi	r24, 0xC0	; 192
     be0:	80 83       	st	Z, r24
            /* Enable OVF Interrupt */
            SET_BIT(TIMER0_u8_TIMSK_REG,TIMER0_u8_TOIE0_BIT);
     be2:	a9 e5       	ldi	r26, 0x59	; 89
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e9 e5       	ldi	r30, 0x59	; 89
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	81 60       	ori	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	61 c0       	rjmp	.+194    	; 0xcb4 <TIMER_TIMEREnumTimer0Init+0x16e>
            break;
            case TIMER_CTC_MODE       :  // In the CTC Mode
            /* set the generation mode */
            CLR_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_WGM00_BIT);
     bf2:	a3 e5       	ldi	r26, 0x53	; 83
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e3 e5       	ldi	r30, 0x53	; 83
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	8f 7b       	andi	r24, 0xBF	; 191
     bfe:	8c 93       	st	X, r24
            SET_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_WGM01_BIT);
     c00:	a3 e5       	ldi	r26, 0x53	; 83
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e3 e5       	ldi	r30, 0x53	; 83
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	88 60       	ori	r24, 0x08	; 8
     c0c:	8c 93       	st	X, r24
            /* configuration of the compare output mode  => OC HW Pin */
            #if   TIMER_NORM_CTC_MODE == TIMER_NORMAL_PORT  // Normal Port => OC disconnected
                CLR_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_COM00_BIT);
     c0e:	a3 e5       	ldi	r26, 0x53	; 83
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e3 e5       	ldi	r30, 0x53	; 83
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	8f 7e       	andi	r24, 0xEF	; 239
     c1a:	8c 93       	st	X, r24
                CLR_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_COM01_BIT);
     c1c:	a3 e5       	ldi	r26, 0x53	; 83
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e3 e5       	ldi	r30, 0x53	; 83
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	8f 7d       	andi	r24, 0xDF	; 223
     c28:	8c 93       	st	X, r24
            #elif TIMER_NORM_CTC_MODE == TIMER_SET_ON_CMATCH  // Set OC on compare match
                SET_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_COM00_BIT);
                SET_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_COM01_BIT);
            #endif
            /* Update the compare match Value */
            TIMER0_u8_OCR0_REG = TIMER0_u8_COMPMATCH_VALUE;
     c2a:	ec e5       	ldi	r30, 0x5C	; 92
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	83 e6       	ldi	r24, 0x63	; 99
     c30:	80 83       	st	Z, r24
            /* Enable Compare Match Interrupt */
            SET_BIT(TIMER0_u8_TIMSK_REG,TIMER0_u8_OCIE0_BIT);
     c32:	a9 e5       	ldi	r26, 0x59	; 89
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e9 e5       	ldi	r30, 0x59	; 89
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	82 60       	ori	r24, 0x02	; 2
     c3e:	8c 93       	st	X, r24
     c40:	39 c0       	rjmp	.+114    	; 0xcb4 <TIMER_TIMEREnumTimer0Init+0x16e>
            break;
            case TIMER_FAST_PWM_MODE  :  // IN the Fast PWM Mode
            /* set the generation mode */
            SET_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_WGM00_BIT);
     c42:	a3 e5       	ldi	r26, 0x53	; 83
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e3 e5       	ldi	r30, 0x53	; 83
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	80 64       	ori	r24, 0x40	; 64
     c4e:	8c 93       	st	X, r24
            SET_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_WGM01_BIT);
     c50:	a3 e5       	ldi	r26, 0x53	; 83
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	e3 e5       	ldi	r30, 0x53	; 83
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	88 60       	ori	r24, 0x08	; 8
     c5c:	8c 93       	st	X, r24
            /* configuration of the compare output mode  => OC HW Pin */
            #if   TIMER_FAST_PHASE_MODE == TIMER_NORM_PORT  // Normal Port => OC disconnected
                CLR_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_COM00_BIT);
                CLR_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_COM01_BIT);
            #elif TIMER_FAST_PHASE_MODE == TIMER_NON_INVERTING  // non_inverting mode
                CLR_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_COM00_BIT);
     c5e:	a3 e5       	ldi	r26, 0x53	; 83
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e3 e5       	ldi	r30, 0x53	; 83
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	8f 7e       	andi	r24, 0xEF	; 239
     c6a:	8c 93       	st	X, r24
                SET_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_COM01_BIT);
     c6c:	a3 e5       	ldi	r26, 0x53	; 83
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	e3 e5       	ldi	r30, 0x53	; 83
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	80 62       	ori	r24, 0x20	; 32
     c78:	8c 93       	st	X, r24
     c7a:	1c c0       	rjmp	.+56     	; 0xcb4 <TIMER_TIMEREnumTimer0Init+0x16e>
                SET_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_COM01_BIT);
            #endif
            break;
            case TIMER_PHASE_CORR_MODE:  // In the Phase Correct Mode
            /* set the generation mode */
            SET_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_WGM00_BIT);
     c7c:	a3 e5       	ldi	r26, 0x53	; 83
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e3 e5       	ldi	r30, 0x53	; 83
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	80 64       	ori	r24, 0x40	; 64
     c88:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_WGM01_BIT);
     c8a:	a3 e5       	ldi	r26, 0x53	; 83
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e3 e5       	ldi	r30, 0x53	; 83
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	87 7f       	andi	r24, 0xF7	; 247
     c96:	8c 93       	st	X, r24
            /* configuration of the compare output mode  => OC HW Pin */
            #if   TIMER_FAST_PHASE_MODE == TIMER_NORM_PORT  // Normal Port => OC disconnected
                CLR_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_COM00_BIT);
                CLR_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_COM01_BIT);
            #elif TIMER_FAST_PHASE_MODE == TIMER_NON_INVERTING  // non_inverting mode
                CLR_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_COM00_BIT);
     c98:	a3 e5       	ldi	r26, 0x53	; 83
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	e3 e5       	ldi	r30, 0x53	; 83
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	8f 7e       	andi	r24, 0xEF	; 239
     ca4:	8c 93       	st	X, r24
                SET_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_COM01_BIT);
     ca6:	a3 e5       	ldi	r26, 0x53	; 83
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e3 e5       	ldi	r30, 0x53	; 83
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 62       	ori	r24, 0x20	; 32
     cb2:	8c 93       	st	X, r24
        #if   TIMER_CLK_PRESCALER == TIMER_NO_PRESCALING  // No prescaling
            SET_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_CS00_BIT);
            CLR_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_CS01_BIT);
            CLR_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_CS02_BIT);
        #elif TIMER_CLK_PRESCALER == TIMER_CLK_8_PRESCALING  // prescaling 8 => F_CPU/8
            CLR_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_CS00_BIT);
     cb4:	a3 e5       	ldi	r26, 0x53	; 83
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e3 e5       	ldi	r30, 0x53	; 83
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8e 7f       	andi	r24, 0xFE	; 254
     cc0:	8c 93       	st	X, r24
            SET_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_CS01_BIT);
     cc2:	a3 e5       	ldi	r26, 0x53	; 83
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e3 e5       	ldi	r30, 0x53	; 83
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	82 60       	ori	r24, 0x02	; 2
     cce:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_CS02_BIT);
     cd0:	a3 e5       	ldi	r26, 0x53	; 83
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e3 e5       	ldi	r30, 0x53	; 83
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8b 7f       	andi	r24, 0xFB	; 251
     cdc:	8c 93       	st	X, r24
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <TIMER_TIMEREnumTimer0Init+0x19e>
            CLR_BIT(TIMER0_u8_TCCR0_REG,TIMER0_u8_CS02_BIT);
        #endif
    }
    else
    {
        local_TIMEREnumErrorState = TIMER0_INIT_NOK; 
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_TIMEREnumErrorState;
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	cf 91       	pop	r28
     cf0:	df 91       	pop	r29
     cf2:	08 95       	ret

00000cf4 <TIMER_TIMEREnumTimer0Callback>:

TIMEREnum TIMER_TIMEREnumTimer0Callback(u8 copy_u8TimerMode,void (*copy_pfTimer0)(void))
{
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <TIMER_TIMEREnumTimer0Callback+0x6>
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <TIMER_TIMEREnumTimer0Callback+0x8>
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	8a 83       	std	Y+2, r24	; 0x02
     d02:	7c 83       	std	Y+4, r23	; 0x04
     d04:	6b 83       	std	Y+3, r22	; 0x03
    TIMEREnum local_TIMEREnumErrorState = TIMER_OK;
     d06:	19 82       	std	Y+1, r1	; 0x01
    /* check about input parameters */
    if((copy_u8TimerMode <= TIMER_CTC_MODE) && (copy_pfTimer0 != NULL))
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	82 30       	cpi	r24, 0x02	; 2
     d0c:	88 f4       	brcc	.+34     	; 0xd30 <TIMER_TIMEREnumTimer0Callback+0x3c>
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	9c 81       	ldd	r25, Y+4	; 0x04
     d12:	00 97       	sbiw	r24, 0x00	; 0
     d14:	69 f0       	breq	.+26     	; 0xd30 <TIMER_TIMEREnumTimer0Callback+0x3c>
    {
        /* Update the Global Pointer to Function */
        TIMER_ApfTimer0[copy_u8TimerMode] = copy_pfTimer0;
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	88 2f       	mov	r24, r24
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	fc 01       	movw	r30, r24
     d22:	ee 51       	subi	r30, 0x1E	; 30
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	9c 81       	ldd	r25, Y+4	; 0x04
     d2a:	91 83       	std	Z+1, r25	; 0x01
     d2c:	80 83       	st	Z, r24
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <TIMER_TIMEREnumTimer0Callback+0x40>
    }
    else
    {
        local_TIMEREnumErrorState = TIMER0_CALL_NOK; 
     d30:	83 e0       	ldi	r24, 0x03	; 3
     d32:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_TIMEREnumErrorState;
     d34:	89 81       	ldd	r24, Y+1	; 0x01
}
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <TIMER_TIMEREnumTimer0SetCompMatchValue>:

TIMEREnum TIMER_TIMEREnumTimer0SetCompMatchValue (u8 copy_u8Value)
{
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	00 d0       	rcall	.+0      	; 0xd4a <TIMER_TIMEREnumTimer0SetCompMatchValue+0x6>
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	8a 83       	std	Y+2, r24	; 0x02
    TIMEREnum local_TIMEREnumErrorState = TIMER_OK;
     d50:	19 82       	std	Y+1, r1	; 0x01
    /* check about input parameters */
    if(copy_u8Value <= 255)
    {
        /* update the value of compare match in OCR0 register */
        TIMER0_u8_OCR0_REG = copy_u8Value;
     d52:	ec e5       	ldi	r30, 0x5C	; 92
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	80 83       	st	Z, r24
    }
    else
    {
        local_TIMEREnumErrorState = TIMER0_CMATCH_NOK; 
    }
    return local_TIMEREnumErrorState;
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <TIMER_TIMEREnumTimer1Init>:
/*========================================================================================*/
TIMEREnum TIMER_TIMEREnumTimer1Init(u8 copy_u8TimerMode)
{
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <TIMER_TIMEREnumTimer1Init+0x6>
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <TIMER_TIMEREnumTimer1Init+0x8>
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	8a 83       	std	Y+2, r24	; 0x02
    TIMEREnum local_TIMEREnumErrorState = TIMER_OK;
     d74:	19 82       	std	Y+1, r1	; 0x01
    /* check about input parameters */
    if(copy_u8TimerMode <= TIMER_PHASE_CORR_MODE)
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	84 30       	cpi	r24, 0x04	; 4
     d7a:	08 f0       	brcs	.+2      	; 0xd7e <TIMER_TIMEREnumTimer1Init+0x18>
     d7c:	42 c1       	rjmp	.+644    	; 0x1002 <TIMER_TIMEREnumTimer1Init+0x29c>
    {
        /* to configure which mode you need */
        switch(copy_u8TimerMode)
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	3c 83       	std	Y+4, r19	; 0x04
     d86:	2b 83       	std	Y+3, r18	; 0x03
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	9c 81       	ldd	r25, Y+4	; 0x04
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	91 05       	cpc	r25, r1
     d90:	09 f4       	brne	.+2      	; 0xd94 <TIMER_TIMEREnumTimer1Init+0x2e>
     d92:	5d c0       	rjmp	.+186    	; 0xe4e <TIMER_TIMEREnumTimer1Init+0xe8>
     d94:	2b 81       	ldd	r18, Y+3	; 0x03
     d96:	3c 81       	ldd	r19, Y+4	; 0x04
     d98:	22 30       	cpi	r18, 0x02	; 2
     d9a:	31 05       	cpc	r19, r1
     d9c:	2c f4       	brge	.+10     	; 0xda8 <TIMER_TIMEREnumTimer1Init+0x42>
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	9c 81       	ldd	r25, Y+4	; 0x04
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	71 f0       	breq	.+28     	; 0xdc2 <TIMER_TIMEREnumTimer1Init+0x5c>
     da6:	17 c1       	rjmp	.+558    	; 0xfd6 <TIMER_TIMEREnumTimer1Init+0x270>
     da8:	2b 81       	ldd	r18, Y+3	; 0x03
     daa:	3c 81       	ldd	r19, Y+4	; 0x04
     dac:	22 30       	cpi	r18, 0x02	; 2
     dae:	31 05       	cpc	r19, r1
     db0:	09 f4       	brne	.+2      	; 0xdb4 <TIMER_TIMEREnumTimer1Init+0x4e>
     db2:	a0 c0       	rjmp	.+320    	; 0xef4 <TIMER_TIMEREnumTimer1Init+0x18e>
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	9c 81       	ldd	r25, Y+4	; 0x04
     db8:	83 30       	cpi	r24, 0x03	; 3
     dba:	91 05       	cpc	r25, r1
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <TIMER_TIMEREnumTimer1Init+0x5a>
     dbe:	d3 c0       	rjmp	.+422    	; 0xf66 <TIMER_TIMEREnumTimer1Init+0x200>
     dc0:	0a c1       	rjmp	.+532    	; 0xfd6 <TIMER_TIMEREnumTimer1Init+0x270>
        {
            case TIMER_NORMAL_MODE    :  // In the normal Mode
            /* set the generation mode */
            CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_WGM10_BIT);
     dc2:	af e4       	ldi	r26, 0x4F	; 79
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	ef e4       	ldi	r30, 0x4F	; 79
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	8e 7f       	andi	r24, 0xFE	; 254
     dce:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_WGM11_BIT);
     dd0:	af e4       	ldi	r26, 0x4F	; 79
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	ef e4       	ldi	r30, 0x4F	; 79
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	8d 7f       	andi	r24, 0xFD	; 253
     ddc:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_u8_TCCR1B_REG,TIMER1_u8_WGM12_BIT);
     dde:	ae e4       	ldi	r26, 0x4E	; 78
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	ee e4       	ldi	r30, 0x4E	; 78
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	87 7f       	andi	r24, 0xF7	; 247
     dea:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_u8_TCCR1B_REG,TIMER1_u8_WGM13_BIT);
     dec:	ae e4       	ldi	r26, 0x4E	; 78
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	ee e4       	ldi	r30, 0x4E	; 78
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	8f 7e       	andi	r24, 0xEF	; 239
     df8:	8c 93       	st	X, r24
            /* configuration of the compare output mode  => OC HW Pin */
            #if   TIMER_NORM_CTC_MODE == TIMER_NORMAL_PORT  // Normal Port => OC disconnected
                CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1B0_BIT);
     dfa:	af e4       	ldi	r26, 0x4F	; 79
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	ef e4       	ldi	r30, 0x4F	; 79
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	8f 7e       	andi	r24, 0xEF	; 239
     e06:	8c 93       	st	X, r24
                CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1A0_BIT);
     e08:	af e4       	ldi	r26, 0x4F	; 79
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	ef e4       	ldi	r30, 0x4F	; 79
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	8f 7b       	andi	r24, 0xBF	; 191
     e14:	8c 93       	st	X, r24
                CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1B1_BIT);
     e16:	af e4       	ldi	r26, 0x4F	; 79
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	ef e4       	ldi	r30, 0x4F	; 79
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	8f 7d       	andi	r24, 0xDF	; 223
     e22:	8c 93       	st	X, r24
                CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1A1_BIT);
     e24:	af e4       	ldi	r26, 0x4F	; 79
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	ef e4       	ldi	r30, 0x4F	; 79
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	8f 77       	andi	r24, 0x7F	; 127
     e30:	8c 93       	st	X, r24
                SET_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1A0_BIT);
                SET_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1B1_BIT);
                SET_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1A1_BIT);
            #endif
            /* Update the preload Value */
            TIMER1_u16_TCNT1_REG = TIMER1_u16_PRELOAD_VALUE;
     e32:	ec e4       	ldi	r30, 0x4C	; 76
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 ec       	ldi	r24, 0xC0	; 192
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	91 83       	std	Z+1, r25	; 0x01
     e3c:	80 83       	st	Z, r24
            /* Enable OVF Interrupt */
            SET_BIT(TIMER0_u8_TIMSK_REG,TIMER1_u8_TOIE1_BIT);
     e3e:	a9 e5       	ldi	r26, 0x59	; 89
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e9 e5       	ldi	r30, 0x59	; 89
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	84 60       	ori	r24, 0x04	; 4
     e4a:	8c 93       	st	X, r24
     e4c:	c4 c0       	rjmp	.+392    	; 0xfd6 <TIMER_TIMEREnumTimer1Init+0x270>
            break;
            case TIMER_CTC_MODE       :  // In the CTC Mode
            /* set the generation mode */
            CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_WGM10_BIT);
     e4e:	af e4       	ldi	r26, 0x4F	; 79
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	ef e4       	ldi	r30, 0x4F	; 79
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	8e 7f       	andi	r24, 0xFE	; 254
     e5a:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_WGM11_BIT);
     e5c:	af e4       	ldi	r26, 0x4F	; 79
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	ef e4       	ldi	r30, 0x4F	; 79
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	8d 7f       	andi	r24, 0xFD	; 253
     e68:	8c 93       	st	X, r24
            SET_BIT(TIMER1_u8_TCCR1B_REG,TIMER1_u8_WGM12_BIT);
     e6a:	ae e4       	ldi	r26, 0x4E	; 78
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	ee e4       	ldi	r30, 0x4E	; 78
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	88 60       	ori	r24, 0x08	; 8
     e76:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_u8_TCCR1B_REG,TIMER1_u8_WGM13_BIT);
     e78:	ae e4       	ldi	r26, 0x4E	; 78
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	ee e4       	ldi	r30, 0x4E	; 78
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	8f 7e       	andi	r24, 0xEF	; 239
     e84:	8c 93       	st	X, r24
            /* configuration of the compare output mode  => OC HW Pin */
            #if   TIMER_NORM_CTC_MODE == TIMER_NORMAL_PORT  // Normal Port => OC disconnected
                CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1B0_BIT);
     e86:	af e4       	ldi	r26, 0x4F	; 79
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	ef e4       	ldi	r30, 0x4F	; 79
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	8f 7e       	andi	r24, 0xEF	; 239
     e92:	8c 93       	st	X, r24
                CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1A0_BIT);
     e94:	af e4       	ldi	r26, 0x4F	; 79
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	ef e4       	ldi	r30, 0x4F	; 79
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	8f 7b       	andi	r24, 0xBF	; 191
     ea0:	8c 93       	st	X, r24
                CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1B1_BIT);
     ea2:	af e4       	ldi	r26, 0x4F	; 79
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	ef e4       	ldi	r30, 0x4F	; 79
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8f 7d       	andi	r24, 0xDF	; 223
     eae:	8c 93       	st	X, r24
                CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1A1_BIT);
     eb0:	af e4       	ldi	r26, 0x4F	; 79
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	ef e4       	ldi	r30, 0x4F	; 79
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	8f 77       	andi	r24, 0x7F	; 127
     ebc:	8c 93       	st	X, r24
                SET_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1A0_BIT);
                SET_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1B1_BIT);
                SET_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1A1_BIT);
            #endif
            /* Update the compare match Value */
            TIMER1_u16_OCR1A_REG = TIMER1_u16_COMPMATCH_VALUE_A;
     ebe:	ea e4       	ldi	r30, 0x4A	; 74
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	83 e6       	ldi	r24, 0x63	; 99
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	91 83       	std	Z+1, r25	; 0x01
     ec8:	80 83       	st	Z, r24
            TIMER1_u16_OCR1B_REG = TIMER1_u16_COMPMATCH_VALUE_B;
     eca:	e8 e4       	ldi	r30, 0x48	; 72
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	83 e6       	ldi	r24, 0x63	; 99
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	91 83       	std	Z+1, r25	; 0x01
     ed4:	80 83       	st	Z, r24
            /* Enable Compare Match Interrupt at A and B */
            SET_BIT(TIMER0_u8_TIMSK_REG,TIMER1_u8_OCIE1A_BIT);
     ed6:	a9 e5       	ldi	r26, 0x59	; 89
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e9 e5       	ldi	r30, 0x59	; 89
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	80 61       	ori	r24, 0x10	; 16
     ee2:	8c 93       	st	X, r24
            SET_BIT(TIMER0_u8_TIMSK_REG,TIMER1_u8_OCIE1B_BIT);
     ee4:	a9 e5       	ldi	r26, 0x59	; 89
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e9 e5       	ldi	r30, 0x59	; 89
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	88 60       	ori	r24, 0x08	; 8
     ef0:	8c 93       	st	X, r24
     ef2:	71 c0       	rjmp	.+226    	; 0xfd6 <TIMER_TIMEREnumTimer1Init+0x270>
            break;
            case TIMER_FAST_PWM_MODE  :  // IN the Fast PWM Mode
            /* set the generation mode */
            CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_WGM10_BIT);
     ef4:	af e4       	ldi	r26, 0x4F	; 79
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	ef e4       	ldi	r30, 0x4F	; 79
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	8e 7f       	andi	r24, 0xFE	; 254
     f00:	8c 93       	st	X, r24
            SET_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_WGM11_BIT);
     f02:	af e4       	ldi	r26, 0x4F	; 79
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	ef e4       	ldi	r30, 0x4F	; 79
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	82 60       	ori	r24, 0x02	; 2
     f0e:	8c 93       	st	X, r24
            SET_BIT(TIMER1_u8_TCCR1B_REG,TIMER1_u8_WGM12_BIT);
     f10:	ae e4       	ldi	r26, 0x4E	; 78
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	ee e4       	ldi	r30, 0x4E	; 78
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	88 60       	ori	r24, 0x08	; 8
     f1c:	8c 93       	st	X, r24
            SET_BIT(TIMER1_u8_TCCR1B_REG,TIMER1_u8_WGM13_BIT);
     f1e:	ae e4       	ldi	r26, 0x4E	; 78
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	ee e4       	ldi	r30, 0x4E	; 78
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 61       	ori	r24, 0x10	; 16
     f2a:	8c 93       	st	X, r24
                CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1B0_BIT);
                CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1A0_BIT);
                CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1B1_BIT);
                CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1A1_BIT);
            #elif TIMER_FAST_PHASE_MODE == TIMER_NON_INVERTING  // non_inverting mode
                CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1B0_BIT);
     f2c:	af e4       	ldi	r26, 0x4F	; 79
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	ef e4       	ldi	r30, 0x4F	; 79
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	8f 7e       	andi	r24, 0xEF	; 239
     f38:	8c 93       	st	X, r24
                CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1A0_BIT);
     f3a:	af e4       	ldi	r26, 0x4F	; 79
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	ef e4       	ldi	r30, 0x4F	; 79
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	8f 7b       	andi	r24, 0xBF	; 191
     f46:	8c 93       	st	X, r24
                SET_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1B1_BIT);
     f48:	af e4       	ldi	r26, 0x4F	; 79
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ef e4       	ldi	r30, 0x4F	; 79
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	80 62       	ori	r24, 0x20	; 32
     f54:	8c 93       	st	X, r24
                SET_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1A1_BIT);
     f56:	af e4       	ldi	r26, 0x4F	; 79
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	ef e4       	ldi	r30, 0x4F	; 79
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	80 68       	ori	r24, 0x80	; 128
     f62:	8c 93       	st	X, r24
     f64:	38 c0       	rjmp	.+112    	; 0xfd6 <TIMER_TIMEREnumTimer1Init+0x270>
                SET_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1A1_BIT);
            #endif
            break;
            case TIMER_PHASE_CORR_MODE:  // In the Phase Correct Mode
            /* set the generation mode */
            CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_WGM10_BIT);
     f66:	af e4       	ldi	r26, 0x4F	; 79
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	ef e4       	ldi	r30, 0x4F	; 79
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	8e 7f       	andi	r24, 0xFE	; 254
     f72:	8c 93       	st	X, r24
            SET_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_WGM11_BIT);
     f74:	af e4       	ldi	r26, 0x4F	; 79
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	ef e4       	ldi	r30, 0x4F	; 79
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	82 60       	ori	r24, 0x02	; 2
     f80:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_u8_TCCR1B_REG,TIMER1_u8_WGM12_BIT);
     f82:	ae e4       	ldi	r26, 0x4E	; 78
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	ee e4       	ldi	r30, 0x4E	; 78
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	87 7f       	andi	r24, 0xF7	; 247
     f8e:	8c 93       	st	X, r24
            SET_BIT(TIMER1_u8_TCCR1B_REG,TIMER1_u8_WGM13_BIT);
     f90:	ae e4       	ldi	r26, 0x4E	; 78
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	ee e4       	ldi	r30, 0x4E	; 78
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	80 61       	ori	r24, 0x10	; 16
     f9c:	8c 93       	st	X, r24
                CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1B0_BIT);
                CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1A0_BIT);
                CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1B1_BIT);
                CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1A1_BIT);
            #elif TIMER_FAST_PHASE_MODE == TIMER_NON_INVERTING  // non_inverting mode
                CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1B0_BIT);
     f9e:	af e4       	ldi	r26, 0x4F	; 79
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	ef e4       	ldi	r30, 0x4F	; 79
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	8f 7e       	andi	r24, 0xEF	; 239
     faa:	8c 93       	st	X, r24
                CLR_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1A0_BIT);
     fac:	af e4       	ldi	r26, 0x4F	; 79
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	ef e4       	ldi	r30, 0x4F	; 79
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	8f 7b       	andi	r24, 0xBF	; 191
     fb8:	8c 93       	st	X, r24
                SET_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1B1_BIT);
     fba:	af e4       	ldi	r26, 0x4F	; 79
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	ef e4       	ldi	r30, 0x4F	; 79
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	80 62       	ori	r24, 0x20	; 32
     fc6:	8c 93       	st	X, r24
                SET_BIT(TIMER1_u8_TCCR1A_REG,TIMER1_u8_COM1A1_BIT);
     fc8:	af e4       	ldi	r26, 0x4F	; 79
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	ef e4       	ldi	r30, 0x4F	; 79
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	80 68       	ori	r24, 0x80	; 128
     fd4:	8c 93       	st	X, r24
        #if   TIMER_CLK_PRESCALER == TIMER_NO_PRESCALING  // No prescaling
            SET_BIT(TIMER1_u8_TCCR1B_REG,TIMER1_u8_CS10_BIT);
            CLR_BIT(TIMER1_u8_TCCR1B_REG,TIMER1_u8_CS11_BIT);
            CLR_BIT(TIMER1_u8_TCCR1B_REG,TIMER1_u8_CS12_BIT);
        #elif TIMER_CLK_PRESCALER == TIMER_CLK_8_PRESCALING  // prescaling 8 => F_CPU/8
            CLR_BIT(TIMER1_u8_TCCR1B_REG,TIMER1_u8_CS10_BIT);
     fd6:	ae e4       	ldi	r26, 0x4E	; 78
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	ee e4       	ldi	r30, 0x4E	; 78
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	8e 7f       	andi	r24, 0xFE	; 254
     fe2:	8c 93       	st	X, r24
            SET_BIT(TIMER1_u8_TCCR1B_REG,TIMER1_u8_CS11_BIT);
     fe4:	ae e4       	ldi	r26, 0x4E	; 78
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	ee e4       	ldi	r30, 0x4E	; 78
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	82 60       	ori	r24, 0x02	; 2
     ff0:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_u8_TCCR1B_REG,TIMER1_u8_CS12_BIT);
     ff2:	ae e4       	ldi	r26, 0x4E	; 78
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	ee e4       	ldi	r30, 0x4E	; 78
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	8b 7f       	andi	r24, 0xFB	; 251
     ffe:	8c 93       	st	X, r24
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <TIMER_TIMEREnumTimer1Init+0x2a0>
            CLR_BIT(TIMER1_u8_TCCR1B_REG,TIMER1_u8_CS12_BIT);
        #endif
    }
    else
    {
        local_TIMEREnumErrorState = TIMER1_INIT_NOK; 
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_TIMEREnumErrorState;
    1006:	89 81       	ldd	r24, Y+1	; 0x01
}
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <TIMER_TIMEREnumTimer1Callback>:

TIMEREnum TIMER_TIMEREnumTimer1Callback(u8 copy_u8TimerMode,void (*copy_pfTimer1)(void))
{
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	00 d0       	rcall	.+0      	; 0x101c <TIMER_TIMEREnumTimer1Callback+0x6>
    101c:	00 d0       	rcall	.+0      	; 0x101e <TIMER_TIMEREnumTimer1Callback+0x8>
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	8a 83       	std	Y+2, r24	; 0x02
    1024:	7c 83       	std	Y+4, r23	; 0x04
    1026:	6b 83       	std	Y+3, r22	; 0x03
    TIMEREnum local_TIMEREnumErrorState = TIMER_OK;
    1028:	19 82       	std	Y+1, r1	; 0x01
    /* check about input parameters */
    if((copy_u8TimerMode <= TIMER_CTC_MODE) && (copy_pfTimer1 != NULL))
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	88 f4       	brcc	.+34     	; 0x1052 <TIMER_TIMEREnumTimer1Callback+0x3c>
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	9c 81       	ldd	r25, Y+4	; 0x04
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	69 f0       	breq	.+26     	; 0x1052 <TIMER_TIMEREnumTimer1Callback+0x3c>
    {
        /* Update the Global Pointer to Function */
        TIMER_ApfTimer1[copy_u8TimerMode] = copy_pfTimer1;
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	fc 01       	movw	r30, r24
    1044:	ea 51       	subi	r30, 0x1A	; 26
    1046:	ff 4f       	sbci	r31, 0xFF	; 255
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	91 83       	std	Z+1, r25	; 0x01
    104e:	80 83       	st	Z, r24
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <TIMER_TIMEREnumTimer1Callback+0x40>
    }
    else
    {
        local_TIMEREnumErrorState = TIMER1_CALL_NOK; 
    1052:	84 e0       	ldi	r24, 0x04	; 4
    1054:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_TIMEREnumErrorState;
    1056:	89 81       	ldd	r24, Y+1	; 0x01
}
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <TIMER_TIMEREnumTimer1SetCompMatchValue>:

TIMEREnum TIMER_TIMEREnumTimer1SetCompMatchValue (u16 copy_u16CompValueA,u16 copy_u16CompValueB,u16 copy_u16ICR1Value)
{
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	27 97       	sbiw	r28, 0x07	; 7
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	9b 83       	std	Y+3, r25	; 0x03
    107c:	8a 83       	std	Y+2, r24	; 0x02
    107e:	7d 83       	std	Y+5, r23	; 0x05
    1080:	6c 83       	std	Y+4, r22	; 0x04
    1082:	5f 83       	std	Y+7, r21	; 0x07
    1084:	4e 83       	std	Y+6, r20	; 0x06
    TIMEREnum local_TIMEREnumErrorState = TIMER_OK;
    1086:	19 82       	std	Y+1, r1	; 0x01
    /* check about input parameters */
    if((copy_u16CompValueA <= 655535) && (copy_u16ICR1Value <= 65535) && (copy_u16CompValueB <= 655535))
    {
        /* update the value of compare match and ICR */
        TIMER1_u16_OCR1A_REG = copy_u16CompValueA;
    1088:	ea e4       	ldi	r30, 0x4A	; 74
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	9b 81       	ldd	r25, Y+3	; 0x03
    1090:	91 83       	std	Z+1, r25	; 0x01
    1092:	80 83       	st	Z, r24
        TIMER1_u16_OCR1B_REG = copy_u16CompValueB;
    1094:	e8 e4       	ldi	r30, 0x48	; 72
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	8c 81       	ldd	r24, Y+4	; 0x04
    109a:	9d 81       	ldd	r25, Y+5	; 0x05
    109c:	91 83       	std	Z+1, r25	; 0x01
    109e:	80 83       	st	Z, r24
        TIMER1_u16_ICR1_REG = copy_u16ICR1Value;
    10a0:	e6 e4       	ldi	r30, 0x46	; 70
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	8e 81       	ldd	r24, Y+6	; 0x06
    10a6:	9f 81       	ldd	r25, Y+7	; 0x07
    10a8:	91 83       	std	Z+1, r25	; 0x01
    10aa:	80 83       	st	Z, r24
    }
    else
    {
        local_TIMEREnumErrorState = TIMER1_CMATCH_NOK; 
    }
    return local_TIMEREnumErrorState;
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ae:	27 96       	adiw	r28, 0x07	; 7
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <__vector_11>:

/* ISR function for Timer0 => OVF */
void __vector_11(void)           __attribute__((signal));
void __vector_11(void) 
{
    10c0:	1f 92       	push	r1
    10c2:	0f 92       	push	r0
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	0f 92       	push	r0
    10c8:	11 24       	eor	r1, r1
    10ca:	2f 93       	push	r18
    10cc:	3f 93       	push	r19
    10ce:	4f 93       	push	r20
    10d0:	5f 93       	push	r21
    10d2:	6f 93       	push	r22
    10d4:	7f 93       	push	r23
    10d6:	8f 93       	push	r24
    10d8:	9f 93       	push	r25
    10da:	af 93       	push	r26
    10dc:	bf 93       	push	r27
    10de:	ef 93       	push	r30
    10e0:	ff 93       	push	r31
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    /* define static counter */
    static u16 local_u16Counter = 0;
    local_u16Counter++;
    10ea:	80 91 da 00 	lds	r24, 0x00DA
    10ee:	90 91 db 00 	lds	r25, 0x00DB
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	90 93 db 00 	sts	0x00DB, r25
    10f8:	80 93 da 00 	sts	0x00DA, r24
    if(local_u16Counter == TIMER0_u32_NORMAL_NO_OVF)
    10fc:	80 91 da 00 	lds	r24, 0x00DA
    1100:	90 91 db 00 	lds	r25, 0x00DB
    1104:	2f e0       	ldi	r18, 0x0F	; 15
    1106:	83 34       	cpi	r24, 0x43	; 67
    1108:	92 07       	cpc	r25, r18
    110a:	c1 f4       	brne	.+48     	; 0x113c <__vector_11+0x7c>
    {
        /* clear the counter */
        local_u16Counter = 0;
    110c:	10 92 db 00 	sts	0x00DB, r1
    1110:	10 92 da 00 	sts	0x00DA, r1
        if(TIMER0_u8PreloadValue != 0)
    1114:	80 91 bd 00 	lds	r24, 0x00BD
    1118:	88 23       	and	r24, r24
    111a:	29 f0       	breq	.+10     	; 0x1126 <__vector_11+0x66>
        {
            /* Update the preload Value */
            TIMER0_u8_TCNT0_REG = TIMER0_u8PreloadValue;
    111c:	e2 e5       	ldi	r30, 0x52	; 82
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 91 bd 00 	lds	r24, 0x00BD
    1124:	80 83       	st	Z, r24
        }
        /* chech about global pointer to function != NULL */
        if(TIMER_ApfTimer0[TIMER_NORMAL_MODE] != NULL)
    1126:	80 91 e2 00 	lds	r24, 0x00E2
    112a:	90 91 e3 00 	lds	r25, 0x00E3
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	29 f0       	breq	.+10     	; 0x113c <__vector_11+0x7c>
        {
            /* call the global pointer to function */
            TIMER_ApfTimer0[TIMER_NORMAL_MODE]();
    1132:	e0 91 e2 00 	lds	r30, 0x00E2
    1136:	f0 91 e3 00 	lds	r31, 0x00E3
    113a:	09 95       	icall
        }
    }
}
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	ff 91       	pop	r31
    1142:	ef 91       	pop	r30
    1144:	bf 91       	pop	r27
    1146:	af 91       	pop	r26
    1148:	9f 91       	pop	r25
    114a:	8f 91       	pop	r24
    114c:	7f 91       	pop	r23
    114e:	6f 91       	pop	r22
    1150:	5f 91       	pop	r21
    1152:	4f 91       	pop	r20
    1154:	3f 91       	pop	r19
    1156:	2f 91       	pop	r18
    1158:	0f 90       	pop	r0
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	0f 90       	pop	r0
    115e:	1f 90       	pop	r1
    1160:	18 95       	reti

00001162 <__vector_10>:

/* ISR function for Timer0 => Comp Match */
void __vector_10(void)           __attribute__((signal));
void __vector_10(void) 
{
    1162:	1f 92       	push	r1
    1164:	0f 92       	push	r0
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	0f 92       	push	r0
    116a:	11 24       	eor	r1, r1
    116c:	2f 93       	push	r18
    116e:	3f 93       	push	r19
    1170:	4f 93       	push	r20
    1172:	5f 93       	push	r21
    1174:	6f 93       	push	r22
    1176:	7f 93       	push	r23
    1178:	8f 93       	push	r24
    117a:	9f 93       	push	r25
    117c:	af 93       	push	r26
    117e:	bf 93       	push	r27
    1180:	ef 93       	push	r30
    1182:	ff 93       	push	r31
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    /* define static counter */
    static u16 local_u16Counter = 0;
    local_u16Counter++;
    118c:	80 91 dc 00 	lds	r24, 0x00DC
    1190:	90 91 dd 00 	lds	r25, 0x00DD
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	90 93 dd 00 	sts	0x00DD, r25
    119a:	80 93 dc 00 	sts	0x00DC, r24
    if(local_u16Counter == TIMER0_u32_CTC_NO_OVF)
    119e:	80 91 dc 00 	lds	r24, 0x00DC
    11a2:	90 91 dd 00 	lds	r25, 0x00DD
    11a6:	23 e1       	ldi	r18, 0x13	; 19
    11a8:	88 38       	cpi	r24, 0x88	; 136
    11aa:	92 07       	cpc	r25, r18
    11ac:	c1 f4       	brne	.+48     	; 0x11de <__vector_10+0x7c>
    {
        /* clear the counter */
        local_u16Counter = 0;
    11ae:	10 92 dd 00 	sts	0x00DD, r1
    11b2:	10 92 dc 00 	sts	0x00DC, r1
        if(TIMER0_u8PreloadValue != 0)
    11b6:	80 91 bd 00 	lds	r24, 0x00BD
    11ba:	88 23       	and	r24, r24
    11bc:	29 f0       	breq	.+10     	; 0x11c8 <__vector_10+0x66>
        {
            /* Update the preload Value */
            TIMER0_u8_TCNT0_REG = TIMER0_u8PreloadValue;
    11be:	e2 e5       	ldi	r30, 0x52	; 82
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 91 bd 00 	lds	r24, 0x00BD
    11c6:	80 83       	st	Z, r24
        }
        /* chech about global pointer to function != NULL */
        if(TIMER_ApfTimer0[TIMER_CTC_MODE] != NULL)
    11c8:	80 91 e4 00 	lds	r24, 0x00E4
    11cc:	90 91 e5 00 	lds	r25, 0x00E5
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	29 f0       	breq	.+10     	; 0x11de <__vector_10+0x7c>
        {
            /* call the global pointer to function */
            TIMER_ApfTimer0[TIMER_CTC_MODE]();
    11d4:	e0 91 e4 00 	lds	r30, 0x00E4
    11d8:	f0 91 e5 00 	lds	r31, 0x00E5
    11dc:	09 95       	icall
        }
    }
}
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	ff 91       	pop	r31
    11e4:	ef 91       	pop	r30
    11e6:	bf 91       	pop	r27
    11e8:	af 91       	pop	r26
    11ea:	9f 91       	pop	r25
    11ec:	8f 91       	pop	r24
    11ee:	7f 91       	pop	r23
    11f0:	6f 91       	pop	r22
    11f2:	5f 91       	pop	r21
    11f4:	4f 91       	pop	r20
    11f6:	3f 91       	pop	r19
    11f8:	2f 91       	pop	r18
    11fa:	0f 90       	pop	r0
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	0f 90       	pop	r0
    1200:	1f 90       	pop	r1
    1202:	18 95       	reti

00001204 <__vector_9>:

/* ISR function for Timer1 => OVF */
void __vector_9(void)           __attribute__((signal));
void __vector_9(void) 
{
    1204:	1f 92       	push	r1
    1206:	0f 92       	push	r0
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	0f 92       	push	r0
    120c:	11 24       	eor	r1, r1
    120e:	2f 93       	push	r18
    1210:	3f 93       	push	r19
    1212:	4f 93       	push	r20
    1214:	5f 93       	push	r21
    1216:	6f 93       	push	r22
    1218:	7f 93       	push	r23
    121a:	8f 93       	push	r24
    121c:	9f 93       	push	r25
    121e:	af 93       	push	r26
    1220:	bf 93       	push	r27
    1222:	ef 93       	push	r30
    1224:	ff 93       	push	r31
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    /* define static counter */
    static u16 local_u16Counter = 0;
    local_u16Counter++;
    122e:	80 91 de 00 	lds	r24, 0x00DE
    1232:	90 91 df 00 	lds	r25, 0x00DF
    1236:	01 96       	adiw	r24, 0x01	; 1
    1238:	90 93 df 00 	sts	0x00DF, r25
    123c:	80 93 de 00 	sts	0x00DE, r24
    if(local_u16Counter == TIMER1_u32_NORMAL_NO_OVF)
    1240:	80 91 de 00 	lds	r24, 0x00DE
    1244:	90 91 df 00 	lds	r25, 0x00DF
    1248:	2f e0       	ldi	r18, 0x0F	; 15
    124a:	83 34       	cpi	r24, 0x43	; 67
    124c:	92 07       	cpc	r25, r18
    124e:	d9 f4       	brne	.+54     	; 0x1286 <__vector_9+0x82>
    {
        /* clear the counter */
        local_u16Counter = 0;
    1250:	10 92 df 00 	sts	0x00DF, r1
    1254:	10 92 de 00 	sts	0x00DE, r1
        if(TIMER1_u16PreloadValue != 0)
    1258:	80 91 be 00 	lds	r24, 0x00BE
    125c:	90 91 bf 00 	lds	r25, 0x00BF
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	31 f0       	breq	.+12     	; 0x1270 <__vector_9+0x6c>
        {
            /* Update the preload Value */
            TIMER1_u16_TCNT1_REG = TIMER1_u16_PRELOAD_VALUE;
    1264:	ec e4       	ldi	r30, 0x4C	; 76
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 ec       	ldi	r24, 0xC0	; 192
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	91 83       	std	Z+1, r25	; 0x01
    126e:	80 83       	st	Z, r24
        }
        /* chech about global pointer to function != NULL */
        if(TIMER_ApfTimer1[TIMER_NORMAL_MODE] != NULL)
    1270:	80 91 e6 00 	lds	r24, 0x00E6
    1274:	90 91 e7 00 	lds	r25, 0x00E7
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	29 f0       	breq	.+10     	; 0x1286 <__vector_9+0x82>
        {
            /* call the global pointer to function */
            TIMER_ApfTimer1[TIMER_NORMAL_MODE]();
    127c:	e0 91 e6 00 	lds	r30, 0x00E6
    1280:	f0 91 e7 00 	lds	r31, 0x00E7
    1284:	09 95       	icall
        }
    }
}
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	ff 91       	pop	r31
    128c:	ef 91       	pop	r30
    128e:	bf 91       	pop	r27
    1290:	af 91       	pop	r26
    1292:	9f 91       	pop	r25
    1294:	8f 91       	pop	r24
    1296:	7f 91       	pop	r23
    1298:	6f 91       	pop	r22
    129a:	5f 91       	pop	r21
    129c:	4f 91       	pop	r20
    129e:	3f 91       	pop	r19
    12a0:	2f 91       	pop	r18
    12a2:	0f 90       	pop	r0
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	0f 90       	pop	r0
    12a8:	1f 90       	pop	r1
    12aa:	18 95       	reti

000012ac <__vector_7>:

/* ISR function for Timer1 => Comp Match */
void __vector_7(void)           __attribute__((signal));
void __vector_7(void) 
{
    12ac:	1f 92       	push	r1
    12ae:	0f 92       	push	r0
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	0f 92       	push	r0
    12b4:	11 24       	eor	r1, r1
    12b6:	2f 93       	push	r18
    12b8:	3f 93       	push	r19
    12ba:	4f 93       	push	r20
    12bc:	5f 93       	push	r21
    12be:	6f 93       	push	r22
    12c0:	7f 93       	push	r23
    12c2:	8f 93       	push	r24
    12c4:	9f 93       	push	r25
    12c6:	af 93       	push	r26
    12c8:	bf 93       	push	r27
    12ca:	ef 93       	push	r30
    12cc:	ff 93       	push	r31
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    /* define static counter */
    static u16 local_u16Counter = 0;
    local_u16Counter++;
    12d6:	80 91 e0 00 	lds	r24, 0x00E0
    12da:	90 91 e1 00 	lds	r25, 0x00E1
    12de:	01 96       	adiw	r24, 0x01	; 1
    12e0:	90 93 e1 00 	sts	0x00E1, r25
    12e4:	80 93 e0 00 	sts	0x00E0, r24
    if(local_u16Counter == TIMER1_u32_CTC_NO_OVF)
    12e8:	80 91 e0 00 	lds	r24, 0x00E0
    12ec:	90 91 e1 00 	lds	r25, 0x00E1
    12f0:	21 e0       	ldi	r18, 0x01	; 1
    12f2:	84 3f       	cpi	r24, 0xF4	; 244
    12f4:	92 07       	cpc	r25, r18
    12f6:	79 f4       	brne	.+30     	; 0x1316 <__vector_7+0x6a>
    {
        /* clear the counter */
        local_u16Counter = 0;
    12f8:	10 92 e1 00 	sts	0x00E1, r1
    12fc:	10 92 e0 00 	sts	0x00E0, r1
        /* chech about global pointer to function != NULL */
        if(TIMER_ApfTimer1[TIMER_CTC_MODE] != NULL)
    1300:	80 91 e8 00 	lds	r24, 0x00E8
    1304:	90 91 e9 00 	lds	r25, 0x00E9
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	29 f0       	breq	.+10     	; 0x1316 <__vector_7+0x6a>
        {
            /* call the global pointer to function */
            TIMER_ApfTimer1[TIMER_CTC_MODE]();
    130c:	e0 91 e8 00 	lds	r30, 0x00E8
    1310:	f0 91 e9 00 	lds	r31, 0x00E9
    1314:	09 95       	icall
        }
    }
}
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	ff 91       	pop	r31
    131c:	ef 91       	pop	r30
    131e:	bf 91       	pop	r27
    1320:	af 91       	pop	r26
    1322:	9f 91       	pop	r25
    1324:	8f 91       	pop	r24
    1326:	7f 91       	pop	r23
    1328:	6f 91       	pop	r22
    132a:	5f 91       	pop	r21
    132c:	4f 91       	pop	r20
    132e:	3f 91       	pop	r19
    1330:	2f 91       	pop	r18
    1332:	0f 90       	pop	r0
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	0f 90       	pop	r0
    1338:	1f 90       	pop	r1
    133a:	18 95       	reti

0000133c <PORT_voidInit>:
#include "../Include/PORT_private.h"
#include "../Include/PORT_config.h"


void PORT_voidInit(void)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
	/* Initialization Direction for all Pins */
	// PORTA
	PORT_u8_DDRA_REG = CONC(PORT_u8_PA7_DIRECTION,PORT_u8_PA6_DIRECTION,PORT_u8_PA5_DIRECTION,PORT_u8_PA4_DIRECTION,
    1344:	ea e3       	ldi	r30, 0x3A	; 58
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	8f ef       	ldi	r24, 0xFF	; 255
    134a:	80 83       	st	Z, r24
	                        PORT_u8_PA3_DIRECTION,PORT_u8_PA2_DIRECTION,PORT_u8_PA1_DIRECTION,PORT_u8_PA0_DIRECTION);
	// PORTB
	PORT_u8_DDRB_REG = CONC(PORT_u8_PB7_DIRECTION,PORT_u8_PB6_DIRECTION,PORT_u8_PB5_DIRECTION,PORT_u8_PB4_DIRECTION,
    134c:	e7 e3       	ldi	r30, 0x37	; 55
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	8f e0       	ldi	r24, 0x0F	; 15
    1352:	80 83       	st	Z, r24
	                        PORT_u8_PB3_DIRECTION,PORT_u8_PB2_DIRECTION,PORT_u8_PB1_DIRECTION,PORT_u8_PB0_DIRECTION);
	// PORTC
	PORT_u8_DDRC_REG = CONC(PORT_u8_PC7_DIRECTION,PORT_u8_PC6_DIRECTION,PORT_u8_PC5_DIRECTION,PORT_u8_PC4_DIRECTION,
    1354:	e4 e3       	ldi	r30, 0x34	; 52
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 ef       	ldi	r24, 0xF0	; 240
    135a:	80 83       	st	Z, r24
							PORT_u8_PC3_DIRECTION,PORT_u8_PC2_DIRECTION,PORT_u8_PC1_DIRECTION,PORT_u8_PC0_DIRECTION);
	// PORTD
	PORT_u8_DDRD_REG = CONC(PORT_u8_PD7_DIRECTION,PORT_u8_PD6_DIRECTION,PORT_u8_PD5_DIRECTION,PORT_u8_PD4_DIRECTION,
    135c:	e1 e3       	ldi	r30, 0x31	; 49
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	80 83       	st	Z, r24
							PORT_u8_PD3_DIRECTION,PORT_u8_PD2_DIRECTION,PORT_u8_PD1_DIRECTION,PORT_u8_PD0_DIRECTION);
					
	/* Initialization Value for all Pins  */
	// PORTA
	PORT_u8_PORTA_REG = CONC(PORT_u8_PA7_VALUE,PORT_u8_PA6_VALUE,PORT_u8_PA5_VALUE,PORT_u8_PA4_VALUE,
    1364:	eb e3       	ldi	r30, 0x3B	; 59
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	10 82       	st	Z, r1
							 PORT_u8_PA3_VALUE,PORT_u8_PA2_VALUE,PORT_u8_PA1_VALUE,PORT_u8_PA0_VALUE);
	// PORTB
	PORT_u8_PORTB_REG = CONC(PORT_u8_PB7_VALUE,PORT_u8_PB6_VALUE,PORT_u8_PB5_VALUE,PORT_u8_PB4_VALUE,
    136a:	e8 e3       	ldi	r30, 0x38	; 56
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	8f ef       	ldi	r24, 0xFF	; 255
    1370:	80 83       	st	Z, r24
							 PORT_u8_PB3_VALUE,PORT_u8_PB2_VALUE,PORT_u8_PB1_VALUE,PORT_u8_PB0_VALUE);
	// PORTC
	PORT_u8_PORTC_REG = CONC(PORT_u8_PC7_VALUE,PORT_u8_PC6_VALUE,PORT_u8_PC5_VALUE,PORT_u8_PC4_VALUE,
    1372:	e5 e3       	ldi	r30, 0x35	; 53
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	8f e0       	ldi	r24, 0x0F	; 15
    1378:	80 83       	st	Z, r24
							 PORT_u8_PC3_VALUE,PORT_u8_PC2_VALUE,PORT_u8_PC1_VALUE,PORT_u8_PC0_VALUE);
	// PORTD
	PORT_u8_PORTD_REG = CONC(PORT_u8_PD7_VALUE,PORT_u8_PD6_VALUE,PORT_u8_PD5_VALUE,PORT_u8_PD4_VALUE,
    137a:	e2 e3       	ldi	r30, 0x32	; 50
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	10 82       	st	Z, r1
							 PORT_u8_PD3_VALUE,PORT_u8_PD2_VALUE,PORT_u8_PD1_VALUE,PORT_u8_PD0_VALUE);
}
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <PORT_PortEnumSetPinDirection>:

PortEnum PORT_PortEnumSetPinDirection(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Direction)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	2e 97       	sbiw	r28, 0x0e	; 14
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	8a 83       	std	Y+2, r24	; 0x02
    139c:	6b 83       	std	Y+3, r22	; 0x03
    139e:	4c 83       	std	Y+4, r20	; 0x04
	PortEnum local_PortEnumErrorState = PORT_DIRECTION_OK;
    13a0:	19 82       	std	Y+1, r1	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= PORT_u8_PORTD) && (copy_u8PinId <= PORT_u8_PIN7))
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	84 30       	cpi	r24, 0x04	; 4
    13a6:	08 f0       	brcs	.+2      	; 0x13aa <PORT_PortEnumSetPinDirection+0x24>
    13a8:	05 c1       	rjmp	.+522    	; 0x15b4 <PORT_PortEnumSetPinDirection+0x22e>
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	88 30       	cpi	r24, 0x08	; 8
    13ae:	08 f0       	brcs	.+2      	; 0x13b2 <PORT_PortEnumSetPinDirection+0x2c>
    13b0:	01 c1       	rjmp	.+514    	; 0x15b4 <PORT_PortEnumSetPinDirection+0x22e>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	3e 87       	std	Y+14, r19	; 0x0e
    13ba:	2d 87       	std	Y+13, r18	; 0x0d
    13bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13be:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	91 05       	cpc	r25, r1
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <PORT_PortEnumSetPinDirection+0x42>
    13c6:	4f c0       	rjmp	.+158    	; 0x1466 <PORT_PortEnumSetPinDirection+0xe0>
    13c8:	2d 85       	ldd	r18, Y+13	; 0x0d
    13ca:	3e 85       	ldd	r19, Y+14	; 0x0e
    13cc:	22 30       	cpi	r18, 0x02	; 2
    13ce:	31 05       	cpc	r19, r1
    13d0:	2c f4       	brge	.+10     	; 0x13dc <PORT_PortEnumSetPinDirection+0x56>
    13d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	71 f0       	breq	.+28     	; 0x13f6 <PORT_PortEnumSetPinDirection+0x70>
    13da:	ee c0       	rjmp	.+476    	; 0x15b8 <PORT_PortEnumSetPinDirection+0x232>
    13dc:	2d 85       	ldd	r18, Y+13	; 0x0d
    13de:	3e 85       	ldd	r19, Y+14	; 0x0e
    13e0:	22 30       	cpi	r18, 0x02	; 2
    13e2:	31 05       	cpc	r19, r1
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <PORT_PortEnumSetPinDirection+0x62>
    13e6:	77 c0       	rjmp	.+238    	; 0x14d6 <PORT_PortEnumSetPinDirection+0x150>
    13e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ec:	83 30       	cpi	r24, 0x03	; 3
    13ee:	91 05       	cpc	r25, r1
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <PORT_PortEnumSetPinDirection+0x6e>
    13f2:	a9 c0       	rjmp	.+338    	; 0x1546 <PORT_PortEnumSetPinDirection+0x1c0>
    13f4:	e1 c0       	rjmp	.+450    	; 0x15b8 <PORT_PortEnumSetPinDirection+0x232>
		{
			case PORT_u8_PORTA:   // PORTA
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
    13f6:	8c 81       	ldd	r24, Y+4	; 0x04
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	3c 87       	std	Y+12, r19	; 0x0c
    13fe:	2b 87       	std	Y+11, r18	; 0x0b
    1400:	8b 85       	ldd	r24, Y+11	; 0x0b
    1402:	9c 85       	ldd	r25, Y+12	; 0x0c
    1404:	00 97       	sbiw	r24, 0x00	; 0
    1406:	d1 f0       	breq	.+52     	; 0x143c <PORT_PortEnumSetPinDirection+0xb6>
    1408:	2b 85       	ldd	r18, Y+11	; 0x0b
    140a:	3c 85       	ldd	r19, Y+12	; 0x0c
    140c:	21 30       	cpi	r18, 0x01	; 1
    140e:	31 05       	cpc	r19, r1
    1410:	09 f0       	breq	.+2      	; 0x1414 <PORT_PortEnumSetPinDirection+0x8e>
    1412:	d2 c0       	rjmp	.+420    	; 0x15b8 <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRA_REG,copy_u8PinId);     break;
    1414:	aa e3       	ldi	r26, 0x3A	; 58
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	ea e3       	ldi	r30, 0x3A	; 58
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <PORT_PortEnumSetPinDirection+0xac>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <PORT_PortEnumSetPinDirection+0xa8>
    1436:	84 2b       	or	r24, r20
    1438:	8c 93       	st	X, r24
    143a:	be c0       	rjmp	.+380    	; 0x15b8 <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRA_REG,copy_u8PinId);     break;
    143c:	aa e3       	ldi	r26, 0x3A	; 58
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	ea e3       	ldi	r30, 0x3A	; 58
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	48 2f       	mov	r20, r24
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 2e       	mov	r0, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <PORT_PortEnumSetPinDirection+0xd4>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	0a 94       	dec	r0
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <PORT_PortEnumSetPinDirection+0xd0>
    145e:	80 95       	com	r24
    1460:	84 23       	and	r24, r20
    1462:	8c 93       	st	X, r24
    1464:	a9 c0       	rjmp	.+338    	; 0x15b8 <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTB:   // PORTB
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
    1466:	8c 81       	ldd	r24, Y+4	; 0x04
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	3a 87       	std	Y+10, r19	; 0x0a
    146e:	29 87       	std	Y+9, r18	; 0x09
    1470:	89 85       	ldd	r24, Y+9	; 0x09
    1472:	9a 85       	ldd	r25, Y+10	; 0x0a
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	d1 f0       	breq	.+52     	; 0x14ac <PORT_PortEnumSetPinDirection+0x126>
    1478:	29 85       	ldd	r18, Y+9	; 0x09
    147a:	3a 85       	ldd	r19, Y+10	; 0x0a
    147c:	21 30       	cpi	r18, 0x01	; 1
    147e:	31 05       	cpc	r19, r1
    1480:	09 f0       	breq	.+2      	; 0x1484 <PORT_PortEnumSetPinDirection+0xfe>
    1482:	9a c0       	rjmp	.+308    	; 0x15b8 <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRB_REG,copy_u8PinId);     break;
    1484:	a7 e3       	ldi	r26, 0x37	; 55
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e7 e3       	ldi	r30, 0x37	; 55
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <PORT_PortEnumSetPinDirection+0x11c>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <PORT_PortEnumSetPinDirection+0x118>
    14a6:	84 2b       	or	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	86 c0       	rjmp	.+268    	; 0x15b8 <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRB_REG,copy_u8PinId);     break;
    14ac:	a7 e3       	ldi	r26, 0x37	; 55
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e7 e3       	ldi	r30, 0x37	; 55
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <PORT_PortEnumSetPinDirection+0x144>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <PORT_PortEnumSetPinDirection+0x140>
    14ce:	80 95       	com	r24
    14d0:	84 23       	and	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	71 c0       	rjmp	.+226    	; 0x15b8 <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTC:  // PORTC
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	38 87       	std	Y+8, r19	; 0x08
    14de:	2f 83       	std	Y+7, r18	; 0x07
    14e0:	8f 81       	ldd	r24, Y+7	; 0x07
    14e2:	98 85       	ldd	r25, Y+8	; 0x08
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	d1 f0       	breq	.+52     	; 0x151c <PORT_PortEnumSetPinDirection+0x196>
    14e8:	2f 81       	ldd	r18, Y+7	; 0x07
    14ea:	38 85       	ldd	r19, Y+8	; 0x08
    14ec:	21 30       	cpi	r18, 0x01	; 1
    14ee:	31 05       	cpc	r19, r1
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <PORT_PortEnumSetPinDirection+0x16e>
    14f2:	62 c0       	rjmp	.+196    	; 0x15b8 <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRC_REG,copy_u8PinId);     break;
    14f4:	a4 e3       	ldi	r26, 0x34	; 52
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e4 e3       	ldi	r30, 0x34	; 52
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 2e       	mov	r0, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <PORT_PortEnumSetPinDirection+0x18c>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <PORT_PortEnumSetPinDirection+0x188>
    1516:	84 2b       	or	r24, r20
    1518:	8c 93       	st	X, r24
    151a:	4e c0       	rjmp	.+156    	; 0x15b8 <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRC_REG,copy_u8PinId);     break;
    151c:	a4 e3       	ldi	r26, 0x34	; 52
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e4 e3       	ldi	r30, 0x34	; 52
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <PORT_PortEnumSetPinDirection+0x1b4>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <PORT_PortEnumSetPinDirection+0x1b0>
    153e:	80 95       	com	r24
    1540:	84 23       	and	r24, r20
    1542:	8c 93       	st	X, r24
    1544:	39 c0       	rjmp	.+114    	; 0x15b8 <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTD:  // PORTD
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
    1546:	8c 81       	ldd	r24, Y+4	; 0x04
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	3e 83       	std	Y+6, r19	; 0x06
    154e:	2d 83       	std	Y+5, r18	; 0x05
    1550:	8d 81       	ldd	r24, Y+5	; 0x05
    1552:	9e 81       	ldd	r25, Y+6	; 0x06
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	c9 f0       	breq	.+50     	; 0x158a <PORT_PortEnumSetPinDirection+0x204>
    1558:	2d 81       	ldd	r18, Y+5	; 0x05
    155a:	3e 81       	ldd	r19, Y+6	; 0x06
    155c:	21 30       	cpi	r18, 0x01	; 1
    155e:	31 05       	cpc	r19, r1
    1560:	59 f5       	brne	.+86     	; 0x15b8 <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRD_REG,copy_u8PinId);     break;
    1562:	a1 e3       	ldi	r26, 0x31	; 49
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e1 e3       	ldi	r30, 0x31	; 49
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <PORT_PortEnumSetPinDirection+0x1fa>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <PORT_PortEnumSetPinDirection+0x1f6>
    1584:	84 2b       	or	r24, r20
    1586:	8c 93       	st	X, r24
    1588:	17 c0       	rjmp	.+46     	; 0x15b8 <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRD_REG,copy_u8PinId);     break;
    158a:	a1 e3       	ldi	r26, 0x31	; 49
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e1 e3       	ldi	r30, 0x31	; 49
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 2e       	mov	r0, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <PORT_PortEnumSetPinDirection+0x222>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <PORT_PortEnumSetPinDirection+0x21e>
    15ac:	80 95       	com	r24
    15ae:	84 23       	and	r24, r20
    15b0:	8c 93       	st	X, r24
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <PORT_PortEnumSetPinDirection+0x232>
			break;
		}
	}
	else
	{
		local_PortEnumErrorState = PORT_DIRECTION_NOK;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_PortEnumErrorState;
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ba:	2e 96       	adiw	r28, 0x0e	; 14
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <PORT_PortEnumSetPinMode>:


PortEnum PORT_PortEnumSetPinMode(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Mode)
{
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	2e 97       	sbiw	r28, 0x0e	; 14
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	8a 83       	std	Y+2, r24	; 0x02
    15e2:	6b 83       	std	Y+3, r22	; 0x03
    15e4:	4c 83       	std	Y+4, r20	; 0x04
	PortEnum local_PortEnumErrorState = PORT_MODE_OK;
    15e6:	82 e0       	ldi	r24, 0x02	; 2
    15e8:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= PORT_u8_PORTD) && (copy_u8PinId <= PORT_u8_PIN7))
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	84 30       	cpi	r24, 0x04	; 4
    15ee:	08 f0       	brcs	.+2      	; 0x15f2 <PORT_PortEnumSetPinMode+0x26>
    15f0:	ee c1       	rjmp	.+988    	; 0x19ce <PORT_PortEnumSetPinMode+0x402>
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	88 30       	cpi	r24, 0x08	; 8
    15f6:	08 f0       	brcs	.+2      	; 0x15fa <PORT_PortEnumSetPinMode+0x2e>
    15f8:	ea c1       	rjmp	.+980    	; 0x19ce <PORT_PortEnumSetPinMode+0x402>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	3e 87       	std	Y+14, r19	; 0x0e
    1602:	2d 87       	std	Y+13, r18	; 0x0d
    1604:	8d 85       	ldd	r24, Y+13	; 0x0d
    1606:	9e 85       	ldd	r25, Y+14	; 0x0e
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	91 05       	cpc	r25, r1
    160c:	09 f4       	brne	.+2      	; 0x1610 <PORT_PortEnumSetPinMode+0x44>
    160e:	89 c0       	rjmp	.+274    	; 0x1722 <PORT_PortEnumSetPinMode+0x156>
    1610:	2d 85       	ldd	r18, Y+13	; 0x0d
    1612:	3e 85       	ldd	r19, Y+14	; 0x0e
    1614:	22 30       	cpi	r18, 0x02	; 2
    1616:	31 05       	cpc	r19, r1
    1618:	2c f4       	brge	.+10     	; 0x1624 <PORT_PortEnumSetPinMode+0x58>
    161a:	8d 85       	ldd	r24, Y+13	; 0x0d
    161c:	9e 85       	ldd	r25, Y+14	; 0x0e
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	71 f0       	breq	.+28     	; 0x163e <PORT_PortEnumSetPinMode+0x72>
    1622:	d7 c1       	rjmp	.+942    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
    1624:	2d 85       	ldd	r18, Y+13	; 0x0d
    1626:	3e 85       	ldd	r19, Y+14	; 0x0e
    1628:	22 30       	cpi	r18, 0x02	; 2
    162a:	31 05       	cpc	r19, r1
    162c:	09 f4       	brne	.+2      	; 0x1630 <PORT_PortEnumSetPinMode+0x64>
    162e:	eb c0       	rjmp	.+470    	; 0x1806 <PORT_PortEnumSetPinMode+0x23a>
    1630:	8d 85       	ldd	r24, Y+13	; 0x0d
    1632:	9e 85       	ldd	r25, Y+14	; 0x0e
    1634:	83 30       	cpi	r24, 0x03	; 3
    1636:	91 05       	cpc	r25, r1
    1638:	09 f4       	brne	.+2      	; 0x163c <PORT_PortEnumSetPinMode+0x70>
    163a:	57 c1       	rjmp	.+686    	; 0x18ea <PORT_PortEnumSetPinMode+0x31e>
    163c:	ca c1       	rjmp	.+916    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
		{
			case PORT_u8_PORTA:  // PORTA
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    163e:	8c 81       	ldd	r24, Y+4	; 0x04
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	3c 87       	std	Y+12, r19	; 0x0c
    1646:	2b 87       	std	Y+11, r18	; 0x0b
    1648:	8b 85       	ldd	r24, Y+11	; 0x0b
    164a:	9c 85       	ldd	r25, Y+12	; 0x0c
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	91 05       	cpc	r25, r1
    1650:	b1 f0       	breq	.+44     	; 0x167e <PORT_PortEnumSetPinMode+0xb2>
    1652:	2b 85       	ldd	r18, Y+11	; 0x0b
    1654:	3c 85       	ldd	r19, Y+12	; 0x0c
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	31 05       	cpc	r19, r1
    165a:	2c f4       	brge	.+10     	; 0x1666 <PORT_PortEnumSetPinMode+0x9a>
    165c:	8b 85       	ldd	r24, Y+11	; 0x0b
    165e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	09 f1       	breq	.+66     	; 0x16a6 <PORT_PortEnumSetPinMode+0xda>
    1664:	b6 c1       	rjmp	.+876    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
    1666:	2b 85       	ldd	r18, Y+11	; 0x0b
    1668:	3c 85       	ldd	r19, Y+12	; 0x0c
    166a:	22 30       	cpi	r18, 0x02	; 2
    166c:	31 05       	cpc	r19, r1
    166e:	81 f1       	breq	.+96     	; 0x16d0 <PORT_PortEnumSetPinMode+0x104>
    1670:	8b 85       	ldd	r24, Y+11	; 0x0b
    1672:	9c 85       	ldd	r25, Y+12	; 0x0c
    1674:	83 30       	cpi	r24, 0x03	; 3
    1676:	91 05       	cpc	r25, r1
    1678:	09 f4       	brne	.+2      	; 0x167c <PORT_PortEnumSetPinMode+0xb0>
    167a:	3e c0       	rjmp	.+124    	; 0x16f8 <PORT_PortEnumSetPinMode+0x12c>
    167c:	aa c1       	rjmp	.+852    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
    167e:	ab e3       	ldi	r26, 0x3B	; 59
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	eb e3       	ldi	r30, 0x3B	; 59
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 2e       	mov	r0, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <PORT_PortEnumSetPinMode+0xd0>
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	0a 94       	dec	r0
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <PORT_PortEnumSetPinMode+0xcc>
    16a0:	84 2b       	or	r24, r20
    16a2:	8c 93       	st	X, r24
    16a4:	96 c1       	rjmp	.+812    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
    16a6:	ab e3       	ldi	r26, 0x3B	; 59
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	eb e3       	ldi	r30, 0x3B	; 59
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	48 2f       	mov	r20, r24
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 2e       	mov	r0, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <PORT_PortEnumSetPinMode+0xf8>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <PORT_PortEnumSetPinMode+0xf4>
    16c8:	80 95       	com	r24
    16ca:	84 23       	and	r24, r20
    16cc:	8c 93       	st	X, r24
    16ce:	81 c1       	rjmp	.+770    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
    16d0:	ab e3       	ldi	r26, 0x3B	; 59
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	eb e3       	ldi	r30, 0x3B	; 59
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	48 2f       	mov	r20, r24
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 2e       	mov	r0, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <PORT_PortEnumSetPinMode+0x122>
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	0a 94       	dec	r0
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <PORT_PortEnumSetPinMode+0x11e>
    16f2:	84 2b       	or	r24, r20
    16f4:	8c 93       	st	X, r24
    16f6:	6d c1       	rjmp	.+730    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
    16f8:	ab e3       	ldi	r26, 0x3B	; 59
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	eb e3       	ldi	r30, 0x3B	; 59
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	48 2f       	mov	r20, r24
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 2e       	mov	r0, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <PORT_PortEnumSetPinMode+0x14a>
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	0a 94       	dec	r0
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <PORT_PortEnumSetPinMode+0x146>
    171a:	80 95       	com	r24
    171c:	84 23       	and	r24, r20
    171e:	8c 93       	st	X, r24
    1720:	58 c1       	rjmp	.+688    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTB:  // PORTB
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    1722:	8c 81       	ldd	r24, Y+4	; 0x04
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	3a 87       	std	Y+10, r19	; 0x0a
    172a:	29 87       	std	Y+9, r18	; 0x09
    172c:	89 85       	ldd	r24, Y+9	; 0x09
    172e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	91 05       	cpc	r25, r1
    1734:	b1 f0       	breq	.+44     	; 0x1762 <PORT_PortEnumSetPinMode+0x196>
    1736:	29 85       	ldd	r18, Y+9	; 0x09
    1738:	3a 85       	ldd	r19, Y+10	; 0x0a
    173a:	22 30       	cpi	r18, 0x02	; 2
    173c:	31 05       	cpc	r19, r1
    173e:	2c f4       	brge	.+10     	; 0x174a <PORT_PortEnumSetPinMode+0x17e>
    1740:	89 85       	ldd	r24, Y+9	; 0x09
    1742:	9a 85       	ldd	r25, Y+10	; 0x0a
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	09 f1       	breq	.+66     	; 0x178a <PORT_PortEnumSetPinMode+0x1be>
    1748:	44 c1       	rjmp	.+648    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
    174a:	29 85       	ldd	r18, Y+9	; 0x09
    174c:	3a 85       	ldd	r19, Y+10	; 0x0a
    174e:	22 30       	cpi	r18, 0x02	; 2
    1750:	31 05       	cpc	r19, r1
    1752:	81 f1       	breq	.+96     	; 0x17b4 <PORT_PortEnumSetPinMode+0x1e8>
    1754:	89 85       	ldd	r24, Y+9	; 0x09
    1756:	9a 85       	ldd	r25, Y+10	; 0x0a
    1758:	83 30       	cpi	r24, 0x03	; 3
    175a:	91 05       	cpc	r25, r1
    175c:	09 f4       	brne	.+2      	; 0x1760 <PORT_PortEnumSetPinMode+0x194>
    175e:	3e c0       	rjmp	.+124    	; 0x17dc <PORT_PortEnumSetPinMode+0x210>
    1760:	38 c1       	rjmp	.+624    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
    1762:	a8 e3       	ldi	r26, 0x38	; 56
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e8 e3       	ldi	r30, 0x38	; 56
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	48 2f       	mov	r20, r24
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	02 2e       	mov	r0, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <PORT_PortEnumSetPinMode+0x1b4>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	0a 94       	dec	r0
    1782:	e2 f7       	brpl	.-8      	; 0x177c <PORT_PortEnumSetPinMode+0x1b0>
    1784:	84 2b       	or	r24, r20
    1786:	8c 93       	st	X, r24
    1788:	24 c1       	rjmp	.+584    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
    178a:	a8 e3       	ldi	r26, 0x38	; 56
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e8 e3       	ldi	r30, 0x38	; 56
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <PORT_PortEnumSetPinMode+0x1dc>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <PORT_PortEnumSetPinMode+0x1d8>
    17ac:	80 95       	com	r24
    17ae:	84 23       	and	r24, r20
    17b0:	8c 93       	st	X, r24
    17b2:	0f c1       	rjmp	.+542    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
    17b4:	a8 e3       	ldi	r26, 0x38	; 56
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e8 e3       	ldi	r30, 0x38	; 56
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	48 2f       	mov	r20, r24
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	02 2e       	mov	r0, r18
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <PORT_PortEnumSetPinMode+0x206>
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	0a 94       	dec	r0
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <PORT_PortEnumSetPinMode+0x202>
    17d6:	84 2b       	or	r24, r20
    17d8:	8c 93       	st	X, r24
    17da:	fb c0       	rjmp	.+502    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
    17dc:	a8 e3       	ldi	r26, 0x38	; 56
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e8 e3       	ldi	r30, 0x38	; 56
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 2e       	mov	r0, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <PORT_PortEnumSetPinMode+0x22e>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <PORT_PortEnumSetPinMode+0x22a>
    17fe:	80 95       	com	r24
    1800:	84 23       	and	r24, r20
    1802:	8c 93       	st	X, r24
    1804:	e6 c0       	rjmp	.+460    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTC:  // PORTC
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    1806:	8c 81       	ldd	r24, Y+4	; 0x04
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	38 87       	std	Y+8, r19	; 0x08
    180e:	2f 83       	std	Y+7, r18	; 0x07
    1810:	8f 81       	ldd	r24, Y+7	; 0x07
    1812:	98 85       	ldd	r25, Y+8	; 0x08
    1814:	81 30       	cpi	r24, 0x01	; 1
    1816:	91 05       	cpc	r25, r1
    1818:	b1 f0       	breq	.+44     	; 0x1846 <PORT_PortEnumSetPinMode+0x27a>
    181a:	2f 81       	ldd	r18, Y+7	; 0x07
    181c:	38 85       	ldd	r19, Y+8	; 0x08
    181e:	22 30       	cpi	r18, 0x02	; 2
    1820:	31 05       	cpc	r19, r1
    1822:	2c f4       	brge	.+10     	; 0x182e <PORT_PortEnumSetPinMode+0x262>
    1824:	8f 81       	ldd	r24, Y+7	; 0x07
    1826:	98 85       	ldd	r25, Y+8	; 0x08
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	09 f1       	breq	.+66     	; 0x186e <PORT_PortEnumSetPinMode+0x2a2>
    182c:	d2 c0       	rjmp	.+420    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
    182e:	2f 81       	ldd	r18, Y+7	; 0x07
    1830:	38 85       	ldd	r19, Y+8	; 0x08
    1832:	22 30       	cpi	r18, 0x02	; 2
    1834:	31 05       	cpc	r19, r1
    1836:	81 f1       	breq	.+96     	; 0x1898 <PORT_PortEnumSetPinMode+0x2cc>
    1838:	8f 81       	ldd	r24, Y+7	; 0x07
    183a:	98 85       	ldd	r25, Y+8	; 0x08
    183c:	83 30       	cpi	r24, 0x03	; 3
    183e:	91 05       	cpc	r25, r1
    1840:	09 f4       	brne	.+2      	; 0x1844 <PORT_PortEnumSetPinMode+0x278>
    1842:	3e c0       	rjmp	.+124    	; 0x18c0 <PORT_PortEnumSetPinMode+0x2f4>
    1844:	c6 c0       	rjmp	.+396    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    1846:	a5 e3       	ldi	r26, 0x35	; 53
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e5 e3       	ldi	r30, 0x35	; 53
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	48 2f       	mov	r20, r24
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	02 2e       	mov	r0, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <PORT_PortEnumSetPinMode+0x298>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	0a 94       	dec	r0
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <PORT_PortEnumSetPinMode+0x294>
    1868:	84 2b       	or	r24, r20
    186a:	8c 93       	st	X, r24
    186c:	b2 c0       	rjmp	.+356    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    186e:	a5 e3       	ldi	r26, 0x35	; 53
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e5 e3       	ldi	r30, 0x35	; 53
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	48 2f       	mov	r20, r24
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	02 2e       	mov	r0, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <PORT_PortEnumSetPinMode+0x2c0>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	0a 94       	dec	r0
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <PORT_PortEnumSetPinMode+0x2bc>
    1890:	80 95       	com	r24
    1892:	84 23       	and	r24, r20
    1894:	8c 93       	st	X, r24
    1896:	9d c0       	rjmp	.+314    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    1898:	a5 e3       	ldi	r26, 0x35	; 53
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e5 e3       	ldi	r30, 0x35	; 53
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <PORT_PortEnumSetPinMode+0x2ea>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <PORT_PortEnumSetPinMode+0x2e6>
    18ba:	84 2b       	or	r24, r20
    18bc:	8c 93       	st	X, r24
    18be:	89 c0       	rjmp	.+274    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    18c0:	a5 e3       	ldi	r26, 0x35	; 53
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e5 e3       	ldi	r30, 0x35	; 53
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 2e       	mov	r0, r18
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <PORT_PortEnumSetPinMode+0x312>
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	0a 94       	dec	r0
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <PORT_PortEnumSetPinMode+0x30e>
    18e2:	80 95       	com	r24
    18e4:	84 23       	and	r24, r20
    18e6:	8c 93       	st	X, r24
    18e8:	74 c0       	rjmp	.+232    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTD:  // PORTD
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    18ea:	8c 81       	ldd	r24, Y+4	; 0x04
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	3e 83       	std	Y+6, r19	; 0x06
    18f2:	2d 83       	std	Y+5, r18	; 0x05
    18f4:	8d 81       	ldd	r24, Y+5	; 0x05
    18f6:	9e 81       	ldd	r25, Y+6	; 0x06
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	91 05       	cpc	r25, r1
    18fc:	b1 f0       	breq	.+44     	; 0x192a <PORT_PortEnumSetPinMode+0x35e>
    18fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1900:	3e 81       	ldd	r19, Y+6	; 0x06
    1902:	22 30       	cpi	r18, 0x02	; 2
    1904:	31 05       	cpc	r19, r1
    1906:	2c f4       	brge	.+10     	; 0x1912 <PORT_PortEnumSetPinMode+0x346>
    1908:	8d 81       	ldd	r24, Y+5	; 0x05
    190a:	9e 81       	ldd	r25, Y+6	; 0x06
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	09 f1       	breq	.+66     	; 0x1952 <PORT_PortEnumSetPinMode+0x386>
    1910:	60 c0       	rjmp	.+192    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
    1912:	2d 81       	ldd	r18, Y+5	; 0x05
    1914:	3e 81       	ldd	r19, Y+6	; 0x06
    1916:	22 30       	cpi	r18, 0x02	; 2
    1918:	31 05       	cpc	r19, r1
    191a:	81 f1       	breq	.+96     	; 0x197c <PORT_PortEnumSetPinMode+0x3b0>
    191c:	8d 81       	ldd	r24, Y+5	; 0x05
    191e:	9e 81       	ldd	r25, Y+6	; 0x06
    1920:	83 30       	cpi	r24, 0x03	; 3
    1922:	91 05       	cpc	r25, r1
    1924:	09 f4       	brne	.+2      	; 0x1928 <PORT_PortEnumSetPinMode+0x35c>
    1926:	3e c0       	rjmp	.+124    	; 0x19a4 <PORT_PortEnumSetPinMode+0x3d8>
    1928:	54 c0       	rjmp	.+168    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    192a:	a2 e3       	ldi	r26, 0x32	; 50
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e2 e3       	ldi	r30, 0x32	; 50
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 2e       	mov	r0, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <PORT_PortEnumSetPinMode+0x37c>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <PORT_PortEnumSetPinMode+0x378>
    194c:	84 2b       	or	r24, r20
    194e:	8c 93       	st	X, r24
    1950:	40 c0       	rjmp	.+128    	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    1952:	a2 e3       	ldi	r26, 0x32	; 50
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e2 e3       	ldi	r30, 0x32	; 50
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	48 2f       	mov	r20, r24
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	02 2e       	mov	r0, r18
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <PORT_PortEnumSetPinMode+0x3a4>
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	0a 94       	dec	r0
    1972:	e2 f7       	brpl	.-8      	; 0x196c <PORT_PortEnumSetPinMode+0x3a0>
    1974:	80 95       	com	r24
    1976:	84 23       	and	r24, r20
    1978:	8c 93       	st	X, r24
    197a:	2b c0       	rjmp	.+86     	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    197c:	a2 e3       	ldi	r26, 0x32	; 50
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e2 e3       	ldi	r30, 0x32	; 50
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	48 2f       	mov	r20, r24
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	02 2e       	mov	r0, r18
    1994:	02 c0       	rjmp	.+4      	; 0x199a <PORT_PortEnumSetPinMode+0x3ce>
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	0a 94       	dec	r0
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <PORT_PortEnumSetPinMode+0x3ca>
    199e:	84 2b       	or	r24, r20
    19a0:	8c 93       	st	X, r24
    19a2:	17 c0       	rjmp	.+46     	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    19a4:	a2 e3       	ldi	r26, 0x32	; 50
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e2 e3       	ldi	r30, 0x32	; 50
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	48 2f       	mov	r20, r24
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	02 2e       	mov	r0, r18
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <PORT_PortEnumSetPinMode+0x3f6>
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	0a 94       	dec	r0
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <PORT_PortEnumSetPinMode+0x3f2>
    19c6:	80 95       	com	r24
    19c8:	84 23       	and	r24, r20
    19ca:	8c 93       	st	X, r24
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <PORT_PortEnumSetPinMode+0x406>
			break;
		}
	}
	else
	{
		local_PortEnumErrorState = PORT_MODE_NOK;
    19ce:	83 e0       	ldi	r24, 0x03	; 3
    19d0:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_PortEnumErrorState;
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d4:	2e 96       	adiw	r28, 0x0e	; 14
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <GIE_voidInit>:

#include "../Include/GIE_interface.h"
#include "../Include/GIE_private.h"

void GIE_voidInit(u8 copy_u8State)
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <GIE_voidInit+0x6>
    19ec:	0f 92       	push	r0
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	89 83       	std	Y+1, r24	; 0x01
    switch(copy_u8State)
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	3b 83       	std	Y+3, r19	; 0x03
    19fc:	2a 83       	std	Y+2, r18	; 0x02
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	9b 81       	ldd	r25, Y+3	; 0x03
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	31 f0       	breq	.+12     	; 0x1a12 <GIE_voidInit+0x2c>
    1a06:	2a 81       	ldd	r18, Y+2	; 0x02
    1a08:	3b 81       	ldd	r19, Y+3	; 0x03
    1a0a:	21 30       	cpi	r18, 0x01	; 1
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	49 f0       	breq	.+18     	; 0x1a22 <GIE_voidInit+0x3c>
    1a10:	0f c0       	rjmp	.+30     	; 0x1a30 <GIE_voidInit+0x4a>
    {
        case GIE_u8_ENABLE :  SET_BIT(GIE_u8_SREG,7);       break;
    1a12:	af e5       	ldi	r26, 0x5F	; 95
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	ef e5       	ldi	r30, 0x5F	; 95
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	80 68       	ori	r24, 0x80	; 128
    1a1e:	8c 93       	st	X, r24
    1a20:	07 c0       	rjmp	.+14     	; 0x1a30 <GIE_voidInit+0x4a>
        case GIE_u8_DISABLE:  CLR_BIT(GIE_u8_SREG,7);       break;
    1a22:	af e5       	ldi	r26, 0x5F	; 95
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	ef e5       	ldi	r30, 0x5F	; 95
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	8f 77       	andi	r24, 0x7F	; 127
    1a2e:	8c 93       	st	X, r24
    }
}
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	cf 91       	pop	r28
    1a38:	df 91       	pop	r29
    1a3a:	08 95       	ret

00001a3c <DIO_DioEnumWriteChannel>:
#include "../Include/DIO_interface.h"
#include "../Include/DIO_private.h"
#include "../Include/DIO_config.h"

DioEnum DIO_DioEnumWriteChannel(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Level)
{
    1a3c:	df 93       	push	r29
    1a3e:	cf 93       	push	r28
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	2e 97       	sbiw	r28, 0x0e	; 14
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
    1a50:	8a 83       	std	Y+2, r24	; 0x02
    1a52:	6b 83       	std	Y+3, r22	; 0x03
    1a54:	4c 83       	std	Y+4, r20	; 0x04
	DioEnum local_DioEnumErrorState = DIO_WRITE_OK;
    1a56:	19 82       	std	Y+1, r1	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7))
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	84 30       	cpi	r24, 0x04	; 4
    1a5c:	08 f0       	brcs	.+2      	; 0x1a60 <DIO_DioEnumWriteChannel+0x24>
    1a5e:	05 c1       	rjmp	.+522    	; 0x1c6a <DIO_DioEnumWriteChannel+0x22e>
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	88 30       	cpi	r24, 0x08	; 8
    1a64:	08 f0       	brcs	.+2      	; 0x1a68 <DIO_DioEnumWriteChannel+0x2c>
    1a66:	01 c1       	rjmp	.+514    	; 0x1c6a <DIO_DioEnumWriteChannel+0x22e>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
    1a68:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	3e 87       	std	Y+14, r19	; 0x0e
    1a70:	2d 87       	std	Y+13, r18	; 0x0d
    1a72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a76:	81 30       	cpi	r24, 0x01	; 1
    1a78:	91 05       	cpc	r25, r1
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <DIO_DioEnumWriteChannel+0x42>
    1a7c:	4f c0       	rjmp	.+158    	; 0x1b1c <DIO_DioEnumWriteChannel+0xe0>
    1a7e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a80:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a82:	22 30       	cpi	r18, 0x02	; 2
    1a84:	31 05       	cpc	r19, r1
    1a86:	2c f4       	brge	.+10     	; 0x1a92 <DIO_DioEnumWriteChannel+0x56>
    1a88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	71 f0       	breq	.+28     	; 0x1aac <DIO_DioEnumWriteChannel+0x70>
    1a90:	ee c0       	rjmp	.+476    	; 0x1c6e <DIO_DioEnumWriteChannel+0x232>
    1a92:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a94:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a96:	22 30       	cpi	r18, 0x02	; 2
    1a98:	31 05       	cpc	r19, r1
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <DIO_DioEnumWriteChannel+0x62>
    1a9c:	77 c0       	rjmp	.+238    	; 0x1b8c <DIO_DioEnumWriteChannel+0x150>
    1a9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa2:	83 30       	cpi	r24, 0x03	; 3
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <DIO_DioEnumWriteChannel+0x6e>
    1aa8:	a9 c0       	rjmp	.+338    	; 0x1bfc <DIO_DioEnumWriteChannel+0x1c0>
    1aaa:	e1 c0       	rjmp	.+450    	; 0x1c6e <DIO_DioEnumWriteChannel+0x232>
		{
			case DIO_u8_PORTA:  // PORTA
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    1aac:	8c 81       	ldd	r24, Y+4	; 0x04
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	3c 87       	std	Y+12, r19	; 0x0c
    1ab4:	2b 87       	std	Y+11, r18	; 0x0b
    1ab6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ab8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1aba:	00 97       	sbiw	r24, 0x00	; 0
    1abc:	d1 f0       	breq	.+52     	; 0x1af2 <DIO_DioEnumWriteChannel+0xb6>
    1abe:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ac0:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ac2:	21 30       	cpi	r18, 0x01	; 1
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <DIO_DioEnumWriteChannel+0x8e>
    1ac8:	d2 c0       	rjmp	.+420    	; 0x1c6e <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,copy_u8PinId);     break;
    1aca:	ab e3       	ldi	r26, 0x3B	; 59
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	eb e3       	ldi	r30, 0x3B	; 59
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	48 2f       	mov	r20, r24
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	28 2f       	mov	r18, r24
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	02 2e       	mov	r0, r18
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <DIO_DioEnumWriteChannel+0xac>
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	0a 94       	dec	r0
    1aea:	e2 f7       	brpl	.-8      	; 0x1ae4 <DIO_DioEnumWriteChannel+0xa8>
    1aec:	84 2b       	or	r24, r20
    1aee:	8c 93       	st	X, r24
    1af0:	be c0       	rjmp	.+380    	; 0x1c6e <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,copy_u8PinId);     break;
    1af2:	ab e3       	ldi	r26, 0x3B	; 59
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	eb e3       	ldi	r30, 0x3B	; 59
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	48 2f       	mov	r20, r24
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	28 2f       	mov	r18, r24
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	02 2e       	mov	r0, r18
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <DIO_DioEnumWriteChannel+0xd4>
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	0a 94       	dec	r0
    1b12:	e2 f7       	brpl	.-8      	; 0x1b0c <DIO_DioEnumWriteChannel+0xd0>
    1b14:	80 95       	com	r24
    1b16:	84 23       	and	r24, r20
    1b18:	8c 93       	st	X, r24
    1b1a:	a9 c0       	rjmp	.+338    	; 0x1c6e <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTB:  // PORTB
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    1b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	3a 87       	std	Y+10, r19	; 0x0a
    1b24:	29 87       	std	Y+9, r18	; 0x09
    1b26:	89 85       	ldd	r24, Y+9	; 0x09
    1b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	d1 f0       	breq	.+52     	; 0x1b62 <DIO_DioEnumWriteChannel+0x126>
    1b2e:	29 85       	ldd	r18, Y+9	; 0x09
    1b30:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b32:	21 30       	cpi	r18, 0x01	; 1
    1b34:	31 05       	cpc	r19, r1
    1b36:	09 f0       	breq	.+2      	; 0x1b3a <DIO_DioEnumWriteChannel+0xfe>
    1b38:	9a c0       	rjmp	.+308    	; 0x1c6e <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,copy_u8PinId);     break;
    1b3a:	a8 e3       	ldi	r26, 0x38	; 56
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e8 e3       	ldi	r30, 0x38	; 56
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	48 2f       	mov	r20, r24
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <DIO_DioEnumWriteChannel+0x11c>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <DIO_DioEnumWriteChannel+0x118>
    1b5c:	84 2b       	or	r24, r20
    1b5e:	8c 93       	st	X, r24
    1b60:	86 c0       	rjmp	.+268    	; 0x1c6e <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,copy_u8PinId);     break;
    1b62:	a8 e3       	ldi	r26, 0x38	; 56
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e8 e3       	ldi	r30, 0x38	; 56
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	48 2f       	mov	r20, r24
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	02 2e       	mov	r0, r18
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <DIO_DioEnumWriteChannel+0x144>
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	0a 94       	dec	r0
    1b82:	e2 f7       	brpl	.-8      	; 0x1b7c <DIO_DioEnumWriteChannel+0x140>
    1b84:	80 95       	com	r24
    1b86:	84 23       	and	r24, r20
    1b88:	8c 93       	st	X, r24
    1b8a:	71 c0       	rjmp	.+226    	; 0x1c6e <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTC:  // PORTC
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    1b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	38 87       	std	Y+8, r19	; 0x08
    1b94:	2f 83       	std	Y+7, r18	; 0x07
    1b96:	8f 81       	ldd	r24, Y+7	; 0x07
    1b98:	98 85       	ldd	r25, Y+8	; 0x08
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	d1 f0       	breq	.+52     	; 0x1bd2 <DIO_DioEnumWriteChannel+0x196>
    1b9e:	2f 81       	ldd	r18, Y+7	; 0x07
    1ba0:	38 85       	ldd	r19, Y+8	; 0x08
    1ba2:	21 30       	cpi	r18, 0x01	; 1
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	09 f0       	breq	.+2      	; 0x1baa <DIO_DioEnumWriteChannel+0x16e>
    1ba8:	62 c0       	rjmp	.+196    	; 0x1c6e <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,copy_u8PinId);     break;
    1baa:	a5 e3       	ldi	r26, 0x35	; 53
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	e5 e3       	ldi	r30, 0x35	; 53
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	48 2f       	mov	r20, r24
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	02 2e       	mov	r0, r18
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <DIO_DioEnumWriteChannel+0x18c>
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	0a 94       	dec	r0
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <DIO_DioEnumWriteChannel+0x188>
    1bcc:	84 2b       	or	r24, r20
    1bce:	8c 93       	st	X, r24
    1bd0:	4e c0       	rjmp	.+156    	; 0x1c6e <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,copy_u8PinId);     break;
    1bd2:	a5 e3       	ldi	r26, 0x35	; 53
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e5 e3       	ldi	r30, 0x35	; 53
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	48 2f       	mov	r20, r24
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	02 2e       	mov	r0, r18
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <DIO_DioEnumWriteChannel+0x1b4>
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	0a 94       	dec	r0
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <DIO_DioEnumWriteChannel+0x1b0>
    1bf4:	80 95       	com	r24
    1bf6:	84 23       	and	r24, r20
    1bf8:	8c 93       	st	X, r24
    1bfa:	39 c0       	rjmp	.+114    	; 0x1c6e <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTD:  // PORTD
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    1bfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	3e 83       	std	Y+6, r19	; 0x06
    1c04:	2d 83       	std	Y+5, r18	; 0x05
    1c06:	8d 81       	ldd	r24, Y+5	; 0x05
    1c08:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	c9 f0       	breq	.+50     	; 0x1c40 <DIO_DioEnumWriteChannel+0x204>
    1c0e:	2d 81       	ldd	r18, Y+5	; 0x05
    1c10:	3e 81       	ldd	r19, Y+6	; 0x06
    1c12:	21 30       	cpi	r18, 0x01	; 1
    1c14:	31 05       	cpc	r19, r1
    1c16:	59 f5       	brne	.+86     	; 0x1c6e <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,copy_u8PinId);     break;
    1c18:	a2 e3       	ldi	r26, 0x32	; 50
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e2 e3       	ldi	r30, 0x32	; 50
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 2e       	mov	r0, r18
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <DIO_DioEnumWriteChannel+0x1fa>
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	0a 94       	dec	r0
    1c38:	e2 f7       	brpl	.-8      	; 0x1c32 <DIO_DioEnumWriteChannel+0x1f6>
    1c3a:	84 2b       	or	r24, r20
    1c3c:	8c 93       	st	X, r24
    1c3e:	17 c0       	rjmp	.+46     	; 0x1c6e <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,copy_u8PinId);     break;
    1c40:	a2 e3       	ldi	r26, 0x32	; 50
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e2 e3       	ldi	r30, 0x32	; 50
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	48 2f       	mov	r20, r24
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	02 2e       	mov	r0, r18
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <DIO_DioEnumWriteChannel+0x222>
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	0a 94       	dec	r0
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <DIO_DioEnumWriteChannel+0x21e>
    1c62:	80 95       	com	r24
    1c64:	84 23       	and	r24, r20
    1c66:	8c 93       	st	X, r24
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <DIO_DioEnumWriteChannel+0x232>
			break;
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_WRITE_NOK;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c70:	2e 96       	adiw	r28, 0x0e	; 14
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <DIO_DioEnumReadChannel>:

DioEnum DIO_DioEnumReadChannel(u8 copy_u8PortId,u8 copy_u8PinId,pu8 copy_pu8ReadChannel)
{
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	28 97       	sbiw	r28, 0x08	; 8
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	de bf       	out	0x3e, r29	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	cd bf       	out	0x3d, r28	; 61
    1c96:	8b 83       	std	Y+3, r24	; 0x03
    1c98:	6c 83       	std	Y+4, r22	; 0x04
    1c9a:	5e 83       	std	Y+6, r21	; 0x06
    1c9c:	4d 83       	std	Y+5, r20	; 0x05
	DioEnum local_DioEnumErrorState = DIO_READ_OK;
    1c9e:	82 e0       	ldi	r24, 0x02	; 2
    1ca0:	8a 83       	std	Y+2, r24	; 0x02
	/* local variable to store in value of the pin */
	u8 local_u8GetValue;
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7) && (copy_pu8ReadChannel != NULL))
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	84 30       	cpi	r24, 0x04	; 4
    1ca6:	08 f0       	brcs	.+2      	; 0x1caa <DIO_DioEnumReadChannel+0x28>
    1ca8:	9f c0       	rjmp	.+318    	; 0x1de8 <DIO_DioEnumReadChannel+0x166>
    1caa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cac:	88 30       	cpi	r24, 0x08	; 8
    1cae:	08 f0       	brcs	.+2      	; 0x1cb2 <DIO_DioEnumReadChannel+0x30>
    1cb0:	9b c0       	rjmp	.+310    	; 0x1de8 <DIO_DioEnumReadChannel+0x166>
    1cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <DIO_DioEnumReadChannel+0x3a>
    1cba:	96 c0       	rjmp	.+300    	; 0x1de8 <DIO_DioEnumReadChannel+0x166>
	{
		/* step1: check about which port you want to read */
		switch(copy_u8PortId)
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	38 87       	std	Y+8, r19	; 0x08
    1cc4:	2f 83       	std	Y+7, r18	; 0x07
    1cc6:	4f 81       	ldd	r20, Y+7	; 0x07
    1cc8:	58 85       	ldd	r21, Y+8	; 0x08
    1cca:	41 30       	cpi	r20, 0x01	; 1
    1ccc:	51 05       	cpc	r21, r1
    1cce:	a9 f1       	breq	.+106    	; 0x1d3a <DIO_DioEnumReadChannel+0xb8>
    1cd0:	8f 81       	ldd	r24, Y+7	; 0x07
    1cd2:	98 85       	ldd	r25, Y+8	; 0x08
    1cd4:	82 30       	cpi	r24, 0x02	; 2
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	34 f4       	brge	.+12     	; 0x1ce6 <DIO_DioEnumReadChannel+0x64>
    1cda:	2f 81       	ldd	r18, Y+7	; 0x07
    1cdc:	38 85       	ldd	r19, Y+8	; 0x08
    1cde:	21 15       	cp	r18, r1
    1ce0:	31 05       	cpc	r19, r1
    1ce2:	71 f0       	breq	.+28     	; 0x1d00 <DIO_DioEnumReadChannel+0x7e>
    1ce4:	83 c0       	rjmp	.+262    	; 0x1dec <DIO_DioEnumReadChannel+0x16a>
    1ce6:	4f 81       	ldd	r20, Y+7	; 0x07
    1ce8:	58 85       	ldd	r21, Y+8	; 0x08
    1cea:	42 30       	cpi	r20, 0x02	; 2
    1cec:	51 05       	cpc	r21, r1
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <DIO_DioEnumReadChannel+0x70>
    1cf0:	41 c0       	rjmp	.+130    	; 0x1d74 <DIO_DioEnumReadChannel+0xf2>
    1cf2:	8f 81       	ldd	r24, Y+7	; 0x07
    1cf4:	98 85       	ldd	r25, Y+8	; 0x08
    1cf6:	83 30       	cpi	r24, 0x03	; 3
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	09 f4       	brne	.+2      	; 0x1cfe <DIO_DioEnumReadChannel+0x7c>
    1cfc:	58 c0       	rjmp	.+176    	; 0x1dae <DIO_DioEnumReadChannel+0x12c>
    1cfe:	76 c0       	rjmp	.+236    	; 0x1dec <DIO_DioEnumReadChannel+0x16a>
		{
			case DIO_u8_PORTA:  // PORTA
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINA_REG,copy_u8PinId);
    1d00:	e9 e3       	ldi	r30, 0x39	; 57
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0c:	88 2f       	mov	r24, r24
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	a9 01       	movw	r20, r18
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <DIO_DioEnumReadChannel+0x96>
    1d14:	55 95       	asr	r21
    1d16:	47 95       	ror	r20
    1d18:	8a 95       	dec	r24
    1d1a:	e2 f7       	brpl	.-8      	; 0x1d14 <DIO_DioEnumReadChannel+0x92>
    1d1c:	ca 01       	movw	r24, r20
    1d1e:	81 70       	andi	r24, 0x01	; 1
    1d20:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	88 23       	and	r24, r24
    1d26:	21 f4       	brne	.+8      	; 0x1d30 <DIO_DioEnumReadChannel+0xae>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    1d28:	ed 81       	ldd	r30, Y+5	; 0x05
    1d2a:	fe 81       	ldd	r31, Y+6	; 0x06
    1d2c:	10 82       	st	Z, r1
    1d2e:	5e c0       	rjmp	.+188    	; 0x1dec <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    1d30:	ed 81       	ldd	r30, Y+5	; 0x05
    1d32:	fe 81       	ldd	r31, Y+6	; 0x06
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	80 83       	st	Z, r24
    1d38:	59 c0       	rjmp	.+178    	; 0x1dec <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTB:  // PORTB
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINB_REG,copy_u8PinId);
    1d3a:	e6 e3       	ldi	r30, 0x36	; 54
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	8c 81       	ldd	r24, Y+4	; 0x04
    1d46:	88 2f       	mov	r24, r24
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	a9 01       	movw	r20, r18
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <DIO_DioEnumReadChannel+0xd0>
    1d4e:	55 95       	asr	r21
    1d50:	47 95       	ror	r20
    1d52:	8a 95       	dec	r24
    1d54:	e2 f7       	brpl	.-8      	; 0x1d4e <DIO_DioEnumReadChannel+0xcc>
    1d56:	ca 01       	movw	r24, r20
    1d58:	81 70       	andi	r24, 0x01	; 1
    1d5a:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	88 23       	and	r24, r24
    1d60:	21 f4       	brne	.+8      	; 0x1d6a <DIO_DioEnumReadChannel+0xe8>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    1d62:	ed 81       	ldd	r30, Y+5	; 0x05
    1d64:	fe 81       	ldd	r31, Y+6	; 0x06
    1d66:	10 82       	st	Z, r1
    1d68:	41 c0       	rjmp	.+130    	; 0x1dec <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    1d6a:	ed 81       	ldd	r30, Y+5	; 0x05
    1d6c:	fe 81       	ldd	r31, Y+6	; 0x06
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	80 83       	st	Z, r24
    1d72:	3c c0       	rjmp	.+120    	; 0x1dec <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTC:  // PORTC
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINC_REG,copy_u8PinId);
    1d74:	e3 e3       	ldi	r30, 0x33	; 51
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d80:	88 2f       	mov	r24, r24
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	a9 01       	movw	r20, r18
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <DIO_DioEnumReadChannel+0x10a>
    1d88:	55 95       	asr	r21
    1d8a:	47 95       	ror	r20
    1d8c:	8a 95       	dec	r24
    1d8e:	e2 f7       	brpl	.-8      	; 0x1d88 <DIO_DioEnumReadChannel+0x106>
    1d90:	ca 01       	movw	r24, r20
    1d92:	81 70       	andi	r24, 0x01	; 1
    1d94:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	88 23       	and	r24, r24
    1d9a:	21 f4       	brne	.+8      	; 0x1da4 <DIO_DioEnumReadChannel+0x122>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    1d9c:	ed 81       	ldd	r30, Y+5	; 0x05
    1d9e:	fe 81       	ldd	r31, Y+6	; 0x06
    1da0:	10 82       	st	Z, r1
    1da2:	24 c0       	rjmp	.+72     	; 0x1dec <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    1da4:	ed 81       	ldd	r30, Y+5	; 0x05
    1da6:	fe 81       	ldd	r31, Y+6	; 0x06
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	80 83       	st	Z, r24
    1dac:	1f c0       	rjmp	.+62     	; 0x1dec <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTD:  // PORTD
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PIND_REG,copy_u8PinId);
    1dae:	e0 e3       	ldi	r30, 0x30	; 48
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a9 01       	movw	r20, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <DIO_DioEnumReadChannel+0x144>
    1dc2:	55 95       	asr	r21
    1dc4:	47 95       	ror	r20
    1dc6:	8a 95       	dec	r24
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <DIO_DioEnumReadChannel+0x140>
    1dca:	ca 01       	movw	r24, r20
    1dcc:	81 70       	andi	r24, 0x01	; 1
    1dce:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	88 23       	and	r24, r24
    1dd4:	21 f4       	brne	.+8      	; 0x1dde <DIO_DioEnumReadChannel+0x15c>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    1dd6:	ed 81       	ldd	r30, Y+5	; 0x05
    1dd8:	fe 81       	ldd	r31, Y+6	; 0x06
    1dda:	10 82       	st	Z, r1
    1ddc:	07 c0       	rjmp	.+14     	; 0x1dec <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    1dde:	ed 81       	ldd	r30, Y+5	; 0x05
    1de0:	fe 81       	ldd	r31, Y+6	; 0x06
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	80 83       	st	Z, r24
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <DIO_DioEnumReadChannel+0x16a>
			break;
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_READ_NOK;
    1de8:	83 e0       	ldi	r24, 0x03	; 3
    1dea:	8a 83       	std	Y+2, r24	; 0x02
	}
	return local_DioEnumErrorState;
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1dee:	28 96       	adiw	r28, 0x08	; 8
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <DIO_DioEnumWritePort>:

DioEnum DIO_DioEnumWritePort(u8 copy_u8PortId,u8 copy_u8Value)
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <DIO_DioEnumWritePort+0x6>
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <DIO_DioEnumWritePort+0x8>
    1e08:	0f 92       	push	r0
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	8a 83       	std	Y+2, r24	; 0x02
    1e10:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_WPORT_OK;
    1e12:	84 e0       	ldi	r24, 0x04	; 4
    1e14:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if(copy_u8PortId <= DIO_u8_PORTD)
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	84 30       	cpi	r24, 0x04	; 4
    1e1a:	98 f5       	brcc	.+102    	; 0x1e82 <DIO_DioEnumWritePort+0x82>
	{
		/* check about which port you want to write into the value */
		switch(copy_u8PortId)
    1e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	3d 83       	std	Y+5, r19	; 0x05
    1e24:	2c 83       	std	Y+4, r18	; 0x04
    1e26:	8c 81       	ldd	r24, Y+4	; 0x04
    1e28:	9d 81       	ldd	r25, Y+5	; 0x05
    1e2a:	81 30       	cpi	r24, 0x01	; 1
    1e2c:	91 05       	cpc	r25, r1
    1e2e:	d1 f0       	breq	.+52     	; 0x1e64 <DIO_DioEnumWritePort+0x64>
    1e30:	2c 81       	ldd	r18, Y+4	; 0x04
    1e32:	3d 81       	ldd	r19, Y+5	; 0x05
    1e34:	22 30       	cpi	r18, 0x02	; 2
    1e36:	31 05       	cpc	r19, r1
    1e38:	2c f4       	brge	.+10     	; 0x1e44 <DIO_DioEnumWritePort+0x44>
    1e3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	61 f0       	breq	.+24     	; 0x1e5a <DIO_DioEnumWritePort+0x5a>
    1e42:	21 c0       	rjmp	.+66     	; 0x1e86 <DIO_DioEnumWritePort+0x86>
    1e44:	2c 81       	ldd	r18, Y+4	; 0x04
    1e46:	3d 81       	ldd	r19, Y+5	; 0x05
    1e48:	22 30       	cpi	r18, 0x02	; 2
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	81 f0       	breq	.+32     	; 0x1e6e <DIO_DioEnumWritePort+0x6e>
    1e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e50:	9d 81       	ldd	r25, Y+5	; 0x05
    1e52:	83 30       	cpi	r24, 0x03	; 3
    1e54:	91 05       	cpc	r25, r1
    1e56:	81 f0       	breq	.+32     	; 0x1e78 <DIO_DioEnumWritePort+0x78>
    1e58:	16 c0       	rjmp	.+44     	; 0x1e86 <DIO_DioEnumWritePort+0x86>
		{
			case DIO_u8_PORTA: DIO_u8_PORTA_REG = copy_u8Value;      break;
    1e5a:	eb e3       	ldi	r30, 0x3B	; 59
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	80 83       	st	Z, r24
    1e62:	11 c0       	rjmp	.+34     	; 0x1e86 <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTB: DIO_u8_PORTB_REG = copy_u8Value;      break;
    1e64:	e8 e3       	ldi	r30, 0x38	; 56
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	80 83       	st	Z, r24
    1e6c:	0c c0       	rjmp	.+24     	; 0x1e86 <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTC: DIO_u8_PORTC_REG = copy_u8Value;      break;
    1e6e:	e5 e3       	ldi	r30, 0x35	; 53
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	80 83       	st	Z, r24
    1e76:	07 c0       	rjmp	.+14     	; 0x1e86 <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTD: DIO_u8_PORTD_REG = copy_u8Value;      break;
    1e78:	e2 e3       	ldi	r30, 0x32	; 50
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	80 83       	st	Z, r24
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <DIO_DioEnumWritePort+0x86>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_WPORT_NOK;
    1e82:	85 e0       	ldi	r24, 0x05	; 5
    1e84:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <DIO_DioEnumReadPort>:

DioEnum DIO_DioEnumReadPort(u8 copy_u8PortId,pu8 copy_pu8ReadPort)
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <DIO_DioEnumReadPort+0x6>
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <DIO_DioEnumReadPort+0x8>
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <DIO_DioEnumReadPort+0xa>
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	8a 83       	std	Y+2, r24	; 0x02
    1ea8:	7c 83       	std	Y+4, r23	; 0x04
    1eaa:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_RPORT_OK;
    1eac:	86 e0       	ldi	r24, 0x06	; 6
    1eae:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_pu8ReadPort != NULL))
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	84 30       	cpi	r24, 0x04	; 4
    1eb4:	08 f0       	brcs	.+2      	; 0x1eb8 <DIO_DioEnumReadPort+0x20>
    1eb6:	3f c0       	rjmp	.+126    	; 0x1f36 <DIO_DioEnumReadPort+0x9e>
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	d9 f1       	breq	.+118    	; 0x1f36 <DIO_DioEnumReadPort+0x9e>
	{
		/* check about which port you want to read this value */
		switch(copy_u8PortId)
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	3e 83       	std	Y+6, r19	; 0x06
    1ec8:	2d 83       	std	Y+5, r18	; 0x05
    1eca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ece:	81 30       	cpi	r24, 0x01	; 1
    1ed0:	91 05       	cpc	r25, r1
    1ed2:	e1 f0       	breq	.+56     	; 0x1f0c <DIO_DioEnumReadPort+0x74>
    1ed4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ed6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ed8:	22 30       	cpi	r18, 0x02	; 2
    1eda:	31 05       	cpc	r19, r1
    1edc:	2c f4       	brge	.+10     	; 0x1ee8 <DIO_DioEnumReadPort+0x50>
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	61 f0       	breq	.+24     	; 0x1efe <DIO_DioEnumReadPort+0x66>
    1ee6:	29 c0       	rjmp	.+82     	; 0x1f3a <DIO_DioEnumReadPort+0xa2>
    1ee8:	2d 81       	ldd	r18, Y+5	; 0x05
    1eea:	3e 81       	ldd	r19, Y+6	; 0x06
    1eec:	22 30       	cpi	r18, 0x02	; 2
    1eee:	31 05       	cpc	r19, r1
    1ef0:	a1 f0       	breq	.+40     	; 0x1f1a <DIO_DioEnumReadPort+0x82>
    1ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef6:	83 30       	cpi	r24, 0x03	; 3
    1ef8:	91 05       	cpc	r25, r1
    1efa:	b1 f0       	breq	.+44     	; 0x1f28 <DIO_DioEnumReadPort+0x90>
    1efc:	1e c0       	rjmp	.+60     	; 0x1f3a <DIO_DioEnumReadPort+0xa2>
		{
			case DIO_u8_PORTA: *copy_pu8ReadPort = DIO_u8_PINA_REG;      break;
    1efe:	e9 e3       	ldi	r30, 0x39	; 57
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	eb 81       	ldd	r30, Y+3	; 0x03
    1f06:	fc 81       	ldd	r31, Y+4	; 0x04
    1f08:	80 83       	st	Z, r24
    1f0a:	17 c0       	rjmp	.+46     	; 0x1f3a <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTB: *copy_pu8ReadPort = DIO_u8_PINB_REG;      break;
    1f0c:	e6 e3       	ldi	r30, 0x36	; 54
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	eb 81       	ldd	r30, Y+3	; 0x03
    1f14:	fc 81       	ldd	r31, Y+4	; 0x04
    1f16:	80 83       	st	Z, r24
    1f18:	10 c0       	rjmp	.+32     	; 0x1f3a <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTC: *copy_pu8ReadPort = DIO_u8_PINC_REG;      break;
    1f1a:	e3 e3       	ldi	r30, 0x33	; 51
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	eb 81       	ldd	r30, Y+3	; 0x03
    1f22:	fc 81       	ldd	r31, Y+4	; 0x04
    1f24:	80 83       	st	Z, r24
    1f26:	09 c0       	rjmp	.+18     	; 0x1f3a <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTD: *copy_pu8ReadPort = DIO_u8_PIND_REG;      break;
    1f28:	e0 e3       	ldi	r30, 0x30	; 48
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f30:	fc 81       	ldd	r31, Y+4	; 0x04
    1f32:	80 83       	st	Z, r24
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <DIO_DioEnumReadPort+0xa2>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_RPORT_NOK;
    1f36:	87 e0       	ldi	r24, 0x07	; 7
    1f38:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f3c:	26 96       	adiw	r28, 0x06	; 6
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <DIO_DioEnumFlibChannel>:

DioEnum DIO_DioEnumFlibChannel(u8 copy_u8PortId,u8 copy_u8PinId)
{
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <DIO_DioEnumFlibChannel+0x6>
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <DIO_DioEnumFlibChannel+0x8>
    1f56:	0f 92       	push	r0
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	8a 83       	std	Y+2, r24	; 0x02
    1f5e:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_FLIB_OK;
    1f60:	88 e0       	ldi	r24, 0x08	; 8
    1f62:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7))
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	84 30       	cpi	r24, 0x04	; 4
    1f68:	08 f0       	brcs	.+2      	; 0x1f6c <DIO_DioEnumFlibChannel+0x1e>
    1f6a:	73 c0       	rjmp	.+230    	; 0x2052 <DIO_DioEnumFlibChannel+0x104>
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	88 30       	cpi	r24, 0x08	; 8
    1f70:	08 f0       	brcs	.+2      	; 0x1f74 <DIO_DioEnumFlibChannel+0x26>
    1f72:	6f c0       	rjmp	.+222    	; 0x2052 <DIO_DioEnumFlibChannel+0x104>
	{
		/* check about which port you want to toggle your pins */
		switch(copy_u8PortId)
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	3d 83       	std	Y+5, r19	; 0x05
    1f7c:	2c 83       	std	Y+4, r18	; 0x04
    1f7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f80:	9d 81       	ldd	r25, Y+5	; 0x05
    1f82:	81 30       	cpi	r24, 0x01	; 1
    1f84:	91 05       	cpc	r25, r1
    1f86:	49 f1       	breq	.+82     	; 0x1fda <DIO_DioEnumFlibChannel+0x8c>
    1f88:	2c 81       	ldd	r18, Y+4	; 0x04
    1f8a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f8c:	22 30       	cpi	r18, 0x02	; 2
    1f8e:	31 05       	cpc	r19, r1
    1f90:	2c f4       	brge	.+10     	; 0x1f9c <DIO_DioEnumFlibChannel+0x4e>
    1f92:	8c 81       	ldd	r24, Y+4	; 0x04
    1f94:	9d 81       	ldd	r25, Y+5	; 0x05
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	61 f0       	breq	.+24     	; 0x1fb2 <DIO_DioEnumFlibChannel+0x64>
    1f9a:	5d c0       	rjmp	.+186    	; 0x2056 <DIO_DioEnumFlibChannel+0x108>
    1f9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1fa0:	22 30       	cpi	r18, 0x02	; 2
    1fa2:	31 05       	cpc	r19, r1
    1fa4:	71 f1       	breq	.+92     	; 0x2002 <DIO_DioEnumFlibChannel+0xb4>
    1fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa8:	9d 81       	ldd	r25, Y+5	; 0x05
    1faa:	83 30       	cpi	r24, 0x03	; 3
    1fac:	91 05       	cpc	r25, r1
    1fae:	e9 f1       	breq	.+122    	; 0x202a <DIO_DioEnumFlibChannel+0xdc>
    1fb0:	52 c0       	rjmp	.+164    	; 0x2056 <DIO_DioEnumFlibChannel+0x108>
		{
			case DIO_u8_PORTA: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    1fb2:	ab e3       	ldi	r26, 0x3B	; 59
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	eb e3       	ldi	r30, 0x3B	; 59
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	48 2f       	mov	r20, r24
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	02 2e       	mov	r0, r18
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <DIO_DioEnumFlibChannel+0x82>
    1fcc:	88 0f       	add	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	0a 94       	dec	r0
    1fd2:	e2 f7       	brpl	.-8      	; 0x1fcc <DIO_DioEnumFlibChannel+0x7e>
    1fd4:	84 27       	eor	r24, r20
    1fd6:	8c 93       	st	X, r24
    1fd8:	3e c0       	rjmp	.+124    	; 0x2056 <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTB: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    1fda:	ab e3       	ldi	r26, 0x3B	; 59
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	eb e3       	ldi	r30, 0x3B	; 59
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	48 2f       	mov	r20, r24
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	02 2e       	mov	r0, r18
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <DIO_DioEnumFlibChannel+0xaa>
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	0a 94       	dec	r0
    1ffa:	e2 f7       	brpl	.-8      	; 0x1ff4 <DIO_DioEnumFlibChannel+0xa6>
    1ffc:	84 27       	eor	r24, r20
    1ffe:	8c 93       	st	X, r24
    2000:	2a c0       	rjmp	.+84     	; 0x2056 <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTC: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    2002:	ab e3       	ldi	r26, 0x3B	; 59
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	eb e3       	ldi	r30, 0x3B	; 59
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	48 2f       	mov	r20, r24
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	02 2e       	mov	r0, r18
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <DIO_DioEnumFlibChannel+0xd2>
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	0a 94       	dec	r0
    2022:	e2 f7       	brpl	.-8      	; 0x201c <DIO_DioEnumFlibChannel+0xce>
    2024:	84 27       	eor	r24, r20
    2026:	8c 93       	st	X, r24
    2028:	16 c0       	rjmp	.+44     	; 0x2056 <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTD: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    202a:	ab e3       	ldi	r26, 0x3B	; 59
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	eb e3       	ldi	r30, 0x3B	; 59
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	48 2f       	mov	r20, r24
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	02 2e       	mov	r0, r18
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <DIO_DioEnumFlibChannel+0xfa>
    2044:	88 0f       	add	r24, r24
    2046:	99 1f       	adc	r25, r25
    2048:	0a 94       	dec	r0
    204a:	e2 f7       	brpl	.-8      	; 0x2044 <DIO_DioEnumFlibChannel+0xf6>
    204c:	84 27       	eor	r24, r20
    204e:	8c 93       	st	X, r24
    2050:	02 c0       	rjmp	.+4      	; 0x2056 <DIO_DioEnumFlibChannel+0x108>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_FLIB_NOK;
    2052:	89 e0       	ldi	r24, 0x09	; 9
    2054:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    2056:	89 81       	ldd	r24, Y+1	; 0x01
}
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	08 95       	ret

00002068 <LCD_voidInit>:
#include "../Include/LCD_config.h"
#define F_CPU    8000000UL
#include <util/delay.h>

void LCD_voidInit(void)
{
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	e8 97       	sbiw	r28, 0x38	; 56
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	a8 e4       	ldi	r26, 0x48	; 72
    2082:	b2 e4       	ldi	r27, 0x42	; 66
    2084:	8d ab       	std	Y+53, r24	; 0x35
    2086:	9e ab       	std	Y+54, r25	; 0x36
    2088:	af ab       	std	Y+55, r26	; 0x37
    208a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208c:	6d a9       	ldd	r22, Y+53	; 0x35
    208e:	7e a9       	ldd	r23, Y+54	; 0x36
    2090:	8f a9       	ldd	r24, Y+55	; 0x37
    2092:	98 ad       	ldd	r25, Y+56	; 0x38
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	4a ef       	ldi	r20, 0xFA	; 250
    209a:	54 e4       	ldi	r21, 0x44	; 68
    209c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	89 ab       	std	Y+49, r24	; 0x31
    20a6:	9a ab       	std	Y+50, r25	; 0x32
    20a8:	ab ab       	std	Y+51, r26	; 0x33
    20aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20ac:	69 a9       	ldd	r22, Y+49	; 0x31
    20ae:	7a a9       	ldd	r23, Y+50	; 0x32
    20b0:	8b a9       	ldd	r24, Y+51	; 0x33
    20b2:	9c a9       	ldd	r25, Y+52	; 0x34
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e8       	ldi	r20, 0x80	; 128
    20ba:	5f e3       	ldi	r21, 0x3F	; 63
    20bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c0:	88 23       	and	r24, r24
    20c2:	2c f4       	brge	.+10     	; 0x20ce <LCD_voidInit+0x66>
		__ticks = 1;
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	98 ab       	std	Y+48, r25	; 0x30
    20ca:	8f a7       	std	Y+47, r24	; 0x2f
    20cc:	3f c0       	rjmp	.+126    	; 0x214c <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    20ce:	69 a9       	ldd	r22, Y+49	; 0x31
    20d0:	7a a9       	ldd	r23, Y+50	; 0x32
    20d2:	8b a9       	ldd	r24, Y+51	; 0x33
    20d4:	9c a9       	ldd	r25, Y+52	; 0x34
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	3f ef       	ldi	r19, 0xFF	; 255
    20da:	4f e7       	ldi	r20, 0x7F	; 127
    20dc:	57 e4       	ldi	r21, 0x47	; 71
    20de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e2:	18 16       	cp	r1, r24
    20e4:	4c f5       	brge	.+82     	; 0x2138 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e6:	6d a9       	ldd	r22, Y+53	; 0x35
    20e8:	7e a9       	ldd	r23, Y+54	; 0x36
    20ea:	8f a9       	ldd	r24, Y+55	; 0x37
    20ec:	98 ad       	ldd	r25, Y+56	; 0x38
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e2       	ldi	r20, 0x20	; 32
    20f4:	51 e4       	ldi	r21, 0x41	; 65
    20f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	bc 01       	movw	r22, r24
    2100:	cd 01       	movw	r24, r26
    2102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	98 ab       	std	Y+48, r25	; 0x30
    210c:	8f a7       	std	Y+47, r24	; 0x2f
    210e:	0f c0       	rjmp	.+30     	; 0x212e <LCD_voidInit+0xc6>
    2110:	88 ec       	ldi	r24, 0xC8	; 200
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	9e a7       	std	Y+46, r25	; 0x2e
    2116:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2118:	8d a5       	ldd	r24, Y+45	; 0x2d
    211a:	9e a5       	ldd	r25, Y+46	; 0x2e
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <LCD_voidInit+0xb4>
    2120:	9e a7       	std	Y+46, r25	; 0x2e
    2122:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2124:	8f a5       	ldd	r24, Y+47	; 0x2f
    2126:	98 a9       	ldd	r25, Y+48	; 0x30
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	98 ab       	std	Y+48, r25	; 0x30
    212c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2130:	98 a9       	ldd	r25, Y+48	; 0x30
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	69 f7       	brne	.-38     	; 0x2110 <LCD_voidInit+0xa8>
    2136:	14 c0       	rjmp	.+40     	; 0x2160 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2138:	69 a9       	ldd	r22, Y+49	; 0x31
    213a:	7a a9       	ldd	r23, Y+50	; 0x32
    213c:	8b a9       	ldd	r24, Y+51	; 0x33
    213e:	9c a9       	ldd	r25, Y+52	; 0x34
    2140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	98 ab       	std	Y+48, r25	; 0x30
    214a:	8f a7       	std	Y+47, r24	; 0x2f
    214c:	8f a5       	ldd	r24, Y+47	; 0x2f
    214e:	98 a9       	ldd	r25, Y+48	; 0x30
    2150:	9c a7       	std	Y+44, r25	; 0x2c
    2152:	8b a7       	std	Y+43, r24	; 0x2b
    2154:	8b a5       	ldd	r24, Y+43	; 0x2b
    2156:	9c a5       	ldd	r25, Y+44	; 0x2c
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <LCD_voidInit+0xf0>
    215c:	9c a7       	std	Y+44, r25	; 0x2c
    215e:	8b a7       	std	Y+43, r24	; 0x2b
    /* delay more than 30 msec */
    _delay_ms(50);
    LCD_voidSendCommand(LCD_u8_CURSOR_HOME);
    2160:	82 e0       	ldi	r24, 0x02	; 2
    2162:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_voidSendCommand>
    #if   LCD_u8_MODE == LCD_u8_MODE_8_BIT
        /* function set => call send_command func */
        LCD_voidSendCommand(LCD_u8_8B_Mode);
    #elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
        /* function set => call send_command func */
        LCD_voidSendCommand(LCD_u8_4B_Mode);
    2166:	88 e2       	ldi	r24, 0x28	; 40
    2168:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_voidSendCommand>
    #endif 
    /* display clear => call send_command func */
    LCD_voidSendCommand(LCD_u8_DISPLAY_CLEAR);
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_voidSendCommand>
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	a0 e8       	ldi	r26, 0x80	; 128
    2178:	b0 e4       	ldi	r27, 0x40	; 64
    217a:	8f a3       	std	Y+39, r24	; 0x27
    217c:	98 a7       	std	Y+40, r25	; 0x28
    217e:	a9 a7       	std	Y+41, r26	; 0x29
    2180:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2182:	6f a1       	ldd	r22, Y+39	; 0x27
    2184:	78 a5       	ldd	r23, Y+40	; 0x28
    2186:	89 a5       	ldd	r24, Y+41	; 0x29
    2188:	9a a5       	ldd	r25, Y+42	; 0x2a
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	4a ef       	ldi	r20, 0xFA	; 250
    2190:	54 e4       	ldi	r21, 0x44	; 68
    2192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	8b a3       	std	Y+35, r24	; 0x23
    219c:	9c a3       	std	Y+36, r25	; 0x24
    219e:	ad a3       	std	Y+37, r26	; 0x25
    21a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21a2:	6b a1       	ldd	r22, Y+35	; 0x23
    21a4:	7c a1       	ldd	r23, Y+36	; 0x24
    21a6:	8d a1       	ldd	r24, Y+37	; 0x25
    21a8:	9e a1       	ldd	r25, Y+38	; 0x26
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e8       	ldi	r20, 0x80	; 128
    21b0:	5f e3       	ldi	r21, 0x3F	; 63
    21b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b6:	88 23       	and	r24, r24
    21b8:	2c f4       	brge	.+10     	; 0x21c4 <LCD_voidInit+0x15c>
		__ticks = 1;
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	9a a3       	std	Y+34, r25	; 0x22
    21c0:	89 a3       	std	Y+33, r24	; 0x21
    21c2:	3f c0       	rjmp	.+126    	; 0x2242 <LCD_voidInit+0x1da>
	else if (__tmp > 65535)
    21c4:	6b a1       	ldd	r22, Y+35	; 0x23
    21c6:	7c a1       	ldd	r23, Y+36	; 0x24
    21c8:	8d a1       	ldd	r24, Y+37	; 0x25
    21ca:	9e a1       	ldd	r25, Y+38	; 0x26
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	3f ef       	ldi	r19, 0xFF	; 255
    21d0:	4f e7       	ldi	r20, 0x7F	; 127
    21d2:	57 e4       	ldi	r21, 0x47	; 71
    21d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21d8:	18 16       	cp	r1, r24
    21da:	4c f5       	brge	.+82     	; 0x222e <LCD_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21dc:	6f a1       	ldd	r22, Y+39	; 0x27
    21de:	78 a5       	ldd	r23, Y+40	; 0x28
    21e0:	89 a5       	ldd	r24, Y+41	; 0x29
    21e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e2       	ldi	r20, 0x20	; 32
    21ea:	51 e4       	ldi	r21, 0x41	; 65
    21ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	bc 01       	movw	r22, r24
    21f6:	cd 01       	movw	r24, r26
    21f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	9a a3       	std	Y+34, r25	; 0x22
    2202:	89 a3       	std	Y+33, r24	; 0x21
    2204:	0f c0       	rjmp	.+30     	; 0x2224 <LCD_voidInit+0x1bc>
    2206:	88 ec       	ldi	r24, 0xC8	; 200
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	98 a3       	std	Y+32, r25	; 0x20
    220c:	8f 8f       	std	Y+31, r24	; 0x1f
    220e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2210:	98 a1       	ldd	r25, Y+32	; 0x20
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	f1 f7       	brne	.-4      	; 0x2212 <LCD_voidInit+0x1aa>
    2216:	98 a3       	std	Y+32, r25	; 0x20
    2218:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221a:	89 a1       	ldd	r24, Y+33	; 0x21
    221c:	9a a1       	ldd	r25, Y+34	; 0x22
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	9a a3       	std	Y+34, r25	; 0x22
    2222:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2224:	89 a1       	ldd	r24, Y+33	; 0x21
    2226:	9a a1       	ldd	r25, Y+34	; 0x22
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	69 f7       	brne	.-38     	; 0x2206 <LCD_voidInit+0x19e>
    222c:	14 c0       	rjmp	.+40     	; 0x2256 <LCD_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222e:	6b a1       	ldd	r22, Y+35	; 0x23
    2230:	7c a1       	ldd	r23, Y+36	; 0x24
    2232:	8d a1       	ldd	r24, Y+37	; 0x25
    2234:	9e a1       	ldd	r25, Y+38	; 0x26
    2236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	9a a3       	std	Y+34, r25	; 0x22
    2240:	89 a3       	std	Y+33, r24	; 0x21
    2242:	89 a1       	ldd	r24, Y+33	; 0x21
    2244:	9a a1       	ldd	r25, Y+34	; 0x22
    2246:	9e 8f       	std	Y+30, r25	; 0x1e
    2248:	8d 8f       	std	Y+29, r24	; 0x1d
    224a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    224c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	f1 f7       	brne	.-4      	; 0x224e <LCD_voidInit+0x1e6>
    2252:	9e 8f       	std	Y+30, r25	; 0x1e
    2254:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(4);
    /* entry mode => call send_command func */
    LCD_voidSendCommand(LCD_u8_ENTRY_Mode);
    2256:	86 e0       	ldi	r24, 0x06	; 6
    2258:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_voidSendCommand>
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	a0 e8       	ldi	r26, 0x80	; 128
    2262:	bf e3       	ldi	r27, 0x3F	; 63
    2264:	89 8f       	std	Y+25, r24	; 0x19
    2266:	9a 8f       	std	Y+26, r25	; 0x1a
    2268:	ab 8f       	std	Y+27, r26	; 0x1b
    226a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226c:	69 8d       	ldd	r22, Y+25	; 0x19
    226e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2270:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2272:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	4a ef       	ldi	r20, 0xFA	; 250
    227a:	54 e4       	ldi	r21, 0x44	; 68
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	8d 8b       	std	Y+21, r24	; 0x15
    2286:	9e 8b       	std	Y+22, r25	; 0x16
    2288:	af 8b       	std	Y+23, r26	; 0x17
    228a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    228c:	6d 89       	ldd	r22, Y+21	; 0x15
    228e:	7e 89       	ldd	r23, Y+22	; 0x16
    2290:	8f 89       	ldd	r24, Y+23	; 0x17
    2292:	98 8d       	ldd	r25, Y+24	; 0x18
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e8       	ldi	r20, 0x80	; 128
    229a:	5f e3       	ldi	r21, 0x3F	; 63
    229c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a0:	88 23       	and	r24, r24
    22a2:	2c f4       	brge	.+10     	; 0x22ae <LCD_voidInit+0x246>
		__ticks = 1;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	9c 8b       	std	Y+20, r25	; 0x14
    22aa:	8b 8b       	std	Y+19, r24	; 0x13
    22ac:	3f c0       	rjmp	.+126    	; 0x232c <LCD_voidInit+0x2c4>
	else if (__tmp > 65535)
    22ae:	6d 89       	ldd	r22, Y+21	; 0x15
    22b0:	7e 89       	ldd	r23, Y+22	; 0x16
    22b2:	8f 89       	ldd	r24, Y+23	; 0x17
    22b4:	98 8d       	ldd	r25, Y+24	; 0x18
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	3f ef       	ldi	r19, 0xFF	; 255
    22ba:	4f e7       	ldi	r20, 0x7F	; 127
    22bc:	57 e4       	ldi	r21, 0x47	; 71
    22be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c2:	18 16       	cp	r1, r24
    22c4:	4c f5       	brge	.+82     	; 0x2318 <LCD_voidInit+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	69 8d       	ldd	r22, Y+25	; 0x19
    22c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e2       	ldi	r20, 0x20	; 32
    22d4:	51 e4       	ldi	r21, 0x41	; 65
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9c 8b       	std	Y+20, r25	; 0x14
    22ec:	8b 8b       	std	Y+19, r24	; 0x13
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <LCD_voidInit+0x2a6>
    22f0:	88 ec       	ldi	r24, 0xC8	; 200
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	9a 8b       	std	Y+18, r25	; 0x12
    22f6:	89 8b       	std	Y+17, r24	; 0x11
    22f8:	89 89       	ldd	r24, Y+17	; 0x11
    22fa:	9a 89       	ldd	r25, Y+18	; 0x12
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <LCD_voidInit+0x294>
    2300:	9a 8b       	std	Y+18, r25	; 0x12
    2302:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2304:	8b 89       	ldd	r24, Y+19	; 0x13
    2306:	9c 89       	ldd	r25, Y+20	; 0x14
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	9c 8b       	std	Y+20, r25	; 0x14
    230c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230e:	8b 89       	ldd	r24, Y+19	; 0x13
    2310:	9c 89       	ldd	r25, Y+20	; 0x14
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	69 f7       	brne	.-38     	; 0x22f0 <LCD_voidInit+0x288>
    2316:	14 c0       	rjmp	.+40     	; 0x2340 <LCD_voidInit+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2318:	6d 89       	ldd	r22, Y+21	; 0x15
    231a:	7e 89       	ldd	r23, Y+22	; 0x16
    231c:	8f 89       	ldd	r24, Y+23	; 0x17
    231e:	98 8d       	ldd	r25, Y+24	; 0x18
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	9c 8b       	std	Y+20, r25	; 0x14
    232a:	8b 8b       	std	Y+19, r24	; 0x13
    232c:	8b 89       	ldd	r24, Y+19	; 0x13
    232e:	9c 89       	ldd	r25, Y+20	; 0x14
    2330:	98 8b       	std	Y+16, r25	; 0x10
    2332:	8f 87       	std	Y+15, r24	; 0x0f
    2334:	8f 85       	ldd	r24, Y+15	; 0x0f
    2336:	98 89       	ldd	r25, Y+16	; 0x10
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <LCD_voidInit+0x2d0>
    233c:	98 8b       	std	Y+16, r25	; 0x10
    233e:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);  
    /* display uursor on/off control => call send_command func */
    LCD_voidSendCommand(LCD_u8_DISPLAY_CURSOR_ON);
    2340:	8c e0       	ldi	r24, 0x0C	; 12
    2342:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_voidSendCommand>
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	a0 e8       	ldi	r26, 0x80	; 128
    234c:	bf e3       	ldi	r27, 0x3F	; 63
    234e:	8b 87       	std	Y+11, r24	; 0x0b
    2350:	9c 87       	std	Y+12, r25	; 0x0c
    2352:	ad 87       	std	Y+13, r26	; 0x0d
    2354:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2356:	6b 85       	ldd	r22, Y+11	; 0x0b
    2358:	7c 85       	ldd	r23, Y+12	; 0x0c
    235a:	8d 85       	ldd	r24, Y+13	; 0x0d
    235c:	9e 85       	ldd	r25, Y+14	; 0x0e
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	4a ef       	ldi	r20, 0xFA	; 250
    2364:	54 e4       	ldi	r21, 0x44	; 68
    2366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	8f 83       	std	Y+7, r24	; 0x07
    2370:	98 87       	std	Y+8, r25	; 0x08
    2372:	a9 87       	std	Y+9, r26	; 0x09
    2374:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2376:	6f 81       	ldd	r22, Y+7	; 0x07
    2378:	78 85       	ldd	r23, Y+8	; 0x08
    237a:	89 85       	ldd	r24, Y+9	; 0x09
    237c:	9a 85       	ldd	r25, Y+10	; 0x0a
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e8       	ldi	r20, 0x80	; 128
    2384:	5f e3       	ldi	r21, 0x3F	; 63
    2386:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    238a:	88 23       	and	r24, r24
    238c:	2c f4       	brge	.+10     	; 0x2398 <LCD_voidInit+0x330>
		__ticks = 1;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9e 83       	std	Y+6, r25	; 0x06
    2394:	8d 83       	std	Y+5, r24	; 0x05
    2396:	3f c0       	rjmp	.+126    	; 0x2416 <LCD_voidInit+0x3ae>
	else if (__tmp > 65535)
    2398:	6f 81       	ldd	r22, Y+7	; 0x07
    239a:	78 85       	ldd	r23, Y+8	; 0x08
    239c:	89 85       	ldd	r24, Y+9	; 0x09
    239e:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	3f ef       	ldi	r19, 0xFF	; 255
    23a4:	4f e7       	ldi	r20, 0x7F	; 127
    23a6:	57 e4       	ldi	r21, 0x47	; 71
    23a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ac:	18 16       	cp	r1, r24
    23ae:	4c f5       	brge	.+82     	; 0x2402 <LCD_voidInit+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e2       	ldi	r20, 0x20	; 32
    23be:	51 e4       	ldi	r21, 0x41	; 65
    23c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	bc 01       	movw	r22, r24
    23ca:	cd 01       	movw	r24, r26
    23cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	9e 83       	std	Y+6, r25	; 0x06
    23d6:	8d 83       	std	Y+5, r24	; 0x05
    23d8:	0f c0       	rjmp	.+30     	; 0x23f8 <LCD_voidInit+0x390>
    23da:	88 ec       	ldi	r24, 0xC8	; 200
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	9c 83       	std	Y+4, r25	; 0x04
    23e0:	8b 83       	std	Y+3, r24	; 0x03
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	9c 81       	ldd	r25, Y+4	; 0x04
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <LCD_voidInit+0x37e>
    23ea:	9c 83       	std	Y+4, r25	; 0x04
    23ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ee:	8d 81       	ldd	r24, Y+5	; 0x05
    23f0:	9e 81       	ldd	r25, Y+6	; 0x06
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	9e 83       	std	Y+6, r25	; 0x06
    23f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f8:	8d 81       	ldd	r24, Y+5	; 0x05
    23fa:	9e 81       	ldd	r25, Y+6	; 0x06
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	69 f7       	brne	.-38     	; 0x23da <LCD_voidInit+0x372>
    2400:	14 c0       	rjmp	.+40     	; 0x242a <LCD_voidInit+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2402:	6f 81       	ldd	r22, Y+7	; 0x07
    2404:	78 85       	ldd	r23, Y+8	; 0x08
    2406:	89 85       	ldd	r24, Y+9	; 0x09
    2408:	9a 85       	ldd	r25, Y+10	; 0x0a
    240a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	9e 83       	std	Y+6, r25	; 0x06
    2414:	8d 83       	std	Y+5, r24	; 0x05
    2416:	8d 81       	ldd	r24, Y+5	; 0x05
    2418:	9e 81       	ldd	r25, Y+6	; 0x06
    241a:	9a 83       	std	Y+2, r25	; 0x02
    241c:	89 83       	std	Y+1, r24	; 0x01
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	9a 81       	ldd	r25, Y+2	; 0x02
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <LCD_voidInit+0x3ba>
    2426:	9a 83       	std	Y+2, r25	; 0x02
    2428:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);  
}
    242a:	e8 96       	adiw	r28, 0x38	; 56
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
    2436:	cf 91       	pop	r28
    2438:	df 91       	pop	r29
    243a:	08 95       	ret

0000243c <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 copy_u8Comand)
{
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	6d 97       	sbiw	r28, 0x1d	; 29
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	f8 94       	cli
    244a:	de bf       	out	0x3e, r29	; 62
    244c:	0f be       	out	0x3f, r0	; 63
    244e:	cd bf       	out	0x3d, r28	; 61
    2450:	8d 8f       	std	Y+29, r24	; 0x1d
    /* write 0 to RS pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	60 e0       	ldi	r22, 0x00	; 0
    2456:	40 e0       	ldi	r20, 0x00	; 0
    2458:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_DioEnumWriteChannel>
    /* write 0 to RW pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	61 e0       	ldi	r22, 0x01	; 1
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_DioEnumWriteChannel>
    /* write 1 to enable pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	62 e0       	ldi	r22, 0x02	; 2
    246a:	41 e0       	ldi	r20, 0x01	; 1
    246c:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_DioEnumWriteChannel>
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    #elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
        /* write the command to Data Port => 4_Bit high */
        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Comand);
    2470:	83 e0       	ldi	r24, 0x03	; 3
    2472:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2474:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <DIO_DioEnumWritePort>
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	62 e0       	ldi	r22, 0x02	; 2
    247c:	40 e0       	ldi	r20, 0x00	; 0
    247e:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_DioEnumWriteChannel>
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	a0 e8       	ldi	r26, 0x80	; 128
    2488:	bf e3       	ldi	r27, 0x3F	; 63
    248a:	89 8f       	std	Y+25, r24	; 0x19
    248c:	9a 8f       	std	Y+26, r25	; 0x1a
    248e:	ab 8f       	std	Y+27, r26	; 0x1b
    2490:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2492:	69 8d       	ldd	r22, Y+25	; 0x19
    2494:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2496:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2498:	9c 8d       	ldd	r25, Y+28	; 0x1c
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	4a ef       	ldi	r20, 0xFA	; 250
    24a0:	54 e4       	ldi	r21, 0x44	; 68
    24a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	8d 8b       	std	Y+21, r24	; 0x15
    24ac:	9e 8b       	std	Y+22, r25	; 0x16
    24ae:	af 8b       	std	Y+23, r26	; 0x17
    24b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24b2:	6d 89       	ldd	r22, Y+21	; 0x15
    24b4:	7e 89       	ldd	r23, Y+22	; 0x16
    24b6:	8f 89       	ldd	r24, Y+23	; 0x17
    24b8:	98 8d       	ldd	r25, Y+24	; 0x18
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e8       	ldi	r20, 0x80	; 128
    24c0:	5f e3       	ldi	r21, 0x3F	; 63
    24c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c6:	88 23       	and	r24, r24
    24c8:	2c f4       	brge	.+10     	; 0x24d4 <LCD_voidSendCommand+0x98>
		__ticks = 1;
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9c 8b       	std	Y+20, r25	; 0x14
    24d0:	8b 8b       	std	Y+19, r24	; 0x13
    24d2:	3f c0       	rjmp	.+126    	; 0x2552 <LCD_voidSendCommand+0x116>
	else if (__tmp > 65535)
    24d4:	6d 89       	ldd	r22, Y+21	; 0x15
    24d6:	7e 89       	ldd	r23, Y+22	; 0x16
    24d8:	8f 89       	ldd	r24, Y+23	; 0x17
    24da:	98 8d       	ldd	r25, Y+24	; 0x18
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	3f ef       	ldi	r19, 0xFF	; 255
    24e0:	4f e7       	ldi	r20, 0x7F	; 127
    24e2:	57 e4       	ldi	r21, 0x47	; 71
    24e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e8:	18 16       	cp	r1, r24
    24ea:	4c f5       	brge	.+82     	; 0x253e <LCD_voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ec:	69 8d       	ldd	r22, Y+25	; 0x19
    24ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e2       	ldi	r20, 0x20	; 32
    24fa:	51 e4       	ldi	r21, 0x41	; 65
    24fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	bc 01       	movw	r22, r24
    2506:	cd 01       	movw	r24, r26
    2508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	9c 8b       	std	Y+20, r25	; 0x14
    2512:	8b 8b       	std	Y+19, r24	; 0x13
    2514:	0f c0       	rjmp	.+30     	; 0x2534 <LCD_voidSendCommand+0xf8>
    2516:	88 ec       	ldi	r24, 0xC8	; 200
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	9a 8b       	std	Y+18, r25	; 0x12
    251c:	89 8b       	std	Y+17, r24	; 0x11
    251e:	89 89       	ldd	r24, Y+17	; 0x11
    2520:	9a 89       	ldd	r25, Y+18	; 0x12
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	f1 f7       	brne	.-4      	; 0x2522 <LCD_voidSendCommand+0xe6>
    2526:	9a 8b       	std	Y+18, r25	; 0x12
    2528:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252a:	8b 89       	ldd	r24, Y+19	; 0x13
    252c:	9c 89       	ldd	r25, Y+20	; 0x14
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	9c 8b       	std	Y+20, r25	; 0x14
    2532:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2534:	8b 89       	ldd	r24, Y+19	; 0x13
    2536:	9c 89       	ldd	r25, Y+20	; 0x14
    2538:	00 97       	sbiw	r24, 0x00	; 0
    253a:	69 f7       	brne	.-38     	; 0x2516 <LCD_voidSendCommand+0xda>
    253c:	14 c0       	rjmp	.+40     	; 0x2566 <LCD_voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253e:	6d 89       	ldd	r22, Y+21	; 0x15
    2540:	7e 89       	ldd	r23, Y+22	; 0x16
    2542:	8f 89       	ldd	r24, Y+23	; 0x17
    2544:	98 8d       	ldd	r25, Y+24	; 0x18
    2546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	9c 8b       	std	Y+20, r25	; 0x14
    2550:	8b 8b       	std	Y+19, r24	; 0x13
    2552:	8b 89       	ldd	r24, Y+19	; 0x13
    2554:	9c 89       	ldd	r25, Y+20	; 0x14
    2556:	98 8b       	std	Y+16, r25	; 0x10
    2558:	8f 87       	std	Y+15, r24	; 0x0f
    255a:	8f 85       	ldd	r24, Y+15	; 0x0f
    255c:	98 89       	ldd	r25, Y+16	; 0x10
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <LCD_voidSendCommand+0x122>
    2562:	98 8b       	std	Y+16, r25	; 0x10
    2564:	8f 87       	std	Y+15, r24	; 0x0f
        /* delay 1msec */
        _delay_ms(1);
        /* write the command to Data Port => 4_Bit low */
        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Comand<<4);
    2566:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2568:	98 2f       	mov	r25, r24
    256a:	92 95       	swap	r25
    256c:	90 7f       	andi	r25, 0xF0	; 240
    256e:	83 e0       	ldi	r24, 0x03	; 3
    2570:	69 2f       	mov	r22, r25
    2572:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <DIO_DioEnumWritePort>
        /* set enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	62 e0       	ldi	r22, 0x02	; 2
    257a:	41 e0       	ldi	r20, 0x01	; 1
    257c:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_DioEnumWriteChannel>
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	a0 e8       	ldi	r26, 0x80	; 128
    2586:	bf e3       	ldi	r27, 0x3F	; 63
    2588:	8b 87       	std	Y+11, r24	; 0x0b
    258a:	9c 87       	std	Y+12, r25	; 0x0c
    258c:	ad 87       	std	Y+13, r26	; 0x0d
    258e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2590:	6b 85       	ldd	r22, Y+11	; 0x0b
    2592:	7c 85       	ldd	r23, Y+12	; 0x0c
    2594:	8d 85       	ldd	r24, Y+13	; 0x0d
    2596:	9e 85       	ldd	r25, Y+14	; 0x0e
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	4a ef       	ldi	r20, 0xFA	; 250
    259e:	54 e4       	ldi	r21, 0x44	; 68
    25a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	8f 83       	std	Y+7, r24	; 0x07
    25aa:	98 87       	std	Y+8, r25	; 0x08
    25ac:	a9 87       	std	Y+9, r26	; 0x09
    25ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25b0:	6f 81       	ldd	r22, Y+7	; 0x07
    25b2:	78 85       	ldd	r23, Y+8	; 0x08
    25b4:	89 85       	ldd	r24, Y+9	; 0x09
    25b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e8       	ldi	r20, 0x80	; 128
    25be:	5f e3       	ldi	r21, 0x3F	; 63
    25c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25c4:	88 23       	and	r24, r24
    25c6:	2c f4       	brge	.+10     	; 0x25d2 <LCD_voidSendCommand+0x196>
		__ticks = 1;
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	9e 83       	std	Y+6, r25	; 0x06
    25ce:	8d 83       	std	Y+5, r24	; 0x05
    25d0:	3f c0       	rjmp	.+126    	; 0x2650 <LCD_voidSendCommand+0x214>
	else if (__tmp > 65535)
    25d2:	6f 81       	ldd	r22, Y+7	; 0x07
    25d4:	78 85       	ldd	r23, Y+8	; 0x08
    25d6:	89 85       	ldd	r24, Y+9	; 0x09
    25d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	3f ef       	ldi	r19, 0xFF	; 255
    25de:	4f e7       	ldi	r20, 0x7F	; 127
    25e0:	57 e4       	ldi	r21, 0x47	; 71
    25e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25e6:	18 16       	cp	r1, r24
    25e8:	4c f5       	brge	.+82     	; 0x263c <LCD_voidSendCommand+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e2       	ldi	r20, 0x20	; 32
    25f8:	51 e4       	ldi	r21, 0x41	; 65
    25fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	bc 01       	movw	r22, r24
    2604:	cd 01       	movw	r24, r26
    2606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	9e 83       	std	Y+6, r25	; 0x06
    2610:	8d 83       	std	Y+5, r24	; 0x05
    2612:	0f c0       	rjmp	.+30     	; 0x2632 <LCD_voidSendCommand+0x1f6>
    2614:	88 ec       	ldi	r24, 0xC8	; 200
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	9c 83       	std	Y+4, r25	; 0x04
    261a:	8b 83       	std	Y+3, r24	; 0x03
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	9c 81       	ldd	r25, Y+4	; 0x04
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	f1 f7       	brne	.-4      	; 0x2620 <LCD_voidSendCommand+0x1e4>
    2624:	9c 83       	std	Y+4, r25	; 0x04
    2626:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2628:	8d 81       	ldd	r24, Y+5	; 0x05
    262a:	9e 81       	ldd	r25, Y+6	; 0x06
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	9e 83       	std	Y+6, r25	; 0x06
    2630:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2632:	8d 81       	ldd	r24, Y+5	; 0x05
    2634:	9e 81       	ldd	r25, Y+6	; 0x06
    2636:	00 97       	sbiw	r24, 0x00	; 0
    2638:	69 f7       	brne	.-38     	; 0x2614 <LCD_voidSendCommand+0x1d8>
    263a:	14 c0       	rjmp	.+40     	; 0x2664 <LCD_voidSendCommand+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263c:	6f 81       	ldd	r22, Y+7	; 0x07
    263e:	78 85       	ldd	r23, Y+8	; 0x08
    2640:	89 85       	ldd	r24, Y+9	; 0x09
    2642:	9a 85       	ldd	r25, Y+10	; 0x0a
    2644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	9e 83       	std	Y+6, r25	; 0x06
    264e:	8d 83       	std	Y+5, r24	; 0x05
    2650:	8d 81       	ldd	r24, Y+5	; 0x05
    2652:	9e 81       	ldd	r25, Y+6	; 0x06
    2654:	9a 83       	std	Y+2, r25	; 0x02
    2656:	89 83       	std	Y+1, r24	; 0x01
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	9a 81       	ldd	r25, Y+2	; 0x02
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	f1 f7       	brne	.-4      	; 0x265c <LCD_voidSendCommand+0x220>
    2660:	9a 83       	std	Y+2, r25	; 0x02
    2662:	89 83       	std	Y+1, r24	; 0x01
        /* delay 1msec */
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	62 e0       	ldi	r22, 0x02	; 2
    2668:	40 e0       	ldi	r20, 0x00	; 0
    266a:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_DioEnumWriteChannel>
    #endif 
}
    266e:	6d 96       	adiw	r28, 0x1d	; 29
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	08 95       	ret

00002680 <LCD_voidDisplayCharacter>:

void LCD_voidDisplayCharacter(u8 copy_u8Data)
{
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
    2688:	6d 97       	sbiw	r28, 0x1d	; 29
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	de bf       	out	0x3e, r29	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	cd bf       	out	0x3d, r28	; 61
    2694:	8d 8f       	std	Y+29, r24	; 0x1d
    /* write 1 to RS pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	60 e0       	ldi	r22, 0x00	; 0
    269a:	41 e0       	ldi	r20, 0x01	; 1
    269c:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_DioEnumWriteChannel>
    /* write 0 to RW pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	61 e0       	ldi	r22, 0x01	; 1
    26a4:	40 e0       	ldi	r20, 0x00	; 0
    26a6:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_DioEnumWriteChannel>
    /* write 1 to enable pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	62 e0       	ldi	r22, 0x02	; 2
    26ae:	41 e0       	ldi	r20, 0x01	; 1
    26b0:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_DioEnumWriteChannel>
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    #elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
        /* write the character to Data Port => 4_Bit high */
        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Data);
    26b4:	83 e0       	ldi	r24, 0x03	; 3
    26b6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    26b8:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <DIO_DioEnumWritePort>
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	62 e0       	ldi	r22, 0x02	; 2
    26c0:	40 e0       	ldi	r20, 0x00	; 0
    26c2:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_DioEnumWriteChannel>
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	a0 e8       	ldi	r26, 0x80	; 128
    26cc:	bf e3       	ldi	r27, 0x3F	; 63
    26ce:	89 8f       	std	Y+25, r24	; 0x19
    26d0:	9a 8f       	std	Y+26, r25	; 0x1a
    26d2:	ab 8f       	std	Y+27, r26	; 0x1b
    26d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d6:	69 8d       	ldd	r22, Y+25	; 0x19
    26d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	4a ef       	ldi	r20, 0xFA	; 250
    26e4:	54 e4       	ldi	r21, 0x44	; 68
    26e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	8d 8b       	std	Y+21, r24	; 0x15
    26f0:	9e 8b       	std	Y+22, r25	; 0x16
    26f2:	af 8b       	std	Y+23, r26	; 0x17
    26f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26f6:	6d 89       	ldd	r22, Y+21	; 0x15
    26f8:	7e 89       	ldd	r23, Y+22	; 0x16
    26fa:	8f 89       	ldd	r24, Y+23	; 0x17
    26fc:	98 8d       	ldd	r25, Y+24	; 0x18
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e8       	ldi	r20, 0x80	; 128
    2704:	5f e3       	ldi	r21, 0x3F	; 63
    2706:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    270a:	88 23       	and	r24, r24
    270c:	2c f4       	brge	.+10     	; 0x2718 <LCD_voidDisplayCharacter+0x98>
		__ticks = 1;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	9c 8b       	std	Y+20, r25	; 0x14
    2714:	8b 8b       	std	Y+19, r24	; 0x13
    2716:	3f c0       	rjmp	.+126    	; 0x2796 <LCD_voidDisplayCharacter+0x116>
	else if (__tmp > 65535)
    2718:	6d 89       	ldd	r22, Y+21	; 0x15
    271a:	7e 89       	ldd	r23, Y+22	; 0x16
    271c:	8f 89       	ldd	r24, Y+23	; 0x17
    271e:	98 8d       	ldd	r25, Y+24	; 0x18
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	3f ef       	ldi	r19, 0xFF	; 255
    2724:	4f e7       	ldi	r20, 0x7F	; 127
    2726:	57 e4       	ldi	r21, 0x47	; 71
    2728:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    272c:	18 16       	cp	r1, r24
    272e:	4c f5       	brge	.+82     	; 0x2782 <LCD_voidDisplayCharacter+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2730:	69 8d       	ldd	r22, Y+25	; 0x19
    2732:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2734:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2736:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e2       	ldi	r20, 0x20	; 32
    273e:	51 e4       	ldi	r21, 0x41	; 65
    2740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	bc 01       	movw	r22, r24
    274a:	cd 01       	movw	r24, r26
    274c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	9c 8b       	std	Y+20, r25	; 0x14
    2756:	8b 8b       	std	Y+19, r24	; 0x13
    2758:	0f c0       	rjmp	.+30     	; 0x2778 <LCD_voidDisplayCharacter+0xf8>
    275a:	88 ec       	ldi	r24, 0xC8	; 200
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	9a 8b       	std	Y+18, r25	; 0x12
    2760:	89 8b       	std	Y+17, r24	; 0x11
    2762:	89 89       	ldd	r24, Y+17	; 0x11
    2764:	9a 89       	ldd	r25, Y+18	; 0x12
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	f1 f7       	brne	.-4      	; 0x2766 <LCD_voidDisplayCharacter+0xe6>
    276a:	9a 8b       	std	Y+18, r25	; 0x12
    276c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276e:	8b 89       	ldd	r24, Y+19	; 0x13
    2770:	9c 89       	ldd	r25, Y+20	; 0x14
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	9c 8b       	std	Y+20, r25	; 0x14
    2776:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2778:	8b 89       	ldd	r24, Y+19	; 0x13
    277a:	9c 89       	ldd	r25, Y+20	; 0x14
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	69 f7       	brne	.-38     	; 0x275a <LCD_voidDisplayCharacter+0xda>
    2780:	14 c0       	rjmp	.+40     	; 0x27aa <LCD_voidDisplayCharacter+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2782:	6d 89       	ldd	r22, Y+21	; 0x15
    2784:	7e 89       	ldd	r23, Y+22	; 0x16
    2786:	8f 89       	ldd	r24, Y+23	; 0x17
    2788:	98 8d       	ldd	r25, Y+24	; 0x18
    278a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	9c 8b       	std	Y+20, r25	; 0x14
    2794:	8b 8b       	std	Y+19, r24	; 0x13
    2796:	8b 89       	ldd	r24, Y+19	; 0x13
    2798:	9c 89       	ldd	r25, Y+20	; 0x14
    279a:	98 8b       	std	Y+16, r25	; 0x10
    279c:	8f 87       	std	Y+15, r24	; 0x0f
    279e:	8f 85       	ldd	r24, Y+15	; 0x0f
    27a0:	98 89       	ldd	r25, Y+16	; 0x10
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	f1 f7       	brne	.-4      	; 0x27a2 <LCD_voidDisplayCharacter+0x122>
    27a6:	98 8b       	std	Y+16, r25	; 0x10
    27a8:	8f 87       	std	Y+15, r24	; 0x0f
        /* delay 1msec */
        _delay_ms(1);
        /* write the character to Data Port => 4_Bit low */
        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Data<<4);
    27aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27ac:	98 2f       	mov	r25, r24
    27ae:	92 95       	swap	r25
    27b0:	90 7f       	andi	r25, 0xF0	; 240
    27b2:	83 e0       	ldi	r24, 0x03	; 3
    27b4:	69 2f       	mov	r22, r25
    27b6:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <DIO_DioEnumWritePort>
        /* set enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	62 e0       	ldi	r22, 0x02	; 2
    27be:	41 e0       	ldi	r20, 0x01	; 1
    27c0:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_DioEnumWriteChannel>
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	a0 e8       	ldi	r26, 0x80	; 128
    27ca:	bf e3       	ldi	r27, 0x3F	; 63
    27cc:	8b 87       	std	Y+11, r24	; 0x0b
    27ce:	9c 87       	std	Y+12, r25	; 0x0c
    27d0:	ad 87       	std	Y+13, r26	; 0x0d
    27d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27da:	9e 85       	ldd	r25, Y+14	; 0x0e
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	4a ef       	ldi	r20, 0xFA	; 250
    27e2:	54 e4       	ldi	r21, 0x44	; 68
    27e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	8f 83       	std	Y+7, r24	; 0x07
    27ee:	98 87       	std	Y+8, r25	; 0x08
    27f0:	a9 87       	std	Y+9, r26	; 0x09
    27f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27f4:	6f 81       	ldd	r22, Y+7	; 0x07
    27f6:	78 85       	ldd	r23, Y+8	; 0x08
    27f8:	89 85       	ldd	r24, Y+9	; 0x09
    27fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e8       	ldi	r20, 0x80	; 128
    2802:	5f e3       	ldi	r21, 0x3F	; 63
    2804:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2808:	88 23       	and	r24, r24
    280a:	2c f4       	brge	.+10     	; 0x2816 <LCD_voidDisplayCharacter+0x196>
		__ticks = 1;
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	9e 83       	std	Y+6, r25	; 0x06
    2812:	8d 83       	std	Y+5, r24	; 0x05
    2814:	3f c0       	rjmp	.+126    	; 0x2894 <LCD_voidDisplayCharacter+0x214>
	else if (__tmp > 65535)
    2816:	6f 81       	ldd	r22, Y+7	; 0x07
    2818:	78 85       	ldd	r23, Y+8	; 0x08
    281a:	89 85       	ldd	r24, Y+9	; 0x09
    281c:	9a 85       	ldd	r25, Y+10	; 0x0a
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	3f ef       	ldi	r19, 0xFF	; 255
    2822:	4f e7       	ldi	r20, 0x7F	; 127
    2824:	57 e4       	ldi	r21, 0x47	; 71
    2826:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    282a:	18 16       	cp	r1, r24
    282c:	4c f5       	brge	.+82     	; 0x2880 <LCD_voidDisplayCharacter+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2830:	7c 85       	ldd	r23, Y+12	; 0x0c
    2832:	8d 85       	ldd	r24, Y+13	; 0x0d
    2834:	9e 85       	ldd	r25, Y+14	; 0x0e
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	40 e2       	ldi	r20, 0x20	; 32
    283c:	51 e4       	ldi	r21, 0x41	; 65
    283e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	9e 83       	std	Y+6, r25	; 0x06
    2854:	8d 83       	std	Y+5, r24	; 0x05
    2856:	0f c0       	rjmp	.+30     	; 0x2876 <LCD_voidDisplayCharacter+0x1f6>
    2858:	88 ec       	ldi	r24, 0xC8	; 200
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	9c 83       	std	Y+4, r25	; 0x04
    285e:	8b 83       	std	Y+3, r24	; 0x03
    2860:	8b 81       	ldd	r24, Y+3	; 0x03
    2862:	9c 81       	ldd	r25, Y+4	; 0x04
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <LCD_voidDisplayCharacter+0x1e4>
    2868:	9c 83       	std	Y+4, r25	; 0x04
    286a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286c:	8d 81       	ldd	r24, Y+5	; 0x05
    286e:	9e 81       	ldd	r25, Y+6	; 0x06
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	9e 83       	std	Y+6, r25	; 0x06
    2874:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2876:	8d 81       	ldd	r24, Y+5	; 0x05
    2878:	9e 81       	ldd	r25, Y+6	; 0x06
    287a:	00 97       	sbiw	r24, 0x00	; 0
    287c:	69 f7       	brne	.-38     	; 0x2858 <LCD_voidDisplayCharacter+0x1d8>
    287e:	14 c0       	rjmp	.+40     	; 0x28a8 <LCD_voidDisplayCharacter+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2880:	6f 81       	ldd	r22, Y+7	; 0x07
    2882:	78 85       	ldd	r23, Y+8	; 0x08
    2884:	89 85       	ldd	r24, Y+9	; 0x09
    2886:	9a 85       	ldd	r25, Y+10	; 0x0a
    2888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	9e 83       	std	Y+6, r25	; 0x06
    2892:	8d 83       	std	Y+5, r24	; 0x05
    2894:	8d 81       	ldd	r24, Y+5	; 0x05
    2896:	9e 81       	ldd	r25, Y+6	; 0x06
    2898:	9a 83       	std	Y+2, r25	; 0x02
    289a:	89 83       	std	Y+1, r24	; 0x01
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	9a 81       	ldd	r25, Y+2	; 0x02
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <LCD_voidDisplayCharacter+0x220>
    28a4:	9a 83       	std	Y+2, r25	; 0x02
    28a6:	89 83       	std	Y+1, r24	; 0x01
        /* delay 1msec */
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	62 e0       	ldi	r22, 0x02	; 2
    28ac:	40 e0       	ldi	r20, 0x00	; 0
    28ae:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_DioEnumWriteChannel>
    #endif
}
    28b2:	6d 96       	adiw	r28, 0x1d	; 29
    28b4:	0f b6       	in	r0, 0x3f	; 63
    28b6:	f8 94       	cli
    28b8:	de bf       	out	0x3e, r29	; 62
    28ba:	0f be       	out	0x3f, r0	; 63
    28bc:	cd bf       	out	0x3d, r28	; 61
    28be:	cf 91       	pop	r28
    28c0:	df 91       	pop	r29
    28c2:	08 95       	ret

000028c4 <LCD_voidCreateCustomCharacter>:

void LCD_voidCreateCustomCharacter(pu8 copy_pu8Character,u8 copy_u8PatternIndex,u8 copy_u8Row,u8 copy_u8Col)
{
    28c4:	df 93       	push	r29
    28c6:	cf 93       	push	r28
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
    28cc:	27 97       	sbiw	r28, 0x07	; 7
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	f8 94       	cli
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	cd bf       	out	0x3d, r28	; 61
    28d8:	9c 83       	std	Y+4, r25	; 0x04
    28da:	8b 83       	std	Y+3, r24	; 0x03
    28dc:	6d 83       	std	Y+5, r22	; 0x05
    28de:	4e 83       	std	Y+6, r20	; 0x06
    28e0:	2f 83       	std	Y+7, r18	; 0x07
    u8 local_u8Count;
    /* to set CGRAM Address: 1- Index * 8 */
    u8 local_u8Adress = copy_u8PatternIndex * 8;
    28e2:	8d 81       	ldd	r24, Y+5	; 0x05
    28e4:	88 2f       	mov	r24, r24
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	88 0f       	add	r24, r24
    28ea:	99 1f       	adc	r25, r25
    28ec:	88 0f       	add	r24, r24
    28ee:	99 1f       	adc	r25, r25
    28f0:	88 0f       	add	r24, r24
    28f2:	99 1f       	adc	r25, r25
    28f4:	89 83       	std	Y+1, r24	; 0x01
    /* 2- set the address in the last special character */
    LCD_voidSendCommand(local_u8Adress + 64);
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	80 5c       	subi	r24, 0xC0	; 192
    28fa:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_voidSendCommand>
    /* to write the data to CGRAM or DDRAM */
    for(local_u8Count = 0;local_u8Count <8;local_u8Count++)
    28fe:	1a 82       	std	Y+2, r1	; 0x02
    2900:	0e c0       	rjmp	.+28     	; 0x291e <LCD_voidCreateCustomCharacter+0x5a>
    {
        LCD_voidDisplayCharacter(copy_pu8Character[local_u8Count]);
    2902:	8a 81       	ldd	r24, Y+2	; 0x02
    2904:	28 2f       	mov	r18, r24
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	8b 81       	ldd	r24, Y+3	; 0x03
    290a:	9c 81       	ldd	r25, Y+4	; 0x04
    290c:	fc 01       	movw	r30, r24
    290e:	e2 0f       	add	r30, r18
    2910:	f3 1f       	adc	r31, r19
    2912:	80 81       	ld	r24, Z
    2914:	0e 94 40 13 	call	0x2680	; 0x2680 <LCD_voidDisplayCharacter>
    /* to set CGRAM Address: 1- Index * 8 */
    u8 local_u8Adress = copy_u8PatternIndex * 8;
    /* 2- set the address in the last special character */
    LCD_voidSendCommand(local_u8Adress + 64);
    /* to write the data to CGRAM or DDRAM */
    for(local_u8Count = 0;local_u8Count <8;local_u8Count++)
    2918:	8a 81       	ldd	r24, Y+2	; 0x02
    291a:	8f 5f       	subi	r24, 0xFF	; 255
    291c:	8a 83       	std	Y+2, r24	; 0x02
    291e:	8a 81       	ldd	r24, Y+2	; 0x02
    2920:	88 30       	cpi	r24, 0x08	; 8
    2922:	78 f3       	brcs	.-34     	; 0x2902 <LCD_voidCreateCustomCharacter+0x3e>
    {
        LCD_voidDisplayCharacter(copy_pu8Character[local_u8Count]);
    }
    /* set DDRAM address */
    LCD_voidGoToXY(copy_u8Row,copy_u8Col);
    2924:	8e 81       	ldd	r24, Y+6	; 0x06
    2926:	6f 81       	ldd	r22, Y+7	; 0x07
    2928:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_voidGoToXY>
    /* display the pattern */
    LCD_voidDisplayCharacter(copy_u8PatternIndex);
    292c:	8d 81       	ldd	r24, Y+5	; 0x05
    292e:	0e 94 40 13 	call	0x2680	; 0x2680 <LCD_voidDisplayCharacter>
}
    2932:	27 96       	adiw	r28, 0x07	; 7
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	08 95       	ret

00002944 <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 copy_u8Row,u8 copy_u8Col)
{
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	00 d0       	rcall	.+0      	; 0x294a <LCD_voidGoToXY+0x6>
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	89 83       	std	Y+1, r24	; 0x01
    2950:	6a 83       	std	Y+2, r22	; 0x02
    /* to select the row and the column*/
    LCD_voidSendCommand(LCD_u8_ADRESS + copy_u8Row + copy_u8Col);
    2952:	99 81       	ldd	r25, Y+1	; 0x01
    2954:	8a 81       	ldd	r24, Y+2	; 0x02
    2956:	89 0f       	add	r24, r25
    2958:	80 58       	subi	r24, 0x80	; 128
    295a:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_voidSendCommand>
}
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	cf 91       	pop	r28
    2964:	df 91       	pop	r29
    2966:	08 95       	ret

00002968 <LCD_u8DisplayString>:

u8 LCD_u8DisplayString(pu8 copy_pu8String)
{
    2968:	df 93       	push	r29
    296a:	cf 93       	push	r28
    296c:	00 d0       	rcall	.+0      	; 0x296e <LCD_u8DisplayString+0x6>
    296e:	00 d0       	rcall	.+0      	; 0x2970 <LCD_u8DisplayString+0x8>
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
    2974:	9c 83       	std	Y+4, r25	; 0x04
    2976:	8b 83       	std	Y+3, r24	; 0x03
    u8 local_u8ErrorState = STD_TYPES_OK;
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Count = 0;
    297c:	19 82       	std	Y+1, r1	; 0x01
    if(copy_pu8String != NULL)
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	9c 81       	ldd	r25, Y+4	; 0x04
    2982:	00 97       	sbiw	r24, 0x00	; 0
    2984:	d9 f0       	breq	.+54     	; 0x29bc <LCD_u8DisplayString+0x54>
    2986:	0e c0       	rjmp	.+28     	; 0x29a4 <LCD_u8DisplayString+0x3c>
    {
        /* check to the end of the string */
        while(copy_pu8String[local_u8Count] != '\0')
        {
            /* diplay the first character in the string */
           LCD_voidDisplayCharacter(copy_pu8String[local_u8Count]);
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	28 2f       	mov	r18, r24
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	8b 81       	ldd	r24, Y+3	; 0x03
    2990:	9c 81       	ldd	r25, Y+4	; 0x04
    2992:	fc 01       	movw	r30, r24
    2994:	e2 0f       	add	r30, r18
    2996:	f3 1f       	adc	r31, r19
    2998:	80 81       	ld	r24, Z
    299a:	0e 94 40 13 	call	0x2680	; 0x2680 <LCD_voidDisplayCharacter>
           local_u8Count++; 
    299e:	89 81       	ldd	r24, Y+1	; 0x01
    29a0:	8f 5f       	subi	r24, 0xFF	; 255
    29a2:	89 83       	std	Y+1, r24	; 0x01
    u8 local_u8ErrorState = STD_TYPES_OK;
    u8 local_u8Count = 0;
    if(copy_pu8String != NULL)
    {
        /* check to the end of the string */
        while(copy_pu8String[local_u8Count] != '\0')
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
    29a6:	28 2f       	mov	r18, r24
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	8b 81       	ldd	r24, Y+3	; 0x03
    29ac:	9c 81       	ldd	r25, Y+4	; 0x04
    29ae:	fc 01       	movw	r30, r24
    29b0:	e2 0f       	add	r30, r18
    29b2:	f3 1f       	adc	r31, r19
    29b4:	80 81       	ld	r24, Z
    29b6:	88 23       	and	r24, r24
    29b8:	39 f7       	brne	.-50     	; 0x2988 <LCD_u8DisplayString+0x20>
    29ba:	01 c0       	rjmp	.+2      	; 0x29be <LCD_u8DisplayString+0x56>
           local_u8Count++; 
        }
    }
    else
    {
        local_u8ErrorState = STD_TYPES_NOK;
    29bc:	1a 82       	std	Y+2, r1	; 0x02
    }
    return local_u8ErrorState;
    29be:	8a 81       	ldd	r24, Y+2	; 0x02
}
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	cf 91       	pop	r28
    29ca:	df 91       	pop	r29
    29cc:	08 95       	ret

000029ce <LCD_voidDisplayNumber>:

void LCD_voidDisplayNumber(u32 copy_u32Number)
{
    29ce:	1f 93       	push	r17
    29d0:	df 93       	push	r29
    29d2:	cf 93       	push	r28
    29d4:	00 d0       	rcall	.+0      	; 0x29d6 <LCD_voidDisplayNumber+0x8>
    29d6:	00 d0       	rcall	.+0      	; 0x29d8 <LCD_voidDisplayNumber+0xa>
    29d8:	0f 92       	push	r0
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    29de:	6a 83       	std	Y+2, r22	; 0x02
    29e0:	7b 83       	std	Y+3, r23	; 0x03
    29e2:	8c 83       	std	Y+4, r24	; 0x04
    29e4:	9d 83       	std	Y+5, r25	; 0x05
    u8 local_u8Reserved = 1;
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	89 83       	std	Y+1, r24	; 0x01
    if(copy_u32Number == 0)
    29ea:	8a 81       	ldd	r24, Y+2	; 0x02
    29ec:	9b 81       	ldd	r25, Y+3	; 0x03
    29ee:	ac 81       	ldd	r26, Y+4	; 0x04
    29f0:	bd 81       	ldd	r27, Y+5	; 0x05
    29f2:	00 97       	sbiw	r24, 0x00	; 0
    29f4:	a1 05       	cpc	r26, r1
    29f6:	b1 05       	cpc	r27, r1
    29f8:	a1 f5       	brne	.+104    	; 0x2a62 <LCD_voidDisplayNumber+0x94>
    {
        LCD_voidDisplayCharacter(0);   
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	0e 94 40 13 	call	0x2680	; 0x2680 <LCD_voidDisplayCharacter>
    2a00:	4a c0       	rjmp	.+148    	; 0x2a96 <LCD_voidDisplayNumber+0xc8>
    }
    else
    {
        while(copy_u32Number != 0)
        {
            local_u8Reserved = (local_u8Reserved * 10) + (copy_u32Number % 10);
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	88 2f       	mov	r24, r24
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	9c 01       	movw	r18, r24
    2a0a:	22 0f       	add	r18, r18
    2a0c:	33 1f       	adc	r19, r19
    2a0e:	c9 01       	movw	r24, r18
    2a10:	88 0f       	add	r24, r24
    2a12:	99 1f       	adc	r25, r25
    2a14:	88 0f       	add	r24, r24
    2a16:	99 1f       	adc	r25, r25
    2a18:	82 0f       	add	r24, r18
    2a1a:	93 1f       	adc	r25, r19
    2a1c:	18 2f       	mov	r17, r24
    2a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a20:	9b 81       	ldd	r25, Y+3	; 0x03
    2a22:	ac 81       	ldd	r26, Y+4	; 0x04
    2a24:	bd 81       	ldd	r27, Y+5	; 0x05
    2a26:	2a e0       	ldi	r18, 0x0A	; 10
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	50 e0       	ldi	r21, 0x00	; 0
    2a2e:	bc 01       	movw	r22, r24
    2a30:	cd 01       	movw	r24, r26
    2a32:	0e 94 00 18 	call	0x3000	; 0x3000 <__udivmodsi4>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	81 0f       	add	r24, r17
    2a3c:	89 83       	std	Y+1, r24	; 0x01
            copy_u32Number /= 10;
    2a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a40:	9b 81       	ldd	r25, Y+3	; 0x03
    2a42:	ac 81       	ldd	r26, Y+4	; 0x04
    2a44:	bd 81       	ldd	r27, Y+5	; 0x05
    2a46:	2a e0       	ldi	r18, 0x0A	; 10
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	40 e0       	ldi	r20, 0x00	; 0
    2a4c:	50 e0       	ldi	r21, 0x00	; 0
    2a4e:	bc 01       	movw	r22, r24
    2a50:	cd 01       	movw	r24, r26
    2a52:	0e 94 00 18 	call	0x3000	; 0x3000 <__udivmodsi4>
    2a56:	da 01       	movw	r26, r20
    2a58:	c9 01       	movw	r24, r18
    2a5a:	8a 83       	std	Y+2, r24	; 0x02
    2a5c:	9b 83       	std	Y+3, r25	; 0x03
    2a5e:	ac 83       	std	Y+4, r26	; 0x04
    2a60:	bd 83       	std	Y+5, r27	; 0x05
    {
        LCD_voidDisplayCharacter(0);   
    }
    else
    {
        while(copy_u32Number != 0)
    2a62:	8a 81       	ldd	r24, Y+2	; 0x02
    2a64:	9b 81       	ldd	r25, Y+3	; 0x03
    2a66:	ac 81       	ldd	r26, Y+4	; 0x04
    2a68:	bd 81       	ldd	r27, Y+5	; 0x05
    2a6a:	00 97       	sbiw	r24, 0x00	; 0
    2a6c:	a1 05       	cpc	r26, r1
    2a6e:	b1 05       	cpc	r27, r1
    2a70:	41 f6       	brne	.-112    	; 0x2a02 <LCD_voidDisplayNumber+0x34>
            local_u8Reserved = (local_u8Reserved * 10) + (copy_u32Number % 10);
            copy_u32Number /= 10;
        }
        do
        {
            LCD_voidDisplayCharacter((local_u8Reserved % 10) + '0');
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	9a e0       	ldi	r25, 0x0A	; 10
    2a76:	69 2f       	mov	r22, r25
    2a78:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__udivmodqi4>
    2a7c:	89 2f       	mov	r24, r25
    2a7e:	80 5d       	subi	r24, 0xD0	; 208
    2a80:	0e 94 40 13 	call	0x2680	; 0x2680 <LCD_voidDisplayCharacter>
            local_u8Reserved /= 10;
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	9a e0       	ldi	r25, 0x0A	; 10
    2a88:	69 2f       	mov	r22, r25
    2a8a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__udivmodqi4>
    2a8e:	89 83       	std	Y+1, r24	; 0x01
        }while(local_u8Reserved != 1);
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	81 30       	cpi	r24, 0x01	; 1
    2a94:	71 f7       	brne	.-36     	; 0x2a72 <LCD_voidDisplayNumber+0xa4>
    }
}
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	1f 91       	pop	r17
    2aa6:	08 95       	ret

00002aa8 <LCD_voidDisplayClear>:

void LCD_voidDisplayClear(void)
{
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(0x01);
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_voidSendCommand>
}
    2ab6:	cf 91       	pop	r28
    2ab8:	df 91       	pop	r29
    2aba:	08 95       	ret

00002abc <KPD_voidWrite>:
/* array of row and column pattern */
u8 KPD_u8ArrRowPatt[] = {KPD_u8_ROW_PATT_0,KPD_u8_ROW_PATT_1,KPD_u8_ROW_PATT_2,KPD_u8_ROW_PATT_3};
u8 KPD_u8ArrColPatt[] = {KPD_u8_COL_PATT_0,KPD_u8_COL_PATT_1,KPD_u8_COL_PATT_2,KPD_u8_COL_PATT_3};

static void KPD_voidWrite(u8 copy_u8RowPattern)
{
    2abc:	df 93       	push	r29
    2abe:	cf 93       	push	r28
    2ac0:	0f 92       	push	r0
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    2ac6:	89 83       	std	Y+1, r24	; 0x01
    /* write the pattern value into row pins */
    DIO_DioEnumWriteChannel(KPD_u8_ROW_PORT,KPD_u8_ROW_PIN_0,GET_BIT(copy_u8RowPattern,KPD_u8_ROW_PIN_0));
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	98 2f       	mov	r25, r24
    2acc:	91 70       	andi	r25, 0x01	; 1
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	60 e0       	ldi	r22, 0x00	; 0
    2ad2:	49 2f       	mov	r20, r25
    2ad4:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_DioEnumWriteChannel>
    DIO_DioEnumWriteChannel(KPD_u8_ROW_PORT,KPD_u8_ROW_PIN_1,GET_BIT(copy_u8RowPattern,KPD_u8_ROW_PIN_1));
    2ad8:	89 81       	ldd	r24, Y+1	; 0x01
    2ada:	86 95       	lsr	r24
    2adc:	98 2f       	mov	r25, r24
    2ade:	91 70       	andi	r25, 0x01	; 1
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	61 e0       	ldi	r22, 0x01	; 1
    2ae4:	49 2f       	mov	r20, r25
    2ae6:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_DioEnumWriteChannel>
    DIO_DioEnumWriteChannel(KPD_u8_ROW_PORT,KPD_u8_ROW_PIN_2,GET_BIT(copy_u8RowPattern,KPD_u8_ROW_PIN_2));
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	86 95       	lsr	r24
    2aee:	86 95       	lsr	r24
    2af0:	98 2f       	mov	r25, r24
    2af2:	91 70       	andi	r25, 0x01	; 1
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	62 e0       	ldi	r22, 0x02	; 2
    2af8:	49 2f       	mov	r20, r25
    2afa:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_DioEnumWriteChannel>
    DIO_DioEnumWriteChannel(KPD_u8_ROW_PORT,KPD_u8_ROW_PIN_3,GET_BIT(copy_u8RowPattern,KPD_u8_ROW_PIN_3));
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	86 95       	lsr	r24
    2b02:	86 95       	lsr	r24
    2b04:	86 95       	lsr	r24
    2b06:	98 2f       	mov	r25, r24
    2b08:	91 70       	andi	r25, 0x01	; 1
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	63 e0       	ldi	r22, 0x03	; 3
    2b0e:	49 2f       	mov	r20, r25
    2b10:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_DioEnumWriteChannel>
}
    2b14:	0f 90       	pop	r0
    2b16:	cf 91       	pop	r28
    2b18:	df 91       	pop	r29
    2b1a:	08 95       	ret

00002b1c <KPD_KPDEnumRead>:

static KPDEnum KPD_KPDEnumRead(pu8 copy_pu8ColPattern)
{
    2b1c:	df 93       	push	r29
    2b1e:	cf 93       	push	r28
    2b20:	00 d0       	rcall	.+0      	; 0x2b22 <KPD_KPDEnumRead+0x6>
    2b22:	00 d0       	rcall	.+0      	; 0x2b24 <KPD_KPDEnumRead+0x8>
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
    2b28:	9c 83       	std	Y+4, r25	; 0x04
    2b2a:	8b 83       	std	Y+3, r24	; 0x03
    KPDEnum local_KPDEnumErrorState = KPD_Read_OK;
    2b2c:	19 82       	std	Y+1, r1	; 0x01
    u8 local_u8TempRead = 0x00;
    2b2e:	1a 82       	std	Y+2, r1	; 0x02
    /* check about pointer if equal null */
    if(copy_pu8ColPattern != NULL)
    2b30:	8b 81       	ldd	r24, Y+3	; 0x03
    2b32:	9c 81       	ldd	r25, Y+4	; 0x04
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	09 f4       	brne	.+2      	; 0x2b3a <KPD_KPDEnumRead+0x1e>
    2b38:	59 c0       	rjmp	.+178    	; 0x2bec <KPD_KPDEnumRead+0xd0>
    {
        *copy_pu8ColPattern = 0x00;
    2b3a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b3c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b3e:	10 82       	st	Z, r1
        /* read the pattern value from column pins */
        DIO_DioEnumReadChannel(KPD_u8_COL_PORT,KPD_u8_COL_PIN_0,&local_u8TempRead);
    2b40:	9e 01       	movw	r18, r28
    2b42:	2e 5f       	subi	r18, 0xFE	; 254
    2b44:	3f 4f       	sbci	r19, 0xFF	; 255
    2b46:	82 e0       	ldi	r24, 0x02	; 2
    2b48:	60 e0       	ldi	r22, 0x00	; 0
    2b4a:	a9 01       	movw	r20, r18
    2b4c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <DIO_DioEnumReadChannel>
        *copy_pu8ColPattern |= local_u8TempRead << KPD_u8_COL_PIN_0;
    2b50:	eb 81       	ldd	r30, Y+3	; 0x03
    2b52:	fc 81       	ldd	r31, Y+4	; 0x04
    2b54:	90 81       	ld	r25, Z
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	89 2b       	or	r24, r25
    2b5a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b5c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b5e:	80 83       	st	Z, r24
        DIO_DioEnumReadChannel(KPD_u8_COL_PORT,KPD_u8_COL_PIN_1,&local_u8TempRead);
    2b60:	9e 01       	movw	r18, r28
    2b62:	2e 5f       	subi	r18, 0xFE	; 254
    2b64:	3f 4f       	sbci	r19, 0xFF	; 255
    2b66:	82 e0       	ldi	r24, 0x02	; 2
    2b68:	61 e0       	ldi	r22, 0x01	; 1
    2b6a:	a9 01       	movw	r20, r18
    2b6c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <DIO_DioEnumReadChannel>
        *copy_pu8ColPattern |= local_u8TempRead << KPD_u8_COL_PIN_1;
    2b70:	eb 81       	ldd	r30, Y+3	; 0x03
    2b72:	fc 81       	ldd	r31, Y+4	; 0x04
    2b74:	80 81       	ld	r24, Z
    2b76:	28 2f       	mov	r18, r24
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7a:	88 2f       	mov	r24, r24
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	88 0f       	add	r24, r24
    2b80:	99 1f       	adc	r25, r25
    2b82:	82 2b       	or	r24, r18
    2b84:	eb 81       	ldd	r30, Y+3	; 0x03
    2b86:	fc 81       	ldd	r31, Y+4	; 0x04
    2b88:	80 83       	st	Z, r24
        DIO_DioEnumReadChannel(KPD_u8_COL_PORT,KPD_u8_COL_PIN_2,&local_u8TempRead);
    2b8a:	9e 01       	movw	r18, r28
    2b8c:	2e 5f       	subi	r18, 0xFE	; 254
    2b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b90:	82 e0       	ldi	r24, 0x02	; 2
    2b92:	62 e0       	ldi	r22, 0x02	; 2
    2b94:	a9 01       	movw	r20, r18
    2b96:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <DIO_DioEnumReadChannel>
        *copy_pu8ColPattern |= local_u8TempRead << KPD_u8_COL_PIN_2;
    2b9a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b9c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b9e:	80 81       	ld	r24, Z
    2ba0:	28 2f       	mov	r18, r24
    2ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba4:	88 2f       	mov	r24, r24
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	88 0f       	add	r24, r24
    2baa:	99 1f       	adc	r25, r25
    2bac:	88 0f       	add	r24, r24
    2bae:	99 1f       	adc	r25, r25
    2bb0:	82 2b       	or	r24, r18
    2bb2:	eb 81       	ldd	r30, Y+3	; 0x03
    2bb4:	fc 81       	ldd	r31, Y+4	; 0x04
    2bb6:	80 83       	st	Z, r24
        DIO_DioEnumReadChannel(KPD_u8_COL_PORT,KPD_u8_COL_PIN_3,&local_u8TempRead);
    2bb8:	9e 01       	movw	r18, r28
    2bba:	2e 5f       	subi	r18, 0xFE	; 254
    2bbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bbe:	82 e0       	ldi	r24, 0x02	; 2
    2bc0:	63 e0       	ldi	r22, 0x03	; 3
    2bc2:	a9 01       	movw	r20, r18
    2bc4:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <DIO_DioEnumReadChannel>
        *copy_pu8ColPattern |= local_u8TempRead << KPD_u8_COL_PIN_3;
    2bc8:	eb 81       	ldd	r30, Y+3	; 0x03
    2bca:	fc 81       	ldd	r31, Y+4	; 0x04
    2bcc:	80 81       	ld	r24, Z
    2bce:	28 2f       	mov	r18, r24
    2bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd2:	88 2f       	mov	r24, r24
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	88 0f       	add	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	88 0f       	add	r24, r24
    2bdc:	99 1f       	adc	r25, r25
    2bde:	88 0f       	add	r24, r24
    2be0:	99 1f       	adc	r25, r25
    2be2:	82 2b       	or	r24, r18
    2be4:	eb 81       	ldd	r30, Y+3	; 0x03
    2be6:	fc 81       	ldd	r31, Y+4	; 0x04
    2be8:	80 83       	st	Z, r24
    2bea:	02 c0       	rjmp	.+4      	; 0x2bf0 <KPD_KPDEnumRead+0xd4>
    }
    else 
    {
        local_KPDEnumErrorState = KPD_Read_NOK;
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_KPDEnumErrorState;
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	0f 90       	pop	r0
    2bf8:	0f 90       	pop	r0
    2bfa:	cf 91       	pop	r28
    2bfc:	df 91       	pop	r29
    2bfe:	08 95       	ret

00002c00 <KPD_KPDEnumGetKeyState>:

KPDEnum KPD_KPDEnumGetKeyState(pu8 local_pu8Return)
{
    2c00:	df 93       	push	r29
    2c02:	cf 93       	push	r28
    2c04:	cd b7       	in	r28, 0x3d	; 61
    2c06:	de b7       	in	r29, 0x3e	; 62
    2c08:	27 97       	sbiw	r28, 0x07	; 7
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	f8 94       	cli
    2c0e:	de bf       	out	0x3e, r29	; 62
    2c10:	0f be       	out	0x3f, r0	; 63
    2c12:	cd bf       	out	0x3d, r28	; 61
    2c14:	9d 83       	std	Y+5, r25	; 0x05
    2c16:	8c 83       	std	Y+4, r24	; 0x04
    KPDEnum local_KPDEnumErrorState = KPD_GetKey_OK;
    2c18:	82 e0       	ldi	r24, 0x02	; 2
    2c1a:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Count;
    u8 local_u8ReadPin;
    if(local_pu8Return != NULL)
    2c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c1e:	9d 81       	ldd	r25, Y+5	; 0x05
    2c20:	00 97       	sbiw	r24, 0x00	; 0
    2c22:	09 f4       	brne	.+2      	; 0x2c26 <KPD_KPDEnumGetKeyState+0x26>
    2c24:	75 c0       	rjmp	.+234    	; 0x2d10 <KPD_KPDEnumGetKeyState+0x110>
    {
        for(local_u8Count = 0;local_u8Count < KPD_u8_ROW_ITERATOR;local_u8Count++)
    2c26:	19 82       	std	Y+1, r1	; 0x01
    2c28:	6e c0       	rjmp	.+220    	; 0x2d06 <KPD_KPDEnumGetKeyState+0x106>
        {
            /* loop for active each row pin by writing the pattern value into pins  */
            KPD_voidWrite(KPD_u8ArrRowPatt[local_u8Count]);
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	88 2f       	mov	r24, r24
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	fc 01       	movw	r30, r24
    2c32:	e0 53       	subi	r30, 0x30	; 48
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	80 81       	ld	r24, Z
    2c38:	0e 94 5e 15 	call	0x2abc	; 0x2abc <KPD_voidWrite>
            /* read each column pin */
            KPD_KPDEnumRead(&local_u8ReadPin); // switch is pressed
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	03 96       	adiw	r24, 0x03	; 3
    2c40:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <KPD_KPDEnumRead>
            switch(local_u8ReadPin)
    2c44:	8b 81       	ldd	r24, Y+3	; 0x03
    2c46:	28 2f       	mov	r18, r24
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	3f 83       	std	Y+7, r19	; 0x07
    2c4c:	2e 83       	std	Y+6, r18	; 0x06
    2c4e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c50:	9f 81       	ldd	r25, Y+7	; 0x07
    2c52:	8b 30       	cpi	r24, 0x0B	; 11
    2c54:	91 05       	cpc	r25, r1
    2c56:	a9 f1       	breq	.+106    	; 0x2cc2 <KPD_KPDEnumGetKeyState+0xc2>
    2c58:	2e 81       	ldd	r18, Y+6	; 0x06
    2c5a:	3f 81       	ldd	r19, Y+7	; 0x07
    2c5c:	2c 30       	cpi	r18, 0x0C	; 12
    2c5e:	31 05       	cpc	r19, r1
    2c60:	34 f4       	brge	.+12     	; 0x2c6e <KPD_KPDEnumGetKeyState+0x6e>
    2c62:	8e 81       	ldd	r24, Y+6	; 0x06
    2c64:	9f 81       	ldd	r25, Y+7	; 0x07
    2c66:	87 30       	cpi	r24, 0x07	; 7
    2c68:	91 05       	cpc	r25, r1
    2c6a:	d9 f1       	breq	.+118    	; 0x2ce2 <KPD_KPDEnumGetKeyState+0xe2>
    2c6c:	49 c0       	rjmp	.+146    	; 0x2d00 <KPD_KPDEnumGetKeyState+0x100>
    2c6e:	2e 81       	ldd	r18, Y+6	; 0x06
    2c70:	3f 81       	ldd	r19, Y+7	; 0x07
    2c72:	2d 30       	cpi	r18, 0x0D	; 13
    2c74:	31 05       	cpc	r19, r1
    2c76:	a9 f0       	breq	.+42     	; 0x2ca2 <KPD_KPDEnumGetKeyState+0xa2>
    2c78:	8e 81       	ldd	r24, Y+6	; 0x06
    2c7a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c7c:	8e 30       	cpi	r24, 0x0E	; 14
    2c7e:	91 05       	cpc	r25, r1
    2c80:	09 f0       	breq	.+2      	; 0x2c84 <KPD_KPDEnumGetKeyState+0x84>
    2c82:	3e c0       	rjmp	.+124    	; 0x2d00 <KPD_KPDEnumGetKeyState+0x100>
            {
                case KPD_u8_COL_PATT_0: 
                *local_pu8Return = KPD_u8ArrKey[(local_u8Count * KPD_u8_ROW_ITERATOR) + 0];    break;
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	88 2f       	mov	r24, r24
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	88 0f       	add	r24, r24
    2c8c:	99 1f       	adc	r25, r25
    2c8e:	88 0f       	add	r24, r24
    2c90:	99 1f       	adc	r25, r25
    2c92:	fc 01       	movw	r30, r24
    2c94:	e0 54       	subi	r30, 0x40	; 64
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	80 81       	ld	r24, Z
    2c9a:	ec 81       	ldd	r30, Y+4	; 0x04
    2c9c:	fd 81       	ldd	r31, Y+5	; 0x05
    2c9e:	80 83       	st	Z, r24
    2ca0:	2f c0       	rjmp	.+94     	; 0x2d00 <KPD_KPDEnumGetKeyState+0x100>
                case KPD_u8_COL_PATT_1:
                *local_pu8Return = KPD_u8ArrKey[(local_u8Count * KPD_u8_ROW_ITERATOR) + 1];    break;
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	88 2f       	mov	r24, r24
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	88 0f       	add	r24, r24
    2caa:	99 1f       	adc	r25, r25
    2cac:	88 0f       	add	r24, r24
    2cae:	99 1f       	adc	r25, r25
    2cb0:	01 96       	adiw	r24, 0x01	; 1
    2cb2:	fc 01       	movw	r30, r24
    2cb4:	e0 54       	subi	r30, 0x40	; 64
    2cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb8:	80 81       	ld	r24, Z
    2cba:	ec 81       	ldd	r30, Y+4	; 0x04
    2cbc:	fd 81       	ldd	r31, Y+5	; 0x05
    2cbe:	80 83       	st	Z, r24
    2cc0:	1f c0       	rjmp	.+62     	; 0x2d00 <KPD_KPDEnumGetKeyState+0x100>
                case KPD_u8_COL_PATT_2:
                *local_pu8Return = KPD_u8ArrKey[(local_u8Count * KPD_u8_ROW_ITERATOR) + 2];    break;
    2cc2:	89 81       	ldd	r24, Y+1	; 0x01
    2cc4:	88 2f       	mov	r24, r24
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	88 0f       	add	r24, r24
    2cca:	99 1f       	adc	r25, r25
    2ccc:	01 96       	adiw	r24, 0x01	; 1
    2cce:	88 0f       	add	r24, r24
    2cd0:	99 1f       	adc	r25, r25
    2cd2:	fc 01       	movw	r30, r24
    2cd4:	e0 54       	subi	r30, 0x40	; 64
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	80 81       	ld	r24, Z
    2cda:	ec 81       	ldd	r30, Y+4	; 0x04
    2cdc:	fd 81       	ldd	r31, Y+5	; 0x05
    2cde:	80 83       	st	Z, r24
    2ce0:	0f c0       	rjmp	.+30     	; 0x2d00 <KPD_KPDEnumGetKeyState+0x100>
                case KPD_u8_COL_PATT_3:
                *local_pu8Return = KPD_u8ArrKey[(local_u8Count * KPD_u8_ROW_ITERATOR) + 3];    break;
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
    2ce4:	88 2f       	mov	r24, r24
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	88 0f       	add	r24, r24
    2cea:	99 1f       	adc	r25, r25
    2cec:	88 0f       	add	r24, r24
    2cee:	99 1f       	adc	r25, r25
    2cf0:	03 96       	adiw	r24, 0x03	; 3
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	e0 54       	subi	r30, 0x40	; 64
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	80 81       	ld	r24, Z
    2cfa:	ec 81       	ldd	r30, Y+4	; 0x04
    2cfc:	fd 81       	ldd	r31, Y+5	; 0x05
    2cfe:	80 83       	st	Z, r24
    KPDEnum local_KPDEnumErrorState = KPD_GetKey_OK;
    u8 local_u8Count;
    u8 local_u8ReadPin;
    if(local_pu8Return != NULL)
    {
        for(local_u8Count = 0;local_u8Count < KPD_u8_ROW_ITERATOR;local_u8Count++)
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	8f 5f       	subi	r24, 0xFF	; 255
    2d04:	89 83       	std	Y+1, r24	; 0x01
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	84 30       	cpi	r24, 0x04	; 4
    2d0a:	08 f4       	brcc	.+2      	; 0x2d0e <KPD_KPDEnumGetKeyState+0x10e>
    2d0c:	8e cf       	rjmp	.-228    	; 0x2c2a <KPD_KPDEnumGetKeyState+0x2a>
    2d0e:	02 c0       	rjmp	.+4      	; 0x2d14 <KPD_KPDEnumGetKeyState+0x114>
            }
        }
    }
    else
    {
        local_KPDEnumErrorState = KPD_GetKey_NOK;
    2d10:	83 e0       	ldi	r24, 0x03	; 3
    2d12:	8a 83       	std	Y+2, r24	; 0x02
    }
    return local_KPDEnumErrorState;
    2d14:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2d16:	27 96       	adiw	r28, 0x07	; 7
    2d18:	0f b6       	in	r0, 0x3f	; 63
    2d1a:	f8 94       	cli
    2d1c:	de bf       	out	0x3e, r29	; 62
    2d1e:	0f be       	out	0x3f, r0	; 63
    2d20:	cd bf       	out	0x3d, r28	; 61
    2d22:	cf 91       	pop	r28
    2d24:	df 91       	pop	r29
    2d26:	08 95       	ret

00002d28 <main>:
u8 KPD_u8Read = 0;
u8 KPD_u8ReadAlarm = 25;
u8 TIMER_u8_COUNT = 0;
u8 Minute=0,Hour=0;
int main(void)
{
    2d28:	df 93       	push	r29
    2d2a:	cf 93       	push	r28
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
    2d30:	0e 94 9e 09 	call	0x133c	; 0x133c <PORT_voidInit>
	GIE_voidInit(GIE_u8_ENABLE);
    2d34:	80 e0       	ldi	r24, 0x00	; 0
    2d36:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <GIE_voidInit>
	LCD_voidInit();
    2d3a:	0e 94 34 10 	call	0x2068	; 0x2068 <LCD_voidInit>
	TIMER_TIMEREnumTimer0Init(TIMER_CTC_MODE);
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER_TIMEREnumTimer0Init>
	LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL0);
    2d44:	80 e0       	ldi	r24, 0x00	; 0
    2d46:	60 e0       	ldi	r22, 0x00	; 0
    2d48:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_voidGoToXY>
	LCD_u8DisplayString("ENTER YOUR CHOICE:");
    2d4c:	80 e6       	ldi	r24, 0x60	; 96
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	0e 94 b4 14 	call	0x2968	; 0x2968 <LCD_u8DisplayString>
	LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL0);
    2d54:	80 e4       	ldi	r24, 0x40	; 64
    2d56:	60 e0       	ldi	r22, 0x00	; 0
    2d58:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_voidGoToXY>
	LCD_u8DisplayString("1-CLOCK:");
    2d5c:	83 e7       	ldi	r24, 0x73	; 115
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	0e 94 b4 14 	call	0x2968	; 0x2968 <LCD_u8DisplayString>
	LCD_voidGoToXY(LCD_u8_ROW3,LCD_u8_COL0);
    2d64:	84 e1       	ldi	r24, 0x14	; 20
    2d66:	60 e0       	ldi	r22, 0x00	; 0
    2d68:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_voidGoToXY>
	LCD_u8DisplayString("2-ALARM:");
    2d6c:	8c e7       	ldi	r24, 0x7C	; 124
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	0e 94 b4 14 	call	0x2968	; 0x2968 <LCD_u8DisplayString>
	while(1)
	{
		KPD_KPDEnumGetKeyState(&KPD_u8Read);
    2d74:	8a ee       	ldi	r24, 0xEA	; 234
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	0e 94 00 16 	call	0x2c00	; 0x2c00 <KPD_KPDEnumGetKeyState>
		if(KPD_u8Read == CLOCK)
    2d7c:	80 91 ea 00 	lds	r24, 0x00EA
    2d80:	81 30       	cpi	r24, 0x01	; 1
    2d82:	f1 f4       	brne	.+60     	; 0x2dc0 <main+0x98>
		{
			LCD_voidDisplayClear();
    2d84:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <LCD_voidDisplayClear>
			LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL0);
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	60 e0       	ldi	r22, 0x00	; 0
    2d8c:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_voidGoToXY>
			LCD_u8DisplayString("HH:MM:SS");
    2d90:	85 e8       	ldi	r24, 0x85	; 133
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	0e 94 b4 14 	call	0x2968	; 0x2968 <LCD_u8DisplayString>
			LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL0);
    2d98:	80 e4       	ldi	r24, 0x40	; 64
    2d9a:	60 e0       	ldi	r22, 0x00	; 0
    2d9c:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_voidGoToXY>
			LCD_u8DisplayString("00:00:00");
    2da0:	8e e8       	ldi	r24, 0x8E	; 142
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	0e 94 b4 14 	call	0x2968	; 0x2968 <LCD_u8DisplayString>
    2da8:	06 c0       	rjmp	.+12     	; 0x2db6 <main+0x8e>
			while(Hour != 2)
			{
				TIMER_TIMEREnumTimer0Callback(TIMER_CTC_MODE,&Timer_Clock);
    2daa:	2f e4       	ldi	r18, 0x4F	; 79
    2dac:	37 e1       	ldi	r19, 0x17	; 23
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	b9 01       	movw	r22, r18
    2db2:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <TIMER_TIMEREnumTimer0Callback>
			LCD_voidDisplayClear();
			LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL0);
			LCD_u8DisplayString("HH:MM:SS");
			LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL0);
			LCD_u8DisplayString("00:00:00");
			while(Hour != 2)
    2db6:	80 91 ed 00 	lds	r24, 0x00ED
    2dba:	82 30       	cpi	r24, 0x02	; 2
    2dbc:	b1 f7       	brne	.-20     	; 0x2daa <main+0x82>
    2dbe:	36 c0       	rjmp	.+108    	; 0x2e2c <main+0x104>
			{
				TIMER_TIMEREnumTimer0Callback(TIMER_CTC_MODE,&Timer_Clock);
			}
			break;
		}
		else if(KPD_u8Read == ALARM)
    2dc0:	80 91 ea 00 	lds	r24, 0x00EA
    2dc4:	82 30       	cpi	r24, 0x02	; 2
    2dc6:	b1 f6       	brne	.-84     	; 0x2d74 <main+0x4c>
		{
			LCD_voidDisplayClear();
    2dc8:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <LCD_voidDisplayClear>
			LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL0);
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    2dce:	60 e0       	ldi	r22, 0x00	; 0
    2dd0:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_voidGoToXY>
			LCD_u8DisplayString("TIME IN SECOND:");
    2dd4:	87 e9       	ldi	r24, 0x97	; 151
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	0e 94 b4 14 	call	0x2968	; 0x2968 <LCD_u8DisplayString>
//			KPD_KPDEnumGetKeyState(&KPD_u8ReadAlarm);
			LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL16);
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	60 e1       	ldi	r22, 0x10	; 16
    2de0:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_voidGoToXY>
			LCD_voidDisplayNumber(KPD_u8ReadAlarm);
    2de4:	80 91 d8 00 	lds	r24, 0x00D8
    2de8:	88 2f       	mov	r24, r24
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	a0 e0       	ldi	r26, 0x00	; 0
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	bc 01       	movw	r22, r24
    2df2:	cd 01       	movw	r24, r26
    2df4:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_voidDisplayNumber>
    2df8:	06 c0       	rjmp	.+12     	; 0x2e06 <main+0xde>
			while(KPD_u8ReadAlarm != 0)
			{
				TIMER_TIMEREnumTimer0Callback(TIMER_CTC_MODE,&Timer_Alarm);
    2dfa:	2b e1       	ldi	r18, 0x1B	; 27
    2dfc:	37 e1       	ldi	r19, 0x17	; 23
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	b9 01       	movw	r22, r18
    2e02:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <TIMER_TIMEREnumTimer0Callback>
			LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL0);
			LCD_u8DisplayString("TIME IN SECOND:");
//			KPD_KPDEnumGetKeyState(&KPD_u8ReadAlarm);
			LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL16);
			LCD_voidDisplayNumber(KPD_u8ReadAlarm);
			while(KPD_u8ReadAlarm != 0)
    2e06:	80 91 d8 00 	lds	r24, 0x00D8
    2e0a:	88 23       	and	r24, r24
    2e0c:	b1 f7       	brne	.-20     	; 0x2dfa <main+0xd2>
			{
				TIMER_TIMEREnumTimer0Callback(TIMER_CTC_MODE,&Timer_Alarm);
			}
			DIO_DioEnumWriteChannel(DIO_u8_PORTA,DIO_u8_PIN3,DIO_u8_HIGH);
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	63 e0       	ldi	r22, 0x03	; 3
    2e12:	41 e0       	ldi	r20, 0x01	; 1
    2e14:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <DIO_DioEnumWriteChannel>
			LCD_voidDisplayClear();
    2e18:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <LCD_voidDisplayClear>
			LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL0);
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	60 e0       	ldi	r22, 0x00	; 0
    2e20:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_voidGoToXY>
			LCD_u8DisplayString("BUZZER ENABLE");
    2e24:	87 ea       	ldi	r24, 0xA7	; 167
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	0e 94 b4 14 	call	0x2968	; 0x2968 <LCD_u8DisplayString>
			break;
		}
	}
	return 0;
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
}
    2e30:	cf 91       	pop	r28
    2e32:	df 91       	pop	r29
    2e34:	08 95       	ret

00002e36 <Timer_Alarm>:

void Timer_Alarm(void)
{
    2e36:	df 93       	push	r29
    2e38:	cf 93       	push	r28
    2e3a:	cd b7       	in	r28, 0x3d	; 61
    2e3c:	de b7       	in	r29, 0x3e	; 62
	if(KPD_u8ReadAlarm <10)
    2e3e:	80 91 d8 00 	lds	r24, 0x00D8
    2e42:	8a 30       	cpi	r24, 0x0A	; 10
    2e44:	b0 f4       	brcc	.+44     	; 0x2e72 <Timer_Alarm+0x3c>
	{
		LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL5);
    2e46:	80 e4       	ldi	r24, 0x40	; 64
    2e48:	65 e0       	ldi	r22, 0x05	; 5
    2e4a:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_voidGoToXY>
		LCD_voidDisplayCharacter(' ');
    2e4e:	80 e2       	ldi	r24, 0x20	; 32
    2e50:	0e 94 40 13 	call	0x2680	; 0x2680 <LCD_voidDisplayCharacter>
		LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL6);
    2e54:	80 e4       	ldi	r24, 0x40	; 64
    2e56:	66 e0       	ldi	r22, 0x06	; 6
    2e58:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_voidGoToXY>
		LCD_voidDisplayNumber(KPD_u8ReadAlarm);
    2e5c:	80 91 d8 00 	lds	r24, 0x00D8
    2e60:	88 2f       	mov	r24, r24
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	a0 e0       	ldi	r26, 0x00	; 0
    2e66:	b0 e0       	ldi	r27, 0x00	; 0
    2e68:	bc 01       	movw	r22, r24
    2e6a:	cd 01       	movw	r24, r26
    2e6c:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_voidDisplayNumber>
    2e70:	0e c0       	rjmp	.+28     	; 0x2e8e <Timer_Alarm+0x58>
	}
	else
	{
		LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL5);
    2e72:	80 e4       	ldi	r24, 0x40	; 64
    2e74:	65 e0       	ldi	r22, 0x05	; 5
    2e76:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_voidGoToXY>
		LCD_voidDisplayNumber(KPD_u8ReadAlarm);
    2e7a:	80 91 d8 00 	lds	r24, 0x00D8
    2e7e:	88 2f       	mov	r24, r24
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	a0 e0       	ldi	r26, 0x00	; 0
    2e84:	b0 e0       	ldi	r27, 0x00	; 0
    2e86:	bc 01       	movw	r22, r24
    2e88:	cd 01       	movw	r24, r26
    2e8a:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_voidDisplayNumber>
	}
	KPD_u8ReadAlarm--;
    2e8e:	80 91 d8 00 	lds	r24, 0x00D8
    2e92:	81 50       	subi	r24, 0x01	; 1
    2e94:	80 93 d8 00 	sts	0x00D8, r24
}
    2e98:	cf 91       	pop	r28
    2e9a:	df 91       	pop	r29
    2e9c:	08 95       	ret

00002e9e <Timer_Clock>:

void Timer_Clock(void)
{
    2e9e:	df 93       	push	r29
    2ea0:	cf 93       	push	r28
    2ea2:	cd b7       	in	r28, 0x3d	; 61
    2ea4:	de b7       	in	r29, 0x3e	; 62
	TIMER_u8_COUNT += 1;
    2ea6:	80 91 eb 00 	lds	r24, 0x00EB
    2eaa:	8f 5f       	subi	r24, 0xFF	; 255
    2eac:	80 93 eb 00 	sts	0x00EB, r24
	if(TIMER_u8_COUNT <= 9)
    2eb0:	80 91 eb 00 	lds	r24, 0x00EB
    2eb4:	8a 30       	cpi	r24, 0x0A	; 10
    2eb6:	78 f4       	brcc	.+30     	; 0x2ed6 <Timer_Clock+0x38>
	{
		LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL7);
    2eb8:	80 e4       	ldi	r24, 0x40	; 64
    2eba:	67 e0       	ldi	r22, 0x07	; 7
    2ebc:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_voidGoToXY>
		LCD_voidDisplayNumber(TIMER_u8_COUNT);
    2ec0:	80 91 eb 00 	lds	r24, 0x00EB
    2ec4:	88 2f       	mov	r24, r24
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	a0 e0       	ldi	r26, 0x00	; 0
    2eca:	b0 e0       	ldi	r27, 0x00	; 0
    2ecc:	bc 01       	movw	r22, r24
    2ece:	cd 01       	movw	r24, r26
    2ed0:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_voidDisplayNumber>
    2ed4:	86 c0       	rjmp	.+268    	; 0x2fe2 <Timer_Clock+0x144>
	}
	else if((TIMER_u8_COUNT > 9) && (TIMER_u8_COUNT <= 60))
    2ed6:	80 91 eb 00 	lds	r24, 0x00EB
    2eda:	8a 30       	cpi	r24, 0x0A	; 10
    2edc:	98 f0       	brcs	.+38     	; 0x2f04 <Timer_Clock+0x66>
    2ede:	80 91 eb 00 	lds	r24, 0x00EB
    2ee2:	8d 33       	cpi	r24, 0x3D	; 61
    2ee4:	78 f4       	brcc	.+30     	; 0x2f04 <Timer_Clock+0x66>
	{
		LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL6);
    2ee6:	80 e4       	ldi	r24, 0x40	; 64
    2ee8:	66 e0       	ldi	r22, 0x06	; 6
    2eea:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_voidGoToXY>
		LCD_voidDisplayNumber(TIMER_u8_COUNT);
    2eee:	80 91 eb 00 	lds	r24, 0x00EB
    2ef2:	88 2f       	mov	r24, r24
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	a0 e0       	ldi	r26, 0x00	; 0
    2ef8:	b0 e0       	ldi	r27, 0x00	; 0
    2efa:	bc 01       	movw	r22, r24
    2efc:	cd 01       	movw	r24, r26
    2efe:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_voidDisplayNumber>
    2f02:	6f c0       	rjmp	.+222    	; 0x2fe2 <Timer_Clock+0x144>
	}
	else
	{
		LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL6);
    2f04:	80 e4       	ldi	r24, 0x40	; 64
    2f06:	66 e0       	ldi	r22, 0x06	; 6
    2f08:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_voidGoToXY>
		LCD_voidDisplayCharacter('0');
    2f0c:	80 e3       	ldi	r24, 0x30	; 48
    2f0e:	0e 94 40 13 	call	0x2680	; 0x2680 <LCD_voidDisplayCharacter>
		TIMER_u8_COUNT = 0;
    2f12:	10 92 eb 00 	sts	0x00EB, r1
		Minute++;
    2f16:	80 91 ec 00 	lds	r24, 0x00EC
    2f1a:	8f 5f       	subi	r24, 0xFF	; 255
    2f1c:	80 93 ec 00 	sts	0x00EC, r24
		if(Minute <= 9)
    2f20:	80 91 ec 00 	lds	r24, 0x00EC
    2f24:	8a 30       	cpi	r24, 0x0A	; 10
    2f26:	78 f4       	brcc	.+30     	; 0x2f46 <Timer_Clock+0xa8>
		{
			LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL4);
    2f28:	80 e4       	ldi	r24, 0x40	; 64
    2f2a:	64 e0       	ldi	r22, 0x04	; 4
    2f2c:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_voidGoToXY>
			LCD_voidDisplayNumber(Minute);
    2f30:	80 91 ec 00 	lds	r24, 0x00EC
    2f34:	88 2f       	mov	r24, r24
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	a0 e0       	ldi	r26, 0x00	; 0
    2f3a:	b0 e0       	ldi	r27, 0x00	; 0
    2f3c:	bc 01       	movw	r22, r24
    2f3e:	cd 01       	movw	r24, r26
    2f40:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_voidDisplayNumber>
    2f44:	4e c0       	rjmp	.+156    	; 0x2fe2 <Timer_Clock+0x144>
		}
		else if((Minute > 9) && (Minute <= 60))
    2f46:	80 91 ec 00 	lds	r24, 0x00EC
    2f4a:	8a 30       	cpi	r24, 0x0A	; 10
    2f4c:	98 f0       	brcs	.+38     	; 0x2f74 <Timer_Clock+0xd6>
    2f4e:	80 91 ec 00 	lds	r24, 0x00EC
    2f52:	8d 33       	cpi	r24, 0x3D	; 61
    2f54:	78 f4       	brcc	.+30     	; 0x2f74 <Timer_Clock+0xd6>
		{
			LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL3);
    2f56:	80 e4       	ldi	r24, 0x40	; 64
    2f58:	63 e0       	ldi	r22, 0x03	; 3
    2f5a:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_voidGoToXY>
			LCD_voidDisplayNumber(Minute);
    2f5e:	80 91 ec 00 	lds	r24, 0x00EC
    2f62:	88 2f       	mov	r24, r24
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	a0 e0       	ldi	r26, 0x00	; 0
    2f68:	b0 e0       	ldi	r27, 0x00	; 0
    2f6a:	bc 01       	movw	r22, r24
    2f6c:	cd 01       	movw	r24, r26
    2f6e:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_voidDisplayNumber>
    2f72:	37 c0       	rjmp	.+110    	; 0x2fe2 <Timer_Clock+0x144>
		}
		else
		{
			LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL3);
    2f74:	80 e4       	ldi	r24, 0x40	; 64
    2f76:	63 e0       	ldi	r22, 0x03	; 3
    2f78:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_voidGoToXY>
			LCD_voidDisplayCharacter('0');
    2f7c:	80 e3       	ldi	r24, 0x30	; 48
    2f7e:	0e 94 40 13 	call	0x2680	; 0x2680 <LCD_voidDisplayCharacter>
			Minute = 0;
    2f82:	10 92 ec 00 	sts	0x00EC, r1
			Hour++;
    2f86:	80 91 ed 00 	lds	r24, 0x00ED
    2f8a:	8f 5f       	subi	r24, 0xFF	; 255
    2f8c:	80 93 ed 00 	sts	0x00ED, r24
			if(Hour <= 9)
    2f90:	80 91 ed 00 	lds	r24, 0x00ED
    2f94:	8a 30       	cpi	r24, 0x0A	; 10
    2f96:	78 f4       	brcc	.+30     	; 0x2fb6 <Timer_Clock+0x118>
			{
				LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL1);
    2f98:	80 e4       	ldi	r24, 0x40	; 64
    2f9a:	61 e0       	ldi	r22, 0x01	; 1
    2f9c:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_voidGoToXY>
				LCD_voidDisplayNumber(Hour);
    2fa0:	80 91 ed 00 	lds	r24, 0x00ED
    2fa4:	88 2f       	mov	r24, r24
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	a0 e0       	ldi	r26, 0x00	; 0
    2faa:	b0 e0       	ldi	r27, 0x00	; 0
    2fac:	bc 01       	movw	r22, r24
    2fae:	cd 01       	movw	r24, r26
    2fb0:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_voidDisplayNumber>
    2fb4:	16 c0       	rjmp	.+44     	; 0x2fe2 <Timer_Clock+0x144>
			}
			else if((Hour > 9) && (Minute <= 60))
    2fb6:	80 91 ed 00 	lds	r24, 0x00ED
    2fba:	8a 30       	cpi	r24, 0x0A	; 10
    2fbc:	90 f0       	brcs	.+36     	; 0x2fe2 <Timer_Clock+0x144>
    2fbe:	80 91 ec 00 	lds	r24, 0x00EC
    2fc2:	8d 33       	cpi	r24, 0x3D	; 61
    2fc4:	70 f4       	brcc	.+28     	; 0x2fe2 <Timer_Clock+0x144>
			{
				LCD_voidGoToXY(LCD_u8_ROW2,LCD_u8_COL0);
    2fc6:	80 e4       	ldi	r24, 0x40	; 64
    2fc8:	60 e0       	ldi	r22, 0x00	; 0
    2fca:	0e 94 a2 14 	call	0x2944	; 0x2944 <LCD_voidGoToXY>
				LCD_voidDisplayNumber(Hour);
    2fce:	80 91 ed 00 	lds	r24, 0x00ED
    2fd2:	88 2f       	mov	r24, r24
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	a0 e0       	ldi	r26, 0x00	; 0
    2fd8:	b0 e0       	ldi	r27, 0x00	; 0
    2fda:	bc 01       	movw	r22, r24
    2fdc:	cd 01       	movw	r24, r26
    2fde:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_voidDisplayNumber>
			}
		}
	}
}
    2fe2:	cf 91       	pop	r28
    2fe4:	df 91       	pop	r29
    2fe6:	08 95       	ret

00002fe8 <__udivmodqi4>:
    2fe8:	99 1b       	sub	r25, r25
    2fea:	79 e0       	ldi	r23, 0x09	; 9
    2fec:	04 c0       	rjmp	.+8      	; 0x2ff6 <__udivmodqi4_ep>

00002fee <__udivmodqi4_loop>:
    2fee:	99 1f       	adc	r25, r25
    2ff0:	96 17       	cp	r25, r22
    2ff2:	08 f0       	brcs	.+2      	; 0x2ff6 <__udivmodqi4_ep>
    2ff4:	96 1b       	sub	r25, r22

00002ff6 <__udivmodqi4_ep>:
    2ff6:	88 1f       	adc	r24, r24
    2ff8:	7a 95       	dec	r23
    2ffa:	c9 f7       	brne	.-14     	; 0x2fee <__udivmodqi4_loop>
    2ffc:	80 95       	com	r24
    2ffe:	08 95       	ret

00003000 <__udivmodsi4>:
    3000:	a1 e2       	ldi	r26, 0x21	; 33
    3002:	1a 2e       	mov	r1, r26
    3004:	aa 1b       	sub	r26, r26
    3006:	bb 1b       	sub	r27, r27
    3008:	fd 01       	movw	r30, r26
    300a:	0d c0       	rjmp	.+26     	; 0x3026 <__udivmodsi4_ep>

0000300c <__udivmodsi4_loop>:
    300c:	aa 1f       	adc	r26, r26
    300e:	bb 1f       	adc	r27, r27
    3010:	ee 1f       	adc	r30, r30
    3012:	ff 1f       	adc	r31, r31
    3014:	a2 17       	cp	r26, r18
    3016:	b3 07       	cpc	r27, r19
    3018:	e4 07       	cpc	r30, r20
    301a:	f5 07       	cpc	r31, r21
    301c:	20 f0       	brcs	.+8      	; 0x3026 <__udivmodsi4_ep>
    301e:	a2 1b       	sub	r26, r18
    3020:	b3 0b       	sbc	r27, r19
    3022:	e4 0b       	sbc	r30, r20
    3024:	f5 0b       	sbc	r31, r21

00003026 <__udivmodsi4_ep>:
    3026:	66 1f       	adc	r22, r22
    3028:	77 1f       	adc	r23, r23
    302a:	88 1f       	adc	r24, r24
    302c:	99 1f       	adc	r25, r25
    302e:	1a 94       	dec	r1
    3030:	69 f7       	brne	.-38     	; 0x300c <__udivmodsi4_loop>
    3032:	60 95       	com	r22
    3034:	70 95       	com	r23
    3036:	80 95       	com	r24
    3038:	90 95       	com	r25
    303a:	9b 01       	movw	r18, r22
    303c:	ac 01       	movw	r20, r24
    303e:	bd 01       	movw	r22, r26
    3040:	cf 01       	movw	r24, r30
    3042:	08 95       	ret

00003044 <__prologue_saves__>:
    3044:	2f 92       	push	r2
    3046:	3f 92       	push	r3
    3048:	4f 92       	push	r4
    304a:	5f 92       	push	r5
    304c:	6f 92       	push	r6
    304e:	7f 92       	push	r7
    3050:	8f 92       	push	r8
    3052:	9f 92       	push	r9
    3054:	af 92       	push	r10
    3056:	bf 92       	push	r11
    3058:	cf 92       	push	r12
    305a:	df 92       	push	r13
    305c:	ef 92       	push	r14
    305e:	ff 92       	push	r15
    3060:	0f 93       	push	r16
    3062:	1f 93       	push	r17
    3064:	cf 93       	push	r28
    3066:	df 93       	push	r29
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
    306c:	ca 1b       	sub	r28, r26
    306e:	db 0b       	sbc	r29, r27
    3070:	0f b6       	in	r0, 0x3f	; 63
    3072:	f8 94       	cli
    3074:	de bf       	out	0x3e, r29	; 62
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	cd bf       	out	0x3d, r28	; 61
    307a:	09 94       	ijmp

0000307c <__epilogue_restores__>:
    307c:	2a 88       	ldd	r2, Y+18	; 0x12
    307e:	39 88       	ldd	r3, Y+17	; 0x11
    3080:	48 88       	ldd	r4, Y+16	; 0x10
    3082:	5f 84       	ldd	r5, Y+15	; 0x0f
    3084:	6e 84       	ldd	r6, Y+14	; 0x0e
    3086:	7d 84       	ldd	r7, Y+13	; 0x0d
    3088:	8c 84       	ldd	r8, Y+12	; 0x0c
    308a:	9b 84       	ldd	r9, Y+11	; 0x0b
    308c:	aa 84       	ldd	r10, Y+10	; 0x0a
    308e:	b9 84       	ldd	r11, Y+9	; 0x09
    3090:	c8 84       	ldd	r12, Y+8	; 0x08
    3092:	df 80       	ldd	r13, Y+7	; 0x07
    3094:	ee 80       	ldd	r14, Y+6	; 0x06
    3096:	fd 80       	ldd	r15, Y+5	; 0x05
    3098:	0c 81       	ldd	r16, Y+4	; 0x04
    309a:	1b 81       	ldd	r17, Y+3	; 0x03
    309c:	aa 81       	ldd	r26, Y+2	; 0x02
    309e:	b9 81       	ldd	r27, Y+1	; 0x01
    30a0:	ce 0f       	add	r28, r30
    30a2:	d1 1d       	adc	r29, r1
    30a4:	0f b6       	in	r0, 0x3f	; 63
    30a6:	f8 94       	cli
    30a8:	de bf       	out	0x3e, r29	; 62
    30aa:	0f be       	out	0x3f, r0	; 63
    30ac:	cd bf       	out	0x3d, r28	; 61
    30ae:	ed 01       	movw	r28, r26
    30b0:	08 95       	ret

000030b2 <_exit>:
    30b2:	f8 94       	cli

000030b4 <__stop_program>:
    30b4:	ff cf       	rjmp	.-2      	; 0x30b4 <__stop_program>
