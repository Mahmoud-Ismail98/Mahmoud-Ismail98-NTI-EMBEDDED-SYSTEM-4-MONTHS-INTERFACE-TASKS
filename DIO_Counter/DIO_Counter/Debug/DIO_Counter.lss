
DIO_Counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000050a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000055e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000055e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dc2  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000885  00000000  00000000  00001456  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c53  00000000  00000000  00001cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00002930  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000607  00000000  00000000  00002a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001335  00000000  00000000  000030a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000043d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <main>
  64:	0c 94 83 02 	jmp	0x506	; 0x506 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Choose_Seg>:
}

static u8 Choose_Seg(u8 num)
{
	u8 R_val=0;
	switch(num)
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	39 f0       	breq	.+14     	; 0x7e <Choose_Seg+0x12>
  70:	60 f0       	brcs	.+24     	; 0x8a <Choose_Seg+0x1e>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	31 f0       	breq	.+12     	; 0x82 <Choose_Seg+0x16>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	31 f0       	breq	.+12     	; 0x86 <Choose_Seg+0x1a>
	}
}

static u8 Choose_Seg(u8 num)
{
	u8 R_val=0;
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	08 95       	ret
	{
		case 0:
		R_val = SEG1_COM;
		break;
		case 1:
		R_val = SEG2_COM;
  7e:	82 e0       	ldi	r24, 0x02	; 2
		break;
  80:	08 95       	ret
		case 2:
		R_val = SEG3_COM;
  82:	8d e0       	ldi	r24, 0x0D	; 13
		break;
  84:	08 95       	ret
		case 3:
		R_val = SEG4_COM;
  86:	8e e0       	ldi	r24, 0x0E	; 14
		break;
  88:	08 95       	ret
{
	u8 R_val=0;
	switch(num)
	{
		case 0:
		R_val = SEG1_COM;
  8a:	83 e0       	ldi	r24, 0x03	; 3
		case 3:
		R_val = SEG4_COM;
		break;
	}
	return R_val;
}
  8c:	08 95       	ret

0000008e <SegBCD_vInit>:


 /*Customized to eta32 board*/
 void SegBCD_vInit(void)
 {
	 Dio_enuWriteChannel(SEG1_COM,DIO_u8LEVEL_HIGH);
  8e:	61 e0       	ldi	r22, 0x01	; 1
  90:	83 e0       	ldi	r24, 0x03	; 3
  92:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_enuWriteChannel>
	 Dio_enuWriteChannel(SEG2_COM,DIO_u8LEVEL_HIGH);
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_enuWriteChannel>
	 Dio_enuWriteChannel(SEG3_COM,DIO_u8LEVEL_HIGH);
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	8d e0       	ldi	r24, 0x0D	; 13
  a2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_enuWriteChannel>
	 Dio_enuWriteChannel(SEG4_COM,DIO_u8LEVEL_HIGH);
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	8e e0       	ldi	r24, 0x0E	; 14
  aa:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_enuWriteChannel>
  ae:	08 95       	ret

000000b0 <SegBSD_vWriteVal>:
 }

void SegBSD_vWriteVal(u8 Copy_u8Num)
{
  b0:	cf 93       	push	r28
  b2:	c8 2f       	mov	r28, r24
	if(Copy_u8Num <= 7)
  b4:	88 30       	cpi	r24, 0x08	; 8
  b6:	b0 f4       	brcc	.+44     	; 0xe4 <SegBSD_vWriteVal+0x34>
	{
		Dio_enuWriteChannel(BCD_BIT0,GET_BIT(Copy_u8Num,0));
  b8:	68 2f       	mov	r22, r24
  ba:	61 70       	andi	r22, 0x01	; 1
  bc:	88 e0       	ldi	r24, 0x08	; 8
  be:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_enuWriteChannel>
		Dio_enuWriteChannel(BCD_BIT1,GET_BIT(Copy_u8Num,1));
  c2:	c1 fb       	bst	r28, 1
  c4:	66 27       	eor	r22, r22
  c6:	60 f9       	bld	r22, 0
  c8:	89 e0       	ldi	r24, 0x09	; 9
  ca:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_enuWriteChannel>
		Dio_enuWriteChannel(BCD_BIT2,GET_BIT(Copy_u8Num,2));
  ce:	c2 fb       	bst	r28, 2
  d0:	66 27       	eor	r22, r22
  d2:	60 f9       	bld	r22, 0
  d4:	8a e0       	ldi	r24, 0x0A	; 10
  d6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_enuWriteChannel>
		Dio_enuWriteChannel(BCD_BIT3,DIO_u8LEVEL_LOW);
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	8c e0       	ldi	r24, 0x0C	; 12
  de:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_enuWriteChannel>
  e2:	19 c0       	rjmp	.+50     	; 0x116 <SegBSD_vWriteVal+0x66>

	}
	else if(Copy_u8Num > 7 && Copy_u8Num <=9)
  e4:	88 ef       	ldi	r24, 0xF8	; 248
  e6:	8c 0f       	add	r24, r28
  e8:	82 30       	cpi	r24, 0x02	; 2
  ea:	a8 f4       	brcc	.+42     	; 0x116 <SegBSD_vWriteVal+0x66>
	{
		Dio_enuWriteChannel(BCD_BIT3,DIO_u8LEVEL_HIGH);
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_enuWriteChannel>

		Dio_enuWriteChannel(BCD_BIT0,GET_BIT(Copy_u8Num,0));
  f4:	6c 2f       	mov	r22, r28
  f6:	61 70       	andi	r22, 0x01	; 1
  f8:	88 e0       	ldi	r24, 0x08	; 8
  fa:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_enuWriteChannel>
		Dio_enuWriteChannel(BCD_BIT1,GET_BIT(Copy_u8Num,1));
  fe:	c1 fb       	bst	r28, 1
 100:	66 27       	eor	r22, r22
 102:	60 f9       	bld	r22, 0
 104:	89 e0       	ldi	r24, 0x09	; 9
 106:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_enuWriteChannel>
		Dio_enuWriteChannel(BCD_BIT2,GET_BIT(Copy_u8Num,2));
 10a:	c2 fb       	bst	r28, 2
 10c:	66 27       	eor	r22, r22
 10e:	60 f9       	bld	r22, 0
 110:	8a e0       	ldi	r24, 0x0A	; 10
 112:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_enuWriteChannel>

	}
}
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <SegBSD_vWriteValMUX>:
	return R_val;
}


void SegBSD_vWriteValMUX(u32 Copy_u32Num)
{
 11a:	af 92       	push	r10
 11c:	bf 92       	push	r11
 11e:	cf 92       	push	r12
 120:	df 92       	push	r13
 122:	ef 92       	push	r14
 124:	ff 92       	push	r15
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	6b 01       	movw	r12, r22
 130:	7c 01       	movw	r14, r24

	u8 x = 0;
 132:	c0 e0       	ldi	r28, 0x00	; 0
	while(Copy_u32Num != 0  || x<4)
 134:	25 c0       	rjmp	.+74     	; 0x180 <SegBSD_vWriteValMUX+0x66>
	{
		Dio_enuWriteChannel(Choose_Seg(x),DIO_u8LEVEL_HIGH);
 136:	8c 2f       	mov	r24, r28
 138:	0e 94 36 00 	call	0x6c	; 0x6c <Choose_Seg>
 13c:	d8 2f       	mov	r29, r24
 13e:	61 e0       	ldi	r22, 0x01	; 1
 140:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_enuWriteChannel>
		SegBSD_vWriteVal(Copy_u32Num%10);
 144:	c7 01       	movw	r24, r14
 146:	b6 01       	movw	r22, r12
 148:	2a e0       	ldi	r18, 0x0A	; 10
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__udivmodsi4>
 154:	a2 2e       	mov	r10, r18
 156:	b3 2e       	mov	r11, r19
 158:	04 2f       	mov	r16, r20
 15a:	15 2f       	mov	r17, r21
 15c:	86 2f       	mov	r24, r22
 15e:	0e 94 58 00 	call	0xb0	; 0xb0 <SegBSD_vWriteVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	8f e9       	ldi	r24, 0x9F	; 159
 164:	9f e0       	ldi	r25, 0x0F	; 15
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <SegBSD_vWriteValMUX+0x4c>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <SegBSD_vWriteValMUX+0x52>
 16c:	00 00       	nop
		_delay_ms(1);
		Dio_enuWriteChannel(Choose_Seg(x),DIO_u8LEVEL_LOW);
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	8d 2f       	mov	r24, r29
 172:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_enuWriteChannel>
		x++;
 176:	cf 5f       	subi	r28, 0xFF	; 255
		Copy_u32Num/=10;
 178:	ca 2c       	mov	r12, r10
 17a:	db 2c       	mov	r13, r11
 17c:	e0 2e       	mov	r14, r16
 17e:	f1 2e       	mov	r15, r17

void SegBSD_vWriteValMUX(u32 Copy_u32Num)
{

	u8 x = 0;
	while(Copy_u32Num != 0  || x<4)
 180:	c1 14       	cp	r12, r1
 182:	d1 04       	cpc	r13, r1
 184:	e1 04       	cpc	r14, r1
 186:	f1 04       	cpc	r15, r1
 188:	b1 f6       	brne	.-84     	; 0x136 <SegBSD_vWriteValMUX+0x1c>
 18a:	c4 30       	cpi	r28, 0x04	; 4
 18c:	a0 f2       	brcs	.-88     	; 0x136 <SegBSD_vWriteValMUX+0x1c>
		Dio_enuWriteChannel(Choose_Seg(x),DIO_u8LEVEL_LOW);
		x++;
		Copy_u32Num/=10;

	}
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	ff 90       	pop	r15
 198:	ef 90       	pop	r14
 19a:	df 90       	pop	r13
 19c:	cf 90       	pop	r12
 19e:	bf 90       	pop	r11
 1a0:	af 90       	pop	r10
 1a2:	08 95       	ret

000001a4 <main>:
#include "MCAL/Port/inc/Port.h"
#include "MCAL/Dio/inc/Dio.h"
#include "HAL/SegBCD/inc/SegBCD.h"

int main(void)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	1f 92       	push	r1
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
	Port_vidInit();
 1ae:	0e 94 55 02 	call	0x4aa	; 0x4aa <Port_vidInit>
	SegBCD_vInit();
 1b2:	0e 94 47 00 	call	0x8e	; 0x8e <SegBCD_vInit>
	u16 Local_u16Counter = 0;
 1b6:	00 e0       	ldi	r16, 0x00	; 0
 1b8:	10 e0       	ldi	r17, 0x00	; 0
	u8 Local_u8Button;
	
    while (1)
    {
		SegBSD_vWriteValMUX(Local_u16Counter);
 1ba:	b8 01       	movw	r22, r16
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 8d 00 	call	0x11a	; 0x11a <SegBSD_vWriteValMUX>
		Dio_enuReadChannel(DIO_u8CHANNEL24,&Local_u8Button);
 1c4:	be 01       	movw	r22, r28
 1c6:	6f 5f       	subi	r22, 0xFF	; 255
 1c8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ca:	88 e1       	ldi	r24, 0x18	; 24
 1cc:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <Dio_enuReadChannel>
		if(Local_u8Button == 0)
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	81 11       	cpse	r24, r1
 1d4:	09 c0       	rjmp	.+18     	; 0x1e8 <main+0x44>
		{
			Local_u16Counter++;
 1d6:	0f 5f       	subi	r16, 0xFF	; 255
 1d8:	1f 4f       	sbci	r17, 0xFF	; 255
 1da:	06 c0       	rjmp	.+12     	; 0x1e8 <main+0x44>
		}
		while(Local_u8Button == 0)
		{
			Dio_enuReadChannel(DIO_u8CHANNEL24,&Local_u8Button);
 1dc:	be 01       	movw	r22, r28
 1de:	6f 5f       	subi	r22, 0xFF	; 255
 1e0:	7f 4f       	sbci	r23, 0xFF	; 255
 1e2:	88 e1       	ldi	r24, 0x18	; 24
 1e4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <Dio_enuReadChannel>
		Dio_enuReadChannel(DIO_u8CHANNEL24,&Local_u8Button);
		if(Local_u8Button == 0)
		{
			Local_u16Counter++;
		}
		while(Local_u8Button == 0)
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	88 23       	and	r24, r24
 1ec:	b9 f3       	breq	.-18     	; 0x1dc <main+0x38>
 1ee:	e5 cf       	rjmp	.-54     	; 0x1ba <main+0x16>

000001f0 <Dio_enuWriteChannel>:

	u8 LOC_u8Port;

	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {
 1f0:	80 32       	cpi	r24, 0x20	; 32
 1f2:	08 f0       	brcs	.+2      	; 0x1f6 <Dio_enuWriteChannel+0x6>
 1f4:	c1 c0       	rjmp	.+386    	; 0x378 <Dio_enuWriteChannel+0x188>

		LOC_enuReturnStatus = Dio_enuChannelError;
	}

	else if (Copy_u8Level > DIO_u8NUMBER_OF_LEVELS) {
 1f6:	63 30       	cpi	r22, 0x03	; 3
 1f8:	08 f0       	brcs	.+2      	; 0x1fc <Dio_enuWriteChannel+0xc>
 1fa:	c0 c0       	rjmp	.+384    	; 0x37c <Dio_enuWriteChannel+0x18c>
		LOC_enuReturnStatus = Dio_enuLevelError;
	}

	else {

		LOC_u8Port = Copy_u8ChannelId / DIO_u8REGISTER_SIZE;
 1fc:	98 2f       	mov	r25, r24
 1fe:	96 95       	lsr	r25
 200:	96 95       	lsr	r25
 202:	96 95       	lsr	r25
		LOC_u8Pin = Copy_u8ChannelId % DIO_u8REGISTER_SIZE;
 204:	87 70       	andi	r24, 0x07	; 7

		switch (LOC_u8Port) {
 206:	91 30       	cpi	r25, 0x01	; 1
 208:	a1 f1       	breq	.+104    	; 0x272 <Dio_enuWriteChannel+0x82>
 20a:	38 f0       	brcs	.+14     	; 0x21a <Dio_enuWriteChannel+0x2a>
 20c:	92 30       	cpi	r25, 0x02	; 2
 20e:	09 f4       	brne	.+2      	; 0x212 <Dio_enuWriteChannel+0x22>
 210:	5c c0       	rjmp	.+184    	; 0x2ca <Dio_enuWriteChannel+0xda>
 212:	93 30       	cpi	r25, 0x03	; 3
 214:	09 f4       	brne	.+2      	; 0x218 <Dio_enuWriteChannel+0x28>
 216:	85 c0       	rjmp	.+266    	; 0x322 <Dio_enuWriteChannel+0x132>
 218:	b3 c0       	rjmp	.+358    	; 0x380 <Dio_enuWriteChannel+0x190>

		case DIO_u8PORTA:
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
 21a:	2a b3       	in	r18, 0x1a	; 26
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	08 2e       	mov	r0, r24
 220:	02 c0       	rjmp	.+4      	; 0x226 <Dio_enuWriteChannel+0x36>
 222:	35 95       	asr	r19
 224:	27 95       	ror	r18
 226:	0a 94       	dec	r0
 228:	e2 f7       	brpl	.-8      	; 0x222 <Dio_enuWriteChannel+0x32>
 22a:	20 ff       	sbrs	r18, 0
 22c:	ab c0       	rjmp	.+342    	; 0x384 <Dio_enuWriteChannel+0x194>
				switch (Copy_u8Level) {
 22e:	66 23       	and	r22, r22
 230:	89 f0       	breq	.+34     	; 0x254 <Dio_enuWriteChannel+0x64>
 232:	61 30       	cpi	r22, 0x01	; 1
 234:	09 f0       	breq	.+2      	; 0x238 <Dio_enuWriteChannel+0x48>
 236:	a8 c0       	rjmp	.+336    	; 0x388 <Dio_enuWriteChannel+0x198>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTA, LOC_u8Pin);
 238:	4b b3       	in	r20, 0x1b	; 27
 23a:	21 e0       	ldi	r18, 0x01	; 1
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	b9 01       	movw	r22, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <Dio_enuWriteChannel+0x56>
 242:	66 0f       	add	r22, r22
 244:	77 1f       	adc	r23, r23
 246:	8a 95       	dec	r24
 248:	e2 f7       	brpl	.-8      	; 0x242 <Dio_enuWriteChannel+0x52>
 24a:	cb 01       	movw	r24, r22
 24c:	84 2b       	or	r24, r20
 24e:	8b bb       	out	0x1b, r24	; 27
#include"../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 250:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTA, LOC_u8Pin);
					break;
 252:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTA, LOC_u8Pin);
 254:	4b b3       	in	r20, 0x1b	; 27
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	b9 01       	movw	r22, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <Dio_enuWriteChannel+0x72>
 25e:	66 0f       	add	r22, r22
 260:	77 1f       	adc	r23, r23
 262:	8a 95       	dec	r24
 264:	e2 f7       	brpl	.-8      	; 0x25e <Dio_enuWriteChannel+0x6e>
 266:	cb 01       	movw	r24, r22
 268:	80 95       	com	r24
 26a:	84 23       	and	r24, r20
 26c:	8b bb       	out	0x1b, r24	; 27
#include"../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 26e:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTA, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTA, LOC_u8Pin);
					break;
 270:	08 95       	ret
			}
			break;

		case DIO_u8PORTB:

			if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
 272:	27 b3       	in	r18, 0x17	; 23
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	08 2e       	mov	r0, r24
 278:	02 c0       	rjmp	.+4      	; 0x27e <Dio_enuWriteChannel+0x8e>
 27a:	35 95       	asr	r19
 27c:	27 95       	ror	r18
 27e:	0a 94       	dec	r0
 280:	e2 f7       	brpl	.-8      	; 0x27a <Dio_enuWriteChannel+0x8a>
 282:	20 ff       	sbrs	r18, 0
 284:	83 c0       	rjmp	.+262    	; 0x38c <Dio_enuWriteChannel+0x19c>
				switch (Copy_u8Level) {
 286:	66 23       	and	r22, r22
 288:	89 f0       	breq	.+34     	; 0x2ac <Dio_enuWriteChannel+0xbc>
 28a:	61 30       	cpi	r22, 0x01	; 1
 28c:	09 f0       	breq	.+2      	; 0x290 <Dio_enuWriteChannel+0xa0>
 28e:	80 c0       	rjmp	.+256    	; 0x390 <Dio_enuWriteChannel+0x1a0>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTB, LOC_u8Pin);
 290:	48 b3       	in	r20, 0x18	; 24
 292:	21 e0       	ldi	r18, 0x01	; 1
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	b9 01       	movw	r22, r18
 298:	02 c0       	rjmp	.+4      	; 0x29e <Dio_enuWriteChannel+0xae>
 29a:	66 0f       	add	r22, r22
 29c:	77 1f       	adc	r23, r23
 29e:	8a 95       	dec	r24
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <Dio_enuWriteChannel+0xaa>
 2a2:	cb 01       	movw	r24, r22
 2a4:	84 2b       	or	r24, r20
 2a6:	88 bb       	out	0x18, r24	; 24
#include"../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2a8:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTB, LOC_u8Pin);
					break;
 2aa:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTB, LOC_u8Pin);
 2ac:	48 b3       	in	r20, 0x18	; 24
 2ae:	21 e0       	ldi	r18, 0x01	; 1
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	b9 01       	movw	r22, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <Dio_enuWriteChannel+0xca>
 2b6:	66 0f       	add	r22, r22
 2b8:	77 1f       	adc	r23, r23
 2ba:	8a 95       	dec	r24
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <Dio_enuWriteChannel+0xc6>
 2be:	cb 01       	movw	r24, r22
 2c0:	80 95       	com	r24
 2c2:	84 23       	and	r24, r20
 2c4:	88 bb       	out	0x18, r24	; 24
#include"../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2c6:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTB, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTB, LOC_u8Pin);
					break;
 2c8:	08 95       	ret

			break;

		case DIO_u8PORTC:

			if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
 2ca:	24 b3       	in	r18, 0x14	; 20
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	08 2e       	mov	r0, r24
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <Dio_enuWriteChannel+0xe6>
 2d2:	35 95       	asr	r19
 2d4:	27 95       	ror	r18
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <Dio_enuWriteChannel+0xe2>
 2da:	20 ff       	sbrs	r18, 0
 2dc:	5b c0       	rjmp	.+182    	; 0x394 <Dio_enuWriteChannel+0x1a4>
				switch (Copy_u8Level) {
 2de:	66 23       	and	r22, r22
 2e0:	89 f0       	breq	.+34     	; 0x304 <Dio_enuWriteChannel+0x114>
 2e2:	61 30       	cpi	r22, 0x01	; 1
 2e4:	09 f0       	breq	.+2      	; 0x2e8 <Dio_enuWriteChannel+0xf8>
 2e6:	58 c0       	rjmp	.+176    	; 0x398 <Dio_enuWriteChannel+0x1a8>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTC, LOC_u8Pin);
 2e8:	45 b3       	in	r20, 0x15	; 21
 2ea:	21 e0       	ldi	r18, 0x01	; 1
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	b9 01       	movw	r22, r18
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <Dio_enuWriteChannel+0x106>
 2f2:	66 0f       	add	r22, r22
 2f4:	77 1f       	adc	r23, r23
 2f6:	8a 95       	dec	r24
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <Dio_enuWriteChannel+0x102>
 2fa:	cb 01       	movw	r24, r22
 2fc:	84 2b       	or	r24, r20
 2fe:	85 bb       	out	0x15, r24	; 21
#include"../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 300:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTC, LOC_u8Pin);
					break;
 302:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTC, LOC_u8Pin);
 304:	45 b3       	in	r20, 0x15	; 21
 306:	21 e0       	ldi	r18, 0x01	; 1
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	b9 01       	movw	r22, r18
 30c:	02 c0       	rjmp	.+4      	; 0x312 <Dio_enuWriteChannel+0x122>
 30e:	66 0f       	add	r22, r22
 310:	77 1f       	adc	r23, r23
 312:	8a 95       	dec	r24
 314:	e2 f7       	brpl	.-8      	; 0x30e <Dio_enuWriteChannel+0x11e>
 316:	cb 01       	movw	r24, r22
 318:	80 95       	com	r24
 31a:	84 23       	and	r24, r20
 31c:	85 bb       	out	0x15, r24	; 21
#include"../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 31e:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTC, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTC, LOC_u8Pin);
					break;
 320:	08 95       	ret
			}
			break;

		case DIO_u8PORTD:

			if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
 322:	21 b3       	in	r18, 0x11	; 17
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	08 2e       	mov	r0, r24
 328:	02 c0       	rjmp	.+4      	; 0x32e <Dio_enuWriteChannel+0x13e>
 32a:	35 95       	asr	r19
 32c:	27 95       	ror	r18
 32e:	0a 94       	dec	r0
 330:	e2 f7       	brpl	.-8      	; 0x32a <Dio_enuWriteChannel+0x13a>
 332:	20 ff       	sbrs	r18, 0
 334:	33 c0       	rjmp	.+102    	; 0x39c <Dio_enuWriteChannel+0x1ac>
				switch (Copy_u8Level) {
 336:	66 23       	and	r22, r22
 338:	81 f0       	breq	.+32     	; 0x35a <Dio_enuWriteChannel+0x16a>
 33a:	61 30       	cpi	r22, 0x01	; 1
 33c:	89 f5       	brne	.+98     	; 0x3a0 <Dio_enuWriteChannel+0x1b0>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTD, LOC_u8Pin);
 33e:	42 b3       	in	r20, 0x12	; 18
 340:	21 e0       	ldi	r18, 0x01	; 1
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	b9 01       	movw	r22, r18
 346:	02 c0       	rjmp	.+4      	; 0x34c <Dio_enuWriteChannel+0x15c>
 348:	66 0f       	add	r22, r22
 34a:	77 1f       	adc	r23, r23
 34c:	8a 95       	dec	r24
 34e:	e2 f7       	brpl	.-8      	; 0x348 <Dio_enuWriteChannel+0x158>
 350:	cb 01       	movw	r24, r22
 352:	84 2b       	or	r24, r20
 354:	82 bb       	out	0x12, r24	; 18
#include"../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 356:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTD, LOC_u8Pin);
					break;
 358:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTD, LOC_u8Pin);
 35a:	42 b3       	in	r20, 0x12	; 18
 35c:	21 e0       	ldi	r18, 0x01	; 1
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	b9 01       	movw	r22, r18
 362:	02 c0       	rjmp	.+4      	; 0x368 <Dio_enuWriteChannel+0x178>
 364:	66 0f       	add	r22, r22
 366:	77 1f       	adc	r23, r23
 368:	8a 95       	dec	r24
 36a:	e2 f7       	brpl	.-8      	; 0x364 <Dio_enuWriteChannel+0x174>
 36c:	cb 01       	movw	r24, r22
 36e:	80 95       	com	r24
 370:	84 23       	and	r24, r20
 372:	82 bb       	out	0x12, r24	; 18
#include"../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 374:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTD, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTD, LOC_u8Pin);
					break;
 376:	08 95       	ret

	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {

		LOC_enuReturnStatus = Dio_enuChannelError;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	08 95       	ret
	}

	else if (Copy_u8Level > DIO_u8NUMBER_OF_LEVELS) {

		LOC_enuReturnStatus = Dio_enuLevelError;
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	08 95       	ret
#include"../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	08 95       	ret
					CLR_BIT(PORTA, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 384:	83 e0       	ldi	r24, 0x03	; 3
 386:	08 95       	ret
#include"../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	08 95       	ret
					CLR_BIT(PORTB, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	08 95       	ret
#include"../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	08 95       	ret
					CLR_BIT(PORTC, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	08 95       	ret
#include"../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	08 95       	ret
					CLR_BIT(PORTD, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 39c:	83 e0       	ldi	r24, 0x03	; 3
 39e:	08 95       	ret
#include"../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 3a0:	80 e0       	ldi	r24, 0x00	; 0

		}

	}
	return LOC_enuReturnStatus;
}
 3a2:	08 95       	ret

000003a4 <Dio_enuReadChannel>:

	u8 LOC_u8Port;

	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {
 3a4:	80 32       	cpi	r24, 0x20	; 32
 3a6:	08 f0       	brcs	.+2      	; 0x3aa <Dio_enuReadChannel+0x6>
 3a8:	72 c0       	rjmp	.+228    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>

		LOC_enuReturnStatus = Dio_enuChannelError;
	}

	else if (Add_pu8ChannelLevel == NULL) {
 3aa:	61 15       	cp	r22, r1
 3ac:	71 05       	cpc	r23, r1
 3ae:	09 f4       	brne	.+2      	; 0x3b2 <Dio_enuReadChannel+0xe>
 3b0:	70 c0       	rjmp	.+224    	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
		LOC_enuReturnStatus = Dio_enuNullPointerError;
	}

	else {

		LOC_u8Port = Copy_u8ChannelId / DIO_u8REGISTER_SIZE;
 3b2:	98 2f       	mov	r25, r24
 3b4:	96 95       	lsr	r25
 3b6:	96 95       	lsr	r25
 3b8:	96 95       	lsr	r25
		LOC_u8Pin = Copy_u8ChannelId % DIO_u8REGISTER_SIZE;
 3ba:	87 70       	andi	r24, 0x07	; 7

		switch (LOC_u8Port) {
 3bc:	91 30       	cpi	r25, 0x01	; 1
 3be:	f9 f0       	breq	.+62     	; 0x3fe <Dio_enuReadChannel+0x5a>
 3c0:	30 f0       	brcs	.+12     	; 0x3ce <Dio_enuReadChannel+0x2a>
 3c2:	92 30       	cpi	r25, 0x02	; 2
 3c4:	a1 f1       	breq	.+104    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 3c6:	93 30       	cpi	r25, 0x03	; 3
 3c8:	09 f4       	brne	.+2      	; 0x3cc <Dio_enuReadChannel+0x28>
 3ca:	49 c0       	rjmp	.+146    	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 3cc:	64 c0       	rjmp	.+200    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>

		case DIO_u8PORTA:
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8INPUT) {
 3ce:	2a b3       	in	r18, 0x1a	; 26
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	08 2e       	mov	r0, r24
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <Dio_enuReadChannel+0x36>
 3d6:	35 95       	asr	r19
 3d8:	27 95       	ror	r18
 3da:	0a 94       	dec	r0
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <Dio_enuReadChannel+0x32>
 3de:	20 fd       	sbrc	r18, 0
 3e0:	5c c0       	rjmp	.+184    	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>

				*Add_pu8ChannelLevel = GET_BIT(PINA, LOC_u8Pin);
 3e2:	29 b3       	in	r18, 0x19	; 25
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	a9 01       	movw	r20, r18
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <Dio_enuReadChannel+0x4a>
 3ea:	55 95       	asr	r21
 3ec:	47 95       	ror	r20
 3ee:	8a 95       	dec	r24
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <Dio_enuReadChannel+0x46>
 3f2:	ca 01       	movw	r24, r20
 3f4:	81 70       	andi	r24, 0x01	; 1
 3f6:	fb 01       	movw	r30, r22
 3f8:	80 83       	st	Z, r24
}

Dio_tenuErrorStatus Dio_enuReadChannel(u8 Copy_u8ChannelId,
		pu8 Add_pu8ChannelLevel) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	08 95       	ret
				LOC_enuReturnStatus = Dio_enuDirectionError;
			}
			break;

		case DIO_u8PORTB:
			if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8INPUT) {
 3fe:	27 b3       	in	r18, 0x17	; 23
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	08 2e       	mov	r0, r24
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	35 95       	asr	r19
 408:	27 95       	ror	r18
 40a:	0a 94       	dec	r0
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	20 fd       	sbrc	r18, 0
 410:	46 c0       	rjmp	.+140    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>

				*Add_pu8ChannelLevel = GET_BIT(PINB, LOC_u8Pin);
 412:	26 b3       	in	r18, 0x16	; 22
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	a9 01       	movw	r20, r18
 418:	02 c0       	rjmp	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41a:	55 95       	asr	r21
 41c:	47 95       	ror	r20
 41e:	8a 95       	dec	r24
 420:	e2 f7       	brpl	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 422:	ca 01       	movw	r24, r20
 424:	81 70       	andi	r24, 0x01	; 1
 426:	fb 01       	movw	r30, r22
 428:	80 83       	st	Z, r24
}

Dio_tenuErrorStatus Dio_enuReadChannel(u8 Copy_u8ChannelId,
		pu8 Add_pu8ChannelLevel) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	08 95       	ret
			}

			break;

		case DIO_u8PORTC:
			if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8INPUT) {
 42e:	24 b3       	in	r18, 0x14	; 20
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	08 2e       	mov	r0, r24
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	35 95       	asr	r19
 438:	27 95       	ror	r18
 43a:	0a 94       	dec	r0
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	20 fd       	sbrc	r18, 0
 440:	30 c0       	rjmp	.+96     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>

				*Add_pu8ChannelLevel = GET_BIT(PINC, LOC_u8Pin);
 442:	23 b3       	in	r18, 0x13	; 19
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	a9 01       	movw	r20, r18
 448:	02 c0       	rjmp	.+4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44a:	55 95       	asr	r21
 44c:	47 95       	ror	r20
 44e:	8a 95       	dec	r24
 450:	e2 f7       	brpl	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 452:	ca 01       	movw	r24, r20
 454:	81 70       	andi	r24, 0x01	; 1
 456:	fb 01       	movw	r30, r22
 458:	80 83       	st	Z, r24
}

Dio_tenuErrorStatus Dio_enuReadChannel(u8 Copy_u8ChannelId,
		pu8 Add_pu8ChannelLevel) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	08 95       	ret

			break;

		case DIO_u8PORTD:

			if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8INPUT) {
 45e:	21 b3       	in	r18, 0x11	; 17
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	08 2e       	mov	r0, r24
 464:	02 c0       	rjmp	.+4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 466:	35 95       	asr	r19
 468:	27 95       	ror	r18
 46a:	0a 94       	dec	r0
 46c:	e2 f7       	brpl	.-8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46e:	20 fd       	sbrc	r18, 0
 470:	1a c0       	rjmp	.+52     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>

				*Add_pu8ChannelLevel = GET_BIT(PIND, LOC_u8Pin);
 472:	20 b3       	in	r18, 0x10	; 16
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	a9 01       	movw	r20, r18
 478:	02 c0       	rjmp	.+4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 47a:	55 95       	asr	r21
 47c:	47 95       	ror	r20
 47e:	8a 95       	dec	r24
 480:	e2 f7       	brpl	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 482:	ca 01       	movw	r24, r20
 484:	81 70       	andi	r24, 0x01	; 1
 486:	fb 01       	movw	r30, r22
 488:	80 83       	st	Z, r24
}

Dio_tenuErrorStatus Dio_enuReadChannel(u8 Copy_u8ChannelId,
		pu8 Add_pu8ChannelLevel) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	08 95       	ret

	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {

		LOC_enuReturnStatus = Dio_enuChannelError;
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	08 95       	ret
	}

	else if (Add_pu8ChannelLevel == NULL) {

		LOC_enuReturnStatus = Dio_enuNullPointerError;
 492:	84 e0       	ldi	r24, 0x04	; 4
 494:	08 95       	ret
}

Dio_tenuErrorStatus Dio_enuReadChannel(u8 Copy_u8ChannelId,
		pu8 Add_pu8ChannelLevel) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	08 95       	ret
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8INPUT) {

				*Add_pu8ChannelLevel = GET_BIT(PINA, LOC_u8Pin);

			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 49a:	83 e0       	ldi	r24, 0x03	; 3
 49c:	08 95       	ret
			if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8INPUT) {

				*Add_pu8ChannelLevel = GET_BIT(PINB, LOC_u8Pin);

			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 49e:	83 e0       	ldi	r24, 0x03	; 3
 4a0:	08 95       	ret
			if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8INPUT) {

				*Add_pu8ChannelLevel = GET_BIT(PINC, LOC_u8Pin);

			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 4a2:	83 e0       	ldi	r24, 0x03	; 3
 4a4:	08 95       	ret
			if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8INPUT) {

				*Add_pu8ChannelLevel = GET_BIT(PIND, LOC_u8Pin);

			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 4a6:	83 e0       	ldi	r24, 0x03	; 3
			break;

		}
	}
	return LOC_enuReturnStatus;
}
 4a8:	08 95       	ret

000004aa <Port_vidInit>:
#define PORT_u8OUTPUT_LOW		1

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		0

	DDRA = CONC(PORT_u8MODEPIN07,PORT_u8MODEPIN06,PORT_u8MODEPIN05,PORT_u8MODEPIN04,PORT_u8MODEPIN03,PORT_u8MODEPIN02,PORT_u8MODEPIN01,PORT_u8MODEPIN00);
 4aa:	8f ef       	ldi	r24, 0xFF	; 255
 4ac:	8a bb       	out	0x1a, r24	; 26
	DDRB = CONC(PORT_u8MODEPIN15,PORT_u8MODEPIN14,PORT_u8MODEPIN13,PORT_u8MODEPIN12,PORT_u8MODEPIN11,PORT_u8MODEPIN10,PORT_u8MODEPIN09,PORT_u8MODEPIN08);
 4ae:	87 bb       	out	0x17, r24	; 23
	DDRC = CONC(PORT_u8MODEPIN23,PORT_u8MODEPIN22,PORT_u8MODEPIN21,PORT_u8MODEPIN20,PORT_u8MODEPIN19,PORT_u8MODEPIN18,PORT_u8MODEPIN17,PORT_u8MODEPIN16);
 4b0:	97 e0       	ldi	r25, 0x07	; 7
 4b2:	94 bb       	out	0x14, r25	; 20
	DDRD = CONC(PORT_u8MODEPIN31,PORT_u8MODEPIN30,PORT_u8MODEPIN29,PORT_u8MODEPIN28,PORT_u8MODEPIN27,PORT_u8MODEPIN26,PORT_u8MODEPIN25,PORT_u8MODEPIN24);
 4b4:	9e e0       	ldi	r25, 0x0E	; 14
 4b6:	91 bb       	out	0x11, r25	; 17
#define PORT_u8OUTPUT_LOW		0

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		1

	PORTA = CONC(PORT_u8MODEPIN07,PORT_u8MODEPIN06,PORT_u8MODEPIN05,PORT_u8MODEPIN04,PORT_u8MODEPIN03,PORT_u8MODEPIN02,PORT_u8MODEPIN01,PORT_u8MODEPIN00);
 4b8:	1b ba       	out	0x1b, r1	; 27
	PORTB = CONC(PORT_u8MODEPIN15,PORT_u8MODEPIN14,PORT_u8MODEPIN13,PORT_u8MODEPIN12,PORT_u8MODEPIN11,PORT_u8MODEPIN10,PORT_u8MODEPIN09,PORT_u8MODEPIN08);
 4ba:	18 ba       	out	0x18, r1	; 24
	PORTC = CONC(PORT_u8MODEPIN23,PORT_u8MODEPIN22,PORT_u8MODEPIN21,PORT_u8MODEPIN20,PORT_u8MODEPIN19,PORT_u8MODEPIN18,PORT_u8MODEPIN17,PORT_u8MODEPIN16);
 4bc:	15 ba       	out	0x15, r1	; 21
	PORTD = CONC(PORT_u8MODEPIN31,PORT_u8MODEPIN30,PORT_u8MODEPIN29,PORT_u8MODEPIN28,PORT_u8MODEPIN27,PORT_u8MODEPIN26,PORT_u8MODEPIN25,PORT_u8MODEPIN24);
 4be:	82 bb       	out	0x12, r24	; 18
 4c0:	08 95       	ret

000004c2 <__udivmodsi4>:
 4c2:	a1 e2       	ldi	r26, 0x21	; 33
 4c4:	1a 2e       	mov	r1, r26
 4c6:	aa 1b       	sub	r26, r26
 4c8:	bb 1b       	sub	r27, r27
 4ca:	fd 01       	movw	r30, r26
 4cc:	0d c0       	rjmp	.+26     	; 0x4e8 <__udivmodsi4_ep>

000004ce <__udivmodsi4_loop>:
 4ce:	aa 1f       	adc	r26, r26
 4d0:	bb 1f       	adc	r27, r27
 4d2:	ee 1f       	adc	r30, r30
 4d4:	ff 1f       	adc	r31, r31
 4d6:	a2 17       	cp	r26, r18
 4d8:	b3 07       	cpc	r27, r19
 4da:	e4 07       	cpc	r30, r20
 4dc:	f5 07       	cpc	r31, r21
 4de:	20 f0       	brcs	.+8      	; 0x4e8 <__udivmodsi4_ep>
 4e0:	a2 1b       	sub	r26, r18
 4e2:	b3 0b       	sbc	r27, r19
 4e4:	e4 0b       	sbc	r30, r20
 4e6:	f5 0b       	sbc	r31, r21

000004e8 <__udivmodsi4_ep>:
 4e8:	66 1f       	adc	r22, r22
 4ea:	77 1f       	adc	r23, r23
 4ec:	88 1f       	adc	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	1a 94       	dec	r1
 4f2:	69 f7       	brne	.-38     	; 0x4ce <__udivmodsi4_loop>
 4f4:	60 95       	com	r22
 4f6:	70 95       	com	r23
 4f8:	80 95       	com	r24
 4fa:	90 95       	com	r25
 4fc:	9b 01       	movw	r18, r22
 4fe:	ac 01       	movw	r20, r24
 500:	bd 01       	movw	r22, r26
 502:	cf 01       	movw	r24, r30
 504:	08 95       	ret

00000506 <_exit>:
 506:	f8 94       	cli

00000508 <__stop_program>:
 508:	ff cf       	rjmp	.-2      	; 0x508 <__stop_program>
