
ADC_VOLT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002cba  00002d4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800078  00800078  00002d66  2**0
                  ALLOC
  3 .stab         00002964  00000000  00000000  00002d68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015e3  00000000  00000000  000056cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006caf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006def  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a840  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b3fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b0 0a 	jmp	0x1560	; 0x1560 <__vector_1>
       8:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <__vector_2>
       c:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <main>
      8a:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 24 16 	jmp	0x2c48	; 0x2c48 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 40 16 	jmp	0x2c80	; 0x2c80 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 24 16 	jmp	0x2c48	; 0x2c48 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 40 16 	jmp	0x2c80	; 0x2c80 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 50 16 	jmp	0x2ca0	; 0x2ca0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <PORT_voidInit>:
#include "../Include/PORT_private.h"
#include "../Include/PORT_config.h"


void PORT_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* Initialization Direction for all Pins */
	// PORTA
	PORT_u8_DDRA_REG = CONC(PORT_u8_PA7_DIRECTION,PORT_u8_PA6_DIRECTION,PORT_u8_PA5_DIRECTION,PORT_u8_PA4_DIRECTION,
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8e ef       	ldi	r24, 0xFE	; 254
     b54:	80 83       	st	Z, r24
	                        PORT_u8_PA3_DIRECTION,PORT_u8_PA2_DIRECTION,PORT_u8_PA1_DIRECTION,PORT_u8_PA0_DIRECTION);
	// PORTB
	PORT_u8_DDRB_REG = CONC(PORT_u8_PB7_DIRECTION,PORT_u8_PB6_DIRECTION,PORT_u8_PB5_DIRECTION,PORT_u8_PB4_DIRECTION,
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	80 83       	st	Z, r24
	                        PORT_u8_PB3_DIRECTION,PORT_u8_PB2_DIRECTION,PORT_u8_PB1_DIRECTION,PORT_u8_PB0_DIRECTION);
	// PORTC
	PORT_u8_DDRC_REG = CONC(PORT_u8_PC7_DIRECTION,PORT_u8_PC6_DIRECTION,PORT_u8_PC5_DIRECTION,PORT_u8_PC4_DIRECTION,
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	80 83       	st	Z, r24
							PORT_u8_PC3_DIRECTION,PORT_u8_PC2_DIRECTION,PORT_u8_PC1_DIRECTION,PORT_u8_PC0_DIRECTION);
	// PORTD
	PORT_u8_DDRD_REG = CONC(PORT_u8_PD7_DIRECTION,PORT_u8_PD6_DIRECTION,PORT_u8_PD5_DIRECTION,PORT_u8_PD4_DIRECTION,
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	8b ef       	ldi	r24, 0xFB	; 251
     b6c:	80 83       	st	Z, r24
							PORT_u8_PD3_DIRECTION,PORT_u8_PD2_DIRECTION,PORT_u8_PD1_DIRECTION,PORT_u8_PD0_DIRECTION);
					
	/* Initialization Value for all Pins  */
	// PORTA
	PORT_u8_PORTA_REG = CONC(PORT_u8_PA7_VALUE,PORT_u8_PA6_VALUE,PORT_u8_PA5_VALUE,PORT_u8_PA4_VALUE,
     b6e:	eb e3       	ldi	r30, 0x3B	; 59
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	10 82       	st	Z, r1
							 PORT_u8_PA3_VALUE,PORT_u8_PA2_VALUE,PORT_u8_PA1_VALUE,PORT_u8_PA0_VALUE);
	// PORTB
	PORT_u8_PORTB_REG = CONC(PORT_u8_PB7_VALUE,PORT_u8_PB6_VALUE,PORT_u8_PB5_VALUE,PORT_u8_PB4_VALUE,
     b74:	e8 e3       	ldi	r30, 0x38	; 56
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	10 82       	st	Z, r1
							 PORT_u8_PB3_VALUE,PORT_u8_PB2_VALUE,PORT_u8_PB1_VALUE,PORT_u8_PB0_VALUE);
	// PORTC
	PORT_u8_PORTC_REG = CONC(PORT_u8_PC7_VALUE,PORT_u8_PC6_VALUE,PORT_u8_PC5_VALUE,PORT_u8_PC4_VALUE,
     b7a:	e5 e3       	ldi	r30, 0x35	; 53
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	10 82       	st	Z, r1
							 PORT_u8_PC3_VALUE,PORT_u8_PC2_VALUE,PORT_u8_PC1_VALUE,PORT_u8_PC0_VALUE);
	// PORTD
	PORT_u8_PORTD_REG = CONC(PORT_u8_PD7_VALUE,PORT_u8_PD6_VALUE,PORT_u8_PD5_VALUE,PORT_u8_PD4_VALUE,
     b80:	e2 e3       	ldi	r30, 0x32	; 50
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	84 e0       	ldi	r24, 0x04	; 4
     b86:	80 83       	st	Z, r24
							 PORT_u8_PD3_VALUE,PORT_u8_PD2_VALUE,PORT_u8_PD1_VALUE,PORT_u8_PD0_VALUE);
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <PORT_PortEnumSetPinDirection>:

PortEnum PORT_PortEnumSetPinDirection(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Direction)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	2e 97       	sbiw	r28, 0x0e	; 14
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	8a 83       	std	Y+2, r24	; 0x02
     ba4:	6b 83       	std	Y+3, r22	; 0x03
     ba6:	4c 83       	std	Y+4, r20	; 0x04
	PortEnum local_PortEnumErrorState = PORT_DIRECTION_OK;
     ba8:	19 82       	std	Y+1, r1	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= PORT_u8_PORTD) && (copy_u8PinId <= PORT_u8_PIN7))
     baa:	8a 81       	ldd	r24, Y+2	; 0x02
     bac:	84 30       	cpi	r24, 0x04	; 4
     bae:	08 f0       	brcs	.+2      	; 0xbb2 <PORT_PortEnumSetPinDirection+0x24>
     bb0:	05 c1       	rjmp	.+522    	; 0xdbc <PORT_PortEnumSetPinDirection+0x22e>
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	88 30       	cpi	r24, 0x08	; 8
     bb6:	08 f0       	brcs	.+2      	; 0xbba <PORT_PortEnumSetPinDirection+0x2c>
     bb8:	01 c1       	rjmp	.+514    	; 0xdbc <PORT_PortEnumSetPinDirection+0x22e>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
     bba:	8a 81       	ldd	r24, Y+2	; 0x02
     bbc:	28 2f       	mov	r18, r24
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	3e 87       	std	Y+14, r19	; 0x0e
     bc2:	2d 87       	std	Y+13, r18	; 0x0d
     bc4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc6:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc8:	81 30       	cpi	r24, 0x01	; 1
     bca:	91 05       	cpc	r25, r1
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <PORT_PortEnumSetPinDirection+0x42>
     bce:	4f c0       	rjmp	.+158    	; 0xc6e <PORT_PortEnumSetPinDirection+0xe0>
     bd0:	2d 85       	ldd	r18, Y+13	; 0x0d
     bd2:	3e 85       	ldd	r19, Y+14	; 0x0e
     bd4:	22 30       	cpi	r18, 0x02	; 2
     bd6:	31 05       	cpc	r19, r1
     bd8:	2c f4       	brge	.+10     	; 0xbe4 <PORT_PortEnumSetPinDirection+0x56>
     bda:	8d 85       	ldd	r24, Y+13	; 0x0d
     bdc:	9e 85       	ldd	r25, Y+14	; 0x0e
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	71 f0       	breq	.+28     	; 0xbfe <PORT_PortEnumSetPinDirection+0x70>
     be2:	ee c0       	rjmp	.+476    	; 0xdc0 <PORT_PortEnumSetPinDirection+0x232>
     be4:	2d 85       	ldd	r18, Y+13	; 0x0d
     be6:	3e 85       	ldd	r19, Y+14	; 0x0e
     be8:	22 30       	cpi	r18, 0x02	; 2
     bea:	31 05       	cpc	r19, r1
     bec:	09 f4       	brne	.+2      	; 0xbf0 <PORT_PortEnumSetPinDirection+0x62>
     bee:	77 c0       	rjmp	.+238    	; 0xcde <PORT_PortEnumSetPinDirection+0x150>
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	83 30       	cpi	r24, 0x03	; 3
     bf6:	91 05       	cpc	r25, r1
     bf8:	09 f4       	brne	.+2      	; 0xbfc <PORT_PortEnumSetPinDirection+0x6e>
     bfa:	a9 c0       	rjmp	.+338    	; 0xd4e <PORT_PortEnumSetPinDirection+0x1c0>
     bfc:	e1 c0       	rjmp	.+450    	; 0xdc0 <PORT_PortEnumSetPinDirection+0x232>
		{
			case PORT_u8_PORTA:   // PORTA
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
     bfe:	8c 81       	ldd	r24, Y+4	; 0x04
     c00:	28 2f       	mov	r18, r24
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	3c 87       	std	Y+12, r19	; 0x0c
     c06:	2b 87       	std	Y+11, r18	; 0x0b
     c08:	8b 85       	ldd	r24, Y+11	; 0x0b
     c0a:	9c 85       	ldd	r25, Y+12	; 0x0c
     c0c:	00 97       	sbiw	r24, 0x00	; 0
     c0e:	d1 f0       	breq	.+52     	; 0xc44 <PORT_PortEnumSetPinDirection+0xb6>
     c10:	2b 85       	ldd	r18, Y+11	; 0x0b
     c12:	3c 85       	ldd	r19, Y+12	; 0x0c
     c14:	21 30       	cpi	r18, 0x01	; 1
     c16:	31 05       	cpc	r19, r1
     c18:	09 f0       	breq	.+2      	; 0xc1c <PORT_PortEnumSetPinDirection+0x8e>
     c1a:	d2 c0       	rjmp	.+420    	; 0xdc0 <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRA_REG,copy_u8PinId);     break;
     c1c:	aa e3       	ldi	r26, 0x3A	; 58
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	ea e3       	ldi	r30, 0x3A	; 58
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	48 2f       	mov	r20, r24
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	28 2f       	mov	r18, r24
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	02 2e       	mov	r0, r18
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <PORT_PortEnumSetPinDirection+0xac>
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	0a 94       	dec	r0
     c3c:	e2 f7       	brpl	.-8      	; 0xc36 <PORT_PortEnumSetPinDirection+0xa8>
     c3e:	84 2b       	or	r24, r20
     c40:	8c 93       	st	X, r24
     c42:	be c0       	rjmp	.+380    	; 0xdc0 <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRA_REG,copy_u8PinId);     break;
     c44:	aa e3       	ldi	r26, 0x3A	; 58
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	ea e3       	ldi	r30, 0x3A	; 58
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	48 2f       	mov	r20, r24
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	02 2e       	mov	r0, r18
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <PORT_PortEnumSetPinDirection+0xd4>
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	0a 94       	dec	r0
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <PORT_PortEnumSetPinDirection+0xd0>
     c66:	80 95       	com	r24
     c68:	84 23       	and	r24, r20
     c6a:	8c 93       	st	X, r24
     c6c:	a9 c0       	rjmp	.+338    	; 0xdc0 <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTB:   // PORTB
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
     c6e:	8c 81       	ldd	r24, Y+4	; 0x04
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	3a 87       	std	Y+10, r19	; 0x0a
     c76:	29 87       	std	Y+9, r18	; 0x09
     c78:	89 85       	ldd	r24, Y+9	; 0x09
     c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c7c:	00 97       	sbiw	r24, 0x00	; 0
     c7e:	d1 f0       	breq	.+52     	; 0xcb4 <PORT_PortEnumSetPinDirection+0x126>
     c80:	29 85       	ldd	r18, Y+9	; 0x09
     c82:	3a 85       	ldd	r19, Y+10	; 0x0a
     c84:	21 30       	cpi	r18, 0x01	; 1
     c86:	31 05       	cpc	r19, r1
     c88:	09 f0       	breq	.+2      	; 0xc8c <PORT_PortEnumSetPinDirection+0xfe>
     c8a:	9a c0       	rjmp	.+308    	; 0xdc0 <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRB_REG,copy_u8PinId);     break;
     c8c:	a7 e3       	ldi	r26, 0x37	; 55
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e7 e3       	ldi	r30, 0x37	; 55
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8b 81       	ldd	r24, Y+3	; 0x03
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <PORT_PortEnumSetPinDirection+0x11c>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <PORT_PortEnumSetPinDirection+0x118>
     cae:	84 2b       	or	r24, r20
     cb0:	8c 93       	st	X, r24
     cb2:	86 c0       	rjmp	.+268    	; 0xdc0 <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRB_REG,copy_u8PinId);     break;
     cb4:	a7 e3       	ldi	r26, 0x37	; 55
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e3       	ldi	r30, 0x37	; 55
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	48 2f       	mov	r20, r24
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	02 2e       	mov	r0, r18
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <PORT_PortEnumSetPinDirection+0x144>
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	0a 94       	dec	r0
     cd4:	e2 f7       	brpl	.-8      	; 0xcce <PORT_PortEnumSetPinDirection+0x140>
     cd6:	80 95       	com	r24
     cd8:	84 23       	and	r24, r20
     cda:	8c 93       	st	X, r24
     cdc:	71 c0       	rjmp	.+226    	; 0xdc0 <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTC:  // PORTC
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
     cde:	8c 81       	ldd	r24, Y+4	; 0x04
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	38 87       	std	Y+8, r19	; 0x08
     ce6:	2f 83       	std	Y+7, r18	; 0x07
     ce8:	8f 81       	ldd	r24, Y+7	; 0x07
     cea:	98 85       	ldd	r25, Y+8	; 0x08
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	d1 f0       	breq	.+52     	; 0xd24 <PORT_PortEnumSetPinDirection+0x196>
     cf0:	2f 81       	ldd	r18, Y+7	; 0x07
     cf2:	38 85       	ldd	r19, Y+8	; 0x08
     cf4:	21 30       	cpi	r18, 0x01	; 1
     cf6:	31 05       	cpc	r19, r1
     cf8:	09 f0       	breq	.+2      	; 0xcfc <PORT_PortEnumSetPinDirection+0x16e>
     cfa:	62 c0       	rjmp	.+196    	; 0xdc0 <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRC_REG,copy_u8PinId);     break;
     cfc:	a4 e3       	ldi	r26, 0x34	; 52
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e4 e3       	ldi	r30, 0x34	; 52
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	48 2f       	mov	r20, r24
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 2e       	mov	r0, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <PORT_PortEnumSetPinDirection+0x18c>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <PORT_PortEnumSetPinDirection+0x188>
     d1e:	84 2b       	or	r24, r20
     d20:	8c 93       	st	X, r24
     d22:	4e c0       	rjmp	.+156    	; 0xdc0 <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRC_REG,copy_u8PinId);     break;
     d24:	a4 e3       	ldi	r26, 0x34	; 52
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e4 e3       	ldi	r30, 0x34	; 52
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	48 2f       	mov	r20, r24
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	02 2e       	mov	r0, r18
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <PORT_PortEnumSetPinDirection+0x1b4>
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	0a 94       	dec	r0
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <PORT_PortEnumSetPinDirection+0x1b0>
     d46:	80 95       	com	r24
     d48:	84 23       	and	r24, r20
     d4a:	8c 93       	st	X, r24
     d4c:	39 c0       	rjmp	.+114    	; 0xdc0 <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTD:  // PORTD
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
     d4e:	8c 81       	ldd	r24, Y+4	; 0x04
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	3e 83       	std	Y+6, r19	; 0x06
     d56:	2d 83       	std	Y+5, r18	; 0x05
     d58:	8d 81       	ldd	r24, Y+5	; 0x05
     d5a:	9e 81       	ldd	r25, Y+6	; 0x06
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	c9 f0       	breq	.+50     	; 0xd92 <PORT_PortEnumSetPinDirection+0x204>
     d60:	2d 81       	ldd	r18, Y+5	; 0x05
     d62:	3e 81       	ldd	r19, Y+6	; 0x06
     d64:	21 30       	cpi	r18, 0x01	; 1
     d66:	31 05       	cpc	r19, r1
     d68:	59 f5       	brne	.+86     	; 0xdc0 <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRD_REG,copy_u8PinId);     break;
     d6a:	a1 e3       	ldi	r26, 0x31	; 49
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e1 e3       	ldi	r30, 0x31	; 49
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	48 2f       	mov	r20, r24
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 2e       	mov	r0, r18
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <PORT_PortEnumSetPinDirection+0x1fa>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <PORT_PortEnumSetPinDirection+0x1f6>
     d8c:	84 2b       	or	r24, r20
     d8e:	8c 93       	st	X, r24
     d90:	17 c0       	rjmp	.+46     	; 0xdc0 <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRD_REG,copy_u8PinId);     break;
     d92:	a1 e3       	ldi	r26, 0x31	; 49
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e1 e3       	ldi	r30, 0x31	; 49
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	48 2f       	mov	r20, r24
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 2e       	mov	r0, r18
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <PORT_PortEnumSetPinDirection+0x222>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <PORT_PortEnumSetPinDirection+0x21e>
     db4:	80 95       	com	r24
     db6:	84 23       	and	r24, r20
     db8:	8c 93       	st	X, r24
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <PORT_PortEnumSetPinDirection+0x232>
			break;
		}
	}
	else
	{
		local_PortEnumErrorState = PORT_DIRECTION_NOK;
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_PortEnumErrorState;
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
}
     dc2:	2e 96       	adiw	r28, 0x0e	; 14
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	f8 94       	cli
     dc8:	de bf       	out	0x3e, r29	; 62
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	cd bf       	out	0x3d, r28	; 61
     dce:	cf 91       	pop	r28
     dd0:	df 91       	pop	r29
     dd2:	08 95       	ret

00000dd4 <PORT_PortEnumSetPinMode>:


PortEnum PORT_PortEnumSetPinMode(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Mode)
{
     dd4:	df 93       	push	r29
     dd6:	cf 93       	push	r28
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	2e 97       	sbiw	r28, 0x0e	; 14
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	8a 83       	std	Y+2, r24	; 0x02
     dea:	6b 83       	std	Y+3, r22	; 0x03
     dec:	4c 83       	std	Y+4, r20	; 0x04
	PortEnum local_PortEnumErrorState = PORT_MODE_OK;
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= PORT_u8_PORTD) && (copy_u8PinId <= PORT_u8_PIN7))
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	84 30       	cpi	r24, 0x04	; 4
     df6:	08 f0       	brcs	.+2      	; 0xdfa <PORT_PortEnumSetPinMode+0x26>
     df8:	ee c1       	rjmp	.+988    	; 0x11d6 <PORT_PortEnumSetPinMode+0x402>
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	88 30       	cpi	r24, 0x08	; 8
     dfe:	08 f0       	brcs	.+2      	; 0xe02 <PORT_PortEnumSetPinMode+0x2e>
     e00:	ea c1       	rjmp	.+980    	; 0x11d6 <PORT_PortEnumSetPinMode+0x402>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	3e 87       	std	Y+14, r19	; 0x0e
     e0a:	2d 87       	std	Y+13, r18	; 0x0d
     e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	91 05       	cpc	r25, r1
     e14:	09 f4       	brne	.+2      	; 0xe18 <PORT_PortEnumSetPinMode+0x44>
     e16:	89 c0       	rjmp	.+274    	; 0xf2a <PORT_PortEnumSetPinMode+0x156>
     e18:	2d 85       	ldd	r18, Y+13	; 0x0d
     e1a:	3e 85       	ldd	r19, Y+14	; 0x0e
     e1c:	22 30       	cpi	r18, 0x02	; 2
     e1e:	31 05       	cpc	r19, r1
     e20:	2c f4       	brge	.+10     	; 0xe2c <PORT_PortEnumSetPinMode+0x58>
     e22:	8d 85       	ldd	r24, Y+13	; 0x0d
     e24:	9e 85       	ldd	r25, Y+14	; 0x0e
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	71 f0       	breq	.+28     	; 0xe46 <PORT_PortEnumSetPinMode+0x72>
     e2a:	d7 c1       	rjmp	.+942    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
     e2c:	2d 85       	ldd	r18, Y+13	; 0x0d
     e2e:	3e 85       	ldd	r19, Y+14	; 0x0e
     e30:	22 30       	cpi	r18, 0x02	; 2
     e32:	31 05       	cpc	r19, r1
     e34:	09 f4       	brne	.+2      	; 0xe38 <PORT_PortEnumSetPinMode+0x64>
     e36:	eb c0       	rjmp	.+470    	; 0x100e <PORT_PortEnumSetPinMode+0x23a>
     e38:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e3c:	83 30       	cpi	r24, 0x03	; 3
     e3e:	91 05       	cpc	r25, r1
     e40:	09 f4       	brne	.+2      	; 0xe44 <PORT_PortEnumSetPinMode+0x70>
     e42:	57 c1       	rjmp	.+686    	; 0x10f2 <PORT_PortEnumSetPinMode+0x31e>
     e44:	ca c1       	rjmp	.+916    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
		{
			case PORT_u8_PORTA:  // PORTA
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
     e46:	8c 81       	ldd	r24, Y+4	; 0x04
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	3c 87       	std	Y+12, r19	; 0x0c
     e4e:	2b 87       	std	Y+11, r18	; 0x0b
     e50:	8b 85       	ldd	r24, Y+11	; 0x0b
     e52:	9c 85       	ldd	r25, Y+12	; 0x0c
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	91 05       	cpc	r25, r1
     e58:	b1 f0       	breq	.+44     	; 0xe86 <PORT_PortEnumSetPinMode+0xb2>
     e5a:	2b 85       	ldd	r18, Y+11	; 0x0b
     e5c:	3c 85       	ldd	r19, Y+12	; 0x0c
     e5e:	22 30       	cpi	r18, 0x02	; 2
     e60:	31 05       	cpc	r19, r1
     e62:	2c f4       	brge	.+10     	; 0xe6e <PORT_PortEnumSetPinMode+0x9a>
     e64:	8b 85       	ldd	r24, Y+11	; 0x0b
     e66:	9c 85       	ldd	r25, Y+12	; 0x0c
     e68:	00 97       	sbiw	r24, 0x00	; 0
     e6a:	09 f1       	breq	.+66     	; 0xeae <PORT_PortEnumSetPinMode+0xda>
     e6c:	b6 c1       	rjmp	.+876    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
     e6e:	2b 85       	ldd	r18, Y+11	; 0x0b
     e70:	3c 85       	ldd	r19, Y+12	; 0x0c
     e72:	22 30       	cpi	r18, 0x02	; 2
     e74:	31 05       	cpc	r19, r1
     e76:	81 f1       	breq	.+96     	; 0xed8 <PORT_PortEnumSetPinMode+0x104>
     e78:	8b 85       	ldd	r24, Y+11	; 0x0b
     e7a:	9c 85       	ldd	r25, Y+12	; 0x0c
     e7c:	83 30       	cpi	r24, 0x03	; 3
     e7e:	91 05       	cpc	r25, r1
     e80:	09 f4       	brne	.+2      	; 0xe84 <PORT_PortEnumSetPinMode+0xb0>
     e82:	3e c0       	rjmp	.+124    	; 0xf00 <PORT_PortEnumSetPinMode+0x12c>
     e84:	aa c1       	rjmp	.+852    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
     e86:	ab e3       	ldi	r26, 0x3B	; 59
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	eb e3       	ldi	r30, 0x3B	; 59
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <PORT_PortEnumSetPinMode+0xd0>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <PORT_PortEnumSetPinMode+0xcc>
     ea8:	84 2b       	or	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	96 c1       	rjmp	.+812    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
     eae:	ab e3       	ldi	r26, 0x3B	; 59
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	eb e3       	ldi	r30, 0x3B	; 59
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <PORT_PortEnumSetPinMode+0xf8>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <PORT_PortEnumSetPinMode+0xf4>
     ed0:	80 95       	com	r24
     ed2:	84 23       	and	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	81 c1       	rjmp	.+770    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
     ed8:	ab e3       	ldi	r26, 0x3B	; 59
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	eb e3       	ldi	r30, 0x3B	; 59
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <PORT_PortEnumSetPinMode+0x122>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <PORT_PortEnumSetPinMode+0x11e>
     efa:	84 2b       	or	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	6d c1       	rjmp	.+730    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
     f00:	ab e3       	ldi	r26, 0x3B	; 59
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	eb e3       	ldi	r30, 0x3B	; 59
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <PORT_PortEnumSetPinMode+0x14a>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <PORT_PortEnumSetPinMode+0x146>
     f22:	80 95       	com	r24
     f24:	84 23       	and	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	58 c1       	rjmp	.+688    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTB:  // PORTB
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	3a 87       	std	Y+10, r19	; 0x0a
     f32:	29 87       	std	Y+9, r18	; 0x09
     f34:	89 85       	ldd	r24, Y+9	; 0x09
     f36:	9a 85       	ldd	r25, Y+10	; 0x0a
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	91 05       	cpc	r25, r1
     f3c:	b1 f0       	breq	.+44     	; 0xf6a <PORT_PortEnumSetPinMode+0x196>
     f3e:	29 85       	ldd	r18, Y+9	; 0x09
     f40:	3a 85       	ldd	r19, Y+10	; 0x0a
     f42:	22 30       	cpi	r18, 0x02	; 2
     f44:	31 05       	cpc	r19, r1
     f46:	2c f4       	brge	.+10     	; 0xf52 <PORT_PortEnumSetPinMode+0x17e>
     f48:	89 85       	ldd	r24, Y+9	; 0x09
     f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	09 f1       	breq	.+66     	; 0xf92 <PORT_PortEnumSetPinMode+0x1be>
     f50:	44 c1       	rjmp	.+648    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
     f52:	29 85       	ldd	r18, Y+9	; 0x09
     f54:	3a 85       	ldd	r19, Y+10	; 0x0a
     f56:	22 30       	cpi	r18, 0x02	; 2
     f58:	31 05       	cpc	r19, r1
     f5a:	81 f1       	breq	.+96     	; 0xfbc <PORT_PortEnumSetPinMode+0x1e8>
     f5c:	89 85       	ldd	r24, Y+9	; 0x09
     f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f60:	83 30       	cpi	r24, 0x03	; 3
     f62:	91 05       	cpc	r25, r1
     f64:	09 f4       	brne	.+2      	; 0xf68 <PORT_PortEnumSetPinMode+0x194>
     f66:	3e c0       	rjmp	.+124    	; 0xfe4 <PORT_PortEnumSetPinMode+0x210>
     f68:	38 c1       	rjmp	.+624    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
     f6a:	a8 e3       	ldi	r26, 0x38	; 56
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e8 e3       	ldi	r30, 0x38	; 56
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <PORT_PortEnumSetPinMode+0x1b4>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <PORT_PortEnumSetPinMode+0x1b0>
     f8c:	84 2b       	or	r24, r20
     f8e:	8c 93       	st	X, r24
     f90:	24 c1       	rjmp	.+584    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
     f92:	a8 e3       	ldi	r26, 0x38	; 56
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e8 e3       	ldi	r30, 0x38	; 56
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <PORT_PortEnumSetPinMode+0x1dc>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <PORT_PortEnumSetPinMode+0x1d8>
     fb4:	80 95       	com	r24
     fb6:	84 23       	and	r24, r20
     fb8:	8c 93       	st	X, r24
     fba:	0f c1       	rjmp	.+542    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
     fbc:	a8 e3       	ldi	r26, 0x38	; 56
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e8 e3       	ldi	r30, 0x38	; 56
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	48 2f       	mov	r20, r24
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 2e       	mov	r0, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <PORT_PortEnumSetPinMode+0x206>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	0a 94       	dec	r0
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <PORT_PortEnumSetPinMode+0x202>
     fde:	84 2b       	or	r24, r20
     fe0:	8c 93       	st	X, r24
     fe2:	fb c0       	rjmp	.+502    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
     fe4:	a8 e3       	ldi	r26, 0x38	; 56
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e8 e3       	ldi	r30, 0x38	; 56
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <PORT_PortEnumSetPinMode+0x22e>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <PORT_PortEnumSetPinMode+0x22a>
    1006:	80 95       	com	r24
    1008:	84 23       	and	r24, r20
    100a:	8c 93       	st	X, r24
    100c:	e6 c0       	rjmp	.+460    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTC:  // PORTC
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    100e:	8c 81       	ldd	r24, Y+4	; 0x04
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	38 87       	std	Y+8, r19	; 0x08
    1016:	2f 83       	std	Y+7, r18	; 0x07
    1018:	8f 81       	ldd	r24, Y+7	; 0x07
    101a:	98 85       	ldd	r25, Y+8	; 0x08
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	91 05       	cpc	r25, r1
    1020:	b1 f0       	breq	.+44     	; 0x104e <PORT_PortEnumSetPinMode+0x27a>
    1022:	2f 81       	ldd	r18, Y+7	; 0x07
    1024:	38 85       	ldd	r19, Y+8	; 0x08
    1026:	22 30       	cpi	r18, 0x02	; 2
    1028:	31 05       	cpc	r19, r1
    102a:	2c f4       	brge	.+10     	; 0x1036 <PORT_PortEnumSetPinMode+0x262>
    102c:	8f 81       	ldd	r24, Y+7	; 0x07
    102e:	98 85       	ldd	r25, Y+8	; 0x08
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	09 f1       	breq	.+66     	; 0x1076 <PORT_PortEnumSetPinMode+0x2a2>
    1034:	d2 c0       	rjmp	.+420    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
    1036:	2f 81       	ldd	r18, Y+7	; 0x07
    1038:	38 85       	ldd	r19, Y+8	; 0x08
    103a:	22 30       	cpi	r18, 0x02	; 2
    103c:	31 05       	cpc	r19, r1
    103e:	81 f1       	breq	.+96     	; 0x10a0 <PORT_PortEnumSetPinMode+0x2cc>
    1040:	8f 81       	ldd	r24, Y+7	; 0x07
    1042:	98 85       	ldd	r25, Y+8	; 0x08
    1044:	83 30       	cpi	r24, 0x03	; 3
    1046:	91 05       	cpc	r25, r1
    1048:	09 f4       	brne	.+2      	; 0x104c <PORT_PortEnumSetPinMode+0x278>
    104a:	3e c0       	rjmp	.+124    	; 0x10c8 <PORT_PortEnumSetPinMode+0x2f4>
    104c:	c6 c0       	rjmp	.+396    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    104e:	a5 e3       	ldi	r26, 0x35	; 53
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e5 e3       	ldi	r30, 0x35	; 53
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <PORT_PortEnumSetPinMode+0x298>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <PORT_PortEnumSetPinMode+0x294>
    1070:	84 2b       	or	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	b2 c0       	rjmp	.+356    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    1076:	a5 e3       	ldi	r26, 0x35	; 53
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e5 e3       	ldi	r30, 0x35	; 53
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <PORT_PortEnumSetPinMode+0x2c0>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <PORT_PortEnumSetPinMode+0x2bc>
    1098:	80 95       	com	r24
    109a:	84 23       	and	r24, r20
    109c:	8c 93       	st	X, r24
    109e:	9d c0       	rjmp	.+314    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    10a0:	a5 e3       	ldi	r26, 0x35	; 53
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e5 e3       	ldi	r30, 0x35	; 53
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <PORT_PortEnumSetPinMode+0x2ea>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <PORT_PortEnumSetPinMode+0x2e6>
    10c2:	84 2b       	or	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	89 c0       	rjmp	.+274    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    10c8:	a5 e3       	ldi	r26, 0x35	; 53
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e5 e3       	ldi	r30, 0x35	; 53
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <PORT_PortEnumSetPinMode+0x312>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <PORT_PortEnumSetPinMode+0x30e>
    10ea:	80 95       	com	r24
    10ec:	84 23       	and	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	74 c0       	rjmp	.+232    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTD:  // PORTD
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	3e 83       	std	Y+6, r19	; 0x06
    10fa:	2d 83       	std	Y+5, r18	; 0x05
    10fc:	8d 81       	ldd	r24, Y+5	; 0x05
    10fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	91 05       	cpc	r25, r1
    1104:	b1 f0       	breq	.+44     	; 0x1132 <PORT_PortEnumSetPinMode+0x35e>
    1106:	2d 81       	ldd	r18, Y+5	; 0x05
    1108:	3e 81       	ldd	r19, Y+6	; 0x06
    110a:	22 30       	cpi	r18, 0x02	; 2
    110c:	31 05       	cpc	r19, r1
    110e:	2c f4       	brge	.+10     	; 0x111a <PORT_PortEnumSetPinMode+0x346>
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	09 f1       	breq	.+66     	; 0x115a <PORT_PortEnumSetPinMode+0x386>
    1118:	60 c0       	rjmp	.+192    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
    111a:	2d 81       	ldd	r18, Y+5	; 0x05
    111c:	3e 81       	ldd	r19, Y+6	; 0x06
    111e:	22 30       	cpi	r18, 0x02	; 2
    1120:	31 05       	cpc	r19, r1
    1122:	81 f1       	breq	.+96     	; 0x1184 <PORT_PortEnumSetPinMode+0x3b0>
    1124:	8d 81       	ldd	r24, Y+5	; 0x05
    1126:	9e 81       	ldd	r25, Y+6	; 0x06
    1128:	83 30       	cpi	r24, 0x03	; 3
    112a:	91 05       	cpc	r25, r1
    112c:	09 f4       	brne	.+2      	; 0x1130 <PORT_PortEnumSetPinMode+0x35c>
    112e:	3e c0       	rjmp	.+124    	; 0x11ac <PORT_PortEnumSetPinMode+0x3d8>
    1130:	54 c0       	rjmp	.+168    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    1132:	a2 e3       	ldi	r26, 0x32	; 50
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e2 e3       	ldi	r30, 0x32	; 50
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	48 2f       	mov	r20, r24
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	02 2e       	mov	r0, r18
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <PORT_PortEnumSetPinMode+0x37c>
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	0a 94       	dec	r0
    1152:	e2 f7       	brpl	.-8      	; 0x114c <PORT_PortEnumSetPinMode+0x378>
    1154:	84 2b       	or	r24, r20
    1156:	8c 93       	st	X, r24
    1158:	40 c0       	rjmp	.+128    	; 0x11da <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    115a:	a2 e3       	ldi	r26, 0x32	; 50
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e2 e3       	ldi	r30, 0x32	; 50
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 2e       	mov	r0, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <PORT_PortEnumSetPinMode+0x3a4>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	0a 94       	dec	r0
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <PORT_PortEnumSetPinMode+0x3a0>
    117c:	80 95       	com	r24
    117e:	84 23       	and	r24, r20
    1180:	8c 93       	st	X, r24
    1182:	2b c0       	rjmp	.+86     	; 0x11da <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    1184:	a2 e3       	ldi	r26, 0x32	; 50
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e2 e3       	ldi	r30, 0x32	; 50
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	48 2f       	mov	r20, r24
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	02 2e       	mov	r0, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <PORT_PortEnumSetPinMode+0x3ce>
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	0a 94       	dec	r0
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <PORT_PortEnumSetPinMode+0x3ca>
    11a6:	84 2b       	or	r24, r20
    11a8:	8c 93       	st	X, r24
    11aa:	17 c0       	rjmp	.+46     	; 0x11da <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    11ac:	a2 e3       	ldi	r26, 0x32	; 50
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e2 e3       	ldi	r30, 0x32	; 50
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	48 2f       	mov	r20, r24
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 2e       	mov	r0, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <PORT_PortEnumSetPinMode+0x3f6>
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	0a 94       	dec	r0
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <PORT_PortEnumSetPinMode+0x3f2>
    11ce:	80 95       	com	r24
    11d0:	84 23       	and	r24, r20
    11d2:	8c 93       	st	X, r24
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <PORT_PortEnumSetPinMode+0x406>
			break;
		}
	}
	else
	{
		local_PortEnumErrorState = PORT_MODE_NOK;
    11d6:	83 e0       	ldi	r24, 0x03	; 3
    11d8:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_PortEnumErrorState;
    11da:	89 81       	ldd	r24, Y+1	; 0x01
}
    11dc:	2e 96       	adiw	r28, 0x0e	; 14
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <GIE_voidInt>:

#include "../Include/GIE_interface.h"
#include "../Include/GIE_private.h"

void GIE_voidInt(u8 copy_u8State)
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <GIE_voidInt+0x6>
    11f4:	0f 92       	push	r0
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	89 83       	std	Y+1, r24	; 0x01
    switch(copy_u8State)
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	3b 83       	std	Y+3, r19	; 0x03
    1204:	2a 83       	std	Y+2, r18	; 0x02
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	9b 81       	ldd	r25, Y+3	; 0x03
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	31 f0       	breq	.+12     	; 0x121a <GIE_voidInt+0x2c>
    120e:	2a 81       	ldd	r18, Y+2	; 0x02
    1210:	3b 81       	ldd	r19, Y+3	; 0x03
    1212:	21 30       	cpi	r18, 0x01	; 1
    1214:	31 05       	cpc	r19, r1
    1216:	49 f0       	breq	.+18     	; 0x122a <GIE_voidInt+0x3c>
    1218:	0f c0       	rjmp	.+30     	; 0x1238 <GIE_voidInt+0x4a>
    {
        case GIE_u8_ENABLE :  SET_BIT(GIE_u8_SREG,7);       break;
    121a:	af e5       	ldi	r26, 0x5F	; 95
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	ef e5       	ldi	r30, 0x5F	; 95
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	80 68       	ori	r24, 0x80	; 128
    1226:	8c 93       	st	X, r24
    1228:	07 c0       	rjmp	.+14     	; 0x1238 <GIE_voidInt+0x4a>
        case GIE_u8_DISABLE:  CLR_BIT(GIE_u8_SREG,7);       break;
    122a:	af e5       	ldi	r26, 0x5F	; 95
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	ef e5       	ldi	r30, 0x5F	; 95
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	8f 77       	andi	r24, 0x7F	; 127
    1236:	8c 93       	st	X, r24
    }
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <EXTI_EXTIEnumEnable>:

/* Array of Pointer to Function */
static void (*EXTI_Apf[3])(void);

EXTIEnum EXTI_EXTIEnumEnable(u8 copy_u8IntIndex,u8 copy_u8IntMode)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	2b 97       	sbiw	r28, 0x0b	; 11
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	8a 83       	std	Y+2, r24	; 0x02
    125a:	6b 83       	std	Y+3, r22	; 0x03
    EXTIEnum local_EXTIEnumErrorState = EXTI_Enable_OK;
    125c:	19 82       	std	Y+1, r1	; 0x01
    if((copy_u8IntIndex <= EXTI_u8_INT_2) && (copy_u8IntMode <= EXTI_u8_ON_CHANGE))
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	83 30       	cpi	r24, 0x03	; 3
    1262:	08 f0       	brcs	.+2      	; 0x1266 <EXTI_EXTIEnumEnable+0x22>
    1264:	07 c1       	rjmp	.+526    	; 0x1474 <EXTI_EXTIEnumEnable+0x230>
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	84 30       	cpi	r24, 0x04	; 4
    126a:	08 f0       	brcs	.+2      	; 0x126e <EXTI_EXTIEnumEnable+0x2a>
    126c:	03 c1       	rjmp	.+518    	; 0x1474 <EXTI_EXTIEnumEnable+0x230>
    {
        /* choosing which interrupt needed */
        switch(copy_u8IntIndex)
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3b 87       	std	Y+11, r19	; 0x0b
    1276:	2a 87       	std	Y+10, r18	; 0x0a
    1278:	8a 85       	ldd	r24, Y+10	; 0x0a
    127a:	9b 85       	ldd	r25, Y+11	; 0x0b
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	91 05       	cpc	r25, r1
    1280:	09 f4       	brne	.+2      	; 0x1284 <EXTI_EXTIEnumEnable+0x40>
    1282:	6d c0       	rjmp	.+218    	; 0x135e <EXTI_EXTIEnumEnable+0x11a>
    1284:	2a 85       	ldd	r18, Y+10	; 0x0a
    1286:	3b 85       	ldd	r19, Y+11	; 0x0b
    1288:	22 30       	cpi	r18, 0x02	; 2
    128a:	31 05       	cpc	r19, r1
    128c:	09 f4       	brne	.+2      	; 0x1290 <EXTI_EXTIEnumEnable+0x4c>
    128e:	c9 c0       	rjmp	.+402    	; 0x1422 <EXTI_EXTIEnumEnable+0x1de>
    1290:	8a 85       	ldd	r24, Y+10	; 0x0a
    1292:	9b 85       	ldd	r25, Y+11	; 0x0b
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	09 f0       	breq	.+2      	; 0x129a <EXTI_EXTIEnumEnable+0x56>
    1298:	ef c0       	rjmp	.+478    	; 0x1478 <EXTI_EXTIEnumEnable+0x234>
        {
            case EXTI_u8_INT_0:  // Interrupt 0
            /* choosing which mode needed */
            switch(copy_u8IntMode)
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	39 87       	std	Y+9, r19	; 0x09
    12a2:	28 87       	std	Y+8, r18	; 0x08
    12a4:	88 85       	ldd	r24, Y+8	; 0x08
    12a6:	99 85       	ldd	r25, Y+9	; 0x09
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	91 05       	cpc	r25, r1
    12ac:	21 f1       	breq	.+72     	; 0x12f6 <EXTI_EXTIEnumEnable+0xb2>
    12ae:	28 85       	ldd	r18, Y+8	; 0x08
    12b0:	39 85       	ldd	r19, Y+9	; 0x09
    12b2:	22 30       	cpi	r18, 0x02	; 2
    12b4:	31 05       	cpc	r19, r1
    12b6:	2c f4       	brge	.+10     	; 0x12c2 <EXTI_EXTIEnumEnable+0x7e>
    12b8:	88 85       	ldd	r24, Y+8	; 0x08
    12ba:	99 85       	ldd	r25, Y+9	; 0x09
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	61 f0       	breq	.+24     	; 0x12d8 <EXTI_EXTIEnumEnable+0x94>
    12c0:	46 c0       	rjmp	.+140    	; 0x134e <EXTI_EXTIEnumEnable+0x10a>
    12c2:	28 85       	ldd	r18, Y+8	; 0x08
    12c4:	39 85       	ldd	r19, Y+9	; 0x09
    12c6:	22 30       	cpi	r18, 0x02	; 2
    12c8:	31 05       	cpc	r19, r1
    12ca:	21 f1       	breq	.+72     	; 0x1314 <EXTI_EXTIEnumEnable+0xd0>
    12cc:	88 85       	ldd	r24, Y+8	; 0x08
    12ce:	99 85       	ldd	r25, Y+9	; 0x09
    12d0:	83 30       	cpi	r24, 0x03	; 3
    12d2:	91 05       	cpc	r25, r1
    12d4:	71 f1       	breq	.+92     	; 0x1332 <EXTI_EXTIEnumEnable+0xee>
    12d6:	3b c0       	rjmp	.+118    	; 0x134e <EXTI_EXTIEnumEnable+0x10a>
            {
                case EXTI_u8_RISING   :  // in case rising edge
                SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC00_BIT);
    12d8:	a5 e5       	ldi	r26, 0x55	; 85
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e5 e5       	ldi	r30, 0x55	; 85
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	81 60       	ori	r24, 0x01	; 1
    12e4:	8c 93       	st	X, r24
                SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC01_BIT);        break;
    12e6:	a5 e5       	ldi	r26, 0x55	; 85
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e5 e5       	ldi	r30, 0x55	; 85
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	82 60       	ori	r24, 0x02	; 2
    12f2:	8c 93       	st	X, r24
    12f4:	2c c0       	rjmp	.+88     	; 0x134e <EXTI_EXTIEnumEnable+0x10a>
                case EXTI_u8_FALLING  : // in case falling edge
                CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC00_BIT);
    12f6:	a5 e5       	ldi	r26, 0x55	; 85
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e5 e5       	ldi	r30, 0x55	; 85
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	8e 7f       	andi	r24, 0xFE	; 254
    1302:	8c 93       	st	X, r24
                SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC01_BIT);        break;
    1304:	a5 e5       	ldi	r26, 0x55	; 85
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e5 e5       	ldi	r30, 0x55	; 85
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	82 60       	ori	r24, 0x02	; 2
    1310:	8c 93       	st	X, r24
    1312:	1d c0       	rjmp	.+58     	; 0x134e <EXTI_EXTIEnumEnable+0x10a>
                case EXTI_u8_LOW_LEVEL: // in case low level
                CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC00_BIT);
    1314:	a5 e5       	ldi	r26, 0x55	; 85
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e5 e5       	ldi	r30, 0x55	; 85
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	8e 7f       	andi	r24, 0xFE	; 254
    1320:	8c 93       	st	X, r24
                CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC01_BIT);        break;
    1322:	a5 e5       	ldi	r26, 0x55	; 85
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e5 e5       	ldi	r30, 0x55	; 85
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	8d 7f       	andi	r24, 0xFD	; 253
    132e:	8c 93       	st	X, r24
    1330:	0e c0       	rjmp	.+28     	; 0x134e <EXTI_EXTIEnumEnable+0x10a>
                case EXTI_u8_ON_CHANGE: // in case any logical change
                SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC00_BIT);
    1332:	a5 e5       	ldi	r26, 0x55	; 85
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e5 e5       	ldi	r30, 0x55	; 85
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	81 60       	ori	r24, 0x01	; 1
    133e:	8c 93       	st	X, r24
                CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC01_BIT);        break;
    1340:	a5 e5       	ldi	r26, 0x55	; 85
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e5 e5       	ldi	r30, 0x55	; 85
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	8d 7f       	andi	r24, 0xFD	; 253
    134c:	8c 93       	st	X, r24
            }
            /* enable EXTI0 */
            SET_BIT(EXTI_u8_GICR_REG,EXTI_u8_INT0_BIT);
    134e:	ab e5       	ldi	r26, 0x5B	; 91
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	eb e5       	ldi	r30, 0x5B	; 91
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	80 64       	ori	r24, 0x40	; 64
    135a:	8c 93       	st	X, r24
    135c:	8d c0       	rjmp	.+282    	; 0x1478 <EXTI_EXTIEnumEnable+0x234>
            break;
            case EXTI_u8_INT_1:  // Interrupt 1
            switch(copy_u8IntMode)
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	3f 83       	std	Y+7, r19	; 0x07
    1366:	2e 83       	std	Y+6, r18	; 0x06
    1368:	8e 81       	ldd	r24, Y+6	; 0x06
    136a:	9f 81       	ldd	r25, Y+7	; 0x07
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	91 05       	cpc	r25, r1
    1370:	21 f1       	breq	.+72     	; 0x13ba <EXTI_EXTIEnumEnable+0x176>
    1372:	2e 81       	ldd	r18, Y+6	; 0x06
    1374:	3f 81       	ldd	r19, Y+7	; 0x07
    1376:	22 30       	cpi	r18, 0x02	; 2
    1378:	31 05       	cpc	r19, r1
    137a:	2c f4       	brge	.+10     	; 0x1386 <EXTI_EXTIEnumEnable+0x142>
    137c:	8e 81       	ldd	r24, Y+6	; 0x06
    137e:	9f 81       	ldd	r25, Y+7	; 0x07
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	61 f0       	breq	.+24     	; 0x139c <EXTI_EXTIEnumEnable+0x158>
    1384:	46 c0       	rjmp	.+140    	; 0x1412 <EXTI_EXTIEnumEnable+0x1ce>
    1386:	2e 81       	ldd	r18, Y+6	; 0x06
    1388:	3f 81       	ldd	r19, Y+7	; 0x07
    138a:	22 30       	cpi	r18, 0x02	; 2
    138c:	31 05       	cpc	r19, r1
    138e:	21 f1       	breq	.+72     	; 0x13d8 <EXTI_EXTIEnumEnable+0x194>
    1390:	8e 81       	ldd	r24, Y+6	; 0x06
    1392:	9f 81       	ldd	r25, Y+7	; 0x07
    1394:	83 30       	cpi	r24, 0x03	; 3
    1396:	91 05       	cpc	r25, r1
    1398:	71 f1       	breq	.+92     	; 0x13f6 <EXTI_EXTIEnumEnable+0x1b2>
    139a:	3b c0       	rjmp	.+118    	; 0x1412 <EXTI_EXTIEnumEnable+0x1ce>
            {
                case EXTI_u8_RISING   : // in case rising edge
                SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC10_BIT);
    139c:	a5 e5       	ldi	r26, 0x55	; 85
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e5 e5       	ldi	r30, 0x55	; 85
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	84 60       	ori	r24, 0x04	; 4
    13a8:	8c 93       	st	X, r24
                SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC11_BIT);        break;
    13aa:	a5 e5       	ldi	r26, 0x55	; 85
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e5 e5       	ldi	r30, 0x55	; 85
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	88 60       	ori	r24, 0x08	; 8
    13b6:	8c 93       	st	X, r24
    13b8:	2c c0       	rjmp	.+88     	; 0x1412 <EXTI_EXTIEnumEnable+0x1ce>
                case EXTI_u8_FALLING  : // in case falling edge
                CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC10_BIT);
    13ba:	a5 e5       	ldi	r26, 0x55	; 85
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e5 e5       	ldi	r30, 0x55	; 85
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	8b 7f       	andi	r24, 0xFB	; 251
    13c6:	8c 93       	st	X, r24
                SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC11_BIT);        break;
    13c8:	a5 e5       	ldi	r26, 0x55	; 85
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e5 e5       	ldi	r30, 0x55	; 85
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	88 60       	ori	r24, 0x08	; 8
    13d4:	8c 93       	st	X, r24
    13d6:	1d c0       	rjmp	.+58     	; 0x1412 <EXTI_EXTIEnumEnable+0x1ce>
                case EXTI_u8_LOW_LEVEL: // in case low level
                CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC10_BIT);
    13d8:	a5 e5       	ldi	r26, 0x55	; 85
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e5 e5       	ldi	r30, 0x55	; 85
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	8b 7f       	andi	r24, 0xFB	; 251
    13e4:	8c 93       	st	X, r24
                CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC11_BIT);        break;
    13e6:	a5 e5       	ldi	r26, 0x55	; 85
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e5 e5       	ldi	r30, 0x55	; 85
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	87 7f       	andi	r24, 0xF7	; 247
    13f2:	8c 93       	st	X, r24
    13f4:	0e c0       	rjmp	.+28     	; 0x1412 <EXTI_EXTIEnumEnable+0x1ce>
                case EXTI_u8_ON_CHANGE: // in case any logical change
                SET_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC10_BIT);
    13f6:	a5 e5       	ldi	r26, 0x55	; 85
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e5 e5       	ldi	r30, 0x55	; 85
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	84 60       	ori	r24, 0x04	; 4
    1402:	8c 93       	st	X, r24
                CLR_BIT(EXTI_u8_MCUCR_REG,EXTI_u8_ISC11_BIT);        break;
    1404:	a5 e5       	ldi	r26, 0x55	; 85
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e5 e5       	ldi	r30, 0x55	; 85
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	87 7f       	andi	r24, 0xF7	; 247
    1410:	8c 93       	st	X, r24
            }
            /* enable EXTI1 */
            SET_BIT(EXTI_u8_GICR_REG,EXTI_u8_INT1_BIT);
    1412:	ab e5       	ldi	r26, 0x5B	; 91
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	eb e5       	ldi	r30, 0x5B	; 91
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	80 68       	ori	r24, 0x80	; 128
    141e:	8c 93       	st	X, r24
    1420:	2b c0       	rjmp	.+86     	; 0x1478 <EXTI_EXTIEnumEnable+0x234>
            break;
            case EXTI_u8_INT_2:  // Interrupt 2
            switch(copy_u8IntMode)
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	3d 83       	std	Y+5, r19	; 0x05
    142a:	2c 83       	std	Y+4, r18	; 0x04
    142c:	8c 81       	ldd	r24, Y+4	; 0x04
    142e:	9d 81       	ldd	r25, Y+5	; 0x05
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	31 f0       	breq	.+12     	; 0x1440 <EXTI_EXTIEnumEnable+0x1fc>
    1434:	2c 81       	ldd	r18, Y+4	; 0x04
    1436:	3d 81       	ldd	r19, Y+5	; 0x05
    1438:	21 30       	cpi	r18, 0x01	; 1
    143a:	31 05       	cpc	r19, r1
    143c:	49 f0       	breq	.+18     	; 0x1450 <EXTI_EXTIEnumEnable+0x20c>
    143e:	10 c0       	rjmp	.+32     	; 0x1460 <EXTI_EXTIEnumEnable+0x21c>
            {
                case EXTI_u8_RISING   : // in case rising edge
                SET_BIT(EXTI_u8_MCUCSR_REG,EXTI_u8_ISC2_BIT);        break;
    1440:	a4 e5       	ldi	r26, 0x54	; 84
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e4 e5       	ldi	r30, 0x54	; 84
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	80 64       	ori	r24, 0x40	; 64
    144c:	8c 93       	st	X, r24
    144e:	0a c0       	rjmp	.+20     	; 0x1464 <EXTI_EXTIEnumEnable+0x220>
                case EXTI_u8_FALLING  : // in case falling edge
                CLR_BIT(EXTI_u8_MCUCSR_REG,EXTI_u8_ISC2_BIT);        break;
    1450:	a4 e5       	ldi	r26, 0x54	; 84
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e4 e5       	ldi	r30, 0x54	; 84
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	8f 7b       	andi	r24, 0xBF	; 191
    145c:	8c 93       	st	X, r24
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <EXTI_EXTIEnumEnable+0x220>
                default: local_EXTIEnumErrorState = EXTI_Enable_NOK; break;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	89 83       	std	Y+1, r24	; 0x01
            }
            /* enable EXTI2 */
            SET_BIT(EXTI_u8_GICR_REG,EXTI_u8_INT2_BIT);
    1464:	ab e5       	ldi	r26, 0x5B	; 91
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	eb e5       	ldi	r30, 0x5B	; 91
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	80 62       	ori	r24, 0x20	; 32
    1470:	8c 93       	st	X, r24
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <EXTI_EXTIEnumEnable+0x234>
            break;
        }
    }
    else
    {
        local_EXTIEnumErrorState = EXTI_Enable_NOK;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_EXTIEnumErrorState;
    1478:	89 81       	ldd	r24, Y+1	; 0x01
}
    147a:	2b 96       	adiw	r28, 0x0b	; 11
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <EXTI_EXTIEnumDisable>:

EXTIEnum EXTI_EXTIEnumDisable(u8 copy_u8IntIndex)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <EXTI_EXTIEnumDisable+0x6>
    1492:	00 d0       	rcall	.+0      	; 0x1494 <EXTI_EXTIEnumDisable+0x8>
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	8a 83       	std	Y+2, r24	; 0x02
    EXTIEnum local_EXTIEnumErrorState = EXTI_Disable_OK;
    149a:	82 e0       	ldi	r24, 0x02	; 2
    149c:	89 83       	std	Y+1, r24	; 0x01
    if(copy_u8IntIndex <= EXTI_u8_INT_2)
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	83 30       	cpi	r24, 0x03	; 3
    14a2:	58 f5       	brcc	.+86     	; 0x14fa <EXTI_EXTIEnumDisable+0x6e>
    {
        switch(copy_u8IntIndex)
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	3c 83       	std	Y+4, r19	; 0x04
    14ac:	2b 83       	std	Y+3, r18	; 0x03
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	9c 81       	ldd	r25, Y+4	; 0x04
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	91 05       	cpc	r25, r1
    14b6:	89 f0       	breq	.+34     	; 0x14da <EXTI_EXTIEnumDisable+0x4e>
    14b8:	2b 81       	ldd	r18, Y+3	; 0x03
    14ba:	3c 81       	ldd	r19, Y+4	; 0x04
    14bc:	22 30       	cpi	r18, 0x02	; 2
    14be:	31 05       	cpc	r19, r1
    14c0:	a1 f0       	breq	.+40     	; 0x14ea <EXTI_EXTIEnumDisable+0x5e>
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	d1 f4       	brne	.+52     	; 0x14fe <EXTI_EXTIEnumDisable+0x72>
        {
            case EXTI_u8_INT_0:
            /* disable EXTI0 */
            CLR_BIT(EXTI_u8_GICR_REG,EXTI_u8_INT0_BIT);       break;
    14ca:	ab e5       	ldi	r26, 0x5B	; 91
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	eb e5       	ldi	r30, 0x5B	; 91
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	8f 7b       	andi	r24, 0xBF	; 191
    14d6:	8c 93       	st	X, r24
    14d8:	12 c0       	rjmp	.+36     	; 0x14fe <EXTI_EXTIEnumDisable+0x72>
            case EXTI_u8_INT_1:
            /* disable EXTI1 */
            CLR_BIT(EXTI_u8_GICR_REG,EXTI_u8_INT1_BIT);       break;
    14da:	ab e5       	ldi	r26, 0x5B	; 91
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	eb e5       	ldi	r30, 0x5B	; 91
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	8f 77       	andi	r24, 0x7F	; 127
    14e6:	8c 93       	st	X, r24
    14e8:	0a c0       	rjmp	.+20     	; 0x14fe <EXTI_EXTIEnumDisable+0x72>
            case EXTI_u8_INT_2:
            /* disable EXTI2 */
            CLR_BIT(EXTI_u8_GICR_REG,EXTI_u8_INT2_BIT);       break;
    14ea:	ab e5       	ldi	r26, 0x5B	; 91
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	eb e5       	ldi	r30, 0x5B	; 91
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	8f 7d       	andi	r24, 0xDF	; 223
    14f6:	8c 93       	st	X, r24
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <EXTI_EXTIEnumDisable+0x72>
        }
    }
    else
    {
        local_EXTIEnumErrorState = EXTI_Disable_NOK;
    14fa:	83 e0       	ldi	r24, 0x03	; 3
    14fc:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_EXTIEnumErrorState;
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <EXTI_EXTIEnumSetCallback>:

EXTIEnum EXTI_EXTIEnumSetCallback(u8 copy_u8IntIndex,void (*copy_pf)(void))
{
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	00 d0       	rcall	.+0      	; 0x1514 <EXTI_EXTIEnumSetCallback+0x6>
    1514:	00 d0       	rcall	.+0      	; 0x1516 <EXTI_EXTIEnumSetCallback+0x8>
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	8a 83       	std	Y+2, r24	; 0x02
    151c:	7c 83       	std	Y+4, r23	; 0x04
    151e:	6b 83       	std	Y+3, r22	; 0x03
    EXTIEnum local_EXTIEnumErrorState = EXTI_Disable_OK;
    1520:	82 e0       	ldi	r24, 0x02	; 2
    1522:	89 83       	std	Y+1, r24	; 0x01
    if((copy_u8IntIndex <= EXTI_u8_INT_2) && (copy_pf != NULL))
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	83 30       	cpi	r24, 0x03	; 3
    1528:	88 f4       	brcc	.+34     	; 0x154c <EXTI_EXTIEnumSetCallback+0x3e>
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	69 f0       	breq	.+26     	; 0x154c <EXTI_EXTIEnumSetCallback+0x3e>
    {
        /* update the global pointer to function */
        EXTI_Apf[copy_u8IntIndex] = copy_pf;
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	fc 01       	movw	r30, r24
    153e:	e8 58       	subi	r30, 0x88	; 136
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	9c 81       	ldd	r25, Y+4	; 0x04
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	80 83       	st	Z, r24
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <EXTI_EXTIEnumSetCallback+0x42>
    }
    else
    {
        local_EXTIEnumErrorState = EXTI_Disable_NOK;
    154c:	83 e0       	ldi	r24, 0x03	; 3
    154e:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_EXTIEnumErrorState;
    1550:	89 81       	ldd	r24, Y+1	; 0x01
}
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <__vector_1>:

/* ISR function for EXTI0 */
void __vector_1(void)     __attribute__((signal));
void __vector_1(void)
{
    1560:	1f 92       	push	r1
    1562:	0f 92       	push	r0
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	0f 92       	push	r0
    1568:	11 24       	eor	r1, r1
    156a:	2f 93       	push	r18
    156c:	3f 93       	push	r19
    156e:	4f 93       	push	r20
    1570:	5f 93       	push	r21
    1572:	6f 93       	push	r22
    1574:	7f 93       	push	r23
    1576:	8f 93       	push	r24
    1578:	9f 93       	push	r25
    157a:	af 93       	push	r26
    157c:	bf 93       	push	r27
    157e:	ef 93       	push	r30
    1580:	ff 93       	push	r31
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_Apf[EXTI_u8_INT_0] != NULL)
    158a:	80 91 78 00 	lds	r24, 0x0078
    158e:	90 91 79 00 	lds	r25, 0x0079
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	29 f0       	breq	.+10     	; 0x15a0 <__vector_1+0x40>
    {
        /* call the global pointer to function */
        EXTI_Apf[EXTI_u8_INT_0]();
    1596:	e0 91 78 00 	lds	r30, 0x0078
    159a:	f0 91 79 00 	lds	r31, 0x0079
    159e:	09 95       	icall
    }
}
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	ff 91       	pop	r31
    15a6:	ef 91       	pop	r30
    15a8:	bf 91       	pop	r27
    15aa:	af 91       	pop	r26
    15ac:	9f 91       	pop	r25
    15ae:	8f 91       	pop	r24
    15b0:	7f 91       	pop	r23
    15b2:	6f 91       	pop	r22
    15b4:	5f 91       	pop	r21
    15b6:	4f 91       	pop	r20
    15b8:	3f 91       	pop	r19
    15ba:	2f 91       	pop	r18
    15bc:	0f 90       	pop	r0
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	0f 90       	pop	r0
    15c2:	1f 90       	pop	r1
    15c4:	18 95       	reti

000015c6 <__vector_2>:

/* ISR function for EXTI1 */
void __vector_2(void)     __attribute__((signal));
void __vector_2(void)
{
    15c6:	1f 92       	push	r1
    15c8:	0f 92       	push	r0
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	0f 92       	push	r0
    15ce:	11 24       	eor	r1, r1
    15d0:	2f 93       	push	r18
    15d2:	3f 93       	push	r19
    15d4:	4f 93       	push	r20
    15d6:	5f 93       	push	r21
    15d8:	6f 93       	push	r22
    15da:	7f 93       	push	r23
    15dc:	8f 93       	push	r24
    15de:	9f 93       	push	r25
    15e0:	af 93       	push	r26
    15e2:	bf 93       	push	r27
    15e4:	ef 93       	push	r30
    15e6:	ff 93       	push	r31
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_Apf[EXTI_u8_INT_1] != NULL)
    15f0:	80 91 7a 00 	lds	r24, 0x007A
    15f4:	90 91 7b 00 	lds	r25, 0x007B
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	29 f0       	breq	.+10     	; 0x1606 <__vector_2+0x40>
    {
        /* call the global pointer to function */
        EXTI_Apf[EXTI_u8_INT_1]();
    15fc:	e0 91 7a 00 	lds	r30, 0x007A
    1600:	f0 91 7b 00 	lds	r31, 0x007B
    1604:	09 95       	icall
    }
}
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	ff 91       	pop	r31
    160c:	ef 91       	pop	r30
    160e:	bf 91       	pop	r27
    1610:	af 91       	pop	r26
    1612:	9f 91       	pop	r25
    1614:	8f 91       	pop	r24
    1616:	7f 91       	pop	r23
    1618:	6f 91       	pop	r22
    161a:	5f 91       	pop	r21
    161c:	4f 91       	pop	r20
    161e:	3f 91       	pop	r19
    1620:	2f 91       	pop	r18
    1622:	0f 90       	pop	r0
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	0f 90       	pop	r0
    1628:	1f 90       	pop	r1
    162a:	18 95       	reti

0000162c <__vector_3>:

/* ISR function for EXTI2 */
void __vector_3(void)     __attribute__((signal));
void __vector_3(void)
{
    162c:	1f 92       	push	r1
    162e:	0f 92       	push	r0
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	0f 92       	push	r0
    1634:	11 24       	eor	r1, r1
    1636:	2f 93       	push	r18
    1638:	3f 93       	push	r19
    163a:	4f 93       	push	r20
    163c:	5f 93       	push	r21
    163e:	6f 93       	push	r22
    1640:	7f 93       	push	r23
    1642:	8f 93       	push	r24
    1644:	9f 93       	push	r25
    1646:	af 93       	push	r26
    1648:	bf 93       	push	r27
    164a:	ef 93       	push	r30
    164c:	ff 93       	push	r31
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_Apf[EXTI_u8_INT_2] != NULL)
    1656:	80 91 7c 00 	lds	r24, 0x007C
    165a:	90 91 7d 00 	lds	r25, 0x007D
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	29 f0       	breq	.+10     	; 0x166c <__vector_3+0x40>
    {
        /* call the global pointer to function */
        EXTI_Apf[EXTI_u8_INT_2]();
    1662:	e0 91 7c 00 	lds	r30, 0x007C
    1666:	f0 91 7d 00 	lds	r31, 0x007D
    166a:	09 95       	icall
    }
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	ff 91       	pop	r31
    1672:	ef 91       	pop	r30
    1674:	bf 91       	pop	r27
    1676:	af 91       	pop	r26
    1678:	9f 91       	pop	r25
    167a:	8f 91       	pop	r24
    167c:	7f 91       	pop	r23
    167e:	6f 91       	pop	r22
    1680:	5f 91       	pop	r21
    1682:	4f 91       	pop	r20
    1684:	3f 91       	pop	r19
    1686:	2f 91       	pop	r18
    1688:	0f 90       	pop	r0
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	0f 90       	pop	r0
    168e:	1f 90       	pop	r1
    1690:	18 95       	reti

00001692 <DIO_DioEnumWriteChannel>:
#include "../Include/DIO_interface.h"
#include "../Include/DIO_private.h"
#include "../Include/DIO_config.h"

DioEnum DIO_DioEnumWriteChannel(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Level)
{
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	2e 97       	sbiw	r28, 0x0e	; 14
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	f8 94       	cli
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	cd bf       	out	0x3d, r28	; 61
    16a6:	8a 83       	std	Y+2, r24	; 0x02
    16a8:	6b 83       	std	Y+3, r22	; 0x03
    16aa:	4c 83       	std	Y+4, r20	; 0x04
	DioEnum local_DioEnumErrorState = DIO_WRITE_OK;
    16ac:	19 82       	std	Y+1, r1	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7))
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	84 30       	cpi	r24, 0x04	; 4
    16b2:	08 f0       	brcs	.+2      	; 0x16b6 <DIO_DioEnumWriteChannel+0x24>
    16b4:	05 c1       	rjmp	.+522    	; 0x18c0 <DIO_DioEnumWriteChannel+0x22e>
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	88 30       	cpi	r24, 0x08	; 8
    16ba:	08 f0       	brcs	.+2      	; 0x16be <DIO_DioEnumWriteChannel+0x2c>
    16bc:	01 c1       	rjmp	.+514    	; 0x18c0 <DIO_DioEnumWriteChannel+0x22e>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	3e 87       	std	Y+14, r19	; 0x0e
    16c6:	2d 87       	std	Y+13, r18	; 0x0d
    16c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	91 05       	cpc	r25, r1
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <DIO_DioEnumWriteChannel+0x42>
    16d2:	4f c0       	rjmp	.+158    	; 0x1772 <DIO_DioEnumWriteChannel+0xe0>
    16d4:	2d 85       	ldd	r18, Y+13	; 0x0d
    16d6:	3e 85       	ldd	r19, Y+14	; 0x0e
    16d8:	22 30       	cpi	r18, 0x02	; 2
    16da:	31 05       	cpc	r19, r1
    16dc:	2c f4       	brge	.+10     	; 0x16e8 <DIO_DioEnumWriteChannel+0x56>
    16de:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	71 f0       	breq	.+28     	; 0x1702 <DIO_DioEnumWriteChannel+0x70>
    16e6:	ee c0       	rjmp	.+476    	; 0x18c4 <DIO_DioEnumWriteChannel+0x232>
    16e8:	2d 85       	ldd	r18, Y+13	; 0x0d
    16ea:	3e 85       	ldd	r19, Y+14	; 0x0e
    16ec:	22 30       	cpi	r18, 0x02	; 2
    16ee:	31 05       	cpc	r19, r1
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <DIO_DioEnumWriteChannel+0x62>
    16f2:	77 c0       	rjmp	.+238    	; 0x17e2 <DIO_DioEnumWriteChannel+0x150>
    16f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f8:	83 30       	cpi	r24, 0x03	; 3
    16fa:	91 05       	cpc	r25, r1
    16fc:	09 f4       	brne	.+2      	; 0x1700 <DIO_DioEnumWriteChannel+0x6e>
    16fe:	a9 c0       	rjmp	.+338    	; 0x1852 <DIO_DioEnumWriteChannel+0x1c0>
    1700:	e1 c0       	rjmp	.+450    	; 0x18c4 <DIO_DioEnumWriteChannel+0x232>
		{
			case DIO_u8_PORTA:  // PORTA
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    1702:	8c 81       	ldd	r24, Y+4	; 0x04
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	3c 87       	std	Y+12, r19	; 0x0c
    170a:	2b 87       	std	Y+11, r18	; 0x0b
    170c:	8b 85       	ldd	r24, Y+11	; 0x0b
    170e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	d1 f0       	breq	.+52     	; 0x1748 <DIO_DioEnumWriteChannel+0xb6>
    1714:	2b 85       	ldd	r18, Y+11	; 0x0b
    1716:	3c 85       	ldd	r19, Y+12	; 0x0c
    1718:	21 30       	cpi	r18, 0x01	; 1
    171a:	31 05       	cpc	r19, r1
    171c:	09 f0       	breq	.+2      	; 0x1720 <DIO_DioEnumWriteChannel+0x8e>
    171e:	d2 c0       	rjmp	.+420    	; 0x18c4 <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,copy_u8PinId);     break;
    1720:	ab e3       	ldi	r26, 0x3B	; 59
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	eb e3       	ldi	r30, 0x3B	; 59
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	48 2f       	mov	r20, r24
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	02 2e       	mov	r0, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <DIO_DioEnumWriteChannel+0xac>
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	0a 94       	dec	r0
    1740:	e2 f7       	brpl	.-8      	; 0x173a <DIO_DioEnumWriteChannel+0xa8>
    1742:	84 2b       	or	r24, r20
    1744:	8c 93       	st	X, r24
    1746:	be c0       	rjmp	.+380    	; 0x18c4 <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,copy_u8PinId);     break;
    1748:	ab e3       	ldi	r26, 0x3B	; 59
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	eb e3       	ldi	r30, 0x3B	; 59
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	48 2f       	mov	r20, r24
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	02 2e       	mov	r0, r18
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <DIO_DioEnumWriteChannel+0xd4>
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	0a 94       	dec	r0
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <DIO_DioEnumWriteChannel+0xd0>
    176a:	80 95       	com	r24
    176c:	84 23       	and	r24, r20
    176e:	8c 93       	st	X, r24
    1770:	a9 c0       	rjmp	.+338    	; 0x18c4 <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTB:  // PORTB
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    1772:	8c 81       	ldd	r24, Y+4	; 0x04
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	3a 87       	std	Y+10, r19	; 0x0a
    177a:	29 87       	std	Y+9, r18	; 0x09
    177c:	89 85       	ldd	r24, Y+9	; 0x09
    177e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	d1 f0       	breq	.+52     	; 0x17b8 <DIO_DioEnumWriteChannel+0x126>
    1784:	29 85       	ldd	r18, Y+9	; 0x09
    1786:	3a 85       	ldd	r19, Y+10	; 0x0a
    1788:	21 30       	cpi	r18, 0x01	; 1
    178a:	31 05       	cpc	r19, r1
    178c:	09 f0       	breq	.+2      	; 0x1790 <DIO_DioEnumWriteChannel+0xfe>
    178e:	9a c0       	rjmp	.+308    	; 0x18c4 <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,copy_u8PinId);     break;
    1790:	a8 e3       	ldi	r26, 0x38	; 56
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e8 e3       	ldi	r30, 0x38	; 56
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	48 2f       	mov	r20, r24
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 2e       	mov	r0, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <DIO_DioEnumWriteChannel+0x11c>
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	0a 94       	dec	r0
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <DIO_DioEnumWriteChannel+0x118>
    17b2:	84 2b       	or	r24, r20
    17b4:	8c 93       	st	X, r24
    17b6:	86 c0       	rjmp	.+268    	; 0x18c4 <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,copy_u8PinId);     break;
    17b8:	a8 e3       	ldi	r26, 0x38	; 56
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e8 e3       	ldi	r30, 0x38	; 56
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	48 2f       	mov	r20, r24
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	02 2e       	mov	r0, r18
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <DIO_DioEnumWriteChannel+0x144>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	0a 94       	dec	r0
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <DIO_DioEnumWriteChannel+0x140>
    17da:	80 95       	com	r24
    17dc:	84 23       	and	r24, r20
    17de:	8c 93       	st	X, r24
    17e0:	71 c0       	rjmp	.+226    	; 0x18c4 <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTC:  // PORTC
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    17e2:	8c 81       	ldd	r24, Y+4	; 0x04
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	38 87       	std	Y+8, r19	; 0x08
    17ea:	2f 83       	std	Y+7, r18	; 0x07
    17ec:	8f 81       	ldd	r24, Y+7	; 0x07
    17ee:	98 85       	ldd	r25, Y+8	; 0x08
    17f0:	00 97       	sbiw	r24, 0x00	; 0
    17f2:	d1 f0       	breq	.+52     	; 0x1828 <DIO_DioEnumWriteChannel+0x196>
    17f4:	2f 81       	ldd	r18, Y+7	; 0x07
    17f6:	38 85       	ldd	r19, Y+8	; 0x08
    17f8:	21 30       	cpi	r18, 0x01	; 1
    17fa:	31 05       	cpc	r19, r1
    17fc:	09 f0       	breq	.+2      	; 0x1800 <DIO_DioEnumWriteChannel+0x16e>
    17fe:	62 c0       	rjmp	.+196    	; 0x18c4 <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,copy_u8PinId);     break;
    1800:	a5 e3       	ldi	r26, 0x35	; 53
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e5 e3       	ldi	r30, 0x35	; 53
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	48 2f       	mov	r20, r24
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	02 2e       	mov	r0, r18
    1818:	02 c0       	rjmp	.+4      	; 0x181e <DIO_DioEnumWriteChannel+0x18c>
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	0a 94       	dec	r0
    1820:	e2 f7       	brpl	.-8      	; 0x181a <DIO_DioEnumWriteChannel+0x188>
    1822:	84 2b       	or	r24, r20
    1824:	8c 93       	st	X, r24
    1826:	4e c0       	rjmp	.+156    	; 0x18c4 <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,copy_u8PinId);     break;
    1828:	a5 e3       	ldi	r26, 0x35	; 53
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e5 e3       	ldi	r30, 0x35	; 53
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	48 2f       	mov	r20, r24
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 2e       	mov	r0, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <DIO_DioEnumWriteChannel+0x1b4>
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	0a 94       	dec	r0
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <DIO_DioEnumWriteChannel+0x1b0>
    184a:	80 95       	com	r24
    184c:	84 23       	and	r24, r20
    184e:	8c 93       	st	X, r24
    1850:	39 c0       	rjmp	.+114    	; 0x18c4 <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTD:  // PORTD
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    1852:	8c 81       	ldd	r24, Y+4	; 0x04
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	3e 83       	std	Y+6, r19	; 0x06
    185a:	2d 83       	std	Y+5, r18	; 0x05
    185c:	8d 81       	ldd	r24, Y+5	; 0x05
    185e:	9e 81       	ldd	r25, Y+6	; 0x06
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	c9 f0       	breq	.+50     	; 0x1896 <DIO_DioEnumWriteChannel+0x204>
    1864:	2d 81       	ldd	r18, Y+5	; 0x05
    1866:	3e 81       	ldd	r19, Y+6	; 0x06
    1868:	21 30       	cpi	r18, 0x01	; 1
    186a:	31 05       	cpc	r19, r1
    186c:	59 f5       	brne	.+86     	; 0x18c4 <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,copy_u8PinId);     break;
    186e:	a2 e3       	ldi	r26, 0x32	; 50
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e2 e3       	ldi	r30, 0x32	; 50
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	48 2f       	mov	r20, r24
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	02 2e       	mov	r0, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <DIO_DioEnumWriteChannel+0x1fa>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	0a 94       	dec	r0
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <DIO_DioEnumWriteChannel+0x1f6>
    1890:	84 2b       	or	r24, r20
    1892:	8c 93       	st	X, r24
    1894:	17 c0       	rjmp	.+46     	; 0x18c4 <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,copy_u8PinId);     break;
    1896:	a2 e3       	ldi	r26, 0x32	; 50
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e2 e3       	ldi	r30, 0x32	; 50
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	48 2f       	mov	r20, r24
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	02 2e       	mov	r0, r18
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <DIO_DioEnumWriteChannel+0x222>
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	0a 94       	dec	r0
    18b6:	e2 f7       	brpl	.-8      	; 0x18b0 <DIO_DioEnumWriteChannel+0x21e>
    18b8:	80 95       	com	r24
    18ba:	84 23       	and	r24, r20
    18bc:	8c 93       	st	X, r24
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <DIO_DioEnumWriteChannel+0x232>
			break;
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_WRITE_NOK;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c6:	2e 96       	adiw	r28, 0x0e	; 14
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	de bf       	out	0x3e, r29	; 62
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	cd bf       	out	0x3d, r28	; 61
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	08 95       	ret

000018d8 <DIO_DioEnumReadChannel>:

DioEnum DIO_DioEnumReadChannel(u8 copy_u8PortId,u8 copy_u8PinId,pu8 copy_pu8ReadChannel)
{
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	28 97       	sbiw	r28, 0x08	; 8
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	8b 83       	std	Y+3, r24	; 0x03
    18ee:	6c 83       	std	Y+4, r22	; 0x04
    18f0:	5e 83       	std	Y+6, r21	; 0x06
    18f2:	4d 83       	std	Y+5, r20	; 0x05
	DioEnum local_DioEnumErrorState = DIO_READ_OK;
    18f4:	82 e0       	ldi	r24, 0x02	; 2
    18f6:	8a 83       	std	Y+2, r24	; 0x02
	/* local variable to store in value of the pin */
	u8 local_u8GetValue;
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7) && (copy_pu8ReadChannel != NULL))
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	84 30       	cpi	r24, 0x04	; 4
    18fc:	08 f0       	brcs	.+2      	; 0x1900 <DIO_DioEnumReadChannel+0x28>
    18fe:	9f c0       	rjmp	.+318    	; 0x1a3e <DIO_DioEnumReadChannel+0x166>
    1900:	8c 81       	ldd	r24, Y+4	; 0x04
    1902:	88 30       	cpi	r24, 0x08	; 8
    1904:	08 f0       	brcs	.+2      	; 0x1908 <DIO_DioEnumReadChannel+0x30>
    1906:	9b c0       	rjmp	.+310    	; 0x1a3e <DIO_DioEnumReadChannel+0x166>
    1908:	8d 81       	ldd	r24, Y+5	; 0x05
    190a:	9e 81       	ldd	r25, Y+6	; 0x06
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	09 f4       	brne	.+2      	; 0x1912 <DIO_DioEnumReadChannel+0x3a>
    1910:	96 c0       	rjmp	.+300    	; 0x1a3e <DIO_DioEnumReadChannel+0x166>
	{
		/* step1: check about which port you want to read */
		switch(copy_u8PortId)
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	38 87       	std	Y+8, r19	; 0x08
    191a:	2f 83       	std	Y+7, r18	; 0x07
    191c:	4f 81       	ldd	r20, Y+7	; 0x07
    191e:	58 85       	ldd	r21, Y+8	; 0x08
    1920:	41 30       	cpi	r20, 0x01	; 1
    1922:	51 05       	cpc	r21, r1
    1924:	a9 f1       	breq	.+106    	; 0x1990 <DIO_DioEnumReadChannel+0xb8>
    1926:	8f 81       	ldd	r24, Y+7	; 0x07
    1928:	98 85       	ldd	r25, Y+8	; 0x08
    192a:	82 30       	cpi	r24, 0x02	; 2
    192c:	91 05       	cpc	r25, r1
    192e:	34 f4       	brge	.+12     	; 0x193c <DIO_DioEnumReadChannel+0x64>
    1930:	2f 81       	ldd	r18, Y+7	; 0x07
    1932:	38 85       	ldd	r19, Y+8	; 0x08
    1934:	21 15       	cp	r18, r1
    1936:	31 05       	cpc	r19, r1
    1938:	71 f0       	breq	.+28     	; 0x1956 <DIO_DioEnumReadChannel+0x7e>
    193a:	83 c0       	rjmp	.+262    	; 0x1a42 <DIO_DioEnumReadChannel+0x16a>
    193c:	4f 81       	ldd	r20, Y+7	; 0x07
    193e:	58 85       	ldd	r21, Y+8	; 0x08
    1940:	42 30       	cpi	r20, 0x02	; 2
    1942:	51 05       	cpc	r21, r1
    1944:	09 f4       	brne	.+2      	; 0x1948 <DIO_DioEnumReadChannel+0x70>
    1946:	41 c0       	rjmp	.+130    	; 0x19ca <DIO_DioEnumReadChannel+0xf2>
    1948:	8f 81       	ldd	r24, Y+7	; 0x07
    194a:	98 85       	ldd	r25, Y+8	; 0x08
    194c:	83 30       	cpi	r24, 0x03	; 3
    194e:	91 05       	cpc	r25, r1
    1950:	09 f4       	brne	.+2      	; 0x1954 <DIO_DioEnumReadChannel+0x7c>
    1952:	58 c0       	rjmp	.+176    	; 0x1a04 <DIO_DioEnumReadChannel+0x12c>
    1954:	76 c0       	rjmp	.+236    	; 0x1a42 <DIO_DioEnumReadChannel+0x16a>
		{
			case DIO_u8_PORTA:  // PORTA
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINA_REG,copy_u8PinId);
    1956:	e9 e3       	ldi	r30, 0x39	; 57
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	8c 81       	ldd	r24, Y+4	; 0x04
    1962:	88 2f       	mov	r24, r24
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	a9 01       	movw	r20, r18
    1968:	02 c0       	rjmp	.+4      	; 0x196e <DIO_DioEnumReadChannel+0x96>
    196a:	55 95       	asr	r21
    196c:	47 95       	ror	r20
    196e:	8a 95       	dec	r24
    1970:	e2 f7       	brpl	.-8      	; 0x196a <DIO_DioEnumReadChannel+0x92>
    1972:	ca 01       	movw	r24, r20
    1974:	81 70       	andi	r24, 0x01	; 1
    1976:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	88 23       	and	r24, r24
    197c:	21 f4       	brne	.+8      	; 0x1986 <DIO_DioEnumReadChannel+0xae>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    197e:	ed 81       	ldd	r30, Y+5	; 0x05
    1980:	fe 81       	ldd	r31, Y+6	; 0x06
    1982:	10 82       	st	Z, r1
    1984:	5e c0       	rjmp	.+188    	; 0x1a42 <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    1986:	ed 81       	ldd	r30, Y+5	; 0x05
    1988:	fe 81       	ldd	r31, Y+6	; 0x06
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	80 83       	st	Z, r24
    198e:	59 c0       	rjmp	.+178    	; 0x1a42 <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTB:  // PORTB
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINB_REG,copy_u8PinId);
    1990:	e6 e3       	ldi	r30, 0x36	; 54
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	8c 81       	ldd	r24, Y+4	; 0x04
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	a9 01       	movw	r20, r18
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <DIO_DioEnumReadChannel+0xd0>
    19a4:	55 95       	asr	r21
    19a6:	47 95       	ror	r20
    19a8:	8a 95       	dec	r24
    19aa:	e2 f7       	brpl	.-8      	; 0x19a4 <DIO_DioEnumReadChannel+0xcc>
    19ac:	ca 01       	movw	r24, r20
    19ae:	81 70       	andi	r24, 0x01	; 1
    19b0:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	88 23       	and	r24, r24
    19b6:	21 f4       	brne	.+8      	; 0x19c0 <DIO_DioEnumReadChannel+0xe8>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    19b8:	ed 81       	ldd	r30, Y+5	; 0x05
    19ba:	fe 81       	ldd	r31, Y+6	; 0x06
    19bc:	10 82       	st	Z, r1
    19be:	41 c0       	rjmp	.+130    	; 0x1a42 <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    19c0:	ed 81       	ldd	r30, Y+5	; 0x05
    19c2:	fe 81       	ldd	r31, Y+6	; 0x06
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	80 83       	st	Z, r24
    19c8:	3c c0       	rjmp	.+120    	; 0x1a42 <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTC:  // PORTC
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINC_REG,copy_u8PinId);
    19ca:	e3 e3       	ldi	r30, 0x33	; 51
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	8c 81       	ldd	r24, Y+4	; 0x04
    19d6:	88 2f       	mov	r24, r24
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	a9 01       	movw	r20, r18
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <DIO_DioEnumReadChannel+0x10a>
    19de:	55 95       	asr	r21
    19e0:	47 95       	ror	r20
    19e2:	8a 95       	dec	r24
    19e4:	e2 f7       	brpl	.-8      	; 0x19de <DIO_DioEnumReadChannel+0x106>
    19e6:	ca 01       	movw	r24, r20
    19e8:	81 70       	andi	r24, 0x01	; 1
    19ea:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	88 23       	and	r24, r24
    19f0:	21 f4       	brne	.+8      	; 0x19fa <DIO_DioEnumReadChannel+0x122>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    19f2:	ed 81       	ldd	r30, Y+5	; 0x05
    19f4:	fe 81       	ldd	r31, Y+6	; 0x06
    19f6:	10 82       	st	Z, r1
    19f8:	24 c0       	rjmp	.+72     	; 0x1a42 <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    19fa:	ed 81       	ldd	r30, Y+5	; 0x05
    19fc:	fe 81       	ldd	r31, Y+6	; 0x06
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	80 83       	st	Z, r24
    1a02:	1f c0       	rjmp	.+62     	; 0x1a42 <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTD:  // PORTD
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PIND_REG,copy_u8PinId);
    1a04:	e0 e3       	ldi	r30, 0x30	; 48
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a10:	88 2f       	mov	r24, r24
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	a9 01       	movw	r20, r18
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <DIO_DioEnumReadChannel+0x144>
    1a18:	55 95       	asr	r21
    1a1a:	47 95       	ror	r20
    1a1c:	8a 95       	dec	r24
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <DIO_DioEnumReadChannel+0x140>
    1a20:	ca 01       	movw	r24, r20
    1a22:	81 70       	andi	r24, 0x01	; 1
    1a24:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	88 23       	and	r24, r24
    1a2a:	21 f4       	brne	.+8      	; 0x1a34 <DIO_DioEnumReadChannel+0x15c>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    1a2c:	ed 81       	ldd	r30, Y+5	; 0x05
    1a2e:	fe 81       	ldd	r31, Y+6	; 0x06
    1a30:	10 82       	st	Z, r1
    1a32:	07 c0       	rjmp	.+14     	; 0x1a42 <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    1a34:	ed 81       	ldd	r30, Y+5	; 0x05
    1a36:	fe 81       	ldd	r31, Y+6	; 0x06
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	80 83       	st	Z, r24
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <DIO_DioEnumReadChannel+0x16a>
			break;
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_READ_NOK;
    1a3e:	83 e0       	ldi	r24, 0x03	; 3
    1a40:	8a 83       	std	Y+2, r24	; 0x02
	}
	return local_DioEnumErrorState;
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1a44:	28 96       	adiw	r28, 0x08	; 8
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <DIO_DioEnumWritePort>:

DioEnum DIO_DioEnumWritePort(u8 copy_u8PortId,u8 copy_u8Value)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <DIO_DioEnumWritePort+0x6>
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <DIO_DioEnumWritePort+0x8>
    1a5e:	0f 92       	push	r0
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	8a 83       	std	Y+2, r24	; 0x02
    1a66:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_WPORT_OK;
    1a68:	84 e0       	ldi	r24, 0x04	; 4
    1a6a:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if(copy_u8PortId <= DIO_u8_PORTD)
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	84 30       	cpi	r24, 0x04	; 4
    1a70:	98 f5       	brcc	.+102    	; 0x1ad8 <DIO_DioEnumWritePort+0x82>
	{
		/* check about which port you want to write into the value */
		switch(copy_u8PortId)
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	3d 83       	std	Y+5, r19	; 0x05
    1a7a:	2c 83       	std	Y+4, r18	; 0x04
    1a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a80:	81 30       	cpi	r24, 0x01	; 1
    1a82:	91 05       	cpc	r25, r1
    1a84:	d1 f0       	breq	.+52     	; 0x1aba <DIO_DioEnumWritePort+0x64>
    1a86:	2c 81       	ldd	r18, Y+4	; 0x04
    1a88:	3d 81       	ldd	r19, Y+5	; 0x05
    1a8a:	22 30       	cpi	r18, 0x02	; 2
    1a8c:	31 05       	cpc	r19, r1
    1a8e:	2c f4       	brge	.+10     	; 0x1a9a <DIO_DioEnumWritePort+0x44>
    1a90:	8c 81       	ldd	r24, Y+4	; 0x04
    1a92:	9d 81       	ldd	r25, Y+5	; 0x05
    1a94:	00 97       	sbiw	r24, 0x00	; 0
    1a96:	61 f0       	breq	.+24     	; 0x1ab0 <DIO_DioEnumWritePort+0x5a>
    1a98:	21 c0       	rjmp	.+66     	; 0x1adc <DIO_DioEnumWritePort+0x86>
    1a9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a9e:	22 30       	cpi	r18, 0x02	; 2
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	81 f0       	breq	.+32     	; 0x1ac4 <DIO_DioEnumWritePort+0x6e>
    1aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa6:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa8:	83 30       	cpi	r24, 0x03	; 3
    1aaa:	91 05       	cpc	r25, r1
    1aac:	81 f0       	breq	.+32     	; 0x1ace <DIO_DioEnumWritePort+0x78>
    1aae:	16 c0       	rjmp	.+44     	; 0x1adc <DIO_DioEnumWritePort+0x86>
		{
			case DIO_u8_PORTA: DIO_u8_PORTA_REG = copy_u8Value;      break;
    1ab0:	eb e3       	ldi	r30, 0x3B	; 59
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	80 83       	st	Z, r24
    1ab8:	11 c0       	rjmp	.+34     	; 0x1adc <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTB: DIO_u8_PORTB_REG = copy_u8Value;      break;
    1aba:	e8 e3       	ldi	r30, 0x38	; 56
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	80 83       	st	Z, r24
    1ac2:	0c c0       	rjmp	.+24     	; 0x1adc <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTC: DIO_u8_PORTC_REG = copy_u8Value;      break;
    1ac4:	e5 e3       	ldi	r30, 0x35	; 53
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	80 83       	st	Z, r24
    1acc:	07 c0       	rjmp	.+14     	; 0x1adc <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTD: DIO_u8_PORTD_REG = copy_u8Value;      break;
    1ace:	e2 e3       	ldi	r30, 0x32	; 50
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	80 83       	st	Z, r24
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <DIO_DioEnumWritePort+0x86>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_WPORT_NOK;
    1ad8:	85 e0       	ldi	r24, 0x05	; 5
    1ada:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	08 95       	ret

00001aee <DIO_DioEnumReadPort>:

DioEnum DIO_DioEnumReadPort(u8 copy_u8PortId,pu8 copy_pu8ReadPort)
{
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <DIO_DioEnumReadPort+0x6>
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <DIO_DioEnumReadPort+0x8>
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <DIO_DioEnumReadPort+0xa>
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	8a 83       	std	Y+2, r24	; 0x02
    1afe:	7c 83       	std	Y+4, r23	; 0x04
    1b00:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_RPORT_OK;
    1b02:	86 e0       	ldi	r24, 0x06	; 6
    1b04:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_pu8ReadPort != NULL))
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	84 30       	cpi	r24, 0x04	; 4
    1b0a:	08 f0       	brcs	.+2      	; 0x1b0e <DIO_DioEnumReadPort+0x20>
    1b0c:	3f c0       	rjmp	.+126    	; 0x1b8c <DIO_DioEnumReadPort+0x9e>
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	9c 81       	ldd	r25, Y+4	; 0x04
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	d9 f1       	breq	.+118    	; 0x1b8c <DIO_DioEnumReadPort+0x9e>
	{
		/* check about which port you want to read this value */
		switch(copy_u8PortId)
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	3e 83       	std	Y+6, r19	; 0x06
    1b1e:	2d 83       	std	Y+5, r18	; 0x05
    1b20:	8d 81       	ldd	r24, Y+5	; 0x05
    1b22:	9e 81       	ldd	r25, Y+6	; 0x06
    1b24:	81 30       	cpi	r24, 0x01	; 1
    1b26:	91 05       	cpc	r25, r1
    1b28:	e1 f0       	breq	.+56     	; 0x1b62 <DIO_DioEnumReadPort+0x74>
    1b2a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b2c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b2e:	22 30       	cpi	r18, 0x02	; 2
    1b30:	31 05       	cpc	r19, r1
    1b32:	2c f4       	brge	.+10     	; 0x1b3e <DIO_DioEnumReadPort+0x50>
    1b34:	8d 81       	ldd	r24, Y+5	; 0x05
    1b36:	9e 81       	ldd	r25, Y+6	; 0x06
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    1b3a:	61 f0       	breq	.+24     	; 0x1b54 <DIO_DioEnumReadPort+0x66>
    1b3c:	29 c0       	rjmp	.+82     	; 0x1b90 <DIO_DioEnumReadPort+0xa2>
    1b3e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b40:	3e 81       	ldd	r19, Y+6	; 0x06
    1b42:	22 30       	cpi	r18, 0x02	; 2
    1b44:	31 05       	cpc	r19, r1
    1b46:	a1 f0       	breq	.+40     	; 0x1b70 <DIO_DioEnumReadPort+0x82>
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	83 30       	cpi	r24, 0x03	; 3
    1b4e:	91 05       	cpc	r25, r1
    1b50:	b1 f0       	breq	.+44     	; 0x1b7e <DIO_DioEnumReadPort+0x90>
    1b52:	1e c0       	rjmp	.+60     	; 0x1b90 <DIO_DioEnumReadPort+0xa2>
		{
			case DIO_u8_PORTA: *copy_pu8ReadPort = DIO_u8_PINA_REG;      break;
    1b54:	e9 e3       	ldi	r30, 0x39	; 57
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b5e:	80 83       	st	Z, r24
    1b60:	17 c0       	rjmp	.+46     	; 0x1b90 <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTB: *copy_pu8ReadPort = DIO_u8_PINB_REG;      break;
    1b62:	e6 e3       	ldi	r30, 0x36	; 54
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	eb 81       	ldd	r30, Y+3	; 0x03
    1b6a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b6c:	80 83       	st	Z, r24
    1b6e:	10 c0       	rjmp	.+32     	; 0x1b90 <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTC: *copy_pu8ReadPort = DIO_u8_PINC_REG;      break;
    1b70:	e3 e3       	ldi	r30, 0x33	; 51
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	eb 81       	ldd	r30, Y+3	; 0x03
    1b78:	fc 81       	ldd	r31, Y+4	; 0x04
    1b7a:	80 83       	st	Z, r24
    1b7c:	09 c0       	rjmp	.+18     	; 0x1b90 <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTD: *copy_pu8ReadPort = DIO_u8_PIND_REG;      break;
    1b7e:	e0 e3       	ldi	r30, 0x30	; 48
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	eb 81       	ldd	r30, Y+3	; 0x03
    1b86:	fc 81       	ldd	r31, Y+4	; 0x04
    1b88:	80 83       	st	Z, r24
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <DIO_DioEnumReadPort+0xa2>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_RPORT_NOK;
    1b8c:	87 e0       	ldi	r24, 0x07	; 7
    1b8e:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b92:	26 96       	adiw	r28, 0x06	; 6
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <DIO_DioEnumFlibChannel>:

DioEnum DIO_DioEnumFlibChannel(u8 copy_u8PortId,u8 copy_u8PinId)
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <DIO_DioEnumFlibChannel+0x6>
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <DIO_DioEnumFlibChannel+0x8>
    1bac:	0f 92       	push	r0
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	8a 83       	std	Y+2, r24	; 0x02
    1bb4:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_FLIB_OK;
    1bb6:	88 e0       	ldi	r24, 0x08	; 8
    1bb8:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7))
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	84 30       	cpi	r24, 0x04	; 4
    1bbe:	08 f0       	brcs	.+2      	; 0x1bc2 <DIO_DioEnumFlibChannel+0x1e>
    1bc0:	73 c0       	rjmp	.+230    	; 0x1ca8 <DIO_DioEnumFlibChannel+0x104>
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	88 30       	cpi	r24, 0x08	; 8
    1bc6:	08 f0       	brcs	.+2      	; 0x1bca <DIO_DioEnumFlibChannel+0x26>
    1bc8:	6f c0       	rjmp	.+222    	; 0x1ca8 <DIO_DioEnumFlibChannel+0x104>
	{
		/* check about which port you want to toggle your pins */
		switch(copy_u8PortId)
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	3d 83       	std	Y+5, r19	; 0x05
    1bd2:	2c 83       	std	Y+4, r18	; 0x04
    1bd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd8:	81 30       	cpi	r24, 0x01	; 1
    1bda:	91 05       	cpc	r25, r1
    1bdc:	49 f1       	breq	.+82     	; 0x1c30 <DIO_DioEnumFlibChannel+0x8c>
    1bde:	2c 81       	ldd	r18, Y+4	; 0x04
    1be0:	3d 81       	ldd	r19, Y+5	; 0x05
    1be2:	22 30       	cpi	r18, 0x02	; 2
    1be4:	31 05       	cpc	r19, r1
    1be6:	2c f4       	brge	.+10     	; 0x1bf2 <DIO_DioEnumFlibChannel+0x4e>
    1be8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bea:	9d 81       	ldd	r25, Y+5	; 0x05
    1bec:	00 97       	sbiw	r24, 0x00	; 0
    1bee:	61 f0       	breq	.+24     	; 0x1c08 <DIO_DioEnumFlibChannel+0x64>
    1bf0:	5d c0       	rjmp	.+186    	; 0x1cac <DIO_DioEnumFlibChannel+0x108>
    1bf2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf4:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf6:	22 30       	cpi	r18, 0x02	; 2
    1bf8:	31 05       	cpc	r19, r1
    1bfa:	71 f1       	breq	.+92     	; 0x1c58 <DIO_DioEnumFlibChannel+0xb4>
    1bfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bfe:	9d 81       	ldd	r25, Y+5	; 0x05
    1c00:	83 30       	cpi	r24, 0x03	; 3
    1c02:	91 05       	cpc	r25, r1
    1c04:	e9 f1       	breq	.+122    	; 0x1c80 <DIO_DioEnumFlibChannel+0xdc>
    1c06:	52 c0       	rjmp	.+164    	; 0x1cac <DIO_DioEnumFlibChannel+0x108>
		{
			case DIO_u8_PORTA: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    1c08:	ab e3       	ldi	r26, 0x3B	; 59
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	eb e3       	ldi	r30, 0x3B	; 59
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 2e       	mov	r0, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <DIO_DioEnumFlibChannel+0x82>
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	0a 94       	dec	r0
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <DIO_DioEnumFlibChannel+0x7e>
    1c2a:	84 27       	eor	r24, r20
    1c2c:	8c 93       	st	X, r24
    1c2e:	3e c0       	rjmp	.+124    	; 0x1cac <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTB: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    1c30:	ab e3       	ldi	r26, 0x3B	; 59
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	eb e3       	ldi	r30, 0x3B	; 59
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	02 2e       	mov	r0, r18
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <DIO_DioEnumFlibChannel+0xaa>
    1c4a:	88 0f       	add	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	0a 94       	dec	r0
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <DIO_DioEnumFlibChannel+0xa6>
    1c52:	84 27       	eor	r24, r20
    1c54:	8c 93       	st	X, r24
    1c56:	2a c0       	rjmp	.+84     	; 0x1cac <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTC: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    1c58:	ab e3       	ldi	r26, 0x3B	; 59
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	eb e3       	ldi	r30, 0x3B	; 59
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	48 2f       	mov	r20, r24
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	02 2e       	mov	r0, r18
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <DIO_DioEnumFlibChannel+0xd2>
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	0a 94       	dec	r0
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <DIO_DioEnumFlibChannel+0xce>
    1c7a:	84 27       	eor	r24, r20
    1c7c:	8c 93       	st	X, r24
    1c7e:	16 c0       	rjmp	.+44     	; 0x1cac <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTD: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    1c80:	ab e3       	ldi	r26, 0x3B	; 59
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	eb e3       	ldi	r30, 0x3B	; 59
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	48 2f       	mov	r20, r24
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	02 2e       	mov	r0, r18
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <DIO_DioEnumFlibChannel+0xfa>
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	0a 94       	dec	r0
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <DIO_DioEnumFlibChannel+0xf6>
    1ca2:	84 27       	eor	r24, r20
    1ca4:	8c 93       	st	X, r24
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <DIO_DioEnumFlibChannel+0x108>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_FLIB_NOK;
    1ca8:	89 e0       	ldi	r24, 0x09	; 9
    1caa:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <ADC_voidInit>:
u16 ADC_u16Result;
/* global pointer to function */
void (*ADC_pf)(void);

void ADC_voidInit(void)
{
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    /* to set the prescaler => choosing prescaler 8MHz/64 */
    CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADPS0_BIT);
    1cc6:	a6 e2       	ldi	r26, 0x26	; 38
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	e6 e2       	ldi	r30, 0x26	; 38
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	8e 7f       	andi	r24, 0xFE	; 254
    1cd2:	8c 93       	st	X, r24
    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADPS1_BIT);
    1cd4:	a6 e2       	ldi	r26, 0x26	; 38
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e6 e2       	ldi	r30, 0x26	; 38
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	82 60       	ori	r24, 0x02	; 2
    1ce0:	8c 93       	st	X, r24
    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADPS2_BIT);
    1ce2:	a6 e2       	ldi	r26, 0x26	; 38
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e6 e2       	ldi	r30, 0x26	; 38
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	84 60       	ori	r24, 0x04	; 4
    1cee:	8c 93       	st	X, r24
        SET_BIT(ADC_u8_ADMUX_REG,ADC_u8_REFS1_BIT);
    #elif ADC_u8_VOLTAGE == ADC_REF_VOLT // Ref Volt in AREF Pin
        CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_REFS0_BIT);
        CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_REFS1_BIT);
    #elif ADC_u8_VOLTAGE == ADC_VCC_VOLT // Vcc volt 5v
        SET_BIT(ADC_u8_ADMUX_REG,ADC_u8_REFS0_BIT);
    1cf0:	a7 e2       	ldi	r26, 0x27	; 39
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e7 e2       	ldi	r30, 0x27	; 39
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	80 64       	ori	r24, 0x40	; 64
    1cfc:	8c 93       	st	X, r24
        CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_REFS1_BIT);
    1cfe:	a7 e2       	ldi	r26, 0x27	; 39
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e7 e2       	ldi	r30, 0x27	; 39
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	8f 77       	andi	r24, 0x7F	; 127
    1d0a:	8c 93       	st	X, r24
    #endif
    /* to configure the adjust */
    #if   ADC_u8_ADJUSR == ADC_RIGHT_ADJUST // Right Adjust
        CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADLAR_BIT);
    1d0c:	a7 e2       	ldi	r26, 0x27	; 39
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e7 e2       	ldi	r30, 0x27	; 39
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	8f 7d       	andi	r24, 0xDF	; 223
    1d18:	8c 93       	st	X, r24
    #elif ADC_u8_ADJUSR == ADC_LEFT_ADJUST // Left Adjust
        SET_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADLAR_BIT);
    #endif
    /* to configure the mode of the ADC */
    #if   ADC_u8_MODE == ADC_SINGLE_MODE
        CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADATE_BIT);
    1d1a:	a6 e2       	ldi	r26, 0x26	; 38
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e6 e2       	ldi	r30, 0x26	; 38
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	8f 7d       	andi	r24, 0xDF	; 223
    1d26:	8c 93       	st	X, r24
        CLR_BIT(ADC_u8_SFIOR_REG,ADC_u8_ADTS0_BIT);
        CLR_BIT(ADC_u8_SFIOR_REG,ADC_u8_ADTS1_BIT);
        CLR_BIT(ADC_u8_SFIOR_REG,ADC_u8_ADTS2_BIT);
    #endif
    /* Enable the ADC */
    SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADEN_BIT);
    1d28:	a6 e2       	ldi	r26, 0x26	; 38
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e6 e2       	ldi	r30, 0x26	; 38
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	80 68       	ori	r24, 0x80	; 128
    1d34:	8c 93       	st	X, r24
}
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <ADC_ADCEnumReadSync>:

ADCEnum ADC_ADCEnumReadSync(u8 copy_u8Channel,pu16 copy_pu16DigitalValue)
{
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <ADC_ADCEnumReadSync+0x6>
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <ADC_ADCEnumReadSync+0x8>
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <ADC_ADCEnumReadSync+0xa>
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	8c 83       	std	Y+4, r24	; 0x04
    1d4c:	7e 83       	std	Y+6, r23	; 0x06
    1d4e:	6d 83       	std	Y+5, r22	; 0x05
    ADCEnum local_ADCEnumErrorState = ADC_Read_OK;
    1d50:	1b 82       	std	Y+3, r1	; 0x03
    u16 local_u16TimeOut = 0;
    1d52:	1a 82       	std	Y+2, r1	; 0x02
    1d54:	19 82       	std	Y+1, r1	; 0x01
    /* check about input parameters */
    if((copy_u8Channel <= ADC_CHANNEL_7) && (copy_pu16DigitalValue != NULL))
    1d56:	8c 81       	ldd	r24, Y+4	; 0x04
    1d58:	88 30       	cpi	r24, 0x08	; 8
    1d5a:	08 f0       	brcs	.+2      	; 0x1d5e <ADC_ADCEnumReadSync+0x22>
    1d5c:	50 c0       	rjmp	.+160    	; 0x1dfe <ADC_ADCEnumReadSync+0xc2>
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <ADC_ADCEnumReadSync+0x2c>
    1d66:	4b c0       	rjmp	.+150    	; 0x1dfe <ADC_ADCEnumReadSync+0xc2>
    {
        /* to save the selection of the voltage and the adjust on ADMUX register */
        ADC_u8_ADMUX_REG &= 0b11100000;
    1d68:	a7 e2       	ldi	r26, 0x27	; 39
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e7 e2       	ldi	r30, 0x27	; 39
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	80 7e       	andi	r24, 0xE0	; 224
    1d74:	8c 93       	st	X, r24
        /* then update the channel number in the register */
        ADC_u8_ADMUX_REG |= copy_u8Channel;
    1d76:	a7 e2       	ldi	r26, 0x27	; 39
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e7 e2       	ldi	r30, 0x27	; 39
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	90 81       	ld	r25, Z
    1d80:	8c 81       	ldd	r24, Y+4	; 0x04
    1d82:	89 2b       	or	r24, r25
    1d84:	8c 93       	st	X, r24
        /* to start conversion */
        SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADSC_BIT);
    1d86:	a6 e2       	ldi	r26, 0x26	; 38
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	e6 e2       	ldi	r30, 0x26	; 38
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	80 64       	ori	r24, 0x40	; 64
    1d92:	8c 93       	st	X, r24
    1d94:	05 c0       	rjmp	.+10     	; 0x1da0 <ADC_ADCEnumReadSync+0x64>
        /* Polling Nonblocking Mechanism while the conversion is completed */
        while((GET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIF_BIT)==0) && (local_u16TimeOut < ADC_TIMEOUT_MECHANISM ))
        {
            local_u16TimeOut++;
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9a:	01 96       	adiw	r24, 0x01	; 1
    1d9c:	9a 83       	std	Y+2, r25	; 0x02
    1d9e:	89 83       	std	Y+1, r24	; 0x01
        /* then update the channel number in the register */
        ADC_u8_ADMUX_REG |= copy_u8Channel;
        /* to start conversion */
        SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADSC_BIT);
        /* Polling Nonblocking Mechanism while the conversion is completed */
        while((GET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIF_BIT)==0) && (local_u16TimeOut < ADC_TIMEOUT_MECHANISM ))
    1da0:	e6 e2       	ldi	r30, 0x26	; 38
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	82 95       	swap	r24
    1da8:	8f 70       	andi	r24, 0x0F	; 15
    1daa:	88 2f       	mov	r24, r24
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	81 70       	andi	r24, 0x01	; 1
    1db0:	90 70       	andi	r25, 0x00	; 0
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	31 f4       	brne	.+12     	; 0x1dc2 <ADC_ADCEnumReadSync+0x86>
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dba:	23 ec       	ldi	r18, 0xC3	; 195
    1dbc:	80 35       	cpi	r24, 0x50	; 80
    1dbe:	92 07       	cpc	r25, r18
    1dc0:	50 f3       	brcs	.-44     	; 0x1d96 <ADC_ADCEnumReadSync+0x5a>
        {
            local_u16TimeOut++;
        }
        /* check about flag */
        if(GET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIF_BIT)==1) // flag is set
    1dc2:	e6 e2       	ldi	r30, 0x26	; 38
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	82 95       	swap	r24
    1dca:	8f 70       	andi	r24, 0x0F	; 15
    1dcc:	88 2f       	mov	r24, r24
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	81 70       	andi	r24, 0x01	; 1
    1dd2:	90 70       	andi	r25, 0x00	; 0
    1dd4:	88 23       	and	r24, r24
    1dd6:	81 f0       	breq	.+32     	; 0x1df8 <ADC_ADCEnumReadSync+0xbc>
        {
            /* clear the flag of conversion completed */
            SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIF_BIT);
    1dd8:	a6 e2       	ldi	r26, 0x26	; 38
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e6 e2       	ldi	r30, 0x26	; 38
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	80 61       	ori	r24, 0x10	; 16
    1de4:	8c 93       	st	X, r24
            /* read the digital value */
            *copy_pu16DigitalValue = ADC_u16_ADC_REG;
    1de6:	e4 e2       	ldi	r30, 0x24	; 36
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	91 81       	ldd	r25, Z+1	; 0x01
    1dee:	ed 81       	ldd	r30, Y+5	; 0x05
    1df0:	fe 81       	ldd	r31, Y+6	; 0x06
    1df2:	91 83       	std	Z+1, r25	; 0x01
    1df4:	80 83       	st	Z, r24
    1df6:	05 c0       	rjmp	.+10     	; 0x1e02 <ADC_ADCEnumReadSync+0xc6>
        }
        else
        {
            local_ADCEnumErrorState = ADC_Read_NOK;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	8b 83       	std	Y+3, r24	; 0x03
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <ADC_ADCEnumReadSync+0xc6>
        }
    }
    else
    {
        local_ADCEnumErrorState = ADC_Read_NOK;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	8b 83       	std	Y+3, r24	; 0x03
    }
    return local_ADCEnumErrorState;
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e04:	26 96       	adiw	r28, 0x06	; 6
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <ADC_ADCEnumReadAsync>:

ADCEnum ADC_ADCEnumReadAsync(u8 copy_u8Channel,pu16 copy_pu16DigitalValue,void (*copy_pf)(void))
{
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	00 d0       	rcall	.+0      	; 0x1e1c <ADC_ADCEnumReadAsync+0x6>
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <ADC_ADCEnumReadAsync+0x8>
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <ADC_ADCEnumReadAsync+0xa>
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	8a 83       	std	Y+2, r24	; 0x02
    1e26:	7c 83       	std	Y+4, r23	; 0x04
    1e28:	6b 83       	std	Y+3, r22	; 0x03
    1e2a:	5e 83       	std	Y+6, r21	; 0x06
    1e2c:	4d 83       	std	Y+5, r20	; 0x05
    ADCEnum local_ADCEnumErrorState = ADC_Read_OK;
    1e2e:	19 82       	std	Y+1, r1	; 0x01
    /* check about input parameters and the global busy flag */
    if((copy_u8Channel <= ADC_CHANNEL_7) && (copy_pu16DigitalValue != NULL) && (copy_pu16DigitalValue != NULL) && (ADC_u8Flag == 0))
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	88 30       	cpi	r24, 0x08	; 8
    1e34:	d8 f5       	brcc	.+118    	; 0x1eac <ADC_ADCEnumReadAsync+0x96>
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	b9 f1       	breq	.+110    	; 0x1eac <ADC_ADCEnumReadAsync+0x96>
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	9c 81       	ldd	r25, Y+4	; 0x04
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	99 f1       	breq	.+102    	; 0x1eac <ADC_ADCEnumReadAsync+0x96>
    1e46:	80 91 7e 00 	lds	r24, 0x007E
    1e4a:	88 23       	and	r24, r24
    1e4c:	79 f5       	brne	.+94     	; 0x1eac <ADC_ADCEnumReadAsync+0x96>
    {
        /* set the busy flag */
        ADC_u8Flag = 1;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	80 93 7e 00 	sts	0x007E, r24
        /* update the global pointer to function */
        ADC_pf = copy_pf;
    1e54:	8d 81       	ldd	r24, Y+5	; 0x05
    1e56:	9e 81       	ldd	r25, Y+6	; 0x06
    1e58:	90 93 80 00 	sts	0x0080, r25
    1e5c:	80 93 7f 00 	sts	0x007F, r24
        /* to save the selection of the voltage and the adjust on ADMUX register */
        ADC_u8_ADMUX_REG &= 0b11100000;
    1e60:	a7 e2       	ldi	r26, 0x27	; 39
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e7 e2       	ldi	r30, 0x27	; 39
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	80 7e       	andi	r24, 0xE0	; 224
    1e6c:	8c 93       	st	X, r24
        /* then update the channel number in the register */
        ADC_u8_ADMUX_REG |= copy_u8Channel;
    1e6e:	a7 e2       	ldi	r26, 0x27	; 39
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e7 e2       	ldi	r30, 0x27	; 39
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	90 81       	ld	r25, Z
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	89 2b       	or	r24, r25
    1e7c:	8c 93       	st	X, r24
        /* enable the ADC interrupt */
        SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIE_BIT);
    1e7e:	a6 e2       	ldi	r26, 0x26	; 38
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e6 e2       	ldi	r30, 0x26	; 38
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	88 60       	ori	r24, 0x08	; 8
    1e8a:	8c 93       	st	X, r24
        /* to start conversion */
        SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADSC_BIT);
    1e8c:	a6 e2       	ldi	r26, 0x26	; 38
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e6 e2       	ldi	r30, 0x26	; 38
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	80 64       	ori	r24, 0x40	; 64
    1e98:	8c 93       	st	X, r24
        *copy_pu16DigitalValue = ADC_u16Result;
    1e9a:	80 91 81 00 	lds	r24, 0x0081
    1e9e:	90 91 82 00 	lds	r25, 0x0082
    1ea2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ea4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ea6:	91 83       	std	Z+1, r25	; 0x01
    1ea8:	80 83       	st	Z, r24
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <ADC_ADCEnumReadAsync+0x9a>
    }
    else
    {
        local_ADCEnumErrorState = ADC_Read_NOK;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	89 83       	std	Y+1, r24	; 0x01
    }
    return local_ADCEnumErrorState;
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eb2:	26 96       	adiw	r28, 0x06	; 6
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	08 95       	ret

00001ec4 <__vector_16>:

/* ISR function for ADC */
void __vector_16(void)     __attribute__((signal));
void __vector_16(void)
{
    1ec4:	1f 92       	push	r1
    1ec6:	0f 92       	push	r0
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	0f 92       	push	r0
    1ecc:	11 24       	eor	r1, r1
    1ece:	2f 93       	push	r18
    1ed0:	3f 93       	push	r19
    1ed2:	4f 93       	push	r20
    1ed4:	5f 93       	push	r21
    1ed6:	6f 93       	push	r22
    1ed8:	7f 93       	push	r23
    1eda:	8f 93       	push	r24
    1edc:	9f 93       	push	r25
    1ede:	af 93       	push	r26
    1ee0:	bf 93       	push	r27
    1ee2:	ef 93       	push	r30
    1ee4:	ff 93       	push	r31
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    /* read the digital value  */
    ADC_u16Result = ADC_u16_ADC_REG;
    1eee:	e4 e2       	ldi	r30, 0x24	; 36
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	91 81       	ldd	r25, Z+1	; 0x01
    1ef6:	90 93 82 00 	sts	0x0082, r25
    1efa:	80 93 81 00 	sts	0x0081, r24
    /* clear the busy flag */
    ADC_u8Flag = 0;
    1efe:	10 92 7e 00 	sts	0x007E, r1
    /* clear the interrupt */
    CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADIE_BIT);
    1f02:	a6 e2       	ldi	r26, 0x26	; 38
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e6 e2       	ldi	r30, 0x26	; 38
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	87 7f       	andi	r24, 0xF7	; 247
    1f0e:	8c 93       	st	X, r24
    /* call the global pointer to function */
    ADC_pf();
    1f10:	e0 91 7f 00 	lds	r30, 0x007F
    1f14:	f0 91 80 00 	lds	r31, 0x0080
    1f18:	09 95       	icall
}
    1f1a:	cf 91       	pop	r28
    1f1c:	df 91       	pop	r29
    1f1e:	ff 91       	pop	r31
    1f20:	ef 91       	pop	r30
    1f22:	bf 91       	pop	r27
    1f24:	af 91       	pop	r26
    1f26:	9f 91       	pop	r25
    1f28:	8f 91       	pop	r24
    1f2a:	7f 91       	pop	r23
    1f2c:	6f 91       	pop	r22
    1f2e:	5f 91       	pop	r21
    1f30:	4f 91       	pop	r20
    1f32:	3f 91       	pop	r19
    1f34:	2f 91       	pop	r18
    1f36:	0f 90       	pop	r0
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	0f 90       	pop	r0
    1f3c:	1f 90       	pop	r1
    1f3e:	18 95       	reti

00001f40 <LCD_voidInit>:
#include "../Include/LCD_config.h"
#define F_CPU    8000000UL
#include <util/delay.h>

void LCD_voidInit(void)
{
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	e8 97       	sbiw	r28, 0x38	; 56
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	a8 e4       	ldi	r26, 0x48	; 72
    1f5a:	b2 e4       	ldi	r27, 0x42	; 66
    1f5c:	8d ab       	std	Y+53, r24	; 0x35
    1f5e:	9e ab       	std	Y+54, r25	; 0x36
    1f60:	af ab       	std	Y+55, r26	; 0x37
    1f62:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f64:	6d a9       	ldd	r22, Y+53	; 0x35
    1f66:	7e a9       	ldd	r23, Y+54	; 0x36
    1f68:	8f a9       	ldd	r24, Y+55	; 0x37
    1f6a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	4a ef       	ldi	r20, 0xFA	; 250
    1f72:	54 e4       	ldi	r21, 0x44	; 68
    1f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	89 ab       	std	Y+49, r24	; 0x31
    1f7e:	9a ab       	std	Y+50, r25	; 0x32
    1f80:	ab ab       	std	Y+51, r26	; 0x33
    1f82:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f84:	69 a9       	ldd	r22, Y+49	; 0x31
    1f86:	7a a9       	ldd	r23, Y+50	; 0x32
    1f88:	8b a9       	ldd	r24, Y+51	; 0x33
    1f8a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e8       	ldi	r20, 0x80	; 128
    1f92:	5f e3       	ldi	r21, 0x3F	; 63
    1f94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f98:	88 23       	and	r24, r24
    1f9a:	2c f4       	brge	.+10     	; 0x1fa6 <LCD_voidInit+0x66>
		__ticks = 1;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	98 ab       	std	Y+48, r25	; 0x30
    1fa2:	8f a7       	std	Y+47, r24	; 0x2f
    1fa4:	3f c0       	rjmp	.+126    	; 0x2024 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1fa6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fa8:	7a a9       	ldd	r23, Y+50	; 0x32
    1faa:	8b a9       	ldd	r24, Y+51	; 0x33
    1fac:	9c a9       	ldd	r25, Y+52	; 0x34
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	3f ef       	ldi	r19, 0xFF	; 255
    1fb2:	4f e7       	ldi	r20, 0x7F	; 127
    1fb4:	57 e4       	ldi	r21, 0x47	; 71
    1fb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fba:	18 16       	cp	r1, r24
    1fbc:	4c f5       	brge	.+82     	; 0x2010 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbe:	6d a9       	ldd	r22, Y+53	; 0x35
    1fc0:	7e a9       	ldd	r23, Y+54	; 0x36
    1fc2:	8f a9       	ldd	r24, Y+55	; 0x37
    1fc4:	98 ad       	ldd	r25, Y+56	; 0x38
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e2       	ldi	r20, 0x20	; 32
    1fcc:	51 e4       	ldi	r21, 0x41	; 65
    1fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	cd 01       	movw	r24, r26
    1fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	98 ab       	std	Y+48, r25	; 0x30
    1fe4:	8f a7       	std	Y+47, r24	; 0x2f
    1fe6:	0f c0       	rjmp	.+30     	; 0x2006 <LCD_voidInit+0xc6>
    1fe8:	88 ec       	ldi	r24, 0xC8	; 200
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	9e a7       	std	Y+46, r25	; 0x2e
    1fee:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ff0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ff2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <LCD_voidInit+0xb4>
    1ff8:	9e a7       	std	Y+46, r25	; 0x2e
    1ffa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ffe:	98 a9       	ldd	r25, Y+48	; 0x30
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	98 ab       	std	Y+48, r25	; 0x30
    2004:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2006:	8f a5       	ldd	r24, Y+47	; 0x2f
    2008:	98 a9       	ldd	r25, Y+48	; 0x30
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	69 f7       	brne	.-38     	; 0x1fe8 <LCD_voidInit+0xa8>
    200e:	14 c0       	rjmp	.+40     	; 0x2038 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2010:	69 a9       	ldd	r22, Y+49	; 0x31
    2012:	7a a9       	ldd	r23, Y+50	; 0x32
    2014:	8b a9       	ldd	r24, Y+51	; 0x33
    2016:	9c a9       	ldd	r25, Y+52	; 0x34
    2018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	98 ab       	std	Y+48, r25	; 0x30
    2022:	8f a7       	std	Y+47, r24	; 0x2f
    2024:	8f a5       	ldd	r24, Y+47	; 0x2f
    2026:	98 a9       	ldd	r25, Y+48	; 0x30
    2028:	9c a7       	std	Y+44, r25	; 0x2c
    202a:	8b a7       	std	Y+43, r24	; 0x2b
    202c:	8b a5       	ldd	r24, Y+43	; 0x2b
    202e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <LCD_voidInit+0xf0>
    2034:	9c a7       	std	Y+44, r25	; 0x2c
    2036:	8b a7       	std	Y+43, r24	; 0x2b
    /* delay more than 30 msec */
    _delay_ms(50);
    LCD_voidSendCommand(LCD_u8_CURSOR_HOME);
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_voidSendCommand>
    #if   LCD_u8_MODE == LCD_u8_MODE_8_BIT
        /* function set => call send_command func */
        LCD_voidSendCommand(LCD_u8_8B_Mode);
    #elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
        /* function set => call send_command func */
        LCD_voidSendCommand(LCD_u8_4B_Mode);
    203e:	88 e2       	ldi	r24, 0x28	; 40
    2040:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_voidSendCommand>
    #endif 
    /* display clear => call send_command func */
    LCD_voidSendCommand(LCD_u8_DISPLAY_CLEAR);
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_voidSendCommand>
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	a0 e8       	ldi	r26, 0x80	; 128
    2050:	b0 e4       	ldi	r27, 0x40	; 64
    2052:	8f a3       	std	Y+39, r24	; 0x27
    2054:	98 a7       	std	Y+40, r25	; 0x28
    2056:	a9 a7       	std	Y+41, r26	; 0x29
    2058:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205a:	6f a1       	ldd	r22, Y+39	; 0x27
    205c:	78 a5       	ldd	r23, Y+40	; 0x28
    205e:	89 a5       	ldd	r24, Y+41	; 0x29
    2060:	9a a5       	ldd	r25, Y+42	; 0x2a
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	4a ef       	ldi	r20, 0xFA	; 250
    2068:	54 e4       	ldi	r21, 0x44	; 68
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	8b a3       	std	Y+35, r24	; 0x23
    2074:	9c a3       	std	Y+36, r25	; 0x24
    2076:	ad a3       	std	Y+37, r26	; 0x25
    2078:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    207a:	6b a1       	ldd	r22, Y+35	; 0x23
    207c:	7c a1       	ldd	r23, Y+36	; 0x24
    207e:	8d a1       	ldd	r24, Y+37	; 0x25
    2080:	9e a1       	ldd	r25, Y+38	; 0x26
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e8       	ldi	r20, 0x80	; 128
    2088:	5f e3       	ldi	r21, 0x3F	; 63
    208a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    208e:	88 23       	and	r24, r24
    2090:	2c f4       	brge	.+10     	; 0x209c <LCD_voidInit+0x15c>
		__ticks = 1;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9a a3       	std	Y+34, r25	; 0x22
    2098:	89 a3       	std	Y+33, r24	; 0x21
    209a:	3f c0       	rjmp	.+126    	; 0x211a <LCD_voidInit+0x1da>
	else if (__tmp > 65535)
    209c:	6b a1       	ldd	r22, Y+35	; 0x23
    209e:	7c a1       	ldd	r23, Y+36	; 0x24
    20a0:	8d a1       	ldd	r24, Y+37	; 0x25
    20a2:	9e a1       	ldd	r25, Y+38	; 0x26
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	3f ef       	ldi	r19, 0xFF	; 255
    20a8:	4f e7       	ldi	r20, 0x7F	; 127
    20aa:	57 e4       	ldi	r21, 0x47	; 71
    20ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b0:	18 16       	cp	r1, r24
    20b2:	4c f5       	brge	.+82     	; 0x2106 <LCD_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b4:	6f a1       	ldd	r22, Y+39	; 0x27
    20b6:	78 a5       	ldd	r23, Y+40	; 0x28
    20b8:	89 a5       	ldd	r24, Y+41	; 0x29
    20ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e2       	ldi	r20, 0x20	; 32
    20c2:	51 e4       	ldi	r21, 0x41	; 65
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	bc 01       	movw	r22, r24
    20ce:	cd 01       	movw	r24, r26
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9a a3       	std	Y+34, r25	; 0x22
    20da:	89 a3       	std	Y+33, r24	; 0x21
    20dc:	0f c0       	rjmp	.+30     	; 0x20fc <LCD_voidInit+0x1bc>
    20de:	88 ec       	ldi	r24, 0xC8	; 200
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	98 a3       	std	Y+32, r25	; 0x20
    20e4:	8f 8f       	std	Y+31, r24	; 0x1f
    20e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20e8:	98 a1       	ldd	r25, Y+32	; 0x20
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <LCD_voidInit+0x1aa>
    20ee:	98 a3       	std	Y+32, r25	; 0x20
    20f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f2:	89 a1       	ldd	r24, Y+33	; 0x21
    20f4:	9a a1       	ldd	r25, Y+34	; 0x22
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	9a a3       	std	Y+34, r25	; 0x22
    20fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fc:	89 a1       	ldd	r24, Y+33	; 0x21
    20fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	69 f7       	brne	.-38     	; 0x20de <LCD_voidInit+0x19e>
    2104:	14 c0       	rjmp	.+40     	; 0x212e <LCD_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2106:	6b a1       	ldd	r22, Y+35	; 0x23
    2108:	7c a1       	ldd	r23, Y+36	; 0x24
    210a:	8d a1       	ldd	r24, Y+37	; 0x25
    210c:	9e a1       	ldd	r25, Y+38	; 0x26
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9a a3       	std	Y+34, r25	; 0x22
    2118:	89 a3       	std	Y+33, r24	; 0x21
    211a:	89 a1       	ldd	r24, Y+33	; 0x21
    211c:	9a a1       	ldd	r25, Y+34	; 0x22
    211e:	9e 8f       	std	Y+30, r25	; 0x1e
    2120:	8d 8f       	std	Y+29, r24	; 0x1d
    2122:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2124:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <LCD_voidInit+0x1e6>
    212a:	9e 8f       	std	Y+30, r25	; 0x1e
    212c:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(4);
    /* entry mode => call send_command func */
    LCD_voidSendCommand(LCD_u8_ENTRY_Mode);
    212e:	86 e0       	ldi	r24, 0x06	; 6
    2130:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_voidSendCommand>
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	a0 e8       	ldi	r26, 0x80	; 128
    213a:	bf e3       	ldi	r27, 0x3F	; 63
    213c:	89 8f       	std	Y+25, r24	; 0x19
    213e:	9a 8f       	std	Y+26, r25	; 0x1a
    2140:	ab 8f       	std	Y+27, r26	; 0x1b
    2142:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2144:	69 8d       	ldd	r22, Y+25	; 0x19
    2146:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2148:	8b 8d       	ldd	r24, Y+27	; 0x1b
    214a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	4a ef       	ldi	r20, 0xFA	; 250
    2152:	54 e4       	ldi	r21, 0x44	; 68
    2154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	8d 8b       	std	Y+21, r24	; 0x15
    215e:	9e 8b       	std	Y+22, r25	; 0x16
    2160:	af 8b       	std	Y+23, r26	; 0x17
    2162:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2164:	6d 89       	ldd	r22, Y+21	; 0x15
    2166:	7e 89       	ldd	r23, Y+22	; 0x16
    2168:	8f 89       	ldd	r24, Y+23	; 0x17
    216a:	98 8d       	ldd	r25, Y+24	; 0x18
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e8       	ldi	r20, 0x80	; 128
    2172:	5f e3       	ldi	r21, 0x3F	; 63
    2174:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2178:	88 23       	and	r24, r24
    217a:	2c f4       	brge	.+10     	; 0x2186 <LCD_voidInit+0x246>
		__ticks = 1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	9c 8b       	std	Y+20, r25	; 0x14
    2182:	8b 8b       	std	Y+19, r24	; 0x13
    2184:	3f c0       	rjmp	.+126    	; 0x2204 <LCD_voidInit+0x2c4>
	else if (__tmp > 65535)
    2186:	6d 89       	ldd	r22, Y+21	; 0x15
    2188:	7e 89       	ldd	r23, Y+22	; 0x16
    218a:	8f 89       	ldd	r24, Y+23	; 0x17
    218c:	98 8d       	ldd	r25, Y+24	; 0x18
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	3f ef       	ldi	r19, 0xFF	; 255
    2192:	4f e7       	ldi	r20, 0x7F	; 127
    2194:	57 e4       	ldi	r21, 0x47	; 71
    2196:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    219a:	18 16       	cp	r1, r24
    219c:	4c f5       	brge	.+82     	; 0x21f0 <LCD_voidInit+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219e:	69 8d       	ldd	r22, Y+25	; 0x19
    21a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e2       	ldi	r20, 0x20	; 32
    21ac:	51 e4       	ldi	r21, 0x41	; 65
    21ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	9c 8b       	std	Y+20, r25	; 0x14
    21c4:	8b 8b       	std	Y+19, r24	; 0x13
    21c6:	0f c0       	rjmp	.+30     	; 0x21e6 <LCD_voidInit+0x2a6>
    21c8:	88 ec       	ldi	r24, 0xC8	; 200
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	9a 8b       	std	Y+18, r25	; 0x12
    21ce:	89 8b       	std	Y+17, r24	; 0x11
    21d0:	89 89       	ldd	r24, Y+17	; 0x11
    21d2:	9a 89       	ldd	r25, Y+18	; 0x12
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <LCD_voidInit+0x294>
    21d8:	9a 8b       	std	Y+18, r25	; 0x12
    21da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21dc:	8b 89       	ldd	r24, Y+19	; 0x13
    21de:	9c 89       	ldd	r25, Y+20	; 0x14
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	9c 8b       	std	Y+20, r25	; 0x14
    21e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e6:	8b 89       	ldd	r24, Y+19	; 0x13
    21e8:	9c 89       	ldd	r25, Y+20	; 0x14
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	69 f7       	brne	.-38     	; 0x21c8 <LCD_voidInit+0x288>
    21ee:	14 c0       	rjmp	.+40     	; 0x2218 <LCD_voidInit+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f0:	6d 89       	ldd	r22, Y+21	; 0x15
    21f2:	7e 89       	ldd	r23, Y+22	; 0x16
    21f4:	8f 89       	ldd	r24, Y+23	; 0x17
    21f6:	98 8d       	ldd	r25, Y+24	; 0x18
    21f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	9c 8b       	std	Y+20, r25	; 0x14
    2202:	8b 8b       	std	Y+19, r24	; 0x13
    2204:	8b 89       	ldd	r24, Y+19	; 0x13
    2206:	9c 89       	ldd	r25, Y+20	; 0x14
    2208:	98 8b       	std	Y+16, r25	; 0x10
    220a:	8f 87       	std	Y+15, r24	; 0x0f
    220c:	8f 85       	ldd	r24, Y+15	; 0x0f
    220e:	98 89       	ldd	r25, Y+16	; 0x10
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <LCD_voidInit+0x2d0>
    2214:	98 8b       	std	Y+16, r25	; 0x10
    2216:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);  
    /* display uursor on/off control => call send_command func */
    LCD_voidSendCommand(LCD_u8_DISPLAY_CURSOR_ON);
    2218:	8c e0       	ldi	r24, 0x0C	; 12
    221a:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_voidSendCommand>
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	a0 e8       	ldi	r26, 0x80	; 128
    2224:	bf e3       	ldi	r27, 0x3F	; 63
    2226:	8b 87       	std	Y+11, r24	; 0x0b
    2228:	9c 87       	std	Y+12, r25	; 0x0c
    222a:	ad 87       	std	Y+13, r26	; 0x0d
    222c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2230:	7c 85       	ldd	r23, Y+12	; 0x0c
    2232:	8d 85       	ldd	r24, Y+13	; 0x0d
    2234:	9e 85       	ldd	r25, Y+14	; 0x0e
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	4a ef       	ldi	r20, 0xFA	; 250
    223c:	54 e4       	ldi	r21, 0x44	; 68
    223e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	8f 83       	std	Y+7, r24	; 0x07
    2248:	98 87       	std	Y+8, r25	; 0x08
    224a:	a9 87       	std	Y+9, r26	; 0x09
    224c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    224e:	6f 81       	ldd	r22, Y+7	; 0x07
    2250:	78 85       	ldd	r23, Y+8	; 0x08
    2252:	89 85       	ldd	r24, Y+9	; 0x09
    2254:	9a 85       	ldd	r25, Y+10	; 0x0a
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	40 e8       	ldi	r20, 0x80	; 128
    225c:	5f e3       	ldi	r21, 0x3F	; 63
    225e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2262:	88 23       	and	r24, r24
    2264:	2c f4       	brge	.+10     	; 0x2270 <LCD_voidInit+0x330>
		__ticks = 1;
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	9e 83       	std	Y+6, r25	; 0x06
    226c:	8d 83       	std	Y+5, r24	; 0x05
    226e:	3f c0       	rjmp	.+126    	; 0x22ee <LCD_voidInit+0x3ae>
	else if (__tmp > 65535)
    2270:	6f 81       	ldd	r22, Y+7	; 0x07
    2272:	78 85       	ldd	r23, Y+8	; 0x08
    2274:	89 85       	ldd	r24, Y+9	; 0x09
    2276:	9a 85       	ldd	r25, Y+10	; 0x0a
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	3f ef       	ldi	r19, 0xFF	; 255
    227c:	4f e7       	ldi	r20, 0x7F	; 127
    227e:	57 e4       	ldi	r21, 0x47	; 71
    2280:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2284:	18 16       	cp	r1, r24
    2286:	4c f5       	brge	.+82     	; 0x22da <LCD_voidInit+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2288:	6b 85       	ldd	r22, Y+11	; 0x0b
    228a:	7c 85       	ldd	r23, Y+12	; 0x0c
    228c:	8d 85       	ldd	r24, Y+13	; 0x0d
    228e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	40 e2       	ldi	r20, 0x20	; 32
    2296:	51 e4       	ldi	r21, 0x41	; 65
    2298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	bc 01       	movw	r22, r24
    22a2:	cd 01       	movw	r24, r26
    22a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	9e 83       	std	Y+6, r25	; 0x06
    22ae:	8d 83       	std	Y+5, r24	; 0x05
    22b0:	0f c0       	rjmp	.+30     	; 0x22d0 <LCD_voidInit+0x390>
    22b2:	88 ec       	ldi	r24, 0xC8	; 200
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	9c 83       	std	Y+4, r25	; 0x04
    22b8:	8b 83       	std	Y+3, r24	; 0x03
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	9c 81       	ldd	r25, Y+4	; 0x04
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	f1 f7       	brne	.-4      	; 0x22be <LCD_voidInit+0x37e>
    22c2:	9c 83       	std	Y+4, r25	; 0x04
    22c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c6:	8d 81       	ldd	r24, Y+5	; 0x05
    22c8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	9e 83       	std	Y+6, r25	; 0x06
    22ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d0:	8d 81       	ldd	r24, Y+5	; 0x05
    22d2:	9e 81       	ldd	r25, Y+6	; 0x06
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	69 f7       	brne	.-38     	; 0x22b2 <LCD_voidInit+0x372>
    22d8:	14 c0       	rjmp	.+40     	; 0x2302 <LCD_voidInit+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22da:	6f 81       	ldd	r22, Y+7	; 0x07
    22dc:	78 85       	ldd	r23, Y+8	; 0x08
    22de:	89 85       	ldd	r24, Y+9	; 0x09
    22e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9e 83       	std	Y+6, r25	; 0x06
    22ec:	8d 83       	std	Y+5, r24	; 0x05
    22ee:	8d 81       	ldd	r24, Y+5	; 0x05
    22f0:	9e 81       	ldd	r25, Y+6	; 0x06
    22f2:	9a 83       	std	Y+2, r25	; 0x02
    22f4:	89 83       	std	Y+1, r24	; 0x01
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	9a 81       	ldd	r25, Y+2	; 0x02
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <LCD_voidInit+0x3ba>
    22fe:	9a 83       	std	Y+2, r25	; 0x02
    2300:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);  
}
    2302:	e8 96       	adiw	r28, 0x38	; 56
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 copy_u8Comand)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	6d 97       	sbiw	r28, 0x1d	; 29
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	8d 8f       	std	Y+29, r24	; 0x1d
    /* write 0 to RS pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	60 e0       	ldi	r22, 0x00	; 0
    232e:	40 e0       	ldi	r20, 0x00	; 0
    2330:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_DioEnumWriteChannel>
    /* write 0 to RW pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	61 e0       	ldi	r22, 0x01	; 1
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_DioEnumWriteChannel>
    /* write 1 to enable pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	62 e0       	ldi	r22, 0x02	; 2
    2342:	41 e0       	ldi	r20, 0x01	; 1
    2344:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_DioEnumWriteChannel>
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    #elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
        /* write the command to Data Port => 4_Bit high */
        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Comand);
    2348:	82 e0       	ldi	r24, 0x02	; 2
    234a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    234c:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <DIO_DioEnumWritePort>
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	62 e0       	ldi	r22, 0x02	; 2
    2354:	40 e0       	ldi	r20, 0x00	; 0
    2356:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_DioEnumWriteChannel>
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	a0 e8       	ldi	r26, 0x80	; 128
    2360:	bf e3       	ldi	r27, 0x3F	; 63
    2362:	89 8f       	std	Y+25, r24	; 0x19
    2364:	9a 8f       	std	Y+26, r25	; 0x1a
    2366:	ab 8f       	std	Y+27, r26	; 0x1b
    2368:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236a:	69 8d       	ldd	r22, Y+25	; 0x19
    236c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    236e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2370:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	4a ef       	ldi	r20, 0xFA	; 250
    2378:	54 e4       	ldi	r21, 0x44	; 68
    237a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	8d 8b       	std	Y+21, r24	; 0x15
    2384:	9e 8b       	std	Y+22, r25	; 0x16
    2386:	af 8b       	std	Y+23, r26	; 0x17
    2388:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    238a:	6d 89       	ldd	r22, Y+21	; 0x15
    238c:	7e 89       	ldd	r23, Y+22	; 0x16
    238e:	8f 89       	ldd	r24, Y+23	; 0x17
    2390:	98 8d       	ldd	r25, Y+24	; 0x18
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e8       	ldi	r20, 0x80	; 128
    2398:	5f e3       	ldi	r21, 0x3F	; 63
    239a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    239e:	88 23       	and	r24, r24
    23a0:	2c f4       	brge	.+10     	; 0x23ac <LCD_voidSendCommand+0x98>
		__ticks = 1;
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	9c 8b       	std	Y+20, r25	; 0x14
    23a8:	8b 8b       	std	Y+19, r24	; 0x13
    23aa:	3f c0       	rjmp	.+126    	; 0x242a <LCD_voidSendCommand+0x116>
	else if (__tmp > 65535)
    23ac:	6d 89       	ldd	r22, Y+21	; 0x15
    23ae:	7e 89       	ldd	r23, Y+22	; 0x16
    23b0:	8f 89       	ldd	r24, Y+23	; 0x17
    23b2:	98 8d       	ldd	r25, Y+24	; 0x18
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	3f ef       	ldi	r19, 0xFF	; 255
    23b8:	4f e7       	ldi	r20, 0x7F	; 127
    23ba:	57 e4       	ldi	r21, 0x47	; 71
    23bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c0:	18 16       	cp	r1, r24
    23c2:	4c f5       	brge	.+82     	; 0x2416 <LCD_voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c4:	69 8d       	ldd	r22, Y+25	; 0x19
    23c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e2       	ldi	r20, 0x20	; 32
    23d2:	51 e4       	ldi	r21, 0x41	; 65
    23d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	bc 01       	movw	r22, r24
    23de:	cd 01       	movw	r24, r26
    23e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	9c 8b       	std	Y+20, r25	; 0x14
    23ea:	8b 8b       	std	Y+19, r24	; 0x13
    23ec:	0f c0       	rjmp	.+30     	; 0x240c <LCD_voidSendCommand+0xf8>
    23ee:	88 ec       	ldi	r24, 0xC8	; 200
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9a 8b       	std	Y+18, r25	; 0x12
    23f4:	89 8b       	std	Y+17, r24	; 0x11
    23f6:	89 89       	ldd	r24, Y+17	; 0x11
    23f8:	9a 89       	ldd	r25, Y+18	; 0x12
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <LCD_voidSendCommand+0xe6>
    23fe:	9a 8b       	std	Y+18, r25	; 0x12
    2400:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2402:	8b 89       	ldd	r24, Y+19	; 0x13
    2404:	9c 89       	ldd	r25, Y+20	; 0x14
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	9c 8b       	std	Y+20, r25	; 0x14
    240a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240c:	8b 89       	ldd	r24, Y+19	; 0x13
    240e:	9c 89       	ldd	r25, Y+20	; 0x14
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	69 f7       	brne	.-38     	; 0x23ee <LCD_voidSendCommand+0xda>
    2414:	14 c0       	rjmp	.+40     	; 0x243e <LCD_voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2416:	6d 89       	ldd	r22, Y+21	; 0x15
    2418:	7e 89       	ldd	r23, Y+22	; 0x16
    241a:	8f 89       	ldd	r24, Y+23	; 0x17
    241c:	98 8d       	ldd	r25, Y+24	; 0x18
    241e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	9c 8b       	std	Y+20, r25	; 0x14
    2428:	8b 8b       	std	Y+19, r24	; 0x13
    242a:	8b 89       	ldd	r24, Y+19	; 0x13
    242c:	9c 89       	ldd	r25, Y+20	; 0x14
    242e:	98 8b       	std	Y+16, r25	; 0x10
    2430:	8f 87       	std	Y+15, r24	; 0x0f
    2432:	8f 85       	ldd	r24, Y+15	; 0x0f
    2434:	98 89       	ldd	r25, Y+16	; 0x10
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <LCD_voidSendCommand+0x122>
    243a:	98 8b       	std	Y+16, r25	; 0x10
    243c:	8f 87       	std	Y+15, r24	; 0x0f
        /* delay 1msec */
        _delay_ms(1);
        /* write the command to Data Port => 4_Bit low */
        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Comand<<4);
    243e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2440:	98 2f       	mov	r25, r24
    2442:	92 95       	swap	r25
    2444:	90 7f       	andi	r25, 0xF0	; 240
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	69 2f       	mov	r22, r25
    244a:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <DIO_DioEnumWritePort>
        /* set enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	62 e0       	ldi	r22, 0x02	; 2
    2452:	41 e0       	ldi	r20, 0x01	; 1
    2454:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_DioEnumWriteChannel>
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	a0 e8       	ldi	r26, 0x80	; 128
    245e:	bf e3       	ldi	r27, 0x3F	; 63
    2460:	8b 87       	std	Y+11, r24	; 0x0b
    2462:	9c 87       	std	Y+12, r25	; 0x0c
    2464:	ad 87       	std	Y+13, r26	; 0x0d
    2466:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2468:	6b 85       	ldd	r22, Y+11	; 0x0b
    246a:	7c 85       	ldd	r23, Y+12	; 0x0c
    246c:	8d 85       	ldd	r24, Y+13	; 0x0d
    246e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	4a ef       	ldi	r20, 0xFA	; 250
    2476:	54 e4       	ldi	r21, 0x44	; 68
    2478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	8f 83       	std	Y+7, r24	; 0x07
    2482:	98 87       	std	Y+8, r25	; 0x08
    2484:	a9 87       	std	Y+9, r26	; 0x09
    2486:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2488:	6f 81       	ldd	r22, Y+7	; 0x07
    248a:	78 85       	ldd	r23, Y+8	; 0x08
    248c:	89 85       	ldd	r24, Y+9	; 0x09
    248e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	40 e8       	ldi	r20, 0x80	; 128
    2496:	5f e3       	ldi	r21, 0x3F	; 63
    2498:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    249c:	88 23       	and	r24, r24
    249e:	2c f4       	brge	.+10     	; 0x24aa <LCD_voidSendCommand+0x196>
		__ticks = 1;
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	9e 83       	std	Y+6, r25	; 0x06
    24a6:	8d 83       	std	Y+5, r24	; 0x05
    24a8:	3f c0       	rjmp	.+126    	; 0x2528 <LCD_voidSendCommand+0x214>
	else if (__tmp > 65535)
    24aa:	6f 81       	ldd	r22, Y+7	; 0x07
    24ac:	78 85       	ldd	r23, Y+8	; 0x08
    24ae:	89 85       	ldd	r24, Y+9	; 0x09
    24b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	3f ef       	ldi	r19, 0xFF	; 255
    24b6:	4f e7       	ldi	r20, 0x7F	; 127
    24b8:	57 e4       	ldi	r21, 0x47	; 71
    24ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24be:	18 16       	cp	r1, r24
    24c0:	4c f5       	brge	.+82     	; 0x2514 <LCD_voidSendCommand+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	40 e2       	ldi	r20, 0x20	; 32
    24d0:	51 e4       	ldi	r21, 0x41	; 65
    24d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	bc 01       	movw	r22, r24
    24dc:	cd 01       	movw	r24, r26
    24de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	9e 83       	std	Y+6, r25	; 0x06
    24e8:	8d 83       	std	Y+5, r24	; 0x05
    24ea:	0f c0       	rjmp	.+30     	; 0x250a <LCD_voidSendCommand+0x1f6>
    24ec:	88 ec       	ldi	r24, 0xC8	; 200
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	9c 83       	std	Y+4, r25	; 0x04
    24f2:	8b 83       	std	Y+3, r24	; 0x03
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	9c 81       	ldd	r25, Y+4	; 0x04
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	f1 f7       	brne	.-4      	; 0x24f8 <LCD_voidSendCommand+0x1e4>
    24fc:	9c 83       	std	Y+4, r25	; 0x04
    24fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2500:	8d 81       	ldd	r24, Y+5	; 0x05
    2502:	9e 81       	ldd	r25, Y+6	; 0x06
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	9e 83       	std	Y+6, r25	; 0x06
    2508:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250a:	8d 81       	ldd	r24, Y+5	; 0x05
    250c:	9e 81       	ldd	r25, Y+6	; 0x06
    250e:	00 97       	sbiw	r24, 0x00	; 0
    2510:	69 f7       	brne	.-38     	; 0x24ec <LCD_voidSendCommand+0x1d8>
    2512:	14 c0       	rjmp	.+40     	; 0x253c <LCD_voidSendCommand+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2514:	6f 81       	ldd	r22, Y+7	; 0x07
    2516:	78 85       	ldd	r23, Y+8	; 0x08
    2518:	89 85       	ldd	r24, Y+9	; 0x09
    251a:	9a 85       	ldd	r25, Y+10	; 0x0a
    251c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	9e 83       	std	Y+6, r25	; 0x06
    2526:	8d 83       	std	Y+5, r24	; 0x05
    2528:	8d 81       	ldd	r24, Y+5	; 0x05
    252a:	9e 81       	ldd	r25, Y+6	; 0x06
    252c:	9a 83       	std	Y+2, r25	; 0x02
    252e:	89 83       	std	Y+1, r24	; 0x01
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	9a 81       	ldd	r25, Y+2	; 0x02
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <LCD_voidSendCommand+0x220>
    2538:	9a 83       	std	Y+2, r25	; 0x02
    253a:	89 83       	std	Y+1, r24	; 0x01
        /* delay 1msec */
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	62 e0       	ldi	r22, 0x02	; 2
    2540:	40 e0       	ldi	r20, 0x00	; 0
    2542:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_DioEnumWriteChannel>
    #endif 
}
    2546:	6d 96       	adiw	r28, 0x1d	; 29
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <LCD_voidDisplayCharacter>:

void LCD_voidDisplayCharacter(u8 copy_u8Data)
{
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	6d 97       	sbiw	r28, 0x1d	; 29
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	de bf       	out	0x3e, r29	; 62
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	cd bf       	out	0x3d, r28	; 61
    256c:	8d 8f       	std	Y+29, r24	; 0x1d
    /* write 1 to RS pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	60 e0       	ldi	r22, 0x00	; 0
    2572:	41 e0       	ldi	r20, 0x01	; 1
    2574:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_DioEnumWriteChannel>
    /* write 0 to RW pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	61 e0       	ldi	r22, 0x01	; 1
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_DioEnumWriteChannel>
    /* write 1 to enable pin */
    DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	62 e0       	ldi	r22, 0x02	; 2
    2586:	41 e0       	ldi	r20, 0x01	; 1
    2588:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_DioEnumWriteChannel>
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    #elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
        /* write the character to Data Port => 4_Bit high */
        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Data);
    258c:	82 e0       	ldi	r24, 0x02	; 2
    258e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2590:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <DIO_DioEnumWritePort>
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	62 e0       	ldi	r22, 0x02	; 2
    2598:	40 e0       	ldi	r20, 0x00	; 0
    259a:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_DioEnumWriteChannel>
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	a0 e8       	ldi	r26, 0x80	; 128
    25a4:	bf e3       	ldi	r27, 0x3F	; 63
    25a6:	89 8f       	std	Y+25, r24	; 0x19
    25a8:	9a 8f       	std	Y+26, r25	; 0x1a
    25aa:	ab 8f       	std	Y+27, r26	; 0x1b
    25ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ae:	69 8d       	ldd	r22, Y+25	; 0x19
    25b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	4a ef       	ldi	r20, 0xFA	; 250
    25bc:	54 e4       	ldi	r21, 0x44	; 68
    25be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	8d 8b       	std	Y+21, r24	; 0x15
    25c8:	9e 8b       	std	Y+22, r25	; 0x16
    25ca:	af 8b       	std	Y+23, r26	; 0x17
    25cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25ce:	6d 89       	ldd	r22, Y+21	; 0x15
    25d0:	7e 89       	ldd	r23, Y+22	; 0x16
    25d2:	8f 89       	ldd	r24, Y+23	; 0x17
    25d4:	98 8d       	ldd	r25, Y+24	; 0x18
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e8       	ldi	r20, 0x80	; 128
    25dc:	5f e3       	ldi	r21, 0x3F	; 63
    25de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25e2:	88 23       	and	r24, r24
    25e4:	2c f4       	brge	.+10     	; 0x25f0 <LCD_voidDisplayCharacter+0x98>
		__ticks = 1;
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	9c 8b       	std	Y+20, r25	; 0x14
    25ec:	8b 8b       	std	Y+19, r24	; 0x13
    25ee:	3f c0       	rjmp	.+126    	; 0x266e <LCD_voidDisplayCharacter+0x116>
	else if (__tmp > 65535)
    25f0:	6d 89       	ldd	r22, Y+21	; 0x15
    25f2:	7e 89       	ldd	r23, Y+22	; 0x16
    25f4:	8f 89       	ldd	r24, Y+23	; 0x17
    25f6:	98 8d       	ldd	r25, Y+24	; 0x18
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	3f ef       	ldi	r19, 0xFF	; 255
    25fc:	4f e7       	ldi	r20, 0x7F	; 127
    25fe:	57 e4       	ldi	r21, 0x47	; 71
    2600:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2604:	18 16       	cp	r1, r24
    2606:	4c f5       	brge	.+82     	; 0x265a <LCD_voidDisplayCharacter+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2608:	69 8d       	ldd	r22, Y+25	; 0x19
    260a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    260c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    260e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e2       	ldi	r20, 0x20	; 32
    2616:	51 e4       	ldi	r21, 0x41	; 65
    2618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	bc 01       	movw	r22, r24
    2622:	cd 01       	movw	r24, r26
    2624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	9c 8b       	std	Y+20, r25	; 0x14
    262e:	8b 8b       	std	Y+19, r24	; 0x13
    2630:	0f c0       	rjmp	.+30     	; 0x2650 <LCD_voidDisplayCharacter+0xf8>
    2632:	88 ec       	ldi	r24, 0xC8	; 200
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	9a 8b       	std	Y+18, r25	; 0x12
    2638:	89 8b       	std	Y+17, r24	; 0x11
    263a:	89 89       	ldd	r24, Y+17	; 0x11
    263c:	9a 89       	ldd	r25, Y+18	; 0x12
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <LCD_voidDisplayCharacter+0xe6>
    2642:	9a 8b       	std	Y+18, r25	; 0x12
    2644:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2646:	8b 89       	ldd	r24, Y+19	; 0x13
    2648:	9c 89       	ldd	r25, Y+20	; 0x14
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	9c 8b       	std	Y+20, r25	; 0x14
    264e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2650:	8b 89       	ldd	r24, Y+19	; 0x13
    2652:	9c 89       	ldd	r25, Y+20	; 0x14
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	69 f7       	brne	.-38     	; 0x2632 <LCD_voidDisplayCharacter+0xda>
    2658:	14 c0       	rjmp	.+40     	; 0x2682 <LCD_voidDisplayCharacter+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265a:	6d 89       	ldd	r22, Y+21	; 0x15
    265c:	7e 89       	ldd	r23, Y+22	; 0x16
    265e:	8f 89       	ldd	r24, Y+23	; 0x17
    2660:	98 8d       	ldd	r25, Y+24	; 0x18
    2662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	9c 8b       	std	Y+20, r25	; 0x14
    266c:	8b 8b       	std	Y+19, r24	; 0x13
    266e:	8b 89       	ldd	r24, Y+19	; 0x13
    2670:	9c 89       	ldd	r25, Y+20	; 0x14
    2672:	98 8b       	std	Y+16, r25	; 0x10
    2674:	8f 87       	std	Y+15, r24	; 0x0f
    2676:	8f 85       	ldd	r24, Y+15	; 0x0f
    2678:	98 89       	ldd	r25, Y+16	; 0x10
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <LCD_voidDisplayCharacter+0x122>
    267e:	98 8b       	std	Y+16, r25	; 0x10
    2680:	8f 87       	std	Y+15, r24	; 0x0f
        /* delay 1msec */
        _delay_ms(1);
        /* write the character to Data Port => 4_Bit low */
        DIO_DioEnumWritePort(LCD_u8_DATA_PORT,copy_u8Data<<4);
    2682:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2684:	98 2f       	mov	r25, r24
    2686:	92 95       	swap	r25
    2688:	90 7f       	andi	r25, 0xF0	; 240
    268a:	82 e0       	ldi	r24, 0x02	; 2
    268c:	69 2f       	mov	r22, r25
    268e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <DIO_DioEnumWritePort>
        /* set enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	62 e0       	ldi	r22, 0x02	; 2
    2696:	41 e0       	ldi	r20, 0x01	; 1
    2698:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_DioEnumWriteChannel>
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	a0 e8       	ldi	r26, 0x80	; 128
    26a2:	bf e3       	ldi	r27, 0x3F	; 63
    26a4:	8b 87       	std	Y+11, r24	; 0x0b
    26a6:	9c 87       	std	Y+12, r25	; 0x0c
    26a8:	ad 87       	std	Y+13, r26	; 0x0d
    26aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	4a ef       	ldi	r20, 0xFA	; 250
    26ba:	54 e4       	ldi	r21, 0x44	; 68
    26bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	8f 83       	std	Y+7, r24	; 0x07
    26c6:	98 87       	std	Y+8, r25	; 0x08
    26c8:	a9 87       	std	Y+9, r26	; 0x09
    26ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26cc:	6f 81       	ldd	r22, Y+7	; 0x07
    26ce:	78 85       	ldd	r23, Y+8	; 0x08
    26d0:	89 85       	ldd	r24, Y+9	; 0x09
    26d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	40 e8       	ldi	r20, 0x80	; 128
    26da:	5f e3       	ldi	r21, 0x3F	; 63
    26dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26e0:	88 23       	and	r24, r24
    26e2:	2c f4       	brge	.+10     	; 0x26ee <LCD_voidDisplayCharacter+0x196>
		__ticks = 1;
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	9e 83       	std	Y+6, r25	; 0x06
    26ea:	8d 83       	std	Y+5, r24	; 0x05
    26ec:	3f c0       	rjmp	.+126    	; 0x276c <LCD_voidDisplayCharacter+0x214>
	else if (__tmp > 65535)
    26ee:	6f 81       	ldd	r22, Y+7	; 0x07
    26f0:	78 85       	ldd	r23, Y+8	; 0x08
    26f2:	89 85       	ldd	r24, Y+9	; 0x09
    26f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	3f ef       	ldi	r19, 0xFF	; 255
    26fa:	4f e7       	ldi	r20, 0x7F	; 127
    26fc:	57 e4       	ldi	r21, 0x47	; 71
    26fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2702:	18 16       	cp	r1, r24
    2704:	4c f5       	brge	.+82     	; 0x2758 <LCD_voidDisplayCharacter+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2706:	6b 85       	ldd	r22, Y+11	; 0x0b
    2708:	7c 85       	ldd	r23, Y+12	; 0x0c
    270a:	8d 85       	ldd	r24, Y+13	; 0x0d
    270c:	9e 85       	ldd	r25, Y+14	; 0x0e
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e2       	ldi	r20, 0x20	; 32
    2714:	51 e4       	ldi	r21, 0x41	; 65
    2716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	bc 01       	movw	r22, r24
    2720:	cd 01       	movw	r24, r26
    2722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	9e 83       	std	Y+6, r25	; 0x06
    272c:	8d 83       	std	Y+5, r24	; 0x05
    272e:	0f c0       	rjmp	.+30     	; 0x274e <LCD_voidDisplayCharacter+0x1f6>
    2730:	88 ec       	ldi	r24, 0xC8	; 200
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	9c 83       	std	Y+4, r25	; 0x04
    2736:	8b 83       	std	Y+3, r24	; 0x03
    2738:	8b 81       	ldd	r24, Y+3	; 0x03
    273a:	9c 81       	ldd	r25, Y+4	; 0x04
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	f1 f7       	brne	.-4      	; 0x273c <LCD_voidDisplayCharacter+0x1e4>
    2740:	9c 83       	std	Y+4, r25	; 0x04
    2742:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2744:	8d 81       	ldd	r24, Y+5	; 0x05
    2746:	9e 81       	ldd	r25, Y+6	; 0x06
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	9e 83       	std	Y+6, r25	; 0x06
    274c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    274e:	8d 81       	ldd	r24, Y+5	; 0x05
    2750:	9e 81       	ldd	r25, Y+6	; 0x06
    2752:	00 97       	sbiw	r24, 0x00	; 0
    2754:	69 f7       	brne	.-38     	; 0x2730 <LCD_voidDisplayCharacter+0x1d8>
    2756:	14 c0       	rjmp	.+40     	; 0x2780 <LCD_voidDisplayCharacter+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2758:	6f 81       	ldd	r22, Y+7	; 0x07
    275a:	78 85       	ldd	r23, Y+8	; 0x08
    275c:	89 85       	ldd	r24, Y+9	; 0x09
    275e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	9e 83       	std	Y+6, r25	; 0x06
    276a:	8d 83       	std	Y+5, r24	; 0x05
    276c:	8d 81       	ldd	r24, Y+5	; 0x05
    276e:	9e 81       	ldd	r25, Y+6	; 0x06
    2770:	9a 83       	std	Y+2, r25	; 0x02
    2772:	89 83       	std	Y+1, r24	; 0x01
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	9a 81       	ldd	r25, Y+2	; 0x02
    2778:	01 97       	sbiw	r24, 0x01	; 1
    277a:	f1 f7       	brne	.-4      	; 0x2778 <LCD_voidDisplayCharacter+0x220>
    277c:	9a 83       	std	Y+2, r25	; 0x02
    277e:	89 83       	std	Y+1, r24	; 0x01
        /* delay 1msec */
        _delay_ms(1);
        /* reset enable pin */
        DIO_DioEnumWriteChannel(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	62 e0       	ldi	r22, 0x02	; 2
    2784:	40 e0       	ldi	r20, 0x00	; 0
    2786:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_DioEnumWriteChannel>
    #endif
}
    278a:	6d 96       	adiw	r28, 0x1d	; 29
    278c:	0f b6       	in	r0, 0x3f	; 63
    278e:	f8 94       	cli
    2790:	de bf       	out	0x3e, r29	; 62
    2792:	0f be       	out	0x3f, r0	; 63
    2794:	cd bf       	out	0x3d, r28	; 61
    2796:	cf 91       	pop	r28
    2798:	df 91       	pop	r29
    279a:	08 95       	ret

0000279c <LCD_voidCreateCustomCharacter>:

void LCD_voidCreateCustomCharacter(pu8 copy_pu8Character,u8 copy_u8PatternIndex,u8 copy_u8Row,u8 copy_u8Col)
{
    279c:	df 93       	push	r29
    279e:	cf 93       	push	r28
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    27a4:	27 97       	sbiw	r28, 0x07	; 7
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	9c 83       	std	Y+4, r25	; 0x04
    27b2:	8b 83       	std	Y+3, r24	; 0x03
    27b4:	6d 83       	std	Y+5, r22	; 0x05
    27b6:	4e 83       	std	Y+6, r20	; 0x06
    27b8:	2f 83       	std	Y+7, r18	; 0x07
    u8 local_u8Count;
    /* to set CGRAM Address: 1- Index * 8 */
    u8 local_u8Adress = copy_u8PatternIndex * 8;
    27ba:	8d 81       	ldd	r24, Y+5	; 0x05
    27bc:	88 2f       	mov	r24, r24
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	88 0f       	add	r24, r24
    27c2:	99 1f       	adc	r25, r25
    27c4:	88 0f       	add	r24, r24
    27c6:	99 1f       	adc	r25, r25
    27c8:	88 0f       	add	r24, r24
    27ca:	99 1f       	adc	r25, r25
    27cc:	89 83       	std	Y+1, r24	; 0x01
    /* 2- set the address in the last special character */
    LCD_voidSendCommand(local_u8Adress + 64);
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	80 5c       	subi	r24, 0xC0	; 192
    27d2:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_voidSendCommand>
    /* to write the data to CGRAM or DDRAM */
    for(local_u8Count = 0;local_u8Count <8;local_u8Count++)
    27d6:	1a 82       	std	Y+2, r1	; 0x02
    27d8:	0e c0       	rjmp	.+28     	; 0x27f6 <LCD_voidCreateCustomCharacter+0x5a>
    {
        LCD_voidDisplayCharacter(copy_pu8Character[local_u8Count]);
    27da:	8a 81       	ldd	r24, Y+2	; 0x02
    27dc:	28 2f       	mov	r18, r24
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	9c 81       	ldd	r25, Y+4	; 0x04
    27e4:	fc 01       	movw	r30, r24
    27e6:	e2 0f       	add	r30, r18
    27e8:	f3 1f       	adc	r31, r19
    27ea:	80 81       	ld	r24, Z
    27ec:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_voidDisplayCharacter>
    /* to set CGRAM Address: 1- Index * 8 */
    u8 local_u8Adress = copy_u8PatternIndex * 8;
    /* 2- set the address in the last special character */
    LCD_voidSendCommand(local_u8Adress + 64);
    /* to write the data to CGRAM or DDRAM */
    for(local_u8Count = 0;local_u8Count <8;local_u8Count++)
    27f0:	8a 81       	ldd	r24, Y+2	; 0x02
    27f2:	8f 5f       	subi	r24, 0xFF	; 255
    27f4:	8a 83       	std	Y+2, r24	; 0x02
    27f6:	8a 81       	ldd	r24, Y+2	; 0x02
    27f8:	88 30       	cpi	r24, 0x08	; 8
    27fa:	78 f3       	brcs	.-34     	; 0x27da <LCD_voidCreateCustomCharacter+0x3e>
    {
        LCD_voidDisplayCharacter(copy_pu8Character[local_u8Count]);
    }
    /* set DDRAM address */
    LCD_voidGoToXY(copy_u8Row,copy_u8Col);
    27fc:	8e 81       	ldd	r24, Y+6	; 0x06
    27fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2800:	0e 94 0e 14 	call	0x281c	; 0x281c <LCD_voidGoToXY>
    /* display the pattern */
    LCD_voidDisplayCharacter(copy_u8PatternIndex);
    2804:	8d 81       	ldd	r24, Y+5	; 0x05
    2806:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_voidDisplayCharacter>
}
    280a:	27 96       	adiw	r28, 0x07	; 7
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	08 95       	ret

0000281c <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 copy_u8Row,u8 copy_u8Col)
{
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	00 d0       	rcall	.+0      	; 0x2822 <LCD_voidGoToXY+0x6>
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	89 83       	std	Y+1, r24	; 0x01
    2828:	6a 83       	std	Y+2, r22	; 0x02
    /* to select the row and the column*/
    LCD_voidSendCommand(LCD_u8_ADRESS + copy_u8Row + copy_u8Col);
    282a:	99 81       	ldd	r25, Y+1	; 0x01
    282c:	8a 81       	ldd	r24, Y+2	; 0x02
    282e:	89 0f       	add	r24, r25
    2830:	80 58       	subi	r24, 0x80	; 128
    2832:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_voidSendCommand>
}
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	cf 91       	pop	r28
    283c:	df 91       	pop	r29
    283e:	08 95       	ret

00002840 <LCD_u8DisplayString>:

u8 LCD_u8DisplayString(pu8 copy_pu8String)
{
    2840:	df 93       	push	r29
    2842:	cf 93       	push	r28
    2844:	00 d0       	rcall	.+0      	; 0x2846 <LCD_u8DisplayString+0x6>
    2846:	00 d0       	rcall	.+0      	; 0x2848 <LCD_u8DisplayString+0x8>
    2848:	cd b7       	in	r28, 0x3d	; 61
    284a:	de b7       	in	r29, 0x3e	; 62
    284c:	9c 83       	std	Y+4, r25	; 0x04
    284e:	8b 83       	std	Y+3, r24	; 0x03
    u8 local_u8ErrorState = STD_TYPES_OK;
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Count = 0;
    2854:	19 82       	std	Y+1, r1	; 0x01
    if(copy_pu8String != NULL)
    2856:	8b 81       	ldd	r24, Y+3	; 0x03
    2858:	9c 81       	ldd	r25, Y+4	; 0x04
    285a:	00 97       	sbiw	r24, 0x00	; 0
    285c:	d9 f0       	breq	.+54     	; 0x2894 <LCD_u8DisplayString+0x54>
    285e:	0e c0       	rjmp	.+28     	; 0x287c <LCD_u8DisplayString+0x3c>
    {
        /* check to the end of the string */
        while(copy_pu8String[local_u8Count] != '\0')
        {
            /* diplay the first character in the string */
           LCD_voidDisplayCharacter(copy_pu8String[local_u8Count]);
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	9c 81       	ldd	r25, Y+4	; 0x04
    286a:	fc 01       	movw	r30, r24
    286c:	e2 0f       	add	r30, r18
    286e:	f3 1f       	adc	r31, r19
    2870:	80 81       	ld	r24, Z
    2872:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_voidDisplayCharacter>
           local_u8Count++; 
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	8f 5f       	subi	r24, 0xFF	; 255
    287a:	89 83       	std	Y+1, r24	; 0x01
    u8 local_u8ErrorState = STD_TYPES_OK;
    u8 local_u8Count = 0;
    if(copy_pu8String != NULL)
    {
        /* check to the end of the string */
        while(copy_pu8String[local_u8Count] != '\0')
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	28 2f       	mov	r18, r24
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	8b 81       	ldd	r24, Y+3	; 0x03
    2884:	9c 81       	ldd	r25, Y+4	; 0x04
    2886:	fc 01       	movw	r30, r24
    2888:	e2 0f       	add	r30, r18
    288a:	f3 1f       	adc	r31, r19
    288c:	80 81       	ld	r24, Z
    288e:	88 23       	and	r24, r24
    2890:	39 f7       	brne	.-50     	; 0x2860 <LCD_u8DisplayString+0x20>
    2892:	01 c0       	rjmp	.+2      	; 0x2896 <LCD_u8DisplayString+0x56>
           local_u8Count++; 
        }
    }
    else
    {
        local_u8ErrorState = STD_TYPES_NOK;
    2894:	1a 82       	std	Y+2, r1	; 0x02
    }
    return local_u8ErrorState;
    2896:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	08 95       	ret

000028a6 <LCD_voidDisplayNumber>:

void LCD_voidDisplayNumber(u32 copy_u32Number)
{
    28a6:	ef 92       	push	r14
    28a8:	ff 92       	push	r15
    28aa:	0f 93       	push	r16
    28ac:	1f 93       	push	r17
    28ae:	df 93       	push	r29
    28b0:	cf 93       	push	r28
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
    28b6:	28 97       	sbiw	r28, 0x08	; 8
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	f8 94       	cli
    28bc:	de bf       	out	0x3e, r29	; 62
    28be:	0f be       	out	0x3f, r0	; 63
    28c0:	cd bf       	out	0x3d, r28	; 61
    28c2:	6d 83       	std	Y+5, r22	; 0x05
    28c4:	7e 83       	std	Y+6, r23	; 0x06
    28c6:	8f 83       	std	Y+7, r24	; 0x07
    28c8:	98 87       	std	Y+8, r25	; 0x08
    u32 local_u8Reserved = 1;
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	a0 e0       	ldi	r26, 0x00	; 0
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	89 83       	std	Y+1, r24	; 0x01
    28d4:	9a 83       	std	Y+2, r25	; 0x02
    28d6:	ab 83       	std	Y+3, r26	; 0x03
    28d8:	bc 83       	std	Y+4, r27	; 0x04
    if(copy_u32Number == 0)
    28da:	8d 81       	ldd	r24, Y+5	; 0x05
    28dc:	9e 81       	ldd	r25, Y+6	; 0x06
    28de:	af 81       	ldd	r26, Y+7	; 0x07
    28e0:	b8 85       	ldd	r27, Y+8	; 0x08
    28e2:	00 97       	sbiw	r24, 0x00	; 0
    28e4:	a1 05       	cpc	r26, r1
    28e6:	b1 05       	cpc	r27, r1
    28e8:	d1 f5       	brne	.+116    	; 0x295e <LCD_voidDisplayNumber+0xb8>
    {
        LCD_voidDisplayCharacter(0);   
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_voidDisplayCharacter>
    28f0:	6a c0       	rjmp	.+212    	; 0x29c6 <LCD_voidDisplayNumber+0x120>
    }
    else
    {
        while(copy_u32Number != 0)
        {
            local_u8Reserved = (local_u8Reserved * 10) + (copy_u32Number % 10);
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	9a 81       	ldd	r25, Y+2	; 0x02
    28f6:	ab 81       	ldd	r26, Y+3	; 0x03
    28f8:	bc 81       	ldd	r27, Y+4	; 0x04
    28fa:	2a e0       	ldi	r18, 0x0A	; 10
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	40 e0       	ldi	r20, 0x00	; 0
    2900:	50 e0       	ldi	r21, 0x00	; 0
    2902:	bc 01       	movw	r22, r24
    2904:	cd 01       	movw	r24, r26
    2906:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <__mulsi3>
    290a:	7b 01       	movw	r14, r22
    290c:	8c 01       	movw	r16, r24
    290e:	8d 81       	ldd	r24, Y+5	; 0x05
    2910:	9e 81       	ldd	r25, Y+6	; 0x06
    2912:	af 81       	ldd	r26, Y+7	; 0x07
    2914:	b8 85       	ldd	r27, Y+8	; 0x08
    2916:	2a e0       	ldi	r18, 0x0A	; 10
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	40 e0       	ldi	r20, 0x00	; 0
    291c:	50 e0       	ldi	r21, 0x00	; 0
    291e:	bc 01       	movw	r22, r24
    2920:	cd 01       	movw	r24, r26
    2922:	0e 94 02 16 	call	0x2c04	; 0x2c04 <__udivmodsi4>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	8e 0d       	add	r24, r14
    292c:	9f 1d       	adc	r25, r15
    292e:	a0 1f       	adc	r26, r16
    2930:	b1 1f       	adc	r27, r17
    2932:	89 83       	std	Y+1, r24	; 0x01
    2934:	9a 83       	std	Y+2, r25	; 0x02
    2936:	ab 83       	std	Y+3, r26	; 0x03
    2938:	bc 83       	std	Y+4, r27	; 0x04
            copy_u32Number /= 10;
    293a:	8d 81       	ldd	r24, Y+5	; 0x05
    293c:	9e 81       	ldd	r25, Y+6	; 0x06
    293e:	af 81       	ldd	r26, Y+7	; 0x07
    2940:	b8 85       	ldd	r27, Y+8	; 0x08
    2942:	2a e0       	ldi	r18, 0x0A	; 10
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	40 e0       	ldi	r20, 0x00	; 0
    2948:	50 e0       	ldi	r21, 0x00	; 0
    294a:	bc 01       	movw	r22, r24
    294c:	cd 01       	movw	r24, r26
    294e:	0e 94 02 16 	call	0x2c04	; 0x2c04 <__udivmodsi4>
    2952:	da 01       	movw	r26, r20
    2954:	c9 01       	movw	r24, r18
    2956:	8d 83       	std	Y+5, r24	; 0x05
    2958:	9e 83       	std	Y+6, r25	; 0x06
    295a:	af 83       	std	Y+7, r26	; 0x07
    295c:	b8 87       	std	Y+8, r27	; 0x08
    {
        LCD_voidDisplayCharacter(0);   
    }
    else
    {
        while(copy_u32Number != 0)
    295e:	8d 81       	ldd	r24, Y+5	; 0x05
    2960:	9e 81       	ldd	r25, Y+6	; 0x06
    2962:	af 81       	ldd	r26, Y+7	; 0x07
    2964:	b8 85       	ldd	r27, Y+8	; 0x08
    2966:	00 97       	sbiw	r24, 0x00	; 0
    2968:	a1 05       	cpc	r26, r1
    296a:	b1 05       	cpc	r27, r1
    296c:	11 f6       	brne	.-124    	; 0x28f2 <LCD_voidDisplayNumber+0x4c>
            local_u8Reserved = (local_u8Reserved * 10) + (copy_u32Number % 10);
            copy_u32Number /= 10;
        }
        do
        {
            LCD_voidDisplayCharacter((local_u8Reserved % 10) + '0');
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	9a 81       	ldd	r25, Y+2	; 0x02
    2972:	ab 81       	ldd	r26, Y+3	; 0x03
    2974:	bc 81       	ldd	r27, Y+4	; 0x04
    2976:	2a e0       	ldi	r18, 0x0A	; 10
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e0       	ldi	r20, 0x00	; 0
    297c:	50 e0       	ldi	r21, 0x00	; 0
    297e:	bc 01       	movw	r22, r24
    2980:	cd 01       	movw	r24, r26
    2982:	0e 94 02 16 	call	0x2c04	; 0x2c04 <__udivmodsi4>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	80 5d       	subi	r24, 0xD0	; 208
    298c:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_voidDisplayCharacter>
            local_u8Reserved /= 10;
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	9a 81       	ldd	r25, Y+2	; 0x02
    2994:	ab 81       	ldd	r26, Y+3	; 0x03
    2996:	bc 81       	ldd	r27, Y+4	; 0x04
    2998:	2a e0       	ldi	r18, 0x0A	; 10
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	40 e0       	ldi	r20, 0x00	; 0
    299e:	50 e0       	ldi	r21, 0x00	; 0
    29a0:	bc 01       	movw	r22, r24
    29a2:	cd 01       	movw	r24, r26
    29a4:	0e 94 02 16 	call	0x2c04	; 0x2c04 <__udivmodsi4>
    29a8:	da 01       	movw	r26, r20
    29aa:	c9 01       	movw	r24, r18
    29ac:	89 83       	std	Y+1, r24	; 0x01
    29ae:	9a 83       	std	Y+2, r25	; 0x02
    29b0:	ab 83       	std	Y+3, r26	; 0x03
    29b2:	bc 83       	std	Y+4, r27	; 0x04
        }while(local_u8Reserved != 1);
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	9a 81       	ldd	r25, Y+2	; 0x02
    29b8:	ab 81       	ldd	r26, Y+3	; 0x03
    29ba:	bc 81       	ldd	r27, Y+4	; 0x04
    29bc:	81 30       	cpi	r24, 0x01	; 1
    29be:	91 05       	cpc	r25, r1
    29c0:	a1 05       	cpc	r26, r1
    29c2:	b1 05       	cpc	r27, r1
    29c4:	a1 f6       	brne	.-88     	; 0x296e <LCD_voidDisplayNumber+0xc8>
    }
}
    29c6:	28 96       	adiw	r28, 0x08	; 8
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	1f 91       	pop	r17
    29d8:	0f 91       	pop	r16
    29da:	ff 90       	pop	r15
    29dc:	ef 90       	pop	r14
    29de:	08 95       	ret

000029e0 <LCD_voidDisplayClear>:

void LCD_voidDisplayClear(void)
{
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(0x01);
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_voidSendCommand>
}
    29ee:	cf 91       	pop	r28
    29f0:	df 91       	pop	r29
    29f2:	08 95       	ret

000029f4 <main>:

void volt_change(void);
u8 EXTI_u8Flag = TRUE;

int main(void)
{
    29f4:	df 93       	push	r29
    29f6:	cf 93       	push	r28
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
    29fc:	28 97       	sbiw	r28, 0x08	; 8
    29fe:	0f b6       	in	r0, 0x3f	; 63
    2a00:	f8 94       	cli
    2a02:	de bf       	out	0x3e, r29	; 62
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	cd bf       	out	0x3d, r28	; 61
	u16 local_u16DigitalValue;
	u16 local_u16AnalogalValue;
	u16 local_u16TempValue;
	u16 local_u16Remainder;
	PORT_voidInit();
    2a08:	0e 94 a3 05 	call	0xb46	; 0xb46 <PORT_voidInit>
	GIE_voidInt(GIE_u8_ENABLE);
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <GIE_voidInt>
	EXTI_EXTIEnumEnable(EXTI_u8_INT_0,EXTI_u8_FALLING);
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	61 e0       	ldi	r22, 0x01	; 1
    2a16:	0e 94 22 09 	call	0x1244	; 0x1244 <EXTI_EXTIEnumEnable>
	ADC_voidInit();
    2a1a:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <ADC_voidInit>
	LCD_voidInit();
    2a1e:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <LCD_voidInit>
	LCD_u8DisplayString("VOLT = ");
    2a22:	80 e6       	ldi	r24, 0x60	; 96
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	0e 94 20 14 	call	0x2840	; 0x2840 <LCD_u8DisplayString>
	while(1)
	{
		if(EXTI_u8Flag == TRUE)
    2a2a:	80 91 76 00 	lds	r24, 0x0076
    2a2e:	81 30       	cpi	r24, 0x01	; 1
    2a30:	e9 f5       	brne	.+122    	; 0x2aac <main+0xb8>
		{
			ADC_ADCEnumReadSync(ADC_CHANNEL_0,&local_u16DigitalValue);
    2a32:	9e 01       	movw	r18, r28
    2a34:	29 5f       	subi	r18, 0xF9	; 249
    2a36:	3f 4f       	sbci	r19, 0xFF	; 255
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	b9 01       	movw	r22, r18
    2a3c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <ADC_ADCEnumReadSync>
			local_u16AnalogalValue = (u16)((local_u16DigitalValue * 5000UL) / 1024);
    2a40:	8f 81       	ldd	r24, Y+7	; 0x07
    2a42:	98 85       	ldd	r25, Y+8	; 0x08
    2a44:	cc 01       	movw	r24, r24
    2a46:	a0 e0       	ldi	r26, 0x00	; 0
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	28 e8       	ldi	r18, 0x88	; 136
    2a4c:	33 e1       	ldi	r19, 0x13	; 19
    2a4e:	40 e0       	ldi	r20, 0x00	; 0
    2a50:	50 e0       	ldi	r21, 0x00	; 0
    2a52:	bc 01       	movw	r22, r24
    2a54:	cd 01       	movw	r24, r26
    2a56:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <__mulsi3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	07 2e       	mov	r0, r23
    2a60:	7a e0       	ldi	r23, 0x0A	; 10
    2a62:	b6 95       	lsr	r27
    2a64:	a7 95       	ror	r26
    2a66:	97 95       	ror	r25
    2a68:	87 95       	ror	r24
    2a6a:	7a 95       	dec	r23
    2a6c:	d1 f7       	brne	.-12     	; 0x2a62 <main+0x6e>
    2a6e:	70 2d       	mov	r23, r0
    2a70:	9e 83       	std	Y+6, r25	; 0x06
    2a72:	8d 83       	std	Y+5, r24	; 0x05
			LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL7);
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	67 e0       	ldi	r22, 0x07	; 7
    2a78:	0e 94 0e 14 	call	0x281c	; 0x281c <LCD_voidGoToXY>
			LCD_voidDisplayNumber(local_u16AnalogalValue);
    2a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a80:	cc 01       	movw	r24, r24
    2a82:	a0 e0       	ldi	r26, 0x00	; 0
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	bc 01       	movw	r22, r24
    2a88:	cd 01       	movw	r24, r26
    2a8a:	0e 94 53 14 	call	0x28a6	; 0x28a6 <LCD_voidDisplayNumber>
			LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL14);
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	6e e0       	ldi	r22, 0x0E	; 14
    2a92:	0e 94 0e 14 	call	0x281c	; 0x281c <LCD_voidGoToXY>
			LCD_u8DisplayString("mv");
    2a96:	88 e6       	ldi	r24, 0x68	; 104
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	0e 94 20 14 	call	0x2840	; 0x2840 <LCD_u8DisplayString>
			EXTI_EXTIEnumSetCallback(EXTI_u8_INT_0,&volt_change);
    2a9e:	2e eb       	ldi	r18, 0xBE	; 190
    2aa0:	35 e1       	ldi	r19, 0x15	; 21
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	b9 01       	movw	r22, r18
    2aa6:	0e 94 87 0a 	call	0x150e	; 0x150e <EXTI_EXTIEnumSetCallback>
    2aaa:	61 c0       	rjmp	.+194    	; 0x2b6e <main+0x17a>
		}
		else
		{
			ADC_ADCEnumReadSync(ADC_CHANNEL_0,&local_u16DigitalValue);
    2aac:	9e 01       	movw	r18, r28
    2aae:	29 5f       	subi	r18, 0xF9	; 249
    2ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	b9 01       	movw	r22, r18
    2ab6:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <ADC_ADCEnumReadSync>
			local_u16AnalogalValue = (u16)((local_u16DigitalValue * 5000UL) / 1024);
    2aba:	8f 81       	ldd	r24, Y+7	; 0x07
    2abc:	98 85       	ldd	r25, Y+8	; 0x08
    2abe:	cc 01       	movw	r24, r24
    2ac0:	a0 e0       	ldi	r26, 0x00	; 0
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	28 e8       	ldi	r18, 0x88	; 136
    2ac6:	33 e1       	ldi	r19, 0x13	; 19
    2ac8:	40 e0       	ldi	r20, 0x00	; 0
    2aca:	50 e0       	ldi	r21, 0x00	; 0
    2acc:	bc 01       	movw	r22, r24
    2ace:	cd 01       	movw	r24, r26
    2ad0:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <__mulsi3>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	07 2e       	mov	r0, r23
    2ada:	7a e0       	ldi	r23, 0x0A	; 10
    2adc:	b6 95       	lsr	r27
    2ade:	a7 95       	ror	r26
    2ae0:	97 95       	ror	r25
    2ae2:	87 95       	ror	r24
    2ae4:	7a 95       	dec	r23
    2ae6:	d1 f7       	brne	.-12     	; 0x2adc <main+0xe8>
    2ae8:	70 2d       	mov	r23, r0
    2aea:	9e 83       	std	Y+6, r25	; 0x06
    2aec:	8d 83       	std	Y+5, r24	; 0x05
			local_u16TempValue = local_u16AnalogalValue / 1000;
    2aee:	8d 81       	ldd	r24, Y+5	; 0x05
    2af0:	9e 81       	ldd	r25, Y+6	; 0x06
    2af2:	28 ee       	ldi	r18, 0xE8	; 232
    2af4:	33 e0       	ldi	r19, 0x03	; 3
    2af6:	b9 01       	movw	r22, r18
    2af8:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__udivmodhi4>
    2afc:	cb 01       	movw	r24, r22
    2afe:	9c 83       	std	Y+4, r25	; 0x04
    2b00:	8b 83       	std	Y+3, r24	; 0x03
			local_u16Remainder = (local_u16AnalogalValue % 1000) / 10;
    2b02:	8d 81       	ldd	r24, Y+5	; 0x05
    2b04:	9e 81       	ldd	r25, Y+6	; 0x06
    2b06:	28 ee       	ldi	r18, 0xE8	; 232
    2b08:	33 e0       	ldi	r19, 0x03	; 3
    2b0a:	b9 01       	movw	r22, r18
    2b0c:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__udivmodhi4>
    2b10:	2a e0       	ldi	r18, 0x0A	; 10
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	b9 01       	movw	r22, r18
    2b16:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__udivmodhi4>
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	9a 83       	std	Y+2, r25	; 0x02
    2b1e:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL7);
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	67 e0       	ldi	r22, 0x07	; 7
    2b24:	0e 94 0e 14 	call	0x281c	; 0x281c <LCD_voidGoToXY>
			LCD_voidDisplayNumber(local_u16TempValue);
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2c:	cc 01       	movw	r24, r24
    2b2e:	a0 e0       	ldi	r26, 0x00	; 0
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	bc 01       	movw	r22, r24
    2b34:	cd 01       	movw	r24, r26
    2b36:	0e 94 53 14 	call	0x28a6	; 0x28a6 <LCD_voidDisplayNumber>
			LCD_voidDisplayCharacter('.');
    2b3a:	8e e2       	ldi	r24, 0x2E	; 46
    2b3c:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_voidDisplayCharacter>
			LCD_voidDisplayNumber(local_u16Remainder);
    2b40:	89 81       	ldd	r24, Y+1	; 0x01
    2b42:	9a 81       	ldd	r25, Y+2	; 0x02
    2b44:	cc 01       	movw	r24, r24
    2b46:	a0 e0       	ldi	r26, 0x00	; 0
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	bc 01       	movw	r22, r24
    2b4c:	cd 01       	movw	r24, r26
    2b4e:	0e 94 53 14 	call	0x28a6	; 0x28a6 <LCD_voidDisplayNumber>
			LCD_voidGoToXY(LCD_u8_ROW1,LCD_u8_COL14);
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	6e e0       	ldi	r22, 0x0E	; 14
    2b56:	0e 94 0e 14 	call	0x281c	; 0x281c <LCD_voidGoToXY>
			LCD_u8DisplayString(" v");
    2b5a:	8b e6       	ldi	r24, 0x6B	; 107
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	0e 94 20 14 	call	0x2840	; 0x2840 <LCD_u8DisplayString>
			EXTI_EXTIEnumSetCallback(EXTI_u8_INT_0,&volt_change);
    2b62:	2e eb       	ldi	r18, 0xBE	; 190
    2b64:	35 e1       	ldi	r19, 0x15	; 21
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	b9 01       	movw	r22, r18
    2b6a:	0e 94 87 0a 	call	0x150e	; 0x150e <EXTI_EXTIEnumSetCallback>
		}
		EXTI_EXTIEnumSetCallback(EXTI_u8_INT_0,&volt_change);
    2b6e:	2e eb       	ldi	r18, 0xBE	; 190
    2b70:	35 e1       	ldi	r19, 0x15	; 21
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	b9 01       	movw	r22, r18
    2b76:	0e 94 87 0a 	call	0x150e	; 0x150e <EXTI_EXTIEnumSetCallback>
    2b7a:	57 cf       	rjmp	.-338    	; 0x2a2a <main+0x36>

00002b7c <volt_change>:
	}
	return 0;
}

void volt_change(void)
{
    2b7c:	df 93       	push	r29
    2b7e:	cf 93       	push	r28
    2b80:	cd b7       	in	r28, 0x3d	; 61
    2b82:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_u8Flag == TRUE)
    2b84:	80 91 76 00 	lds	r24, 0x0076
    2b88:	81 30       	cpi	r24, 0x01	; 1
    2b8a:	19 f4       	brne	.+6      	; 0x2b92 <volt_change+0x16>
	{
		EXTI_u8Flag = FALSE;
    2b8c:	10 92 76 00 	sts	0x0076, r1
    2b90:	03 c0       	rjmp	.+6      	; 0x2b98 <volt_change+0x1c>
	}
	else
	{
		EXTI_u8Flag = TRUE;
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	80 93 76 00 	sts	0x0076, r24
	}
}
    2b98:	cf 91       	pop	r28
    2b9a:	df 91       	pop	r29
    2b9c:	08 95       	ret

00002b9e <__mulsi3>:
    2b9e:	62 9f       	mul	r22, r18
    2ba0:	d0 01       	movw	r26, r0
    2ba2:	73 9f       	mul	r23, r19
    2ba4:	f0 01       	movw	r30, r0
    2ba6:	82 9f       	mul	r24, r18
    2ba8:	e0 0d       	add	r30, r0
    2baa:	f1 1d       	adc	r31, r1
    2bac:	64 9f       	mul	r22, r20
    2bae:	e0 0d       	add	r30, r0
    2bb0:	f1 1d       	adc	r31, r1
    2bb2:	92 9f       	mul	r25, r18
    2bb4:	f0 0d       	add	r31, r0
    2bb6:	83 9f       	mul	r24, r19
    2bb8:	f0 0d       	add	r31, r0
    2bba:	74 9f       	mul	r23, r20
    2bbc:	f0 0d       	add	r31, r0
    2bbe:	65 9f       	mul	r22, r21
    2bc0:	f0 0d       	add	r31, r0
    2bc2:	99 27       	eor	r25, r25
    2bc4:	72 9f       	mul	r23, r18
    2bc6:	b0 0d       	add	r27, r0
    2bc8:	e1 1d       	adc	r30, r1
    2bca:	f9 1f       	adc	r31, r25
    2bcc:	63 9f       	mul	r22, r19
    2bce:	b0 0d       	add	r27, r0
    2bd0:	e1 1d       	adc	r30, r1
    2bd2:	f9 1f       	adc	r31, r25
    2bd4:	bd 01       	movw	r22, r26
    2bd6:	cf 01       	movw	r24, r30
    2bd8:	11 24       	eor	r1, r1
    2bda:	08 95       	ret

00002bdc <__udivmodhi4>:
    2bdc:	aa 1b       	sub	r26, r26
    2bde:	bb 1b       	sub	r27, r27
    2be0:	51 e1       	ldi	r21, 0x11	; 17
    2be2:	07 c0       	rjmp	.+14     	; 0x2bf2 <__udivmodhi4_ep>

00002be4 <__udivmodhi4_loop>:
    2be4:	aa 1f       	adc	r26, r26
    2be6:	bb 1f       	adc	r27, r27
    2be8:	a6 17       	cp	r26, r22
    2bea:	b7 07       	cpc	r27, r23
    2bec:	10 f0       	brcs	.+4      	; 0x2bf2 <__udivmodhi4_ep>
    2bee:	a6 1b       	sub	r26, r22
    2bf0:	b7 0b       	sbc	r27, r23

00002bf2 <__udivmodhi4_ep>:
    2bf2:	88 1f       	adc	r24, r24
    2bf4:	99 1f       	adc	r25, r25
    2bf6:	5a 95       	dec	r21
    2bf8:	a9 f7       	brne	.-22     	; 0x2be4 <__udivmodhi4_loop>
    2bfa:	80 95       	com	r24
    2bfc:	90 95       	com	r25
    2bfe:	bc 01       	movw	r22, r24
    2c00:	cd 01       	movw	r24, r26
    2c02:	08 95       	ret

00002c04 <__udivmodsi4>:
    2c04:	a1 e2       	ldi	r26, 0x21	; 33
    2c06:	1a 2e       	mov	r1, r26
    2c08:	aa 1b       	sub	r26, r26
    2c0a:	bb 1b       	sub	r27, r27
    2c0c:	fd 01       	movw	r30, r26
    2c0e:	0d c0       	rjmp	.+26     	; 0x2c2a <__udivmodsi4_ep>

00002c10 <__udivmodsi4_loop>:
    2c10:	aa 1f       	adc	r26, r26
    2c12:	bb 1f       	adc	r27, r27
    2c14:	ee 1f       	adc	r30, r30
    2c16:	ff 1f       	adc	r31, r31
    2c18:	a2 17       	cp	r26, r18
    2c1a:	b3 07       	cpc	r27, r19
    2c1c:	e4 07       	cpc	r30, r20
    2c1e:	f5 07       	cpc	r31, r21
    2c20:	20 f0       	brcs	.+8      	; 0x2c2a <__udivmodsi4_ep>
    2c22:	a2 1b       	sub	r26, r18
    2c24:	b3 0b       	sbc	r27, r19
    2c26:	e4 0b       	sbc	r30, r20
    2c28:	f5 0b       	sbc	r31, r21

00002c2a <__udivmodsi4_ep>:
    2c2a:	66 1f       	adc	r22, r22
    2c2c:	77 1f       	adc	r23, r23
    2c2e:	88 1f       	adc	r24, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	1a 94       	dec	r1
    2c34:	69 f7       	brne	.-38     	; 0x2c10 <__udivmodsi4_loop>
    2c36:	60 95       	com	r22
    2c38:	70 95       	com	r23
    2c3a:	80 95       	com	r24
    2c3c:	90 95       	com	r25
    2c3e:	9b 01       	movw	r18, r22
    2c40:	ac 01       	movw	r20, r24
    2c42:	bd 01       	movw	r22, r26
    2c44:	cf 01       	movw	r24, r30
    2c46:	08 95       	ret

00002c48 <__prologue_saves__>:
    2c48:	2f 92       	push	r2
    2c4a:	3f 92       	push	r3
    2c4c:	4f 92       	push	r4
    2c4e:	5f 92       	push	r5
    2c50:	6f 92       	push	r6
    2c52:	7f 92       	push	r7
    2c54:	8f 92       	push	r8
    2c56:	9f 92       	push	r9
    2c58:	af 92       	push	r10
    2c5a:	bf 92       	push	r11
    2c5c:	cf 92       	push	r12
    2c5e:	df 92       	push	r13
    2c60:	ef 92       	push	r14
    2c62:	ff 92       	push	r15
    2c64:	0f 93       	push	r16
    2c66:	1f 93       	push	r17
    2c68:	cf 93       	push	r28
    2c6a:	df 93       	push	r29
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
    2c70:	ca 1b       	sub	r28, r26
    2c72:	db 0b       	sbc	r29, r27
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	f8 94       	cli
    2c78:	de bf       	out	0x3e, r29	; 62
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	cd bf       	out	0x3d, r28	; 61
    2c7e:	09 94       	ijmp

00002c80 <__epilogue_restores__>:
    2c80:	2a 88       	ldd	r2, Y+18	; 0x12
    2c82:	39 88       	ldd	r3, Y+17	; 0x11
    2c84:	48 88       	ldd	r4, Y+16	; 0x10
    2c86:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c88:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c8a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c8c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c90:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c92:	b9 84       	ldd	r11, Y+9	; 0x09
    2c94:	c8 84       	ldd	r12, Y+8	; 0x08
    2c96:	df 80       	ldd	r13, Y+7	; 0x07
    2c98:	ee 80       	ldd	r14, Y+6	; 0x06
    2c9a:	fd 80       	ldd	r15, Y+5	; 0x05
    2c9c:	0c 81       	ldd	r16, Y+4	; 0x04
    2c9e:	1b 81       	ldd	r17, Y+3	; 0x03
    2ca0:	aa 81       	ldd	r26, Y+2	; 0x02
    2ca2:	b9 81       	ldd	r27, Y+1	; 0x01
    2ca4:	ce 0f       	add	r28, r30
    2ca6:	d1 1d       	adc	r29, r1
    2ca8:	0f b6       	in	r0, 0x3f	; 63
    2caa:	f8 94       	cli
    2cac:	de bf       	out	0x3e, r29	; 62
    2cae:	0f be       	out	0x3f, r0	; 63
    2cb0:	cd bf       	out	0x3d, r28	; 61
    2cb2:	ed 01       	movw	r28, r26
    2cb4:	08 95       	ret

00002cb6 <_exit>:
    2cb6:	f8 94       	cli

00002cb8 <__stop_program>:
    2cb8:	ff cf       	rjmp	.-2      	; 0x2cb8 <__stop_program>
