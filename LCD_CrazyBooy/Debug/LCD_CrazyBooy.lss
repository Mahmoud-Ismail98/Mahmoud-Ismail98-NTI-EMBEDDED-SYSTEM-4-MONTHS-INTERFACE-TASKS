
LCD_CrazyBooy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00003a36  00003aca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800094  00800094  00003afe  2**0
                  ALLOC
  3 .stab         0000318c  00000000  00000000  00003b00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011f0  00000000  00000000  00006c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000816b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b2b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c234  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c3b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c676  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cf04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__vector_1>
       8:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <__vector_2>
       c:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <main>
      8a:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e2 1c 	jmp	0x39c4	; 0x39c4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e6       	ldi	r26, 0x6A	; 106
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fe 1c 	jmp	0x39fc	; 0x39fc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ee 1c 	jmp	0x39dc	; 0x39dc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0a 1d 	jmp	0x3a14	; 0x3a14 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ee 1c 	jmp	0x39dc	; 0x39dc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0a 1d 	jmp	0x3a14	; 0x3a14 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e2 1c 	jmp	0x39c4	; 0x39c4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e6       	ldi	r24, 0x6A	; 106
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fe 1c 	jmp	0x39fc	; 0x39fc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ea 1c 	jmp	0x39d4	; 0x39d4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e6       	ldi	r22, 0x6A	; 106
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 06 1d 	jmp	0x3a0c	; 0x3a0c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ee 1c 	jmp	0x39dc	; 0x39dc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 0a 1d 	jmp	0x3a14	; 0x3a14 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ee 1c 	jmp	0x39dc	; 0x39dc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 0a 1d 	jmp	0x3a14	; 0x3a14 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ee 1c 	jmp	0x39dc	; 0x39dc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 0a 1d 	jmp	0x3a14	; 0x3a14 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:

volatile pu16 G_Ptr_AdcReading;
void(*G_ptr_AdcIsrNotification)(u16 Global_pu16Data);

void ADC_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	#if Refernce_Selection == AREF_PIN
	CLR_BIT(ADMUX,REFS0);
	CLR_BIT(ADMUX,REFS1);
	#elif Refernce_Selection == AVCC
	SET_BIT(ADMUX,REFS0);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8f 77       	andi	r24, 0x7F	; 127
     cc0:	8c 93       	st	X, r24
	#endif
	
	#if		LEFT_ADJUST == ENABLE
	SET_BIT(ADMUX,ADLAR);
	#elif	LEFT_ADJUST == DISABLE
	CLR_BIT(ADMUX,ADLAR);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24
	#endif
	
	ADCSRA=((ADCSRA&0b11111000)|ADC_Prescaller);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	88 7f       	andi	r24, 0xF8	; 248
     cdc:	8c 93       	st	X, r24
#if Interrupt_EN == ENABLE
	ADC_voidEnablePeripheralInterrupt();
     cde:	0e 94 92 06 	call	0xd24	; 0xd24 <ADC_voidEnablePeripheralInterrupt>
#elif Interrupt_EN == DISABLE
	ADC_voidDisablePeripheralInterrupt();
#endif

	ADC_voidEnablePeripheral();
     ce2:	0e 94 76 06 	call	0xcec	; 0xcec <ADC_voidEnablePeripheral>
	
}
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	08 95       	ret

00000cec <ADC_voidEnablePeripheral>:

void ADC_voidEnablePeripheral(void)
{
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(ADCSRA,ADEN);
     cf4:	a6 e2       	ldi	r26, 0x26	; 38
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e6 e2       	ldi	r30, 0x26	; 38
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	80 68       	ori	r24, 0x80	; 128
     d00:	8c 93       	st	X, r24
}
     d02:	cf 91       	pop	r28
     d04:	df 91       	pop	r29
     d06:	08 95       	ret

00000d08 <ADC_voidDisablePeripheral>:

void ADC_voidDisablePeripheral(void)
{
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(ADMUX,ADEN);
     d10:	a7 e2       	ldi	r26, 0x27	; 39
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e7 e2       	ldi	r30, 0x27	; 39
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8f 77       	andi	r24, 0x7F	; 127
     d1c:	8c 93       	st	X, r24
}
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <ADC_voidEnablePeripheralInterrupt>:
void ADC_voidEnablePeripheralInterrupt(void)
{
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(ADCSRA, ADIE);
     d2c:	a6 e2       	ldi	r26, 0x26	; 38
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e6 e2       	ldi	r30, 0x26	; 38
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	88 60       	ori	r24, 0x08	; 8
     d38:	8c 93       	st	X, r24
}
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	08 95       	ret

00000d40 <ADC_voidDisablePeripheralInterrupt>:
void ADC_voidDisablePeripheralInterrupt(void)
{
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(ADCSRA, ADIE);
     d48:	a6 e2       	ldi	r26, 0x26	; 38
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e6 e2       	ldi	r30, 0x26	; 38
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	87 7f       	andi	r24, 0xF7	; 247
     d54:	8c 93       	st	X, r24
}
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <ADC_voidStartConversion>:
void ADC_voidStartConversion(u8 Copy_u8ChannelID)
{
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	0f 92       	push	r0
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	89 83       	std	Y+1, r24	; 0x01
	ADMUX=((ADMUX&0b11100000)|Copy_u8ChannelID);
     d68:	a7 e2       	ldi	r26, 0x27	; 39
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e7 e2       	ldi	r30, 0x27	; 39
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	98 2f       	mov	r25, r24
     d74:	90 7e       	andi	r25, 0xE0	; 224
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	89 2b       	or	r24, r25
     d7a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);
     d7c:	a6 e2       	ldi	r26, 0x26	; 38
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e6 e2       	ldi	r30, 0x26	; 38
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	80 64       	ori	r24, 0x40	; 64
     d88:	8c 93       	st	X, r24
}
     d8a:	0f 90       	pop	r0
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <ADC_voidReadVal_Async>:

void ADC_voidReadVal_Async(void(*LocaL_PtrToFunc)(u16 Ptr_pu16CopyData))
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	00 d0       	rcall	.+0      	; 0xd98 <ADC_voidReadVal_Async+0x6>
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	9a 83       	std	Y+2, r25	; 0x02
     d9e:	89 83       	std	Y+1, r24	; 0x01
	G_ptr_AdcIsrNotification=LocaL_PtrToFunc;
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	9a 81       	ldd	r25, Y+2	; 0x02
     da4:	90 93 97 00 	sts	0x0097, r25
     da8:	80 93 96 00 	sts	0x0096, r24

}
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <__vector_16>:
void __vector_16 (void) 
{
     db6:	1f 92       	push	r1
     db8:	0f 92       	push	r0
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	0f 92       	push	r0
     dbe:	11 24       	eor	r1, r1
     dc0:	2f 93       	push	r18
     dc2:	3f 93       	push	r19
     dc4:	4f 93       	push	r20
     dc6:	5f 93       	push	r21
     dc8:	6f 93       	push	r22
     dca:	7f 93       	push	r23
     dcc:	8f 93       	push	r24
     dce:	9f 93       	push	r25
     dd0:	af 93       	push	r26
     dd2:	bf 93       	push	r27
     dd4:	ef 93       	push	r30
     dd6:	ff 93       	push	r31
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	00 d0       	rcall	.+0      	; 0xdde <__vector_16+0x28>
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
	
	u16 data = ADC_DATA;
     de2:	e4 e2       	ldi	r30, 0x24	; 36
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	91 81       	ldd	r25, Z+1	; 0x01
     dea:	9a 83       	std	Y+2, r25	; 0x02
     dec:	89 83       	std	Y+1, r24	; 0x01
	(*G_ptr_AdcIsrNotification)(data);
     dee:	e0 91 96 00 	lds	r30, 0x0096
     df2:	f0 91 97 00 	lds	r31, 0x0097
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	9a 81       	ldd	r25, Y+2	; 0x02
     dfa:	09 95       	icall

}
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	ff 91       	pop	r31
     e06:	ef 91       	pop	r30
     e08:	bf 91       	pop	r27
     e0a:	af 91       	pop	r26
     e0c:	9f 91       	pop	r25
     e0e:	8f 91       	pop	r24
     e10:	7f 91       	pop	r23
     e12:	6f 91       	pop	r22
     e14:	5f 91       	pop	r21
     e16:	4f 91       	pop	r20
     e18:	3f 91       	pop	r19
     e1a:	2f 91       	pop	r18
     e1c:	0f 90       	pop	r0
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	0f 90       	pop	r0
     e22:	1f 90       	pop	r1
     e24:	18 95       	reti

00000e26 <DIO_enum_WriteChannel>:
#include "DIO_int.h"
#include "DIO_prv.h"
#include "DIO_cfg.h"

DIO_enumErrStatus DIO_enum_WriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level)
{
     e26:	df 93       	push	r29
     e28:	cf 93       	push	r28
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	27 97       	sbiw	r28, 0x07	; 7
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	cd bf       	out	0x3d, r28	; 61
     e3a:	8c 83       	std	Y+4, r24	; 0x04
     e3c:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8PINID = Copy_u8ChannelId%8;
     e3e:	8c 81       	ldd	r24, Y+4	; 0x04
     e40:	87 70       	andi	r24, 0x07	; 7
     e42:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PORTID = Copy_u8ChannelId/8;
     e44:	8c 81       	ldd	r24, Y+4	; 0x04
     e46:	86 95       	lsr	r24
     e48:	86 95       	lsr	r24
     e4a:	86 95       	lsr	r24
     e4c:	8a 83       	std	Y+2, r24	; 0x02
	DIO_enumErrStatus Local_enumErrStatus = DIO_enumOK;
     e4e:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_u8PORTID)
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	3f 83       	std	Y+7, r19	; 0x07
     e58:	2e 83       	std	Y+6, r18	; 0x06
     e5a:	8e 81       	ldd	r24, Y+6	; 0x06
     e5c:	9f 81       	ldd	r25, Y+7	; 0x07
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	91 05       	cpc	r25, r1
     e62:	09 f4       	brne	.+2      	; 0xe66 <DIO_enum_WriteChannel+0x40>
     e64:	49 c0       	rjmp	.+146    	; 0xef8 <DIO_enum_WriteChannel+0xd2>
     e66:	2e 81       	ldd	r18, Y+6	; 0x06
     e68:	3f 81       	ldd	r19, Y+7	; 0x07
     e6a:	22 30       	cpi	r18, 0x02	; 2
     e6c:	31 05       	cpc	r19, r1
     e6e:	2c f4       	brge	.+10     	; 0xe7a <DIO_enum_WriteChannel+0x54>
     e70:	8e 81       	ldd	r24, Y+6	; 0x06
     e72:	9f 81       	ldd	r25, Y+7	; 0x07
     e74:	00 97       	sbiw	r24, 0x00	; 0
     e76:	71 f0       	breq	.+28     	; 0xe94 <DIO_enum_WriteChannel+0x6e>
     e78:	d5 c0       	rjmp	.+426    	; 0x1024 <DIO_enum_WriteChannel+0x1fe>
     e7a:	2e 81       	ldd	r18, Y+6	; 0x06
     e7c:	3f 81       	ldd	r19, Y+7	; 0x07
     e7e:	22 30       	cpi	r18, 0x02	; 2
     e80:	31 05       	cpc	r19, r1
     e82:	09 f4       	brne	.+2      	; 0xe86 <DIO_enum_WriteChannel+0x60>
     e84:	6b c0       	rjmp	.+214    	; 0xf5c <DIO_enum_WriteChannel+0x136>
     e86:	8e 81       	ldd	r24, Y+6	; 0x06
     e88:	9f 81       	ldd	r25, Y+7	; 0x07
     e8a:	83 30       	cpi	r24, 0x03	; 3
     e8c:	91 05       	cpc	r25, r1
     e8e:	09 f4       	brne	.+2      	; 0xe92 <DIO_enum_WriteChannel+0x6c>
     e90:	97 c0       	rjmp	.+302    	; 0xfc0 <DIO_enum_WriteChannel+0x19a>
     e92:	c8 c0       	rjmp	.+400    	; 0x1024 <DIO_enum_WriteChannel+0x1fe>
	{
		case DIO_u8PORTA:
			if(Copy_u8Level == DIO_u8High)
     e94:	8d 81       	ldd	r24, Y+5	; 0x05
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	a1 f4       	brne	.+40     	; 0xec2 <DIO_enum_WriteChannel+0x9c>
			{
				SET_BIT(PORTA,Local_u8PINID);
     e9a:	ab e3       	ldi	r26, 0x3B	; 59
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	eb e3       	ldi	r30, 0x3B	; 59
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_enum_WriteChannel+0x92>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <DIO_enum_WriteChannel+0x8e>
     ebc:	84 2b       	or	r24, r20
     ebe:	8c 93       	st	X, r24
     ec0:	b3 c0       	rjmp	.+358    	; 0x1028 <DIO_enum_WriteChannel+0x202>
			}
			else if(Copy_u8Level == DIO_u8LOW)
     ec2:	8d 81       	ldd	r24, Y+5	; 0x05
     ec4:	88 23       	and	r24, r24
     ec6:	a9 f4       	brne	.+42     	; 0xef2 <DIO_enum_WriteChannel+0xcc>
			{
				CLR_BIT(PORTA,Local_u8PINID);
     ec8:	ab e3       	ldi	r26, 0x3B	; 59
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	eb e3       	ldi	r30, 0x3B	; 59
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <DIO_enum_WriteChannel+0xc0>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <DIO_enum_WriteChannel+0xbc>
     eea:	80 95       	com	r24
     eec:	84 23       	and	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	9b c0       	rjmp	.+310    	; 0x1028 <DIO_enum_WriteChannel+0x202>
			}
			else
			{
				Local_enumErrStatus = DIO_enumLevelErr;
     ef2:	82 e0       	ldi	r24, 0x02	; 2
     ef4:	89 83       	std	Y+1, r24	; 0x01
     ef6:	98 c0       	rjmp	.+304    	; 0x1028 <DIO_enum_WriteChannel+0x202>
			}
			break;
		case DIO_u8PORTB:
			if(Copy_u8Level == DIO_u8High)
     ef8:	8d 81       	ldd	r24, Y+5	; 0x05
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	a1 f4       	brne	.+40     	; 0xf26 <DIO_enum_WriteChannel+0x100>
			{
				SET_BIT(PORTB,Local_u8PINID);
     efe:	a8 e3       	ldi	r26, 0x38	; 56
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e8 e3       	ldi	r30, 0x38	; 56
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_enum_WriteChannel+0xf6>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_enum_WriteChannel+0xf2>
     f20:	84 2b       	or	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	81 c0       	rjmp	.+258    	; 0x1028 <DIO_enum_WriteChannel+0x202>
			}
			else if(Copy_u8Level == DIO_u8LOW)
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	88 23       	and	r24, r24
     f2a:	a9 f4       	brne	.+42     	; 0xf56 <DIO_enum_WriteChannel+0x130>
			{
				CLR_BIT(PORTB,Local_u8PINID);
     f2c:	a8 e3       	ldi	r26, 0x38	; 56
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e8 e3       	ldi	r30, 0x38	; 56
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <DIO_enum_WriteChannel+0x124>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <DIO_enum_WriteChannel+0x120>
     f4e:	80 95       	com	r24
     f50:	84 23       	and	r24, r20
     f52:	8c 93       	st	X, r24
     f54:	69 c0       	rjmp	.+210    	; 0x1028 <DIO_enum_WriteChannel+0x202>
			}
			else
			{
				Local_enumErrStatus = DIO_enumLevelErr;
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	66 c0       	rjmp	.+204    	; 0x1028 <DIO_enum_WriteChannel+0x202>
			}
			break;
		case DIO_u8PORTC:
			if(Copy_u8Level == DIO_u8High)
     f5c:	8d 81       	ldd	r24, Y+5	; 0x05
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	a1 f4       	brne	.+40     	; 0xf8a <DIO_enum_WriteChannel+0x164>
			{
				SET_BIT(PORTC,Local_u8PINID);
     f62:	a5 e3       	ldi	r26, 0x35	; 53
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e5 e3       	ldi	r30, 0x35	; 53
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_enum_WriteChannel+0x15a>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_enum_WriteChannel+0x156>
     f84:	84 2b       	or	r24, r20
     f86:	8c 93       	st	X, r24
     f88:	4f c0       	rjmp	.+158    	; 0x1028 <DIO_enum_WriteChannel+0x202>
			}
			else if(Copy_u8Level == DIO_u8LOW)
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
     f8c:	88 23       	and	r24, r24
     f8e:	a9 f4       	brne	.+42     	; 0xfba <DIO_enum_WriteChannel+0x194>
			{
				CLR_BIT(PORTC,Local_u8PINID);
     f90:	a5 e3       	ldi	r26, 0x35	; 53
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e5 e3       	ldi	r30, 0x35	; 53
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_enum_WriteChannel+0x188>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_enum_WriteChannel+0x184>
     fb2:	80 95       	com	r24
     fb4:	84 23       	and	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	37 c0       	rjmp	.+110    	; 0x1028 <DIO_enum_WriteChannel+0x202>
			}
			else
			{
				Local_enumErrStatus = DIO_enumLevelErr;
     fba:	82 e0       	ldi	r24, 0x02	; 2
     fbc:	89 83       	std	Y+1, r24	; 0x01
     fbe:	34 c0       	rjmp	.+104    	; 0x1028 <DIO_enum_WriteChannel+0x202>
			}
			break;
		case DIO_u8PORTD:
			if(Copy_u8Level == DIO_u8High)
     fc0:	8d 81       	ldd	r24, Y+5	; 0x05
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	a1 f4       	brne	.+40     	; 0xfee <DIO_enum_WriteChannel+0x1c8>
			{
				SET_BIT(PORTD,Local_u8PINID);
     fc6:	a2 e3       	ldi	r26, 0x32	; 50
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e2 e3       	ldi	r30, 0x32	; 50
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <DIO_enum_WriteChannel+0x1be>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <DIO_enum_WriteChannel+0x1ba>
     fe8:	84 2b       	or	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	1d c0       	rjmp	.+58     	; 0x1028 <DIO_enum_WriteChannel+0x202>
			}
			else if(Copy_u8Level == DIO_u8LOW)
     fee:	8d 81       	ldd	r24, Y+5	; 0x05
     ff0:	88 23       	and	r24, r24
     ff2:	a9 f4       	brne	.+42     	; 0x101e <DIO_enum_WriteChannel+0x1f8>
			{
				CLR_BIT(PORTD,Local_u8PINID);
     ff4:	a2 e3       	ldi	r26, 0x32	; 50
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e2 e3       	ldi	r30, 0x32	; 50
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_enum_WriteChannel+0x1ec>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_enum_WriteChannel+0x1e8>
    1016:	80 95       	com	r24
    1018:	84 23       	and	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	05 c0       	rjmp	.+10     	; 0x1028 <DIO_enum_WriteChannel+0x202>
			}
			else
			{
				Local_enumErrStatus = DIO_enumLevelErr;
    101e:	82 e0       	ldi	r24, 0x02	; 2
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_enum_WriteChannel+0x202>
			}
			break;
		default :
			Local_enumErrStatus = DIO_enumChannelErr;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return Local_enumErrStatus;
    1028:	89 81       	ldd	r24, Y+1	; 0x01
}
    102a:	27 96       	adiw	r28, 0x07	; 7
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <DIO_enum_ReadChannel>:

DIO_enumErrStatus DIO_enum_ReadChannel (u8 Copy_u8ChannelId, pu8 Add_pu8channelLevel)
{
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	28 97       	sbiw	r28, 0x08	; 8
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	8c 83       	std	Y+4, r24	; 0x04
    1052:	7e 83       	std	Y+6, r23	; 0x06
    1054:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8PINID = Copy_u8ChannelId%8;
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	87 70       	andi	r24, 0x07	; 7
    105a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PORTID = Copy_u8ChannelId/8;
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	86 95       	lsr	r24
    1060:	86 95       	lsr	r24
    1062:	86 95       	lsr	r24
    1064:	8a 83       	std	Y+2, r24	; 0x02
	DIO_enumErrStatus Local_enumErrStatus = DIO_enumOK;
    1066:	19 82       	std	Y+1, r1	; 0x01
	if(Add_pu8channelLevel != NULL)
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	9e 81       	ldd	r25, Y+6	; 0x06
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	09 f4       	brne	.+2      	; 0x1072 <DIO_enum_ReadChannel+0x36>
    1070:	74 c0       	rjmp	.+232    	; 0x115a <DIO_enum_ReadChannel+0x11e>
	{
		switch(Local_u8PORTID)
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	38 87       	std	Y+8, r19	; 0x08
    107a:	2f 83       	std	Y+7, r18	; 0x07
    107c:	4f 81       	ldd	r20, Y+7	; 0x07
    107e:	58 85       	ldd	r21, Y+8	; 0x08
    1080:	41 30       	cpi	r20, 0x01	; 1
    1082:	51 05       	cpc	r21, r1
    1084:	59 f1       	breq	.+86     	; 0x10dc <DIO_enum_ReadChannel+0xa0>
    1086:	8f 81       	ldd	r24, Y+7	; 0x07
    1088:	98 85       	ldd	r25, Y+8	; 0x08
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	91 05       	cpc	r25, r1
    108e:	34 f4       	brge	.+12     	; 0x109c <DIO_enum_ReadChannel+0x60>
    1090:	2f 81       	ldd	r18, Y+7	; 0x07
    1092:	38 85       	ldd	r19, Y+8	; 0x08
    1094:	21 15       	cp	r18, r1
    1096:	31 05       	cpc	r19, r1
    1098:	69 f0       	breq	.+26     	; 0x10b4 <DIO_enum_ReadChannel+0x78>
    109a:	5c c0       	rjmp	.+184    	; 0x1154 <DIO_enum_ReadChannel+0x118>
    109c:	4f 81       	ldd	r20, Y+7	; 0x07
    109e:	58 85       	ldd	r21, Y+8	; 0x08
    10a0:	42 30       	cpi	r20, 0x02	; 2
    10a2:	51 05       	cpc	r21, r1
    10a4:	79 f1       	breq	.+94     	; 0x1104 <DIO_enum_ReadChannel+0xc8>
    10a6:	8f 81       	ldd	r24, Y+7	; 0x07
    10a8:	98 85       	ldd	r25, Y+8	; 0x08
    10aa:	83 30       	cpi	r24, 0x03	; 3
    10ac:	91 05       	cpc	r25, r1
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <DIO_enum_ReadChannel+0x76>
    10b0:	3d c0       	rjmp	.+122    	; 0x112c <DIO_enum_ReadChannel+0xf0>
    10b2:	50 c0       	rjmp	.+160    	; 0x1154 <DIO_enum_ReadChannel+0x118>
		{
			case DIO_u8PORTA:
					*Add_pu8channelLevel = GET_BIT(PINA,Local_u8PINID);
    10b4:	e9 e3       	ldi	r30, 0x39	; 57
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	88 2f       	mov	r24, r24
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	a9 01       	movw	r20, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_enum_ReadChannel+0x90>
    10c8:	55 95       	asr	r21
    10ca:	47 95       	ror	r20
    10cc:	8a 95       	dec	r24
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_enum_ReadChannel+0x8c>
    10d0:	ca 01       	movw	r24, r20
    10d2:	81 70       	andi	r24, 0x01	; 1
    10d4:	ed 81       	ldd	r30, Y+5	; 0x05
    10d6:	fe 81       	ldd	r31, Y+6	; 0x06
    10d8:	80 83       	st	Z, r24
    10da:	41 c0       	rjmp	.+130    	; 0x115e <DIO_enum_ReadChannel+0x122>
				break;
			case DIO_u8PORTB:
					*Add_pu8channelLevel = GET_BIT(PINB,Local_u8PINID);
    10dc:	e6 e3       	ldi	r30, 0x36	; 54
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a9 01       	movw	r20, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_enum_ReadChannel+0xb8>
    10f0:	55 95       	asr	r21
    10f2:	47 95       	ror	r20
    10f4:	8a 95       	dec	r24
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_enum_ReadChannel+0xb4>
    10f8:	ca 01       	movw	r24, r20
    10fa:	81 70       	andi	r24, 0x01	; 1
    10fc:	ed 81       	ldd	r30, Y+5	; 0x05
    10fe:	fe 81       	ldd	r31, Y+6	; 0x06
    1100:	80 83       	st	Z, r24
    1102:	2d c0       	rjmp	.+90     	; 0x115e <DIO_enum_ReadChannel+0x122>
				break;
			case DIO_u8PORTC:
					*Add_pu8channelLevel = GET_BIT(PINC,Local_u8PINID);
    1104:	e3 e3       	ldi	r30, 0x33	; 51
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	88 2f       	mov	r24, r24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	a9 01       	movw	r20, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_enum_ReadChannel+0xe0>
    1118:	55 95       	asr	r21
    111a:	47 95       	ror	r20
    111c:	8a 95       	dec	r24
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_enum_ReadChannel+0xdc>
    1120:	ca 01       	movw	r24, r20
    1122:	81 70       	andi	r24, 0x01	; 1
    1124:	ed 81       	ldd	r30, Y+5	; 0x05
    1126:	fe 81       	ldd	r31, Y+6	; 0x06
    1128:	80 83       	st	Z, r24
    112a:	19 c0       	rjmp	.+50     	; 0x115e <DIO_enum_ReadChannel+0x122>
				break;
			case DIO_u8PORTD:
					*Add_pu8channelLevel = GET_BIT(PIND,Local_u8PINID);
    112c:	e0 e3       	ldi	r30, 0x30	; 48
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	88 2f       	mov	r24, r24
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	a9 01       	movw	r20, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <DIO_enum_ReadChannel+0x108>
    1140:	55 95       	asr	r21
    1142:	47 95       	ror	r20
    1144:	8a 95       	dec	r24
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <DIO_enum_ReadChannel+0x104>
    1148:	ca 01       	movw	r24, r20
    114a:	81 70       	andi	r24, 0x01	; 1
    114c:	ed 81       	ldd	r30, Y+5	; 0x05
    114e:	fe 81       	ldd	r31, Y+6	; 0x06
    1150:	80 83       	st	Z, r24
    1152:	05 c0       	rjmp	.+10     	; 0x115e <DIO_enum_ReadChannel+0x122>
				break;
			default :
				Local_enumErrStatus = DIO_enumChannelErr;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_enum_ReadChannel+0x122>
				break;
		}
	}
	else
	{
		Local_enumErrStatus = DIO_enumNULLptrErr;
    115a:	84 e0       	ldi	r24, 0x04	; 4
    115c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enumErrStatus;
    115e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1160:	28 96       	adiw	r28, 0x08	; 8
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	f8 94       	cli
    1166:	de bf       	out	0x3e, r29	; 62
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	cd bf       	out	0x3d, r28	; 61
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <DIO_enum_FlipChannel>:
DIO_enumErrStatus DIO_enum_FlipChannel(u8 Copy_u8ChannelId)
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	00 d0       	rcall	.+0      	; 0x1178 <DIO_enum_FlipChannel+0x6>
    1178:	00 d0       	rcall	.+0      	; 0x117a <DIO_enum_FlipChannel+0x8>
    117a:	00 d0       	rcall	.+0      	; 0x117c <DIO_enum_FlipChannel+0xa>
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8PINID = Copy_u8ChannelId%8;
    1182:	8c 81       	ldd	r24, Y+4	; 0x04
    1184:	87 70       	andi	r24, 0x07	; 7
    1186:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PORTID = Copy_u8ChannelId/8;
    1188:	8c 81       	ldd	r24, Y+4	; 0x04
    118a:	86 95       	lsr	r24
    118c:	86 95       	lsr	r24
    118e:	86 95       	lsr	r24
    1190:	8a 83       	std	Y+2, r24	; 0x02
	DIO_enumErrStatus Local_enumErrStatus = DIO_enumOK;
    1192:	19 82       	std	Y+1, r1	; 0x01
		switch(Local_u8PORTID)
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	3e 83       	std	Y+6, r19	; 0x06
    119c:	2d 83       	std	Y+5, r18	; 0x05
    119e:	8d 81       	ldd	r24, Y+5	; 0x05
    11a0:	9e 81       	ldd	r25, Y+6	; 0x06
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	91 05       	cpc	r25, r1
    11a6:	49 f1       	breq	.+82     	; 0x11fa <DIO_enum_FlipChannel+0x88>
    11a8:	2d 81       	ldd	r18, Y+5	; 0x05
    11aa:	3e 81       	ldd	r19, Y+6	; 0x06
    11ac:	22 30       	cpi	r18, 0x02	; 2
    11ae:	31 05       	cpc	r19, r1
    11b0:	2c f4       	brge	.+10     	; 0x11bc <DIO_enum_FlipChannel+0x4a>
    11b2:	8d 81       	ldd	r24, Y+5	; 0x05
    11b4:	9e 81       	ldd	r25, Y+6	; 0x06
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	61 f0       	breq	.+24     	; 0x11d2 <DIO_enum_FlipChannel+0x60>
    11ba:	5b c0       	rjmp	.+182    	; 0x1272 <DIO_enum_FlipChannel+0x100>
    11bc:	2d 81       	ldd	r18, Y+5	; 0x05
    11be:	3e 81       	ldd	r19, Y+6	; 0x06
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	71 f1       	breq	.+92     	; 0x1222 <DIO_enum_FlipChannel+0xb0>
    11c6:	8d 81       	ldd	r24, Y+5	; 0x05
    11c8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ca:	83 30       	cpi	r24, 0x03	; 3
    11cc:	91 05       	cpc	r25, r1
    11ce:	e9 f1       	breq	.+122    	; 0x124a <DIO_enum_FlipChannel+0xd8>
    11d0:	50 c0       	rjmp	.+160    	; 0x1272 <DIO_enum_FlipChannel+0x100>
		{
			case DIO_u8PORTA:
					TGL_BIT(PORTA,Local_u8PINID);
    11d2:	ab e3       	ldi	r26, 0x3B	; 59
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	eb e3       	ldi	r30, 0x3B	; 59
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_enum_FlipChannel+0x7e>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_enum_FlipChannel+0x7a>
    11f4:	84 27       	eor	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	3e c0       	rjmp	.+124    	; 0x1276 <DIO_enum_FlipChannel+0x104>
				break;
			case DIO_u8PORTB:
					TGL_BIT(PORTB,Local_u8PINID);
    11fa:	a8 e3       	ldi	r26, 0x38	; 56
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e8 e3       	ldi	r30, 0x38	; 56
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_enum_FlipChannel+0xa6>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_enum_FlipChannel+0xa2>
    121c:	84 27       	eor	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	2a c0       	rjmp	.+84     	; 0x1276 <DIO_enum_FlipChannel+0x104>
				break;
			case DIO_u8PORTC:
					TGL_BIT(PORTC,Local_u8PINID);
    1222:	a5 e3       	ldi	r26, 0x35	; 53
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e5 e3       	ldi	r30, 0x35	; 53
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_enum_FlipChannel+0xce>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_enum_FlipChannel+0xca>
    1244:	84 27       	eor	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	16 c0       	rjmp	.+44     	; 0x1276 <DIO_enum_FlipChannel+0x104>
				break;
			case DIO_u8PORTD:
					TGL_BIT(PORTD,Local_u8PINID);
    124a:	a2 e3       	ldi	r26, 0x32	; 50
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e2 e3       	ldi	r30, 0x32	; 50
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_enum_FlipChannel+0xf6>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_enum_FlipChannel+0xf2>
    126c:	84 27       	eor	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <DIO_enum_FlipChannel+0x104>
				break;
			default :
				Local_enumErrStatus = DIO_enumChannelErr;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	89 83       	std	Y+1, r24	; 0x01
				break;
		}

	return Local_enumErrStatus;	
    1276:	89 81       	ldd	r24, Y+1	; 0x01
}
    1278:	26 96       	adiw	r28, 0x06	; 6
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <DIO_enum_WritePort>:
DIO_enumErrStatus DIO_enum_WritePort(u8 Copy_u8PORTId, u8 Copy_u8PORTVal)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	00 d0       	rcall	.+0      	; 0x1290 <DIO_enum_WritePort+0x6>
    1290:	00 d0       	rcall	.+0      	; 0x1292 <DIO_enum_WritePort+0x8>
    1292:	0f 92       	push	r0
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	8a 83       	std	Y+2, r24	; 0x02
    129a:	6b 83       	std	Y+3, r22	; 0x03
		DIO_enumErrStatus Local_enumErrStatus = DIO_enumOK;
    129c:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8PORTId)
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	3d 83       	std	Y+5, r19	; 0x05
    12a6:	2c 83       	std	Y+4, r18	; 0x04
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	9d 81       	ldd	r25, Y+5	; 0x05
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	91 05       	cpc	r25, r1
    12b0:	d1 f0       	breq	.+52     	; 0x12e6 <DIO_enum_WritePort+0x5c>
    12b2:	2c 81       	ldd	r18, Y+4	; 0x04
    12b4:	3d 81       	ldd	r19, Y+5	; 0x05
    12b6:	22 30       	cpi	r18, 0x02	; 2
    12b8:	31 05       	cpc	r19, r1
    12ba:	2c f4       	brge	.+10     	; 0x12c6 <DIO_enum_WritePort+0x3c>
    12bc:	8c 81       	ldd	r24, Y+4	; 0x04
    12be:	9d 81       	ldd	r25, Y+5	; 0x05
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	61 f0       	breq	.+24     	; 0x12dc <DIO_enum_WritePort+0x52>
    12c4:	1f c0       	rjmp	.+62     	; 0x1304 <DIO_enum_WritePort+0x7a>
    12c6:	2c 81       	ldd	r18, Y+4	; 0x04
    12c8:	3d 81       	ldd	r19, Y+5	; 0x05
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	81 f0       	breq	.+32     	; 0x12f0 <DIO_enum_WritePort+0x66>
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	9d 81       	ldd	r25, Y+5	; 0x05
    12d4:	83 30       	cpi	r24, 0x03	; 3
    12d6:	91 05       	cpc	r25, r1
    12d8:	81 f0       	breq	.+32     	; 0x12fa <DIO_enum_WritePort+0x70>
    12da:	14 c0       	rjmp	.+40     	; 0x1304 <DIO_enum_WritePort+0x7a>
		{
			case DIO_u8PORTA:
					PORTA = Copy_u8PORTVal;
    12dc:	eb e3       	ldi	r30, 0x3B	; 59
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	80 83       	st	Z, r24
    12e4:	11 c0       	rjmp	.+34     	; 0x1308 <DIO_enum_WritePort+0x7e>
				break;
			case DIO_u8PORTB:
					PORTB = Copy_u8PORTVal;
    12e6:	e8 e3       	ldi	r30, 0x38	; 56
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	80 83       	st	Z, r24
    12ee:	0c c0       	rjmp	.+24     	; 0x1308 <DIO_enum_WritePort+0x7e>
				break;
			case DIO_u8PORTC:
					PORTC = Copy_u8PORTVal;
    12f0:	e5 e3       	ldi	r30, 0x35	; 53
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	80 83       	st	Z, r24
    12f8:	07 c0       	rjmp	.+14     	; 0x1308 <DIO_enum_WritePort+0x7e>
				break;
			case DIO_u8PORTD:
					PORTD = Copy_u8PORTVal;
    12fa:	e2 e3       	ldi	r30, 0x32	; 50
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	80 83       	st	Z, r24
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_enum_WritePort+0x7e>
				break;
			default :
				Local_enumErrStatus = DIO_enumChannelErr;
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
		return Local_enumErrStatus;	
    1308:	89 81       	ldd	r24, Y+1	; 0x01
}
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <DIO_enum_ReadPort>:
DIO_enumErrStatus DIO_enum_ReadPort (u8 Copy_u8PORTId, pu8 Add_pu8PORTVal)
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	00 d0       	rcall	.+0      	; 0x1320 <DIO_enum_ReadPort+0x6>
    1320:	00 d0       	rcall	.+0      	; 0x1322 <DIO_enum_ReadPort+0x8>
    1322:	00 d0       	rcall	.+0      	; 0x1324 <DIO_enum_ReadPort+0xa>
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	8a 83       	std	Y+2, r24	; 0x02
    132a:	7c 83       	std	Y+4, r23	; 0x04
    132c:	6b 83       	std	Y+3, r22	; 0x03
		DIO_enumErrStatus Local_enumErrStatus = DIO_enumOK;
    132e:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8PORTId)
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	3e 83       	std	Y+6, r19	; 0x06
    1338:	2d 83       	std	Y+5, r18	; 0x05
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	9e 81       	ldd	r25, Y+6	; 0x06
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	91 05       	cpc	r25, r1
    1342:	e1 f0       	breq	.+56     	; 0x137c <DIO_enum_ReadPort+0x62>
    1344:	2d 81       	ldd	r18, Y+5	; 0x05
    1346:	3e 81       	ldd	r19, Y+6	; 0x06
    1348:	22 30       	cpi	r18, 0x02	; 2
    134a:	31 05       	cpc	r19, r1
    134c:	2c f4       	brge	.+10     	; 0x1358 <DIO_enum_ReadPort+0x3e>
    134e:	8d 81       	ldd	r24, Y+5	; 0x05
    1350:	9e 81       	ldd	r25, Y+6	; 0x06
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	61 f0       	breq	.+24     	; 0x136e <DIO_enum_ReadPort+0x54>
    1356:	27 c0       	rjmp	.+78     	; 0x13a6 <DIO_enum_ReadPort+0x8c>
    1358:	2d 81       	ldd	r18, Y+5	; 0x05
    135a:	3e 81       	ldd	r19, Y+6	; 0x06
    135c:	22 30       	cpi	r18, 0x02	; 2
    135e:	31 05       	cpc	r19, r1
    1360:	a1 f0       	breq	.+40     	; 0x138a <DIO_enum_ReadPort+0x70>
    1362:	8d 81       	ldd	r24, Y+5	; 0x05
    1364:	9e 81       	ldd	r25, Y+6	; 0x06
    1366:	83 30       	cpi	r24, 0x03	; 3
    1368:	91 05       	cpc	r25, r1
    136a:	b1 f0       	breq	.+44     	; 0x1398 <DIO_enum_ReadPort+0x7e>
    136c:	1c c0       	rjmp	.+56     	; 0x13a6 <DIO_enum_ReadPort+0x8c>
		{
			case DIO_u8PORTA:
					*Add_pu8PORTVal = PINA;
    136e:	e9 e3       	ldi	r30, 0x39	; 57
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	eb 81       	ldd	r30, Y+3	; 0x03
    1376:	fc 81       	ldd	r31, Y+4	; 0x04
    1378:	80 83       	st	Z, r24
    137a:	17 c0       	rjmp	.+46     	; 0x13aa <DIO_enum_ReadPort+0x90>
				break;
			case DIO_u8PORTB:
					*Add_pu8PORTVal = PINB;
    137c:	e6 e3       	ldi	r30, 0x36	; 54
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	eb 81       	ldd	r30, Y+3	; 0x03
    1384:	fc 81       	ldd	r31, Y+4	; 0x04
    1386:	80 83       	st	Z, r24
    1388:	10 c0       	rjmp	.+32     	; 0x13aa <DIO_enum_ReadPort+0x90>
				break;
			case DIO_u8PORTC:
					*Add_pu8PORTVal = PINC;
    138a:	e3 e3       	ldi	r30, 0x33	; 51
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	eb 81       	ldd	r30, Y+3	; 0x03
    1392:	fc 81       	ldd	r31, Y+4	; 0x04
    1394:	80 83       	st	Z, r24
    1396:	09 c0       	rjmp	.+18     	; 0x13aa <DIO_enum_ReadPort+0x90>
				break;
			case DIO_u8PORTD:
					*Add_pu8PORTVal = PIND;
    1398:	e0 e3       	ldi	r30, 0x30	; 48
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	eb 81       	ldd	r30, Y+3	; 0x03
    13a0:	fc 81       	ldd	r31, Y+4	; 0x04
    13a2:	80 83       	st	Z, r24
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <DIO_enum_ReadPort+0x90>
				break;
			default :
				Local_enumErrStatus = DIO_enumChannelErr;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
		return Local_enumErrStatus;		
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ac:	26 96       	adiw	r28, 0x06	; 6
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <EXTI_voidInit>:
#include "GIE_int.h"

void(*EXTI_GLOBALFUNC[3])(void);

void EXTI_voidInit(void)
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62

	EXTI_voidSetSignal(EXTI_CHOICE,Signal_Choice);
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	62 e0       	ldi	r22, 0x02	; 2
    13ca:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <EXTI_voidSetSignal>
	EXTI_voidEnableInt(EXTI_CHOICE);
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	0e 94 ed 09 	call	0x13da	; 0x13da <EXTI_voidEnableInt>
}
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <EXTI_voidEnableInt>:
void EXTI_voidEnableInt(u8 Copy_u8IntID)
{
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <EXTI_voidEnableInt+0x6>
    13e0:	0f 92       	push	r0
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8IntID)
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	3b 83       	std	Y+3, r19	; 0x03
    13f0:	2a 83       	std	Y+2, r18	; 0x02
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	9b 81       	ldd	r25, Y+3	; 0x03
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	91 05       	cpc	r25, r1
    13fa:	89 f0       	breq	.+34     	; 0x141e <EXTI_voidEnableInt+0x44>
    13fc:	2a 81       	ldd	r18, Y+2	; 0x02
    13fe:	3b 81       	ldd	r19, Y+3	; 0x03
    1400:	22 30       	cpi	r18, 0x02	; 2
    1402:	31 05       	cpc	r19, r1
    1404:	a1 f0       	breq	.+40     	; 0x142e <EXTI_voidEnableInt+0x54>
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	9b 81       	ldd	r25, Y+3	; 0x03
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	b9 f4       	brne	.+46     	; 0x143c <EXTI_voidEnableInt+0x62>
	{
		case EXTI0:
			SET_BIT(GICR,INT0);
    140e:	ab e5       	ldi	r26, 0x5B	; 91
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	eb e5       	ldi	r30, 0x5B	; 91
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	80 64       	ori	r24, 0x40	; 64
    141a:	8c 93       	st	X, r24
    141c:	0f c0       	rjmp	.+30     	; 0x143c <EXTI_voidEnableInt+0x62>
		break;
		case EXTI1:
			SET_BIT(GICR,INT1);
    141e:	ab e5       	ldi	r26, 0x5B	; 91
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	eb e5       	ldi	r30, 0x5B	; 91
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	80 68       	ori	r24, 0x80	; 128
    142a:	8c 93       	st	X, r24
    142c:	07 c0       	rjmp	.+14     	; 0x143c <EXTI_voidEnableInt+0x62>
		break;
		case EXTI2:
			SET_BIT(GICR,INT2);
    142e:	ab e5       	ldi	r26, 0x5B	; 91
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	eb e5       	ldi	r30, 0x5B	; 91
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	80 62       	ori	r24, 0x20	; 32
    143a:	8c 93       	st	X, r24
		break;
	}
}
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <EXTI_voidDisableInt>:
void EXTI_voidDisableInt(u8 Copy_u8IntID)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	00 d0       	rcall	.+0      	; 0x144e <EXTI_voidDisableInt+0x6>
    144e:	0f 92       	push	r0
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8IntID)
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	3b 83       	std	Y+3, r19	; 0x03
    145e:	2a 83       	std	Y+2, r18	; 0x02
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	9b 81       	ldd	r25, Y+3	; 0x03
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	91 05       	cpc	r25, r1
    1468:	89 f0       	breq	.+34     	; 0x148c <EXTI_voidDisableInt+0x44>
    146a:	2a 81       	ldd	r18, Y+2	; 0x02
    146c:	3b 81       	ldd	r19, Y+3	; 0x03
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	a1 f0       	breq	.+40     	; 0x149c <EXTI_voidDisableInt+0x54>
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	9b 81       	ldd	r25, Y+3	; 0x03
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	b9 f4       	brne	.+46     	; 0x14aa <EXTI_voidDisableInt+0x62>
	{
		case EXTI0:
			CLR_BIT(GICR,INT0);
    147c:	ab e5       	ldi	r26, 0x5B	; 91
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	eb e5       	ldi	r30, 0x5B	; 91
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	8f 7b       	andi	r24, 0xBF	; 191
    1488:	8c 93       	st	X, r24
    148a:	0f c0       	rjmp	.+30     	; 0x14aa <EXTI_voidDisableInt+0x62>
		break;
		case EXTI1:
			CLR_BIT(GICR,INT1);
    148c:	ab e5       	ldi	r26, 0x5B	; 91
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	eb e5       	ldi	r30, 0x5B	; 91
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	8f 77       	andi	r24, 0x7F	; 127
    1498:	8c 93       	st	X, r24
    149a:	07 c0       	rjmp	.+14     	; 0x14aa <EXTI_voidDisableInt+0x62>
		break;
		case EXTI2:
			CLR_BIT(GICR,INT2);
    149c:	ab e5       	ldi	r26, 0x5B	; 91
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	eb e5       	ldi	r30, 0x5B	; 91
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8f 7d       	andi	r24, 0xDF	; 223
    14a8:	8c 93       	st	X, r24
		break;
	}	
}
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <EXTI_voidSetSignal>:
void EXTI_voidSetSignal(u8 Copy_u8IntID,u8 Copy_u8SignalID)
{
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <EXTI_voidSetSignal+0x6>
    14bc:	00 d0       	rcall	.+0      	; 0x14be <EXTI_voidSetSignal+0x8>
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8IntID)
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	3c 83       	std	Y+4, r19	; 0x04
    14ce:	2b 83       	std	Y+3, r18	; 0x03
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	9c 81       	ldd	r25, Y+4	; 0x04
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	91 05       	cpc	r25, r1
    14d8:	a1 f0       	breq	.+40     	; 0x1502 <EXTI_voidSetSignal+0x4c>
    14da:	2b 81       	ldd	r18, Y+3	; 0x03
    14dc:	3c 81       	ldd	r19, Y+4	; 0x04
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	31 05       	cpc	r19, r1
    14e2:	01 f1       	breq	.+64     	; 0x1524 <EXTI_voidSetSignal+0x6e>
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	89 f5       	brne	.+98     	; 0x154e <EXTI_voidSetSignal+0x98>
	{
		case EXTI0:
			MCUCR =((MCUCR &0b11111100)|Copy_u8SignalID);
    14ec:	a5 e5       	ldi	r26, 0x55	; 85
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e5 e5       	ldi	r30, 0x55	; 85
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	98 2f       	mov	r25, r24
    14f8:	9c 7f       	andi	r25, 0xFC	; 252
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	89 2b       	or	r24, r25
    14fe:	8c 93       	st	X, r24
    1500:	26 c0       	rjmp	.+76     	; 0x154e <EXTI_voidSetSignal+0x98>
		break;
		case EXTI1:
			MCUCR =((MCUCR &0b11110011)|(Copy_u8SignalID<<2));
    1502:	a5 e5       	ldi	r26, 0x55	; 85
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e5 e5       	ldi	r30, 0x55	; 85
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	28 2f       	mov	r18, r24
    150e:	23 7f       	andi	r18, 0xF3	; 243
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	88 2f       	mov	r24, r24
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	82 2b       	or	r24, r18
    1520:	8c 93       	st	X, r24
    1522:	15 c0       	rjmp	.+42     	; 0x154e <EXTI_voidSetSignal+0x98>
		break;
		case EXTI2:
			if(Copy_u8SignalID == FALLING_EDGE)
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	82 30       	cpi	r24, 0x02	; 2
    1528:	41 f4       	brne	.+16     	; 0x153a <EXTI_voidSetSignal+0x84>
			{
				CLR_BIT(MCUCR,ISC2);
    152a:	a5 e5       	ldi	r26, 0x55	; 85
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e5 e5       	ldi	r30, 0x55	; 85
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	8f 7d       	andi	r24, 0xDF	; 223
    1536:	8c 93       	st	X, r24
    1538:	0a c0       	rjmp	.+20     	; 0x154e <EXTI_voidSetSignal+0x98>
			}
			else if(Copy_u8SignalID == RISING_EDGE)
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	39 f4       	brne	.+14     	; 0x154e <EXTI_voidSetSignal+0x98>
			{
				SET_BIT(MCUCR,ISC2);
    1540:	a5 e5       	ldi	r26, 0x55	; 85
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e5 e5       	ldi	r30, 0x55	; 85
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	80 62       	ori	r24, 0x20	; 32
    154c:	8c 93       	st	X, r24
			}
			else
			{}
		break;
	}	
}
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <EXTI_voidSetCallBack>:
void EXTI_voidSetCallBack(u8 Copy_u8IntID, void(*PTR)(void))
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	00 d0       	rcall	.+0      	; 0x1562 <EXTI_voidSetCallBack+0x6>
    1562:	0f 92       	push	r0
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	7b 83       	std	Y+3, r23	; 0x03
    156c:	6a 83       	std	Y+2, r22	; 0x02
	EXTI_GLOBALFUNC[Copy_u8IntID] = PTR;
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	fc 01       	movw	r30, r24
    157a:	e8 56       	subi	r30, 0x68	; 104
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	9b 81       	ldd	r25, Y+3	; 0x03
    1582:	91 83       	std	Z+1, r25	; 0x01
    1584:	80 83       	st	Z, r24
}
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <__vector_1>:
void __vector_1 (void) {
    1592:	1f 92       	push	r1
    1594:	0f 92       	push	r0
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	0f 92       	push	r0
    159a:	11 24       	eor	r1, r1
    159c:	2f 93       	push	r18
    159e:	3f 93       	push	r19
    15a0:	4f 93       	push	r20
    15a2:	5f 93       	push	r21
    15a4:	6f 93       	push	r22
    15a6:	7f 93       	push	r23
    15a8:	8f 93       	push	r24
    15aa:	9f 93       	push	r25
    15ac:	af 93       	push	r26
    15ae:	bf 93       	push	r27
    15b0:	ef 93       	push	r30
    15b2:	ff 93       	push	r31
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
	EXTI_GLOBALFUNC[0]();
    15bc:	e0 91 98 00 	lds	r30, 0x0098
    15c0:	f0 91 99 00 	lds	r31, 0x0099
    15c4:	09 95       	icall
}
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	ff 91       	pop	r31
    15cc:	ef 91       	pop	r30
    15ce:	bf 91       	pop	r27
    15d0:	af 91       	pop	r26
    15d2:	9f 91       	pop	r25
    15d4:	8f 91       	pop	r24
    15d6:	7f 91       	pop	r23
    15d8:	6f 91       	pop	r22
    15da:	5f 91       	pop	r21
    15dc:	4f 91       	pop	r20
    15de:	3f 91       	pop	r19
    15e0:	2f 91       	pop	r18
    15e2:	0f 90       	pop	r0
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	0f 90       	pop	r0
    15e8:	1f 90       	pop	r1
    15ea:	18 95       	reti

000015ec <__vector_2>:

void __vector_2 (void) {
    15ec:	1f 92       	push	r1
    15ee:	0f 92       	push	r0
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	0f 92       	push	r0
    15f4:	11 24       	eor	r1, r1
    15f6:	2f 93       	push	r18
    15f8:	3f 93       	push	r19
    15fa:	4f 93       	push	r20
    15fc:	5f 93       	push	r21
    15fe:	6f 93       	push	r22
    1600:	7f 93       	push	r23
    1602:	8f 93       	push	r24
    1604:	9f 93       	push	r25
    1606:	af 93       	push	r26
    1608:	bf 93       	push	r27
    160a:	ef 93       	push	r30
    160c:	ff 93       	push	r31
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
	EXTI_GLOBALFUNC[1]();
    1616:	e0 91 9a 00 	lds	r30, 0x009A
    161a:	f0 91 9b 00 	lds	r31, 0x009B
    161e:	09 95       	icall
}
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	ff 91       	pop	r31
    1626:	ef 91       	pop	r30
    1628:	bf 91       	pop	r27
    162a:	af 91       	pop	r26
    162c:	9f 91       	pop	r25
    162e:	8f 91       	pop	r24
    1630:	7f 91       	pop	r23
    1632:	6f 91       	pop	r22
    1634:	5f 91       	pop	r21
    1636:	4f 91       	pop	r20
    1638:	3f 91       	pop	r19
    163a:	2f 91       	pop	r18
    163c:	0f 90       	pop	r0
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	0f 90       	pop	r0
    1642:	1f 90       	pop	r1
    1644:	18 95       	reti

00001646 <__vector_3>:

void __vector_3 (void) {
    1646:	1f 92       	push	r1
    1648:	0f 92       	push	r0
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	0f 92       	push	r0
    164e:	11 24       	eor	r1, r1
    1650:	2f 93       	push	r18
    1652:	3f 93       	push	r19
    1654:	4f 93       	push	r20
    1656:	5f 93       	push	r21
    1658:	6f 93       	push	r22
    165a:	7f 93       	push	r23
    165c:	8f 93       	push	r24
    165e:	9f 93       	push	r25
    1660:	af 93       	push	r26
    1662:	bf 93       	push	r27
    1664:	ef 93       	push	r30
    1666:	ff 93       	push	r31
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
	EXTI_GLOBALFUNC[2]();
    1670:	e0 91 9c 00 	lds	r30, 0x009C
    1674:	f0 91 9d 00 	lds	r31, 0x009D
    1678:	09 95       	icall
}
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	ff 91       	pop	r31
    1680:	ef 91       	pop	r30
    1682:	bf 91       	pop	r27
    1684:	af 91       	pop	r26
    1686:	9f 91       	pop	r25
    1688:	8f 91       	pop	r24
    168a:	7f 91       	pop	r23
    168c:	6f 91       	pop	r22
    168e:	5f 91       	pop	r21
    1690:	4f 91       	pop	r20
    1692:	3f 91       	pop	r19
    1694:	2f 91       	pop	r18
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	0f 90       	pop	r0
    169c:	1f 90       	pop	r1
    169e:	18 95       	reti

000016a0 <M_GIE_void_EnableGlobalInterrupt>:
#include "GIE_reg.h"

/*
 * Public Function Definition 
 */
void M_GIE_void_EnableGlobalInterrupt(void) {
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    16a8:	af e5       	ldi	r26, 0x5F	; 95
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	ef e5       	ldi	r30, 0x5F	; 95
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	80 68       	ori	r24, 0x80	; 128
    16b4:	8c 93       	st	X, r24
}
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <M_GIE_void_DisableGlobalInterrupt>:
void M_GIE_void_DisableGlobalInterrupt(void) {
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    16c4:	af e5       	ldi	r26, 0x5F	; 95
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	ef e5       	ldi	r30, 0x5F	; 95
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	8f 77       	andi	r24, 0x7F	; 127
    16d0:	8c 93       	st	X, r24
}
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	08 95       	ret

000016d8 <LCD_voidInit>:
#include "DIO_int.h"
#include "PORT.h"
#include "LCD.h"

void LCD_voidInit(void)
{
    16d8:	0f 93       	push	r16
    16da:	1f 93       	push	r17
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	c4 55       	subi	r28, 0x54	; 84
    16e6:	d0 40       	sbci	r29, 0x00	; 0
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61
	PORT_enumSET_PINDirection(RS, PORT_u8PINDIR_OUTPUT);
    16f2:	83 e0       	ldi	r24, 0x03	; 3
    16f4:	61 e0       	ldi	r22, 0x01	; 1
    16f6:	0e 94 9e 13 	call	0x273c	; 0x273c <PORT_enumSET_PINDirection>
	PORT_enumSET_PINDirection(EN, PORT_u8PINDIR_OUTPUT);
    16fa:	82 e0       	ldi	r24, 0x02	; 2
    16fc:	61 e0       	ldi	r22, 0x01	; 1
    16fe:	0e 94 9e 13 	call	0x273c	; 0x273c <PORT_enumSET_PINDirection>
	PORT_enumSET_PINDirection(D4 , PORT_u8PINDIR_OUTPUT);
    1702:	88 e0       	ldi	r24, 0x08	; 8
    1704:	61 e0       	ldi	r22, 0x01	; 1
    1706:	0e 94 9e 13 	call	0x273c	; 0x273c <PORT_enumSET_PINDirection>
	PORT_enumSET_PINDirection(D5 , PORT_u8PINDIR_OUTPUT);
    170a:	89 e0       	ldi	r24, 0x09	; 9
    170c:	61 e0       	ldi	r22, 0x01	; 1
    170e:	0e 94 9e 13 	call	0x273c	; 0x273c <PORT_enumSET_PINDirection>
	PORT_enumSET_PINDirection(D6 , PORT_u8PINDIR_OUTPUT);
    1712:	8a e0       	ldi	r24, 0x0A	; 10
    1714:	61 e0       	ldi	r22, 0x01	; 1
    1716:	0e 94 9e 13 	call	0x273c	; 0x273c <PORT_enumSET_PINDirection>
	PORT_enumSET_PINDirection(D7 , PORT_u8PINDIR_OUTPUT);
    171a:	8c e0       	ldi	r24, 0x0C	; 12
    171c:	61 e0       	ldi	r22, 0x01	; 1
    171e:	0e 94 9e 13 	call	0x273c	; 0x273c <PORT_enumSET_PINDirection>
    1722:	fe 01       	movw	r30, r28
    1724:	ef 5a       	subi	r30, 0xAF	; 175
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	a0 ef       	ldi	r26, 0xF0	; 240
    172e:	b1 e4       	ldi	r27, 0x41	; 65
    1730:	80 83       	st	Z, r24
    1732:	91 83       	std	Z+1, r25	; 0x01
    1734:	a2 83       	std	Z+2, r26	; 0x02
    1736:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1738:	8e 01       	movw	r16, r28
    173a:	03 5b       	subi	r16, 0xB3	; 179
    173c:	1f 4f       	sbci	r17, 0xFF	; 255
    173e:	fe 01       	movw	r30, r28
    1740:	ef 5a       	subi	r30, 0xAF	; 175
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	60 81       	ld	r22, Z
    1746:	71 81       	ldd	r23, Z+1	; 0x01
    1748:	82 81       	ldd	r24, Z+2	; 0x02
    174a:	93 81       	ldd	r25, Z+3	; 0x03
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	4a ef       	ldi	r20, 0xFA	; 250
    1752:	54 e4       	ldi	r21, 0x44	; 68
    1754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	f8 01       	movw	r30, r16
    175e:	80 83       	st	Z, r24
    1760:	91 83       	std	Z+1, r25	; 0x01
    1762:	a2 83       	std	Z+2, r26	; 0x02
    1764:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1766:	fe 01       	movw	r30, r28
    1768:	e3 5b       	subi	r30, 0xB3	; 179
    176a:	ff 4f       	sbci	r31, 0xFF	; 255
    176c:	60 81       	ld	r22, Z
    176e:	71 81       	ldd	r23, Z+1	; 0x01
    1770:	82 81       	ldd	r24, Z+2	; 0x02
    1772:	93 81       	ldd	r25, Z+3	; 0x03
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e8       	ldi	r20, 0x80	; 128
    177a:	5f e3       	ldi	r21, 0x3F	; 63
    177c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1780:	88 23       	and	r24, r24
    1782:	44 f4       	brge	.+16     	; 0x1794 <LCD_voidInit+0xbc>
		__ticks = 1;
    1784:	fe 01       	movw	r30, r28
    1786:	e5 5b       	subi	r30, 0xB5	; 181
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	91 83       	std	Z+1, r25	; 0x01
    1790:	80 83       	st	Z, r24
    1792:	64 c0       	rjmp	.+200    	; 0x185c <LCD_voidInit+0x184>
	else if (__tmp > 65535)
    1794:	fe 01       	movw	r30, r28
    1796:	e3 5b       	subi	r30, 0xB3	; 179
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	60 81       	ld	r22, Z
    179c:	71 81       	ldd	r23, Z+1	; 0x01
    179e:	82 81       	ldd	r24, Z+2	; 0x02
    17a0:	93 81       	ldd	r25, Z+3	; 0x03
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	3f ef       	ldi	r19, 0xFF	; 255
    17a6:	4f e7       	ldi	r20, 0x7F	; 127
    17a8:	57 e4       	ldi	r21, 0x47	; 71
    17aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17ae:	18 16       	cp	r1, r24
    17b0:	0c f0       	brlt	.+2      	; 0x17b4 <LCD_voidInit+0xdc>
    17b2:	43 c0       	rjmp	.+134    	; 0x183a <LCD_voidInit+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b4:	fe 01       	movw	r30, r28
    17b6:	ef 5a       	subi	r30, 0xAF	; 175
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	60 81       	ld	r22, Z
    17bc:	71 81       	ldd	r23, Z+1	; 0x01
    17be:	82 81       	ldd	r24, Z+2	; 0x02
    17c0:	93 81       	ldd	r25, Z+3	; 0x03
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e2       	ldi	r20, 0x20	; 32
    17c8:	51 e4       	ldi	r21, 0x41	; 65
    17ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	8e 01       	movw	r16, r28
    17d4:	05 5b       	subi	r16, 0xB5	; 181
    17d6:	1f 4f       	sbci	r17, 0xFF	; 255
    17d8:	bc 01       	movw	r22, r24
    17da:	cd 01       	movw	r24, r26
    17dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	f8 01       	movw	r30, r16
    17e6:	91 83       	std	Z+1, r25	; 0x01
    17e8:	80 83       	st	Z, r24
    17ea:	1f c0       	rjmp	.+62     	; 0x182a <LCD_voidInit+0x152>
    17ec:	fe 01       	movw	r30, r28
    17ee:	e7 5b       	subi	r30, 0xB7	; 183
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	88 ec       	ldi	r24, 0xC8	; 200
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17fa:	fe 01       	movw	r30, r28
    17fc:	e7 5b       	subi	r30, 0xB7	; 183
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	80 81       	ld	r24, Z
    1802:	91 81       	ldd	r25, Z+1	; 0x01
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <LCD_voidInit+0x12c>
    1808:	fe 01       	movw	r30, r28
    180a:	e7 5b       	subi	r30, 0xB7	; 183
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	91 83       	std	Z+1, r25	; 0x01
    1810:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1812:	de 01       	movw	r26, r28
    1814:	a5 5b       	subi	r26, 0xB5	; 181
    1816:	bf 4f       	sbci	r27, 0xFF	; 255
    1818:	fe 01       	movw	r30, r28
    181a:	e5 5b       	subi	r30, 0xB5	; 181
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	80 81       	ld	r24, Z
    1820:	91 81       	ldd	r25, Z+1	; 0x01
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	11 96       	adiw	r26, 0x01	; 1
    1826:	9c 93       	st	X, r25
    1828:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182a:	fe 01       	movw	r30, r28
    182c:	e5 5b       	subi	r30, 0xB5	; 181
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	80 81       	ld	r24, Z
    1832:	91 81       	ldd	r25, Z+1	; 0x01
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	d1 f6       	brne	.-76     	; 0x17ec <LCD_voidInit+0x114>
    1838:	27 c0       	rjmp	.+78     	; 0x1888 <LCD_voidInit+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183a:	8e 01       	movw	r16, r28
    183c:	05 5b       	subi	r16, 0xB5	; 181
    183e:	1f 4f       	sbci	r17, 0xFF	; 255
    1840:	fe 01       	movw	r30, r28
    1842:	e3 5b       	subi	r30, 0xB3	; 179
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	60 81       	ld	r22, Z
    1848:	71 81       	ldd	r23, Z+1	; 0x01
    184a:	82 81       	ldd	r24, Z+2	; 0x02
    184c:	93 81       	ldd	r25, Z+3	; 0x03
    184e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	f8 01       	movw	r30, r16
    1858:	91 83       	std	Z+1, r25	; 0x01
    185a:	80 83       	st	Z, r24
    185c:	de 01       	movw	r26, r28
    185e:	a9 5b       	subi	r26, 0xB9	; 185
    1860:	bf 4f       	sbci	r27, 0xFF	; 255
    1862:	fe 01       	movw	r30, r28
    1864:	e5 5b       	subi	r30, 0xB5	; 181
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	80 81       	ld	r24, Z
    186a:	91 81       	ldd	r25, Z+1	; 0x01
    186c:	8d 93       	st	X+, r24
    186e:	9c 93       	st	X, r25
    1870:	fe 01       	movw	r30, r28
    1872:	e9 5b       	subi	r30, 0xB9	; 185
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	80 81       	ld	r24, Z
    1878:	91 81       	ldd	r25, Z+1	; 0x01
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	f1 f7       	brne	.-4      	; 0x187a <LCD_voidInit+0x1a2>
    187e:	fe 01       	movw	r30, r28
    1880:	e9 5b       	subi	r30, 0xB9	; 185
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	91 83       	std	Z+1, r25	; 0x01
    1886:	80 83       	st	Z, r24
	_delay_ms (30);

	LCD_voidSendCommand(LCD_RETURN_HOME);
    1888:	82 e0       	ldi	r24, 0x02	; 2
    188a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCommand>
    188e:	fe 01       	movw	r30, r28
    1890:	ed 5b       	subi	r30, 0xBD	; 189
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	a0 e7       	ldi	r26, 0x70	; 112
    189a:	b1 e4       	ldi	r27, 0x41	; 65
    189c:	80 83       	st	Z, r24
    189e:	91 83       	std	Z+1, r25	; 0x01
    18a0:	a2 83       	std	Z+2, r26	; 0x02
    18a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a4:	8e 01       	movw	r16, r28
    18a6:	01 5c       	subi	r16, 0xC1	; 193
    18a8:	1f 4f       	sbci	r17, 0xFF	; 255
    18aa:	fe 01       	movw	r30, r28
    18ac:	ed 5b       	subi	r30, 0xBD	; 189
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	60 81       	ld	r22, Z
    18b2:	71 81       	ldd	r23, Z+1	; 0x01
    18b4:	82 81       	ldd	r24, Z+2	; 0x02
    18b6:	93 81       	ldd	r25, Z+3	; 0x03
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	4a ef       	ldi	r20, 0xFA	; 250
    18be:	54 e4       	ldi	r21, 0x44	; 68
    18c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	f8 01       	movw	r30, r16
    18ca:	80 83       	st	Z, r24
    18cc:	91 83       	std	Z+1, r25	; 0x01
    18ce:	a2 83       	std	Z+2, r26	; 0x02
    18d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18d2:	fe 01       	movw	r30, r28
    18d4:	ff 96       	adiw	r30, 0x3f	; 63
    18d6:	60 81       	ld	r22, Z
    18d8:	71 81       	ldd	r23, Z+1	; 0x01
    18da:	82 81       	ldd	r24, Z+2	; 0x02
    18dc:	93 81       	ldd	r25, Z+3	; 0x03
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e8       	ldi	r20, 0x80	; 128
    18e4:	5f e3       	ldi	r21, 0x3F	; 63
    18e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18ea:	88 23       	and	r24, r24
    18ec:	2c f4       	brge	.+10     	; 0x18f8 <LCD_voidInit+0x220>
		__ticks = 1;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	9e af       	std	Y+62, r25	; 0x3e
    18f4:	8d af       	std	Y+61, r24	; 0x3d
    18f6:	46 c0       	rjmp	.+140    	; 0x1984 <LCD_voidInit+0x2ac>
	else if (__tmp > 65535)
    18f8:	fe 01       	movw	r30, r28
    18fa:	ff 96       	adiw	r30, 0x3f	; 63
    18fc:	60 81       	ld	r22, Z
    18fe:	71 81       	ldd	r23, Z+1	; 0x01
    1900:	82 81       	ldd	r24, Z+2	; 0x02
    1902:	93 81       	ldd	r25, Z+3	; 0x03
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	3f ef       	ldi	r19, 0xFF	; 255
    1908:	4f e7       	ldi	r20, 0x7F	; 127
    190a:	57 e4       	ldi	r21, 0x47	; 71
    190c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1910:	18 16       	cp	r1, r24
    1912:	64 f5       	brge	.+88     	; 0x196c <LCD_voidInit+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1914:	fe 01       	movw	r30, r28
    1916:	ed 5b       	subi	r30, 0xBD	; 189
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	60 81       	ld	r22, Z
    191c:	71 81       	ldd	r23, Z+1	; 0x01
    191e:	82 81       	ldd	r24, Z+2	; 0x02
    1920:	93 81       	ldd	r25, Z+3	; 0x03
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e2       	ldi	r20, 0x20	; 32
    1928:	51 e4       	ldi	r21, 0x41	; 65
    192a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	bc 01       	movw	r22, r24
    1934:	cd 01       	movw	r24, r26
    1936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	9e af       	std	Y+62, r25	; 0x3e
    1940:	8d af       	std	Y+61, r24	; 0x3d
    1942:	0f c0       	rjmp	.+30     	; 0x1962 <LCD_voidInit+0x28a>
    1944:	88 ec       	ldi	r24, 0xC8	; 200
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	9c af       	std	Y+60, r25	; 0x3c
    194a:	8b af       	std	Y+59, r24	; 0x3b
    194c:	8b ad       	ldd	r24, Y+59	; 0x3b
    194e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	f1 f7       	brne	.-4      	; 0x1950 <LCD_voidInit+0x278>
    1954:	9c af       	std	Y+60, r25	; 0x3c
    1956:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1958:	8d ad       	ldd	r24, Y+61	; 0x3d
    195a:	9e ad       	ldd	r25, Y+62	; 0x3e
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	9e af       	std	Y+62, r25	; 0x3e
    1960:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1962:	8d ad       	ldd	r24, Y+61	; 0x3d
    1964:	9e ad       	ldd	r25, Y+62	; 0x3e
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	69 f7       	brne	.-38     	; 0x1944 <LCD_voidInit+0x26c>
    196a:	16 c0       	rjmp	.+44     	; 0x1998 <LCD_voidInit+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    196c:	fe 01       	movw	r30, r28
    196e:	ff 96       	adiw	r30, 0x3f	; 63
    1970:	60 81       	ld	r22, Z
    1972:	71 81       	ldd	r23, Z+1	; 0x01
    1974:	82 81       	ldd	r24, Z+2	; 0x02
    1976:	93 81       	ldd	r25, Z+3	; 0x03
    1978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	9e af       	std	Y+62, r25	; 0x3e
    1982:	8d af       	std	Y+61, r24	; 0x3d
    1984:	8d ad       	ldd	r24, Y+61	; 0x3d
    1986:	9e ad       	ldd	r25, Y+62	; 0x3e
    1988:	9a af       	std	Y+58, r25	; 0x3a
    198a:	89 af       	std	Y+57, r24	; 0x39
    198c:	89 ad       	ldd	r24, Y+57	; 0x39
    198e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <LCD_voidInit+0x2b8>
    1994:	9a af       	std	Y+58, r25	; 0x3a
    1996:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms (15);
	LCD_voidSendCommand(FunctionSet1_Command);
    1998:	82 e2       	ldi	r24, 0x22	; 34
    199a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCommand>
	DIO_enum_WriteChannel(EN, DIO_u8High);
    199e:	82 e0       	ldi	r24, 0x02	; 2
    19a0:	61 e0       	ldi	r22, 0x01	; 1
    19a2:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>

	DIO_enum_WriteChannel(D4, GET_BIT(FunctionSet2_Command,4));
    19a6:	88 e0       	ldi	r24, 0x08	; 8
    19a8:	60 e0       	ldi	r22, 0x00	; 0
    19aa:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>
	DIO_enum_WriteChannel(D5, GET_BIT(FunctionSet2_Command,5));
    19ae:	89 e0       	ldi	r24, 0x09	; 9
    19b0:	60 e0       	ldi	r22, 0x00	; 0
    19b2:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>
	DIO_enum_WriteChannel(D6, GET_BIT(FunctionSet2_Command,6));
    19b6:	8a e0       	ldi	r24, 0x0A	; 10
    19b8:	60 e0       	ldi	r22, 0x00	; 0
    19ba:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>
	DIO_enum_WriteChannel(D7, GET_BIT(FunctionSet2_Command,7));
    19be:	8c e0       	ldi	r24, 0x0C	; 12
    19c0:	61 e0       	ldi	r22, 0x01	; 1
    19c2:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>
	
	DIO_enum_WriteChannel(EN, DIO_u8LOW);
    19c6:	82 e0       	ldi	r24, 0x02	; 2
    19c8:	60 e0       	ldi	r22, 0x00	; 0
    19ca:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a0 e8       	ldi	r26, 0x80	; 128
    19d4:	bf e3       	ldi	r27, 0x3F	; 63
    19d6:	8d ab       	std	Y+53, r24	; 0x35
    19d8:	9e ab       	std	Y+54, r25	; 0x36
    19da:	af ab       	std	Y+55, r26	; 0x37
    19dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19de:	6d a9       	ldd	r22, Y+53	; 0x35
    19e0:	7e a9       	ldd	r23, Y+54	; 0x36
    19e2:	8f a9       	ldd	r24, Y+55	; 0x37
    19e4:	98 ad       	ldd	r25, Y+56	; 0x38
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	4a ef       	ldi	r20, 0xFA	; 250
    19ec:	54 e4       	ldi	r21, 0x44	; 68
    19ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	89 ab       	std	Y+49, r24	; 0x31
    19f8:	9a ab       	std	Y+50, r25	; 0x32
    19fa:	ab ab       	std	Y+51, r26	; 0x33
    19fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1a00:	7a a9       	ldd	r23, Y+50	; 0x32
    1a02:	8b a9       	ldd	r24, Y+51	; 0x33
    1a04:	9c a9       	ldd	r25, Y+52	; 0x34
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e8       	ldi	r20, 0x80	; 128
    1a0c:	5f e3       	ldi	r21, 0x3F	; 63
    1a0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a12:	88 23       	and	r24, r24
    1a14:	2c f4       	brge	.+10     	; 0x1a20 <LCD_voidInit+0x348>
		__ticks = 1;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	98 ab       	std	Y+48, r25	; 0x30
    1a1c:	8f a7       	std	Y+47, r24	; 0x2f
    1a1e:	3f c0       	rjmp	.+126    	; 0x1a9e <LCD_voidInit+0x3c6>
	else if (__tmp > 65535)
    1a20:	69 a9       	ldd	r22, Y+49	; 0x31
    1a22:	7a a9       	ldd	r23, Y+50	; 0x32
    1a24:	8b a9       	ldd	r24, Y+51	; 0x33
    1a26:	9c a9       	ldd	r25, Y+52	; 0x34
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	3f ef       	ldi	r19, 0xFF	; 255
    1a2c:	4f e7       	ldi	r20, 0x7F	; 127
    1a2e:	57 e4       	ldi	r21, 0x47	; 71
    1a30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a34:	18 16       	cp	r1, r24
    1a36:	4c f5       	brge	.+82     	; 0x1a8a <LCD_voidInit+0x3b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a38:	6d a9       	ldd	r22, Y+53	; 0x35
    1a3a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a3c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a3e:	98 ad       	ldd	r25, Y+56	; 0x38
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e2       	ldi	r20, 0x20	; 32
    1a46:	51 e4       	ldi	r21, 0x41	; 65
    1a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	bc 01       	movw	r22, r24
    1a52:	cd 01       	movw	r24, r26
    1a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	98 ab       	std	Y+48, r25	; 0x30
    1a5e:	8f a7       	std	Y+47, r24	; 0x2f
    1a60:	0f c0       	rjmp	.+30     	; 0x1a80 <LCD_voidInit+0x3a8>
    1a62:	88 ec       	ldi	r24, 0xC8	; 200
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	9e a7       	std	Y+46, r25	; 0x2e
    1a68:	8d a7       	std	Y+45, r24	; 0x2d
    1a6a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a6c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <LCD_voidInit+0x396>
    1a72:	9e a7       	std	Y+46, r25	; 0x2e
    1a74:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a76:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a78:	98 a9       	ldd	r25, Y+48	; 0x30
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	98 ab       	std	Y+48, r25	; 0x30
    1a7e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a82:	98 a9       	ldd	r25, Y+48	; 0x30
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	69 f7       	brne	.-38     	; 0x1a62 <LCD_voidInit+0x38a>
    1a88:	14 c0       	rjmp	.+40     	; 0x1ab2 <LCD_voidInit+0x3da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a8c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a8e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a90:	9c a9       	ldd	r25, Y+52	; 0x34
    1a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	98 ab       	std	Y+48, r25	; 0x30
    1a9c:	8f a7       	std	Y+47, r24	; 0x2f
    1a9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aa0:	98 a9       	ldd	r25, Y+48	; 0x30
    1aa2:	9c a7       	std	Y+44, r25	; 0x2c
    1aa4:	8b a7       	std	Y+43, r24	; 0x2b
    1aa6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1aa8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <LCD_voidInit+0x3d2>
    1aae:	9c a7       	std	Y+44, r25	; 0x2c
    1ab0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms (1);
	LCD_voidSendCommand(LCD_DISPLAY_ON);
    1ab2:	8c e0       	ldi	r24, 0x0C	; 12
    1ab4:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCommand>
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	a0 e8       	ldi	r26, 0x80	; 128
    1abe:	bf e3       	ldi	r27, 0x3F	; 63
    1ac0:	8f a3       	std	Y+39, r24	; 0x27
    1ac2:	98 a7       	std	Y+40, r25	; 0x28
    1ac4:	a9 a7       	std	Y+41, r26	; 0x29
    1ac6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac8:	6f a1       	ldd	r22, Y+39	; 0x27
    1aca:	78 a5       	ldd	r23, Y+40	; 0x28
    1acc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ace:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	4a ef       	ldi	r20, 0xFA	; 250
    1ad6:	54 e4       	ldi	r21, 0x44	; 68
    1ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	8b a3       	std	Y+35, r24	; 0x23
    1ae2:	9c a3       	std	Y+36, r25	; 0x24
    1ae4:	ad a3       	std	Y+37, r26	; 0x25
    1ae6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ae8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aea:	7c a1       	ldd	r23, Y+36	; 0x24
    1aec:	8d a1       	ldd	r24, Y+37	; 0x25
    1aee:	9e a1       	ldd	r25, Y+38	; 0x26
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e8       	ldi	r20, 0x80	; 128
    1af6:	5f e3       	ldi	r21, 0x3F	; 63
    1af8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1afc:	88 23       	and	r24, r24
    1afe:	2c f4       	brge	.+10     	; 0x1b0a <LCD_voidInit+0x432>
		__ticks = 1;
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	9a a3       	std	Y+34, r25	; 0x22
    1b06:	89 a3       	std	Y+33, r24	; 0x21
    1b08:	3f c0       	rjmp	.+126    	; 0x1b88 <LCD_voidInit+0x4b0>
	else if (__tmp > 65535)
    1b0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b10:	9e a1       	ldd	r25, Y+38	; 0x26
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	3f ef       	ldi	r19, 0xFF	; 255
    1b16:	4f e7       	ldi	r20, 0x7F	; 127
    1b18:	57 e4       	ldi	r21, 0x47	; 71
    1b1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b1e:	18 16       	cp	r1, r24
    1b20:	4c f5       	brge	.+82     	; 0x1b74 <LCD_voidInit+0x49c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b22:	6f a1       	ldd	r22, Y+39	; 0x27
    1b24:	78 a5       	ldd	r23, Y+40	; 0x28
    1b26:	89 a5       	ldd	r24, Y+41	; 0x29
    1b28:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	40 e2       	ldi	r20, 0x20	; 32
    1b30:	51 e4       	ldi	r21, 0x41	; 65
    1b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	bc 01       	movw	r22, r24
    1b3c:	cd 01       	movw	r24, r26
    1b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	9a a3       	std	Y+34, r25	; 0x22
    1b48:	89 a3       	std	Y+33, r24	; 0x21
    1b4a:	0f c0       	rjmp	.+30     	; 0x1b6a <LCD_voidInit+0x492>
    1b4c:	88 ec       	ldi	r24, 0xC8	; 200
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	98 a3       	std	Y+32, r25	; 0x20
    1b52:	8f 8f       	std	Y+31, r24	; 0x1f
    1b54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b56:	98 a1       	ldd	r25, Y+32	; 0x20
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <LCD_voidInit+0x480>
    1b5c:	98 a3       	std	Y+32, r25	; 0x20
    1b5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b60:	89 a1       	ldd	r24, Y+33	; 0x21
    1b62:	9a a1       	ldd	r25, Y+34	; 0x22
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	9a a3       	std	Y+34, r25	; 0x22
    1b68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	69 f7       	brne	.-38     	; 0x1b4c <LCD_voidInit+0x474>
    1b72:	14 c0       	rjmp	.+40     	; 0x1b9c <LCD_voidInit+0x4c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b74:	6b a1       	ldd	r22, Y+35	; 0x23
    1b76:	7c a1       	ldd	r23, Y+36	; 0x24
    1b78:	8d a1       	ldd	r24, Y+37	; 0x25
    1b7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	9a a3       	std	Y+34, r25	; 0x22
    1b86:	89 a3       	std	Y+33, r24	; 0x21
    1b88:	89 a1       	ldd	r24, Y+33	; 0x21
    1b8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b8c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b8e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <LCD_voidInit+0x4bc>
    1b98:	9e 8f       	std	Y+30, r25	; 0x1e
    1b9a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms (1);
	LCD_voidSendCommand(LCD_CLEAR);
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCommand>
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	a0 e7       	ldi	r26, 0x70	; 112
    1ba8:	b1 e4       	ldi	r27, 0x41	; 65
    1baa:	89 8f       	std	Y+25, r24	; 0x19
    1bac:	9a 8f       	std	Y+26, r25	; 0x1a
    1bae:	ab 8f       	std	Y+27, r26	; 0x1b
    1bb0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb2:	69 8d       	ldd	r22, Y+25	; 0x19
    1bb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	4a ef       	ldi	r20, 0xFA	; 250
    1bc0:	54 e4       	ldi	r21, 0x44	; 68
    1bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	8d 8b       	std	Y+21, r24	; 0x15
    1bcc:	9e 8b       	std	Y+22, r25	; 0x16
    1bce:	af 8b       	std	Y+23, r26	; 0x17
    1bd0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e8       	ldi	r20, 0x80	; 128
    1be0:	5f e3       	ldi	r21, 0x3F	; 63
    1be2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1be6:	88 23       	and	r24, r24
    1be8:	2c f4       	brge	.+10     	; 0x1bf4 <LCD_voidInit+0x51c>
		__ticks = 1;
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	9c 8b       	std	Y+20, r25	; 0x14
    1bf0:	8b 8b       	std	Y+19, r24	; 0x13
    1bf2:	3f c0       	rjmp	.+126    	; 0x1c72 <LCD_voidInit+0x59a>
	else if (__tmp > 65535)
    1bf4:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf6:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	3f ef       	ldi	r19, 0xFF	; 255
    1c00:	4f e7       	ldi	r20, 0x7F	; 127
    1c02:	57 e4       	ldi	r21, 0x47	; 71
    1c04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c08:	18 16       	cp	r1, r24
    1c0a:	4c f5       	brge	.+82     	; 0x1c5e <LCD_voidInit+0x586>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e2       	ldi	r20, 0x20	; 32
    1c1a:	51 e4       	ldi	r21, 0x41	; 65
    1c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	bc 01       	movw	r22, r24
    1c26:	cd 01       	movw	r24, r26
    1c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	9c 8b       	std	Y+20, r25	; 0x14
    1c32:	8b 8b       	std	Y+19, r24	; 0x13
    1c34:	0f c0       	rjmp	.+30     	; 0x1c54 <LCD_voidInit+0x57c>
    1c36:	88 ec       	ldi	r24, 0xC8	; 200
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9a 8b       	std	Y+18, r25	; 0x12
    1c3c:	89 8b       	std	Y+17, r24	; 0x11
    1c3e:	89 89       	ldd	r24, Y+17	; 0x11
    1c40:	9a 89       	ldd	r25, Y+18	; 0x12
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <LCD_voidInit+0x56a>
    1c46:	9a 8b       	std	Y+18, r25	; 0x12
    1c48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	9c 8b       	std	Y+20, r25	; 0x14
    1c52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c54:	8b 89       	ldd	r24, Y+19	; 0x13
    1c56:	9c 89       	ldd	r25, Y+20	; 0x14
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	69 f7       	brne	.-38     	; 0x1c36 <LCD_voidInit+0x55e>
    1c5c:	14 c0       	rjmp	.+40     	; 0x1c86 <LCD_voidInit+0x5ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c60:	7e 89       	ldd	r23, Y+22	; 0x16
    1c62:	8f 89       	ldd	r24, Y+23	; 0x17
    1c64:	98 8d       	ldd	r25, Y+24	; 0x18
    1c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	9c 8b       	std	Y+20, r25	; 0x14
    1c70:	8b 8b       	std	Y+19, r24	; 0x13
    1c72:	8b 89       	ldd	r24, Y+19	; 0x13
    1c74:	9c 89       	ldd	r25, Y+20	; 0x14
    1c76:	98 8b       	std	Y+16, r25	; 0x10
    1c78:	8f 87       	std	Y+15, r24	; 0x0f
    1c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c7c:	98 89       	ldd	r25, Y+16	; 0x10
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	f1 f7       	brne	.-4      	; 0x1c7e <LCD_voidInit+0x5a6>
    1c82:	98 8b       	std	Y+16, r25	; 0x10
    1c84:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (15);
	LCD_voidSendCommand(LCD_ENTRY_MODE);
    1c86:	86 e0       	ldi	r24, 0x06	; 6
    1c88:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCommand>
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	a0 e0       	ldi	r26, 0x00	; 0
    1c92:	b0 e4       	ldi	r27, 0x40	; 64
    1c94:	8b 87       	std	Y+11, r24	; 0x0b
    1c96:	9c 87       	std	Y+12, r25	; 0x0c
    1c98:	ad 87       	std	Y+13, r26	; 0x0d
    1c9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	4a ef       	ldi	r20, 0xFA	; 250
    1caa:	54 e4       	ldi	r21, 0x44	; 68
    1cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	8f 83       	std	Y+7, r24	; 0x07
    1cb6:	98 87       	std	Y+8, r25	; 0x08
    1cb8:	a9 87       	std	Y+9, r26	; 0x09
    1cba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cbe:	78 85       	ldd	r23, Y+8	; 0x08
    1cc0:	89 85       	ldd	r24, Y+9	; 0x09
    1cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e8       	ldi	r20, 0x80	; 128
    1cca:	5f e3       	ldi	r21, 0x3F	; 63
    1ccc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cd0:	88 23       	and	r24, r24
    1cd2:	2c f4       	brge	.+10     	; 0x1cde <LCD_voidInit+0x606>
		__ticks = 1;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	9e 83       	std	Y+6, r25	; 0x06
    1cda:	8d 83       	std	Y+5, r24	; 0x05
    1cdc:	3f c0       	rjmp	.+126    	; 0x1d5c <LCD_voidInit+0x684>
	else if (__tmp > 65535)
    1cde:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce0:	78 85       	ldd	r23, Y+8	; 0x08
    1ce2:	89 85       	ldd	r24, Y+9	; 0x09
    1ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	3f ef       	ldi	r19, 0xFF	; 255
    1cea:	4f e7       	ldi	r20, 0x7F	; 127
    1cec:	57 e4       	ldi	r21, 0x47	; 71
    1cee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf2:	18 16       	cp	r1, r24
    1cf4:	4c f5       	brge	.+82     	; 0x1d48 <LCD_voidInit+0x670>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e2       	ldi	r20, 0x20	; 32
    1d04:	51 e4       	ldi	r21, 0x41	; 65
    1d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	bc 01       	movw	r22, r24
    1d10:	cd 01       	movw	r24, r26
    1d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	9e 83       	std	Y+6, r25	; 0x06
    1d1c:	8d 83       	std	Y+5, r24	; 0x05
    1d1e:	0f c0       	rjmp	.+30     	; 0x1d3e <LCD_voidInit+0x666>
    1d20:	88 ec       	ldi	r24, 0xC8	; 200
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	9c 83       	std	Y+4, r25	; 0x04
    1d26:	8b 83       	std	Y+3, r24	; 0x03
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <LCD_voidInit+0x654>
    1d30:	9c 83       	std	Y+4, r25	; 0x04
    1d32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d34:	8d 81       	ldd	r24, Y+5	; 0x05
    1d36:	9e 81       	ldd	r25, Y+6	; 0x06
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	69 f7       	brne	.-38     	; 0x1d20 <LCD_voidInit+0x648>
    1d46:	14 c0       	rjmp	.+40     	; 0x1d70 <LCD_voidInit+0x698>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d48:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4a:	78 85       	ldd	r23, Y+8	; 0x08
    1d4c:	89 85       	ldd	r24, Y+9	; 0x09
    1d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
    1d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d60:	9a 83       	std	Y+2, r25	; 0x02
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	9a 81       	ldd	r25, Y+2	; 0x02
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	f1 f7       	brne	.-4      	; 0x1d68 <LCD_voidInit+0x690>
    1d6c:	9a 83       	std	Y+2, r25	; 0x02
    1d6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);

}
    1d70:	cc 5a       	subi	r28, 0xAC	; 172
    1d72:	df 4f       	sbci	r29, 0xFF	; 255
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	1f 91       	pop	r17
    1d84:	0f 91       	pop	r16
    1d86:	08 95       	ret

00001d88 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	0f 92       	push	r0
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	89 83       	std	Y+1, r24	; 0x01
	DIO_enum_WriteChannel(RS, DIO_u8LOW);
    1d94:	83 e0       	ldi	r24, 0x03	; 3
    1d96:	60 e0       	ldi	r22, 0x00	; 0
    1d98:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>
	LCD_voidSendDataBus(Copy_u8Command);
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_voidSendDataBus>
}
    1da2:	0f 90       	pop	r0
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <LCD_voidSendData>:
void LCD_voidSendData(u8 Copy_u8Data)
{
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	0f 92       	push	r0
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	89 83       	std	Y+1, r24	; 0x01
	DIO_enum_WriteChannel(RS, DIO_u8High);
    1db6:	83 e0       	ldi	r24, 0x03	; 3
    1db8:	61 e0       	ldi	r22, 0x01	; 1
    1dba:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>
	LCD_voidSendDataBus(Copy_u8Data);
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_voidSendDataBus>
}
    1dc4:	0f 90       	pop	r0
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <LCD_voidSendDataBus>:
void LCD_voidSendDataBus(u8 Copy_u8BUS)
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	e1 97       	sbiw	r28, 0x31	; 49
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	89 ab       	std	Y+49, r24	; 0x31
	DIO_enum_WriteChannel(EN, DIO_u8High);
    1de2:	82 e0       	ldi	r24, 0x02	; 2
    1de4:	61 e0       	ldi	r22, 0x01	; 1
    1de6:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>

	DIO_enum_WriteChannel(D7, GET_BIT(Copy_u8BUS,7));
    1dea:	89 a9       	ldd	r24, Y+49	; 0x31
    1dec:	98 2f       	mov	r25, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	99 27       	eor	r25, r25
    1df2:	99 1f       	adc	r25, r25
    1df4:	8c e0       	ldi	r24, 0x0C	; 12
    1df6:	69 2f       	mov	r22, r25
    1df8:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>
	DIO_enum_WriteChannel(D6, GET_BIT(Copy_u8BUS,6));
    1dfc:	89 a9       	ldd	r24, Y+49	; 0x31
    1dfe:	82 95       	swap	r24
    1e00:	86 95       	lsr	r24
    1e02:	86 95       	lsr	r24
    1e04:	83 70       	andi	r24, 0x03	; 3
    1e06:	98 2f       	mov	r25, r24
    1e08:	91 70       	andi	r25, 0x01	; 1
    1e0a:	8a e0       	ldi	r24, 0x0A	; 10
    1e0c:	69 2f       	mov	r22, r25
    1e0e:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>
	DIO_enum_WriteChannel(D5, GET_BIT(Copy_u8BUS,5));
    1e12:	89 a9       	ldd	r24, Y+49	; 0x31
    1e14:	82 95       	swap	r24
    1e16:	86 95       	lsr	r24
    1e18:	87 70       	andi	r24, 0x07	; 7
    1e1a:	98 2f       	mov	r25, r24
    1e1c:	91 70       	andi	r25, 0x01	; 1
    1e1e:	89 e0       	ldi	r24, 0x09	; 9
    1e20:	69 2f       	mov	r22, r25
    1e22:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>
	DIO_enum_WriteChannel(D4, GET_BIT(Copy_u8BUS,4));
    1e26:	89 a9       	ldd	r24, Y+49	; 0x31
    1e28:	82 95       	swap	r24
    1e2a:	8f 70       	andi	r24, 0x0F	; 15
    1e2c:	98 2f       	mov	r25, r24
    1e2e:	91 70       	andi	r25, 0x01	; 1
    1e30:	88 e0       	ldi	r24, 0x08	; 8
    1e32:	69 2f       	mov	r22, r25
    1e34:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>
	
	DIO_enum_WriteChannel(EN, DIO_u8LOW);
    1e38:	82 e0       	ldi	r24, 0x02	; 2
    1e3a:	60 e0       	ldi	r22, 0x00	; 0
    1e3c:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	a0 ea       	ldi	r26, 0xA0	; 160
    1e46:	b0 e4       	ldi	r27, 0x40	; 64
    1e48:	8d a7       	std	Y+45, r24	; 0x2d
    1e4a:	9e a7       	std	Y+46, r25	; 0x2e
    1e4c:	af a7       	std	Y+47, r26	; 0x2f
    1e4e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e50:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e52:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e56:	98 a9       	ldd	r25, Y+48	; 0x30
    1e58:	2b ea       	ldi	r18, 0xAB	; 171
    1e5a:	3a ea       	ldi	r19, 0xAA	; 170
    1e5c:	4a e2       	ldi	r20, 0x2A	; 42
    1e5e:	50 e4       	ldi	r21, 0x40	; 64
    1e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	89 a7       	std	Y+41, r24	; 0x29
    1e6a:	9a a7       	std	Y+42, r25	; 0x2a
    1e6c:	ab a7       	std	Y+43, r26	; 0x2b
    1e6e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1e70:	69 a5       	ldd	r22, Y+41	; 0x29
    1e72:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e74:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e76:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	40 e8       	ldi	r20, 0x80	; 128
    1e7e:	5f e3       	ldi	r21, 0x3F	; 63
    1e80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e84:	88 23       	and	r24, r24
    1e86:	1c f4       	brge	.+6      	; 0x1e8e <LCD_voidSendDataBus+0xc2>
		__ticks = 1;
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	88 a7       	std	Y+40, r24	; 0x28
    1e8c:	91 c0       	rjmp	.+290    	; 0x1fb0 <LCD_voidSendDataBus+0x1e4>
	else if (__tmp > 255)
    1e8e:	69 a5       	ldd	r22, Y+41	; 0x29
    1e90:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e92:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e94:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	4f e7       	ldi	r20, 0x7F	; 127
    1e9c:	53 e4       	ldi	r21, 0x43	; 67
    1e9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ea2:	18 16       	cp	r1, r24
    1ea4:	0c f0       	brlt	.+2      	; 0x1ea8 <LCD_voidSendDataBus+0xdc>
    1ea6:	7b c0       	rjmp	.+246    	; 0x1f9e <LCD_voidSendDataBus+0x1d2>
	{
		_delay_ms(__us / 1000.0);
    1ea8:	6d a5       	ldd	r22, Y+45	; 0x2d
    1eaa:	7e a5       	ldd	r23, Y+46	; 0x2e
    1eac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eae:	98 a9       	ldd	r25, Y+48	; 0x30
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	4a e7       	ldi	r20, 0x7A	; 122
    1eb6:	54 e4       	ldi	r21, 0x44	; 68
    1eb8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	8c a3       	std	Y+36, r24	; 0x24
    1ec2:	9d a3       	std	Y+37, r25	; 0x25
    1ec4:	ae a3       	std	Y+38, r26	; 0x26
    1ec6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec8:	6c a1       	ldd	r22, Y+36	; 0x24
    1eca:	7d a1       	ldd	r23, Y+37	; 0x25
    1ecc:	8e a1       	ldd	r24, Y+38	; 0x26
    1ece:	9f a1       	ldd	r25, Y+39	; 0x27
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	4a ef       	ldi	r20, 0xFA	; 250
    1ed6:	54 e4       	ldi	r21, 0x44	; 68
    1ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	88 a3       	std	Y+32, r24	; 0x20
    1ee2:	99 a3       	std	Y+33, r25	; 0x21
    1ee4:	aa a3       	std	Y+34, r26	; 0x22
    1ee6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1ee8:	68 a1       	ldd	r22, Y+32	; 0x20
    1eea:	79 a1       	ldd	r23, Y+33	; 0x21
    1eec:	8a a1       	ldd	r24, Y+34	; 0x22
    1eee:	9b a1       	ldd	r25, Y+35	; 0x23
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e8       	ldi	r20, 0x80	; 128
    1ef6:	5f e3       	ldi	r21, 0x3F	; 63
    1ef8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1efc:	88 23       	and	r24, r24
    1efe:	2c f4       	brge	.+10     	; 0x1f0a <LCD_voidSendDataBus+0x13e>
		__ticks = 1;
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	9f 8f       	std	Y+31, r25	; 0x1f
    1f06:	8e 8f       	std	Y+30, r24	; 0x1e
    1f08:	3f c0       	rjmp	.+126    	; 0x1f88 <LCD_voidSendDataBus+0x1bc>
	else if (__tmp > 65535)
    1f0a:	68 a1       	ldd	r22, Y+32	; 0x20
    1f0c:	79 a1       	ldd	r23, Y+33	; 0x21
    1f0e:	8a a1       	ldd	r24, Y+34	; 0x22
    1f10:	9b a1       	ldd	r25, Y+35	; 0x23
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	3f ef       	ldi	r19, 0xFF	; 255
    1f16:	4f e7       	ldi	r20, 0x7F	; 127
    1f18:	57 e4       	ldi	r21, 0x47	; 71
    1f1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f1e:	18 16       	cp	r1, r24
    1f20:	4c f5       	brge	.+82     	; 0x1f74 <LCD_voidSendDataBus+0x1a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f22:	6c a1       	ldd	r22, Y+36	; 0x24
    1f24:	7d a1       	ldd	r23, Y+37	; 0x25
    1f26:	8e a1       	ldd	r24, Y+38	; 0x26
    1f28:	9f a1       	ldd	r25, Y+39	; 0x27
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e2       	ldi	r20, 0x20	; 32
    1f30:	51 e4       	ldi	r21, 0x41	; 65
    1f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	bc 01       	movw	r22, r24
    1f3c:	cd 01       	movw	r24, r26
    1f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9f 8f       	std	Y+31, r25	; 0x1f
    1f48:	8e 8f       	std	Y+30, r24	; 0x1e
    1f4a:	0f c0       	rjmp	.+30     	; 0x1f6a <LCD_voidSendDataBus+0x19e>
    1f4c:	88 ec       	ldi	r24, 0xC8	; 200
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	9d 8f       	std	Y+29, r25	; 0x1d
    1f52:	8c 8f       	std	Y+28, r24	; 0x1c
    1f54:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f56:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <LCD_voidSendDataBus+0x18c>
    1f5c:	9d 8f       	std	Y+29, r25	; 0x1d
    1f5e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f60:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f62:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	9f 8f       	std	Y+31, r25	; 0x1f
    1f68:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f6c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	69 f7       	brne	.-38     	; 0x1f4c <LCD_voidSendDataBus+0x180>
    1f72:	24 c0       	rjmp	.+72     	; 0x1fbc <LCD_voidSendDataBus+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f74:	68 a1       	ldd	r22, Y+32	; 0x20
    1f76:	79 a1       	ldd	r23, Y+33	; 0x21
    1f78:	8a a1       	ldd	r24, Y+34	; 0x22
    1f7a:	9b a1       	ldd	r25, Y+35	; 0x23
    1f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	9f 8f       	std	Y+31, r25	; 0x1f
    1f86:	8e 8f       	std	Y+30, r24	; 0x1e
    1f88:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f8a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f8c:	9b 8f       	std	Y+27, r25	; 0x1b
    1f8e:	8a 8f       	std	Y+26, r24	; 0x1a
    1f90:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f92:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <LCD_voidSendDataBus+0x1c8>
    1f98:	9b 8f       	std	Y+27, r25	; 0x1b
    1f9a:	8a 8f       	std	Y+26, r24	; 0x1a
    1f9c:	0f c0       	rjmp	.+30     	; 0x1fbc <LCD_voidSendDataBus+0x1f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f9e:	69 a5       	ldd	r22, Y+41	; 0x29
    1fa0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fa2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fa4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	88 a7       	std	Y+40, r24	; 0x28
    1fb0:	88 a5       	ldd	r24, Y+40	; 0x28
    1fb2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fb4:	89 8d       	ldd	r24, Y+25	; 0x19
    1fb6:	8a 95       	dec	r24
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <LCD_voidSendDataBus+0x1ea>
    1fba:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us (5);
	DIO_enum_WriteChannel(EN, DIO_u8High);
    1fbc:	82 e0       	ldi	r24, 0x02	; 2
    1fbe:	61 e0       	ldi	r22, 0x01	; 1
    1fc0:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>

	DIO_enum_WriteChannel(D7, GET_BIT(Copy_u8BUS,3));
    1fc4:	89 a9       	ldd	r24, Y+49	; 0x31
    1fc6:	86 95       	lsr	r24
    1fc8:	86 95       	lsr	r24
    1fca:	86 95       	lsr	r24
    1fcc:	98 2f       	mov	r25, r24
    1fce:	91 70       	andi	r25, 0x01	; 1
    1fd0:	8c e0       	ldi	r24, 0x0C	; 12
    1fd2:	69 2f       	mov	r22, r25
    1fd4:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>
	DIO_enum_WriteChannel(D6, GET_BIT(Copy_u8BUS,2));
    1fd8:	89 a9       	ldd	r24, Y+49	; 0x31
    1fda:	86 95       	lsr	r24
    1fdc:	86 95       	lsr	r24
    1fde:	98 2f       	mov	r25, r24
    1fe0:	91 70       	andi	r25, 0x01	; 1
    1fe2:	8a e0       	ldi	r24, 0x0A	; 10
    1fe4:	69 2f       	mov	r22, r25
    1fe6:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>
	DIO_enum_WriteChannel(D5, GET_BIT(Copy_u8BUS,1));
    1fea:	89 a9       	ldd	r24, Y+49	; 0x31
    1fec:	86 95       	lsr	r24
    1fee:	98 2f       	mov	r25, r24
    1ff0:	91 70       	andi	r25, 0x01	; 1
    1ff2:	89 e0       	ldi	r24, 0x09	; 9
    1ff4:	69 2f       	mov	r22, r25
    1ff6:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>
	DIO_enum_WriteChannel(D4, GET_BIT(Copy_u8BUS,0));
    1ffa:	89 a9       	ldd	r24, Y+49	; 0x31
    1ffc:	98 2f       	mov	r25, r24
    1ffe:	91 70       	andi	r25, 0x01	; 1
    2000:	88 e0       	ldi	r24, 0x08	; 8
    2002:	69 2f       	mov	r22, r25
    2004:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>
	
	DIO_enum_WriteChannel(EN, DIO_u8LOW);
    2008:	82 e0       	ldi	r24, 0x02	; 2
    200a:	60 e0       	ldi	r22, 0x00	; 0
    200c:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	a0 ea       	ldi	r26, 0xA0	; 160
    2016:	b0 e4       	ldi	r27, 0x40	; 64
    2018:	8d 8b       	std	Y+21, r24	; 0x15
    201a:	9e 8b       	std	Y+22, r25	; 0x16
    201c:	af 8b       	std	Y+23, r26	; 0x17
    201e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2020:	6d 89       	ldd	r22, Y+21	; 0x15
    2022:	7e 89       	ldd	r23, Y+22	; 0x16
    2024:	8f 89       	ldd	r24, Y+23	; 0x17
    2026:	98 8d       	ldd	r25, Y+24	; 0x18
    2028:	2b ea       	ldi	r18, 0xAB	; 171
    202a:	3a ea       	ldi	r19, 0xAA	; 170
    202c:	4a e2       	ldi	r20, 0x2A	; 42
    202e:	50 e4       	ldi	r21, 0x40	; 64
    2030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	89 8b       	std	Y+17, r24	; 0x11
    203a:	9a 8b       	std	Y+18, r25	; 0x12
    203c:	ab 8b       	std	Y+19, r26	; 0x13
    203e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2040:	69 89       	ldd	r22, Y+17	; 0x11
    2042:	7a 89       	ldd	r23, Y+18	; 0x12
    2044:	8b 89       	ldd	r24, Y+19	; 0x13
    2046:	9c 89       	ldd	r25, Y+20	; 0x14
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e8       	ldi	r20, 0x80	; 128
    204e:	5f e3       	ldi	r21, 0x3F	; 63
    2050:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2054:	88 23       	and	r24, r24
    2056:	1c f4       	brge	.+6      	; 0x205e <LCD_voidSendDataBus+0x292>
		__ticks = 1;
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	88 8b       	std	Y+16, r24	; 0x10
    205c:	91 c0       	rjmp	.+290    	; 0x2180 <LCD_voidSendDataBus+0x3b4>
	else if (__tmp > 255)
    205e:	69 89       	ldd	r22, Y+17	; 0x11
    2060:	7a 89       	ldd	r23, Y+18	; 0x12
    2062:	8b 89       	ldd	r24, Y+19	; 0x13
    2064:	9c 89       	ldd	r25, Y+20	; 0x14
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	4f e7       	ldi	r20, 0x7F	; 127
    206c:	53 e4       	ldi	r21, 0x43	; 67
    206e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2072:	18 16       	cp	r1, r24
    2074:	0c f0       	brlt	.+2      	; 0x2078 <LCD_voidSendDataBus+0x2ac>
    2076:	7b c0       	rjmp	.+246    	; 0x216e <LCD_voidSendDataBus+0x3a2>
	{
		_delay_ms(__us / 1000.0);
    2078:	6d 89       	ldd	r22, Y+21	; 0x15
    207a:	7e 89       	ldd	r23, Y+22	; 0x16
    207c:	8f 89       	ldd	r24, Y+23	; 0x17
    207e:	98 8d       	ldd	r25, Y+24	; 0x18
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	4a e7       	ldi	r20, 0x7A	; 122
    2086:	54 e4       	ldi	r21, 0x44	; 68
    2088:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	8c 87       	std	Y+12, r24	; 0x0c
    2092:	9d 87       	std	Y+13, r25	; 0x0d
    2094:	ae 87       	std	Y+14, r26	; 0x0e
    2096:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2098:	6c 85       	ldd	r22, Y+12	; 0x0c
    209a:	7d 85       	ldd	r23, Y+13	; 0x0d
    209c:	8e 85       	ldd	r24, Y+14	; 0x0e
    209e:	9f 85       	ldd	r25, Y+15	; 0x0f
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	4a ef       	ldi	r20, 0xFA	; 250
    20a6:	54 e4       	ldi	r21, 0x44	; 68
    20a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	88 87       	std	Y+8, r24	; 0x08
    20b2:	99 87       	std	Y+9, r25	; 0x09
    20b4:	aa 87       	std	Y+10, r26	; 0x0a
    20b6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20b8:	68 85       	ldd	r22, Y+8	; 0x08
    20ba:	79 85       	ldd	r23, Y+9	; 0x09
    20bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    20be:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e8       	ldi	r20, 0x80	; 128
    20c6:	5f e3       	ldi	r21, 0x3F	; 63
    20c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20cc:	88 23       	and	r24, r24
    20ce:	2c f4       	brge	.+10     	; 0x20da <LCD_voidSendDataBus+0x30e>
		__ticks = 1;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	9f 83       	std	Y+7, r25	; 0x07
    20d6:	8e 83       	std	Y+6, r24	; 0x06
    20d8:	3f c0       	rjmp	.+126    	; 0x2158 <LCD_voidSendDataBus+0x38c>
	else if (__tmp > 65535)
    20da:	68 85       	ldd	r22, Y+8	; 0x08
    20dc:	79 85       	ldd	r23, Y+9	; 0x09
    20de:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	3f ef       	ldi	r19, 0xFF	; 255
    20e6:	4f e7       	ldi	r20, 0x7F	; 127
    20e8:	57 e4       	ldi	r21, 0x47	; 71
    20ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ee:	18 16       	cp	r1, r24
    20f0:	4c f5       	brge	.+82     	; 0x2144 <LCD_voidSendDataBus+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    20f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    20f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    20f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	40 e2       	ldi	r20, 0x20	; 32
    2100:	51 e4       	ldi	r21, 0x41	; 65
    2102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	bc 01       	movw	r22, r24
    210c:	cd 01       	movw	r24, r26
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9f 83       	std	Y+7, r25	; 0x07
    2118:	8e 83       	std	Y+6, r24	; 0x06
    211a:	0f c0       	rjmp	.+30     	; 0x213a <LCD_voidSendDataBus+0x36e>
    211c:	88 ec       	ldi	r24, 0xC8	; 200
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9d 83       	std	Y+5, r25	; 0x05
    2122:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2124:	8c 81       	ldd	r24, Y+4	; 0x04
    2126:	9d 81       	ldd	r25, Y+5	; 0x05
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	f1 f7       	brne	.-4      	; 0x2128 <LCD_voidSendDataBus+0x35c>
    212c:	9d 83       	std	Y+5, r25	; 0x05
    212e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2130:	8e 81       	ldd	r24, Y+6	; 0x06
    2132:	9f 81       	ldd	r25, Y+7	; 0x07
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	9f 83       	std	Y+7, r25	; 0x07
    2138:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213a:	8e 81       	ldd	r24, Y+6	; 0x06
    213c:	9f 81       	ldd	r25, Y+7	; 0x07
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	69 f7       	brne	.-38     	; 0x211c <LCD_voidSendDataBus+0x350>
    2142:	24 c0       	rjmp	.+72     	; 0x218c <LCD_voidSendDataBus+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2144:	68 85       	ldd	r22, Y+8	; 0x08
    2146:	79 85       	ldd	r23, Y+9	; 0x09
    2148:	8a 85       	ldd	r24, Y+10	; 0x0a
    214a:	9b 85       	ldd	r25, Y+11	; 0x0b
    214c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	9f 83       	std	Y+7, r25	; 0x07
    2156:	8e 83       	std	Y+6, r24	; 0x06
    2158:	8e 81       	ldd	r24, Y+6	; 0x06
    215a:	9f 81       	ldd	r25, Y+7	; 0x07
    215c:	9b 83       	std	Y+3, r25	; 0x03
    215e:	8a 83       	std	Y+2, r24	; 0x02
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	9b 81       	ldd	r25, Y+3	; 0x03
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <LCD_voidSendDataBus+0x398>
    2168:	9b 83       	std	Y+3, r25	; 0x03
    216a:	8a 83       	std	Y+2, r24	; 0x02
    216c:	0f c0       	rjmp	.+30     	; 0x218c <LCD_voidSendDataBus+0x3c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    216e:	69 89       	ldd	r22, Y+17	; 0x11
    2170:	7a 89       	ldd	r23, Y+18	; 0x12
    2172:	8b 89       	ldd	r24, Y+19	; 0x13
    2174:	9c 89       	ldd	r25, Y+20	; 0x14
    2176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	88 8b       	std	Y+16, r24	; 0x10
    2180:	88 89       	ldd	r24, Y+16	; 0x10
    2182:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	8a 95       	dec	r24
    2188:	f1 f7       	brne	.-4      	; 0x2186 <LCD_voidSendDataBus+0x3ba>
    218a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us (5);

}
    218c:	e1 96       	adiw	r28, 0x31	; 49
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <LCD_voidWriteChar>:
void LCD_voidWriteChar(u8 Copy_u8Character)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	0f 92       	push	r0
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	89 83       	std	Y+1, r24	; 0x01
	DIO_enum_WriteChannel(RS, DIO_u8High);
    21aa:	83 e0       	ldi	r24, 0x03	; 3
    21ac:	61 e0       	ldi	r22, 0x01	; 1
    21ae:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enum_WriteChannel>
	LCD_voidSendDataBus(Copy_u8Character);	
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_voidSendDataBus>
}
    21b8:	0f 90       	pop	r0
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <LCD_voidWriteString>:
void LCD_voidWriteString(pu8 Ptr_u8String)
{
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	6b 97       	sbiw	r28, 0x1b	; 27
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	9b 8f       	std	Y+27, r25	; 0x1b
    21d6:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 Local_u8Counter = 0;
    21d8:	19 8e       	std	Y+25, r1	; 0x19
    21da:	cc c0       	rjmp	.+408    	; 0x2374 <LCD_voidWriteString+0x1b4>
	while(Ptr_u8String[Local_u8Counter] != '\0')
	{
		LCD_voidWriteChar(Ptr_u8String[Local_u8Counter]);
    21dc:	89 8d       	ldd	r24, Y+25	; 0x19
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21e4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21e6:	fc 01       	movw	r30, r24
    21e8:	e2 0f       	add	r30, r18
    21ea:	f3 1f       	adc	r31, r19
    21ec:	80 81       	ld	r24, Z
    21ee:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
		Local_u8Counter++;
    21f2:	89 8d       	ldd	r24, Y+25	; 0x19
    21f4:	8f 5f       	subi	r24, 0xFF	; 255
    21f6:	89 8f       	std	Y+25, r24	; 0x19
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	a0 e0       	ldi	r26, 0x00	; 0
    21fe:	b0 e4       	ldi	r27, 0x40	; 64
    2200:	8d 8b       	std	Y+21, r24	; 0x15
    2202:	9e 8b       	std	Y+22, r25	; 0x16
    2204:	af 8b       	std	Y+23, r26	; 0x17
    2206:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2208:	6d 89       	ldd	r22, Y+21	; 0x15
    220a:	7e 89       	ldd	r23, Y+22	; 0x16
    220c:	8f 89       	ldd	r24, Y+23	; 0x17
    220e:	98 8d       	ldd	r25, Y+24	; 0x18
    2210:	2b ea       	ldi	r18, 0xAB	; 171
    2212:	3a ea       	ldi	r19, 0xAA	; 170
    2214:	4a e2       	ldi	r20, 0x2A	; 42
    2216:	50 e4       	ldi	r21, 0x40	; 64
    2218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	89 8b       	std	Y+17, r24	; 0x11
    2222:	9a 8b       	std	Y+18, r25	; 0x12
    2224:	ab 8b       	std	Y+19, r26	; 0x13
    2226:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2228:	69 89       	ldd	r22, Y+17	; 0x11
    222a:	7a 89       	ldd	r23, Y+18	; 0x12
    222c:	8b 89       	ldd	r24, Y+19	; 0x13
    222e:	9c 89       	ldd	r25, Y+20	; 0x14
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e8       	ldi	r20, 0x80	; 128
    2236:	5f e3       	ldi	r21, 0x3F	; 63
    2238:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    223c:	88 23       	and	r24, r24
    223e:	1c f4       	brge	.+6      	; 0x2246 <LCD_voidWriteString+0x86>
		__ticks = 1;
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	88 8b       	std	Y+16, r24	; 0x10
    2244:	91 c0       	rjmp	.+290    	; 0x2368 <LCD_voidWriteString+0x1a8>
	else if (__tmp > 255)
    2246:	69 89       	ldd	r22, Y+17	; 0x11
    2248:	7a 89       	ldd	r23, Y+18	; 0x12
    224a:	8b 89       	ldd	r24, Y+19	; 0x13
    224c:	9c 89       	ldd	r25, Y+20	; 0x14
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	4f e7       	ldi	r20, 0x7F	; 127
    2254:	53 e4       	ldi	r21, 0x43	; 67
    2256:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    225a:	18 16       	cp	r1, r24
    225c:	0c f0       	brlt	.+2      	; 0x2260 <LCD_voidWriteString+0xa0>
    225e:	7b c0       	rjmp	.+246    	; 0x2356 <LCD_voidWriteString+0x196>
	{
		_delay_ms(__us / 1000.0);
    2260:	6d 89       	ldd	r22, Y+21	; 0x15
    2262:	7e 89       	ldd	r23, Y+22	; 0x16
    2264:	8f 89       	ldd	r24, Y+23	; 0x17
    2266:	98 8d       	ldd	r25, Y+24	; 0x18
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	4a e7       	ldi	r20, 0x7A	; 122
    226e:	54 e4       	ldi	r21, 0x44	; 68
    2270:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	8c 87       	std	Y+12, r24	; 0x0c
    227a:	9d 87       	std	Y+13, r25	; 0x0d
    227c:	ae 87       	std	Y+14, r26	; 0x0e
    227e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2280:	6c 85       	ldd	r22, Y+12	; 0x0c
    2282:	7d 85       	ldd	r23, Y+13	; 0x0d
    2284:	8e 85       	ldd	r24, Y+14	; 0x0e
    2286:	9f 85       	ldd	r25, Y+15	; 0x0f
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	4a ef       	ldi	r20, 0xFA	; 250
    228e:	54 e4       	ldi	r21, 0x44	; 68
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	88 87       	std	Y+8, r24	; 0x08
    229a:	99 87       	std	Y+9, r25	; 0x09
    229c:	aa 87       	std	Y+10, r26	; 0x0a
    229e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22a0:	68 85       	ldd	r22, Y+8	; 0x08
    22a2:	79 85       	ldd	r23, Y+9	; 0x09
    22a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    22a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e8       	ldi	r20, 0x80	; 128
    22ae:	5f e3       	ldi	r21, 0x3F	; 63
    22b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22b4:	88 23       	and	r24, r24
    22b6:	2c f4       	brge	.+10     	; 0x22c2 <LCD_voidWriteString+0x102>
		__ticks = 1;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	9f 83       	std	Y+7, r25	; 0x07
    22be:	8e 83       	std	Y+6, r24	; 0x06
    22c0:	3f c0       	rjmp	.+126    	; 0x2340 <LCD_voidWriteString+0x180>
	else if (__tmp > 65535)
    22c2:	68 85       	ldd	r22, Y+8	; 0x08
    22c4:	79 85       	ldd	r23, Y+9	; 0x09
    22c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    22c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	3f ef       	ldi	r19, 0xFF	; 255
    22ce:	4f e7       	ldi	r20, 0x7F	; 127
    22d0:	57 e4       	ldi	r21, 0x47	; 71
    22d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22d6:	18 16       	cp	r1, r24
    22d8:	4c f5       	brge	.+82     	; 0x232c <LCD_voidWriteString+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22da:	6c 85       	ldd	r22, Y+12	; 0x0c
    22dc:	7d 85       	ldd	r23, Y+13	; 0x0d
    22de:	8e 85       	ldd	r24, Y+14	; 0x0e
    22e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e2       	ldi	r20, 0x20	; 32
    22e8:	51 e4       	ldi	r21, 0x41	; 65
    22ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	9f 83       	std	Y+7, r25	; 0x07
    2300:	8e 83       	std	Y+6, r24	; 0x06
    2302:	0f c0       	rjmp	.+30     	; 0x2322 <LCD_voidWriteString+0x162>
    2304:	88 ec       	ldi	r24, 0xC8	; 200
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9d 83       	std	Y+5, r25	; 0x05
    230a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    230c:	8c 81       	ldd	r24, Y+4	; 0x04
    230e:	9d 81       	ldd	r25, Y+5	; 0x05
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <LCD_voidWriteString+0x150>
    2314:	9d 83       	std	Y+5, r25	; 0x05
    2316:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2318:	8e 81       	ldd	r24, Y+6	; 0x06
    231a:	9f 81       	ldd	r25, Y+7	; 0x07
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	9f 83       	std	Y+7, r25	; 0x07
    2320:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2322:	8e 81       	ldd	r24, Y+6	; 0x06
    2324:	9f 81       	ldd	r25, Y+7	; 0x07
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	69 f7       	brne	.-38     	; 0x2304 <LCD_voidWriteString+0x144>
    232a:	24 c0       	rjmp	.+72     	; 0x2374 <LCD_voidWriteString+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232c:	68 85       	ldd	r22, Y+8	; 0x08
    232e:	79 85       	ldd	r23, Y+9	; 0x09
    2330:	8a 85       	ldd	r24, Y+10	; 0x0a
    2332:	9b 85       	ldd	r25, Y+11	; 0x0b
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9f 83       	std	Y+7, r25	; 0x07
    233e:	8e 83       	std	Y+6, r24	; 0x06
    2340:	8e 81       	ldd	r24, Y+6	; 0x06
    2342:	9f 81       	ldd	r25, Y+7	; 0x07
    2344:	9b 83       	std	Y+3, r25	; 0x03
    2346:	8a 83       	std	Y+2, r24	; 0x02
    2348:	8a 81       	ldd	r24, Y+2	; 0x02
    234a:	9b 81       	ldd	r25, Y+3	; 0x03
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <LCD_voidWriteString+0x18c>
    2350:	9b 83       	std	Y+3, r25	; 0x03
    2352:	8a 83       	std	Y+2, r24	; 0x02
    2354:	0f c0       	rjmp	.+30     	; 0x2374 <LCD_voidWriteString+0x1b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2356:	69 89       	ldd	r22, Y+17	; 0x11
    2358:	7a 89       	ldd	r23, Y+18	; 0x12
    235a:	8b 89       	ldd	r24, Y+19	; 0x13
    235c:	9c 89       	ldd	r25, Y+20	; 0x14
    235e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	88 8b       	std	Y+16, r24	; 0x10
    2368:	88 89       	ldd	r24, Y+16	; 0x10
    236a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	8a 95       	dec	r24
    2370:	f1 f7       	brne	.-4      	; 0x236e <LCD_voidWriteString+0x1ae>
    2372:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendDataBus(Copy_u8Character);	
}
void LCD_voidWriteString(pu8 Ptr_u8String)
{
	u8 Local_u8Counter = 0;
	while(Ptr_u8String[Local_u8Counter] != '\0')
    2374:	89 8d       	ldd	r24, Y+25	; 0x19
    2376:	28 2f       	mov	r18, r24
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    237c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    237e:	fc 01       	movw	r30, r24
    2380:	e2 0f       	add	r30, r18
    2382:	f3 1f       	adc	r31, r19
    2384:	80 81       	ld	r24, Z
    2386:	88 23       	and	r24, r24
    2388:	09 f0       	breq	.+2      	; 0x238c <LCD_voidWriteString+0x1cc>
    238a:	28 cf       	rjmp	.-432    	; 0x21dc <LCD_voidWriteString+0x1c>
		LCD_voidWriteChar(Ptr_u8String[Local_u8Counter]);
		Local_u8Counter++;
		_delay_us (2);
	}
	
}
    238c:	6b 96       	adiw	r28, 0x1b	; 27
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	08 95       	ret

0000239e <LCD_voidWriteNumbers>:
void LCD_voidWriteNumbers(f32 Copy_f32Number)
{
    239e:	0f 93       	push	r16
    23a0:	1f 93       	push	r17
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	e5 97       	sbiw	r28, 0x35	; 53
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	6a ab       	std	Y+50, r22	; 0x32
    23b8:	7b ab       	std	Y+51, r23	; 0x33
    23ba:	8c ab       	std	Y+52, r24	; 0x34
    23bc:	9d ab       	std	Y+53, r25	; 0x35
	u8 Local_u8Array[20];
	u32 Local_f32Number = (u32)(Copy_f32Number*100);
    23be:	6a a9       	ldd	r22, Y+50	; 0x32
    23c0:	7b a9       	ldd	r23, Y+51	; 0x33
    23c2:	8c a9       	ldd	r24, Y+52	; 0x34
    23c4:	9d a9       	ldd	r25, Y+53	; 0x35
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	48 ec       	ldi	r20, 0xC8	; 200
    23cc:	52 e4       	ldi	r21, 0x42	; 66
    23ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	bc 01       	movw	r22, r24
    23d8:	cd 01       	movw	r24, r26
    23da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	8a 8f       	std	Y+26, r24	; 0x1a
    23e4:	9b 8f       	std	Y+27, r25	; 0x1b
    23e6:	ac 8f       	std	Y+28, r26	; 0x1c
    23e8:	bd 8f       	std	Y+29, r27	; 0x1d
	s8 Local_s8Counter = 0;
    23ea:	19 8e       	std	Y+25, r1	; 0x19
    23ec:	2f c0       	rjmp	.+94     	; 0x244c <LCD_voidWriteNumbers+0xae>
	//Local_f32Number*=100;
	while (Local_f32Number != 0)
	{
		Local_u8Array[Local_s8Counter] = Local_f32Number%10;
    23ee:	89 8d       	ldd	r24, Y+25	; 0x19
    23f0:	08 2f       	mov	r16, r24
    23f2:	11 27       	eor	r17, r17
    23f4:	07 fd       	sbrc	r16, 7
    23f6:	10 95       	com	r17
    23f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23fa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23fc:	ac 8d       	ldd	r26, Y+28	; 0x1c
    23fe:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2400:	2a e0       	ldi	r18, 0x0A	; 10
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	bc 01       	movw	r22, r24
    240a:	cd 01       	movw	r24, r26
    240c:	0e 94 c0 1c 	call	0x3980	; 0x3980 <__udivmodsi4>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	28 2f       	mov	r18, r24
    2416:	ce 01       	movw	r24, r28
    2418:	4e 96       	adiw	r24, 0x1e	; 30
    241a:	fc 01       	movw	r30, r24
    241c:	e0 0f       	add	r30, r16
    241e:	f1 1f       	adc	r31, r17
    2420:	20 83       	st	Z, r18
		Local_f32Number/=10;
    2422:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2424:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2426:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2428:	bd 8d       	ldd	r27, Y+29	; 0x1d
    242a:	2a e0       	ldi	r18, 0x0A	; 10
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e0       	ldi	r20, 0x00	; 0
    2430:	50 e0       	ldi	r21, 0x00	; 0
    2432:	bc 01       	movw	r22, r24
    2434:	cd 01       	movw	r24, r26
    2436:	0e 94 c0 1c 	call	0x3980	; 0x3980 <__udivmodsi4>
    243a:	da 01       	movw	r26, r20
    243c:	c9 01       	movw	r24, r18
    243e:	8a 8f       	std	Y+26, r24	; 0x1a
    2440:	9b 8f       	std	Y+27, r25	; 0x1b
    2442:	ac 8f       	std	Y+28, r26	; 0x1c
    2444:	bd 8f       	std	Y+29, r27	; 0x1d
		Local_s8Counter++;
    2446:	89 8d       	ldd	r24, Y+25	; 0x19
    2448:	8f 5f       	subi	r24, 0xFF	; 255
    244a:	89 8f       	std	Y+25, r24	; 0x19
{
	u8 Local_u8Array[20];
	u32 Local_f32Number = (u32)(Copy_f32Number*100);
	s8 Local_s8Counter = 0;
	//Local_f32Number*=100;
	while (Local_f32Number != 0)
    244c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    244e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2450:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2452:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2454:	00 97       	sbiw	r24, 0x00	; 0
    2456:	a1 05       	cpc	r26, r1
    2458:	b1 05       	cpc	r27, r1
    245a:	49 f6       	brne	.-110    	; 0x23ee <LCD_voidWriteNumbers+0x50>
    245c:	d5 c0       	rjmp	.+426    	; 0x2608 <LCD_voidWriteNumbers+0x26a>
		Local_f32Number/=10;
		Local_s8Counter++;
	}
	while(Local_s8Counter>0)
	{
		if(Local_s8Counter == 2)
    245e:	89 8d       	ldd	r24, Y+25	; 0x19
    2460:	82 30       	cpi	r24, 0x02	; 2
    2462:	19 f4       	brne	.+6      	; 0x246a <LCD_voidWriteNumbers+0xcc>
		{
			LCD_voidWriteChar('.');
    2464:	8e e2       	ldi	r24, 0x2E	; 46
    2466:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
		}
		Local_s8Counter--;
    246a:	89 8d       	ldd	r24, Y+25	; 0x19
    246c:	81 50       	subi	r24, 0x01	; 1
    246e:	89 8f       	std	Y+25, r24	; 0x19
		LCD_voidWriteChar(Local_u8Array[Local_s8Counter]+'0');
    2470:	89 8d       	ldd	r24, Y+25	; 0x19
    2472:	28 2f       	mov	r18, r24
    2474:	33 27       	eor	r19, r19
    2476:	27 fd       	sbrc	r18, 7
    2478:	30 95       	com	r19
    247a:	ce 01       	movw	r24, r28
    247c:	4e 96       	adiw	r24, 0x1e	; 30
    247e:	fc 01       	movw	r30, r24
    2480:	e2 0f       	add	r30, r18
    2482:	f3 1f       	adc	r31, r19
    2484:	80 81       	ld	r24, Z
    2486:	80 5d       	subi	r24, 0xD0	; 208
    2488:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	a0 e0       	ldi	r26, 0x00	; 0
    2492:	b0 e4       	ldi	r27, 0x40	; 64
    2494:	8d 8b       	std	Y+21, r24	; 0x15
    2496:	9e 8b       	std	Y+22, r25	; 0x16
    2498:	af 8b       	std	Y+23, r26	; 0x17
    249a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    249c:	6d 89       	ldd	r22, Y+21	; 0x15
    249e:	7e 89       	ldd	r23, Y+22	; 0x16
    24a0:	8f 89       	ldd	r24, Y+23	; 0x17
    24a2:	98 8d       	ldd	r25, Y+24	; 0x18
    24a4:	2b ea       	ldi	r18, 0xAB	; 171
    24a6:	3a ea       	ldi	r19, 0xAA	; 170
    24a8:	4a e2       	ldi	r20, 0x2A	; 42
    24aa:	50 e4       	ldi	r21, 0x40	; 64
    24ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	89 8b       	std	Y+17, r24	; 0x11
    24b6:	9a 8b       	std	Y+18, r25	; 0x12
    24b8:	ab 8b       	std	Y+19, r26	; 0x13
    24ba:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    24bc:	69 89       	ldd	r22, Y+17	; 0x11
    24be:	7a 89       	ldd	r23, Y+18	; 0x12
    24c0:	8b 89       	ldd	r24, Y+19	; 0x13
    24c2:	9c 89       	ldd	r25, Y+20	; 0x14
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e8       	ldi	r20, 0x80	; 128
    24ca:	5f e3       	ldi	r21, 0x3F	; 63
    24cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24d0:	88 23       	and	r24, r24
    24d2:	1c f4       	brge	.+6      	; 0x24da <LCD_voidWriteNumbers+0x13c>
		__ticks = 1;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	88 8b       	std	Y+16, r24	; 0x10
    24d8:	91 c0       	rjmp	.+290    	; 0x25fc <LCD_voidWriteNumbers+0x25e>
	else if (__tmp > 255)
    24da:	69 89       	ldd	r22, Y+17	; 0x11
    24dc:	7a 89       	ldd	r23, Y+18	; 0x12
    24de:	8b 89       	ldd	r24, Y+19	; 0x13
    24e0:	9c 89       	ldd	r25, Y+20	; 0x14
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	4f e7       	ldi	r20, 0x7F	; 127
    24e8:	53 e4       	ldi	r21, 0x43	; 67
    24ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ee:	18 16       	cp	r1, r24
    24f0:	0c f0       	brlt	.+2      	; 0x24f4 <LCD_voidWriteNumbers+0x156>
    24f2:	7b c0       	rjmp	.+246    	; 0x25ea <LCD_voidWriteNumbers+0x24c>
	{
		_delay_ms(__us / 1000.0);
    24f4:	6d 89       	ldd	r22, Y+21	; 0x15
    24f6:	7e 89       	ldd	r23, Y+22	; 0x16
    24f8:	8f 89       	ldd	r24, Y+23	; 0x17
    24fa:	98 8d       	ldd	r25, Y+24	; 0x18
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	4a e7       	ldi	r20, 0x7A	; 122
    2502:	54 e4       	ldi	r21, 0x44	; 68
    2504:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	8c 87       	std	Y+12, r24	; 0x0c
    250e:	9d 87       	std	Y+13, r25	; 0x0d
    2510:	ae 87       	std	Y+14, r26	; 0x0e
    2512:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2514:	6c 85       	ldd	r22, Y+12	; 0x0c
    2516:	7d 85       	ldd	r23, Y+13	; 0x0d
    2518:	8e 85       	ldd	r24, Y+14	; 0x0e
    251a:	9f 85       	ldd	r25, Y+15	; 0x0f
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	4a ef       	ldi	r20, 0xFA	; 250
    2522:	54 e4       	ldi	r21, 0x44	; 68
    2524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	88 87       	std	Y+8, r24	; 0x08
    252e:	99 87       	std	Y+9, r25	; 0x09
    2530:	aa 87       	std	Y+10, r26	; 0x0a
    2532:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2534:	68 85       	ldd	r22, Y+8	; 0x08
    2536:	79 85       	ldd	r23, Y+9	; 0x09
    2538:	8a 85       	ldd	r24, Y+10	; 0x0a
    253a:	9b 85       	ldd	r25, Y+11	; 0x0b
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	40 e8       	ldi	r20, 0x80	; 128
    2542:	5f e3       	ldi	r21, 0x3F	; 63
    2544:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2548:	88 23       	and	r24, r24
    254a:	2c f4       	brge	.+10     	; 0x2556 <LCD_voidWriteNumbers+0x1b8>
		__ticks = 1;
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	9f 83       	std	Y+7, r25	; 0x07
    2552:	8e 83       	std	Y+6, r24	; 0x06
    2554:	3f c0       	rjmp	.+126    	; 0x25d4 <LCD_voidWriteNumbers+0x236>
	else if (__tmp > 65535)
    2556:	68 85       	ldd	r22, Y+8	; 0x08
    2558:	79 85       	ldd	r23, Y+9	; 0x09
    255a:	8a 85       	ldd	r24, Y+10	; 0x0a
    255c:	9b 85       	ldd	r25, Y+11	; 0x0b
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	3f ef       	ldi	r19, 0xFF	; 255
    2562:	4f e7       	ldi	r20, 0x7F	; 127
    2564:	57 e4       	ldi	r21, 0x47	; 71
    2566:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    256a:	18 16       	cp	r1, r24
    256c:	4c f5       	brge	.+82     	; 0x25c0 <LCD_voidWriteNumbers+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2570:	7d 85       	ldd	r23, Y+13	; 0x0d
    2572:	8e 85       	ldd	r24, Y+14	; 0x0e
    2574:	9f 85       	ldd	r25, Y+15	; 0x0f
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	40 e2       	ldi	r20, 0x20	; 32
    257c:	51 e4       	ldi	r21, 0x41	; 65
    257e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	bc 01       	movw	r22, r24
    2588:	cd 01       	movw	r24, r26
    258a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	9f 83       	std	Y+7, r25	; 0x07
    2594:	8e 83       	std	Y+6, r24	; 0x06
    2596:	0f c0       	rjmp	.+30     	; 0x25b6 <LCD_voidWriteNumbers+0x218>
    2598:	88 ec       	ldi	r24, 0xC8	; 200
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	9d 83       	std	Y+5, r25	; 0x05
    259e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25a0:	8c 81       	ldd	r24, Y+4	; 0x04
    25a2:	9d 81       	ldd	r25, Y+5	; 0x05
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	f1 f7       	brne	.-4      	; 0x25a4 <LCD_voidWriteNumbers+0x206>
    25a8:	9d 83       	std	Y+5, r25	; 0x05
    25aa:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ac:	8e 81       	ldd	r24, Y+6	; 0x06
    25ae:	9f 81       	ldd	r25, Y+7	; 0x07
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	9f 83       	std	Y+7, r25	; 0x07
    25b4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b6:	8e 81       	ldd	r24, Y+6	; 0x06
    25b8:	9f 81       	ldd	r25, Y+7	; 0x07
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	69 f7       	brne	.-38     	; 0x2598 <LCD_voidWriteNumbers+0x1fa>
    25be:	24 c0       	rjmp	.+72     	; 0x2608 <LCD_voidWriteNumbers+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c0:	68 85       	ldd	r22, Y+8	; 0x08
    25c2:	79 85       	ldd	r23, Y+9	; 0x09
    25c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    25c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    25c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	9f 83       	std	Y+7, r25	; 0x07
    25d2:	8e 83       	std	Y+6, r24	; 0x06
    25d4:	8e 81       	ldd	r24, Y+6	; 0x06
    25d6:	9f 81       	ldd	r25, Y+7	; 0x07
    25d8:	9b 83       	std	Y+3, r25	; 0x03
    25da:	8a 83       	std	Y+2, r24	; 0x02
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	9b 81       	ldd	r25, Y+3	; 0x03
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	f1 f7       	brne	.-4      	; 0x25e0 <LCD_voidWriteNumbers+0x242>
    25e4:	9b 83       	std	Y+3, r25	; 0x03
    25e6:	8a 83       	std	Y+2, r24	; 0x02
    25e8:	0f c0       	rjmp	.+30     	; 0x2608 <LCD_voidWriteNumbers+0x26a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25ea:	69 89       	ldd	r22, Y+17	; 0x11
    25ec:	7a 89       	ldd	r23, Y+18	; 0x12
    25ee:	8b 89       	ldd	r24, Y+19	; 0x13
    25f0:	9c 89       	ldd	r25, Y+20	; 0x14
    25f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	88 8b       	std	Y+16, r24	; 0x10
    25fc:	88 89       	ldd	r24, Y+16	; 0x10
    25fe:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	8a 95       	dec	r24
    2604:	f1 f7       	brne	.-4      	; 0x2602 <LCD_voidWriteNumbers+0x264>
    2606:	89 83       	std	Y+1, r24	; 0x01
	{
		Local_u8Array[Local_s8Counter] = Local_f32Number%10;
		Local_f32Number/=10;
		Local_s8Counter++;
	}
	while(Local_s8Counter>0)
    2608:	89 8d       	ldd	r24, Y+25	; 0x19
    260a:	18 16       	cp	r1, r24
    260c:	0c f4       	brge	.+2      	; 0x2610 <LCD_voidWriteNumbers+0x272>
    260e:	27 cf       	rjmp	.-434    	; 0x245e <LCD_voidWriteNumbers+0xc0>
		Local_s8Counter--;
		LCD_voidWriteChar(Local_u8Array[Local_s8Counter]+'0');
		_delay_us (2);

	}
}
    2610:	e5 96       	adiw	r28, 0x35	; 53
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	f8 94       	cli
    2616:	de bf       	out	0x3e, r29	; 62
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	cd bf       	out	0x3d, r28	; 61
    261c:	cf 91       	pop	r28
    261e:	df 91       	pop	r29
    2620:	1f 91       	pop	r17
    2622:	0f 91       	pop	r16
    2624:	08 95       	ret

00002626 <LCD_voidSetCursorToX_y>:
void LCD_voidSetCursorToX_y(u8 Copy_u8Row,u8 Copy_u8Coloumn)
{
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	00 d0       	rcall	.+0      	; 0x262c <LCD_voidSetCursorToX_y+0x6>
    262c:	00 d0       	rcall	.+0      	; 0x262e <LCD_voidSetCursorToX_y+0x8>
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
    2632:	89 83       	std	Y+1, r24	; 0x01
    2634:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Row)
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	28 2f       	mov	r18, r24
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	3c 83       	std	Y+4, r19	; 0x04
    263e:	2b 83       	std	Y+3, r18	; 0x03
    2640:	8b 81       	ldd	r24, Y+3	; 0x03
    2642:	9c 81       	ldd	r25, Y+4	; 0x04
    2644:	81 30       	cpi	r24, 0x01	; 1
    2646:	91 05       	cpc	r25, r1
    2648:	d1 f0       	breq	.+52     	; 0x267e <LCD_voidSetCursorToX_y+0x58>
    264a:	2b 81       	ldd	r18, Y+3	; 0x03
    264c:	3c 81       	ldd	r19, Y+4	; 0x04
    264e:	22 30       	cpi	r18, 0x02	; 2
    2650:	31 05       	cpc	r19, r1
    2652:	2c f4       	brge	.+10     	; 0x265e <LCD_voidSetCursorToX_y+0x38>
    2654:	8b 81       	ldd	r24, Y+3	; 0x03
    2656:	9c 81       	ldd	r25, Y+4	; 0x04
    2658:	00 97       	sbiw	r24, 0x00	; 0
    265a:	61 f0       	breq	.+24     	; 0x2674 <LCD_voidSetCursorToX_y+0x4e>
    265c:	1e c0       	rjmp	.+60     	; 0x269a <LCD_voidSetCursorToX_y+0x74>
    265e:	2b 81       	ldd	r18, Y+3	; 0x03
    2660:	3c 81       	ldd	r19, Y+4	; 0x04
    2662:	22 30       	cpi	r18, 0x02	; 2
    2664:	31 05       	cpc	r19, r1
    2666:	81 f0       	breq	.+32     	; 0x2688 <LCD_voidSetCursorToX_y+0x62>
    2668:	8b 81       	ldd	r24, Y+3	; 0x03
    266a:	9c 81       	ldd	r25, Y+4	; 0x04
    266c:	83 30       	cpi	r24, 0x03	; 3
    266e:	91 05       	cpc	r25, r1
    2670:	81 f0       	breq	.+32     	; 0x2692 <LCD_voidSetCursorToX_y+0x6c>
    2672:	13 c0       	rjmp	.+38     	; 0x269a <LCD_voidSetCursorToX_y+0x74>
	{
		case LCD_ROW0:
			LCD_voidSendCommand(0x80+Copy_u8Coloumn);
    2674:	8a 81       	ldd	r24, Y+2	; 0x02
    2676:	80 58       	subi	r24, 0x80	; 128
    2678:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCommand>
    267c:	0e c0       	rjmp	.+28     	; 0x269a <LCD_voidSetCursorToX_y+0x74>
			break;
		case LCD_ROW1:
			LCD_voidSendCommand(0x80+0x40+Copy_u8Coloumn);
    267e:	8a 81       	ldd	r24, Y+2	; 0x02
    2680:	80 54       	subi	r24, 0x40	; 64
    2682:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCommand>
    2686:	09 c0       	rjmp	.+18     	; 0x269a <LCD_voidSetCursorToX_y+0x74>
			break;
		case LCD_ROW2:
			LCD_voidSendCommand(0x80+0x14+Copy_u8Coloumn);
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	8c 56       	subi	r24, 0x6C	; 108
    268c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCommand>
    2690:	04 c0       	rjmp	.+8      	; 0x269a <LCD_voidSetCursorToX_y+0x74>
			break;
		case LCD_ROW3:
			LCD_voidSendCommand(0x80+0x54+Copy_u8Coloumn);
    2692:	8a 81       	ldd	r24, Y+2	; 0x02
    2694:	8c 52       	subi	r24, 0x2C	; 44
    2696:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCommand>
			break;
	}
}
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <LCD_voidCreateCustomChar>:
void LCD_voidCreateCustomChar(u8 CharID,u8 *Copy_CustomChar)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	00 d0       	rcall	.+0      	; 0x26ae <LCD_voidCreateCustomChar+0x6>
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <LCD_voidCreateCustomChar+0x8>
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	8a 83       	std	Y+2, r24	; 0x02
    26b6:	7c 83       	std	Y+4, r23	; 0x04
    26b8:	6b 83       	std	Y+3, r22	; 0x03
	LCD_voidSendCommand(CG_RAM_ADDRESS + CharID);
    26ba:	8a 81       	ldd	r24, Y+2	; 0x02
    26bc:	80 5c       	subi	r24, 0xC0	; 192
    26be:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidSendCommand>
	for(u8 i=0;i<8;i++)
    26c2:	19 82       	std	Y+1, r1	; 0x01
    26c4:	0e c0       	rjmp	.+28     	; 0x26e2 <LCD_voidCreateCustomChar+0x3a>
	{
		LCD_voidSendData(Copy_CustomChar[i]);
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	28 2f       	mov	r18, r24
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	9c 81       	ldd	r25, Y+4	; 0x04
    26d0:	fc 01       	movw	r30, r24
    26d2:	e2 0f       	add	r30, r18
    26d4:	f3 1f       	adc	r31, r19
    26d6:	80 81       	ld	r24, Z
    26d8:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_voidSendData>
	}
}
void LCD_voidCreateCustomChar(u8 CharID,u8 *Copy_CustomChar)
{
	LCD_voidSendCommand(CG_RAM_ADDRESS + CharID);
	for(u8 i=0;i<8;i++)
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	8f 5f       	subi	r24, 0xFF	; 255
    26e0:	89 83       	std	Y+1, r24	; 0x01
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	88 30       	cpi	r24, 0x08	; 8
    26e6:	78 f3       	brcs	.-34     	; 0x26c6 <LCD_voidCreateCustomChar+0x1e>
	{
		LCD_voidSendData(Copy_CustomChar[i]);
	}

}
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	0f 90       	pop	r0
    26ee:	0f 90       	pop	r0
    26f0:	cf 91       	pop	r28
    26f2:	df 91       	pop	r29
    26f4:	08 95       	ret

000026f6 <PORT_voidInit>:
#include "PORT.h"
#include "PORT_prv.h"
#include "PORT_cfg.h"

void PORT_voidInit(void)
{
    26f6:	df 93       	push	r29
    26f8:	cf 93       	push	r28
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62

	#undef PORT_u8PINMODE_INPUUT_PULLUP
	#define PORT_u8PINMODE_INPUUT_PULLUP 0

	
	DDRA =CONC(DIO_u8MODEPORTAPIN7,DIO_u8MODEPORTAPIN6,DIO_u8MODEPORTAPIN5,DIO_u8MODEPORTAPIN4,DIO_u8MODEPORTAPIN3,DIO_u8MODEPORTAPIN2,DIO_u8MODEPORTAPIN1,DIO_u8MODEPORTAPIN0);
    26fe:	ea e3       	ldi	r30, 0x3A	; 58
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	8f ef       	ldi	r24, 0xFF	; 255
    2704:	80 83       	st	Z, r24
	DDRB =CONC(DIO_u8MODEPORTBPIN7,DIO_u8MODEPORTBPIN6,DIO_u8MODEPORTBPIN5,DIO_u8MODEPORTBPIN4,DIO_u8MODEPORTBPIN3,DIO_u8MODEPORTBPIN2,DIO_u8MODEPORTBPIN1,DIO_u8MODEPORTBPIN0);
    2706:	e7 e3       	ldi	r30, 0x37	; 55
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	8f ef       	ldi	r24, 0xFF	; 255
    270c:	80 83       	st	Z, r24
	DDRC =CONC(DIO_u8MODEPORTCPIN7,DIO_u8MODEPORTCPIN6,DIO_u8MODEPORTCPIN5,DIO_u8MODEPORTCPIN4,DIO_u8MODEPORTCPIN3,DIO_u8MODEPORTCPIN2,DIO_u8MODEPORTCPIN1,DIO_u8MODEPORTCPIN0);
    270e:	e4 e3       	ldi	r30, 0x34	; 52
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	8f ef       	ldi	r24, 0xFF	; 255
    2714:	80 83       	st	Z, r24
	DDRD =CONC(DIO_u8MODEPORTDPIN7,DIO_u8MODEPORTDPIN6,DIO_u8MODEPORTDPIN5,DIO_u8MODEPORTDPIN4,DIO_u8MODEPORTDPIN3,DIO_u8MODEPORTDPIN2,DIO_u8MODEPORTDPIN1,DIO_u8MODEPORTDPIN0);
    2716:	e1 e3       	ldi	r30, 0x31	; 49
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	8f ef       	ldi	r24, 0xFF	; 255
    271c:	80 83       	st	Z, r24
	#define PORT_u8PINMODE_INPUT_FLOATING 0

	#undef PORT_u8PINMODE_INPUUT_PULLUP
	#define PORT_u8PINMODE_INPUUT_PULLUP 1
	
	PORTA =CONC(DIO_u8MODEPORTAPIN7,DIO_u8MODEPORTAPIN6,DIO_u8MODEPORTAPIN5,DIO_u8MODEPORTAPIN4,DIO_u8MODEPORTAPIN3,DIO_u8MODEPORTAPIN2,DIO_u8MODEPORTAPIN1,DIO_u8MODEPORTAPIN0);
    271e:	eb e3       	ldi	r30, 0x3B	; 59
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	10 82       	st	Z, r1
	PORTB =CONC(DIO_u8MODEPORTBPIN7,DIO_u8MODEPORTBPIN6,DIO_u8MODEPORTBPIN5,DIO_u8MODEPORTBPIN4,DIO_u8MODEPORTBPIN3,DIO_u8MODEPORTBPIN2,DIO_u8MODEPORTBPIN1,DIO_u8MODEPORTBPIN0);
    2724:	e8 e3       	ldi	r30, 0x38	; 56
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	10 82       	st	Z, r1
	PORTC =CONC(DIO_u8MODEPORTCPIN7,DIO_u8MODEPORTCPIN6,DIO_u8MODEPORTCPIN5,DIO_u8MODEPORTCPIN4,DIO_u8MODEPORTCPIN3,DIO_u8MODEPORTCPIN2,DIO_u8MODEPORTCPIN1,DIO_u8MODEPORTCPIN0);
    272a:	e5 e3       	ldi	r30, 0x35	; 53
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	10 82       	st	Z, r1
	PORTD =CONC(DIO_u8MODEPORTDPIN7,DIO_u8MODEPORTDPIN6,DIO_u8MODEPORTDPIN5,DIO_u8MODEPORTDPIN4,DIO_u8MODEPORTDPIN3,DIO_u8MODEPORTDPIN2,DIO_u8MODEPORTDPIN1,DIO_u8MODEPORTDPIN0);
    2730:	e2 e3       	ldi	r30, 0x32	; 50
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	10 82       	st	Z, r1
	#undef PORT_u8PINMODE_INPUT_FLOATING
	#define PORT_u8PINMODE_INPUT_FLOATING 2

	#undef PORT_u8PINMODE_INPUUT_PULLUP
	#define PORT_u8PINMODE_INPUUT_PULLUP 3
}
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <PORT_enumSET_PINDirection>:
PORT_enumErrStatus PORT_enumSET_PINDirection(u8 Copy_u8PINNum, u8 Copy_u8PINDirection)
{
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	27 97       	sbiw	r28, 0x07	; 7
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	8c 83       	std	Y+4, r24	; 0x04
    2752:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8PINID = Copy_u8PINNum%8;
    2754:	8c 81       	ldd	r24, Y+4	; 0x04
    2756:	87 70       	andi	r24, 0x07	; 7
    2758:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PORTID = Copy_u8PINNum/8;
    275a:	8c 81       	ldd	r24, Y+4	; 0x04
    275c:	86 95       	lsr	r24
    275e:	86 95       	lsr	r24
    2760:	86 95       	lsr	r24
    2762:	8a 83       	std	Y+2, r24	; 0x02
	PORT_enumErrStatus Local_enumErrStatus = PORT_enumOK;
    2764:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_u8PORTID)
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	28 2f       	mov	r18, r24
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	3f 83       	std	Y+7, r19	; 0x07
    276e:	2e 83       	std	Y+6, r18	; 0x06
    2770:	8e 81       	ldd	r24, Y+6	; 0x06
    2772:	9f 81       	ldd	r25, Y+7	; 0x07
    2774:	81 30       	cpi	r24, 0x01	; 1
    2776:	91 05       	cpc	r25, r1
    2778:	09 f4       	brne	.+2      	; 0x277c <PORT_enumSET_PINDirection+0x40>
    277a:	49 c0       	rjmp	.+146    	; 0x280e <PORT_enumSET_PINDirection+0xd2>
    277c:	2e 81       	ldd	r18, Y+6	; 0x06
    277e:	3f 81       	ldd	r19, Y+7	; 0x07
    2780:	22 30       	cpi	r18, 0x02	; 2
    2782:	31 05       	cpc	r19, r1
    2784:	2c f4       	brge	.+10     	; 0x2790 <PORT_enumSET_PINDirection+0x54>
    2786:	8e 81       	ldd	r24, Y+6	; 0x06
    2788:	9f 81       	ldd	r25, Y+7	; 0x07
    278a:	00 97       	sbiw	r24, 0x00	; 0
    278c:	71 f0       	breq	.+28     	; 0x27aa <PORT_enumSET_PINDirection+0x6e>
    278e:	d5 c0       	rjmp	.+426    	; 0x293a <PORT_enumSET_PINDirection+0x1fe>
    2790:	2e 81       	ldd	r18, Y+6	; 0x06
    2792:	3f 81       	ldd	r19, Y+7	; 0x07
    2794:	22 30       	cpi	r18, 0x02	; 2
    2796:	31 05       	cpc	r19, r1
    2798:	09 f4       	brne	.+2      	; 0x279c <PORT_enumSET_PINDirection+0x60>
    279a:	6b c0       	rjmp	.+214    	; 0x2872 <PORT_enumSET_PINDirection+0x136>
    279c:	8e 81       	ldd	r24, Y+6	; 0x06
    279e:	9f 81       	ldd	r25, Y+7	; 0x07
    27a0:	83 30       	cpi	r24, 0x03	; 3
    27a2:	91 05       	cpc	r25, r1
    27a4:	09 f4       	brne	.+2      	; 0x27a8 <PORT_enumSET_PINDirection+0x6c>
    27a6:	97 c0       	rjmp	.+302    	; 0x28d6 <PORT_enumSET_PINDirection+0x19a>
    27a8:	c8 c0       	rjmp	.+400    	; 0x293a <PORT_enumSET_PINDirection+0x1fe>
	{
		case PORT_u8PORTA:
			if(Copy_u8PINDirection == PORT_u8PINDIR_OUTPUT)
    27aa:	8d 81       	ldd	r24, Y+5	; 0x05
    27ac:	81 30       	cpi	r24, 0x01	; 1
    27ae:	a1 f4       	brne	.+40     	; 0x27d8 <PORT_enumSET_PINDirection+0x9c>
			{
				SET_BIT(DDRA,Local_u8PINID);
    27b0:	aa e3       	ldi	r26, 0x3A	; 58
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	ea e3       	ldi	r30, 0x3A	; 58
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	48 2f       	mov	r20, r24
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	28 2f       	mov	r18, r24
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	02 2e       	mov	r0, r18
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <PORT_enumSET_PINDirection+0x92>
    27ca:	88 0f       	add	r24, r24
    27cc:	99 1f       	adc	r25, r25
    27ce:	0a 94       	dec	r0
    27d0:	e2 f7       	brpl	.-8      	; 0x27ca <PORT_enumSET_PINDirection+0x8e>
    27d2:	84 2b       	or	r24, r20
    27d4:	8c 93       	st	X, r24
    27d6:	b3 c0       	rjmp	.+358    	; 0x293e <PORT_enumSET_PINDirection+0x202>
			}
			else if(Copy_u8PINDirection == PORT_u8PINDIR_INPUT)
    27d8:	8d 81       	ldd	r24, Y+5	; 0x05
    27da:	88 23       	and	r24, r24
    27dc:	a9 f4       	brne	.+42     	; 0x2808 <PORT_enumSET_PINDirection+0xcc>
			{
				CLR_BIT(DDRA,Local_u8PINID);
    27de:	aa e3       	ldi	r26, 0x3A	; 58
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	ea e3       	ldi	r30, 0x3A	; 58
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	48 2f       	mov	r20, r24
    27ea:	8b 81       	ldd	r24, Y+3	; 0x03
    27ec:	28 2f       	mov	r18, r24
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	02 2e       	mov	r0, r18
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <PORT_enumSET_PINDirection+0xc0>
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	0a 94       	dec	r0
    27fe:	e2 f7       	brpl	.-8      	; 0x27f8 <PORT_enumSET_PINDirection+0xbc>
    2800:	80 95       	com	r24
    2802:	84 23       	and	r24, r20
    2804:	8c 93       	st	X, r24
    2806:	9b c0       	rjmp	.+310    	; 0x293e <PORT_enumSET_PINDirection+0x202>
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
    2808:	82 e0       	ldi	r24, 0x02	; 2
    280a:	89 83       	std	Y+1, r24	; 0x01
    280c:	98 c0       	rjmp	.+304    	; 0x293e <PORT_enumSET_PINDirection+0x202>
			}
			break;
		case PORT_u8PORTB:
			if(Copy_u8PINDirection == PORT_u8PINDIR_OUTPUT)
    280e:	8d 81       	ldd	r24, Y+5	; 0x05
    2810:	81 30       	cpi	r24, 0x01	; 1
    2812:	a1 f4       	brne	.+40     	; 0x283c <PORT_enumSET_PINDirection+0x100>
			{
				SET_BIT(DDRB,Local_u8PINID);
    2814:	a7 e3       	ldi	r26, 0x37	; 55
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	e7 e3       	ldi	r30, 0x37	; 55
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	48 2f       	mov	r20, r24
    2820:	8b 81       	ldd	r24, Y+3	; 0x03
    2822:	28 2f       	mov	r18, r24
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	02 2e       	mov	r0, r18
    282c:	02 c0       	rjmp	.+4      	; 0x2832 <PORT_enumSET_PINDirection+0xf6>
    282e:	88 0f       	add	r24, r24
    2830:	99 1f       	adc	r25, r25
    2832:	0a 94       	dec	r0
    2834:	e2 f7       	brpl	.-8      	; 0x282e <PORT_enumSET_PINDirection+0xf2>
    2836:	84 2b       	or	r24, r20
    2838:	8c 93       	st	X, r24
    283a:	81 c0       	rjmp	.+258    	; 0x293e <PORT_enumSET_PINDirection+0x202>
			}
			else if(Copy_u8PINDirection == PORT_u8PINDIR_INPUT)
    283c:	8d 81       	ldd	r24, Y+5	; 0x05
    283e:	88 23       	and	r24, r24
    2840:	a9 f4       	brne	.+42     	; 0x286c <PORT_enumSET_PINDirection+0x130>
			{
				CLR_BIT(DDRB,Local_u8PINID);
    2842:	a7 e3       	ldi	r26, 0x37	; 55
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	e7 e3       	ldi	r30, 0x37	; 55
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	80 81       	ld	r24, Z
    284c:	48 2f       	mov	r20, r24
    284e:	8b 81       	ldd	r24, Y+3	; 0x03
    2850:	28 2f       	mov	r18, r24
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	02 2e       	mov	r0, r18
    285a:	02 c0       	rjmp	.+4      	; 0x2860 <PORT_enumSET_PINDirection+0x124>
    285c:	88 0f       	add	r24, r24
    285e:	99 1f       	adc	r25, r25
    2860:	0a 94       	dec	r0
    2862:	e2 f7       	brpl	.-8      	; 0x285c <PORT_enumSET_PINDirection+0x120>
    2864:	80 95       	com	r24
    2866:	84 23       	and	r24, r20
    2868:	8c 93       	st	X, r24
    286a:	69 c0       	rjmp	.+210    	; 0x293e <PORT_enumSET_PINDirection+0x202>
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
    286c:	82 e0       	ldi	r24, 0x02	; 2
    286e:	89 83       	std	Y+1, r24	; 0x01
    2870:	66 c0       	rjmp	.+204    	; 0x293e <PORT_enumSET_PINDirection+0x202>
			}
			break;
		case PORT_u8PORTC:
			if(Copy_u8PINDirection == PORT_u8PINDIR_OUTPUT)
    2872:	8d 81       	ldd	r24, Y+5	; 0x05
    2874:	81 30       	cpi	r24, 0x01	; 1
    2876:	a1 f4       	brne	.+40     	; 0x28a0 <PORT_enumSET_PINDirection+0x164>
			{
				SET_BIT(DDRC,Local_u8PINID);
    2878:	a4 e3       	ldi	r26, 0x34	; 52
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	e4 e3       	ldi	r30, 0x34	; 52
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	48 2f       	mov	r20, r24
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	28 2f       	mov	r18, r24
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	02 2e       	mov	r0, r18
    2890:	02 c0       	rjmp	.+4      	; 0x2896 <PORT_enumSET_PINDirection+0x15a>
    2892:	88 0f       	add	r24, r24
    2894:	99 1f       	adc	r25, r25
    2896:	0a 94       	dec	r0
    2898:	e2 f7       	brpl	.-8      	; 0x2892 <PORT_enumSET_PINDirection+0x156>
    289a:	84 2b       	or	r24, r20
    289c:	8c 93       	st	X, r24
    289e:	4f c0       	rjmp	.+158    	; 0x293e <PORT_enumSET_PINDirection+0x202>
			}
			else if(Copy_u8PINDirection == PORT_u8PINDIR_INPUT)
    28a0:	8d 81       	ldd	r24, Y+5	; 0x05
    28a2:	88 23       	and	r24, r24
    28a4:	a9 f4       	brne	.+42     	; 0x28d0 <PORT_enumSET_PINDirection+0x194>
			{
				CLR_BIT(DDRC,Local_u8PINID);
    28a6:	a4 e3       	ldi	r26, 0x34	; 52
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e4 e3       	ldi	r30, 0x34	; 52
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	48 2f       	mov	r20, r24
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	28 2f       	mov	r18, r24
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	02 2e       	mov	r0, r18
    28be:	02 c0       	rjmp	.+4      	; 0x28c4 <PORT_enumSET_PINDirection+0x188>
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	0a 94       	dec	r0
    28c6:	e2 f7       	brpl	.-8      	; 0x28c0 <PORT_enumSET_PINDirection+0x184>
    28c8:	80 95       	com	r24
    28ca:	84 23       	and	r24, r20
    28cc:	8c 93       	st	X, r24
    28ce:	37 c0       	rjmp	.+110    	; 0x293e <PORT_enumSET_PINDirection+0x202>
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
    28d0:	82 e0       	ldi	r24, 0x02	; 2
    28d2:	89 83       	std	Y+1, r24	; 0x01
    28d4:	34 c0       	rjmp	.+104    	; 0x293e <PORT_enumSET_PINDirection+0x202>
			}
			break;
		case PORT_u8PORTD:
			if(Copy_u8PINDirection == PORT_u8PINDIR_OUTPUT)
    28d6:	8d 81       	ldd	r24, Y+5	; 0x05
    28d8:	81 30       	cpi	r24, 0x01	; 1
    28da:	a1 f4       	brne	.+40     	; 0x2904 <PORT_enumSET_PINDirection+0x1c8>
			{
				SET_BIT(DDRD,Local_u8PINID);
    28dc:	a1 e3       	ldi	r26, 0x31	; 49
    28de:	b0 e0       	ldi	r27, 0x00	; 0
    28e0:	e1 e3       	ldi	r30, 0x31	; 49
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	80 81       	ld	r24, Z
    28e6:	48 2f       	mov	r20, r24
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	28 2f       	mov	r18, r24
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	02 2e       	mov	r0, r18
    28f4:	02 c0       	rjmp	.+4      	; 0x28fa <PORT_enumSET_PINDirection+0x1be>
    28f6:	88 0f       	add	r24, r24
    28f8:	99 1f       	adc	r25, r25
    28fa:	0a 94       	dec	r0
    28fc:	e2 f7       	brpl	.-8      	; 0x28f6 <PORT_enumSET_PINDirection+0x1ba>
    28fe:	84 2b       	or	r24, r20
    2900:	8c 93       	st	X, r24
    2902:	1d c0       	rjmp	.+58     	; 0x293e <PORT_enumSET_PINDirection+0x202>
			}
			else if(Copy_u8PINDirection == PORT_u8PINDIR_INPUT)
    2904:	8d 81       	ldd	r24, Y+5	; 0x05
    2906:	88 23       	and	r24, r24
    2908:	a9 f4       	brne	.+42     	; 0x2934 <PORT_enumSET_PINDirection+0x1f8>
			{
				CLR_BIT(DDRD,Local_u8PINID);
    290a:	a1 e3       	ldi	r26, 0x31	; 49
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	e1 e3       	ldi	r30, 0x31	; 49
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	80 81       	ld	r24, Z
    2914:	48 2f       	mov	r20, r24
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
    2918:	28 2f       	mov	r18, r24
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	02 2e       	mov	r0, r18
    2922:	02 c0       	rjmp	.+4      	; 0x2928 <PORT_enumSET_PINDirection+0x1ec>
    2924:	88 0f       	add	r24, r24
    2926:	99 1f       	adc	r25, r25
    2928:	0a 94       	dec	r0
    292a:	e2 f7       	brpl	.-8      	; 0x2924 <PORT_enumSET_PINDirection+0x1e8>
    292c:	80 95       	com	r24
    292e:	84 23       	and	r24, r20
    2930:	8c 93       	st	X, r24
    2932:	05 c0       	rjmp	.+10     	; 0x293e <PORT_enumSET_PINDirection+0x202>
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
    2934:	82 e0       	ldi	r24, 0x02	; 2
    2936:	89 83       	std	Y+1, r24	; 0x01
    2938:	02 c0       	rjmp	.+4      	; 0x293e <PORT_enumSET_PINDirection+0x202>
			}
			break;
		default :
			Local_enumErrStatus = PORT_enumPINerr;
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return Local_enumErrStatus;
    293e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2940:	27 96       	adiw	r28, 0x07	; 7
    2942:	0f b6       	in	r0, 0x3f	; 63
    2944:	f8 94       	cli
    2946:	de bf       	out	0x3e, r29	; 62
    2948:	0f be       	out	0x3f, r0	; 63
    294a:	cd bf       	out	0x3d, r28	; 61
    294c:	cf 91       	pop	r28
    294e:	df 91       	pop	r29
    2950:	08 95       	ret

00002952 <PORT_enumSET_PINMODE>:
PORT_enumErrStatus PORT_enumSET_PINMODE(u8 Copy_u8PINNum, u8 Copy_u8PINMODE)
{
    2952:	df 93       	push	r29
    2954:	cf 93       	push	r28
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
    295a:	27 97       	sbiw	r28, 0x07	; 7
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	f8 94       	cli
    2960:	de bf       	out	0x3e, r29	; 62
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	cd bf       	out	0x3d, r28	; 61
    2966:	8c 83       	std	Y+4, r24	; 0x04
    2968:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8PINID = Copy_u8PINNum%8;
    296a:	8c 81       	ldd	r24, Y+4	; 0x04
    296c:	87 70       	andi	r24, 0x07	; 7
    296e:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PORTID = Copy_u8PINNum/8;
    2970:	8c 81       	ldd	r24, Y+4	; 0x04
    2972:	86 95       	lsr	r24
    2974:	86 95       	lsr	r24
    2976:	86 95       	lsr	r24
    2978:	8a 83       	std	Y+2, r24	; 0x02
	PORT_enumErrStatus Local_enumErrStatus = PORT_enumOK;
    297a:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_u8PORTID)
    297c:	8a 81       	ldd	r24, Y+2	; 0x02
    297e:	28 2f       	mov	r18, r24
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	3f 83       	std	Y+7, r19	; 0x07
    2984:	2e 83       	std	Y+6, r18	; 0x06
    2986:	8e 81       	ldd	r24, Y+6	; 0x06
    2988:	9f 81       	ldd	r25, Y+7	; 0x07
    298a:	81 30       	cpi	r24, 0x01	; 1
    298c:	91 05       	cpc	r25, r1
    298e:	09 f4       	brne	.+2      	; 0x2992 <PORT_enumSET_PINMODE+0x40>
    2990:	4f c0       	rjmp	.+158    	; 0x2a30 <PORT_enumSET_PINMODE+0xde>
    2992:	2e 81       	ldd	r18, Y+6	; 0x06
    2994:	3f 81       	ldd	r19, Y+7	; 0x07
    2996:	22 30       	cpi	r18, 0x02	; 2
    2998:	31 05       	cpc	r19, r1
    299a:	2c f4       	brge	.+10     	; 0x29a6 <PORT_enumSET_PINMODE+0x54>
    299c:	8e 81       	ldd	r24, Y+6	; 0x06
    299e:	9f 81       	ldd	r25, Y+7	; 0x07
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	71 f0       	breq	.+28     	; 0x29c0 <PORT_enumSET_PINMODE+0x6e>
    29a4:	ed c0       	rjmp	.+474    	; 0x2b80 <PORT_enumSET_PINMODE+0x22e>
    29a6:	2e 81       	ldd	r18, Y+6	; 0x06
    29a8:	3f 81       	ldd	r19, Y+7	; 0x07
    29aa:	22 30       	cpi	r18, 0x02	; 2
    29ac:	31 05       	cpc	r19, r1
    29ae:	09 f4       	brne	.+2      	; 0x29b2 <PORT_enumSET_PINMODE+0x60>
    29b0:	77 c0       	rjmp	.+238    	; 0x2aa0 <PORT_enumSET_PINMODE+0x14e>
    29b2:	8e 81       	ldd	r24, Y+6	; 0x06
    29b4:	9f 81       	ldd	r25, Y+7	; 0x07
    29b6:	83 30       	cpi	r24, 0x03	; 3
    29b8:	91 05       	cpc	r25, r1
    29ba:	09 f4       	brne	.+2      	; 0x29be <PORT_enumSET_PINMODE+0x6c>
    29bc:	a9 c0       	rjmp	.+338    	; 0x2b10 <PORT_enumSET_PINMODE+0x1be>
    29be:	e0 c0       	rjmp	.+448    	; 0x2b80 <PORT_enumSET_PINMODE+0x22e>
	{
		case PORT_u8PORTA:
			if(Copy_u8PINMODE == PORT_u8PINMODE_INPUUT_PULLUP  || Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_HIGH)
    29c0:	8d 81       	ldd	r24, Y+5	; 0x05
    29c2:	83 30       	cpi	r24, 0x03	; 3
    29c4:	19 f0       	breq	.+6      	; 0x29cc <PORT_enumSET_PINMODE+0x7a>
    29c6:	8d 81       	ldd	r24, Y+5	; 0x05
    29c8:	81 30       	cpi	r24, 0x01	; 1
    29ca:	a1 f4       	brne	.+40     	; 0x29f4 <PORT_enumSET_PINMODE+0xa2>
			{
				SET_BIT(PORTA,Local_u8PINID);
    29cc:	ab e3       	ldi	r26, 0x3B	; 59
    29ce:	b0 e0       	ldi	r27, 0x00	; 0
    29d0:	eb e3       	ldi	r30, 0x3B	; 59
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	48 2f       	mov	r20, r24
    29d8:	8b 81       	ldd	r24, Y+3	; 0x03
    29da:	28 2f       	mov	r18, r24
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	02 2e       	mov	r0, r18
    29e4:	02 c0       	rjmp	.+4      	; 0x29ea <PORT_enumSET_PINMODE+0x98>
    29e6:	88 0f       	add	r24, r24
    29e8:	99 1f       	adc	r25, r25
    29ea:	0a 94       	dec	r0
    29ec:	e2 f7       	brpl	.-8      	; 0x29e6 <PORT_enumSET_PINMODE+0x94>
    29ee:	84 2b       	or	r24, r20
    29f0:	8c 93       	st	X, r24
    29f2:	c8 c0       	rjmp	.+400    	; 0x2b84 <PORT_enumSET_PINMODE+0x232>
			}
			else if(Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_LOW  || Copy_u8PINMODE == PORT_u8PINMODE_INPUT_FLOATING)
    29f4:	8d 81       	ldd	r24, Y+5	; 0x05
    29f6:	88 23       	and	r24, r24
    29f8:	19 f0       	breq	.+6      	; 0x2a00 <PORT_enumSET_PINMODE+0xae>
    29fa:	8d 81       	ldd	r24, Y+5	; 0x05
    29fc:	82 30       	cpi	r24, 0x02	; 2
    29fe:	a9 f4       	brne	.+42     	; 0x2a2a <PORT_enumSET_PINMODE+0xd8>
			{
				CLR_BIT(PORTA,Local_u8PINID);
    2a00:	ab e3       	ldi	r26, 0x3B	; 59
    2a02:	b0 e0       	ldi	r27, 0x00	; 0
    2a04:	eb e3       	ldi	r30, 0x3B	; 59
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	48 2f       	mov	r20, r24
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	28 2f       	mov	r18, r24
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	02 2e       	mov	r0, r18
    2a18:	02 c0       	rjmp	.+4      	; 0x2a1e <PORT_enumSET_PINMODE+0xcc>
    2a1a:	88 0f       	add	r24, r24
    2a1c:	99 1f       	adc	r25, r25
    2a1e:	0a 94       	dec	r0
    2a20:	e2 f7       	brpl	.-8      	; 0x2a1a <PORT_enumSET_PINMODE+0xc8>
    2a22:	80 95       	com	r24
    2a24:	84 23       	and	r24, r20
    2a26:	8c 93       	st	X, r24
    2a28:	ad c0       	rjmp	.+346    	; 0x2b84 <PORT_enumSET_PINMODE+0x232>
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
    2a2a:	82 e0       	ldi	r24, 0x02	; 2
    2a2c:	89 83       	std	Y+1, r24	; 0x01
    2a2e:	aa c0       	rjmp	.+340    	; 0x2b84 <PORT_enumSET_PINMODE+0x232>
			}
			break;
		case PORT_u8PORTB:
			if(Copy_u8PINMODE == PORT_u8PINMODE_INPUUT_PULLUP  || Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_HIGH)
    2a30:	8d 81       	ldd	r24, Y+5	; 0x05
    2a32:	83 30       	cpi	r24, 0x03	; 3
    2a34:	19 f0       	breq	.+6      	; 0x2a3c <PORT_enumSET_PINMODE+0xea>
    2a36:	8d 81       	ldd	r24, Y+5	; 0x05
    2a38:	81 30       	cpi	r24, 0x01	; 1
    2a3a:	a1 f4       	brne	.+40     	; 0x2a64 <PORT_enumSET_PINMODE+0x112>
			{
				SET_BIT(PORTB,Local_u8PINID);
    2a3c:	a8 e3       	ldi	r26, 0x38	; 56
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	e8 e3       	ldi	r30, 0x38	; 56
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	80 81       	ld	r24, Z
    2a46:	48 2f       	mov	r20, r24
    2a48:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4a:	28 2f       	mov	r18, r24
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	02 2e       	mov	r0, r18
    2a54:	02 c0       	rjmp	.+4      	; 0x2a5a <PORT_enumSET_PINMODE+0x108>
    2a56:	88 0f       	add	r24, r24
    2a58:	99 1f       	adc	r25, r25
    2a5a:	0a 94       	dec	r0
    2a5c:	e2 f7       	brpl	.-8      	; 0x2a56 <PORT_enumSET_PINMODE+0x104>
    2a5e:	84 2b       	or	r24, r20
    2a60:	8c 93       	st	X, r24
    2a62:	90 c0       	rjmp	.+288    	; 0x2b84 <PORT_enumSET_PINMODE+0x232>
			}
			else if(Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_LOW  || Copy_u8PINMODE == PORT_u8PINMODE_INPUT_FLOATING)
    2a64:	8d 81       	ldd	r24, Y+5	; 0x05
    2a66:	88 23       	and	r24, r24
    2a68:	19 f0       	breq	.+6      	; 0x2a70 <PORT_enumSET_PINMODE+0x11e>
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	82 30       	cpi	r24, 0x02	; 2
    2a6e:	a9 f4       	brne	.+42     	; 0x2a9a <PORT_enumSET_PINMODE+0x148>
			{
				CLR_BIT(PORTB,Local_u8PINID);
    2a70:	a8 e3       	ldi	r26, 0x38	; 56
    2a72:	b0 e0       	ldi	r27, 0x00	; 0
    2a74:	e8 e3       	ldi	r30, 0x38	; 56
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	80 81       	ld	r24, Z
    2a7a:	48 2f       	mov	r20, r24
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	28 2f       	mov	r18, r24
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	02 2e       	mov	r0, r18
    2a88:	02 c0       	rjmp	.+4      	; 0x2a8e <PORT_enumSET_PINMODE+0x13c>
    2a8a:	88 0f       	add	r24, r24
    2a8c:	99 1f       	adc	r25, r25
    2a8e:	0a 94       	dec	r0
    2a90:	e2 f7       	brpl	.-8      	; 0x2a8a <PORT_enumSET_PINMODE+0x138>
    2a92:	80 95       	com	r24
    2a94:	84 23       	and	r24, r20
    2a96:	8c 93       	st	X, r24
    2a98:	75 c0       	rjmp	.+234    	; 0x2b84 <PORT_enumSET_PINMODE+0x232>
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
    2a9a:	82 e0       	ldi	r24, 0x02	; 2
    2a9c:	89 83       	std	Y+1, r24	; 0x01
    2a9e:	72 c0       	rjmp	.+228    	; 0x2b84 <PORT_enumSET_PINMODE+0x232>
			}
			break;
		case PORT_u8PORTC:
			if(Copy_u8PINMODE == PORT_u8PINMODE_INPUUT_PULLUP  || Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_HIGH)
    2aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa2:	83 30       	cpi	r24, 0x03	; 3
    2aa4:	19 f0       	breq	.+6      	; 0x2aac <PORT_enumSET_PINMODE+0x15a>
    2aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa8:	81 30       	cpi	r24, 0x01	; 1
    2aaa:	a1 f4       	brne	.+40     	; 0x2ad4 <PORT_enumSET_PINMODE+0x182>
			{
				SET_BIT(PORTC,Local_u8PINID);
    2aac:	a5 e3       	ldi	r26, 0x35	; 53
    2aae:	b0 e0       	ldi	r27, 0x00	; 0
    2ab0:	e5 e3       	ldi	r30, 0x35	; 53
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	80 81       	ld	r24, Z
    2ab6:	48 2f       	mov	r20, r24
    2ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aba:	28 2f       	mov	r18, r24
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	02 2e       	mov	r0, r18
    2ac4:	02 c0       	rjmp	.+4      	; 0x2aca <PORT_enumSET_PINMODE+0x178>
    2ac6:	88 0f       	add	r24, r24
    2ac8:	99 1f       	adc	r25, r25
    2aca:	0a 94       	dec	r0
    2acc:	e2 f7       	brpl	.-8      	; 0x2ac6 <PORT_enumSET_PINMODE+0x174>
    2ace:	84 2b       	or	r24, r20
    2ad0:	8c 93       	st	X, r24
    2ad2:	58 c0       	rjmp	.+176    	; 0x2b84 <PORT_enumSET_PINMODE+0x232>
			}
			else if(Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_LOW  || Copy_u8PINMODE == PORT_u8PINMODE_INPUT_FLOATING)
    2ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad6:	88 23       	and	r24, r24
    2ad8:	19 f0       	breq	.+6      	; 0x2ae0 <PORT_enumSET_PINMODE+0x18e>
    2ada:	8d 81       	ldd	r24, Y+5	; 0x05
    2adc:	82 30       	cpi	r24, 0x02	; 2
    2ade:	a9 f4       	brne	.+42     	; 0x2b0a <PORT_enumSET_PINMODE+0x1b8>
			{
				CLR_BIT(PORTC,Local_u8PINID);
    2ae0:	a5 e3       	ldi	r26, 0x35	; 53
    2ae2:	b0 e0       	ldi	r27, 0x00	; 0
    2ae4:	e5 e3       	ldi	r30, 0x35	; 53
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	80 81       	ld	r24, Z
    2aea:	48 2f       	mov	r20, r24
    2aec:	8b 81       	ldd	r24, Y+3	; 0x03
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	02 2e       	mov	r0, r18
    2af8:	02 c0       	rjmp	.+4      	; 0x2afe <PORT_enumSET_PINMODE+0x1ac>
    2afa:	88 0f       	add	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	0a 94       	dec	r0
    2b00:	e2 f7       	brpl	.-8      	; 0x2afa <PORT_enumSET_PINMODE+0x1a8>
    2b02:	80 95       	com	r24
    2b04:	84 23       	and	r24, r20
    2b06:	8c 93       	st	X, r24
    2b08:	3d c0       	rjmp	.+122    	; 0x2b84 <PORT_enumSET_PINMODE+0x232>
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
    2b0a:	82 e0       	ldi	r24, 0x02	; 2
    2b0c:	89 83       	std	Y+1, r24	; 0x01
    2b0e:	3a c0       	rjmp	.+116    	; 0x2b84 <PORT_enumSET_PINMODE+0x232>
			}
			break;
		case PORT_u8PORTD:
			if(Copy_u8PINMODE == PORT_u8PINMODE_INPUUT_PULLUP  || Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_HIGH)
    2b10:	8d 81       	ldd	r24, Y+5	; 0x05
    2b12:	83 30       	cpi	r24, 0x03	; 3
    2b14:	19 f0       	breq	.+6      	; 0x2b1c <PORT_enumSET_PINMODE+0x1ca>
    2b16:	8d 81       	ldd	r24, Y+5	; 0x05
    2b18:	81 30       	cpi	r24, 0x01	; 1
    2b1a:	a1 f4       	brne	.+40     	; 0x2b44 <PORT_enumSET_PINMODE+0x1f2>
			{
				SET_BIT(PORTD,Local_u8PINID);
    2b1c:	a2 e3       	ldi	r26, 0x32	; 50
    2b1e:	b0 e0       	ldi	r27, 0x00	; 0
    2b20:	e2 e3       	ldi	r30, 0x32	; 50
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	48 2f       	mov	r20, r24
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	28 2f       	mov	r18, r24
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	02 2e       	mov	r0, r18
    2b34:	02 c0       	rjmp	.+4      	; 0x2b3a <PORT_enumSET_PINMODE+0x1e8>
    2b36:	88 0f       	add	r24, r24
    2b38:	99 1f       	adc	r25, r25
    2b3a:	0a 94       	dec	r0
    2b3c:	e2 f7       	brpl	.-8      	; 0x2b36 <PORT_enumSET_PINMODE+0x1e4>
    2b3e:	84 2b       	or	r24, r20
    2b40:	8c 93       	st	X, r24
    2b42:	20 c0       	rjmp	.+64     	; 0x2b84 <PORT_enumSET_PINMODE+0x232>
			}
			else if(Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_LOW  || Copy_u8PINMODE == PORT_u8PINMODE_INPUT_FLOATING)
    2b44:	8d 81       	ldd	r24, Y+5	; 0x05
    2b46:	88 23       	and	r24, r24
    2b48:	19 f0       	breq	.+6      	; 0x2b50 <PORT_enumSET_PINMODE+0x1fe>
    2b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4c:	82 30       	cpi	r24, 0x02	; 2
    2b4e:	a9 f4       	brne	.+42     	; 0x2b7a <PORT_enumSET_PINMODE+0x228>
			{
				CLR_BIT(PORTD,Local_u8PINID);
    2b50:	a2 e3       	ldi	r26, 0x32	; 50
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	e2 e3       	ldi	r30, 0x32	; 50
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	48 2f       	mov	r20, r24
    2b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5e:	28 2f       	mov	r18, r24
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	02 2e       	mov	r0, r18
    2b68:	02 c0       	rjmp	.+4      	; 0x2b6e <PORT_enumSET_PINMODE+0x21c>
    2b6a:	88 0f       	add	r24, r24
    2b6c:	99 1f       	adc	r25, r25
    2b6e:	0a 94       	dec	r0
    2b70:	e2 f7       	brpl	.-8      	; 0x2b6a <PORT_enumSET_PINMODE+0x218>
    2b72:	80 95       	com	r24
    2b74:	84 23       	and	r24, r20
    2b76:	8c 93       	st	X, r24
    2b78:	05 c0       	rjmp	.+10     	; 0x2b84 <PORT_enumSET_PINMODE+0x232>
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
    2b7a:	82 e0       	ldi	r24, 0x02	; 2
    2b7c:	89 83       	std	Y+1, r24	; 0x01
    2b7e:	02 c0       	rjmp	.+4      	; 0x2b84 <PORT_enumSET_PINMODE+0x232>
			}
			break;
		default :
			Local_enumErrStatus = PORT_enumPINerr;
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return Local_enumErrStatus;
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b86:	27 96       	adiw	r28, 0x07	; 7
    2b88:	0f b6       	in	r0, 0x3f	; 63
    2b8a:	f8 94       	cli
    2b8c:	de bf       	out	0x3e, r29	; 62
    2b8e:	0f be       	out	0x3f, r0	; 63
    2b90:	cd bf       	out	0x3d, r28	; 61
    2b92:	cf 91       	pop	r28
    2b94:	df 91       	pop	r29
    2b96:	08 95       	ret

00002b98 <main>:
		  0x1F,
		  0x1F,
		  0x1F
		};
int main(void)
{
    2b98:	0f 93       	push	r16
    2b9a:	1f 93       	push	r17
    2b9c:	df 93       	push	r29
    2b9e:	cf 93       	push	r28
    2ba0:	cd b7       	in	r28, 0x3d	; 61
    2ba2:	de b7       	in	r29, 0x3e	; 62
    2ba4:	c9 57       	subi	r28, 0x79	; 121
    2ba6:	d0 40       	sbci	r29, 0x00	; 0
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	f8 94       	cli
    2bac:	de bf       	out	0x3e, r29	; 62
    2bae:	0f be       	out	0x3f, r0	; 63
    2bb0:	cd bf       	out	0x3d, r28	; 61
	/**/
	PORT_voidInit();
    2bb2:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <PORT_voidInit>
	LCD_voidInit();
    2bb6:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LCD_voidInit>
	//EXTI_voidInit();
	//EXTI_voidSetCallBack(EXTI0, func2);

	//M_GIE_void_EnableGlobalInterrupt();

	LCD_voidInit();
    2bba:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LCD_voidInit>
	LCD_voidCreateCustomChar(0,customChar0);
    2bbe:	24 e7       	ldi	r18, 0x74	; 116
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	b9 01       	movw	r22, r18
    2bc6:	0e 94 54 13 	call	0x26a8	; 0x26a8 <LCD_voidCreateCustomChar>
	LCD_voidCreateCustomChar(8,customChar1);
    2bca:	2c e7       	ldi	r18, 0x7C	; 124
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	88 e0       	ldi	r24, 0x08	; 8
    2bd0:	b9 01       	movw	r22, r18
    2bd2:	0e 94 54 13 	call	0x26a8	; 0x26a8 <LCD_voidCreateCustomChar>
	LCD_voidCreateCustomChar(16,customChar2);
    2bd6:	24 e8       	ldi	r18, 0x84	; 132
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	80 e1       	ldi	r24, 0x10	; 16
    2bdc:	b9 01       	movw	r22, r18
    2bde:	0e 94 54 13 	call	0x26a8	; 0x26a8 <LCD_voidCreateCustomChar>
	LCD_voidCreateCustomChar(24,customChar3);
    2be2:	2c e8       	ldi	r18, 0x8C	; 140
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	88 e1       	ldi	r24, 0x18	; 24
    2be8:	b9 01       	movw	r22, r18
    2bea:	0e 94 54 13 	call	0x26a8	; 0x26a8 <LCD_voidCreateCustomChar>

	//volatile f64 num = 0;
	for(u8 i=0;i<4;i++)
    2bee:	fe 01       	movw	r30, r28
    2bf0:	ec 58       	subi	r30, 0x8C	; 140
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	10 82       	st	Z, r1
    2bf6:	2a c0       	rjmp	.+84     	; 0x2c4c <main+0xb4>
	{
		for(u8 m=0;m<20;m++)
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	ed 58       	subi	r30, 0x8D	; 141
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	10 82       	st	Z, r1
    2c00:	16 c0       	rjmp	.+44     	; 0x2c2e <main+0x96>
		{
			LCD_voidSetCursorToX_y(i,m);
    2c02:	fe 01       	movw	r30, r28
    2c04:	ec 58       	subi	r30, 0x8C	; 140
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	de 01       	movw	r26, r28
    2c0a:	ad 58       	subi	r26, 0x8D	; 141
    2c0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c0e:	80 81       	ld	r24, Z
    2c10:	6c 91       	ld	r22, X
    2c12:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(0);
    2c16:	80 e0       	ldi	r24, 0x00	; 0
    2c18:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
	LCD_voidCreateCustomChar(24,customChar3);

	//volatile f64 num = 0;
	for(u8 i=0;i<4;i++)
	{
		for(u8 m=0;m<20;m++)
    2c1c:	de 01       	movw	r26, r28
    2c1e:	ad 58       	subi	r26, 0x8D	; 141
    2c20:	bf 4f       	sbci	r27, 0xFF	; 255
    2c22:	fe 01       	movw	r30, r28
    2c24:	ed 58       	subi	r30, 0x8D	; 141
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	80 81       	ld	r24, Z
    2c2a:	8f 5f       	subi	r24, 0xFF	; 255
    2c2c:	8c 93       	st	X, r24
    2c2e:	fe 01       	movw	r30, r28
    2c30:	ed 58       	subi	r30, 0x8D	; 141
    2c32:	ff 4f       	sbci	r31, 0xFF	; 255
    2c34:	80 81       	ld	r24, Z
    2c36:	84 31       	cpi	r24, 0x14	; 20
    2c38:	20 f3       	brcs	.-56     	; 0x2c02 <main+0x6a>
	LCD_voidCreateCustomChar(8,customChar1);
	LCD_voidCreateCustomChar(16,customChar2);
	LCD_voidCreateCustomChar(24,customChar3);

	//volatile f64 num = 0;
	for(u8 i=0;i<4;i++)
    2c3a:	de 01       	movw	r26, r28
    2c3c:	ac 58       	subi	r26, 0x8C	; 140
    2c3e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c40:	fe 01       	movw	r30, r28
    2c42:	ec 58       	subi	r30, 0x8C	; 140
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	80 81       	ld	r24, Z
    2c48:	8f 5f       	subi	r24, 0xFF	; 255
    2c4a:	8c 93       	st	X, r24
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	ec 58       	subi	r30, 0x8C	; 140
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	80 81       	ld	r24, Z
    2c54:	84 30       	cpi	r24, 0x04	; 4
    2c56:	80 f2       	brcs	.-96     	; 0x2bf8 <main+0x60>
			LCD_voidSetCursorToX_y(i,m);
			LCD_voidWriteChar(0);
		}
	}
u8 x,y;
u8 flag =0;
    2c58:	fe 01       	movw	r30, r28
    2c5a:	e9 58       	subi	r30, 0x89	; 137
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	10 82       	st	Z, r1
u8 i,m;
for( i=0;i<4;i++)
    2c60:	fe 01       	movw	r30, r28
    2c62:	ea 58       	subi	r30, 0x8A	; 138
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	10 82       	st	Z, r1
    2c68:	fb c0       	rjmp	.+502    	; 0x2e60 <main+0x2c8>
{
for( m=0;m<20;m++)
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	eb 58       	subi	r30, 0x8B	; 139
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	10 82       	st	Z, r1
    2c72:	e6 c0       	rjmp	.+460    	; 0x2e40 <main+0x2a8>
{
	LCD_voidSetCursorToX_y(i,m);
    2c74:	fe 01       	movw	r30, r28
    2c76:	ea 58       	subi	r30, 0x8A	; 138
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	de 01       	movw	r26, r28
    2c7c:	ab 58       	subi	r26, 0x8B	; 139
    2c7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c80:	80 81       	ld	r24, Z
    2c82:	6c 91       	ld	r22, X
    2c84:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
	LCD_voidWriteChar(1);
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
    2c8e:	fe 01       	movw	r30, r28
    2c90:	e3 59       	subi	r30, 0x93	; 147
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	a8 e4       	ldi	r26, 0x48	; 72
    2c9a:	b2 e4       	ldi	r27, 0x42	; 66
    2c9c:	80 83       	st	Z, r24
    2c9e:	91 83       	std	Z+1, r25	; 0x01
    2ca0:	a2 83       	std	Z+2, r26	; 0x02
    2ca2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca4:	8e 01       	movw	r16, r28
    2ca6:	07 59       	subi	r16, 0x97	; 151
    2ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    2caa:	fe 01       	movw	r30, r28
    2cac:	e3 59       	subi	r30, 0x93	; 147
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	60 81       	ld	r22, Z
    2cb2:	71 81       	ldd	r23, Z+1	; 0x01
    2cb4:	82 81       	ldd	r24, Z+2	; 0x02
    2cb6:	93 81       	ldd	r25, Z+3	; 0x03
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	4a ef       	ldi	r20, 0xFA	; 250
    2cbe:	54 e4       	ldi	r21, 0x44	; 68
    2cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	f8 01       	movw	r30, r16
    2cca:	80 83       	st	Z, r24
    2ccc:	91 83       	std	Z+1, r25	; 0x01
    2cce:	a2 83       	std	Z+2, r26	; 0x02
    2cd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	e7 59       	subi	r30, 0x97	; 151
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	60 81       	ld	r22, Z
    2cda:	71 81       	ldd	r23, Z+1	; 0x01
    2cdc:	82 81       	ldd	r24, Z+2	; 0x02
    2cde:	93 81       	ldd	r25, Z+3	; 0x03
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e8       	ldi	r20, 0x80	; 128
    2ce6:	5f e3       	ldi	r21, 0x3F	; 63
    2ce8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cec:	88 23       	and	r24, r24
    2cee:	44 f4       	brge	.+16     	; 0x2d00 <main+0x168>
		__ticks = 1;
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	e9 59       	subi	r30, 0x99	; 153
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	91 83       	std	Z+1, r25	; 0x01
    2cfc:	80 83       	st	Z, r24
    2cfe:	64 c0       	rjmp	.+200    	; 0x2dc8 <main+0x230>
	else if (__tmp > 65535)
    2d00:	fe 01       	movw	r30, r28
    2d02:	e7 59       	subi	r30, 0x97	; 151
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	60 81       	ld	r22, Z
    2d08:	71 81       	ldd	r23, Z+1	; 0x01
    2d0a:	82 81       	ldd	r24, Z+2	; 0x02
    2d0c:	93 81       	ldd	r25, Z+3	; 0x03
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	3f ef       	ldi	r19, 0xFF	; 255
    2d12:	4f e7       	ldi	r20, 0x7F	; 127
    2d14:	57 e4       	ldi	r21, 0x47	; 71
    2d16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d1a:	18 16       	cp	r1, r24
    2d1c:	0c f0       	brlt	.+2      	; 0x2d20 <main+0x188>
    2d1e:	43 c0       	rjmp	.+134    	; 0x2da6 <main+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d20:	fe 01       	movw	r30, r28
    2d22:	e3 59       	subi	r30, 0x93	; 147
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	60 81       	ld	r22, Z
    2d28:	71 81       	ldd	r23, Z+1	; 0x01
    2d2a:	82 81       	ldd	r24, Z+2	; 0x02
    2d2c:	93 81       	ldd	r25, Z+3	; 0x03
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e2       	ldi	r20, 0x20	; 32
    2d34:	51 e4       	ldi	r21, 0x41	; 65
    2d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	8e 01       	movw	r16, r28
    2d40:	09 59       	subi	r16, 0x99	; 153
    2d42:	1f 4f       	sbci	r17, 0xFF	; 255
    2d44:	bc 01       	movw	r22, r24
    2d46:	cd 01       	movw	r24, r26
    2d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	f8 01       	movw	r30, r16
    2d52:	91 83       	std	Z+1, r25	; 0x01
    2d54:	80 83       	st	Z, r24
    2d56:	1f c0       	rjmp	.+62     	; 0x2d96 <main+0x1fe>
    2d58:	fe 01       	movw	r30, r28
    2d5a:	eb 59       	subi	r30, 0x9B	; 155
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	88 ec       	ldi	r24, 0xC8	; 200
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	91 83       	std	Z+1, r25	; 0x01
    2d64:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d66:	fe 01       	movw	r30, r28
    2d68:	eb 59       	subi	r30, 0x9B	; 155
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	80 81       	ld	r24, Z
    2d6e:	91 81       	ldd	r25, Z+1	; 0x01
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	f1 f7       	brne	.-4      	; 0x2d70 <main+0x1d8>
    2d74:	fe 01       	movw	r30, r28
    2d76:	eb 59       	subi	r30, 0x9B	; 155
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7e:	de 01       	movw	r26, r28
    2d80:	a9 59       	subi	r26, 0x99	; 153
    2d82:	bf 4f       	sbci	r27, 0xFF	; 255
    2d84:	fe 01       	movw	r30, r28
    2d86:	e9 59       	subi	r30, 0x99	; 153
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	80 81       	ld	r24, Z
    2d8c:	91 81       	ldd	r25, Z+1	; 0x01
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
    2d90:	11 96       	adiw	r26, 0x01	; 1
    2d92:	9c 93       	st	X, r25
    2d94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d96:	fe 01       	movw	r30, r28
    2d98:	e9 59       	subi	r30, 0x99	; 153
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	80 81       	ld	r24, Z
    2d9e:	91 81       	ldd	r25, Z+1	; 0x01
    2da0:	00 97       	sbiw	r24, 0x00	; 0
    2da2:	d1 f6       	brne	.-76     	; 0x2d58 <main+0x1c0>
    2da4:	27 c0       	rjmp	.+78     	; 0x2df4 <main+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da6:	8e 01       	movw	r16, r28
    2da8:	09 59       	subi	r16, 0x99	; 153
    2daa:	1f 4f       	sbci	r17, 0xFF	; 255
    2dac:	fe 01       	movw	r30, r28
    2dae:	e7 59       	subi	r30, 0x97	; 151
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	60 81       	ld	r22, Z
    2db4:	71 81       	ldd	r23, Z+1	; 0x01
    2db6:	82 81       	ldd	r24, Z+2	; 0x02
    2db8:	93 81       	ldd	r25, Z+3	; 0x03
    2dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	f8 01       	movw	r30, r16
    2dc4:	91 83       	std	Z+1, r25	; 0x01
    2dc6:	80 83       	st	Z, r24
    2dc8:	de 01       	movw	r26, r28
    2dca:	ad 59       	subi	r26, 0x9D	; 157
    2dcc:	bf 4f       	sbci	r27, 0xFF	; 255
    2dce:	fe 01       	movw	r30, r28
    2dd0:	e9 59       	subi	r30, 0x99	; 153
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	80 81       	ld	r24, Z
    2dd6:	91 81       	ldd	r25, Z+1	; 0x01
    2dd8:	8d 93       	st	X+, r24
    2dda:	9c 93       	st	X, r25
    2ddc:	fe 01       	movw	r30, r28
    2dde:	ed 59       	subi	r30, 0x9D	; 157
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	80 81       	ld	r24, Z
    2de4:	91 81       	ldd	r25, Z+1	; 0x01
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	f1 f7       	brne	.-4      	; 0x2de6 <main+0x24e>
    2dea:	fe 01       	movw	r30, r28
    2dec:	ed 59       	subi	r30, 0x9D	; 157
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	91 83       	std	Z+1, r25	; 0x01
    2df2:	80 83       	st	Z, r24
	_delay_ms(50);
	x=i,y=m;
    2df4:	de 01       	movw	r26, r28
    2df6:	a7 58       	subi	r26, 0x87	; 135
    2df8:	bf 4f       	sbci	r27, 0xFF	; 255
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	ea 58       	subi	r30, 0x8A	; 138
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	80 81       	ld	r24, Z
    2e02:	8c 93       	st	X, r24
    2e04:	de 01       	movw	r26, r28
    2e06:	a8 58       	subi	r26, 0x88	; 136
    2e08:	bf 4f       	sbci	r27, 0xFF	; 255
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	eb 58       	subi	r30, 0x8B	; 139
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	80 81       	ld	r24, Z
    2e12:	8c 93       	st	X, r24
	LCD_voidSetCursorToX_y(x,y);
    2e14:	fe 01       	movw	r30, r28
    2e16:	e7 58       	subi	r30, 0x87	; 135
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	de 01       	movw	r26, r28
    2e1c:	a8 58       	subi	r26, 0x88	; 136
    2e1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e20:	80 81       	ld	r24, Z
    2e22:	6c 91       	ld	r22, X
    2e24:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
	LCD_voidWriteChar(0);
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
u8 x,y;
u8 flag =0;
u8 i,m;
for( i=0;i<4;i++)
{
for( m=0;m<20;m++)
    2e2e:	de 01       	movw	r26, r28
    2e30:	ab 58       	subi	r26, 0x8B	; 139
    2e32:	bf 4f       	sbci	r27, 0xFF	; 255
    2e34:	fe 01       	movw	r30, r28
    2e36:	eb 58       	subi	r30, 0x8B	; 139
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	80 81       	ld	r24, Z
    2e3c:	8f 5f       	subi	r24, 0xFF	; 255
    2e3e:	8c 93       	st	X, r24
    2e40:	fe 01       	movw	r30, r28
    2e42:	eb 58       	subi	r30, 0x8B	; 139
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	80 81       	ld	r24, Z
    2e48:	84 31       	cpi	r24, 0x14	; 20
    2e4a:	08 f4       	brcc	.+2      	; 0x2e4e <main+0x2b6>
    2e4c:	13 cf       	rjmp	.-474    	; 0x2c74 <main+0xdc>
		}
	}
u8 x,y;
u8 flag =0;
u8 i,m;
for( i=0;i<4;i++)
    2e4e:	de 01       	movw	r26, r28
    2e50:	aa 58       	subi	r26, 0x8A	; 138
    2e52:	bf 4f       	sbci	r27, 0xFF	; 255
    2e54:	fe 01       	movw	r30, r28
    2e56:	ea 58       	subi	r30, 0x8A	; 138
    2e58:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5a:	80 81       	ld	r24, Z
    2e5c:	8f 5f       	subi	r24, 0xFF	; 255
    2e5e:	8c 93       	st	X, r24
    2e60:	fe 01       	movw	r30, r28
    2e62:	ea 58       	subi	r30, 0x8A	; 138
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	80 81       	ld	r24, Z
    2e68:	84 30       	cpi	r24, 0x04	; 4
    2e6a:	08 f4       	brcc	.+2      	; 0x2e6e <main+0x2d6>
    2e6c:	fe ce       	rjmp	.-516    	; 0x2c6a <main+0xd2>
	x=i,y=m;
	LCD_voidSetCursorToX_y(x,y);
	LCD_voidWriteChar(0);
}
}
LCD_voidSetCursorToX_y(0,12);
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	6c e0       	ldi	r22, 0x0C	; 12
    2e72:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
LCD_voidWriteChar(' ');
    2e76:	80 e2       	ldi	r24, 0x20	; 32
    2e78:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
for(u8 i=0;i<4;i++)
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	ee 58       	subi	r30, 0x8E	; 142
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	10 82       	st	Z, r1
    2e84:	c7 c4       	rjmp	.+2446   	; 0x3814 <main+0xc7c>
{
for(u8 m=0;m<20;m++)
    2e86:	fe 01       	movw	r30, r28
    2e88:	ef 58       	subi	r30, 0x8F	; 143
    2e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8c:	10 82       	st	Z, r1
    2e8e:	a6 c4       	rjmp	.+2380   	; 0x37dc <main+0xc44>
{
	if (flag == 0)
    2e90:	fe 01       	movw	r30, r28
    2e92:	e9 58       	subi	r30, 0x89	; 137
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	80 81       	ld	r24, Z
    2e98:	88 23       	and	r24, r24
    2e9a:	01 f5       	brne	.+64     	; 0x2edc <main+0x344>
	{
	if(i == 0 && m==12)
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	ee 58       	subi	r30, 0x8E	; 142
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	80 81       	ld	r24, Z
    2ea4:	88 23       	and	r24, r24
    2ea6:	d1 f4       	brne	.+52     	; 0x2edc <main+0x344>
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	ef 58       	subi	r30, 0x8F	; 143
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	80 81       	ld	r24, Z
    2eb0:	8c 30       	cpi	r24, 0x0C	; 12
    2eb2:	a1 f4       	brne	.+40     	; 0x2edc <main+0x344>
	{
		LCD_voidWriteChar(0);
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
		i=1;
    2eba:	fe 01       	movw	r30, r28
    2ebc:	ee 58       	subi	r30, 0x8E	; 142
    2ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	80 83       	st	Z, r24
		LCD_voidSetCursorToX_y(3,2);
    2ec4:	83 e0       	ldi	r24, 0x03	; 3
    2ec6:	62 e0       	ldi	r22, 0x02	; 2
    2ec8:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
		LCD_voidWriteChar('/');
    2ecc:	8f e2       	ldi	r24, 0x2F	; 47
    2ece:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
		flag =1;
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	e9 58       	subi	r30, 0x89	; 137
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	80 83       	st	Z, r24
	}
	}
	if(flag == 1)
    2edc:	fe 01       	movw	r30, r28
    2ede:	e9 58       	subi	r30, 0x89	; 137
    2ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee2:	80 81       	ld	r24, Z
    2ee4:	81 30       	cpi	r24, 0x01	; 1
    2ee6:	01 f5       	brne	.+64     	; 0x2f28 <main+0x390>
	{
	if(i == 3 && m==2)
    2ee8:	fe 01       	movw	r30, r28
    2eea:	ee 58       	subi	r30, 0x8E	; 142
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	80 81       	ld	r24, Z
    2ef0:	83 30       	cpi	r24, 0x03	; 3
    2ef2:	d1 f4       	brne	.+52     	; 0x2f28 <main+0x390>
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	ef 58       	subi	r30, 0x8F	; 143
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	80 81       	ld	r24, Z
    2efc:	82 30       	cpi	r24, 0x02	; 2
    2efe:	a1 f4       	brne	.+40     	; 0x2f28 <main+0x390>
	{
		i=2;
    2f00:	fe 01       	movw	r30, r28
    2f02:	ee 58       	subi	r30, 0x8E	; 142
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	82 e0       	ldi	r24, 0x02	; 2
    2f08:	80 83       	st	Z, r24
		LCD_voidWriteChar(0);
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
		flag = 2;
    2f10:	fe 01       	movw	r30, r28
    2f12:	e9 58       	subi	r30, 0x89	; 137
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	82 e0       	ldi	r24, 0x02	; 2
    2f18:	80 83       	st	Z, r24
		LCD_voidSetCursorToX_y(2,12);
    2f1a:	82 e0       	ldi	r24, 0x02	; 2
    2f1c:	6c e0       	ldi	r22, 0x0C	; 12
    2f1e:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
		LCD_voidWriteChar('/');
    2f22:	8f e2       	ldi	r24, 0x2F	; 47
    2f24:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
	}
	}
	if(flag == 2)
    2f28:	fe 01       	movw	r30, r28
    2f2a:	e9 58       	subi	r30, 0x89	; 137
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	80 81       	ld	r24, Z
    2f30:	82 30       	cpi	r24, 0x02	; 2
    2f32:	01 f5       	brne	.+64     	; 0x2f74 <main+0x3dc>
	{
		if(i == 2 && m==12)
    2f34:	fe 01       	movw	r30, r28
    2f36:	ee 58       	subi	r30, 0x8E	; 142
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	80 81       	ld	r24, Z
    2f3c:	82 30       	cpi	r24, 0x02	; 2
    2f3e:	d1 f4       	brne	.+52     	; 0x2f74 <main+0x3dc>
    2f40:	fe 01       	movw	r30, r28
    2f42:	ef 58       	subi	r30, 0x8F	; 143
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	80 81       	ld	r24, Z
    2f48:	8c 30       	cpi	r24, 0x0C	; 12
    2f4a:	a1 f4       	brne	.+40     	; 0x2f74 <main+0x3dc>
		{
			i=1;
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	ee 58       	subi	r30, 0x8E	; 142
    2f50:	ff 4f       	sbci	r31, 0xFF	; 255
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	80 83       	st	Z, r24
			LCD_voidWriteChar(0);
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
			flag = 3;
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	e9 58       	subi	r30, 0x89	; 137
    2f60:	ff 4f       	sbci	r31, 0xFF	; 255
    2f62:	83 e0       	ldi	r24, 0x03	; 3
    2f64:	80 83       	st	Z, r24
			LCD_voidSetCursorToX_y(1,16);
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	60 e1       	ldi	r22, 0x10	; 16
    2f6a:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar('/');
    2f6e:	8f e2       	ldi	r24, 0x2F	; 47
    2f70:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
		}
	}
	if(flag == 3)
    2f74:	fe 01       	movw	r30, r28
    2f76:	e9 58       	subi	r30, 0x89	; 137
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	80 81       	ld	r24, Z
    2f7c:	83 30       	cpi	r24, 0x03	; 3
    2f7e:	c1 f4       	brne	.+48     	; 0x2fb0 <main+0x418>
	{
		if(i == 1 && m==16)
    2f80:	fe 01       	movw	r30, r28
    2f82:	ee 58       	subi	r30, 0x8E	; 142
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	80 81       	ld	r24, Z
    2f88:	81 30       	cpi	r24, 0x01	; 1
    2f8a:	91 f4       	brne	.+36     	; 0x2fb0 <main+0x418>
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	ef 58       	subi	r30, 0x8F	; 143
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	80 81       	ld	r24, Z
    2f94:	80 31       	cpi	r24, 0x10	; 16
    2f96:	61 f4       	brne	.+24     	; 0x2fb0 <main+0x418>
		{
			i=0;
    2f98:	fe 01       	movw	r30, r28
    2f9a:	ee 58       	subi	r30, 0x8E	; 142
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	10 82       	st	Z, r1
			LCD_voidWriteChar(0);
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
			flag = 5;
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	e9 58       	subi	r30, 0x89	; 137
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	85 e0       	ldi	r24, 0x05	; 5
    2fae:	80 83       	st	Z, r24

		}
	}
	if(flag == 5)
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	e9 58       	subi	r30, 0x89	; 137
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	80 81       	ld	r24, Z
    2fb8:	85 30       	cpi	r24, 0x05	; 5
    2fba:	09 f0       	breq	.+2      	; 0x2fbe <main+0x426>
    2fbc:	6a c3       	rjmp	.+1748   	; 0x3692 <main+0xafa>
	{
		if(i == 0 && m==19)
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	ee 58       	subi	r30, 0x8E	; 142
    2fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc4:	80 81       	ld	r24, Z
    2fc6:	88 23       	and	r24, r24
    2fc8:	09 f0       	breq	.+2      	; 0x2fcc <main+0x434>
    2fca:	63 c3       	rjmp	.+1734   	; 0x3692 <main+0xafa>
    2fcc:	fe 01       	movw	r30, r28
    2fce:	ef 58       	subi	r30, 0x8F	; 143
    2fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd2:	80 81       	ld	r24, Z
    2fd4:	83 31       	cpi	r24, 0x13	; 19
    2fd6:	09 f0       	breq	.+2      	; 0x2fda <main+0x442>
    2fd8:	5c c3       	rjmp	.+1720   	; 0x3692 <main+0xafa>
		{
			LCD_voidSetCursorToX_y(0,19);
    2fda:	80 e0       	ldi	r24, 0x00	; 0
    2fdc:	63 e1       	ldi	r22, 0x13	; 19
    2fde:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(1);
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
			LCD_voidSetCursorToX_y(1,19);
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	63 e1       	ldi	r22, 0x13	; 19
    2fec:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(' ');
    2ff0:	80 e2       	ldi	r24, 0x20	; 32
    2ff2:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
			LCD_voidSetCursorToX_y(2,19);
    2ff6:	82 e0       	ldi	r24, 0x02	; 2
    2ff8:	63 e1       	ldi	r22, 0x13	; 19
    2ffa:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(' ');
    2ffe:	80 e2       	ldi	r24, 0x20	; 32
    3000:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
			LCD_voidSetCursorToX_y(3,19);
    3004:	83 e0       	ldi	r24, 0x03	; 3
    3006:	63 e1       	ldi	r22, 0x13	; 19
    3008:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(' ');
    300c:	80 e2       	ldi	r24, 0x20	; 32
    300e:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
    3012:	fe 01       	movw	r30, r28
    3014:	e1 5a       	subi	r30, 0xA1	; 161
    3016:	ff 4f       	sbci	r31, 0xFF	; 255
    3018:	80 e0       	ldi	r24, 0x00	; 0
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	a0 e2       	ldi	r26, 0x20	; 32
    301e:	b2 e4       	ldi	r27, 0x42	; 66
    3020:	80 83       	st	Z, r24
    3022:	91 83       	std	Z+1, r25	; 0x01
    3024:	a2 83       	std	Z+2, r26	; 0x02
    3026:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3028:	8e 01       	movw	r16, r28
    302a:	05 5a       	subi	r16, 0xA5	; 165
    302c:	1f 4f       	sbci	r17, 0xFF	; 255
    302e:	fe 01       	movw	r30, r28
    3030:	e1 5a       	subi	r30, 0xA1	; 161
    3032:	ff 4f       	sbci	r31, 0xFF	; 255
    3034:	60 81       	ld	r22, Z
    3036:	71 81       	ldd	r23, Z+1	; 0x01
    3038:	82 81       	ldd	r24, Z+2	; 0x02
    303a:	93 81       	ldd	r25, Z+3	; 0x03
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	4a ef       	ldi	r20, 0xFA	; 250
    3042:	54 e4       	ldi	r21, 0x44	; 68
    3044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	f8 01       	movw	r30, r16
    304e:	80 83       	st	Z, r24
    3050:	91 83       	std	Z+1, r25	; 0x01
    3052:	a2 83       	std	Z+2, r26	; 0x02
    3054:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3056:	fe 01       	movw	r30, r28
    3058:	e5 5a       	subi	r30, 0xA5	; 165
    305a:	ff 4f       	sbci	r31, 0xFF	; 255
    305c:	60 81       	ld	r22, Z
    305e:	71 81       	ldd	r23, Z+1	; 0x01
    3060:	82 81       	ldd	r24, Z+2	; 0x02
    3062:	93 81       	ldd	r25, Z+3	; 0x03
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	40 e8       	ldi	r20, 0x80	; 128
    306a:	5f e3       	ldi	r21, 0x3F	; 63
    306c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3070:	88 23       	and	r24, r24
    3072:	44 f4       	brge	.+16     	; 0x3084 <main+0x4ec>
		__ticks = 1;
    3074:	fe 01       	movw	r30, r28
    3076:	e7 5a       	subi	r30, 0xA7	; 167
    3078:	ff 4f       	sbci	r31, 0xFF	; 255
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	91 83       	std	Z+1, r25	; 0x01
    3080:	80 83       	st	Z, r24
    3082:	64 c0       	rjmp	.+200    	; 0x314c <main+0x5b4>
	else if (__tmp > 65535)
    3084:	fe 01       	movw	r30, r28
    3086:	e5 5a       	subi	r30, 0xA5	; 165
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	60 81       	ld	r22, Z
    308c:	71 81       	ldd	r23, Z+1	; 0x01
    308e:	82 81       	ldd	r24, Z+2	; 0x02
    3090:	93 81       	ldd	r25, Z+3	; 0x03
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	3f ef       	ldi	r19, 0xFF	; 255
    3096:	4f e7       	ldi	r20, 0x7F	; 127
    3098:	57 e4       	ldi	r21, 0x47	; 71
    309a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    309e:	18 16       	cp	r1, r24
    30a0:	0c f0       	brlt	.+2      	; 0x30a4 <main+0x50c>
    30a2:	43 c0       	rjmp	.+134    	; 0x312a <main+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a4:	fe 01       	movw	r30, r28
    30a6:	e1 5a       	subi	r30, 0xA1	; 161
    30a8:	ff 4f       	sbci	r31, 0xFF	; 255
    30aa:	60 81       	ld	r22, Z
    30ac:	71 81       	ldd	r23, Z+1	; 0x01
    30ae:	82 81       	ldd	r24, Z+2	; 0x02
    30b0:	93 81       	ldd	r25, Z+3	; 0x03
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	40 e2       	ldi	r20, 0x20	; 32
    30b8:	51 e4       	ldi	r21, 0x41	; 65
    30ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	8e 01       	movw	r16, r28
    30c4:	07 5a       	subi	r16, 0xA7	; 167
    30c6:	1f 4f       	sbci	r17, 0xFF	; 255
    30c8:	bc 01       	movw	r22, r24
    30ca:	cd 01       	movw	r24, r26
    30cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	f8 01       	movw	r30, r16
    30d6:	91 83       	std	Z+1, r25	; 0x01
    30d8:	80 83       	st	Z, r24
    30da:	1f c0       	rjmp	.+62     	; 0x311a <main+0x582>
    30dc:	fe 01       	movw	r30, r28
    30de:	e9 5a       	subi	r30, 0xA9	; 169
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	88 ec       	ldi	r24, 0xC8	; 200
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	91 83       	std	Z+1, r25	; 0x01
    30e8:	80 83       	st	Z, r24
    30ea:	fe 01       	movw	r30, r28
    30ec:	e9 5a       	subi	r30, 0xA9	; 169
    30ee:	ff 4f       	sbci	r31, 0xFF	; 255
    30f0:	80 81       	ld	r24, Z
    30f2:	91 81       	ldd	r25, Z+1	; 0x01
    30f4:	01 97       	sbiw	r24, 0x01	; 1
    30f6:	f1 f7       	brne	.-4      	; 0x30f4 <main+0x55c>
    30f8:	fe 01       	movw	r30, r28
    30fa:	e9 5a       	subi	r30, 0xA9	; 169
    30fc:	ff 4f       	sbci	r31, 0xFF	; 255
    30fe:	91 83       	std	Z+1, r25	; 0x01
    3100:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3102:	de 01       	movw	r26, r28
    3104:	a7 5a       	subi	r26, 0xA7	; 167
    3106:	bf 4f       	sbci	r27, 0xFF	; 255
    3108:	fe 01       	movw	r30, r28
    310a:	e7 5a       	subi	r30, 0xA7	; 167
    310c:	ff 4f       	sbci	r31, 0xFF	; 255
    310e:	80 81       	ld	r24, Z
    3110:	91 81       	ldd	r25, Z+1	; 0x01
    3112:	01 97       	sbiw	r24, 0x01	; 1
    3114:	11 96       	adiw	r26, 0x01	; 1
    3116:	9c 93       	st	X, r25
    3118:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    311a:	fe 01       	movw	r30, r28
    311c:	e7 5a       	subi	r30, 0xA7	; 167
    311e:	ff 4f       	sbci	r31, 0xFF	; 255
    3120:	80 81       	ld	r24, Z
    3122:	91 81       	ldd	r25, Z+1	; 0x01
    3124:	00 97       	sbiw	r24, 0x00	; 0
    3126:	d1 f6       	brne	.-76     	; 0x30dc <main+0x544>
    3128:	27 c0       	rjmp	.+78     	; 0x3178 <main+0x5e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    312a:	8e 01       	movw	r16, r28
    312c:	07 5a       	subi	r16, 0xA7	; 167
    312e:	1f 4f       	sbci	r17, 0xFF	; 255
    3130:	fe 01       	movw	r30, r28
    3132:	e5 5a       	subi	r30, 0xA5	; 165
    3134:	ff 4f       	sbci	r31, 0xFF	; 255
    3136:	60 81       	ld	r22, Z
    3138:	71 81       	ldd	r23, Z+1	; 0x01
    313a:	82 81       	ldd	r24, Z+2	; 0x02
    313c:	93 81       	ldd	r25, Z+3	; 0x03
    313e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3142:	dc 01       	movw	r26, r24
    3144:	cb 01       	movw	r24, r22
    3146:	f8 01       	movw	r30, r16
    3148:	91 83       	std	Z+1, r25	; 0x01
    314a:	80 83       	st	Z, r24
    314c:	de 01       	movw	r26, r28
    314e:	ab 5a       	subi	r26, 0xAB	; 171
    3150:	bf 4f       	sbci	r27, 0xFF	; 255
    3152:	fe 01       	movw	r30, r28
    3154:	e7 5a       	subi	r30, 0xA7	; 167
    3156:	ff 4f       	sbci	r31, 0xFF	; 255
    3158:	80 81       	ld	r24, Z
    315a:	91 81       	ldd	r25, Z+1	; 0x01
    315c:	8d 93       	st	X+, r24
    315e:	9c 93       	st	X, r25
    3160:	fe 01       	movw	r30, r28
    3162:	eb 5a       	subi	r30, 0xAB	; 171
    3164:	ff 4f       	sbci	r31, 0xFF	; 255
    3166:	80 81       	ld	r24, Z
    3168:	91 81       	ldd	r25, Z+1	; 0x01
    316a:	01 97       	sbiw	r24, 0x01	; 1
    316c:	f1 f7       	brne	.-4      	; 0x316a <main+0x5d2>
    316e:	fe 01       	movw	r30, r28
    3170:	eb 5a       	subi	r30, 0xAB	; 171
    3172:	ff 4f       	sbci	r31, 0xFF	; 255
    3174:	91 83       	std	Z+1, r25	; 0x01
    3176:	80 83       	st	Z, r24
			_delay_ms(40);
			LCD_voidSetCursorToX_y(0,19);
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	63 e1       	ldi	r22, 0x13	; 19
    317c:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(' ');
    3180:	80 e2       	ldi	r24, 0x20	; 32
    3182:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
			LCD_voidSetCursorToX_y(1,19);
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	63 e1       	ldi	r22, 0x13	; 19
    318a:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(1);
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
			LCD_voidSetCursorToX_y(2,19);
    3194:	82 e0       	ldi	r24, 0x02	; 2
    3196:	63 e1       	ldi	r22, 0x13	; 19
    3198:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(' ');
    319c:	80 e2       	ldi	r24, 0x20	; 32
    319e:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
			LCD_voidSetCursorToX_y(3,19);
    31a2:	83 e0       	ldi	r24, 0x03	; 3
    31a4:	63 e1       	ldi	r22, 0x13	; 19
    31a6:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(' ');
    31aa:	80 e2       	ldi	r24, 0x20	; 32
    31ac:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
    31b0:	fe 01       	movw	r30, r28
    31b2:	ef 5a       	subi	r30, 0xAF	; 175
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	a0 e2       	ldi	r26, 0x20	; 32
    31bc:	b2 e4       	ldi	r27, 0x42	; 66
    31be:	80 83       	st	Z, r24
    31c0:	91 83       	std	Z+1, r25	; 0x01
    31c2:	a2 83       	std	Z+2, r26	; 0x02
    31c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c6:	8e 01       	movw	r16, r28
    31c8:	03 5b       	subi	r16, 0xB3	; 179
    31ca:	1f 4f       	sbci	r17, 0xFF	; 255
    31cc:	fe 01       	movw	r30, r28
    31ce:	ef 5a       	subi	r30, 0xAF	; 175
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	60 81       	ld	r22, Z
    31d4:	71 81       	ldd	r23, Z+1	; 0x01
    31d6:	82 81       	ldd	r24, Z+2	; 0x02
    31d8:	93 81       	ldd	r25, Z+3	; 0x03
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	4a ef       	ldi	r20, 0xFA	; 250
    31e0:	54 e4       	ldi	r21, 0x44	; 68
    31e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	f8 01       	movw	r30, r16
    31ec:	80 83       	st	Z, r24
    31ee:	91 83       	std	Z+1, r25	; 0x01
    31f0:	a2 83       	std	Z+2, r26	; 0x02
    31f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31f4:	fe 01       	movw	r30, r28
    31f6:	e3 5b       	subi	r30, 0xB3	; 179
    31f8:	ff 4f       	sbci	r31, 0xFF	; 255
    31fa:	60 81       	ld	r22, Z
    31fc:	71 81       	ldd	r23, Z+1	; 0x01
    31fe:	82 81       	ldd	r24, Z+2	; 0x02
    3200:	93 81       	ldd	r25, Z+3	; 0x03
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	40 e8       	ldi	r20, 0x80	; 128
    3208:	5f e3       	ldi	r21, 0x3F	; 63
    320a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    320e:	88 23       	and	r24, r24
    3210:	44 f4       	brge	.+16     	; 0x3222 <main+0x68a>
		__ticks = 1;
    3212:	fe 01       	movw	r30, r28
    3214:	e5 5b       	subi	r30, 0xB5	; 181
    3216:	ff 4f       	sbci	r31, 0xFF	; 255
    3218:	81 e0       	ldi	r24, 0x01	; 1
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	91 83       	std	Z+1, r25	; 0x01
    321e:	80 83       	st	Z, r24
    3220:	64 c0       	rjmp	.+200    	; 0x32ea <main+0x752>
	else if (__tmp > 65535)
    3222:	fe 01       	movw	r30, r28
    3224:	e3 5b       	subi	r30, 0xB3	; 179
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	60 81       	ld	r22, Z
    322a:	71 81       	ldd	r23, Z+1	; 0x01
    322c:	82 81       	ldd	r24, Z+2	; 0x02
    322e:	93 81       	ldd	r25, Z+3	; 0x03
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	3f ef       	ldi	r19, 0xFF	; 255
    3234:	4f e7       	ldi	r20, 0x7F	; 127
    3236:	57 e4       	ldi	r21, 0x47	; 71
    3238:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    323c:	18 16       	cp	r1, r24
    323e:	0c f0       	brlt	.+2      	; 0x3242 <main+0x6aa>
    3240:	43 c0       	rjmp	.+134    	; 0x32c8 <main+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3242:	fe 01       	movw	r30, r28
    3244:	ef 5a       	subi	r30, 0xAF	; 175
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
    3248:	60 81       	ld	r22, Z
    324a:	71 81       	ldd	r23, Z+1	; 0x01
    324c:	82 81       	ldd	r24, Z+2	; 0x02
    324e:	93 81       	ldd	r25, Z+3	; 0x03
    3250:	20 e0       	ldi	r18, 0x00	; 0
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	40 e2       	ldi	r20, 0x20	; 32
    3256:	51 e4       	ldi	r21, 0x41	; 65
    3258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325c:	dc 01       	movw	r26, r24
    325e:	cb 01       	movw	r24, r22
    3260:	8e 01       	movw	r16, r28
    3262:	05 5b       	subi	r16, 0xB5	; 181
    3264:	1f 4f       	sbci	r17, 0xFF	; 255
    3266:	bc 01       	movw	r22, r24
    3268:	cd 01       	movw	r24, r26
    326a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	f8 01       	movw	r30, r16
    3274:	91 83       	std	Z+1, r25	; 0x01
    3276:	80 83       	st	Z, r24
    3278:	1f c0       	rjmp	.+62     	; 0x32b8 <main+0x720>
    327a:	fe 01       	movw	r30, r28
    327c:	e7 5b       	subi	r30, 0xB7	; 183
    327e:	ff 4f       	sbci	r31, 0xFF	; 255
    3280:	88 ec       	ldi	r24, 0xC8	; 200
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	91 83       	std	Z+1, r25	; 0x01
    3286:	80 83       	st	Z, r24
    3288:	fe 01       	movw	r30, r28
    328a:	e7 5b       	subi	r30, 0xB7	; 183
    328c:	ff 4f       	sbci	r31, 0xFF	; 255
    328e:	80 81       	ld	r24, Z
    3290:	91 81       	ldd	r25, Z+1	; 0x01
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	f1 f7       	brne	.-4      	; 0x3292 <main+0x6fa>
    3296:	fe 01       	movw	r30, r28
    3298:	e7 5b       	subi	r30, 0xB7	; 183
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	91 83       	std	Z+1, r25	; 0x01
    329e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a0:	de 01       	movw	r26, r28
    32a2:	a5 5b       	subi	r26, 0xB5	; 181
    32a4:	bf 4f       	sbci	r27, 0xFF	; 255
    32a6:	fe 01       	movw	r30, r28
    32a8:	e5 5b       	subi	r30, 0xB5	; 181
    32aa:	ff 4f       	sbci	r31, 0xFF	; 255
    32ac:	80 81       	ld	r24, Z
    32ae:	91 81       	ldd	r25, Z+1	; 0x01
    32b0:	01 97       	sbiw	r24, 0x01	; 1
    32b2:	11 96       	adiw	r26, 0x01	; 1
    32b4:	9c 93       	st	X, r25
    32b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b8:	fe 01       	movw	r30, r28
    32ba:	e5 5b       	subi	r30, 0xB5	; 181
    32bc:	ff 4f       	sbci	r31, 0xFF	; 255
    32be:	80 81       	ld	r24, Z
    32c0:	91 81       	ldd	r25, Z+1	; 0x01
    32c2:	00 97       	sbiw	r24, 0x00	; 0
    32c4:	d1 f6       	brne	.-76     	; 0x327a <main+0x6e2>
    32c6:	27 c0       	rjmp	.+78     	; 0x3316 <main+0x77e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c8:	8e 01       	movw	r16, r28
    32ca:	05 5b       	subi	r16, 0xB5	; 181
    32cc:	1f 4f       	sbci	r17, 0xFF	; 255
    32ce:	fe 01       	movw	r30, r28
    32d0:	e3 5b       	subi	r30, 0xB3	; 179
    32d2:	ff 4f       	sbci	r31, 0xFF	; 255
    32d4:	60 81       	ld	r22, Z
    32d6:	71 81       	ldd	r23, Z+1	; 0x01
    32d8:	82 81       	ldd	r24, Z+2	; 0x02
    32da:	93 81       	ldd	r25, Z+3	; 0x03
    32dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	f8 01       	movw	r30, r16
    32e6:	91 83       	std	Z+1, r25	; 0x01
    32e8:	80 83       	st	Z, r24
    32ea:	de 01       	movw	r26, r28
    32ec:	a9 5b       	subi	r26, 0xB9	; 185
    32ee:	bf 4f       	sbci	r27, 0xFF	; 255
    32f0:	fe 01       	movw	r30, r28
    32f2:	e5 5b       	subi	r30, 0xB5	; 181
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	80 81       	ld	r24, Z
    32f8:	91 81       	ldd	r25, Z+1	; 0x01
    32fa:	8d 93       	st	X+, r24
    32fc:	9c 93       	st	X, r25
    32fe:	fe 01       	movw	r30, r28
    3300:	e9 5b       	subi	r30, 0xB9	; 185
    3302:	ff 4f       	sbci	r31, 0xFF	; 255
    3304:	80 81       	ld	r24, Z
    3306:	91 81       	ldd	r25, Z+1	; 0x01
    3308:	01 97       	sbiw	r24, 0x01	; 1
    330a:	f1 f7       	brne	.-4      	; 0x3308 <main+0x770>
    330c:	fe 01       	movw	r30, r28
    330e:	e9 5b       	subi	r30, 0xB9	; 185
    3310:	ff 4f       	sbci	r31, 0xFF	; 255
    3312:	91 83       	std	Z+1, r25	; 0x01
    3314:	80 83       	st	Z, r24
			_delay_ms(40);
			LCD_voidSetCursorToX_y(0,19);
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	63 e1       	ldi	r22, 0x13	; 19
    331a:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(' ');
    331e:	80 e2       	ldi	r24, 0x20	; 32
    3320:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
			LCD_voidSetCursorToX_y(1,19);
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	63 e1       	ldi	r22, 0x13	; 19
    3328:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(' ');
    332c:	80 e2       	ldi	r24, 0x20	; 32
    332e:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
			LCD_voidSetCursorToX_y(2,19);
    3332:	82 e0       	ldi	r24, 0x02	; 2
    3334:	63 e1       	ldi	r22, 0x13	; 19
    3336:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(1);
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
			LCD_voidSetCursorToX_y(3,19);
    3340:	83 e0       	ldi	r24, 0x03	; 3
    3342:	63 e1       	ldi	r22, 0x13	; 19
    3344:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(' ');
    3348:	80 e2       	ldi	r24, 0x20	; 32
    334a:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
    334e:	fe 01       	movw	r30, r28
    3350:	ed 5b       	subi	r30, 0xBD	; 189
    3352:	ff 4f       	sbci	r31, 0xFF	; 255
    3354:	80 e0       	ldi	r24, 0x00	; 0
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	a0 e2       	ldi	r26, 0x20	; 32
    335a:	b2 e4       	ldi	r27, 0x42	; 66
    335c:	80 83       	st	Z, r24
    335e:	91 83       	std	Z+1, r25	; 0x01
    3360:	a2 83       	std	Z+2, r26	; 0x02
    3362:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3364:	8e 01       	movw	r16, r28
    3366:	01 5c       	subi	r16, 0xC1	; 193
    3368:	1f 4f       	sbci	r17, 0xFF	; 255
    336a:	fe 01       	movw	r30, r28
    336c:	ed 5b       	subi	r30, 0xBD	; 189
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	60 81       	ld	r22, Z
    3372:	71 81       	ldd	r23, Z+1	; 0x01
    3374:	82 81       	ldd	r24, Z+2	; 0x02
    3376:	93 81       	ldd	r25, Z+3	; 0x03
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	4a ef       	ldi	r20, 0xFA	; 250
    337e:	54 e4       	ldi	r21, 0x44	; 68
    3380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3384:	dc 01       	movw	r26, r24
    3386:	cb 01       	movw	r24, r22
    3388:	f8 01       	movw	r30, r16
    338a:	80 83       	st	Z, r24
    338c:	91 83       	std	Z+1, r25	; 0x01
    338e:	a2 83       	std	Z+2, r26	; 0x02
    3390:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3392:	fe 01       	movw	r30, r28
    3394:	ff 96       	adiw	r30, 0x3f	; 63
    3396:	60 81       	ld	r22, Z
    3398:	71 81       	ldd	r23, Z+1	; 0x01
    339a:	82 81       	ldd	r24, Z+2	; 0x02
    339c:	93 81       	ldd	r25, Z+3	; 0x03
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	40 e8       	ldi	r20, 0x80	; 128
    33a4:	5f e3       	ldi	r21, 0x3F	; 63
    33a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33aa:	88 23       	and	r24, r24
    33ac:	2c f4       	brge	.+10     	; 0x33b8 <main+0x820>
		__ticks = 1;
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	9e af       	std	Y+62, r25	; 0x3e
    33b4:	8d af       	std	Y+61, r24	; 0x3d
    33b6:	46 c0       	rjmp	.+140    	; 0x3444 <main+0x8ac>
	else if (__tmp > 65535)
    33b8:	fe 01       	movw	r30, r28
    33ba:	ff 96       	adiw	r30, 0x3f	; 63
    33bc:	60 81       	ld	r22, Z
    33be:	71 81       	ldd	r23, Z+1	; 0x01
    33c0:	82 81       	ldd	r24, Z+2	; 0x02
    33c2:	93 81       	ldd	r25, Z+3	; 0x03
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	3f ef       	ldi	r19, 0xFF	; 255
    33c8:	4f e7       	ldi	r20, 0x7F	; 127
    33ca:	57 e4       	ldi	r21, 0x47	; 71
    33cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33d0:	18 16       	cp	r1, r24
    33d2:	64 f5       	brge	.+88     	; 0x342c <main+0x894>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d4:	fe 01       	movw	r30, r28
    33d6:	ed 5b       	subi	r30, 0xBD	; 189
    33d8:	ff 4f       	sbci	r31, 0xFF	; 255
    33da:	60 81       	ld	r22, Z
    33dc:	71 81       	ldd	r23, Z+1	; 0x01
    33de:	82 81       	ldd	r24, Z+2	; 0x02
    33e0:	93 81       	ldd	r25, Z+3	; 0x03
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	40 e2       	ldi	r20, 0x20	; 32
    33e8:	51 e4       	ldi	r21, 0x41	; 65
    33ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ee:	dc 01       	movw	r26, r24
    33f0:	cb 01       	movw	r24, r22
    33f2:	bc 01       	movw	r22, r24
    33f4:	cd 01       	movw	r24, r26
    33f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	9e af       	std	Y+62, r25	; 0x3e
    3400:	8d af       	std	Y+61, r24	; 0x3d
    3402:	0f c0       	rjmp	.+30     	; 0x3422 <main+0x88a>
    3404:	88 ec       	ldi	r24, 0xC8	; 200
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	9c af       	std	Y+60, r25	; 0x3c
    340a:	8b af       	std	Y+59, r24	; 0x3b
    340c:	8b ad       	ldd	r24, Y+59	; 0x3b
    340e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3410:	01 97       	sbiw	r24, 0x01	; 1
    3412:	f1 f7       	brne	.-4      	; 0x3410 <main+0x878>
    3414:	9c af       	std	Y+60, r25	; 0x3c
    3416:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3418:	8d ad       	ldd	r24, Y+61	; 0x3d
    341a:	9e ad       	ldd	r25, Y+62	; 0x3e
    341c:	01 97       	sbiw	r24, 0x01	; 1
    341e:	9e af       	std	Y+62, r25	; 0x3e
    3420:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3422:	8d ad       	ldd	r24, Y+61	; 0x3d
    3424:	9e ad       	ldd	r25, Y+62	; 0x3e
    3426:	00 97       	sbiw	r24, 0x00	; 0
    3428:	69 f7       	brne	.-38     	; 0x3404 <main+0x86c>
    342a:	16 c0       	rjmp	.+44     	; 0x3458 <main+0x8c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    342c:	fe 01       	movw	r30, r28
    342e:	ff 96       	adiw	r30, 0x3f	; 63
    3430:	60 81       	ld	r22, Z
    3432:	71 81       	ldd	r23, Z+1	; 0x01
    3434:	82 81       	ldd	r24, Z+2	; 0x02
    3436:	93 81       	ldd	r25, Z+3	; 0x03
    3438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343c:	dc 01       	movw	r26, r24
    343e:	cb 01       	movw	r24, r22
    3440:	9e af       	std	Y+62, r25	; 0x3e
    3442:	8d af       	std	Y+61, r24	; 0x3d
    3444:	8d ad       	ldd	r24, Y+61	; 0x3d
    3446:	9e ad       	ldd	r25, Y+62	; 0x3e
    3448:	9a af       	std	Y+58, r25	; 0x3a
    344a:	89 af       	std	Y+57, r24	; 0x39
    344c:	89 ad       	ldd	r24, Y+57	; 0x39
    344e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3450:	01 97       	sbiw	r24, 0x01	; 1
    3452:	f1 f7       	brne	.-4      	; 0x3450 <main+0x8b8>
    3454:	9a af       	std	Y+58, r25	; 0x3a
    3456:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(40);
			LCD_voidSetCursorToX_y(0,19);
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	63 e1       	ldi	r22, 0x13	; 19
    345c:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(' ');
    3460:	80 e2       	ldi	r24, 0x20	; 32
    3462:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
			LCD_voidSetCursorToX_y(1,19);
    3466:	81 e0       	ldi	r24, 0x01	; 1
    3468:	63 e1       	ldi	r22, 0x13	; 19
    346a:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(' ');
    346e:	80 e2       	ldi	r24, 0x20	; 32
    3470:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
			LCD_voidSetCursorToX_y(2,19);
    3474:	82 e0       	ldi	r24, 0x02	; 2
    3476:	63 e1       	ldi	r22, 0x13	; 19
    3478:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(' ');
    347c:	80 e2       	ldi	r24, 0x20	; 32
    347e:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
			LCD_voidSetCursorToX_y(3,19);
    3482:	83 e0       	ldi	r24, 0x03	; 3
    3484:	63 e1       	ldi	r22, 0x13	; 19
    3486:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(1);
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
    3490:	80 e0       	ldi	r24, 0x00	; 0
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	a0 e2       	ldi	r26, 0x20	; 32
    3496:	b2 e4       	ldi	r27, 0x42	; 66
    3498:	8d ab       	std	Y+53, r24	; 0x35
    349a:	9e ab       	std	Y+54, r25	; 0x36
    349c:	af ab       	std	Y+55, r26	; 0x37
    349e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34a0:	6d a9       	ldd	r22, Y+53	; 0x35
    34a2:	7e a9       	ldd	r23, Y+54	; 0x36
    34a4:	8f a9       	ldd	r24, Y+55	; 0x37
    34a6:	98 ad       	ldd	r25, Y+56	; 0x38
    34a8:	20 e0       	ldi	r18, 0x00	; 0
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	4a ef       	ldi	r20, 0xFA	; 250
    34ae:	54 e4       	ldi	r21, 0x44	; 68
    34b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b4:	dc 01       	movw	r26, r24
    34b6:	cb 01       	movw	r24, r22
    34b8:	89 ab       	std	Y+49, r24	; 0x31
    34ba:	9a ab       	std	Y+50, r25	; 0x32
    34bc:	ab ab       	std	Y+51, r26	; 0x33
    34be:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    34c0:	69 a9       	ldd	r22, Y+49	; 0x31
    34c2:	7a a9       	ldd	r23, Y+50	; 0x32
    34c4:	8b a9       	ldd	r24, Y+51	; 0x33
    34c6:	9c a9       	ldd	r25, Y+52	; 0x34
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	40 e8       	ldi	r20, 0x80	; 128
    34ce:	5f e3       	ldi	r21, 0x3F	; 63
    34d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34d4:	88 23       	and	r24, r24
    34d6:	2c f4       	brge	.+10     	; 0x34e2 <main+0x94a>
		__ticks = 1;
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	98 ab       	std	Y+48, r25	; 0x30
    34de:	8f a7       	std	Y+47, r24	; 0x2f
    34e0:	3f c0       	rjmp	.+126    	; 0x3560 <main+0x9c8>
	else if (__tmp > 65535)
    34e2:	69 a9       	ldd	r22, Y+49	; 0x31
    34e4:	7a a9       	ldd	r23, Y+50	; 0x32
    34e6:	8b a9       	ldd	r24, Y+51	; 0x33
    34e8:	9c a9       	ldd	r25, Y+52	; 0x34
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	3f ef       	ldi	r19, 0xFF	; 255
    34ee:	4f e7       	ldi	r20, 0x7F	; 127
    34f0:	57 e4       	ldi	r21, 0x47	; 71
    34f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34f6:	18 16       	cp	r1, r24
    34f8:	4c f5       	brge	.+82     	; 0x354c <main+0x9b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34fa:	6d a9       	ldd	r22, Y+53	; 0x35
    34fc:	7e a9       	ldd	r23, Y+54	; 0x36
    34fe:	8f a9       	ldd	r24, Y+55	; 0x37
    3500:	98 ad       	ldd	r25, Y+56	; 0x38
    3502:	20 e0       	ldi	r18, 0x00	; 0
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	40 e2       	ldi	r20, 0x20	; 32
    3508:	51 e4       	ldi	r21, 0x41	; 65
    350a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	bc 01       	movw	r22, r24
    3514:	cd 01       	movw	r24, r26
    3516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    351a:	dc 01       	movw	r26, r24
    351c:	cb 01       	movw	r24, r22
    351e:	98 ab       	std	Y+48, r25	; 0x30
    3520:	8f a7       	std	Y+47, r24	; 0x2f
    3522:	0f c0       	rjmp	.+30     	; 0x3542 <main+0x9aa>
    3524:	88 ec       	ldi	r24, 0xC8	; 200
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	9e a7       	std	Y+46, r25	; 0x2e
    352a:	8d a7       	std	Y+45, r24	; 0x2d
    352c:	8d a5       	ldd	r24, Y+45	; 0x2d
    352e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3530:	01 97       	sbiw	r24, 0x01	; 1
    3532:	f1 f7       	brne	.-4      	; 0x3530 <main+0x998>
    3534:	9e a7       	std	Y+46, r25	; 0x2e
    3536:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3538:	8f a5       	ldd	r24, Y+47	; 0x2f
    353a:	98 a9       	ldd	r25, Y+48	; 0x30
    353c:	01 97       	sbiw	r24, 0x01	; 1
    353e:	98 ab       	std	Y+48, r25	; 0x30
    3540:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3542:	8f a5       	ldd	r24, Y+47	; 0x2f
    3544:	98 a9       	ldd	r25, Y+48	; 0x30
    3546:	00 97       	sbiw	r24, 0x00	; 0
    3548:	69 f7       	brne	.-38     	; 0x3524 <main+0x98c>
    354a:	14 c0       	rjmp	.+40     	; 0x3574 <main+0x9dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    354c:	69 a9       	ldd	r22, Y+49	; 0x31
    354e:	7a a9       	ldd	r23, Y+50	; 0x32
    3550:	8b a9       	ldd	r24, Y+51	; 0x33
    3552:	9c a9       	ldd	r25, Y+52	; 0x34
    3554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3558:	dc 01       	movw	r26, r24
    355a:	cb 01       	movw	r24, r22
    355c:	98 ab       	std	Y+48, r25	; 0x30
    355e:	8f a7       	std	Y+47, r24	; 0x2f
    3560:	8f a5       	ldd	r24, Y+47	; 0x2f
    3562:	98 a9       	ldd	r25, Y+48	; 0x30
    3564:	9c a7       	std	Y+44, r25	; 0x2c
    3566:	8b a7       	std	Y+43, r24	; 0x2b
    3568:	8b a5       	ldd	r24, Y+43	; 0x2b
    356a:	9c a5       	ldd	r25, Y+44	; 0x2c
    356c:	01 97       	sbiw	r24, 0x01	; 1
    356e:	f1 f7       	brne	.-4      	; 0x356c <main+0x9d4>
    3570:	9c a7       	std	Y+44, r25	; 0x2c
    3572:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(40);
			LCD_voidSetCursorToX_y(0,19);
    3574:	80 e0       	ldi	r24, 0x00	; 0
    3576:	63 e1       	ldi	r22, 0x13	; 19
    3578:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(' ');
    357c:	80 e2       	ldi	r24, 0x20	; 32
    357e:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
			LCD_voidSetCursorToX_y(1,19);
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	63 e1       	ldi	r22, 0x13	; 19
    3586:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(' ');
    358a:	80 e2       	ldi	r24, 0x20	; 32
    358c:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
			LCD_voidSetCursorToX_y(2,19);
    3590:	82 e0       	ldi	r24, 0x02	; 2
    3592:	63 e1       	ldi	r22, 0x13	; 19
    3594:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(' ');
    3598:	80 e2       	ldi	r24, 0x20	; 32
    359a:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
			LCD_voidSetCursorToX_y(3,19);
    359e:	83 e0       	ldi	r24, 0x03	; 3
    35a0:	63 e1       	ldi	r22, 0x13	; 19
    35a2:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
			LCD_voidWriteChar(' ');
    35a6:	80 e2       	ldi	r24, 0x20	; 32
    35a8:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	a0 e2       	ldi	r26, 0x20	; 32
    35b2:	b2 e4       	ldi	r27, 0x42	; 66
    35b4:	8f a3       	std	Y+39, r24	; 0x27
    35b6:	98 a7       	std	Y+40, r25	; 0x28
    35b8:	a9 a7       	std	Y+41, r26	; 0x29
    35ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35bc:	6f a1       	ldd	r22, Y+39	; 0x27
    35be:	78 a5       	ldd	r23, Y+40	; 0x28
    35c0:	89 a5       	ldd	r24, Y+41	; 0x29
    35c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	4a ef       	ldi	r20, 0xFA	; 250
    35ca:	54 e4       	ldi	r21, 0x44	; 68
    35cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d0:	dc 01       	movw	r26, r24
    35d2:	cb 01       	movw	r24, r22
    35d4:	8b a3       	std	Y+35, r24	; 0x23
    35d6:	9c a3       	std	Y+36, r25	; 0x24
    35d8:	ad a3       	std	Y+37, r26	; 0x25
    35da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    35dc:	6b a1       	ldd	r22, Y+35	; 0x23
    35de:	7c a1       	ldd	r23, Y+36	; 0x24
    35e0:	8d a1       	ldd	r24, Y+37	; 0x25
    35e2:	9e a1       	ldd	r25, Y+38	; 0x26
    35e4:	20 e0       	ldi	r18, 0x00	; 0
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	40 e8       	ldi	r20, 0x80	; 128
    35ea:	5f e3       	ldi	r21, 0x3F	; 63
    35ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35f0:	88 23       	and	r24, r24
    35f2:	2c f4       	brge	.+10     	; 0x35fe <main+0xa66>
		__ticks = 1;
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	9a a3       	std	Y+34, r25	; 0x22
    35fa:	89 a3       	std	Y+33, r24	; 0x21
    35fc:	3f c0       	rjmp	.+126    	; 0x367c <main+0xae4>
	else if (__tmp > 65535)
    35fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3600:	7c a1       	ldd	r23, Y+36	; 0x24
    3602:	8d a1       	ldd	r24, Y+37	; 0x25
    3604:	9e a1       	ldd	r25, Y+38	; 0x26
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	3f ef       	ldi	r19, 0xFF	; 255
    360a:	4f e7       	ldi	r20, 0x7F	; 127
    360c:	57 e4       	ldi	r21, 0x47	; 71
    360e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3612:	18 16       	cp	r1, r24
    3614:	4c f5       	brge	.+82     	; 0x3668 <main+0xad0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3616:	6f a1       	ldd	r22, Y+39	; 0x27
    3618:	78 a5       	ldd	r23, Y+40	; 0x28
    361a:	89 a5       	ldd	r24, Y+41	; 0x29
    361c:	9a a5       	ldd	r25, Y+42	; 0x2a
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	40 e2       	ldi	r20, 0x20	; 32
    3624:	51 e4       	ldi	r21, 0x41	; 65
    3626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	bc 01       	movw	r22, r24
    3630:	cd 01       	movw	r24, r26
    3632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	9a a3       	std	Y+34, r25	; 0x22
    363c:	89 a3       	std	Y+33, r24	; 0x21
    363e:	0f c0       	rjmp	.+30     	; 0x365e <main+0xac6>
    3640:	88 ec       	ldi	r24, 0xC8	; 200
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	98 a3       	std	Y+32, r25	; 0x20
    3646:	8f 8f       	std	Y+31, r24	; 0x1f
    3648:	8f 8d       	ldd	r24, Y+31	; 0x1f
    364a:	98 a1       	ldd	r25, Y+32	; 0x20
    364c:	01 97       	sbiw	r24, 0x01	; 1
    364e:	f1 f7       	brne	.-4      	; 0x364c <main+0xab4>
    3650:	98 a3       	std	Y+32, r25	; 0x20
    3652:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3654:	89 a1       	ldd	r24, Y+33	; 0x21
    3656:	9a a1       	ldd	r25, Y+34	; 0x22
    3658:	01 97       	sbiw	r24, 0x01	; 1
    365a:	9a a3       	std	Y+34, r25	; 0x22
    365c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    365e:	89 a1       	ldd	r24, Y+33	; 0x21
    3660:	9a a1       	ldd	r25, Y+34	; 0x22
    3662:	00 97       	sbiw	r24, 0x00	; 0
    3664:	69 f7       	brne	.-38     	; 0x3640 <main+0xaa8>
    3666:	c1 c0       	rjmp	.+386    	; 0x37ea <main+0xc52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3668:	6b a1       	ldd	r22, Y+35	; 0x23
    366a:	7c a1       	ldd	r23, Y+36	; 0x24
    366c:	8d a1       	ldd	r24, Y+37	; 0x25
    366e:	9e a1       	ldd	r25, Y+38	; 0x26
    3670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	9a a3       	std	Y+34, r25	; 0x22
    367a:	89 a3       	std	Y+33, r24	; 0x21
    367c:	89 a1       	ldd	r24, Y+33	; 0x21
    367e:	9a a1       	ldd	r25, Y+34	; 0x22
    3680:	9e 8f       	std	Y+30, r25	; 0x1e
    3682:	8d 8f       	std	Y+29, r24	; 0x1d
    3684:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3686:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3688:	01 97       	sbiw	r24, 0x01	; 1
    368a:	f1 f7       	brne	.-4      	; 0x3688 <main+0xaf0>
    368c:	9e 8f       	std	Y+30, r25	; 0x1e
    368e:	8d 8f       	std	Y+29, r24	; 0x1d
    3690:	ac c0       	rjmp	.+344    	; 0x37ea <main+0xc52>
			_delay_ms(40);
			break;
		}
	}
	LCD_voidSetCursorToX_y(i,m);
    3692:	fe 01       	movw	r30, r28
    3694:	ee 58       	subi	r30, 0x8E	; 142
    3696:	ff 4f       	sbci	r31, 0xFF	; 255
    3698:	de 01       	movw	r26, r28
    369a:	af 58       	subi	r26, 0x8F	; 143
    369c:	bf 4f       	sbci	r27, 0xFF	; 255
    369e:	80 81       	ld	r24, Z
    36a0:	6c 91       	ld	r22, X
    36a2:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
	LCD_voidWriteChar(1);
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
    36ac:	80 e0       	ldi	r24, 0x00	; 0
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	a6 e1       	ldi	r26, 0x16	; 22
    36b2:	b3 e4       	ldi	r27, 0x43	; 67
    36b4:	89 8f       	std	Y+25, r24	; 0x19
    36b6:	9a 8f       	std	Y+26, r25	; 0x1a
    36b8:	ab 8f       	std	Y+27, r26	; 0x1b
    36ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36bc:	69 8d       	ldd	r22, Y+25	; 0x19
    36be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	4a ef       	ldi	r20, 0xFA	; 250
    36ca:	54 e4       	ldi	r21, 0x44	; 68
    36cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	8d 8b       	std	Y+21, r24	; 0x15
    36d6:	9e 8b       	std	Y+22, r25	; 0x16
    36d8:	af 8b       	std	Y+23, r26	; 0x17
    36da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36dc:	6d 89       	ldd	r22, Y+21	; 0x15
    36de:	7e 89       	ldd	r23, Y+22	; 0x16
    36e0:	8f 89       	ldd	r24, Y+23	; 0x17
    36e2:	98 8d       	ldd	r25, Y+24	; 0x18
    36e4:	20 e0       	ldi	r18, 0x00	; 0
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	40 e8       	ldi	r20, 0x80	; 128
    36ea:	5f e3       	ldi	r21, 0x3F	; 63
    36ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36f0:	88 23       	and	r24, r24
    36f2:	2c f4       	brge	.+10     	; 0x36fe <main+0xb66>
		__ticks = 1;
    36f4:	81 e0       	ldi	r24, 0x01	; 1
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	9c 8b       	std	Y+20, r25	; 0x14
    36fa:	8b 8b       	std	Y+19, r24	; 0x13
    36fc:	3f c0       	rjmp	.+126    	; 0x377c <main+0xbe4>
	else if (__tmp > 65535)
    36fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3700:	7e 89       	ldd	r23, Y+22	; 0x16
    3702:	8f 89       	ldd	r24, Y+23	; 0x17
    3704:	98 8d       	ldd	r25, Y+24	; 0x18
    3706:	20 e0       	ldi	r18, 0x00	; 0
    3708:	3f ef       	ldi	r19, 0xFF	; 255
    370a:	4f e7       	ldi	r20, 0x7F	; 127
    370c:	57 e4       	ldi	r21, 0x47	; 71
    370e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3712:	18 16       	cp	r1, r24
    3714:	4c f5       	brge	.+82     	; 0x3768 <main+0xbd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3716:	69 8d       	ldd	r22, Y+25	; 0x19
    3718:	7a 8d       	ldd	r23, Y+26	; 0x1a
    371a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    371c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	40 e2       	ldi	r20, 0x20	; 32
    3724:	51 e4       	ldi	r21, 0x41	; 65
    3726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    372a:	dc 01       	movw	r26, r24
    372c:	cb 01       	movw	r24, r22
    372e:	bc 01       	movw	r22, r24
    3730:	cd 01       	movw	r24, r26
    3732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3736:	dc 01       	movw	r26, r24
    3738:	cb 01       	movw	r24, r22
    373a:	9c 8b       	std	Y+20, r25	; 0x14
    373c:	8b 8b       	std	Y+19, r24	; 0x13
    373e:	0f c0       	rjmp	.+30     	; 0x375e <main+0xbc6>
    3740:	88 ec       	ldi	r24, 0xC8	; 200
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	9a 8b       	std	Y+18, r25	; 0x12
    3746:	89 8b       	std	Y+17, r24	; 0x11
    3748:	89 89       	ldd	r24, Y+17	; 0x11
    374a:	9a 89       	ldd	r25, Y+18	; 0x12
    374c:	01 97       	sbiw	r24, 0x01	; 1
    374e:	f1 f7       	brne	.-4      	; 0x374c <main+0xbb4>
    3750:	9a 8b       	std	Y+18, r25	; 0x12
    3752:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3754:	8b 89       	ldd	r24, Y+19	; 0x13
    3756:	9c 89       	ldd	r25, Y+20	; 0x14
    3758:	01 97       	sbiw	r24, 0x01	; 1
    375a:	9c 8b       	std	Y+20, r25	; 0x14
    375c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    375e:	8b 89       	ldd	r24, Y+19	; 0x13
    3760:	9c 89       	ldd	r25, Y+20	; 0x14
    3762:	00 97       	sbiw	r24, 0x00	; 0
    3764:	69 f7       	brne	.-38     	; 0x3740 <main+0xba8>
    3766:	14 c0       	rjmp	.+40     	; 0x3790 <main+0xbf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3768:	6d 89       	ldd	r22, Y+21	; 0x15
    376a:	7e 89       	ldd	r23, Y+22	; 0x16
    376c:	8f 89       	ldd	r24, Y+23	; 0x17
    376e:	98 8d       	ldd	r25, Y+24	; 0x18
    3770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3774:	dc 01       	movw	r26, r24
    3776:	cb 01       	movw	r24, r22
    3778:	9c 8b       	std	Y+20, r25	; 0x14
    377a:	8b 8b       	std	Y+19, r24	; 0x13
    377c:	8b 89       	ldd	r24, Y+19	; 0x13
    377e:	9c 89       	ldd	r25, Y+20	; 0x14
    3780:	98 8b       	std	Y+16, r25	; 0x10
    3782:	8f 87       	std	Y+15, r24	; 0x0f
    3784:	8f 85       	ldd	r24, Y+15	; 0x0f
    3786:	98 89       	ldd	r25, Y+16	; 0x10
    3788:	01 97       	sbiw	r24, 0x01	; 1
    378a:	f1 f7       	brne	.-4      	; 0x3788 <main+0xbf0>
    378c:	98 8b       	std	Y+16, r25	; 0x10
    378e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(150);
	x=i,y=m;
    3790:	de 01       	movw	r26, r28
    3792:	a7 58       	subi	r26, 0x87	; 135
    3794:	bf 4f       	sbci	r27, 0xFF	; 255
    3796:	fe 01       	movw	r30, r28
    3798:	ee 58       	subi	r30, 0x8E	; 142
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	80 81       	ld	r24, Z
    379e:	8c 93       	st	X, r24
    37a0:	de 01       	movw	r26, r28
    37a2:	a8 58       	subi	r26, 0x88	; 136
    37a4:	bf 4f       	sbci	r27, 0xFF	; 255
    37a6:	fe 01       	movw	r30, r28
    37a8:	ef 58       	subi	r30, 0x8F	; 143
    37aa:	ff 4f       	sbci	r31, 0xFF	; 255
    37ac:	80 81       	ld	r24, Z
    37ae:	8c 93       	st	X, r24
	LCD_voidSetCursorToX_y(x,y);
    37b0:	fe 01       	movw	r30, r28
    37b2:	e7 58       	subi	r30, 0x87	; 135
    37b4:	ff 4f       	sbci	r31, 0xFF	; 255
    37b6:	de 01       	movw	r26, r28
    37b8:	a8 58       	subi	r26, 0x88	; 136
    37ba:	bf 4f       	sbci	r27, 0xFF	; 255
    37bc:	80 81       	ld	r24, Z
    37be:	6c 91       	ld	r22, X
    37c0:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
	LCD_voidWriteChar(0);
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	0e 94 cf 10 	call	0x219e	; 0x219e <LCD_voidWriteChar>
}
LCD_voidSetCursorToX_y(0,12);
LCD_voidWriteChar(' ');
for(u8 i=0;i<4;i++)
{
for(u8 m=0;m<20;m++)
    37ca:	de 01       	movw	r26, r28
    37cc:	af 58       	subi	r26, 0x8F	; 143
    37ce:	bf 4f       	sbci	r27, 0xFF	; 255
    37d0:	fe 01       	movw	r30, r28
    37d2:	ef 58       	subi	r30, 0x8F	; 143
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	80 81       	ld	r24, Z
    37d8:	8f 5f       	subi	r24, 0xFF	; 255
    37da:	8c 93       	st	X, r24
    37dc:	fe 01       	movw	r30, r28
    37de:	ef 58       	subi	r30, 0x8F	; 143
    37e0:	ff 4f       	sbci	r31, 0xFF	; 255
    37e2:	80 81       	ld	r24, Z
    37e4:	84 31       	cpi	r24, 0x14	; 20
    37e6:	08 f4       	brcc	.+2      	; 0x37ea <main+0xc52>
    37e8:	53 cb       	rjmp	.-2394   	; 0x2e90 <main+0x2f8>
	_delay_ms(150);
	x=i,y=m;
	LCD_voidSetCursorToX_y(x,y);
	LCD_voidWriteChar(0);
}
if(i == 0 && m==20)
    37ea:	fe 01       	movw	r30, r28
    37ec:	ee 58       	subi	r30, 0x8E	; 142
    37ee:	ff 4f       	sbci	r31, 0xFF	; 255
    37f0:	80 81       	ld	r24, Z
    37f2:	88 23       	and	r24, r24
    37f4:	31 f4       	brne	.+12     	; 0x3802 <main+0xc6a>
    37f6:	fe 01       	movw	r30, r28
    37f8:	eb 58       	subi	r30, 0x8B	; 139
    37fa:	ff 4f       	sbci	r31, 0xFF	; 255
    37fc:	80 81       	ld	r24, Z
    37fe:	84 31       	cpi	r24, 0x14	; 20
    3800:	81 f0       	breq	.+32     	; 0x3822 <main+0xc8a>
	LCD_voidWriteChar(0);
}
}
LCD_voidSetCursorToX_y(0,12);
LCD_voidWriteChar(' ');
for(u8 i=0;i<4;i++)
    3802:	de 01       	movw	r26, r28
    3804:	ae 58       	subi	r26, 0x8E	; 142
    3806:	bf 4f       	sbci	r27, 0xFF	; 255
    3808:	fe 01       	movw	r30, r28
    380a:	ee 58       	subi	r30, 0x8E	; 142
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	80 81       	ld	r24, Z
    3810:	8f 5f       	subi	r24, 0xFF	; 255
    3812:	8c 93       	st	X, r24
    3814:	fe 01       	movw	r30, r28
    3816:	ee 58       	subi	r30, 0x8E	; 142
    3818:	ff 4f       	sbci	r31, 0xFF	; 255
    381a:	80 81       	ld	r24, Z
    381c:	84 30       	cpi	r24, 0x04	; 4
    381e:	08 f4       	brcc	.+2      	; 0x3822 <main+0xc8a>
    3820:	32 cb       	rjmp	.-2460   	; 0x2e86 <main+0x2ee>
if(i == 0 && m==20)
{
	break;
}
}
LCD_voidSetCursorToX_y(2,8);
    3822:	82 e0       	ldi	r24, 0x02	; 2
    3824:	68 e0       	ldi	r22, 0x08	; 8
    3826:	0e 94 13 13 	call	0x2626	; 0x2626 <LCD_voidSetCursorToX_y>
LCD_voidWriteString("Game Over");
    382a:	80 e6       	ldi	r24, 0x60	; 96
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_voidWriteString>
    3832:	80 e0       	ldi	r24, 0x00	; 0
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	aa ef       	ldi	r26, 0xFA	; 250
    3838:	b4 e4       	ldi	r27, 0x44	; 68
    383a:	8b 87       	std	Y+11, r24	; 0x0b
    383c:	9c 87       	std	Y+12, r25	; 0x0c
    383e:	ad 87       	std	Y+13, r26	; 0x0d
    3840:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3842:	6b 85       	ldd	r22, Y+11	; 0x0b
    3844:	7c 85       	ldd	r23, Y+12	; 0x0c
    3846:	8d 85       	ldd	r24, Y+13	; 0x0d
    3848:	9e 85       	ldd	r25, Y+14	; 0x0e
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	4a ef       	ldi	r20, 0xFA	; 250
    3850:	54 e4       	ldi	r21, 0x44	; 68
    3852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	8f 83       	std	Y+7, r24	; 0x07
    385c:	98 87       	std	Y+8, r25	; 0x08
    385e:	a9 87       	std	Y+9, r26	; 0x09
    3860:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3862:	6f 81       	ldd	r22, Y+7	; 0x07
    3864:	78 85       	ldd	r23, Y+8	; 0x08
    3866:	89 85       	ldd	r24, Y+9	; 0x09
    3868:	9a 85       	ldd	r25, Y+10	; 0x0a
    386a:	20 e0       	ldi	r18, 0x00	; 0
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	40 e8       	ldi	r20, 0x80	; 128
    3870:	5f e3       	ldi	r21, 0x3F	; 63
    3872:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3876:	88 23       	and	r24, r24
    3878:	2c f4       	brge	.+10     	; 0x3884 <main+0xcec>
		__ticks = 1;
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	9e 83       	std	Y+6, r25	; 0x06
    3880:	8d 83       	std	Y+5, r24	; 0x05
    3882:	3f c0       	rjmp	.+126    	; 0x3902 <main+0xd6a>
	else if (__tmp > 65535)
    3884:	6f 81       	ldd	r22, Y+7	; 0x07
    3886:	78 85       	ldd	r23, Y+8	; 0x08
    3888:	89 85       	ldd	r24, Y+9	; 0x09
    388a:	9a 85       	ldd	r25, Y+10	; 0x0a
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	3f ef       	ldi	r19, 0xFF	; 255
    3890:	4f e7       	ldi	r20, 0x7F	; 127
    3892:	57 e4       	ldi	r21, 0x47	; 71
    3894:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3898:	18 16       	cp	r1, r24
    389a:	4c f5       	brge	.+82     	; 0x38ee <main+0xd56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    389c:	6b 85       	ldd	r22, Y+11	; 0x0b
    389e:	7c 85       	ldd	r23, Y+12	; 0x0c
    38a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    38a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    38a4:	20 e0       	ldi	r18, 0x00	; 0
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	40 e2       	ldi	r20, 0x20	; 32
    38aa:	51 e4       	ldi	r21, 0x41	; 65
    38ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	bc 01       	movw	r22, r24
    38b6:	cd 01       	movw	r24, r26
    38b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38bc:	dc 01       	movw	r26, r24
    38be:	cb 01       	movw	r24, r22
    38c0:	9e 83       	std	Y+6, r25	; 0x06
    38c2:	8d 83       	std	Y+5, r24	; 0x05
    38c4:	0f c0       	rjmp	.+30     	; 0x38e4 <main+0xd4c>
    38c6:	88 ec       	ldi	r24, 0xC8	; 200
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	9c 83       	std	Y+4, r25	; 0x04
    38cc:	8b 83       	std	Y+3, r24	; 0x03
    38ce:	8b 81       	ldd	r24, Y+3	; 0x03
    38d0:	9c 81       	ldd	r25, Y+4	; 0x04
    38d2:	01 97       	sbiw	r24, 0x01	; 1
    38d4:	f1 f7       	brne	.-4      	; 0x38d2 <main+0xd3a>
    38d6:	9c 83       	std	Y+4, r25	; 0x04
    38d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38da:	8d 81       	ldd	r24, Y+5	; 0x05
    38dc:	9e 81       	ldd	r25, Y+6	; 0x06
    38de:	01 97       	sbiw	r24, 0x01	; 1
    38e0:	9e 83       	std	Y+6, r25	; 0x06
    38e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38e4:	8d 81       	ldd	r24, Y+5	; 0x05
    38e6:	9e 81       	ldd	r25, Y+6	; 0x06
    38e8:	00 97       	sbiw	r24, 0x00	; 0
    38ea:	69 f7       	brne	.-38     	; 0x38c6 <main+0xd2e>
    38ec:	a2 cf       	rjmp	.-188    	; 0x3832 <main+0xc9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ee:	6f 81       	ldd	r22, Y+7	; 0x07
    38f0:	78 85       	ldd	r23, Y+8	; 0x08
    38f2:	89 85       	ldd	r24, Y+9	; 0x09
    38f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    38f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38fa:	dc 01       	movw	r26, r24
    38fc:	cb 01       	movw	r24, r22
    38fe:	9e 83       	std	Y+6, r25	; 0x06
    3900:	8d 83       	std	Y+5, r24	; 0x05
    3902:	8d 81       	ldd	r24, Y+5	; 0x05
    3904:	9e 81       	ldd	r25, Y+6	; 0x06
    3906:	9a 83       	std	Y+2, r25	; 0x02
    3908:	89 83       	std	Y+1, r24	; 0x01
    390a:	89 81       	ldd	r24, Y+1	; 0x01
    390c:	9a 81       	ldd	r25, Y+2	; 0x02
    390e:	01 97       	sbiw	r24, 0x01	; 1
    3910:	f1 f7       	brne	.-4      	; 0x390e <main+0xd76>
    3912:	9a 83       	std	Y+2, r25	; 0x02
    3914:	89 83       	std	Y+1, r24	; 0x01
    3916:	8d cf       	rjmp	.-230    	; 0x3832 <main+0xc9a>

00003918 <func>:
	}
	return 0;
}

void func(u16 Ptr_pu16CopyData)
{
    3918:	df 93       	push	r29
    391a:	cf 93       	push	r28
    391c:	00 d0       	rcall	.+0      	; 0x391e <func+0x6>
    391e:	cd b7       	in	r28, 0x3d	; 61
    3920:	de b7       	in	r29, 0x3e	; 62
    3922:	9a 83       	std	Y+2, r25	; 0x02
    3924:	89 83       	std	Y+1, r24	; 0x01
	POINTERR = Ptr_pu16CopyData ;
    3926:	89 81       	ldd	r24, Y+1	; 0x01
    3928:	9a 81       	ldd	r25, Y+2	; 0x02
    392a:	90 93 9f 00 	sts	0x009F, r25
    392e:	80 93 9e 00 	sts	0x009E, r24
}
    3932:	0f 90       	pop	r0
    3934:	0f 90       	pop	r0
    3936:	cf 91       	pop	r28
    3938:	df 91       	pop	r29
    393a:	08 95       	ret

0000393c <func2>:
void func2(void)
{
    393c:	df 93       	push	r29
    393e:	cf 93       	push	r28
    3940:	cd b7       	in	r28, 0x3d	; 61
    3942:	de b7       	in	r29, 0x3e	; 62
	if(FLAG == 1)
    3944:	80 91 72 00 	lds	r24, 0x0072
    3948:	90 91 73 00 	lds	r25, 0x0073
    394c:	81 30       	cpi	r24, 0x01	; 1
    394e:	91 05       	cpc	r25, r1
    3950:	39 f4       	brne	.+14     	; 0x3960 <func2+0x24>
	{
		FLAG=2;
    3952:	82 e0       	ldi	r24, 0x02	; 2
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	90 93 73 00 	sts	0x0073, r25
    395a:	80 93 72 00 	sts	0x0072, r24
    395e:	0d c0       	rjmp	.+26     	; 0x397a <func2+0x3e>
	}
	else if(FLAG == 2)
    3960:	80 91 72 00 	lds	r24, 0x0072
    3964:	90 91 73 00 	lds	r25, 0x0073
    3968:	82 30       	cpi	r24, 0x02	; 2
    396a:	91 05       	cpc	r25, r1
    396c:	31 f4       	brne	.+12     	; 0x397a <func2+0x3e>
	{
		FLAG=1;
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	90 93 73 00 	sts	0x0073, r25
    3976:	80 93 72 00 	sts	0x0072, r24
	}
}
    397a:	cf 91       	pop	r28
    397c:	df 91       	pop	r29
    397e:	08 95       	ret

00003980 <__udivmodsi4>:
    3980:	a1 e2       	ldi	r26, 0x21	; 33
    3982:	1a 2e       	mov	r1, r26
    3984:	aa 1b       	sub	r26, r26
    3986:	bb 1b       	sub	r27, r27
    3988:	fd 01       	movw	r30, r26
    398a:	0d c0       	rjmp	.+26     	; 0x39a6 <__udivmodsi4_ep>

0000398c <__udivmodsi4_loop>:
    398c:	aa 1f       	adc	r26, r26
    398e:	bb 1f       	adc	r27, r27
    3990:	ee 1f       	adc	r30, r30
    3992:	ff 1f       	adc	r31, r31
    3994:	a2 17       	cp	r26, r18
    3996:	b3 07       	cpc	r27, r19
    3998:	e4 07       	cpc	r30, r20
    399a:	f5 07       	cpc	r31, r21
    399c:	20 f0       	brcs	.+8      	; 0x39a6 <__udivmodsi4_ep>
    399e:	a2 1b       	sub	r26, r18
    39a0:	b3 0b       	sbc	r27, r19
    39a2:	e4 0b       	sbc	r30, r20
    39a4:	f5 0b       	sbc	r31, r21

000039a6 <__udivmodsi4_ep>:
    39a6:	66 1f       	adc	r22, r22
    39a8:	77 1f       	adc	r23, r23
    39aa:	88 1f       	adc	r24, r24
    39ac:	99 1f       	adc	r25, r25
    39ae:	1a 94       	dec	r1
    39b0:	69 f7       	brne	.-38     	; 0x398c <__udivmodsi4_loop>
    39b2:	60 95       	com	r22
    39b4:	70 95       	com	r23
    39b6:	80 95       	com	r24
    39b8:	90 95       	com	r25
    39ba:	9b 01       	movw	r18, r22
    39bc:	ac 01       	movw	r20, r24
    39be:	bd 01       	movw	r22, r26
    39c0:	cf 01       	movw	r24, r30
    39c2:	08 95       	ret

000039c4 <__prologue_saves__>:
    39c4:	2f 92       	push	r2
    39c6:	3f 92       	push	r3
    39c8:	4f 92       	push	r4
    39ca:	5f 92       	push	r5
    39cc:	6f 92       	push	r6
    39ce:	7f 92       	push	r7
    39d0:	8f 92       	push	r8
    39d2:	9f 92       	push	r9
    39d4:	af 92       	push	r10
    39d6:	bf 92       	push	r11
    39d8:	cf 92       	push	r12
    39da:	df 92       	push	r13
    39dc:	ef 92       	push	r14
    39de:	ff 92       	push	r15
    39e0:	0f 93       	push	r16
    39e2:	1f 93       	push	r17
    39e4:	cf 93       	push	r28
    39e6:	df 93       	push	r29
    39e8:	cd b7       	in	r28, 0x3d	; 61
    39ea:	de b7       	in	r29, 0x3e	; 62
    39ec:	ca 1b       	sub	r28, r26
    39ee:	db 0b       	sbc	r29, r27
    39f0:	0f b6       	in	r0, 0x3f	; 63
    39f2:	f8 94       	cli
    39f4:	de bf       	out	0x3e, r29	; 62
    39f6:	0f be       	out	0x3f, r0	; 63
    39f8:	cd bf       	out	0x3d, r28	; 61
    39fa:	09 94       	ijmp

000039fc <__epilogue_restores__>:
    39fc:	2a 88       	ldd	r2, Y+18	; 0x12
    39fe:	39 88       	ldd	r3, Y+17	; 0x11
    3a00:	48 88       	ldd	r4, Y+16	; 0x10
    3a02:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a04:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a06:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a08:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a0a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a0c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a0e:	b9 84       	ldd	r11, Y+9	; 0x09
    3a10:	c8 84       	ldd	r12, Y+8	; 0x08
    3a12:	df 80       	ldd	r13, Y+7	; 0x07
    3a14:	ee 80       	ldd	r14, Y+6	; 0x06
    3a16:	fd 80       	ldd	r15, Y+5	; 0x05
    3a18:	0c 81       	ldd	r16, Y+4	; 0x04
    3a1a:	1b 81       	ldd	r17, Y+3	; 0x03
    3a1c:	aa 81       	ldd	r26, Y+2	; 0x02
    3a1e:	b9 81       	ldd	r27, Y+1	; 0x01
    3a20:	ce 0f       	add	r28, r30
    3a22:	d1 1d       	adc	r29, r1
    3a24:	0f b6       	in	r0, 0x3f	; 63
    3a26:	f8 94       	cli
    3a28:	de bf       	out	0x3e, r29	; 62
    3a2a:	0f be       	out	0x3f, r0	; 63
    3a2c:	cd bf       	out	0x3d, r28	; 61
    3a2e:	ed 01       	movw	r28, r26
    3a30:	08 95       	ret

00003a32 <_exit>:
    3a32:	f8 94       	cli

00003a34 <__stop_program>:
    3a34:	ff cf       	rjmp	.-2      	; 0x3a34 <__stop_program>
