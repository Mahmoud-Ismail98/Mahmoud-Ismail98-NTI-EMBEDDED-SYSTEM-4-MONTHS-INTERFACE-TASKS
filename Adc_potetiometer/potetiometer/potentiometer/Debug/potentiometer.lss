
potentiometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002afe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002afe  00002b92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800074  00800074  00002ba6  2**0
                  ALLOC
  3 .stab         000023f4  00000000  00000000  00002ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013bc  00000000  00000000  00004f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006608  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008251  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000913c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009eec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a04c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a2d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aaa7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b2 05 	call	0xb64	; 0xb64 <main>
      8a:	0c 94 7d 15 	jmp	0x2afa	; 0x2afa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <get_adcread>:

u16 ADCread_var;
float ADCread_varHold;

void get_adcread(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	ADCread_var = ADC;
     b4e:	e4 e2       	ldi	r30, 0x24	; 36
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	91 81       	ldd	r25, Z+1	; 0x01
     b56:	90 93 7b 00 	sts	0x007B, r25
     b5a:	80 93 7a 00 	sts	0x007A, r24
//	ADCread_varHold = ADCread_var / 1000;
}
     b5e:	cf 91       	pop	r28
     b60:	df 91       	pop	r29
     b62:	08 95       	ret

00000b64 <main>:

int main(void)
{
     b64:	df 93       	push	r29
     b66:	cf 93       	push	r28
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
	port_init();
     b6c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <port_init>
	LCD_init();
     b70:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <LCD_init>
	ADC_init();
     b74:	0e 94 25 06 	call	0xc4a	; 0xc4a <ADC_init>

	SREG = (1<<7);
     b78:	ef e5       	ldi	r30, 0x5F	; 95
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 e8       	ldi	r24, 0x80	; 128
     b7e:	80 83       	st	Z, r24
	LCD_displayString("voltage = ");
     b80:	80 e6       	ldi	r24, 0x60	; 96
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 94 13 	call	0x2728	; 0x2728 <LCD_displayString>

    while(1)
    {

       	ADC_readChannel(ADC_PIN2);
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_readChannel>
       	ADC_setCallBack(get_adcread);
     b8e:	83 ea       	ldi	r24, 0xA3	; 163
     b90:	95 e0       	ldi	r25, 0x05	; 5
     b92:	0e 94 75 06 	call	0xcea	; 0xcea <ADC_setCallBack>

    	LCD_moveCurser(0,9);
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	69 e0       	ldi	r22, 0x09	; 9
     b9a:	0e 94 bd 13 	call	0x277a	; 0x277a <LCD_moveCurser>


		if(ADCread_var >= 1000)
     b9e:	80 91 7a 00 	lds	r24, 0x007A
     ba2:	90 91 7b 00 	lds	r25, 0x007B
     ba6:	23 e0       	ldi	r18, 0x03	; 3
     ba8:	88 3e       	cpi	r24, 0xE8	; 232
     baa:	92 07       	cpc	r25, r18
     bac:	60 f0       	brcs	.+24     	; 0xbc6 <main+0x62>
//			{
//				LCD_intgerToString(ADCread_varHold);
//			}
//			else
//			{
				LCD_intgerToString(ADCread_var);
     bae:	80 91 7a 00 	lds	r24, 0x007A
     bb2:	90 91 7b 00 	lds	r25, 0x007B
     bb6:	cc 01       	movw	r24, r24
     bb8:	a0 e0       	ldi	r26, 0x00	; 0
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	bc 01       	movw	r22, r24
     bbe:	cd 01       	movw	r24, r26
     bc0:	0e 94 18 14 	call	0x2830	; 0x2830 <LCD_intgerToString>
     bc4:	e1 cf       	rjmp	.-62     	; 0xb88 <main+0x24>
////				LCD_intgerToString(ADCread_varHold);
//				LCD_displayCharacter(' ');
//			}
//			else
//			{
				LCD_intgerToString(ADCread_var);
     bc6:	80 91 7a 00 	lds	r24, 0x007A
     bca:	90 91 7b 00 	lds	r25, 0x007B
     bce:	cc 01       	movw	r24, r24
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	bc 01       	movw	r22, r24
     bd6:	cd 01       	movw	r24, r26
     bd8:	0e 94 18 14 	call	0x2830	; 0x2830 <LCD_intgerToString>
				LCD_displayCharacter(' ');
     bdc:	80 e2       	ldi	r24, 0x20	; 32
     bde:	0e 94 a8 11 	call	0x2350	; 0x2350 <LCD_displayCharacter>
     be2:	d2 cf       	rjmp	.-92     	; 0xb88 <main+0x24>

00000be4 <__vector_16>:
#include"ADC.h"
#include"avr/interrupt.h"
void(*ADCClbk_ptr)(void) = NULL;

ISR(ADC_vect)
{
     be4:	1f 92       	push	r1
     be6:	0f 92       	push	r0
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	0f 92       	push	r0
     bec:	11 24       	eor	r1, r1
     bee:	2f 93       	push	r18
     bf0:	3f 93       	push	r19
     bf2:	4f 93       	push	r20
     bf4:	5f 93       	push	r21
     bf6:	6f 93       	push	r22
     bf8:	7f 93       	push	r23
     bfa:	8f 93       	push	r24
     bfc:	9f 93       	push	r25
     bfe:	af 93       	push	r26
     c00:	bf 93       	push	r27
     c02:	ef 93       	push	r30
     c04:	ff 93       	push	r31
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
	if(ADCClbk_ptr != NULL)
     c0e:	80 91 74 00 	lds	r24, 0x0074
     c12:	90 91 75 00 	lds	r25, 0x0075
     c16:	00 97       	sbiw	r24, 0x00	; 0
     c18:	29 f0       	breq	.+10     	; 0xc24 <__vector_16+0x40>
	{
		ADCClbk_ptr();
     c1a:	e0 91 74 00 	lds	r30, 0x0074
     c1e:	f0 91 75 00 	lds	r31, 0x0075
     c22:	09 95       	icall
	}
}
     c24:	cf 91       	pop	r28
     c26:	df 91       	pop	r29
     c28:	ff 91       	pop	r31
     c2a:	ef 91       	pop	r30
     c2c:	bf 91       	pop	r27
     c2e:	af 91       	pop	r26
     c30:	9f 91       	pop	r25
     c32:	8f 91       	pop	r24
     c34:	7f 91       	pop	r23
     c36:	6f 91       	pop	r22
     c38:	5f 91       	pop	r21
     c3a:	4f 91       	pop	r20
     c3c:	3f 91       	pop	r19
     c3e:	2f 91       	pop	r18
     c40:	0f 90       	pop	r0
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	0f 90       	pop	r0
     c46:	1f 90       	pop	r1
     c48:	18 95       	reti

00000c4a <ADC_init>:


void ADC_init(void)
{
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
	ASSIGN_REG(ADMUX,0X00);
     c52:	e7 e2       	ldi	r30, 0x27	; 39
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	10 82       	st	Z, r1
	ASSIGN_REG(ADCSRA,0X00);
     c58:	e6 e2       	ldi	r30, 0x26	; 38
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	10 82       	st	Z, r1

	ASSIGN_FOURTH_TWO_BITS(ADMUX,ADC_REF_VOLT_VALUE);
     c5e:	a7 e2       	ldi	r26, 0x27	; 39
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e7 e2       	ldi	r30, 0x27	; 39
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	8f 73       	andi	r24, 0x3F	; 63
     c6a:	80 64       	ori	r24, 0x40	; 64
     c6c:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADEN);
     c6e:	a6 e2       	ldi	r26, 0x26	; 38
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e6 e2       	ldi	r30, 0x26	; 38
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	80 68       	ori	r24, 0x80	; 128
     c7a:	8c 93       	st	X, r24

	ASSIGN_FIRST_TWO_BITS(ADCSRA,ADC_SELECT_PRESCALER);
     c7c:	a6 e2       	ldi	r26, 0x26	; 38
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e6 e2       	ldi	r30, 0x26	; 38
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	83 60       	ori	r24, 0x03	; 3
     c88:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADIE);
     c8a:	a6 e2       	ldi	r26, 0x26	; 38
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e6 e2       	ldi	r30, 0x26	; 38
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	88 60       	ori	r24, 0x08	; 8
     c96:	8c 93       	st	X, r24
}
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <ADC_readChannel>:

ADC_errorStatus ADC_readChannel(u8 channel_id)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <ADC_readChannel+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	8a 83       	std	Y+2, r24	; 0x02
	ADC_errorStatus return_errorStatus = ADC_OK;
     caa:	19 82       	std	Y+1, r1	; 0x01
		return_errorStatus = pin_error;
	}

	else
	{
		channel_id &= 0x07;
     cac:	8a 81       	ldd	r24, Y+2	; 0x02
     cae:	87 70       	andi	r24, 0x07	; 7
     cb0:	8a 83       	std	Y+2, r24	; 0x02
		ADMUX &= 0xE0;
     cb2:	a7 e2       	ldi	r26, 0x27	; 39
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e7 e2       	ldi	r30, 0x27	; 39
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	80 7e       	andi	r24, 0xE0	; 224
     cbe:	8c 93       	st	X, r24
		ADMUX = ADMUX | channel_id;
     cc0:	a7 e2       	ldi	r26, 0x27	; 39
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e7 e2       	ldi	r30, 0x27	; 39
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	90 81       	ld	r25, Z
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	89 2b       	or	r24, r25
     cce:	8c 93       	st	X, r24

		SET_BIT	(ADCSRA,ADSC);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	80 64       	ori	r24, 0x40	; 64
     cdc:	8c 93       	st	X, r24
	}
	return return_errorStatus;
     cde:	89 81       	ldd	r24, Y+1	; 0x01
}
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <ADC_setCallBack>:
void ADC_setCallBack(void(*loc_ADCClbk_ptr)(void))
{
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <ADC_setCallBack+0x6>
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	9a 83       	std	Y+2, r25	; 0x02
     cf6:	89 83       	std	Y+1, r24	; 0x01
	ADCClbk_ptr = loc_ADCClbk_ptr;
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	9a 81       	ldd	r25, Y+2	; 0x02
     cfc:	90 93 75 00 	sts	0x0075, r25
     d00:	80 93 74 00 	sts	0x0074, r24
}
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <ADC_disable>:

void ADC_disable(void)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
	ASSIGN_REG(ADMUX,0X00);
     d16:	e7 e2       	ldi	r30, 0x27	; 39
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	10 82       	st	Z, r1
	ASSIGN_REG(ADCSRA,0X00);
     d1c:	e6 e2       	ldi	r30, 0x26	; 38
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	10 82       	st	Z, r1
}
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	08 95       	ret

00000d28 <dio_writePin>:
 *      Author: Ahmed Dwidar
 */
#include"dio.h"

DIO_errorStatus dio_writePin(u8 pin_id, u8 value)
{
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	2f 97       	sbiw	r28, 0x0f	; 15
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
     d3c:	8c 83       	std	Y+4, r24	; 0x04
     d3e:	6d 83       	std	Y+5, r22	; 0x05
	DIO_errorStatus return_errorStatus = Dio_Ok;
     d40:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_port;

	u8 loc_pin;

	if(pin_id > NUM_OF_PINS)
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	80 32       	cpi	r24, 0x20	; 32
     d46:	18 f0       	brcs	.+6      	; 0xd4e <dio_writePin+0x26>
	{
		return_errorStatus = Dio_pinError;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	8b 83       	std	Y+3, r24	; 0x03
     d4c:	0e c1       	rjmp	.+540    	; 0xf6a <dio_writePin+0x242>
	}
	else if(value > NUM_OF_LEVELS)
     d4e:	8d 81       	ldd	r24, Y+5	; 0x05
     d50:	82 30       	cpi	r24, 0x02	; 2
     d52:	18 f0       	brcs	.+6      	; 0xd5a <dio_writePin+0x32>
	{
		return_errorStatus = Dio_levelError;
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	8b 83       	std	Y+3, r24	; 0x03
     d58:	08 c1       	rjmp	.+528    	; 0xf6a <dio_writePin+0x242>
	}
	else
	{
		loc_pin = pin_id % NUM_OF_PINS_PER_PORT;
     d5a:	8c 81       	ldd	r24, Y+4	; 0x04
     d5c:	87 70       	andi	r24, 0x07	; 7
     d5e:	89 83       	std	Y+1, r24	; 0x01
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	86 95       	lsr	r24
     d64:	86 95       	lsr	r24
     d66:	86 95       	lsr	r24
     d68:	8a 83       	std	Y+2, r24	; 0x02

		switch(loc_port)
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	3f 87       	std	Y+15, r19	; 0x0f
     d72:	2e 87       	std	Y+14, r18	; 0x0e
     d74:	8e 85       	ldd	r24, Y+14	; 0x0e
     d76:	9f 85       	ldd	r25, Y+15	; 0x0f
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	91 05       	cpc	r25, r1
     d7c:	09 f4       	brne	.+2      	; 0xd80 <dio_writePin+0x58>
     d7e:	4f c0       	rjmp	.+158    	; 0xe1e <dio_writePin+0xf6>
     d80:	2e 85       	ldd	r18, Y+14	; 0x0e
     d82:	3f 85       	ldd	r19, Y+15	; 0x0f
     d84:	22 30       	cpi	r18, 0x02	; 2
     d86:	31 05       	cpc	r19, r1
     d88:	2c f4       	brge	.+10     	; 0xd94 <dio_writePin+0x6c>
     d8a:	8e 85       	ldd	r24, Y+14	; 0x0e
     d8c:	9f 85       	ldd	r25, Y+15	; 0x0f
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	71 f0       	breq	.+28     	; 0xdae <dio_writePin+0x86>
     d92:	eb c0       	rjmp	.+470    	; 0xf6a <dio_writePin+0x242>
     d94:	2e 85       	ldd	r18, Y+14	; 0x0e
     d96:	3f 85       	ldd	r19, Y+15	; 0x0f
     d98:	22 30       	cpi	r18, 0x02	; 2
     d9a:	31 05       	cpc	r19, r1
     d9c:	09 f4       	brne	.+2      	; 0xda0 <dio_writePin+0x78>
     d9e:	77 c0       	rjmp	.+238    	; 0xe8e <dio_writePin+0x166>
     da0:	8e 85       	ldd	r24, Y+14	; 0x0e
     da2:	9f 85       	ldd	r25, Y+15	; 0x0f
     da4:	83 30       	cpi	r24, 0x03	; 3
     da6:	91 05       	cpc	r25, r1
     da8:	09 f4       	brne	.+2      	; 0xdac <dio_writePin+0x84>
     daa:	a9 c0       	rjmp	.+338    	; 0xefe <dio_writePin+0x1d6>
     dac:	de c0       	rjmp	.+444    	; 0xf6a <dio_writePin+0x242>
		{

		case DIO_PORTA:

			switch (value)
     dae:	8d 81       	ldd	r24, Y+5	; 0x05
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	3d 87       	std	Y+13, r19	; 0x0d
     db6:	2c 87       	std	Y+12, r18	; 0x0c
     db8:	8c 85       	ldd	r24, Y+12	; 0x0c
     dba:	9d 85       	ldd	r25, Y+13	; 0x0d
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	d1 f0       	breq	.+52     	; 0xdf4 <dio_writePin+0xcc>
     dc0:	2c 85       	ldd	r18, Y+12	; 0x0c
     dc2:	3d 85       	ldd	r19, Y+13	; 0x0d
     dc4:	21 30       	cpi	r18, 0x01	; 1
     dc6:	31 05       	cpc	r19, r1
     dc8:	09 f0       	breq	.+2      	; 0xdcc <dio_writePin+0xa4>
     dca:	cf c0       	rjmp	.+414    	; 0xf6a <dio_writePin+0x242>
			{

			case DIO_HIGH:

				SET_BIT(PORTA, loc_pin);
     dcc:	ab e3       	ldi	r26, 0x3B	; 59
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	eb e3       	ldi	r30, 0x3B	; 59
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	48 2f       	mov	r20, r24
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	02 2e       	mov	r0, r18
     de4:	02 c0       	rjmp	.+4      	; 0xdea <dio_writePin+0xc2>
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	0a 94       	dec	r0
     dec:	e2 f7       	brpl	.-8      	; 0xde6 <dio_writePin+0xbe>
     dee:	84 2b       	or	r24, r20
     df0:	8c 93       	st	X, r24
     df2:	bb c0       	rjmp	.+374    	; 0xf6a <dio_writePin+0x242>

				break;

			case DIO_LOW:

				CLEAR_BIT(PORTA, loc_pin);
     df4:	ab e3       	ldi	r26, 0x3B	; 59
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	eb e3       	ldi	r30, 0x3B	; 59
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	48 2f       	mov	r20, r24
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	02 2e       	mov	r0, r18
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <dio_writePin+0xea>
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	0a 94       	dec	r0
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <dio_writePin+0xe6>
     e16:	80 95       	com	r24
     e18:	84 23       	and	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	a6 c0       	rjmp	.+332    	; 0xf6a <dio_writePin+0x242>
			}
			break;

		case DIO_PORTB:

			switch (value)
     e1e:	8d 81       	ldd	r24, Y+5	; 0x05
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	3b 87       	std	Y+11, r19	; 0x0b
     e26:	2a 87       	std	Y+10, r18	; 0x0a
     e28:	8a 85       	ldd	r24, Y+10	; 0x0a
     e2a:	9b 85       	ldd	r25, Y+11	; 0x0b
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	d1 f0       	breq	.+52     	; 0xe64 <dio_writePin+0x13c>
     e30:	2a 85       	ldd	r18, Y+10	; 0x0a
     e32:	3b 85       	ldd	r19, Y+11	; 0x0b
     e34:	21 30       	cpi	r18, 0x01	; 1
     e36:	31 05       	cpc	r19, r1
     e38:	09 f0       	breq	.+2      	; 0xe3c <dio_writePin+0x114>
     e3a:	97 c0       	rjmp	.+302    	; 0xf6a <dio_writePin+0x242>
			{

			case DIO_HIGH:

				SET_BIT(PORTB, loc_pin);
     e3c:	a8 e3       	ldi	r26, 0x38	; 56
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e8 e3       	ldi	r30, 0x38	; 56
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <dio_writePin+0x132>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <dio_writePin+0x12e>
     e5e:	84 2b       	or	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	83 c0       	rjmp	.+262    	; 0xf6a <dio_writePin+0x242>

				break;

			case DIO_LOW:

				CLEAR_BIT(PORTB, loc_pin);
     e64:	a8 e3       	ldi	r26, 0x38	; 56
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e8 e3       	ldi	r30, 0x38	; 56
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <dio_writePin+0x15a>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <dio_writePin+0x156>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	6e c0       	rjmp	.+220    	; 0xf6a <dio_writePin+0x242>
			break;


		case DIO_PORTC:

			switch (value)
     e8e:	8d 81       	ldd	r24, Y+5	; 0x05
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	39 87       	std	Y+9, r19	; 0x09
     e96:	28 87       	std	Y+8, r18	; 0x08
     e98:	88 85       	ldd	r24, Y+8	; 0x08
     e9a:	99 85       	ldd	r25, Y+9	; 0x09
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	d1 f0       	breq	.+52     	; 0xed4 <dio_writePin+0x1ac>
     ea0:	28 85       	ldd	r18, Y+8	; 0x08
     ea2:	39 85       	ldd	r19, Y+9	; 0x09
     ea4:	21 30       	cpi	r18, 0x01	; 1
     ea6:	31 05       	cpc	r19, r1
     ea8:	09 f0       	breq	.+2      	; 0xeac <dio_writePin+0x184>
     eaa:	5f c0       	rjmp	.+190    	; 0xf6a <dio_writePin+0x242>
			{

			case DIO_HIGH:

				SET_BIT(PORTC, loc_pin);
     eac:	a5 e3       	ldi	r26, 0x35	; 53
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e5 e3       	ldi	r30, 0x35	; 53
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	48 2f       	mov	r20, r24
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 2e       	mov	r0, r18
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <dio_writePin+0x1a2>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	0a 94       	dec	r0
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <dio_writePin+0x19e>
     ece:	84 2b       	or	r24, r20
     ed0:	8c 93       	st	X, r24
     ed2:	4b c0       	rjmp	.+150    	; 0xf6a <dio_writePin+0x242>

				break;

			case DIO_LOW:

				CLEAR_BIT(PORTC, loc_pin);
     ed4:	a5 e3       	ldi	r26, 0x35	; 53
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e5 e3       	ldi	r30, 0x35	; 53
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <dio_writePin+0x1ca>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <dio_writePin+0x1c6>
     ef6:	80 95       	com	r24
     ef8:	84 23       	and	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	36 c0       	rjmp	.+108    	; 0xf6a <dio_writePin+0x242>



		case DIO_PORTD:

			switch (value)
     efe:	8d 81       	ldd	r24, Y+5	; 0x05
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	3f 83       	std	Y+7, r19	; 0x07
     f06:	2e 83       	std	Y+6, r18	; 0x06
     f08:	8e 81       	ldd	r24, Y+6	; 0x06
     f0a:	9f 81       	ldd	r25, Y+7	; 0x07
     f0c:	00 97       	sbiw	r24, 0x00	; 0
     f0e:	c9 f0       	breq	.+50     	; 0xf42 <dio_writePin+0x21a>
     f10:	2e 81       	ldd	r18, Y+6	; 0x06
     f12:	3f 81       	ldd	r19, Y+7	; 0x07
     f14:	21 30       	cpi	r18, 0x01	; 1
     f16:	31 05       	cpc	r19, r1
     f18:	41 f5       	brne	.+80     	; 0xf6a <dio_writePin+0x242>
			{

			case DIO_HIGH:

				SET_BIT(PORTD, loc_pin);
     f1a:	a2 e3       	ldi	r26, 0x32	; 50
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e2 e3       	ldi	r30, 0x32	; 50
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 2e       	mov	r0, r18
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <dio_writePin+0x210>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	0a 94       	dec	r0
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <dio_writePin+0x20c>
     f3c:	84 2b       	or	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	14 c0       	rjmp	.+40     	; 0xf6a <dio_writePin+0x242>

				break;

			case DIO_LOW:

				CLEAR_BIT(PORTD, loc_pin);
     f42:	a2 e3       	ldi	r26, 0x32	; 50
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e2 e3       	ldi	r30, 0x32	; 50
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <dio_writePin+0x238>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <dio_writePin+0x234>
     f64:	80 95       	com	r24
     f66:	84 23       	and	r24, r20
     f68:	8c 93       	st	X, r24


		}
	}

	return return_errorStatus;
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f6c:	2f 96       	adiw	r28, 0x0f	; 15
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <dio_readPin>:
DIO_errorStatus dio_readPin(u8 pin_id, pu8 level)
{
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	28 97       	sbiw	r28, 0x08	; 8
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	de bf       	out	0x3e, r29	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	cd bf       	out	0x3d, r28	; 61
     f92:	8c 83       	std	Y+4, r24	; 0x04
     f94:	7e 83       	std	Y+6, r23	; 0x06
     f96:	6d 83       	std	Y+5, r22	; 0x05
	DIO_errorStatus return_errorStatus = Dio_Ok;
     f98:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_port;

	u8 loc_pin;

	if(pin_id > NUM_OF_PINS)
     f9a:	8c 81       	ldd	r24, Y+4	; 0x04
     f9c:	80 32       	cpi	r24, 0x20	; 32
     f9e:	18 f0       	brcs	.+6      	; 0xfa6 <dio_readPin+0x28>
	{
		return_errorStatus = Dio_pinError;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	8b 83       	std	Y+3, r24	; 0x03
     fa4:	35 c1       	rjmp	.+618    	; 0x1210 <dio_readPin+0x292>
	}
	else if(level == NULL)
     fa6:	8d 81       	ldd	r24, Y+5	; 0x05
     fa8:	9e 81       	ldd	r25, Y+6	; 0x06
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	19 f4       	brne	.+6      	; 0xfb4 <dio_readPin+0x36>
	{
		return_errorStatus = Dio_NullPointerError;
     fae:	84 e0       	ldi	r24, 0x04	; 4
     fb0:	8b 83       	std	Y+3, r24	; 0x03
     fb2:	2e c1       	rjmp	.+604    	; 0x1210 <dio_readPin+0x292>
	}
	else
	{
		loc_pin = pin_id % NUM_OF_PINS_PER_PORT;
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	87 70       	andi	r24, 0x07	; 7
     fb8:	89 83       	std	Y+1, r24	; 0x01
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	86 95       	lsr	r24
     fbe:	86 95       	lsr	r24
     fc0:	86 95       	lsr	r24
     fc2:	8a 83       	std	Y+2, r24	; 0x02

		switch(loc_port)
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	38 87       	std	Y+8, r19	; 0x08
     fcc:	2f 83       	std	Y+7, r18	; 0x07
     fce:	4f 81       	ldd	r20, Y+7	; 0x07
     fd0:	58 85       	ldd	r21, Y+8	; 0x08
     fd2:	41 30       	cpi	r20, 0x01	; 1
     fd4:	51 05       	cpc	r21, r1
     fd6:	09 f4       	brne	.+2      	; 0xfda <dio_readPin+0x5c>
     fd8:	59 c0       	rjmp	.+178    	; 0x108c <dio_readPin+0x10e>
     fda:	8f 81       	ldd	r24, Y+7	; 0x07
     fdc:	98 85       	ldd	r25, Y+8	; 0x08
     fde:	82 30       	cpi	r24, 0x02	; 2
     fe0:	91 05       	cpc	r25, r1
     fe2:	34 f4       	brge	.+12     	; 0xff0 <dio_readPin+0x72>
     fe4:	2f 81       	ldd	r18, Y+7	; 0x07
     fe6:	38 85       	ldd	r19, Y+8	; 0x08
     fe8:	21 15       	cp	r18, r1
     fea:	31 05       	cpc	r19, r1
     fec:	71 f0       	breq	.+28     	; 0x100a <dio_readPin+0x8c>
     fee:	10 c1       	rjmp	.+544    	; 0x1210 <dio_readPin+0x292>
     ff0:	4f 81       	ldd	r20, Y+7	; 0x07
     ff2:	58 85       	ldd	r21, Y+8	; 0x08
     ff4:	42 30       	cpi	r20, 0x02	; 2
     ff6:	51 05       	cpc	r21, r1
     ff8:	09 f4       	brne	.+2      	; 0xffc <dio_readPin+0x7e>
     ffa:	89 c0       	rjmp	.+274    	; 0x110e <dio_readPin+0x190>
     ffc:	8f 81       	ldd	r24, Y+7	; 0x07
     ffe:	98 85       	ldd	r25, Y+8	; 0x08
    1000:	83 30       	cpi	r24, 0x03	; 3
    1002:	91 05       	cpc	r25, r1
    1004:	09 f4       	brne	.+2      	; 0x1008 <dio_readPin+0x8a>
    1006:	c4 c0       	rjmp	.+392    	; 0x1190 <dio_readPin+0x212>
    1008:	03 c1       	rjmp	.+518    	; 0x1210 <dio_readPin+0x292>
		{

		case DIO_PORTA:

			if (GET_BIT(DDRA,loc_pin) == PORT_INPUT)
    100a:	ea e3       	ldi	r30, 0x3A	; 58
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	50 e0       	ldi	r21, 0x00	; 0
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <dio_readPin+0xa6>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	2a 95       	dec	r18
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <dio_readPin+0xa2>
    1028:	9a 01       	movw	r18, r20
    102a:	28 23       	and	r18, r24
    102c:	39 23       	and	r19, r25
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	a9 01       	movw	r20, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <dio_readPin+0xbe>
    1038:	55 95       	asr	r21
    103a:	47 95       	ror	r20
    103c:	8a 95       	dec	r24
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <dio_readPin+0xba>
    1040:	ca 01       	movw	r24, r20
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	01 f5       	brne	.+64     	; 0x1086 <dio_readPin+0x108>
			{
				*level = GET_BIT(PINA, loc_pin);
    1046:	e9 e3       	ldi	r30, 0x39	; 57
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <dio_readPin+0xe2>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	2a 95       	dec	r18
    1062:	e2 f7       	brpl	.-8      	; 0x105c <dio_readPin+0xde>
    1064:	9a 01       	movw	r18, r20
    1066:	28 23       	and	r18, r24
    1068:	39 23       	and	r19, r25
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	88 2f       	mov	r24, r24
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	a9 01       	movw	r20, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <dio_readPin+0xfa>
    1074:	55 95       	asr	r21
    1076:	47 95       	ror	r20
    1078:	8a 95       	dec	r24
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <dio_readPin+0xf6>
    107c:	ca 01       	movw	r24, r20
    107e:	ed 81       	ldd	r30, Y+5	; 0x05
    1080:	fe 81       	ldd	r31, Y+6	; 0x06
    1082:	80 83       	st	Z, r24
    1084:	c5 c0       	rjmp	.+394    	; 0x1210 <dio_readPin+0x292>
			}
			else
			{
				return_errorStatus = Dio_directionError;
    1086:	83 e0       	ldi	r24, 0x03	; 3
    1088:	8b 83       	std	Y+3, r24	; 0x03
    108a:	c2 c0       	rjmp	.+388    	; 0x1210 <dio_readPin+0x292>
				break;


		case DIO_PORTB:

			if (GET_BIT(DDRB,loc_pin) == PORT_INPUT)
    108c:	e7 e3       	ldi	r30, 0x37	; 55
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <dio_readPin+0x128>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	2a 95       	dec	r18
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <dio_readPin+0x124>
    10aa:	9a 01       	movw	r18, r20
    10ac:	28 23       	and	r18, r24
    10ae:	39 23       	and	r19, r25
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	88 2f       	mov	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	a9 01       	movw	r20, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <dio_readPin+0x140>
    10ba:	55 95       	asr	r21
    10bc:	47 95       	ror	r20
    10be:	8a 95       	dec	r24
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <dio_readPin+0x13c>
    10c2:	ca 01       	movw	r24, r20
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	01 f5       	brne	.+64     	; 0x1108 <dio_readPin+0x18a>
			{
				*level = GET_BIT(PINB, loc_pin);
    10c8:	e6 e3       	ldi	r30, 0x36	; 54
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <dio_readPin+0x164>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	2a 95       	dec	r18
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <dio_readPin+0x160>
    10e6:	9a 01       	movw	r18, r20
    10e8:	28 23       	and	r18, r24
    10ea:	39 23       	and	r19, r25
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	88 2f       	mov	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	a9 01       	movw	r20, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <dio_readPin+0x17c>
    10f6:	55 95       	asr	r21
    10f8:	47 95       	ror	r20
    10fa:	8a 95       	dec	r24
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <dio_readPin+0x178>
    10fe:	ca 01       	movw	r24, r20
    1100:	ed 81       	ldd	r30, Y+5	; 0x05
    1102:	fe 81       	ldd	r31, Y+6	; 0x06
    1104:	80 83       	st	Z, r24
    1106:	84 c0       	rjmp	.+264    	; 0x1210 <dio_readPin+0x292>
			}
			else
			{
				return_errorStatus = Dio_directionError;
    1108:	83 e0       	ldi	r24, 0x03	; 3
    110a:	8b 83       	std	Y+3, r24	; 0x03
    110c:	81 c0       	rjmp	.+258    	; 0x1210 <dio_readPin+0x292>



		case DIO_PORTC:

			if (GET_BIT(DDRC,loc_pin) == PORT_INPUT)
    110e:	e4 e3       	ldi	r30, 0x34	; 52
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	48 2f       	mov	r20, r24
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <dio_readPin+0x1aa>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	2a 95       	dec	r18
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <dio_readPin+0x1a6>
    112c:	9a 01       	movw	r18, r20
    112e:	28 23       	and	r18, r24
    1130:	39 23       	and	r19, r25
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	a9 01       	movw	r20, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <dio_readPin+0x1c2>
    113c:	55 95       	asr	r21
    113e:	47 95       	ror	r20
    1140:	8a 95       	dec	r24
    1142:	e2 f7       	brpl	.-8      	; 0x113c <dio_readPin+0x1be>
    1144:	ca 01       	movw	r24, r20
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	01 f5       	brne	.+64     	; 0x118a <dio_readPin+0x20c>
			{

				*level = GET_BIT(PINC, loc_pin);
    114a:	e3 e3       	ldi	r30, 0x33	; 51
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <dio_readPin+0x1e6>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	2a 95       	dec	r18
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <dio_readPin+0x1e2>
    1168:	9a 01       	movw	r18, r20
    116a:	28 23       	and	r18, r24
    116c:	39 23       	and	r19, r25
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	88 2f       	mov	r24, r24
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	a9 01       	movw	r20, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <dio_readPin+0x1fe>
    1178:	55 95       	asr	r21
    117a:	47 95       	ror	r20
    117c:	8a 95       	dec	r24
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <dio_readPin+0x1fa>
    1180:	ca 01       	movw	r24, r20
    1182:	ed 81       	ldd	r30, Y+5	; 0x05
    1184:	fe 81       	ldd	r31, Y+6	; 0x06
    1186:	80 83       	st	Z, r24
    1188:	43 c0       	rjmp	.+134    	; 0x1210 <dio_readPin+0x292>

			}
			else
			{
				return_errorStatus = Dio_directionError;
    118a:	83 e0       	ldi	r24, 0x03	; 3
    118c:	8b 83       	std	Y+3, r24	; 0x03
    118e:	40 c0       	rjmp	.+128    	; 0x1210 <dio_readPin+0x292>
				break;


		case DIO_PORTD:

			if (GET_BIT(DDRD,loc_pin) == PORT_INPUT)
    1190:	e1 e3       	ldi	r30, 0x31	; 49
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <dio_readPin+0x22c>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	2a 95       	dec	r18
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <dio_readPin+0x228>
    11ae:	9a 01       	movw	r18, r20
    11b0:	28 23       	and	r18, r24
    11b2:	39 23       	and	r19, r25
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	88 2f       	mov	r24, r24
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	a9 01       	movw	r20, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <dio_readPin+0x244>
    11be:	55 95       	asr	r21
    11c0:	47 95       	ror	r20
    11c2:	8a 95       	dec	r24
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <dio_readPin+0x240>
    11c6:	ca 01       	movw	r24, r20
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	01 f5       	brne	.+64     	; 0x120c <dio_readPin+0x28e>
			{

				*level = GET_BIT(PIND, loc_pin);
    11cc:	e0 e3       	ldi	r30, 0x30	; 48
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <dio_readPin+0x268>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	2a 95       	dec	r18
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <dio_readPin+0x264>
    11ea:	9a 01       	movw	r18, r20
    11ec:	28 23       	and	r18, r24
    11ee:	39 23       	and	r19, r25
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	88 2f       	mov	r24, r24
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a9 01       	movw	r20, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <dio_readPin+0x280>
    11fa:	55 95       	asr	r21
    11fc:	47 95       	ror	r20
    11fe:	8a 95       	dec	r24
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <dio_readPin+0x27c>
    1202:	ca 01       	movw	r24, r20
    1204:	ed 81       	ldd	r30, Y+5	; 0x05
    1206:	fe 81       	ldd	r31, Y+6	; 0x06
    1208:	80 83       	st	Z, r24
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <dio_readPin+0x292>

			}
			else
			{
				return_errorStatus = Dio_directionError;
    120c:	83 e0       	ldi	r24, 0x03	; 3
    120e:	8b 83       	std	Y+3, r24	; 0x03
				break;

		}
	}

	return return_errorStatus;
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1212:	28 96       	adiw	r28, 0x08	; 8
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <dio_writePort>:
DIO_errorStatus dio_writePort(u8 port_id, u8 value)
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	00 d0       	rcall	.+0      	; 0x122a <dio_writePort+0x6>
    122a:	00 d0       	rcall	.+0      	; 0x122c <dio_writePort+0x8>
    122c:	0f 92       	push	r0
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	8a 83       	std	Y+2, r24	; 0x02
    1234:	6b 83       	std	Y+3, r22	; 0x03
	DIO_errorStatus return_errorStatus = Dio_Ok;
    1236:	19 82       	std	Y+1, r1	; 0x01

	if (port_id > NUM_OF_PORTS) {
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	84 30       	cpi	r24, 0x04	; 4
    123c:	18 f0       	brcs	.+6      	; 0x1244 <dio_writePort+0x20>

		return_errorStatus = Dio_portError;
    123e:	85 e0       	ldi	r24, 0x05	; 5
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	32 c0       	rjmp	.+100    	; 0x12a8 <dio_writePort+0x84>
	}

	else {

		switch (port_id) {
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3d 83       	std	Y+5, r19	; 0x05
    124c:	2c 83       	std	Y+4, r18	; 0x04
    124e:	8c 81       	ldd	r24, Y+4	; 0x04
    1250:	9d 81       	ldd	r25, Y+5	; 0x05
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	91 05       	cpc	r25, r1
    1256:	d1 f0       	breq	.+52     	; 0x128c <dio_writePort+0x68>
    1258:	2c 81       	ldd	r18, Y+4	; 0x04
    125a:	3d 81       	ldd	r19, Y+5	; 0x05
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	31 05       	cpc	r19, r1
    1260:	2c f4       	brge	.+10     	; 0x126c <dio_writePort+0x48>
    1262:	8c 81       	ldd	r24, Y+4	; 0x04
    1264:	9d 81       	ldd	r25, Y+5	; 0x05
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	61 f0       	breq	.+24     	; 0x1282 <dio_writePort+0x5e>
    126a:	1e c0       	rjmp	.+60     	; 0x12a8 <dio_writePort+0x84>
    126c:	2c 81       	ldd	r18, Y+4	; 0x04
    126e:	3d 81       	ldd	r19, Y+5	; 0x05
    1270:	22 30       	cpi	r18, 0x02	; 2
    1272:	31 05       	cpc	r19, r1
    1274:	81 f0       	breq	.+32     	; 0x1296 <dio_writePort+0x72>
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	9d 81       	ldd	r25, Y+5	; 0x05
    127a:	83 30       	cpi	r24, 0x03	; 3
    127c:	91 05       	cpc	r25, r1
    127e:	81 f0       	breq	.+32     	; 0x12a0 <dio_writePort+0x7c>
    1280:	13 c0       	rjmp	.+38     	; 0x12a8 <dio_writePort+0x84>

		case DIO_PORTA:

			ASSIGN_REG(PORTA, value);
    1282:	eb e3       	ldi	r30, 0x3B	; 59
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	80 83       	st	Z, r24
    128a:	0e c0       	rjmp	.+28     	; 0x12a8 <dio_writePort+0x84>

			break;

		case DIO_PORTB:

			ASSIGN_REG(PORTB, value);
    128c:	e8 e3       	ldi	r30, 0x38	; 56
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	80 83       	st	Z, r24
    1294:	09 c0       	rjmp	.+18     	; 0x12a8 <dio_writePort+0x84>

			break;

		case DIO_PORTC:

			ASSIGN_REG(PORTC, value);
    1296:	e5 e3       	ldi	r30, 0x35	; 53
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	80 83       	st	Z, r24
    129e:	04 c0       	rjmp	.+8      	; 0x12a8 <dio_writePort+0x84>

			break;

		case DIO_PORTD:

			ASSIGN_REG(PORTD, value);
    12a0:	e2 e3       	ldi	r30, 0x32	; 50
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	80 83       	st	Z, r24

		}

	}

	return return_errorStatus;
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <dio_readPort>:
DIO_errorStatus dio_readPort(u8 port_id, pu8 level)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <dio_readPort+0x6>
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <dio_readPort+0x8>
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <dio_readPort+0xa>
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	8a 83       	std	Y+2, r24	; 0x02
    12ca:	7c 83       	std	Y+4, r23	; 0x04
    12cc:	6b 83       	std	Y+3, r22	; 0x03
	DIO_errorStatus return_errorStatus = Dio_Ok;
    12ce:	19 82       	std	Y+1, r1	; 0x01

	if (level == NULL) {
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	19 f4       	brne	.+6      	; 0x12de <dio_readPort+0x24>

		return_errorStatus = Dio_NullPointerError;
    12d8:	84 e0       	ldi	r24, 0x04	; 4
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	40 c0       	rjmp	.+128    	; 0x135e <dio_readPort+0xa4>
	}

	else if (port_id > NUM_OF_PORTS)
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	84 30       	cpi	r24, 0x04	; 4
    12e2:	18 f0       	brcs	.+6      	; 0x12ea <dio_readPort+0x30>
	{

		return_errorStatus = Dio_portError;
    12e4:	85 e0       	ldi	r24, 0x05	; 5
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	3a c0       	rjmp	.+116    	; 0x135e <dio_readPort+0xa4>
	}

	else
	{

		switch (port_id) {
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	3e 83       	std	Y+6, r19	; 0x06
    12f2:	2d 83       	std	Y+5, r18	; 0x05
    12f4:	8d 81       	ldd	r24, Y+5	; 0x05
    12f6:	9e 81       	ldd	r25, Y+6	; 0x06
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	91 05       	cpc	r25, r1
    12fc:	e1 f0       	breq	.+56     	; 0x1336 <dio_readPort+0x7c>
    12fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1300:	3e 81       	ldd	r19, Y+6	; 0x06
    1302:	22 30       	cpi	r18, 0x02	; 2
    1304:	31 05       	cpc	r19, r1
    1306:	2c f4       	brge	.+10     	; 0x1312 <dio_readPort+0x58>
    1308:	8d 81       	ldd	r24, Y+5	; 0x05
    130a:	9e 81       	ldd	r25, Y+6	; 0x06
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	61 f0       	breq	.+24     	; 0x1328 <dio_readPort+0x6e>
    1310:	26 c0       	rjmp	.+76     	; 0x135e <dio_readPort+0xa4>
    1312:	2d 81       	ldd	r18, Y+5	; 0x05
    1314:	3e 81       	ldd	r19, Y+6	; 0x06
    1316:	22 30       	cpi	r18, 0x02	; 2
    1318:	31 05       	cpc	r19, r1
    131a:	a1 f0       	breq	.+40     	; 0x1344 <dio_readPort+0x8a>
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	83 30       	cpi	r24, 0x03	; 3
    1322:	91 05       	cpc	r25, r1
    1324:	b1 f0       	breq	.+44     	; 0x1352 <dio_readPort+0x98>
    1326:	1b c0       	rjmp	.+54     	; 0x135e <dio_readPort+0xa4>

		case DIO_PORTA:

			*level = PINA;
    1328:	e9 e3       	ldi	r30, 0x39	; 57
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	eb 81       	ldd	r30, Y+3	; 0x03
    1330:	fc 81       	ldd	r31, Y+4	; 0x04
    1332:	80 83       	st	Z, r24
    1334:	14 c0       	rjmp	.+40     	; 0x135e <dio_readPort+0xa4>

			break;

		case DIO_PORTB:

			*level = PINB;
    1336:	e6 e3       	ldi	r30, 0x36	; 54
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	eb 81       	ldd	r30, Y+3	; 0x03
    133e:	fc 81       	ldd	r31, Y+4	; 0x04
    1340:	80 83       	st	Z, r24
    1342:	0d c0       	rjmp	.+26     	; 0x135e <dio_readPort+0xa4>

			break;

		case DIO_PORTC:

			*level = PINC;
    1344:	e3 e3       	ldi	r30, 0x33	; 51
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	eb 81       	ldd	r30, Y+3	; 0x03
    134c:	fc 81       	ldd	r31, Y+4	; 0x04
    134e:	80 83       	st	Z, r24
    1350:	06 c0       	rjmp	.+12     	; 0x135e <dio_readPort+0xa4>

			break;

		case DIO_PORTD:

			*level = PIND;
    1352:	e0 e3       	ldi	r30, 0x30	; 48
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	eb 81       	ldd	r30, Y+3	; 0x03
    135a:	fc 81       	ldd	r31, Y+4	; 0x04
    135c:	80 83       	st	Z, r24
			break;

		}

	}
	return return_errorStatus;
    135e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1360:	26 96       	adiw	r28, 0x06	; 6
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	cd bf       	out	0x3d, r28	; 61
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <dio_tooglePin>:
DIO_errorStatus dio_tooglePin(u8 pin_id)
{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	00 d0       	rcall	.+0      	; 0x1378 <dio_tooglePin+0x6>
    1378:	00 d0       	rcall	.+0      	; 0x137a <dio_tooglePin+0x8>
    137a:	00 d0       	rcall	.+0      	; 0x137c <dio_tooglePin+0xa>
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	8c 83       	std	Y+4, r24	; 0x04
	DIO_errorStatus return_errorStatus = Dio_Ok;
    1382:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_pin;
	u8 loc_port;

	if (pin_id > NUM_OF_PINS)
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	80 32       	cpi	r24, 0x20	; 32
    1388:	18 f0       	brcs	.+6      	; 0x1390 <dio_tooglePin+0x1e>
	{

		return_errorStatus = Dio_pinError;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	8b 83       	std	Y+3, r24	; 0x03
    138e:	f9 c0       	rjmp	.+498    	; 0x1582 <dio_tooglePin+0x210>
	}

	else
	{
		loc_pin = pin_id % NUM_OF_PINS_PER_PORT;
    1390:	8c 81       	ldd	r24, Y+4	; 0x04
    1392:	87 70       	andi	r24, 0x07	; 7
    1394:	8a 83       	std	Y+2, r24	; 0x02
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
    1396:	8c 81       	ldd	r24, Y+4	; 0x04
    1398:	86 95       	lsr	r24
    139a:	86 95       	lsr	r24
    139c:	86 95       	lsr	r24
    139e:	89 83       	std	Y+1, r24	; 0x01

		switch (loc_port)
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	3e 83       	std	Y+6, r19	; 0x06
    13a8:	2d 83       	std	Y+5, r18	; 0x05
    13aa:	4d 81       	ldd	r20, Y+5	; 0x05
    13ac:	5e 81       	ldd	r21, Y+6	; 0x06
    13ae:	41 30       	cpi	r20, 0x01	; 1
    13b0:	51 05       	cpc	r21, r1
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <dio_tooglePin+0x44>
    13b4:	4c c0       	rjmp	.+152    	; 0x144e <dio_tooglePin+0xdc>
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	91 05       	cpc	r25, r1
    13be:	34 f4       	brge	.+12     	; 0x13cc <dio_tooglePin+0x5a>
    13c0:	2d 81       	ldd	r18, Y+5	; 0x05
    13c2:	3e 81       	ldd	r19, Y+6	; 0x06
    13c4:	21 15       	cp	r18, r1
    13c6:	31 05       	cpc	r19, r1
    13c8:	71 f0       	breq	.+28     	; 0x13e6 <dio_tooglePin+0x74>
    13ca:	db c0       	rjmp	.+438    	; 0x1582 <dio_tooglePin+0x210>
    13cc:	4d 81       	ldd	r20, Y+5	; 0x05
    13ce:	5e 81       	ldd	r21, Y+6	; 0x06
    13d0:	42 30       	cpi	r20, 0x02	; 2
    13d2:	51 05       	cpc	r21, r1
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <dio_tooglePin+0x66>
    13d6:	6f c0       	rjmp	.+222    	; 0x14b6 <dio_tooglePin+0x144>
    13d8:	8d 81       	ldd	r24, Y+5	; 0x05
    13da:	9e 81       	ldd	r25, Y+6	; 0x06
    13dc:	83 30       	cpi	r24, 0x03	; 3
    13de:	91 05       	cpc	r25, r1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <dio_tooglePin+0x72>
    13e2:	9d c0       	rjmp	.+314    	; 0x151e <dio_tooglePin+0x1ac>
    13e4:	ce c0       	rjmp	.+412    	; 0x1582 <dio_tooglePin+0x210>
		{

		case DIO_PORTA:

			if (GET_BIT(DDRA,loc_pin) == PORT_OUTPUT)
    13e6:	ea e3       	ldi	r30, 0x3A	; 58
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	50 e0       	ldi	r21, 0x00	; 0
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <dio_tooglePin+0x8e>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	2a 95       	dec	r18
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <dio_tooglePin+0x8a>
    1404:	9a 01       	movw	r18, r20
    1406:	28 23       	and	r18, r24
    1408:	39 23       	and	r19, r25
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	a9 01       	movw	r20, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <dio_tooglePin+0xa6>
    1414:	55 95       	asr	r21
    1416:	47 95       	ror	r20
    1418:	8a 95       	dec	r24
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <dio_tooglePin+0xa2>
    141c:	ca 01       	movw	r24, r20
    141e:	8f 3f       	cpi	r24, 0xFF	; 255
    1420:	91 05       	cpc	r25, r1
    1422:	09 f0       	breq	.+2      	; 0x1426 <dio_tooglePin+0xb4>
    1424:	ae c0       	rjmp	.+348    	; 0x1582 <dio_tooglePin+0x210>
			{
				TOGGLE_BIT(PORTA, loc_pin);
    1426:	ab e3       	ldi	r26, 0x3B	; 59
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	eb e3       	ldi	r30, 0x3B	; 59
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <dio_tooglePin+0xd2>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <dio_tooglePin+0xce>
    1448:	84 27       	eor	r24, r20
    144a:	8c 93       	st	X, r24
    144c:	9a c0       	rjmp	.+308    	; 0x1582 <dio_tooglePin+0x210>
			}
			break;

		case DIO_PORTB:

			if (GET_BIT(DDRB,loc_pin) == PORT_OUTPUT)
    144e:	e7 e3       	ldi	r30, 0x37	; 55
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	48 2f       	mov	r20, r24
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <dio_tooglePin+0xf6>
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	2a 95       	dec	r18
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <dio_tooglePin+0xf2>
    146c:	9a 01       	movw	r18, r20
    146e:	28 23       	and	r18, r24
    1470:	39 23       	and	r19, r25
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	a9 01       	movw	r20, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <dio_tooglePin+0x10e>
    147c:	55 95       	asr	r21
    147e:	47 95       	ror	r20
    1480:	8a 95       	dec	r24
    1482:	e2 f7       	brpl	.-8      	; 0x147c <dio_tooglePin+0x10a>
    1484:	ca 01       	movw	r24, r20
    1486:	8f 3f       	cpi	r24, 0xFF	; 255
    1488:	91 05       	cpc	r25, r1
    148a:	09 f0       	breq	.+2      	; 0x148e <dio_tooglePin+0x11c>
    148c:	7a c0       	rjmp	.+244    	; 0x1582 <dio_tooglePin+0x210>
			{
				TOGGLE_BIT(PORTB, loc_pin);
    148e:	a8 e3       	ldi	r26, 0x38	; 56
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e8 e3       	ldi	r30, 0x38	; 56
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <dio_tooglePin+0x13a>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <dio_tooglePin+0x136>
    14b0:	84 27       	eor	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	66 c0       	rjmp	.+204    	; 0x1582 <dio_tooglePin+0x210>
			}
			break;

		case DIO_PORTC:

			if (GET_BIT(DDRC,loc_pin) == PORT_OUTPUT)
    14b6:	e4 e3       	ldi	r30, 0x34	; 52
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <dio_tooglePin+0x15e>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	2a 95       	dec	r18
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <dio_tooglePin+0x15a>
    14d4:	9a 01       	movw	r18, r20
    14d6:	28 23       	and	r18, r24
    14d8:	39 23       	and	r19, r25
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	88 2f       	mov	r24, r24
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	a9 01       	movw	r20, r18
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <dio_tooglePin+0x176>
    14e4:	55 95       	asr	r21
    14e6:	47 95       	ror	r20
    14e8:	8a 95       	dec	r24
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <dio_tooglePin+0x172>
    14ec:	ca 01       	movw	r24, r20
    14ee:	8f 3f       	cpi	r24, 0xFF	; 255
    14f0:	91 05       	cpc	r25, r1
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <dio_tooglePin+0x184>
    14f4:	46 c0       	rjmp	.+140    	; 0x1582 <dio_tooglePin+0x210>
			{
				TOGGLE_BIT(PORTC, loc_pin);
    14f6:	a5 e3       	ldi	r26, 0x35	; 53
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e5 e3       	ldi	r30, 0x35	; 53
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <dio_tooglePin+0x1a2>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <dio_tooglePin+0x19e>
    1518:	84 27       	eor	r24, r20
    151a:	8c 93       	st	X, r24
    151c:	32 c0       	rjmp	.+100    	; 0x1582 <dio_tooglePin+0x210>
			}
			break;

		case DIO_PORTD:

			if (GET_BIT(DDRD,loc_pin) == PORT_OUTPUT)
    151e:	e1 e3       	ldi	r30, 0x31	; 49
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	50 e0       	ldi	r21, 0x00	; 0
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <dio_tooglePin+0x1c6>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	2a 95       	dec	r18
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <dio_tooglePin+0x1c2>
    153c:	9a 01       	movw	r18, r20
    153e:	28 23       	and	r18, r24
    1540:	39 23       	and	r19, r25
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	88 2f       	mov	r24, r24
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	a9 01       	movw	r20, r18
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <dio_tooglePin+0x1de>
    154c:	55 95       	asr	r21
    154e:	47 95       	ror	r20
    1550:	8a 95       	dec	r24
    1552:	e2 f7       	brpl	.-8      	; 0x154c <dio_tooglePin+0x1da>
    1554:	ca 01       	movw	r24, r20
    1556:	8f 3f       	cpi	r24, 0xFF	; 255
    1558:	91 05       	cpc	r25, r1
    155a:	99 f4       	brne	.+38     	; 0x1582 <dio_tooglePin+0x210>
			{
				TOGGLE_BIT(PORTD, loc_pin);
    155c:	a2 e3       	ldi	r26, 0x32	; 50
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e2 e3       	ldi	r30, 0x32	; 50
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 2e       	mov	r0, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <dio_tooglePin+0x208>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	0a 94       	dec	r0
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <dio_tooglePin+0x204>
    157e:	84 27       	eor	r24, r20
    1580:	8c 93       	st	X, r24
			break;

		}

	}
	return return_errorStatus;
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1584:	26 96       	adiw	r28, 0x06	; 6
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <port_init>:
#include"port.h"

/*initialize based on user configuration*/

void port_init(void)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62

#undef PIN_OUTPUT_LOW
#define PIN_OUTPUT_LOW               1


	DDRA = CONC(DIO_u8_PIN7,DIO_u8_PIN6,DIO_u8_PIN5,DIO_u8_PIN4,DIO_u8_PIN3,DIO_u8_PIN2,DIO_u8_PIN1,DIO_u8_PIN0);
    159e:	ea e3       	ldi	r30, 0x3A	; 58
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	10 82       	st	Z, r1
	DDRB = CONC(DIO_u8_PIN15,DIO_u8_PIN14,DIO_u8_PIN13,DIO_u8_PIN12,DIO_u8_PIN11,DIO_u8_PIN10,DIO_u8_PIN9,DIO_u8_PIN8);
    15a4:	e7 e3       	ldi	r30, 0x37	; 55
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	8f ef       	ldi	r24, 0xFF	; 255
    15aa:	80 83       	st	Z, r24
	DDRC = CONC(DIO_u8_PIN23,DIO_u8_PIN22,DIO_u8_PIN21,DIO_u8_PIN20,DIO_u8_PIN19,DIO_u8_PIN18,DIO_u8_PIN17,DIO_u8_PIN16);
    15ac:	e4 e3       	ldi	r30, 0x34	; 52
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	8f ef       	ldi	r24, 0xFF	; 255
    15b2:	80 83       	st	Z, r24
	DDRD = CONC(DIO_u8_PIN31,DIO_u8_PIN30,DIO_u8_PIN29,DIO_u8_PIN28,DIO_u8_PIN27,DIO_u8_PIN26,DIO_u8_PIN25,DIO_u8_PIN24);
    15b4:	e1 e3       	ldi	r30, 0x31	; 49
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	10 82       	st	Z, r1
#define PIN_OUTPUT_LOW               0

#undef PIN_OUTPUT_HIGH
#define PIN_OUTPUT_HIGH              1

	PORTA = CONC(DIO_u8_PIN7,DIO_u8_PIN6,DIO_u8_PIN5,DIO_u8_PIN4,DIO_u8_PIN3,DIO_u8_PIN2,DIO_u8_PIN1,DIO_u8_PIN0);
    15ba:	eb e3       	ldi	r30, 0x3B	; 59
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	10 82       	st	Z, r1
	PORTB = CONC(DIO_u8_PIN15,DIO_u8_PIN14,DIO_u8_PIN13,DIO_u8_PIN12,DIO_u8_PIN11,DIO_u8_PIN10,DIO_u8_PIN9,DIO_u8_PIN8);
    15c0:	e8 e3       	ldi	r30, 0x38	; 56
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	8f ef       	ldi	r24, 0xFF	; 255
    15c6:	80 83       	st	Z, r24
	PORTC = CONC(DIO_u8_PIN23,DIO_u8_PIN22,DIO_u8_PIN21,DIO_u8_PIN20,DIO_u8_PIN19,DIO_u8_PIN18,DIO_u8_PIN17,DIO_u8_PIN16);
    15c8:	e5 e3       	ldi	r30, 0x35	; 53
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	8f ef       	ldi	r24, 0xFF	; 255
    15ce:	80 83       	st	Z, r24
	PORTD = CONC(DIO_u8_PIN31,DIO_u8_PIN30,DIO_u8_PIN29,DIO_u8_PIN28,DIO_u8_PIN27,DIO_u8_PIN26,DIO_u8_PIN25,DIO_u8_PIN24);
    15d0:	e2 e3       	ldi	r30, 0x32	; 50
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	10 82       	st	Z, r1
#define PIN_OUTPUT_LOW              0
#define PIN_OUTPUT_HIGH             1
#define PIN_INPUT_PULL_UP           2
#define PIN_INPUT_FLOATING          3

}
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <setPinDirection>:

/*set pin direction*/
port_errorStatus setPinDirection(u8 pin_id, u8 direction)
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	27 97       	sbiw	r28, 0x07	; 7
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	8c 83       	std	Y+4, r24	; 0x04
    15f2:	6d 83       	std	Y+5, r22	; 0x05
	port_errorStatus return_errorStatus = port_OK;
    15f4:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_pn;
	u8 loc_port;

	if(pin_id > NUM_OF_PINS)
    15f6:	8c 81       	ldd	r24, Y+4	; 0x04
    15f8:	80 32       	cpi	r24, 0x20	; 32
    15fa:	18 f0       	brcs	.+6      	; 0x1602 <setPinDirection+0x26>
	{
		return_errorStatus = pinError;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	8b 83       	std	Y+3, r24	; 0x03
    1600:	df c0       	rjmp	.+446    	; 0x17c0 <setPinDirection+0x1e4>
	}
	else if(direction > NUM_OF_DIRECTION)
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	82 30       	cpi	r24, 0x02	; 2
    1606:	18 f0       	brcs	.+6      	; 0x160e <setPinDirection+0x32>
	{
		return_errorStatus = pinDirectionError;
    1608:	82 e0       	ldi	r24, 0x02	; 2
    160a:	8b 83       	std	Y+3, r24	; 0x03
    160c:	d9 c0       	rjmp	.+434    	; 0x17c0 <setPinDirection+0x1e4>
	}
	else
	{
		loc_pn = pin_id % NUM_OF_PINS_PER_PORT;
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	87 70       	andi	r24, 0x07	; 7
    1612:	8a 83       	std	Y+2, r24	; 0x02
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
    1614:	8c 81       	ldd	r24, Y+4	; 0x04
    1616:	86 95       	lsr	r24
    1618:	86 95       	lsr	r24
    161a:	86 95       	lsr	r24
    161c:	89 83       	std	Y+1, r24	; 0x01

		switch(loc_port)
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	3f 83       	std	Y+7, r19	; 0x07
    1626:	2e 83       	std	Y+6, r18	; 0x06
    1628:	8e 81       	ldd	r24, Y+6	; 0x06
    162a:	9f 81       	ldd	r25, Y+7	; 0x07
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	91 05       	cpc	r25, r1
    1630:	09 f4       	brne	.+2      	; 0x1634 <setPinDirection+0x58>
    1632:	43 c0       	rjmp	.+134    	; 0x16ba <setPinDirection+0xde>
    1634:	2e 81       	ldd	r18, Y+6	; 0x06
    1636:	3f 81       	ldd	r19, Y+7	; 0x07
    1638:	22 30       	cpi	r18, 0x02	; 2
    163a:	31 05       	cpc	r19, r1
    163c:	2c f4       	brge	.+10     	; 0x1648 <setPinDirection+0x6c>
    163e:	8e 81       	ldd	r24, Y+6	; 0x06
    1640:	9f 81       	ldd	r25, Y+7	; 0x07
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	71 f0       	breq	.+28     	; 0x1662 <setPinDirection+0x86>
    1646:	bc c0       	rjmp	.+376    	; 0x17c0 <setPinDirection+0x1e4>
    1648:	2e 81       	ldd	r18, Y+6	; 0x06
    164a:	3f 81       	ldd	r19, Y+7	; 0x07
    164c:	22 30       	cpi	r18, 0x02	; 2
    164e:	31 05       	cpc	r19, r1
    1650:	09 f4       	brne	.+2      	; 0x1654 <setPinDirection+0x78>
    1652:	5f c0       	rjmp	.+190    	; 0x1712 <setPinDirection+0x136>
    1654:	8e 81       	ldd	r24, Y+6	; 0x06
    1656:	9f 81       	ldd	r25, Y+7	; 0x07
    1658:	83 30       	cpi	r24, 0x03	; 3
    165a:	91 05       	cpc	r25, r1
    165c:	09 f4       	brne	.+2      	; 0x1660 <setPinDirection+0x84>
    165e:	85 c0       	rjmp	.+266    	; 0x176a <setPinDirection+0x18e>
    1660:	af c0       	rjmp	.+350    	; 0x17c0 <setPinDirection+0x1e4>
		{
		case PORT_PORTA:
			if (direction == PIN_OUTPUT_HIGH)
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	a1 f4       	brne	.+40     	; 0x1690 <setPinDirection+0xb4>
			{
				SET_BIT(DDRA, loc_pn);
    1668:	aa e3       	ldi	r26, 0x3A	; 58
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	ea e3       	ldi	r30, 0x3A	; 58
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 2e       	mov	r0, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <setPinDirection+0xaa>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <setPinDirection+0xa6>
    168a:	84 2b       	or	r24, r20
    168c:	8c 93       	st	X, r24
    168e:	98 c0       	rjmp	.+304    	; 0x17c0 <setPinDirection+0x1e4>
			}
			else
			{
				CLEAR_BIT(DDRA, loc_pn);
    1690:	aa e3       	ldi	r26, 0x3A	; 58
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	ea e3       	ldi	r30, 0x3A	; 58
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	48 2f       	mov	r20, r24
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 2e       	mov	r0, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <setPinDirection+0xd2>
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	0a 94       	dec	r0
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <setPinDirection+0xce>
    16b2:	80 95       	com	r24
    16b4:	84 23       	and	r24, r20
    16b6:	8c 93       	st	X, r24
    16b8:	83 c0       	rjmp	.+262    	; 0x17c0 <setPinDirection+0x1e4>
			}
			break;

		case PORT_PORTB:
			if (direction == PIN_OUTPUT_HIGH)
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	81 30       	cpi	r24, 0x01	; 1
    16be:	a1 f4       	brne	.+40     	; 0x16e8 <setPinDirection+0x10c>
			{
				SET_BIT(DDRB, loc_pn);
    16c0:	a7 e3       	ldi	r26, 0x37	; 55
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e7 e3       	ldi	r30, 0x37	; 55
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	48 2f       	mov	r20, r24
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	02 2e       	mov	r0, r18
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <setPinDirection+0x102>
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	0a 94       	dec	r0
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <setPinDirection+0xfe>
    16e2:	84 2b       	or	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	6c c0       	rjmp	.+216    	; 0x17c0 <setPinDirection+0x1e4>
			}
			else
			{
				CLEAR_BIT(DDRB, loc_pn);
    16e8:	a7 e3       	ldi	r26, 0x37	; 55
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e7 e3       	ldi	r30, 0x37	; 55
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	48 2f       	mov	r20, r24
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 2e       	mov	r0, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <setPinDirection+0x12a>
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	0a 94       	dec	r0
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <setPinDirection+0x126>
    170a:	80 95       	com	r24
    170c:	84 23       	and	r24, r20
    170e:	8c 93       	st	X, r24
    1710:	57 c0       	rjmp	.+174    	; 0x17c0 <setPinDirection+0x1e4>
			}
			break;
		case PORT_PORTC:
			if (direction == PIN_OUTPUT_HIGH)
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	a1 f4       	brne	.+40     	; 0x1740 <setPinDirection+0x164>
			{
				SET_BIT(DDRC, loc_pn);
    1718:	a4 e3       	ldi	r26, 0x34	; 52
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e4 e3       	ldi	r30, 0x34	; 52
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	48 2f       	mov	r20, r24
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	02 2e       	mov	r0, r18
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <setPinDirection+0x15a>
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	0a 94       	dec	r0
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <setPinDirection+0x156>
    173a:	84 2b       	or	r24, r20
    173c:	8c 93       	st	X, r24
    173e:	40 c0       	rjmp	.+128    	; 0x17c0 <setPinDirection+0x1e4>
			}
			else
			{
				CLEAR_BIT(DDRC, loc_pn);
    1740:	a4 e3       	ldi	r26, 0x34	; 52
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e4 e3       	ldi	r30, 0x34	; 52
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	48 2f       	mov	r20, r24
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	02 2e       	mov	r0, r18
    1758:	02 c0       	rjmp	.+4      	; 0x175e <setPinDirection+0x182>
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	0a 94       	dec	r0
    1760:	e2 f7       	brpl	.-8      	; 0x175a <setPinDirection+0x17e>
    1762:	80 95       	com	r24
    1764:	84 23       	and	r24, r20
    1766:	8c 93       	st	X, r24
    1768:	2b c0       	rjmp	.+86     	; 0x17c0 <setPinDirection+0x1e4>
			}
			break;
		case PORT_PORTD:
			if (direction == PIN_OUTPUT_HIGH)
    176a:	8d 81       	ldd	r24, Y+5	; 0x05
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	a1 f4       	brne	.+40     	; 0x1798 <setPinDirection+0x1bc>
			{
				SET_BIT(DDRD, loc_pn);
    1770:	a1 e3       	ldi	r26, 0x31	; 49
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e1 e3       	ldi	r30, 0x31	; 49
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	48 2f       	mov	r20, r24
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	02 2e       	mov	r0, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <setPinDirection+0x1b2>
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	0a 94       	dec	r0
    1790:	e2 f7       	brpl	.-8      	; 0x178a <setPinDirection+0x1ae>
    1792:	84 2b       	or	r24, r20
    1794:	8c 93       	st	X, r24
    1796:	14 c0       	rjmp	.+40     	; 0x17c0 <setPinDirection+0x1e4>
			}
			else
			{
				CLEAR_BIT(DDRD, loc_pn);
    1798:	a1 e3       	ldi	r26, 0x31	; 49
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e1 e3       	ldi	r30, 0x31	; 49
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	48 2f       	mov	r20, r24
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	02 2e       	mov	r0, r18
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <setPinDirection+0x1da>
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	0a 94       	dec	r0
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <setPinDirection+0x1d6>
    17ba:	80 95       	com	r24
    17bc:	84 23       	and	r24, r20
    17be:	8c 93       	st	X, r24
			}
			break;
		}
	}

		return return_errorStatus;
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03


}
    17c2:	27 96       	adiw	r28, 0x07	; 7
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	de bf       	out	0x3e, r29	; 62
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	cd bf       	out	0x3d, r28	; 61
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <setMode>:
/*
*choose between four modes
*change the state of pin in specific time
* */
port_errorStatus setMode(u8 pin_id, u8 mode)
{
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	2f 97       	sbiw	r28, 0x0f	; 15
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	8c 83       	std	Y+4, r24	; 0x04
    17ea:	6d 83       	std	Y+5, r22	; 0x05
	port_errorStatus return_errorStatus = port_OK;
    17ec:	1b 82       	std	Y+3, r1	; 0x03
	u8 loc_port;

	u8 loc_pin;

	if(pin_id > NUM_OF_PINS)
    17ee:	8c 81       	ldd	r24, Y+4	; 0x04
    17f0:	80 32       	cpi	r24, 0x20	; 32
    17f2:	18 f0       	brcs	.+6      	; 0x17fa <setMode+0x26>
	{
		return_errorStatus = pinError;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	8b 83       	std	Y+3, r24	; 0x03
    17f8:	27 c3       	rjmp	.+1614   	; 0x1e48 <setMode+0x674>
	}
	else if(mode > NUM_OF_MODES)
    17fa:	8d 81       	ldd	r24, Y+5	; 0x05
    17fc:	84 30       	cpi	r24, 0x04	; 4
    17fe:	18 f0       	brcs	.+6      	; 0x1806 <setMode+0x32>
	{
		return_errorStatus = pinDirectionError;
    1800:	82 e0       	ldi	r24, 0x02	; 2
    1802:	8b 83       	std	Y+3, r24	; 0x03
    1804:	21 c3       	rjmp	.+1602   	; 0x1e48 <setMode+0x674>
	}
	else
	{
		loc_pin = pin_id % NUM_OF_PINS_PER_PORT;
    1806:	8c 81       	ldd	r24, Y+4	; 0x04
    1808:	87 70       	andi	r24, 0x07	; 7
    180a:	89 83       	std	Y+1, r24	; 0x01
		loc_port = pin_id / NUM_OF_PINS_PER_PORT;
    180c:	8c 81       	ldd	r24, Y+4	; 0x04
    180e:	86 95       	lsr	r24
    1810:	86 95       	lsr	r24
    1812:	86 95       	lsr	r24
    1814:	8a 83       	std	Y+2, r24	; 0x02

		switch(loc_port)
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	3f 87       	std	Y+15, r19	; 0x0f
    181e:	2e 87       	std	Y+14, r18	; 0x0e
    1820:	8e 85       	ldd	r24, Y+14	; 0x0e
    1822:	9f 85       	ldd	r25, Y+15	; 0x0f
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	91 05       	cpc	r25, r1
    1828:	09 f4       	brne	.+2      	; 0x182c <setMode+0x58>
    182a:	d5 c0       	rjmp	.+426    	; 0x19d6 <setMode+0x202>
    182c:	2e 85       	ldd	r18, Y+14	; 0x0e
    182e:	3f 85       	ldd	r19, Y+15	; 0x0f
    1830:	22 30       	cpi	r18, 0x02	; 2
    1832:	31 05       	cpc	r19, r1
    1834:	2c f4       	brge	.+10     	; 0x1840 <setMode+0x6c>
    1836:	8e 85       	ldd	r24, Y+14	; 0x0e
    1838:	9f 85       	ldd	r25, Y+15	; 0x0f
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	71 f0       	breq	.+28     	; 0x185a <setMode+0x86>
    183e:	04 c3       	rjmp	.+1544   	; 0x1e48 <setMode+0x674>
    1840:	2e 85       	ldd	r18, Y+14	; 0x0e
    1842:	3f 85       	ldd	r19, Y+15	; 0x0f
    1844:	22 30       	cpi	r18, 0x02	; 2
    1846:	31 05       	cpc	r19, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <setMode+0x78>
    184a:	83 c1       	rjmp	.+774    	; 0x1b52 <setMode+0x37e>
    184c:	8e 85       	ldd	r24, Y+14	; 0x0e
    184e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1850:	83 30       	cpi	r24, 0x03	; 3
    1852:	91 05       	cpc	r25, r1
    1854:	09 f4       	brne	.+2      	; 0x1858 <setMode+0x84>
    1856:	3b c2       	rjmp	.+1142   	; 0x1cce <setMode+0x4fa>
    1858:	f7 c2       	rjmp	.+1518   	; 0x1e48 <setMode+0x674>
		{

		case PORT_PORTA:

			switch (mode)
    185a:	8d 81       	ldd	r24, Y+5	; 0x05
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	3d 87       	std	Y+13, r19	; 0x0d
    1862:	2c 87       	std	Y+12, r18	; 0x0c
    1864:	8c 85       	ldd	r24, Y+12	; 0x0c
    1866:	9d 85       	ldd	r25, Y+13	; 0x0d
    1868:	81 30       	cpi	r24, 0x01	; 1
    186a:	91 05       	cpc	r25, r1
    186c:	09 f4       	brne	.+2      	; 0x1870 <setMode+0x9c>
    186e:	3e c0       	rjmp	.+124    	; 0x18ec <setMode+0x118>
    1870:	2c 85       	ldd	r18, Y+12	; 0x0c
    1872:	3d 85       	ldd	r19, Y+13	; 0x0d
    1874:	22 30       	cpi	r18, 0x02	; 2
    1876:	31 05       	cpc	r19, r1
    1878:	2c f4       	brge	.+10     	; 0x1884 <setMode+0xb0>
    187a:	8c 85       	ldd	r24, Y+12	; 0x0c
    187c:	9d 85       	ldd	r25, Y+13	; 0x0d
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	71 f0       	breq	.+28     	; 0x189e <setMode+0xca>
    1882:	e2 c2       	rjmp	.+1476   	; 0x1e48 <setMode+0x674>
    1884:	2c 85       	ldd	r18, Y+12	; 0x0c
    1886:	3d 85       	ldd	r19, Y+13	; 0x0d
    1888:	22 30       	cpi	r18, 0x02	; 2
    188a:	31 05       	cpc	r19, r1
    188c:	09 f4       	brne	.+2      	; 0x1890 <setMode+0xbc>
    188e:	7c c0       	rjmp	.+248    	; 0x1988 <setMode+0x1b4>
    1890:	8c 85       	ldd	r24, Y+12	; 0x0c
    1892:	9d 85       	ldd	r25, Y+13	; 0x0d
    1894:	83 30       	cpi	r24, 0x03	; 3
    1896:	91 05       	cpc	r25, r1
    1898:	09 f4       	brne	.+2      	; 0x189c <setMode+0xc8>
    189a:	4e c0       	rjmp	.+156    	; 0x1938 <setMode+0x164>
    189c:	d5 c2       	rjmp	.+1450   	; 0x1e48 <setMode+0x674>
			{

			case PIN_OUTPUT_LOW:

				SET_BIT(DDRA, loc_pin);
    189e:	aa e3       	ldi	r26, 0x3A	; 58
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	ea e3       	ldi	r30, 0x3A	; 58
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	48 2f       	mov	r20, r24
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <setMode+0xe6>
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	2a 95       	dec	r18
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <setMode+0xe2>
    18be:	84 2b       	or	r24, r20
    18c0:	8c 93       	st	X, r24

				CLEAR_BIT(PORTA, loc_pin);
    18c2:	ab e3       	ldi	r26, 0x3B	; 59
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	eb e3       	ldi	r30, 0x3B	; 59
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	48 2f       	mov	r20, r24
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 2e       	mov	r0, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <setMode+0x10c>
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	0a 94       	dec	r0
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <setMode+0x108>
    18e4:	80 95       	com	r24
    18e6:	84 23       	and	r24, r20
    18e8:	8c 93       	st	X, r24
    18ea:	ae c2       	rjmp	.+1372   	; 0x1e48 <setMode+0x674>

				break;

			case PIN_OUTPUT_HIGH:

				SET_BIT(DDRA, loc_pin);
    18ec:	aa e3       	ldi	r26, 0x3A	; 58
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	ea e3       	ldi	r30, 0x3A	; 58
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	48 2f       	mov	r20, r24
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <setMode+0x134>
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	2a 95       	dec	r18
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <setMode+0x130>
    190c:	84 2b       	or	r24, r20
    190e:	8c 93       	st	X, r24

				SET_BIT(PORTA, loc_pin);
    1910:	ab e3       	ldi	r26, 0x3B	; 59
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	eb e3       	ldi	r30, 0x3B	; 59
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	48 2f       	mov	r20, r24
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	02 2e       	mov	r0, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <setMode+0x15a>
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	0a 94       	dec	r0
    1930:	e2 f7       	brpl	.-8      	; 0x192a <setMode+0x156>
    1932:	84 2b       	or	r24, r20
    1934:	8c 93       	st	X, r24
    1936:	88 c2       	rjmp	.+1296   	; 0x1e48 <setMode+0x674>

				break;

			case PIN_INPUT_FLOATING:

				CLEAR_BIT(DDRA, loc_pin);
    1938:	aa e3       	ldi	r26, 0x3A	; 58
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	ea e3       	ldi	r30, 0x3A	; 58
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <setMode+0x180>
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	2a 95       	dec	r18
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <setMode+0x17c>
    1958:	80 95       	com	r24
    195a:	84 23       	and	r24, r20
    195c:	8c 93       	st	X, r24

				CLEAR_BIT(PORTA, loc_pin);
    195e:	ab e3       	ldi	r26, 0x3B	; 59
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	eb e3       	ldi	r30, 0x3B	; 59
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	48 2f       	mov	r20, r24
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	02 2e       	mov	r0, r18
    1976:	02 c0       	rjmp	.+4      	; 0x197c <setMode+0x1a8>
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	0a 94       	dec	r0
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <setMode+0x1a4>
    1980:	80 95       	com	r24
    1982:	84 23       	and	r24, r20
    1984:	8c 93       	st	X, r24
    1986:	60 c2       	rjmp	.+1216   	; 0x1e48 <setMode+0x674>

				break;

			case PIN_INPUT_PULL_UP:

				CLEAR_BIT(DDRA, loc_pin);
    1988:	aa e3       	ldi	r26, 0x3A	; 58
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	ea e3       	ldi	r30, 0x3A	; 58
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	48 2f       	mov	r20, r24
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <setMode+0x1d0>
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	2a 95       	dec	r18
    19a6:	e2 f7       	brpl	.-8      	; 0x19a0 <setMode+0x1cc>
    19a8:	80 95       	com	r24
    19aa:	84 23       	and	r24, r20
    19ac:	8c 93       	st	X, r24

				SET_BIT(PORTA, loc_pin);
    19ae:	ab e3       	ldi	r26, 0x3B	; 59
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	eb e3       	ldi	r30, 0x3B	; 59
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	48 2f       	mov	r20, r24
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	02 2e       	mov	r0, r18
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <setMode+0x1f8>
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	0a 94       	dec	r0
    19ce:	e2 f7       	brpl	.-8      	; 0x19c8 <setMode+0x1f4>
    19d0:	84 2b       	or	r24, r20
    19d2:	8c 93       	st	X, r24
    19d4:	39 c2       	rjmp	.+1138   	; 0x1e48 <setMode+0x674>
			}
			break;

		case PORT_PORTB:

			switch (mode)
    19d6:	8d 81       	ldd	r24, Y+5	; 0x05
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	3b 87       	std	Y+11, r19	; 0x0b
    19de:	2a 87       	std	Y+10, r18	; 0x0a
    19e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    19e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	91 05       	cpc	r25, r1
    19e8:	09 f4       	brne	.+2      	; 0x19ec <setMode+0x218>
    19ea:	3e c0       	rjmp	.+124    	; 0x1a68 <setMode+0x294>
    19ec:	2a 85       	ldd	r18, Y+10	; 0x0a
    19ee:	3b 85       	ldd	r19, Y+11	; 0x0b
    19f0:	22 30       	cpi	r18, 0x02	; 2
    19f2:	31 05       	cpc	r19, r1
    19f4:	2c f4       	brge	.+10     	; 0x1a00 <setMode+0x22c>
    19f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    19f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	71 f0       	breq	.+28     	; 0x1a1a <setMode+0x246>
    19fe:	24 c2       	rjmp	.+1096   	; 0x1e48 <setMode+0x674>
    1a00:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a02:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a04:	22 30       	cpi	r18, 0x02	; 2
    1a06:	31 05       	cpc	r19, r1
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <setMode+0x238>
    1a0a:	7c c0       	rjmp	.+248    	; 0x1b04 <setMode+0x330>
    1a0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a10:	83 30       	cpi	r24, 0x03	; 3
    1a12:	91 05       	cpc	r25, r1
    1a14:	09 f4       	brne	.+2      	; 0x1a18 <setMode+0x244>
    1a16:	4e c0       	rjmp	.+156    	; 0x1ab4 <setMode+0x2e0>
    1a18:	17 c2       	rjmp	.+1070   	; 0x1e48 <setMode+0x674>
			{

			case PIN_OUTPUT_LOW:

				SET_BIT(DDRB, loc_pin);
    1a1a:	a7 e3       	ldi	r26, 0x37	; 55
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e7 e3       	ldi	r30, 0x37	; 55
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	48 2f       	mov	r20, r24
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <setMode+0x262>
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	2a 95       	dec	r18
    1a38:	e2 f7       	brpl	.-8      	; 0x1a32 <setMode+0x25e>
    1a3a:	84 2b       	or	r24, r20
    1a3c:	8c 93       	st	X, r24

				CLEAR_BIT(PORTB, loc_pin);
    1a3e:	a8 e3       	ldi	r26, 0x38	; 56
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e8 e3       	ldi	r30, 0x38	; 56
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	48 2f       	mov	r20, r24
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	02 2e       	mov	r0, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <setMode+0x288>
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	0a 94       	dec	r0
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <setMode+0x284>
    1a60:	80 95       	com	r24
    1a62:	84 23       	and	r24, r20
    1a64:	8c 93       	st	X, r24
    1a66:	f0 c1       	rjmp	.+992    	; 0x1e48 <setMode+0x674>

				break;

			case PIN_OUTPUT_HIGH:

				SET_BIT(DDRB, loc_pin);
    1a68:	a7 e3       	ldi	r26, 0x37	; 55
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e7 e3       	ldi	r30, 0x37	; 55
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	48 2f       	mov	r20, r24
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <setMode+0x2b0>
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	2a 95       	dec	r18
    1a86:	e2 f7       	brpl	.-8      	; 0x1a80 <setMode+0x2ac>
    1a88:	84 2b       	or	r24, r20
    1a8a:	8c 93       	st	X, r24

				SET_BIT(PORTB, loc_pin);
    1a8c:	a8 e3       	ldi	r26, 0x38	; 56
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e8 e3       	ldi	r30, 0x38	; 56
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	48 2f       	mov	r20, r24
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	02 2e       	mov	r0, r18
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <setMode+0x2d6>
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	0a 94       	dec	r0
    1aac:	e2 f7       	brpl	.-8      	; 0x1aa6 <setMode+0x2d2>
    1aae:	84 2b       	or	r24, r20
    1ab0:	8c 93       	st	X, r24
    1ab2:	ca c1       	rjmp	.+916    	; 0x1e48 <setMode+0x674>

				break;

			case PIN_INPUT_FLOATING:

				CLEAR_BIT(DDRB, loc_pin);
    1ab4:	a7 e3       	ldi	r26, 0x37	; 55
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e7 e3       	ldi	r30, 0x37	; 55
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	48 2f       	mov	r20, r24
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <setMode+0x2fc>
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	2a 95       	dec	r18
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <setMode+0x2f8>
    1ad4:	80 95       	com	r24
    1ad6:	84 23       	and	r24, r20
    1ad8:	8c 93       	st	X, r24

				CLEAR_BIT(PORTB, loc_pin);
    1ada:	a8 e3       	ldi	r26, 0x38	; 56
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e8 e3       	ldi	r30, 0x38	; 56
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	48 2f       	mov	r20, r24
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	02 2e       	mov	r0, r18
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <setMode+0x324>
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	0a 94       	dec	r0
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <setMode+0x320>
    1afc:	80 95       	com	r24
    1afe:	84 23       	and	r24, r20
    1b00:	8c 93       	st	X, r24
    1b02:	a2 c1       	rjmp	.+836    	; 0x1e48 <setMode+0x674>

				break;

			case PIN_INPUT_PULL_UP:

				CLEAR_BIT(DDRB, loc_pin);
    1b04:	a7 e3       	ldi	r26, 0x37	; 55
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e7 e3       	ldi	r30, 0x37	; 55
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	48 2f       	mov	r20, r24
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <setMode+0x34c>
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	2a 95       	dec	r18
    1b22:	e2 f7       	brpl	.-8      	; 0x1b1c <setMode+0x348>
    1b24:	80 95       	com	r24
    1b26:	84 23       	and	r24, r20
    1b28:	8c 93       	st	X, r24

				SET_BIT(PORTB, loc_pin);
    1b2a:	a8 e3       	ldi	r26, 0x38	; 56
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e8 e3       	ldi	r30, 0x38	; 56
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	48 2f       	mov	r20, r24
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	02 2e       	mov	r0, r18
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <setMode+0x374>
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	0a 94       	dec	r0
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <setMode+0x370>
    1b4c:	84 2b       	or	r24, r20
    1b4e:	8c 93       	st	X, r24
    1b50:	7b c1       	rjmp	.+758    	; 0x1e48 <setMode+0x674>
			break;


		case PORT_PORTC:

			switch (mode)
    1b52:	8d 81       	ldd	r24, Y+5	; 0x05
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	39 87       	std	Y+9, r19	; 0x09
    1b5a:	28 87       	std	Y+8, r18	; 0x08
    1b5c:	88 85       	ldd	r24, Y+8	; 0x08
    1b5e:	99 85       	ldd	r25, Y+9	; 0x09
    1b60:	81 30       	cpi	r24, 0x01	; 1
    1b62:	91 05       	cpc	r25, r1
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <setMode+0x394>
    1b66:	3e c0       	rjmp	.+124    	; 0x1be4 <setMode+0x410>
    1b68:	28 85       	ldd	r18, Y+8	; 0x08
    1b6a:	39 85       	ldd	r19, Y+9	; 0x09
    1b6c:	22 30       	cpi	r18, 0x02	; 2
    1b6e:	31 05       	cpc	r19, r1
    1b70:	2c f4       	brge	.+10     	; 0x1b7c <setMode+0x3a8>
    1b72:	88 85       	ldd	r24, Y+8	; 0x08
    1b74:	99 85       	ldd	r25, Y+9	; 0x09
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	71 f0       	breq	.+28     	; 0x1b96 <setMode+0x3c2>
    1b7a:	66 c1       	rjmp	.+716    	; 0x1e48 <setMode+0x674>
    1b7c:	28 85       	ldd	r18, Y+8	; 0x08
    1b7e:	39 85       	ldd	r19, Y+9	; 0x09
    1b80:	22 30       	cpi	r18, 0x02	; 2
    1b82:	31 05       	cpc	r19, r1
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <setMode+0x3b4>
    1b86:	7c c0       	rjmp	.+248    	; 0x1c80 <setMode+0x4ac>
    1b88:	88 85       	ldd	r24, Y+8	; 0x08
    1b8a:	99 85       	ldd	r25, Y+9	; 0x09
    1b8c:	83 30       	cpi	r24, 0x03	; 3
    1b8e:	91 05       	cpc	r25, r1
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <setMode+0x3c0>
    1b92:	4e c0       	rjmp	.+156    	; 0x1c30 <setMode+0x45c>
    1b94:	59 c1       	rjmp	.+690    	; 0x1e48 <setMode+0x674>
			{

			case PIN_OUTPUT_LOW:

				SET_BIT(DDRC, loc_pin);
    1b96:	a4 e3       	ldi	r26, 0x34	; 52
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e4 e3       	ldi	r30, 0x34	; 52
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	48 2f       	mov	r20, r24
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <setMode+0x3de>
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	2a 95       	dec	r18
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <setMode+0x3da>
    1bb6:	84 2b       	or	r24, r20
    1bb8:	8c 93       	st	X, r24

				CLEAR_BIT(PORTC, loc_pin);
    1bba:	a5 e3       	ldi	r26, 0x35	; 53
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e5 e3       	ldi	r30, 0x35	; 53
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	48 2f       	mov	r20, r24
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	28 2f       	mov	r18, r24
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	02 2e       	mov	r0, r18
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <setMode+0x404>
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	0a 94       	dec	r0
    1bda:	e2 f7       	brpl	.-8      	; 0x1bd4 <setMode+0x400>
    1bdc:	80 95       	com	r24
    1bde:	84 23       	and	r24, r20
    1be0:	8c 93       	st	X, r24
    1be2:	32 c1       	rjmp	.+612    	; 0x1e48 <setMode+0x674>

				break;

			case PIN_OUTPUT_HIGH:

				SET_BIT(DDRC, loc_pin);
    1be4:	a4 e3       	ldi	r26, 0x34	; 52
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e4 e3       	ldi	r30, 0x34	; 52
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	48 2f       	mov	r20, r24
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <setMode+0x42c>
    1bfc:	88 0f       	add	r24, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	2a 95       	dec	r18
    1c02:	e2 f7       	brpl	.-8      	; 0x1bfc <setMode+0x428>
    1c04:	84 2b       	or	r24, r20
    1c06:	8c 93       	st	X, r24

				SET_BIT(PORTC, loc_pin);
    1c08:	a5 e3       	ldi	r26, 0x35	; 53
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e5 e3       	ldi	r30, 0x35	; 53
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 2e       	mov	r0, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <setMode+0x452>
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	0a 94       	dec	r0
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <setMode+0x44e>
    1c2a:	84 2b       	or	r24, r20
    1c2c:	8c 93       	st	X, r24
    1c2e:	0c c1       	rjmp	.+536    	; 0x1e48 <setMode+0x674>

				break;

			case PIN_INPUT_FLOATING:

				CLEAR_BIT(DDRC, loc_pin);
    1c30:	a4 e3       	ldi	r26, 0x34	; 52
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e4 e3       	ldi	r30, 0x34	; 52
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <setMode+0x478>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	2a 95       	dec	r18
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <setMode+0x474>
    1c50:	80 95       	com	r24
    1c52:	84 23       	and	r24, r20
    1c54:	8c 93       	st	X, r24

				CLEAR_BIT(PORTC, loc_pin);
    1c56:	a5 e3       	ldi	r26, 0x35	; 53
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e5 e3       	ldi	r30, 0x35	; 53
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	48 2f       	mov	r20, r24
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	02 2e       	mov	r0, r18
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <setMode+0x4a0>
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	0a 94       	dec	r0
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <setMode+0x49c>
    1c78:	80 95       	com	r24
    1c7a:	84 23       	and	r24, r20
    1c7c:	8c 93       	st	X, r24
    1c7e:	e4 c0       	rjmp	.+456    	; 0x1e48 <setMode+0x674>

				break;

			case PIN_INPUT_PULL_UP:

				CLEAR_BIT(DDRC, loc_pin);
    1c80:	a4 e3       	ldi	r26, 0x34	; 52
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e4 e3       	ldi	r30, 0x34	; 52
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	48 2f       	mov	r20, r24
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <setMode+0x4c8>
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	2a 95       	dec	r18
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <setMode+0x4c4>
    1ca0:	80 95       	com	r24
    1ca2:	84 23       	and	r24, r20
    1ca4:	8c 93       	st	X, r24

				SET_BIT(PORTC, loc_pin);
    1ca6:	a5 e3       	ldi	r26, 0x35	; 53
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e5 e3       	ldi	r30, 0x35	; 53
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	02 2e       	mov	r0, r18
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <setMode+0x4f0>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	0a 94       	dec	r0
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <setMode+0x4ec>
    1cc8:	84 2b       	or	r24, r20
    1cca:	8c 93       	st	X, r24
    1ccc:	bd c0       	rjmp	.+378    	; 0x1e48 <setMode+0x674>



		case PORT_PORTD:

			switch (mode)
    1cce:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	3f 83       	std	Y+7, r19	; 0x07
    1cd6:	2e 83       	std	Y+6, r18	; 0x06
    1cd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cda:	9f 81       	ldd	r25, Y+7	; 0x07
    1cdc:	81 30       	cpi	r24, 0x01	; 1
    1cde:	91 05       	cpc	r25, r1
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <setMode+0x510>
    1ce2:	3e c0       	rjmp	.+124    	; 0x1d60 <setMode+0x58c>
    1ce4:	2e 81       	ldd	r18, Y+6	; 0x06
    1ce6:	3f 81       	ldd	r19, Y+7	; 0x07
    1ce8:	22 30       	cpi	r18, 0x02	; 2
    1cea:	31 05       	cpc	r19, r1
    1cec:	2c f4       	brge	.+10     	; 0x1cf8 <setMode+0x524>
    1cee:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf0:	9f 81       	ldd	r25, Y+7	; 0x07
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	71 f0       	breq	.+28     	; 0x1d12 <setMode+0x53e>
    1cf6:	a8 c0       	rjmp	.+336    	; 0x1e48 <setMode+0x674>
    1cf8:	2e 81       	ldd	r18, Y+6	; 0x06
    1cfa:	3f 81       	ldd	r19, Y+7	; 0x07
    1cfc:	22 30       	cpi	r18, 0x02	; 2
    1cfe:	31 05       	cpc	r19, r1
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <setMode+0x530>
    1d02:	7c c0       	rjmp	.+248    	; 0x1dfc <setMode+0x628>
    1d04:	8e 81       	ldd	r24, Y+6	; 0x06
    1d06:	9f 81       	ldd	r25, Y+7	; 0x07
    1d08:	83 30       	cpi	r24, 0x03	; 3
    1d0a:	91 05       	cpc	r25, r1
    1d0c:	09 f4       	brne	.+2      	; 0x1d10 <setMode+0x53c>
    1d0e:	4e c0       	rjmp	.+156    	; 0x1dac <setMode+0x5d8>
    1d10:	9b c0       	rjmp	.+310    	; 0x1e48 <setMode+0x674>
			{

			case PIN_OUTPUT_LOW:

				SET_BIT(DDRD, loc_pin);
    1d12:	a1 e3       	ldi	r26, 0x31	; 49
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e1 e3       	ldi	r30, 0x31	; 49
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	48 2f       	mov	r20, r24
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <setMode+0x55a>
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	2a 95       	dec	r18
    1d30:	e2 f7       	brpl	.-8      	; 0x1d2a <setMode+0x556>
    1d32:	84 2b       	or	r24, r20
    1d34:	8c 93       	st	X, r24

				CLEAR_BIT(PORTD, loc_pin);
    1d36:	a2 e3       	ldi	r26, 0x32	; 50
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	e2 e3       	ldi	r30, 0x32	; 50
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	48 2f       	mov	r20, r24
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	28 2f       	mov	r18, r24
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	02 2e       	mov	r0, r18
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <setMode+0x580>
    1d50:	88 0f       	add	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	0a 94       	dec	r0
    1d56:	e2 f7       	brpl	.-8      	; 0x1d50 <setMode+0x57c>
    1d58:	80 95       	com	r24
    1d5a:	84 23       	and	r24, r20
    1d5c:	8c 93       	st	X, r24
    1d5e:	74 c0       	rjmp	.+232    	; 0x1e48 <setMode+0x674>

				break;

			case PIN_OUTPUT_HIGH:

				SET_BIT(DDRD, loc_pin);
    1d60:	a1 e3       	ldi	r26, 0x31	; 49
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e1 e3       	ldi	r30, 0x31	; 49
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	48 2f       	mov	r20, r24
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <setMode+0x5a8>
    1d78:	88 0f       	add	r24, r24
    1d7a:	99 1f       	adc	r25, r25
    1d7c:	2a 95       	dec	r18
    1d7e:	e2 f7       	brpl	.-8      	; 0x1d78 <setMode+0x5a4>
    1d80:	84 2b       	or	r24, r20
    1d82:	8c 93       	st	X, r24

				SET_BIT(PORTD, loc_pin);
    1d84:	a2 e3       	ldi	r26, 0x32	; 50
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e2 e3       	ldi	r30, 0x32	; 50
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	48 2f       	mov	r20, r24
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	28 2f       	mov	r18, r24
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	02 2e       	mov	r0, r18
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <setMode+0x5ce>
    1d9e:	88 0f       	add	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	0a 94       	dec	r0
    1da4:	e2 f7       	brpl	.-8      	; 0x1d9e <setMode+0x5ca>
    1da6:	84 2b       	or	r24, r20
    1da8:	8c 93       	st	X, r24
    1daa:	4e c0       	rjmp	.+156    	; 0x1e48 <setMode+0x674>

				break;

			case PIN_INPUT_FLOATING:

				CLEAR_BIT(DDRD, loc_pin);
    1dac:	a1 e3       	ldi	r26, 0x31	; 49
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e1 e3       	ldi	r30, 0x31	; 49
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	48 2f       	mov	r20, r24
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <setMode+0x5f4>
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	2a 95       	dec	r18
    1dca:	e2 f7       	brpl	.-8      	; 0x1dc4 <setMode+0x5f0>
    1dcc:	80 95       	com	r24
    1dce:	84 23       	and	r24, r20
    1dd0:	8c 93       	st	X, r24

				CLEAR_BIT(PORTD, loc_pin);
    1dd2:	a2 e3       	ldi	r26, 0x32	; 50
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e2 e3       	ldi	r30, 0x32	; 50
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	48 2f       	mov	r20, r24
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	02 2e       	mov	r0, r18
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <setMode+0x61c>
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	0a 94       	dec	r0
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <setMode+0x618>
    1df4:	80 95       	com	r24
    1df6:	84 23       	and	r24, r20
    1df8:	8c 93       	st	X, r24
    1dfa:	26 c0       	rjmp	.+76     	; 0x1e48 <setMode+0x674>

				break;

			case PIN_INPUT_PULL_UP:

				CLEAR_BIT(DDRD, loc_pin);
    1dfc:	a1 e3       	ldi	r26, 0x31	; 49
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e1 e3       	ldi	r30, 0x31	; 49
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	48 2f       	mov	r20, r24
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <setMode+0x644>
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	2a 95       	dec	r18
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <setMode+0x640>
    1e1c:	80 95       	com	r24
    1e1e:	84 23       	and	r24, r20
    1e20:	8c 93       	st	X, r24

				SET_BIT(PORTD, loc_pin);
    1e22:	a2 e3       	ldi	r26, 0x32	; 50
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e2 e3       	ldi	r30, 0x32	; 50
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	48 2f       	mov	r20, r24
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	02 2e       	mov	r0, r18
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <setMode+0x66c>
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	0a 94       	dec	r0
    1e42:	e2 f7       	brpl	.-8      	; 0x1e3c <setMode+0x668>
    1e44:	84 2b       	or	r24, r20
    1e46:	8c 93       	st	X, r24


		}
	}

	return return_errorStatus;
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e4a:	2f 96       	adiw	r28, 0x0f	; 15
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	f8 94       	cli
    1e50:	de bf       	out	0x3e, r29	; 62
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	cd bf       	out	0x3d, r28	; 61
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	08 95       	ret

00001e5c <LCD_init>:
#include<stdlib.h>
#include<stdio.h>


void LCD_init(void)
{
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	2e 97       	sbiw	r28, 0x0e	; 14
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	a0 ef       	ldi	r26, 0xF0	; 240
    1e76:	b1 e4       	ldi	r27, 0x41	; 65
    1e78:	8b 87       	std	Y+11, r24	; 0x0b
    1e7a:	9c 87       	std	Y+12, r25	; 0x0c
    1e7c:	ad 87       	std	Y+13, r26	; 0x0d
    1e7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	4a e7       	ldi	r20, 0x7A	; 122
    1e8e:	53 e4       	ldi	r21, 0x43	; 67
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	8f 83       	std	Y+7, r24	; 0x07
    1e9a:	98 87       	std	Y+8, r25	; 0x08
    1e9c:	a9 87       	std	Y+9, r26	; 0x09
    1e9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ea0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea2:	78 85       	ldd	r23, Y+8	; 0x08
    1ea4:	89 85       	ldd	r24, Y+9	; 0x09
    1ea6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e8       	ldi	r20, 0x80	; 128
    1eae:	5f e3       	ldi	r21, 0x3F	; 63
    1eb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb4:	88 23       	and	r24, r24
    1eb6:	2c f4       	brge	.+10     	; 0x1ec2 <LCD_init+0x66>
		__ticks = 1;
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	9e 83       	std	Y+6, r25	; 0x06
    1ebe:	8d 83       	std	Y+5, r24	; 0x05
    1ec0:	3f c0       	rjmp	.+126    	; 0x1f40 <LCD_init+0xe4>
	else if (__tmp > 65535)
    1ec2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec4:	78 85       	ldd	r23, Y+8	; 0x08
    1ec6:	89 85       	ldd	r24, Y+9	; 0x09
    1ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	3f ef       	ldi	r19, 0xFF	; 255
    1ece:	4f e7       	ldi	r20, 0x7F	; 127
    1ed0:	57 e4       	ldi	r21, 0x47	; 71
    1ed2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed6:	18 16       	cp	r1, r24
    1ed8:	4c f5       	brge	.+82     	; 0x1f2c <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1edc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ede:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e2       	ldi	r20, 0x20	; 32
    1ee8:	51 e4       	ldi	r21, 0x41	; 65
    1eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	bc 01       	movw	r22, r24
    1ef4:	cd 01       	movw	r24, r26
    1ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	9e 83       	std	Y+6, r25	; 0x06
    1f00:	8d 83       	std	Y+5, r24	; 0x05
    1f02:	0f c0       	rjmp	.+30     	; 0x1f22 <LCD_init+0xc6>
    1f04:	89 e1       	ldi	r24, 0x19	; 25
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	9c 83       	std	Y+4, r25	; 0x04
    1f0a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <LCD_init+0xb4>
    1f14:	9c 83       	std	Y+4, r25	; 0x04
    1f16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f18:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	9e 83       	std	Y+6, r25	; 0x06
    1f20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	9e 81       	ldd	r25, Y+6	; 0x06
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	69 f7       	brne	.-38     	; 0x1f04 <LCD_init+0xa8>
    1f2a:	14 c0       	rjmp	.+40     	; 0x1f54 <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2e:	78 85       	ldd	r23, Y+8	; 0x08
    1f30:	89 85       	ldd	r24, Y+9	; 0x09
    1f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	9e 83       	std	Y+6, r25	; 0x06
    1f3e:	8d 83       	std	Y+5, r24	; 0x05
    1f40:	8d 81       	ldd	r24, Y+5	; 0x05
    1f42:	9e 81       	ldd	r25, Y+6	; 0x06
    1f44:	9a 83       	std	Y+2, r25	; 0x02
    1f46:	89 83       	std	Y+1, r24	; 0x01
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <LCD_init+0xf0>
    1f50:	9a 83       	std	Y+2, r25	; 0x02
    1f52:	89 83       	std	Y+1, r24	; 0x01
#if(DATA_BITS_MODE == EIGHT_BITS_MODE)

	_delay_ms(30);

	LCD_sendCommand(LCD8_2_LINES_COMMAND);
    1f54:	88 e3       	ldi	r24, 0x38	; 56
    1f56:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <LCD_sendCommand>
		_delay_ms(1);
		LCD_sendCommand(LCD4_2_LINES_SET_COMMAND);

#endif

		LCD_sendCommand(LCD_CURSOR_OFF);
    1f5a:	8c e0       	ldi	r24, 0x0C	; 12
    1f5c:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <LCD_sendCommand>
		LCD_sendCommand(LCD_SCREEN_CLEAR);
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <LCD_sendCommand>
}
    1f66:	2e 96       	adiw	r28, 0x0e	; 14
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <LCD_sendCommand>:
void LCD_sendCommand(u8 command)
{
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	e9 97       	sbiw	r28, 0x39	; 57
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	89 af       	std	Y+57, r24	; 0x39
	dio_writePin(LCD_RS_PIN_ID,LOGIC_LOW);
    1f8e:	80 e1       	ldi	r24, 0x10	; 16
    1f90:	60 e0       	ldi	r22, 0x00	; 0
    1f92:	0e 94 94 06 	call	0xd28	; 0xd28 <dio_writePin>
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	a0 e8       	ldi	r26, 0x80	; 128
    1f9c:	bf e3       	ldi	r27, 0x3F	; 63
    1f9e:	8d ab       	std	Y+53, r24	; 0x35
    1fa0:	9e ab       	std	Y+54, r25	; 0x36
    1fa2:	af ab       	std	Y+55, r26	; 0x37
    1fa4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa6:	6d a9       	ldd	r22, Y+53	; 0x35
    1fa8:	7e a9       	ldd	r23, Y+54	; 0x36
    1faa:	8f a9       	ldd	r24, Y+55	; 0x37
    1fac:	98 ad       	ldd	r25, Y+56	; 0x38
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	4a e7       	ldi	r20, 0x7A	; 122
    1fb4:	53 e4       	ldi	r21, 0x43	; 67
    1fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	89 ab       	std	Y+49, r24	; 0x31
    1fc0:	9a ab       	std	Y+50, r25	; 0x32
    1fc2:	ab ab       	std	Y+51, r26	; 0x33
    1fc4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fc6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fc8:	7a a9       	ldd	r23, Y+50	; 0x32
    1fca:	8b a9       	ldd	r24, Y+51	; 0x33
    1fcc:	9c a9       	ldd	r25, Y+52	; 0x34
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e8       	ldi	r20, 0x80	; 128
    1fd4:	5f e3       	ldi	r21, 0x3F	; 63
    1fd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fda:	88 23       	and	r24, r24
    1fdc:	2c f4       	brge	.+10     	; 0x1fe8 <LCD_sendCommand+0x70>
		__ticks = 1;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	98 ab       	std	Y+48, r25	; 0x30
    1fe4:	8f a7       	std	Y+47, r24	; 0x2f
    1fe6:	3f c0       	rjmp	.+126    	; 0x2066 <LCD_sendCommand+0xee>
	else if (__tmp > 65535)
    1fe8:	69 a9       	ldd	r22, Y+49	; 0x31
    1fea:	7a a9       	ldd	r23, Y+50	; 0x32
    1fec:	8b a9       	ldd	r24, Y+51	; 0x33
    1fee:	9c a9       	ldd	r25, Y+52	; 0x34
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	3f ef       	ldi	r19, 0xFF	; 255
    1ff4:	4f e7       	ldi	r20, 0x7F	; 127
    1ff6:	57 e4       	ldi	r21, 0x47	; 71
    1ff8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffc:	18 16       	cp	r1, r24
    1ffe:	4c f5       	brge	.+82     	; 0x2052 <LCD_sendCommand+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2000:	6d a9       	ldd	r22, Y+53	; 0x35
    2002:	7e a9       	ldd	r23, Y+54	; 0x36
    2004:	8f a9       	ldd	r24, Y+55	; 0x37
    2006:	98 ad       	ldd	r25, Y+56	; 0x38
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e2       	ldi	r20, 0x20	; 32
    200e:	51 e4       	ldi	r21, 0x41	; 65
    2010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	98 ab       	std	Y+48, r25	; 0x30
    2026:	8f a7       	std	Y+47, r24	; 0x2f
    2028:	0f c0       	rjmp	.+30     	; 0x2048 <LCD_sendCommand+0xd0>
    202a:	89 e1       	ldi	r24, 0x19	; 25
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	9e a7       	std	Y+46, r25	; 0x2e
    2030:	8d a7       	std	Y+45, r24	; 0x2d
    2032:	8d a5       	ldd	r24, Y+45	; 0x2d
    2034:	9e a5       	ldd	r25, Y+46	; 0x2e
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	f1 f7       	brne	.-4      	; 0x2036 <LCD_sendCommand+0xbe>
    203a:	9e a7       	std	Y+46, r25	; 0x2e
    203c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2040:	98 a9       	ldd	r25, Y+48	; 0x30
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	98 ab       	std	Y+48, r25	; 0x30
    2046:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2048:	8f a5       	ldd	r24, Y+47	; 0x2f
    204a:	98 a9       	ldd	r25, Y+48	; 0x30
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	69 f7       	brne	.-38     	; 0x202a <LCD_sendCommand+0xb2>
    2050:	14 c0       	rjmp	.+40     	; 0x207a <LCD_sendCommand+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2052:	69 a9       	ldd	r22, Y+49	; 0x31
    2054:	7a a9       	ldd	r23, Y+50	; 0x32
    2056:	8b a9       	ldd	r24, Y+51	; 0x33
    2058:	9c a9       	ldd	r25, Y+52	; 0x34
    205a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	98 ab       	std	Y+48, r25	; 0x30
    2064:	8f a7       	std	Y+47, r24	; 0x2f
    2066:	8f a5       	ldd	r24, Y+47	; 0x2f
    2068:	98 a9       	ldd	r25, Y+48	; 0x30
    206a:	9c a7       	std	Y+44, r25	; 0x2c
    206c:	8b a7       	std	Y+43, r24	; 0x2b
    206e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2070:	9c a5       	ldd	r25, Y+44	; 0x2c
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <LCD_sendCommand+0xfa>
    2076:	9c a7       	std	Y+44, r25	; 0x2c
    2078:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	dio_writePin(LCD_E_PIN_ID,LOGIC_HIGH);
    207a:	81 e1       	ldi	r24, 0x11	; 17
    207c:	61 e0       	ldi	r22, 0x01	; 1
    207e:	0e 94 94 06 	call	0xd28	; 0xd28 <dio_writePin>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	a0 e8       	ldi	r26, 0x80	; 128
    2088:	bf e3       	ldi	r27, 0x3F	; 63
    208a:	8f a3       	std	Y+39, r24	; 0x27
    208c:	98 a7       	std	Y+40, r25	; 0x28
    208e:	a9 a7       	std	Y+41, r26	; 0x29
    2090:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2092:	6f a1       	ldd	r22, Y+39	; 0x27
    2094:	78 a5       	ldd	r23, Y+40	; 0x28
    2096:	89 a5       	ldd	r24, Y+41	; 0x29
    2098:	9a a5       	ldd	r25, Y+42	; 0x2a
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4a e7       	ldi	r20, 0x7A	; 122
    20a0:	53 e4       	ldi	r21, 0x43	; 67
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	8b a3       	std	Y+35, r24	; 0x23
    20ac:	9c a3       	std	Y+36, r25	; 0x24
    20ae:	ad a3       	std	Y+37, r26	; 0x25
    20b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20b2:	6b a1       	ldd	r22, Y+35	; 0x23
    20b4:	7c a1       	ldd	r23, Y+36	; 0x24
    20b6:	8d a1       	ldd	r24, Y+37	; 0x25
    20b8:	9e a1       	ldd	r25, Y+38	; 0x26
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c6:	88 23       	and	r24, r24
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <LCD_sendCommand+0x15c>
		__ticks = 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9a a3       	std	Y+34, r25	; 0x22
    20d0:	89 a3       	std	Y+33, r24	; 0x21
    20d2:	3f c0       	rjmp	.+126    	; 0x2152 <LCD_sendCommand+0x1da>
	else if (__tmp > 65535)
    20d4:	6b a1       	ldd	r22, Y+35	; 0x23
    20d6:	7c a1       	ldd	r23, Y+36	; 0x24
    20d8:	8d a1       	ldd	r24, Y+37	; 0x25
    20da:	9e a1       	ldd	r25, Y+38	; 0x26
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	4c f5       	brge	.+82     	; 0x213e <LCD_sendCommand+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ec:	6f a1       	ldd	r22, Y+39	; 0x27
    20ee:	78 a5       	ldd	r23, Y+40	; 0x28
    20f0:	89 a5       	ldd	r24, Y+41	; 0x29
    20f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e2       	ldi	r20, 0x20	; 32
    20fa:	51 e4       	ldi	r21, 0x41	; 65
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9a a3       	std	Y+34, r25	; 0x22
    2112:	89 a3       	std	Y+33, r24	; 0x21
    2114:	0f c0       	rjmp	.+30     	; 0x2134 <LCD_sendCommand+0x1bc>
    2116:	89 e1       	ldi	r24, 0x19	; 25
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	98 a3       	std	Y+32, r25	; 0x20
    211c:	8f 8f       	std	Y+31, r24	; 0x1f
    211e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2120:	98 a1       	ldd	r25, Y+32	; 0x20
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <LCD_sendCommand+0x1aa>
    2126:	98 a3       	std	Y+32, r25	; 0x20
    2128:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212a:	89 a1       	ldd	r24, Y+33	; 0x21
    212c:	9a a1       	ldd	r25, Y+34	; 0x22
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	9a a3       	std	Y+34, r25	; 0x22
    2132:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2134:	89 a1       	ldd	r24, Y+33	; 0x21
    2136:	9a a1       	ldd	r25, Y+34	; 0x22
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	69 f7       	brne	.-38     	; 0x2116 <LCD_sendCommand+0x19e>
    213c:	14 c0       	rjmp	.+40     	; 0x2166 <LCD_sendCommand+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213e:	6b a1       	ldd	r22, Y+35	; 0x23
    2140:	7c a1       	ldd	r23, Y+36	; 0x24
    2142:	8d a1       	ldd	r24, Y+37	; 0x25
    2144:	9e a1       	ldd	r25, Y+38	; 0x26
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9a a3       	std	Y+34, r25	; 0x22
    2150:	89 a3       	std	Y+33, r24	; 0x21
    2152:	89 a1       	ldd	r24, Y+33	; 0x21
    2154:	9a a1       	ldd	r25, Y+34	; 0x22
    2156:	9e 8f       	std	Y+30, r25	; 0x1e
    2158:	8d 8f       	std	Y+29, r24	; 0x1d
    215a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    215c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <LCD_sendCommand+0x1e6>
    2162:	9e 8f       	std	Y+30, r25	; 0x1e
    2164:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if(DATA_BITS_MODE == EIGHT_BITS_MODE)

	dio_writePort(LCD_DATA_PORT_ID,command);
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	69 ad       	ldd	r22, Y+57	; 0x39
    216a:	0e 94 12 09 	call	0x1224	; 0x1224 <dio_writePort>
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	a0 e8       	ldi	r26, 0x80	; 128
    2174:	bf e3       	ldi	r27, 0x3F	; 63
    2176:	89 8f       	std	Y+25, r24	; 0x19
    2178:	9a 8f       	std	Y+26, r25	; 0x1a
    217a:	ab 8f       	std	Y+27, r26	; 0x1b
    217c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217e:	69 8d       	ldd	r22, Y+25	; 0x19
    2180:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2182:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2184:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	4a e7       	ldi	r20, 0x7A	; 122
    218c:	53 e4       	ldi	r21, 0x43	; 67
    218e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	8d 8b       	std	Y+21, r24	; 0x15
    2198:	9e 8b       	std	Y+22, r25	; 0x16
    219a:	af 8b       	std	Y+23, r26	; 0x17
    219c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    219e:	6d 89       	ldd	r22, Y+21	; 0x15
    21a0:	7e 89       	ldd	r23, Y+22	; 0x16
    21a2:	8f 89       	ldd	r24, Y+23	; 0x17
    21a4:	98 8d       	ldd	r25, Y+24	; 0x18
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e8       	ldi	r20, 0x80	; 128
    21ac:	5f e3       	ldi	r21, 0x3F	; 63
    21ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b2:	88 23       	and	r24, r24
    21b4:	2c f4       	brge	.+10     	; 0x21c0 <LCD_sendCommand+0x248>
		__ticks = 1;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	9c 8b       	std	Y+20, r25	; 0x14
    21bc:	8b 8b       	std	Y+19, r24	; 0x13
    21be:	3f c0       	rjmp	.+126    	; 0x223e <LCD_sendCommand+0x2c6>
	else if (__tmp > 65535)
    21c0:	6d 89       	ldd	r22, Y+21	; 0x15
    21c2:	7e 89       	ldd	r23, Y+22	; 0x16
    21c4:	8f 89       	ldd	r24, Y+23	; 0x17
    21c6:	98 8d       	ldd	r25, Y+24	; 0x18
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	3f ef       	ldi	r19, 0xFF	; 255
    21cc:	4f e7       	ldi	r20, 0x7F	; 127
    21ce:	57 e4       	ldi	r21, 0x47	; 71
    21d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21d4:	18 16       	cp	r1, r24
    21d6:	4c f5       	brge	.+82     	; 0x222a <LCD_sendCommand+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d8:	69 8d       	ldd	r22, Y+25	; 0x19
    21da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e2       	ldi	r20, 0x20	; 32
    21e6:	51 e4       	ldi	r21, 0x41	; 65
    21e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	bc 01       	movw	r22, r24
    21f2:	cd 01       	movw	r24, r26
    21f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	9c 8b       	std	Y+20, r25	; 0x14
    21fe:	8b 8b       	std	Y+19, r24	; 0x13
    2200:	0f c0       	rjmp	.+30     	; 0x2220 <LCD_sendCommand+0x2a8>
    2202:	89 e1       	ldi	r24, 0x19	; 25
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	9a 8b       	std	Y+18, r25	; 0x12
    2208:	89 8b       	std	Y+17, r24	; 0x11
    220a:	89 89       	ldd	r24, Y+17	; 0x11
    220c:	9a 89       	ldd	r25, Y+18	; 0x12
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <LCD_sendCommand+0x296>
    2212:	9a 8b       	std	Y+18, r25	; 0x12
    2214:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2216:	8b 89       	ldd	r24, Y+19	; 0x13
    2218:	9c 89       	ldd	r25, Y+20	; 0x14
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	9c 8b       	std	Y+20, r25	; 0x14
    221e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2220:	8b 89       	ldd	r24, Y+19	; 0x13
    2222:	9c 89       	ldd	r25, Y+20	; 0x14
    2224:	00 97       	sbiw	r24, 0x00	; 0
    2226:	69 f7       	brne	.-38     	; 0x2202 <LCD_sendCommand+0x28a>
    2228:	14 c0       	rjmp	.+40     	; 0x2252 <LCD_sendCommand+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222a:	6d 89       	ldd	r22, Y+21	; 0x15
    222c:	7e 89       	ldd	r23, Y+22	; 0x16
    222e:	8f 89       	ldd	r24, Y+23	; 0x17
    2230:	98 8d       	ldd	r25, Y+24	; 0x18
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	9c 8b       	std	Y+20, r25	; 0x14
    223c:	8b 8b       	std	Y+19, r24	; 0x13
    223e:	8b 89       	ldd	r24, Y+19	; 0x13
    2240:	9c 89       	ldd	r25, Y+20	; 0x14
    2242:	98 8b       	std	Y+16, r25	; 0x10
    2244:	8f 87       	std	Y+15, r24	; 0x0f
    2246:	8f 85       	ldd	r24, Y+15	; 0x0f
    2248:	98 89       	ldd	r25, Y+16	; 0x10
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	f1 f7       	brne	.-4      	; 0x224a <LCD_sendCommand+0x2d2>
    224e:	98 8b       	std	Y+16, r25	; 0x10
    2250:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	dio_writePin(LCD_E_PIN_ID,LOGIC_LOW);
    2252:	81 e1       	ldi	r24, 0x11	; 17
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	0e 94 94 06 	call	0xd28	; 0xd28 <dio_writePin>
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	a0 e8       	ldi	r26, 0x80	; 128
    2260:	bf e3       	ldi	r27, 0x3F	; 63
    2262:	8b 87       	std	Y+11, r24	; 0x0b
    2264:	9c 87       	std	Y+12, r25	; 0x0c
    2266:	ad 87       	std	Y+13, r26	; 0x0d
    2268:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226a:	6b 85       	ldd	r22, Y+11	; 0x0b
    226c:	7c 85       	ldd	r23, Y+12	; 0x0c
    226e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2270:	9e 85       	ldd	r25, Y+14	; 0x0e
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	4a e7       	ldi	r20, 0x7A	; 122
    2278:	53 e4       	ldi	r21, 0x43	; 67
    227a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	8f 83       	std	Y+7, r24	; 0x07
    2284:	98 87       	std	Y+8, r25	; 0x08
    2286:	a9 87       	std	Y+9, r26	; 0x09
    2288:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    228a:	6f 81       	ldd	r22, Y+7	; 0x07
    228c:	78 85       	ldd	r23, Y+8	; 0x08
    228e:	89 85       	ldd	r24, Y+9	; 0x09
    2290:	9a 85       	ldd	r25, Y+10	; 0x0a
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e8       	ldi	r20, 0x80	; 128
    2298:	5f e3       	ldi	r21, 0x3F	; 63
    229a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    229e:	88 23       	and	r24, r24
    22a0:	2c f4       	brge	.+10     	; 0x22ac <LCD_sendCommand+0x334>
		__ticks = 1;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	9e 83       	std	Y+6, r25	; 0x06
    22a8:	8d 83       	std	Y+5, r24	; 0x05
    22aa:	3f c0       	rjmp	.+126    	; 0x232a <LCD_sendCommand+0x3b2>
	else if (__tmp > 65535)
    22ac:	6f 81       	ldd	r22, Y+7	; 0x07
    22ae:	78 85       	ldd	r23, Y+8	; 0x08
    22b0:	89 85       	ldd	r24, Y+9	; 0x09
    22b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	3f ef       	ldi	r19, 0xFF	; 255
    22b8:	4f e7       	ldi	r20, 0x7F	; 127
    22ba:	57 e4       	ldi	r21, 0x47	; 71
    22bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c0:	18 16       	cp	r1, r24
    22c2:	4c f5       	brge	.+82     	; 0x2316 <LCD_sendCommand+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	40 e2       	ldi	r20, 0x20	; 32
    22d2:	51 e4       	ldi	r21, 0x41	; 65
    22d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	bc 01       	movw	r22, r24
    22de:	cd 01       	movw	r24, r26
    22e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9e 83       	std	Y+6, r25	; 0x06
    22ea:	8d 83       	std	Y+5, r24	; 0x05
    22ec:	0f c0       	rjmp	.+30     	; 0x230c <LCD_sendCommand+0x394>
    22ee:	89 e1       	ldi	r24, 0x19	; 25
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	9c 83       	std	Y+4, r25	; 0x04
    22f4:	8b 83       	std	Y+3, r24	; 0x03
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	9c 81       	ldd	r25, Y+4	; 0x04
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <LCD_sendCommand+0x382>
    22fe:	9c 83       	std	Y+4, r25	; 0x04
    2300:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2302:	8d 81       	ldd	r24, Y+5	; 0x05
    2304:	9e 81       	ldd	r25, Y+6	; 0x06
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	9e 83       	std	Y+6, r25	; 0x06
    230a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230c:	8d 81       	ldd	r24, Y+5	; 0x05
    230e:	9e 81       	ldd	r25, Y+6	; 0x06
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	69 f7       	brne	.-38     	; 0x22ee <LCD_sendCommand+0x376>
    2314:	14 c0       	rjmp	.+40     	; 0x233e <LCD_sendCommand+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2316:	6f 81       	ldd	r22, Y+7	; 0x07
    2318:	78 85       	ldd	r23, Y+8	; 0x08
    231a:	89 85       	ldd	r24, Y+9	; 0x09
    231c:	9a 85       	ldd	r25, Y+10	; 0x0a
    231e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	9e 83       	std	Y+6, r25	; 0x06
    2328:	8d 83       	std	Y+5, r24	; 0x05
    232a:	8d 81       	ldd	r24, Y+5	; 0x05
    232c:	9e 81       	ldd	r25, Y+6	; 0x06
    232e:	9a 83       	std	Y+2, r25	; 0x02
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	9a 81       	ldd	r25, Y+2	; 0x02
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	f1 f7       	brne	.-4      	; 0x2336 <LCD_sendCommand+0x3be>
    233a:	9a 83       	std	Y+2, r25	; 0x02
    233c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	dio_writePin(LCD_E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);
#endif

}
    233e:	e9 96       	adiw	r28, 0x39	; 57
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <LCD_displayCharacter>:
void LCD_displayCharacter(u8 character)
{
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	e9 97       	sbiw	r28, 0x39	; 57
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	89 af       	std	Y+57, r24	; 0x39
	dio_writePin(LCD_RS_PIN_ID,LOGIC_HIGH);
    2366:	80 e1       	ldi	r24, 0x10	; 16
    2368:	61 e0       	ldi	r22, 0x01	; 1
    236a:	0e 94 94 06 	call	0xd28	; 0xd28 <dio_writePin>
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	a0 e8       	ldi	r26, 0x80	; 128
    2374:	bf e3       	ldi	r27, 0x3F	; 63
    2376:	8d ab       	std	Y+53, r24	; 0x35
    2378:	9e ab       	std	Y+54, r25	; 0x36
    237a:	af ab       	std	Y+55, r26	; 0x37
    237c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237e:	6d a9       	ldd	r22, Y+53	; 0x35
    2380:	7e a9       	ldd	r23, Y+54	; 0x36
    2382:	8f a9       	ldd	r24, Y+55	; 0x37
    2384:	98 ad       	ldd	r25, Y+56	; 0x38
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	4a e7       	ldi	r20, 0x7A	; 122
    238c:	53 e4       	ldi	r21, 0x43	; 67
    238e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	89 ab       	std	Y+49, r24	; 0x31
    2398:	9a ab       	std	Y+50, r25	; 0x32
    239a:	ab ab       	std	Y+51, r26	; 0x33
    239c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    239e:	69 a9       	ldd	r22, Y+49	; 0x31
    23a0:	7a a9       	ldd	r23, Y+50	; 0x32
    23a2:	8b a9       	ldd	r24, Y+51	; 0x33
    23a4:	9c a9       	ldd	r25, Y+52	; 0x34
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e8       	ldi	r20, 0x80	; 128
    23ac:	5f e3       	ldi	r21, 0x3F	; 63
    23ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b2:	88 23       	and	r24, r24
    23b4:	2c f4       	brge	.+10     	; 0x23c0 <LCD_displayCharacter+0x70>
		__ticks = 1;
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	98 ab       	std	Y+48, r25	; 0x30
    23bc:	8f a7       	std	Y+47, r24	; 0x2f
    23be:	3f c0       	rjmp	.+126    	; 0x243e <LCD_displayCharacter+0xee>
	else if (__tmp > 65535)
    23c0:	69 a9       	ldd	r22, Y+49	; 0x31
    23c2:	7a a9       	ldd	r23, Y+50	; 0x32
    23c4:	8b a9       	ldd	r24, Y+51	; 0x33
    23c6:	9c a9       	ldd	r25, Y+52	; 0x34
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	3f ef       	ldi	r19, 0xFF	; 255
    23cc:	4f e7       	ldi	r20, 0x7F	; 127
    23ce:	57 e4       	ldi	r21, 0x47	; 71
    23d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d4:	18 16       	cp	r1, r24
    23d6:	4c f5       	brge	.+82     	; 0x242a <LCD_displayCharacter+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d8:	6d a9       	ldd	r22, Y+53	; 0x35
    23da:	7e a9       	ldd	r23, Y+54	; 0x36
    23dc:	8f a9       	ldd	r24, Y+55	; 0x37
    23de:	98 ad       	ldd	r25, Y+56	; 0x38
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e2       	ldi	r20, 0x20	; 32
    23e6:	51 e4       	ldi	r21, 0x41	; 65
    23e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	bc 01       	movw	r22, r24
    23f2:	cd 01       	movw	r24, r26
    23f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	98 ab       	std	Y+48, r25	; 0x30
    23fe:	8f a7       	std	Y+47, r24	; 0x2f
    2400:	0f c0       	rjmp	.+30     	; 0x2420 <LCD_displayCharacter+0xd0>
    2402:	89 e1       	ldi	r24, 0x19	; 25
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	9e a7       	std	Y+46, r25	; 0x2e
    2408:	8d a7       	std	Y+45, r24	; 0x2d
    240a:	8d a5       	ldd	r24, Y+45	; 0x2d
    240c:	9e a5       	ldd	r25, Y+46	; 0x2e
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <LCD_displayCharacter+0xbe>
    2412:	9e a7       	std	Y+46, r25	; 0x2e
    2414:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2416:	8f a5       	ldd	r24, Y+47	; 0x2f
    2418:	98 a9       	ldd	r25, Y+48	; 0x30
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	98 ab       	std	Y+48, r25	; 0x30
    241e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2420:	8f a5       	ldd	r24, Y+47	; 0x2f
    2422:	98 a9       	ldd	r25, Y+48	; 0x30
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	69 f7       	brne	.-38     	; 0x2402 <LCD_displayCharacter+0xb2>
    2428:	14 c0       	rjmp	.+40     	; 0x2452 <LCD_displayCharacter+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242a:	69 a9       	ldd	r22, Y+49	; 0x31
    242c:	7a a9       	ldd	r23, Y+50	; 0x32
    242e:	8b a9       	ldd	r24, Y+51	; 0x33
    2430:	9c a9       	ldd	r25, Y+52	; 0x34
    2432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	98 ab       	std	Y+48, r25	; 0x30
    243c:	8f a7       	std	Y+47, r24	; 0x2f
    243e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2440:	98 a9       	ldd	r25, Y+48	; 0x30
    2442:	9c a7       	std	Y+44, r25	; 0x2c
    2444:	8b a7       	std	Y+43, r24	; 0x2b
    2446:	8b a5       	ldd	r24, Y+43	; 0x2b
    2448:	9c a5       	ldd	r25, Y+44	; 0x2c
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <LCD_displayCharacter+0xfa>
    244e:	9c a7       	std	Y+44, r25	; 0x2c
    2450:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	dio_writePin(LCD_E_PIN_ID,LOGIC_HIGH);
    2452:	81 e1       	ldi	r24, 0x11	; 17
    2454:	61 e0       	ldi	r22, 0x01	; 1
    2456:	0e 94 94 06 	call	0xd28	; 0xd28 <dio_writePin>
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	a0 e8       	ldi	r26, 0x80	; 128
    2460:	bf e3       	ldi	r27, 0x3F	; 63
    2462:	8f a3       	std	Y+39, r24	; 0x27
    2464:	98 a7       	std	Y+40, r25	; 0x28
    2466:	a9 a7       	std	Y+41, r26	; 0x29
    2468:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246a:	6f a1       	ldd	r22, Y+39	; 0x27
    246c:	78 a5       	ldd	r23, Y+40	; 0x28
    246e:	89 a5       	ldd	r24, Y+41	; 0x29
    2470:	9a a5       	ldd	r25, Y+42	; 0x2a
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	4a e7       	ldi	r20, 0x7A	; 122
    2478:	53 e4       	ldi	r21, 0x43	; 67
    247a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	8b a3       	std	Y+35, r24	; 0x23
    2484:	9c a3       	std	Y+36, r25	; 0x24
    2486:	ad a3       	std	Y+37, r26	; 0x25
    2488:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    248a:	6b a1       	ldd	r22, Y+35	; 0x23
    248c:	7c a1       	ldd	r23, Y+36	; 0x24
    248e:	8d a1       	ldd	r24, Y+37	; 0x25
    2490:	9e a1       	ldd	r25, Y+38	; 0x26
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e8       	ldi	r20, 0x80	; 128
    2498:	5f e3       	ldi	r21, 0x3F	; 63
    249a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    249e:	88 23       	and	r24, r24
    24a0:	2c f4       	brge	.+10     	; 0x24ac <LCD_displayCharacter+0x15c>
		__ticks = 1;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	9a a3       	std	Y+34, r25	; 0x22
    24a8:	89 a3       	std	Y+33, r24	; 0x21
    24aa:	3f c0       	rjmp	.+126    	; 0x252a <LCD_displayCharacter+0x1da>
	else if (__tmp > 65535)
    24ac:	6b a1       	ldd	r22, Y+35	; 0x23
    24ae:	7c a1       	ldd	r23, Y+36	; 0x24
    24b0:	8d a1       	ldd	r24, Y+37	; 0x25
    24b2:	9e a1       	ldd	r25, Y+38	; 0x26
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	3f ef       	ldi	r19, 0xFF	; 255
    24b8:	4f e7       	ldi	r20, 0x7F	; 127
    24ba:	57 e4       	ldi	r21, 0x47	; 71
    24bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c0:	18 16       	cp	r1, r24
    24c2:	4c f5       	brge	.+82     	; 0x2516 <LCD_displayCharacter+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c4:	6f a1       	ldd	r22, Y+39	; 0x27
    24c6:	78 a5       	ldd	r23, Y+40	; 0x28
    24c8:	89 a5       	ldd	r24, Y+41	; 0x29
    24ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e2       	ldi	r20, 0x20	; 32
    24d2:	51 e4       	ldi	r21, 0x41	; 65
    24d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	bc 01       	movw	r22, r24
    24de:	cd 01       	movw	r24, r26
    24e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	9a a3       	std	Y+34, r25	; 0x22
    24ea:	89 a3       	std	Y+33, r24	; 0x21
    24ec:	0f c0       	rjmp	.+30     	; 0x250c <LCD_displayCharacter+0x1bc>
    24ee:	89 e1       	ldi	r24, 0x19	; 25
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	98 a3       	std	Y+32, r25	; 0x20
    24f4:	8f 8f       	std	Y+31, r24	; 0x1f
    24f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24f8:	98 a1       	ldd	r25, Y+32	; 0x20
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	f1 f7       	brne	.-4      	; 0x24fa <LCD_displayCharacter+0x1aa>
    24fe:	98 a3       	std	Y+32, r25	; 0x20
    2500:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2502:	89 a1       	ldd	r24, Y+33	; 0x21
    2504:	9a a1       	ldd	r25, Y+34	; 0x22
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	9a a3       	std	Y+34, r25	; 0x22
    250a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250c:	89 a1       	ldd	r24, Y+33	; 0x21
    250e:	9a a1       	ldd	r25, Y+34	; 0x22
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	69 f7       	brne	.-38     	; 0x24ee <LCD_displayCharacter+0x19e>
    2514:	14 c0       	rjmp	.+40     	; 0x253e <LCD_displayCharacter+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2516:	6b a1       	ldd	r22, Y+35	; 0x23
    2518:	7c a1       	ldd	r23, Y+36	; 0x24
    251a:	8d a1       	ldd	r24, Y+37	; 0x25
    251c:	9e a1       	ldd	r25, Y+38	; 0x26
    251e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	9a a3       	std	Y+34, r25	; 0x22
    2528:	89 a3       	std	Y+33, r24	; 0x21
    252a:	89 a1       	ldd	r24, Y+33	; 0x21
    252c:	9a a1       	ldd	r25, Y+34	; 0x22
    252e:	9e 8f       	std	Y+30, r25	; 0x1e
    2530:	8d 8f       	std	Y+29, r24	; 0x1d
    2532:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2534:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <LCD_displayCharacter+0x1e6>
    253a:	9e 8f       	std	Y+30, r25	; 0x1e
    253c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if(DATA_BITS_MODE == EIGHT_BITS_MODE)

	dio_writePort(LCD_DATA_PORT_ID,character);
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	69 ad       	ldd	r22, Y+57	; 0x39
    2542:	0e 94 12 09 	call	0x1224	; 0x1224 <dio_writePort>
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	a0 e8       	ldi	r26, 0x80	; 128
    254c:	bf e3       	ldi	r27, 0x3F	; 63
    254e:	89 8f       	std	Y+25, r24	; 0x19
    2550:	9a 8f       	std	Y+26, r25	; 0x1a
    2552:	ab 8f       	std	Y+27, r26	; 0x1b
    2554:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2556:	69 8d       	ldd	r22, Y+25	; 0x19
    2558:	7a 8d       	ldd	r23, Y+26	; 0x1a
    255a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    255c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	4a e7       	ldi	r20, 0x7A	; 122
    2564:	53 e4       	ldi	r21, 0x43	; 67
    2566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	8d 8b       	std	Y+21, r24	; 0x15
    2570:	9e 8b       	std	Y+22, r25	; 0x16
    2572:	af 8b       	std	Y+23, r26	; 0x17
    2574:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2576:	6d 89       	ldd	r22, Y+21	; 0x15
    2578:	7e 89       	ldd	r23, Y+22	; 0x16
    257a:	8f 89       	ldd	r24, Y+23	; 0x17
    257c:	98 8d       	ldd	r25, Y+24	; 0x18
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e8       	ldi	r20, 0x80	; 128
    2584:	5f e3       	ldi	r21, 0x3F	; 63
    2586:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    258a:	88 23       	and	r24, r24
    258c:	2c f4       	brge	.+10     	; 0x2598 <LCD_displayCharacter+0x248>
		__ticks = 1;
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	9c 8b       	std	Y+20, r25	; 0x14
    2594:	8b 8b       	std	Y+19, r24	; 0x13
    2596:	3f c0       	rjmp	.+126    	; 0x2616 <LCD_displayCharacter+0x2c6>
	else if (__tmp > 65535)
    2598:	6d 89       	ldd	r22, Y+21	; 0x15
    259a:	7e 89       	ldd	r23, Y+22	; 0x16
    259c:	8f 89       	ldd	r24, Y+23	; 0x17
    259e:	98 8d       	ldd	r25, Y+24	; 0x18
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	3f ef       	ldi	r19, 0xFF	; 255
    25a4:	4f e7       	ldi	r20, 0x7F	; 127
    25a6:	57 e4       	ldi	r21, 0x47	; 71
    25a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ac:	18 16       	cp	r1, r24
    25ae:	4c f5       	brge	.+82     	; 0x2602 <LCD_displayCharacter+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b0:	69 8d       	ldd	r22, Y+25	; 0x19
    25b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e2       	ldi	r20, 0x20	; 32
    25be:	51 e4       	ldi	r21, 0x41	; 65
    25c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	bc 01       	movw	r22, r24
    25ca:	cd 01       	movw	r24, r26
    25cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	9c 8b       	std	Y+20, r25	; 0x14
    25d6:	8b 8b       	std	Y+19, r24	; 0x13
    25d8:	0f c0       	rjmp	.+30     	; 0x25f8 <LCD_displayCharacter+0x2a8>
    25da:	89 e1       	ldi	r24, 0x19	; 25
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	9a 8b       	std	Y+18, r25	; 0x12
    25e0:	89 8b       	std	Y+17, r24	; 0x11
    25e2:	89 89       	ldd	r24, Y+17	; 0x11
    25e4:	9a 89       	ldd	r25, Y+18	; 0x12
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	f1 f7       	brne	.-4      	; 0x25e6 <LCD_displayCharacter+0x296>
    25ea:	9a 8b       	std	Y+18, r25	; 0x12
    25ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ee:	8b 89       	ldd	r24, Y+19	; 0x13
    25f0:	9c 89       	ldd	r25, Y+20	; 0x14
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	9c 8b       	std	Y+20, r25	; 0x14
    25f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f8:	8b 89       	ldd	r24, Y+19	; 0x13
    25fa:	9c 89       	ldd	r25, Y+20	; 0x14
    25fc:	00 97       	sbiw	r24, 0x00	; 0
    25fe:	69 f7       	brne	.-38     	; 0x25da <LCD_displayCharacter+0x28a>
    2600:	14 c0       	rjmp	.+40     	; 0x262a <LCD_displayCharacter+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2602:	6d 89       	ldd	r22, Y+21	; 0x15
    2604:	7e 89       	ldd	r23, Y+22	; 0x16
    2606:	8f 89       	ldd	r24, Y+23	; 0x17
    2608:	98 8d       	ldd	r25, Y+24	; 0x18
    260a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	9c 8b       	std	Y+20, r25	; 0x14
    2614:	8b 8b       	std	Y+19, r24	; 0x13
    2616:	8b 89       	ldd	r24, Y+19	; 0x13
    2618:	9c 89       	ldd	r25, Y+20	; 0x14
    261a:	98 8b       	std	Y+16, r25	; 0x10
    261c:	8f 87       	std	Y+15, r24	; 0x0f
    261e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2620:	98 89       	ldd	r25, Y+16	; 0x10
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	f1 f7       	brne	.-4      	; 0x2622 <LCD_displayCharacter+0x2d2>
    2626:	98 8b       	std	Y+16, r25	; 0x10
    2628:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	dio_writePin(LCD_E_PIN_ID,LOGIC_LOW);
    262a:	81 e1       	ldi	r24, 0x11	; 17
    262c:	60 e0       	ldi	r22, 0x00	; 0
    262e:	0e 94 94 06 	call	0xd28	; 0xd28 <dio_writePin>
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	a0 e8       	ldi	r26, 0x80	; 128
    2638:	bf e3       	ldi	r27, 0x3F	; 63
    263a:	8b 87       	std	Y+11, r24	; 0x0b
    263c:	9c 87       	std	Y+12, r25	; 0x0c
    263e:	ad 87       	std	Y+13, r26	; 0x0d
    2640:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2642:	6b 85       	ldd	r22, Y+11	; 0x0b
    2644:	7c 85       	ldd	r23, Y+12	; 0x0c
    2646:	8d 85       	ldd	r24, Y+13	; 0x0d
    2648:	9e 85       	ldd	r25, Y+14	; 0x0e
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	4a e7       	ldi	r20, 0x7A	; 122
    2650:	53 e4       	ldi	r21, 0x43	; 67
    2652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	8f 83       	std	Y+7, r24	; 0x07
    265c:	98 87       	std	Y+8, r25	; 0x08
    265e:	a9 87       	std	Y+9, r26	; 0x09
    2660:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2662:	6f 81       	ldd	r22, Y+7	; 0x07
    2664:	78 85       	ldd	r23, Y+8	; 0x08
    2666:	89 85       	ldd	r24, Y+9	; 0x09
    2668:	9a 85       	ldd	r25, Y+10	; 0x0a
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e8       	ldi	r20, 0x80	; 128
    2670:	5f e3       	ldi	r21, 0x3F	; 63
    2672:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2676:	88 23       	and	r24, r24
    2678:	2c f4       	brge	.+10     	; 0x2684 <LCD_displayCharacter+0x334>
		__ticks = 1;
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	9e 83       	std	Y+6, r25	; 0x06
    2680:	8d 83       	std	Y+5, r24	; 0x05
    2682:	3f c0       	rjmp	.+126    	; 0x2702 <LCD_displayCharacter+0x3b2>
	else if (__tmp > 65535)
    2684:	6f 81       	ldd	r22, Y+7	; 0x07
    2686:	78 85       	ldd	r23, Y+8	; 0x08
    2688:	89 85       	ldd	r24, Y+9	; 0x09
    268a:	9a 85       	ldd	r25, Y+10	; 0x0a
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	3f ef       	ldi	r19, 0xFF	; 255
    2690:	4f e7       	ldi	r20, 0x7F	; 127
    2692:	57 e4       	ldi	r21, 0x47	; 71
    2694:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2698:	18 16       	cp	r1, r24
    269a:	4c f5       	brge	.+82     	; 0x26ee <LCD_displayCharacter+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    269c:	6b 85       	ldd	r22, Y+11	; 0x0b
    269e:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	40 e2       	ldi	r20, 0x20	; 32
    26aa:	51 e4       	ldi	r21, 0x41	; 65
    26ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	bc 01       	movw	r22, r24
    26b6:	cd 01       	movw	r24, r26
    26b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	9e 83       	std	Y+6, r25	; 0x06
    26c2:	8d 83       	std	Y+5, r24	; 0x05
    26c4:	0f c0       	rjmp	.+30     	; 0x26e4 <LCD_displayCharacter+0x394>
    26c6:	89 e1       	ldi	r24, 0x19	; 25
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	9c 83       	std	Y+4, r25	; 0x04
    26cc:	8b 83       	std	Y+3, r24	; 0x03
    26ce:	8b 81       	ldd	r24, Y+3	; 0x03
    26d0:	9c 81       	ldd	r25, Y+4	; 0x04
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	f1 f7       	brne	.-4      	; 0x26d2 <LCD_displayCharacter+0x382>
    26d6:	9c 83       	std	Y+4, r25	; 0x04
    26d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26da:	8d 81       	ldd	r24, Y+5	; 0x05
    26dc:	9e 81       	ldd	r25, Y+6	; 0x06
    26de:	01 97       	sbiw	r24, 0x01	; 1
    26e0:	9e 83       	std	Y+6, r25	; 0x06
    26e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e4:	8d 81       	ldd	r24, Y+5	; 0x05
    26e6:	9e 81       	ldd	r25, Y+6	; 0x06
    26e8:	00 97       	sbiw	r24, 0x00	; 0
    26ea:	69 f7       	brne	.-38     	; 0x26c6 <LCD_displayCharacter+0x376>
    26ec:	14 c0       	rjmp	.+40     	; 0x2716 <LCD_displayCharacter+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ee:	6f 81       	ldd	r22, Y+7	; 0x07
    26f0:	78 85       	ldd	r23, Y+8	; 0x08
    26f2:	89 85       	ldd	r24, Y+9	; 0x09
    26f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	9e 83       	std	Y+6, r25	; 0x06
    2700:	8d 83       	std	Y+5, r24	; 0x05
    2702:	8d 81       	ldd	r24, Y+5	; 0x05
    2704:	9e 81       	ldd	r25, Y+6	; 0x06
    2706:	9a 83       	std	Y+2, r25	; 0x02
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	9a 81       	ldd	r25, Y+2	; 0x02
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	f1 f7       	brne	.-4      	; 0x270e <LCD_displayCharacter+0x3be>
    2712:	9a 83       	std	Y+2, r25	; 0x02
    2714:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	dio_writePin(LCD_E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);
#endif

}
    2716:	e9 96       	adiw	r28, 0x39	; 57
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	f8 94       	cli
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	cd bf       	out	0x3d, r28	; 61
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	08 95       	ret

00002728 <LCD_displayString>:
void LCD_displayString(pu8 str)
{
    2728:	df 93       	push	r29
    272a:	cf 93       	push	r28
    272c:	00 d0       	rcall	.+0      	; 0x272e <LCD_displayString+0x6>
    272e:	0f 92       	push	r0
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
    2734:	9b 83       	std	Y+3, r25	; 0x03
    2736:	8a 83       	std	Y+2, r24	; 0x02
	u8 iterator;
	for (iterator = 0; str[iterator] != '\0'; iterator++)
    2738:	19 82       	std	Y+1, r1	; 0x01
    273a:	0e c0       	rjmp	.+28     	; 0x2758 <LCD_displayString+0x30>
	{
		LCD_displayCharacter(str[iterator]);
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	28 2f       	mov	r18, r24
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	8a 81       	ldd	r24, Y+2	; 0x02
    2744:	9b 81       	ldd	r25, Y+3	; 0x03
    2746:	fc 01       	movw	r30, r24
    2748:	e2 0f       	add	r30, r18
    274a:	f3 1f       	adc	r31, r19
    274c:	80 81       	ld	r24, Z
    274e:	0e 94 a8 11 	call	0x2350	; 0x2350 <LCD_displayCharacter>

}
void LCD_displayString(pu8 str)
{
	u8 iterator;
	for (iterator = 0; str[iterator] != '\0'; iterator++)
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	8f 5f       	subi	r24, 0xFF	; 255
    2756:	89 83       	std	Y+1, r24	; 0x01
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	28 2f       	mov	r18, r24
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	9b 81       	ldd	r25, Y+3	; 0x03
    2762:	fc 01       	movw	r30, r24
    2764:	e2 0f       	add	r30, r18
    2766:	f3 1f       	adc	r31, r19
    2768:	80 81       	ld	r24, Z
    276a:	88 23       	and	r24, r24
    276c:	39 f7       	brne	.-50     	; 0x273c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[iterator]);
	}
}
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <LCD_moveCurser>:
void LCD_moveCurser(u8 row,u8 col)
{
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	00 d0       	rcall	.+0      	; 0x2780 <LCD_moveCurser+0x6>
    2780:	00 d0       	rcall	.+0      	; 0x2782 <LCD_moveCurser+0x8>
    2782:	0f 92       	push	r0
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
    2788:	8a 83       	std	Y+2, r24	; 0x02
    278a:	6b 83       	std	Y+3, r22	; 0x03
	u8 lcd_memory_adress;

#if(LCD_NUM_OF_COLUMNS == LCD_16_COLS)
	switch(row)
    278c:	8a 81       	ldd	r24, Y+2	; 0x02
    278e:	28 2f       	mov	r18, r24
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	3d 83       	std	Y+5, r19	; 0x05
    2794:	2c 83       	std	Y+4, r18	; 0x04
    2796:	8c 81       	ldd	r24, Y+4	; 0x04
    2798:	9d 81       	ldd	r25, Y+5	; 0x05
    279a:	81 30       	cpi	r24, 0x01	; 1
    279c:	91 05       	cpc	r25, r1
    279e:	c1 f0       	breq	.+48     	; 0x27d0 <LCD_moveCurser+0x56>
    27a0:	2c 81       	ldd	r18, Y+4	; 0x04
    27a2:	3d 81       	ldd	r19, Y+5	; 0x05
    27a4:	22 30       	cpi	r18, 0x02	; 2
    27a6:	31 05       	cpc	r19, r1
    27a8:	2c f4       	brge	.+10     	; 0x27b4 <LCD_moveCurser+0x3a>
    27aa:	8c 81       	ldd	r24, Y+4	; 0x04
    27ac:	9d 81       	ldd	r25, Y+5	; 0x05
    27ae:	00 97       	sbiw	r24, 0x00	; 0
    27b0:	61 f0       	breq	.+24     	; 0x27ca <LCD_moveCurser+0x50>
    27b2:	19 c0       	rjmp	.+50     	; 0x27e6 <LCD_moveCurser+0x6c>
    27b4:	2c 81       	ldd	r18, Y+4	; 0x04
    27b6:	3d 81       	ldd	r19, Y+5	; 0x05
    27b8:	22 30       	cpi	r18, 0x02	; 2
    27ba:	31 05       	cpc	r19, r1
    27bc:	69 f0       	breq	.+26     	; 0x27d8 <LCD_moveCurser+0x5e>
    27be:	8c 81       	ldd	r24, Y+4	; 0x04
    27c0:	9d 81       	ldd	r25, Y+5	; 0x05
    27c2:	83 30       	cpi	r24, 0x03	; 3
    27c4:	91 05       	cpc	r25, r1
    27c6:	61 f0       	breq	.+24     	; 0x27e0 <LCD_moveCurser+0x66>
    27c8:	0e c0       	rjmp	.+28     	; 0x27e6 <LCD_moveCurser+0x6c>
	{
	case 0:
		lcd_memory_adress = col;
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	89 83       	std	Y+1, r24	; 0x01
    27ce:	0b c0       	rjmp	.+22     	; 0x27e6 <LCD_moveCurser+0x6c>
		break;
	case 1:
		lcd_memory_adress = col + 0x40;
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	80 5c       	subi	r24, 0xC0	; 192
    27d4:	89 83       	std	Y+1, r24	; 0x01
    27d6:	07 c0       	rjmp	.+14     	; 0x27e6 <LCD_moveCurser+0x6c>
		break;
	case 2:
		lcd_memory_adress = col + 0x14;
    27d8:	8b 81       	ldd	r24, Y+3	; 0x03
    27da:	8c 5e       	subi	r24, 0xEC	; 236
    27dc:	89 83       	std	Y+1, r24	; 0x01
    27de:	03 c0       	rjmp	.+6      	; 0x27e6 <LCD_moveCurser+0x6c>
		break;
	case 3:
		lcd_memory_adress = col + 0x54;
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	8c 5a       	subi	r24, 0xAC	; 172
    27e4:	89 83       	std	Y+1, r24	; 0x01
		break;

	}
#endif

	LCD_sendCommand(lcd_memory_adress | LCD_SET_CURSOR_LOCATION);
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	80 68       	ori	r24, 0x80	; 128
    27ea:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <LCD_sendCommand>
}
    27ee:	0f 90       	pop	r0
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	cf 91       	pop	r28
    27fa:	df 91       	pop	r29
    27fc:	08 95       	ret

000027fe <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(u8 row,u8 col,pu8 str)
{
    27fe:	df 93       	push	r29
    2800:	cf 93       	push	r28
    2802:	00 d0       	rcall	.+0      	; 0x2804 <LCD_displayStringRowColumn+0x6>
    2804:	00 d0       	rcall	.+0      	; 0x2806 <LCD_displayStringRowColumn+0x8>
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
    280a:	89 83       	std	Y+1, r24	; 0x01
    280c:	6a 83       	std	Y+2, r22	; 0x02
    280e:	5c 83       	std	Y+4, r21	; 0x04
    2810:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCurser(row,col);
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	6a 81       	ldd	r22, Y+2	; 0x02
    2816:	0e 94 bd 13 	call	0x277a	; 0x277a <LCD_moveCurser>
	LCD_displayString(str);
    281a:	8b 81       	ldd	r24, Y+3	; 0x03
    281c:	9c 81       	ldd	r25, Y+4	; 0x04
    281e:	0e 94 94 13 	call	0x2728	; 0x2728 <LCD_displayString>
}
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <LCD_intgerToString>:
//		LCD_displayCharacter( (loc_inverse % 10) + '0' );
//		loc_inverse /= 10;
//	}
//}
void LCD_intgerToString(u32 data)
{
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	a4 97       	sbiw	r28, 0x24	; 36
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	de bf       	out	0x3e, r29	; 62
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	cd bf       	out	0x3d, r28	; 61
    2844:	69 a3       	std	Y+33, r22	; 0x21
    2846:	7a a3       	std	Y+34, r23	; 0x22
    2848:	8b a3       	std	Y+35, r24	; 0x23
    284a:	9c a3       	std	Y+36, r25	; 0x24
	char buff[32];
	itoa(data,buff,10);
    284c:	89 a1       	ldd	r24, Y+33	; 0x21
    284e:	9a a1       	ldd	r25, Y+34	; 0x22
    2850:	9e 01       	movw	r18, r28
    2852:	2f 5f       	subi	r18, 0xFF	; 255
    2854:	3f 4f       	sbci	r19, 0xFF	; 255
    2856:	b9 01       	movw	r22, r18
    2858:	4a e0       	ldi	r20, 0x0A	; 10
    285a:	50 e0       	ldi	r21, 0x00	; 0
    285c:	0e 94 38 15 	call	0x2a70	; 0x2a70 <itoa>
	LCD_displayString(buff);
    2860:	ce 01       	movw	r24, r28
    2862:	01 96       	adiw	r24, 0x01	; 1
    2864:	0e 94 94 13 	call	0x2728	; 0x2728 <LCD_displayString>
}
    2868:	a4 96       	adiw	r28, 0x24	; 36
    286a:	0f b6       	in	r0, 0x3f	; 63
    286c:	f8 94       	cli
    286e:	de bf       	out	0x3e, r29	; 62
    2870:	0f be       	out	0x3f, r0	; 63
    2872:	cd bf       	out	0x3d, r28	; 61
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	08 95       	ret

0000287a <LCD_creatCustomCharacter>:
void LCD_creatCustomCharacter(pu8 character, u8 index)
{
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
    2882:	63 97       	sbiw	r28, 0x13	; 19
    2884:	0f b6       	in	r0, 0x3f	; 63
    2886:	f8 94       	cli
    2888:	de bf       	out	0x3e, r29	; 62
    288a:	0f be       	out	0x3f, r0	; 63
    288c:	cd bf       	out	0x3d, r28	; 61
    288e:	9a 8b       	std	Y+18, r25	; 0x12
    2890:	89 8b       	std	Y+17, r24	; 0x11
    2892:	6b 8b       	std	Y+19, r22	; 0x13
	u8 iterator;
	u8 loc_CGRAM_aaddress;

	if(index < 8)
    2894:	8b 89       	ldd	r24, Y+19	; 0x13
    2896:	88 30       	cpi	r24, 0x08	; 8
    2898:	08 f0       	brcs	.+2      	; 0x289c <LCD_creatCustomCharacter+0x22>
    289a:	96 c0       	rjmp	.+300    	; 0x29c8 <LCD_creatCustomCharacter+0x14e>
	{
		loc_CGRAM_aaddress =( LCD_CGRAM_BASE_ADDRESS + (index * LCD_NUMBER_OF_LOCATIONS_IN_CGRAM) );
    289c:	8b 89       	ldd	r24, Y+19	; 0x13
    289e:	88 2f       	mov	r24, r24
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	08 96       	adiw	r24, 0x08	; 8
    28a4:	88 0f       	add	r24, r24
    28a6:	99 1f       	adc	r25, r25
    28a8:	88 0f       	add	r24, r24
    28aa:	99 1f       	adc	r25, r25
    28ac:	88 0f       	add	r24, r24
    28ae:	99 1f       	adc	r25, r25
    28b0:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_sendCommand(loc_CGRAM_aaddress);
    28b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28b4:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <LCD_sendCommand>

		for(iterator = 0; iterator < LCD_NUMBER_OF_LOCATIONS_IN_CGRAM; iterator++)
    28b8:	18 8a       	std	Y+16, r1	; 0x10
    28ba:	0e c0       	rjmp	.+28     	; 0x28d8 <LCD_creatCustomCharacter+0x5e>
		{
			LCD_displayCharacter(character[iterator]);
    28bc:	88 89       	ldd	r24, Y+16	; 0x10
    28be:	28 2f       	mov	r18, r24
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	89 89       	ldd	r24, Y+17	; 0x11
    28c4:	9a 89       	ldd	r25, Y+18	; 0x12
    28c6:	fc 01       	movw	r30, r24
    28c8:	e2 0f       	add	r30, r18
    28ca:	f3 1f       	adc	r31, r19
    28cc:	80 81       	ld	r24, Z
    28ce:	0e 94 a8 11 	call	0x2350	; 0x2350 <LCD_displayCharacter>
	if(index < 8)
	{
		loc_CGRAM_aaddress =( LCD_CGRAM_BASE_ADDRESS + (index * LCD_NUMBER_OF_LOCATIONS_IN_CGRAM) );
		LCD_sendCommand(loc_CGRAM_aaddress);

		for(iterator = 0; iterator < LCD_NUMBER_OF_LOCATIONS_IN_CGRAM; iterator++)
    28d2:	88 89       	ldd	r24, Y+16	; 0x10
    28d4:	8f 5f       	subi	r24, 0xFF	; 255
    28d6:	88 8b       	std	Y+16, r24	; 0x10
    28d8:	88 89       	ldd	r24, Y+16	; 0x10
    28da:	88 30       	cpi	r24, 0x08	; 8
    28dc:	78 f3       	brcs	.-34     	; 0x28bc <LCD_creatCustomCharacter+0x42>
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	a0 e0       	ldi	r26, 0x00	; 0
    28e4:	b0 e4       	ldi	r27, 0x40	; 64
    28e6:	8b 87       	std	Y+11, r24	; 0x0b
    28e8:	9c 87       	std	Y+12, r25	; 0x0c
    28ea:	ad 87       	std	Y+13, r26	; 0x0d
    28ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    28f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	4a e7       	ldi	r20, 0x7A	; 122
    28fc:	53 e4       	ldi	r21, 0x43	; 67
    28fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	8f 83       	std	Y+7, r24	; 0x07
    2908:	98 87       	std	Y+8, r25	; 0x08
    290a:	a9 87       	std	Y+9, r26	; 0x09
    290c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    290e:	6f 81       	ldd	r22, Y+7	; 0x07
    2910:	78 85       	ldd	r23, Y+8	; 0x08
    2912:	89 85       	ldd	r24, Y+9	; 0x09
    2914:	9a 85       	ldd	r25, Y+10	; 0x0a
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	40 e8       	ldi	r20, 0x80	; 128
    291c:	5f e3       	ldi	r21, 0x3F	; 63
    291e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2922:	88 23       	and	r24, r24
    2924:	2c f4       	brge	.+10     	; 0x2930 <LCD_creatCustomCharacter+0xb6>
		__ticks = 1;
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	9e 83       	std	Y+6, r25	; 0x06
    292c:	8d 83       	std	Y+5, r24	; 0x05
    292e:	3f c0       	rjmp	.+126    	; 0x29ae <LCD_creatCustomCharacter+0x134>
	else if (__tmp > 65535)
    2930:	6f 81       	ldd	r22, Y+7	; 0x07
    2932:	78 85       	ldd	r23, Y+8	; 0x08
    2934:	89 85       	ldd	r24, Y+9	; 0x09
    2936:	9a 85       	ldd	r25, Y+10	; 0x0a
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	3f ef       	ldi	r19, 0xFF	; 255
    293c:	4f e7       	ldi	r20, 0x7F	; 127
    293e:	57 e4       	ldi	r21, 0x47	; 71
    2940:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2944:	18 16       	cp	r1, r24
    2946:	4c f5       	brge	.+82     	; 0x299a <LCD_creatCustomCharacter+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2948:	6b 85       	ldd	r22, Y+11	; 0x0b
    294a:	7c 85       	ldd	r23, Y+12	; 0x0c
    294c:	8d 85       	ldd	r24, Y+13	; 0x0d
    294e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	40 e2       	ldi	r20, 0x20	; 32
    2956:	51 e4       	ldi	r21, 0x41	; 65
    2958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	bc 01       	movw	r22, r24
    2962:	cd 01       	movw	r24, r26
    2964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	9e 83       	std	Y+6, r25	; 0x06
    296e:	8d 83       	std	Y+5, r24	; 0x05
    2970:	0f c0       	rjmp	.+30     	; 0x2990 <LCD_creatCustomCharacter+0x116>
    2972:	89 e1       	ldi	r24, 0x19	; 25
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	9c 83       	std	Y+4, r25	; 0x04
    2978:	8b 83       	std	Y+3, r24	; 0x03
    297a:	8b 81       	ldd	r24, Y+3	; 0x03
    297c:	9c 81       	ldd	r25, Y+4	; 0x04
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	f1 f7       	brne	.-4      	; 0x297e <LCD_creatCustomCharacter+0x104>
    2982:	9c 83       	std	Y+4, r25	; 0x04
    2984:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2986:	8d 81       	ldd	r24, Y+5	; 0x05
    2988:	9e 81       	ldd	r25, Y+6	; 0x06
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	9e 83       	std	Y+6, r25	; 0x06
    298e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2990:	8d 81       	ldd	r24, Y+5	; 0x05
    2992:	9e 81       	ldd	r25, Y+6	; 0x06
    2994:	00 97       	sbiw	r24, 0x00	; 0
    2996:	69 f7       	brne	.-38     	; 0x2972 <LCD_creatCustomCharacter+0xf8>
    2998:	14 c0       	rjmp	.+40     	; 0x29c2 <LCD_creatCustomCharacter+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299a:	6f 81       	ldd	r22, Y+7	; 0x07
    299c:	78 85       	ldd	r23, Y+8	; 0x08
    299e:	89 85       	ldd	r24, Y+9	; 0x09
    29a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	9e 83       	std	Y+6, r25	; 0x06
    29ac:	8d 83       	std	Y+5, r24	; 0x05
    29ae:	8d 81       	ldd	r24, Y+5	; 0x05
    29b0:	9e 81       	ldd	r25, Y+6	; 0x06
    29b2:	9a 83       	std	Y+2, r25	; 0x02
    29b4:	89 83       	std	Y+1, r24	; 0x01
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
    29b8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <LCD_creatCustomCharacter+0x140>
    29be:	9a 83       	std	Y+2, r25	; 0x02
    29c0:	89 83       	std	Y+1, r24	; 0x01
		{
			LCD_displayCharacter(character[iterator]);
		}
		_delay_ms(2);
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION);
    29c2:	80 e8       	ldi	r24, 0x80	; 128
    29c4:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <LCD_sendCommand>
	}
}
    29c8:	63 96       	adiw	r28, 0x13	; 19
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	f8 94       	cli
    29ce:	de bf       	out	0x3e, r29	; 62
    29d0:	0f be       	out	0x3f, r0	; 63
    29d2:	cd bf       	out	0x3d, r28	; 61
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	08 95       	ret

000029da <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    29da:	df 93       	push	r29
    29dc:	cf 93       	push	r28
    29de:	cd b7       	in	r28, 0x3d	; 61
    29e0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_SCREEN_CLEAR);
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <LCD_sendCommand>
}
    29e8:	cf 91       	pop	r28
    29ea:	df 91       	pop	r29
    29ec:	08 95       	ret

000029ee <shiftDisplay_right>:
void shiftDisplay_right(void)
{
    29ee:	df 93       	push	r29
    29f0:	cf 93       	push	r28
    29f2:	cd b7       	in	r28, 0x3d	; 61
    29f4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_SHIFT_DISPLAY_RIGHT);
    29f6:	85 e0       	ldi	r24, 0x05	; 5
    29f8:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <LCD_sendCommand>
}
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <__prologue_saves__>:
    2a02:	2f 92       	push	r2
    2a04:	3f 92       	push	r3
    2a06:	4f 92       	push	r4
    2a08:	5f 92       	push	r5
    2a0a:	6f 92       	push	r6
    2a0c:	7f 92       	push	r7
    2a0e:	8f 92       	push	r8
    2a10:	9f 92       	push	r9
    2a12:	af 92       	push	r10
    2a14:	bf 92       	push	r11
    2a16:	cf 92       	push	r12
    2a18:	df 92       	push	r13
    2a1a:	ef 92       	push	r14
    2a1c:	ff 92       	push	r15
    2a1e:	0f 93       	push	r16
    2a20:	1f 93       	push	r17
    2a22:	cf 93       	push	r28
    2a24:	df 93       	push	r29
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
    2a2a:	ca 1b       	sub	r28, r26
    2a2c:	db 0b       	sbc	r29, r27
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	cd bf       	out	0x3d, r28	; 61
    2a38:	09 94       	ijmp

00002a3a <__epilogue_restores__>:
    2a3a:	2a 88       	ldd	r2, Y+18	; 0x12
    2a3c:	39 88       	ldd	r3, Y+17	; 0x11
    2a3e:	48 88       	ldd	r4, Y+16	; 0x10
    2a40:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a42:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a44:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a46:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a48:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a4a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a4c:	b9 84       	ldd	r11, Y+9	; 0x09
    2a4e:	c8 84       	ldd	r12, Y+8	; 0x08
    2a50:	df 80       	ldd	r13, Y+7	; 0x07
    2a52:	ee 80       	ldd	r14, Y+6	; 0x06
    2a54:	fd 80       	ldd	r15, Y+5	; 0x05
    2a56:	0c 81       	ldd	r16, Y+4	; 0x04
    2a58:	1b 81       	ldd	r17, Y+3	; 0x03
    2a5a:	aa 81       	ldd	r26, Y+2	; 0x02
    2a5c:	b9 81       	ldd	r27, Y+1	; 0x01
    2a5e:	ce 0f       	add	r28, r30
    2a60:	d1 1d       	adc	r29, r1
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	f8 94       	cli
    2a66:	de bf       	out	0x3e, r29	; 62
    2a68:	0f be       	out	0x3f, r0	; 63
    2a6a:	cd bf       	out	0x3d, r28	; 61
    2a6c:	ed 01       	movw	r28, r26
    2a6e:	08 95       	ret

00002a70 <itoa>:
    2a70:	fb 01       	movw	r30, r22
    2a72:	9f 01       	movw	r18, r30
    2a74:	e8 94       	clt
    2a76:	42 30       	cpi	r20, 0x02	; 2
    2a78:	c4 f0       	brlt	.+48     	; 0x2aaa <itoa+0x3a>
    2a7a:	45 32       	cpi	r20, 0x25	; 37
    2a7c:	b4 f4       	brge	.+44     	; 0x2aaa <itoa+0x3a>
    2a7e:	4a 30       	cpi	r20, 0x0A	; 10
    2a80:	29 f4       	brne	.+10     	; 0x2a8c <itoa+0x1c>
    2a82:	97 fb       	bst	r25, 7
    2a84:	1e f4       	brtc	.+6      	; 0x2a8c <itoa+0x1c>
    2a86:	90 95       	com	r25
    2a88:	81 95       	neg	r24
    2a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8c:	64 2f       	mov	r22, r20
    2a8e:	77 27       	eor	r23, r23
    2a90:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__udivmodhi4>
    2a94:	80 5d       	subi	r24, 0xD0	; 208
    2a96:	8a 33       	cpi	r24, 0x3A	; 58
    2a98:	0c f0       	brlt	.+2      	; 0x2a9c <itoa+0x2c>
    2a9a:	89 5d       	subi	r24, 0xD9	; 217
    2a9c:	81 93       	st	Z+, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	00 97       	sbiw	r24, 0x00	; 0
    2aa2:	a1 f7       	brne	.-24     	; 0x2a8c <itoa+0x1c>
    2aa4:	16 f4       	brtc	.+4      	; 0x2aaa <itoa+0x3a>
    2aa6:	5d e2       	ldi	r21, 0x2D	; 45
    2aa8:	51 93       	st	Z+, r21
    2aaa:	10 82       	st	Z, r1
    2aac:	c9 01       	movw	r24, r18
    2aae:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <strrev>

00002ab2 <strrev>:
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	67 2f       	mov	r22, r23
    2ab8:	71 91       	ld	r23, Z+
    2aba:	77 23       	and	r23, r23
    2abc:	e1 f7       	brne	.-8      	; 0x2ab6 <strrev+0x4>
    2abe:	32 97       	sbiw	r30, 0x02	; 2
    2ac0:	04 c0       	rjmp	.+8      	; 0x2aca <strrev+0x18>
    2ac2:	7c 91       	ld	r23, X
    2ac4:	6d 93       	st	X+, r22
    2ac6:	70 83       	st	Z, r23
    2ac8:	62 91       	ld	r22, -Z
    2aca:	ae 17       	cp	r26, r30
    2acc:	bf 07       	cpc	r27, r31
    2ace:	c8 f3       	brcs	.-14     	; 0x2ac2 <strrev+0x10>
    2ad0:	08 95       	ret

00002ad2 <__udivmodhi4>:
    2ad2:	aa 1b       	sub	r26, r26
    2ad4:	bb 1b       	sub	r27, r27
    2ad6:	51 e1       	ldi	r21, 0x11	; 17
    2ad8:	07 c0       	rjmp	.+14     	; 0x2ae8 <__udivmodhi4_ep>

00002ada <__udivmodhi4_loop>:
    2ada:	aa 1f       	adc	r26, r26
    2adc:	bb 1f       	adc	r27, r27
    2ade:	a6 17       	cp	r26, r22
    2ae0:	b7 07       	cpc	r27, r23
    2ae2:	10 f0       	brcs	.+4      	; 0x2ae8 <__udivmodhi4_ep>
    2ae4:	a6 1b       	sub	r26, r22
    2ae6:	b7 0b       	sbc	r27, r23

00002ae8 <__udivmodhi4_ep>:
    2ae8:	88 1f       	adc	r24, r24
    2aea:	99 1f       	adc	r25, r25
    2aec:	5a 95       	dec	r21
    2aee:	a9 f7       	brne	.-22     	; 0x2ada <__udivmodhi4_loop>
    2af0:	80 95       	com	r24
    2af2:	90 95       	com	r25
    2af4:	bc 01       	movw	r22, r24
    2af6:	cd 01       	movw	r24, r26
    2af8:	08 95       	ret

00002afa <_exit>:
    2afa:	f8 94       	cli

00002afc <__stop_program>:
    2afc:	ff cf       	rjmp	.-2      	; 0x2afc <__stop_program>
