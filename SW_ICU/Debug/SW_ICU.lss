
SW_ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  000036a0  00003734  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800182  00800182  00003856  2**0
                  ALLOC
  3 .stab         000033cc  00000000  00000000  00003858  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001671  00000000  00000000  00006c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008295  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008435  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008627  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000aa32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000bdb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000cf90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d150  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d446  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ddb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__vector_1>
       8:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__vector_2>
       c:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 89 19 	jmp	0x3312	; 0x3312 <__vector_10>
      2c:	0c 94 99 19 	jmp	0x3332	; 0x3332 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 39       	cpi	r26, 0x9D	; 157
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3b 1a 	call	0x3476	; 0x3476 <main>
      8a:	0c 94 4e 1b 	jmp	0x369c	; 0x369c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 17 1b 	jmp	0x362e	; 0x362e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 33 1b 	jmp	0x3666	; 0x3666 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 17 1b 	jmp	0x362e	; 0x362e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 33 1b 	jmp	0x3666	; 0x3666 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1f 1b 	jmp	0x363e	; 0x363e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 27 1b 	jmp	0x364e	; 0x364e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 1f 1b 	jmp	0x363e	; 0x363e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_voidInit>:

volatile pu16 G_Ptr_AdcReading;
void(*G_ptr_AdcIsrNotification)(u16 Global_pu16Data);

void ADC_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	#if Refernce_Selection == AREF_PIN
	CLR_BIT(ADMUX,REFS0);
	CLR_BIT(ADMUX,REFS1);
	#elif Refernce_Selection == AVCC
	SET_BIT(ADMUX,REFS0);
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 77       	andi	r24, 0x7F	; 127
     e50:	8c 93       	st	X, r24
	#endif
	
	#if		LEFT_ADJUST == ENABLE
	SET_BIT(ADMUX,ADLAR);
	#elif	LEFT_ADJUST == DISABLE
	CLR_BIT(ADMUX,ADLAR);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7d       	andi	r24, 0xDF	; 223
     e5e:	8c 93       	st	X, r24
	#endif
	
	ADCSRA=((ADCSRA&0b11111000)|ADC_Prescaller);
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 7f       	andi	r24, 0xF8	; 248
     e6c:	8c 93       	st	X, r24
#if Interrupt_EN == ENABLE
	ADC_voidEnablePeripheralInterrupt();
     e6e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <ADC_voidEnablePeripheralInterrupt>
#elif Interrupt_EN == DISABLE
	ADC_voidDisablePeripheralInterrupt();
#endif

	ADC_voidEnablePeripheral();
     e72:	0e 94 3e 07 	call	0xe7c	; 0xe7c <ADC_voidEnablePeripheral>
	
}
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <ADC_voidEnablePeripheral>:

void ADC_voidEnablePeripheral(void)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(ADCSRA,ADEN);
     e84:	a6 e2       	ldi	r26, 0x26	; 38
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e6 e2       	ldi	r30, 0x26	; 38
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	80 68       	ori	r24, 0x80	; 128
     e90:	8c 93       	st	X, r24
}
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <ADC_voidDisablePeripheral>:

void ADC_voidDisablePeripheral(void)
{
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(ADMUX,ADEN);
     ea0:	a7 e2       	ldi	r26, 0x27	; 39
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e7 e2       	ldi	r30, 0x27	; 39
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	8f 77       	andi	r24, 0x7F	; 127
     eac:	8c 93       	st	X, r24
}
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <ADC_voidEnablePeripheralInterrupt>:
void ADC_voidEnablePeripheralInterrupt(void)
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(ADCSRA, ADIE);
     ebc:	a6 e2       	ldi	r26, 0x26	; 38
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e6 e2       	ldi	r30, 0x26	; 38
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	88 60       	ori	r24, 0x08	; 8
     ec8:	8c 93       	st	X, r24
}
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <ADC_voidDisablePeripheralInterrupt>:
void ADC_voidDisablePeripheralInterrupt(void)
{
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(ADCSRA, ADIE);
     ed8:	a6 e2       	ldi	r26, 0x26	; 38
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e6 e2       	ldi	r30, 0x26	; 38
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	87 7f       	andi	r24, 0xF7	; 247
     ee4:	8c 93       	st	X, r24
}
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <ADC_voidStartConversion>:
void ADC_voidStartConversion(u8 Copy_u8ChannelID)
{
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	0f 92       	push	r0
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	89 83       	std	Y+1, r24	; 0x01
	ADMUX=((ADMUX&0b11100000)|Copy_u8ChannelID);
     ef8:	a7 e2       	ldi	r26, 0x27	; 39
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e7 e2       	ldi	r30, 0x27	; 39
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	98 2f       	mov	r25, r24
     f04:	90 7e       	andi	r25, 0xE0	; 224
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	89 2b       	or	r24, r25
     f0a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);
     f0c:	a6 e2       	ldi	r26, 0x26	; 38
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e6 e2       	ldi	r30, 0x26	; 38
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	80 64       	ori	r24, 0x40	; 64
     f18:	8c 93       	st	X, r24
}
     f1a:	0f 90       	pop	r0
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <ADC_voidReadVal_Async>:

void ADC_voidReadVal_Async(void(*LocaL_PtrToFunc)(u16 Ptr_pu16CopyData))
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	00 d0       	rcall	.+0      	; 0xf28 <ADC_voidReadVal_Async+0x6>
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01
	G_ptr_AdcIsrNotification=LocaL_PtrToFunc;
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
     f34:	90 93 96 01 	sts	0x0196, r25
     f38:	80 93 95 01 	sts	0x0195, r24

}
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <__vector_16>:
void __vector_16 (void) 
{
     f46:	1f 92       	push	r1
     f48:	0f 92       	push	r0
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	0f 92       	push	r0
     f4e:	11 24       	eor	r1, r1
     f50:	2f 93       	push	r18
     f52:	3f 93       	push	r19
     f54:	4f 93       	push	r20
     f56:	5f 93       	push	r21
     f58:	6f 93       	push	r22
     f5a:	7f 93       	push	r23
     f5c:	8f 93       	push	r24
     f5e:	9f 93       	push	r25
     f60:	af 93       	push	r26
     f62:	bf 93       	push	r27
     f64:	ef 93       	push	r30
     f66:	ff 93       	push	r31
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <__vector_16+0x28>
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
	
	u16 data = ADC_DATA;
     f72:	e4 e2       	ldi	r30, 0x24	; 36
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	91 81       	ldd	r25, Z+1	; 0x01
     f7a:	9a 83       	std	Y+2, r25	; 0x02
     f7c:	89 83       	std	Y+1, r24	; 0x01
	(*G_ptr_AdcIsrNotification)(data);
     f7e:	e0 91 95 01 	lds	r30, 0x0195
     f82:	f0 91 96 01 	lds	r31, 0x0196
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	9a 81       	ldd	r25, Y+2	; 0x02
     f8a:	09 95       	icall

}
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	ff 91       	pop	r31
     f96:	ef 91       	pop	r30
     f98:	bf 91       	pop	r27
     f9a:	af 91       	pop	r26
     f9c:	9f 91       	pop	r25
     f9e:	8f 91       	pop	r24
     fa0:	7f 91       	pop	r23
     fa2:	6f 91       	pop	r22
     fa4:	5f 91       	pop	r21
     fa6:	4f 91       	pop	r20
     fa8:	3f 91       	pop	r19
     faa:	2f 91       	pop	r18
     fac:	0f 90       	pop	r0
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	0f 90       	pop	r0
     fb2:	1f 90       	pop	r1
     fb4:	18 95       	reti

00000fb6 <DIO_enum_WriteChannel>:
#include "../inc/MCAL/DIO/DIO_cfg.h"
#include "../inc/MCAL/DIO/DIO_int.h"
#include "../inc/MCAL/DIO/DIO_prv.h"

DIO_enumErrStatus DIO_enum_WriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level)
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	27 97       	sbiw	r28, 0x07	; 7
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
     fca:	8c 83       	std	Y+4, r24	; 0x04
     fcc:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8PINID = Copy_u8ChannelId%8;
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	87 70       	andi	r24, 0x07	; 7
     fd2:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PORTID = Copy_u8ChannelId/8;
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	86 95       	lsr	r24
     fd8:	86 95       	lsr	r24
     fda:	86 95       	lsr	r24
     fdc:	8a 83       	std	Y+2, r24	; 0x02
	DIO_enumErrStatus Local_enumErrStatus = DIO_enumOK;
     fde:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_u8PORTID)
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	3f 83       	std	Y+7, r19	; 0x07
     fe8:	2e 83       	std	Y+6, r18	; 0x06
     fea:	8e 81       	ldd	r24, Y+6	; 0x06
     fec:	9f 81       	ldd	r25, Y+7	; 0x07
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	91 05       	cpc	r25, r1
     ff2:	09 f4       	brne	.+2      	; 0xff6 <DIO_enum_WriteChannel+0x40>
     ff4:	49 c0       	rjmp	.+146    	; 0x1088 <DIO_enum_WriteChannel+0xd2>
     ff6:	2e 81       	ldd	r18, Y+6	; 0x06
     ff8:	3f 81       	ldd	r19, Y+7	; 0x07
     ffa:	22 30       	cpi	r18, 0x02	; 2
     ffc:	31 05       	cpc	r19, r1
     ffe:	2c f4       	brge	.+10     	; 0x100a <DIO_enum_WriteChannel+0x54>
    1000:	8e 81       	ldd	r24, Y+6	; 0x06
    1002:	9f 81       	ldd	r25, Y+7	; 0x07
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	71 f0       	breq	.+28     	; 0x1024 <DIO_enum_WriteChannel+0x6e>
    1008:	d5 c0       	rjmp	.+426    	; 0x11b4 <DIO_enum_WriteChannel+0x1fe>
    100a:	2e 81       	ldd	r18, Y+6	; 0x06
    100c:	3f 81       	ldd	r19, Y+7	; 0x07
    100e:	22 30       	cpi	r18, 0x02	; 2
    1010:	31 05       	cpc	r19, r1
    1012:	09 f4       	brne	.+2      	; 0x1016 <DIO_enum_WriteChannel+0x60>
    1014:	6b c0       	rjmp	.+214    	; 0x10ec <DIO_enum_WriteChannel+0x136>
    1016:	8e 81       	ldd	r24, Y+6	; 0x06
    1018:	9f 81       	ldd	r25, Y+7	; 0x07
    101a:	83 30       	cpi	r24, 0x03	; 3
    101c:	91 05       	cpc	r25, r1
    101e:	09 f4       	brne	.+2      	; 0x1022 <DIO_enum_WriteChannel+0x6c>
    1020:	97 c0       	rjmp	.+302    	; 0x1150 <DIO_enum_WriteChannel+0x19a>
    1022:	c8 c0       	rjmp	.+400    	; 0x11b4 <DIO_enum_WriteChannel+0x1fe>
	{
		case DIO_u8PORTA:
			if(Copy_u8Level == DIO_u8High)
    1024:	8d 81       	ldd	r24, Y+5	; 0x05
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	a1 f4       	brne	.+40     	; 0x1052 <DIO_enum_WriteChannel+0x9c>
			{
				SET_BIT(PORTA,Local_u8PINID);
    102a:	ab e3       	ldi	r26, 0x3B	; 59
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	eb e3       	ldi	r30, 0x3B	; 59
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <DIO_enum_WriteChannel+0x92>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <DIO_enum_WriteChannel+0x8e>
    104c:	84 2b       	or	r24, r20
    104e:	8c 93       	st	X, r24
    1050:	b3 c0       	rjmp	.+358    	; 0x11b8 <DIO_enum_WriteChannel+0x202>
			}
			else if(Copy_u8Level == DIO_u8LOW)
    1052:	8d 81       	ldd	r24, Y+5	; 0x05
    1054:	88 23       	and	r24, r24
    1056:	a9 f4       	brne	.+42     	; 0x1082 <DIO_enum_WriteChannel+0xcc>
			{
				CLR_BIT(PORTA,Local_u8PINID);
    1058:	ab e3       	ldi	r26, 0x3B	; 59
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	eb e3       	ldi	r30, 0x3B	; 59
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_enum_WriteChannel+0xc0>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_enum_WriteChannel+0xbc>
    107a:	80 95       	com	r24
    107c:	84 23       	and	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	9b c0       	rjmp	.+310    	; 0x11b8 <DIO_enum_WriteChannel+0x202>
			}
			else
			{
				Local_enumErrStatus = DIO_enumLevelErr;
    1082:	82 e0       	ldi	r24, 0x02	; 2
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	98 c0       	rjmp	.+304    	; 0x11b8 <DIO_enum_WriteChannel+0x202>
			}
			break;
		case DIO_u8PORTB:
			if(Copy_u8Level == DIO_u8High)
    1088:	8d 81       	ldd	r24, Y+5	; 0x05
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	a1 f4       	brne	.+40     	; 0x10b6 <DIO_enum_WriteChannel+0x100>
			{
				SET_BIT(PORTB,Local_u8PINID);
    108e:	a8 e3       	ldi	r26, 0x38	; 56
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e8 e3       	ldi	r30, 0x38	; 56
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 2e       	mov	r0, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_enum_WriteChannel+0xf6>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <DIO_enum_WriteChannel+0xf2>
    10b0:	84 2b       	or	r24, r20
    10b2:	8c 93       	st	X, r24
    10b4:	81 c0       	rjmp	.+258    	; 0x11b8 <DIO_enum_WriteChannel+0x202>
			}
			else if(Copy_u8Level == DIO_u8LOW)
    10b6:	8d 81       	ldd	r24, Y+5	; 0x05
    10b8:	88 23       	and	r24, r24
    10ba:	a9 f4       	brne	.+42     	; 0x10e6 <DIO_enum_WriteChannel+0x130>
			{
				CLR_BIT(PORTB,Local_u8PINID);
    10bc:	a8 e3       	ldi	r26, 0x38	; 56
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e8 e3       	ldi	r30, 0x38	; 56
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_enum_WriteChannel+0x124>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_enum_WriteChannel+0x120>
    10de:	80 95       	com	r24
    10e0:	84 23       	and	r24, r20
    10e2:	8c 93       	st	X, r24
    10e4:	69 c0       	rjmp	.+210    	; 0x11b8 <DIO_enum_WriteChannel+0x202>
			}
			else
			{
				Local_enumErrStatus = DIO_enumLevelErr;
    10e6:	82 e0       	ldi	r24, 0x02	; 2
    10e8:	89 83       	std	Y+1, r24	; 0x01
    10ea:	66 c0       	rjmp	.+204    	; 0x11b8 <DIO_enum_WriteChannel+0x202>
			}
			break;
		case DIO_u8PORTC:
			if(Copy_u8Level == DIO_u8High)
    10ec:	8d 81       	ldd	r24, Y+5	; 0x05
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	a1 f4       	brne	.+40     	; 0x111a <DIO_enum_WriteChannel+0x164>
			{
				SET_BIT(PORTC,Local_u8PINID);
    10f2:	a5 e3       	ldi	r26, 0x35	; 53
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e5 e3       	ldi	r30, 0x35	; 53
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <DIO_enum_WriteChannel+0x15a>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <DIO_enum_WriteChannel+0x156>
    1114:	84 2b       	or	r24, r20
    1116:	8c 93       	st	X, r24
    1118:	4f c0       	rjmp	.+158    	; 0x11b8 <DIO_enum_WriteChannel+0x202>
			}
			else if(Copy_u8Level == DIO_u8LOW)
    111a:	8d 81       	ldd	r24, Y+5	; 0x05
    111c:	88 23       	and	r24, r24
    111e:	a9 f4       	brne	.+42     	; 0x114a <DIO_enum_WriteChannel+0x194>
			{
				CLR_BIT(PORTC,Local_u8PINID);
    1120:	a5 e3       	ldi	r26, 0x35	; 53
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e5 e3       	ldi	r30, 0x35	; 53
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_enum_WriteChannel+0x188>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_enum_WriteChannel+0x184>
    1142:	80 95       	com	r24
    1144:	84 23       	and	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	37 c0       	rjmp	.+110    	; 0x11b8 <DIO_enum_WriteChannel+0x202>
			}
			else
			{
				Local_enumErrStatus = DIO_enumLevelErr;
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	34 c0       	rjmp	.+104    	; 0x11b8 <DIO_enum_WriteChannel+0x202>
			}
			break;
		case DIO_u8PORTD:
			if(Copy_u8Level == DIO_u8High)
    1150:	8d 81       	ldd	r24, Y+5	; 0x05
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	a1 f4       	brne	.+40     	; 0x117e <DIO_enum_WriteChannel+0x1c8>
			{
				SET_BIT(PORTD,Local_u8PINID);
    1156:	a2 e3       	ldi	r26, 0x32	; 50
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e2 e3       	ldi	r30, 0x32	; 50
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 2e       	mov	r0, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <DIO_enum_WriteChannel+0x1be>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	0a 94       	dec	r0
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <DIO_enum_WriteChannel+0x1ba>
    1178:	84 2b       	or	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	1d c0       	rjmp	.+58     	; 0x11b8 <DIO_enum_WriteChannel+0x202>
			}
			else if(Copy_u8Level == DIO_u8LOW)
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	88 23       	and	r24, r24
    1182:	a9 f4       	brne	.+42     	; 0x11ae <DIO_enum_WriteChannel+0x1f8>
			{
				CLR_BIT(PORTD,Local_u8PINID);
    1184:	a2 e3       	ldi	r26, 0x32	; 50
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e2 e3       	ldi	r30, 0x32	; 50
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	48 2f       	mov	r20, r24
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	02 2e       	mov	r0, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <DIO_enum_WriteChannel+0x1ec>
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	0a 94       	dec	r0
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <DIO_enum_WriteChannel+0x1e8>
    11a6:	80 95       	com	r24
    11a8:	84 23       	and	r24, r20
    11aa:	8c 93       	st	X, r24
    11ac:	05 c0       	rjmp	.+10     	; 0x11b8 <DIO_enum_WriteChannel+0x202>
			}
			else
			{
				Local_enumErrStatus = DIO_enumLevelErr;
    11ae:	82 e0       	ldi	r24, 0x02	; 2
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_enum_WriteChannel+0x202>
			}
			break;
		default :
			Local_enumErrStatus = DIO_enumChannelErr;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return Local_enumErrStatus;
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ba:	27 96       	adiw	r28, 0x07	; 7
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <DIO_enum_ReadChannel>:

DIO_enumErrStatus DIO_enum_ReadChannel (u8 Copy_u8ChannelId, pu8 Add_pu8channelLevel)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	28 97       	sbiw	r28, 0x08	; 8
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	8c 83       	std	Y+4, r24	; 0x04
    11e2:	7e 83       	std	Y+6, r23	; 0x06
    11e4:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8PINID = Copy_u8ChannelId%8;
    11e6:	8c 81       	ldd	r24, Y+4	; 0x04
    11e8:	87 70       	andi	r24, 0x07	; 7
    11ea:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PORTID = Copy_u8ChannelId/8;
    11ec:	8c 81       	ldd	r24, Y+4	; 0x04
    11ee:	86 95       	lsr	r24
    11f0:	86 95       	lsr	r24
    11f2:	86 95       	lsr	r24
    11f4:	8a 83       	std	Y+2, r24	; 0x02
	DIO_enumErrStatus Local_enumErrStatus = DIO_enumOK;
    11f6:	19 82       	std	Y+1, r1	; 0x01
	if(Add_pu8channelLevel != NULL)
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	09 f4       	brne	.+2      	; 0x1202 <DIO_enum_ReadChannel+0x36>
    1200:	74 c0       	rjmp	.+232    	; 0x12ea <DIO_enum_ReadChannel+0x11e>
	{
		switch(Local_u8PORTID)
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	38 87       	std	Y+8, r19	; 0x08
    120a:	2f 83       	std	Y+7, r18	; 0x07
    120c:	4f 81       	ldd	r20, Y+7	; 0x07
    120e:	58 85       	ldd	r21, Y+8	; 0x08
    1210:	41 30       	cpi	r20, 0x01	; 1
    1212:	51 05       	cpc	r21, r1
    1214:	59 f1       	breq	.+86     	; 0x126c <DIO_enum_ReadChannel+0xa0>
    1216:	8f 81       	ldd	r24, Y+7	; 0x07
    1218:	98 85       	ldd	r25, Y+8	; 0x08
    121a:	82 30       	cpi	r24, 0x02	; 2
    121c:	91 05       	cpc	r25, r1
    121e:	34 f4       	brge	.+12     	; 0x122c <DIO_enum_ReadChannel+0x60>
    1220:	2f 81       	ldd	r18, Y+7	; 0x07
    1222:	38 85       	ldd	r19, Y+8	; 0x08
    1224:	21 15       	cp	r18, r1
    1226:	31 05       	cpc	r19, r1
    1228:	69 f0       	breq	.+26     	; 0x1244 <DIO_enum_ReadChannel+0x78>
    122a:	5c c0       	rjmp	.+184    	; 0x12e4 <DIO_enum_ReadChannel+0x118>
    122c:	4f 81       	ldd	r20, Y+7	; 0x07
    122e:	58 85       	ldd	r21, Y+8	; 0x08
    1230:	42 30       	cpi	r20, 0x02	; 2
    1232:	51 05       	cpc	r21, r1
    1234:	79 f1       	breq	.+94     	; 0x1294 <DIO_enum_ReadChannel+0xc8>
    1236:	8f 81       	ldd	r24, Y+7	; 0x07
    1238:	98 85       	ldd	r25, Y+8	; 0x08
    123a:	83 30       	cpi	r24, 0x03	; 3
    123c:	91 05       	cpc	r25, r1
    123e:	09 f4       	brne	.+2      	; 0x1242 <DIO_enum_ReadChannel+0x76>
    1240:	3d c0       	rjmp	.+122    	; 0x12bc <DIO_enum_ReadChannel+0xf0>
    1242:	50 c0       	rjmp	.+160    	; 0x12e4 <DIO_enum_ReadChannel+0x118>
		{
			case DIO_u8PORTA:
					*Add_pu8channelLevel = GET_BIT(PINA,Local_u8PINID);
    1244:	e9 e3       	ldi	r30, 0x39	; 57
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	88 2f       	mov	r24, r24
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	a9 01       	movw	r20, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <DIO_enum_ReadChannel+0x90>
    1258:	55 95       	asr	r21
    125a:	47 95       	ror	r20
    125c:	8a 95       	dec	r24
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <DIO_enum_ReadChannel+0x8c>
    1260:	ca 01       	movw	r24, r20
    1262:	81 70       	andi	r24, 0x01	; 1
    1264:	ed 81       	ldd	r30, Y+5	; 0x05
    1266:	fe 81       	ldd	r31, Y+6	; 0x06
    1268:	80 83       	st	Z, r24
    126a:	41 c0       	rjmp	.+130    	; 0x12ee <DIO_enum_ReadChannel+0x122>
				break;
			case DIO_u8PORTB:
					*Add_pu8channelLevel = GET_BIT(PINB,Local_u8PINID);
    126c:	e6 e3       	ldi	r30, 0x36	; 54
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	88 2f       	mov	r24, r24
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a9 01       	movw	r20, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_enum_ReadChannel+0xb8>
    1280:	55 95       	asr	r21
    1282:	47 95       	ror	r20
    1284:	8a 95       	dec	r24
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <DIO_enum_ReadChannel+0xb4>
    1288:	ca 01       	movw	r24, r20
    128a:	81 70       	andi	r24, 0x01	; 1
    128c:	ed 81       	ldd	r30, Y+5	; 0x05
    128e:	fe 81       	ldd	r31, Y+6	; 0x06
    1290:	80 83       	st	Z, r24
    1292:	2d c0       	rjmp	.+90     	; 0x12ee <DIO_enum_ReadChannel+0x122>
				break;
			case DIO_u8PORTC:
					*Add_pu8channelLevel = GET_BIT(PINC,Local_u8PINID);
    1294:	e3 e3       	ldi	r30, 0x33	; 51
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	88 2f       	mov	r24, r24
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	a9 01       	movw	r20, r18
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <DIO_enum_ReadChannel+0xe0>
    12a8:	55 95       	asr	r21
    12aa:	47 95       	ror	r20
    12ac:	8a 95       	dec	r24
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <DIO_enum_ReadChannel+0xdc>
    12b0:	ca 01       	movw	r24, r20
    12b2:	81 70       	andi	r24, 0x01	; 1
    12b4:	ed 81       	ldd	r30, Y+5	; 0x05
    12b6:	fe 81       	ldd	r31, Y+6	; 0x06
    12b8:	80 83       	st	Z, r24
    12ba:	19 c0       	rjmp	.+50     	; 0x12ee <DIO_enum_ReadChannel+0x122>
				break;
			case DIO_u8PORTD:
					*Add_pu8channelLevel = GET_BIT(PIND,Local_u8PINID);
    12bc:	e0 e3       	ldi	r30, 0x30	; 48
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a9 01       	movw	r20, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <DIO_enum_ReadChannel+0x108>
    12d0:	55 95       	asr	r21
    12d2:	47 95       	ror	r20
    12d4:	8a 95       	dec	r24
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <DIO_enum_ReadChannel+0x104>
    12d8:	ca 01       	movw	r24, r20
    12da:	81 70       	andi	r24, 0x01	; 1
    12dc:	ed 81       	ldd	r30, Y+5	; 0x05
    12de:	fe 81       	ldd	r31, Y+6	; 0x06
    12e0:	80 83       	st	Z, r24
    12e2:	05 c0       	rjmp	.+10     	; 0x12ee <DIO_enum_ReadChannel+0x122>
				break;
			default :
				Local_enumErrStatus = DIO_enumChannelErr;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <DIO_enum_ReadChannel+0x122>
				break;
		}
	}
	else
	{
		Local_enumErrStatus = DIO_enumNULLptrErr;
    12ea:	84 e0       	ldi	r24, 0x04	; 4
    12ec:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enumErrStatus;
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f0:	28 96       	adiw	r28, 0x08	; 8
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <DIO_enum_FlipChannel>:
DIO_enumErrStatus DIO_enum_FlipChannel(u8 Copy_u8ChannelId)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	00 d0       	rcall	.+0      	; 0x1308 <DIO_enum_FlipChannel+0x6>
    1308:	00 d0       	rcall	.+0      	; 0x130a <DIO_enum_FlipChannel+0x8>
    130a:	00 d0       	rcall	.+0      	; 0x130c <DIO_enum_FlipChannel+0xa>
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8PINID = Copy_u8ChannelId%8;
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	87 70       	andi	r24, 0x07	; 7
    1316:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PORTID = Copy_u8ChannelId/8;
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	86 95       	lsr	r24
    131c:	86 95       	lsr	r24
    131e:	86 95       	lsr	r24
    1320:	8a 83       	std	Y+2, r24	; 0x02
	DIO_enumErrStatus Local_enumErrStatus = DIO_enumOK;
    1322:	19 82       	std	Y+1, r1	; 0x01
		switch(Local_u8PORTID)
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	3e 83       	std	Y+6, r19	; 0x06
    132c:	2d 83       	std	Y+5, r18	; 0x05
    132e:	8d 81       	ldd	r24, Y+5	; 0x05
    1330:	9e 81       	ldd	r25, Y+6	; 0x06
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	91 05       	cpc	r25, r1
    1336:	49 f1       	breq	.+82     	; 0x138a <DIO_enum_FlipChannel+0x88>
    1338:	2d 81       	ldd	r18, Y+5	; 0x05
    133a:	3e 81       	ldd	r19, Y+6	; 0x06
    133c:	22 30       	cpi	r18, 0x02	; 2
    133e:	31 05       	cpc	r19, r1
    1340:	2c f4       	brge	.+10     	; 0x134c <DIO_enum_FlipChannel+0x4a>
    1342:	8d 81       	ldd	r24, Y+5	; 0x05
    1344:	9e 81       	ldd	r25, Y+6	; 0x06
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	61 f0       	breq	.+24     	; 0x1362 <DIO_enum_FlipChannel+0x60>
    134a:	5b c0       	rjmp	.+182    	; 0x1402 <DIO_enum_FlipChannel+0x100>
    134c:	2d 81       	ldd	r18, Y+5	; 0x05
    134e:	3e 81       	ldd	r19, Y+6	; 0x06
    1350:	22 30       	cpi	r18, 0x02	; 2
    1352:	31 05       	cpc	r19, r1
    1354:	71 f1       	breq	.+92     	; 0x13b2 <DIO_enum_FlipChannel+0xb0>
    1356:	8d 81       	ldd	r24, Y+5	; 0x05
    1358:	9e 81       	ldd	r25, Y+6	; 0x06
    135a:	83 30       	cpi	r24, 0x03	; 3
    135c:	91 05       	cpc	r25, r1
    135e:	e9 f1       	breq	.+122    	; 0x13da <DIO_enum_FlipChannel+0xd8>
    1360:	50 c0       	rjmp	.+160    	; 0x1402 <DIO_enum_FlipChannel+0x100>
		{
			case DIO_u8PORTA:
					TGL_BIT(PORTA,Local_u8PINID);
    1362:	ab e3       	ldi	r26, 0x3B	; 59
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	eb e3       	ldi	r30, 0x3B	; 59
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <DIO_enum_FlipChannel+0x7e>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <DIO_enum_FlipChannel+0x7a>
    1384:	84 27       	eor	r24, r20
    1386:	8c 93       	st	X, r24
    1388:	3e c0       	rjmp	.+124    	; 0x1406 <DIO_enum_FlipChannel+0x104>
				break;
			case DIO_u8PORTB:
					TGL_BIT(PORTB,Local_u8PINID);
    138a:	a8 e3       	ldi	r26, 0x38	; 56
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e8 e3       	ldi	r30, 0x38	; 56
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	48 2f       	mov	r20, r24
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 2e       	mov	r0, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <DIO_enum_FlipChannel+0xa6>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	0a 94       	dec	r0
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <DIO_enum_FlipChannel+0xa2>
    13ac:	84 27       	eor	r24, r20
    13ae:	8c 93       	st	X, r24
    13b0:	2a c0       	rjmp	.+84     	; 0x1406 <DIO_enum_FlipChannel+0x104>
				break;
			case DIO_u8PORTC:
					TGL_BIT(PORTC,Local_u8PINID);
    13b2:	a5 e3       	ldi	r26, 0x35	; 53
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e5 e3       	ldi	r30, 0x35	; 53
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	48 2f       	mov	r20, r24
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 2e       	mov	r0, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_enum_FlipChannel+0xce>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	0a 94       	dec	r0
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_enum_FlipChannel+0xca>
    13d4:	84 27       	eor	r24, r20
    13d6:	8c 93       	st	X, r24
    13d8:	16 c0       	rjmp	.+44     	; 0x1406 <DIO_enum_FlipChannel+0x104>
				break;
			case DIO_u8PORTD:
					TGL_BIT(PORTD,Local_u8PINID);
    13da:	a2 e3       	ldi	r26, 0x32	; 50
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e2 e3       	ldi	r30, 0x32	; 50
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	48 2f       	mov	r20, r24
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 2e       	mov	r0, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_enum_FlipChannel+0xf6>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	0a 94       	dec	r0
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <DIO_enum_FlipChannel+0xf2>
    13fc:	84 27       	eor	r24, r20
    13fe:	8c 93       	st	X, r24
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <DIO_enum_FlipChannel+0x104>
				break;
			default :
				Local_enumErrStatus = DIO_enumChannelErr;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	89 83       	std	Y+1, r24	; 0x01
				break;
		}

	return Local_enumErrStatus;	
    1406:	89 81       	ldd	r24, Y+1	; 0x01
}
    1408:	26 96       	adiw	r28, 0x06	; 6
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <DIO_enum_WritePort>:
DIO_enumErrStatus DIO_enum_WritePort(u8 Copy_u8PORTId, u8 Copy_u8PORTVal)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <DIO_enum_WritePort+0x6>
    1420:	00 d0       	rcall	.+0      	; 0x1422 <DIO_enum_WritePort+0x8>
    1422:	0f 92       	push	r0
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	8a 83       	std	Y+2, r24	; 0x02
    142a:	6b 83       	std	Y+3, r22	; 0x03
		DIO_enumErrStatus Local_enumErrStatus = DIO_enumOK;
    142c:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8PORTId)
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	3d 83       	std	Y+5, r19	; 0x05
    1436:	2c 83       	std	Y+4, r18	; 0x04
    1438:	8c 81       	ldd	r24, Y+4	; 0x04
    143a:	9d 81       	ldd	r25, Y+5	; 0x05
    143c:	81 30       	cpi	r24, 0x01	; 1
    143e:	91 05       	cpc	r25, r1
    1440:	d1 f0       	breq	.+52     	; 0x1476 <DIO_enum_WritePort+0x5c>
    1442:	2c 81       	ldd	r18, Y+4	; 0x04
    1444:	3d 81       	ldd	r19, Y+5	; 0x05
    1446:	22 30       	cpi	r18, 0x02	; 2
    1448:	31 05       	cpc	r19, r1
    144a:	2c f4       	brge	.+10     	; 0x1456 <DIO_enum_WritePort+0x3c>
    144c:	8c 81       	ldd	r24, Y+4	; 0x04
    144e:	9d 81       	ldd	r25, Y+5	; 0x05
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	61 f0       	breq	.+24     	; 0x146c <DIO_enum_WritePort+0x52>
    1454:	1f c0       	rjmp	.+62     	; 0x1494 <DIO_enum_WritePort+0x7a>
    1456:	2c 81       	ldd	r18, Y+4	; 0x04
    1458:	3d 81       	ldd	r19, Y+5	; 0x05
    145a:	22 30       	cpi	r18, 0x02	; 2
    145c:	31 05       	cpc	r19, r1
    145e:	81 f0       	breq	.+32     	; 0x1480 <DIO_enum_WritePort+0x66>
    1460:	8c 81       	ldd	r24, Y+4	; 0x04
    1462:	9d 81       	ldd	r25, Y+5	; 0x05
    1464:	83 30       	cpi	r24, 0x03	; 3
    1466:	91 05       	cpc	r25, r1
    1468:	81 f0       	breq	.+32     	; 0x148a <DIO_enum_WritePort+0x70>
    146a:	14 c0       	rjmp	.+40     	; 0x1494 <DIO_enum_WritePort+0x7a>
		{
			case DIO_u8PORTA:
					PORTA = Copy_u8PORTVal;
    146c:	eb e3       	ldi	r30, 0x3B	; 59
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	80 83       	st	Z, r24
    1474:	11 c0       	rjmp	.+34     	; 0x1498 <DIO_enum_WritePort+0x7e>
				break;
			case DIO_u8PORTB:
					PORTB = Copy_u8PORTVal;
    1476:	e8 e3       	ldi	r30, 0x38	; 56
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	80 83       	st	Z, r24
    147e:	0c c0       	rjmp	.+24     	; 0x1498 <DIO_enum_WritePort+0x7e>
				break;
			case DIO_u8PORTC:
					PORTC = Copy_u8PORTVal;
    1480:	e5 e3       	ldi	r30, 0x35	; 53
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	80 83       	st	Z, r24
    1488:	07 c0       	rjmp	.+14     	; 0x1498 <DIO_enum_WritePort+0x7e>
				break;
			case DIO_u8PORTD:
					PORTD = Copy_u8PORTVal;
    148a:	e2 e3       	ldi	r30, 0x32	; 50
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	80 83       	st	Z, r24
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <DIO_enum_WritePort+0x7e>
				break;
			default :
				Local_enumErrStatus = DIO_enumChannelErr;
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
		return Local_enumErrStatus;	
    1498:	89 81       	ldd	r24, Y+1	; 0x01
}
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <DIO_enum_ReadPort>:
DIO_enumErrStatus DIO_enum_ReadPort (u8 Copy_u8PORTId, pu8 Add_pu8PORTVal)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <DIO_enum_ReadPort+0x6>
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <DIO_enum_ReadPort+0x8>
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <DIO_enum_ReadPort+0xa>
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	8a 83       	std	Y+2, r24	; 0x02
    14ba:	7c 83       	std	Y+4, r23	; 0x04
    14bc:	6b 83       	std	Y+3, r22	; 0x03
		DIO_enumErrStatus Local_enumErrStatus = DIO_enumOK;
    14be:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8PORTId)
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	3e 83       	std	Y+6, r19	; 0x06
    14c8:	2d 83       	std	Y+5, r18	; 0x05
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	91 05       	cpc	r25, r1
    14d2:	e1 f0       	breq	.+56     	; 0x150c <DIO_enum_ReadPort+0x62>
    14d4:	2d 81       	ldd	r18, Y+5	; 0x05
    14d6:	3e 81       	ldd	r19, Y+6	; 0x06
    14d8:	22 30       	cpi	r18, 0x02	; 2
    14da:	31 05       	cpc	r19, r1
    14dc:	2c f4       	brge	.+10     	; 0x14e8 <DIO_enum_ReadPort+0x3e>
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	9e 81       	ldd	r25, Y+6	; 0x06
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	61 f0       	breq	.+24     	; 0x14fe <DIO_enum_ReadPort+0x54>
    14e6:	27 c0       	rjmp	.+78     	; 0x1536 <DIO_enum_ReadPort+0x8c>
    14e8:	2d 81       	ldd	r18, Y+5	; 0x05
    14ea:	3e 81       	ldd	r19, Y+6	; 0x06
    14ec:	22 30       	cpi	r18, 0x02	; 2
    14ee:	31 05       	cpc	r19, r1
    14f0:	a1 f0       	breq	.+40     	; 0x151a <DIO_enum_ReadPort+0x70>
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	9e 81       	ldd	r25, Y+6	; 0x06
    14f6:	83 30       	cpi	r24, 0x03	; 3
    14f8:	91 05       	cpc	r25, r1
    14fa:	b1 f0       	breq	.+44     	; 0x1528 <DIO_enum_ReadPort+0x7e>
    14fc:	1c c0       	rjmp	.+56     	; 0x1536 <DIO_enum_ReadPort+0x8c>
		{
			case DIO_u8PORTA:
					*Add_pu8PORTVal = PINA;
    14fe:	e9 e3       	ldi	r30, 0x39	; 57
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	eb 81       	ldd	r30, Y+3	; 0x03
    1506:	fc 81       	ldd	r31, Y+4	; 0x04
    1508:	80 83       	st	Z, r24
    150a:	17 c0       	rjmp	.+46     	; 0x153a <DIO_enum_ReadPort+0x90>
				break;
			case DIO_u8PORTB:
					*Add_pu8PORTVal = PINB;
    150c:	e6 e3       	ldi	r30, 0x36	; 54
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	eb 81       	ldd	r30, Y+3	; 0x03
    1514:	fc 81       	ldd	r31, Y+4	; 0x04
    1516:	80 83       	st	Z, r24
    1518:	10 c0       	rjmp	.+32     	; 0x153a <DIO_enum_ReadPort+0x90>
				break;
			case DIO_u8PORTC:
					*Add_pu8PORTVal = PINC;
    151a:	e3 e3       	ldi	r30, 0x33	; 51
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	eb 81       	ldd	r30, Y+3	; 0x03
    1522:	fc 81       	ldd	r31, Y+4	; 0x04
    1524:	80 83       	st	Z, r24
    1526:	09 c0       	rjmp	.+18     	; 0x153a <DIO_enum_ReadPort+0x90>
				break;
			case DIO_u8PORTD:
					*Add_pu8PORTVal = PIND;
    1528:	e0 e3       	ldi	r30, 0x30	; 48
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	eb 81       	ldd	r30, Y+3	; 0x03
    1530:	fc 81       	ldd	r31, Y+4	; 0x04
    1532:	80 83       	st	Z, r24
    1534:	02 c0       	rjmp	.+4      	; 0x153a <DIO_enum_ReadPort+0x90>
				break;
			default :
				Local_enumErrStatus = DIO_enumChannelErr;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
		return Local_enumErrStatus;		
    153a:	89 81       	ldd	r24, Y+1	; 0x01
}
    153c:	26 96       	adiw	r28, 0x06	; 6
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <EXTI_voidInit>:
#include "../inc/MCAL/GIE/GIE_int.h"

void(*EXTI_GLOBALFUNC[3])(void);

void EXTI_voidInit(void)
{
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62

	EXTI_voidSetSignal(EXTI_CHOICE,Signal_Choice);
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	62 e0       	ldi	r22, 0x02	; 2
    155a:	0e 94 23 0b 	call	0x1646	; 0x1646 <EXTI_voidSetSignal>
	EXTI_voidEnableInt(EXTI_CHOICE);
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	0e 94 b5 0a 	call	0x156a	; 0x156a <EXTI_voidEnableInt>
}
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <EXTI_voidEnableInt>:
void EXTI_voidEnableInt(u8 Copy_u8IntID)
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	00 d0       	rcall	.+0      	; 0x1570 <EXTI_voidEnableInt+0x6>
    1570:	0f 92       	push	r0
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8IntID)
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	3b 83       	std	Y+3, r19	; 0x03
    1580:	2a 83       	std	Y+2, r18	; 0x02
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	9b 81       	ldd	r25, Y+3	; 0x03
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	91 05       	cpc	r25, r1
    158a:	89 f0       	breq	.+34     	; 0x15ae <EXTI_voidEnableInt+0x44>
    158c:	2a 81       	ldd	r18, Y+2	; 0x02
    158e:	3b 81       	ldd	r19, Y+3	; 0x03
    1590:	22 30       	cpi	r18, 0x02	; 2
    1592:	31 05       	cpc	r19, r1
    1594:	a1 f0       	breq	.+40     	; 0x15be <EXTI_voidEnableInt+0x54>
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	9b 81       	ldd	r25, Y+3	; 0x03
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	b9 f4       	brne	.+46     	; 0x15cc <EXTI_voidEnableInt+0x62>
	{
		case EXTI0:
			SET_BIT(GICR,INT0);
    159e:	ab e5       	ldi	r26, 0x5B	; 91
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	eb e5       	ldi	r30, 0x5B	; 91
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	80 64       	ori	r24, 0x40	; 64
    15aa:	8c 93       	st	X, r24
    15ac:	0f c0       	rjmp	.+30     	; 0x15cc <EXTI_voidEnableInt+0x62>
		break;
		case EXTI1:
			SET_BIT(GICR,INT1);
    15ae:	ab e5       	ldi	r26, 0x5B	; 91
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	eb e5       	ldi	r30, 0x5B	; 91
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	80 68       	ori	r24, 0x80	; 128
    15ba:	8c 93       	st	X, r24
    15bc:	07 c0       	rjmp	.+14     	; 0x15cc <EXTI_voidEnableInt+0x62>
		break;
		case EXTI2:
			SET_BIT(GICR,INT2);
    15be:	ab e5       	ldi	r26, 0x5B	; 91
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	eb e5       	ldi	r30, 0x5B	; 91
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	80 62       	ori	r24, 0x20	; 32
    15ca:	8c 93       	st	X, r24
		break;
	}
}
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <EXTI_voidDisableInt>:
void EXTI_voidDisableInt(u8 Copy_u8IntID)
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	00 d0       	rcall	.+0      	; 0x15de <EXTI_voidDisableInt+0x6>
    15de:	0f 92       	push	r0
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8IntID)
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	3b 83       	std	Y+3, r19	; 0x03
    15ee:	2a 83       	std	Y+2, r18	; 0x02
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	9b 81       	ldd	r25, Y+3	; 0x03
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	91 05       	cpc	r25, r1
    15f8:	89 f0       	breq	.+34     	; 0x161c <EXTI_voidDisableInt+0x44>
    15fa:	2a 81       	ldd	r18, Y+2	; 0x02
    15fc:	3b 81       	ldd	r19, Y+3	; 0x03
    15fe:	22 30       	cpi	r18, 0x02	; 2
    1600:	31 05       	cpc	r19, r1
    1602:	a1 f0       	breq	.+40     	; 0x162c <EXTI_voidDisableInt+0x54>
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	9b 81       	ldd	r25, Y+3	; 0x03
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	b9 f4       	brne	.+46     	; 0x163a <EXTI_voidDisableInt+0x62>
	{
		case EXTI0:
			CLR_BIT(GICR,INT0);
    160c:	ab e5       	ldi	r26, 0x5B	; 91
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	eb e5       	ldi	r30, 0x5B	; 91
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	8f 7b       	andi	r24, 0xBF	; 191
    1618:	8c 93       	st	X, r24
    161a:	0f c0       	rjmp	.+30     	; 0x163a <EXTI_voidDisableInt+0x62>
		break;
		case EXTI1:
			CLR_BIT(GICR,INT1);
    161c:	ab e5       	ldi	r26, 0x5B	; 91
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	eb e5       	ldi	r30, 0x5B	; 91
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	8f 77       	andi	r24, 0x7F	; 127
    1628:	8c 93       	st	X, r24
    162a:	07 c0       	rjmp	.+14     	; 0x163a <EXTI_voidDisableInt+0x62>
		break;
		case EXTI2:
			CLR_BIT(GICR,INT2);
    162c:	ab e5       	ldi	r26, 0x5B	; 91
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	eb e5       	ldi	r30, 0x5B	; 91
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	8f 7d       	andi	r24, 0xDF	; 223
    1638:	8c 93       	st	X, r24
		break;
	}	
}
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <EXTI_voidSetSignal>:
void EXTI_voidSetSignal(u8 Copy_u8IntID,u8 Copy_u8SignalID)
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	00 d0       	rcall	.+0      	; 0x164c <EXTI_voidSetSignal+0x6>
    164c:	00 d0       	rcall	.+0      	; 0x164e <EXTI_voidSetSignal+0x8>
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8IntID)
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	3c 83       	std	Y+4, r19	; 0x04
    165e:	2b 83       	std	Y+3, r18	; 0x03
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	9c 81       	ldd	r25, Y+4	; 0x04
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	91 05       	cpc	r25, r1
    1668:	a1 f0       	breq	.+40     	; 0x1692 <EXTI_voidSetSignal+0x4c>
    166a:	2b 81       	ldd	r18, Y+3	; 0x03
    166c:	3c 81       	ldd	r19, Y+4	; 0x04
    166e:	22 30       	cpi	r18, 0x02	; 2
    1670:	31 05       	cpc	r19, r1
    1672:	01 f1       	breq	.+64     	; 0x16b4 <EXTI_voidSetSignal+0x6e>
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	89 f5       	brne	.+98     	; 0x16de <EXTI_voidSetSignal+0x98>
	{
		case EXTI0:
			MCUCR =((MCUCR &0b11111100)|Copy_u8SignalID);
    167c:	a5 e5       	ldi	r26, 0x55	; 85
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e5 e5       	ldi	r30, 0x55	; 85
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	98 2f       	mov	r25, r24
    1688:	9c 7f       	andi	r25, 0xFC	; 252
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	89 2b       	or	r24, r25
    168e:	8c 93       	st	X, r24
    1690:	26 c0       	rjmp	.+76     	; 0x16de <EXTI_voidSetSignal+0x98>
		break;
		case EXTI1:
			MCUCR =((MCUCR &0b11110011)|(Copy_u8SignalID<<2));
    1692:	a5 e5       	ldi	r26, 0x55	; 85
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e5 e5       	ldi	r30, 0x55	; 85
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	28 2f       	mov	r18, r24
    169e:	23 7f       	andi	r18, 0xF3	; 243
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	88 2f       	mov	r24, r24
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	82 2b       	or	r24, r18
    16b0:	8c 93       	st	X, r24
    16b2:	15 c0       	rjmp	.+42     	; 0x16de <EXTI_voidSetSignal+0x98>
		break;
		case EXTI2:
			if(Copy_u8SignalID == FALLING_EDGE)
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	82 30       	cpi	r24, 0x02	; 2
    16b8:	41 f4       	brne	.+16     	; 0x16ca <EXTI_voidSetSignal+0x84>
			{
				CLR_BIT(MCUCR,ISC2);
    16ba:	a5 e5       	ldi	r26, 0x55	; 85
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e5 e5       	ldi	r30, 0x55	; 85
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	8f 7d       	andi	r24, 0xDF	; 223
    16c6:	8c 93       	st	X, r24
    16c8:	0a c0       	rjmp	.+20     	; 0x16de <EXTI_voidSetSignal+0x98>
			}
			else if(Copy_u8SignalID == RISING_EDGE)
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	83 30       	cpi	r24, 0x03	; 3
    16ce:	39 f4       	brne	.+14     	; 0x16de <EXTI_voidSetSignal+0x98>
			{
				SET_BIT(MCUCR,ISC2);
    16d0:	a5 e5       	ldi	r26, 0x55	; 85
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e5 e5       	ldi	r30, 0x55	; 85
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	80 62       	ori	r24, 0x20	; 32
    16dc:	8c 93       	st	X, r24
			}
			else
			{}
		break;
	}	
}
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	08 95       	ret

000016ec <EXTI_voidSetCallBack>:
void EXTI_voidSetCallBack(u8 Copy_u8IntID, void(*PTR)(void))
{
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <EXTI_voidSetCallBack+0x6>
    16f2:	0f 92       	push	r0
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	7b 83       	std	Y+3, r23	; 0x03
    16fc:	6a 83       	std	Y+2, r22	; 0x02
	EXTI_GLOBALFUNC[Copy_u8IntID] = PTR;
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	88 2f       	mov	r24, r24
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	fc 01       	movw	r30, r24
    170a:	e9 56       	subi	r30, 0x69	; 105
    170c:	fe 4f       	sbci	r31, 0xFE	; 254
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	9b 81       	ldd	r25, Y+3	; 0x03
    1712:	91 83       	std	Z+1, r25	; 0x01
    1714:	80 83       	st	Z, r24
}
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <__vector_1>:
void __vector_1 (void) {
    1722:	1f 92       	push	r1
    1724:	0f 92       	push	r0
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	0f 92       	push	r0
    172a:	11 24       	eor	r1, r1
    172c:	2f 93       	push	r18
    172e:	3f 93       	push	r19
    1730:	4f 93       	push	r20
    1732:	5f 93       	push	r21
    1734:	6f 93       	push	r22
    1736:	7f 93       	push	r23
    1738:	8f 93       	push	r24
    173a:	9f 93       	push	r25
    173c:	af 93       	push	r26
    173e:	bf 93       	push	r27
    1740:	ef 93       	push	r30
    1742:	ff 93       	push	r31
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
	EXTI_GLOBALFUNC[0]();
    174c:	e0 91 97 01 	lds	r30, 0x0197
    1750:	f0 91 98 01 	lds	r31, 0x0198
    1754:	09 95       	icall
}
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	ff 91       	pop	r31
    175c:	ef 91       	pop	r30
    175e:	bf 91       	pop	r27
    1760:	af 91       	pop	r26
    1762:	9f 91       	pop	r25
    1764:	8f 91       	pop	r24
    1766:	7f 91       	pop	r23
    1768:	6f 91       	pop	r22
    176a:	5f 91       	pop	r21
    176c:	4f 91       	pop	r20
    176e:	3f 91       	pop	r19
    1770:	2f 91       	pop	r18
    1772:	0f 90       	pop	r0
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	0f 90       	pop	r0
    1778:	1f 90       	pop	r1
    177a:	18 95       	reti

0000177c <__vector_2>:

void __vector_2 (void) {
    177c:	1f 92       	push	r1
    177e:	0f 92       	push	r0
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	0f 92       	push	r0
    1784:	11 24       	eor	r1, r1
    1786:	2f 93       	push	r18
    1788:	3f 93       	push	r19
    178a:	4f 93       	push	r20
    178c:	5f 93       	push	r21
    178e:	6f 93       	push	r22
    1790:	7f 93       	push	r23
    1792:	8f 93       	push	r24
    1794:	9f 93       	push	r25
    1796:	af 93       	push	r26
    1798:	bf 93       	push	r27
    179a:	ef 93       	push	r30
    179c:	ff 93       	push	r31
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
	EXTI_GLOBALFUNC[1]();
    17a6:	e0 91 99 01 	lds	r30, 0x0199
    17aa:	f0 91 9a 01 	lds	r31, 0x019A
    17ae:	09 95       	icall
}
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	ff 91       	pop	r31
    17b6:	ef 91       	pop	r30
    17b8:	bf 91       	pop	r27
    17ba:	af 91       	pop	r26
    17bc:	9f 91       	pop	r25
    17be:	8f 91       	pop	r24
    17c0:	7f 91       	pop	r23
    17c2:	6f 91       	pop	r22
    17c4:	5f 91       	pop	r21
    17c6:	4f 91       	pop	r20
    17c8:	3f 91       	pop	r19
    17ca:	2f 91       	pop	r18
    17cc:	0f 90       	pop	r0
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	0f 90       	pop	r0
    17d2:	1f 90       	pop	r1
    17d4:	18 95       	reti

000017d6 <__vector_3>:

void __vector_3 (void) {
    17d6:	1f 92       	push	r1
    17d8:	0f 92       	push	r0
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	0f 92       	push	r0
    17de:	11 24       	eor	r1, r1
    17e0:	2f 93       	push	r18
    17e2:	3f 93       	push	r19
    17e4:	4f 93       	push	r20
    17e6:	5f 93       	push	r21
    17e8:	6f 93       	push	r22
    17ea:	7f 93       	push	r23
    17ec:	8f 93       	push	r24
    17ee:	9f 93       	push	r25
    17f0:	af 93       	push	r26
    17f2:	bf 93       	push	r27
    17f4:	ef 93       	push	r30
    17f6:	ff 93       	push	r31
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
	EXTI_GLOBALFUNC[2]();
    1800:	e0 91 9b 01 	lds	r30, 0x019B
    1804:	f0 91 9c 01 	lds	r31, 0x019C
    1808:	09 95       	icall
}
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	ff 91       	pop	r31
    1810:	ef 91       	pop	r30
    1812:	bf 91       	pop	r27
    1814:	af 91       	pop	r26
    1816:	9f 91       	pop	r25
    1818:	8f 91       	pop	r24
    181a:	7f 91       	pop	r23
    181c:	6f 91       	pop	r22
    181e:	5f 91       	pop	r21
    1820:	4f 91       	pop	r20
    1822:	3f 91       	pop	r19
    1824:	2f 91       	pop	r18
    1826:	0f 90       	pop	r0
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	0f 90       	pop	r0
    182c:	1f 90       	pop	r1
    182e:	18 95       	reti

00001830 <M_GIE_void_EnableGlobalInterrupt>:
#include "../inc/MCAL/GIE/GIE_reg.h"

/*
 * Public Function Definition 
 */
void M_GIE_void_EnableGlobalInterrupt(void) {
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    1838:	af e5       	ldi	r26, 0x5F	; 95
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	ef e5       	ldi	r30, 0x5F	; 95
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	80 68       	ori	r24, 0x80	; 128
    1844:	8c 93       	st	X, r24
}
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <M_GIE_void_DisableGlobalInterrupt>:
void M_GIE_void_DisableGlobalInterrupt(void) {
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    1854:	af e5       	ldi	r26, 0x5F	; 95
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	ef e5       	ldi	r30, 0x5F	; 95
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	8f 77       	andi	r24, 0x7F	; 127
    1860:	8c 93       	st	X, r24
}
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <KEYPAD_voidInit>:
#include "../inc/HAL/KEYPAD/KEYPAD_int.h"
#include "../inc/HAL/KEYPAD/KEYPAD_cfg.h"
#include "../inc/HAL/KEYPAD/KEYPAD_prv.h"

void KEYPAD_voidInit(void)
{
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
	PORT_enumSET_PINDirection(ROW0PIN, PORT_u8PINDIR_OUTPUT);
    1870:	85 e1       	ldi	r24, 0x15	; 21
    1872:	61 e0       	ldi	r22, 0x01	; 1
    1874:	0e 94 28 15 	call	0x2a50	; 0x2a50 <PORT_enumSET_PINDirection>
	PORT_enumSET_PINDirection(ROW1PIN, PORT_u8PINDIR_OUTPUT);
    1878:	84 e1       	ldi	r24, 0x14	; 20
    187a:	61 e0       	ldi	r22, 0x01	; 1
    187c:	0e 94 28 15 	call	0x2a50	; 0x2a50 <PORT_enumSET_PINDirection>
	PORT_enumSET_PINDirection(ROW2PIN, PORT_u8PINDIR_OUTPUT);
    1880:	83 e1       	ldi	r24, 0x13	; 19
    1882:	61 e0       	ldi	r22, 0x01	; 1
    1884:	0e 94 28 15 	call	0x2a50	; 0x2a50 <PORT_enumSET_PINDirection>
	PORT_enumSET_PINDirection(ROW3PIN, PORT_u8PINDIR_OUTPUT);
    1888:	82 e1       	ldi	r24, 0x12	; 18
    188a:	61 e0       	ldi	r22, 0x01	; 1
    188c:	0e 94 28 15 	call	0x2a50	; 0x2a50 <PORT_enumSET_PINDirection>
	
	PORT_enumSET_PINMODE(ROW0PIN, PORT_u8PINMODE_OUTPUT_HIGH);
    1890:	85 e1       	ldi	r24, 0x15	; 21
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	0e 94 33 16 	call	0x2c66	; 0x2c66 <PORT_enumSET_PINMODE>
	PORT_enumSET_PINMODE(ROW1PIN, PORT_u8PINMODE_OUTPUT_HIGH);
    1898:	84 e1       	ldi	r24, 0x14	; 20
    189a:	61 e0       	ldi	r22, 0x01	; 1
    189c:	0e 94 33 16 	call	0x2c66	; 0x2c66 <PORT_enumSET_PINMODE>
	PORT_enumSET_PINMODE(ROW2PIN, PORT_u8PINMODE_OUTPUT_HIGH);
    18a0:	83 e1       	ldi	r24, 0x13	; 19
    18a2:	61 e0       	ldi	r22, 0x01	; 1
    18a4:	0e 94 33 16 	call	0x2c66	; 0x2c66 <PORT_enumSET_PINMODE>
	PORT_enumSET_PINMODE(ROW3PIN, PORT_u8PINMODE_OUTPUT_HIGH);
    18a8:	82 e1       	ldi	r24, 0x12	; 18
    18aa:	61 e0       	ldi	r22, 0x01	; 1
    18ac:	0e 94 33 16 	call	0x2c66	; 0x2c66 <PORT_enumSET_PINMODE>
	
	PORT_enumSET_PINDirection(COLOUMN0PIN, PORT_u8PINDIR_INPUT);
    18b0:	8f e1       	ldi	r24, 0x1F	; 31
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	0e 94 28 15 	call	0x2a50	; 0x2a50 <PORT_enumSET_PINDirection>
	PORT_enumSET_PINDirection(COLOUMN1PIN, PORT_u8PINDIR_INPUT);
    18b8:	8e e1       	ldi	r24, 0x1E	; 30
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	0e 94 28 15 	call	0x2a50	; 0x2a50 <PORT_enumSET_PINDirection>
	PORT_enumSET_PINDirection(COLOUMN2PIN, PORT_u8PINDIR_INPUT);
    18c0:	8d e1       	ldi	r24, 0x1D	; 29
    18c2:	60 e0       	ldi	r22, 0x00	; 0
    18c4:	0e 94 28 15 	call	0x2a50	; 0x2a50 <PORT_enumSET_PINDirection>
	PORT_enumSET_PINDirection(COLOUMN3PIN, PORT_u8PINDIR_INPUT);	
    18c8:	8b e1       	ldi	r24, 0x1B	; 27
    18ca:	60 e0       	ldi	r22, 0x00	; 0
    18cc:	0e 94 28 15 	call	0x2a50	; 0x2a50 <PORT_enumSET_PINDirection>
	
	PORT_enumSET_PINMODE(COLOUMN0PIN, PORT_u8PINMODE_INPUUT_PULLUP);
    18d0:	8f e1       	ldi	r24, 0x1F	; 31
    18d2:	63 e0       	ldi	r22, 0x03	; 3
    18d4:	0e 94 33 16 	call	0x2c66	; 0x2c66 <PORT_enumSET_PINMODE>
	PORT_enumSET_PINMODE(COLOUMN1PIN, PORT_u8PINMODE_INPUUT_PULLUP);
    18d8:	8e e1       	ldi	r24, 0x1E	; 30
    18da:	63 e0       	ldi	r22, 0x03	; 3
    18dc:	0e 94 33 16 	call	0x2c66	; 0x2c66 <PORT_enumSET_PINMODE>
	PORT_enumSET_PINMODE(COLOUMN2PIN, PORT_u8PINMODE_INPUUT_PULLUP);
    18e0:	8d e1       	ldi	r24, 0x1D	; 29
    18e2:	63 e0       	ldi	r22, 0x03	; 3
    18e4:	0e 94 33 16 	call	0x2c66	; 0x2c66 <PORT_enumSET_PINMODE>
	PORT_enumSET_PINMODE(COLOUMN3PIN, PORT_u8PINMODE_INPUUT_PULLUP);
    18e8:	8b e1       	ldi	r24, 0x1B	; 27
    18ea:	63 e0       	ldi	r22, 0x03	; 3
    18ec:	0e 94 33 16 	call	0x2c66	; 0x2c66 <PORT_enumSET_PINMODE>

}
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <KEYPAD_voidGetKEYPADVal>:
u8 KEYPAD_voidGetKEYPADVal(void)
{
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <KEYPAD_voidGetKEYPADVal+0x6>
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <KEYPAD_voidGetKEYPADVal+0x8>
    18fe:	0f 92       	push	r0
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
	u8 KEYPAD_u8ColoumnVal;
	volatile u8 KEYPAD_u8Flag = 0;
    1904:	1c 82       	std	Y+4, r1	; 0x04
	for(u8 i=0;i<4;i++)
    1906:	1a 82       	std	Y+2, r1	; 0x02
    1908:	63 c0       	rjmp	.+198    	; 0x19d0 <KEYPAD_voidGetKEYPADVal+0xda>
	{
		DIO_enum_WriteChannel(KEYPAD_u8ROWSArray[i], DIO_u8LOW);
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	88 2f       	mov	r24, r24
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	fc 01       	movw	r30, r24
    1912:	e8 59       	subi	r30, 0x98	; 152
    1914:	fe 4f       	sbci	r31, 0xFE	; 254
    1916:	80 81       	ld	r24, Z
    1918:	60 e0       	ldi	r22, 0x00	; 0
    191a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
		for(u8 m=0;m<4;m++)
    191e:	19 82       	std	Y+1, r1	; 0x01
    1920:	46 c0       	rjmp	.+140    	; 0x19ae <KEYPAD_voidGetKEYPADVal+0xb8>
		{
			DIO_enum_ReadChannel (KEYPAD_u8COLOUMNSSArray[m], &KEYPAD_u8ColoumnVal);
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	88 2f       	mov	r24, r24
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	fc 01       	movw	r30, r24
    192a:	e4 59       	subi	r30, 0x94	; 148
    192c:	fe 4f       	sbci	r31, 0xFE	; 254
    192e:	80 81       	ld	r24, Z
    1930:	9e 01       	movw	r18, r28
    1932:	2d 5f       	subi	r18, 0xFD	; 253
    1934:	3f 4f       	sbci	r19, 0xFF	; 255
    1936:	b9 01       	movw	r22, r18
    1938:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_enum_ReadChannel>
			if(KEYPAD_u8ColoumnVal == DIO_u8LOW)
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	88 23       	and	r24, r24
    1940:	99 f4       	brne	.+38     	; 0x1968 <KEYPAD_voidGetKEYPADVal+0x72>
    1942:	0d c0       	rjmp	.+26     	; 0x195e <KEYPAD_voidGetKEYPADVal+0x68>
			{
				while(KEYPAD_u8ColoumnVal == DIO_u8LOW)
				{
					DIO_enum_ReadChannel (KEYPAD_u8COLOUMNSSArray[m], &KEYPAD_u8ColoumnVal);
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	88 2f       	mov	r24, r24
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	fc 01       	movw	r30, r24
    194c:	e4 59       	subi	r30, 0x94	; 148
    194e:	fe 4f       	sbci	r31, 0xFE	; 254
    1950:	80 81       	ld	r24, Z
    1952:	9e 01       	movw	r18, r28
    1954:	2d 5f       	subi	r18, 0xFD	; 253
    1956:	3f 4f       	sbci	r19, 0xFF	; 255
    1958:	b9 01       	movw	r22, r18
    195a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_enum_ReadChannel>
		for(u8 m=0;m<4;m++)
		{
			DIO_enum_ReadChannel (KEYPAD_u8COLOUMNSSArray[m], &KEYPAD_u8ColoumnVal);
			if(KEYPAD_u8ColoumnVal == DIO_u8LOW)
			{
				while(KEYPAD_u8ColoumnVal == DIO_u8LOW)
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	88 23       	and	r24, r24
    1962:	81 f3       	breq	.-32     	; 0x1944 <KEYPAD_voidGetKEYPADVal+0x4e>
				{
					DIO_enum_ReadChannel (KEYPAD_u8COLOUMNSSArray[m], &KEYPAD_u8ColoumnVal);
				}
				KEYPAD_u8Flag = 1;
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	8c 83       	std	Y+4, r24	; 0x04
			}
			if(KEYPAD_u8Flag == 1 )
    1968:	8c 81       	ldd	r24, Y+4	; 0x04
    196a:	81 30       	cpi	r24, 0x01	; 1
    196c:	e9 f4       	brne	.+58     	; 0x19a8 <KEYPAD_voidGetKEYPADVal+0xb2>
			{

				DIO_enum_WriteChannel(KEYPAD_u8ROWSArray[i], DIO_u8High);
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	88 2f       	mov	r24, r24
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	fc 01       	movw	r30, r24
    1976:	e8 59       	subi	r30, 0x98	; 152
    1978:	fe 4f       	sbci	r31, 0xFE	; 254
    197a:	80 81       	ld	r24, Z
    197c:	61 e0       	ldi	r22, 0x01	; 1
    197e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
				return KEYPAD_u8arrayVals[i][m];
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	48 2f       	mov	r20, r24
    1986:	50 e0       	ldi	r21, 0x00	; 0
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	ca 01       	movw	r24, r20
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	82 0f       	add	r24, r18
    199a:	93 1f       	adc	r25, r19
    199c:	fc 01       	movw	r30, r24
    199e:	e0 59       	subi	r30, 0x90	; 144
    19a0:	fe 4f       	sbci	r31, 0xFE	; 254
    19a2:	80 81       	ld	r24, Z
    19a4:	8d 83       	std	Y+5, r24	; 0x05
    19a6:	19 c0       	rjmp	.+50     	; 0x19da <KEYPAD_voidGetKEYPADVal+0xe4>
	u8 KEYPAD_u8ColoumnVal;
	volatile u8 KEYPAD_u8Flag = 0;
	for(u8 i=0;i<4;i++)
	{
		DIO_enum_WriteChannel(KEYPAD_u8ROWSArray[i], DIO_u8LOW);
		for(u8 m=0;m<4;m++)
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	8f 5f       	subi	r24, 0xFF	; 255
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	84 30       	cpi	r24, 0x04	; 4
    19b2:	08 f4       	brcc	.+2      	; 0x19b6 <KEYPAD_voidGetKEYPADVal+0xc0>
    19b4:	b6 cf       	rjmp	.-148    	; 0x1922 <KEYPAD_voidGetKEYPADVal+0x2c>

				DIO_enum_WriteChannel(KEYPAD_u8ROWSArray[i], DIO_u8High);
				return KEYPAD_u8arrayVals[i][m];
			}
		}
		DIO_enum_WriteChannel(KEYPAD_u8ROWSArray[i], DIO_u8High);
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	88 2f       	mov	r24, r24
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	fc 01       	movw	r30, r24
    19be:	e8 59       	subi	r30, 0x98	; 152
    19c0:	fe 4f       	sbci	r31, 0xFE	; 254
    19c2:	80 81       	ld	r24, Z
    19c4:	61 e0       	ldi	r22, 0x01	; 1
    19c6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
}
u8 KEYPAD_voidGetKEYPADVal(void)
{
	u8 KEYPAD_u8ColoumnVal;
	volatile u8 KEYPAD_u8Flag = 0;
	for(u8 i=0;i<4;i++)
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	8f 5f       	subi	r24, 0xFF	; 255
    19ce:	8a 83       	std	Y+2, r24	; 0x02
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	84 30       	cpi	r24, 0x04	; 4
    19d4:	08 f4       	brcc	.+2      	; 0x19d8 <KEYPAD_voidGetKEYPADVal+0xe2>
    19d6:	99 cf       	rjmp	.-206    	; 0x190a <KEYPAD_voidGetKEYPADVal+0x14>
				return KEYPAD_u8arrayVals[i][m];
			}
		}
		DIO_enum_WriteChannel(KEYPAD_u8ROWSArray[i], DIO_u8High);
	}
	return 0;
    19d8:	1d 82       	std	Y+5, r1	; 0x05
    19da:	8d 81       	ldd	r24, Y+5	; 0x05
}
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <LCD_voidInit>:
#include<util/delay.h>



void LCD_voidInit(void)
{
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	c4 55       	subi	r28, 0x54	; 84
    19fa:	d0 40       	sbci	r29, 0x00	; 0
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
	PORT_enumSET_PINDirection(RS, PORT_u8PINDIR_OUTPUT);
    1a06:	83 e0       	ldi	r24, 0x03	; 3
    1a08:	61 e0       	ldi	r22, 0x01	; 1
    1a0a:	0e 94 28 15 	call	0x2a50	; 0x2a50 <PORT_enumSET_PINDirection>
	PORT_enumSET_PINDirection(EN, PORT_u8PINDIR_OUTPUT);
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	61 e0       	ldi	r22, 0x01	; 1
    1a12:	0e 94 28 15 	call	0x2a50	; 0x2a50 <PORT_enumSET_PINDirection>
	PORT_enumSET_PINDirection(D4 , PORT_u8PINDIR_OUTPUT);
    1a16:	88 e0       	ldi	r24, 0x08	; 8
    1a18:	61 e0       	ldi	r22, 0x01	; 1
    1a1a:	0e 94 28 15 	call	0x2a50	; 0x2a50 <PORT_enumSET_PINDirection>
	PORT_enumSET_PINDirection(D5 , PORT_u8PINDIR_OUTPUT);
    1a1e:	89 e0       	ldi	r24, 0x09	; 9
    1a20:	61 e0       	ldi	r22, 0x01	; 1
    1a22:	0e 94 28 15 	call	0x2a50	; 0x2a50 <PORT_enumSET_PINDirection>
	PORT_enumSET_PINDirection(D6 , PORT_u8PINDIR_OUTPUT);
    1a26:	8a e0       	ldi	r24, 0x0A	; 10
    1a28:	61 e0       	ldi	r22, 0x01	; 1
    1a2a:	0e 94 28 15 	call	0x2a50	; 0x2a50 <PORT_enumSET_PINDirection>
	PORT_enumSET_PINDirection(D7 , PORT_u8PINDIR_OUTPUT);
    1a2e:	8c e0       	ldi	r24, 0x0C	; 12
    1a30:	61 e0       	ldi	r22, 0x01	; 1
    1a32:	0e 94 28 15 	call	0x2a50	; 0x2a50 <PORT_enumSET_PINDirection>
    1a36:	fe 01       	movw	r30, r28
    1a38:	ef 5a       	subi	r30, 0xAF	; 175
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	a0 ef       	ldi	r26, 0xF0	; 240
    1a42:	b1 e4       	ldi	r27, 0x41	; 65
    1a44:	80 83       	st	Z, r24
    1a46:	91 83       	std	Z+1, r25	; 0x01
    1a48:	a2 83       	std	Z+2, r26	; 0x02
    1a4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4c:	8e 01       	movw	r16, r28
    1a4e:	03 5b       	subi	r16, 0xB3	; 179
    1a50:	1f 4f       	sbci	r17, 0xFF	; 255
    1a52:	fe 01       	movw	r30, r28
    1a54:	ef 5a       	subi	r30, 0xAF	; 175
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	60 81       	ld	r22, Z
    1a5a:	71 81       	ldd	r23, Z+1	; 0x01
    1a5c:	82 81       	ldd	r24, Z+2	; 0x02
    1a5e:	93 81       	ldd	r25, Z+3	; 0x03
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	4a ef       	ldi	r20, 0xFA	; 250
    1a66:	54 e4       	ldi	r21, 0x44	; 68
    1a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	f8 01       	movw	r30, r16
    1a72:	80 83       	st	Z, r24
    1a74:	91 83       	std	Z+1, r25	; 0x01
    1a76:	a2 83       	std	Z+2, r26	; 0x02
    1a78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e3 5b       	subi	r30, 0xB3	; 179
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	60 81       	ld	r22, Z
    1a82:	71 81       	ldd	r23, Z+1	; 0x01
    1a84:	82 81       	ldd	r24, Z+2	; 0x02
    1a86:	93 81       	ldd	r25, Z+3	; 0x03
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e8       	ldi	r20, 0x80	; 128
    1a8e:	5f e3       	ldi	r21, 0x3F	; 63
    1a90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a94:	88 23       	and	r24, r24
    1a96:	44 f4       	brge	.+16     	; 0x1aa8 <LCD_voidInit+0xbc>
		__ticks = 1;
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e5 5b       	subi	r30, 0xB5	; 181
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	91 83       	std	Z+1, r25	; 0x01
    1aa4:	80 83       	st	Z, r24
    1aa6:	64 c0       	rjmp	.+200    	; 0x1b70 <LCD_voidInit+0x184>
	else if (__tmp > 65535)
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e3 5b       	subi	r30, 0xB3	; 179
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	60 81       	ld	r22, Z
    1ab0:	71 81       	ldd	r23, Z+1	; 0x01
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	3f ef       	ldi	r19, 0xFF	; 255
    1aba:	4f e7       	ldi	r20, 0x7F	; 127
    1abc:	57 e4       	ldi	r21, 0x47	; 71
    1abe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ac2:	18 16       	cp	r1, r24
    1ac4:	0c f0       	brlt	.+2      	; 0x1ac8 <LCD_voidInit+0xdc>
    1ac6:	43 c0       	rjmp	.+134    	; 0x1b4e <LCD_voidInit+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac8:	fe 01       	movw	r30, r28
    1aca:	ef 5a       	subi	r30, 0xAF	; 175
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	60 81       	ld	r22, Z
    1ad0:	71 81       	ldd	r23, Z+1	; 0x01
    1ad2:	82 81       	ldd	r24, Z+2	; 0x02
    1ad4:	93 81       	ldd	r25, Z+3	; 0x03
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e2       	ldi	r20, 0x20	; 32
    1adc:	51 e4       	ldi	r21, 0x41	; 65
    1ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	8e 01       	movw	r16, r28
    1ae8:	05 5b       	subi	r16, 0xB5	; 181
    1aea:	1f 4f       	sbci	r17, 0xFF	; 255
    1aec:	bc 01       	movw	r22, r24
    1aee:	cd 01       	movw	r24, r26
    1af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	f8 01       	movw	r30, r16
    1afa:	91 83       	std	Z+1, r25	; 0x01
    1afc:	80 83       	st	Z, r24
    1afe:	1f c0       	rjmp	.+62     	; 0x1b3e <LCD_voidInit+0x152>
    1b00:	fe 01       	movw	r30, r28
    1b02:	e7 5b       	subi	r30, 0xB7	; 183
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	88 ec       	ldi	r24, 0xC8	; 200
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	91 83       	std	Z+1, r25	; 0x01
    1b0c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b0e:	fe 01       	movw	r30, r28
    1b10:	e7 5b       	subi	r30, 0xB7	; 183
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	80 81       	ld	r24, Z
    1b16:	91 81       	ldd	r25, Z+1	; 0x01
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <LCD_voidInit+0x12c>
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	e7 5b       	subi	r30, 0xB7	; 183
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	91 83       	std	Z+1, r25	; 0x01
    1b24:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b26:	de 01       	movw	r26, r28
    1b28:	a5 5b       	subi	r26, 0xB5	; 181
    1b2a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	e5 5b       	subi	r30, 0xB5	; 181
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	80 81       	ld	r24, Z
    1b34:	91 81       	ldd	r25, Z+1	; 0x01
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	11 96       	adiw	r26, 0x01	; 1
    1b3a:	9c 93       	st	X, r25
    1b3c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3e:	fe 01       	movw	r30, r28
    1b40:	e5 5b       	subi	r30, 0xB5	; 181
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	80 81       	ld	r24, Z
    1b46:	91 81       	ldd	r25, Z+1	; 0x01
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	d1 f6       	brne	.-76     	; 0x1b00 <LCD_voidInit+0x114>
    1b4c:	27 c0       	rjmp	.+78     	; 0x1b9c <LCD_voidInit+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4e:	8e 01       	movw	r16, r28
    1b50:	05 5b       	subi	r16, 0xB5	; 181
    1b52:	1f 4f       	sbci	r17, 0xFF	; 255
    1b54:	fe 01       	movw	r30, r28
    1b56:	e3 5b       	subi	r30, 0xB3	; 179
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	60 81       	ld	r22, Z
    1b5c:	71 81       	ldd	r23, Z+1	; 0x01
    1b5e:	82 81       	ldd	r24, Z+2	; 0x02
    1b60:	93 81       	ldd	r25, Z+3	; 0x03
    1b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	f8 01       	movw	r30, r16
    1b6c:	91 83       	std	Z+1, r25	; 0x01
    1b6e:	80 83       	st	Z, r24
    1b70:	de 01       	movw	r26, r28
    1b72:	a9 5b       	subi	r26, 0xB9	; 185
    1b74:	bf 4f       	sbci	r27, 0xFF	; 255
    1b76:	fe 01       	movw	r30, r28
    1b78:	e5 5b       	subi	r30, 0xB5	; 181
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	80 81       	ld	r24, Z
    1b7e:	91 81       	ldd	r25, Z+1	; 0x01
    1b80:	8d 93       	st	X+, r24
    1b82:	9c 93       	st	X, r25
    1b84:	fe 01       	movw	r30, r28
    1b86:	e9 5b       	subi	r30, 0xB9	; 185
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	80 81       	ld	r24, Z
    1b8c:	91 81       	ldd	r25, Z+1	; 0x01
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <LCD_voidInit+0x1a2>
    1b92:	fe 01       	movw	r30, r28
    1b94:	e9 5b       	subi	r30, 0xB9	; 185
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	91 83       	std	Z+1, r25	; 0x01
    1b9a:	80 83       	st	Z, r24
	_delay_ms (30);

	LCD_voidSendCommand(LCD_RETURN_HOME);
    1b9c:	82 e0       	ldi	r24, 0x02	; 2
    1b9e:	0e 94 4e 10 	call	0x209c	; 0x209c <LCD_voidSendCommand>
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	ed 5b       	subi	r30, 0xBD	; 189
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	a0 e7       	ldi	r26, 0x70	; 112
    1bae:	b1 e4       	ldi	r27, 0x41	; 65
    1bb0:	80 83       	st	Z, r24
    1bb2:	91 83       	std	Z+1, r25	; 0x01
    1bb4:	a2 83       	std	Z+2, r26	; 0x02
    1bb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb8:	8e 01       	movw	r16, r28
    1bba:	01 5c       	subi	r16, 0xC1	; 193
    1bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	ed 5b       	subi	r30, 0xBD	; 189
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	60 81       	ld	r22, Z
    1bc6:	71 81       	ldd	r23, Z+1	; 0x01
    1bc8:	82 81       	ldd	r24, Z+2	; 0x02
    1bca:	93 81       	ldd	r25, Z+3	; 0x03
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	4a ef       	ldi	r20, 0xFA	; 250
    1bd2:	54 e4       	ldi	r21, 0x44	; 68
    1bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	f8 01       	movw	r30, r16
    1bde:	80 83       	st	Z, r24
    1be0:	91 83       	std	Z+1, r25	; 0x01
    1be2:	a2 83       	std	Z+2, r26	; 0x02
    1be4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1be6:	fe 01       	movw	r30, r28
    1be8:	ff 96       	adiw	r30, 0x3f	; 63
    1bea:	60 81       	ld	r22, Z
    1bec:	71 81       	ldd	r23, Z+1	; 0x01
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	93 81       	ldd	r25, Z+3	; 0x03
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e8       	ldi	r20, 0x80	; 128
    1bf8:	5f e3       	ldi	r21, 0x3F	; 63
    1bfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bfe:	88 23       	and	r24, r24
    1c00:	2c f4       	brge	.+10     	; 0x1c0c <LCD_voidInit+0x220>
		__ticks = 1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9e af       	std	Y+62, r25	; 0x3e
    1c08:	8d af       	std	Y+61, r24	; 0x3d
    1c0a:	46 c0       	rjmp	.+140    	; 0x1c98 <LCD_voidInit+0x2ac>
	else if (__tmp > 65535)
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	ff 96       	adiw	r30, 0x3f	; 63
    1c10:	60 81       	ld	r22, Z
    1c12:	71 81       	ldd	r23, Z+1	; 0x01
    1c14:	82 81       	ldd	r24, Z+2	; 0x02
    1c16:	93 81       	ldd	r25, Z+3	; 0x03
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	3f ef       	ldi	r19, 0xFF	; 255
    1c1c:	4f e7       	ldi	r20, 0x7F	; 127
    1c1e:	57 e4       	ldi	r21, 0x47	; 71
    1c20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c24:	18 16       	cp	r1, r24
    1c26:	64 f5       	brge	.+88     	; 0x1c80 <LCD_voidInit+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c28:	fe 01       	movw	r30, r28
    1c2a:	ed 5b       	subi	r30, 0xBD	; 189
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	40 e2       	ldi	r20, 0x20	; 32
    1c3c:	51 e4       	ldi	r21, 0x41	; 65
    1c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	bc 01       	movw	r22, r24
    1c48:	cd 01       	movw	r24, r26
    1c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	9e af       	std	Y+62, r25	; 0x3e
    1c54:	8d af       	std	Y+61, r24	; 0x3d
    1c56:	0f c0       	rjmp	.+30     	; 0x1c76 <LCD_voidInit+0x28a>
    1c58:	88 ec       	ldi	r24, 0xC8	; 200
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9c af       	std	Y+60, r25	; 0x3c
    1c5e:	8b af       	std	Y+59, r24	; 0x3b
    1c60:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c62:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	f1 f7       	brne	.-4      	; 0x1c64 <LCD_voidInit+0x278>
    1c68:	9c af       	std	Y+60, r25	; 0x3c
    1c6a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	9e af       	std	Y+62, r25	; 0x3e
    1c74:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c76:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c78:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c7a:	00 97       	sbiw	r24, 0x00	; 0
    1c7c:	69 f7       	brne	.-38     	; 0x1c58 <LCD_voidInit+0x26c>
    1c7e:	16 c0       	rjmp	.+44     	; 0x1cac <LCD_voidInit+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c80:	fe 01       	movw	r30, r28
    1c82:	ff 96       	adiw	r30, 0x3f	; 63
    1c84:	60 81       	ld	r22, Z
    1c86:	71 81       	ldd	r23, Z+1	; 0x01
    1c88:	82 81       	ldd	r24, Z+2	; 0x02
    1c8a:	93 81       	ldd	r25, Z+3	; 0x03
    1c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	9e af       	std	Y+62, r25	; 0x3e
    1c96:	8d af       	std	Y+61, r24	; 0x3d
    1c98:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c9c:	9a af       	std	Y+58, r25	; 0x3a
    1c9e:	89 af       	std	Y+57, r24	; 0x39
    1ca0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ca2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <LCD_voidInit+0x2b8>
    1ca8:	9a af       	std	Y+58, r25	; 0x3a
    1caa:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms (15);
	LCD_voidSendCommand(FunctionSet1_Command);
    1cac:	82 e2       	ldi	r24, 0x22	; 34
    1cae:	0e 94 4e 10 	call	0x209c	; 0x209c <LCD_voidSendCommand>
	DIO_enum_WriteChannel(EN, DIO_u8High);
    1cb2:	82 e0       	ldi	r24, 0x02	; 2
    1cb4:	61 e0       	ldi	r22, 0x01	; 1
    1cb6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>

	DIO_enum_WriteChannel(D4, GET_BIT(FunctionSet2_Command,4));
    1cba:	88 e0       	ldi	r24, 0x08	; 8
    1cbc:	60 e0       	ldi	r22, 0x00	; 0
    1cbe:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
	DIO_enum_WriteChannel(D5, GET_BIT(FunctionSet2_Command,5));
    1cc2:	89 e0       	ldi	r24, 0x09	; 9
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
	DIO_enum_WriteChannel(D6, GET_BIT(FunctionSet2_Command,6));
    1cca:	8a e0       	ldi	r24, 0x0A	; 10
    1ccc:	60 e0       	ldi	r22, 0x00	; 0
    1cce:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
	DIO_enum_WriteChannel(D7, GET_BIT(FunctionSet2_Command,7));
    1cd2:	8c e0       	ldi	r24, 0x0C	; 12
    1cd4:	61 e0       	ldi	r22, 0x01	; 1
    1cd6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
	
	DIO_enum_WriteChannel(EN, DIO_u8LOW);
    1cda:	82 e0       	ldi	r24, 0x02	; 2
    1cdc:	60 e0       	ldi	r22, 0x00	; 0
    1cde:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	a0 e8       	ldi	r26, 0x80	; 128
    1ce8:	bf e3       	ldi	r27, 0x3F	; 63
    1cea:	8d ab       	std	Y+53, r24	; 0x35
    1cec:	9e ab       	std	Y+54, r25	; 0x36
    1cee:	af ab       	std	Y+55, r26	; 0x37
    1cf0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf2:	6d a9       	ldd	r22, Y+53	; 0x35
    1cf4:	7e a9       	ldd	r23, Y+54	; 0x36
    1cf6:	8f a9       	ldd	r24, Y+55	; 0x37
    1cf8:	98 ad       	ldd	r25, Y+56	; 0x38
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	4a ef       	ldi	r20, 0xFA	; 250
    1d00:	54 e4       	ldi	r21, 0x44	; 68
    1d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	89 ab       	std	Y+49, r24	; 0x31
    1d0c:	9a ab       	std	Y+50, r25	; 0x32
    1d0e:	ab ab       	std	Y+51, r26	; 0x33
    1d10:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d12:	69 a9       	ldd	r22, Y+49	; 0x31
    1d14:	7a a9       	ldd	r23, Y+50	; 0x32
    1d16:	8b a9       	ldd	r24, Y+51	; 0x33
    1d18:	9c a9       	ldd	r25, Y+52	; 0x34
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e8       	ldi	r20, 0x80	; 128
    1d20:	5f e3       	ldi	r21, 0x3F	; 63
    1d22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d26:	88 23       	and	r24, r24
    1d28:	2c f4       	brge	.+10     	; 0x1d34 <LCD_voidInit+0x348>
		__ticks = 1;
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	98 ab       	std	Y+48, r25	; 0x30
    1d30:	8f a7       	std	Y+47, r24	; 0x2f
    1d32:	3f c0       	rjmp	.+126    	; 0x1db2 <LCD_voidInit+0x3c6>
	else if (__tmp > 65535)
    1d34:	69 a9       	ldd	r22, Y+49	; 0x31
    1d36:	7a a9       	ldd	r23, Y+50	; 0x32
    1d38:	8b a9       	ldd	r24, Y+51	; 0x33
    1d3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	3f ef       	ldi	r19, 0xFF	; 255
    1d40:	4f e7       	ldi	r20, 0x7F	; 127
    1d42:	57 e4       	ldi	r21, 0x47	; 71
    1d44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d48:	18 16       	cp	r1, r24
    1d4a:	4c f5       	brge	.+82     	; 0x1d9e <LCD_voidInit+0x3b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4c:	6d a9       	ldd	r22, Y+53	; 0x35
    1d4e:	7e a9       	ldd	r23, Y+54	; 0x36
    1d50:	8f a9       	ldd	r24, Y+55	; 0x37
    1d52:	98 ad       	ldd	r25, Y+56	; 0x38
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	40 e2       	ldi	r20, 0x20	; 32
    1d5a:	51 e4       	ldi	r21, 0x41	; 65
    1d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	bc 01       	movw	r22, r24
    1d66:	cd 01       	movw	r24, r26
    1d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	98 ab       	std	Y+48, r25	; 0x30
    1d72:	8f a7       	std	Y+47, r24	; 0x2f
    1d74:	0f c0       	rjmp	.+30     	; 0x1d94 <LCD_voidInit+0x3a8>
    1d76:	88 ec       	ldi	r24, 0xC8	; 200
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	9e a7       	std	Y+46, r25	; 0x2e
    1d7c:	8d a7       	std	Y+45, r24	; 0x2d
    1d7e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d80:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	f1 f7       	brne	.-4      	; 0x1d82 <LCD_voidInit+0x396>
    1d86:	9e a7       	std	Y+46, r25	; 0x2e
    1d88:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	98 ab       	std	Y+48, r25	; 0x30
    1d92:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d96:	98 a9       	ldd	r25, Y+48	; 0x30
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	69 f7       	brne	.-38     	; 0x1d76 <LCD_voidInit+0x38a>
    1d9c:	14 c0       	rjmp	.+40     	; 0x1dc6 <LCD_voidInit+0x3da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9e:	69 a9       	ldd	r22, Y+49	; 0x31
    1da0:	7a a9       	ldd	r23, Y+50	; 0x32
    1da2:	8b a9       	ldd	r24, Y+51	; 0x33
    1da4:	9c a9       	ldd	r25, Y+52	; 0x34
    1da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	98 ab       	std	Y+48, r25	; 0x30
    1db0:	8f a7       	std	Y+47, r24	; 0x2f
    1db2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1db4:	98 a9       	ldd	r25, Y+48	; 0x30
    1db6:	9c a7       	std	Y+44, r25	; 0x2c
    1db8:	8b a7       	std	Y+43, r24	; 0x2b
    1dba:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dbc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	f1 f7       	brne	.-4      	; 0x1dbe <LCD_voidInit+0x3d2>
    1dc2:	9c a7       	std	Y+44, r25	; 0x2c
    1dc4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms (1);
	LCD_voidSendCommand(LCD_DISPLAY_ON);
    1dc6:	8c e0       	ldi	r24, 0x0C	; 12
    1dc8:	0e 94 4e 10 	call	0x209c	; 0x209c <LCD_voidSendCommand>
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	a0 e8       	ldi	r26, 0x80	; 128
    1dd2:	bf e3       	ldi	r27, 0x3F	; 63
    1dd4:	8f a3       	std	Y+39, r24	; 0x27
    1dd6:	98 a7       	std	Y+40, r25	; 0x28
    1dd8:	a9 a7       	std	Y+41, r26	; 0x29
    1dda:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ddc:	6f a1       	ldd	r22, Y+39	; 0x27
    1dde:	78 a5       	ldd	r23, Y+40	; 0x28
    1de0:	89 a5       	ldd	r24, Y+41	; 0x29
    1de2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	4a ef       	ldi	r20, 0xFA	; 250
    1dea:	54 e4       	ldi	r21, 0x44	; 68
    1dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	8b a3       	std	Y+35, r24	; 0x23
    1df6:	9c a3       	std	Y+36, r25	; 0x24
    1df8:	ad a3       	std	Y+37, r26	; 0x25
    1dfa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dfc:	6b a1       	ldd	r22, Y+35	; 0x23
    1dfe:	7c a1       	ldd	r23, Y+36	; 0x24
    1e00:	8d a1       	ldd	r24, Y+37	; 0x25
    1e02:	9e a1       	ldd	r25, Y+38	; 0x26
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e8       	ldi	r20, 0x80	; 128
    1e0a:	5f e3       	ldi	r21, 0x3F	; 63
    1e0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e10:	88 23       	and	r24, r24
    1e12:	2c f4       	brge	.+10     	; 0x1e1e <LCD_voidInit+0x432>
		__ticks = 1;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	9a a3       	std	Y+34, r25	; 0x22
    1e1a:	89 a3       	std	Y+33, r24	; 0x21
    1e1c:	3f c0       	rjmp	.+126    	; 0x1e9c <LCD_voidInit+0x4b0>
	else if (__tmp > 65535)
    1e1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e20:	7c a1       	ldd	r23, Y+36	; 0x24
    1e22:	8d a1       	ldd	r24, Y+37	; 0x25
    1e24:	9e a1       	ldd	r25, Y+38	; 0x26
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	3f ef       	ldi	r19, 0xFF	; 255
    1e2a:	4f e7       	ldi	r20, 0x7F	; 127
    1e2c:	57 e4       	ldi	r21, 0x47	; 71
    1e2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e32:	18 16       	cp	r1, r24
    1e34:	4c f5       	brge	.+82     	; 0x1e88 <LCD_voidInit+0x49c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e36:	6f a1       	ldd	r22, Y+39	; 0x27
    1e38:	78 a5       	ldd	r23, Y+40	; 0x28
    1e3a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	40 e2       	ldi	r20, 0x20	; 32
    1e44:	51 e4       	ldi	r21, 0x41	; 65
    1e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	bc 01       	movw	r22, r24
    1e50:	cd 01       	movw	r24, r26
    1e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9a a3       	std	Y+34, r25	; 0x22
    1e5c:	89 a3       	std	Y+33, r24	; 0x21
    1e5e:	0f c0       	rjmp	.+30     	; 0x1e7e <LCD_voidInit+0x492>
    1e60:	88 ec       	ldi	r24, 0xC8	; 200
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	98 a3       	std	Y+32, r25	; 0x20
    1e66:	8f 8f       	std	Y+31, r24	; 0x1f
    1e68:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e6a:	98 a1       	ldd	r25, Y+32	; 0x20
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	f1 f7       	brne	.-4      	; 0x1e6c <LCD_voidInit+0x480>
    1e70:	98 a3       	std	Y+32, r25	; 0x20
    1e72:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e74:	89 a1       	ldd	r24, Y+33	; 0x21
    1e76:	9a a1       	ldd	r25, Y+34	; 0x22
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	9a a3       	std	Y+34, r25	; 0x22
    1e7c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e80:	9a a1       	ldd	r25, Y+34	; 0x22
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	69 f7       	brne	.-38     	; 0x1e60 <LCD_voidInit+0x474>
    1e86:	14 c0       	rjmp	.+40     	; 0x1eb0 <LCD_voidInit+0x4c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e88:	6b a1       	ldd	r22, Y+35	; 0x23
    1e8a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	9a a3       	std	Y+34, r25	; 0x22
    1e9a:	89 a3       	std	Y+33, r24	; 0x21
    1e9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1ea0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ea2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ea4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ea6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <LCD_voidInit+0x4bc>
    1eac:	9e 8f       	std	Y+30, r25	; 0x1e
    1eae:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms (1);
	LCD_voidSendCommand(LCD_CLEAR);
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	0e 94 4e 10 	call	0x209c	; 0x209c <LCD_voidSendCommand>
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	a0 e7       	ldi	r26, 0x70	; 112
    1ebc:	b1 e4       	ldi	r27, 0x41	; 65
    1ebe:	89 8f       	std	Y+25, r24	; 0x19
    1ec0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ec2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ec4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ec8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ecc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	4a ef       	ldi	r20, 0xFA	; 250
    1ed4:	54 e4       	ldi	r21, 0x44	; 68
    1ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	8d 8b       	std	Y+21, r24	; 0x15
    1ee0:	9e 8b       	std	Y+22, r25	; 0x16
    1ee2:	af 8b       	std	Y+23, r26	; 0x17
    1ee4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ee6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee8:	7e 89       	ldd	r23, Y+22	; 0x16
    1eea:	8f 89       	ldd	r24, Y+23	; 0x17
    1eec:	98 8d       	ldd	r25, Y+24	; 0x18
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e8       	ldi	r20, 0x80	; 128
    1ef4:	5f e3       	ldi	r21, 0x3F	; 63
    1ef6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1efa:	88 23       	and	r24, r24
    1efc:	2c f4       	brge	.+10     	; 0x1f08 <LCD_voidInit+0x51c>
		__ticks = 1;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	9c 8b       	std	Y+20, r25	; 0x14
    1f04:	8b 8b       	std	Y+19, r24	; 0x13
    1f06:	3f c0       	rjmp	.+126    	; 0x1f86 <LCD_voidInit+0x59a>
	else if (__tmp > 65535)
    1f08:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	3f ef       	ldi	r19, 0xFF	; 255
    1f14:	4f e7       	ldi	r20, 0x7F	; 127
    1f16:	57 e4       	ldi	r21, 0x47	; 71
    1f18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f1c:	18 16       	cp	r1, r24
    1f1e:	4c f5       	brge	.+82     	; 0x1f72 <LCD_voidInit+0x586>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f20:	69 8d       	ldd	r22, Y+25	; 0x19
    1f22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e2       	ldi	r20, 0x20	; 32
    1f2e:	51 e4       	ldi	r21, 0x41	; 65
    1f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	bc 01       	movw	r22, r24
    1f3a:	cd 01       	movw	r24, r26
    1f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	9c 8b       	std	Y+20, r25	; 0x14
    1f46:	8b 8b       	std	Y+19, r24	; 0x13
    1f48:	0f c0       	rjmp	.+30     	; 0x1f68 <LCD_voidInit+0x57c>
    1f4a:	88 ec       	ldi	r24, 0xC8	; 200
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	9a 8b       	std	Y+18, r25	; 0x12
    1f50:	89 8b       	std	Y+17, r24	; 0x11
    1f52:	89 89       	ldd	r24, Y+17	; 0x11
    1f54:	9a 89       	ldd	r25, Y+18	; 0x12
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <LCD_voidInit+0x56a>
    1f5a:	9a 8b       	std	Y+18, r25	; 0x12
    1f5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f60:	9c 89       	ldd	r25, Y+20	; 0x14
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	9c 8b       	std	Y+20, r25	; 0x14
    1f66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f68:	8b 89       	ldd	r24, Y+19	; 0x13
    1f6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f6c:	00 97       	sbiw	r24, 0x00	; 0
    1f6e:	69 f7       	brne	.-38     	; 0x1f4a <LCD_voidInit+0x55e>
    1f70:	14 c0       	rjmp	.+40     	; 0x1f9a <LCD_voidInit+0x5ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f72:	6d 89       	ldd	r22, Y+21	; 0x15
    1f74:	7e 89       	ldd	r23, Y+22	; 0x16
    1f76:	8f 89       	ldd	r24, Y+23	; 0x17
    1f78:	98 8d       	ldd	r25, Y+24	; 0x18
    1f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	9c 8b       	std	Y+20, r25	; 0x14
    1f84:	8b 8b       	std	Y+19, r24	; 0x13
    1f86:	8b 89       	ldd	r24, Y+19	; 0x13
    1f88:	9c 89       	ldd	r25, Y+20	; 0x14
    1f8a:	98 8b       	std	Y+16, r25	; 0x10
    1f8c:	8f 87       	std	Y+15, r24	; 0x0f
    1f8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f90:	98 89       	ldd	r25, Y+16	; 0x10
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <LCD_voidInit+0x5a6>
    1f96:	98 8b       	std	Y+16, r25	; 0x10
    1f98:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms (15);
	LCD_voidSendCommand(LCD_ENTRY_MODE);
    1f9a:	86 e0       	ldi	r24, 0x06	; 6
    1f9c:	0e 94 4e 10 	call	0x209c	; 0x209c <LCD_voidSendCommand>
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	a0 e0       	ldi	r26, 0x00	; 0
    1fa6:	b0 e4       	ldi	r27, 0x40	; 64
    1fa8:	8b 87       	std	Y+11, r24	; 0x0b
    1faa:	9c 87       	std	Y+12, r25	; 0x0c
    1fac:	ad 87       	std	Y+13, r26	; 0x0d
    1fae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	4a ef       	ldi	r20, 0xFA	; 250
    1fbe:	54 e4       	ldi	r21, 0x44	; 68
    1fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	8f 83       	std	Y+7, r24	; 0x07
    1fca:	98 87       	std	Y+8, r25	; 0x08
    1fcc:	a9 87       	std	Y+9, r26	; 0x09
    1fce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd2:	78 85       	ldd	r23, Y+8	; 0x08
    1fd4:	89 85       	ldd	r24, Y+9	; 0x09
    1fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e8       	ldi	r20, 0x80	; 128
    1fde:	5f e3       	ldi	r21, 0x3F	; 63
    1fe0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fe4:	88 23       	and	r24, r24
    1fe6:	2c f4       	brge	.+10     	; 0x1ff2 <LCD_voidInit+0x606>
		__ticks = 1;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	9e 83       	std	Y+6, r25	; 0x06
    1fee:	8d 83       	std	Y+5, r24	; 0x05
    1ff0:	3f c0       	rjmp	.+126    	; 0x2070 <LCD_voidInit+0x684>
	else if (__tmp > 65535)
    1ff2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff4:	78 85       	ldd	r23, Y+8	; 0x08
    1ff6:	89 85       	ldd	r24, Y+9	; 0x09
    1ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	3f ef       	ldi	r19, 0xFF	; 255
    1ffe:	4f e7       	ldi	r20, 0x7F	; 127
    2000:	57 e4       	ldi	r21, 0x47	; 71
    2002:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2006:	18 16       	cp	r1, r24
    2008:	4c f5       	brge	.+82     	; 0x205c <LCD_voidInit+0x670>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200a:	6b 85       	ldd	r22, Y+11	; 0x0b
    200c:	7c 85       	ldd	r23, Y+12	; 0x0c
    200e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2010:	9e 85       	ldd	r25, Y+14	; 0x0e
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e2       	ldi	r20, 0x20	; 32
    2018:	51 e4       	ldi	r21, 0x41	; 65
    201a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	bc 01       	movw	r22, r24
    2024:	cd 01       	movw	r24, r26
    2026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	9e 83       	std	Y+6, r25	; 0x06
    2030:	8d 83       	std	Y+5, r24	; 0x05
    2032:	0f c0       	rjmp	.+30     	; 0x2052 <LCD_voidInit+0x666>
    2034:	88 ec       	ldi	r24, 0xC8	; 200
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	9c 83       	std	Y+4, r25	; 0x04
    203a:	8b 83       	std	Y+3, r24	; 0x03
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	9c 81       	ldd	r25, Y+4	; 0x04
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <LCD_voidInit+0x654>
    2044:	9c 83       	std	Y+4, r25	; 0x04
    2046:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	9e 83       	std	Y+6, r25	; 0x06
    2050:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2052:	8d 81       	ldd	r24, Y+5	; 0x05
    2054:	9e 81       	ldd	r25, Y+6	; 0x06
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	69 f7       	brne	.-38     	; 0x2034 <LCD_voidInit+0x648>
    205a:	14 c0       	rjmp	.+40     	; 0x2084 <LCD_voidInit+0x698>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205c:	6f 81       	ldd	r22, Y+7	; 0x07
    205e:	78 85       	ldd	r23, Y+8	; 0x08
    2060:	89 85       	ldd	r24, Y+9	; 0x09
    2062:	9a 85       	ldd	r25, Y+10	; 0x0a
    2064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	9e 83       	std	Y+6, r25	; 0x06
    206e:	8d 83       	std	Y+5, r24	; 0x05
    2070:	8d 81       	ldd	r24, Y+5	; 0x05
    2072:	9e 81       	ldd	r25, Y+6	; 0x06
    2074:	9a 83       	std	Y+2, r25	; 0x02
    2076:	89 83       	std	Y+1, r24	; 0x01
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	9a 81       	ldd	r25, Y+2	; 0x02
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <LCD_voidInit+0x690>
    2080:	9a 83       	std	Y+2, r25	; 0x02
    2082:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (2);

}
    2084:	cc 5a       	subi	r28, 0xAC	; 172
    2086:	df 4f       	sbci	r29, 0xFF	; 255
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	cd bf       	out	0x3d, r28	; 61
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	1f 91       	pop	r17
    2098:	0f 91       	pop	r16
    209a:	08 95       	ret

0000209c <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	0f 92       	push	r0
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	89 83       	std	Y+1, r24	; 0x01
	DIO_enum_WriteChannel(RS, DIO_u8LOW);
    20a8:	83 e0       	ldi	r24, 0x03	; 3
    20aa:	60 e0       	ldi	r22, 0x00	; 0
    20ac:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
	LCD_voidSendDataBus(Copy_u8Command);
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	0e 94 70 10 	call	0x20e0	; 0x20e0 <LCD_voidSendDataBus>
}
    20b6:	0f 90       	pop	r0
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <LCD_voidSendData>:
void LCD_voidSendData(u8 Copy_u8Data)
{
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	0f 92       	push	r0
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	89 83       	std	Y+1, r24	; 0x01
	DIO_enum_WriteChannel(RS, DIO_u8High);
    20ca:	83 e0       	ldi	r24, 0x03	; 3
    20cc:	61 e0       	ldi	r22, 0x01	; 1
    20ce:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
	LCD_voidSendDataBus(Copy_u8Data);
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	0e 94 70 10 	call	0x20e0	; 0x20e0 <LCD_voidSendDataBus>
}
    20d8:	0f 90       	pop	r0
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <LCD_voidSendDataBus>:
void LCD_voidSendDataBus(u8 Copy_u8BUS)
{
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	e1 97       	sbiw	r28, 0x31	; 49
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
    20f4:	89 ab       	std	Y+49, r24	; 0x31
	DIO_enum_WriteChannel(EN, DIO_u8High);
    20f6:	82 e0       	ldi	r24, 0x02	; 2
    20f8:	61 e0       	ldi	r22, 0x01	; 1
    20fa:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>

	DIO_enum_WriteChannel(D7, GET_BIT(Copy_u8BUS,7));
    20fe:	89 a9       	ldd	r24, Y+49	; 0x31
    2100:	98 2f       	mov	r25, r24
    2102:	99 1f       	adc	r25, r25
    2104:	99 27       	eor	r25, r25
    2106:	99 1f       	adc	r25, r25
    2108:	8c e0       	ldi	r24, 0x0C	; 12
    210a:	69 2f       	mov	r22, r25
    210c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
	DIO_enum_WriteChannel(D6, GET_BIT(Copy_u8BUS,6));
    2110:	89 a9       	ldd	r24, Y+49	; 0x31
    2112:	82 95       	swap	r24
    2114:	86 95       	lsr	r24
    2116:	86 95       	lsr	r24
    2118:	83 70       	andi	r24, 0x03	; 3
    211a:	98 2f       	mov	r25, r24
    211c:	91 70       	andi	r25, 0x01	; 1
    211e:	8a e0       	ldi	r24, 0x0A	; 10
    2120:	69 2f       	mov	r22, r25
    2122:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
	DIO_enum_WriteChannel(D5, GET_BIT(Copy_u8BUS,5));
    2126:	89 a9       	ldd	r24, Y+49	; 0x31
    2128:	82 95       	swap	r24
    212a:	86 95       	lsr	r24
    212c:	87 70       	andi	r24, 0x07	; 7
    212e:	98 2f       	mov	r25, r24
    2130:	91 70       	andi	r25, 0x01	; 1
    2132:	89 e0       	ldi	r24, 0x09	; 9
    2134:	69 2f       	mov	r22, r25
    2136:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
	DIO_enum_WriteChannel(D4, GET_BIT(Copy_u8BUS,4));
    213a:	89 a9       	ldd	r24, Y+49	; 0x31
    213c:	82 95       	swap	r24
    213e:	8f 70       	andi	r24, 0x0F	; 15
    2140:	98 2f       	mov	r25, r24
    2142:	91 70       	andi	r25, 0x01	; 1
    2144:	88 e0       	ldi	r24, 0x08	; 8
    2146:	69 2f       	mov	r22, r25
    2148:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
	
	DIO_enum_WriteChannel(EN, DIO_u8LOW);
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	60 e0       	ldi	r22, 0x00	; 0
    2150:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	a0 ea       	ldi	r26, 0xA0	; 160
    215a:	b0 e4       	ldi	r27, 0x40	; 64
    215c:	8d a7       	std	Y+45, r24	; 0x2d
    215e:	9e a7       	std	Y+46, r25	; 0x2e
    2160:	af a7       	std	Y+47, r26	; 0x2f
    2162:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2164:	6d a5       	ldd	r22, Y+45	; 0x2d
    2166:	7e a5       	ldd	r23, Y+46	; 0x2e
    2168:	8f a5       	ldd	r24, Y+47	; 0x2f
    216a:	98 a9       	ldd	r25, Y+48	; 0x30
    216c:	2b ea       	ldi	r18, 0xAB	; 171
    216e:	3a ea       	ldi	r19, 0xAA	; 170
    2170:	4a e2       	ldi	r20, 0x2A	; 42
    2172:	50 e4       	ldi	r21, 0x40	; 64
    2174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	89 a7       	std	Y+41, r24	; 0x29
    217e:	9a a7       	std	Y+42, r25	; 0x2a
    2180:	ab a7       	std	Y+43, r26	; 0x2b
    2182:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2184:	69 a5       	ldd	r22, Y+41	; 0x29
    2186:	7a a5       	ldd	r23, Y+42	; 0x2a
    2188:	8b a5       	ldd	r24, Y+43	; 0x2b
    218a:	9c a5       	ldd	r25, Y+44	; 0x2c
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e8       	ldi	r20, 0x80	; 128
    2192:	5f e3       	ldi	r21, 0x3F	; 63
    2194:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2198:	88 23       	and	r24, r24
    219a:	1c f4       	brge	.+6      	; 0x21a2 <LCD_voidSendDataBus+0xc2>
		__ticks = 1;
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	88 a7       	std	Y+40, r24	; 0x28
    21a0:	91 c0       	rjmp	.+290    	; 0x22c4 <LCD_voidSendDataBus+0x1e4>
	else if (__tmp > 255)
    21a2:	69 a5       	ldd	r22, Y+41	; 0x29
    21a4:	7a a5       	ldd	r23, Y+42	; 0x2a
    21a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    21a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	4f e7       	ldi	r20, 0x7F	; 127
    21b0:	53 e4       	ldi	r21, 0x43	; 67
    21b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21b6:	18 16       	cp	r1, r24
    21b8:	0c f0       	brlt	.+2      	; 0x21bc <LCD_voidSendDataBus+0xdc>
    21ba:	7b c0       	rjmp	.+246    	; 0x22b2 <LCD_voidSendDataBus+0x1d2>
	{
		_delay_ms(__us / 1000.0);
    21bc:	6d a5       	ldd	r22, Y+45	; 0x2d
    21be:	7e a5       	ldd	r23, Y+46	; 0x2e
    21c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21c2:	98 a9       	ldd	r25, Y+48	; 0x30
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	4a e7       	ldi	r20, 0x7A	; 122
    21ca:	54 e4       	ldi	r21, 0x44	; 68
    21cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	8c a3       	std	Y+36, r24	; 0x24
    21d6:	9d a3       	std	Y+37, r25	; 0x25
    21d8:	ae a3       	std	Y+38, r26	; 0x26
    21da:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21dc:	6c a1       	ldd	r22, Y+36	; 0x24
    21de:	7d a1       	ldd	r23, Y+37	; 0x25
    21e0:	8e a1       	ldd	r24, Y+38	; 0x26
    21e2:	9f a1       	ldd	r25, Y+39	; 0x27
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	4a ef       	ldi	r20, 0xFA	; 250
    21ea:	54 e4       	ldi	r21, 0x44	; 68
    21ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	88 a3       	std	Y+32, r24	; 0x20
    21f6:	99 a3       	std	Y+33, r25	; 0x21
    21f8:	aa a3       	std	Y+34, r26	; 0x22
    21fa:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    21fc:	68 a1       	ldd	r22, Y+32	; 0x20
    21fe:	79 a1       	ldd	r23, Y+33	; 0x21
    2200:	8a a1       	ldd	r24, Y+34	; 0x22
    2202:	9b a1       	ldd	r25, Y+35	; 0x23
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e8       	ldi	r20, 0x80	; 128
    220a:	5f e3       	ldi	r21, 0x3F	; 63
    220c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2210:	88 23       	and	r24, r24
    2212:	2c f4       	brge	.+10     	; 0x221e <LCD_voidSendDataBus+0x13e>
		__ticks = 1;
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	9f 8f       	std	Y+31, r25	; 0x1f
    221a:	8e 8f       	std	Y+30, r24	; 0x1e
    221c:	3f c0       	rjmp	.+126    	; 0x229c <LCD_voidSendDataBus+0x1bc>
	else if (__tmp > 65535)
    221e:	68 a1       	ldd	r22, Y+32	; 0x20
    2220:	79 a1       	ldd	r23, Y+33	; 0x21
    2222:	8a a1       	ldd	r24, Y+34	; 0x22
    2224:	9b a1       	ldd	r25, Y+35	; 0x23
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	3f ef       	ldi	r19, 0xFF	; 255
    222a:	4f e7       	ldi	r20, 0x7F	; 127
    222c:	57 e4       	ldi	r21, 0x47	; 71
    222e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2232:	18 16       	cp	r1, r24
    2234:	4c f5       	brge	.+82     	; 0x2288 <LCD_voidSendDataBus+0x1a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2236:	6c a1       	ldd	r22, Y+36	; 0x24
    2238:	7d a1       	ldd	r23, Y+37	; 0x25
    223a:	8e a1       	ldd	r24, Y+38	; 0x26
    223c:	9f a1       	ldd	r25, Y+39	; 0x27
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e2       	ldi	r20, 0x20	; 32
    2244:	51 e4       	ldi	r21, 0x41	; 65
    2246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	bc 01       	movw	r22, r24
    2250:	cd 01       	movw	r24, r26
    2252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	9f 8f       	std	Y+31, r25	; 0x1f
    225c:	8e 8f       	std	Y+30, r24	; 0x1e
    225e:	0f c0       	rjmp	.+30     	; 0x227e <LCD_voidSendDataBus+0x19e>
    2260:	88 ec       	ldi	r24, 0xC8	; 200
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9d 8f       	std	Y+29, r25	; 0x1d
    2266:	8c 8f       	std	Y+28, r24	; 0x1c
    2268:	8c 8d       	ldd	r24, Y+28	; 0x1c
    226a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <LCD_voidSendDataBus+0x18c>
    2270:	9d 8f       	std	Y+29, r25	; 0x1d
    2272:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2274:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2276:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	9f 8f       	std	Y+31, r25	; 0x1f
    227c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2280:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	69 f7       	brne	.-38     	; 0x2260 <LCD_voidSendDataBus+0x180>
    2286:	24 c0       	rjmp	.+72     	; 0x22d0 <LCD_voidSendDataBus+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2288:	68 a1       	ldd	r22, Y+32	; 0x20
    228a:	79 a1       	ldd	r23, Y+33	; 0x21
    228c:	8a a1       	ldd	r24, Y+34	; 0x22
    228e:	9b a1       	ldd	r25, Y+35	; 0x23
    2290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	9f 8f       	std	Y+31, r25	; 0x1f
    229a:	8e 8f       	std	Y+30, r24	; 0x1e
    229c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    229e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22a0:	9b 8f       	std	Y+27, r25	; 0x1b
    22a2:	8a 8f       	std	Y+26, r24	; 0x1a
    22a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22a6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <LCD_voidSendDataBus+0x1c8>
    22ac:	9b 8f       	std	Y+27, r25	; 0x1b
    22ae:	8a 8f       	std	Y+26, r24	; 0x1a
    22b0:	0f c0       	rjmp	.+30     	; 0x22d0 <LCD_voidSendDataBus+0x1f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22b2:	69 a5       	ldd	r22, Y+41	; 0x29
    22b4:	7a a5       	ldd	r23, Y+42	; 0x2a
    22b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    22b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    22ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	88 a7       	std	Y+40, r24	; 0x28
    22c4:	88 a5       	ldd	r24, Y+40	; 0x28
    22c6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22c8:	89 8d       	ldd	r24, Y+25	; 0x19
    22ca:	8a 95       	dec	r24
    22cc:	f1 f7       	brne	.-4      	; 0x22ca <LCD_voidSendDataBus+0x1ea>
    22ce:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us (5);
	DIO_enum_WriteChannel(EN, DIO_u8High);
    22d0:	82 e0       	ldi	r24, 0x02	; 2
    22d2:	61 e0       	ldi	r22, 0x01	; 1
    22d4:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>

	DIO_enum_WriteChannel(D7, GET_BIT(Copy_u8BUS,3));
    22d8:	89 a9       	ldd	r24, Y+49	; 0x31
    22da:	86 95       	lsr	r24
    22dc:	86 95       	lsr	r24
    22de:	86 95       	lsr	r24
    22e0:	98 2f       	mov	r25, r24
    22e2:	91 70       	andi	r25, 0x01	; 1
    22e4:	8c e0       	ldi	r24, 0x0C	; 12
    22e6:	69 2f       	mov	r22, r25
    22e8:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
	DIO_enum_WriteChannel(D6, GET_BIT(Copy_u8BUS,2));
    22ec:	89 a9       	ldd	r24, Y+49	; 0x31
    22ee:	86 95       	lsr	r24
    22f0:	86 95       	lsr	r24
    22f2:	98 2f       	mov	r25, r24
    22f4:	91 70       	andi	r25, 0x01	; 1
    22f6:	8a e0       	ldi	r24, 0x0A	; 10
    22f8:	69 2f       	mov	r22, r25
    22fa:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
	DIO_enum_WriteChannel(D5, GET_BIT(Copy_u8BUS,1));
    22fe:	89 a9       	ldd	r24, Y+49	; 0x31
    2300:	86 95       	lsr	r24
    2302:	98 2f       	mov	r25, r24
    2304:	91 70       	andi	r25, 0x01	; 1
    2306:	89 e0       	ldi	r24, 0x09	; 9
    2308:	69 2f       	mov	r22, r25
    230a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
	DIO_enum_WriteChannel(D4, GET_BIT(Copy_u8BUS,0));
    230e:	89 a9       	ldd	r24, Y+49	; 0x31
    2310:	98 2f       	mov	r25, r24
    2312:	91 70       	andi	r25, 0x01	; 1
    2314:	88 e0       	ldi	r24, 0x08	; 8
    2316:	69 2f       	mov	r22, r25
    2318:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
	
	DIO_enum_WriteChannel(EN, DIO_u8LOW);
    231c:	82 e0       	ldi	r24, 0x02	; 2
    231e:	60 e0       	ldi	r22, 0x00	; 0
    2320:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	a0 ea       	ldi	r26, 0xA0	; 160
    232a:	b0 e4       	ldi	r27, 0x40	; 64
    232c:	8d 8b       	std	Y+21, r24	; 0x15
    232e:	9e 8b       	std	Y+22, r25	; 0x16
    2330:	af 8b       	std	Y+23, r26	; 0x17
    2332:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2334:	6d 89       	ldd	r22, Y+21	; 0x15
    2336:	7e 89       	ldd	r23, Y+22	; 0x16
    2338:	8f 89       	ldd	r24, Y+23	; 0x17
    233a:	98 8d       	ldd	r25, Y+24	; 0x18
    233c:	2b ea       	ldi	r18, 0xAB	; 171
    233e:	3a ea       	ldi	r19, 0xAA	; 170
    2340:	4a e2       	ldi	r20, 0x2A	; 42
    2342:	50 e4       	ldi	r21, 0x40	; 64
    2344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	89 8b       	std	Y+17, r24	; 0x11
    234e:	9a 8b       	std	Y+18, r25	; 0x12
    2350:	ab 8b       	std	Y+19, r26	; 0x13
    2352:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2354:	69 89       	ldd	r22, Y+17	; 0x11
    2356:	7a 89       	ldd	r23, Y+18	; 0x12
    2358:	8b 89       	ldd	r24, Y+19	; 0x13
    235a:	9c 89       	ldd	r25, Y+20	; 0x14
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e8       	ldi	r20, 0x80	; 128
    2362:	5f e3       	ldi	r21, 0x3F	; 63
    2364:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2368:	88 23       	and	r24, r24
    236a:	1c f4       	brge	.+6      	; 0x2372 <LCD_voidSendDataBus+0x292>
		__ticks = 1;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	88 8b       	std	Y+16, r24	; 0x10
    2370:	91 c0       	rjmp	.+290    	; 0x2494 <LCD_voidSendDataBus+0x3b4>
	else if (__tmp > 255)
    2372:	69 89       	ldd	r22, Y+17	; 0x11
    2374:	7a 89       	ldd	r23, Y+18	; 0x12
    2376:	8b 89       	ldd	r24, Y+19	; 0x13
    2378:	9c 89       	ldd	r25, Y+20	; 0x14
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	4f e7       	ldi	r20, 0x7F	; 127
    2380:	53 e4       	ldi	r21, 0x43	; 67
    2382:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2386:	18 16       	cp	r1, r24
    2388:	0c f0       	brlt	.+2      	; 0x238c <LCD_voidSendDataBus+0x2ac>
    238a:	7b c0       	rjmp	.+246    	; 0x2482 <LCD_voidSendDataBus+0x3a2>
	{
		_delay_ms(__us / 1000.0);
    238c:	6d 89       	ldd	r22, Y+21	; 0x15
    238e:	7e 89       	ldd	r23, Y+22	; 0x16
    2390:	8f 89       	ldd	r24, Y+23	; 0x17
    2392:	98 8d       	ldd	r25, Y+24	; 0x18
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	4a e7       	ldi	r20, 0x7A	; 122
    239a:	54 e4       	ldi	r21, 0x44	; 68
    239c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	8c 87       	std	Y+12, r24	; 0x0c
    23a6:	9d 87       	std	Y+13, r25	; 0x0d
    23a8:	ae 87       	std	Y+14, r26	; 0x0e
    23aa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    23ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    23b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    23b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	4a ef       	ldi	r20, 0xFA	; 250
    23ba:	54 e4       	ldi	r21, 0x44	; 68
    23bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	88 87       	std	Y+8, r24	; 0x08
    23c6:	99 87       	std	Y+9, r25	; 0x09
    23c8:	aa 87       	std	Y+10, r26	; 0x0a
    23ca:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    23cc:	68 85       	ldd	r22, Y+8	; 0x08
    23ce:	79 85       	ldd	r23, Y+9	; 0x09
    23d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    23d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e8       	ldi	r20, 0x80	; 128
    23da:	5f e3       	ldi	r21, 0x3F	; 63
    23dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23e0:	88 23       	and	r24, r24
    23e2:	2c f4       	brge	.+10     	; 0x23ee <LCD_voidSendDataBus+0x30e>
		__ticks = 1;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	9f 83       	std	Y+7, r25	; 0x07
    23ea:	8e 83       	std	Y+6, r24	; 0x06
    23ec:	3f c0       	rjmp	.+126    	; 0x246c <LCD_voidSendDataBus+0x38c>
	else if (__tmp > 65535)
    23ee:	68 85       	ldd	r22, Y+8	; 0x08
    23f0:	79 85       	ldd	r23, Y+9	; 0x09
    23f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    23f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	3f ef       	ldi	r19, 0xFF	; 255
    23fa:	4f e7       	ldi	r20, 0x7F	; 127
    23fc:	57 e4       	ldi	r21, 0x47	; 71
    23fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2402:	18 16       	cp	r1, r24
    2404:	4c f5       	brge	.+82     	; 0x2458 <LCD_voidSendDataBus+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2406:	6c 85       	ldd	r22, Y+12	; 0x0c
    2408:	7d 85       	ldd	r23, Y+13	; 0x0d
    240a:	8e 85       	ldd	r24, Y+14	; 0x0e
    240c:	9f 85       	ldd	r25, Y+15	; 0x0f
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e2       	ldi	r20, 0x20	; 32
    2414:	51 e4       	ldi	r21, 0x41	; 65
    2416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	bc 01       	movw	r22, r24
    2420:	cd 01       	movw	r24, r26
    2422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	9f 83       	std	Y+7, r25	; 0x07
    242c:	8e 83       	std	Y+6, r24	; 0x06
    242e:	0f c0       	rjmp	.+30     	; 0x244e <LCD_voidSendDataBus+0x36e>
    2430:	88 ec       	ldi	r24, 0xC8	; 200
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	9d 83       	std	Y+5, r25	; 0x05
    2436:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2438:	8c 81       	ldd	r24, Y+4	; 0x04
    243a:	9d 81       	ldd	r25, Y+5	; 0x05
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <LCD_voidSendDataBus+0x35c>
    2440:	9d 83       	std	Y+5, r25	; 0x05
    2442:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2444:	8e 81       	ldd	r24, Y+6	; 0x06
    2446:	9f 81       	ldd	r25, Y+7	; 0x07
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	9f 83       	std	Y+7, r25	; 0x07
    244c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244e:	8e 81       	ldd	r24, Y+6	; 0x06
    2450:	9f 81       	ldd	r25, Y+7	; 0x07
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	69 f7       	brne	.-38     	; 0x2430 <LCD_voidSendDataBus+0x350>
    2456:	24 c0       	rjmp	.+72     	; 0x24a0 <LCD_voidSendDataBus+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2458:	68 85       	ldd	r22, Y+8	; 0x08
    245a:	79 85       	ldd	r23, Y+9	; 0x09
    245c:	8a 85       	ldd	r24, Y+10	; 0x0a
    245e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	9f 83       	std	Y+7, r25	; 0x07
    246a:	8e 83       	std	Y+6, r24	; 0x06
    246c:	8e 81       	ldd	r24, Y+6	; 0x06
    246e:	9f 81       	ldd	r25, Y+7	; 0x07
    2470:	9b 83       	std	Y+3, r25	; 0x03
    2472:	8a 83       	std	Y+2, r24	; 0x02
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	9b 81       	ldd	r25, Y+3	; 0x03
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <LCD_voidSendDataBus+0x398>
    247c:	9b 83       	std	Y+3, r25	; 0x03
    247e:	8a 83       	std	Y+2, r24	; 0x02
    2480:	0f c0       	rjmp	.+30     	; 0x24a0 <LCD_voidSendDataBus+0x3c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2482:	69 89       	ldd	r22, Y+17	; 0x11
    2484:	7a 89       	ldd	r23, Y+18	; 0x12
    2486:	8b 89       	ldd	r24, Y+19	; 0x13
    2488:	9c 89       	ldd	r25, Y+20	; 0x14
    248a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	88 8b       	std	Y+16, r24	; 0x10
    2494:	88 89       	ldd	r24, Y+16	; 0x10
    2496:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	8a 95       	dec	r24
    249c:	f1 f7       	brne	.-4      	; 0x249a <LCD_voidSendDataBus+0x3ba>
    249e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us (5);

}
    24a0:	e1 96       	adiw	r28, 0x31	; 49
    24a2:	0f b6       	in	r0, 0x3f	; 63
    24a4:	f8 94       	cli
    24a6:	de bf       	out	0x3e, r29	; 62
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	cd bf       	out	0x3d, r28	; 61
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <LCD_voidWriteChar>:
void LCD_voidWriteChar(u8 Copy_u8Character)
{
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	0f 92       	push	r0
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
    24bc:	89 83       	std	Y+1, r24	; 0x01
	DIO_enum_WriteChannel(RS, DIO_u8High);
    24be:	83 e0       	ldi	r24, 0x03	; 3
    24c0:	61 e0       	ldi	r22, 0x01	; 1
    24c2:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_enum_WriteChannel>
	LCD_voidSendDataBus(Copy_u8Character);	
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	0e 94 70 10 	call	0x20e0	; 0x20e0 <LCD_voidSendDataBus>
}
    24cc:	0f 90       	pop	r0
    24ce:	cf 91       	pop	r28
    24d0:	df 91       	pop	r29
    24d2:	08 95       	ret

000024d4 <LCD_voidWriteString>:
void LCD_voidWriteString(pu8 Ptr_u8String)
{
    24d4:	df 93       	push	r29
    24d6:	cf 93       	push	r28
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	6b 97       	sbiw	r28, 0x1b	; 27
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	f8 94       	cli
    24e2:	de bf       	out	0x3e, r29	; 62
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	cd bf       	out	0x3d, r28	; 61
    24e8:	9b 8f       	std	Y+27, r25	; 0x1b
    24ea:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 Local_u8Counter = 0;
    24ec:	19 8e       	std	Y+25, r1	; 0x19
    24ee:	cc c0       	rjmp	.+408    	; 0x2688 <LCD_voidWriteString+0x1b4>
	while(Ptr_u8String[Local_u8Counter] != '\0')
	{
		LCD_voidWriteChar(Ptr_u8String[Local_u8Counter]);
    24f0:	89 8d       	ldd	r24, Y+25	; 0x19
    24f2:	28 2f       	mov	r18, r24
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    24f8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    24fa:	fc 01       	movw	r30, r24
    24fc:	e2 0f       	add	r30, r18
    24fe:	f3 1f       	adc	r31, r19
    2500:	80 81       	ld	r24, Z
    2502:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_voidWriteChar>
		Local_u8Counter++;
    2506:	89 8d       	ldd	r24, Y+25	; 0x19
    2508:	8f 5f       	subi	r24, 0xFF	; 255
    250a:	89 8f       	std	Y+25, r24	; 0x19
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	a0 e0       	ldi	r26, 0x00	; 0
    2512:	b0 e4       	ldi	r27, 0x40	; 64
    2514:	8d 8b       	std	Y+21, r24	; 0x15
    2516:	9e 8b       	std	Y+22, r25	; 0x16
    2518:	af 8b       	std	Y+23, r26	; 0x17
    251a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    251c:	6d 89       	ldd	r22, Y+21	; 0x15
    251e:	7e 89       	ldd	r23, Y+22	; 0x16
    2520:	8f 89       	ldd	r24, Y+23	; 0x17
    2522:	98 8d       	ldd	r25, Y+24	; 0x18
    2524:	2b ea       	ldi	r18, 0xAB	; 171
    2526:	3a ea       	ldi	r19, 0xAA	; 170
    2528:	4a e2       	ldi	r20, 0x2A	; 42
    252a:	50 e4       	ldi	r21, 0x40	; 64
    252c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	89 8b       	std	Y+17, r24	; 0x11
    2536:	9a 8b       	std	Y+18, r25	; 0x12
    2538:	ab 8b       	std	Y+19, r26	; 0x13
    253a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    253c:	69 89       	ldd	r22, Y+17	; 0x11
    253e:	7a 89       	ldd	r23, Y+18	; 0x12
    2540:	8b 89       	ldd	r24, Y+19	; 0x13
    2542:	9c 89       	ldd	r25, Y+20	; 0x14
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e8       	ldi	r20, 0x80	; 128
    254a:	5f e3       	ldi	r21, 0x3F	; 63
    254c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2550:	88 23       	and	r24, r24
    2552:	1c f4       	brge	.+6      	; 0x255a <LCD_voidWriteString+0x86>
		__ticks = 1;
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	88 8b       	std	Y+16, r24	; 0x10
    2558:	91 c0       	rjmp	.+290    	; 0x267c <LCD_voidWriteString+0x1a8>
	else if (__tmp > 255)
    255a:	69 89       	ldd	r22, Y+17	; 0x11
    255c:	7a 89       	ldd	r23, Y+18	; 0x12
    255e:	8b 89       	ldd	r24, Y+19	; 0x13
    2560:	9c 89       	ldd	r25, Y+20	; 0x14
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	4f e7       	ldi	r20, 0x7F	; 127
    2568:	53 e4       	ldi	r21, 0x43	; 67
    256a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    256e:	18 16       	cp	r1, r24
    2570:	0c f0       	brlt	.+2      	; 0x2574 <LCD_voidWriteString+0xa0>
    2572:	7b c0       	rjmp	.+246    	; 0x266a <LCD_voidWriteString+0x196>
	{
		_delay_ms(__us / 1000.0);
    2574:	6d 89       	ldd	r22, Y+21	; 0x15
    2576:	7e 89       	ldd	r23, Y+22	; 0x16
    2578:	8f 89       	ldd	r24, Y+23	; 0x17
    257a:	98 8d       	ldd	r25, Y+24	; 0x18
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	4a e7       	ldi	r20, 0x7A	; 122
    2582:	54 e4       	ldi	r21, 0x44	; 68
    2584:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	8c 87       	std	Y+12, r24	; 0x0c
    258e:	9d 87       	std	Y+13, r25	; 0x0d
    2590:	ae 87       	std	Y+14, r26	; 0x0e
    2592:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2594:	6c 85       	ldd	r22, Y+12	; 0x0c
    2596:	7d 85       	ldd	r23, Y+13	; 0x0d
    2598:	8e 85       	ldd	r24, Y+14	; 0x0e
    259a:	9f 85       	ldd	r25, Y+15	; 0x0f
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	4a ef       	ldi	r20, 0xFA	; 250
    25a2:	54 e4       	ldi	r21, 0x44	; 68
    25a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	88 87       	std	Y+8, r24	; 0x08
    25ae:	99 87       	std	Y+9, r25	; 0x09
    25b0:	aa 87       	std	Y+10, r26	; 0x0a
    25b2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    25b4:	68 85       	ldd	r22, Y+8	; 0x08
    25b6:	79 85       	ldd	r23, Y+9	; 0x09
    25b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e8       	ldi	r20, 0x80	; 128
    25c2:	5f e3       	ldi	r21, 0x3F	; 63
    25c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25c8:	88 23       	and	r24, r24
    25ca:	2c f4       	brge	.+10     	; 0x25d6 <LCD_voidWriteString+0x102>
		__ticks = 1;
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	9f 83       	std	Y+7, r25	; 0x07
    25d2:	8e 83       	std	Y+6, r24	; 0x06
    25d4:	3f c0       	rjmp	.+126    	; 0x2654 <LCD_voidWriteString+0x180>
	else if (__tmp > 65535)
    25d6:	68 85       	ldd	r22, Y+8	; 0x08
    25d8:	79 85       	ldd	r23, Y+9	; 0x09
    25da:	8a 85       	ldd	r24, Y+10	; 0x0a
    25dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	3f ef       	ldi	r19, 0xFF	; 255
    25e2:	4f e7       	ldi	r20, 0x7F	; 127
    25e4:	57 e4       	ldi	r21, 0x47	; 71
    25e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25ea:	18 16       	cp	r1, r24
    25ec:	4c f5       	brge	.+82     	; 0x2640 <LCD_voidWriteString+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    25f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    25f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e2       	ldi	r20, 0x20	; 32
    25fc:	51 e4       	ldi	r21, 0x41	; 65
    25fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	bc 01       	movw	r22, r24
    2608:	cd 01       	movw	r24, r26
    260a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	9f 83       	std	Y+7, r25	; 0x07
    2614:	8e 83       	std	Y+6, r24	; 0x06
    2616:	0f c0       	rjmp	.+30     	; 0x2636 <LCD_voidWriteString+0x162>
    2618:	88 ec       	ldi	r24, 0xC8	; 200
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9d 83       	std	Y+5, r25	; 0x05
    261e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2620:	8c 81       	ldd	r24, Y+4	; 0x04
    2622:	9d 81       	ldd	r25, Y+5	; 0x05
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <LCD_voidWriteString+0x150>
    2628:	9d 83       	std	Y+5, r25	; 0x05
    262a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262c:	8e 81       	ldd	r24, Y+6	; 0x06
    262e:	9f 81       	ldd	r25, Y+7	; 0x07
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	9f 83       	std	Y+7, r25	; 0x07
    2634:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2636:	8e 81       	ldd	r24, Y+6	; 0x06
    2638:	9f 81       	ldd	r25, Y+7	; 0x07
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	69 f7       	brne	.-38     	; 0x2618 <LCD_voidWriteString+0x144>
    263e:	24 c0       	rjmp	.+72     	; 0x2688 <LCD_voidWriteString+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2640:	68 85       	ldd	r22, Y+8	; 0x08
    2642:	79 85       	ldd	r23, Y+9	; 0x09
    2644:	8a 85       	ldd	r24, Y+10	; 0x0a
    2646:	9b 85       	ldd	r25, Y+11	; 0x0b
    2648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	9f 83       	std	Y+7, r25	; 0x07
    2652:	8e 83       	std	Y+6, r24	; 0x06
    2654:	8e 81       	ldd	r24, Y+6	; 0x06
    2656:	9f 81       	ldd	r25, Y+7	; 0x07
    2658:	9b 83       	std	Y+3, r25	; 0x03
    265a:	8a 83       	std	Y+2, r24	; 0x02
    265c:	8a 81       	ldd	r24, Y+2	; 0x02
    265e:	9b 81       	ldd	r25, Y+3	; 0x03
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	f1 f7       	brne	.-4      	; 0x2660 <LCD_voidWriteString+0x18c>
    2664:	9b 83       	std	Y+3, r25	; 0x03
    2666:	8a 83       	std	Y+2, r24	; 0x02
    2668:	0f c0       	rjmp	.+30     	; 0x2688 <LCD_voidWriteString+0x1b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    266a:	69 89       	ldd	r22, Y+17	; 0x11
    266c:	7a 89       	ldd	r23, Y+18	; 0x12
    266e:	8b 89       	ldd	r24, Y+19	; 0x13
    2670:	9c 89       	ldd	r25, Y+20	; 0x14
    2672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	88 8b       	std	Y+16, r24	; 0x10
    267c:	88 89       	ldd	r24, Y+16	; 0x10
    267e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	8a 95       	dec	r24
    2684:	f1 f7       	brne	.-4      	; 0x2682 <LCD_voidWriteString+0x1ae>
    2686:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendDataBus(Copy_u8Character);	
}
void LCD_voidWriteString(pu8 Ptr_u8String)
{
	u8 Local_u8Counter = 0;
	while(Ptr_u8String[Local_u8Counter] != '\0')
    2688:	89 8d       	ldd	r24, Y+25	; 0x19
    268a:	28 2f       	mov	r18, r24
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2690:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2692:	fc 01       	movw	r30, r24
    2694:	e2 0f       	add	r30, r18
    2696:	f3 1f       	adc	r31, r19
    2698:	80 81       	ld	r24, Z
    269a:	88 23       	and	r24, r24
    269c:	09 f0       	breq	.+2      	; 0x26a0 <LCD_voidWriteString+0x1cc>
    269e:	28 cf       	rjmp	.-432    	; 0x24f0 <LCD_voidWriteString+0x1c>
		LCD_voidWriteChar(Ptr_u8String[Local_u8Counter]);
		Local_u8Counter++;
		_delay_us (2);
	}
	
}
    26a0:	6b 96       	adiw	r28, 0x1b	; 27
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	de bf       	out	0x3e, r29	; 62
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	cd bf       	out	0x3d, r28	; 61
    26ac:	cf 91       	pop	r28
    26ae:	df 91       	pop	r29
    26b0:	08 95       	ret

000026b2 <LCD_voidWriteNumbers>:
void LCD_voidWriteNumbers(f32 Copy_f32Number)
{
    26b2:	0f 93       	push	r16
    26b4:	1f 93       	push	r17
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	e5 97       	sbiw	r28, 0x35	; 53
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	cd bf       	out	0x3d, r28	; 61
    26ca:	6a ab       	std	Y+50, r22	; 0x32
    26cc:	7b ab       	std	Y+51, r23	; 0x33
    26ce:	8c ab       	std	Y+52, r24	; 0x34
    26d0:	9d ab       	std	Y+53, r25	; 0x35
	u8 Local_u8Array[20];
	u32 Local_f32Number = (u32)(Copy_f32Number*100);
    26d2:	6a a9       	ldd	r22, Y+50	; 0x32
    26d4:	7b a9       	ldd	r23, Y+51	; 0x33
    26d6:	8c a9       	ldd	r24, Y+52	; 0x34
    26d8:	9d a9       	ldd	r25, Y+53	; 0x35
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	48 ec       	ldi	r20, 0xC8	; 200
    26e0:	52 e4       	ldi	r21, 0x42	; 66
    26e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	bc 01       	movw	r22, r24
    26ec:	cd 01       	movw	r24, r26
    26ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	8a 8f       	std	Y+26, r24	; 0x1a
    26f8:	9b 8f       	std	Y+27, r25	; 0x1b
    26fa:	ac 8f       	std	Y+28, r26	; 0x1c
    26fc:	bd 8f       	std	Y+29, r27	; 0x1d
	s8 Local_s8Counter = 0;
    26fe:	19 8e       	std	Y+25, r1	; 0x19
    2700:	2f c0       	rjmp	.+94     	; 0x2760 <LCD_voidWriteNumbers+0xae>
	//Local_f32Number*=100;
	while (Local_f32Number != 0)
	{
		Local_u8Array[Local_s8Counter] = Local_f32Number%10;
    2702:	89 8d       	ldd	r24, Y+25	; 0x19
    2704:	08 2f       	mov	r16, r24
    2706:	11 27       	eor	r17, r17
    2708:	07 fd       	sbrc	r16, 7
    270a:	10 95       	com	r17
    270c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    270e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2710:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2712:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2714:	2a e0       	ldi	r18, 0x0A	; 10
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e0       	ldi	r20, 0x00	; 0
    271a:	50 e0       	ldi	r21, 0x00	; 0
    271c:	bc 01       	movw	r22, r24
    271e:	cd 01       	movw	r24, r26
    2720:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <__udivmodsi4>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	28 2f       	mov	r18, r24
    272a:	ce 01       	movw	r24, r28
    272c:	4e 96       	adiw	r24, 0x1e	; 30
    272e:	fc 01       	movw	r30, r24
    2730:	e0 0f       	add	r30, r16
    2732:	f1 1f       	adc	r31, r17
    2734:	20 83       	st	Z, r18
		Local_f32Number/=10;
    2736:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2738:	9b 8d       	ldd	r25, Y+27	; 0x1b
    273a:	ac 8d       	ldd	r26, Y+28	; 0x1c
    273c:	bd 8d       	ldd	r27, Y+29	; 0x1d
    273e:	2a e0       	ldi	r18, 0x0A	; 10
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	40 e0       	ldi	r20, 0x00	; 0
    2744:	50 e0       	ldi	r21, 0x00	; 0
    2746:	bc 01       	movw	r22, r24
    2748:	cd 01       	movw	r24, r26
    274a:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <__udivmodsi4>
    274e:	da 01       	movw	r26, r20
    2750:	c9 01       	movw	r24, r18
    2752:	8a 8f       	std	Y+26, r24	; 0x1a
    2754:	9b 8f       	std	Y+27, r25	; 0x1b
    2756:	ac 8f       	std	Y+28, r26	; 0x1c
    2758:	bd 8f       	std	Y+29, r27	; 0x1d
		Local_s8Counter++;
    275a:	89 8d       	ldd	r24, Y+25	; 0x19
    275c:	8f 5f       	subi	r24, 0xFF	; 255
    275e:	89 8f       	std	Y+25, r24	; 0x19
{
	u8 Local_u8Array[20];
	u32 Local_f32Number = (u32)(Copy_f32Number*100);
	s8 Local_s8Counter = 0;
	//Local_f32Number*=100;
	while (Local_f32Number != 0)
    2760:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2762:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2764:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2766:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2768:	00 97       	sbiw	r24, 0x00	; 0
    276a:	a1 05       	cpc	r26, r1
    276c:	b1 05       	cpc	r27, r1
    276e:	49 f6       	brne	.-110    	; 0x2702 <LCD_voidWriteNumbers+0x50>
    2770:	d5 c0       	rjmp	.+426    	; 0x291c <LCD_voidWriteNumbers+0x26a>
		Local_f32Number/=10;
		Local_s8Counter++;
	}
	while(Local_s8Counter>0)
	{
		if(Local_s8Counter == 2)
    2772:	89 8d       	ldd	r24, Y+25	; 0x19
    2774:	82 30       	cpi	r24, 0x02	; 2
    2776:	19 f4       	brne	.+6      	; 0x277e <LCD_voidWriteNumbers+0xcc>
		{
			LCD_voidWriteChar('.');
    2778:	8e e2       	ldi	r24, 0x2E	; 46
    277a:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_voidWriteChar>
		}
		Local_s8Counter--;
    277e:	89 8d       	ldd	r24, Y+25	; 0x19
    2780:	81 50       	subi	r24, 0x01	; 1
    2782:	89 8f       	std	Y+25, r24	; 0x19
		LCD_voidWriteChar(Local_u8Array[Local_s8Counter]+'0');
    2784:	89 8d       	ldd	r24, Y+25	; 0x19
    2786:	28 2f       	mov	r18, r24
    2788:	33 27       	eor	r19, r19
    278a:	27 fd       	sbrc	r18, 7
    278c:	30 95       	com	r19
    278e:	ce 01       	movw	r24, r28
    2790:	4e 96       	adiw	r24, 0x1e	; 30
    2792:	fc 01       	movw	r30, r24
    2794:	e2 0f       	add	r30, r18
    2796:	f3 1f       	adc	r31, r19
    2798:	80 81       	ld	r24, Z
    279a:	80 5d       	subi	r24, 0xD0	; 208
    279c:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_voidWriteChar>
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	a0 e0       	ldi	r26, 0x00	; 0
    27a6:	b0 e4       	ldi	r27, 0x40	; 64
    27a8:	8d 8b       	std	Y+21, r24	; 0x15
    27aa:	9e 8b       	std	Y+22, r25	; 0x16
    27ac:	af 8b       	std	Y+23, r26	; 0x17
    27ae:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27b0:	6d 89       	ldd	r22, Y+21	; 0x15
    27b2:	7e 89       	ldd	r23, Y+22	; 0x16
    27b4:	8f 89       	ldd	r24, Y+23	; 0x17
    27b6:	98 8d       	ldd	r25, Y+24	; 0x18
    27b8:	2b ea       	ldi	r18, 0xAB	; 171
    27ba:	3a ea       	ldi	r19, 0xAA	; 170
    27bc:	4a e2       	ldi	r20, 0x2A	; 42
    27be:	50 e4       	ldi	r21, 0x40	; 64
    27c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	89 8b       	std	Y+17, r24	; 0x11
    27ca:	9a 8b       	std	Y+18, r25	; 0x12
    27cc:	ab 8b       	std	Y+19, r26	; 0x13
    27ce:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    27d0:	69 89       	ldd	r22, Y+17	; 0x11
    27d2:	7a 89       	ldd	r23, Y+18	; 0x12
    27d4:	8b 89       	ldd	r24, Y+19	; 0x13
    27d6:	9c 89       	ldd	r25, Y+20	; 0x14
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	40 e8       	ldi	r20, 0x80	; 128
    27de:	5f e3       	ldi	r21, 0x3F	; 63
    27e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27e4:	88 23       	and	r24, r24
    27e6:	1c f4       	brge	.+6      	; 0x27ee <LCD_voidWriteNumbers+0x13c>
		__ticks = 1;
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	88 8b       	std	Y+16, r24	; 0x10
    27ec:	91 c0       	rjmp	.+290    	; 0x2910 <LCD_voidWriteNumbers+0x25e>
	else if (__tmp > 255)
    27ee:	69 89       	ldd	r22, Y+17	; 0x11
    27f0:	7a 89       	ldd	r23, Y+18	; 0x12
    27f2:	8b 89       	ldd	r24, Y+19	; 0x13
    27f4:	9c 89       	ldd	r25, Y+20	; 0x14
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	4f e7       	ldi	r20, 0x7F	; 127
    27fc:	53 e4       	ldi	r21, 0x43	; 67
    27fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2802:	18 16       	cp	r1, r24
    2804:	0c f0       	brlt	.+2      	; 0x2808 <LCD_voidWriteNumbers+0x156>
    2806:	7b c0       	rjmp	.+246    	; 0x28fe <LCD_voidWriteNumbers+0x24c>
	{
		_delay_ms(__us / 1000.0);
    2808:	6d 89       	ldd	r22, Y+21	; 0x15
    280a:	7e 89       	ldd	r23, Y+22	; 0x16
    280c:	8f 89       	ldd	r24, Y+23	; 0x17
    280e:	98 8d       	ldd	r25, Y+24	; 0x18
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	4a e7       	ldi	r20, 0x7A	; 122
    2816:	54 e4       	ldi	r21, 0x44	; 68
    2818:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	8c 87       	std	Y+12, r24	; 0x0c
    2822:	9d 87       	std	Y+13, r25	; 0x0d
    2824:	ae 87       	std	Y+14, r26	; 0x0e
    2826:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2828:	6c 85       	ldd	r22, Y+12	; 0x0c
    282a:	7d 85       	ldd	r23, Y+13	; 0x0d
    282c:	8e 85       	ldd	r24, Y+14	; 0x0e
    282e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	4a ef       	ldi	r20, 0xFA	; 250
    2836:	54 e4       	ldi	r21, 0x44	; 68
    2838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	88 87       	std	Y+8, r24	; 0x08
    2842:	99 87       	std	Y+9, r25	; 0x09
    2844:	aa 87       	std	Y+10, r26	; 0x0a
    2846:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2848:	68 85       	ldd	r22, Y+8	; 0x08
    284a:	79 85       	ldd	r23, Y+9	; 0x09
    284c:	8a 85       	ldd	r24, Y+10	; 0x0a
    284e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	40 e8       	ldi	r20, 0x80	; 128
    2856:	5f e3       	ldi	r21, 0x3F	; 63
    2858:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    285c:	88 23       	and	r24, r24
    285e:	2c f4       	brge	.+10     	; 0x286a <LCD_voidWriteNumbers+0x1b8>
		__ticks = 1;
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	9f 83       	std	Y+7, r25	; 0x07
    2866:	8e 83       	std	Y+6, r24	; 0x06
    2868:	3f c0       	rjmp	.+126    	; 0x28e8 <LCD_voidWriteNumbers+0x236>
	else if (__tmp > 65535)
    286a:	68 85       	ldd	r22, Y+8	; 0x08
    286c:	79 85       	ldd	r23, Y+9	; 0x09
    286e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2870:	9b 85       	ldd	r25, Y+11	; 0x0b
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	3f ef       	ldi	r19, 0xFF	; 255
    2876:	4f e7       	ldi	r20, 0x7F	; 127
    2878:	57 e4       	ldi	r21, 0x47	; 71
    287a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    287e:	18 16       	cp	r1, r24
    2880:	4c f5       	brge	.+82     	; 0x28d4 <LCD_voidWriteNumbers+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2882:	6c 85       	ldd	r22, Y+12	; 0x0c
    2884:	7d 85       	ldd	r23, Y+13	; 0x0d
    2886:	8e 85       	ldd	r24, Y+14	; 0x0e
    2888:	9f 85       	ldd	r25, Y+15	; 0x0f
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e2       	ldi	r20, 0x20	; 32
    2890:	51 e4       	ldi	r21, 0x41	; 65
    2892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	bc 01       	movw	r22, r24
    289c:	cd 01       	movw	r24, r26
    289e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	9f 83       	std	Y+7, r25	; 0x07
    28a8:	8e 83       	std	Y+6, r24	; 0x06
    28aa:	0f c0       	rjmp	.+30     	; 0x28ca <LCD_voidWriteNumbers+0x218>
    28ac:	88 ec       	ldi	r24, 0xC8	; 200
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	9d 83       	std	Y+5, r25	; 0x05
    28b2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28b4:	8c 81       	ldd	r24, Y+4	; 0x04
    28b6:	9d 81       	ldd	r25, Y+5	; 0x05
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	f1 f7       	brne	.-4      	; 0x28b8 <LCD_voidWriteNumbers+0x206>
    28bc:	9d 83       	std	Y+5, r25	; 0x05
    28be:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c0:	8e 81       	ldd	r24, Y+6	; 0x06
    28c2:	9f 81       	ldd	r25, Y+7	; 0x07
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	9f 83       	std	Y+7, r25	; 0x07
    28c8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ca:	8e 81       	ldd	r24, Y+6	; 0x06
    28cc:	9f 81       	ldd	r25, Y+7	; 0x07
    28ce:	00 97       	sbiw	r24, 0x00	; 0
    28d0:	69 f7       	brne	.-38     	; 0x28ac <LCD_voidWriteNumbers+0x1fa>
    28d2:	24 c0       	rjmp	.+72     	; 0x291c <LCD_voidWriteNumbers+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d4:	68 85       	ldd	r22, Y+8	; 0x08
    28d6:	79 85       	ldd	r23, Y+9	; 0x09
    28d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    28da:	9b 85       	ldd	r25, Y+11	; 0x0b
    28dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	9f 83       	std	Y+7, r25	; 0x07
    28e6:	8e 83       	std	Y+6, r24	; 0x06
    28e8:	8e 81       	ldd	r24, Y+6	; 0x06
    28ea:	9f 81       	ldd	r25, Y+7	; 0x07
    28ec:	9b 83       	std	Y+3, r25	; 0x03
    28ee:	8a 83       	std	Y+2, r24	; 0x02
    28f0:	8a 81       	ldd	r24, Y+2	; 0x02
    28f2:	9b 81       	ldd	r25, Y+3	; 0x03
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	f1 f7       	brne	.-4      	; 0x28f4 <LCD_voidWriteNumbers+0x242>
    28f8:	9b 83       	std	Y+3, r25	; 0x03
    28fa:	8a 83       	std	Y+2, r24	; 0x02
    28fc:	0f c0       	rjmp	.+30     	; 0x291c <LCD_voidWriteNumbers+0x26a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28fe:	69 89       	ldd	r22, Y+17	; 0x11
    2900:	7a 89       	ldd	r23, Y+18	; 0x12
    2902:	8b 89       	ldd	r24, Y+19	; 0x13
    2904:	9c 89       	ldd	r25, Y+20	; 0x14
    2906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	88 8b       	std	Y+16, r24	; 0x10
    2910:	88 89       	ldd	r24, Y+16	; 0x10
    2912:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	8a 95       	dec	r24
    2918:	f1 f7       	brne	.-4      	; 0x2916 <LCD_voidWriteNumbers+0x264>
    291a:	89 83       	std	Y+1, r24	; 0x01
	{
		Local_u8Array[Local_s8Counter] = Local_f32Number%10;
		Local_f32Number/=10;
		Local_s8Counter++;
	}
	while(Local_s8Counter>0)
    291c:	89 8d       	ldd	r24, Y+25	; 0x19
    291e:	18 16       	cp	r1, r24
    2920:	0c f4       	brge	.+2      	; 0x2924 <LCD_voidWriteNumbers+0x272>
    2922:	27 cf       	rjmp	.-434    	; 0x2772 <LCD_voidWriteNumbers+0xc0>
		Local_s8Counter--;
		LCD_voidWriteChar(Local_u8Array[Local_s8Counter]+'0');
		_delay_us (2);

	}
}
    2924:	e5 96       	adiw	r28, 0x35	; 53
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	de bf       	out	0x3e, r29	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	cd bf       	out	0x3d, r28	; 61
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	1f 91       	pop	r17
    2936:	0f 91       	pop	r16
    2938:	08 95       	ret

0000293a <LCD_voidSetCursorToX_y>:
void LCD_voidSetCursorToX_y(u8 Copy_u8Row,u8 Copy_u8Coloumn)
{
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	00 d0       	rcall	.+0      	; 0x2940 <LCD_voidSetCursorToX_y+0x6>
    2940:	00 d0       	rcall	.+0      	; 0x2942 <LCD_voidSetCursorToX_y+0x8>
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62
    2946:	89 83       	std	Y+1, r24	; 0x01
    2948:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Row)
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	28 2f       	mov	r18, r24
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	3c 83       	std	Y+4, r19	; 0x04
    2952:	2b 83       	std	Y+3, r18	; 0x03
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	9c 81       	ldd	r25, Y+4	; 0x04
    2958:	81 30       	cpi	r24, 0x01	; 1
    295a:	91 05       	cpc	r25, r1
    295c:	d1 f0       	breq	.+52     	; 0x2992 <LCD_voidSetCursorToX_y+0x58>
    295e:	2b 81       	ldd	r18, Y+3	; 0x03
    2960:	3c 81       	ldd	r19, Y+4	; 0x04
    2962:	22 30       	cpi	r18, 0x02	; 2
    2964:	31 05       	cpc	r19, r1
    2966:	2c f4       	brge	.+10     	; 0x2972 <LCD_voidSetCursorToX_y+0x38>
    2968:	8b 81       	ldd	r24, Y+3	; 0x03
    296a:	9c 81       	ldd	r25, Y+4	; 0x04
    296c:	00 97       	sbiw	r24, 0x00	; 0
    296e:	61 f0       	breq	.+24     	; 0x2988 <LCD_voidSetCursorToX_y+0x4e>
    2970:	1e c0       	rjmp	.+60     	; 0x29ae <LCD_voidSetCursorToX_y+0x74>
    2972:	2b 81       	ldd	r18, Y+3	; 0x03
    2974:	3c 81       	ldd	r19, Y+4	; 0x04
    2976:	22 30       	cpi	r18, 0x02	; 2
    2978:	31 05       	cpc	r19, r1
    297a:	81 f0       	breq	.+32     	; 0x299c <LCD_voidSetCursorToX_y+0x62>
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	9c 81       	ldd	r25, Y+4	; 0x04
    2980:	83 30       	cpi	r24, 0x03	; 3
    2982:	91 05       	cpc	r25, r1
    2984:	81 f0       	breq	.+32     	; 0x29a6 <LCD_voidSetCursorToX_y+0x6c>
    2986:	13 c0       	rjmp	.+38     	; 0x29ae <LCD_voidSetCursorToX_y+0x74>
	{
		case LCD_ROW0:
			LCD_voidSendCommand(0x80+Copy_u8Coloumn);
    2988:	8a 81       	ldd	r24, Y+2	; 0x02
    298a:	80 58       	subi	r24, 0x80	; 128
    298c:	0e 94 4e 10 	call	0x209c	; 0x209c <LCD_voidSendCommand>
    2990:	0e c0       	rjmp	.+28     	; 0x29ae <LCD_voidSetCursorToX_y+0x74>
			break;
		case LCD_ROW1:
			LCD_voidSendCommand(0x80+0x40+Copy_u8Coloumn);
    2992:	8a 81       	ldd	r24, Y+2	; 0x02
    2994:	80 54       	subi	r24, 0x40	; 64
    2996:	0e 94 4e 10 	call	0x209c	; 0x209c <LCD_voidSendCommand>
    299a:	09 c0       	rjmp	.+18     	; 0x29ae <LCD_voidSetCursorToX_y+0x74>
			break;
		case LCD_ROW2:
			LCD_voidSendCommand(0x80+0x40+0x14+Copy_u8Coloumn);
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
    299e:	8c 52       	subi	r24, 0x2C	; 44
    29a0:	0e 94 4e 10 	call	0x209c	; 0x209c <LCD_voidSendCommand>
    29a4:	04 c0       	rjmp	.+8      	; 0x29ae <LCD_voidSetCursorToX_y+0x74>
			break;

		case LCD_ROW3:
			LCD_voidSendCommand(0x80+0x40+0x14+0x54+Copy_u8Coloumn);
    29a6:	8a 81       	ldd	r24, Y+2	; 0x02
    29a8:	88 5d       	subi	r24, 0xD8	; 216
    29aa:	0e 94 4e 10 	call	0x209c	; 0x209c <LCD_voidSendCommand>
			break;
	}
}
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	cf 91       	pop	r28
    29b8:	df 91       	pop	r29
    29ba:	08 95       	ret

000029bc <LCD_voidCreateCustomChar>:
void LCD_voidCreateCustomChar(u8 CharID,u8 *Copy_CustomChar)
{
    29bc:	df 93       	push	r29
    29be:	cf 93       	push	r28
    29c0:	00 d0       	rcall	.+0      	; 0x29c2 <LCD_voidCreateCustomChar+0x6>
    29c2:	00 d0       	rcall	.+0      	; 0x29c4 <LCD_voidCreateCustomChar+0x8>
    29c4:	cd b7       	in	r28, 0x3d	; 61
    29c6:	de b7       	in	r29, 0x3e	; 62
    29c8:	8a 83       	std	Y+2, r24	; 0x02
    29ca:	7c 83       	std	Y+4, r23	; 0x04
    29cc:	6b 83       	std	Y+3, r22	; 0x03
	LCD_voidSendCommand(CG_RAM_ADDRESS + CharID);
    29ce:	8a 81       	ldd	r24, Y+2	; 0x02
    29d0:	80 5c       	subi	r24, 0xC0	; 192
    29d2:	0e 94 4e 10 	call	0x209c	; 0x209c <LCD_voidSendCommand>
	for(u8 i=0;i<8;i++)
    29d6:	19 82       	std	Y+1, r1	; 0x01
    29d8:	0e c0       	rjmp	.+28     	; 0x29f6 <LCD_voidCreateCustomChar+0x3a>
	{
		LCD_voidSendData(Copy_CustomChar[i]);
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	28 2f       	mov	r18, r24
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	8b 81       	ldd	r24, Y+3	; 0x03
    29e2:	9c 81       	ldd	r25, Y+4	; 0x04
    29e4:	fc 01       	movw	r30, r24
    29e6:	e2 0f       	add	r30, r18
    29e8:	f3 1f       	adc	r31, r19
    29ea:	80 81       	ld	r24, Z
    29ec:	0e 94 5f 10 	call	0x20be	; 0x20be <LCD_voidSendData>
	}
}
void LCD_voidCreateCustomChar(u8 CharID,u8 *Copy_CustomChar)
{
	LCD_voidSendCommand(CG_RAM_ADDRESS + CharID);
	for(u8 i=0;i<8;i++)
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	8f 5f       	subi	r24, 0xFF	; 255
    29f4:	89 83       	std	Y+1, r24	; 0x01
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
    29f8:	88 30       	cpi	r24, 0x08	; 8
    29fa:	78 f3       	brcs	.-34     	; 0x29da <LCD_voidCreateCustomChar+0x1e>
	{
		LCD_voidSendData(Copy_CustomChar[i]);
	}

}
    29fc:	0f 90       	pop	r0
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	08 95       	ret

00002a0a <PORT_voidInit>:
#include "../inc/MCAL/PORT/PORT.h"
#include "../inc/MCAL/PORT/PORT_prv.h"
#include "../inc/MCAL/PORT/PORT_cfg.h"

void PORT_voidInit(void)
{
    2a0a:	df 93       	push	r29
    2a0c:	cf 93       	push	r28
    2a0e:	cd b7       	in	r28, 0x3d	; 61
    2a10:	de b7       	in	r29, 0x3e	; 62

	#undef PORT_u8PINMODE_INPUUT_PULLUP
	#define PORT_u8PINMODE_INPUUT_PULLUP 0

	
	DDRA =CONC(DIO_u8MODEPORTAPIN7,DIO_u8MODEPORTAPIN6,DIO_u8MODEPORTAPIN5,DIO_u8MODEPORTAPIN4,DIO_u8MODEPORTAPIN3,DIO_u8MODEPORTAPIN2,DIO_u8MODEPORTAPIN1,DIO_u8MODEPORTAPIN0);
    2a12:	ea e3       	ldi	r30, 0x3A	; 58
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	8f ef       	ldi	r24, 0xFF	; 255
    2a18:	80 83       	st	Z, r24
	DDRB =CONC(DIO_u8MODEPORTBPIN7,DIO_u8MODEPORTBPIN6,DIO_u8MODEPORTBPIN5,DIO_u8MODEPORTBPIN4,DIO_u8MODEPORTBPIN3,DIO_u8MODEPORTBPIN2,DIO_u8MODEPORTBPIN1,DIO_u8MODEPORTBPIN0);
    2a1a:	e7 e3       	ldi	r30, 0x37	; 55
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	8f ef       	ldi	r24, 0xFF	; 255
    2a20:	80 83       	st	Z, r24
	DDRC =CONC(DIO_u8MODEPORTCPIN7,DIO_u8MODEPORTCPIN6,DIO_u8MODEPORTCPIN5,DIO_u8MODEPORTCPIN4,DIO_u8MODEPORTCPIN3,DIO_u8MODEPORTCPIN2,DIO_u8MODEPORTCPIN1,DIO_u8MODEPORTCPIN0);
    2a22:	e4 e3       	ldi	r30, 0x34	; 52
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	8f ef       	ldi	r24, 0xFF	; 255
    2a28:	80 83       	st	Z, r24
	DDRD =CONC(DIO_u8MODEPORTDPIN7,DIO_u8MODEPORTDPIN6,DIO_u8MODEPORTDPIN5,DIO_u8MODEPORTDPIN4,DIO_u8MODEPORTDPIN3,DIO_u8MODEPORTDPIN2,DIO_u8MODEPORTDPIN1,DIO_u8MODEPORTDPIN0);
    2a2a:	e1 e3       	ldi	r30, 0x31	; 49
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	8f ef       	ldi	r24, 0xFF	; 255
    2a30:	80 83       	st	Z, r24
	#define PORT_u8PINMODE_INPUT_FLOATING 0

	#undef PORT_u8PINMODE_INPUUT_PULLUP
	#define PORT_u8PINMODE_INPUUT_PULLUP 1
	
	PORTA =CONC(DIO_u8MODEPORTAPIN7,DIO_u8MODEPORTAPIN6,DIO_u8MODEPORTAPIN5,DIO_u8MODEPORTAPIN4,DIO_u8MODEPORTAPIN3,DIO_u8MODEPORTAPIN2,DIO_u8MODEPORTAPIN1,DIO_u8MODEPORTAPIN0);
    2a32:	eb e3       	ldi	r30, 0x3B	; 59
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	10 82       	st	Z, r1
	PORTB =CONC(DIO_u8MODEPORTBPIN7,DIO_u8MODEPORTBPIN6,DIO_u8MODEPORTBPIN5,DIO_u8MODEPORTBPIN4,DIO_u8MODEPORTBPIN3,DIO_u8MODEPORTBPIN2,DIO_u8MODEPORTBPIN1,DIO_u8MODEPORTBPIN0);
    2a38:	e8 e3       	ldi	r30, 0x38	; 56
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	10 82       	st	Z, r1
	PORTC =CONC(DIO_u8MODEPORTCPIN7,DIO_u8MODEPORTCPIN6,DIO_u8MODEPORTCPIN5,DIO_u8MODEPORTCPIN4,DIO_u8MODEPORTCPIN3,DIO_u8MODEPORTCPIN2,DIO_u8MODEPORTCPIN1,DIO_u8MODEPORTCPIN0);
    2a3e:	e5 e3       	ldi	r30, 0x35	; 53
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	10 82       	st	Z, r1
	PORTD =CONC(DIO_u8MODEPORTDPIN7,DIO_u8MODEPORTDPIN6,DIO_u8MODEPORTDPIN5,DIO_u8MODEPORTDPIN4,DIO_u8MODEPORTDPIN3,DIO_u8MODEPORTDPIN2,DIO_u8MODEPORTDPIN1,DIO_u8MODEPORTDPIN0);
    2a44:	e2 e3       	ldi	r30, 0x32	; 50
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	10 82       	st	Z, r1
	#undef PORT_u8PINMODE_INPUT_FLOATING
	#define PORT_u8PINMODE_INPUT_FLOATING 2

	#undef PORT_u8PINMODE_INPUUT_PULLUP
	#define PORT_u8PINMODE_INPUUT_PULLUP 3
}
    2a4a:	cf 91       	pop	r28
    2a4c:	df 91       	pop	r29
    2a4e:	08 95       	ret

00002a50 <PORT_enumSET_PINDirection>:
PORT_enumErrStatus PORT_enumSET_PINDirection(u8 Copy_u8PINNum, u8 Copy_u8PINDirection)
{
    2a50:	df 93       	push	r29
    2a52:	cf 93       	push	r28
    2a54:	cd b7       	in	r28, 0x3d	; 61
    2a56:	de b7       	in	r29, 0x3e	; 62
    2a58:	27 97       	sbiw	r28, 0x07	; 7
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
    2a64:	8c 83       	std	Y+4, r24	; 0x04
    2a66:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8PINID = Copy_u8PINNum%8;
    2a68:	8c 81       	ldd	r24, Y+4	; 0x04
    2a6a:	87 70       	andi	r24, 0x07	; 7
    2a6c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PORTID = Copy_u8PINNum/8;
    2a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a70:	86 95       	lsr	r24
    2a72:	86 95       	lsr	r24
    2a74:	86 95       	lsr	r24
    2a76:	8a 83       	std	Y+2, r24	; 0x02
	PORT_enumErrStatus Local_enumErrStatus = PORT_enumOK;
    2a78:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_u8PORTID)
    2a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7c:	28 2f       	mov	r18, r24
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	3f 83       	std	Y+7, r19	; 0x07
    2a82:	2e 83       	std	Y+6, r18	; 0x06
    2a84:	8e 81       	ldd	r24, Y+6	; 0x06
    2a86:	9f 81       	ldd	r25, Y+7	; 0x07
    2a88:	81 30       	cpi	r24, 0x01	; 1
    2a8a:	91 05       	cpc	r25, r1
    2a8c:	09 f4       	brne	.+2      	; 0x2a90 <PORT_enumSET_PINDirection+0x40>
    2a8e:	49 c0       	rjmp	.+146    	; 0x2b22 <PORT_enumSET_PINDirection+0xd2>
    2a90:	2e 81       	ldd	r18, Y+6	; 0x06
    2a92:	3f 81       	ldd	r19, Y+7	; 0x07
    2a94:	22 30       	cpi	r18, 0x02	; 2
    2a96:	31 05       	cpc	r19, r1
    2a98:	2c f4       	brge	.+10     	; 0x2aa4 <PORT_enumSET_PINDirection+0x54>
    2a9a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a9c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a9e:	00 97       	sbiw	r24, 0x00	; 0
    2aa0:	71 f0       	breq	.+28     	; 0x2abe <PORT_enumSET_PINDirection+0x6e>
    2aa2:	d5 c0       	rjmp	.+426    	; 0x2c4e <PORT_enumSET_PINDirection+0x1fe>
    2aa4:	2e 81       	ldd	r18, Y+6	; 0x06
    2aa6:	3f 81       	ldd	r19, Y+7	; 0x07
    2aa8:	22 30       	cpi	r18, 0x02	; 2
    2aaa:	31 05       	cpc	r19, r1
    2aac:	09 f4       	brne	.+2      	; 0x2ab0 <PORT_enumSET_PINDirection+0x60>
    2aae:	6b c0       	rjmp	.+214    	; 0x2b86 <PORT_enumSET_PINDirection+0x136>
    2ab0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ab2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ab4:	83 30       	cpi	r24, 0x03	; 3
    2ab6:	91 05       	cpc	r25, r1
    2ab8:	09 f4       	brne	.+2      	; 0x2abc <PORT_enumSET_PINDirection+0x6c>
    2aba:	97 c0       	rjmp	.+302    	; 0x2bea <PORT_enumSET_PINDirection+0x19a>
    2abc:	c8 c0       	rjmp	.+400    	; 0x2c4e <PORT_enumSET_PINDirection+0x1fe>
	{
		case PORT_u8PORTA:
			if(Copy_u8PINDirection == PORT_u8PINDIR_OUTPUT)
    2abe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac0:	81 30       	cpi	r24, 0x01	; 1
    2ac2:	a1 f4       	brne	.+40     	; 0x2aec <PORT_enumSET_PINDirection+0x9c>
			{
				SET_BIT(DDRA,Local_u8PINID);
    2ac4:	aa e3       	ldi	r26, 0x3A	; 58
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	ea e3       	ldi	r30, 0x3A	; 58
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	80 81       	ld	r24, Z
    2ace:	48 2f       	mov	r20, r24
    2ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	02 2e       	mov	r0, r18
    2adc:	02 c0       	rjmp	.+4      	; 0x2ae2 <PORT_enumSET_PINDirection+0x92>
    2ade:	88 0f       	add	r24, r24
    2ae0:	99 1f       	adc	r25, r25
    2ae2:	0a 94       	dec	r0
    2ae4:	e2 f7       	brpl	.-8      	; 0x2ade <PORT_enumSET_PINDirection+0x8e>
    2ae6:	84 2b       	or	r24, r20
    2ae8:	8c 93       	st	X, r24
    2aea:	b3 c0       	rjmp	.+358    	; 0x2c52 <PORT_enumSET_PINDirection+0x202>
			}
			else if(Copy_u8PINDirection == PORT_u8PINDIR_INPUT)
    2aec:	8d 81       	ldd	r24, Y+5	; 0x05
    2aee:	88 23       	and	r24, r24
    2af0:	a9 f4       	brne	.+42     	; 0x2b1c <PORT_enumSET_PINDirection+0xcc>
			{
				CLR_BIT(DDRA,Local_u8PINID);
    2af2:	aa e3       	ldi	r26, 0x3A	; 58
    2af4:	b0 e0       	ldi	r27, 0x00	; 0
    2af6:	ea e3       	ldi	r30, 0x3A	; 58
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	80 81       	ld	r24, Z
    2afc:	48 2f       	mov	r20, r24
    2afe:	8b 81       	ldd	r24, Y+3	; 0x03
    2b00:	28 2f       	mov	r18, r24
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	02 2e       	mov	r0, r18
    2b0a:	02 c0       	rjmp	.+4      	; 0x2b10 <PORT_enumSET_PINDirection+0xc0>
    2b0c:	88 0f       	add	r24, r24
    2b0e:	99 1f       	adc	r25, r25
    2b10:	0a 94       	dec	r0
    2b12:	e2 f7       	brpl	.-8      	; 0x2b0c <PORT_enumSET_PINDirection+0xbc>
    2b14:	80 95       	com	r24
    2b16:	84 23       	and	r24, r20
    2b18:	8c 93       	st	X, r24
    2b1a:	9b c0       	rjmp	.+310    	; 0x2c52 <PORT_enumSET_PINDirection+0x202>
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
    2b1c:	82 e0       	ldi	r24, 0x02	; 2
    2b1e:	89 83       	std	Y+1, r24	; 0x01
    2b20:	98 c0       	rjmp	.+304    	; 0x2c52 <PORT_enumSET_PINDirection+0x202>
			}
			break;
		case PORT_u8PORTB:
			if(Copy_u8PINDirection == PORT_u8PINDIR_OUTPUT)
    2b22:	8d 81       	ldd	r24, Y+5	; 0x05
    2b24:	81 30       	cpi	r24, 0x01	; 1
    2b26:	a1 f4       	brne	.+40     	; 0x2b50 <PORT_enumSET_PINDirection+0x100>
			{
				SET_BIT(DDRB,Local_u8PINID);
    2b28:	a7 e3       	ldi	r26, 0x37	; 55
    2b2a:	b0 e0       	ldi	r27, 0x00	; 0
    2b2c:	e7 e3       	ldi	r30, 0x37	; 55
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	48 2f       	mov	r20, r24
    2b34:	8b 81       	ldd	r24, Y+3	; 0x03
    2b36:	28 2f       	mov	r18, r24
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	02 2e       	mov	r0, r18
    2b40:	02 c0       	rjmp	.+4      	; 0x2b46 <PORT_enumSET_PINDirection+0xf6>
    2b42:	88 0f       	add	r24, r24
    2b44:	99 1f       	adc	r25, r25
    2b46:	0a 94       	dec	r0
    2b48:	e2 f7       	brpl	.-8      	; 0x2b42 <PORT_enumSET_PINDirection+0xf2>
    2b4a:	84 2b       	or	r24, r20
    2b4c:	8c 93       	st	X, r24
    2b4e:	81 c0       	rjmp	.+258    	; 0x2c52 <PORT_enumSET_PINDirection+0x202>
			}
			else if(Copy_u8PINDirection == PORT_u8PINDIR_INPUT)
    2b50:	8d 81       	ldd	r24, Y+5	; 0x05
    2b52:	88 23       	and	r24, r24
    2b54:	a9 f4       	brne	.+42     	; 0x2b80 <PORT_enumSET_PINDirection+0x130>
			{
				CLR_BIT(DDRB,Local_u8PINID);
    2b56:	a7 e3       	ldi	r26, 0x37	; 55
    2b58:	b0 e0       	ldi	r27, 0x00	; 0
    2b5a:	e7 e3       	ldi	r30, 0x37	; 55
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	48 2f       	mov	r20, r24
    2b62:	8b 81       	ldd	r24, Y+3	; 0x03
    2b64:	28 2f       	mov	r18, r24
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	02 2e       	mov	r0, r18
    2b6e:	02 c0       	rjmp	.+4      	; 0x2b74 <PORT_enumSET_PINDirection+0x124>
    2b70:	88 0f       	add	r24, r24
    2b72:	99 1f       	adc	r25, r25
    2b74:	0a 94       	dec	r0
    2b76:	e2 f7       	brpl	.-8      	; 0x2b70 <PORT_enumSET_PINDirection+0x120>
    2b78:	80 95       	com	r24
    2b7a:	84 23       	and	r24, r20
    2b7c:	8c 93       	st	X, r24
    2b7e:	69 c0       	rjmp	.+210    	; 0x2c52 <PORT_enumSET_PINDirection+0x202>
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
    2b80:	82 e0       	ldi	r24, 0x02	; 2
    2b82:	89 83       	std	Y+1, r24	; 0x01
    2b84:	66 c0       	rjmp	.+204    	; 0x2c52 <PORT_enumSET_PINDirection+0x202>
			}
			break;
		case PORT_u8PORTC:
			if(Copy_u8PINDirection == PORT_u8PINDIR_OUTPUT)
    2b86:	8d 81       	ldd	r24, Y+5	; 0x05
    2b88:	81 30       	cpi	r24, 0x01	; 1
    2b8a:	a1 f4       	brne	.+40     	; 0x2bb4 <PORT_enumSET_PINDirection+0x164>
			{
				SET_BIT(DDRC,Local_u8PINID);
    2b8c:	a4 e3       	ldi	r26, 0x34	; 52
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	e4 e3       	ldi	r30, 0x34	; 52
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	48 2f       	mov	r20, r24
    2b98:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9a:	28 2f       	mov	r18, r24
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	02 2e       	mov	r0, r18
    2ba4:	02 c0       	rjmp	.+4      	; 0x2baa <PORT_enumSET_PINDirection+0x15a>
    2ba6:	88 0f       	add	r24, r24
    2ba8:	99 1f       	adc	r25, r25
    2baa:	0a 94       	dec	r0
    2bac:	e2 f7       	brpl	.-8      	; 0x2ba6 <PORT_enumSET_PINDirection+0x156>
    2bae:	84 2b       	or	r24, r20
    2bb0:	8c 93       	st	X, r24
    2bb2:	4f c0       	rjmp	.+158    	; 0x2c52 <PORT_enumSET_PINDirection+0x202>
			}
			else if(Copy_u8PINDirection == PORT_u8PINDIR_INPUT)
    2bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb6:	88 23       	and	r24, r24
    2bb8:	a9 f4       	brne	.+42     	; 0x2be4 <PORT_enumSET_PINDirection+0x194>
			{
				CLR_BIT(DDRC,Local_u8PINID);
    2bba:	a4 e3       	ldi	r26, 0x34	; 52
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	e4 e3       	ldi	r30, 0x34	; 52
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	48 2f       	mov	r20, r24
    2bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc8:	28 2f       	mov	r18, r24
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	02 2e       	mov	r0, r18
    2bd2:	02 c0       	rjmp	.+4      	; 0x2bd8 <PORT_enumSET_PINDirection+0x188>
    2bd4:	88 0f       	add	r24, r24
    2bd6:	99 1f       	adc	r25, r25
    2bd8:	0a 94       	dec	r0
    2bda:	e2 f7       	brpl	.-8      	; 0x2bd4 <PORT_enumSET_PINDirection+0x184>
    2bdc:	80 95       	com	r24
    2bde:	84 23       	and	r24, r20
    2be0:	8c 93       	st	X, r24
    2be2:	37 c0       	rjmp	.+110    	; 0x2c52 <PORT_enumSET_PINDirection+0x202>
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
    2be4:	82 e0       	ldi	r24, 0x02	; 2
    2be6:	89 83       	std	Y+1, r24	; 0x01
    2be8:	34 c0       	rjmp	.+104    	; 0x2c52 <PORT_enumSET_PINDirection+0x202>
			}
			break;
		case PORT_u8PORTD:
			if(Copy_u8PINDirection == PORT_u8PINDIR_OUTPUT)
    2bea:	8d 81       	ldd	r24, Y+5	; 0x05
    2bec:	81 30       	cpi	r24, 0x01	; 1
    2bee:	a1 f4       	brne	.+40     	; 0x2c18 <PORT_enumSET_PINDirection+0x1c8>
			{
				SET_BIT(DDRD,Local_u8PINID);
    2bf0:	a1 e3       	ldi	r26, 0x31	; 49
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	e1 e3       	ldi	r30, 0x31	; 49
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	48 2f       	mov	r20, r24
    2bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfe:	28 2f       	mov	r18, r24
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	02 2e       	mov	r0, r18
    2c08:	02 c0       	rjmp	.+4      	; 0x2c0e <PORT_enumSET_PINDirection+0x1be>
    2c0a:	88 0f       	add	r24, r24
    2c0c:	99 1f       	adc	r25, r25
    2c0e:	0a 94       	dec	r0
    2c10:	e2 f7       	brpl	.-8      	; 0x2c0a <PORT_enumSET_PINDirection+0x1ba>
    2c12:	84 2b       	or	r24, r20
    2c14:	8c 93       	st	X, r24
    2c16:	1d c0       	rjmp	.+58     	; 0x2c52 <PORT_enumSET_PINDirection+0x202>
			}
			else if(Copy_u8PINDirection == PORT_u8PINDIR_INPUT)
    2c18:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1a:	88 23       	and	r24, r24
    2c1c:	a9 f4       	brne	.+42     	; 0x2c48 <PORT_enumSET_PINDirection+0x1f8>
			{
				CLR_BIT(DDRD,Local_u8PINID);
    2c1e:	a1 e3       	ldi	r26, 0x31	; 49
    2c20:	b0 e0       	ldi	r27, 0x00	; 0
    2c22:	e1 e3       	ldi	r30, 0x31	; 49
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	80 81       	ld	r24, Z
    2c28:	48 2f       	mov	r20, r24
    2c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2c:	28 2f       	mov	r18, r24
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	02 2e       	mov	r0, r18
    2c36:	02 c0       	rjmp	.+4      	; 0x2c3c <PORT_enumSET_PINDirection+0x1ec>
    2c38:	88 0f       	add	r24, r24
    2c3a:	99 1f       	adc	r25, r25
    2c3c:	0a 94       	dec	r0
    2c3e:	e2 f7       	brpl	.-8      	; 0x2c38 <PORT_enumSET_PINDirection+0x1e8>
    2c40:	80 95       	com	r24
    2c42:	84 23       	and	r24, r20
    2c44:	8c 93       	st	X, r24
    2c46:	05 c0       	rjmp	.+10     	; 0x2c52 <PORT_enumSET_PINDirection+0x202>
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
    2c48:	82 e0       	ldi	r24, 0x02	; 2
    2c4a:	89 83       	std	Y+1, r24	; 0x01
    2c4c:	02 c0       	rjmp	.+4      	; 0x2c52 <PORT_enumSET_PINDirection+0x202>
			}
			break;
		default :
			Local_enumErrStatus = PORT_enumPINerr;
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return Local_enumErrStatus;
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c54:	27 96       	adiw	r28, 0x07	; 7
    2c56:	0f b6       	in	r0, 0x3f	; 63
    2c58:	f8 94       	cli
    2c5a:	de bf       	out	0x3e, r29	; 62
    2c5c:	0f be       	out	0x3f, r0	; 63
    2c5e:	cd bf       	out	0x3d, r28	; 61
    2c60:	cf 91       	pop	r28
    2c62:	df 91       	pop	r29
    2c64:	08 95       	ret

00002c66 <PORT_enumSET_PINMODE>:
PORT_enumErrStatus PORT_enumSET_PINMODE(u8 Copy_u8PINNum, u8 Copy_u8PINMODE)
{
    2c66:	df 93       	push	r29
    2c68:	cf 93       	push	r28
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
    2c6e:	27 97       	sbiw	r28, 0x07	; 7
    2c70:	0f b6       	in	r0, 0x3f	; 63
    2c72:	f8 94       	cli
    2c74:	de bf       	out	0x3e, r29	; 62
    2c76:	0f be       	out	0x3f, r0	; 63
    2c78:	cd bf       	out	0x3d, r28	; 61
    2c7a:	8c 83       	std	Y+4, r24	; 0x04
    2c7c:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8PINID = Copy_u8PINNum%8;
    2c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c80:	87 70       	andi	r24, 0x07	; 7
    2c82:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PORTID = Copy_u8PINNum/8;
    2c84:	8c 81       	ldd	r24, Y+4	; 0x04
    2c86:	86 95       	lsr	r24
    2c88:	86 95       	lsr	r24
    2c8a:	86 95       	lsr	r24
    2c8c:	8a 83       	std	Y+2, r24	; 0x02
	PORT_enumErrStatus Local_enumErrStatus = PORT_enumOK;
    2c8e:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_u8PORTID)
    2c90:	8a 81       	ldd	r24, Y+2	; 0x02
    2c92:	28 2f       	mov	r18, r24
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	3f 83       	std	Y+7, r19	; 0x07
    2c98:	2e 83       	std	Y+6, r18	; 0x06
    2c9a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c9c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c9e:	81 30       	cpi	r24, 0x01	; 1
    2ca0:	91 05       	cpc	r25, r1
    2ca2:	09 f4       	brne	.+2      	; 0x2ca6 <PORT_enumSET_PINMODE+0x40>
    2ca4:	4f c0       	rjmp	.+158    	; 0x2d44 <PORT_enumSET_PINMODE+0xde>
    2ca6:	2e 81       	ldd	r18, Y+6	; 0x06
    2ca8:	3f 81       	ldd	r19, Y+7	; 0x07
    2caa:	22 30       	cpi	r18, 0x02	; 2
    2cac:	31 05       	cpc	r19, r1
    2cae:	2c f4       	brge	.+10     	; 0x2cba <PORT_enumSET_PINMODE+0x54>
    2cb0:	8e 81       	ldd	r24, Y+6	; 0x06
    2cb2:	9f 81       	ldd	r25, Y+7	; 0x07
    2cb4:	00 97       	sbiw	r24, 0x00	; 0
    2cb6:	71 f0       	breq	.+28     	; 0x2cd4 <PORT_enumSET_PINMODE+0x6e>
    2cb8:	ed c0       	rjmp	.+474    	; 0x2e94 <PORT_enumSET_PINMODE+0x22e>
    2cba:	2e 81       	ldd	r18, Y+6	; 0x06
    2cbc:	3f 81       	ldd	r19, Y+7	; 0x07
    2cbe:	22 30       	cpi	r18, 0x02	; 2
    2cc0:	31 05       	cpc	r19, r1
    2cc2:	09 f4       	brne	.+2      	; 0x2cc6 <PORT_enumSET_PINMODE+0x60>
    2cc4:	77 c0       	rjmp	.+238    	; 0x2db4 <PORT_enumSET_PINMODE+0x14e>
    2cc6:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc8:	9f 81       	ldd	r25, Y+7	; 0x07
    2cca:	83 30       	cpi	r24, 0x03	; 3
    2ccc:	91 05       	cpc	r25, r1
    2cce:	09 f4       	brne	.+2      	; 0x2cd2 <PORT_enumSET_PINMODE+0x6c>
    2cd0:	a9 c0       	rjmp	.+338    	; 0x2e24 <PORT_enumSET_PINMODE+0x1be>
    2cd2:	e0 c0       	rjmp	.+448    	; 0x2e94 <PORT_enumSET_PINMODE+0x22e>
	{
		case PORT_u8PORTA:
			if(Copy_u8PINMODE == PORT_u8PINMODE_INPUUT_PULLUP  || Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_HIGH)
    2cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd6:	83 30       	cpi	r24, 0x03	; 3
    2cd8:	19 f0       	breq	.+6      	; 0x2ce0 <PORT_enumSET_PINMODE+0x7a>
    2cda:	8d 81       	ldd	r24, Y+5	; 0x05
    2cdc:	81 30       	cpi	r24, 0x01	; 1
    2cde:	a1 f4       	brne	.+40     	; 0x2d08 <PORT_enumSET_PINMODE+0xa2>
			{
				SET_BIT(PORTA,Local_u8PINID);
    2ce0:	ab e3       	ldi	r26, 0x3B	; 59
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	eb e3       	ldi	r30, 0x3B	; 59
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	80 81       	ld	r24, Z
    2cea:	48 2f       	mov	r20, r24
    2cec:	8b 81       	ldd	r24, Y+3	; 0x03
    2cee:	28 2f       	mov	r18, r24
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	02 2e       	mov	r0, r18
    2cf8:	02 c0       	rjmp	.+4      	; 0x2cfe <PORT_enumSET_PINMODE+0x98>
    2cfa:	88 0f       	add	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	0a 94       	dec	r0
    2d00:	e2 f7       	brpl	.-8      	; 0x2cfa <PORT_enumSET_PINMODE+0x94>
    2d02:	84 2b       	or	r24, r20
    2d04:	8c 93       	st	X, r24
    2d06:	c8 c0       	rjmp	.+400    	; 0x2e98 <PORT_enumSET_PINMODE+0x232>
			}
			else if(Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_LOW  || Copy_u8PINMODE == PORT_u8PINMODE_INPUT_FLOATING)
    2d08:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0a:	88 23       	and	r24, r24
    2d0c:	19 f0       	breq	.+6      	; 0x2d14 <PORT_enumSET_PINMODE+0xae>
    2d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d10:	82 30       	cpi	r24, 0x02	; 2
    2d12:	a9 f4       	brne	.+42     	; 0x2d3e <PORT_enumSET_PINMODE+0xd8>
			{
				CLR_BIT(PORTA,Local_u8PINID);
    2d14:	ab e3       	ldi	r26, 0x3B	; 59
    2d16:	b0 e0       	ldi	r27, 0x00	; 0
    2d18:	eb e3       	ldi	r30, 0x3B	; 59
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	80 81       	ld	r24, Z
    2d1e:	48 2f       	mov	r20, r24
    2d20:	8b 81       	ldd	r24, Y+3	; 0x03
    2d22:	28 2f       	mov	r18, r24
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	02 2e       	mov	r0, r18
    2d2c:	02 c0       	rjmp	.+4      	; 0x2d32 <PORT_enumSET_PINMODE+0xcc>
    2d2e:	88 0f       	add	r24, r24
    2d30:	99 1f       	adc	r25, r25
    2d32:	0a 94       	dec	r0
    2d34:	e2 f7       	brpl	.-8      	; 0x2d2e <PORT_enumSET_PINMODE+0xc8>
    2d36:	80 95       	com	r24
    2d38:	84 23       	and	r24, r20
    2d3a:	8c 93       	st	X, r24
    2d3c:	ad c0       	rjmp	.+346    	; 0x2e98 <PORT_enumSET_PINMODE+0x232>
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
    2d3e:	82 e0       	ldi	r24, 0x02	; 2
    2d40:	89 83       	std	Y+1, r24	; 0x01
    2d42:	aa c0       	rjmp	.+340    	; 0x2e98 <PORT_enumSET_PINMODE+0x232>
			}
			break;
		case PORT_u8PORTB:
			if(Copy_u8PINMODE == PORT_u8PINMODE_INPUUT_PULLUP  || Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_HIGH)
    2d44:	8d 81       	ldd	r24, Y+5	; 0x05
    2d46:	83 30       	cpi	r24, 0x03	; 3
    2d48:	19 f0       	breq	.+6      	; 0x2d50 <PORT_enumSET_PINMODE+0xea>
    2d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4c:	81 30       	cpi	r24, 0x01	; 1
    2d4e:	a1 f4       	brne	.+40     	; 0x2d78 <PORT_enumSET_PINMODE+0x112>
			{
				SET_BIT(PORTB,Local_u8PINID);
    2d50:	a8 e3       	ldi	r26, 0x38	; 56
    2d52:	b0 e0       	ldi	r27, 0x00	; 0
    2d54:	e8 e3       	ldi	r30, 0x38	; 56
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	80 81       	ld	r24, Z
    2d5a:	48 2f       	mov	r20, r24
    2d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5e:	28 2f       	mov	r18, r24
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	02 2e       	mov	r0, r18
    2d68:	02 c0       	rjmp	.+4      	; 0x2d6e <PORT_enumSET_PINMODE+0x108>
    2d6a:	88 0f       	add	r24, r24
    2d6c:	99 1f       	adc	r25, r25
    2d6e:	0a 94       	dec	r0
    2d70:	e2 f7       	brpl	.-8      	; 0x2d6a <PORT_enumSET_PINMODE+0x104>
    2d72:	84 2b       	or	r24, r20
    2d74:	8c 93       	st	X, r24
    2d76:	90 c0       	rjmp	.+288    	; 0x2e98 <PORT_enumSET_PINMODE+0x232>
			}
			else if(Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_LOW  || Copy_u8PINMODE == PORT_u8PINMODE_INPUT_FLOATING)
    2d78:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7a:	88 23       	and	r24, r24
    2d7c:	19 f0       	breq	.+6      	; 0x2d84 <PORT_enumSET_PINMODE+0x11e>
    2d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d80:	82 30       	cpi	r24, 0x02	; 2
    2d82:	a9 f4       	brne	.+42     	; 0x2dae <PORT_enumSET_PINMODE+0x148>
			{
				CLR_BIT(PORTB,Local_u8PINID);
    2d84:	a8 e3       	ldi	r26, 0x38	; 56
    2d86:	b0 e0       	ldi	r27, 0x00	; 0
    2d88:	e8 e3       	ldi	r30, 0x38	; 56
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
    2d8e:	48 2f       	mov	r20, r24
    2d90:	8b 81       	ldd	r24, Y+3	; 0x03
    2d92:	28 2f       	mov	r18, r24
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	02 2e       	mov	r0, r18
    2d9c:	02 c0       	rjmp	.+4      	; 0x2da2 <PORT_enumSET_PINMODE+0x13c>
    2d9e:	88 0f       	add	r24, r24
    2da0:	99 1f       	adc	r25, r25
    2da2:	0a 94       	dec	r0
    2da4:	e2 f7       	brpl	.-8      	; 0x2d9e <PORT_enumSET_PINMODE+0x138>
    2da6:	80 95       	com	r24
    2da8:	84 23       	and	r24, r20
    2daa:	8c 93       	st	X, r24
    2dac:	75 c0       	rjmp	.+234    	; 0x2e98 <PORT_enumSET_PINMODE+0x232>
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
    2dae:	82 e0       	ldi	r24, 0x02	; 2
    2db0:	89 83       	std	Y+1, r24	; 0x01
    2db2:	72 c0       	rjmp	.+228    	; 0x2e98 <PORT_enumSET_PINMODE+0x232>
			}
			break;
		case PORT_u8PORTC:
			if(Copy_u8PINMODE == PORT_u8PINMODE_INPUUT_PULLUP  || Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_HIGH)
    2db4:	8d 81       	ldd	r24, Y+5	; 0x05
    2db6:	83 30       	cpi	r24, 0x03	; 3
    2db8:	19 f0       	breq	.+6      	; 0x2dc0 <PORT_enumSET_PINMODE+0x15a>
    2dba:	8d 81       	ldd	r24, Y+5	; 0x05
    2dbc:	81 30       	cpi	r24, 0x01	; 1
    2dbe:	a1 f4       	brne	.+40     	; 0x2de8 <PORT_enumSET_PINMODE+0x182>
			{
				SET_BIT(PORTC,Local_u8PINID);
    2dc0:	a5 e3       	ldi	r26, 0x35	; 53
    2dc2:	b0 e0       	ldi	r27, 0x00	; 0
    2dc4:	e5 e3       	ldi	r30, 0x35	; 53
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	80 81       	ld	r24, Z
    2dca:	48 2f       	mov	r20, r24
    2dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dce:	28 2f       	mov	r18, r24
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	02 2e       	mov	r0, r18
    2dd8:	02 c0       	rjmp	.+4      	; 0x2dde <PORT_enumSET_PINMODE+0x178>
    2dda:	88 0f       	add	r24, r24
    2ddc:	99 1f       	adc	r25, r25
    2dde:	0a 94       	dec	r0
    2de0:	e2 f7       	brpl	.-8      	; 0x2dda <PORT_enumSET_PINMODE+0x174>
    2de2:	84 2b       	or	r24, r20
    2de4:	8c 93       	st	X, r24
    2de6:	58 c0       	rjmp	.+176    	; 0x2e98 <PORT_enumSET_PINMODE+0x232>
			}
			else if(Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_LOW  || Copy_u8PINMODE == PORT_u8PINMODE_INPUT_FLOATING)
    2de8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dea:	88 23       	and	r24, r24
    2dec:	19 f0       	breq	.+6      	; 0x2df4 <PORT_enumSET_PINMODE+0x18e>
    2dee:	8d 81       	ldd	r24, Y+5	; 0x05
    2df0:	82 30       	cpi	r24, 0x02	; 2
    2df2:	a9 f4       	brne	.+42     	; 0x2e1e <PORT_enumSET_PINMODE+0x1b8>
			{
				CLR_BIT(PORTC,Local_u8PINID);
    2df4:	a5 e3       	ldi	r26, 0x35	; 53
    2df6:	b0 e0       	ldi	r27, 0x00	; 0
    2df8:	e5 e3       	ldi	r30, 0x35	; 53
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	80 81       	ld	r24, Z
    2dfe:	48 2f       	mov	r20, r24
    2e00:	8b 81       	ldd	r24, Y+3	; 0x03
    2e02:	28 2f       	mov	r18, r24
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	02 2e       	mov	r0, r18
    2e0c:	02 c0       	rjmp	.+4      	; 0x2e12 <PORT_enumSET_PINMODE+0x1ac>
    2e0e:	88 0f       	add	r24, r24
    2e10:	99 1f       	adc	r25, r25
    2e12:	0a 94       	dec	r0
    2e14:	e2 f7       	brpl	.-8      	; 0x2e0e <PORT_enumSET_PINMODE+0x1a8>
    2e16:	80 95       	com	r24
    2e18:	84 23       	and	r24, r20
    2e1a:	8c 93       	st	X, r24
    2e1c:	3d c0       	rjmp	.+122    	; 0x2e98 <PORT_enumSET_PINMODE+0x232>
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
    2e1e:	82 e0       	ldi	r24, 0x02	; 2
    2e20:	89 83       	std	Y+1, r24	; 0x01
    2e22:	3a c0       	rjmp	.+116    	; 0x2e98 <PORT_enumSET_PINMODE+0x232>
			}
			break;
		case PORT_u8PORTD:
			if(Copy_u8PINMODE == PORT_u8PINMODE_INPUUT_PULLUP  || Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_HIGH)
    2e24:	8d 81       	ldd	r24, Y+5	; 0x05
    2e26:	83 30       	cpi	r24, 0x03	; 3
    2e28:	19 f0       	breq	.+6      	; 0x2e30 <PORT_enumSET_PINMODE+0x1ca>
    2e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2c:	81 30       	cpi	r24, 0x01	; 1
    2e2e:	a1 f4       	brne	.+40     	; 0x2e58 <PORT_enumSET_PINMODE+0x1f2>
			{
				SET_BIT(PORTD,Local_u8PINID);
    2e30:	a2 e3       	ldi	r26, 0x32	; 50
    2e32:	b0 e0       	ldi	r27, 0x00	; 0
    2e34:	e2 e3       	ldi	r30, 0x32	; 50
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	80 81       	ld	r24, Z
    2e3a:	48 2f       	mov	r20, r24
    2e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3e:	28 2f       	mov	r18, r24
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	02 2e       	mov	r0, r18
    2e48:	02 c0       	rjmp	.+4      	; 0x2e4e <PORT_enumSET_PINMODE+0x1e8>
    2e4a:	88 0f       	add	r24, r24
    2e4c:	99 1f       	adc	r25, r25
    2e4e:	0a 94       	dec	r0
    2e50:	e2 f7       	brpl	.-8      	; 0x2e4a <PORT_enumSET_PINMODE+0x1e4>
    2e52:	84 2b       	or	r24, r20
    2e54:	8c 93       	st	X, r24
    2e56:	20 c0       	rjmp	.+64     	; 0x2e98 <PORT_enumSET_PINMODE+0x232>
			}
			else if(Copy_u8PINMODE == PORT_u8PINMODE_OUTPUT_LOW  || Copy_u8PINMODE == PORT_u8PINMODE_INPUT_FLOATING)
    2e58:	8d 81       	ldd	r24, Y+5	; 0x05
    2e5a:	88 23       	and	r24, r24
    2e5c:	19 f0       	breq	.+6      	; 0x2e64 <PORT_enumSET_PINMODE+0x1fe>
    2e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e60:	82 30       	cpi	r24, 0x02	; 2
    2e62:	a9 f4       	brne	.+42     	; 0x2e8e <PORT_enumSET_PINMODE+0x228>
			{
				CLR_BIT(PORTD,Local_u8PINID);
    2e64:	a2 e3       	ldi	r26, 0x32	; 50
    2e66:	b0 e0       	ldi	r27, 0x00	; 0
    2e68:	e2 e3       	ldi	r30, 0x32	; 50
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	80 81       	ld	r24, Z
    2e6e:	48 2f       	mov	r20, r24
    2e70:	8b 81       	ldd	r24, Y+3	; 0x03
    2e72:	28 2f       	mov	r18, r24
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	02 2e       	mov	r0, r18
    2e7c:	02 c0       	rjmp	.+4      	; 0x2e82 <PORT_enumSET_PINMODE+0x21c>
    2e7e:	88 0f       	add	r24, r24
    2e80:	99 1f       	adc	r25, r25
    2e82:	0a 94       	dec	r0
    2e84:	e2 f7       	brpl	.-8      	; 0x2e7e <PORT_enumSET_PINMODE+0x218>
    2e86:	80 95       	com	r24
    2e88:	84 23       	and	r24, r20
    2e8a:	8c 93       	st	X, r24
    2e8c:	05 c0       	rjmp	.+10     	; 0x2e98 <PORT_enumSET_PINMODE+0x232>
			}
			else
			{
				Local_enumErrStatus = PORT_enumDIRerr;
    2e8e:	82 e0       	ldi	r24, 0x02	; 2
    2e90:	89 83       	std	Y+1, r24	; 0x01
    2e92:	02 c0       	rjmp	.+4      	; 0x2e98 <PORT_enumSET_PINMODE+0x232>
			}
			break;
		default :
			Local_enumErrStatus = PORT_enumPINerr;
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return Local_enumErrStatus;
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e9a:	27 96       	adiw	r28, 0x07	; 7
    2e9c:	0f b6       	in	r0, 0x3f	; 63
    2e9e:	f8 94       	cli
    2ea0:	de bf       	out	0x3e, r29	; 62
    2ea2:	0f be       	out	0x3f, r0	; 63
    2ea4:	cd bf       	out	0x3d, r28	; 61
    2ea6:	cf 91       	pop	r28
    2ea8:	df 91       	pop	r29
    2eaa:	08 95       	ret

00002eac <SW_ICU_voidGetGlobalVals>:
#include "../inc/SERVICE/SW_ICU/SW_ICU.h"

u8 Global_u8TON=0;
u8 Global_u8TOFF=0;
void SW_ICU_voidGetGlobalVals(void)
{
    2eac:	df 93       	push	r29
    2eae:	cf 93       	push	r28
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Flag = 0;
	if(Local_u8Flag == 0)
    2eb4:	80 91 84 01 	lds	r24, 0x0184
    2eb8:	88 23       	and	r24, r24
    2eba:	59 f4       	brne	.+22     	; 0x2ed2 <SW_ICU_voidGetGlobalVals+0x26>
	{
		EXTI_voidSetSignal(EXTI0,FALLING_EDGE);
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	62 e0       	ldi	r22, 0x02	; 2
    2ec0:	0e 94 23 0b 	call	0x1646	; 0x1646 <EXTI_voidSetSignal>
		TIMER0_voidSetTimerTicks(0);
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	0e 94 71 19 	call	0x32e2	; 0x32e2 <TIMER0_voidSetTimerTicks>
		Local_u8Flag = 1;
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	80 93 84 01 	sts	0x0184, r24
    2ed0:	20 c0       	rjmp	.+64     	; 0x2f12 <SW_ICU_voidGetGlobalVals+0x66>

	}
	else if(Local_u8Flag == 1)
    2ed2:	80 91 84 01 	lds	r24, 0x0184
    2ed6:	81 30       	cpi	r24, 0x01	; 1
    2ed8:	79 f4       	brne	.+30     	; 0x2ef8 <SW_ICU_voidGetGlobalVals+0x4c>
	{
		EXTI_voidSetSignal(EXTI0,RISING_EDGE);
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	63 e0       	ldi	r22, 0x03	; 3
    2ede:	0e 94 23 0b 	call	0x1646	; 0x1646 <EXTI_voidSetSignal>
		Global_u8TON = TIMER0_voidGetTimerTicks();
    2ee2:	0e 94 7f 19 	call	0x32fe	; 0x32fe <TIMER0_voidGetTimerTicks>
    2ee6:	80 93 82 01 	sts	0x0182, r24
		TIMER0_voidSetTimerTicks(0);
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	0e 94 71 19 	call	0x32e2	; 0x32e2 <TIMER0_voidSetTimerTicks>
		Local_u8Flag = 2;
    2ef0:	82 e0       	ldi	r24, 0x02	; 2
    2ef2:	80 93 84 01 	sts	0x0184, r24
    2ef6:	0d c0       	rjmp	.+26     	; 0x2f12 <SW_ICU_voidGetGlobalVals+0x66>
	}
	else if(Local_u8Flag == 2)
    2ef8:	80 91 84 01 	lds	r24, 0x0184
    2efc:	82 30       	cpi	r24, 0x02	; 2
    2efe:	49 f4       	brne	.+18     	; 0x2f12 <SW_ICU_voidGetGlobalVals+0x66>
	{
		Global_u8TOFF = TIMER0_voidGetTimerTicks();
    2f00:	0e 94 7f 19 	call	0x32fe	; 0x32fe <TIMER0_voidGetTimerTicks>
    2f04:	80 93 83 01 	sts	0x0183, r24
		TIMER0_voidSetTimerTicks(0);
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	0e 94 71 19 	call	0x32e2	; 0x32e2 <TIMER0_voidSetTimerTicks>
		Local_u8Flag = 0;
    2f0e:	10 92 84 01 	sts	0x0184, r1
	}
}
    2f12:	cf 91       	pop	r28
    2f14:	df 91       	pop	r29
    2f16:	08 95       	ret

00002f18 <SW_ICU_voidInit>:
void SW_ICU_voidInit(void)
{
    2f18:	df 93       	push	r29
    2f1a:	cf 93       	push	r28
    2f1c:	cd b7       	in	r28, 0x3d	; 61
    2f1e:	de b7       	in	r29, 0x3e	; 62
	PORT_enumSET_PINDirection(PORT_u8PORTDPIN2, PORT_u8PINDIR_INPUT);
    2f20:	8a e1       	ldi	r24, 0x1A	; 26
    2f22:	60 e0       	ldi	r22, 0x00	; 0
    2f24:	0e 94 28 15 	call	0x2a50	; 0x2a50 <PORT_enumSET_PINDirection>
	PORT_enumSET_PINMODE(PORT_u8PORTDPIN2, PORT_u8PINMODE_INPUT_FLOATING);
    2f28:	8a e1       	ldi	r24, 0x1A	; 26
    2f2a:	62 e0       	ldi	r22, 0x02	; 2
    2f2c:	0e 94 33 16 	call	0x2c66	; 0x2c66 <PORT_enumSET_PINMODE>
	EXTI_voidSetCallBack(EXTI0, SW_ICU_voidGetGlobalVals);
    2f30:	26 e5       	ldi	r18, 0x56	; 86
    2f32:	37 e1       	ldi	r19, 0x17	; 23
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	b9 01       	movw	r22, r18
    2f38:	0e 94 76 0b 	call	0x16ec	; 0x16ec <EXTI_voidSetCallBack>
	EXTI_voidInit();
    2f3c:	0e 94 a7 0a 	call	0x154e	; 0x154e <EXTI_voidInit>
	TIMER0_voidInit();
    2f40:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <TIMER0_voidInit>
	
}
    2f44:	cf 91       	pop	r28
    2f46:	df 91       	pop	r29
    2f48:	08 95       	ret

00002f4a <SW_ICU_voidGetTON_TOFFVals>:
void SW_ICU_voidGetTON_TOFFVals(u8 *Ptr_u8TON, u8 *Ptr_u8TOFF)
{
    2f4a:	df 93       	push	r29
    2f4c:	cf 93       	push	r28
    2f4e:	00 d0       	rcall	.+0      	; 0x2f50 <SW_ICU_voidGetTON_TOFFVals+0x6>
    2f50:	00 d0       	rcall	.+0      	; 0x2f52 <SW_ICU_voidGetTON_TOFFVals+0x8>
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
    2f56:	9a 83       	std	Y+2, r25	; 0x02
    2f58:	89 83       	std	Y+1, r24	; 0x01
    2f5a:	7c 83       	std	Y+4, r23	; 0x04
    2f5c:	6b 83       	std	Y+3, r22	; 0x03
	*Ptr_u8TON = Global_u8TON;
    2f5e:	80 91 82 01 	lds	r24, 0x0182
    2f62:	e9 81       	ldd	r30, Y+1	; 0x01
    2f64:	fa 81       	ldd	r31, Y+2	; 0x02
    2f66:	80 83       	st	Z, r24
	*Ptr_u8TOFF = Global_u8TOFF;
    2f68:	80 91 83 01 	lds	r24, 0x0183
    2f6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f70:	80 83       	st	Z, r24
}
    2f72:	0f 90       	pop	r0
    2f74:	0f 90       	pop	r0
    2f76:	0f 90       	pop	r0
    2f78:	0f 90       	pop	r0
    2f7a:	cf 91       	pop	r28
    2f7c:	df 91       	pop	r29
    2f7e:	08 95       	ret

00002f80 <TIMER0_voidInit>:
volatile u32 Global_u32NumOfTicKs = 0; 
volatile u32 Global_u32NumOfOVs   = 0;
volatile u32 Global_u32TempOfOVs  = 0;
void (*Global_voidPtrToFunc)(void)=NULL;
void TIMER0_voidInit(void)
{
    2f80:	df 93       	push	r29
    2f82:	cf 93       	push	r28
    2f84:	cd b7       	in	r28, 0x3d	; 61
    2f86:	de b7       	in	r29, 0x3e	; 62
	#if   TIMER0_MODE == Normal_MODE
	CLR_BIT(TCCR0,WGM00);
    2f88:	a3 e5       	ldi	r26, 0x53	; 83
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
    2f8c:	e3 e5       	ldi	r30, 0x53	; 83
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	80 81       	ld	r24, Z
    2f92:	8f 7b       	andi	r24, 0xBF	; 191
    2f94:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,WGM01);
    2f96:	a3 e5       	ldi	r26, 0x53	; 83
    2f98:	b0 e0       	ldi	r27, 0x00	; 0
    2f9a:	e3 e5       	ldi	r30, 0x53	; 83
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	80 81       	ld	r24, Z
    2fa0:	87 7f       	andi	r24, 0xF7	; 247
    2fa2:	8c 93       	st	X, r24
	#elif TIMER0_MODE == FastPWM_MODE
	SET_BIT(TCCR0,WGM00);
	SET_BIT(TCCR0,WGM01);
	#endif
	
	TCCR0 = (TCCR0&0b11001111)|CTC_PWMOUTMODE;
    2fa4:	a3 e5       	ldi	r26, 0x53	; 83
    2fa6:	b0 e0       	ldi	r27, 0x00	; 0
    2fa8:	e3 e5       	ldi	r30, 0x53	; 83
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	80 81       	ld	r24, Z
    2fae:	8f 7c       	andi	r24, 0xCF	; 207
    2fb0:	8c 93       	st	X, r24
	TCCR0 = (TCCR0&0b11111000)|Clock_PRESCALLER;
    2fb2:	a3 e5       	ldi	r26, 0x53	; 83
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	e3 e5       	ldi	r30, 0x53	; 83
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	88 7f       	andi	r24, 0xF8	; 248
    2fbe:	82 60       	ori	r24, 0x02	; 2
    2fc0:	8c 93       	st	X, r24
	
}
    2fc2:	cf 91       	pop	r28
    2fc4:	df 91       	pop	r29
    2fc6:	08 95       	ret

00002fc8 <TIMER0_voidSetCallBack>:
void TIMER0_voidSetCallBack(void(*Ptr_voidCallBackFunc)(void))
{
    2fc8:	df 93       	push	r29
    2fca:	cf 93       	push	r28
    2fcc:	00 d0       	rcall	.+0      	; 0x2fce <TIMER0_voidSetCallBack+0x6>
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
    2fd2:	9a 83       	std	Y+2, r25	; 0x02
    2fd4:	89 83       	std	Y+1, r24	; 0x01
	Global_voidPtrToFunc = Ptr_voidCallBackFunc;
    2fd6:	89 81       	ldd	r24, Y+1	; 0x01
    2fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fda:	90 93 92 01 	sts	0x0192, r25
    2fde:	80 93 91 01 	sts	0x0191, r24
}
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	08 95       	ret

00002fec <TIMER0_voidInterruptEnable>:
void TIMER0_voidInterruptEnable(u8 Copy_u8InterruptType)
{
    2fec:	df 93       	push	r29
    2fee:	cf 93       	push	r28
    2ff0:	0f 92       	push	r0
    2ff2:	cd b7       	in	r28, 0x3d	; 61
    2ff4:	de b7       	in	r29, 0x3e	; 62
    2ff6:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = (TIMSK&0b11111100)|Copy_u8InterruptType;
    2ff8:	a9 e5       	ldi	r26, 0x59	; 89
    2ffa:	b0 e0       	ldi	r27, 0x00	; 0
    2ffc:	e9 e5       	ldi	r30, 0x59	; 89
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	80 81       	ld	r24, Z
    3002:	98 2f       	mov	r25, r24
    3004:	9c 7f       	andi	r25, 0xFC	; 252
    3006:	89 81       	ldd	r24, Y+1	; 0x01
    3008:	89 2b       	or	r24, r25
    300a:	8c 93       	st	X, r24
}
    300c:	0f 90       	pop	r0
    300e:	cf 91       	pop	r28
    3010:	df 91       	pop	r29
    3012:	08 95       	ret

00003014 <TIMER0_voidSetTimeOnNormalMode>:
void TIMER0_voidSetTimeOnNormalMode(u32 Copy_u32MicroS,u32 prescaller)
{
    3014:	df 93       	push	r29
    3016:	cf 93       	push	r28
    3018:	cd b7       	in	r28, 0x3d	; 61
    301a:	de b7       	in	r29, 0x3e	; 62
    301c:	60 97       	sbiw	r28, 0x10	; 16
    301e:	0f b6       	in	r0, 0x3f	; 63
    3020:	f8 94       	cli
    3022:	de bf       	out	0x3e, r29	; 62
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	cd bf       	out	0x3d, r28	; 61
    3028:	69 87       	std	Y+9, r22	; 0x09
    302a:	7a 87       	std	Y+10, r23	; 0x0a
    302c:	8b 87       	std	Y+11, r24	; 0x0b
    302e:	9c 87       	std	Y+12, r25	; 0x0c
    3030:	2d 87       	std	Y+13, r18	; 0x0d
    3032:	3e 87       	std	Y+14, r19	; 0x0e
    3034:	4f 87       	std	Y+15, r20	; 0x0f
    3036:	58 8b       	std	Y+16, r21	; 0x10
	f32 Local_f32TimFreq   = (f32)AVR_CLOCK/ prescaller;
    3038:	6d 85       	ldd	r22, Y+13	; 0x0d
    303a:	7e 85       	ldd	r23, Y+14	; 0x0e
    303c:	8f 85       	ldd	r24, Y+15	; 0x0f
    303e:	98 89       	ldd	r25, Y+16	; 0x10
    3040:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3044:	9b 01       	movw	r18, r22
    3046:	ac 01       	movw	r20, r24
    3048:	60 e0       	ldi	r22, 0x00	; 0
    304a:	70 e0       	ldi	r23, 0x00	; 0
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	91 e4       	ldi	r25, 0x41	; 65
    3050:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3054:	dc 01       	movw	r26, r24
    3056:	cb 01       	movw	r24, r22
    3058:	8d 83       	std	Y+5, r24	; 0x05
    305a:	9e 83       	std	Y+6, r25	; 0x06
    305c:	af 83       	std	Y+7, r26	; 0x07
    305e:	b8 87       	std	Y+8, r27	; 0x08
	u32 Local_u32TimTicks  = (u32)(Copy_u32MicroS * Local_f32TimFreq);
    3060:	69 85       	ldd	r22, Y+9	; 0x09
    3062:	7a 85       	ldd	r23, Y+10	; 0x0a
    3064:	8b 85       	ldd	r24, Y+11	; 0x0b
    3066:	9c 85       	ldd	r25, Y+12	; 0x0c
    3068:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	bc 01       	movw	r22, r24
    3072:	cd 01       	movw	r24, r26
    3074:	2d 81       	ldd	r18, Y+5	; 0x05
    3076:	3e 81       	ldd	r19, Y+6	; 0x06
    3078:	4f 81       	ldd	r20, Y+7	; 0x07
    307a:	58 85       	ldd	r21, Y+8	; 0x08
    307c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	bc 01       	movw	r22, r24
    3086:	cd 01       	movw	r24, r26
    3088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	89 83       	std	Y+1, r24	; 0x01
    3092:	9a 83       	std	Y+2, r25	; 0x02
    3094:	ab 83       	std	Y+3, r26	; 0x03
    3096:	bc 83       	std	Y+4, r27	; 0x04
	Global_u32NumOfTicKs   = Local_u32TimTicks % 256;
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	9a 81       	ldd	r25, Y+2	; 0x02
    309c:	ab 81       	ldd	r26, Y+3	; 0x03
    309e:	bc 81       	ldd	r27, Y+4	; 0x04
    30a0:	90 70       	andi	r25, 0x00	; 0
    30a2:	a0 70       	andi	r26, 0x00	; 0
    30a4:	b0 70       	andi	r27, 0x00	; 0
    30a6:	80 93 85 01 	sts	0x0185, r24
    30aa:	90 93 86 01 	sts	0x0186, r25
    30ae:	a0 93 87 01 	sts	0x0187, r26
    30b2:	b0 93 88 01 	sts	0x0188, r27
	Global_u32NumOfOVs     = Local_u32TimTicks / 256;
    30b6:	89 81       	ldd	r24, Y+1	; 0x01
    30b8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ba:	ab 81       	ldd	r26, Y+3	; 0x03
    30bc:	bc 81       	ldd	r27, Y+4	; 0x04
    30be:	89 2f       	mov	r24, r25
    30c0:	9a 2f       	mov	r25, r26
    30c2:	ab 2f       	mov	r26, r27
    30c4:	bb 27       	eor	r27, r27
    30c6:	80 93 89 01 	sts	0x0189, r24
    30ca:	90 93 8a 01 	sts	0x018A, r25
    30ce:	a0 93 8b 01 	sts	0x018B, r26
    30d2:	b0 93 8c 01 	sts	0x018C, r27
	Global_u32TempOfOVs    = Global_u32NumOfOVs;
    30d6:	80 91 89 01 	lds	r24, 0x0189
    30da:	90 91 8a 01 	lds	r25, 0x018A
    30de:	a0 91 8b 01 	lds	r26, 0x018B
    30e2:	b0 91 8c 01 	lds	r27, 0x018C
    30e6:	80 93 8d 01 	sts	0x018D, r24
    30ea:	90 93 8e 01 	sts	0x018E, r25
    30ee:	a0 93 8f 01 	sts	0x018F, r26
    30f2:	b0 93 90 01 	sts	0x0190, r27
	if (Global_u32NumOfOVs == 0)
    30f6:	80 91 89 01 	lds	r24, 0x0189
    30fa:	90 91 8a 01 	lds	r25, 0x018A
    30fe:	a0 91 8b 01 	lds	r26, 0x018B
    3102:	b0 91 8c 01 	lds	r27, 0x018C
    3106:	00 97       	sbiw	r24, 0x00	; 0
    3108:	a1 05       	cpc	r26, r1
    310a:	b1 05       	cpc	r27, r1
    310c:	69 f4       	brne	.+26     	; 0x3128 <TIMER0_voidSetTimeOnNormalMode+0x114>
	{
		TCNT0 = 256 - Global_u32NumOfTicKs;
    310e:	e2 e5       	ldi	r30, 0x52	; 82
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	80 91 85 01 	lds	r24, 0x0185
    3116:	90 91 86 01 	lds	r25, 0x0186
    311a:	a0 91 87 01 	lds	r26, 0x0187
    311e:	b0 91 88 01 	lds	r27, 0x0188
    3122:	81 95       	neg	r24
    3124:	80 83       	st	Z, r24
    3126:	0f c0       	rjmp	.+30     	; 0x3146 <TIMER0_voidSetTimeOnNormalMode+0x132>
	}
	else if(Global_u32NumOfOVs > 0)
    3128:	80 91 89 01 	lds	r24, 0x0189
    312c:	90 91 8a 01 	lds	r25, 0x018A
    3130:	a0 91 8b 01 	lds	r26, 0x018B
    3134:	b0 91 8c 01 	lds	r27, 0x018C
    3138:	00 97       	sbiw	r24, 0x00	; 0
    313a:	a1 05       	cpc	r26, r1
    313c:	b1 05       	cpc	r27, r1
    313e:	19 f0       	breq	.+6      	; 0x3146 <TIMER0_voidSetTimeOnNormalMode+0x132>
	{
		TCNT0 = 0;
    3140:	e2 e5       	ldi	r30, 0x52	; 82
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	10 82       	st	Z, r1
	}

}
    3146:	60 96       	adiw	r28, 0x10	; 16
    3148:	0f b6       	in	r0, 0x3f	; 63
    314a:	f8 94       	cli
    314c:	de bf       	out	0x3e, r29	; 62
    314e:	0f be       	out	0x3f, r0	; 63
    3150:	cd bf       	out	0x3d, r28	; 61
    3152:	cf 91       	pop	r28
    3154:	df 91       	pop	r29
    3156:	08 95       	ret

00003158 <TIMER0_voidSetTimeOnCTCMode>:
void TIMER0_voidSetTimeOnCTCMode(u32 Copy_u32MicroS,u32 prescaller)
{
    3158:	df 93       	push	r29
    315a:	cf 93       	push	r28
    315c:	cd b7       	in	r28, 0x3d	; 61
    315e:	de b7       	in	r29, 0x3e	; 62
    3160:	60 97       	sbiw	r28, 0x10	; 16
    3162:	0f b6       	in	r0, 0x3f	; 63
    3164:	f8 94       	cli
    3166:	de bf       	out	0x3e, r29	; 62
    3168:	0f be       	out	0x3f, r0	; 63
    316a:	cd bf       	out	0x3d, r28	; 61
    316c:	69 87       	std	Y+9, r22	; 0x09
    316e:	7a 87       	std	Y+10, r23	; 0x0a
    3170:	8b 87       	std	Y+11, r24	; 0x0b
    3172:	9c 87       	std	Y+12, r25	; 0x0c
    3174:	2d 87       	std	Y+13, r18	; 0x0d
    3176:	3e 87       	std	Y+14, r19	; 0x0e
    3178:	4f 87       	std	Y+15, r20	; 0x0f
    317a:	58 8b       	std	Y+16, r21	; 0x10
	f32 Local_f32TimFreq   = (f32)AVR_CLOCK /prescaller;
    317c:	6d 85       	ldd	r22, Y+13	; 0x0d
    317e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3180:	8f 85       	ldd	r24, Y+15	; 0x0f
    3182:	98 89       	ldd	r25, Y+16	; 0x10
    3184:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3188:	9b 01       	movw	r18, r22
    318a:	ac 01       	movw	r20, r24
    318c:	60 e0       	ldi	r22, 0x00	; 0
    318e:	70 e0       	ldi	r23, 0x00	; 0
    3190:	80 e0       	ldi	r24, 0x00	; 0
    3192:	91 e4       	ldi	r25, 0x41	; 65
    3194:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	8d 83       	std	Y+5, r24	; 0x05
    319e:	9e 83       	std	Y+6, r25	; 0x06
    31a0:	af 83       	std	Y+7, r26	; 0x07
    31a2:	b8 87       	std	Y+8, r27	; 0x08
	u32 Local_u32TimTicks  = (u32)(Copy_u32MicroS * Local_f32TimFreq);
    31a4:	69 85       	ldd	r22, Y+9	; 0x09
    31a6:	7a 85       	ldd	r23, Y+10	; 0x0a
    31a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    31aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    31ac:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	bc 01       	movw	r22, r24
    31b6:	cd 01       	movw	r24, r26
    31b8:	2d 81       	ldd	r18, Y+5	; 0x05
    31ba:	3e 81       	ldd	r19, Y+6	; 0x06
    31bc:	4f 81       	ldd	r20, Y+7	; 0x07
    31be:	58 85       	ldd	r21, Y+8	; 0x08
    31c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	bc 01       	movw	r22, r24
    31ca:	cd 01       	movw	r24, r26
    31cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	89 83       	std	Y+1, r24	; 0x01
    31d6:	9a 83       	std	Y+2, r25	; 0x02
    31d8:	ab 83       	std	Y+3, r26	; 0x03
    31da:	bc 83       	std	Y+4, r27	; 0x04
	Global_u32NumOfTicKs   = Local_u32TimTicks % 256;
    31dc:	89 81       	ldd	r24, Y+1	; 0x01
    31de:	9a 81       	ldd	r25, Y+2	; 0x02
    31e0:	ab 81       	ldd	r26, Y+3	; 0x03
    31e2:	bc 81       	ldd	r27, Y+4	; 0x04
    31e4:	90 70       	andi	r25, 0x00	; 0
    31e6:	a0 70       	andi	r26, 0x00	; 0
    31e8:	b0 70       	andi	r27, 0x00	; 0
    31ea:	80 93 85 01 	sts	0x0185, r24
    31ee:	90 93 86 01 	sts	0x0186, r25
    31f2:	a0 93 87 01 	sts	0x0187, r26
    31f6:	b0 93 88 01 	sts	0x0188, r27
	Global_u32NumOfTicKs   = Local_u32TimTicks % 256;
    31fa:	89 81       	ldd	r24, Y+1	; 0x01
    31fc:	9a 81       	ldd	r25, Y+2	; 0x02
    31fe:	ab 81       	ldd	r26, Y+3	; 0x03
    3200:	bc 81       	ldd	r27, Y+4	; 0x04
    3202:	90 70       	andi	r25, 0x00	; 0
    3204:	a0 70       	andi	r26, 0x00	; 0
    3206:	b0 70       	andi	r27, 0x00	; 0
    3208:	80 93 85 01 	sts	0x0185, r24
    320c:	90 93 86 01 	sts	0x0186, r25
    3210:	a0 93 87 01 	sts	0x0187, r26
    3214:	b0 93 88 01 	sts	0x0188, r27
	Global_u32NumOfOVs     = Local_u32TimTicks / 256;
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	9a 81       	ldd	r25, Y+2	; 0x02
    321c:	ab 81       	ldd	r26, Y+3	; 0x03
    321e:	bc 81       	ldd	r27, Y+4	; 0x04
    3220:	89 2f       	mov	r24, r25
    3222:	9a 2f       	mov	r25, r26
    3224:	ab 2f       	mov	r26, r27
    3226:	bb 27       	eor	r27, r27
    3228:	80 93 89 01 	sts	0x0189, r24
    322c:	90 93 8a 01 	sts	0x018A, r25
    3230:	a0 93 8b 01 	sts	0x018B, r26
    3234:	b0 93 8c 01 	sts	0x018C, r27
	Global_u32TempOfOVs    = Global_u32NumOfOVs;
    3238:	80 91 89 01 	lds	r24, 0x0189
    323c:	90 91 8a 01 	lds	r25, 0x018A
    3240:	a0 91 8b 01 	lds	r26, 0x018B
    3244:	b0 91 8c 01 	lds	r27, 0x018C
    3248:	80 93 8d 01 	sts	0x018D, r24
    324c:	90 93 8e 01 	sts	0x018E, r25
    3250:	a0 93 8f 01 	sts	0x018F, r26
    3254:	b0 93 90 01 	sts	0x0190, r27
	if (Global_u32NumOfOVs == 0)
    3258:	80 91 89 01 	lds	r24, 0x0189
    325c:	90 91 8a 01 	lds	r25, 0x018A
    3260:	a0 91 8b 01 	lds	r26, 0x018B
    3264:	b0 91 8c 01 	lds	r27, 0x018C
    3268:	00 97       	sbiw	r24, 0x00	; 0
    326a:	a1 05       	cpc	r26, r1
    326c:	b1 05       	cpc	r27, r1
    326e:	79 f4       	brne	.+30     	; 0x328e <TIMER0_voidSetTimeOnCTCMode+0x136>
	{
		TCNT0 = 0;
    3270:	e2 e5       	ldi	r30, 0x52	; 82
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	10 82       	st	Z, r1
		OCR0  =  Global_u32NumOfTicKs;
    3276:	ec e5       	ldi	r30, 0x5C	; 92
    3278:	f0 e0       	ldi	r31, 0x00	; 0
    327a:	80 91 85 01 	lds	r24, 0x0185
    327e:	90 91 86 01 	lds	r25, 0x0186
    3282:	a0 91 87 01 	lds	r26, 0x0187
    3286:	b0 91 88 01 	lds	r27, 0x0188
    328a:	80 83       	st	Z, r24
    328c:	13 c0       	rjmp	.+38     	; 0x32b4 <TIMER0_voidSetTimeOnCTCMode+0x15c>
	}
	else if(Global_u32NumOfOVs > 0)
    328e:	80 91 89 01 	lds	r24, 0x0189
    3292:	90 91 8a 01 	lds	r25, 0x018A
    3296:	a0 91 8b 01 	lds	r26, 0x018B
    329a:	b0 91 8c 01 	lds	r27, 0x018C
    329e:	00 97       	sbiw	r24, 0x00	; 0
    32a0:	a1 05       	cpc	r26, r1
    32a2:	b1 05       	cpc	r27, r1
    32a4:	39 f0       	breq	.+14     	; 0x32b4 <TIMER0_voidSetTimeOnCTCMode+0x15c>
	{
		TCNT0 = 0;
    32a6:	e2 e5       	ldi	r30, 0x52	; 82
    32a8:	f0 e0       	ldi	r31, 0x00	; 0
    32aa:	10 82       	st	Z, r1
		OCR0  = 255;
    32ac:	ec e5       	ldi	r30, 0x5C	; 92
    32ae:	f0 e0       	ldi	r31, 0x00	; 0
    32b0:	8f ef       	ldi	r24, 0xFF	; 255
    32b2:	80 83       	st	Z, r24
	}	
}
    32b4:	60 96       	adiw	r28, 0x10	; 16
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	cd bf       	out	0x3d, r28	; 61
    32c0:	cf 91       	pop	r28
    32c2:	df 91       	pop	r29
    32c4:	08 95       	ret

000032c6 <TIMER0_voidSetPWM>:
void TIMER0_voidSetPWM(u8 Copy_u8PWMDutyperiod)
{
    32c6:	df 93       	push	r29
    32c8:	cf 93       	push	r28
    32ca:	0f 92       	push	r0
    32cc:	cd b7       	in	r28, 0x3d	; 61
    32ce:	de b7       	in	r29, 0x3e	; 62
    32d0:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8PWMDutyperiod;
    32d2:	ec e5       	ldi	r30, 0x5C	; 92
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	89 81       	ldd	r24, Y+1	; 0x01
    32d8:	80 83       	st	Z, r24
}
    32da:	0f 90       	pop	r0
    32dc:	cf 91       	pop	r28
    32de:	df 91       	pop	r29
    32e0:	08 95       	ret

000032e2 <TIMER0_voidSetTimerTicks>:
void TIMER0_voidSetTimerTicks(u8 Copy_u8TimerTicks)
{
    32e2:	df 93       	push	r29
    32e4:	cf 93       	push	r28
    32e6:	0f 92       	push	r0
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8TimerTicks;
    32ee:	e2 e5       	ldi	r30, 0x52	; 82
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	89 81       	ldd	r24, Y+1	; 0x01
    32f4:	80 83       	st	Z, r24
}
    32f6:	0f 90       	pop	r0
    32f8:	cf 91       	pop	r28
    32fa:	df 91       	pop	r29
    32fc:	08 95       	ret

000032fe <TIMER0_voidGetTimerTicks>:
u8 TIMER0_voidGetTimerTicks(void)
{
    32fe:	df 93       	push	r29
    3300:	cf 93       	push	r28
    3302:	cd b7       	in	r28, 0x3d	; 61
    3304:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    3306:	e2 e5       	ldi	r30, 0x52	; 82
    3308:	f0 e0       	ldi	r31, 0x00	; 0
    330a:	80 81       	ld	r24, Z
}
    330c:	cf 91       	pop	r28
    330e:	df 91       	pop	r29
    3310:	08 95       	ret

00003312 <__vector_10>:
void __vector_10 (void)
{
    3312:	1f 92       	push	r1
    3314:	0f 92       	push	r0
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	0f 92       	push	r0
    331a:	11 24       	eor	r1, r1
    331c:	df 93       	push	r29
    331e:	cf 93       	push	r28
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
		OCR0  =  Global_u32NumOfTicKs;
		Global_u32NumOfOVs = Global_u32TempOfOVs;
		Flag = 2;
	}
	#endif
}
    3324:	cf 91       	pop	r28
    3326:	df 91       	pop	r29
    3328:	0f 90       	pop	r0
    332a:	0f be       	out	0x3f, r0	; 63
    332c:	0f 90       	pop	r0
    332e:	1f 90       	pop	r1
    3330:	18 95       	reti

00003332 <__vector_11>:
void __vector_11 (void)
{
    3332:	1f 92       	push	r1
    3334:	0f 92       	push	r0
    3336:	0f b6       	in	r0, 0x3f	; 63
    3338:	0f 92       	push	r0
    333a:	11 24       	eor	r1, r1
    333c:	2f 93       	push	r18
    333e:	3f 93       	push	r19
    3340:	4f 93       	push	r20
    3342:	5f 93       	push	r21
    3344:	6f 93       	push	r22
    3346:	7f 93       	push	r23
    3348:	8f 93       	push	r24
    334a:	9f 93       	push	r25
    334c:	af 93       	push	r26
    334e:	bf 93       	push	r27
    3350:	ef 93       	push	r30
    3352:	ff 93       	push	r31
    3354:	df 93       	push	r29
    3356:	cf 93       	push	r28
    3358:	cd b7       	in	r28, 0x3d	; 61
    335a:	de b7       	in	r29, 0x3e	; 62

	#if   TIMER0_interrupt == OVERFLOW_INT
	static volatile u8 Flag=1;
	if(Flag == 2)
    335c:	80 91 80 01 	lds	r24, 0x0180
    3360:	82 30       	cpi	r24, 0x02	; 2
    3362:	41 f4       	brne	.+16     	; 0x3374 <__vector_11+0x42>
	{
		Global_voidPtrToFunc();
    3364:	e0 91 91 01 	lds	r30, 0x0191
    3368:	f0 91 92 01 	lds	r31, 0x0192
    336c:	09 95       	icall
		Flag=1;
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	80 93 80 01 	sts	0x0180, r24
	}
	if(Global_u32NumOfOVs>0)
    3374:	80 91 89 01 	lds	r24, 0x0189
    3378:	90 91 8a 01 	lds	r25, 0x018A
    337c:	a0 91 8b 01 	lds	r26, 0x018B
    3380:	b0 91 8c 01 	lds	r27, 0x018C
    3384:	00 97       	sbiw	r24, 0x00	; 0
    3386:	a1 05       	cpc	r26, r1
    3388:	b1 05       	cpc	r27, r1
    338a:	a1 f0       	breq	.+40     	; 0x33b4 <__vector_11+0x82>
	{
		//TCNT0 = 0;
		Global_u32NumOfOVs--;
    338c:	80 91 89 01 	lds	r24, 0x0189
    3390:	90 91 8a 01 	lds	r25, 0x018A
    3394:	a0 91 8b 01 	lds	r26, 0x018B
    3398:	b0 91 8c 01 	lds	r27, 0x018C
    339c:	01 97       	sbiw	r24, 0x01	; 1
    339e:	a1 09       	sbc	r26, r1
    33a0:	b1 09       	sbc	r27, r1
    33a2:	80 93 89 01 	sts	0x0189, r24
    33a6:	90 93 8a 01 	sts	0x018A, r25
    33aa:	a0 93 8b 01 	sts	0x018B, r26
    33ae:	b0 93 8c 01 	sts	0x018C, r27
    33b2:	2b c0       	rjmp	.+86     	; 0x340a <__vector_11+0xd8>
	}
	else if (Global_u32NumOfOVs == 0)
    33b4:	80 91 89 01 	lds	r24, 0x0189
    33b8:	90 91 8a 01 	lds	r25, 0x018A
    33bc:	a0 91 8b 01 	lds	r26, 0x018B
    33c0:	b0 91 8c 01 	lds	r27, 0x018C
    33c4:	00 97       	sbiw	r24, 0x00	; 0
    33c6:	a1 05       	cpc	r26, r1
    33c8:	b1 05       	cpc	r27, r1
    33ca:	f9 f4       	brne	.+62     	; 0x340a <__vector_11+0xd8>
	{
		TCNT0 = 256 - Global_u32NumOfTicKs;
    33cc:	e2 e5       	ldi	r30, 0x52	; 82
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	80 91 85 01 	lds	r24, 0x0185
    33d4:	90 91 86 01 	lds	r25, 0x0186
    33d8:	a0 91 87 01 	lds	r26, 0x0187
    33dc:	b0 91 88 01 	lds	r27, 0x0188
    33e0:	81 95       	neg	r24
    33e2:	80 83       	st	Z, r24
		Global_u32NumOfOVs = Global_u32TempOfOVs;
    33e4:	80 91 8d 01 	lds	r24, 0x018D
    33e8:	90 91 8e 01 	lds	r25, 0x018E
    33ec:	a0 91 8f 01 	lds	r26, 0x018F
    33f0:	b0 91 90 01 	lds	r27, 0x0190
    33f4:	80 93 89 01 	sts	0x0189, r24
    33f8:	90 93 8a 01 	sts	0x018A, r25
    33fc:	a0 93 8b 01 	sts	0x018B, r26
    3400:	b0 93 8c 01 	sts	0x018C, r27
		Flag = 2;
    3404:	82 e0       	ldi	r24, 0x02	; 2
    3406:	80 93 80 01 	sts	0x0180, r24
	}
	#endif	
}
    340a:	cf 91       	pop	r28
    340c:	df 91       	pop	r29
    340e:	ff 91       	pop	r31
    3410:	ef 91       	pop	r30
    3412:	bf 91       	pop	r27
    3414:	af 91       	pop	r26
    3416:	9f 91       	pop	r25
    3418:	8f 91       	pop	r24
    341a:	7f 91       	pop	r23
    341c:	6f 91       	pop	r22
    341e:	5f 91       	pop	r21
    3420:	4f 91       	pop	r20
    3422:	3f 91       	pop	r19
    3424:	2f 91       	pop	r18
    3426:	0f 90       	pop	r0
    3428:	0f be       	out	0x3f, r0	; 63
    342a:	0f 90       	pop	r0
    342c:	1f 90       	pop	r1
    342e:	18 95       	reti

00003430 <WDT_voidEnablePeripheral>:

#include "../inc/MCAL/WDT/WDT.h"
#include "../inc/MCAL/WDT/WDT_private.h"

void WDT_voidEnablePeripheral(u8 Copy_u8WDT_Prescaller)
{
    3430:	df 93       	push	r29
    3432:	cf 93       	push	r28
    3434:	00 d0       	rcall	.+0      	; 0x3436 <WDT_voidEnablePeripheral+0x6>
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
    343a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_WDTBitWise = 0b00001000;
    343c:	88 e0       	ldi	r24, 0x08	; 8
    343e:	89 83       	std	Y+1, r24	; 0x01
	Local_WDTBitWise = Local_WDTBitWise | Copy_u8WDT_Prescaller;
    3440:	99 81       	ldd	r25, Y+1	; 0x01
    3442:	8a 81       	ldd	r24, Y+2	; 0x02
    3444:	89 2b       	or	r24, r25
    3446:	89 83       	std	Y+1, r24	; 0x01
	WDTCR = Local_WDTBitWise;
    3448:	e1 e4       	ldi	r30, 0x41	; 65
    344a:	f0 e0       	ldi	r31, 0x00	; 0
    344c:	89 81       	ldd	r24, Y+1	; 0x01
    344e:	80 83       	st	Z, r24
}
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	cf 91       	pop	r28
    3456:	df 91       	pop	r29
    3458:	08 95       	ret

0000345a <WDT_voidDisablePeripheral>:
void WDT_voidDisablePeripheral(void)
{
    345a:	df 93       	push	r29
    345c:	cf 93       	push	r28
    345e:	cd b7       	in	r28, 0x3d	; 61
    3460:	de b7       	in	r29, 0x3e	; 62
	WDTCR = (1<<WDTOE) | (1<<WDE);
    3462:	e1 e4       	ldi	r30, 0x41	; 65
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	88 e1       	ldi	r24, 0x18	; 24
    3468:	80 83       	st	Z, r24
	WDTCR = 0x00;
    346a:	e1 e4       	ldi	r30, 0x41	; 65
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	10 82       	st	Z, r1
}
    3470:	cf 91       	pop	r28
    3472:	df 91       	pop	r29
    3474:	08 95       	ret

00003476 <main>:
#include "../inc/MCAL/WDT/WDT.h"
#include <util/delay.h>
#include "../inc/SERVICE/SW_ICU/SW_ICU.h"

int main(void)
{
    3476:	df 93       	push	r29
    3478:	cf 93       	push	r28
    347a:	cd b7       	in	r28, 0x3d	; 61
    347c:	de b7       	in	r29, 0x3e	; 62
    347e:	62 97       	sbiw	r28, 0x12	; 18
    3480:	0f b6       	in	r0, 0x3f	; 63
    3482:	f8 94       	cli
    3484:	de bf       	out	0x3e, r29	; 62
    3486:	0f be       	out	0x3f, r0	; 63
    3488:	cd bf       	out	0x3d, r28	; 61
	SW_ICU_voidInit();
    348a:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <SW_ICU_voidInit>
	M_GIE_void_EnableGlobalInterrupt();
    348e:	0e 94 18 0c 	call	0x1830	; 0x1830 <M_GIE_void_EnableGlobalInterrupt>
	u8 TON = 0;
    3492:	19 8a       	std	Y+17, r1	; 0x11
	u8 TOFF = 0;
    3494:	1a 8a       	std	Y+18, r1	; 0x12
	u16 DUTY ;
	 LCD_voidInit();
    3496:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <LCD_voidInit>
	 PORT_voidInit();
    349a:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <PORT_voidInit>
	 LCD_voidInit();
    349e:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <LCD_voidInit>
	SW_ICU_voidGetTON_TOFFVals(&TON, &TOFF);
    34a2:	ce 01       	movw	r24, r28
    34a4:	41 96       	adiw	r24, 0x11	; 17
    34a6:	9e 01       	movw	r18, r28
    34a8:	2e 5e       	subi	r18, 0xEE	; 238
    34aa:	3f 4f       	sbci	r19, 0xFF	; 255
    34ac:	b9 01       	movw	r22, r18
    34ae:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <SW_ICU_voidGetTON_TOFFVals>
	DUTY = TON+TOFF;
    34b2:	89 89       	ldd	r24, Y+17	; 0x11
    34b4:	28 2f       	mov	r18, r24
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	8a 89       	ldd	r24, Y+18	; 0x12
    34ba:	88 2f       	mov	r24, r24
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	82 0f       	add	r24, r18
    34c0:	93 1f       	adc	r25, r19
    34c2:	98 8b       	std	Y+16, r25	; 0x10
    34c4:	8f 87       	std	Y+15, r24	; 0x0f
	//SW_ICU_voidGetTON_TOFFVals(&TON, &TOFF);
	while(1)
	{
		SW_ICU_voidGetTON_TOFFVals(&TON, &TOFF);
    34c6:	ce 01       	movw	r24, r28
    34c8:	41 96       	adiw	r24, 0x11	; 17
    34ca:	9e 01       	movw	r18, r28
    34cc:	2e 5e       	subi	r18, 0xEE	; 238
    34ce:	3f 4f       	sbci	r19, 0xFF	; 255
    34d0:	b9 01       	movw	r22, r18
    34d2:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <SW_ICU_voidGetTON_TOFFVals>
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	aa e7       	ldi	r26, 0x7A	; 122
    34dc:	b4 e4       	ldi	r27, 0x44	; 68
    34de:	8b 87       	std	Y+11, r24	; 0x0b
    34e0:	9c 87       	std	Y+12, r25	; 0x0c
    34e2:	ad 87       	std	Y+13, r26	; 0x0d
    34e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    34e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	4a ef       	ldi	r20, 0xFA	; 250
    34f4:	54 e4       	ldi	r21, 0x44	; 68
    34f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	8f 83       	std	Y+7, r24	; 0x07
    3500:	98 87       	std	Y+8, r25	; 0x08
    3502:	a9 87       	std	Y+9, r26	; 0x09
    3504:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3506:	6f 81       	ldd	r22, Y+7	; 0x07
    3508:	78 85       	ldd	r23, Y+8	; 0x08
    350a:	89 85       	ldd	r24, Y+9	; 0x09
    350c:	9a 85       	ldd	r25, Y+10	; 0x0a
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	40 e8       	ldi	r20, 0x80	; 128
    3514:	5f e3       	ldi	r21, 0x3F	; 63
    3516:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    351a:	88 23       	and	r24, r24
    351c:	2c f4       	brge	.+10     	; 0x3528 <main+0xb2>
		__ticks = 1;
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	9e 83       	std	Y+6, r25	; 0x06
    3524:	8d 83       	std	Y+5, r24	; 0x05
    3526:	3f c0       	rjmp	.+126    	; 0x35a6 <main+0x130>
	else if (__tmp > 65535)
    3528:	6f 81       	ldd	r22, Y+7	; 0x07
    352a:	78 85       	ldd	r23, Y+8	; 0x08
    352c:	89 85       	ldd	r24, Y+9	; 0x09
    352e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	3f ef       	ldi	r19, 0xFF	; 255
    3534:	4f e7       	ldi	r20, 0x7F	; 127
    3536:	57 e4       	ldi	r21, 0x47	; 71
    3538:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    353c:	18 16       	cp	r1, r24
    353e:	4c f5       	brge	.+82     	; 0x3592 <main+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3540:	6b 85       	ldd	r22, Y+11	; 0x0b
    3542:	7c 85       	ldd	r23, Y+12	; 0x0c
    3544:	8d 85       	ldd	r24, Y+13	; 0x0d
    3546:	9e 85       	ldd	r25, Y+14	; 0x0e
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	40 e2       	ldi	r20, 0x20	; 32
    354e:	51 e4       	ldi	r21, 0x41	; 65
    3550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3554:	dc 01       	movw	r26, r24
    3556:	cb 01       	movw	r24, r22
    3558:	bc 01       	movw	r22, r24
    355a:	cd 01       	movw	r24, r26
    355c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	9e 83       	std	Y+6, r25	; 0x06
    3566:	8d 83       	std	Y+5, r24	; 0x05
    3568:	0f c0       	rjmp	.+30     	; 0x3588 <main+0x112>
    356a:	88 ec       	ldi	r24, 0xC8	; 200
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	9c 83       	std	Y+4, r25	; 0x04
    3570:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3572:	8b 81       	ldd	r24, Y+3	; 0x03
    3574:	9c 81       	ldd	r25, Y+4	; 0x04
    3576:	01 97       	sbiw	r24, 0x01	; 1
    3578:	f1 f7       	brne	.-4      	; 0x3576 <main+0x100>
    357a:	9c 83       	std	Y+4, r25	; 0x04
    357c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    357e:	8d 81       	ldd	r24, Y+5	; 0x05
    3580:	9e 81       	ldd	r25, Y+6	; 0x06
    3582:	01 97       	sbiw	r24, 0x01	; 1
    3584:	9e 83       	std	Y+6, r25	; 0x06
    3586:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3588:	8d 81       	ldd	r24, Y+5	; 0x05
    358a:	9e 81       	ldd	r25, Y+6	; 0x06
    358c:	00 97       	sbiw	r24, 0x00	; 0
    358e:	69 f7       	brne	.-38     	; 0x356a <main+0xf4>
    3590:	14 c0       	rjmp	.+40     	; 0x35ba <main+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3592:	6f 81       	ldd	r22, Y+7	; 0x07
    3594:	78 85       	ldd	r23, Y+8	; 0x08
    3596:	89 85       	ldd	r24, Y+9	; 0x09
    3598:	9a 85       	ldd	r25, Y+10	; 0x0a
    359a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	9e 83       	std	Y+6, r25	; 0x06
    35a4:	8d 83       	std	Y+5, r24	; 0x05
    35a6:	8d 81       	ldd	r24, Y+5	; 0x05
    35a8:	9e 81       	ldd	r25, Y+6	; 0x06
    35aa:	9a 83       	std	Y+2, r25	; 0x02
    35ac:	89 83       	std	Y+1, r24	; 0x01
    35ae:	89 81       	ldd	r24, Y+1	; 0x01
    35b0:	9a 81       	ldd	r25, Y+2	; 0x02
    35b2:	01 97       	sbiw	r24, 0x01	; 1
    35b4:	f1 f7       	brne	.-4      	; 0x35b2 <main+0x13c>
    35b6:	9a 83       	std	Y+2, r25	; 0x02
    35b8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		M_GIE_void_DisableGlobalInterrupt();
    35ba:	0e 94 26 0c 	call	0x184c	; 0x184c <M_GIE_void_DisableGlobalInterrupt>
		LCD_voidSetCursorToX_y(LCD_ROW0,LCD_Coloumn0);
    35be:	80 e0       	ldi	r24, 0x00	; 0
    35c0:	60 e0       	ldi	r22, 0x00	; 0
    35c2:	0e 94 9d 14 	call	0x293a	; 0x293a <LCD_voidSetCursorToX_y>
		LCD_voidWriteNumbers(TOFF);
    35c6:	8a 89       	ldd	r24, Y+18	; 0x12
    35c8:	88 2f       	mov	r24, r24
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	a0 e0       	ldi	r26, 0x00	; 0
    35ce:	b0 e0       	ldi	r27, 0x00	; 0
    35d0:	bc 01       	movw	r22, r24
    35d2:	cd 01       	movw	r24, r26
    35d4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	bc 01       	movw	r22, r24
    35de:	cd 01       	movw	r24, r26
    35e0:	0e 94 59 13 	call	0x26b2	; 0x26b2 <LCD_voidWriteNumbers>
		M_GIE_void_EnableGlobalInterrupt();
    35e4:	0e 94 18 0c 	call	0x1830	; 0x1830 <M_GIE_void_EnableGlobalInterrupt>
    35e8:	6e cf       	rjmp	.-292    	; 0x34c6 <main+0x50>

000035ea <__udivmodsi4>:
    35ea:	a1 e2       	ldi	r26, 0x21	; 33
    35ec:	1a 2e       	mov	r1, r26
    35ee:	aa 1b       	sub	r26, r26
    35f0:	bb 1b       	sub	r27, r27
    35f2:	fd 01       	movw	r30, r26
    35f4:	0d c0       	rjmp	.+26     	; 0x3610 <__udivmodsi4_ep>

000035f6 <__udivmodsi4_loop>:
    35f6:	aa 1f       	adc	r26, r26
    35f8:	bb 1f       	adc	r27, r27
    35fa:	ee 1f       	adc	r30, r30
    35fc:	ff 1f       	adc	r31, r31
    35fe:	a2 17       	cp	r26, r18
    3600:	b3 07       	cpc	r27, r19
    3602:	e4 07       	cpc	r30, r20
    3604:	f5 07       	cpc	r31, r21
    3606:	20 f0       	brcs	.+8      	; 0x3610 <__udivmodsi4_ep>
    3608:	a2 1b       	sub	r26, r18
    360a:	b3 0b       	sbc	r27, r19
    360c:	e4 0b       	sbc	r30, r20
    360e:	f5 0b       	sbc	r31, r21

00003610 <__udivmodsi4_ep>:
    3610:	66 1f       	adc	r22, r22
    3612:	77 1f       	adc	r23, r23
    3614:	88 1f       	adc	r24, r24
    3616:	99 1f       	adc	r25, r25
    3618:	1a 94       	dec	r1
    361a:	69 f7       	brne	.-38     	; 0x35f6 <__udivmodsi4_loop>
    361c:	60 95       	com	r22
    361e:	70 95       	com	r23
    3620:	80 95       	com	r24
    3622:	90 95       	com	r25
    3624:	9b 01       	movw	r18, r22
    3626:	ac 01       	movw	r20, r24
    3628:	bd 01       	movw	r22, r26
    362a:	cf 01       	movw	r24, r30
    362c:	08 95       	ret

0000362e <__prologue_saves__>:
    362e:	2f 92       	push	r2
    3630:	3f 92       	push	r3
    3632:	4f 92       	push	r4
    3634:	5f 92       	push	r5
    3636:	6f 92       	push	r6
    3638:	7f 92       	push	r7
    363a:	8f 92       	push	r8
    363c:	9f 92       	push	r9
    363e:	af 92       	push	r10
    3640:	bf 92       	push	r11
    3642:	cf 92       	push	r12
    3644:	df 92       	push	r13
    3646:	ef 92       	push	r14
    3648:	ff 92       	push	r15
    364a:	0f 93       	push	r16
    364c:	1f 93       	push	r17
    364e:	cf 93       	push	r28
    3650:	df 93       	push	r29
    3652:	cd b7       	in	r28, 0x3d	; 61
    3654:	de b7       	in	r29, 0x3e	; 62
    3656:	ca 1b       	sub	r28, r26
    3658:	db 0b       	sbc	r29, r27
    365a:	0f b6       	in	r0, 0x3f	; 63
    365c:	f8 94       	cli
    365e:	de bf       	out	0x3e, r29	; 62
    3660:	0f be       	out	0x3f, r0	; 63
    3662:	cd bf       	out	0x3d, r28	; 61
    3664:	09 94       	ijmp

00003666 <__epilogue_restores__>:
    3666:	2a 88       	ldd	r2, Y+18	; 0x12
    3668:	39 88       	ldd	r3, Y+17	; 0x11
    366a:	48 88       	ldd	r4, Y+16	; 0x10
    366c:	5f 84       	ldd	r5, Y+15	; 0x0f
    366e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3670:	7d 84       	ldd	r7, Y+13	; 0x0d
    3672:	8c 84       	ldd	r8, Y+12	; 0x0c
    3674:	9b 84       	ldd	r9, Y+11	; 0x0b
    3676:	aa 84       	ldd	r10, Y+10	; 0x0a
    3678:	b9 84       	ldd	r11, Y+9	; 0x09
    367a:	c8 84       	ldd	r12, Y+8	; 0x08
    367c:	df 80       	ldd	r13, Y+7	; 0x07
    367e:	ee 80       	ldd	r14, Y+6	; 0x06
    3680:	fd 80       	ldd	r15, Y+5	; 0x05
    3682:	0c 81       	ldd	r16, Y+4	; 0x04
    3684:	1b 81       	ldd	r17, Y+3	; 0x03
    3686:	aa 81       	ldd	r26, Y+2	; 0x02
    3688:	b9 81       	ldd	r27, Y+1	; 0x01
    368a:	ce 0f       	add	r28, r30
    368c:	d1 1d       	adc	r29, r1
    368e:	0f b6       	in	r0, 0x3f	; 63
    3690:	f8 94       	cli
    3692:	de bf       	out	0x3e, r29	; 62
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	cd bf       	out	0x3d, r28	; 61
    3698:	ed 01       	movw	r28, r26
    369a:	08 95       	ret

0000369c <_exit>:
    369c:	f8 94       	cli

0000369e <__stop_program>:
    369e:	ff cf       	rjmp	.-2      	; 0x369e <__stop_program>
