
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  000010e6  0000117a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000b6  008000b6  000011d0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000176b  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abd  00000000  00000000  00002ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e8b  00000000  00000000  000035a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  0000442c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ff  00000000  00000000  000046b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001881  00000000  00000000  00004eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00006730  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf e5       	ldi	r28, 0x5F	; 95
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	a0 e6       	ldi	r26, 0x60	; 96
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	e6 ee       	ldi	r30, 0xE6	; 230
      a4:	f0 e1       	ldi	r31, 0x10	; 16
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 3b       	cpi	r26, 0xB6	; 182
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	a6 eb       	ldi	r26, 0xB6	; 182
      b6:	b0 e0       	ldi	r27, 0x00	; 0
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 3b       	cpi	r26, 0xB9	; 185
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 b0 03 	call	0x760	; 0x760 <main>
      c6:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <DIO_enuWriteChannel>:



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
    if((Copy_u8ChannelId>31)||(Copy_u8ChannelId<0)){
      ce:	80 32       	cpi	r24, 0x20	; 32
      d0:	08 f0       	brcs	.+2      	; 0xd4 <DIO_enuWriteChannel+0x6>
      d2:	8e c0       	rjmp	.+284    	; 0x1f0 <DIO_enuWriteChannel+0x122>
        Local_u8Status = DIO_WRONGCHANNEL;
    }
    else if((Copy_u8Level>1)||(Copy_u8Level<0))
      d4:	62 30       	cpi	r22, 0x02	; 2
      d6:	08 f0       	brcs	.+2      	; 0xda <DIO_enuWriteChannel+0xc>
      d8:	8d c0       	rjmp	.+282    	; 0x1f4 <DIO_enuWriteChannel+0x126>
    {
        Local_u8Status = DIO_WRONGDIR;
	}
    else{
        u8 Local_u8Port = Copy_u8ChannelId/8;
      da:	98 2f       	mov	r25, r24
      dc:	96 95       	lsr	r25
      de:	96 95       	lsr	r25
      e0:	96 95       	lsr	r25
        u8 Local_u8Pin = Copy_u8ChannelId%8;
      e2:	87 70       	andi	r24, 0x07	; 7
        switch(Local_u8Port)
      e4:	91 30       	cpi	r25, 0x01	; 1
      e6:	39 f1       	breq	.+78     	; 0x136 <DIO_enuWriteChannel+0x68>
      e8:	38 f0       	brcs	.+14     	; 0xf8 <DIO_enuWriteChannel+0x2a>
      ea:	92 30       	cpi	r25, 0x02	; 2
      ec:	09 f4       	brne	.+2      	; 0xf0 <DIO_enuWriteChannel+0x22>
      ee:	42 c0       	rjmp	.+132    	; 0x174 <DIO_enuWriteChannel+0xa6>
      f0:	93 30       	cpi	r25, 0x03	; 3
      f2:	09 f4       	brne	.+2      	; 0xf6 <DIO_enuWriteChannel+0x28>
      f4:	5e c0       	rjmp	.+188    	; 0x1b2 <DIO_enuWriteChannel+0xe4>
      f6:	80 c0       	rjmp	.+256    	; 0x1f8 <DIO_enuWriteChannel+0x12a>
        {
            case DIO_PORTA:
                if(Copy_u8Level==DIO_CHANNEL_LOW)
      f8:	61 11       	cpse	r22, r1
      fa:	0f c0       	rjmp	.+30     	; 0x11a <DIO_enuWriteChannel+0x4c>
                {
                    CLR_BIT(DIO_PORTA_Reg,Local_u8Pin);
      fc:	4b b3       	in	r20, 0x1b	; 27
      fe:	21 e0       	ldi	r18, 0x01	; 1
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	b9 01       	movw	r22, r18
     104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_enuWriteChannel+0x3c>
     106:	66 0f       	add	r22, r22
     108:	77 1f       	adc	r23, r23
     10a:	8a 95       	dec	r24
     10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_enuWriteChannel+0x38>
     10e:	cb 01       	movw	r24, r22
     110:	80 95       	com	r24
     112:	84 23       	and	r24, r20
     114:	8b bb       	out	0x1b, r24	; 27
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
     116:	84 e0       	ldi	r24, 0x04	; 4
     118:	08 95       	ret
                {
                    CLR_BIT(DIO_PORTA_Reg,Local_u8Pin);
                }
                else
                {
                    SET_BIT(DIO_PORTA_Reg,Local_u8Pin);
     11a:	4b b3       	in	r20, 0x1b	; 27
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	b9 01       	movw	r22, r18
     122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_enuWriteChannel+0x5a>
     124:	66 0f       	add	r22, r22
     126:	77 1f       	adc	r23, r23
     128:	8a 95       	dec	r24
     12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_enuWriteChannel+0x56>
     12c:	cb 01       	movw	r24, r22
     12e:	84 2b       	or	r24, r20
     130:	8b bb       	out	0x1b, r24	; 27
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
     132:	84 e0       	ldi	r24, 0x04	; 4
     134:	08 95       	ret
                {
                    SET_BIT(DIO_PORTA_Reg,Local_u8Pin);
                }   
            break;
            case DIO_PORTB:
                if(Copy_u8Level==DIO_CHANNEL_LOW)
     136:	61 11       	cpse	r22, r1
     138:	0f c0       	rjmp	.+30     	; 0x158 <DIO_enuWriteChannel+0x8a>
                {
                    CLR_BIT(DIO_PORTB_Reg,Local_u8Pin);
     13a:	48 b3       	in	r20, 0x18	; 24
     13c:	21 e0       	ldi	r18, 0x01	; 1
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	b9 01       	movw	r22, r18
     142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_enuWriteChannel+0x7a>
     144:	66 0f       	add	r22, r22
     146:	77 1f       	adc	r23, r23
     148:	8a 95       	dec	r24
     14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_enuWriteChannel+0x76>
     14c:	cb 01       	movw	r24, r22
     14e:	80 95       	com	r24
     150:	84 23       	and	r24, r20
     152:	88 bb       	out	0x18, r24	; 24
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
     154:	84 e0       	ldi	r24, 0x04	; 4
     156:	08 95       	ret
                {
                    CLR_BIT(DIO_PORTB_Reg,Local_u8Pin);
                }
                else
                {
                    SET_BIT(DIO_PORTB_Reg,Local_u8Pin);
     158:	48 b3       	in	r20, 0x18	; 24
     15a:	21 e0       	ldi	r18, 0x01	; 1
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	b9 01       	movw	r22, r18
     160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_enuWriteChannel+0x98>
     162:	66 0f       	add	r22, r22
     164:	77 1f       	adc	r23, r23
     166:	8a 95       	dec	r24
     168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_enuWriteChannel+0x94>
     16a:	cb 01       	movw	r24, r22
     16c:	84 2b       	or	r24, r20
     16e:	88 bb       	out	0x18, r24	; 24
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
     170:	84 e0       	ldi	r24, 0x04	; 4
     172:	08 95       	ret
                {
                    SET_BIT(DIO_PORTB_Reg,Local_u8Pin);
                }                          
            break;
            case DIO_PORTC:
                if(Copy_u8Level==DIO_CHANNEL_LOW)
     174:	61 11       	cpse	r22, r1
     176:	0f c0       	rjmp	.+30     	; 0x196 <DIO_enuWriteChannel+0xc8>
                {
                    CLR_BIT(DIO_PORTC_Reg,Local_u8Pin);
     178:	45 b3       	in	r20, 0x15	; 21
     17a:	21 e0       	ldi	r18, 0x01	; 1
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	b9 01       	movw	r22, r18
     180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_enuWriteChannel+0xb8>
     182:	66 0f       	add	r22, r22
     184:	77 1f       	adc	r23, r23
     186:	8a 95       	dec	r24
     188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_enuWriteChannel+0xb4>
     18a:	cb 01       	movw	r24, r22
     18c:	80 95       	com	r24
     18e:	84 23       	and	r24, r20
     190:	85 bb       	out	0x15, r24	; 21
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
     192:	84 e0       	ldi	r24, 0x04	; 4
     194:	08 95       	ret
                {
                    CLR_BIT(DIO_PORTC_Reg,Local_u8Pin);
                }
                else
                {
                    SET_BIT(DIO_PORTC_Reg,Local_u8Pin);
     196:	45 b3       	in	r20, 0x15	; 21
     198:	21 e0       	ldi	r18, 0x01	; 1
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	b9 01       	movw	r22, r18
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_enuWriteChannel+0xd6>
     1a0:	66 0f       	add	r22, r22
     1a2:	77 1f       	adc	r23, r23
     1a4:	8a 95       	dec	r24
     1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_enuWriteChannel+0xd2>
     1a8:	cb 01       	movw	r24, r22
     1aa:	84 2b       	or	r24, r20
     1ac:	85 bb       	out	0x15, r24	; 21
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
     1ae:	84 e0       	ldi	r24, 0x04	; 4
     1b0:	08 95       	ret
                {
                    SET_BIT(DIO_PORTC_Reg,Local_u8Pin);
                }  
            break;
            case DIO_PORTD:
                if(Copy_u8Level==DIO_CHANNEL_LOW)
     1b2:	61 11       	cpse	r22, r1
     1b4:	0f c0       	rjmp	.+30     	; 0x1d4 <DIO_enuWriteChannel+0x106>
                {
                    CLR_BIT(DIO_PORTD_Reg,Local_u8Pin);
     1b6:	42 b3       	in	r20, 0x12	; 18
     1b8:	21 e0       	ldi	r18, 0x01	; 1
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	b9 01       	movw	r22, r18
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_enuWriteChannel+0xf6>
     1c0:	66 0f       	add	r22, r22
     1c2:	77 1f       	adc	r23, r23
     1c4:	8a 95       	dec	r24
     1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_enuWriteChannel+0xf2>
     1c8:	cb 01       	movw	r24, r22
     1ca:	80 95       	com	r24
     1cc:	84 23       	and	r24, r20
     1ce:	82 bb       	out	0x12, r24	; 18
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
     1d0:	84 e0       	ldi	r24, 0x04	; 4
     1d2:	08 95       	ret
                {
                    CLR_BIT(DIO_PORTD_Reg,Local_u8Pin);
                }
                else
                {
                    SET_BIT(DIO_PORTD_Reg,Local_u8Pin);
     1d4:	42 b3       	in	r20, 0x12	; 18
     1d6:	21 e0       	ldi	r18, 0x01	; 1
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	b9 01       	movw	r22, r18
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_enuWriteChannel+0x114>
     1de:	66 0f       	add	r22, r22
     1e0:	77 1f       	adc	r23, r23
     1e2:	8a 95       	dec	r24
     1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_enuWriteChannel+0x110>
     1e6:	cb 01       	movw	r24, r22
     1e8:	84 2b       	or	r24, r20
     1ea:	82 bb       	out	0x12, r24	; 18
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
     1ec:	84 e0       	ldi	r24, 0x04	; 4
     1ee:	08 95       	ret
    if((Copy_u8ChannelId>31)||(Copy_u8ChannelId<0)){
        Local_u8Status = DIO_WRONGCHANNEL;
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	08 95       	ret
    }
    else if((Copy_u8Level>1)||(Copy_u8Level<0))
    {
        Local_u8Status = DIO_WRONGDIR;
     1f4:	85 e0       	ldi	r24, 0x05	; 5
     1f6:	08 95       	ret
#include "DIO_prv.h"



DIO_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId , u8 Copy_u8Level){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
     1f8:	84 e0       	ldi	r24, 0x04	; 4
                /*DO NOTHING*/
            break;
        }   
    }  
    return Local_u8Status;
}
     1fa:	08 95       	ret

000001fc <DIO_enuReadChannel>:



DIO_tenuErrorStatus DIO_enuReadChannel(u8 Copy_u8ChannelId , pu8 Add_Pu8ChannelLevel){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
    if((Copy_u8ChannelId>31)||(Copy_u8ChannelId<0))
     1fc:	80 32       	cpi	r24, 0x20	; 32
     1fe:	08 f0       	brcs	.+2      	; 0x202 <DIO_enuReadChannel+0x6>
     200:	49 c0       	rjmp	.+146    	; 0x294 <DIO_enuReadChannel+0x98>
    {
        Local_u8Status = DIO_WRONGCHANNEL;
    }
    else if(Add_Pu8ChannelLevel==NULL)
     202:	61 15       	cp	r22, r1
     204:	71 05       	cpc	r23, r1
     206:	09 f4       	brne	.+2      	; 0x20a <DIO_enuReadChannel+0xe>
     208:	47 c0       	rjmp	.+142    	; 0x298 <DIO_enuReadChannel+0x9c>
    {
        Local_u8Status = DIO_NULLPTR;
    }
    else{
        u8 Local_u8Port = Copy_u8ChannelId/8;
     20a:	98 2f       	mov	r25, r24
     20c:	96 95       	lsr	r25
     20e:	96 95       	lsr	r25
     210:	96 95       	lsr	r25
        u8 Local_u8Pin = Copy_u8ChannelId%8;
     212:	87 70       	andi	r24, 0x07	; 7
        switch(Local_u8Port){
     214:	91 30       	cpi	r25, 0x01	; 1
     216:	a1 f0       	breq	.+40     	; 0x240 <DIO_enuReadChannel+0x44>
     218:	28 f0       	brcs	.+10     	; 0x224 <DIO_enuReadChannel+0x28>
     21a:	92 30       	cpi	r25, 0x02	; 2
     21c:	f9 f0       	breq	.+62     	; 0x25c <DIO_enuReadChannel+0x60>
     21e:	93 30       	cpi	r25, 0x03	; 3
     220:	59 f1       	breq	.+86     	; 0x278 <DIO_enuReadChannel+0x7c>
     222:	3c c0       	rjmp	.+120    	; 0x29c <DIO_enuReadChannel+0xa0>
            case DIO_PORTA : 
              *Add_Pu8ChannelLevel =  GET_BIT(DIO_PINA_Reg,Local_u8Pin);
     224:	29 b3       	in	r18, 0x19	; 25
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	a9 01       	movw	r20, r18
     22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_enuReadChannel+0x34>
     22c:	55 95       	asr	r21
     22e:	47 95       	ror	r20
     230:	8a 95       	dec	r24
     232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_enuReadChannel+0x30>
     234:	ca 01       	movw	r24, r20
     236:	81 70       	andi	r24, 0x01	; 1
     238:	fb 01       	movw	r30, r22
     23a:	80 83       	st	Z, r24
}



DIO_tenuErrorStatus DIO_enuReadChannel(u8 Copy_u8ChannelId , pu8 Add_Pu8ChannelLevel){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
     23c:	84 e0       	ldi	r24, 0x04	; 4
        u8 Local_u8Port = Copy_u8ChannelId/8;
        u8 Local_u8Pin = Copy_u8ChannelId%8;
        switch(Local_u8Port){
            case DIO_PORTA : 
              *Add_Pu8ChannelLevel =  GET_BIT(DIO_PINA_Reg,Local_u8Pin);
            break;
     23e:	08 95       	ret

            case DIO_PORTB :
                *Add_Pu8ChannelLevel =  GET_BIT(DIO_PINB_Reg,Local_u8Pin);
     240:	26 b3       	in	r18, 0x16	; 22
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	a9 01       	movw	r20, r18
     246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_enuReadChannel+0x50>
     248:	55 95       	asr	r21
     24a:	47 95       	ror	r20
     24c:	8a 95       	dec	r24
     24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_enuReadChannel+0x4c>
     250:	ca 01       	movw	r24, r20
     252:	81 70       	andi	r24, 0x01	; 1
     254:	fb 01       	movw	r30, r22
     256:	80 83       	st	Z, r24
}



DIO_tenuErrorStatus DIO_enuReadChannel(u8 Copy_u8ChannelId , pu8 Add_Pu8ChannelLevel){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
     258:	84 e0       	ldi	r24, 0x04	; 4
              *Add_Pu8ChannelLevel =  GET_BIT(DIO_PINA_Reg,Local_u8Pin);
            break;

            case DIO_PORTB :
                *Add_Pu8ChannelLevel =  GET_BIT(DIO_PINB_Reg,Local_u8Pin);
            break;
     25a:	08 95       	ret

            case DIO_PORTC :
                *Add_Pu8ChannelLevel =  GET_BIT(DIO_PINC_Reg,Local_u8Pin);
     25c:	23 b3       	in	r18, 0x13	; 19
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	a9 01       	movw	r20, r18
     262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_enuReadChannel+0x6c>
     264:	55 95       	asr	r21
     266:	47 95       	ror	r20
     268:	8a 95       	dec	r24
     26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_enuReadChannel+0x68>
     26c:	ca 01       	movw	r24, r20
     26e:	81 70       	andi	r24, 0x01	; 1
     270:	fb 01       	movw	r30, r22
     272:	80 83       	st	Z, r24
}



DIO_tenuErrorStatus DIO_enuReadChannel(u8 Copy_u8ChannelId , pu8 Add_Pu8ChannelLevel){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
     274:	84 e0       	ldi	r24, 0x04	; 4
                *Add_Pu8ChannelLevel =  GET_BIT(DIO_PINB_Reg,Local_u8Pin);
            break;

            case DIO_PORTC :
                *Add_Pu8ChannelLevel =  GET_BIT(DIO_PINC_Reg,Local_u8Pin);
            break;
     276:	08 95       	ret

            case DIO_PORTD :
              *Add_Pu8ChannelLevel =  GET_BIT(DIO_PIND_Reg,Local_u8Pin);
     278:	20 b3       	in	r18, 0x10	; 16
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	a9 01       	movw	r20, r18
     27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_enuReadChannel+0x88>
     280:	55 95       	asr	r21
     282:	47 95       	ror	r20
     284:	8a 95       	dec	r24
     286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_enuReadChannel+0x84>
     288:	ca 01       	movw	r24, r20
     28a:	81 70       	andi	r24, 0x01	; 1
     28c:	fb 01       	movw	r30, r22
     28e:	80 83       	st	Z, r24
}



DIO_tenuErrorStatus DIO_enuReadChannel(u8 Copy_u8ChannelId , pu8 Add_Pu8ChannelLevel){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
     290:	84 e0       	ldi	r24, 0x04	; 4
                *Add_Pu8ChannelLevel =  GET_BIT(DIO_PINC_Reg,Local_u8Pin);
            break;

            case DIO_PORTD :
              *Add_Pu8ChannelLevel =  GET_BIT(DIO_PIND_Reg,Local_u8Pin);
            break;
     292:	08 95       	ret

DIO_tenuErrorStatus DIO_enuReadChannel(u8 Copy_u8ChannelId , pu8 Add_Pu8ChannelLevel){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
    if((Copy_u8ChannelId>31)||(Copy_u8ChannelId<0))
    {
        Local_u8Status = DIO_WRONGCHANNEL;
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	08 95       	ret
    }
    else if(Add_Pu8ChannelLevel==NULL)
    {
        Local_u8Status = DIO_NULLPTR;
     298:	83 e0       	ldi	r24, 0x03	; 3
     29a:	08 95       	ret
}



DIO_tenuErrorStatus DIO_enuReadChannel(u8 Copy_u8ChannelId , pu8 Add_Pu8ChannelLevel){
    DIO_tenuErrorStatus Local_u8Status = DIO_OK;
     29c:	84 e0       	ldi	r24, 0x04	; 4
                /*DO NOTHING*/
            break;
        }
    }
    return Local_u8Status;
}
     29e:	08 95       	ret

000002a0 <KEYPAD_u8GetKeyState>:
const u8 KEYPAD_Au8RowsPins[4]={KEYPAD_u8_R1_PIN,KEYPAD_u8_R2_PIN,KEYPAD_u8_R3_PIN,KEYPAD_u8_R4_PIN};
const u8 KEYPAD_Au8ColsPins[4]={KEYPAD_u8_C1_PIN,KEYPAD_u8_C2_PIN,KEYPAD_u8_C3_PIN,KEYPAD_u8_C4_PIN};


KEYPAD_tenuErorStatus KEYPAD_u8GetKeyState(pu8 Copy_pu8ReturnedKey)
{
     2a0:	7f 92       	push	r7
     2a2:	8f 92       	push	r8
     2a4:	9f 92       	push	r9
     2a6:	af 92       	push	r10
     2a8:	bf 92       	push	r11
     2aa:	cf 92       	push	r12
     2ac:	df 92       	push	r13
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	1f 92       	push	r1
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_u8ErrorState = KEYPAD_OK;
	u8 Loc_u8RowsCounter,Loc_u8ColsCounter,Loc_u8PinValue,Loc_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
     2c0:	00 97       	sbiw	r24, 0x00	; 0
     2c2:	09 f4       	brne	.+2      	; 0x2c6 <KEYPAD_u8GetKeyState+0x26>
     2c4:	59 c0       	rjmp	.+178    	; 0x378 <KEYPAD_u8GetKeyState+0xd8>
     2c6:	6c 01       	movw	r12, r24
	{
		*Copy_pu8ReturnedKey = KEYPAD_NOT_PRESSED;
     2c8:	8f ef       	ldi	r24, 0xFF	; 255
     2ca:	f6 01       	movw	r30, r12
     2cc:	80 83       	st	Z, r24


KEYPAD_tenuErorStatus KEYPAD_u8GetKeyState(pu8 Copy_pu8ReturnedKey)
{
	u8 Loc_u8ErrorState = KEYPAD_OK;
	u8 Loc_u8RowsCounter,Loc_u8ColsCounter,Loc_u8PinValue,Loc_u8Flag = 0;
     2ce:	71 2c       	mov	r7, r1
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KEYPAD_NOT_PRESSED;
		/* Activate Each Row => For loop on the pins of the rows */
		for(Loc_u8RowsCounter = 0; Loc_u8RowsCounter <= 3 ; Loc_u8RowsCounter++)
     2d0:	91 2c       	mov	r9, r1
     2d2:	4c c0       	rjmp	.+152    	; 0x36c <KEYPAD_u8GetKeyState+0xcc>
		{
			DIO_enuWriteChannel(KEYPAD_Au8RowsPins[Loc_u8RowsCounter],KEYPAD_PIN_LOW);
     2d4:	a9 2c       	mov	r10, r9
     2d6:	b1 2c       	mov	r11, r1
     2d8:	f5 01       	movw	r30, r10
     2da:	ec 59       	subi	r30, 0x9C	; 156
     2dc:	ff 4f       	sbci	r31, 0xFF	; 255
     2de:	80 80       	ld	r8, Z
     2e0:	60 e0       	ldi	r22, 0x00	; 0
     2e2:	88 2d       	mov	r24, r8
     2e4:	0e 94 67 00 	call	0xce	; 0xce <DIO_enuWriteChannel>
			/* Check Which Input Pin Has Zero */
			for(Loc_u8ColsCounter = 0; Loc_u8ColsCounter <= 3 ; Loc_u8ColsCounter++)
     2e8:	10 e0       	ldi	r17, 0x00	; 0
     2ea:	36 c0       	rjmp	.+108    	; 0x358 <KEYPAD_u8GetKeyState+0xb8>
			{
				DIO_enuReadChannel(KEYPAD_Au8ColsPins[Loc_u8ColsCounter],&Loc_u8PinValue);
     2ec:	e1 2e       	mov	r14, r17
     2ee:	f1 2c       	mov	r15, r1
     2f0:	f7 01       	movw	r30, r14
     2f2:	e0 5a       	subi	r30, 0xA0	; 160
     2f4:	ff 4f       	sbci	r31, 0xFF	; 255
     2f6:	00 81       	ld	r16, Z
     2f8:	be 01       	movw	r22, r28
     2fa:	6f 5f       	subi	r22, 0xFF	; 255
     2fc:	7f 4f       	sbci	r23, 0xFF	; 255
     2fe:	80 2f       	mov	r24, r16
     300:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_enuReadChannel>
				if(Loc_u8PinValue == KEYPAD_PIN_LOW)/* Switch is Pressed */
     304:	99 81       	ldd	r25, Y+1	; 0x01
     306:	91 11       	cpse	r25, r1
     308:	26 c0       	rjmp	.+76     	; 0x356 <KEYPAD_u8GetKeyState+0xb6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30a:	8f e3       	ldi	r24, 0x3F	; 63
     30c:	9c e9       	ldi	r25, 0x9C	; 156
     30e:	01 97       	sbiw	r24, 0x01	; 1
     310:	f1 f7       	brne	.-4      	; 0x30e <KEYPAD_u8GetKeyState+0x6e>
     312:	00 c0       	rjmp	.+0      	; 0x314 <KEYPAD_u8GetKeyState+0x74>
     314:	00 00       	nop
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_enuReadChannel(KEYPAD_Au8ColsPins[Loc_u8ColsCounter],&Loc_u8PinValue);
     316:	be 01       	movw	r22, r28
     318:	6f 5f       	subi	r22, 0xFF	; 255
     31a:	7f 4f       	sbci	r23, 0xFF	; 255
     31c:	80 2f       	mov	r24, r16
     31e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_enuReadChannel>
					/* Check if the Pin is still equal LOW */
					while(Loc_u8PinValue == KEYPAD_PIN_LOW)
     322:	06 c0       	rjmp	.+12     	; 0x330 <KEYPAD_u8GetKeyState+0x90>
					{
						DIO_enuReadChannel(KEYPAD_Au8ColsPins[Loc_u8ColsCounter],&Loc_u8PinValue);
     324:	be 01       	movw	r22, r28
     326:	6f 5f       	subi	r22, 0xFF	; 255
     328:	7f 4f       	sbci	r23, 0xFF	; 255
     32a:	80 2f       	mov	r24, r16
     32c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_enuReadChannel>
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_enuReadChannel(KEYPAD_Au8ColsPins[Loc_u8ColsCounter],&Loc_u8PinValue);
					/* Check if the Pin is still equal LOW */
					while(Loc_u8PinValue == KEYPAD_PIN_LOW)
     330:	89 81       	ldd	r24, Y+1	; 0x01
     332:	88 23       	and	r24, r24
     334:	b9 f3       	breq	.-18     	; 0x324 <KEYPAD_u8GetKeyState+0x84>
					{
						DIO_enuReadChannel(KEYPAD_Au8ColsPins[Loc_u8ColsCounter],&Loc_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KEYPAD_Au8Keys[Loc_u8RowsCounter][Loc_u8ColsCounter];
     336:	c5 01       	movw	r24, r10
     338:	88 0f       	add	r24, r24
     33a:	99 1f       	adc	r25, r25
     33c:	88 0f       	add	r24, r24
     33e:	99 1f       	adc	r25, r25
     340:	88 59       	subi	r24, 0x98	; 152
     342:	9f 4f       	sbci	r25, 0xFF	; 255
     344:	fc 01       	movw	r30, r24
     346:	ee 0d       	add	r30, r14
     348:	ff 1d       	adc	r31, r15
     34a:	80 81       	ld	r24, Z
     34c:	f6 01       	movw	r30, r12
     34e:	80 83       	st	Z, r24
					Loc_u8Flag = 1;
     350:	77 24       	eor	r7, r7
     352:	73 94       	inc	r7
					break;						
     354:	03 c0       	rjmp	.+6      	; 0x35c <KEYPAD_u8GetKeyState+0xbc>
		/* Activate Each Row => For loop on the pins of the rows */
		for(Loc_u8RowsCounter = 0; Loc_u8RowsCounter <= 3 ; Loc_u8RowsCounter++)
		{
			DIO_enuWriteChannel(KEYPAD_Au8RowsPins[Loc_u8RowsCounter],KEYPAD_PIN_LOW);
			/* Check Which Input Pin Has Zero */
			for(Loc_u8ColsCounter = 0; Loc_u8ColsCounter <= 3 ; Loc_u8ColsCounter++)
     356:	1f 5f       	subi	r17, 0xFF	; 255
     358:	14 30       	cpi	r17, 0x04	; 4
     35a:	40 f2       	brcs	.-112    	; 0x2ec <KEYPAD_u8GetKeyState+0x4c>
					Loc_u8Flag = 1;
					break;						
				}
			}
			/* Deactivate Row */
			DIO_enuWriteChannel(KEYPAD_Au8RowsPins[Loc_u8RowsCounter],KEYPAD_PIN_HIGH);
     35c:	61 e0       	ldi	r22, 0x01	; 1
     35e:	88 2d       	mov	r24, r8
     360:	0e 94 67 00 	call	0xce	; 0xce <DIO_enuWriteChannel>
			if(Loc_u8Flag == 1)
     364:	f1 e0       	ldi	r31, 0x01	; 1
     366:	7f 16       	cp	r7, r31
     368:	49 f0       	breq	.+18     	; 0x37c <KEYPAD_u8GetKeyState+0xdc>
	u8 Loc_u8RowsCounter,Loc_u8ColsCounter,Loc_u8PinValue,Loc_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KEYPAD_NOT_PRESSED;
		/* Activate Each Row => For loop on the pins of the rows */
		for(Loc_u8RowsCounter = 0; Loc_u8RowsCounter <= 3 ; Loc_u8RowsCounter++)
     36a:	93 94       	inc	r9
     36c:	83 e0       	ldi	r24, 0x03	; 3
     36e:	89 15       	cp	r24, r9
     370:	08 f0       	brcs	.+2      	; 0x374 <KEYPAD_u8GetKeyState+0xd4>
     372:	b0 cf       	rjmp	.-160    	; 0x2d4 <KEYPAD_u8GetKeyState+0x34>
const u8 KEYPAD_Au8ColsPins[4]={KEYPAD_u8_C1_PIN,KEYPAD_u8_C2_PIN,KEYPAD_u8_C3_PIN,KEYPAD_u8_C4_PIN};


KEYPAD_tenuErorStatus KEYPAD_u8GetKeyState(pu8 Copy_pu8ReturnedKey)
{
	u8 Loc_u8ErrorState = KEYPAD_OK;
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	03 c0       	rjmp	.+6      	; 0x37e <KEYPAD_u8GetKeyState+0xde>
			}
		}
	}
	else
	{
		Loc_u8ErrorState = KEYPAD_NULLPTR;
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	01 c0       	rjmp	.+2      	; 0x37e <KEYPAD_u8GetKeyState+0xde>
const u8 KEYPAD_Au8ColsPins[4]={KEYPAD_u8_C1_PIN,KEYPAD_u8_C2_PIN,KEYPAD_u8_C3_PIN,KEYPAD_u8_C4_PIN};


KEYPAD_tenuErorStatus KEYPAD_u8GetKeyState(pu8 Copy_pu8ReturnedKey)
{
	u8 Loc_u8ErrorState = KEYPAD_OK;
     37c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		Loc_u8ErrorState = KEYPAD_NULLPTR;
	}
	return Loc_u8ErrorState;
}
     37e:	0f 90       	pop	r0
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	bf 90       	pop	r11
     392:	af 90       	pop	r10
     394:	9f 90       	pop	r9
     396:	8f 90       	pop	r8
     398:	7f 90       	pop	r7
     39a:	08 95       	ret

0000039c <LCD_VoidSendDataBus>:
}


void LCD_Calculator_Init() {
    LCD_VoidInit();
    LCD_VoidClear();
     39c:	cf 93       	push	r28
     39e:	c8 2f       	mov	r28, r24
     3a0:	84 fb       	bst	r24, 4
     3a2:	66 27       	eor	r22, r22
     3a4:	60 f9       	bld	r22, 0
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	0e 94 67 00 	call	0xce	; 0xce <DIO_enuWriteChannel>
     3ac:	c5 fb       	bst	r28, 5
     3ae:	66 27       	eor	r22, r22
     3b0:	60 f9       	bld	r22, 0
     3b2:	83 e0       	ldi	r24, 0x03	; 3
     3b4:	0e 94 67 00 	call	0xce	; 0xce <DIO_enuWriteChannel>
     3b8:	c6 fb       	bst	r28, 6
     3ba:	66 27       	eor	r22, r22
     3bc:	60 f9       	bld	r22, 0
     3be:	84 e0       	ldi	r24, 0x04	; 4
     3c0:	0e 94 67 00 	call	0xce	; 0xce <DIO_enuWriteChannel>
     3c4:	6c 2f       	mov	r22, r28
     3c6:	66 1f       	adc	r22, r22
     3c8:	66 27       	eor	r22, r22
     3ca:	66 1f       	adc	r22, r22
     3cc:	85 e0       	ldi	r24, 0x05	; 5
     3ce:	0e 94 67 00 	call	0xce	; 0xce <DIO_enuWriteChannel>
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	0e 94 67 00 	call	0xce	; 0xce <DIO_enuWriteChannel>
     3da:	82 e0       	ldi	r24, 0x02	; 2
     3dc:	8a 95       	dec	r24
     3de:	f1 f7       	brne	.-4      	; 0x3dc <LCD_VoidSendDataBus+0x40>
     3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <LCD_VoidSendDataBus+0x46>
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	0e 94 67 00 	call	0xce	; 0xce <DIO_enuWriteChannel>
     3ea:	8f e8       	ldi	r24, 0x8F	; 143
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	f1 f7       	brne	.-4      	; 0x3ee <LCD_VoidSendDataBus+0x52>
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <LCD_VoidSendDataBus+0x58>
     3f4:	00 00       	nop
     3f6:	6c 2f       	mov	r22, r28
     3f8:	61 70       	andi	r22, 0x01	; 1
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	0e 94 67 00 	call	0xce	; 0xce <DIO_enuWriteChannel>
     400:	c1 fb       	bst	r28, 1
     402:	66 27       	eor	r22, r22
     404:	60 f9       	bld	r22, 0
     406:	83 e0       	ldi	r24, 0x03	; 3
     408:	0e 94 67 00 	call	0xce	; 0xce <DIO_enuWriteChannel>
     40c:	c2 fb       	bst	r28, 2
     40e:	66 27       	eor	r22, r22
     410:	60 f9       	bld	r22, 0
     412:	84 e0       	ldi	r24, 0x04	; 4
     414:	0e 94 67 00 	call	0xce	; 0xce <DIO_enuWriteChannel>
     418:	c3 fb       	bst	r28, 3
     41a:	66 27       	eor	r22, r22
     41c:	60 f9       	bld	r22, 0
     41e:	85 e0       	ldi	r24, 0x05	; 5
     420:	0e 94 67 00 	call	0xce	; 0xce <DIO_enuWriteChannel>
     424:	61 e0       	ldi	r22, 0x01	; 1
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	0e 94 67 00 	call	0xce	; 0xce <DIO_enuWriteChannel>
     42c:	92 e0       	ldi	r25, 0x02	; 2
     42e:	9a 95       	dec	r25
     430:	f1 f7       	brne	.-4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     432:	00 c0       	rjmp	.+0      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	0e 94 67 00 	call	0xce	; 0xce <DIO_enuWriteChannel>
     43c:	8f e8       	ldi	r24, 0x8F	; 143
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     444:	00 c0       	rjmp	.+0      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     446:	00 00       	nop
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <LCD_VoidInit>:
     44c:	8f e3       	ldi	r24, 0x3F	; 63
     44e:	9c e9       	ldi	r25, 0x9C	; 156
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	f1 f7       	brne	.-4      	; 0x450 <LCD_VoidInit+0x4>
     454:	00 c0       	rjmp	.+0      	; 0x456 <LCD_VoidInit+0xa>
     456:	00 00       	nop
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	0e 94 67 00 	call	0xce	; 0xce <DIO_enuWriteChannel>
     460:	82 e0       	ldi	r24, 0x02	; 2
     462:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_VoidSendDataBus>
     466:	88 e2       	ldi	r24, 0x28	; 40
     468:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_VoidSendDataBus>
     46c:	8c e0       	ldi	r24, 0x0C	; 12
     46e:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_VoidSendDataBus>
     472:	86 e0       	ldi	r24, 0x06	; 6
     474:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_VoidSendDataBus>
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_VoidSendDataBus>
     47e:	8f e9       	ldi	r24, 0x9F	; 159
     480:	9f e0       	ldi	r25, 0x0F	; 15
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	f1 f7       	brne	.-4      	; 0x482 <LCD_VoidInit+0x36>
     486:	00 c0       	rjmp	.+0      	; 0x488 <LCD_VoidInit+0x3c>
     488:	00 00       	nop
     48a:	08 95       	ret

0000048c <LCD_VOidSendChar>:
     48c:	cf 93       	push	r28
     48e:	c8 2f       	mov	r28, r24
     490:	61 e0       	ldi	r22, 0x01	; 1
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	0e 94 67 00 	call	0xce	; 0xce <DIO_enuWriteChannel>
     498:	8c 2f       	mov	r24, r28
     49a:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_VoidSendDataBus>
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <LCD_VoidSendString>:
     4a2:	cf 92       	push	r12
     4a4:	df 92       	push	r13
     4a6:	ef 92       	push	r14
     4a8:	ff 92       	push	r15
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	ec 01       	movw	r28, r24
     4b0:	c1 2c       	mov	r12, r1
     4b2:	d1 2c       	mov	r13, r1
     4b4:	76 01       	movw	r14, r12
     4b6:	07 c0       	rjmp	.+14     	; 0x4c6 <LCD_VoidSendString+0x24>
     4b8:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_VOidSendChar>
     4bc:	8f ef       	ldi	r24, 0xFF	; 255
     4be:	c8 1a       	sub	r12, r24
     4c0:	d8 0a       	sbc	r13, r24
     4c2:	e8 0a       	sbc	r14, r24
     4c4:	f8 0a       	sbc	r15, r24
     4c6:	fe 01       	movw	r30, r28
     4c8:	ec 0d       	add	r30, r12
     4ca:	fd 1d       	adc	r31, r13
     4cc:	80 81       	ld	r24, Z
     4ce:	81 11       	cpse	r24, r1
     4d0:	f3 cf       	rjmp	.-26     	; 0x4b8 <LCD_VoidSendString+0x16>
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	ff 90       	pop	r15
     4d8:	ef 90       	pop	r14
     4da:	df 90       	pop	r13
     4dc:	cf 90       	pop	r12
     4de:	08 95       	ret

000004e0 <LCD_Goto_xy>:
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	d8 2f       	mov	r29, r24
     4e6:	c6 2f       	mov	r28, r22
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	0e 94 67 00 	call	0xce	; 0xce <DIO_enuWriteChannel>
     4f0:	8d 2f       	mov	r24, r29
     4f2:	8c 0f       	add	r24, r28
     4f4:	80 58       	subi	r24, 0x80	; 128
     4f6:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_VoidSendDataBus>
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <LCD_VoidSendNumbers>:
     500:	8f 92       	push	r8
     502:	9f 92       	push	r9
     504:	af 92       	push	r10
     506:	bf 92       	push	r11
     508:	cf 92       	push	r12
     50a:	df 92       	push	r13
     50c:	ef 92       	push	r14
     50e:	ff 92       	push	r15
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
     51c:	64 97       	sbiw	r28, 0x14	; 20
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	f8 94       	cli
     522:	de bf       	out	0x3e, r29	; 62
     524:	0f be       	out	0x3f, r0	; 63
     526:	cd bf       	out	0x3d, r28	; 61
     528:	4b 01       	movw	r8, r22
     52a:	5c 01       	movw	r10, r24
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	48 ec       	ldi	r20, 0xC8	; 200
     532:	52 e4       	ldi	r21, 0x42	; 66
     534:	0e 94 f5 05 	call	0xbea	; 0xbea <__mulsf3>
     538:	0e 94 14 05 	call	0xa28	; 0xa28 <__fixunssfsi>
     53c:	6b 01       	movw	r12, r22
     53e:	7c 01       	movw	r14, r24
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	a9 01       	movw	r20, r18
     546:	c5 01       	movw	r24, r10
     548:	b4 01       	movw	r22, r8
     54a:	0e 94 9d 04 	call	0x93a	; 0x93a <__cmpsf2>
     54e:	88 23       	and	r24, r24
     550:	54 f4       	brge	.+20     	; 0x566 <LCD_VoidSendNumbers+0x66>
     552:	f0 94       	com	r15
     554:	e0 94       	com	r14
     556:	d0 94       	com	r13
     558:	c0 94       	com	r12
     55a:	c1 1c       	adc	r12, r1
     55c:	d1 1c       	adc	r13, r1
     55e:	e1 1c       	adc	r14, r1
     560:	f1 1c       	adc	r15, r1
     562:	01 e0       	ldi	r16, 0x01	; 1
     564:	01 c0       	rjmp	.+2      	; 0x568 <LCD_VoidSendNumbers+0x68>
     566:	00 e0       	ldi	r16, 0x00	; 0
     568:	10 e0       	ldi	r17, 0x00	; 0
     56a:	c7 01       	movw	r24, r14
     56c:	b6 01       	movw	r22, r12
     56e:	2a e0       	ldi	r18, 0x0A	; 10
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	40 e0       	ldi	r20, 0x00	; 0
     574:	50 e0       	ldi	r21, 0x00	; 0
     576:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__udivmodsi4>
     57a:	e1 e0       	ldi	r30, 0x01	; 1
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	ec 0f       	add	r30, r28
     580:	fd 1f       	adc	r31, r29
     582:	e1 0f       	add	r30, r17
     584:	f1 1d       	adc	r31, r1
     586:	17 fd       	sbrc	r17, 7
     588:	fa 95       	dec	r31
     58a:	60 83       	st	Z, r22
     58c:	c2 2e       	mov	r12, r18
     58e:	d3 2e       	mov	r13, r19
     590:	e4 2e       	mov	r14, r20
     592:	f5 2e       	mov	r15, r21
     594:	1f 5f       	subi	r17, 0xFF	; 255
     596:	c1 14       	cp	r12, r1
     598:	d1 04       	cpc	r13, r1
     59a:	e1 04       	cpc	r14, r1
     59c:	f1 04       	cpc	r15, r1
     59e:	29 f7       	brne	.-54     	; 0x56a <LCD_VoidSendNumbers+0x6a>
     5a0:	00 23       	and	r16, r16
     5a2:	d1 f0       	breq	.+52     	; 0x5d8 <LCD_VoidSendNumbers+0xd8>
     5a4:	8d e2       	ldi	r24, 0x2D	; 45
     5a6:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_VOidSendChar>
     5aa:	16 c0       	rjmp	.+44     	; 0x5d8 <LCD_VoidSendNumbers+0xd8>
     5ac:	12 30       	cpi	r17, 0x02	; 2
     5ae:	19 f4       	brne	.+6      	; 0x5b6 <LCD_VoidSendNumbers+0xb6>
     5b0:	8e e2       	ldi	r24, 0x2E	; 46
     5b2:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_VOidSendChar>
     5b6:	11 50       	subi	r17, 0x01	; 1
     5b8:	e1 e0       	ldi	r30, 0x01	; 1
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	ec 0f       	add	r30, r28
     5be:	fd 1f       	adc	r31, r29
     5c0:	e1 0f       	add	r30, r17
     5c2:	f1 1d       	adc	r31, r1
     5c4:	17 fd       	sbrc	r17, 7
     5c6:	fa 95       	dec	r31
     5c8:	80 81       	ld	r24, Z
     5ca:	80 5d       	subi	r24, 0xD0	; 208
     5cc:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_VOidSendChar>
     5d0:	85 e0       	ldi	r24, 0x05	; 5
     5d2:	8a 95       	dec	r24
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <LCD_VoidSendNumbers+0xd2>
     5d6:	00 00       	nop
     5d8:	11 16       	cp	r1, r17
     5da:	44 f3       	brlt	.-48     	; 0x5ac <LCD_VoidSendNumbers+0xac>
     5dc:	64 96       	adiw	r28, 0x14	; 20
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	ff 90       	pop	r15
     5f2:	ef 90       	pop	r14
     5f4:	df 90       	pop	r13
     5f6:	cf 90       	pop	r12
     5f8:	bf 90       	pop	r11
     5fa:	af 90       	pop	r10
     5fc:	9f 90       	pop	r9
     5fe:	8f 90       	pop	r8
     600:	08 95       	ret

00000602 <LCD_VoidClear>:
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	0e 94 67 00 	call	0xce	; 0xce <DIO_enuWriteChannel>
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_VoidSendDataBus>
     610:	8f e9       	ldi	r24, 0x9F	; 159
     612:	9f e0       	ldi	r25, 0x0F	; 15
     614:	01 97       	sbiw	r24, 0x01	; 1
     616:	f1 f7       	brne	.-4      	; 0x614 <LCD_VoidClear+0x12>
     618:	00 c0       	rjmp	.+0      	; 0x61a <LCD_VoidClear+0x18>
     61a:	00 00       	nop
     61c:	80 e8       	ldi	r24, 0x80	; 128
     61e:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_VoidSendDataBus>
     622:	08 95       	ret

00000624 <LCD_VoidCreateSpectialChar>:
}

void LCD_VoidCreateSpectialChar(u8 Copy_u8Index, pu8 Copy_u8Data)
 {
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	8b 01       	movw	r16, r22
    Copy_u8Index &= 0x07;
     62c:	87 70       	andi	r24, 0x07	; 7
    Copy_u8Index |= 0x40; // Set CGRAM address command
     62e:	c8 2f       	mov	r28, r24
     630:	c0 64       	ori	r28, 0x40	; 64

    DIO_enuWriteChannel(LCD_PIN_RS, LCD_PIN_LOW);
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	0e 94 67 00 	call	0xce	; 0xce <DIO_enuWriteChannel>
    LCD_VoidSendDataBus(Copy_u8Index); // Send CGRAM address
     63a:	8c 2f       	mov	r24, r28
     63c:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_VoidSendDataBus>
    DIO_enuWriteChannel(LCD_PIN_RS, LCD_PIN_HIGH);
     640:	61 e0       	ldi	r22, 0x01	; 1
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	0e 94 67 00 	call	0xce	; 0xce <DIO_enuWriteChannel>

    // Send custom character data
    for (u8 i = 0; i < 8; i++) {
     648:	c0 e0       	ldi	r28, 0x00	; 0
     64a:	07 c0       	rjmp	.+14     	; 0x65a <LCD_VoidCreateSpectialChar+0x36>
        LCD_VoidSendDataBus(Copy_u8Data[i]);
     64c:	f8 01       	movw	r30, r16
     64e:	ec 0f       	add	r30, r28
     650:	f1 1d       	adc	r31, r1
     652:	80 81       	ld	r24, Z
     654:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_VoidSendDataBus>
    DIO_enuWriteChannel(LCD_PIN_RS, LCD_PIN_LOW);
    LCD_VoidSendDataBus(Copy_u8Index); // Send CGRAM address
    DIO_enuWriteChannel(LCD_PIN_RS, LCD_PIN_HIGH);

    // Send custom character data
    for (u8 i = 0; i < 8; i++) {
     658:	cf 5f       	subi	r28, 0xFF	; 255
     65a:	c8 30       	cpi	r28, 0x08	; 8
     65c:	b8 f3       	brcs	.-18     	; 0x64c <LCD_VoidCreateSpectialChar+0x28>
        LCD_VoidSendDataBus(Copy_u8Data[i]);
    }
     65e:	cf 91       	pop	r28
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	08 95       	ret

00000666 <GetNumericInput>:
  0b10001,
  0b00000
};


u32 GetNumericInput() {
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	61 97       	sbiw	r28, 0x11	; 17
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
    u8 Loc_u8key;
    u8 Loc_u8ArrNumStr[16] = "";
     67c:	1b 82       	std	Y+3, r1	; 0x03
     67e:	1a 82       	std	Y+2, r1	; 0x02
     680:	fe 01       	movw	r30, r28
     682:	34 96       	adiw	r30, 0x04	; 4
     684:	8e e0       	ldi	r24, 0x0E	; 14
     686:	df 01       	movw	r26, r30
     688:	1d 92       	st	X+, r1
     68a:	8a 95       	dec	r24
     68c:	e9 f7       	brne	.-6      	; 0x688 <GetNumericInput+0x22>
    u8 Loc_u8Idx = 0;
     68e:	10 e0       	ldi	r17, 0x00	; 0
    u32 Loc_u8Num =0;
    while (1) {
        KEYPAD_tenuErorStatus status = KEYPAD_u8GetKeyState(&Loc_u8key);
     690:	ce 01       	movw	r24, r28
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	0e 94 50 01 	call	0x2a0	; 0x2a0 <KEYPAD_u8GetKeyState>

        switch (status) {
     698:	81 11       	cpse	r24, r1
     69a:	fa cf       	rjmp	.-12     	; 0x690 <GetNumericInput+0x2a>
            case KEYPAD_OK:
                if (Loc_u8key >= '0' && Loc_u8key <= '9') {
     69c:	89 81       	ldd	r24, Y+1	; 0x01
     69e:	90 ed       	ldi	r25, 0xD0	; 208
     6a0:	98 0f       	add	r25, r24
     6a2:	9a 30       	cpi	r25, 0x0A	; 10
     6a4:	58 f4       	brcc	.+22     	; 0x6bc <GetNumericInput+0x56>
                    Loc_u8ArrNumStr[Loc_u8Idx] = Loc_u8key;
     6a6:	e2 e0       	ldi	r30, 0x02	; 2
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	ec 0f       	add	r30, r28
     6ac:	fd 1f       	adc	r31, r29
     6ae:	e1 0f       	add	r30, r17
     6b0:	f1 1d       	adc	r31, r1
     6b2:	80 83       	st	Z, r24
                    Loc_u8Idx++;
     6b4:	1f 5f       	subi	r17, 0xFF	; 255
                    LCD_VOidSendChar(Loc_u8key);
     6b6:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_VOidSendChar>
     6ba:	ea cf       	rjmp	.-44     	; 0x690 <GetNumericInput+0x2a>
                } else if (Loc_u8key == '=') {
     6bc:	8d 33       	cpi	r24, 0x3D	; 61
     6be:	81 f4       	brne	.+32     	; 0x6e0 <GetNumericInput+0x7a>
                    Loc_u8ArrNumStr[Loc_u8Idx] = '\0';
     6c0:	e2 e0       	ldi	r30, 0x02	; 2
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	ec 0f       	add	r30, r28
     6c6:	fd 1f       	adc	r31, r29
     6c8:	e1 0f       	add	r30, r17
     6ca:	f1 1d       	adc	r31, r1
     6cc:	10 82       	st	Z, r1
                     Loc_u8Num = atoi(Loc_u8ArrNumStr);
     6ce:	ce 01       	movw	r24, r28
     6d0:	02 96       	adiw	r24, 0x02	; 2
     6d2:	0e 94 88 06 	call	0xd10	; 0xd10 <atoi>
     6d6:	bc 01       	movw	r22, r24
     6d8:	99 0f       	add	r25, r25
     6da:	88 0b       	sbc	r24, r24
     6dc:	99 0b       	sbc	r25, r25
                    return Loc_u8Num;
     6de:	36 c0       	rjmp	.+108    	; 0x74c <GetNumericInput+0xe6>
                }else if (Loc_u8key == '+' || Loc_u8key == '-'  || Loc_u8key == '/') {
     6e0:	8b 32       	cpi	r24, 0x2B	; 43
     6e2:	21 f0       	breq	.+8      	; 0x6ec <GetNumericInput+0x86>
     6e4:	8d 32       	cpi	r24, 0x2D	; 45
     6e6:	11 f0       	breq	.+4      	; 0x6ec <GetNumericInput+0x86>
     6e8:	8f 32       	cpi	r24, 0x2F	; 47
     6ea:	99 f4       	brne	.+38     	; 0x712 <GetNumericInput+0xac>
                    
                    LCD_VOidSendChar(Loc_u8key);
     6ec:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_VOidSendChar>
                    Global_u8Operator = Loc_u8key;
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__data_end>
                    Loc_u8ArrNumStr[Loc_u8Idx] = '\0';
     6f6:	e2 e0       	ldi	r30, 0x02	; 2
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	ec 0f       	add	r30, r28
     6fc:	fd 1f       	adc	r31, r29
     6fe:	e1 0f       	add	r30, r17
     700:	f1 1d       	adc	r31, r1
     702:	10 82       	st	Z, r1
                     Loc_u8Num = atof(Loc_u8ArrNumStr);
     704:	ce 01       	movw	r24, r28
     706:	02 96       	adiw	r24, 0x02	; 2
     708:	0e 94 84 06 	call	0xd08	; 0xd08 <atof>
     70c:	0e 94 14 05 	call	0xa28	; 0xa28 <__fixunssfsi>
                    return Loc_u8Num;
     710:	1d c0       	rjmp	.+58     	; 0x74c <GetNumericInput+0xe6>
                } else if (Loc_u8key == '*' ) {
     712:	8a 32       	cpi	r24, 0x2A	; 42
     714:	a1 f4       	brne	.+40     	; 0x73e <GetNumericInput+0xd8>
                    LCD_VOidSendChar(0);
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_VOidSendChar>
                    Global_u8Operator = Loc_u8key;
     71c:	89 81       	ldd	r24, Y+1	; 0x01
     71e:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__data_end>
                    Loc_u8ArrNumStr[Loc_u8Idx] = '\0';
     722:	e2 e0       	ldi	r30, 0x02	; 2
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	ec 0f       	add	r30, r28
     728:	fd 1f       	adc	r31, r29
     72a:	e1 0f       	add	r30, r17
     72c:	f1 1d       	adc	r31, r1
     72e:	10 82       	st	Z, r1
                     Loc_u8Num = atof(Loc_u8ArrNumStr);
     730:	ce 01       	movw	r24, r28
     732:	02 96       	adiw	r24, 0x02	; 2
     734:	0e 94 84 06 	call	0xd08	; 0xd08 <atof>
     738:	0e 94 14 05 	call	0xa28	; 0xa28 <__fixunssfsi>
                    return Loc_u8Num;
     73c:	07 c0       	rjmp	.+14     	; 0x74c <GetNumericInput+0xe6>
                }
                else if (Loc_u8key == 'C') {
     73e:	83 34       	cpi	r24, 0x43	; 67
     740:	09 f0       	breq	.+2      	; 0x744 <GetNumericInput+0xde>
     742:	a6 cf       	rjmp	.-180    	; 0x690 <GetNumericInput+0x2a>
                    LCD_VoidClear();
     744:	0e 94 01 03 	call	0x602	; 0x602 <LCD_VoidClear>
                    Loc_u8Idx = 0;
     748:	10 e0       	ldi	r17, 0x00	; 0
     74a:	a2 cf       	rjmp	.-188    	; 0x690 <GetNumericInput+0x2a>
            default:
                
                break;
        }
    }
}
     74c:	61 96       	adiw	r28, 0x11	; 17
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	f8 94       	cli
     752:	de bf       	out	0x3e, r29	; 62
     754:	0f be       	out	0x3f, r0	; 63
     756:	cd bf       	out	0x3d, r28	; 61
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	1f 91       	pop	r17
     75e:	08 95       	ret

00000760 <main>:


int main() {
        PORT_VoidInit();
     760:	0e 94 24 04 	call	0x848	; 0x848 <PORT_VoidInit>
        LCD_VoidInit();
     764:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_VoidInit>
        LCD_VoidClear();
     768:	0e 94 01 03 	call	0x602	; 0x602 <LCD_VoidClear>
        LCD_VoidCreateSpectialChar(0,Global_u8arrCustomCharCrossSign);
     76c:	6e ea       	ldi	r22, 0xAE	; 174
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	0e 94 12 03 	call	0x624	; 0x624 <LCD_VoidCreateSpectialChar>
        float Loc_f32Num1;
        float Loc_f32Num2; 
        float Loc_f32Result;

    while (1) {
        LCD_Goto_xy(LCD_ROW_0, LCD_COL_0);
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_Goto_xy>
         Loc_f32Num1 = GetNumericInput();
     77e:	0e 94 33 03 	call	0x666	; 0x666 <GetNumericInput>
     782:	0e 94 43 05 	call	0xa86	; 0xa86 <__floatunsisf>
     786:	4b 01       	movw	r8, r22
     788:	5c 01       	movw	r10, r24
         Loc_f32Num2 = GetNumericInput();
     78a:	0e 94 33 03 	call	0x666	; 0x666 <GetNumericInput>
     78e:	0e 94 43 05 	call	0xa86	; 0xa86 <__floatunsisf>
     792:	6b 01       	movw	r12, r22
     794:	7c 01       	movw	r14, r24
        

        switch (Global_u8Operator) {
     796:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__data_end>
     79a:	8b 32       	cpi	r24, 0x2B	; 43
     79c:	49 f0       	breq	.+18     	; 0x7b0 <main+0x50>
     79e:	18 f4       	brcc	.+6      	; 0x7a6 <main+0x46>
     7a0:	8a 32       	cpi	r24, 0x2A	; 42
     7a2:	c1 f0       	breq	.+48     	; 0x7d4 <main+0x74>
     7a4:	3d c0       	rjmp	.+122    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     7a6:	8d 32       	cpi	r24, 0x2D	; 45
     7a8:	61 f0       	breq	.+24     	; 0x7c2 <main+0x62>
     7aa:	8f 32       	cpi	r24, 0x2F	; 47
     7ac:	e1 f0       	breq	.+56     	; 0x7e6 <main+0x86>
     7ae:	38 c0       	rjmp	.+112    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
            case '+':
                Loc_f32Result = Loc_f32Num1 + Loc_f32Num2;
     7b0:	a7 01       	movw	r20, r14
     7b2:	96 01       	movw	r18, r12
     7b4:	c5 01       	movw	r24, r10
     7b6:	b4 01       	movw	r22, r8
     7b8:	0e 94 31 04 	call	0x862	; 0x862 <__addsf3>
     7bc:	6b 01       	movw	r12, r22
     7be:	7c 01       	movw	r14, r24
                break;
     7c0:	3a c0       	rjmp	.+116    	; 0x836 <__DATA_REGION_LENGTH__+0x36>
            case '-':
                Loc_f32Result = (Loc_f32Num1 - Loc_f32Num2);
     7c2:	a7 01       	movw	r20, r14
     7c4:	96 01       	movw	r18, r12
     7c6:	c5 01       	movw	r24, r10
     7c8:	b4 01       	movw	r22, r8
     7ca:	0e 94 30 04 	call	0x860	; 0x860 <__subsf3>
     7ce:	6b 01       	movw	r12, r22
     7d0:	7c 01       	movw	r14, r24
                break;
     7d2:	31 c0       	rjmp	.+98     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
            case '*':
                Loc_f32Result = Loc_f32Num1 * Loc_f32Num2;
     7d4:	a7 01       	movw	r20, r14
     7d6:	96 01       	movw	r18, r12
     7d8:	c5 01       	movw	r24, r10
     7da:	b4 01       	movw	r22, r8
     7dc:	0e 94 f5 05 	call	0xbea	; 0xbea <__mulsf3>
     7e0:	6b 01       	movw	r12, r22
     7e2:	7c 01       	movw	r14, r24
                break;
     7e4:	28 c0       	rjmp	.+80     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
            case '/':
                if (Loc_f32Num2 != 0) {
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	a9 01       	movw	r20, r18
     7ec:	c7 01       	movw	r24, r14
     7ee:	b6 01       	movw	r22, r12
     7f0:	0e 94 9d 04 	call	0x93a	; 0x93a <__cmpsf2>
     7f4:	88 23       	and	r24, r24
     7f6:	49 f0       	breq	.+18     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
                    Loc_f32Result = Loc_f32Num1 / Loc_f32Num2;
     7f8:	a7 01       	movw	r20, r14
     7fa:	96 01       	movw	r18, r12
     7fc:	c5 01       	movw	r24, r10
     7fe:	b4 01       	movw	r22, r8
     800:	0e 94 a2 04 	call	0x944	; 0x944 <__divsf3>
     804:	6b 01       	movw	r12, r22
     806:	7c 01       	movw	r14, r24
                    LCD_VoidClear();
                    LCD_Goto_xy(LCD_ROW_0, LCD_COL_0);
                    LCD_VoidSendString("Error: Division by 0");
                    continue;
                }
                break;
     808:	16 c0       	rjmp	.+44     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
                break;
            case '/':
                if (Loc_f32Num2 != 0) {
                    Loc_f32Result = Loc_f32Num1 / Loc_f32Num2;
                } else {
                    LCD_VoidClear();
     80a:	0e 94 01 03 	call	0x602	; 0x602 <LCD_VoidClear>
                    LCD_Goto_xy(LCD_ROW_0, LCD_COL_0);
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_Goto_xy>
                    LCD_VoidSendString("Error: Division by 0");
     816:	88 e7       	ldi	r24, 0x78	; 120
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_VoidSendString>
                    continue;
     81e:	ab cf       	rjmp	.-170    	; 0x776 <main+0x16>
                }
                break;
            default:
                LCD_VoidClear();
     820:	0e 94 01 03 	call	0x602	; 0x602 <LCD_VoidClear>
                LCD_Goto_xy(LCD_ROW_0, LCD_COL_0);
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_Goto_xy>
                LCD_VoidSendString("Error: Invalid Global_u8Operator");
     82c:	8d e8       	ldi	r24, 0x8D	; 141
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_VoidSendString>
                continue;
     834:	a0 cf       	rjmp	.-192    	; 0x776 <main+0x16>
        }

        LCD_Goto_xy(LCD_ROW_3, LCD_COL_14);
     836:	6e e0       	ldi	r22, 0x0E	; 14
     838:	84 e5       	ldi	r24, 0x54	; 84
     83a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_Goto_xy>
        
        LCD_VoidSendNumbers(Loc_f32Result);
     83e:	c7 01       	movw	r24, r14
     840:	b6 01       	movw	r22, r12
     842:	0e 94 80 02 	call	0x500	; 0x500 <LCD_VoidSendNumbers>
     846:	97 cf       	rjmp	.-210    	; 0x776 <main+0x16>

00000848 <PORT_VoidInit>:
	#define PORT_INPUT_FLOATING 0

	#undef PORT_INPUT_PULLUP
	#define PORT_INPUT_PULLUP 0
   
	DDRA_Reg = CONC(PORT_PA7_INTIAL_STATE,PORT_PA6_INTIAL_STATE,PORT_PA5_INTIAL_STATE,PORT_PA4_INTIAL_STATE,PORT_PA3_INTIAL_STATE,PORT_PA2_INTIAL_STATE,PORT_PA1_INTIAL_STATE,PORT_PA0_INTIAL_STATE);
     848:	8f ef       	ldi	r24, 0xFF	; 255
     84a:	8a bb       	out	0x1a, r24	; 26
    
	DDRB_Reg = CONC(PORT_PB7_INTIAL_STATE,PORT_PB6_INTIAL_STATE,PORT_PB5_INTIAL_STATE,PORT_PB4_INTIAL_STATE,PORT_PB3_INTIAL_STATE,PORT_PB2_INTIAL_STATE,PORT_PB1_INTIAL_STATE,PORT_PB0_INTIAL_STATE);
     84c:	9f e0       	ldi	r25, 0x0F	; 15
     84e:	97 bb       	out	0x17, r25	; 23
   
	DDRC_Reg = CONC(PORT_PC7_INTIAL_STATE,PORT_PC6_INTIAL_STATE,PORT_PC5_INTIAL_STATE,PORT_PC4_INTIAL_STATE,PORT_PC3_INTIAL_STATE,PORT_PC2_INTIAL_STATE,PORT_PC1_INTIAL_STATE,PORT_PC0_INTIAL_STATE);
     850:	84 bb       	out	0x14, r24	; 20
                  
	DDRD_Reg = CONC(PORT_PD7_INTIAL_STATE,PORT_PD6_INTIAL_STATE,PORT_PD5_INTIAL_STATE,PORT_PD4_INTIAL_STATE,PORT_PD3_INTIAL_STATE,PORT_PD2_INTIAL_STATE,PORT_PD1_INTIAL_STATE,PORT_PD0_INTIAL_STATE);	
     852:	81 bb       	out	0x11, r24	; 17

	#undef PORT_INPUT_PULLUP
	#define PORT_INPUT_PULLUP 1											 


	PORTA_Reg = CONC(PORT_PA7_INTIAL_STATE,PORT_PA6_INTIAL_STATE,PORT_PA5_INTIAL_STATE,PORT_PA4_INTIAL_STATE,PORT_PA3_INTIAL_STATE,PORT_PA2_INTIAL_STATE,PORT_PA1_INTIAL_STATE,PORT_PA0_INTIAL_STATE);
     854:	1b ba       	out	0x1b, r1	; 27
	
    PORTB_Reg = CONC(PORT_PB7_INTIAL_STATE,PORT_PB6_INTIAL_STATE,PORT_PB5_INTIAL_STATE,PORT_PB4_INTIAL_STATE,PORT_PB3_INTIAL_STATE,PORT_PB2_INTIAL_STATE,PORT_PB1_INTIAL_STATE,PORT_PB0_INTIAL_STATE);
     856:	90 ef       	ldi	r25, 0xF0	; 240
     858:	98 bb       	out	0x18, r25	; 24

	PORTC_Reg = CONC(PORT_PC7_INTIAL_STATE,PORT_PC6_INTIAL_STATE,PORT_PC5_INTIAL_STATE,PORT_PC4_INTIAL_STATE,PORT_PC3_INTIAL_STATE,PORT_PC2_INTIAL_STATE,PORT_PC1_INTIAL_STATE,PORT_PC0_INTIAL_STATE);  
     85a:	15 ba       	out	0x15, r1	; 21

 	PORTD_Reg = CONC(PORT_PD7_INTIAL_STATE,PORT_PD6_INTIAL_STATE,PORT_PD5_INTIAL_STATE,PORT_PD4_INTIAL_STATE,PORT_PD3_INTIAL_STATE,PORT_PD2_INTIAL_STATE,PORT_PD1_INTIAL_STATE,PORT_PD0_INTIAL_STATE);  
     85c:	82 bb       	out	0x12, r24	; 18
     85e:	08 95       	ret

00000860 <__subsf3>:
     860:	50 58       	subi	r21, 0x80	; 128

00000862 <__addsf3>:
     862:	bb 27       	eor	r27, r27
     864:	aa 27       	eor	r26, r26
     866:	0e 94 48 04 	call	0x890	; 0x890 <__addsf3x>
     86a:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__fp_round>
     86e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_pscA>
     872:	38 f0       	brcs	.+14     	; 0x882 <__addsf3+0x20>
     874:	0e 94 b4 05 	call	0xb68	; 0xb68 <__fp_pscB>
     878:	20 f0       	brcs	.+8      	; 0x882 <__addsf3+0x20>
     87a:	39 f4       	brne	.+14     	; 0x88a <__addsf3+0x28>
     87c:	9f 3f       	cpi	r25, 0xFF	; 255
     87e:	19 f4       	brne	.+6      	; 0x886 <__addsf3+0x24>
     880:	26 f4       	brtc	.+8      	; 0x88a <__addsf3+0x28>
     882:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_nan>
     886:	0e f4       	brtc	.+2      	; 0x88a <__addsf3+0x28>
     888:	e0 95       	com	r30
     88a:	e7 fb       	bst	r30, 7
     88c:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_inf>

00000890 <__addsf3x>:
     890:	e9 2f       	mov	r30, r25
     892:	0e 94 cc 05 	call	0xb98	; 0xb98 <__fp_split3>
     896:	58 f3       	brcs	.-42     	; 0x86e <__addsf3+0xc>
     898:	ba 17       	cp	r27, r26
     89a:	62 07       	cpc	r22, r18
     89c:	73 07       	cpc	r23, r19
     89e:	84 07       	cpc	r24, r20
     8a0:	95 07       	cpc	r25, r21
     8a2:	20 f0       	brcs	.+8      	; 0x8ac <__addsf3x+0x1c>
     8a4:	79 f4       	brne	.+30     	; 0x8c4 <__addsf3x+0x34>
     8a6:	a6 f5       	brtc	.+104    	; 0x910 <__addsf3x+0x80>
     8a8:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_zero>
     8ac:	0e f4       	brtc	.+2      	; 0x8b0 <__addsf3x+0x20>
     8ae:	e0 95       	com	r30
     8b0:	0b 2e       	mov	r0, r27
     8b2:	ba 2f       	mov	r27, r26
     8b4:	a0 2d       	mov	r26, r0
     8b6:	0b 01       	movw	r0, r22
     8b8:	b9 01       	movw	r22, r18
     8ba:	90 01       	movw	r18, r0
     8bc:	0c 01       	movw	r0, r24
     8be:	ca 01       	movw	r24, r20
     8c0:	a0 01       	movw	r20, r0
     8c2:	11 24       	eor	r1, r1
     8c4:	ff 27       	eor	r31, r31
     8c6:	59 1b       	sub	r21, r25
     8c8:	99 f0       	breq	.+38     	; 0x8f0 <__addsf3x+0x60>
     8ca:	59 3f       	cpi	r21, 0xF9	; 249
     8cc:	50 f4       	brcc	.+20     	; 0x8e2 <__addsf3x+0x52>
     8ce:	50 3e       	cpi	r21, 0xE0	; 224
     8d0:	68 f1       	brcs	.+90     	; 0x92c <__addsf3x+0x9c>
     8d2:	1a 16       	cp	r1, r26
     8d4:	f0 40       	sbci	r31, 0x00	; 0
     8d6:	a2 2f       	mov	r26, r18
     8d8:	23 2f       	mov	r18, r19
     8da:	34 2f       	mov	r19, r20
     8dc:	44 27       	eor	r20, r20
     8de:	58 5f       	subi	r21, 0xF8	; 248
     8e0:	f3 cf       	rjmp	.-26     	; 0x8c8 <__addsf3x+0x38>
     8e2:	46 95       	lsr	r20
     8e4:	37 95       	ror	r19
     8e6:	27 95       	ror	r18
     8e8:	a7 95       	ror	r26
     8ea:	f0 40       	sbci	r31, 0x00	; 0
     8ec:	53 95       	inc	r21
     8ee:	c9 f7       	brne	.-14     	; 0x8e2 <__addsf3x+0x52>
     8f0:	7e f4       	brtc	.+30     	; 0x910 <__addsf3x+0x80>
     8f2:	1f 16       	cp	r1, r31
     8f4:	ba 0b       	sbc	r27, r26
     8f6:	62 0b       	sbc	r22, r18
     8f8:	73 0b       	sbc	r23, r19
     8fa:	84 0b       	sbc	r24, r20
     8fc:	ba f0       	brmi	.+46     	; 0x92c <__addsf3x+0x9c>
     8fe:	91 50       	subi	r25, 0x01	; 1
     900:	a1 f0       	breq	.+40     	; 0x92a <__addsf3x+0x9a>
     902:	ff 0f       	add	r31, r31
     904:	bb 1f       	adc	r27, r27
     906:	66 1f       	adc	r22, r22
     908:	77 1f       	adc	r23, r23
     90a:	88 1f       	adc	r24, r24
     90c:	c2 f7       	brpl	.-16     	; 0x8fe <__addsf3x+0x6e>
     90e:	0e c0       	rjmp	.+28     	; 0x92c <__addsf3x+0x9c>
     910:	ba 0f       	add	r27, r26
     912:	62 1f       	adc	r22, r18
     914:	73 1f       	adc	r23, r19
     916:	84 1f       	adc	r24, r20
     918:	48 f4       	brcc	.+18     	; 0x92c <__addsf3x+0x9c>
     91a:	87 95       	ror	r24
     91c:	77 95       	ror	r23
     91e:	67 95       	ror	r22
     920:	b7 95       	ror	r27
     922:	f7 95       	ror	r31
     924:	9e 3f       	cpi	r25, 0xFE	; 254
     926:	08 f0       	brcs	.+2      	; 0x92a <__addsf3x+0x9a>
     928:	b0 cf       	rjmp	.-160    	; 0x88a <__addsf3+0x28>
     92a:	93 95       	inc	r25
     92c:	88 0f       	add	r24, r24
     92e:	08 f0       	brcs	.+2      	; 0x932 <__addsf3x+0xa2>
     930:	99 27       	eor	r25, r25
     932:	ee 0f       	add	r30, r30
     934:	97 95       	ror	r25
     936:	87 95       	ror	r24
     938:	08 95       	ret

0000093a <__cmpsf2>:
     93a:	0e 94 80 05 	call	0xb00	; 0xb00 <__fp_cmp>
     93e:	08 f4       	brcc	.+2      	; 0x942 <__cmpsf2+0x8>
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	08 95       	ret

00000944 <__divsf3>:
     944:	0e 94 b6 04 	call	0x96c	; 0x96c <__divsf3x>
     948:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__fp_round>
     94c:	0e 94 b4 05 	call	0xb68	; 0xb68 <__fp_pscB>
     950:	58 f0       	brcs	.+22     	; 0x968 <__divsf3+0x24>
     952:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_pscA>
     956:	40 f0       	brcs	.+16     	; 0x968 <__divsf3+0x24>
     958:	29 f4       	brne	.+10     	; 0x964 <__divsf3+0x20>
     95a:	5f 3f       	cpi	r21, 0xFF	; 255
     95c:	29 f0       	breq	.+10     	; 0x968 <__divsf3+0x24>
     95e:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_inf>
     962:	51 11       	cpse	r21, r1
     964:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__fp_szero>
     968:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_nan>

0000096c <__divsf3x>:
     96c:	0e 94 cc 05 	call	0xb98	; 0xb98 <__fp_split3>
     970:	68 f3       	brcs	.-38     	; 0x94c <__divsf3+0x8>

00000972 <__divsf3_pse>:
     972:	99 23       	and	r25, r25
     974:	b1 f3       	breq	.-20     	; 0x962 <__divsf3+0x1e>
     976:	55 23       	and	r21, r21
     978:	91 f3       	breq	.-28     	; 0x95e <__divsf3+0x1a>
     97a:	95 1b       	sub	r25, r21
     97c:	55 0b       	sbc	r21, r21
     97e:	bb 27       	eor	r27, r27
     980:	aa 27       	eor	r26, r26
     982:	62 17       	cp	r22, r18
     984:	73 07       	cpc	r23, r19
     986:	84 07       	cpc	r24, r20
     988:	38 f0       	brcs	.+14     	; 0x998 <__divsf3_pse+0x26>
     98a:	9f 5f       	subi	r25, 0xFF	; 255
     98c:	5f 4f       	sbci	r21, 0xFF	; 255
     98e:	22 0f       	add	r18, r18
     990:	33 1f       	adc	r19, r19
     992:	44 1f       	adc	r20, r20
     994:	aa 1f       	adc	r26, r26
     996:	a9 f3       	breq	.-22     	; 0x982 <__divsf3_pse+0x10>
     998:	35 d0       	rcall	.+106    	; 0xa04 <__divsf3_pse+0x92>
     99a:	0e 2e       	mov	r0, r30
     99c:	3a f0       	brmi	.+14     	; 0x9ac <__divsf3_pse+0x3a>
     99e:	e0 e8       	ldi	r30, 0x80	; 128
     9a0:	32 d0       	rcall	.+100    	; 0xa06 <__divsf3_pse+0x94>
     9a2:	91 50       	subi	r25, 0x01	; 1
     9a4:	50 40       	sbci	r21, 0x00	; 0
     9a6:	e6 95       	lsr	r30
     9a8:	00 1c       	adc	r0, r0
     9aa:	ca f7       	brpl	.-14     	; 0x99e <__divsf3_pse+0x2c>
     9ac:	2b d0       	rcall	.+86     	; 0xa04 <__divsf3_pse+0x92>
     9ae:	fe 2f       	mov	r31, r30
     9b0:	29 d0       	rcall	.+82     	; 0xa04 <__divsf3_pse+0x92>
     9b2:	66 0f       	add	r22, r22
     9b4:	77 1f       	adc	r23, r23
     9b6:	88 1f       	adc	r24, r24
     9b8:	bb 1f       	adc	r27, r27
     9ba:	26 17       	cp	r18, r22
     9bc:	37 07       	cpc	r19, r23
     9be:	48 07       	cpc	r20, r24
     9c0:	ab 07       	cpc	r26, r27
     9c2:	b0 e8       	ldi	r27, 0x80	; 128
     9c4:	09 f0       	breq	.+2      	; 0x9c8 <__divsf3_pse+0x56>
     9c6:	bb 0b       	sbc	r27, r27
     9c8:	80 2d       	mov	r24, r0
     9ca:	bf 01       	movw	r22, r30
     9cc:	ff 27       	eor	r31, r31
     9ce:	93 58       	subi	r25, 0x83	; 131
     9d0:	5f 4f       	sbci	r21, 0xFF	; 255
     9d2:	3a f0       	brmi	.+14     	; 0x9e2 <__divsf3_pse+0x70>
     9d4:	9e 3f       	cpi	r25, 0xFE	; 254
     9d6:	51 05       	cpc	r21, r1
     9d8:	78 f0       	brcs	.+30     	; 0x9f8 <__divsf3_pse+0x86>
     9da:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_inf>
     9de:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__fp_szero>
     9e2:	5f 3f       	cpi	r21, 0xFF	; 255
     9e4:	e4 f3       	brlt	.-8      	; 0x9de <__divsf3_pse+0x6c>
     9e6:	98 3e       	cpi	r25, 0xE8	; 232
     9e8:	d4 f3       	brlt	.-12     	; 0x9de <__divsf3_pse+0x6c>
     9ea:	86 95       	lsr	r24
     9ec:	77 95       	ror	r23
     9ee:	67 95       	ror	r22
     9f0:	b7 95       	ror	r27
     9f2:	f7 95       	ror	r31
     9f4:	9f 5f       	subi	r25, 0xFF	; 255
     9f6:	c9 f7       	brne	.-14     	; 0x9ea <__divsf3_pse+0x78>
     9f8:	88 0f       	add	r24, r24
     9fa:	91 1d       	adc	r25, r1
     9fc:	96 95       	lsr	r25
     9fe:	87 95       	ror	r24
     a00:	97 f9       	bld	r25, 7
     a02:	08 95       	ret
     a04:	e1 e0       	ldi	r30, 0x01	; 1
     a06:	66 0f       	add	r22, r22
     a08:	77 1f       	adc	r23, r23
     a0a:	88 1f       	adc	r24, r24
     a0c:	bb 1f       	adc	r27, r27
     a0e:	62 17       	cp	r22, r18
     a10:	73 07       	cpc	r23, r19
     a12:	84 07       	cpc	r24, r20
     a14:	ba 07       	cpc	r27, r26
     a16:	20 f0       	brcs	.+8      	; 0xa20 <__divsf3_pse+0xae>
     a18:	62 1b       	sub	r22, r18
     a1a:	73 0b       	sbc	r23, r19
     a1c:	84 0b       	sbc	r24, r20
     a1e:	ba 0b       	sbc	r27, r26
     a20:	ee 1f       	adc	r30, r30
     a22:	88 f7       	brcc	.-30     	; 0xa06 <__divsf3_pse+0x94>
     a24:	e0 95       	com	r30
     a26:	08 95       	ret

00000a28 <__fixunssfsi>:
     a28:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_splitA>
     a2c:	88 f0       	brcs	.+34     	; 0xa50 <__fixunssfsi+0x28>
     a2e:	9f 57       	subi	r25, 0x7F	; 127
     a30:	98 f0       	brcs	.+38     	; 0xa58 <__fixunssfsi+0x30>
     a32:	b9 2f       	mov	r27, r25
     a34:	99 27       	eor	r25, r25
     a36:	b7 51       	subi	r27, 0x17	; 23
     a38:	b0 f0       	brcs	.+44     	; 0xa66 <__fixunssfsi+0x3e>
     a3a:	e1 f0       	breq	.+56     	; 0xa74 <__fixunssfsi+0x4c>
     a3c:	66 0f       	add	r22, r22
     a3e:	77 1f       	adc	r23, r23
     a40:	88 1f       	adc	r24, r24
     a42:	99 1f       	adc	r25, r25
     a44:	1a f0       	brmi	.+6      	; 0xa4c <__fixunssfsi+0x24>
     a46:	ba 95       	dec	r27
     a48:	c9 f7       	brne	.-14     	; 0xa3c <__fixunssfsi+0x14>
     a4a:	14 c0       	rjmp	.+40     	; 0xa74 <__fixunssfsi+0x4c>
     a4c:	b1 30       	cpi	r27, 0x01	; 1
     a4e:	91 f0       	breq	.+36     	; 0xa74 <__fixunssfsi+0x4c>
     a50:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fp_zero>
     a54:	b1 e0       	ldi	r27, 0x01	; 1
     a56:	08 95       	ret
     a58:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_zero>
     a5c:	67 2f       	mov	r22, r23
     a5e:	78 2f       	mov	r23, r24
     a60:	88 27       	eor	r24, r24
     a62:	b8 5f       	subi	r27, 0xF8	; 248
     a64:	39 f0       	breq	.+14     	; 0xa74 <__fixunssfsi+0x4c>
     a66:	b9 3f       	cpi	r27, 0xF9	; 249
     a68:	cc f3       	brlt	.-14     	; 0xa5c <__fixunssfsi+0x34>
     a6a:	86 95       	lsr	r24
     a6c:	77 95       	ror	r23
     a6e:	67 95       	ror	r22
     a70:	b3 95       	inc	r27
     a72:	d9 f7       	brne	.-10     	; 0xa6a <__fixunssfsi+0x42>
     a74:	3e f4       	brtc	.+14     	; 0xa84 <__fixunssfsi+0x5c>
     a76:	90 95       	com	r25
     a78:	80 95       	com	r24
     a7a:	70 95       	com	r23
     a7c:	61 95       	neg	r22
     a7e:	7f 4f       	sbci	r23, 0xFF	; 255
     a80:	8f 4f       	sbci	r24, 0xFF	; 255
     a82:	9f 4f       	sbci	r25, 0xFF	; 255
     a84:	08 95       	ret

00000a86 <__floatunsisf>:
     a86:	e8 94       	clt
     a88:	09 c0       	rjmp	.+18     	; 0xa9c <__floatsisf+0x12>

00000a8a <__floatsisf>:
     a8a:	97 fb       	bst	r25, 7
     a8c:	3e f4       	brtc	.+14     	; 0xa9c <__floatsisf+0x12>
     a8e:	90 95       	com	r25
     a90:	80 95       	com	r24
     a92:	70 95       	com	r23
     a94:	61 95       	neg	r22
     a96:	7f 4f       	sbci	r23, 0xFF	; 255
     a98:	8f 4f       	sbci	r24, 0xFF	; 255
     a9a:	9f 4f       	sbci	r25, 0xFF	; 255
     a9c:	99 23       	and	r25, r25
     a9e:	a9 f0       	breq	.+42     	; 0xaca <__floatsisf+0x40>
     aa0:	f9 2f       	mov	r31, r25
     aa2:	96 e9       	ldi	r25, 0x96	; 150
     aa4:	bb 27       	eor	r27, r27
     aa6:	93 95       	inc	r25
     aa8:	f6 95       	lsr	r31
     aaa:	87 95       	ror	r24
     aac:	77 95       	ror	r23
     aae:	67 95       	ror	r22
     ab0:	b7 95       	ror	r27
     ab2:	f1 11       	cpse	r31, r1
     ab4:	f8 cf       	rjmp	.-16     	; 0xaa6 <__floatsisf+0x1c>
     ab6:	fa f4       	brpl	.+62     	; 0xaf6 <__floatsisf+0x6c>
     ab8:	bb 0f       	add	r27, r27
     aba:	11 f4       	brne	.+4      	; 0xac0 <__floatsisf+0x36>
     abc:	60 ff       	sbrs	r22, 0
     abe:	1b c0       	rjmp	.+54     	; 0xaf6 <__floatsisf+0x6c>
     ac0:	6f 5f       	subi	r22, 0xFF	; 255
     ac2:	7f 4f       	sbci	r23, 0xFF	; 255
     ac4:	8f 4f       	sbci	r24, 0xFF	; 255
     ac6:	9f 4f       	sbci	r25, 0xFF	; 255
     ac8:	16 c0       	rjmp	.+44     	; 0xaf6 <__floatsisf+0x6c>
     aca:	88 23       	and	r24, r24
     acc:	11 f0       	breq	.+4      	; 0xad2 <__floatsisf+0x48>
     ace:	96 e9       	ldi	r25, 0x96	; 150
     ad0:	11 c0       	rjmp	.+34     	; 0xaf4 <__floatsisf+0x6a>
     ad2:	77 23       	and	r23, r23
     ad4:	21 f0       	breq	.+8      	; 0xade <__floatsisf+0x54>
     ad6:	9e e8       	ldi	r25, 0x8E	; 142
     ad8:	87 2f       	mov	r24, r23
     ada:	76 2f       	mov	r23, r22
     adc:	05 c0       	rjmp	.+10     	; 0xae8 <__floatsisf+0x5e>
     ade:	66 23       	and	r22, r22
     ae0:	71 f0       	breq	.+28     	; 0xafe <__floatsisf+0x74>
     ae2:	96 e8       	ldi	r25, 0x86	; 134
     ae4:	86 2f       	mov	r24, r22
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	2a f0       	brmi	.+10     	; 0xaf6 <__floatsisf+0x6c>
     aec:	9a 95       	dec	r25
     aee:	66 0f       	add	r22, r22
     af0:	77 1f       	adc	r23, r23
     af2:	88 1f       	adc	r24, r24
     af4:	da f7       	brpl	.-10     	; 0xaec <__floatsisf+0x62>
     af6:	88 0f       	add	r24, r24
     af8:	96 95       	lsr	r25
     afa:	87 95       	ror	r24
     afc:	97 f9       	bld	r25, 7
     afe:	08 95       	ret

00000b00 <__fp_cmp>:
     b00:	99 0f       	add	r25, r25
     b02:	00 08       	sbc	r0, r0
     b04:	55 0f       	add	r21, r21
     b06:	aa 0b       	sbc	r26, r26
     b08:	e0 e8       	ldi	r30, 0x80	; 128
     b0a:	fe ef       	ldi	r31, 0xFE	; 254
     b0c:	16 16       	cp	r1, r22
     b0e:	17 06       	cpc	r1, r23
     b10:	e8 07       	cpc	r30, r24
     b12:	f9 07       	cpc	r31, r25
     b14:	c0 f0       	brcs	.+48     	; 0xb46 <__fp_cmp+0x46>
     b16:	12 16       	cp	r1, r18
     b18:	13 06       	cpc	r1, r19
     b1a:	e4 07       	cpc	r30, r20
     b1c:	f5 07       	cpc	r31, r21
     b1e:	98 f0       	brcs	.+38     	; 0xb46 <__fp_cmp+0x46>
     b20:	62 1b       	sub	r22, r18
     b22:	73 0b       	sbc	r23, r19
     b24:	84 0b       	sbc	r24, r20
     b26:	95 0b       	sbc	r25, r21
     b28:	39 f4       	brne	.+14     	; 0xb38 <__fp_cmp+0x38>
     b2a:	0a 26       	eor	r0, r26
     b2c:	61 f0       	breq	.+24     	; 0xb46 <__fp_cmp+0x46>
     b2e:	23 2b       	or	r18, r19
     b30:	24 2b       	or	r18, r20
     b32:	25 2b       	or	r18, r21
     b34:	21 f4       	brne	.+8      	; 0xb3e <__fp_cmp+0x3e>
     b36:	08 95       	ret
     b38:	0a 26       	eor	r0, r26
     b3a:	09 f4       	brne	.+2      	; 0xb3e <__fp_cmp+0x3e>
     b3c:	a1 40       	sbci	r26, 0x01	; 1
     b3e:	a6 95       	lsr	r26
     b40:	8f ef       	ldi	r24, 0xFF	; 255
     b42:	81 1d       	adc	r24, r1
     b44:	81 1d       	adc	r24, r1
     b46:	08 95       	ret

00000b48 <__fp_inf>:
     b48:	97 f9       	bld	r25, 7
     b4a:	9f 67       	ori	r25, 0x7F	; 127
     b4c:	80 e8       	ldi	r24, 0x80	; 128
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	08 95       	ret

00000b54 <__fp_nan>:
     b54:	9f ef       	ldi	r25, 0xFF	; 255
     b56:	80 ec       	ldi	r24, 0xC0	; 192
     b58:	08 95       	ret

00000b5a <__fp_pscA>:
     b5a:	00 24       	eor	r0, r0
     b5c:	0a 94       	dec	r0
     b5e:	16 16       	cp	r1, r22
     b60:	17 06       	cpc	r1, r23
     b62:	18 06       	cpc	r1, r24
     b64:	09 06       	cpc	r0, r25
     b66:	08 95       	ret

00000b68 <__fp_pscB>:
     b68:	00 24       	eor	r0, r0
     b6a:	0a 94       	dec	r0
     b6c:	12 16       	cp	r1, r18
     b6e:	13 06       	cpc	r1, r19
     b70:	14 06       	cpc	r1, r20
     b72:	05 06       	cpc	r0, r21
     b74:	08 95       	ret

00000b76 <__fp_round>:
     b76:	09 2e       	mov	r0, r25
     b78:	03 94       	inc	r0
     b7a:	00 0c       	add	r0, r0
     b7c:	11 f4       	brne	.+4      	; 0xb82 <__fp_round+0xc>
     b7e:	88 23       	and	r24, r24
     b80:	52 f0       	brmi	.+20     	; 0xb96 <__fp_round+0x20>
     b82:	bb 0f       	add	r27, r27
     b84:	40 f4       	brcc	.+16     	; 0xb96 <__fp_round+0x20>
     b86:	bf 2b       	or	r27, r31
     b88:	11 f4       	brne	.+4      	; 0xb8e <__fp_round+0x18>
     b8a:	60 ff       	sbrs	r22, 0
     b8c:	04 c0       	rjmp	.+8      	; 0xb96 <__fp_round+0x20>
     b8e:	6f 5f       	subi	r22, 0xFF	; 255
     b90:	7f 4f       	sbci	r23, 0xFF	; 255
     b92:	8f 4f       	sbci	r24, 0xFF	; 255
     b94:	9f 4f       	sbci	r25, 0xFF	; 255
     b96:	08 95       	ret

00000b98 <__fp_split3>:
     b98:	57 fd       	sbrc	r21, 7
     b9a:	90 58       	subi	r25, 0x80	; 128
     b9c:	44 0f       	add	r20, r20
     b9e:	55 1f       	adc	r21, r21
     ba0:	59 f0       	breq	.+22     	; 0xbb8 <__fp_splitA+0x10>
     ba2:	5f 3f       	cpi	r21, 0xFF	; 255
     ba4:	71 f0       	breq	.+28     	; 0xbc2 <__fp_splitA+0x1a>
     ba6:	47 95       	ror	r20

00000ba8 <__fp_splitA>:
     ba8:	88 0f       	add	r24, r24
     baa:	97 fb       	bst	r25, 7
     bac:	99 1f       	adc	r25, r25
     bae:	61 f0       	breq	.+24     	; 0xbc8 <__fp_splitA+0x20>
     bb0:	9f 3f       	cpi	r25, 0xFF	; 255
     bb2:	79 f0       	breq	.+30     	; 0xbd2 <__fp_splitA+0x2a>
     bb4:	87 95       	ror	r24
     bb6:	08 95       	ret
     bb8:	12 16       	cp	r1, r18
     bba:	13 06       	cpc	r1, r19
     bbc:	14 06       	cpc	r1, r20
     bbe:	55 1f       	adc	r21, r21
     bc0:	f2 cf       	rjmp	.-28     	; 0xba6 <__fp_split3+0xe>
     bc2:	46 95       	lsr	r20
     bc4:	f1 df       	rcall	.-30     	; 0xba8 <__fp_splitA>
     bc6:	08 c0       	rjmp	.+16     	; 0xbd8 <__fp_splitA+0x30>
     bc8:	16 16       	cp	r1, r22
     bca:	17 06       	cpc	r1, r23
     bcc:	18 06       	cpc	r1, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	f1 cf       	rjmp	.-30     	; 0xbb4 <__fp_splitA+0xc>
     bd2:	86 95       	lsr	r24
     bd4:	71 05       	cpc	r23, r1
     bd6:	61 05       	cpc	r22, r1
     bd8:	08 94       	sec
     bda:	08 95       	ret

00000bdc <__fp_zero>:
     bdc:	e8 94       	clt

00000bde <__fp_szero>:
     bde:	bb 27       	eor	r27, r27
     be0:	66 27       	eor	r22, r22
     be2:	77 27       	eor	r23, r23
     be4:	cb 01       	movw	r24, r22
     be6:	97 f9       	bld	r25, 7
     be8:	08 95       	ret

00000bea <__mulsf3>:
     bea:	0e 94 08 06 	call	0xc10	; 0xc10 <__mulsf3x>
     bee:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__fp_round>
     bf2:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_pscA>
     bf6:	38 f0       	brcs	.+14     	; 0xc06 <__mulsf3+0x1c>
     bf8:	0e 94 b4 05 	call	0xb68	; 0xb68 <__fp_pscB>
     bfc:	20 f0       	brcs	.+8      	; 0xc06 <__mulsf3+0x1c>
     bfe:	95 23       	and	r25, r21
     c00:	11 f0       	breq	.+4      	; 0xc06 <__mulsf3+0x1c>
     c02:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_inf>
     c06:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_nan>
     c0a:	11 24       	eor	r1, r1
     c0c:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__fp_szero>

00000c10 <__mulsf3x>:
     c10:	0e 94 cc 05 	call	0xb98	; 0xb98 <__fp_split3>
     c14:	70 f3       	brcs	.-36     	; 0xbf2 <__mulsf3+0x8>

00000c16 <__mulsf3_pse>:
     c16:	95 9f       	mul	r25, r21
     c18:	c1 f3       	breq	.-16     	; 0xc0a <__mulsf3+0x20>
     c1a:	95 0f       	add	r25, r21
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	55 1f       	adc	r21, r21
     c20:	62 9f       	mul	r22, r18
     c22:	f0 01       	movw	r30, r0
     c24:	72 9f       	mul	r23, r18
     c26:	bb 27       	eor	r27, r27
     c28:	f0 0d       	add	r31, r0
     c2a:	b1 1d       	adc	r27, r1
     c2c:	63 9f       	mul	r22, r19
     c2e:	aa 27       	eor	r26, r26
     c30:	f0 0d       	add	r31, r0
     c32:	b1 1d       	adc	r27, r1
     c34:	aa 1f       	adc	r26, r26
     c36:	64 9f       	mul	r22, r20
     c38:	66 27       	eor	r22, r22
     c3a:	b0 0d       	add	r27, r0
     c3c:	a1 1d       	adc	r26, r1
     c3e:	66 1f       	adc	r22, r22
     c40:	82 9f       	mul	r24, r18
     c42:	22 27       	eor	r18, r18
     c44:	b0 0d       	add	r27, r0
     c46:	a1 1d       	adc	r26, r1
     c48:	62 1f       	adc	r22, r18
     c4a:	73 9f       	mul	r23, r19
     c4c:	b0 0d       	add	r27, r0
     c4e:	a1 1d       	adc	r26, r1
     c50:	62 1f       	adc	r22, r18
     c52:	83 9f       	mul	r24, r19
     c54:	a0 0d       	add	r26, r0
     c56:	61 1d       	adc	r22, r1
     c58:	22 1f       	adc	r18, r18
     c5a:	74 9f       	mul	r23, r20
     c5c:	33 27       	eor	r19, r19
     c5e:	a0 0d       	add	r26, r0
     c60:	61 1d       	adc	r22, r1
     c62:	23 1f       	adc	r18, r19
     c64:	84 9f       	mul	r24, r20
     c66:	60 0d       	add	r22, r0
     c68:	21 1d       	adc	r18, r1
     c6a:	82 2f       	mov	r24, r18
     c6c:	76 2f       	mov	r23, r22
     c6e:	6a 2f       	mov	r22, r26
     c70:	11 24       	eor	r1, r1
     c72:	9f 57       	subi	r25, 0x7F	; 127
     c74:	50 40       	sbci	r21, 0x00	; 0
     c76:	9a f0       	brmi	.+38     	; 0xc9e <__mulsf3_pse+0x88>
     c78:	f1 f0       	breq	.+60     	; 0xcb6 <__mulsf3_pse+0xa0>
     c7a:	88 23       	and	r24, r24
     c7c:	4a f0       	brmi	.+18     	; 0xc90 <__mulsf3_pse+0x7a>
     c7e:	ee 0f       	add	r30, r30
     c80:	ff 1f       	adc	r31, r31
     c82:	bb 1f       	adc	r27, r27
     c84:	66 1f       	adc	r22, r22
     c86:	77 1f       	adc	r23, r23
     c88:	88 1f       	adc	r24, r24
     c8a:	91 50       	subi	r25, 0x01	; 1
     c8c:	50 40       	sbci	r21, 0x00	; 0
     c8e:	a9 f7       	brne	.-22     	; 0xc7a <__mulsf3_pse+0x64>
     c90:	9e 3f       	cpi	r25, 0xFE	; 254
     c92:	51 05       	cpc	r21, r1
     c94:	80 f0       	brcs	.+32     	; 0xcb6 <__mulsf3_pse+0xa0>
     c96:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_inf>
     c9a:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__fp_szero>
     c9e:	5f 3f       	cpi	r21, 0xFF	; 255
     ca0:	e4 f3       	brlt	.-8      	; 0xc9a <__mulsf3_pse+0x84>
     ca2:	98 3e       	cpi	r25, 0xE8	; 232
     ca4:	d4 f3       	brlt	.-12     	; 0xc9a <__mulsf3_pse+0x84>
     ca6:	86 95       	lsr	r24
     ca8:	77 95       	ror	r23
     caa:	67 95       	ror	r22
     cac:	b7 95       	ror	r27
     cae:	f7 95       	ror	r31
     cb0:	e7 95       	ror	r30
     cb2:	9f 5f       	subi	r25, 0xFF	; 255
     cb4:	c1 f7       	brne	.-16     	; 0xca6 <__mulsf3_pse+0x90>
     cb6:	fe 2b       	or	r31, r30
     cb8:	88 0f       	add	r24, r24
     cba:	91 1d       	adc	r25, r1
     cbc:	96 95       	lsr	r25
     cbe:	87 95       	ror	r24
     cc0:	97 f9       	bld	r25, 7
     cc2:	08 95       	ret

00000cc4 <__udivmodsi4>:
     cc4:	a1 e2       	ldi	r26, 0x21	; 33
     cc6:	1a 2e       	mov	r1, r26
     cc8:	aa 1b       	sub	r26, r26
     cca:	bb 1b       	sub	r27, r27
     ccc:	fd 01       	movw	r30, r26
     cce:	0d c0       	rjmp	.+26     	; 0xcea <__udivmodsi4_ep>

00000cd0 <__udivmodsi4_loop>:
     cd0:	aa 1f       	adc	r26, r26
     cd2:	bb 1f       	adc	r27, r27
     cd4:	ee 1f       	adc	r30, r30
     cd6:	ff 1f       	adc	r31, r31
     cd8:	a2 17       	cp	r26, r18
     cda:	b3 07       	cpc	r27, r19
     cdc:	e4 07       	cpc	r30, r20
     cde:	f5 07       	cpc	r31, r21
     ce0:	20 f0       	brcs	.+8      	; 0xcea <__udivmodsi4_ep>
     ce2:	a2 1b       	sub	r26, r18
     ce4:	b3 0b       	sbc	r27, r19
     ce6:	e4 0b       	sbc	r30, r20
     ce8:	f5 0b       	sbc	r31, r21

00000cea <__udivmodsi4_ep>:
     cea:	66 1f       	adc	r22, r22
     cec:	77 1f       	adc	r23, r23
     cee:	88 1f       	adc	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	1a 94       	dec	r1
     cf4:	69 f7       	brne	.-38     	; 0xcd0 <__udivmodsi4_loop>
     cf6:	60 95       	com	r22
     cf8:	70 95       	com	r23
     cfa:	80 95       	com	r24
     cfc:	90 95       	com	r25
     cfe:	9b 01       	movw	r18, r22
     d00:	ac 01       	movw	r20, r24
     d02:	bd 01       	movw	r22, r26
     d04:	cf 01       	movw	r24, r30
     d06:	08 95       	ret

00000d08 <atof>:
     d08:	66 27       	eor	r22, r22
     d0a:	77 27       	eor	r23, r23
     d0c:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <strtod>

00000d10 <atoi>:
     d10:	fc 01       	movw	r30, r24
     d12:	88 27       	eor	r24, r24
     d14:	99 27       	eor	r25, r25
     d16:	e8 94       	clt
     d18:	21 91       	ld	r18, Z+
     d1a:	20 32       	cpi	r18, 0x20	; 32
     d1c:	e9 f3       	breq	.-6      	; 0xd18 <atoi+0x8>
     d1e:	29 30       	cpi	r18, 0x09	; 9
     d20:	10 f0       	brcs	.+4      	; 0xd26 <atoi+0x16>
     d22:	2e 30       	cpi	r18, 0x0E	; 14
     d24:	c8 f3       	brcs	.-14     	; 0xd18 <atoi+0x8>
     d26:	2b 32       	cpi	r18, 0x2B	; 43
     d28:	41 f0       	breq	.+16     	; 0xd3a <atoi+0x2a>
     d2a:	2d 32       	cpi	r18, 0x2D	; 45
     d2c:	39 f4       	brne	.+14     	; 0xd3c <atoi+0x2c>
     d2e:	68 94       	set
     d30:	04 c0       	rjmp	.+8      	; 0xd3a <atoi+0x2a>
     d32:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__mulhi_const_10>
     d36:	82 0f       	add	r24, r18
     d38:	91 1d       	adc	r25, r1
     d3a:	21 91       	ld	r18, Z+
     d3c:	20 53       	subi	r18, 0x30	; 48
     d3e:	2a 30       	cpi	r18, 0x0A	; 10
     d40:	c0 f3       	brcs	.-16     	; 0xd32 <atoi+0x22>
     d42:	1e f4       	brtc	.+6      	; 0xd4a <atoi+0x3a>
     d44:	90 95       	com	r25
     d46:	81 95       	neg	r24
     d48:	9f 4f       	sbci	r25, 0xFF	; 255
     d4a:	08 95       	ret

00000d4c <__mulhi_const_10>:
     d4c:	7a e0       	ldi	r23, 0x0A	; 10
     d4e:	97 9f       	mul	r25, r23
     d50:	90 2d       	mov	r25, r0
     d52:	87 9f       	mul	r24, r23
     d54:	80 2d       	mov	r24, r0
     d56:	91 0d       	add	r25, r1
     d58:	11 24       	eor	r1, r1
     d5a:	08 95       	ret

00000d5c <strtod>:
     d5c:	a0 e0       	ldi	r26, 0x00	; 0
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e4 eb       	ldi	r30, 0xB4	; 180
     d62:	f6 e0       	ldi	r31, 0x06	; 6
     d64:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__prologue_saves__+0xc>
     d68:	ec 01       	movw	r28, r24
     d6a:	6b 01       	movw	r12, r22
     d6c:	61 15       	cp	r22, r1
     d6e:	71 05       	cpc	r23, r1
     d70:	19 f0       	breq	.+6      	; 0xd78 <strtod+0x1c>
     d72:	fb 01       	movw	r30, r22
     d74:	91 83       	std	Z+1, r25	; 0x01
     d76:	80 83       	st	Z, r24
     d78:	7e 01       	movw	r14, r28
     d7a:	ff ef       	ldi	r31, 0xFF	; 255
     d7c:	ef 1a       	sub	r14, r31
     d7e:	ff 0a       	sbc	r15, r31
     d80:	08 81       	ld	r16, Y
     d82:	80 2f       	mov	r24, r16
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 fc 07 	call	0xff8	; 0xff8 <isspace>
     d8a:	89 2b       	or	r24, r25
     d8c:	11 f0       	breq	.+4      	; 0xd92 <strtod+0x36>
     d8e:	e7 01       	movw	r28, r14
     d90:	f3 cf       	rjmp	.-26     	; 0xd78 <strtod+0x1c>
     d92:	0d 32       	cpi	r16, 0x2D	; 45
     d94:	39 f4       	brne	.+14     	; 0xda4 <strtod+0x48>
     d96:	7e 01       	movw	r14, r28
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	e8 0e       	add	r14, r24
     d9c:	f1 1c       	adc	r15, r1
     d9e:	09 81       	ldd	r16, Y+1	; 0x01
     da0:	11 e0       	ldi	r17, 0x01	; 1
     da2:	08 c0       	rjmp	.+16     	; 0xdb4 <strtod+0x58>
     da4:	0b 32       	cpi	r16, 0x2B	; 43
     da6:	29 f4       	brne	.+10     	; 0xdb2 <strtod+0x56>
     da8:	7e 01       	movw	r14, r28
     daa:	92 e0       	ldi	r25, 0x02	; 2
     dac:	e9 0e       	add	r14, r25
     dae:	f1 1c       	adc	r15, r1
     db0:	09 81       	ldd	r16, Y+1	; 0x01
     db2:	10 e0       	ldi	r17, 0x00	; 0
     db4:	e7 01       	movw	r28, r14
     db6:	21 97       	sbiw	r28, 0x01	; 1
     db8:	43 e0       	ldi	r20, 0x03	; 3
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	6c e5       	ldi	r22, 0x5C	; 92
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	ce 01       	movw	r24, r28
     dc2:	0e 94 05 08 	call	0x100a	; 0x100a <strncasecmp_P>
     dc6:	89 2b       	or	r24, r25
     dc8:	c1 f4       	brne	.+48     	; 0xdfa <strtod+0x9e>
     dca:	23 96       	adiw	r28, 0x03	; 3
     dcc:	45 e0       	ldi	r20, 0x05	; 5
     dce:	50 e0       	ldi	r21, 0x00	; 0
     dd0:	67 e5       	ldi	r22, 0x57	; 87
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	ce 01       	movw	r24, r28
     dd6:	0e 94 05 08 	call	0x100a	; 0x100a <strncasecmp_P>
     dda:	89 2b       	or	r24, r25
     ddc:	09 f4       	brne	.+2      	; 0xde0 <strtod+0x84>
     dde:	25 96       	adiw	r28, 0x05	; 5
     de0:	c1 14       	cp	r12, r1
     de2:	d1 04       	cpc	r13, r1
     de4:	19 f0       	breq	.+6      	; 0xdec <strtod+0x90>
     de6:	f6 01       	movw	r30, r12
     de8:	d1 83       	std	Z+1, r29	; 0x01
     dea:	c0 83       	st	Z, r28
     dec:	11 11       	cpse	r17, r1
     dee:	f6 c0       	rjmp	.+492    	; 0xfdc <strtod+0x280>
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	80 e8       	ldi	r24, 0x80	; 128
     df6:	9f e7       	ldi	r25, 0x7F	; 127
     df8:	fa c0       	rjmp	.+500    	; 0xfee <strtod+0x292>
     dfa:	43 e0       	ldi	r20, 0x03	; 3
     dfc:	50 e0       	ldi	r21, 0x00	; 0
     dfe:	64 e5       	ldi	r22, 0x54	; 84
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	ce 01       	movw	r24, r28
     e04:	0e 94 05 08 	call	0x100a	; 0x100a <strncasecmp_P>
     e08:	89 2b       	or	r24, r25
     e0a:	59 f4       	brne	.+22     	; 0xe22 <strtod+0xc6>
     e0c:	c1 14       	cp	r12, r1
     e0e:	d1 04       	cpc	r13, r1
     e10:	09 f4       	brne	.+2      	; 0xe14 <strtod+0xb8>
     e12:	e9 c0       	rjmp	.+466    	; 0xfe6 <strtod+0x28a>
     e14:	f2 e0       	ldi	r31, 0x02	; 2
     e16:	ef 0e       	add	r14, r31
     e18:	f1 1c       	adc	r15, r1
     e1a:	f6 01       	movw	r30, r12
     e1c:	f1 82       	std	Z+1, r15	; 0x01
     e1e:	e0 82       	st	Z, r14
     e20:	e2 c0       	rjmp	.+452    	; 0xfe6 <strtod+0x28a>
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	a9 01       	movw	r20, r18
     e28:	c0 e0       	ldi	r28, 0x00	; 0
     e2a:	d0 e0       	ldi	r29, 0x00	; 0
     e2c:	f7 01       	movw	r30, r14
     e2e:	80 ed       	ldi	r24, 0xD0	; 208
     e30:	a8 2e       	mov	r10, r24
     e32:	a0 0e       	add	r10, r16
     e34:	89 e0       	ldi	r24, 0x09	; 9
     e36:	8a 15       	cp	r24, r10
     e38:	30 f1       	brcs	.+76     	; 0xe86 <strtod+0x12a>
     e3a:	91 2f       	mov	r25, r17
     e3c:	92 60       	ori	r25, 0x02	; 2
     e3e:	b9 2e       	mov	r11, r25
     e40:	81 2f       	mov	r24, r17
     e42:	88 70       	andi	r24, 0x08	; 8
     e44:	12 ff       	sbrs	r17, 2
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <strtod+0xf4>
     e48:	81 11       	cpse	r24, r1
     e4a:	24 c0       	rjmp	.+72     	; 0xe94 <strtod+0x138>
     e4c:	21 96       	adiw	r28, 0x01	; 1
     e4e:	22 c0       	rjmp	.+68     	; 0xe94 <strtod+0x138>
     e50:	81 11       	cpse	r24, r1
     e52:	21 97       	sbiw	r28, 0x01	; 1
     e54:	a5 e0       	ldi	r26, 0x05	; 5
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	0e 94 20 08 	call	0x1040	; 0x1040 <__muluhisi3>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	aa 1f       	adc	r26, r26
     e66:	bb 1f       	adc	r27, r27
     e68:	9c 01       	movw	r18, r24
     e6a:	ad 01       	movw	r20, r26
     e6c:	2a 0d       	add	r18, r10
     e6e:	31 1d       	adc	r19, r1
     e70:	41 1d       	adc	r20, r1
     e72:	51 1d       	adc	r21, r1
     e74:	28 39       	cpi	r18, 0x98	; 152
     e76:	89 e9       	ldi	r24, 0x99	; 153
     e78:	38 07       	cpc	r19, r24
     e7a:	48 07       	cpc	r20, r24
     e7c:	89 e1       	ldi	r24, 0x19	; 25
     e7e:	58 07       	cpc	r21, r24
     e80:	48 f0       	brcs	.+18     	; 0xe94 <strtod+0x138>
     e82:	16 60       	ori	r17, 0x06	; 6
     e84:	06 c0       	rjmp	.+12     	; 0xe92 <strtod+0x136>
     e86:	9e ef       	ldi	r25, 0xFE	; 254
     e88:	a9 12       	cpse	r10, r25
     e8a:	0a c0       	rjmp	.+20     	; 0xea0 <strtod+0x144>
     e8c:	13 fd       	sbrc	r17, 3
     e8e:	40 c0       	rjmp	.+128    	; 0xf10 <strtod+0x1b4>
     e90:	18 60       	ori	r17, 0x08	; 8
     e92:	b1 2e       	mov	r11, r17
     e94:	8f ef       	ldi	r24, 0xFF	; 255
     e96:	e8 1a       	sub	r14, r24
     e98:	f8 0a       	sbc	r15, r24
     e9a:	00 81       	ld	r16, Z
     e9c:	1b 2d       	mov	r17, r11
     e9e:	c6 cf       	rjmp	.-116    	; 0xe2c <strtod+0xd0>
     ea0:	80 2f       	mov	r24, r16
     ea2:	8f 7d       	andi	r24, 0xDF	; 223
     ea4:	85 34       	cpi	r24, 0x45	; 69
     ea6:	a1 f5       	brne	.+104    	; 0xf10 <strtod+0x1b4>
     ea8:	80 81       	ld	r24, Z
     eaa:	8d 32       	cpi	r24, 0x2D	; 45
     eac:	11 f4       	brne	.+4      	; 0xeb2 <strtod+0x156>
     eae:	10 61       	ori	r17, 0x10	; 16
     eb0:	06 c0       	rjmp	.+12     	; 0xebe <strtod+0x162>
     eb2:	8b 32       	cpi	r24, 0x2B	; 43
     eb4:	21 f0       	breq	.+8      	; 0xebe <strtod+0x162>
     eb6:	31 96       	adiw	r30, 0x01	; 1
     eb8:	61 e0       	ldi	r22, 0x01	; 1
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	04 c0       	rjmp	.+8      	; 0xec6 <strtod+0x16a>
     ebe:	81 81       	ldd	r24, Z+1	; 0x01
     ec0:	32 96       	adiw	r30, 0x02	; 2
     ec2:	62 e0       	ldi	r22, 0x02	; 2
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	80 53       	subi	r24, 0x30	; 48
     ec8:	8a 30       	cpi	r24, 0x0A	; 10
     eca:	18 f0       	brcs	.+6      	; 0xed2 <strtod+0x176>
     ecc:	e6 1b       	sub	r30, r22
     ece:	f7 0b       	sbc	r31, r23
     ed0:	1f c0       	rjmp	.+62     	; 0xf10 <strtod+0x1b4>
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	60 38       	cpi	r22, 0x80	; 128
     ed8:	9c e0       	ldi	r25, 0x0C	; 12
     eda:	79 07       	cpc	r23, r25
     edc:	5c f4       	brge	.+22     	; 0xef4 <strtod+0x198>
     ede:	db 01       	movw	r26, r22
     ee0:	aa 0f       	add	r26, r26
     ee2:	bb 1f       	adc	r27, r27
     ee4:	aa 0f       	add	r26, r26
     ee6:	bb 1f       	adc	r27, r27
     ee8:	6a 0f       	add	r22, r26
     eea:	7b 1f       	adc	r23, r27
     eec:	66 0f       	add	r22, r22
     eee:	77 1f       	adc	r23, r23
     ef0:	68 0f       	add	r22, r24
     ef2:	71 1d       	adc	r23, r1
     ef4:	31 96       	adiw	r30, 0x01	; 1
     ef6:	df 01       	movw	r26, r30
     ef8:	11 97       	sbiw	r26, 0x01	; 1
     efa:	8c 91       	ld	r24, X
     efc:	80 53       	subi	r24, 0x30	; 48
     efe:	8a 30       	cpi	r24, 0x0A	; 10
     f00:	50 f3       	brcs	.-44     	; 0xed6 <strtod+0x17a>
     f02:	14 ff       	sbrs	r17, 4
     f04:	03 c0       	rjmp	.+6      	; 0xf0c <strtod+0x1b0>
     f06:	71 95       	neg	r23
     f08:	61 95       	neg	r22
     f0a:	71 09       	sbc	r23, r1
     f0c:	c6 0f       	add	r28, r22
     f0e:	d7 1f       	adc	r29, r23
     f10:	11 ff       	sbrs	r17, 1
     f12:	08 c0       	rjmp	.+16     	; 0xf24 <strtod+0x1c8>
     f14:	c1 14       	cp	r12, r1
     f16:	d1 04       	cpc	r13, r1
     f18:	29 f0       	breq	.+10     	; 0xf24 <strtod+0x1c8>
     f1a:	cf 01       	movw	r24, r30
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	f6 01       	movw	r30, r12
     f20:	91 83       	std	Z+1, r25	; 0x01
     f22:	80 83       	st	Z, r24
     f24:	ca 01       	movw	r24, r20
     f26:	b9 01       	movw	r22, r18
     f28:	0e 94 43 05 	call	0xa86	; 0xa86 <__floatunsisf>
     f2c:	21 2f       	mov	r18, r17
     f2e:	23 70       	andi	r18, 0x03	; 3
     f30:	23 30       	cpi	r18, 0x03	; 3
     f32:	19 f0       	breq	.+6      	; 0xf3a <strtod+0x1de>
     f34:	4b 01       	movw	r8, r22
     f36:	5c 01       	movw	r10, r24
     f38:	06 c0       	rjmp	.+12     	; 0xf46 <strtod+0x1ea>
     f3a:	4b 01       	movw	r8, r22
     f3c:	5c 01       	movw	r10, r24
     f3e:	b7 fa       	bst	r11, 7
     f40:	b0 94       	com	r11
     f42:	b7 f8       	bld	r11, 7
     f44:	b0 94       	com	r11
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	a9 01       	movw	r20, r18
     f4c:	c5 01       	movw	r24, r10
     f4e:	b4 01       	movw	r22, r8
     f50:	0e 94 9d 04 	call	0x93a	; 0x93a <__cmpsf2>
     f54:	88 23       	and	r24, r24
     f56:	09 f4       	brne	.+2      	; 0xf5a <strtod+0x1fe>
     f58:	3e c0       	rjmp	.+124    	; 0xfd6 <strtod+0x27a>
     f5a:	d7 ff       	sbrs	r29, 7
     f5c:	06 c0       	rjmp	.+12     	; 0xf6a <strtod+0x20e>
     f5e:	d1 95       	neg	r29
     f60:	c1 95       	neg	r28
     f62:	d1 09       	sbc	r29, r1
     f64:	03 e7       	ldi	r16, 0x73	; 115
     f66:	10 e0       	ldi	r17, 0x00	; 0
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <strtod+0x212>
     f6a:	0b e8       	ldi	r16, 0x8B	; 139
     f6c:	10 e0       	ldi	r17, 0x00	; 0
     f6e:	68 01       	movw	r12, r16
     f70:	f8 e1       	ldi	r31, 0x18	; 24
     f72:	cf 1a       	sub	r12, r31
     f74:	d1 08       	sbc	r13, r1
     f76:	90 e2       	ldi	r25, 0x20	; 32
     f78:	e9 2e       	mov	r14, r25
     f7a:	f1 2c       	mov	r15, r1
     f7c:	ce 15       	cp	r28, r14
     f7e:	df 05       	cpc	r29, r15
     f80:	74 f0       	brlt	.+28     	; 0xf9e <strtod+0x242>
     f82:	f8 01       	movw	r30, r16
     f84:	25 91       	lpm	r18, Z+
     f86:	35 91       	lpm	r19, Z+
     f88:	45 91       	lpm	r20, Z+
     f8a:	54 91       	lpm	r21, Z
     f8c:	c5 01       	movw	r24, r10
     f8e:	b4 01       	movw	r22, r8
     f90:	0e 94 f5 05 	call	0xbea	; 0xbea <__mulsf3>
     f94:	4b 01       	movw	r8, r22
     f96:	5c 01       	movw	r10, r24
     f98:	ce 19       	sub	r28, r14
     f9a:	df 09       	sbc	r29, r15
     f9c:	ef cf       	rjmp	.-34     	; 0xf7c <strtod+0x220>
     f9e:	04 50       	subi	r16, 0x04	; 4
     fa0:	11 09       	sbc	r17, r1
     fa2:	f5 94       	asr	r15
     fa4:	e7 94       	ror	r14
     fa6:	0c 15       	cp	r16, r12
     fa8:	1d 05       	cpc	r17, r13
     faa:	41 f7       	brne	.-48     	; 0xf7c <strtod+0x220>
     fac:	8a 2d       	mov	r24, r10
     fae:	88 0f       	add	r24, r24
     fb0:	8b 2d       	mov	r24, r11
     fb2:	88 1f       	adc	r24, r24
     fb4:	8f 3f       	cpi	r24, 0xFF	; 255
     fb6:	49 f0       	breq	.+18     	; 0xfca <strtod+0x26e>
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	a9 01       	movw	r20, r18
     fbe:	c5 01       	movw	r24, r10
     fc0:	b4 01       	movw	r22, r8
     fc2:	0e 94 9d 04 	call	0x93a	; 0x93a <__cmpsf2>
     fc6:	81 11       	cpse	r24, r1
     fc8:	06 c0       	rjmp	.+12     	; 0xfd6 <strtod+0x27a>
     fca:	82 e2       	ldi	r24, 0x22	; 34
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <errno+0x1>
     fd2:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <errno>
     fd6:	c5 01       	movw	r24, r10
     fd8:	b4 01       	movw	r22, r8
     fda:	09 c0       	rjmp	.+18     	; 0xfee <strtod+0x292>
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	80 e8       	ldi	r24, 0x80	; 128
     fe2:	9f ef       	ldi	r25, 0xFF	; 255
     fe4:	04 c0       	rjmp	.+8      	; 0xfee <strtod+0x292>
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	80 ec       	ldi	r24, 0xC0	; 192
     fec:	9f e7       	ldi	r25, 0x7F	; 127
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	ec e0       	ldi	r30, 0x0C	; 12
     ff4:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__epilogue_restores__+0xc>

00000ff8 <isspace>:
     ff8:	91 11       	cpse	r25, r1
     ffa:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__ctype_isfalse>
     ffe:	80 32       	cpi	r24, 0x20	; 32
    1000:	19 f0       	breq	.+6      	; 0x1008 <isspace+0x10>
    1002:	89 50       	subi	r24, 0x09	; 9
    1004:	85 50       	subi	r24, 0x05	; 5
    1006:	c8 f7       	brcc	.-14     	; 0xffa <isspace+0x2>
    1008:	08 95       	ret

0000100a <strncasecmp_P>:
    100a:	fb 01       	movw	r30, r22
    100c:	dc 01       	movw	r26, r24
    100e:	41 50       	subi	r20, 0x01	; 1
    1010:	50 40       	sbci	r21, 0x00	; 0
    1012:	88 f0       	brcs	.+34     	; 0x1036 <strncasecmp_P+0x2c>
    1014:	8d 91       	ld	r24, X+
    1016:	81 34       	cpi	r24, 0x41	; 65
    1018:	1c f0       	brlt	.+6      	; 0x1020 <strncasecmp_P+0x16>
    101a:	8b 35       	cpi	r24, 0x5B	; 91
    101c:	0c f4       	brge	.+2      	; 0x1020 <strncasecmp_P+0x16>
    101e:	80 5e       	subi	r24, 0xE0	; 224
    1020:	65 91       	lpm	r22, Z+
    1022:	61 34       	cpi	r22, 0x41	; 65
    1024:	1c f0       	brlt	.+6      	; 0x102c <strncasecmp_P+0x22>
    1026:	6b 35       	cpi	r22, 0x5B	; 91
    1028:	0c f4       	brge	.+2      	; 0x102c <strncasecmp_P+0x22>
    102a:	60 5e       	subi	r22, 0xE0	; 224
    102c:	86 1b       	sub	r24, r22
    102e:	61 11       	cpse	r22, r1
    1030:	71 f3       	breq	.-36     	; 0x100e <strncasecmp_P+0x4>
    1032:	99 0b       	sbc	r25, r25
    1034:	08 95       	ret
    1036:	88 1b       	sub	r24, r24
    1038:	fc cf       	rjmp	.-8      	; 0x1032 <strncasecmp_P+0x28>

0000103a <__ctype_isfalse>:
    103a:	99 27       	eor	r25, r25
    103c:	88 27       	eor	r24, r24

0000103e <__ctype_istrue>:
    103e:	08 95       	ret

00001040 <__muluhisi3>:
    1040:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__umulhisi3>
    1044:	a5 9f       	mul	r26, r21
    1046:	90 0d       	add	r25, r0
    1048:	b4 9f       	mul	r27, r20
    104a:	90 0d       	add	r25, r0
    104c:	a4 9f       	mul	r26, r20
    104e:	80 0d       	add	r24, r0
    1050:	91 1d       	adc	r25, r1
    1052:	11 24       	eor	r1, r1
    1054:	08 95       	ret

00001056 <__prologue_saves__>:
    1056:	2f 92       	push	r2
    1058:	3f 92       	push	r3
    105a:	4f 92       	push	r4
    105c:	5f 92       	push	r5
    105e:	6f 92       	push	r6
    1060:	7f 92       	push	r7
    1062:	8f 92       	push	r8
    1064:	9f 92       	push	r9
    1066:	af 92       	push	r10
    1068:	bf 92       	push	r11
    106a:	cf 92       	push	r12
    106c:	df 92       	push	r13
    106e:	ef 92       	push	r14
    1070:	ff 92       	push	r15
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	ca 1b       	sub	r28, r26
    1080:	db 0b       	sbc	r29, r27
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	09 94       	ijmp

0000108e <__epilogue_restores__>:
    108e:	2a 88       	ldd	r2, Y+18	; 0x12
    1090:	39 88       	ldd	r3, Y+17	; 0x11
    1092:	48 88       	ldd	r4, Y+16	; 0x10
    1094:	5f 84       	ldd	r5, Y+15	; 0x0f
    1096:	6e 84       	ldd	r6, Y+14	; 0x0e
    1098:	7d 84       	ldd	r7, Y+13	; 0x0d
    109a:	8c 84       	ldd	r8, Y+12	; 0x0c
    109c:	9b 84       	ldd	r9, Y+11	; 0x0b
    109e:	aa 84       	ldd	r10, Y+10	; 0x0a
    10a0:	b9 84       	ldd	r11, Y+9	; 0x09
    10a2:	c8 84       	ldd	r12, Y+8	; 0x08
    10a4:	df 80       	ldd	r13, Y+7	; 0x07
    10a6:	ee 80       	ldd	r14, Y+6	; 0x06
    10a8:	fd 80       	ldd	r15, Y+5	; 0x05
    10aa:	0c 81       	ldd	r16, Y+4	; 0x04
    10ac:	1b 81       	ldd	r17, Y+3	; 0x03
    10ae:	aa 81       	ldd	r26, Y+2	; 0x02
    10b0:	b9 81       	ldd	r27, Y+1	; 0x01
    10b2:	ce 0f       	add	r28, r30
    10b4:	d1 1d       	adc	r29, r1
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	ed 01       	movw	r28, r26
    10c2:	08 95       	ret

000010c4 <__umulhisi3>:
    10c4:	a2 9f       	mul	r26, r18
    10c6:	b0 01       	movw	r22, r0
    10c8:	b3 9f       	mul	r27, r19
    10ca:	c0 01       	movw	r24, r0
    10cc:	a3 9f       	mul	r26, r19
    10ce:	70 0d       	add	r23, r0
    10d0:	81 1d       	adc	r24, r1
    10d2:	11 24       	eor	r1, r1
    10d4:	91 1d       	adc	r25, r1
    10d6:	b2 9f       	mul	r27, r18
    10d8:	70 0d       	add	r23, r0
    10da:	81 1d       	adc	r24, r1
    10dc:	11 24       	eor	r1, r1
    10de:	91 1d       	adc	r25, r1
    10e0:	08 95       	ret

000010e2 <_exit>:
    10e2:	f8 94       	cli

000010e4 <__stop_program>:
    10e4:	ff cf       	rjmp	.-2      	; 0x10e4 <__stop_program>
