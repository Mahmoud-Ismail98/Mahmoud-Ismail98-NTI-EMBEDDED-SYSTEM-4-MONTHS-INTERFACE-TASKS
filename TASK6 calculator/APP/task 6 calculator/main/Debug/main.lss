
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000178c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000178c  00001820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  0080007e  0080007e  0000183e  2**0
                  ALLOC
  3 .stab         00003378  00000000  00000000  00001840  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000948  00000000  00000000  00004bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00005500  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001171  00000000  00000000  00005620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000620  00000000  00000000  00006791  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a78  00000000  00000000  00006db1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e8  00000000  00000000  0000782c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c6  00000000  00000000  00007b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d97  00000000  00000000  00007fda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00008d71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	lds	r29, 0x78
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	sts	0xb8, r17
      62:	ba ab       	sts	0x5a, r27
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	sts	0x9b, r26
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	sts	0x5e, r27
      96:	aa aa       	sts	0x9a, r26
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	sts	0x41, r30
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <lcd_voidSendNumber+0x26>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	ec e8       	ldi	r30, 0x8C	; 140
      ea:	f7 e1       	ldi	r31, 0x17	; 23
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	ae 37       	cpi	r26, 0x7E	; 126
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	ae e7       	ldi	r26, 0x7E	; 126
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a7 39       	cpi	r26, 0x97	; 151
     104:	b1 07       	cpc	r27, r17
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 cc 05 	call	0xb98	; 0xb98 <main>
     10c:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <DIO_WritrPin>:

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
if (pin_id>31)  /*in case not valid pin id */
     114:	80 32       	cpi	r24, 0x20	; 32
     116:	08 f0       	brcs	.+2      	; 0x11a <DIO_WritrPin+0x6>
     118:	08 95       	ret
{
	ERROR_LOC_RET=PIN_NUMBER_ERROR;
}
else	 /*case valid id pin*/
{	
	u8 loc_pin_id =pin_id % 8;
     11a:	98 2f       	mov	r25, r24
     11c:	97 70       	andi	r25, 0x07	; 7

	u8 loc_port_num=pin_id/8;
     11e:	86 95       	lsr	r24
     120:	86 95       	lsr	r24
     122:	86 95       	lsr	r24
	switch(loc_port_num)
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	a9 f1       	breq	.+106    	; 0x192 <DIO_WritrPin+0x7e>
     128:	81 30       	cpi	r24, 0x01	; 1
     12a:	38 f0       	brcs	.+14     	; 0x13a <DIO_WritrPin+0x26>
     12c:	82 30       	cpi	r24, 0x02	; 2
     12e:	09 f4       	brne	.+2      	; 0x132 <DIO_WritrPin+0x1e>
     130:	5c c0       	rjmp	.+184    	; 0x1ea <DIO_WritrPin+0xd6>
     132:	83 30       	cpi	r24, 0x03	; 3
     134:	09 f0       	breq	.+2      	; 0x138 <DIO_WritrPin+0x24>
     136:	b0 c0       	rjmp	.+352    	; 0x298 <DIO_WritrPin+0x184>
     138:	84 c0       	rjmp	.+264    	; 0x242 <DIO_WritrPin+0x12e>
	{
		case u8PORTA:
		if (GET_BIT(DDRA,loc_pin_id)==PIN_OUTPUT)
     13a:	2a b3       	in	r18, 0x1a	; 26
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	09 2e       	mov	r0, r25
     140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_WritrPin+0x32>
     142:	35 95       	asr	r19
     144:	27 95       	ror	r18
     146:	0a 94       	dec	r0
     148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_WritrPin+0x2e>
     14a:	20 ff       	sbrs	r18, 0
     14c:	a7 c0       	rjmp	.+334    	; 0x29c <DIO_WritrPin+0x188>
		{
			switch (level_value)
     14e:	66 23       	and	r22, r22
     150:	89 f0       	breq	.+34     	; 0x174 <DIO_WritrPin+0x60>
     152:	61 30       	cpi	r22, 0x01	; 1
     154:	09 f0       	breq	.+2      	; 0x158 <DIO_WritrPin+0x44>
     156:	a4 c0       	rjmp	.+328    	; 0x2a0 <DIO_WritrPin+0x18c>
			{
				case HIGH_LEVEL:
				SET_BIT(PORTA,loc_pin_id);
     158:	4b b3       	in	r20, 0x1b	; 27
     15a:	21 e0       	ldi	r18, 0x01	; 1
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	b9 01       	movw	r22, r18
     160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_WritrPin+0x52>
     162:	66 0f       	add	r22, r22
     164:	77 1f       	adc	r23, r23
     166:	9a 95       	dec	r25
     168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_WritrPin+0x4e>
     16a:	cb 01       	movw	r24, r22
     16c:	84 2b       	or	r24, r20
     16e:	8b bb       	out	0x1b, r24	; 27
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     170:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (level_value)
			{
				case HIGH_LEVEL:
				SET_BIT(PORTA,loc_pin_id);
				break;
     172:	08 95       	ret
				case LOW_LEVEL:
				CLR_BIT(PORTA,loc_pin_id);
     174:	4b b3       	in	r20, 0x1b	; 27
     176:	21 e0       	ldi	r18, 0x01	; 1
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	b9 01       	movw	r22, r18
     17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_WritrPin+0x6e>
     17e:	66 0f       	add	r22, r22
     180:	77 1f       	adc	r23, r23
     182:	9a 95       	dec	r25
     184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_WritrPin+0x6a>
     186:	cb 01       	movw	r24, r22
     188:	80 95       	com	r24
     18a:	84 23       	and	r24, r20
     18c:	8b bb       	out	0x1b, r24	; 27
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     18e:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH_LEVEL:
				SET_BIT(PORTA,loc_pin_id);
				break;
				case LOW_LEVEL:
				CLR_BIT(PORTA,loc_pin_id);
				break;
     190:	08 95       	ret
		else
		{	ERROR_LOCRET=PIN_DIR_ERROR;
		}
		break;
		case u8PORTB:
		if (GET_BIT(DDRB,loc_pin_id)==PIN_OUTPUT)
     192:	27 b3       	in	r18, 0x17	; 23
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	09 2e       	mov	r0, r25
     198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_WritrPin+0x8a>
     19a:	35 95       	asr	r19
     19c:	27 95       	ror	r18
     19e:	0a 94       	dec	r0
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_WritrPin+0x86>
     1a2:	20 ff       	sbrs	r18, 0
     1a4:	7f c0       	rjmp	.+254    	; 0x2a4 <DIO_WritrPin+0x190>
		{
			switch (level_value)
     1a6:	66 23       	and	r22, r22
     1a8:	89 f0       	breq	.+34     	; 0x1cc <DIO_WritrPin+0xb8>
     1aa:	61 30       	cpi	r22, 0x01	; 1
     1ac:	09 f0       	breq	.+2      	; 0x1b0 <DIO_WritrPin+0x9c>
     1ae:	7c c0       	rjmp	.+248    	; 0x2a8 <DIO_WritrPin+0x194>
			{
				case HIGH_LEVEL :
				SET_BIT(PORTB,loc_pin_id);
     1b0:	48 b3       	in	r20, 0x18	; 24
     1b2:	21 e0       	ldi	r18, 0x01	; 1
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	b9 01       	movw	r22, r18
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_WritrPin+0xaa>
     1ba:	66 0f       	add	r22, r22
     1bc:	77 1f       	adc	r23, r23
     1be:	9a 95       	dec	r25
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_WritrPin+0xa6>
     1c2:	cb 01       	movw	r24, r22
     1c4:	84 2b       	or	r24, r20
     1c6:	88 bb       	out	0x18, r24	; 24
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     1c8:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (level_value)
			{
				case HIGH_LEVEL :
				SET_BIT(PORTB,loc_pin_id);
				break;
     1ca:	08 95       	ret
				case LOW_LEVEL : 
				CLR_BIT(PORTB,loc_pin_id);
     1cc:	48 b3       	in	r20, 0x18	; 24
     1ce:	21 e0       	ldi	r18, 0x01	; 1
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	b9 01       	movw	r22, r18
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_WritrPin+0xc6>
     1d6:	66 0f       	add	r22, r22
     1d8:	77 1f       	adc	r23, r23
     1da:	9a 95       	dec	r25
     1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_WritrPin+0xc2>
     1de:	cb 01       	movw	r24, r22
     1e0:	80 95       	com	r24
     1e2:	84 23       	and	r24, r20
     1e4:	88 bb       	out	0x18, r24	; 24
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     1e6:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH_LEVEL :
				SET_BIT(PORTB,loc_pin_id);
				break;
				case LOW_LEVEL : 
				CLR_BIT(PORTB,loc_pin_id);
				break;
     1e8:	08 95       	ret
		{	ERROR_LOCRET=PIN_DIR_ERROR;
		}
		break;
		
		case u8PORTC:
		if (GET_BIT(DDRC,loc_pin_id)==PIN_OUTPUT)
     1ea:	24 b3       	in	r18, 0x14	; 20
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	09 2e       	mov	r0, r25
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_WritrPin+0xe2>
     1f2:	35 95       	asr	r19
     1f4:	27 95       	ror	r18
     1f6:	0a 94       	dec	r0
     1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_WritrPin+0xde>
     1fa:	20 ff       	sbrs	r18, 0
     1fc:	57 c0       	rjmp	.+174    	; 0x2ac <DIO_WritrPin+0x198>
		{
			switch (level_value)
     1fe:	66 23       	and	r22, r22
     200:	89 f0       	breq	.+34     	; 0x224 <DIO_WritrPin+0x110>
     202:	61 30       	cpi	r22, 0x01	; 1
     204:	09 f0       	breq	.+2      	; 0x208 <DIO_WritrPin+0xf4>
     206:	54 c0       	rjmp	.+168    	; 0x2b0 <DIO_WritrPin+0x19c>
			{
				case HIGH_LEVEL :
				SET_BIT(PORTC,loc_pin_id);
     208:	45 b3       	in	r20, 0x15	; 21
     20a:	21 e0       	ldi	r18, 0x01	; 1
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	b9 01       	movw	r22, r18
     210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_WritrPin+0x102>
     212:	66 0f       	add	r22, r22
     214:	77 1f       	adc	r23, r23
     216:	9a 95       	dec	r25
     218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_WritrPin+0xfe>
     21a:	cb 01       	movw	r24, r22
     21c:	84 2b       	or	r24, r20
     21e:	85 bb       	out	0x15, r24	; 21
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     220:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (level_value)
			{
				case HIGH_LEVEL :
				SET_BIT(PORTC,loc_pin_id);
				break;
     222:	08 95       	ret
				case  LOW_LEVEL :
				CLR_BIT(PORTC,loc_pin_id);
     224:	45 b3       	in	r20, 0x15	; 21
     226:	21 e0       	ldi	r18, 0x01	; 1
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	b9 01       	movw	r22, r18
     22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_WritrPin+0x11e>
     22e:	66 0f       	add	r22, r22
     230:	77 1f       	adc	r23, r23
     232:	9a 95       	dec	r25
     234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_WritrPin+0x11a>
     236:	cb 01       	movw	r24, r22
     238:	80 95       	com	r24
     23a:	84 23       	and	r24, r20
     23c:	85 bb       	out	0x15, r24	; 21
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     23e:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH_LEVEL :
				SET_BIT(PORTC,loc_pin_id);
				break;
				case  LOW_LEVEL :
				CLR_BIT(PORTC,loc_pin_id);
				break;
     240:	08 95       	ret
		{	ERROR_LOCRET=PIN_DIR_ERROR;
		}
		break;

		case u8PORTD:
		if (GET_BIT(DDRD,loc_pin_id)==PIN_OUTPUT)
     242:	21 b3       	in	r18, 0x11	; 17
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	09 2e       	mov	r0, r25
     248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_WritrPin+0x13a>
     24a:	35 95       	asr	r19
     24c:	27 95       	ror	r18
     24e:	0a 94       	dec	r0
     250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_WritrPin+0x136>
     252:	20 ff       	sbrs	r18, 0
     254:	2f c0       	rjmp	.+94     	; 0x2b4 <DIO_WritrPin+0x1a0>
		{
			switch (level_value)
     256:	66 23       	and	r22, r22
     258:	81 f0       	breq	.+32     	; 0x27a <DIO_WritrPin+0x166>
     25a:	61 30       	cpi	r22, 0x01	; 1
     25c:	69 f5       	brne	.+90     	; 0x2b8 <DIO_WritrPin+0x1a4>
			{
				case HIGH_LEVEL:
				SET_BIT(PORTD,loc_pin_id);
     25e:	42 b3       	in	r20, 0x12	; 18
     260:	21 e0       	ldi	r18, 0x01	; 1
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	b9 01       	movw	r22, r18
     266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_WritrPin+0x158>
     268:	66 0f       	add	r22, r22
     26a:	77 1f       	adc	r23, r23
     26c:	9a 95       	dec	r25
     26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_WritrPin+0x154>
     270:	cb 01       	movw	r24, r22
     272:	84 2b       	or	r24, r20
     274:	82 bb       	out	0x12, r24	; 18
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     276:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (level_value)
			{
				case HIGH_LEVEL:
				SET_BIT(PORTD,loc_pin_id);
				break;
     278:	08 95       	ret
				case LOW_LEVEL:
				CLR_BIT(PORTD,loc_pin_id);
     27a:	42 b3       	in	r20, 0x12	; 18
     27c:	21 e0       	ldi	r18, 0x01	; 1
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	b9 01       	movw	r22, r18
     282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_WritrPin+0x174>
     284:	66 0f       	add	r22, r22
     286:	77 1f       	adc	r23, r23
     288:	9a 95       	dec	r25
     28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_WritrPin+0x170>
     28c:	cb 01       	movw	r24, r22
     28e:	80 95       	com	r24
     290:	84 23       	and	r24, r20
     292:	82 bb       	out	0x12, r24	; 18
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     294:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH_LEVEL:
				SET_BIT(PORTD,loc_pin_id);
				break;
				case LOW_LEVEL:
				CLR_BIT(PORTD,loc_pin_id);
				break;
     296:	08 95       	ret
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	08 95       	ret
				CLR_BIT(PORTA,loc_pin_id);
				break;
			}
		}
		else
		{	ERROR_LOCRET=PIN_DIR_ERROR;
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	08 95       	ret
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	08 95       	ret
				CLR_BIT(PORTB,loc_pin_id);
				break;
			}
		}
		else
		{	ERROR_LOCRET=PIN_DIR_ERROR;
     2a4:	82 e0       	ldi	r24, 0x02	; 2
     2a6:	08 95       	ret
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	08 95       	ret
				CLR_BIT(PORTC,loc_pin_id);
				break;
			}
		}
		else
		{	ERROR_LOCRET=PIN_DIR_ERROR;
     2ac:	82 e0       	ldi	r24, 0x02	; 2
     2ae:	08 95       	ret
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	08 95       	ret
				CLR_BIT(PORTD,loc_pin_id);
				break;
			}
		}
		else
		{	ERROR_LOCRET=PIN_DIR_ERROR;
     2b4:	82 e0       	ldi	r24, 0x02	; 2
     2b6:	08 95       	ret
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     2b8:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}
	return ERROR_LOCRET;
}
}
     2ba:	08 95       	ret

000002bc <DIO_READ_PIN>:
PIN_ERROR_TYPES  DIO_READ_PIN(u8 pin_id,u8 *ptr_val)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
if (pin_id>31)  /*in case not valid pin id */
     2bc:	80 32       	cpi	r24, 0x20	; 32
     2be:	08 f0       	brcs	.+2      	; 0x2c2 <DIO_READ_PIN+0x6>
     2c0:	08 95       	ret
else	 /*case valid id pin*/
{	
	PIN_ERROR_TYPES ERROR_LOCRET=ERROR_FREE;
	u8 *Loc_ptr= ptr_val;

	u8 loc_pin_id =pin_id % 8;
     2c2:	98 2f       	mov	r25, r24
     2c4:	97 70       	andi	r25, 0x07	; 7
	u8 loc_port_num=pin_id/8;
     2c6:	86 95       	lsr	r24
     2c8:	86 95       	lsr	r24
     2ca:	86 95       	lsr	r24
	
	switch(loc_port_num)
     2cc:	81 30       	cpi	r24, 0x01	; 1
     2ce:	f9 f0       	breq	.+62     	; 0x30e <DIO_READ_PIN+0x52>
     2d0:	81 30       	cpi	r24, 0x01	; 1
     2d2:	30 f0       	brcs	.+12     	; 0x2e0 <DIO_READ_PIN+0x24>
     2d4:	82 30       	cpi	r24, 0x02	; 2
     2d6:	99 f1       	breq	.+102    	; 0x33e <DIO_READ_PIN+0x82>
     2d8:	83 30       	cpi	r24, 0x03	; 3
     2da:	09 f0       	breq	.+2      	; 0x2de <DIO_READ_PIN+0x22>
     2dc:	60 c0       	rjmp	.+192    	; 0x39e <DIO_READ_PIN+0xe2>
     2de:	47 c0       	rjmp	.+142    	; 0x36e <DIO_READ_PIN+0xb2>
	{
		case u8PORTA:
		if(GET_BIT(DDRA,loc_pin_id)==PIN_INPUT)
     2e0:	2a b3       	in	r18, 0x1a	; 26
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	09 2e       	mov	r0, r25
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_READ_PIN+0x30>
     2e8:	35 95       	asr	r19
     2ea:	27 95       	ror	r18
     2ec:	0a 94       	dec	r0
     2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_READ_PIN+0x2c>
     2f0:	20 fd       	sbrc	r18, 0
     2f2:	0f c0       	rjmp	.+30     	; 0x312 <DIO_READ_PIN+0x56>
		*Loc_ptr=(GET_BIT(PINA,loc_pin_id));
     2f4:	29 b3       	in	r18, 0x19	; 25
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	09 2e       	mov	r0, r25
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_READ_PIN+0x44>
     2fc:	35 95       	asr	r19
     2fe:	27 95       	ror	r18
     300:	0a 94       	dec	r0
     302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_READ_PIN+0x40>
     304:	21 70       	andi	r18, 0x01	; 1
     306:	fb 01       	movw	r30, r22
     308:	20 83       	st	Z, r18
{
	ERROR_LOC_RET=PIN_NUMBER_ERROR;
}
else	 /*case valid id pin*/
{	
	PIN_ERROR_TYPES ERROR_LOCRET=ERROR_FREE;
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	03 c0       	rjmp	.+6      	; 0x314 <DIO_READ_PIN+0x58>
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	01 c0       	rjmp	.+2      	; 0x314 <DIO_READ_PIN+0x58>
	{
		case u8PORTA:
		if(GET_BIT(DDRA,loc_pin_id)==PIN_INPUT)
		*Loc_ptr=(GET_BIT(PINA,loc_pin_id));
		
		else   ERROR_LOCRET=PIN_DIR_ERROR;
     312:	82 e0       	ldi	r24, 0x02	; 2
		
		case u8PORTB:
		if(GET_BIT(DDRB,loc_pin_id)==PIN_INPUT)
     314:	27 b3       	in	r18, 0x17	; 23
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	09 2e       	mov	r0, r25
     31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_READ_PIN+0x64>
     31c:	35 95       	asr	r19
     31e:	27 95       	ror	r18
     320:	0a 94       	dec	r0
     322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_READ_PIN+0x60>
     324:	20 fd       	sbrc	r18, 0
     326:	3d c0       	rjmp	.+122    	; 0x3a2 <DIO_READ_PIN+0xe6>
		*Loc_ptr=(GET_BIT(PINB,loc_pin_id));
     328:	26 b3       	in	r18, 0x16	; 22
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_READ_PIN+0x76>
     32e:	35 95       	asr	r19
     330:	27 95       	ror	r18
     332:	9a 95       	dec	r25
     334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_READ_PIN+0x72>
     336:	21 70       	andi	r18, 0x01	; 1
     338:	fb 01       	movw	r30, r22
     33a:	20 83       	st	Z, r18
     33c:	08 95       	ret
		else   ERROR_LOCRET=PIN_DIR_ERROR;
		
		break;
		
		case u8PORTC:
		if(GET_BIT(DDRC,loc_pin_id)==PIN_INPUT)
     33e:	24 b3       	in	r18, 0x14	; 20
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	09 2e       	mov	r0, r25
     344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_READ_PIN+0x8e>
     346:	35 95       	asr	r19
     348:	27 95       	ror	r18
     34a:	0a 94       	dec	r0
     34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_READ_PIN+0x8a>
     34e:	20 fd       	sbrc	r18, 0
     350:	2a c0       	rjmp	.+84     	; 0x3a6 <DIO_READ_PIN+0xea>
		*Loc_ptr=(GET_BIT(PINC,loc_pin_id));
     352:	23 b3       	in	r18, 0x13	; 19
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	a9 01       	movw	r20, r18
     358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_READ_PIN+0xa2>
     35a:	55 95       	asr	r21
     35c:	47 95       	ror	r20
     35e:	9a 95       	dec	r25
     360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_READ_PIN+0x9e>
     362:	ca 01       	movw	r24, r20
     364:	81 70       	andi	r24, 0x01	; 1
     366:	fb 01       	movw	r30, r22
     368:	80 83       	st	Z, r24
{
	ERROR_LOC_RET=PIN_NUMBER_ERROR;
}
else	 /*case valid id pin*/
{	
	PIN_ERROR_TYPES ERROR_LOCRET=ERROR_FREE;
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	08 95       	ret
		else   ERROR_LOCRET=PIN_DIR_ERROR;
		
		break;
		
		case u8PORTD:
		if(GET_BIT(DDRD,loc_pin_id)==PIN_INPUT)
     36e:	21 b3       	in	r18, 0x11	; 17
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	09 2e       	mov	r0, r25
     374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_READ_PIN+0xbe>
     376:	35 95       	asr	r19
     378:	27 95       	ror	r18
     37a:	0a 94       	dec	r0
     37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_READ_PIN+0xba>
     37e:	20 fd       	sbrc	r18, 0
     380:	14 c0       	rjmp	.+40     	; 0x3aa <DIO_READ_PIN+0xee>
		*Loc_ptr=(GET_BIT(PIND,loc_pin_id));
     382:	20 b3       	in	r18, 0x10	; 16
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	a9 01       	movw	r20, r18
     388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_READ_PIN+0xd2>
     38a:	55 95       	asr	r21
     38c:	47 95       	ror	r20
     38e:	9a 95       	dec	r25
     390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_READ_PIN+0xce>
     392:	ca 01       	movw	r24, r20
     394:	81 70       	andi	r24, 0x01	; 1
     396:	fb 01       	movw	r30, r22
     398:	80 83       	st	Z, r24
{
	ERROR_LOC_RET=PIN_NUMBER_ERROR;
}
else	 /*case valid id pin*/
{	
	PIN_ERROR_TYPES ERROR_LOCRET=ERROR_FREE;
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	08 95       	ret
		else   ERROR_LOCRET=PIN_DIR_ERROR;
		
		break;
		
		default :
		ERROR_LOCRET = PORT_ERROR;
     39e:	83 e0       	ldi	r24, 0x03	; 3
     3a0:	08 95       	ret
		
		case u8PORTB:
		if(GET_BIT(DDRB,loc_pin_id)==PIN_INPUT)
		*Loc_ptr=(GET_BIT(PINB,loc_pin_id));
		
		else   ERROR_LOCRET=PIN_DIR_ERROR;
     3a2:	82 e0       	ldi	r24, 0x02	; 2
     3a4:	08 95       	ret
		
		case u8PORTC:
		if(GET_BIT(DDRC,loc_pin_id)==PIN_INPUT)
		*Loc_ptr=(GET_BIT(PINC,loc_pin_id));
		
		else   ERROR_LOCRET=PIN_DIR_ERROR;
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	08 95       	ret
		
		case u8PORTD:
		if(GET_BIT(DDRD,loc_pin_id)==PIN_INPUT)
		*Loc_ptr=(GET_BIT(PIND,loc_pin_id));
		
		else   ERROR_LOCRET=PIN_DIR_ERROR;
     3aa:	82 e0       	ldi	r24, 0x02	; 2
		break;
	}
	
	return ERROR_LOCRET;
}
}
     3ac:	08 95       	ret

000003ae <DIO_WritePort>:

PIN_ERROR_TYPES  DIO_WritePort(u8 port_num,u8 port_value)
{
	PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
	
	switch(port_num)
     3ae:	81 30       	cpi	r24, 0x01	; 1
     3b0:	51 f0       	breq	.+20     	; 0x3c6 <DIO_WritePort+0x18>
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	28 f0       	brcs	.+10     	; 0x3c0 <DIO_WritePort+0x12>
     3b6:	82 30       	cpi	r24, 0x02	; 2
     3b8:	49 f0       	breq	.+18     	; 0x3cc <DIO_WritePort+0x1e>
     3ba:	83 30       	cpi	r24, 0x03	; 3
     3bc:	69 f4       	brne	.+26     	; 0x3d8 <DIO_WritePort+0x2a>
     3be:	09 c0       	rjmp	.+18     	; 0x3d2 <DIO_WritePort+0x24>
	{
		case u8PORTA:
		PORTA = port_value;
     3c0:	6b bb       	out	0x1b, r22	; 27
}
}

PIN_ERROR_TYPES  DIO_WritePort(u8 port_num,u8 port_value)
{
	PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     3c2:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(port_num)
	{
		case u8PORTA:
		PORTA = port_value;
		break;
     3c4:	08 95       	ret
		
		case u8PORTB:
		PORTB = port_value;
     3c6:	68 bb       	out	0x18, r22	; 24
}
}

PIN_ERROR_TYPES  DIO_WritePort(u8 port_num,u8 port_value)
{
	PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     3c8:	80 e0       	ldi	r24, 0x00	; 0
		PORTA = port_value;
		break;
		
		case u8PORTB:
		PORTB = port_value;
		break;
     3ca:	08 95       	ret

		case u8PORTC:
		PORTC = port_value;
     3cc:	65 bb       	out	0x15, r22	; 21
}
}

PIN_ERROR_TYPES  DIO_WritePort(u8 port_num,u8 port_value)
{
	PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     3ce:	80 e0       	ldi	r24, 0x00	; 0
		PORTB = port_value;
		break;

		case u8PORTC:
		PORTC = port_value;
		break;
     3d0:	08 95       	ret

		case u8PORTD:
		PORTD = port_value;
     3d2:	62 bb       	out	0x12, r22	; 18
}
}

PIN_ERROR_TYPES  DIO_WritePort(u8 port_num,u8 port_value)
{
	PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     3d4:	80 e0       	ldi	r24, 0x00	; 0
		PORTC = port_value;
		break;

		case u8PORTD:
		PORTD = port_value;
		break;
     3d6:	08 95       	ret
		
		default:
		ERROR_LOCRET=PORT_ERROR;
     3d8:	83 e0       	ldi	r24, 0x03	; 3
		
	}
	return ERROR_LOCRET;
}
     3da:	08 95       	ret

000003dc <DIO_ReadPort>:
{
	
	PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
	
	u8 *loc_ptr =ptr_val;
	switch(port_num)
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	61 f0       	breq	.+24     	; 0x3f8 <DIO_ReadPort+0x1c>
     3e0:	81 30       	cpi	r24, 0x01	; 1
     3e2:	28 f0       	brcs	.+10     	; 0x3ee <DIO_ReadPort+0x12>
     3e4:	82 30       	cpi	r24, 0x02	; 2
     3e6:	69 f0       	breq	.+26     	; 0x402 <DIO_ReadPort+0x26>
     3e8:	83 30       	cpi	r24, 0x03	; 3
     3ea:	a9 f4       	brne	.+42     	; 0x416 <DIO_ReadPort+0x3a>
     3ec:	0f c0       	rjmp	.+30     	; 0x40c <DIO_ReadPort+0x30>
	{
		case u8PORTA:
		*loc_ptr=PINA;
     3ee:	89 b3       	in	r24, 0x19	; 25
     3f0:	fb 01       	movw	r30, r22
     3f2:	80 83       	st	Z, r24
}

PIN_ERROR_TYPES  DIO_ReadPort(u8 port_num,u8 *ptr_val)
{
	
	PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     3f4:	80 e0       	ldi	r24, 0x00	; 0
	u8 *loc_ptr =ptr_val;
	switch(port_num)
	{
		case u8PORTA:
		*loc_ptr=PINA;
		break;
     3f6:	08 95       	ret
		
		case u8PORTB:
		*loc_ptr=PINB;
     3f8:	86 b3       	in	r24, 0x16	; 22
     3fa:	fb 01       	movw	r30, r22
     3fc:	80 83       	st	Z, r24
}

PIN_ERROR_TYPES  DIO_ReadPort(u8 port_num,u8 *ptr_val)
{
	
	PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     3fe:	80 e0       	ldi	r24, 0x00	; 0
		*loc_ptr=PINA;
		break;
		
		case u8PORTB:
		*loc_ptr=PINB;
		break;
     400:	08 95       	ret

		case u8PORTC:
		*loc_ptr=PINC;
     402:	83 b3       	in	r24, 0x13	; 19
     404:	fb 01       	movw	r30, r22
     406:	80 83       	st	Z, r24
}

PIN_ERROR_TYPES  DIO_ReadPort(u8 port_num,u8 *ptr_val)
{
	
	PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     408:	80 e0       	ldi	r24, 0x00	; 0
		*loc_ptr=PINB;
		break;

		case u8PORTC:
		*loc_ptr=PINC;
		break;
     40a:	08 95       	ret

		case u8PORTD:
		*loc_ptr=PIND;
     40c:	80 b3       	in	r24, 0x10	; 16
     40e:	fb 01       	movw	r30, r22
     410:	80 83       	st	Z, r24
}

PIN_ERROR_TYPES  DIO_ReadPort(u8 port_num,u8 *ptr_val)
{
	
	PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
     412:	80 e0       	ldi	r24, 0x00	; 0
		*loc_ptr=PINC;
		break;

		case u8PORTD:
		*loc_ptr=PIND;
		break;
     414:	08 95       	ret
		
		default:
		ERROR_LOCRET=PORT_ERROR;
     416:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ERROR_LOCRET;
     418:	08 95       	ret

0000041a <KEYPAD_WritrPins>:
   }
  }   	
	return ERROR_KEYPAD_RET;
}
void KEYPAD_WritrPins(u8 value)
{		
     41a:	cf 93       	push	r28
     41c:	c8 2f       	mov	r28, r24
	DIO_WritrPin(KEY_RAW0,GET_BIT(value,0));
     41e:	68 2f       	mov	r22, r24
     420:	61 70       	andi	r22, 0x01	; 1
     422:	80 e1       	ldi	r24, 0x10	; 16
     424:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	DIO_WritrPin(KEY_RAW1,GET_BIT(value,1));	
     428:	6c 2f       	mov	r22, r28
     42a:	66 95       	lsr	r22
     42c:	61 70       	andi	r22, 0x01	; 1
     42e:	81 e1       	ldi	r24, 0x11	; 17
     430:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	DIO_WritrPin(KEY_RAW2,GET_BIT(value,2));
     434:	6c 2f       	mov	r22, r28
     436:	66 95       	lsr	r22
     438:	66 95       	lsr	r22
     43a:	61 70       	andi	r22, 0x01	; 1
     43c:	82 e1       	ldi	r24, 0x12	; 18
     43e:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	DIO_WritrPin(KEY_RAW3,GET_BIT(value,3));
     442:	c6 95       	lsr	r28
     444:	c6 95       	lsr	r28
     446:	c6 95       	lsr	r28
     448:	6c 2f       	mov	r22, r28
     44a:	61 70       	andi	r22, 0x01	; 1
     44c:	83 e1       	ldi	r24, 0x13	; 19
     44e:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
}
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <KEYPAD_voidInit>:



void KEYPAD_voidInit(void)
{
Port_setPinDirection(KEY_RAW0,PIN_OUTPUT);
     456:	80 e1       	ldi	r24, 0x10	; 16
     458:	61 e0       	ldi	r22, 0x01	; 1
     45a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Port_setPinDirection>
Port_setPinDirection(KEY_RAW1,PIN_OUTPUT);
     45e:	81 e1       	ldi	r24, 0x11	; 17
     460:	61 e0       	ldi	r22, 0x01	; 1
     462:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Port_setPinDirection>
Port_setPinDirection(KEY_RAW2,PIN_OUTPUT);
     466:	82 e1       	ldi	r24, 0x12	; 18
     468:	61 e0       	ldi	r22, 0x01	; 1
     46a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Port_setPinDirection>
Port_setPinDirection(KEY_RAW3,PIN_OUTPUT);
     46e:	83 e1       	ldi	r24, 0x13	; 19
     470:	61 e0       	ldi	r22, 0x01	; 1
     472:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Port_setPinDirection>
Port_SetPinMode(KEY_COL0,PIN_IN_PULLUP);
     476:	84 e1       	ldi	r24, 0x14	; 20
     478:	63 e0       	ldi	r22, 0x03	; 3
     47a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <Port_SetPinMode>
Port_SetPinMode(KEY_COL1,PIN_IN_PULLUP);
     47e:	85 e1       	ldi	r24, 0x15	; 21
     480:	63 e0       	ldi	r22, 0x03	; 3
     482:	0e 94 fd 06 	call	0xdfa	; 0xdfa <Port_SetPinMode>
Port_SetPinMode(KEY_COL2,PIN_IN_PULLUP);
     486:	86 e1       	ldi	r24, 0x16	; 22
     488:	63 e0       	ldi	r22, 0x03	; 3
     48a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <Port_SetPinMode>
Port_SetPinMode(KEY_COL3,PIN_IN_PULLUP);
     48e:	87 e1       	ldi	r24, 0x17	; 23
     490:	63 e0       	ldi	r22, 0x03	; 3
     492:	0e 94 fd 06 	call	0xdfa	; 0xdfa <Port_SetPinMode>

}
     496:	08 95       	ret

00000498 <KEYPAD_ReadPins>:
	DIO_WritrPin(KEY_RAW2,GET_BIT(value,2));
	DIO_WritrPin(KEY_RAW3,GET_BIT(value,3));
}

void KEYPAD_ReadPins(u8 *value)
{
     498:	0f 93       	push	r16
     49a:	1f 93       	push	r17
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	0f 92       	push	r0
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	8c 01       	movw	r16, r24
	u8 loc_read=0;
     4a8:	19 82       	std	Y+1, r1	; 0x01
	//u8 *temp=value;
	DIO_READ_PIN(KEY_COL0,&loc_read);
     4aa:	84 e1       	ldi	r24, 0x14	; 20
     4ac:	be 01       	movw	r22, r28
     4ae:	6f 5f       	subi	r22, 0xFF	; 255
     4b0:	7f 4f       	sbci	r23, 0xFF	; 255
     4b2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DIO_READ_PIN>
	*value=loc_read;
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	f8 01       	movw	r30, r16
     4ba:	80 83       	st	Z, r24
	DIO_READ_PIN(KEY_COL1,&loc_read);
     4bc:	85 e1       	ldi	r24, 0x15	; 21
     4be:	be 01       	movw	r22, r28
     4c0:	6f 5f       	subi	r22, 0xFF	; 255
     4c2:	7f 4f       	sbci	r23, 0xFF	; 255
     4c4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DIO_READ_PIN>
	*value|=(loc_read<<1);
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	88 0f       	add	r24, r24
     4cc:	f8 01       	movw	r30, r16
     4ce:	90 81       	ld	r25, Z
     4d0:	89 2b       	or	r24, r25
     4d2:	80 83       	st	Z, r24
	DIO_READ_PIN(KEY_COL2,&loc_read);
     4d4:	86 e1       	ldi	r24, 0x16	; 22
     4d6:	be 01       	movw	r22, r28
     4d8:	6f 5f       	subi	r22, 0xFF	; 255
     4da:	7f 4f       	sbci	r23, 0xFF	; 255
     4dc:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DIO_READ_PIN>
	*value|=(loc_read<<2);
     4e0:	89 81       	ldd	r24, Y+1	; 0x01
     4e2:	88 0f       	add	r24, r24
     4e4:	88 0f       	add	r24, r24
     4e6:	f8 01       	movw	r30, r16
     4e8:	90 81       	ld	r25, Z
     4ea:	89 2b       	or	r24, r25
     4ec:	80 83       	st	Z, r24
	DIO_READ_PIN(KEY_COL3,&loc_read);
     4ee:	87 e1       	ldi	r24, 0x17	; 23
     4f0:	be 01       	movw	r22, r28
     4f2:	6f 5f       	subi	r22, 0xFF	; 255
     4f4:	7f 4f       	sbci	r23, 0xFF	; 255
     4f6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DIO_READ_PIN>
	*value|=(loc_read<<3);
     4fa:	89 81       	ldd	r24, Y+1	; 0x01
     4fc:	88 0f       	add	r24, r24
     4fe:	88 0f       	add	r24, r24
     500:	88 0f       	add	r24, r24
     502:	f8 01       	movw	r30, r16
     504:	90 81       	ld	r25, Z
     506:	89 2b       	or	r24, r25
     508:	80 83       	st	Z, r24
	
     50a:	0f 90       	pop	r0
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	08 95       	ret

00000516 <KEYPAD_FindKey>:


//u8KEYPAD_SYMBOL[4]={0b1111,0b01111,0b1011,0b1101,0b1110};
	
ERROR_KEYPAD_STATUS KEYPAD_FindKey(u8 *Loc_keyPress)
{
     516:	6f 92       	push	r6
     518:	7f 92       	push	r7
     51a:	8f 92       	push	r8
     51c:	9f 92       	push	r9
     51e:	af 92       	push	r10
     520:	bf 92       	push	r11
     522:	cf 92       	push	r12
     524:	df 92       	push	r13
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	0f 92       	push	r0
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
     538:	5c 01       	movw	r10, r24
  ERROR_KEYPAD_STATUS ERROR_KEYPAD_RET=ERROR_FREE;
  u8 temp=0b00;
     53a:	19 82       	std	Y+1, r1	; 0x01
  u8 reg;
  for(u8 i=0;i<RAW_NUM;i++)
     53c:	80 91 60 00 	lds	r24, 0x0060
     540:	88 23       	and	r24, r24
     542:	09 f4       	brne	.+2      	; 0x546 <KEYPAD_FindKey+0x30>
     544:	5f c0       	rjmp	.+190    	; 0x604 <KEYPAD_FindKey+0xee>
     546:	10 e0       	ldi	r17, 0x00	; 0

//u8KEYPAD_SYMBOL[4]={0b1111,0b01111,0b1011,0b1101,0b1110};
	
ERROR_KEYPAD_STATUS KEYPAD_FindKey(u8 *Loc_keyPress)
{
  ERROR_KEYPAD_STATUS ERROR_KEYPAD_RET=ERROR_FREE;
     548:	77 24       	eor	r7, r7
  u8 temp=0b00;
  u8 reg;
  for(u8 i=0;i<RAW_NUM;i++)
  {	  
	reg=0x0F;  
  KEYPAD_WritrPins(TGLWITHOUTASSIGN_BIT(reg,i));
     54a:	cc 24       	eor	r12, r12
     54c:	dd 24       	eor	r13, r13
     54e:	c3 94       	inc	r12
     550:	0f e0       	ldi	r16, 0x0F	; 15
	break;
	case 0b1101:	
	*Loc_keyPress=KEYPAD_SYMBOL[(4*i)+1];
	break;
	case 0b1011:	
	*Loc_keyPress=KEYPAD_SYMBOL[(4*i)+2];
     552:	0f 2e       	mov	r0, r31
     554:	f1 e6       	ldi	r31, 0x61	; 97
     556:	8f 2e       	mov	r8, r31
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	9f 2e       	mov	r9, r31
     55c:	f0 2d       	mov	r31, r0
	break;
	case 0b0111:	
	*Loc_keyPress=KEYPAD_SYMBOL[(4*i)+3];
	break;
	default:
	ERROR_KEYPAD_RET=NO_KEY_PRESSED;	
     55e:	66 24       	eor	r6, r6
     560:	63 94       	inc	r6
  u8 temp=0b00;
  u8 reg;
  for(u8 i=0;i<RAW_NUM;i++)
  {	  
	reg=0x0F;  
  KEYPAD_WritrPins(TGLWITHOUTASSIGN_BIT(reg,i));
     562:	e1 2e       	mov	r14, r17
     564:	ff 24       	eor	r15, r15
     566:	c6 01       	movw	r24, r12
     568:	01 2e       	mov	r0, r17
     56a:	02 c0       	rjmp	.+4      	; 0x570 <KEYPAD_FindKey+0x5a>
     56c:	88 0f       	add	r24, r24
     56e:	99 1f       	adc	r25, r25
     570:	0a 94       	dec	r0
     572:	e2 f7       	brpl	.-8      	; 0x56c <KEYPAD_FindKey+0x56>
     574:	80 27       	eor	r24, r16
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 0d 02 	call	0x41a	; 0x41a <KEYPAD_WritrPins>
  KEYPAD_ReadPins(&temp);
     57c:	ce 01       	movw	r24, r28
     57e:	01 96       	adiw	r24, 0x01	; 1
     580:	0e 94 4c 02 	call	0x498	; 0x498 <KEYPAD_ReadPins>
  switch(temp)
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	8b 30       	cpi	r24, 0x0B	; 11
     588:	f9 f0       	breq	.+62     	; 0x5c8 <KEYPAD_FindKey+0xb2>
     58a:	8c 30       	cpi	r24, 0x0C	; 12
     58c:	18 f4       	brcc	.+6      	; 0x594 <KEYPAD_FindKey+0x7e>
     58e:	87 30       	cpi	r24, 0x07	; 7
     590:	89 f5       	brne	.+98     	; 0x5f4 <KEYPAD_FindKey+0xde>
     592:	25 c0       	rjmp	.+74     	; 0x5de <KEYPAD_FindKey+0xc8>
     594:	8d 30       	cpi	r24, 0x0D	; 13
     596:	69 f0       	breq	.+26     	; 0x5b2 <KEYPAD_FindKey+0x9c>
     598:	8e 30       	cpi	r24, 0x0E	; 14
     59a:	61 f5       	brne	.+88     	; 0x5f4 <KEYPAD_FindKey+0xde>
  {
	case 0b1110:	
	*Loc_keyPress=KEYPAD_SYMBOL[(4*i)+0]; 
     59c:	f7 01       	movw	r30, r14
     59e:	ee 0f       	add	r30, r30
     5a0:	ff 1f       	adc	r31, r31
     5a2:	ee 0f       	add	r30, r30
     5a4:	ff 1f       	adc	r31, r31
     5a6:	e8 0d       	add	r30, r8
     5a8:	f9 1d       	adc	r31, r9
     5aa:	80 81       	ld	r24, Z
     5ac:	f5 01       	movw	r30, r10
     5ae:	80 83       	st	Z, r24
	break;
     5b0:	22 c0       	rjmp	.+68     	; 0x5f6 <KEYPAD_FindKey+0xe0>
	case 0b1101:	
	*Loc_keyPress=KEYPAD_SYMBOL[(4*i)+1];
     5b2:	f7 01       	movw	r30, r14
     5b4:	ee 0f       	add	r30, r30
     5b6:	ff 1f       	adc	r31, r31
     5b8:	ee 0f       	add	r30, r30
     5ba:	ff 1f       	adc	r31, r31
     5bc:	e8 0d       	add	r30, r8
     5be:	f9 1d       	adc	r31, r9
     5c0:	81 81       	ldd	r24, Z+1	; 0x01
     5c2:	f5 01       	movw	r30, r10
     5c4:	80 83       	st	Z, r24
	break;
     5c6:	17 c0       	rjmp	.+46     	; 0x5f6 <KEYPAD_FindKey+0xe0>
	case 0b1011:	
	*Loc_keyPress=KEYPAD_SYMBOL[(4*i)+2];
     5c8:	f7 01       	movw	r30, r14
     5ca:	ee 0f       	add	r30, r30
     5cc:	ff 1f       	adc	r31, r31
     5ce:	ee 0f       	add	r30, r30
     5d0:	ff 1f       	adc	r31, r31
     5d2:	e8 0d       	add	r30, r8
     5d4:	f9 1d       	adc	r31, r9
     5d6:	82 81       	ldd	r24, Z+2	; 0x02
     5d8:	f5 01       	movw	r30, r10
     5da:	80 83       	st	Z, r24
	break;
     5dc:	0c c0       	rjmp	.+24     	; 0x5f6 <KEYPAD_FindKey+0xe0>
	case 0b0111:	
	*Loc_keyPress=KEYPAD_SYMBOL[(4*i)+3];
     5de:	f7 01       	movw	r30, r14
     5e0:	ee 0f       	add	r30, r30
     5e2:	ff 1f       	adc	r31, r31
     5e4:	ee 0f       	add	r30, r30
     5e6:	ff 1f       	adc	r31, r31
     5e8:	e8 0d       	add	r30, r8
     5ea:	f9 1d       	adc	r31, r9
     5ec:	83 81       	ldd	r24, Z+3	; 0x03
     5ee:	f5 01       	movw	r30, r10
     5f0:	80 83       	st	Z, r24
	break;
     5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <KEYPAD_FindKey+0xe0>
	default:
	ERROR_KEYPAD_RET=NO_KEY_PRESSED;	
     5f4:	76 2c       	mov	r7, r6
ERROR_KEYPAD_STATUS KEYPAD_FindKey(u8 *Loc_keyPress)
{
  ERROR_KEYPAD_STATUS ERROR_KEYPAD_RET=ERROR_FREE;
  u8 temp=0b00;
  u8 reg;
  for(u8 i=0;i<RAW_NUM;i++)
     5f6:	1f 5f       	subi	r17, 0xFF	; 255
     5f8:	80 91 60 00 	lds	r24, 0x0060
     5fc:	18 17       	cp	r17, r24
     5fe:	08 f4       	brcc	.+2      	; 0x602 <KEYPAD_FindKey+0xec>
     600:	b0 cf       	rjmp	.-160    	; 0x562 <KEYPAD_FindKey+0x4c>
     602:	01 c0       	rjmp	.+2      	; 0x606 <KEYPAD_FindKey+0xf0>

//u8KEYPAD_SYMBOL[4]={0b1111,0b01111,0b1011,0b1101,0b1110};
	
ERROR_KEYPAD_STATUS KEYPAD_FindKey(u8 *Loc_keyPress)
{
  ERROR_KEYPAD_STATUS ERROR_KEYPAD_RET=ERROR_FREE;
     604:	77 24       	eor	r7, r7
	default:
	ERROR_KEYPAD_RET=NO_KEY_PRESSED;	
   }
  }   	
	return ERROR_KEYPAD_RET;
}
     606:	87 2d       	mov	r24, r7
     608:	0f 90       	pop	r0
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	ff 90       	pop	r15
     614:	ef 90       	pop	r14
     616:	df 90       	pop	r13
     618:	cf 90       	pop	r12
     61a:	bf 90       	pop	r11
     61c:	af 90       	pop	r10
     61e:	9f 90       	pop	r9
     620:	8f 90       	pop	r8
     622:	7f 90       	pop	r7
     624:	6f 90       	pop	r6
     626:	08 95       	ret

00000628 <LCD_voidWriteCharacter>:
	LCD_voidSendCommand(0x0C);   //hide CURSOR 

}

void LCD_voidWriteCharacter(u8 Character)
{
     628:	cf 93       	push	r28
     62a:	c8 2f       	mov	r28, r24

	DIO_WritrPin(RW_PIN,LOW_LEVEL);
     62c:	89 e0       	ldi	r24, 0x09	; 9
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	DIO_WritrPin(RS_PIN,HIGH_LEVEL);
     634:	8a e0       	ldi	r24, 0x0A	; 10
     636:	61 e0       	ldi	r22, 0x01	; 1
     638:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	//DIO_WritePin(RW_PORT,RW_PIN,LOW_LEVEL);

	DIO_WritrPin(D0_PIN,GET_BIT(Character,0));
     63c:	6c 2f       	mov	r22, r28
     63e:	61 70       	andi	r22, 0x01	; 1
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	DIO_WritrPin(D1_PIN,GET_BIT(Character,1));
     646:	6c 2f       	mov	r22, r28
     648:	66 95       	lsr	r22
     64a:	61 70       	andi	r22, 0x01	; 1
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	DIO_WritrPin(D2_PIN,GET_BIT(Character,2));
     652:	6c 2f       	mov	r22, r28
     654:	66 95       	lsr	r22
     656:	66 95       	lsr	r22
     658:	61 70       	andi	r22, 0x01	; 1
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	DIO_WritrPin(D3_PIN,GET_BIT(Character,3));
     660:	6c 2f       	mov	r22, r28
     662:	66 95       	lsr	r22
     664:	66 95       	lsr	r22
     666:	66 95       	lsr	r22
     668:	61 70       	andi	r22, 0x01	; 1
     66a:	83 e0       	ldi	r24, 0x03	; 3
     66c:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	DIO_WritrPin(D4_PIN,GET_BIT(Character,4));
     670:	6c 2f       	mov	r22, r28
     672:	62 95       	swap	r22
     674:	6f 70       	andi	r22, 0x0F	; 15
     676:	61 70       	andi	r22, 0x01	; 1
     678:	84 e0       	ldi	r24, 0x04	; 4
     67a:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	DIO_WritrPin(D5_PIN,GET_BIT(Character,5));
     67e:	6c 2f       	mov	r22, r28
     680:	62 95       	swap	r22
     682:	66 95       	lsr	r22
     684:	67 70       	andi	r22, 0x07	; 7
     686:	61 70       	andi	r22, 0x01	; 1
     688:	85 e0       	ldi	r24, 0x05	; 5
     68a:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	DIO_WritrPin(D6_PIN,GET_BIT(Character,6));
     68e:	6c 2f       	mov	r22, r28
     690:	62 95       	swap	r22
     692:	66 95       	lsr	r22
     694:	66 95       	lsr	r22
     696:	63 70       	andi	r22, 0x03	; 3
     698:	61 70       	andi	r22, 0x01	; 1
     69a:	86 e0       	ldi	r24, 0x06	; 6
     69c:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	DIO_WritrPin(D7_PIN,GET_BIT(Character,7));
     6a0:	6c 2f       	mov	r22, r28
     6a2:	66 1f       	adc	r22, r22
     6a4:	66 27       	eor	r22, r22
     6a6:	66 1f       	adc	r22, r22
     6a8:	87 e0       	ldi	r24, 0x07	; 7
     6aa:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>

	DIO_WritrPin(EN_PIN,HIGH_LEVEL);
     6ae:	88 e0       	ldi	r24, 0x08	; 8
     6b0:	61 e0       	ldi	r22, 0x01	; 1
     6b2:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	_delay_ms(00);
	DIO_WritrPin(EN_PIN,LOW_LEVEL);
     6b6:	88 e0       	ldi	r24, 0x08	; 8
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>

}
     6be:	cf 91       	pop	r28
     6c0:	08 95       	ret

000006c2 <LCD_voidSendCommand>:
void LCD_voidSendCommand(u8 Command)
{
     6c2:	cf 93       	push	r28
     6c4:	c8 2f       	mov	r28, r24
	DIO_WritrPin(RS_PIN,LOW_LEVEL);
     6c6:	8a e0       	ldi	r24, 0x0A	; 10
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	DIO_WritrPin(RW_PIN,LOW_LEVEL);
     6ce:	89 e0       	ldi	r24, 0x09	; 9
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>

	DIO_WritrPin(D0_PIN,GET_BIT(Command,0));
     6d6:	6c 2f       	mov	r22, r28
     6d8:	61 70       	andi	r22, 0x01	; 1
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	DIO_WritrPin(D1_PIN,GET_BIT(Command,1));
     6e0:	6c 2f       	mov	r22, r28
     6e2:	66 95       	lsr	r22
     6e4:	61 70       	andi	r22, 0x01	; 1
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	DIO_WritrPin(D2_PIN,GET_BIT(Command,2));
     6ec:	6c 2f       	mov	r22, r28
     6ee:	66 95       	lsr	r22
     6f0:	66 95       	lsr	r22
     6f2:	61 70       	andi	r22, 0x01	; 1
     6f4:	82 e0       	ldi	r24, 0x02	; 2
     6f6:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	DIO_WritrPin(D3_PIN,GET_BIT(Command,3));
     6fa:	6c 2f       	mov	r22, r28
     6fc:	66 95       	lsr	r22
     6fe:	66 95       	lsr	r22
     700:	66 95       	lsr	r22
     702:	61 70       	andi	r22, 0x01	; 1
     704:	83 e0       	ldi	r24, 0x03	; 3
     706:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	DIO_WritrPin(D4_PIN,GET_BIT(Command,4));
     70a:	6c 2f       	mov	r22, r28
     70c:	62 95       	swap	r22
     70e:	6f 70       	andi	r22, 0x0F	; 15
     710:	61 70       	andi	r22, 0x01	; 1
     712:	84 e0       	ldi	r24, 0x04	; 4
     714:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	DIO_WritrPin(D5_PIN,GET_BIT(Command,5));
     718:	6c 2f       	mov	r22, r28
     71a:	62 95       	swap	r22
     71c:	66 95       	lsr	r22
     71e:	67 70       	andi	r22, 0x07	; 7
     720:	61 70       	andi	r22, 0x01	; 1
     722:	85 e0       	ldi	r24, 0x05	; 5
     724:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	DIO_WritrPin(D6_PIN,GET_BIT(Command,6));
     728:	6c 2f       	mov	r22, r28
     72a:	62 95       	swap	r22
     72c:	66 95       	lsr	r22
     72e:	66 95       	lsr	r22
     730:	63 70       	andi	r22, 0x03	; 3
     732:	61 70       	andi	r22, 0x01	; 1
     734:	86 e0       	ldi	r24, 0x06	; 6
     736:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	DIO_WritrPin(D7_PIN,GET_BIT(Command,7));
     73a:	6c 2f       	mov	r22, r28
     73c:	66 1f       	adc	r22, r22
     73e:	66 27       	eor	r22, r22
     740:	66 1f       	adc	r22, r22
     742:	87 e0       	ldi	r24, 0x07	; 7
     744:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>

	DIO_WritrPin(EN_PIN,HIGH_LEVEL);
     748:	88 e0       	ldi	r24, 0x08	; 8
     74a:	61 e0       	ldi	r22, 0x01	; 1
     74c:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     750:	00 00       	nop
		_delay_us(1);
	//_delay_ms(2);				
	DIO_WritrPin(EN_PIN,LOW_LEVEL);
     752:	88 e0       	ldi	r24, 0x08	; 8
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_WritrPin>
     75a:	81 e2       	ldi	r24, 0x21	; 33
     75c:	8a 95       	dec	r24
     75e:	f1 f7       	brne	.-4      	; 0x75c <LCD_voidSendCommand+0x9a>
     760:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     762:	83 ec       	ldi	r24, 0xC3	; 195
     764:	99 e0       	ldi	r25, 0x09	; 9
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	f1 f7       	brne	.-4      	; 0x766 <LCD_voidSendCommand+0xa4>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <LCD_voidSendCommand+0xaa>
     76c:	00 00       	nop
		_delay_us(100);
		_delay_ms(10);


}
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <LCD_voidInit>:
void LCD_voidInit(void)
{



	Port_setPinDirection(D0_PIN,PIN_OUTPUT);
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	61 e0       	ldi	r22, 0x01	; 1
     776:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Port_setPinDirection>
	Port_setPinDirection(D1_PIN,PIN_OUTPUT);
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	61 e0       	ldi	r22, 0x01	; 1
     77e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Port_setPinDirection>
	Port_setPinDirection(D2_PIN,PIN_OUTPUT);
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	61 e0       	ldi	r22, 0x01	; 1
     786:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Port_setPinDirection>
	Port_setPinDirection(D3_PIN,PIN_OUTPUT);
     78a:	83 e0       	ldi	r24, 0x03	; 3
     78c:	61 e0       	ldi	r22, 0x01	; 1
     78e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Port_setPinDirection>
	Port_setPinDirection(D4_PIN,PIN_OUTPUT);
     792:	84 e0       	ldi	r24, 0x04	; 4
     794:	61 e0       	ldi	r22, 0x01	; 1
     796:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Port_setPinDirection>
	Port_setPinDirection(D5_PIN,PIN_OUTPUT);
     79a:	85 e0       	ldi	r24, 0x05	; 5
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Port_setPinDirection>
	Port_setPinDirection(D6_PIN,PIN_OUTPUT);
     7a2:	86 e0       	ldi	r24, 0x06	; 6
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Port_setPinDirection>
	Port_setPinDirection(D7_PIN,PIN_OUTPUT);
     7aa:	87 e0       	ldi	r24, 0x07	; 7
     7ac:	61 e0       	ldi	r22, 0x01	; 1
     7ae:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Port_setPinDirection>

	Port_setPinDirection(RS_PIN,PIN_OUTPUT);
     7b2:	8a e0       	ldi	r24, 0x0A	; 10
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Port_setPinDirection>
	Port_setPinDirection(RW_PIN,PIN_OUTPUT);
     7ba:	89 e0       	ldi	r24, 0x09	; 9
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Port_setPinDirection>
	Port_setPinDirection(EN_PIN,PIN_OUTPUT);
     7c2:	88 e0       	ldi	r24, 0x08	; 8
     7c4:	61 e0       	ldi	r22, 0x01	; 1
     7c6:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Port_setPinDirection>
     7ca:	81 ee       	ldi	r24, 0xE1	; 225
     7cc:	94 e0       	ldi	r25, 0x04	; 4
     7ce:	01 97       	sbiw	r24, 0x01	; 1
     7d0:	f1 f7       	brne	.-4      	; 0x7ce <LCD_voidInit+0x5c>
     7d2:	00 c0       	rjmp	.+0      	; 0x7d4 <LCD_voidInit+0x62>
     7d4:	00 00       	nop
     7d6:	87 e8       	ldi	r24, 0x87	; 135
     7d8:	93 e1       	ldi	r25, 0x13	; 19
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	f1 f7       	brne	.-4      	; 0x7da <LCD_voidInit+0x68>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <LCD_voidInit+0x6e>
     7e0:	00 00       	nop
	
	_delay_ms(5);
	_delay_ms(20);       //wait for start initialization
	LCD_voidSendCommand(0x38);   //8bit mode
     7e2:	88 e3       	ldi	r24, 0x38	; 56
     7e4:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x0E);   //curser not be blinking
     7e8:	8e e0       	ldi	r24, 0x0E	; 14
     7ea:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x01);   // clear display
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_voidSendCommand>
     7f4:	83 ef       	ldi	r24, 0xF3	; 243
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <LCD_voidInit+0x86>
     7fc:	00 c0       	rjmp	.+0      	; 0x7fe <LCD_voidInit+0x8c>
     7fe:	00 00       	nop
	_delay_ms(2);
	//LCD_voidSendCommand(0x06);   //INCREAMENT CURSOR TO RIGHT
	LCD_voidSendCommand(0x0C);   //hide CURSOR 
     800:	8c e0       	ldi	r24, 0x0C	; 12
     802:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_voidSendCommand>

}
     806:	08 95       	ret

00000808 <LCD_voidCustomChar>:
		_delay_ms(10);


}
void LCD_voidCustomChar (unsigned char loc, unsigned char *msg)
{
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	06 2f       	mov	r16, r22
     812:	17 2f       	mov	r17, r23
	unsigned char i;
	if(loc<8)
     814:	88 30       	cpi	r24, 0x08	; 8
     816:	70 f4       	brcc	.+28     	; 0x834 <LCD_voidCustomChar+0x2c>
	{
		LCD_voidSendCommand (0x40 + (loc*8));	/* Command 0x40  point CGRAM address */
     818:	88 0f       	add	r24, r24
     81a:	88 0f       	add	r24, r24
     81c:	88 0f       	add	r24, r24
     81e:	80 5c       	subi	r24, 0xC0	; 192
     820:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_voidSendCommand>
     824:	c0 2f       	mov	r28, r16
     826:	d1 2f       	mov	r29, r17
     828:	18 e0       	ldi	r17, 0x08	; 8
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
		LCD_voidWriteCharacter(msg[i]);
     82a:	89 91       	ld	r24, Y+
     82c:	0e 94 14 03 	call	0x628	; 0x628 <LCD_voidWriteCharacter>
     830:	11 50       	subi	r17, 0x01	; 1
{
	unsigned char i;
	if(loc<8)
	{
		LCD_voidSendCommand (0x40 + (loc*8));	/* Command 0x40  point CGRAM address */
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
     832:	d9 f7       	brne	.-10     	; 0x82a <LCD_voidCustomChar+0x22>
		LCD_voidWriteCharacter(msg[i]);
	}
	  LCD_voidSendCommand(0x80); //shift back to DDRAM location 0
     834:	80 e8       	ldi	r24, 0x80	; 128
     836:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_voidSendCommand>
}
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	08 95       	ret

00000844 <LCD_voidWriteString>:
void LCD_voidWriteString(u8 *string)
{
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	ec 01       	movw	r28, r24

	while(*string!='\0')
     84a:	88 81       	ld	r24, Y
     84c:	88 23       	and	r24, r24
     84e:	31 f0       	breq	.+12     	; 0x85c <LCD_voidWriteString+0x18>
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
		LCD_voidWriteCharacter(msg[i]);
	}
	  LCD_voidSendCommand(0x80); //shift back to DDRAM location 0
}
void LCD_voidWriteString(u8 *string)
     850:	21 96       	adiw	r28, 0x01	; 1
{

	while(*string!='\0')
	{
		LCD_voidWriteCharacter(*string);
     852:	0e 94 14 03 	call	0x628	; 0x628 <LCD_voidWriteCharacter>
	  LCD_voidSendCommand(0x80); //shift back to DDRAM location 0
}
void LCD_voidWriteString(u8 *string)
{

	while(*string!='\0')
     856:	89 91       	ld	r24, Y+
     858:	88 23       	and	r24, r24
     85a:	d9 f7       	brne	.-10     	; 0x852 <LCD_voidWriteString+0xe>
		string++;

	}


}
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	08 95       	ret

00000862 <LCD_voidSetCursor>:
	LCD_voidSendCommand(ARR_LOC_ROWS[x-1]+(y-1));
}
*/
void LCD_voidSetCursor(u8 x, u8 y)
{
	if((x<20)&&(y<4))
     862:	84 31       	cpi	r24, 0x14	; 20
     864:	a8 f4       	brcc	.+42     	; 0x890 <LCD_voidSetCursor+0x2e>
     866:	64 30       	cpi	r22, 0x04	; 4
     868:	98 f4       	brcc	.+38     	; 0x890 <LCD_voidSetCursor+0x2e>
	{
		
		u8 loc_address;
		switch(y)
     86a:	61 30       	cpi	r22, 0x01	; 1
     86c:	39 f0       	breq	.+14     	; 0x87c <LCD_voidSetCursor+0x1a>
     86e:	61 30       	cpi	r22, 0x01	; 1
     870:	58 f0       	brcs	.+22     	; 0x888 <LCD_voidSetCursor+0x26>
     872:	62 30       	cpi	r22, 0x02	; 2
     874:	29 f0       	breq	.+10     	; 0x880 <LCD_voidSetCursor+0x1e>
     876:	63 30       	cpi	r22, 0x03	; 3
     878:	41 f4       	brne	.+16     	; 0x88a <LCD_voidSetCursor+0x28>
     87a:	04 c0       	rjmp	.+8      	; 0x884 <LCD_voidSetCursor+0x22>
		{
			case 0:loc_address=0x80+0x00; break;
			case 1:loc_address=0x80+0x40; break;
     87c:	90 ec       	ldi	r25, 0xC0	; 192
     87e:	05 c0       	rjmp	.+10     	; 0x88a <LCD_voidSetCursor+0x28>
			case 2:loc_address=0x80+0x14; break;						
     880:	94 e9       	ldi	r25, 0x94	; 148
     882:	03 c0       	rjmp	.+6      	; 0x88a <LCD_voidSetCursor+0x28>
			case 3:loc_address=0x80+0x54; break;			
     884:	94 ed       	ldi	r25, 0xD4	; 212
     886:	01 c0       	rjmp	.+2      	; 0x88a <LCD_voidSetCursor+0x28>
	{
		
		u8 loc_address;
		switch(y)
		{
			case 0:loc_address=0x80+0x00; break;
     888:	90 e8       	ldi	r25, 0x80	; 128
			case 1:loc_address=0x80+0x40; break;
			case 2:loc_address=0x80+0x14; break;						
			case 3:loc_address=0x80+0x54; break;			
		}	
		LCD_voidSendCommand(loc_address+x);   
     88a:	89 0f       	add	r24, r25
     88c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_voidSendCommand>
     890:	08 95       	ret

00000892 <LCD_voidClear>:
		}		
}

void LCD_voidClear(void)
{
	LCD_voidSendCommand(0x01);
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_voidSendCommand>
}
     898:	08 95       	ret

0000089a <Lcd_voidShiftRight>:

void Lcd_voidShiftRight(void)
{
	LCD_voidSendCommand(0x1C);
     89a:	8c e1       	ldi	r24, 0x1C	; 28
     89c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_voidSendCommand>
	//LCD_voidSendCommand(0x14);   //INCREAMENT CURSOR TO RIGHT
}
     8a0:	08 95       	ret

000008a2 <Lcd_voidShiftLeft>:

void Lcd_voidShiftLeft(void)
{
	LCD_voidSendCommand(0x18);
     8a2:	88 e1       	ldi	r24, 0x18	; 24
     8a4:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_voidSendCommand>
}
     8a8:	08 95       	ret

000008aa <lcd_voidSendNumber>:


void lcd_voidSendNumber   ( u16 *Copynum2)
{
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
	//Copynum=50;
u16	Copynum=*Copynum2;
     8b2:	fc 01       	movw	r30, r24
     8b4:	20 81       	ld	r18, Z
     8b6:	31 81       	ldd	r19, Z+1	; 0x01
u16 LOC_u64Reversed = 1 ;
if( Copynum == 0 ){ LCD_voidWriteCharacter('0'); }
     8b8:	21 15       	cp	r18, r1
     8ba:	31 05       	cpc	r19, r1
     8bc:	21 f4       	brne	.+8      	; 0x8c6 <lcd_voidSendNumber+0x1c>
     8be:	80 e3       	ldi	r24, 0x30	; 48
     8c0:	0e 94 14 03 	call	0x628	; 0x628 <LCD_voidWriteCharacter>
     8c4:	2d c0       	rjmp	.+90     	; 0x920 <lcd_voidSendNumber+0x76>
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	90 e0       	ldi	r25, 0x00	; 0
else{
	while( Copynum != 0 ){
		LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copynum % 10 );
     8ca:	ca e0       	ldi	r28, 0x0A	; 10
     8cc:	d0 e0       	ldi	r29, 0x00	; 0
     8ce:	ac 01       	movw	r20, r24
     8d0:	44 0f       	add	r20, r20
     8d2:	55 1f       	adc	r21, r21
     8d4:	fc 01       	movw	r30, r24
     8d6:	ee 0f       	add	r30, r30
     8d8:	ff 1f       	adc	r31, r31
     8da:	ee 0f       	add	r30, r30
     8dc:	ff 1f       	adc	r31, r31
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	e4 0f       	add	r30, r20
     8e4:	f5 1f       	adc	r31, r21
     8e6:	c9 01       	movw	r24, r18
     8e8:	be 01       	movw	r22, r28
     8ea:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__udivmodhi4>
     8ee:	8e 0f       	add	r24, r30
     8f0:	9f 1f       	adc	r25, r31
		Copynum /= 10 ;
     8f2:	26 2f       	mov	r18, r22
     8f4:	37 2f       	mov	r19, r23
	//Copynum=50;
u16	Copynum=*Copynum2;
u16 LOC_u64Reversed = 1 ;
if( Copynum == 0 ){ LCD_voidWriteCharacter('0'); }
else{
	while( Copynum != 0 ){
     8f6:	21 15       	cp	r18, r1
     8f8:	31 05       	cpc	r19, r1
     8fa:	49 f7       	brne	.-46     	; 0x8ce <lcd_voidSendNumber+0x24>
		LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copynum % 10 );
		Copynum /= 10 ;
	}
	while( LOC_u64Reversed != 1 ){
     8fc:	81 30       	cpi	r24, 0x01	; 1
     8fe:	91 05       	cpc	r25, r1
     900:	79 f0       	breq	.+30     	; 0x920 <lcd_voidSendNumber+0x76>
		LCD_voidWriteCharacter( ( LOC_u64Reversed % 10 ) + 48 );
     902:	0a e0       	ldi	r16, 0x0A	; 10
     904:	10 e0       	ldi	r17, 0x00	; 0
     906:	b8 01       	movw	r22, r16
     908:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__udivmodhi4>
     90c:	c6 2f       	mov	r28, r22
     90e:	d7 2f       	mov	r29, r23
     910:	80 5d       	subi	r24, 0xD0	; 208
     912:	0e 94 14 03 	call	0x628	; 0x628 <LCD_voidWriteCharacter>
		LOC_u64Reversed /= 10 ;
     916:	8c 2f       	mov	r24, r28
     918:	9d 2f       	mov	r25, r29
else{
	while( Copynum != 0 ){
		LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copynum % 10 );
		Copynum /= 10 ;
	}
	while( LOC_u64Reversed != 1 ){
     91a:	81 30       	cpi	r24, 0x01	; 1
     91c:	91 05       	cpc	r25, r1
     91e:	99 f7       	brne	.-26     	; 0x906 <lcd_voidSendNumber+0x5c>
		LCD_voidWriteCharacter( ( LOC_u64Reversed % 10 ) + 48 );
		LOC_u64Reversed /= 10 ;
	}
}

}
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	08 95       	ret

0000092a <calculate_inputSIM>:
#define key_freed   11	  
u8 operation_end=1;


u8 calculate_inputSIM(u16 arr[])
{
     92a:	2f 92       	push	r2
     92c:	3f 92       	push	r3
     92e:	4f 92       	push	r4
     930:	5f 92       	push	r5
     932:	6f 92       	push	r6
     934:	7f 92       	push	r7
     936:	8f 92       	push	r8
     938:	9f 92       	push	r9
     93a:	af 92       	push	r10
     93c:	bf 92       	push	r11
     93e:	cf 92       	push	r12
     940:	df 92       	push	r13
     942:	ef 92       	push	r14
     944:	ff 92       	push	r15
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	2a 97       	sbiw	r28, 0x0a	; 10
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
     95e:	9a 83       	std	Y+2, r25	; 0x02
     960:	89 83       	std	Y+1, r24	; 0x01
	u8 operation_offset;

	u16 logic_operation_result;
	

	for (u8 i=0;i<count_input_num;i++)
     962:	50 90 80 00 	lds	r5, 0x0080
     966:	55 20       	and	r5, r5
     968:	d1 f0       	breq	.+52     	; 0x99e <calculate_inputSIM+0x74>
	{
		if (arr[i]>9)
     96a:	dc 01       	movw	r26, r24
     96c:	8d 91       	ld	r24, X+
     96e:	9c 91       	ld	r25, X
     970:	11 97       	sbiw	r26, 0x01	; 1
     972:	8a 30       	cpi	r24, 0x0A	; 10
     974:	91 05       	cpc	r25, r1
     976:	60 f0       	brcs	.+24     	; 0x990 <calculate_inputSIM+0x66>
     978:	06 c0       	rjmp	.+12     	; 0x986 <calculate_inputSIM+0x5c>
     97a:	81 91       	ld	r24, Z+
     97c:	91 91       	ld	r25, Z+
     97e:	8a 30       	cpi	r24, 0x0A	; 10
     980:	91 05       	cpc	r25, r1
     982:	50 f0       	brcs	.+20     	; 0x998 <calculate_inputSIM+0x6e>
     984:	01 c0       	rjmp	.+2      	; 0x988 <calculate_inputSIM+0x5e>
	u8 operation_offset;

	u16 logic_operation_result;
	

	for (u8 i=0;i<count_input_num;i++)
     986:	20 e0       	ldi	r18, 0x00	; 0
	{
		if (arr[i]>9)
		{
			logic_operation=arr[i];
			operation_offset=i;
			break;
     988:	42 2e       	mov	r4, r18

	for (u8 i=0;i<count_input_num;i++)
	{
		if (arr[i]>9)
		{
			logic_operation=arr[i];
     98a:	9e 83       	std	Y+6, r25	; 0x06
     98c:	8d 83       	std	Y+5, r24	; 0x05
			operation_offset=i;
			break;
     98e:	07 c0       	rjmp	.+14     	; 0x99e <calculate_inputSIM+0x74>
u16 arr_sim[10];
#define key_freed   11	  
u8 operation_end=1;


u8 calculate_inputSIM(u16 arr[])
     990:	e9 81       	ldd	r30, Y+1	; 0x01
     992:	fa 81       	ldd	r31, Y+2	; 0x02
     994:	32 96       	adiw	r30, 0x02	; 2
	u8 operation_offset;

	u16 logic_operation_result;
	

	for (u8 i=0;i<count_input_num;i++)
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	2f 5f       	subi	r18, 0xFF	; 255
     99a:	25 15       	cp	r18, r5
     99c:	71 f7       	brne	.-36     	; 0x97a <calculate_inputSIM+0x50>
			operation_offset=i;
			break;
		}
	}

	for (u8 y=0;y<operation_offset;y++)
     99e:	44 20       	and	r4, r4
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <calculate_inputSIM+0x7a>
     9a2:	5a c0       	rjmp	.+180    	; 0xa58 <calculate_inputSIM+0x12e>
     9a4:	69 80       	ldd	r6, Y+1	; 0x01
     9a6:	7a 80       	ldd	r7, Y+2	; 0x02
u16 arr_sim[10];
#define key_freed   11	  
u8 operation_end=1;


u8 calculate_inputSIM(u16 arr[])
     9a8:	84 2d       	mov	r24, r4
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	5c 01       	movw	r10, r24
     9ae:	08 94       	sec
     9b0:	a1 08       	sbc	r10, r1
     9b2:	b1 08       	sbc	r11, r1
     9b4:	02 97       	sbiw	r24, 0x02	; 2
     9b6:	24 2d       	mov	r18, r4
     9b8:	21 50       	subi	r18, 0x01	; 1
     9ba:	fc 01       	movw	r30, r24
     9bc:	e2 1b       	sub	r30, r18
     9be:	f1 09       	sbc	r31, r1
     9c0:	fc 83       	std	Y+4, r31	; 0x04
     9c2:	eb 83       	std	Y+3, r30	; 0x03
{
	u16 operend1=0;
     9c4:	22 24       	eor	r2, r2
     9c6:	33 24       	eor	r3, r3
		}
	}

	for (u8 y=0;y<operation_offset;y++)
	{
		operend1+=arr[y]*pow(10,(operation_offset-(y+1)));
     9c8:	d3 01       	movw	r26, r6
     9ca:	8d 90       	ld	r8, X+
     9cc:	9d 90       	ld	r9, X+
     9ce:	3d 01       	movw	r6, r26
     9d0:	b5 01       	movw	r22, r10
     9d2:	88 27       	eor	r24, r24
     9d4:	77 fd       	sbrc	r23, 7
     9d6:	80 95       	com	r24
     9d8:	98 2f       	mov	r25, r24
     9da:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__floatsisf>
     9de:	9b 01       	movw	r18, r22
     9e0:	ac 01       	movw	r20, r24
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	80 e2       	ldi	r24, 0x20	; 32
     9e8:	91 e4       	ldi	r25, 0x41	; 65
     9ea:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <pow>
     9ee:	69 87       	std	Y+9, r22	; 0x09
     9f0:	07 2f       	mov	r16, r23
     9f2:	8a 87       	std	Y+10, r24	; 0x0a
     9f4:	19 2f       	mov	r17, r25
     9f6:	b1 01       	movw	r22, r2
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__floatunsisf>
     a00:	6b 01       	movw	r12, r22
     a02:	7c 01       	movw	r14, r24
     a04:	b4 01       	movw	r22, r8
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__floatunsisf>
     a0e:	f9 85       	ldd	r31, Y+9	; 0x09
     a10:	e0 2f       	mov	r30, r16
     a12:	5a 85       	ldd	r21, Y+10	; 0x0a
     a14:	41 2f       	mov	r20, r17
     a16:	0f 2f       	mov	r16, r31
     a18:	1e 2f       	mov	r17, r30
     a1a:	25 2f       	mov	r18, r21
     a1c:	34 2f       	mov	r19, r20
     a1e:	a9 01       	movw	r20, r18
     a20:	98 01       	movw	r18, r16
     a22:	0e 94 80 09 	call	0x1300	; 0x1300 <__mulsf3>
     a26:	9b 01       	movw	r18, r22
     a28:	ac 01       	movw	r20, r24
     a2a:	c7 01       	movw	r24, r14
     a2c:	b6 01       	movw	r22, r12
     a2e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__addsf3>
     a32:	46 2f       	mov	r20, r22
     a34:	57 2f       	mov	r21, r23
     a36:	68 2f       	mov	r22, r24
     a38:	79 2f       	mov	r23, r25
     a3a:	cb 01       	movw	r24, r22
     a3c:	ba 01       	movw	r22, r20
     a3e:	0e 94 c6 08 	call	0x118c	; 0x118c <__fixunssfsi>
     a42:	1b 01       	movw	r2, r22
     a44:	08 94       	sec
     a46:	a1 08       	sbc	r10, r1
     a48:	b1 08       	sbc	r11, r1
			operation_offset=i;
			break;
		}
	}

	for (u8 y=0;y<operation_offset;y++)
     a4a:	eb 81       	ldd	r30, Y+3	; 0x03
     a4c:	fc 81       	ldd	r31, Y+4	; 0x04
     a4e:	ae 16       	cp	r10, r30
     a50:	bf 06       	cpc	r11, r31
     a52:	09 f0       	breq	.+2      	; 0xa56 <calculate_inputSIM+0x12c>
     a54:	b9 cf       	rjmp	.-142    	; 0x9c8 <calculate_inputSIM+0x9e>
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <calculate_inputSIM+0x132>
u8 operation_end=1;


u8 calculate_inputSIM(u16 arr[])
{
	u16 operend1=0;
     a58:	22 24       	eor	r2, r2
     a5a:	33 24       	eor	r3, r3

	for (u8 y=0;y<operation_offset;y++)
	{
		operend1+=arr[y]*pow(10,(operation_offset-(y+1)));
	}
	for (u8 z=operation_offset+1;z<count_input_num;z++)
     a5c:	43 94       	inc	r4
     a5e:	45 14       	cp	r4, r5
     a60:	08 f0       	brcs	.+2      	; 0xa64 <calculate_inputSIM+0x13a>
     a62:	4e c0       	rjmp	.+156    	; 0xb00 <calculate_inputSIM+0x1d6>


u8 calculate_inputSIM(u16 arr[])
{
	u16 operend1=0;
	u16 operend2=0;
     a64:	cc 24       	eor	r12, r12
     a66:	dd 24       	eor	r13, r13
	{
		operend1+=arr[y]*pow(10,(operation_offset-(y+1)));
	}
	for (u8 z=operation_offset+1;z<count_input_num;z++)
	{
		operend2+=arr[z]*pow(10,(count_input_num-(z+1)));
     a68:	65 2c       	mov	r6, r5
     a6a:	77 24       	eor	r7, r7
     a6c:	04 2d       	mov	r16, r4
     a6e:	10 e0       	ldi	r17, 0x00	; 0
     a70:	b8 01       	movw	r22, r16
     a72:	60 95       	com	r22
     a74:	70 95       	com	r23
     a76:	66 0d       	add	r22, r6
     a78:	77 1d       	adc	r23, r7
     a7a:	88 27       	eor	r24, r24
     a7c:	77 fd       	sbrc	r23, 7
     a7e:	80 95       	com	r24
     a80:	98 2f       	mov	r25, r24
     a82:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__floatsisf>
     a86:	9b 01       	movw	r18, r22
     a88:	ac 01       	movw	r20, r24
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	80 e2       	ldi	r24, 0x20	; 32
     a90:	91 e4       	ldi	r25, 0x41	; 65
     a92:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <pow>
     a96:	86 2e       	mov	r8, r22
     a98:	b7 2e       	mov	r11, r23
     a9a:	a8 2e       	mov	r10, r24
     a9c:	99 2e       	mov	r9, r25
     a9e:	b6 01       	movw	r22, r12
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__floatunsisf>
     aa8:	6b 01       	movw	r12, r22
     aaa:	7c 01       	movw	r14, r24
     aac:	c8 01       	movw	r24, r16
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	29 81       	ldd	r18, Y+1	; 0x01
     ab4:	3a 81       	ldd	r19, Y+2	; 0x02
     ab6:	82 0f       	add	r24, r18
     ab8:	93 1f       	adc	r25, r19
     aba:	dc 01       	movw	r26, r24
     abc:	6d 91       	ld	r22, X+
     abe:	7c 91       	ld	r23, X
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__floatunsisf>
     ac8:	08 2d       	mov	r16, r8
     aca:	1b 2d       	mov	r17, r11
     acc:	2a 2d       	mov	r18, r10
     ace:	39 2d       	mov	r19, r9
     ad0:	a9 01       	movw	r20, r18
     ad2:	98 01       	movw	r18, r16
     ad4:	0e 94 80 09 	call	0x1300	; 0x1300 <__mulsf3>
     ad8:	9b 01       	movw	r18, r22
     ada:	ac 01       	movw	r20, r24
     adc:	c7 01       	movw	r24, r14
     ade:	b6 01       	movw	r22, r12
     ae0:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__addsf3>
     ae4:	46 2f       	mov	r20, r22
     ae6:	57 2f       	mov	r21, r23
     ae8:	68 2f       	mov	r22, r24
     aea:	79 2f       	mov	r23, r25
     aec:	cb 01       	movw	r24, r22
     aee:	ba 01       	movw	r22, r20
     af0:	0e 94 c6 08 	call	0x118c	; 0x118c <__fixunssfsi>
     af4:	6b 01       	movw	r12, r22

	for (u8 y=0;y<operation_offset;y++)
	{
		operend1+=arr[y]*pow(10,(operation_offset-(y+1)));
	}
	for (u8 z=operation_offset+1;z<count_input_num;z++)
     af6:	43 94       	inc	r4
     af8:	45 14       	cp	r4, r5
     afa:	08 f4       	brcc	.+2      	; 0xafe <calculate_inputSIM+0x1d4>
     afc:	b7 cf       	rjmp	.-146    	; 0xa6c <calculate_inputSIM+0x142>
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <calculate_inputSIM+0x1da>


u8 calculate_inputSIM(u16 arr[])
{
	u16 operend1=0;
	u16 operend2=0;
     b00:	cc 24       	eor	r12, r12
     b02:	dd 24       	eor	r13, r13
	}
	for (u8 z=operation_offset+1;z<count_input_num;z++)
	{
		operend2+=arr[z]*pow(10,(count_input_num-(z+1)));
	}
	if (logic_operation==0xFF)
     b04:	ed 81       	ldd	r30, Y+5	; 0x05
     b06:	fe 81       	ldd	r31, Y+6	; 0x06
     b08:	ef 3f       	cpi	r30, 0xFF	; 255
     b0a:	f1 05       	cpc	r31, r1
     b0c:	39 f4       	brne	.+14     	; 0xb1c <calculate_inputSIM+0x1f2>
	{
	  logic_operation_result=operend1/operend2;
     b0e:	c1 01       	movw	r24, r2
     b10:	b6 01       	movw	r22, r12
     b12:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__udivmodhi4>
     b16:	78 87       	std	Y+8, r23	; 0x08
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	24 c0       	rjmp	.+72     	; 0xb64 <calculate_inputSIM+0x23a>
			
	}
	else if(logic_operation==0xFA)
     b1c:	2d 81       	ldd	r18, Y+5	; 0x05
     b1e:	3e 81       	ldd	r19, Y+6	; 0x06
     b20:	2a 3f       	cpi	r18, 0xFA	; 250
     b22:	31 05       	cpc	r19, r1
     b24:	51 f4       	brne	.+20     	; 0xb3a <calculate_inputSIM+0x210>
	{
		logic_operation_result=operend1*operend2;
     b26:	c2 9c       	mul	r12, r2
     b28:	a0 01       	movw	r20, r0
     b2a:	c3 9c       	mul	r12, r3
     b2c:	50 0d       	add	r21, r0
     b2e:	d2 9c       	mul	r13, r2
     b30:	50 0d       	add	r21, r0
     b32:	11 24       	eor	r1, r1
     b34:	58 87       	std	Y+8, r21	; 0x08
     b36:	4f 83       	std	Y+7, r20	; 0x07
     b38:	15 c0       	rjmp	.+42     	; 0xb64 <calculate_inputSIM+0x23a>
	}
	else if(logic_operation==0xFD)
     b3a:	8d 81       	ldd	r24, Y+5	; 0x05
     b3c:	9e 81       	ldd	r25, Y+6	; 0x06
     b3e:	8d 3f       	cpi	r24, 0xFD	; 253
     b40:	91 05       	cpc	r25, r1
     b42:	31 f4       	brne	.+12     	; 0xb50 <calculate_inputSIM+0x226>
	{
		logic_operation_result=operend1-operend2;
     b44:	d1 01       	movw	r26, r2
     b46:	ac 19       	sub	r26, r12
     b48:	bd 09       	sbc	r27, r13
     b4a:	b8 87       	std	Y+8, r27	; 0x08
     b4c:	af 83       	std	Y+7, r26	; 0x07
     b4e:	0a c0       	rjmp	.+20     	; 0xb64 <calculate_inputSIM+0x23a>
	}
	else if(logic_operation==0xFB)
     b50:	ed 81       	ldd	r30, Y+5	; 0x05
     b52:	fe 81       	ldd	r31, Y+6	; 0x06
     b54:	eb 3f       	cpi	r30, 0xFB	; 251
     b56:	f1 05       	cpc	r31, r1
     b58:	29 f4       	brne	.+10     	; 0xb64 <calculate_inputSIM+0x23a>
	{
		logic_operation_result=operend1+operend2;
     b5a:	96 01       	movw	r18, r12
     b5c:	22 0d       	add	r18, r2
     b5e:	33 1d       	adc	r19, r3
     b60:	38 87       	std	Y+8, r19	; 0x08
     b62:	2f 83       	std	Y+7, r18	; 0x07
	}			
	return logic_operation_result;
}
     b64:	8f 81       	ldd	r24, Y+7	; 0x07
     b66:	2a 96       	adiw	r28, 0x0a	; 10
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	df 90       	pop	r13
     b80:	cf 90       	pop	r12
     b82:	bf 90       	pop	r11
     b84:	af 90       	pop	r10
     b86:	9f 90       	pop	r9
     b88:	8f 90       	pop	r8
     b8a:	7f 90       	pop	r7
     b8c:	6f 90       	pop	r6
     b8e:	5f 90       	pop	r5
     b90:	4f 90       	pop	r4
     b92:	3f 90       	pop	r3
     b94:	2f 90       	pop	r2
     b96:	08 95       	ret

00000b98 <main>:
	return logic_operation_result;*/
//}
//
int main(void)
{
   LCD_voidInit();
     b98:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_voidInit>
   KEYPAD_voidInit(); 
     b9c:	0e 94 2b 02 	call	0x456	; 0x456 <KEYPAD_voidInit>
while(1){ 
	LCD_voidWriteString("enter");  
     ba0:	05 e7       	ldi	r16, 0x75	; 117
     ba2:	10 e0       	ldi	r17, 0x00	; 0
   LCD_voidSetCursor(5,1);
     ba4:	d1 e0       	ldi	r29, 0x01	; 1
   operation_end=0;
   key_pressed=key_freed;
     ba6:	cb e0       	ldi	r28, 0x0B	; 11
	  operation_end=1;
	  LCD_voidClear();
  }
  else if (key_pressed!=key_freed)
  {
	  arr_sim[count_input_num++]=key_pressed;
     ba8:	0f 2e       	mov	r0, r31
     baa:	f1 e8       	ldi	r31, 0x81	; 129
     bac:	cf 2e       	mov	r12, r31
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	df 2e       	mov	r13, r31
     bb2:	f0 2d       	mov	r31, r0
   LCD_voidSetCursor(5,1);
   operation_end=0;
   key_pressed=key_freed;
   while (operation_end==0)
   { 
   KEYPAD_FindKey(&key_pressed); 
     bb4:	0f 2e       	mov	r0, r31
     bb6:	fc e7       	ldi	r31, 0x7C	; 124
     bb8:	ef 2e       	mov	r14, r31
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	ff 2e       	mov	r15, r31
     bbe:	f0 2d       	mov	r31, r0
	  operation_end=1;
	  LCD_voidClear();
  }
  else if (key_pressed!=key_freed)
  {
	  arr_sim[count_input_num++]=key_pressed;
     bc0:	9c 2c       	mov	r9, r12
     bc2:	8d 2c       	mov	r8, r13
  if(key_pressed == 0x0D)
  {
	  LCD_voidWriteCharacter(key_pressed+'0');
	  _delay_ms(200);
	  result= calculate_inputSIM(arr_sim);	  
	  lcd_voidSendNumber(&result);
     bc4:	0f 2e       	mov	r0, r31
     bc6:	fe e7       	ldi	r31, 0x7E	; 126
     bc8:	af 2e       	mov	r10, r31
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	bf 2e       	mov	r11, r31
     bce:	f0 2d       	mov	r31, r0
	  _delay_ms(1000);
	  _delay_ms(200);
	  count_input_num=0;
	  key_pressed=key_freed;
	  operation_end=1;
     bd0:	7d 2e       	mov	r7, r29
int main(void)
{
   LCD_voidInit();
   KEYPAD_voidInit(); 
while(1){ 
	LCD_voidWriteString("enter");  
     bd2:	c8 01       	movw	r24, r16
     bd4:	0e 94 22 04 	call	0x844	; 0x844 <LCD_voidWriteString>
   LCD_voidSetCursor(5,1);
     bd8:	85 e0       	ldi	r24, 0x05	; 5
     bda:	6d 2f       	mov	r22, r29
     bdc:	0e 94 31 04 	call	0x862	; 0x862 <LCD_voidSetCursor>
   operation_end=0;
     be0:	10 92 7b 00 	sts	0x007B, r1
   key_pressed=key_freed;
     be4:	c0 93 7c 00 	sts	0x007C, r28
   while (operation_end==0)
     be8:	53 c0       	rjmp	.+166    	; 0xc90 <main+0xf8>
   { 
   KEYPAD_FindKey(&key_pressed); 
     bea:	c7 01       	movw	r24, r14
     bec:	0e 94 8b 02 	call	0x516	; 0x516 <KEYPAD_FindKey>
  if(key_pressed == 0x0D)
     bf0:	80 91 7c 00 	lds	r24, 0x007C
     bf4:	8d 30       	cpi	r24, 0x0D	; 13
     bf6:	61 f5       	brne	.+88     	; 0xc50 <main+0xb8>
  {
	  LCD_voidWriteCharacter(key_pressed+'0');
     bf8:	8d e3       	ldi	r24, 0x3D	; 61
     bfa:	0e 94 14 03 	call	0x628	; 0x628 <LCD_voidWriteCharacter>
     bfe:	8f e4       	ldi	r24, 0x4F	; 79
     c00:	93 ec       	ldi	r25, 0xC3	; 195
     c02:	01 97       	sbiw	r24, 0x01	; 1
     c04:	f1 f7       	brne	.-4      	; 0xc02 <main+0x6a>
     c06:	00 c0       	rjmp	.+0      	; 0xc08 <main+0x70>
     c08:	00 00       	nop
	  _delay_ms(200);
	  result= calculate_inputSIM(arr_sim);	  
     c0a:	89 2d       	mov	r24, r9
     c0c:	98 2d       	mov	r25, r8
     c0e:	0e 94 95 04 	call	0x92a	; 0x92a <calculate_inputSIM>
     c12:	80 93 7e 00 	sts	0x007E, r24
     c16:	10 92 7f 00 	sts	0x007F, r1
	  lcd_voidSendNumber(&result);
     c1a:	c5 01       	movw	r24, r10
     c1c:	0e 94 55 04 	call	0x8aa	; 0x8aa <lcd_voidSendNumber>
     c20:	8f e3       	ldi	r24, 0x3F	; 63
     c22:	9d e0       	ldi	r25, 0x0D	; 13
     c24:	a3 e0       	ldi	r26, 0x03	; 3
     c26:	81 50       	subi	r24, 0x01	; 1
     c28:	90 40       	sbci	r25, 0x00	; 0
     c2a:	a0 40       	sbci	r26, 0x00	; 0
     c2c:	e1 f7       	brne	.-8      	; 0xc26 <main+0x8e>
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <main+0x98>
     c30:	00 00       	nop
     c32:	af e4       	ldi	r26, 0x4F	; 79
     c34:	b3 ec       	ldi	r27, 0xC3	; 195
     c36:	11 97       	sbiw	r26, 0x01	; 1
     c38:	f1 f7       	brne	.-4      	; 0xc36 <main+0x9e>
     c3a:	00 c0       	rjmp	.+0      	; 0xc3c <main+0xa4>
     c3c:	00 00       	nop
	  _delay_ms(1000);
	  _delay_ms(200);
	  count_input_num=0;
     c3e:	10 92 80 00 	sts	0x0080, r1
	  key_pressed=key_freed;
     c42:	c0 93 7c 00 	sts	0x007C, r28
	  operation_end=1;
     c46:	70 92 7b 00 	sts	0x007B, r7
	  LCD_voidClear();
     c4a:	0e 94 49 04 	call	0x892	; 0x892 <LCD_voidClear>
     c4e:	20 c0       	rjmp	.+64     	; 0xc90 <main+0xf8>
  }
  else if (key_pressed!=key_freed)
     c50:	8b 30       	cpi	r24, 0x0B	; 11
     c52:	f1 f0       	breq	.+60     	; 0xc90 <main+0xf8>
  {
	  arr_sim[count_input_num++]=key_pressed;
     c54:	90 91 80 00 	lds	r25, 0x0080
     c58:	e9 2f       	mov	r30, r25
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	ee 0f       	add	r30, r30
     c5e:	ff 1f       	adc	r31, r31
     c60:	ec 0d       	add	r30, r12
     c62:	fd 1d       	adc	r31, r13
     c64:	80 83       	st	Z, r24
     c66:	11 82       	std	Z+1, r1	; 0x01
     c68:	9f 5f       	subi	r25, 0xFF	; 255
     c6a:	90 93 80 00 	sts	0x0080, r25
	 LCD_voidWriteCharacter(key_pressed+'0');
     c6e:	80 5d       	subi	r24, 0xD0	; 208
     c70:	0e 94 14 03 	call	0x628	; 0x628 <LCD_voidWriteCharacter>
     c74:	8f e5       	ldi	r24, 0x5F	; 95
     c76:	9a ee       	ldi	r25, 0xEA	; 234
     c78:	a0 e0       	ldi	r26, 0x00	; 0
     c7a:	81 50       	subi	r24, 0x01	; 1
     c7c:	90 40       	sbci	r25, 0x00	; 0
     c7e:	a0 40       	sbci	r26, 0x00	; 0
     c80:	e1 f7       	brne	.-8      	; 0xc7a <main+0xe2>
     c82:	00 c0       	rjmp	.+0      	; 0xc84 <main+0xec>
     c84:	00 00       	nop
	 _delay_ms(300);
	 key_pressed=key_freed;
     c86:	c0 93 7c 00 	sts	0x007C, r28
	 KEYPAD_FindKey(&key_pressed);		  
     c8a:	c7 01       	movw	r24, r14
     c8c:	0e 94 8b 02 	call	0x516	; 0x516 <KEYPAD_FindKey>
while(1){ 
	LCD_voidWriteString("enter");  
   LCD_voidSetCursor(5,1);
   operation_end=0;
   key_pressed=key_freed;
   while (operation_end==0)
     c90:	80 91 7b 00 	lds	r24, 0x007B
     c94:	88 23       	and	r24, r24
     c96:	09 f0       	breq	.+2      	; 0xc9a <main+0x102>
     c98:	9c cf       	rjmp	.-200    	; 0xbd2 <main+0x3a>
     c9a:	a7 cf       	rjmp	.-178    	; 0xbea <main+0x52>

00000c9c <Port_Init>:
    #define PIN_IN_PULLUP 0

    #undef  PIN_OUT_LOW
    #define PIN_OUT_LOW 1

    DDRA=CONC(PORTA_PIN7_MODE,PORTA_PIN6_MODE,PORTA_PIN5_MODE,PORTA_PIN4_MODE,PORTA_PIN3_MODE,PORTA_PIN2_MODE,PORTA_PIN1_MODE,PORTA_PIN0_MODE);
     c9c:	83 e0       	ldi	r24, 0x03	; 3
     c9e:	8a bb       	out	0x1a, r24	; 26
    DDRB=CONC(PORTA_PIN7_MODE,PORTB_PIN6_MODE,PORTB_PIN5_MODE,PORTB_PIN4_MODE,PORTB_PIN3_MODE,PORTB_PIN2_MODE,PORTA_PIN1_MODE,PORTB_PIN0_MODE);
     ca0:	8f e7       	ldi	r24, 0x7F	; 127
     ca2:	87 bb       	out	0x17, r24	; 23
    DDRC=CONC(PORTC_PIN7_MODE,PORTC_PIN6_MODE,PORTC_PIN5_MODE,PORTC_PIN4_MODE,PORTC_PIN3_MODE,PORTC_PIN2_MODE,PORTC_PIN1_MODE,PORTC_PIN0_MODE);
     ca4:	14 ba       	out	0x14, r1	; 20
    DDRD=CONC(PORTD_PIN7_MODE,PORTD_PIN6_MODE,PORTD_PIN5_MODE,PORTD_PIN4_MODE,PORTD_PIN3_MODE,PORTD_PIN2_MODE,PORTD_PIN1_MODE,PORTD_PIN0_MODE);
     ca6:	11 ba       	out	0x11, r1	; 17
    #define PIN_IN_FLOAT 0

    #undef PIN_IN_PULLUP
    #define PIN_IN_PULLUP 1
	
    PORTA=CONC(PORTA_PIN7_MODE,PORTA_PIN6_MODE,PORTA_PIN5_MODE,PORTA_PIN4_MODE,PORTA_PIN3_MODE,PORTA_PIN2_MODE,PORTA_PIN1_MODE,PORTA_PIN0_MODE);
     ca8:	89 e0       	ldi	r24, 0x09	; 9
     caa:	8b bb       	out	0x1b, r24	; 27
    PORTB=CONC(PORTA_PIN7_MODE,PORTB_PIN6_MODE,PORTB_PIN5_MODE,PORTB_PIN4_MODE,PORTB_PIN3_MODE,PORTB_PIN2_MODE,PORTA_PIN1_MODE,PORTB_PIN0_MODE);
     cac:	18 ba       	out	0x18, r1	; 24
    PORTC=CONC(PORTC_PIN7_MODE,PORTC_PIN6_MODE,PORTC_PIN5_MODE,PORTC_PIN4_MODE,PORTC_PIN3_MODE,PORTC_PIN2_MODE,PORTC_PIN1_MODE,PORTC_PIN0_MODE);
     cae:	15 ba       	out	0x15, r1	; 21
    PORTD=CONC(PORTD_PIN7_MODE,PORTD_PIN6_MODE,PORTD_PIN5_MODE,PORTD_PIN4_MODE,PORTD_PIN3_MODE,PORTD_PIN2_MODE,PORTD_PIN1_MODE,PORTD_PIN0_MODE);
     cb0:	12 ba       	out	0x12, r1	; 18
	#define PIN_IN_FLOAT 2
	#undef PIN_IN_PULLUP
	#define PIN_IN_PULLUP 3	


}
     cb2:	08 95       	ret

00000cb4 <Port_setPinDirection>:
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
if (pin_id>31)  /* in case not valid id pin */
     cb4:	80 32       	cpi	r24, 0x20	; 32
     cb6:	08 f0       	brcs	.+2      	; 0xcba <Port_setPinDirection+0x6>
     cb8:	08 95       	ret
{
	ERROR_LOC_RET=PIN_NUMBER_ERROR;
} 
else           /*in case valid id pin */
{	
    u8 loc_pin_id =pin_id % 8;
     cba:	98 2f       	mov	r25, r24
     cbc:	97 70       	andi	r25, 0x07	; 7
    u8 loc_port_num=pin_id/8;
     cbe:	86 95       	lsr	r24
     cc0:	86 95       	lsr	r24
     cc2:	86 95       	lsr	r24
    switch(loc_port_num)
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	59 f1       	breq	.+86     	; 0xd1e <Port_setPinDirection+0x6a>
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	38 f0       	brcs	.+14     	; 0xcda <Port_setPinDirection+0x26>
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	09 f4       	brne	.+2      	; 0xcd2 <Port_setPinDirection+0x1e>
     cd0:	48 c0       	rjmp	.+144    	; 0xd62 <Port_setPinDirection+0xae>
     cd2:	83 30       	cpi	r24, 0x03	; 3
     cd4:	09 f0       	breq	.+2      	; 0xcd8 <Port_setPinDirection+0x24>
     cd6:	87 c0       	rjmp	.+270    	; 0xde6 <Port_setPinDirection+0x132>
     cd8:	65 c0       	rjmp	.+202    	; 0xda4 <Port_setPinDirection+0xf0>
    {
        case u8PORTA:
        if(pin_direction==PIN_OUTPUT)
     cda:	61 30       	cpi	r22, 0x01	; 1
     cdc:	71 f4       	brne	.+28     	; 0xcfa <Port_setPinDirection+0x46>
        {
            SET_BIT(DDRA,loc_pin_id);   
     cde:	4a b3       	in	r20, 0x1a	; 26
     ce0:	21 e0       	ldi	r18, 0x01	; 1
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	b9 01       	movw	r22, r18
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <Port_setPinDirection+0x38>
     ce8:	66 0f       	add	r22, r22
     cea:	77 1f       	adc	r23, r23
     cec:	9a 95       	dec	r25
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <Port_setPinDirection+0x34>
     cf0:	cb 01       	movw	r24, r22
     cf2:	84 2b       	or	r24, r20
     cf4:	8a bb       	out	0x1a, r24	; 26


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	08 95       	ret
        case u8PORTA:
        if(pin_direction==PIN_OUTPUT)
        {
            SET_BIT(DDRA,loc_pin_id);   
        }
        else if(pin_direction==PIN_INPUT)
     cfa:	66 23       	and	r22, r22
     cfc:	09 f0       	breq	.+2      	; 0xd00 <Port_setPinDirection+0x4c>
     cfe:	75 c0       	rjmp	.+234    	; 0xdea <Port_setPinDirection+0x136>
        {
            CLR_BIT(DDRA,loc_pin_id);
     d00:	4a b3       	in	r20, 0x1a	; 26
     d02:	21 e0       	ldi	r18, 0x01	; 1
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	b9 01       	movw	r22, r18
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <Port_setPinDirection+0x5a>
     d0a:	66 0f       	add	r22, r22
     d0c:	77 1f       	adc	r23, r23
     d0e:	9a 95       	dec	r25
     d10:	e2 f7       	brpl	.-8      	; 0xd0a <Port_setPinDirection+0x56>
     d12:	cb 01       	movw	r24, r22
     d14:	80 95       	com	r24
     d16:	84 23       	and	r24, r20
     d18:	8a bb       	out	0x1a, r24	; 26


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	08 95       	ret
        {
            CLR_BIT(DDRA,loc_pin_id);
        } 
		break;     
        case u8PORTB:
        if(pin_direction==PIN_OUTPUT)
     d1e:	61 30       	cpi	r22, 0x01	; 1
     d20:	71 f4       	brne	.+28     	; 0xd3e <Port_setPinDirection+0x8a>
        {
           SET_BIT(DDRB,loc_pin_id);
     d22:	47 b3       	in	r20, 0x17	; 23
     d24:	21 e0       	ldi	r18, 0x01	; 1
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	b9 01       	movw	r22, r18
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <Port_setPinDirection+0x7c>
     d2c:	66 0f       	add	r22, r22
     d2e:	77 1f       	adc	r23, r23
     d30:	9a 95       	dec	r25
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <Port_setPinDirection+0x78>
     d34:	cb 01       	movw	r24, r22
     d36:	84 2b       	or	r24, r20
     d38:	87 bb       	out	0x17, r24	; 23


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	08 95       	ret
        case u8PORTB:
        if(pin_direction==PIN_OUTPUT)
        {
           SET_BIT(DDRB,loc_pin_id);
        }
        else if(pin_direction==PIN_INPUT)
     d3e:	66 23       	and	r22, r22
     d40:	09 f0       	breq	.+2      	; 0xd44 <Port_setPinDirection+0x90>
     d42:	55 c0       	rjmp	.+170    	; 0xdee <Port_setPinDirection+0x13a>
        {
            CLR_BIT(DDRB,loc_pin_id);
     d44:	47 b3       	in	r20, 0x17	; 23
     d46:	21 e0       	ldi	r18, 0x01	; 1
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	b9 01       	movw	r22, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <Port_setPinDirection+0x9e>
     d4e:	66 0f       	add	r22, r22
     d50:	77 1f       	adc	r23, r23
     d52:	9a 95       	dec	r25
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <Port_setPinDirection+0x9a>
     d56:	cb 01       	movw	r24, r22
     d58:	80 95       	com	r24
     d5a:	84 23       	and	r24, r20
     d5c:	87 bb       	out	0x17, r24	; 23


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	08 95       	ret
            CLR_BIT(DDRB,loc_pin_id);
        }
        break;
        case u8PORTC:

        if(pin_direction==PIN_OUTPUT)
     d62:	61 30       	cpi	r22, 0x01	; 1
     d64:	71 f4       	brne	.+28     	; 0xd82 <Port_setPinDirection+0xce>
        {
            SET_BIT(DDRC,loc_pin_id);
     d66:	44 b3       	in	r20, 0x14	; 20
     d68:	21 e0       	ldi	r18, 0x01	; 1
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	b9 01       	movw	r22, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <Port_setPinDirection+0xc0>
     d70:	66 0f       	add	r22, r22
     d72:	77 1f       	adc	r23, r23
     d74:	9a 95       	dec	r25
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <Port_setPinDirection+0xbc>
     d78:	cb 01       	movw	r24, r22
     d7a:	84 2b       	or	r24, r20
     d7c:	84 bb       	out	0x14, r24	; 20


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	08 95       	ret

        if(pin_direction==PIN_OUTPUT)
        {
            SET_BIT(DDRC,loc_pin_id);
        }
        else if(pin_direction==PIN_INPUT)
     d82:	66 23       	and	r22, r22
     d84:	b1 f5       	brne	.+108    	; 0xdf2 <Port_setPinDirection+0x13e>
        {
            CLR_BIT(DDRC,loc_pin_id);
     d86:	44 b3       	in	r20, 0x14	; 20
     d88:	21 e0       	ldi	r18, 0x01	; 1
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	b9 01       	movw	r22, r18
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <Port_setPinDirection+0xe0>
     d90:	66 0f       	add	r22, r22
     d92:	77 1f       	adc	r23, r23
     d94:	9a 95       	dec	r25
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <Port_setPinDirection+0xdc>
     d98:	cb 01       	movw	r24, r22
     d9a:	80 95       	com	r24
     d9c:	84 23       	and	r24, r20
     d9e:	84 bb       	out	0x14, r24	; 20


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	08 95       	ret
        {
            CLR_BIT(DDRC,loc_pin_id);
        }
        break;
        case u8PORTD:
        if(pin_direction==PIN_OUTPUT)
     da4:	61 30       	cpi	r22, 0x01	; 1
     da6:	71 f4       	brne	.+28     	; 0xdc4 <Port_setPinDirection+0x110>
        {
            SET_BIT(DDRD,loc_pin_id);
     da8:	41 b3       	in	r20, 0x11	; 17
     daa:	21 e0       	ldi	r18, 0x01	; 1
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	b9 01       	movw	r22, r18
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <Port_setPinDirection+0x102>
     db2:	66 0f       	add	r22, r22
     db4:	77 1f       	adc	r23, r23
     db6:	9a 95       	dec	r25
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <Port_setPinDirection+0xfe>
     dba:	cb 01       	movw	r24, r22
     dbc:	84 2b       	or	r24, r20
     dbe:	81 bb       	out	0x11, r24	; 17


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	08 95       	ret
        case u8PORTD:
        if(pin_direction==PIN_OUTPUT)
        {
            SET_BIT(DDRD,loc_pin_id);
        }
        else if(pin_direction==PIN_INPUT)
     dc4:	66 23       	and	r22, r22
     dc6:	b9 f4       	brne	.+46     	; 0xdf6 <Port_setPinDirection+0x142>
        {
            CLR_BIT(DDRD,loc_pin_id);
     dc8:	41 b3       	in	r20, 0x11	; 17
     dca:	21 e0       	ldi	r18, 0x01	; 1
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	b9 01       	movw	r22, r18
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <Port_setPinDirection+0x122>
     dd2:	66 0f       	add	r22, r22
     dd4:	77 1f       	adc	r23, r23
     dd6:	9a 95       	dec	r25
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <Port_setPinDirection+0x11e>
     dda:	cb 01       	movw	r24, r22
     ddc:	80 95       	com	r24
     dde:	84 23       	and	r24, r20
     de0:	81 bb       	out	0x11, r24	; 17


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	08 95       	ret
        {
            CLR_BIT(DDRD,loc_pin_id);
        }
        break;
    default:
	 ERROR_LOC_RET =PIN_DIR_ERROR;
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	08 95       	ret


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	08 95       	ret
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	08 95       	ret
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	08 95       	ret
     df6:	80 e0       	ldi	r24, 0x00	; 0
	 ERROR_LOC_RET =PIN_DIR_ERROR;
		
    }
 return ERROR_LOC_RET;   
}
}
     df8:	08 95       	ret

00000dfa <Port_SetPinMode>:
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
if (pin_id>31)  /*in case not valid pin id */
     dfa:	80 32       	cpi	r24, 0x20	; 32
     dfc:	08 f0       	brcs	.+2      	; 0xe00 <Port_SetPinMode+0x6>
     dfe:	55 c1       	rjmp	.+682    	; 0x10aa <Port_SetPinMode+0x2b0>
{
	ERROR_LOC_RET=PIN_NUMBER_ERROR;
}
else	 /*case valid id pin*/
{
    u8 loc_Pin_id= pin_id % 8;
     e00:	98 2f       	mov	r25, r24
     e02:	97 70       	andi	r25, 0x07	; 7
    u8 loc_port_num=pin_id/8;
     e04:	86 95       	lsr	r24
     e06:	86 95       	lsr	r24
     e08:	86 95       	lsr	r24
    switch(loc_port_num)
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	09 f4       	brne	.+2      	; 0xe10 <Port_SetPinMode+0x16>
     e0e:	5a c0       	rjmp	.+180    	; 0xec4 <Port_SetPinMode+0xca>
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	38 f0       	brcs	.+14     	; 0xe22 <Port_SetPinMode+0x28>
     e14:	82 30       	cpi	r24, 0x02	; 2
     e16:	09 f4       	brne	.+2      	; 0xe1a <Port_SetPinMode+0x20>
     e18:	a6 c0       	rjmp	.+332    	; 0xf66 <Port_SetPinMode+0x16c>
     e1a:	83 30       	cpi	r24, 0x03	; 3
     e1c:	09 f0       	breq	.+2      	; 0xe20 <Port_SetPinMode+0x26>
     e1e:	47 c1       	rjmp	.+654    	; 0x10ae <Port_SetPinMode+0x2b4>
     e20:	f3 c0       	rjmp	.+486    	; 0x1008 <Port_SetPinMode+0x20e>
    {
        case u8PORTA:
          switch(pin_mode){
     e22:	61 30       	cpi	r22, 0x01	; 1
     e24:	41 f0       	breq	.+16     	; 0xe36 <Port_SetPinMode+0x3c>
     e26:	61 30       	cpi	r22, 0x01	; 1
     e28:	a0 f0       	brcs	.+40     	; 0xe52 <Port_SetPinMode+0x58>
     e2a:	62 30       	cpi	r22, 0x02	; 2
     e2c:	29 f1       	breq	.+74     	; 0xe78 <Port_SetPinMode+0x7e>
     e2e:	63 30       	cpi	r22, 0x03	; 3
     e30:	09 f0       	breq	.+2      	; 0xe34 <Port_SetPinMode+0x3a>
     e32:	3f c1       	rjmp	.+638    	; 0x10b2 <Port_SetPinMode+0x2b8>
     e34:	34 c0       	rjmp	.+104    	; 0xe9e <Port_SetPinMode+0xa4>
            case PIN_OUT_HIGH:
			SET_BIT(DDRA,loc_Pin_id);
     e36:	8a b3       	in	r24, 0x1a	; 26
     e38:	21 e0       	ldi	r18, 0x01	; 1
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <Port_SetPinMode+0x46>
     e3e:	22 0f       	add	r18, r18
     e40:	9a 95       	dec	r25
     e42:	ea f7       	brpl	.-6      	; 0xe3e <Port_SetPinMode+0x44>
     e44:	82 2b       	or	r24, r18
     e46:	8a bb       	out	0x1a, r24	; 26
			SET_BIT(PORTA,loc_Pin_id);
     e48:	8b b3       	in	r24, 0x1b	; 27
     e4a:	28 2b       	or	r18, r24
     e4c:	2b bb       	out	0x1b, r18	; 27
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
     e4e:	80 e0       	ldi	r24, 0x00	; 0
        case u8PORTA:
          switch(pin_mode){
            case PIN_OUT_HIGH:
			SET_BIT(DDRA,loc_Pin_id);
			SET_BIT(PORTA,loc_Pin_id);
			break;
     e50:	08 95       	ret
			case  PIN_OUT_LOW:
			SET_BIT(DDRA,loc_Pin_id);
     e52:	4a b3       	in	r20, 0x1a	; 26
     e54:	21 e0       	ldi	r18, 0x01	; 1
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	b9 01       	movw	r22, r18
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <Port_SetPinMode+0x66>
     e5c:	66 0f       	add	r22, r22
     e5e:	77 1f       	adc	r23, r23
     e60:	9a 95       	dec	r25
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <Port_SetPinMode+0x62>
     e64:	cb 01       	movw	r24, r22
     e66:	94 2f       	mov	r25, r20
     e68:	98 2b       	or	r25, r24
     e6a:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,loc_Pin_id);
     e6c:	2b b3       	in	r18, 0x1b	; 27
     e6e:	80 95       	com	r24
     e70:	82 23       	and	r24, r18
     e72:	8b bb       	out	0x1b, r24	; 27
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
     e74:	80 e0       	ldi	r24, 0x00	; 0
			SET_BIT(PORTA,loc_Pin_id);
			break;
			case  PIN_OUT_LOW:
			SET_BIT(DDRA,loc_Pin_id);
			CLR_BIT(PORTA,loc_Pin_id);
			break;	
     e76:	08 95       	ret
            case   PIN_IN_FLOAT:
		    CLR_BIT(DDRA,loc_Pin_id);
     e78:	4a b3       	in	r20, 0x1a	; 26
     e7a:	21 e0       	ldi	r18, 0x01	; 1
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	b9 01       	movw	r22, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <Port_SetPinMode+0x8c>
     e82:	66 0f       	add	r22, r22
     e84:	77 1f       	adc	r23, r23
     e86:	9a 95       	dec	r25
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <Port_SetPinMode+0x88>
     e8a:	cb 01       	movw	r24, r22
     e8c:	80 95       	com	r24
     e8e:	98 2f       	mov	r25, r24
     e90:	94 23       	and	r25, r20
     e92:	9a bb       	out	0x1a, r25	; 26
		    CLR_BIT(PORTA,loc_Pin_id);                     
     e94:	9b b3       	in	r25, 0x1b	; 27
     e96:	89 23       	and	r24, r25
     e98:	8b bb       	out	0x1b, r24	; 27
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
     e9a:	80 e0       	ldi	r24, 0x00	; 0
			CLR_BIT(PORTA,loc_Pin_id);
			break;	
            case   PIN_IN_FLOAT:
		    CLR_BIT(DDRA,loc_Pin_id);
		    CLR_BIT(PORTA,loc_Pin_id);                     
		    break;
     e9c:	08 95       	ret
            case   PIN_IN_PULLUP:
			CLR_BIT(DDRA,loc_Pin_id);
     e9e:	4a b3       	in	r20, 0x1a	; 26
     ea0:	21 e0       	ldi	r18, 0x01	; 1
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	b9 01       	movw	r22, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <Port_SetPinMode+0xb2>
     ea8:	66 0f       	add	r22, r22
     eaa:	77 1f       	adc	r23, r23
     eac:	9a 95       	dec	r25
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <Port_SetPinMode+0xae>
     eb0:	cb 01       	movw	r24, r22
     eb2:	96 2f       	mov	r25, r22
     eb4:	90 95       	com	r25
     eb6:	94 23       	and	r25, r20
     eb8:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,loc_Pin_id);                     
     eba:	9b b3       	in	r25, 0x1b	; 27
     ebc:	89 2b       	or	r24, r25
     ebe:	8b bb       	out	0x1b, r24	; 27
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
     ec0:	80 e0       	ldi	r24, 0x00	; 0
		    CLR_BIT(PORTA,loc_Pin_id);                     
		    break;
            case   PIN_IN_PULLUP:
			CLR_BIT(DDRA,loc_Pin_id);
			SET_BIT(PORTA,loc_Pin_id);                     
			break;   				         
     ec2:	08 95       	ret
            default:
			ERROR_LOC_RET= PIN_MODE_ERROR;
		  }
		  break;			
        case u8PORTB:
          switch(pin_mode){		  
     ec4:	61 30       	cpi	r22, 0x01	; 1
     ec6:	41 f0       	breq	.+16     	; 0xed8 <Port_SetPinMode+0xde>
     ec8:	61 30       	cpi	r22, 0x01	; 1
     eca:	a0 f0       	brcs	.+40     	; 0xef4 <Port_SetPinMode+0xfa>
     ecc:	62 30       	cpi	r22, 0x02	; 2
     ece:	29 f1       	breq	.+74     	; 0xf1a <Port_SetPinMode+0x120>
     ed0:	63 30       	cpi	r22, 0x03	; 3
     ed2:	09 f0       	breq	.+2      	; 0xed6 <Port_SetPinMode+0xdc>
     ed4:	f0 c0       	rjmp	.+480    	; 0x10b6 <Port_SetPinMode+0x2bc>
     ed6:	34 c0       	rjmp	.+104    	; 0xf40 <Port_SetPinMode+0x146>
            case PIN_OUT_HIGH:
            SET_BIT(DDRB,loc_Pin_id);
     ed8:	87 b3       	in	r24, 0x17	; 23
     eda:	21 e0       	ldi	r18, 0x01	; 1
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	01 c0       	rjmp	.+2      	; 0xee2 <Port_SetPinMode+0xe8>
     ee0:	22 0f       	add	r18, r18
     ee2:	9a 95       	dec	r25
     ee4:	ea f7       	brpl	.-6      	; 0xee0 <Port_SetPinMode+0xe6>
     ee6:	82 2b       	or	r24, r18
     ee8:	87 bb       	out	0x17, r24	; 23
            SET_BIT(PORTB,loc_Pin_id);
     eea:	88 b3       	in	r24, 0x18	; 24
     eec:	28 2b       	or	r18, r24
     eee:	28 bb       	out	0x18, r18	; 24
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
     ef0:	80 e0       	ldi	r24, 0x00	; 0
        case u8PORTB:
          switch(pin_mode){		  
            case PIN_OUT_HIGH:
            SET_BIT(DDRB,loc_Pin_id);
            SET_BIT(PORTB,loc_Pin_id);
            break;
     ef2:	08 95       	ret
           case PIN_OUT_LOW:
            SET_BIT(DDRB,loc_Pin_id);
     ef4:	47 b3       	in	r20, 0x17	; 23
     ef6:	21 e0       	ldi	r18, 0x01	; 1
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	b9 01       	movw	r22, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <Port_SetPinMode+0x108>
     efe:	66 0f       	add	r22, r22
     f00:	77 1f       	adc	r23, r23
     f02:	9a 95       	dec	r25
     f04:	e2 f7       	brpl	.-8      	; 0xefe <Port_SetPinMode+0x104>
     f06:	cb 01       	movw	r24, r22
     f08:	94 2f       	mov	r25, r20
     f0a:	98 2b       	or	r25, r24
     f0c:	97 bb       	out	0x17, r25	; 23
            CLR_BIT(PORTB,loc_Pin_id);
     f0e:	28 b3       	in	r18, 0x18	; 24
     f10:	80 95       	com	r24
     f12:	82 23       	and	r24, r18
     f14:	88 bb       	out	0x18, r24	; 24
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
     f16:	80 e0       	ldi	r24, 0x00	; 0
            SET_BIT(PORTB,loc_Pin_id);
            break;
           case PIN_OUT_LOW:
            SET_BIT(DDRB,loc_Pin_id);
            CLR_BIT(PORTB,loc_Pin_id);
            break;
     f18:	08 95       	ret
            case   PIN_IN_FLOAT:
            CLR_BIT(DDRB,loc_Pin_id);
     f1a:	47 b3       	in	r20, 0x17	; 23
     f1c:	21 e0       	ldi	r18, 0x01	; 1
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	b9 01       	movw	r22, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <Port_SetPinMode+0x12e>
     f24:	66 0f       	add	r22, r22
     f26:	77 1f       	adc	r23, r23
     f28:	9a 95       	dec	r25
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <Port_SetPinMode+0x12a>
     f2c:	cb 01       	movw	r24, r22
     f2e:	80 95       	com	r24
     f30:	98 2f       	mov	r25, r24
     f32:	94 23       	and	r25, r20
     f34:	97 bb       	out	0x17, r25	; 23
            CLR_BIT(PORTB,loc_Pin_id);                     
     f36:	98 b3       	in	r25, 0x18	; 24
     f38:	89 23       	and	r24, r25
     f3a:	88 bb       	out	0x18, r24	; 24
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
     f3c:	80 e0       	ldi	r24, 0x00	; 0
            CLR_BIT(PORTB,loc_Pin_id);
            break;
            case   PIN_IN_FLOAT:
            CLR_BIT(DDRB,loc_Pin_id);
            CLR_BIT(PORTB,loc_Pin_id);                     
            break;
     f3e:	08 95       	ret
            case   PIN_IN_PULLUP:
            CLR_BIT(DDRB,loc_Pin_id);
     f40:	47 b3       	in	r20, 0x17	; 23
     f42:	21 e0       	ldi	r18, 0x01	; 1
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	b9 01       	movw	r22, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <Port_SetPinMode+0x154>
     f4a:	66 0f       	add	r22, r22
     f4c:	77 1f       	adc	r23, r23
     f4e:	9a 95       	dec	r25
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <Port_SetPinMode+0x150>
     f52:	cb 01       	movw	r24, r22
     f54:	96 2f       	mov	r25, r22
     f56:	90 95       	com	r25
     f58:	94 23       	and	r25, r20
     f5a:	97 bb       	out	0x17, r25	; 23
            SET_BIT(PORTB,loc_Pin_id);                     
     f5c:	98 b3       	in	r25, 0x18	; 24
     f5e:	89 2b       	or	r24, r25
     f60:	88 bb       	out	0x18, r24	; 24
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
     f62:	80 e0       	ldi	r24, 0x00	; 0
            CLR_BIT(PORTB,loc_Pin_id);                     
            break;
            case   PIN_IN_PULLUP:
            CLR_BIT(DDRB,loc_Pin_id);
            SET_BIT(PORTB,loc_Pin_id);                     
            break;            
     f64:	08 95       	ret
            default:
			ERROR_LOC_RET=PIN_MODE_ERROR;			  
		  }
		  break;			
        case u8PORTC:
          switch(pin_mode){
     f66:	61 30       	cpi	r22, 0x01	; 1
     f68:	41 f0       	breq	.+16     	; 0xf7a <Port_SetPinMode+0x180>
     f6a:	61 30       	cpi	r22, 0x01	; 1
     f6c:	a0 f0       	brcs	.+40     	; 0xf96 <Port_SetPinMode+0x19c>
     f6e:	62 30       	cpi	r22, 0x02	; 2
     f70:	29 f1       	breq	.+74     	; 0xfbc <Port_SetPinMode+0x1c2>
     f72:	63 30       	cpi	r22, 0x03	; 3
     f74:	09 f0       	breq	.+2      	; 0xf78 <Port_SetPinMode+0x17e>
     f76:	a1 c0       	rjmp	.+322    	; 0x10ba <Port_SetPinMode+0x2c0>
     f78:	34 c0       	rjmp	.+104    	; 0xfe2 <Port_SetPinMode+0x1e8>
            case PIN_OUT_HIGH:
            SET_BIT(DDRC,loc_Pin_id);
     f7a:	84 b3       	in	r24, 0x14	; 20
     f7c:	21 e0       	ldi	r18, 0x01	; 1
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	01 c0       	rjmp	.+2      	; 0xf84 <Port_SetPinMode+0x18a>
     f82:	22 0f       	add	r18, r18
     f84:	9a 95       	dec	r25
     f86:	ea f7       	brpl	.-6      	; 0xf82 <Port_SetPinMode+0x188>
     f88:	82 2b       	or	r24, r18
     f8a:	84 bb       	out	0x14, r24	; 20
            SET_BIT(PORTC,loc_Pin_id);
     f8c:	85 b3       	in	r24, 0x15	; 21
     f8e:	28 2b       	or	r18, r24
     f90:	25 bb       	out	0x15, r18	; 21
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
     f92:	80 e0       	ldi	r24, 0x00	; 0
        case u8PORTC:
          switch(pin_mode){
            case PIN_OUT_HIGH:
            SET_BIT(DDRC,loc_Pin_id);
            SET_BIT(PORTC,loc_Pin_id);
            break;
     f94:	08 95       	ret
		    case PIN_OUT_LOW:
            SET_BIT(DDRC,loc_Pin_id);
     f96:	44 b3       	in	r20, 0x14	; 20
     f98:	21 e0       	ldi	r18, 0x01	; 1
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	b9 01       	movw	r22, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <Port_SetPinMode+0x1aa>
     fa0:	66 0f       	add	r22, r22
     fa2:	77 1f       	adc	r23, r23
     fa4:	9a 95       	dec	r25
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <Port_SetPinMode+0x1a6>
     fa8:	cb 01       	movw	r24, r22
     faa:	94 2f       	mov	r25, r20
     fac:	98 2b       	or	r25, r24
     fae:	94 bb       	out	0x14, r25	; 20
            CLR_BIT(PORTC,loc_Pin_id);
     fb0:	25 b3       	in	r18, 0x15	; 21
     fb2:	80 95       	com	r24
     fb4:	82 23       	and	r24, r18
     fb6:	85 bb       	out	0x15, r24	; 21
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
     fb8:	80 e0       	ldi	r24, 0x00	; 0
            SET_BIT(PORTC,loc_Pin_id);
            break;
		    case PIN_OUT_LOW:
            SET_BIT(DDRC,loc_Pin_id);
            CLR_BIT(PORTC,loc_Pin_id);
            break;
     fba:	08 95       	ret
            case   PIN_IN_FLOAT:
            CLR_BIT(DDRC,loc_Pin_id);
     fbc:	44 b3       	in	r20, 0x14	; 20
     fbe:	21 e0       	ldi	r18, 0x01	; 1
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	b9 01       	movw	r22, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <Port_SetPinMode+0x1d0>
     fc6:	66 0f       	add	r22, r22
     fc8:	77 1f       	adc	r23, r23
     fca:	9a 95       	dec	r25
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <Port_SetPinMode+0x1cc>
     fce:	cb 01       	movw	r24, r22
     fd0:	80 95       	com	r24
     fd2:	98 2f       	mov	r25, r24
     fd4:	94 23       	and	r25, r20
     fd6:	94 bb       	out	0x14, r25	; 20
            CLR_BIT(PORTC,loc_Pin_id);                     
     fd8:	95 b3       	in	r25, 0x15	; 21
     fda:	89 23       	and	r24, r25
     fdc:	85 bb       	out	0x15, r24	; 21
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
     fde:	80 e0       	ldi	r24, 0x00	; 0
            CLR_BIT(PORTC,loc_Pin_id);
            break;
            case   PIN_IN_FLOAT:
            CLR_BIT(DDRC,loc_Pin_id);
            CLR_BIT(PORTC,loc_Pin_id);                     
            break;
     fe0:	08 95       	ret

            case   PIN_IN_PULLUP:
            CLR_BIT(DDRC,loc_Pin_id);
     fe2:	44 b3       	in	r20, 0x14	; 20
     fe4:	21 e0       	ldi	r18, 0x01	; 1
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	b9 01       	movw	r22, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <Port_SetPinMode+0x1f6>
     fec:	66 0f       	add	r22, r22
     fee:	77 1f       	adc	r23, r23
     ff0:	9a 95       	dec	r25
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <Port_SetPinMode+0x1f2>
     ff4:	cb 01       	movw	r24, r22
     ff6:	96 2f       	mov	r25, r22
     ff8:	90 95       	com	r25
     ffa:	94 23       	and	r25, r20
     ffc:	94 bb       	out	0x14, r25	; 20
            SET_BIT(PORTC,loc_Pin_id);                     
     ffe:	95 b3       	in	r25, 0x15	; 21
    1000:	89 2b       	or	r24, r25
    1002:	85 bb       	out	0x15, r24	; 21
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    1004:	80 e0       	ldi	r24, 0x00	; 0
            break;

            case   PIN_IN_PULLUP:
            CLR_BIT(DDRC,loc_Pin_id);
            SET_BIT(PORTC,loc_Pin_id);                     
            break;            
    1006:	08 95       	ret
            default:
			ERROR_LOC_RET=PIN_MODE_ERROR;	
		  }
		  break;					 
        case u8PORTD:
          switch(pin_mode){
    1008:	61 30       	cpi	r22, 0x01	; 1
    100a:	41 f0       	breq	.+16     	; 0x101c <Port_SetPinMode+0x222>
    100c:	61 30       	cpi	r22, 0x01	; 1
    100e:	a0 f0       	brcs	.+40     	; 0x1038 <Port_SetPinMode+0x23e>
    1010:	62 30       	cpi	r22, 0x02	; 2
    1012:	29 f1       	breq	.+74     	; 0x105e <Port_SetPinMode+0x264>
    1014:	63 30       	cpi	r22, 0x03	; 3
    1016:	09 f0       	breq	.+2      	; 0x101a <Port_SetPinMode+0x220>
    1018:	52 c0       	rjmp	.+164    	; 0x10be <Port_SetPinMode+0x2c4>
    101a:	34 c0       	rjmp	.+104    	; 0x1084 <Port_SetPinMode+0x28a>
            case PIN_OUT_HIGH:
            SET_BIT(DDRD,loc_Pin_id);
    101c:	81 b3       	in	r24, 0x11	; 17
    101e:	21 e0       	ldi	r18, 0x01	; 1
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	01 c0       	rjmp	.+2      	; 0x1026 <Port_SetPinMode+0x22c>
    1024:	22 0f       	add	r18, r18
    1026:	9a 95       	dec	r25
    1028:	ea f7       	brpl	.-6      	; 0x1024 <Port_SetPinMode+0x22a>
    102a:	82 2b       	or	r24, r18
    102c:	81 bb       	out	0x11, r24	; 17
            SET_BIT(PORTD,loc_Pin_id);
    102e:	82 b3       	in	r24, 0x12	; 18
    1030:	28 2b       	or	r18, r24
    1032:	22 bb       	out	0x12, r18	; 18
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    1034:	80 e0       	ldi	r24, 0x00	; 0
        case u8PORTD:
          switch(pin_mode){
            case PIN_OUT_HIGH:
            SET_BIT(DDRD,loc_Pin_id);
            SET_BIT(PORTD,loc_Pin_id);
            break;
    1036:	08 95       	ret
            case PIN_OUT_LOW:
            SET_BIT(DDRD,loc_Pin_id);
    1038:	41 b3       	in	r20, 0x11	; 17
    103a:	21 e0       	ldi	r18, 0x01	; 1
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	b9 01       	movw	r22, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <Port_SetPinMode+0x24c>
    1042:	66 0f       	add	r22, r22
    1044:	77 1f       	adc	r23, r23
    1046:	9a 95       	dec	r25
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <Port_SetPinMode+0x248>
    104a:	cb 01       	movw	r24, r22
    104c:	94 2f       	mov	r25, r20
    104e:	98 2b       	or	r25, r24
    1050:	91 bb       	out	0x11, r25	; 17
            CLR_BIT(PORTD,loc_Pin_id);
    1052:	22 b3       	in	r18, 0x12	; 18
    1054:	80 95       	com	r24
    1056:	82 23       	and	r24, r18
    1058:	82 bb       	out	0x12, r24	; 18
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    105a:	80 e0       	ldi	r24, 0x00	; 0
            SET_BIT(PORTD,loc_Pin_id);
            break;
            case PIN_OUT_LOW:
            SET_BIT(DDRD,loc_Pin_id);
            CLR_BIT(PORTD,loc_Pin_id);
            break;			
    105c:	08 95       	ret
            case PIN_IN_FLOAT:
            CLR_BIT(DDRD,loc_Pin_id);
    105e:	41 b3       	in	r20, 0x11	; 17
    1060:	21 e0       	ldi	r18, 0x01	; 1
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	b9 01       	movw	r22, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <Port_SetPinMode+0x272>
    1068:	66 0f       	add	r22, r22
    106a:	77 1f       	adc	r23, r23
    106c:	9a 95       	dec	r25
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <Port_SetPinMode+0x26e>
    1070:	cb 01       	movw	r24, r22
    1072:	80 95       	com	r24
    1074:	98 2f       	mov	r25, r24
    1076:	94 23       	and	r25, r20
    1078:	91 bb       	out	0x11, r25	; 17
            CLR_BIT(PORTD,loc_Pin_id);                     
    107a:	92 b3       	in	r25, 0x12	; 18
    107c:	89 23       	and	r24, r25
    107e:	82 bb       	out	0x12, r24	; 18
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    1080:	80 e0       	ldi	r24, 0x00	; 0
            CLR_BIT(PORTD,loc_Pin_id);
            break;			
            case PIN_IN_FLOAT:
            CLR_BIT(DDRD,loc_Pin_id);
            CLR_BIT(PORTD,loc_Pin_id);                     
            break;
    1082:	08 95       	ret
            case PIN_IN_PULLUP:
            CLR_BIT(DDRD,loc_Pin_id);
    1084:	41 b3       	in	r20, 0x11	; 17
    1086:	21 e0       	ldi	r18, 0x01	; 1
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	b9 01       	movw	r22, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <Port_SetPinMode+0x298>
    108e:	66 0f       	add	r22, r22
    1090:	77 1f       	adc	r23, r23
    1092:	9a 95       	dec	r25
    1094:	e2 f7       	brpl	.-8      	; 0x108e <Port_SetPinMode+0x294>
    1096:	cb 01       	movw	r24, r22
    1098:	96 2f       	mov	r25, r22
    109a:	90 95       	com	r25
    109c:	94 23       	and	r25, r20
    109e:	91 bb       	out	0x11, r25	; 17
            SET_BIT(PORTD,loc_Pin_id);                     
    10a0:	92 b3       	in	r25, 0x12	; 18
    10a2:	89 2b       	or	r24, r25
    10a4:	82 bb       	out	0x12, r24	; 18
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    10a6:	80 e0       	ldi	r24, 0x00	; 0
            CLR_BIT(PORTD,loc_Pin_id);                     
            break;
            case PIN_IN_PULLUP:
            CLR_BIT(DDRD,loc_Pin_id);
            SET_BIT(PORTD,loc_Pin_id);                     
            break;            
    10a8:	08 95       	ret
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
if (pin_id>31)  /*in case not valid pin id */
{
	ERROR_LOC_RET=PIN_NUMBER_ERROR;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	08 95       	ret
 return ERROR_LOC_RET;   
}
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	08 95       	ret
            case   PIN_IN_PULLUP:
			CLR_BIT(DDRA,loc_Pin_id);
			SET_BIT(PORTA,loc_Pin_id);                     
			break;   				         
            default:
			ERROR_LOC_RET= PIN_MODE_ERROR;
    10b2:	84 e0       	ldi	r24, 0x04	; 4
    10b4:	08 95       	ret
            case   PIN_IN_PULLUP:
            CLR_BIT(DDRB,loc_Pin_id);
            SET_BIT(PORTB,loc_Pin_id);                     
            break;            
            default:
			ERROR_LOC_RET=PIN_MODE_ERROR;			  
    10b6:	84 e0       	ldi	r24, 0x04	; 4
    10b8:	08 95       	ret
            case   PIN_IN_PULLUP:
            CLR_BIT(DDRC,loc_Pin_id);
            SET_BIT(PORTC,loc_Pin_id);                     
            break;            
            default:
			ERROR_LOC_RET=PIN_MODE_ERROR;	
    10ba:	84 e0       	ldi	r24, 0x04	; 4
    10bc:	08 95       	ret
            case PIN_IN_PULLUP:
            CLR_BIT(DDRD,loc_Pin_id);
            SET_BIT(PORTD,loc_Pin_id);                     
            break;            
            default: 
			ERROR_LOC_RET=PIN_MODE_ERROR;	
    10be:	84 e0       	ldi	r24, 0x04	; 4
			}
			break;		
        }   
	}	
	return ERROR_LOC_RET;	
	}
    10c0:	08 95       	ret

000010c2 <__subsf3>:
    10c2:	50 58       	subi	r21, 0x80	; 128

000010c4 <__addsf3>:
    10c4:	bb 27       	eor	r27, r27
    10c6:	aa 27       	eor	r26, r26
    10c8:	0e d0       	rcall	.+28     	; 0x10e6 <__addsf3x>
    10ca:	e0 c0       	rjmp	.+448    	; 0x128c <__fp_round>
    10cc:	d1 d0       	rcall	.+418    	; 0x1270 <__fp_pscA>
    10ce:	30 f0       	brcs	.+12     	; 0x10dc <__addsf3+0x18>
    10d0:	d6 d0       	rcall	.+428    	; 0x127e <__fp_pscB>
    10d2:	20 f0       	brcs	.+8      	; 0x10dc <__addsf3+0x18>
    10d4:	31 f4       	brne	.+12     	; 0x10e2 <__addsf3+0x1e>
    10d6:	9f 3f       	cpi	r25, 0xFF	; 255
    10d8:	11 f4       	brne	.+4      	; 0x10de <__addsf3+0x1a>
    10da:	1e f4       	brtc	.+6      	; 0x10e2 <__addsf3+0x1e>
    10dc:	c6 c0       	rjmp	.+396    	; 0x126a <__fp_nan>
    10de:	0e f4       	brtc	.+2      	; 0x10e2 <__addsf3+0x1e>
    10e0:	e0 95       	com	r30
    10e2:	e7 fb       	bst	r30, 7
    10e4:	bc c0       	rjmp	.+376    	; 0x125e <__fp_inf>

000010e6 <__addsf3x>:
    10e6:	e9 2f       	mov	r30, r25
    10e8:	e2 d0       	rcall	.+452    	; 0x12ae <__fp_split3>
    10ea:	80 f3       	brcs	.-32     	; 0x10cc <__addsf3+0x8>
    10ec:	ba 17       	cp	r27, r26
    10ee:	62 07       	cpc	r22, r18
    10f0:	73 07       	cpc	r23, r19
    10f2:	84 07       	cpc	r24, r20
    10f4:	95 07       	cpc	r25, r21
    10f6:	18 f0       	brcs	.+6      	; 0x10fe <__addsf3x+0x18>
    10f8:	71 f4       	brne	.+28     	; 0x1116 <__addsf3x+0x30>
    10fa:	9e f5       	brtc	.+102    	; 0x1162 <__addsf3x+0x7c>
    10fc:	fa c0       	rjmp	.+500    	; 0x12f2 <__fp_zero>
    10fe:	0e f4       	brtc	.+2      	; 0x1102 <__addsf3x+0x1c>
    1100:	e0 95       	com	r30
    1102:	0b 2e       	mov	r0, r27
    1104:	ba 2f       	mov	r27, r26
    1106:	a0 2d       	mov	r26, r0
    1108:	0b 01       	movw	r0, r22
    110a:	b9 01       	movw	r22, r18
    110c:	90 01       	movw	r18, r0
    110e:	0c 01       	movw	r0, r24
    1110:	ca 01       	movw	r24, r20
    1112:	a0 01       	movw	r20, r0
    1114:	11 24       	eor	r1, r1
    1116:	ff 27       	eor	r31, r31
    1118:	59 1b       	sub	r21, r25
    111a:	99 f0       	breq	.+38     	; 0x1142 <__addsf3x+0x5c>
    111c:	59 3f       	cpi	r21, 0xF9	; 249
    111e:	50 f4       	brcc	.+20     	; 0x1134 <__addsf3x+0x4e>
    1120:	50 3e       	cpi	r21, 0xE0	; 224
    1122:	68 f1       	brcs	.+90     	; 0x117e <__addsf3x+0x98>
    1124:	1a 16       	cp	r1, r26
    1126:	f0 40       	sbci	r31, 0x00	; 0
    1128:	a2 2f       	mov	r26, r18
    112a:	23 2f       	mov	r18, r19
    112c:	34 2f       	mov	r19, r20
    112e:	44 27       	eor	r20, r20
    1130:	58 5f       	subi	r21, 0xF8	; 248
    1132:	f3 cf       	rjmp	.-26     	; 0x111a <__addsf3x+0x34>
    1134:	46 95       	lsr	r20
    1136:	37 95       	ror	r19
    1138:	27 95       	ror	r18
    113a:	a7 95       	ror	r26
    113c:	f0 40       	sbci	r31, 0x00	; 0
    113e:	53 95       	inc	r21
    1140:	c9 f7       	brne	.-14     	; 0x1134 <__addsf3x+0x4e>
    1142:	7e f4       	brtc	.+30     	; 0x1162 <__addsf3x+0x7c>
    1144:	1f 16       	cp	r1, r31
    1146:	ba 0b       	sbc	r27, r26
    1148:	62 0b       	sbc	r22, r18
    114a:	73 0b       	sbc	r23, r19
    114c:	84 0b       	sbc	r24, r20
    114e:	ba f0       	brmi	.+46     	; 0x117e <__addsf3x+0x98>
    1150:	91 50       	subi	r25, 0x01	; 1
    1152:	a1 f0       	breq	.+40     	; 0x117c <__addsf3x+0x96>
    1154:	ff 0f       	add	r31, r31
    1156:	bb 1f       	adc	r27, r27
    1158:	66 1f       	adc	r22, r22
    115a:	77 1f       	adc	r23, r23
    115c:	88 1f       	adc	r24, r24
    115e:	c2 f7       	brpl	.-16     	; 0x1150 <__addsf3x+0x6a>
    1160:	0e c0       	rjmp	.+28     	; 0x117e <__addsf3x+0x98>
    1162:	ba 0f       	add	r27, r26
    1164:	62 1f       	adc	r22, r18
    1166:	73 1f       	adc	r23, r19
    1168:	84 1f       	adc	r24, r20
    116a:	48 f4       	brcc	.+18     	; 0x117e <__addsf3x+0x98>
    116c:	87 95       	ror	r24
    116e:	77 95       	ror	r23
    1170:	67 95       	ror	r22
    1172:	b7 95       	ror	r27
    1174:	f7 95       	ror	r31
    1176:	9e 3f       	cpi	r25, 0xFE	; 254
    1178:	08 f0       	brcs	.+2      	; 0x117c <__addsf3x+0x96>
    117a:	b3 cf       	rjmp	.-154    	; 0x10e2 <__addsf3+0x1e>
    117c:	93 95       	inc	r25
    117e:	88 0f       	add	r24, r24
    1180:	08 f0       	brcs	.+2      	; 0x1184 <__addsf3x+0x9e>
    1182:	99 27       	eor	r25, r25
    1184:	ee 0f       	add	r30, r30
    1186:	97 95       	ror	r25
    1188:	87 95       	ror	r24
    118a:	08 95       	ret

0000118c <__fixunssfsi>:
    118c:	98 d0       	rcall	.+304    	; 0x12be <__fp_splitA>
    118e:	88 f0       	brcs	.+34     	; 0x11b2 <__fixunssfsi+0x26>
    1190:	9f 57       	subi	r25, 0x7F	; 127
    1192:	90 f0       	brcs	.+36     	; 0x11b8 <__fixunssfsi+0x2c>
    1194:	b9 2f       	mov	r27, r25
    1196:	99 27       	eor	r25, r25
    1198:	b7 51       	subi	r27, 0x17	; 23
    119a:	a0 f0       	brcs	.+40     	; 0x11c4 <__fixunssfsi+0x38>
    119c:	d1 f0       	breq	.+52     	; 0x11d2 <__fixunssfsi+0x46>
    119e:	66 0f       	add	r22, r22
    11a0:	77 1f       	adc	r23, r23
    11a2:	88 1f       	adc	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	1a f0       	brmi	.+6      	; 0x11ae <__fixunssfsi+0x22>
    11a8:	ba 95       	dec	r27
    11aa:	c9 f7       	brne	.-14     	; 0x119e <__fixunssfsi+0x12>
    11ac:	12 c0       	rjmp	.+36     	; 0x11d2 <__fixunssfsi+0x46>
    11ae:	b1 30       	cpi	r27, 0x01	; 1
    11b0:	81 f0       	breq	.+32     	; 0x11d2 <__fixunssfsi+0x46>
    11b2:	9f d0       	rcall	.+318    	; 0x12f2 <__fp_zero>
    11b4:	b1 e0       	ldi	r27, 0x01	; 1
    11b6:	08 95       	ret
    11b8:	9c c0       	rjmp	.+312    	; 0x12f2 <__fp_zero>
    11ba:	67 2f       	mov	r22, r23
    11bc:	78 2f       	mov	r23, r24
    11be:	88 27       	eor	r24, r24
    11c0:	b8 5f       	subi	r27, 0xF8	; 248
    11c2:	39 f0       	breq	.+14     	; 0x11d2 <__fixunssfsi+0x46>
    11c4:	b9 3f       	cpi	r27, 0xF9	; 249
    11c6:	cc f3       	brlt	.-14     	; 0x11ba <__fixunssfsi+0x2e>
    11c8:	86 95       	lsr	r24
    11ca:	77 95       	ror	r23
    11cc:	67 95       	ror	r22
    11ce:	b3 95       	inc	r27
    11d0:	d9 f7       	brne	.-10     	; 0x11c8 <__fixunssfsi+0x3c>
    11d2:	3e f4       	brtc	.+14     	; 0x11e2 <__fixunssfsi+0x56>
    11d4:	90 95       	com	r25
    11d6:	80 95       	com	r24
    11d8:	70 95       	com	r23
    11da:	61 95       	neg	r22
    11dc:	7f 4f       	sbci	r23, 0xFF	; 255
    11de:	8f 4f       	sbci	r24, 0xFF	; 255
    11e0:	9f 4f       	sbci	r25, 0xFF	; 255
    11e2:	08 95       	ret

000011e4 <__floatunsisf>:
    11e4:	e8 94       	clt
    11e6:	09 c0       	rjmp	.+18     	; 0x11fa <__floatsisf+0x12>

000011e8 <__floatsisf>:
    11e8:	97 fb       	bst	r25, 7
    11ea:	3e f4       	brtc	.+14     	; 0x11fa <__floatsisf+0x12>
    11ec:	90 95       	com	r25
    11ee:	80 95       	com	r24
    11f0:	70 95       	com	r23
    11f2:	61 95       	neg	r22
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255
    11f6:	8f 4f       	sbci	r24, 0xFF	; 255
    11f8:	9f 4f       	sbci	r25, 0xFF	; 255
    11fa:	99 23       	and	r25, r25
    11fc:	a9 f0       	breq	.+42     	; 0x1228 <__floatsisf+0x40>
    11fe:	f9 2f       	mov	r31, r25
    1200:	96 e9       	ldi	r25, 0x96	; 150
    1202:	bb 27       	eor	r27, r27
    1204:	93 95       	inc	r25
    1206:	f6 95       	lsr	r31
    1208:	87 95       	ror	r24
    120a:	77 95       	ror	r23
    120c:	67 95       	ror	r22
    120e:	b7 95       	ror	r27
    1210:	f1 11       	cpse	r31, r1
    1212:	f8 cf       	rjmp	.-16     	; 0x1204 <__floatsisf+0x1c>
    1214:	fa f4       	brpl	.+62     	; 0x1254 <__floatsisf+0x6c>
    1216:	bb 0f       	add	r27, r27
    1218:	11 f4       	brne	.+4      	; 0x121e <__floatsisf+0x36>
    121a:	60 ff       	sbrs	r22, 0
    121c:	1b c0       	rjmp	.+54     	; 0x1254 <__floatsisf+0x6c>
    121e:	6f 5f       	subi	r22, 0xFF	; 255
    1220:	7f 4f       	sbci	r23, 0xFF	; 255
    1222:	8f 4f       	sbci	r24, 0xFF	; 255
    1224:	9f 4f       	sbci	r25, 0xFF	; 255
    1226:	16 c0       	rjmp	.+44     	; 0x1254 <__floatsisf+0x6c>
    1228:	88 23       	and	r24, r24
    122a:	11 f0       	breq	.+4      	; 0x1230 <__floatsisf+0x48>
    122c:	96 e9       	ldi	r25, 0x96	; 150
    122e:	11 c0       	rjmp	.+34     	; 0x1252 <__floatsisf+0x6a>
    1230:	77 23       	and	r23, r23
    1232:	21 f0       	breq	.+8      	; 0x123c <__floatsisf+0x54>
    1234:	9e e8       	ldi	r25, 0x8E	; 142
    1236:	87 2f       	mov	r24, r23
    1238:	76 2f       	mov	r23, r22
    123a:	05 c0       	rjmp	.+10     	; 0x1246 <__floatsisf+0x5e>
    123c:	66 23       	and	r22, r22
    123e:	71 f0       	breq	.+28     	; 0x125c <__floatsisf+0x74>
    1240:	96 e8       	ldi	r25, 0x86	; 134
    1242:	86 2f       	mov	r24, r22
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	2a f0       	brmi	.+10     	; 0x1254 <__floatsisf+0x6c>
    124a:	9a 95       	dec	r25
    124c:	66 0f       	add	r22, r22
    124e:	77 1f       	adc	r23, r23
    1250:	88 1f       	adc	r24, r24
    1252:	da f7       	brpl	.-10     	; 0x124a <__floatsisf+0x62>
    1254:	88 0f       	add	r24, r24
    1256:	96 95       	lsr	r25
    1258:	87 95       	ror	r24
    125a:	97 f9       	bld	r25, 7
    125c:	08 95       	ret

0000125e <__fp_inf>:
    125e:	97 f9       	bld	r25, 7
    1260:	9f 67       	ori	r25, 0x7F	; 127
    1262:	80 e8       	ldi	r24, 0x80	; 128
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	08 95       	ret

0000126a <__fp_nan>:
    126a:	9f ef       	ldi	r25, 0xFF	; 255
    126c:	80 ec       	ldi	r24, 0xC0	; 192
    126e:	08 95       	ret

00001270 <__fp_pscA>:
    1270:	00 24       	eor	r0, r0
    1272:	0a 94       	dec	r0
    1274:	16 16       	cp	r1, r22
    1276:	17 06       	cpc	r1, r23
    1278:	18 06       	cpc	r1, r24
    127a:	09 06       	cpc	r0, r25
    127c:	08 95       	ret

0000127e <__fp_pscB>:
    127e:	00 24       	eor	r0, r0
    1280:	0a 94       	dec	r0
    1282:	12 16       	cp	r1, r18
    1284:	13 06       	cpc	r1, r19
    1286:	14 06       	cpc	r1, r20
    1288:	05 06       	cpc	r0, r21
    128a:	08 95       	ret

0000128c <__fp_round>:
    128c:	09 2e       	mov	r0, r25
    128e:	03 94       	inc	r0
    1290:	00 0c       	add	r0, r0
    1292:	11 f4       	brne	.+4      	; 0x1298 <__fp_round+0xc>
    1294:	88 23       	and	r24, r24
    1296:	52 f0       	brmi	.+20     	; 0x12ac <__fp_round+0x20>
    1298:	bb 0f       	add	r27, r27
    129a:	40 f4       	brcc	.+16     	; 0x12ac <__fp_round+0x20>
    129c:	bf 2b       	or	r27, r31
    129e:	11 f4       	brne	.+4      	; 0x12a4 <__fp_round+0x18>
    12a0:	60 ff       	sbrs	r22, 0
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <__fp_round+0x20>
    12a4:	6f 5f       	subi	r22, 0xFF	; 255
    12a6:	7f 4f       	sbci	r23, 0xFF	; 255
    12a8:	8f 4f       	sbci	r24, 0xFF	; 255
    12aa:	9f 4f       	sbci	r25, 0xFF	; 255
    12ac:	08 95       	ret

000012ae <__fp_split3>:
    12ae:	57 fd       	sbrc	r21, 7
    12b0:	90 58       	subi	r25, 0x80	; 128
    12b2:	44 0f       	add	r20, r20
    12b4:	55 1f       	adc	r21, r21
    12b6:	59 f0       	breq	.+22     	; 0x12ce <__fp_splitA+0x10>
    12b8:	5f 3f       	cpi	r21, 0xFF	; 255
    12ba:	71 f0       	breq	.+28     	; 0x12d8 <__fp_splitA+0x1a>
    12bc:	47 95       	ror	r20

000012be <__fp_splitA>:
    12be:	88 0f       	add	r24, r24
    12c0:	97 fb       	bst	r25, 7
    12c2:	99 1f       	adc	r25, r25
    12c4:	61 f0       	breq	.+24     	; 0x12de <__fp_splitA+0x20>
    12c6:	9f 3f       	cpi	r25, 0xFF	; 255
    12c8:	79 f0       	breq	.+30     	; 0x12e8 <__fp_splitA+0x2a>
    12ca:	87 95       	ror	r24
    12cc:	08 95       	ret
    12ce:	12 16       	cp	r1, r18
    12d0:	13 06       	cpc	r1, r19
    12d2:	14 06       	cpc	r1, r20
    12d4:	55 1f       	adc	r21, r21
    12d6:	f2 cf       	rjmp	.-28     	; 0x12bc <__fp_split3+0xe>
    12d8:	46 95       	lsr	r20
    12da:	f1 df       	rcall	.-30     	; 0x12be <__fp_splitA>
    12dc:	08 c0       	rjmp	.+16     	; 0x12ee <__fp_splitA+0x30>
    12de:	16 16       	cp	r1, r22
    12e0:	17 06       	cpc	r1, r23
    12e2:	18 06       	cpc	r1, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	f1 cf       	rjmp	.-30     	; 0x12ca <__fp_splitA+0xc>
    12e8:	86 95       	lsr	r24
    12ea:	71 05       	cpc	r23, r1
    12ec:	61 05       	cpc	r22, r1
    12ee:	08 94       	sec
    12f0:	08 95       	ret

000012f2 <__fp_zero>:
    12f2:	e8 94       	clt

000012f4 <__fp_szero>:
    12f4:	bb 27       	eor	r27, r27
    12f6:	66 27       	eor	r22, r22
    12f8:	77 27       	eor	r23, r23
    12fa:	cb 01       	movw	r24, r22
    12fc:	97 f9       	bld	r25, 7
    12fe:	08 95       	ret

00001300 <__mulsf3>:
    1300:	0b d0       	rcall	.+22     	; 0x1318 <__mulsf3x>
    1302:	c4 cf       	rjmp	.-120    	; 0x128c <__fp_round>
    1304:	b5 df       	rcall	.-150    	; 0x1270 <__fp_pscA>
    1306:	28 f0       	brcs	.+10     	; 0x1312 <__mulsf3+0x12>
    1308:	ba df       	rcall	.-140    	; 0x127e <__fp_pscB>
    130a:	18 f0       	brcs	.+6      	; 0x1312 <__mulsf3+0x12>
    130c:	95 23       	and	r25, r21
    130e:	09 f0       	breq	.+2      	; 0x1312 <__mulsf3+0x12>
    1310:	a6 cf       	rjmp	.-180    	; 0x125e <__fp_inf>
    1312:	ab cf       	rjmp	.-170    	; 0x126a <__fp_nan>
    1314:	11 24       	eor	r1, r1
    1316:	ee cf       	rjmp	.-36     	; 0x12f4 <__fp_szero>

00001318 <__mulsf3x>:
    1318:	ca df       	rcall	.-108    	; 0x12ae <__fp_split3>
    131a:	a0 f3       	brcs	.-24     	; 0x1304 <__mulsf3+0x4>

0000131c <__mulsf3_pse>:
    131c:	95 9f       	mul	r25, r21
    131e:	d1 f3       	breq	.-12     	; 0x1314 <__mulsf3+0x14>
    1320:	95 0f       	add	r25, r21
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	55 1f       	adc	r21, r21
    1326:	62 9f       	mul	r22, r18
    1328:	f0 01       	movw	r30, r0
    132a:	72 9f       	mul	r23, r18
    132c:	bb 27       	eor	r27, r27
    132e:	f0 0d       	add	r31, r0
    1330:	b1 1d       	adc	r27, r1
    1332:	63 9f       	mul	r22, r19
    1334:	aa 27       	eor	r26, r26
    1336:	f0 0d       	add	r31, r0
    1338:	b1 1d       	adc	r27, r1
    133a:	aa 1f       	adc	r26, r26
    133c:	64 9f       	mul	r22, r20
    133e:	66 27       	eor	r22, r22
    1340:	b0 0d       	add	r27, r0
    1342:	a1 1d       	adc	r26, r1
    1344:	66 1f       	adc	r22, r22
    1346:	82 9f       	mul	r24, r18
    1348:	22 27       	eor	r18, r18
    134a:	b0 0d       	add	r27, r0
    134c:	a1 1d       	adc	r26, r1
    134e:	62 1f       	adc	r22, r18
    1350:	73 9f       	mul	r23, r19
    1352:	b0 0d       	add	r27, r0
    1354:	a1 1d       	adc	r26, r1
    1356:	62 1f       	adc	r22, r18
    1358:	83 9f       	mul	r24, r19
    135a:	a0 0d       	add	r26, r0
    135c:	61 1d       	adc	r22, r1
    135e:	22 1f       	adc	r18, r18
    1360:	74 9f       	mul	r23, r20
    1362:	33 27       	eor	r19, r19
    1364:	a0 0d       	add	r26, r0
    1366:	61 1d       	adc	r22, r1
    1368:	23 1f       	adc	r18, r19
    136a:	84 9f       	mul	r24, r20
    136c:	60 0d       	add	r22, r0
    136e:	21 1d       	adc	r18, r1
    1370:	82 2f       	mov	r24, r18
    1372:	76 2f       	mov	r23, r22
    1374:	6a 2f       	mov	r22, r26
    1376:	11 24       	eor	r1, r1
    1378:	9f 57       	subi	r25, 0x7F	; 127
    137a:	50 40       	sbci	r21, 0x00	; 0
    137c:	8a f0       	brmi	.+34     	; 0x13a0 <__mulsf3_pse+0x84>
    137e:	e1 f0       	breq	.+56     	; 0x13b8 <__mulsf3_pse+0x9c>
    1380:	88 23       	and	r24, r24
    1382:	4a f0       	brmi	.+18     	; 0x1396 <__mulsf3_pse+0x7a>
    1384:	ee 0f       	add	r30, r30
    1386:	ff 1f       	adc	r31, r31
    1388:	bb 1f       	adc	r27, r27
    138a:	66 1f       	adc	r22, r22
    138c:	77 1f       	adc	r23, r23
    138e:	88 1f       	adc	r24, r24
    1390:	91 50       	subi	r25, 0x01	; 1
    1392:	50 40       	sbci	r21, 0x00	; 0
    1394:	a9 f7       	brne	.-22     	; 0x1380 <__mulsf3_pse+0x64>
    1396:	9e 3f       	cpi	r25, 0xFE	; 254
    1398:	51 05       	cpc	r21, r1
    139a:	70 f0       	brcs	.+28     	; 0x13b8 <__mulsf3_pse+0x9c>
    139c:	60 cf       	rjmp	.-320    	; 0x125e <__fp_inf>
    139e:	aa cf       	rjmp	.-172    	; 0x12f4 <__fp_szero>
    13a0:	5f 3f       	cpi	r21, 0xFF	; 255
    13a2:	ec f3       	brlt	.-6      	; 0x139e <__mulsf3_pse+0x82>
    13a4:	98 3e       	cpi	r25, 0xE8	; 232
    13a6:	dc f3       	brlt	.-10     	; 0x139e <__mulsf3_pse+0x82>
    13a8:	86 95       	lsr	r24
    13aa:	77 95       	ror	r23
    13ac:	67 95       	ror	r22
    13ae:	b7 95       	ror	r27
    13b0:	f7 95       	ror	r31
    13b2:	e7 95       	ror	r30
    13b4:	9f 5f       	subi	r25, 0xFF	; 255
    13b6:	c1 f7       	brne	.-16     	; 0x13a8 <__mulsf3_pse+0x8c>
    13b8:	fe 2b       	or	r31, r30
    13ba:	88 0f       	add	r24, r24
    13bc:	91 1d       	adc	r25, r1
    13be:	96 95       	lsr	r25
    13c0:	87 95       	ror	r24
    13c2:	97 f9       	bld	r25, 7
    13c4:	08 95       	ret

000013c6 <pow>:
    13c6:	fa 01       	movw	r30, r20
    13c8:	ee 0f       	add	r30, r30
    13ca:	ff 1f       	adc	r31, r31
    13cc:	30 96       	adiw	r30, 0x00	; 0
    13ce:	21 05       	cpc	r18, r1
    13d0:	31 05       	cpc	r19, r1
    13d2:	99 f1       	breq	.+102    	; 0x143a <pow+0x74>
    13d4:	61 15       	cp	r22, r1
    13d6:	71 05       	cpc	r23, r1
    13d8:	61 f4       	brne	.+24     	; 0x13f2 <pow+0x2c>
    13da:	80 38       	cpi	r24, 0x80	; 128
    13dc:	bf e3       	ldi	r27, 0x3F	; 63
    13de:	9b 07       	cpc	r25, r27
    13e0:	49 f1       	breq	.+82     	; 0x1434 <pow+0x6e>
    13e2:	68 94       	set
    13e4:	90 38       	cpi	r25, 0x80	; 128
    13e6:	81 05       	cpc	r24, r1
    13e8:	61 f0       	breq	.+24     	; 0x1402 <pow+0x3c>
    13ea:	80 38       	cpi	r24, 0x80	; 128
    13ec:	bf ef       	ldi	r27, 0xFF	; 255
    13ee:	9b 07       	cpc	r25, r27
    13f0:	41 f0       	breq	.+16     	; 0x1402 <pow+0x3c>
    13f2:	99 23       	and	r25, r25
    13f4:	42 f5       	brpl	.+80     	; 0x1446 <pow+0x80>
    13f6:	ff 3f       	cpi	r31, 0xFF	; 255
    13f8:	e1 05       	cpc	r30, r1
    13fa:	31 05       	cpc	r19, r1
    13fc:	21 05       	cpc	r18, r1
    13fe:	11 f1       	breq	.+68     	; 0x1444 <pow+0x7e>
    1400:	e8 94       	clt
    1402:	08 94       	sec
    1404:	e7 95       	ror	r30
    1406:	d9 01       	movw	r26, r18
    1408:	aa 23       	and	r26, r26
    140a:	29 f4       	brne	.+10     	; 0x1416 <pow+0x50>
    140c:	ab 2f       	mov	r26, r27
    140e:	be 2f       	mov	r27, r30
    1410:	f8 5f       	subi	r31, 0xF8	; 248
    1412:	d0 f3       	brcs	.-12     	; 0x1408 <pow+0x42>
    1414:	10 c0       	rjmp	.+32     	; 0x1436 <pow+0x70>
    1416:	ff 5f       	subi	r31, 0xFF	; 255
    1418:	70 f4       	brcc	.+28     	; 0x1436 <pow+0x70>
    141a:	a6 95       	lsr	r26
    141c:	e0 f7       	brcc	.-8      	; 0x1416 <pow+0x50>
    141e:	f7 39       	cpi	r31, 0x97	; 151
    1420:	50 f0       	brcs	.+20     	; 0x1436 <pow+0x70>
    1422:	19 f0       	breq	.+6      	; 0x142a <pow+0x64>
    1424:	ff 3a       	cpi	r31, 0xAF	; 175
    1426:	38 f4       	brcc	.+14     	; 0x1436 <pow+0x70>
    1428:	9f 77       	andi	r25, 0x7F	; 127
    142a:	9f 93       	push	r25
    142c:	0c d0       	rcall	.+24     	; 0x1446 <pow+0x80>
    142e:	0f 90       	pop	r0
    1430:	07 fc       	sbrc	r0, 7
    1432:	90 58       	subi	r25, 0x80	; 128
    1434:	08 95       	ret
    1436:	3e f0       	brts	.+14     	; 0x1446 <pow+0x80>
    1438:	18 cf       	rjmp	.-464    	; 0x126a <__fp_nan>
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	80 e8       	ldi	r24, 0x80	; 128
    1440:	9f e3       	ldi	r25, 0x3F	; 63
    1442:	08 95       	ret
    1444:	4f e7       	ldi	r20, 0x7F	; 127
    1446:	9f 77       	andi	r25, 0x7F	; 127
    1448:	5f 93       	push	r21
    144a:	4f 93       	push	r20
    144c:	3f 93       	push	r19
    144e:	2f 93       	push	r18
    1450:	9e d0       	rcall	.+316    	; 0x158e <log>
    1452:	2f 91       	pop	r18
    1454:	3f 91       	pop	r19
    1456:	4f 91       	pop	r20
    1458:	5f 91       	pop	r21
    145a:	52 df       	rcall	.-348    	; 0x1300 <__mulsf3>
    145c:	05 c0       	rjmp	.+10     	; 0x1468 <exp>
    145e:	19 f4       	brne	.+6      	; 0x1466 <pow+0xa0>
    1460:	0e f0       	brts	.+2      	; 0x1464 <pow+0x9e>
    1462:	fd ce       	rjmp	.-518    	; 0x125e <__fp_inf>
    1464:	46 cf       	rjmp	.-372    	; 0x12f2 <__fp_zero>
    1466:	01 cf       	rjmp	.-510    	; 0x126a <__fp_nan>

00001468 <exp>:
    1468:	2a df       	rcall	.-428    	; 0x12be <__fp_splitA>
    146a:	c8 f3       	brcs	.-14     	; 0x145e <pow+0x98>
    146c:	96 38       	cpi	r25, 0x86	; 134
    146e:	c0 f7       	brcc	.-16     	; 0x1460 <pow+0x9a>
    1470:	07 f8       	bld	r0, 7
    1472:	0f 92       	push	r0
    1474:	e8 94       	clt
    1476:	2b e3       	ldi	r18, 0x3B	; 59
    1478:	3a ea       	ldi	r19, 0xAA	; 170
    147a:	48 eb       	ldi	r20, 0xB8	; 184
    147c:	5f e7       	ldi	r21, 0x7F	; 127
    147e:	4e df       	rcall	.-356    	; 0x131c <__mulsf3_pse>
    1480:	0f 92       	push	r0
    1482:	0f 92       	push	r0
    1484:	0f 92       	push	r0
    1486:	4d b7       	in	r20, 0x3d	; 61
    1488:	5e b7       	in	r21, 0x3e	; 62
    148a:	0f 92       	push	r0
    148c:	c0 d0       	rcall	.+384    	; 0x160e <modf>
    148e:	e4 e5       	ldi	r30, 0x54	; 84
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	16 d0       	rcall	.+44     	; 0x14c0 <__fp_powser>
    1494:	4f 91       	pop	r20
    1496:	5f 91       	pop	r21
    1498:	ef 91       	pop	r30
    149a:	ff 91       	pop	r31
    149c:	e5 95       	asr	r30
    149e:	ee 1f       	adc	r30, r30
    14a0:	ff 1f       	adc	r31, r31
    14a2:	49 f0       	breq	.+18     	; 0x14b6 <exp+0x4e>
    14a4:	fe 57       	subi	r31, 0x7E	; 126
    14a6:	e0 68       	ori	r30, 0x80	; 128
    14a8:	44 27       	eor	r20, r20
    14aa:	ee 0f       	add	r30, r30
    14ac:	44 1f       	adc	r20, r20
    14ae:	fa 95       	dec	r31
    14b0:	e1 f7       	brne	.-8      	; 0x14aa <exp+0x42>
    14b2:	41 95       	neg	r20
    14b4:	55 0b       	sbc	r21, r21
    14b6:	32 d0       	rcall	.+100    	; 0x151c <ldexp>
    14b8:	0f 90       	pop	r0
    14ba:	07 fe       	sbrs	r0, 7
    14bc:	26 c0       	rjmp	.+76     	; 0x150a <inverse>
    14be:	08 95       	ret

000014c0 <__fp_powser>:
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	1f 93       	push	r17
    14c6:	0f 93       	push	r16
    14c8:	ff 92       	push	r15
    14ca:	ef 92       	push	r14
    14cc:	df 92       	push	r13
    14ce:	7b 01       	movw	r14, r22
    14d0:	8c 01       	movw	r16, r24
    14d2:	68 94       	set
    14d4:	05 c0       	rjmp	.+10     	; 0x14e0 <__fp_powser+0x20>
    14d6:	da 2e       	mov	r13, r26
    14d8:	ef 01       	movw	r28, r30
    14da:	1e df       	rcall	.-452    	; 0x1318 <__mulsf3x>
    14dc:	fe 01       	movw	r30, r28
    14de:	e8 94       	clt
    14e0:	a5 91       	lpm	r26, Z+
    14e2:	25 91       	lpm	r18, Z+
    14e4:	35 91       	lpm	r19, Z+
    14e6:	45 91       	lpm	r20, Z+
    14e8:	55 91       	lpm	r21, Z+
    14ea:	ae f3       	brts	.-22     	; 0x14d6 <__fp_powser+0x16>
    14ec:	ef 01       	movw	r28, r30
    14ee:	fb dd       	rcall	.-1034   	; 0x10e6 <__addsf3x>
    14f0:	fe 01       	movw	r30, r28
    14f2:	97 01       	movw	r18, r14
    14f4:	a8 01       	movw	r20, r16
    14f6:	da 94       	dec	r13
    14f8:	79 f7       	brne	.-34     	; 0x14d8 <__fp_powser+0x18>
    14fa:	df 90       	pop	r13
    14fc:	ef 90       	pop	r14
    14fe:	ff 90       	pop	r15
    1500:	0f 91       	pop	r16
    1502:	1f 91       	pop	r17
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <inverse>:
    150a:	9b 01       	movw	r18, r22
    150c:	ac 01       	movw	r20, r24
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	80 e8       	ldi	r24, 0x80	; 128
    1514:	9f e3       	ldi	r25, 0x3F	; 63
    1516:	ae c0       	rjmp	.+348    	; 0x1674 <__divsf3>
    1518:	a2 ce       	rjmp	.-700    	; 0x125e <__fp_inf>
    151a:	14 c1       	rjmp	.+552    	; 0x1744 <__fp_mpack>

0000151c <ldexp>:
    151c:	d0 de       	rcall	.-608    	; 0x12be <__fp_splitA>
    151e:	e8 f3       	brcs	.-6      	; 0x151a <inverse+0x10>
    1520:	99 23       	and	r25, r25
    1522:	d9 f3       	breq	.-10     	; 0x151a <inverse+0x10>
    1524:	94 0f       	add	r25, r20
    1526:	51 1d       	adc	r21, r1
    1528:	bb f3       	brvs	.-18     	; 0x1518 <inverse+0xe>
    152a:	91 50       	subi	r25, 0x01	; 1
    152c:	50 40       	sbci	r21, 0x00	; 0
    152e:	94 f0       	brlt	.+36     	; 0x1554 <ldexp+0x38>
    1530:	59 f0       	breq	.+22     	; 0x1548 <ldexp+0x2c>
    1532:	88 23       	and	r24, r24
    1534:	32 f0       	brmi	.+12     	; 0x1542 <ldexp+0x26>
    1536:	66 0f       	add	r22, r22
    1538:	77 1f       	adc	r23, r23
    153a:	88 1f       	adc	r24, r24
    153c:	91 50       	subi	r25, 0x01	; 1
    153e:	50 40       	sbci	r21, 0x00	; 0
    1540:	c1 f7       	brne	.-16     	; 0x1532 <ldexp+0x16>
    1542:	9e 3f       	cpi	r25, 0xFE	; 254
    1544:	51 05       	cpc	r21, r1
    1546:	44 f7       	brge	.-48     	; 0x1518 <inverse+0xe>
    1548:	88 0f       	add	r24, r24
    154a:	91 1d       	adc	r25, r1
    154c:	96 95       	lsr	r25
    154e:	87 95       	ror	r24
    1550:	97 f9       	bld	r25, 7
    1552:	08 95       	ret
    1554:	5f 3f       	cpi	r21, 0xFF	; 255
    1556:	ac f0       	brlt	.+42     	; 0x1582 <ldexp+0x66>
    1558:	98 3e       	cpi	r25, 0xE8	; 232
    155a:	9c f0       	brlt	.+38     	; 0x1582 <ldexp+0x66>
    155c:	bb 27       	eor	r27, r27
    155e:	86 95       	lsr	r24
    1560:	77 95       	ror	r23
    1562:	67 95       	ror	r22
    1564:	b7 95       	ror	r27
    1566:	08 f4       	brcc	.+2      	; 0x156a <ldexp+0x4e>
    1568:	b1 60       	ori	r27, 0x01	; 1
    156a:	93 95       	inc	r25
    156c:	c1 f7       	brne	.-16     	; 0x155e <ldexp+0x42>
    156e:	bb 0f       	add	r27, r27
    1570:	58 f7       	brcc	.-42     	; 0x1548 <ldexp+0x2c>
    1572:	11 f4       	brne	.+4      	; 0x1578 <ldexp+0x5c>
    1574:	60 ff       	sbrs	r22, 0
    1576:	e8 cf       	rjmp	.-48     	; 0x1548 <ldexp+0x2c>
    1578:	6f 5f       	subi	r22, 0xFF	; 255
    157a:	7f 4f       	sbci	r23, 0xFF	; 255
    157c:	8f 4f       	sbci	r24, 0xFF	; 255
    157e:	9f 4f       	sbci	r25, 0xFF	; 255
    1580:	e3 cf       	rjmp	.-58     	; 0x1548 <ldexp+0x2c>
    1582:	b8 ce       	rjmp	.-656    	; 0x12f4 <__fp_szero>
    1584:	0e f0       	brts	.+2      	; 0x1588 <ldexp+0x6c>
    1586:	de c0       	rjmp	.+444    	; 0x1744 <__fp_mpack>
    1588:	70 ce       	rjmp	.-800    	; 0x126a <__fp_nan>
    158a:	68 94       	set
    158c:	68 ce       	rjmp	.-816    	; 0x125e <__fp_inf>

0000158e <log>:
    158e:	97 de       	rcall	.-722    	; 0x12be <__fp_splitA>
    1590:	c8 f3       	brcs	.-14     	; 0x1584 <ldexp+0x68>
    1592:	99 23       	and	r25, r25
    1594:	d1 f3       	breq	.-12     	; 0x158a <ldexp+0x6e>
    1596:	c6 f3       	brts	.-16     	; 0x1588 <ldexp+0x6c>
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	1f 93       	push	r17
    159e:	0f 93       	push	r16
    15a0:	ff 92       	push	r15
    15a2:	c9 2f       	mov	r28, r25
    15a4:	dd 27       	eor	r29, r29
    15a6:	88 23       	and	r24, r24
    15a8:	2a f0       	brmi	.+10     	; 0x15b4 <log+0x26>
    15aa:	21 97       	sbiw	r28, 0x01	; 1
    15ac:	66 0f       	add	r22, r22
    15ae:	77 1f       	adc	r23, r23
    15b0:	88 1f       	adc	r24, r24
    15b2:	da f7       	brpl	.-10     	; 0x15aa <log+0x1c>
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e8       	ldi	r20, 0x80	; 128
    15ba:	5f eb       	ldi	r21, 0xBF	; 191
    15bc:	9f e3       	ldi	r25, 0x3F	; 63
    15be:	88 39       	cpi	r24, 0x98	; 152
    15c0:	20 f0       	brcs	.+8      	; 0x15ca <log+0x3c>
    15c2:	80 3e       	cpi	r24, 0xE0	; 224
    15c4:	30 f0       	brcs	.+12     	; 0x15d2 <log+0x44>
    15c6:	21 96       	adiw	r28, 0x01	; 1
    15c8:	8f 77       	andi	r24, 0x7F	; 127
    15ca:	7c dd       	rcall	.-1288   	; 0x10c4 <__addsf3>
    15cc:	ec e7       	ldi	r30, 0x7C	; 124
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	03 c0       	rjmp	.+6      	; 0x15d8 <log+0x4a>
    15d2:	78 dd       	rcall	.-1296   	; 0x10c4 <__addsf3>
    15d4:	e9 ea       	ldi	r30, 0xA9	; 169
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	73 df       	rcall	.-282    	; 0x14c0 <__fp_powser>
    15da:	8b 01       	movw	r16, r22
    15dc:	be 01       	movw	r22, r28
    15de:	ec 01       	movw	r28, r24
    15e0:	fb 2e       	mov	r15, r27
    15e2:	6f 57       	subi	r22, 0x7F	; 127
    15e4:	71 09       	sbc	r23, r1
    15e6:	75 95       	asr	r23
    15e8:	77 1f       	adc	r23, r23
    15ea:	88 0b       	sbc	r24, r24
    15ec:	99 0b       	sbc	r25, r25
    15ee:	fc dd       	rcall	.-1032   	; 0x11e8 <__floatsisf>
    15f0:	28 e1       	ldi	r18, 0x18	; 24
    15f2:	32 e7       	ldi	r19, 0x72	; 114
    15f4:	41 e3       	ldi	r20, 0x31	; 49
    15f6:	5f e3       	ldi	r21, 0x3F	; 63
    15f8:	8f de       	rcall	.-738    	; 0x1318 <__mulsf3x>
    15fa:	af 2d       	mov	r26, r15
    15fc:	98 01       	movw	r18, r16
    15fe:	ae 01       	movw	r20, r28
    1600:	ff 90       	pop	r15
    1602:	0f 91       	pop	r16
    1604:	1f 91       	pop	r17
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	6d dd       	rcall	.-1318   	; 0x10e6 <__addsf3x>
    160c:	3f ce       	rjmp	.-898    	; 0x128c <__fp_round>

0000160e <modf>:
    160e:	fa 01       	movw	r30, r20
    1610:	dc 01       	movw	r26, r24
    1612:	aa 0f       	add	r26, r26
    1614:	bb 1f       	adc	r27, r27
    1616:	9b 01       	movw	r18, r22
    1618:	ac 01       	movw	r20, r24
    161a:	bf 57       	subi	r27, 0x7F	; 127
    161c:	28 f4       	brcc	.+10     	; 0x1628 <modf+0x1a>
    161e:	22 27       	eor	r18, r18
    1620:	33 27       	eor	r19, r19
    1622:	44 27       	eor	r20, r20
    1624:	50 78       	andi	r21, 0x80	; 128
    1626:	1f c0       	rjmp	.+62     	; 0x1666 <modf+0x58>
    1628:	b7 51       	subi	r27, 0x17	; 23
    162a:	88 f4       	brcc	.+34     	; 0x164e <modf+0x40>
    162c:	ab 2f       	mov	r26, r27
    162e:	00 24       	eor	r0, r0
    1630:	46 95       	lsr	r20
    1632:	37 95       	ror	r19
    1634:	27 95       	ror	r18
    1636:	01 1c       	adc	r0, r1
    1638:	a3 95       	inc	r26
    163a:	d2 f3       	brmi	.-12     	; 0x1630 <modf+0x22>
    163c:	00 20       	and	r0, r0
    163e:	69 f0       	breq	.+26     	; 0x165a <modf+0x4c>
    1640:	22 0f       	add	r18, r18
    1642:	33 1f       	adc	r19, r19
    1644:	44 1f       	adc	r20, r20
    1646:	b3 95       	inc	r27
    1648:	da f3       	brmi	.-10     	; 0x1640 <modf+0x32>
    164a:	0d d0       	rcall	.+26     	; 0x1666 <modf+0x58>
    164c:	3a cd       	rjmp	.-1420   	; 0x10c2 <__subsf3>
    164e:	61 30       	cpi	r22, 0x01	; 1
    1650:	71 05       	cpc	r23, r1
    1652:	a0 e8       	ldi	r26, 0x80	; 128
    1654:	8a 07       	cpc	r24, r26
    1656:	b9 46       	sbci	r27, 0x69	; 105
    1658:	30 f4       	brcc	.+12     	; 0x1666 <modf+0x58>
    165a:	9b 01       	movw	r18, r22
    165c:	ac 01       	movw	r20, r24
    165e:	66 27       	eor	r22, r22
    1660:	77 27       	eor	r23, r23
    1662:	88 27       	eor	r24, r24
    1664:	90 78       	andi	r25, 0x80	; 128
    1666:	30 96       	adiw	r30, 0x00	; 0
    1668:	21 f0       	breq	.+8      	; 0x1672 <modf+0x64>
    166a:	20 83       	st	Z, r18
    166c:	31 83       	std	Z+1, r19	; 0x01
    166e:	42 83       	std	Z+2, r20	; 0x02
    1670:	53 83       	std	Z+3, r21	; 0x03
    1672:	08 95       	ret

00001674 <__divsf3>:
    1674:	0c d0       	rcall	.+24     	; 0x168e <__divsf3x>
    1676:	0a ce       	rjmp	.-1004   	; 0x128c <__fp_round>
    1678:	02 de       	rcall	.-1020   	; 0x127e <__fp_pscB>
    167a:	40 f0       	brcs	.+16     	; 0x168c <__divsf3+0x18>
    167c:	f9 dd       	rcall	.-1038   	; 0x1270 <__fp_pscA>
    167e:	30 f0       	brcs	.+12     	; 0x168c <__divsf3+0x18>
    1680:	21 f4       	brne	.+8      	; 0x168a <__divsf3+0x16>
    1682:	5f 3f       	cpi	r21, 0xFF	; 255
    1684:	19 f0       	breq	.+6      	; 0x168c <__divsf3+0x18>
    1686:	eb cd       	rjmp	.-1066   	; 0x125e <__fp_inf>
    1688:	51 11       	cpse	r21, r1
    168a:	34 ce       	rjmp	.-920    	; 0x12f4 <__fp_szero>
    168c:	ee cd       	rjmp	.-1060   	; 0x126a <__fp_nan>

0000168e <__divsf3x>:
    168e:	0f de       	rcall	.-994    	; 0x12ae <__fp_split3>
    1690:	98 f3       	brcs	.-26     	; 0x1678 <__divsf3+0x4>

00001692 <__divsf3_pse>:
    1692:	99 23       	and	r25, r25
    1694:	c9 f3       	breq	.-14     	; 0x1688 <__divsf3+0x14>
    1696:	55 23       	and	r21, r21
    1698:	b1 f3       	breq	.-20     	; 0x1686 <__divsf3+0x12>
    169a:	95 1b       	sub	r25, r21
    169c:	55 0b       	sbc	r21, r21
    169e:	bb 27       	eor	r27, r27
    16a0:	aa 27       	eor	r26, r26
    16a2:	62 17       	cp	r22, r18
    16a4:	73 07       	cpc	r23, r19
    16a6:	84 07       	cpc	r24, r20
    16a8:	38 f0       	brcs	.+14     	; 0x16b8 <__divsf3_pse+0x26>
    16aa:	9f 5f       	subi	r25, 0xFF	; 255
    16ac:	5f 4f       	sbci	r21, 0xFF	; 255
    16ae:	22 0f       	add	r18, r18
    16b0:	33 1f       	adc	r19, r19
    16b2:	44 1f       	adc	r20, r20
    16b4:	aa 1f       	adc	r26, r26
    16b6:	a9 f3       	breq	.-22     	; 0x16a2 <__divsf3_pse+0x10>
    16b8:	33 d0       	rcall	.+102    	; 0x1720 <__divsf3_pse+0x8e>
    16ba:	0e 2e       	mov	r0, r30
    16bc:	3a f0       	brmi	.+14     	; 0x16cc <__divsf3_pse+0x3a>
    16be:	e0 e8       	ldi	r30, 0x80	; 128
    16c0:	30 d0       	rcall	.+96     	; 0x1722 <__divsf3_pse+0x90>
    16c2:	91 50       	subi	r25, 0x01	; 1
    16c4:	50 40       	sbci	r21, 0x00	; 0
    16c6:	e6 95       	lsr	r30
    16c8:	00 1c       	adc	r0, r0
    16ca:	ca f7       	brpl	.-14     	; 0x16be <__divsf3_pse+0x2c>
    16cc:	29 d0       	rcall	.+82     	; 0x1720 <__divsf3_pse+0x8e>
    16ce:	fe 2f       	mov	r31, r30
    16d0:	27 d0       	rcall	.+78     	; 0x1720 <__divsf3_pse+0x8e>
    16d2:	66 0f       	add	r22, r22
    16d4:	77 1f       	adc	r23, r23
    16d6:	88 1f       	adc	r24, r24
    16d8:	bb 1f       	adc	r27, r27
    16da:	26 17       	cp	r18, r22
    16dc:	37 07       	cpc	r19, r23
    16de:	48 07       	cpc	r20, r24
    16e0:	ab 07       	cpc	r26, r27
    16e2:	b0 e8       	ldi	r27, 0x80	; 128
    16e4:	09 f0       	breq	.+2      	; 0x16e8 <__divsf3_pse+0x56>
    16e6:	bb 0b       	sbc	r27, r27
    16e8:	80 2d       	mov	r24, r0
    16ea:	bf 01       	movw	r22, r30
    16ec:	ff 27       	eor	r31, r31
    16ee:	93 58       	subi	r25, 0x83	; 131
    16f0:	5f 4f       	sbci	r21, 0xFF	; 255
    16f2:	2a f0       	brmi	.+10     	; 0x16fe <__divsf3_pse+0x6c>
    16f4:	9e 3f       	cpi	r25, 0xFE	; 254
    16f6:	51 05       	cpc	r21, r1
    16f8:	68 f0       	brcs	.+26     	; 0x1714 <__divsf3_pse+0x82>
    16fa:	b1 cd       	rjmp	.-1182   	; 0x125e <__fp_inf>
    16fc:	fb cd       	rjmp	.-1034   	; 0x12f4 <__fp_szero>
    16fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1700:	ec f3       	brlt	.-6      	; 0x16fc <__divsf3_pse+0x6a>
    1702:	98 3e       	cpi	r25, 0xE8	; 232
    1704:	dc f3       	brlt	.-10     	; 0x16fc <__divsf3_pse+0x6a>
    1706:	86 95       	lsr	r24
    1708:	77 95       	ror	r23
    170a:	67 95       	ror	r22
    170c:	b7 95       	ror	r27
    170e:	f7 95       	ror	r31
    1710:	9f 5f       	subi	r25, 0xFF	; 255
    1712:	c9 f7       	brne	.-14     	; 0x1706 <__divsf3_pse+0x74>
    1714:	88 0f       	add	r24, r24
    1716:	91 1d       	adc	r25, r1
    1718:	96 95       	lsr	r25
    171a:	87 95       	ror	r24
    171c:	97 f9       	bld	r25, 7
    171e:	08 95       	ret
    1720:	e1 e0       	ldi	r30, 0x01	; 1
    1722:	66 0f       	add	r22, r22
    1724:	77 1f       	adc	r23, r23
    1726:	88 1f       	adc	r24, r24
    1728:	bb 1f       	adc	r27, r27
    172a:	62 17       	cp	r22, r18
    172c:	73 07       	cpc	r23, r19
    172e:	84 07       	cpc	r24, r20
    1730:	ba 07       	cpc	r27, r26
    1732:	20 f0       	brcs	.+8      	; 0x173c <__divsf3_pse+0xaa>
    1734:	62 1b       	sub	r22, r18
    1736:	73 0b       	sbc	r23, r19
    1738:	84 0b       	sbc	r24, r20
    173a:	ba 0b       	sbc	r27, r26
    173c:	ee 1f       	adc	r30, r30
    173e:	88 f7       	brcc	.-30     	; 0x1722 <__divsf3_pse+0x90>
    1740:	e0 95       	com	r30
    1742:	08 95       	ret

00001744 <__fp_mpack>:
    1744:	9f 3f       	cpi	r25, 0xFF	; 255
    1746:	31 f0       	breq	.+12     	; 0x1754 <__fp_mpack_finite+0xc>

00001748 <__fp_mpack_finite>:
    1748:	91 50       	subi	r25, 0x01	; 1
    174a:	20 f4       	brcc	.+8      	; 0x1754 <__fp_mpack_finite+0xc>
    174c:	87 95       	ror	r24
    174e:	77 95       	ror	r23
    1750:	67 95       	ror	r22
    1752:	b7 95       	ror	r27
    1754:	88 0f       	add	r24, r24
    1756:	91 1d       	adc	r25, r1
    1758:	96 95       	lsr	r25
    175a:	87 95       	ror	r24
    175c:	97 f9       	bld	r25, 7
    175e:	08 95       	ret

00001760 <__udivmodhi4>:
    1760:	aa 1b       	sub	r26, r26
    1762:	bb 1b       	sub	r27, r27
    1764:	51 e1       	ldi	r21, 0x11	; 17
    1766:	07 c0       	rjmp	.+14     	; 0x1776 <__udivmodhi4_ep>

00001768 <__udivmodhi4_loop>:
    1768:	aa 1f       	adc	r26, r26
    176a:	bb 1f       	adc	r27, r27
    176c:	a6 17       	cp	r26, r22
    176e:	b7 07       	cpc	r27, r23
    1770:	10 f0       	brcs	.+4      	; 0x1776 <__udivmodhi4_ep>
    1772:	a6 1b       	sub	r26, r22
    1774:	b7 0b       	sbc	r27, r23

00001776 <__udivmodhi4_ep>:
    1776:	88 1f       	adc	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	5a 95       	dec	r21
    177c:	a9 f7       	brne	.-22     	; 0x1768 <__udivmodhi4_loop>
    177e:	80 95       	com	r24
    1780:	90 95       	com	r25
    1782:	bc 01       	movw	r22, r24
    1784:	cd 01       	movw	r24, r26
    1786:	08 95       	ret

00001788 <_exit>:
    1788:	f8 94       	cli

0000178a <__stop_program>:
    178a:	ff cf       	rjmp	.-2      	; 0x178a <__stop_program>
