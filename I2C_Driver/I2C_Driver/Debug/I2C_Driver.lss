
I2C_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000604  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000604  00000698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000032  00800074  00800074  000006ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020d7  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cda  00000000  00000000  000029a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014eb  00000000  00000000  00003681  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00004b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d1e  00000000  00000000  00004eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a82  00000000  00000000  00005bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00007654  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3a       	cpi	r26, 0xA6	; 166
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <main>
  8a:	0c 94 00 03 	jmp	0x600	; 0x600 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <eeprom_init>:



void eeprom_init(void)
{
	TWI_MasterInit(0x01); // call function that init I2c Master
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	0e 94 a2 02 	call	0x544	; 0x544 <TWI_MasterInit>
  98:	08 95       	ret

0000009a <eeprom_write_byte>:
}


void eeprom_write_byte(u16 address, u8 data)
{
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	d8 2f       	mov	r29, r24
  a2:	19 2f       	mov	r17, r25
  a4:	c6 2f       	mov	r28, r22
	
	TWI_start(EEPROM_ADDRESS,0); // Send Start Bit On I2c
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	80 ea       	ldi	r24, 0xA0	; 160
  aa:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_start>
	TWI_data(address >> 8); // Write Byte Contain Device Address Shifted By 8 On I2c
  ae:	81 2f       	mov	r24, r17
  b0:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <TWI_data>
	TWI_data(address); // Write Byte Contain Device Address On I2c
  b4:	8d 2f       	mov	r24, r29
  b6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <TWI_data>
	TWI_data(data); // Write Byte Contain Data On I2c
  ba:	8c 2f       	mov	r24, r28
  bc:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <TWI_data>
	TWI_stop(); // Send Stop Bit On I2c
  c0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <TWI_stop>
}
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	1f 91       	pop	r17
  ca:	08 95       	ret

000000cc <eeprom_read_byte>:


u8 eeprom_read_byte(u16 address)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	c8 2f       	mov	r28, r24
  d2:	d9 2f       	mov	r29, r25
	u8 data = 0;
	TWI_start(EEPROM_ADDRESS,0);
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	80 ea       	ldi	r24, 0xA0	; 160
  d8:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_start>
	TWI_data(address >> 8);
  dc:	8d 2f       	mov	r24, r29
  de:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <TWI_data>
	TWI_data(address); 
  e2:	8c 2f       	mov	r24, r28
  e4:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <TWI_data>
	TWI_repeated_start();
  e8:	0e 94 a4 02 	call	0x548	; 0x548 <TWI_repeated_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	8f e0       	ldi	r24, 0x0F	; 15
  ee:	97 e2       	ldi	r25, 0x27	; 39
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <eeprom_read_byte+0x24>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <eeprom_read_byte+0x2a>
  f6:	00 00       	nop
	_delay_ms(5);
	data = TWI_readNACK();
  f8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <TWI_readNACK>
  fc:	c8 2f       	mov	r28, r24
	TWI_stop();// Send Stop Bit On I2c
  fe:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <TWI_stop>
	return data;//Return The Data That Been Read
}
 102:	8c 2f       	mov	r24, r28
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <eeprom_write_string>:


void eeprom_write_string(u16 Copy_u8Address,u8 * str)
{
 10a:	ef 92       	push	r14
 10c:	ff 92       	push	r15
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	7b 01       	movw	r14, r22
	u8 i = 0;
 116:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != '\0') // Loop Until The End Of The String
 118:	11 c0       	rjmp	.+34     	; 0x13c <eeprom_write_string+0x32>
 11a:	2f e7       	ldi	r18, 0x7F	; 127
 11c:	38 e3       	ldi	r19, 0x38	; 56
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	21 50       	subi	r18, 0x01	; 1
 122:	30 40       	sbci	r19, 0x00	; 0
 124:	40 40       	sbci	r20, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <eeprom_write_string+0x16>
 128:	00 c0       	rjmp	.+0      	; 0x12a <eeprom_write_string+0x20>
 12a:	00 00       	nop
	{
		_delay_ms(50);
		eeprom_write_byte(Copy_u8Address++,str[i++]);//Call This Function To Write Char In EEPROM And Increment The Address And Index
 12c:	cf 5f       	subi	r28, 0xFF	; 255
 12e:	8c 01       	movw	r16, r24
 130:	0f 5f       	subi	r16, 0xFF	; 255
 132:	1f 4f       	sbci	r17, 0xFF	; 255
 134:	60 81       	ld	r22, Z
 136:	0e 94 4d 00 	call	0x9a	; 0x9a <eeprom_write_byte>
 13a:	c8 01       	movw	r24, r16


void eeprom_write_string(u16 Copy_u8Address,u8 * str)
{
	u8 i = 0;
	while(str[i] != '\0') // Loop Until The End Of The String
 13c:	f7 01       	movw	r30, r14
 13e:	ec 0f       	add	r30, r28
 140:	f1 1d       	adc	r31, r1
 142:	20 81       	ld	r18, Z
 144:	21 11       	cpse	r18, r1
 146:	e9 cf       	rjmp	.-46     	; 0x11a <eeprom_write_string+0x10>
 148:	2f e7       	ldi	r18, 0x7F	; 127
 14a:	38 e3       	ldi	r19, 0x38	; 56
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	30 40       	sbci	r19, 0x00	; 0
 152:	40 40       	sbci	r20, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <eeprom_write_string+0x44>
 156:	00 c0       	rjmp	.+0      	; 0x158 <eeprom_write_string+0x4e>
 158:	00 00       	nop
	{
		_delay_ms(50);
		eeprom_write_byte(Copy_u8Address++,str[i++]);//Call This Function To Write Char In EEPROM And Increment The Address And Index
	}
	_delay_ms(50);
	eeprom_write_byte(Copy_u8Address++,'\0');//Call This Function To Write Null After The Last Char Of The String To Know Where The String Is End
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	0e 94 4d 00 	call	0x9a	; 0x9a <eeprom_write_byte>
}
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	ff 90       	pop	r15
 168:	ef 90       	pop	r14
 16a:	08 95       	ret

0000016c <eeprom_read_string>:


void eeprom_read_string(u16 Copy_u8Address, u8* str)
{
 16c:	cf 92       	push	r12
 16e:	df 92       	push	r13
 170:	ef 92       	push	r14
 172:	ff 92       	push	r15
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	6b 01       	movw	r12, r22
	u8 len = 0;
 17c:	c0 e0       	ldi	r28, 0x00	; 0
 17e:	2f e7       	ldi	r18, 0x7F	; 127
 180:	38 e3       	ldi	r19, 0x38	; 56
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	21 50       	subi	r18, 0x01	; 1
 186:	30 40       	sbci	r19, 0x00	; 0
 188:	40 40       	sbci	r20, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <eeprom_read_string+0x18>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <eeprom_read_string+0x22>
 18e:	00 00       	nop
	do
	{
		_delay_ms(50);
		str[len] = eeprom_read_byte(Copy_u8Address++);//Call This Function To Read Char From EEPROM And Increment The Address And Index
 190:	76 01       	movw	r14, r12
 192:	ec 0e       	add	r14, r28
 194:	f1 1c       	adc	r15, r1
 196:	8c 01       	movw	r16, r24
 198:	0f 5f       	subi	r16, 0xFF	; 255
 19a:	1f 4f       	sbci	r17, 0xFF	; 255
 19c:	0e 94 66 00 	call	0xcc	; 0xcc <eeprom_read_byte>
 1a0:	28 2f       	mov	r18, r24
 1a2:	f7 01       	movw	r30, r14
 1a4:	80 83       	st	Z, r24
	}
	while(str[len++] != '\0');// Loop Until The End Of The String
 1a6:	cf 5f       	subi	r28, 0xFF	; 255
{
	u8 len = 0;
	do
	{
		_delay_ms(50);
		str[len] = eeprom_read_byte(Copy_u8Address++);//Call This Function To Read Char From EEPROM And Increment The Address And Index
 1a8:	c8 01       	movw	r24, r16
	}
	while(str[len++] != '\0');// Loop Until The End Of The String
 1aa:	21 11       	cpse	r18, r1
 1ac:	e8 cf       	rjmp	.-48     	; 0x17e <eeprom_read_string+0x12>
}
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	ff 90       	pop	r15
 1b6:	ef 90       	pop	r14
 1b8:	df 90       	pop	r13
 1ba:	cf 90       	pop	r12
 1bc:	08 95       	ret

000001be <LCD_vidSendCommand>:
	else if (arg_u8_row == 1)
	LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0x40 + arg_u8_col);
	else if (arg_u8_row == 2)
	LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0x14 + arg_u8_col);
	else if (arg_u8_row == 3)
	LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0x54 + arg_u8_col);
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	d8 2f       	mov	r29, r24
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_enu_WriteChannel>
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	87 e0       	ldi	r24, 0x07	; 7
 1d2:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_enu_WriteChannel>
 1d6:	1d 2f       	mov	r17, r29
 1d8:	12 95       	swap	r17
 1da:	1f 70       	andi	r17, 0x0F	; 15
 1dc:	c0 e0       	ldi	r28, 0x00	; 0
 1de:	11 c0       	rjmp	.+34     	; 0x202 <LCD_vidSendCommand+0x44>
 1e0:	ec 2f       	mov	r30, r28
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	61 2f       	mov	r22, r17
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	0c 2e       	mov	r0, r28
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <LCD_vidSendCommand+0x32>
 1ec:	75 95       	asr	r23
 1ee:	67 95       	ror	r22
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <LCD_vidSendCommand+0x2e>
 1f4:	61 70       	andi	r22, 0x01	; 1
 1f6:	e0 5a       	subi	r30, 0xA0	; 160
 1f8:	ff 4f       	sbci	r31, 0xFF	; 255
 1fa:	80 81       	ld	r24, Z
 1fc:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_enu_WriteChannel>
 200:	cf 5f       	subi	r28, 0xFF	; 255
 202:	c4 30       	cpi	r28, 0x04	; 4
 204:	68 f3       	brcs	.-38     	; 0x1e0 <LCD_vidSendCommand+0x22>
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_enu_WriteChannel>
 20e:	8f ec       	ldi	r24, 0xCF	; 207
 210:	97 e0       	ldi	r25, 0x07	; 7
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <LCD_vidSendCommand+0x54>
 216:	00 c0       	rjmp	.+0      	; 0x218 <LCD_vidSendCommand+0x5a>
 218:	00 00       	nop
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	82 e0       	ldi	r24, 0x02	; 2
 21e:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_enu_WriteChannel>
 222:	8f e8       	ldi	r24, 0x8F	; 143
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <LCD_vidSendCommand+0x68>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <LCD_vidSendCommand+0x6e>
 22c:	00 00       	nop
 22e:	df 70       	andi	r29, 0x0F	; 15
 230:	c0 e0       	ldi	r28, 0x00	; 0
 232:	11 c0       	rjmp	.+34     	; 0x256 <LCD_vidSendCommand+0x98>
 234:	ec 2f       	mov	r30, r28
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	6d 2f       	mov	r22, r29
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	0c 2e       	mov	r0, r28
 23e:	02 c0       	rjmp	.+4      	; 0x244 <LCD_vidSendCommand+0x86>
 240:	75 95       	asr	r23
 242:	67 95       	ror	r22
 244:	0a 94       	dec	r0
 246:	e2 f7       	brpl	.-8      	; 0x240 <LCD_vidSendCommand+0x82>
 248:	61 70       	andi	r22, 0x01	; 1
 24a:	e0 5a       	subi	r30, 0xA0	; 160
 24c:	ff 4f       	sbci	r31, 0xFF	; 255
 24e:	80 81       	ld	r24, Z
 250:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_enu_WriteChannel>
 254:	cf 5f       	subi	r28, 0xFF	; 255
 256:	c4 30       	cpi	r28, 0x04	; 4
 258:	68 f3       	brcs	.-38     	; 0x234 <LCD_vidSendCommand+0x76>
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_enu_WriteChannel>
 262:	8f ec       	ldi	r24, 0xCF	; 207
 264:	97 e0       	ldi	r25, 0x07	; 7
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <LCD_vidSendCommand+0xa8>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <LCD_vidSendCommand+0xae>
 26c:	00 00       	nop
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_enu_WriteChannel>
 276:	8f e9       	ldi	r24, 0x9F	; 159
 278:	9f e0       	ldi	r25, 0x0F	; 15
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <LCD_vidSendCommand+0xbc>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <LCD_vidSendCommand+0xc2>
 280:	00 00       	nop
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	08 95       	ret

0000028a <LCD_vidInit>:
 28a:	2f e7       	ldi	r18, 0x7F	; 127
 28c:	88 e3       	ldi	r24, 0x38	; 56
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	21 50       	subi	r18, 0x01	; 1
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <LCD_vidInit+0x6>
 298:	00 c0       	rjmp	.+0      	; 0x29a <LCD_vidInit+0x10>
 29a:	00 00       	nop
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_vidSendCommand>
 2a2:	88 e2       	ldi	r24, 0x28	; 40
 2a4:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_vidSendCommand>
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_vidSendCommand>
 2ae:	8f e3       	ldi	r24, 0x3F	; 63
 2b0:	9f e1       	ldi	r25, 0x1F	; 31
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCD_vidInit+0x28>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LCD_vidInit+0x2e>
 2b8:	00 00       	nop
 2ba:	86 e0       	ldi	r24, 0x06	; 6
 2bc:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_vidSendCommand>
 2c0:	8f ec       	ldi	r24, 0xCF	; 207
 2c2:	97 e0       	ldi	r25, 0x07	; 7
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_vidInit+0x3a>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_vidInit+0x40>
 2ca:	00 00       	nop
 2cc:	8e e0       	ldi	r24, 0x0E	; 14
 2ce:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_vidSendCommand>
 2d2:	8f ec       	ldi	r24, 0xCF	; 207
 2d4:	97 e0       	ldi	r25, 0x07	; 7
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <LCD_vidInit+0x4c>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <LCD_vidInit+0x52>
 2dc:	00 00       	nop
 2de:	08 95       	ret

000002e0 <LCD_vidDisplayCharacter>:
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	d8 2f       	mov	r29, r24
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	83 e0       	ldi	r24, 0x03	; 3
 2ec:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_enu_WriteChannel>
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	87 e0       	ldi	r24, 0x07	; 7
 2f4:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_enu_WriteChannel>
 2f8:	1d 2f       	mov	r17, r29
 2fa:	12 95       	swap	r17
 2fc:	1f 70       	andi	r17, 0x0F	; 15
 2fe:	c0 e0       	ldi	r28, 0x00	; 0
 300:	11 c0       	rjmp	.+34     	; 0x324 <LCD_vidDisplayCharacter+0x44>
 302:	ec 2f       	mov	r30, r28
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	61 2f       	mov	r22, r17
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	0c 2e       	mov	r0, r28
 30c:	02 c0       	rjmp	.+4      	; 0x312 <LCD_vidDisplayCharacter+0x32>
 30e:	75 95       	asr	r23
 310:	67 95       	ror	r22
 312:	0a 94       	dec	r0
 314:	e2 f7       	brpl	.-8      	; 0x30e <LCD_vidDisplayCharacter+0x2e>
 316:	61 70       	andi	r22, 0x01	; 1
 318:	e0 5a       	subi	r30, 0xA0	; 160
 31a:	ff 4f       	sbci	r31, 0xFF	; 255
 31c:	80 81       	ld	r24, Z
 31e:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_enu_WriteChannel>
 322:	cf 5f       	subi	r28, 0xFF	; 255
 324:	c4 30       	cpi	r28, 0x04	; 4
 326:	68 f3       	brcs	.-38     	; 0x302 <LCD_vidDisplayCharacter+0x22>
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_enu_WriteChannel>
 330:	8f ec       	ldi	r24, 0xCF	; 207
 332:	97 e0       	ldi	r25, 0x07	; 7
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <LCD_vidDisplayCharacter+0x54>
 338:	00 c0       	rjmp	.+0      	; 0x33a <LCD_vidDisplayCharacter+0x5a>
 33a:	00 00       	nop
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_enu_WriteChannel>
 344:	8f e8       	ldi	r24, 0x8F	; 143
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <LCD_vidDisplayCharacter+0x68>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <LCD_vidDisplayCharacter+0x6e>
 34e:	00 00       	nop
 350:	df 70       	andi	r29, 0x0F	; 15
 352:	c0 e0       	ldi	r28, 0x00	; 0
 354:	11 c0       	rjmp	.+34     	; 0x378 <LCD_vidDisplayCharacter+0x98>
 356:	ec 2f       	mov	r30, r28
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	6d 2f       	mov	r22, r29
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	0c 2e       	mov	r0, r28
 360:	02 c0       	rjmp	.+4      	; 0x366 <LCD_vidDisplayCharacter+0x86>
 362:	75 95       	asr	r23
 364:	67 95       	ror	r22
 366:	0a 94       	dec	r0
 368:	e2 f7       	brpl	.-8      	; 0x362 <LCD_vidDisplayCharacter+0x82>
 36a:	61 70       	andi	r22, 0x01	; 1
 36c:	e0 5a       	subi	r30, 0xA0	; 160
 36e:	ff 4f       	sbci	r31, 0xFF	; 255
 370:	80 81       	ld	r24, Z
 372:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_enu_WriteChannel>
 376:	cf 5f       	subi	r28, 0xFF	; 255
 378:	c4 30       	cpi	r28, 0x04	; 4
 37a:	68 f3       	brcs	.-38     	; 0x356 <LCD_vidDisplayCharacter+0x76>
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_enu_WriteChannel>
 384:	8f ec       	ldi	r24, 0xCF	; 207
 386:	97 e0       	ldi	r25, 0x07	; 7
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <LCD_vidDisplayCharacter+0xa8>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <LCD_vidDisplayCharacter+0xae>
 38e:	00 00       	nop
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_enu_WriteChannel>
 398:	8f e9       	ldi	r24, 0x9F	; 159
 39a:	9f e0       	ldi	r25, 0x0F	; 15
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <LCD_vidDisplayCharacter+0xbc>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <LCD_vidDisplayCharacter+0xc2>
 3a2:	00 00       	nop
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	08 95       	ret

000003ac <LCD_vidDisplayString>:
}
void LCD_vidDisplayString(u8 *arg_u8_string)
{
 3ac:	0f 93       	push	r16
 3ae:	1f 93       	push	r17
 3b0:	cf 93       	push	r28
 3b2:	8c 01       	movw	r16, r24
	u8 loc_u8_itartor = FALSE;
 3b4:	c0 e0       	ldi	r28, 0x00	; 0
	while(arg_u8_string[loc_u8_itartor] != STR_NULL)
 3b6:	03 c0       	rjmp	.+6      	; 0x3be <LCD_vidDisplayString+0x12>
	{
		LCD_vidDisplayCharacter(arg_u8_string[loc_u8_itartor++]);
 3b8:	cf 5f       	subi	r28, 0xFF	; 255
 3ba:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_vidDisplayCharacter>
	LCD_vidSendCommand(LCD_SET_DDRAM_ADDR_CMD + 0x54 + arg_u8_col);
}
void LCD_vidDisplayString(u8 *arg_u8_string)
{
	u8 loc_u8_itartor = FALSE;
	while(arg_u8_string[loc_u8_itartor] != STR_NULL)
 3be:	f8 01       	movw	r30, r16
 3c0:	ec 0f       	add	r30, r28
 3c2:	f1 1d       	adc	r31, r1
 3c4:	80 81       	ld	r24, Z
 3c6:	81 11       	cpse	r24, r1
 3c8:	f7 cf       	rjmp	.-18     	; 0x3b8 <LCD_vidDisplayString+0xc>
	{
		LCD_vidDisplayCharacter(arg_u8_string[loc_u8_itartor++]);
	}
}
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	08 95       	ret

000003d2 <main>:
u8 charTest[] = "HELLO From MCU";
u8 Test[50] = "";
int main(void)
{
	u8 state = 0;
    PORT_voidInit();
 3d2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <PORT_voidInit>
	LCD_vidInit();
 3d6:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_vidInit>
	eeprom_init();
 3da:	0e 94 49 00 	call	0x92	; 0x92 <eeprom_init>

u8 charTest[] = "HELLO From MCU";
u8 Test[50] = "";
int main(void)
{
	u8 state = 0;
 3de:	80 e0       	ldi	r24, 0x00	; 0
    PORT_voidInit();
	LCD_vidInit();
	eeprom_init();
    while (1) 
    {
		if(state == 0)
 3e0:	81 11       	cpse	r24, r1
 3e2:	08 c0       	rjmp	.+16     	; 0x3f4 <main+0x22>
		{
			eeprom_write_string(0x0000,charTest);
 3e4:	64 e6       	ldi	r22, 0x64	; 100
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write_string>
			state = 1;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	1a c0       	rjmp	.+52     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		}
		else if (state == 1)
 3f4:	81 30       	cpi	r24, 0x01	; 1
 3f6:	89 f4       	brne	.+34     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		{
			eeprom_read_string(0x0000,Test);
 3f8:	64 e7       	ldi	r22, 0x74	; 116
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 b6 00 	call	0x16c	; 0x16c <eeprom_read_string>
 404:	2f ef       	ldi	r18, 0xFF	; 255
 406:	80 e7       	ldi	r24, 0x70	; 112
 408:	92 e0       	ldi	r25, 0x02	; 2
 40a:	21 50       	subi	r18, 0x01	; 1
 40c:	80 40       	sbci	r24, 0x00	; 0
 40e:	90 40       	sbci	r25, 0x00	; 0
 410:	e1 f7       	brne	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 414:	00 00       	nop
			_delay_ms(100);
			state = 2;
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	07 c0       	rjmp	.+14     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		}
		else if (state == 2)
 41a:	82 30       	cpi	r24, 0x02	; 2
 41c:	29 f4       	brne	.+10     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		{
			LCD_vidDisplayString(Test);
 41e:	84 e7       	ldi	r24, 0x74	; 116
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_vidDisplayString>
			state =3;
 426:	83 e0       	ldi	r24, 0x03	; 3
 428:	ef e1       	ldi	r30, 0x1F	; 31
 42a:	fe e4       	ldi	r31, 0x4E	; 78
 42c:	31 97       	sbiw	r30, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 432:	00 00       	nop
 434:	d5 cf       	rjmp	.-86     	; 0x3e0 <main+0xe>

00000436 <DIO_enu_WriteChannel>:
#include "../includes/Dio_cfg.h"

DIO_enu_return_status_t DIO_enu_WriteChannel(DIO_enu_PinId_t arg_enu_pinId,DIO_enu_PinLevel_t arg_enu_pinLevel)
{
	DIO_enu_return_status_t loc_enu_return_status = STATUS_DIO_OKAY;
	u8 loc_u8_pinNumber  = arg_enu_pinId % REG_SIZE ;
 436:	28 2f       	mov	r18, r24
 438:	27 70       	andi	r18, 0x07	; 7
	u8 loc_u8_portNumber = arg_enu_pinId / REG_SIZE ;
 43a:	98 2f       	mov	r25, r24
 43c:	96 95       	lsr	r25
 43e:	96 95       	lsr	r25
 440:	96 95       	lsr	r25
	
	if( arg_enu_pinId >= DIO_PINID_ERROR)
 442:	80 32       	cpi	r24, 0x20	; 32
 444:	08 f0       	brcs	.+2      	; 0x448 <DIO_enu_WriteChannel+0x12>
 446:	78 c0       	rjmp	.+240    	; 0x538 <DIO_enu_WriteChannel+0x102>
	{
		loc_enu_return_status = STATUS_DIO_PIN_NUMBER_ERROR;
	}
	else if( arg_enu_pinLevel >= DIO_PIN_LEVEL_ERROR)
 448:	62 30       	cpi	r22, 0x02	; 2
 44a:	08 f0       	brcs	.+2      	; 0x44e <DIO_enu_WriteChannel+0x18>
 44c:	77 c0       	rjmp	.+238    	; 0x53c <DIO_enu_WriteChannel+0x106>
	{
		loc_enu_return_status = STATUS_DIO_PIN_LEVEL_CHOICE_ERROR;
	}
	else
	{
		switch(loc_u8_portNumber)
 44e:	91 30       	cpi	r25, 0x01	; 1
 450:	11 f1       	breq	.+68     	; 0x496 <DIO_enu_WriteChannel+0x60>
 452:	30 f0       	brcs	.+12     	; 0x460 <DIO_enu_WriteChannel+0x2a>
 454:	92 30       	cpi	r25, 0x02	; 2
 456:	d1 f1       	breq	.+116    	; 0x4cc <DIO_enu_WriteChannel+0x96>
 458:	93 30       	cpi	r25, 0x03	; 3
 45a:	09 f4       	brne	.+2      	; 0x45e <DIO_enu_WriteChannel+0x28>
 45c:	52 c0       	rjmp	.+164    	; 0x502 <DIO_enu_WriteChannel+0xcc>
 45e:	70 c0       	rjmp	.+224    	; 0x540 <DIO_enu_WriteChannel+0x10a>
		{
			case DIO_PORT_NUMBER_A :
			{
				(arg_enu_pinLevel == DIO_PIN_LEVEL_LOW)?CLR_BIT(DIO_PORTA,loc_u8_pinNumber):SET_BIT(DIO_PORTA,loc_u8_pinNumber);
 460:	61 11       	cpse	r22, r1
 462:	0d c0       	rjmp	.+26     	; 0x47e <DIO_enu_WriteChannel+0x48>
 464:	3b b3       	in	r19, 0x1b	; 27
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	02 c0       	rjmp	.+4      	; 0x470 <DIO_enu_WriteChannel+0x3a>
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	2a 95       	dec	r18
 472:	e2 f7       	brpl	.-8      	; 0x46c <DIO_enu_WriteChannel+0x36>
 474:	80 95       	com	r24
 476:	83 23       	and	r24, r19
 478:	8b bb       	out	0x1b, r24	; 27
#include "../includes/Dio.h"
#include "../includes/Dio_cfg.h"

DIO_enu_return_status_t DIO_enu_WriteChannel(DIO_enu_PinId_t arg_enu_pinId,DIO_enu_PinLevel_t arg_enu_pinLevel)
{
	DIO_enu_return_status_t loc_enu_return_status = STATUS_DIO_OKAY;
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	08 95       	ret
	{
		switch(loc_u8_portNumber)
		{
			case DIO_PORT_NUMBER_A :
			{
				(arg_enu_pinLevel == DIO_PIN_LEVEL_LOW)?CLR_BIT(DIO_PORTA,loc_u8_pinNumber):SET_BIT(DIO_PORTA,loc_u8_pinNumber);
 47e:	3b b3       	in	r19, 0x1b	; 27
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_enu_WriteChannel+0x54>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	2a 95       	dec	r18
 48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_enu_WriteChannel+0x50>
 48e:	83 2b       	or	r24, r19
 490:	8b bb       	out	0x1b, r24	; 27
#include "../includes/Dio.h"
#include "../includes/Dio_cfg.h"

DIO_enu_return_status_t DIO_enu_WriteChannel(DIO_enu_PinId_t arg_enu_pinId,DIO_enu_PinLevel_t arg_enu_pinLevel)
{
	DIO_enu_return_status_t loc_enu_return_status = STATUS_DIO_OKAY;
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	08 95       	ret
				break;
			}
			
			case DIO_PORT_NUMBER_B :
			{
				(arg_enu_pinLevel == DIO_PIN_LEVEL_LOW)?CLR_BIT(DIO_PORTB,loc_u8_pinNumber):SET_BIT(DIO_PORTB,loc_u8_pinNumber);
 496:	61 11       	cpse	r22, r1
 498:	0d c0       	rjmp	.+26     	; 0x4b4 <DIO_enu_WriteChannel+0x7e>
 49a:	38 b3       	in	r19, 0x18	; 24
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <DIO_enu_WriteChannel+0x70>
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	2a 95       	dec	r18
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <DIO_enu_WriteChannel+0x6c>
 4aa:	80 95       	com	r24
 4ac:	83 23       	and	r24, r19
 4ae:	88 bb       	out	0x18, r24	; 24
#include "../includes/Dio.h"
#include "../includes/Dio_cfg.h"

DIO_enu_return_status_t DIO_enu_WriteChannel(DIO_enu_PinId_t arg_enu_pinId,DIO_enu_PinLevel_t arg_enu_pinLevel)
{
	DIO_enu_return_status_t loc_enu_return_status = STATUS_DIO_OKAY;
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	08 95       	ret
				break;
			}
			
			case DIO_PORT_NUMBER_B :
			{
				(arg_enu_pinLevel == DIO_PIN_LEVEL_LOW)?CLR_BIT(DIO_PORTB,loc_u8_pinNumber):SET_BIT(DIO_PORTB,loc_u8_pinNumber);
 4b4:	38 b3       	in	r19, 0x18	; 24
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_enu_WriteChannel+0x8a>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	2a 95       	dec	r18
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_enu_WriteChannel+0x86>
 4c4:	83 2b       	or	r24, r19
 4c6:	88 bb       	out	0x18, r24	; 24
#include "../includes/Dio.h"
#include "../includes/Dio_cfg.h"

DIO_enu_return_status_t DIO_enu_WriteChannel(DIO_enu_PinId_t arg_enu_pinId,DIO_enu_PinLevel_t arg_enu_pinLevel)
{
	DIO_enu_return_status_t loc_enu_return_status = STATUS_DIO_OKAY;
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	08 95       	ret
				break;
			}
			
			case DIO_PORT_NUMBER_C :
			{
				(arg_enu_pinLevel == DIO_PIN_LEVEL_LOW)?CLR_BIT(DIO_PORTC,loc_u8_pinNumber):SET_BIT(DIO_PORTC,loc_u8_pinNumber);
 4cc:	61 11       	cpse	r22, r1
 4ce:	0d c0       	rjmp	.+26     	; 0x4ea <DIO_enu_WriteChannel+0xb4>
 4d0:	35 b3       	in	r19, 0x15	; 21
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_enu_WriteChannel+0xa6>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	2a 95       	dec	r18
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_enu_WriteChannel+0xa2>
 4e0:	80 95       	com	r24
 4e2:	83 23       	and	r24, r19
 4e4:	85 bb       	out	0x15, r24	; 21
#include "../includes/Dio.h"
#include "../includes/Dio_cfg.h"

DIO_enu_return_status_t DIO_enu_WriteChannel(DIO_enu_PinId_t arg_enu_pinId,DIO_enu_PinLevel_t arg_enu_pinLevel)
{
	DIO_enu_return_status_t loc_enu_return_status = STATUS_DIO_OKAY;
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	08 95       	ret
				break;
			}
			
			case DIO_PORT_NUMBER_C :
			{
				(arg_enu_pinLevel == DIO_PIN_LEVEL_LOW)?CLR_BIT(DIO_PORTC,loc_u8_pinNumber):SET_BIT(DIO_PORTC,loc_u8_pinNumber);
 4ea:	35 b3       	in	r19, 0x15	; 21
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_enu_WriteChannel+0xc0>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	2a 95       	dec	r18
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_enu_WriteChannel+0xbc>
 4fa:	83 2b       	or	r24, r19
 4fc:	85 bb       	out	0x15, r24	; 21
#include "../includes/Dio.h"
#include "../includes/Dio_cfg.h"

DIO_enu_return_status_t DIO_enu_WriteChannel(DIO_enu_PinId_t arg_enu_pinId,DIO_enu_PinLevel_t arg_enu_pinLevel)
{
	DIO_enu_return_status_t loc_enu_return_status = STATUS_DIO_OKAY;
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	08 95       	ret
				break;
			}
			
			case DIO_PORT_NUMBER_D :
			{
				(arg_enu_pinLevel == DIO_PIN_LEVEL_LOW)?CLR_BIT(DIO_PORTD,loc_u8_pinNumber):SET_BIT(DIO_PORTD,loc_u8_pinNumber);
 502:	61 11       	cpse	r22, r1
 504:	0d c0       	rjmp	.+26     	; 0x520 <DIO_enu_WriteChannel+0xea>
 506:	32 b3       	in	r19, 0x12	; 18
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_enu_WriteChannel+0xdc>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	2a 95       	dec	r18
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_enu_WriteChannel+0xd8>
 516:	80 95       	com	r24
 518:	83 23       	and	r24, r19
 51a:	82 bb       	out	0x12, r24	; 18
#include "../includes/Dio.h"
#include "../includes/Dio_cfg.h"

DIO_enu_return_status_t DIO_enu_WriteChannel(DIO_enu_PinId_t arg_enu_pinId,DIO_enu_PinLevel_t arg_enu_pinLevel)
{
	DIO_enu_return_status_t loc_enu_return_status = STATUS_DIO_OKAY;
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	08 95       	ret
				break;
			}
			
			case DIO_PORT_NUMBER_D :
			{
				(arg_enu_pinLevel == DIO_PIN_LEVEL_LOW)?CLR_BIT(DIO_PORTD,loc_u8_pinNumber):SET_BIT(DIO_PORTD,loc_u8_pinNumber);
 520:	32 b3       	in	r19, 0x12	; 18
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_enu_WriteChannel+0xf6>
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	2a 95       	dec	r18
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_enu_WriteChannel+0xf2>
 530:	83 2b       	or	r24, r19
 532:	82 bb       	out	0x12, r24	; 18
#include "../includes/Dio.h"
#include "../includes/Dio_cfg.h"

DIO_enu_return_status_t DIO_enu_WriteChannel(DIO_enu_PinId_t arg_enu_pinId,DIO_enu_PinLevel_t arg_enu_pinLevel)
{
	DIO_enu_return_status_t loc_enu_return_status = STATUS_DIO_OKAY;
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	08 95       	ret
	u8 loc_u8_pinNumber  = arg_enu_pinId % REG_SIZE ;
	u8 loc_u8_portNumber = arg_enu_pinId / REG_SIZE ;
	
	if( arg_enu_pinId >= DIO_PINID_ERROR)
	{
		loc_enu_return_status = STATUS_DIO_PIN_NUMBER_ERROR;
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	08 95       	ret
	}
	else if( arg_enu_pinLevel >= DIO_PIN_LEVEL_ERROR)
	{
		loc_enu_return_status = STATUS_DIO_PIN_LEVEL_CHOICE_ERROR;
 53c:	82 e0       	ldi	r24, 0x02	; 2
 53e:	08 95       	ret
#include "../includes/Dio.h"
#include "../includes/Dio_cfg.h"

DIO_enu_return_status_t DIO_enu_WriteChannel(DIO_enu_PinId_t arg_enu_pinId,DIO_enu_PinLevel_t arg_enu_pinLevel)
{
	DIO_enu_return_status_t loc_enu_return_status = STATUS_DIO_OKAY;
 540:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	
	return loc_enu_return_status;
}
 542:	08 95       	ret

00000544 <TWI_MasterInit>:
u8 TWI_readACK(void)
{
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);
	while(!(TWCR&(1<<TWINT)));
	return TWDR;
}
 544:	10 b8       	out	0x00, r1	; 0
 546:	08 95       	ret

00000548 <TWI_repeated_start>:
 548:	84 ea       	ldi	r24, 0xA4	; 164
 54a:	86 bf       	out	0x36, r24	; 54
 54c:	06 b6       	in	r0, 0x36	; 54
 54e:	07 fe       	sbrs	r0, 7
 550:	fd cf       	rjmp	.-6      	; 0x54c <TWI_repeated_start+0x4>
 552:	81 ea       	ldi	r24, 0xA1	; 161
 554:	83 b9       	out	0x03, r24	; 3
 556:	84 e8       	ldi	r24, 0x84	; 132
 558:	86 bf       	out	0x36, r24	; 54
 55a:	08 95       	ret

0000055c <TWI_status>:
 55c:	81 b1       	in	r24, 0x01	; 1
 55e:	88 7f       	andi	r24, 0xF8	; 248
 560:	08 95       	ret

00000562 <TWI_start>:
 562:	cf 93       	push	r28
 564:	61 11       	cpse	r22, r1
 566:	03 c0       	rjmp	.+6      	; 0x56e <TWI_start+0xc>
 568:	c8 2f       	mov	r28, r24
 56a:	ce 7f       	andi	r28, 0xFE	; 254
 56c:	02 c0       	rjmp	.+4      	; 0x572 <TWI_start+0x10>
 56e:	c8 2f       	mov	r28, r24
 570:	c1 60       	ori	r28, 0x01	; 1
 572:	84 ea       	ldi	r24, 0xA4	; 164
 574:	86 bf       	out	0x36, r24	; 54
 576:	06 b6       	in	r0, 0x36	; 54
 578:	07 fe       	sbrs	r0, 7
 57a:	fd cf       	rjmp	.-6      	; 0x576 <TWI_start+0x14>
 57c:	0e 94 ae 02 	call	0x55c	; 0x55c <TWI_status>
 580:	88 30       	cpi	r24, 0x08	; 8
 582:	81 f4       	brne	.+32     	; 0x5a4 <TWI_start+0x42>
 584:	c3 b9       	out	0x03, r28	; 3
 586:	84 e8       	ldi	r24, 0x84	; 132
 588:	86 bf       	out	0x36, r24	; 54
 58a:	06 b6       	in	r0, 0x36	; 54
 58c:	07 fe       	sbrs	r0, 7
 58e:	fd cf       	rjmp	.-6      	; 0x58a <TWI_start+0x28>
 590:	0e 94 ae 02 	call	0x55c	; 0x55c <TWI_status>
 594:	88 31       	cpi	r24, 0x18	; 24
 596:	41 f0       	breq	.+16     	; 0x5a8 <TWI_start+0x46>
 598:	0e 94 ae 02 	call	0x55c	; 0x55c <TWI_status>
 59c:	80 32       	cpi	r24, 0x20	; 32
 59e:	31 f4       	brne	.+12     	; 0x5ac <TWI_start+0x4a>
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	05 c0       	rjmp	.+10     	; 0x5ae <TWI_start+0x4c>
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	03 c0       	rjmp	.+6      	; 0x5ae <TWI_start+0x4c>
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	01 c0       	rjmp	.+2      	; 0x5ae <TWI_start+0x4c>
 5ac:	82 e0       	ldi	r24, 0x02	; 2
 5ae:	cf 91       	pop	r28
 5b0:	08 95       	ret

000005b2 <TWI_stop>:
 5b2:	84 e9       	ldi	r24, 0x94	; 148
 5b4:	86 bf       	out	0x36, r24	; 54
 5b6:	06 b6       	in	r0, 0x36	; 54
 5b8:	04 fc       	sbrc	r0, 4
 5ba:	fd cf       	rjmp	.-6      	; 0x5b6 <TWI_stop+0x4>
 5bc:	0e 94 ae 02 	call	0x55c	; 0x55c <TWI_status>
 5c0:	08 95       	ret

000005c2 <TWI_data>:
 5c2:	83 b9       	out	0x03, r24	; 3
 5c4:	84 e8       	ldi	r24, 0x84	; 132
 5c6:	86 bf       	out	0x36, r24	; 54
 5c8:	06 b6       	in	r0, 0x36	; 54
 5ca:	07 fe       	sbrs	r0, 7
 5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <TWI_data+0x6>
 5ce:	0e 94 ae 02 	call	0x55c	; 0x55c <TWI_status>
 5d2:	08 95       	ret

000005d4 <TWI_readNACK>:
u8 TWI_readNACK(void)
{
	TWCR = (1<<TWEN) | (1<<TWINT);
 5d4:	84 e8       	ldi	r24, 0x84	; 132
 5d6:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));
 5d8:	06 b6       	in	r0, 0x36	; 54
 5da:	07 fe       	sbrs	r0, 7
 5dc:	fd cf       	rjmp	.-6      	; 0x5d8 <TWI_readNACK+0x4>
	return TWDR;
 5de:	83 b1       	in	r24, 0x03	; 3
 5e0:	08 95       	ret

000005e2 <PORT_voidInit>:
	#undef  PORT_PIN_MODE_OUTPUT_HIGH
	#define PORT_PIN_MODE_OUTPUT_HIGH         1
	
	// set direction 
	
	DDRA = CONC(PORTA_PIN7_MODE,PORTA_PIN6_MODE,PORTA_PIN5_MODE,PORTA_PIN4_MODE,PORTA_PIN3_MODE,PORTA_PIN2_MODE,PORTA_PIN1_MODE,PORTA_PIN0_MODE);
 5e2:	8f e7       	ldi	r24, 0x7F	; 127
 5e4:	8a bb       	out	0x1a, r24	; 26
	DDRB = CONC(PORTB_PIN7_MODE,PORTB_PIN6_MODE,PORTB_PIN5_MODE,PORTB_PIN4_MODE,PORTB_PIN3_MODE,PORTB_PIN2_MODE,PORTB_PIN1_MODE,PORTB_PIN0_MODE);
 5e6:	87 e1       	ldi	r24, 0x17	; 23
 5e8:	87 bb       	out	0x17, r24	; 23
	DDRC = CONC(PORTC_PIN7_MODE,PORTC_PIN6_MODE,PORTC_PIN5_MODE,PORTC_PIN4_MODE,PORTC_PIN3_MODE,PORTC_PIN2_MODE,PORTC_PIN1_MODE,PORTC_PIN0_MODE);
 5ea:	8c e7       	ldi	r24, 0x7C	; 124
 5ec:	84 bb       	out	0x14, r24	; 20
	DDRD = CONC(PORTD_PIN7_MODE,PORTD_PIN6_MODE,PORTD_PIN5_MODE,PORTD_PIN4_MODE,PORTD_PIN3_MODE,PORTD_PIN2_MODE,PORTD_PIN1_MODE,PORTD_PIN0_MODE);
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	81 bb       	out	0x11, r24	; 17
	#undef  PORT_PIN_MODE_OUTPUT_HIGH
	#define PORT_PIN_MODE_OUTPUT_HIGH         1
	
	// set mode
	
	PORTA = CONC(PORTA_PIN7_MODE,PORTA_PIN6_MODE,PORTA_PIN5_MODE,PORTA_PIN4_MODE,PORTA_PIN3_MODE,PORTA_PIN2_MODE,PORTA_PIN1_MODE,PORTA_PIN0_MODE);
 5f2:	1b ba       	out	0x1b, r1	; 27
	PORTB = CONC(PORTB_PIN7_MODE,PORTB_PIN6_MODE,PORTB_PIN5_MODE,PORTB_PIN4_MODE,PORTB_PIN3_MODE,PORTB_PIN2_MODE,PORTB_PIN1_MODE,PORTB_PIN0_MODE);
 5f4:	18 ba       	out	0x18, r1	; 24
	PORTC = CONC(PORTC_PIN7_MODE,PORTC_PIN6_MODE,PORTC_PIN5_MODE,PORTC_PIN4_MODE,PORTC_PIN3_MODE,PORTC_PIN2_MODE,PORTC_PIN1_MODE,PORTC_PIN0_MODE);
 5f6:	8c e3       	ldi	r24, 0x3C	; 60
 5f8:	85 bb       	out	0x15, r24	; 21
	PORTD = CONC(PORTD_PIN7_MODE,PORTD_PIN6_MODE,PORTD_PIN5_MODE,PORTD_PIN4_MODE,PORTD_PIN3_MODE,PORTD_PIN2_MODE,PORTD_PIN1_MODE,PORTD_PIN0_MODE);
 5fa:	88 ee       	ldi	r24, 0xE8	; 232
 5fc:	82 bb       	out	0x12, r24	; 18
 5fe:	08 95       	ret

00000600 <_exit>:
 600:	f8 94       	cli

00000602 <__stop_program>:
 602:	ff cf       	rjmp	.-2      	; 0x602 <__stop_program>
