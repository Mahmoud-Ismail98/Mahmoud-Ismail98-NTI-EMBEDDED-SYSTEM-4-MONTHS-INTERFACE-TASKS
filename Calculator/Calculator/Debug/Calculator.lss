
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000077c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000077c  00000810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800074  00800074  00000824  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000854  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001835  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a33  00000000  00000000  000021f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f98  00000000  00000000  00002c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  00003bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e5  00000000  00000000  00003e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001be6  00000000  00000000  00004635  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000621b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a5 03 	call	0x74a	; 0x74a <main>
  8a:	0c 94 bc 03 	jmp	0x778	; 0x778 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Dio_enuWriteChannel>:

	u8 LOC_u8Port;

	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {
  92:	80 32       	cpi	r24, 0x20	; 32
  94:	08 f0       	brcs	.+2      	; 0x98 <Dio_enuWriteChannel+0x6>
  96:	c1 c0       	rjmp	.+386    	; 0x21a <Dio_enuWriteChannel+0x188>

		LOC_enuReturnStatus = Dio_enuChannelError;
	}

	else if (Copy_u8Level > DIO_u8NUMBER_OF_LEVELS) {
  98:	63 30       	cpi	r22, 0x03	; 3
  9a:	08 f0       	brcs	.+2      	; 0x9e <Dio_enuWriteChannel+0xc>
  9c:	c0 c0       	rjmp	.+384    	; 0x21e <Dio_enuWriteChannel+0x18c>
		LOC_enuReturnStatus = Dio_enuLevelError;
	}

	else {

		LOC_u8Port = Copy_u8ChannelId / DIO_u8REGISTER_SIZE;
  9e:	98 2f       	mov	r25, r24
  a0:	96 95       	lsr	r25
  a2:	96 95       	lsr	r25
  a4:	96 95       	lsr	r25
		LOC_u8Pin = Copy_u8ChannelId % DIO_u8REGISTER_SIZE;
  a6:	87 70       	andi	r24, 0x07	; 7

		switch (LOC_u8Port) {
  a8:	91 30       	cpi	r25, 0x01	; 1
  aa:	a1 f1       	breq	.+104    	; 0x114 <Dio_enuWriteChannel+0x82>
  ac:	38 f0       	brcs	.+14     	; 0xbc <Dio_enuWriteChannel+0x2a>
  ae:	92 30       	cpi	r25, 0x02	; 2
  b0:	09 f4       	brne	.+2      	; 0xb4 <Dio_enuWriteChannel+0x22>
  b2:	5c c0       	rjmp	.+184    	; 0x16c <Dio_enuWriteChannel+0xda>
  b4:	93 30       	cpi	r25, 0x03	; 3
  b6:	09 f4       	brne	.+2      	; 0xba <Dio_enuWriteChannel+0x28>
  b8:	85 c0       	rjmp	.+266    	; 0x1c4 <Dio_enuWriteChannel+0x132>
  ba:	b3 c0       	rjmp	.+358    	; 0x222 <Dio_enuWriteChannel+0x190>

		case DIO_u8PORTA:
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
  bc:	2a b3       	in	r18, 0x1a	; 26
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	08 2e       	mov	r0, r24
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <Dio_enuWriteChannel+0x36>
  c4:	35 95       	asr	r19
  c6:	27 95       	ror	r18
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <Dio_enuWriteChannel+0x32>
  cc:	20 ff       	sbrs	r18, 0
  ce:	ab c0       	rjmp	.+342    	; 0x226 <Dio_enuWriteChannel+0x194>
				switch (Copy_u8Level) {
  d0:	66 23       	and	r22, r22
  d2:	89 f0       	breq	.+34     	; 0xf6 <Dio_enuWriteChannel+0x64>
  d4:	61 30       	cpi	r22, 0x01	; 1
  d6:	09 f0       	breq	.+2      	; 0xda <Dio_enuWriteChannel+0x48>
  d8:	a8 c0       	rjmp	.+336    	; 0x22a <Dio_enuWriteChannel+0x198>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTA, LOC_u8Pin);
  da:	4b b3       	in	r20, 0x1b	; 27
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	b9 01       	movw	r22, r18
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <Dio_enuWriteChannel+0x56>
  e4:	66 0f       	add	r22, r22
  e6:	77 1f       	adc	r23, r23
  e8:	8a 95       	dec	r24
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <Dio_enuWriteChannel+0x52>
  ec:	cb 01       	movw	r24, r22
  ee:	84 2b       	or	r24, r20
  f0:	8b bb       	out	0x1b, r24	; 27
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
  f2:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTA, LOC_u8Pin);
					break;
  f4:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTA, LOC_u8Pin);
  f6:	4b b3       	in	r20, 0x1b	; 27
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	b9 01       	movw	r22, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <Dio_enuWriteChannel+0x72>
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	8a 95       	dec	r24
 106:	e2 f7       	brpl	.-8      	; 0x100 <Dio_enuWriteChannel+0x6e>
 108:	cb 01       	movw	r24, r22
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	8b bb       	out	0x1b, r24	; 27
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 110:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTA, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTA, LOC_u8Pin);
					break;
 112:	08 95       	ret
			}
			break;

		case DIO_u8PORTB:

			if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
 114:	27 b3       	in	r18, 0x17	; 23
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	08 2e       	mov	r0, r24
 11a:	02 c0       	rjmp	.+4      	; 0x120 <Dio_enuWriteChannel+0x8e>
 11c:	35 95       	asr	r19
 11e:	27 95       	ror	r18
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <Dio_enuWriteChannel+0x8a>
 124:	20 ff       	sbrs	r18, 0
 126:	83 c0       	rjmp	.+262    	; 0x22e <Dio_enuWriteChannel+0x19c>
				switch (Copy_u8Level) {
 128:	66 23       	and	r22, r22
 12a:	89 f0       	breq	.+34     	; 0x14e <Dio_enuWriteChannel+0xbc>
 12c:	61 30       	cpi	r22, 0x01	; 1
 12e:	09 f0       	breq	.+2      	; 0x132 <Dio_enuWriteChannel+0xa0>
 130:	80 c0       	rjmp	.+256    	; 0x232 <Dio_enuWriteChannel+0x1a0>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTB, LOC_u8Pin);
 132:	48 b3       	in	r20, 0x18	; 24
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	b9 01       	movw	r22, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <Dio_enuWriteChannel+0xae>
 13c:	66 0f       	add	r22, r22
 13e:	77 1f       	adc	r23, r23
 140:	8a 95       	dec	r24
 142:	e2 f7       	brpl	.-8      	; 0x13c <Dio_enuWriteChannel+0xaa>
 144:	cb 01       	movw	r24, r22
 146:	84 2b       	or	r24, r20
 148:	88 bb       	out	0x18, r24	; 24
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 14a:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTB, LOC_u8Pin);
					break;
 14c:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTB, LOC_u8Pin);
 14e:	48 b3       	in	r20, 0x18	; 24
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	b9 01       	movw	r22, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <Dio_enuWriteChannel+0xca>
 158:	66 0f       	add	r22, r22
 15a:	77 1f       	adc	r23, r23
 15c:	8a 95       	dec	r24
 15e:	e2 f7       	brpl	.-8      	; 0x158 <Dio_enuWriteChannel+0xc6>
 160:	cb 01       	movw	r24, r22
 162:	80 95       	com	r24
 164:	84 23       	and	r24, r20
 166:	88 bb       	out	0x18, r24	; 24
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 168:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTB, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTB, LOC_u8Pin);
					break;
 16a:	08 95       	ret

			break;

		case DIO_u8PORTC:

			if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
 16c:	24 b3       	in	r18, 0x14	; 20
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	08 2e       	mov	r0, r24
 172:	02 c0       	rjmp	.+4      	; 0x178 <Dio_enuWriteChannel+0xe6>
 174:	35 95       	asr	r19
 176:	27 95       	ror	r18
 178:	0a 94       	dec	r0
 17a:	e2 f7       	brpl	.-8      	; 0x174 <Dio_enuWriteChannel+0xe2>
 17c:	20 ff       	sbrs	r18, 0
 17e:	5b c0       	rjmp	.+182    	; 0x236 <Dio_enuWriteChannel+0x1a4>
				switch (Copy_u8Level) {
 180:	66 23       	and	r22, r22
 182:	89 f0       	breq	.+34     	; 0x1a6 <Dio_enuWriteChannel+0x114>
 184:	61 30       	cpi	r22, 0x01	; 1
 186:	09 f0       	breq	.+2      	; 0x18a <Dio_enuWriteChannel+0xf8>
 188:	58 c0       	rjmp	.+176    	; 0x23a <Dio_enuWriteChannel+0x1a8>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTC, LOC_u8Pin);
 18a:	45 b3       	in	r20, 0x15	; 21
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	b9 01       	movw	r22, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <Dio_enuWriteChannel+0x106>
 194:	66 0f       	add	r22, r22
 196:	77 1f       	adc	r23, r23
 198:	8a 95       	dec	r24
 19a:	e2 f7       	brpl	.-8      	; 0x194 <Dio_enuWriteChannel+0x102>
 19c:	cb 01       	movw	r24, r22
 19e:	84 2b       	or	r24, r20
 1a0:	85 bb       	out	0x15, r24	; 21
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 1a2:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTC, LOC_u8Pin);
					break;
 1a4:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTC, LOC_u8Pin);
 1a6:	45 b3       	in	r20, 0x15	; 21
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	b9 01       	movw	r22, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <Dio_enuWriteChannel+0x122>
 1b0:	66 0f       	add	r22, r22
 1b2:	77 1f       	adc	r23, r23
 1b4:	8a 95       	dec	r24
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <Dio_enuWriteChannel+0x11e>
 1b8:	cb 01       	movw	r24, r22
 1ba:	80 95       	com	r24
 1bc:	84 23       	and	r24, r20
 1be:	85 bb       	out	0x15, r24	; 21
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 1c0:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTC, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTC, LOC_u8Pin);
					break;
 1c2:	08 95       	ret
			}
			break;

		case DIO_u8PORTD:

			if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
 1c4:	21 b3       	in	r18, 0x11	; 17
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	08 2e       	mov	r0, r24
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <Dio_enuWriteChannel+0x13e>
 1cc:	35 95       	asr	r19
 1ce:	27 95       	ror	r18
 1d0:	0a 94       	dec	r0
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <Dio_enuWriteChannel+0x13a>
 1d4:	20 ff       	sbrs	r18, 0
 1d6:	33 c0       	rjmp	.+102    	; 0x23e <Dio_enuWriteChannel+0x1ac>
				switch (Copy_u8Level) {
 1d8:	66 23       	and	r22, r22
 1da:	81 f0       	breq	.+32     	; 0x1fc <Dio_enuWriteChannel+0x16a>
 1dc:	61 30       	cpi	r22, 0x01	; 1
 1de:	89 f5       	brne	.+98     	; 0x242 <Dio_enuWriteChannel+0x1b0>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTD, LOC_u8Pin);
 1e0:	42 b3       	in	r20, 0x12	; 18
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	b9 01       	movw	r22, r18
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <Dio_enuWriteChannel+0x15c>
 1ea:	66 0f       	add	r22, r22
 1ec:	77 1f       	adc	r23, r23
 1ee:	8a 95       	dec	r24
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <Dio_enuWriteChannel+0x158>
 1f2:	cb 01       	movw	r24, r22
 1f4:	84 2b       	or	r24, r20
 1f6:	82 bb       	out	0x12, r24	; 18
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 1f8:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTD, LOC_u8Pin);
					break;
 1fa:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTD, LOC_u8Pin);
 1fc:	42 b3       	in	r20, 0x12	; 18
 1fe:	21 e0       	ldi	r18, 0x01	; 1
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	b9 01       	movw	r22, r18
 204:	02 c0       	rjmp	.+4      	; 0x20a <Dio_enuWriteChannel+0x178>
 206:	66 0f       	add	r22, r22
 208:	77 1f       	adc	r23, r23
 20a:	8a 95       	dec	r24
 20c:	e2 f7       	brpl	.-8      	; 0x206 <Dio_enuWriteChannel+0x174>
 20e:	cb 01       	movw	r24, r22
 210:	80 95       	com	r24
 212:	84 23       	and	r24, r20
 214:	82 bb       	out	0x12, r24	; 18
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 216:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTD, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTD, LOC_u8Pin);
					break;
 218:	08 95       	ret

	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {

		LOC_enuReturnStatus = Dio_enuChannelError;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	08 95       	ret
	}

	else if (Copy_u8Level > DIO_u8NUMBER_OF_LEVELS) {

		LOC_enuReturnStatus = Dio_enuLevelError;
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	08 95       	ret
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	08 95       	ret
					CLR_BIT(PORTA, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	08 95       	ret
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	08 95       	ret
					CLR_BIT(PORTB, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	08 95       	ret
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	08 95       	ret
					CLR_BIT(PORTC, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	08 95       	ret
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	08 95       	ret
					CLR_BIT(PORTD, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	08 95       	ret
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 242:	80 e0       	ldi	r24, 0x00	; 0

		}

	}
	return LOC_enuReturnStatus;
}
 244:	08 95       	ret

00000246 <Dio_enuReadChannel>:

	u8 LOC_u8Port;

	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {
 246:	80 32       	cpi	r24, 0x20	; 32
 248:	08 f0       	brcs	.+2      	; 0x24c <Dio_enuReadChannel+0x6>
 24a:	72 c0       	rjmp	.+228    	; 0x330 <Dio_enuReadChannel+0xea>

		LOC_enuReturnStatus = Dio_enuChannelError;
	}

	else if (Add_pu8ChannelLevel == NULL) {
 24c:	61 15       	cp	r22, r1
 24e:	71 05       	cpc	r23, r1
 250:	09 f4       	brne	.+2      	; 0x254 <Dio_enuReadChannel+0xe>
 252:	70 c0       	rjmp	.+224    	; 0x334 <Dio_enuReadChannel+0xee>
		LOC_enuReturnStatus = Dio_enuNullPointerError;
	}

	else {

		LOC_u8Port = Copy_u8ChannelId / DIO_u8REGISTER_SIZE;
 254:	98 2f       	mov	r25, r24
 256:	96 95       	lsr	r25
 258:	96 95       	lsr	r25
 25a:	96 95       	lsr	r25
		LOC_u8Pin = Copy_u8ChannelId % DIO_u8REGISTER_SIZE;
 25c:	87 70       	andi	r24, 0x07	; 7

		switch (LOC_u8Port) {
 25e:	91 30       	cpi	r25, 0x01	; 1
 260:	f9 f0       	breq	.+62     	; 0x2a0 <Dio_enuReadChannel+0x5a>
 262:	30 f0       	brcs	.+12     	; 0x270 <Dio_enuReadChannel+0x2a>
 264:	92 30       	cpi	r25, 0x02	; 2
 266:	a1 f1       	breq	.+104    	; 0x2d0 <Dio_enuReadChannel+0x8a>
 268:	93 30       	cpi	r25, 0x03	; 3
 26a:	09 f4       	brne	.+2      	; 0x26e <Dio_enuReadChannel+0x28>
 26c:	49 c0       	rjmp	.+146    	; 0x300 <Dio_enuReadChannel+0xba>
 26e:	64 c0       	rjmp	.+200    	; 0x338 <Dio_enuReadChannel+0xf2>

		case DIO_u8PORTA:
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8INPUT) {
 270:	2a b3       	in	r18, 0x1a	; 26
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	08 2e       	mov	r0, r24
 276:	02 c0       	rjmp	.+4      	; 0x27c <Dio_enuReadChannel+0x36>
 278:	35 95       	asr	r19
 27a:	27 95       	ror	r18
 27c:	0a 94       	dec	r0
 27e:	e2 f7       	brpl	.-8      	; 0x278 <Dio_enuReadChannel+0x32>
 280:	20 fd       	sbrc	r18, 0
 282:	5c c0       	rjmp	.+184    	; 0x33c <Dio_enuReadChannel+0xf6>

				*Add_pu8ChannelLevel = GET_BIT(PINA, LOC_u8Pin);
 284:	29 b3       	in	r18, 0x19	; 25
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	a9 01       	movw	r20, r18
 28a:	02 c0       	rjmp	.+4      	; 0x290 <Dio_enuReadChannel+0x4a>
 28c:	55 95       	asr	r21
 28e:	47 95       	ror	r20
 290:	8a 95       	dec	r24
 292:	e2 f7       	brpl	.-8      	; 0x28c <Dio_enuReadChannel+0x46>
 294:	ca 01       	movw	r24, r20
 296:	81 70       	andi	r24, 0x01	; 1
 298:	fb 01       	movw	r30, r22
 29a:	80 83       	st	Z, r24
}

Dio_tenuErrorStatus Dio_enuReadChannel(u8 Copy_u8ChannelId,
		pu8 Add_pu8ChannelLevel) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	08 95       	ret
				LOC_enuReturnStatus = Dio_enuDirectionError;
			}
			break;

		case DIO_u8PORTB:
			if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8INPUT) {
 2a0:	27 b3       	in	r18, 0x17	; 23
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	08 2e       	mov	r0, r24
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <Dio_enuReadChannel+0x66>
 2a8:	35 95       	asr	r19
 2aa:	27 95       	ror	r18
 2ac:	0a 94       	dec	r0
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <Dio_enuReadChannel+0x62>
 2b0:	20 fd       	sbrc	r18, 0
 2b2:	46 c0       	rjmp	.+140    	; 0x340 <Dio_enuReadChannel+0xfa>

				*Add_pu8ChannelLevel = GET_BIT(PINB, LOC_u8Pin);
 2b4:	26 b3       	in	r18, 0x16	; 22
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	a9 01       	movw	r20, r18
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <Dio_enuReadChannel+0x7a>
 2bc:	55 95       	asr	r21
 2be:	47 95       	ror	r20
 2c0:	8a 95       	dec	r24
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <Dio_enuReadChannel+0x76>
 2c4:	ca 01       	movw	r24, r20
 2c6:	81 70       	andi	r24, 0x01	; 1
 2c8:	fb 01       	movw	r30, r22
 2ca:	80 83       	st	Z, r24
}

Dio_tenuErrorStatus Dio_enuReadChannel(u8 Copy_u8ChannelId,
		pu8 Add_pu8ChannelLevel) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	08 95       	ret
			}

			break;

		case DIO_u8PORTC:
			if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8INPUT) {
 2d0:	24 b3       	in	r18, 0x14	; 20
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	08 2e       	mov	r0, r24
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <Dio_enuReadChannel+0x96>
 2d8:	35 95       	asr	r19
 2da:	27 95       	ror	r18
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <Dio_enuReadChannel+0x92>
 2e0:	20 fd       	sbrc	r18, 0
 2e2:	30 c0       	rjmp	.+96     	; 0x344 <Dio_enuReadChannel+0xfe>

				*Add_pu8ChannelLevel = GET_BIT(PINC, LOC_u8Pin);
 2e4:	23 b3       	in	r18, 0x13	; 19
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	a9 01       	movw	r20, r18
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <Dio_enuReadChannel+0xaa>
 2ec:	55 95       	asr	r21
 2ee:	47 95       	ror	r20
 2f0:	8a 95       	dec	r24
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <Dio_enuReadChannel+0xa6>
 2f4:	ca 01       	movw	r24, r20
 2f6:	81 70       	andi	r24, 0x01	; 1
 2f8:	fb 01       	movw	r30, r22
 2fa:	80 83       	st	Z, r24
}

Dio_tenuErrorStatus Dio_enuReadChannel(u8 Copy_u8ChannelId,
		pu8 Add_pu8ChannelLevel) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	08 95       	ret

			break;

		case DIO_u8PORTD:

			if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8INPUT) {
 300:	21 b3       	in	r18, 0x11	; 17
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	08 2e       	mov	r0, r24
 306:	02 c0       	rjmp	.+4      	; 0x30c <Dio_enuReadChannel+0xc6>
 308:	35 95       	asr	r19
 30a:	27 95       	ror	r18
 30c:	0a 94       	dec	r0
 30e:	e2 f7       	brpl	.-8      	; 0x308 <Dio_enuReadChannel+0xc2>
 310:	20 fd       	sbrc	r18, 0
 312:	1a c0       	rjmp	.+52     	; 0x348 <Dio_enuReadChannel+0x102>

				*Add_pu8ChannelLevel = GET_BIT(PIND, LOC_u8Pin);
 314:	20 b3       	in	r18, 0x10	; 16
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	a9 01       	movw	r20, r18
 31a:	02 c0       	rjmp	.+4      	; 0x320 <Dio_enuReadChannel+0xda>
 31c:	55 95       	asr	r21
 31e:	47 95       	ror	r20
 320:	8a 95       	dec	r24
 322:	e2 f7       	brpl	.-8      	; 0x31c <Dio_enuReadChannel+0xd6>
 324:	ca 01       	movw	r24, r20
 326:	81 70       	andi	r24, 0x01	; 1
 328:	fb 01       	movw	r30, r22
 32a:	80 83       	st	Z, r24
}

Dio_tenuErrorStatus Dio_enuReadChannel(u8 Copy_u8ChannelId,
		pu8 Add_pu8ChannelLevel) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	08 95       	ret

	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {

		LOC_enuReturnStatus = Dio_enuChannelError;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	08 95       	ret
	}

	else if (Add_pu8ChannelLevel == NULL) {

		LOC_enuReturnStatus = Dio_enuNullPointerError;
 334:	84 e0       	ldi	r24, 0x04	; 4
 336:	08 95       	ret
}

Dio_tenuErrorStatus Dio_enuReadChannel(u8 Copy_u8ChannelId,
		pu8 Add_pu8ChannelLevel) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	08 95       	ret
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8INPUT) {

				*Add_pu8ChannelLevel = GET_BIT(PINA, LOC_u8Pin);

			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	08 95       	ret
			if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8INPUT) {

				*Add_pu8ChannelLevel = GET_BIT(PINB, LOC_u8Pin);

			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 340:	83 e0       	ldi	r24, 0x03	; 3
 342:	08 95       	ret
			if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8INPUT) {

				*Add_pu8ChannelLevel = GET_BIT(PINC, LOC_u8Pin);

			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 344:	83 e0       	ldi	r24, 0x03	; 3
 346:	08 95       	ret
			if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8INPUT) {

				*Add_pu8ChannelLevel = GET_BIT(PIND, LOC_u8Pin);

			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 348:	83 e0       	ldi	r24, 0x03	; 3
			break;

		}
	}
	return LOC_enuReturnStatus;
}
 34a:	08 95       	ret

0000034c <KeyPad_voidWritePattern>:
	KeyPad_Pattern_3,
	KeyPad_Pattern_4
};

static void KeyPad_voidWritePattern(u8 Copy_u8Pattern)
{
 34c:	cf 93       	push	r28
 34e:	c8 2f       	mov	r28, r24
	Dio_enuWriteChannel(KeyPad_ROW1,GET_BIT(Copy_u8Pattern,3));
 350:	83 fb       	bst	r24, 3
 352:	66 27       	eor	r22, r22
 354:	60 f9       	bld	r22, 0
 356:	85 e1       	ldi	r24, 0x15	; 21
 358:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(KeyPad_ROW2,GET_BIT(Copy_u8Pattern,2));
 35c:	c2 fb       	bst	r28, 2
 35e:	66 27       	eor	r22, r22
 360:	60 f9       	bld	r22, 0
 362:	84 e1       	ldi	r24, 0x14	; 20
 364:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(KeyPad_ROW3,GET_BIT(Copy_u8Pattern,1));
 368:	c1 fb       	bst	r28, 1
 36a:	66 27       	eor	r22, r22
 36c:	60 f9       	bld	r22, 0
 36e:	83 e1       	ldi	r24, 0x13	; 19
 370:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(KeyPad_ROW4,GET_BIT(Copy_u8Pattern,0));
 374:	6c 2f       	mov	r22, r28
 376:	61 70       	andi	r22, 0x01	; 1
 378:	82 e1       	ldi	r24, 0x12	; 18
 37a:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
}
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <KeyPad_voidReadInput>:


static u8 KeyPad_voidReadInput()
{
 382:	0f 93       	push	r16
 384:	1f 93       	push	r17
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	00 d0       	rcall	.+0      	; 0x38c <KeyPad_voidReadInput+0xa>
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8RetVal = 0;
	u8 Local_u8RetValTemp = 0;
 390:	19 82       	std	Y+1, r1	; 0x01
	u8 T;
	Dio_enuReadChannel(KeyPad_COL1,&Local_u8RetValTemp);
 392:	be 01       	movw	r22, r28
 394:	6f 5f       	subi	r22, 0xFF	; 255
 396:	7f 4f       	sbci	r23, 0xFF	; 255
 398:	8f e1       	ldi	r24, 0x1F	; 31
 39a:	0e 94 23 01 	call	0x246	; 0x246 <Dio_enuReadChannel>
	T = Local_u8RetValTemp;
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	8a 83       	std	Y+2, r24	; 0x02
	while(T == 0)
 3a2:	06 c0       	rjmp	.+12     	; 0x3b0 <KeyPad_voidReadInput+0x2e>
	{
		Dio_enuReadChannel(KeyPad_COL1,&T);
 3a4:	be 01       	movw	r22, r28
 3a6:	6e 5f       	subi	r22, 0xFE	; 254
 3a8:	7f 4f       	sbci	r23, 0xFF	; 255
 3aa:	8f e1       	ldi	r24, 0x1F	; 31
 3ac:	0e 94 23 01 	call	0x246	; 0x246 <Dio_enuReadChannel>
	u8 Local_u8RetVal = 0;
	u8 Local_u8RetValTemp = 0;
	u8 T;
	Dio_enuReadChannel(KeyPad_COL1,&Local_u8RetValTemp);
	T = Local_u8RetValTemp;
	while(T == 0)
 3b0:	8a 81       	ldd	r24, Y+2	; 0x02
 3b2:	88 23       	and	r24, r24
 3b4:	b9 f3       	breq	.-18     	; 0x3a4 <KeyPad_voidReadInput+0x22>
	{
		Dio_enuReadChannel(KeyPad_COL1,&T);
	}
	Local_u8RetVal |= Local_u8RetValTemp<<3;
 3b6:	09 81       	ldd	r16, Y+1	; 0x01
 3b8:	10 e0       	ldi	r17, 0x00	; 0
 3ba:	00 0f       	add	r16, r16
 3bc:	11 1f       	adc	r17, r17
 3be:	00 0f       	add	r16, r16
 3c0:	11 1f       	adc	r17, r17
 3c2:	00 0f       	add	r16, r16
 3c4:	11 1f       	adc	r17, r17


	Dio_enuReadChannel(KeyPad_COL2,&Local_u8RetValTemp);
 3c6:	be 01       	movw	r22, r28
 3c8:	6f 5f       	subi	r22, 0xFF	; 255
 3ca:	7f 4f       	sbci	r23, 0xFF	; 255
 3cc:	8e e1       	ldi	r24, 0x1E	; 30
 3ce:	0e 94 23 01 	call	0x246	; 0x246 <Dio_enuReadChannel>
	T = Local_u8RetValTemp;
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
 3d4:	8a 83       	std	Y+2, r24	; 0x02
	while(T == 0)
 3d6:	06 c0       	rjmp	.+12     	; 0x3e4 <KeyPad_voidReadInput+0x62>
	{
		Dio_enuReadChannel(KeyPad_COL2,&T);
 3d8:	be 01       	movw	r22, r28
 3da:	6e 5f       	subi	r22, 0xFE	; 254
 3dc:	7f 4f       	sbci	r23, 0xFF	; 255
 3de:	8e e1       	ldi	r24, 0x1E	; 30
 3e0:	0e 94 23 01 	call	0x246	; 0x246 <Dio_enuReadChannel>
	Local_u8RetVal |= Local_u8RetValTemp<<3;


	Dio_enuReadChannel(KeyPad_COL2,&Local_u8RetValTemp);
	T = Local_u8RetValTemp;
	while(T == 0)
 3e4:	9a 81       	ldd	r25, Y+2	; 0x02
 3e6:	99 23       	and	r25, r25
 3e8:	b9 f3       	breq	.-18     	; 0x3d8 <KeyPad_voidReadInput+0x56>
	{
		Dio_enuReadChannel(KeyPad_COL2,&T);
	}
	Local_u8RetVal |= Local_u8RetValTemp<<2;
 3ea:	89 81       	ldd	r24, Y+1	; 0x01
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	10 2f       	mov	r17, r16
 3f8:	18 2b       	or	r17, r24

	Dio_enuReadChannel(KeyPad_COL3,&Local_u8RetValTemp);
 3fa:	be 01       	movw	r22, r28
 3fc:	6f 5f       	subi	r22, 0xFF	; 255
 3fe:	7f 4f       	sbci	r23, 0xFF	; 255
 400:	8d e1       	ldi	r24, 0x1D	; 29
 402:	0e 94 23 01 	call	0x246	; 0x246 <Dio_enuReadChannel>
	T = Local_u8RetValTemp;
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	8a 83       	std	Y+2, r24	; 0x02
	while(T == 0)
 40a:	06 c0       	rjmp	.+12     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
	{
		Dio_enuReadChannel(KeyPad_COL3,&T);
 40c:	be 01       	movw	r22, r28
 40e:	6e 5f       	subi	r22, 0xFE	; 254
 410:	7f 4f       	sbci	r23, 0xFF	; 255
 412:	8d e1       	ldi	r24, 0x1D	; 29
 414:	0e 94 23 01 	call	0x246	; 0x246 <Dio_enuReadChannel>
	}
	Local_u8RetVal |= Local_u8RetValTemp<<2;

	Dio_enuReadChannel(KeyPad_COL3,&Local_u8RetValTemp);
	T = Local_u8RetValTemp;
	while(T == 0)
 418:	9a 81       	ldd	r25, Y+2	; 0x02
 41a:	99 23       	and	r25, r25
 41c:	b9 f3       	breq	.-18     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
	{
		Dio_enuReadChannel(KeyPad_COL3,&T);
	}
	Local_u8RetVal |= Local_u8RetValTemp<<1;
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	18 2b       	or	r17, r24

	Dio_enuReadChannel(KeyPad_COL4,&Local_u8RetValTemp);
 428:	be 01       	movw	r22, r28
 42a:	6f 5f       	subi	r22, 0xFF	; 255
 42c:	7f 4f       	sbci	r23, 0xFF	; 255
 42e:	8b e1       	ldi	r24, 0x1B	; 27
 430:	0e 94 23 01 	call	0x246	; 0x246 <Dio_enuReadChannel>
	T = Local_u8RetValTemp;
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	8a 83       	std	Y+2, r24	; 0x02
	while(T == 0)
 438:	06 c0       	rjmp	.+12     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
	{
		Dio_enuReadChannel(KeyPad_COL4,&T);
 43a:	be 01       	movw	r22, r28
 43c:	6e 5f       	subi	r22, 0xFE	; 254
 43e:	7f 4f       	sbci	r23, 0xFF	; 255
 440:	8b e1       	ldi	r24, 0x1B	; 27
 442:	0e 94 23 01 	call	0x246	; 0x246 <Dio_enuReadChannel>
	}
	Local_u8RetVal |= Local_u8RetValTemp<<1;

	Dio_enuReadChannel(KeyPad_COL4,&Local_u8RetValTemp);
	T = Local_u8RetValTemp;
	while(T == 0)
 446:	8a 81       	ldd	r24, Y+2	; 0x02
 448:	88 23       	and	r24, r24
 44a:	b9 f3       	breq	.-18     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
	{
		Dio_enuReadChannel(KeyPad_COL4,&T);
	}
	Local_u8RetVal |= Local_u8RetValTemp<<0;
 44c:	89 81       	ldd	r24, Y+1	; 0x01

	return Local_u8RetVal;
}
 44e:	81 2b       	or	r24, r17
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	08 95       	ret

0000045e <KeyPad_voidGetButton>:


void KeyPad_voidGetButton(pu8 Copy_u8Button)
{
 45e:	ef 92       	push	r14
 460:	ff 92       	push	r15
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	7c 01       	movw	r14, r24
	u8 i;
	u8 Local_u8Read=0;
	for(i = 0; i < 4 ; i++)
 46a:	10 e0       	ldi	r17, 0x00	; 0
 46c:	3d c0       	rjmp	.+122    	; 0x4e8 <KeyPad_voidGetButton+0x8a>
	{
		KeyPad_voidWritePattern(Pattern_Arr[i]);
 46e:	c1 2f       	mov	r28, r17
 470:	d0 e0       	ldi	r29, 0x00	; 0
 472:	fe 01       	movw	r30, r28
 474:	e0 59       	subi	r30, 0x90	; 144
 476:	ff 4f       	sbci	r31, 0xFF	; 255
 478:	80 81       	ld	r24, Z
 47a:	0e 94 a6 01 	call	0x34c	; 0x34c <KeyPad_voidWritePattern>
		Local_u8Read = KeyPad_voidReadInput();
 47e:	0e 94 c1 01 	call	0x382	; 0x382 <KeyPad_voidReadInput>
		switch(Local_u8Read)
 482:	8b 30       	cpi	r24, 0x0B	; 11
 484:	99 f0       	breq	.+38     	; 0x4ac <KeyPad_voidGetButton+0x4e>
 486:	18 f4       	brcc	.+6      	; 0x48e <KeyPad_voidGetButton+0x30>
 488:	87 30       	cpi	r24, 0x07	; 7
 48a:	31 f0       	breq	.+12     	; 0x498 <KeyPad_voidGetButton+0x3a>
 48c:	2c c0       	rjmp	.+88     	; 0x4e6 <KeyPad_voidGetButton+0x88>
 48e:	8d 30       	cpi	r24, 0x0D	; 13
 490:	b9 f0       	breq	.+46     	; 0x4c0 <KeyPad_voidGetButton+0x62>
 492:	8e 30       	cpi	r24, 0x0E	; 14
 494:	f9 f0       	breq	.+62     	; 0x4d4 <KeyPad_voidGetButton+0x76>
 496:	27 c0       	rjmp	.+78     	; 0x4e6 <KeyPad_voidGetButton+0x88>
		{
			case 0b0111:  //Col 1 Row i
			*Copy_u8Button = KeyPad_u8SymbolArr[i][0];
 498:	cc 0f       	add	r28, r28
 49a:	dd 1f       	adc	r29, r29
 49c:	cc 0f       	add	r28, r28
 49e:	dd 1f       	adc	r29, r29
 4a0:	c0 5a       	subi	r28, 0xA0	; 160
 4a2:	df 4f       	sbci	r29, 0xFF	; 255
 4a4:	88 81       	ld	r24, Y
 4a6:	f7 01       	movw	r30, r14
 4a8:	80 83       	st	Z, r24
			break;
 4aa:	1d c0       	rjmp	.+58     	; 0x4e6 <KeyPad_voidGetButton+0x88>

			case 0b1011: //Col 2 Row i
			*Copy_u8Button = KeyPad_u8SymbolArr[i][1];
 4ac:	cc 0f       	add	r28, r28
 4ae:	dd 1f       	adc	r29, r29
 4b0:	cc 0f       	add	r28, r28
 4b2:	dd 1f       	adc	r29, r29
 4b4:	c0 5a       	subi	r28, 0xA0	; 160
 4b6:	df 4f       	sbci	r29, 0xFF	; 255
 4b8:	89 81       	ldd	r24, Y+1	; 0x01
 4ba:	f7 01       	movw	r30, r14
 4bc:	80 83       	st	Z, r24
			break;
 4be:	13 c0       	rjmp	.+38     	; 0x4e6 <KeyPad_voidGetButton+0x88>

			case 0b1101: //Col 3 Row i
			*Copy_u8Button = KeyPad_u8SymbolArr[i][2];
 4c0:	cc 0f       	add	r28, r28
 4c2:	dd 1f       	adc	r29, r29
 4c4:	cc 0f       	add	r28, r28
 4c6:	dd 1f       	adc	r29, r29
 4c8:	c0 5a       	subi	r28, 0xA0	; 160
 4ca:	df 4f       	sbci	r29, 0xFF	; 255
 4cc:	8a 81       	ldd	r24, Y+2	; 0x02
 4ce:	f7 01       	movw	r30, r14
 4d0:	80 83       	st	Z, r24
			break;
 4d2:	09 c0       	rjmp	.+18     	; 0x4e6 <KeyPad_voidGetButton+0x88>

			case 0b1110: //Col 4 Row i
			*Copy_u8Button = KeyPad_u8SymbolArr[i][3];
 4d4:	cc 0f       	add	r28, r28
 4d6:	dd 1f       	adc	r29, r29
 4d8:	cc 0f       	add	r28, r28
 4da:	dd 1f       	adc	r29, r29
 4dc:	c0 5a       	subi	r28, 0xA0	; 160
 4de:	df 4f       	sbci	r29, 0xFF	; 255
 4e0:	8b 81       	ldd	r24, Y+3	; 0x03
 4e2:	f7 01       	movw	r30, r14
 4e4:	80 83       	st	Z, r24

void KeyPad_voidGetButton(pu8 Copy_u8Button)
{
	u8 i;
	u8 Local_u8Read=0;
	for(i = 0; i < 4 ; i++)
 4e6:	1f 5f       	subi	r17, 0xFF	; 255
 4e8:	14 30       	cpi	r17, 0x04	; 4
 4ea:	08 f2       	brcs	.-126    	; 0x46e <KeyPad_voidGetButton+0x10>
			case 0b1110: //Col 4 Row i
			*Copy_u8Button = KeyPad_u8SymbolArr[i][3];
			break;
		}
	}
}
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	ff 90       	pop	r15
 4f4:	ef 90       	pop	r14
 4f6:	08 95       	ret

000004f8 <LCD_voidSendCommand>:
#include "LCD_cfg.h"
#include "LCD.h"

 /*4 BIT MODE INIT*/
static void LCD_voidSendCommand(u8 Copy_u8Command)
{
 4f8:	cf 93       	push	r28
 4fa:	c8 2f       	mov	r28, r24
	Dio_enuWriteChannel(RS,DIO_u8LEVEL_LOW);
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	83 e0       	ldi	r24, 0x03	; 3
 500:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	/*Send High Nipple*/
	Dio_enuWriteChannel(D7,GET_BIT(Copy_u8Command,7));
 504:	6c 2f       	mov	r22, r28
 506:	66 1f       	adc	r22, r22
 508:	66 27       	eor	r22, r22
 50a:	66 1f       	adc	r22, r22
 50c:	8c e0       	ldi	r24, 0x0C	; 12
 50e:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(D6,GET_BIT(Copy_u8Command,6));
 512:	c6 fb       	bst	r28, 6
 514:	66 27       	eor	r22, r22
 516:	60 f9       	bld	r22, 0
 518:	8a e0       	ldi	r24, 0x0A	; 10
 51a:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(D5,GET_BIT(Copy_u8Command,5));
 51e:	c5 fb       	bst	r28, 5
 520:	66 27       	eor	r22, r22
 522:	60 f9       	bld	r22, 0
 524:	89 e0       	ldi	r24, 0x09	; 9
 526:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(D4,GET_BIT(Copy_u8Command,4));
 52a:	c4 fb       	bst	r28, 4
 52c:	66 27       	eor	r22, r22
 52e:	60 f9       	bld	r22, 0
 530:	88 e0       	ldi	r24, 0x08	; 8
 532:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	/*EN Pulse*/
	Dio_enuWriteChannel(EN,DIO_u8LEVEL_HIGH);
 536:	61 e0       	ldi	r22, 0x01	; 1
 538:	82 e0       	ldi	r24, 0x02	; 2
 53a:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53e:	8f e9       	ldi	r24, 0x9F	; 159
 540:	9f e0       	ldi	r25, 0x0F	; 15
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <LCD_voidSendCommand+0x4a>
 546:	00 c0       	rjmp	.+0      	; 0x548 <LCD_voidSendCommand+0x50>
 548:	00 00       	nop
	_delay_ms(1);
	Dio_enuWriteChannel(EN,DIO_u8LEVEL_LOW);
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	82 e0       	ldi	r24, 0x02	; 2
 54e:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
 552:	8f e9       	ldi	r24, 0x9F	; 159
 554:	9f e0       	ldi	r25, 0x0F	; 15
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	f1 f7       	brne	.-4      	; 0x556 <LCD_voidSendCommand+0x5e>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <LCD_voidSendCommand+0x64>
 55c:	00 00       	nop
	_delay_ms(1);
	/*Send Low Nipple*/
	Dio_enuWriteChannel(D7,GET_BIT(Copy_u8Command,3));
 55e:	c3 fb       	bst	r28, 3
 560:	66 27       	eor	r22, r22
 562:	60 f9       	bld	r22, 0
 564:	8c e0       	ldi	r24, 0x0C	; 12
 566:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(D6,GET_BIT(Copy_u8Command,2));
 56a:	c2 fb       	bst	r28, 2
 56c:	66 27       	eor	r22, r22
 56e:	60 f9       	bld	r22, 0
 570:	8a e0       	ldi	r24, 0x0A	; 10
 572:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(D5,GET_BIT(Copy_u8Command,1));
 576:	c1 fb       	bst	r28, 1
 578:	66 27       	eor	r22, r22
 57a:	60 f9       	bld	r22, 0
 57c:	89 e0       	ldi	r24, 0x09	; 9
 57e:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(D4,GET_BIT(Copy_u8Command,0));
 582:	6c 2f       	mov	r22, r28
 584:	61 70       	andi	r22, 0x01	; 1
 586:	88 e0       	ldi	r24, 0x08	; 8
 588:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	/*EN Pulse*/
	Dio_enuWriteChannel(EN,DIO_u8LEVEL_HIGH);
 58c:	61 e0       	ldi	r22, 0x01	; 1
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
 594:	8f e9       	ldi	r24, 0x9F	; 159
 596:	9f e0       	ldi	r25, 0x0F	; 15
 598:	01 97       	sbiw	r24, 0x01	; 1
 59a:	f1 f7       	brne	.-4      	; 0x598 <LCD_voidSendCommand+0xa0>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <LCD_voidSendCommand+0xa6>
 59e:	00 00       	nop
	_delay_ms(1);
	Dio_enuWriteChannel(EN,DIO_u8LEVEL_LOW);
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	82 e0       	ldi	r24, 0x02	; 2
 5a4:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
 5a8:	8f e9       	ldi	r24, 0x9F	; 159
 5aa:	9f e0       	ldi	r25, 0x0F	; 15
 5ac:	01 97       	sbiw	r24, 0x01	; 1
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <LCD_voidSendCommand+0xb4>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <LCD_voidSendCommand+0xba>
 5b2:	00 00       	nop
	_delay_ms(1);
}
 5b4:	cf 91       	pop	r28
 5b6:	08 95       	ret

000005b8 <LCD_voidSendData>:

static void LCD_voidSendData(u8 Copy_u8Data)
{
 5b8:	cf 93       	push	r28
 5ba:	c8 2f       	mov	r28, r24
	Dio_enuWriteChannel(RS,DIO_u8LEVEL_HIGH);
 5bc:	61 e0       	ldi	r22, 0x01	; 1
 5be:	83 e0       	ldi	r24, 0x03	; 3
 5c0:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	/*Send High Nipple*/
	Dio_enuWriteChannel(D7,GET_BIT(Copy_u8Data,7));
 5c4:	6c 2f       	mov	r22, r28
 5c6:	66 1f       	adc	r22, r22
 5c8:	66 27       	eor	r22, r22
 5ca:	66 1f       	adc	r22, r22
 5cc:	8c e0       	ldi	r24, 0x0C	; 12
 5ce:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(D6,GET_BIT(Copy_u8Data,6));
 5d2:	c6 fb       	bst	r28, 6
 5d4:	66 27       	eor	r22, r22
 5d6:	60 f9       	bld	r22, 0
 5d8:	8a e0       	ldi	r24, 0x0A	; 10
 5da:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(D5,GET_BIT(Copy_u8Data,5));
 5de:	c5 fb       	bst	r28, 5
 5e0:	66 27       	eor	r22, r22
 5e2:	60 f9       	bld	r22, 0
 5e4:	89 e0       	ldi	r24, 0x09	; 9
 5e6:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(D4,GET_BIT(Copy_u8Data,4));
 5ea:	c4 fb       	bst	r28, 4
 5ec:	66 27       	eor	r22, r22
 5ee:	60 f9       	bld	r22, 0
 5f0:	88 e0       	ldi	r24, 0x08	; 8
 5f2:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	/*EN Pulse*/
	Dio_enuWriteChannel(EN,DIO_u8LEVEL_HIGH);
 5f6:	61 e0       	ldi	r22, 0x01	; 1
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
 5fe:	8f e9       	ldi	r24, 0x9F	; 159
 600:	9f e0       	ldi	r25, 0x0F	; 15
 602:	01 97       	sbiw	r24, 0x01	; 1
 604:	f1 f7       	brne	.-4      	; 0x602 <LCD_voidSendData+0x4a>
 606:	00 c0       	rjmp	.+0      	; 0x608 <LCD_voidSendData+0x50>
 608:	00 00       	nop
	_delay_ms(1);
	Dio_enuWriteChannel(EN,DIO_u8LEVEL_LOW);
 60a:	60 e0       	ldi	r22, 0x00	; 0
 60c:	82 e0       	ldi	r24, 0x02	; 2
 60e:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
 612:	8f e9       	ldi	r24, 0x9F	; 159
 614:	9f e0       	ldi	r25, 0x0F	; 15
 616:	01 97       	sbiw	r24, 0x01	; 1
 618:	f1 f7       	brne	.-4      	; 0x616 <LCD_voidSendData+0x5e>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <LCD_voidSendData+0x64>
 61c:	00 00       	nop
	_delay_ms(1);
	/*Send Low Nipple*/
	Dio_enuWriteChannel(D7,GET_BIT(Copy_u8Data,3));
 61e:	c3 fb       	bst	r28, 3
 620:	66 27       	eor	r22, r22
 622:	60 f9       	bld	r22, 0
 624:	8c e0       	ldi	r24, 0x0C	; 12
 626:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(D6,GET_BIT(Copy_u8Data,2));
 62a:	c2 fb       	bst	r28, 2
 62c:	66 27       	eor	r22, r22
 62e:	60 f9       	bld	r22, 0
 630:	8a e0       	ldi	r24, 0x0A	; 10
 632:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(D5,GET_BIT(Copy_u8Data,1));
 636:	c1 fb       	bst	r28, 1
 638:	66 27       	eor	r22, r22
 63a:	60 f9       	bld	r22, 0
 63c:	89 e0       	ldi	r24, 0x09	; 9
 63e:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	Dio_enuWriteChannel(D4,GET_BIT(Copy_u8Data,0));
 642:	6c 2f       	mov	r22, r28
 644:	61 70       	andi	r22, 0x01	; 1
 646:	88 e0       	ldi	r24, 0x08	; 8
 648:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
	/*EN Pulse*/
	Dio_enuWriteChannel(EN,DIO_u8LEVEL_HIGH);
 64c:	61 e0       	ldi	r22, 0x01	; 1
 64e:	82 e0       	ldi	r24, 0x02	; 2
 650:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
 654:	8f e9       	ldi	r24, 0x9F	; 159
 656:	9f e0       	ldi	r25, 0x0F	; 15
 658:	01 97       	sbiw	r24, 0x01	; 1
 65a:	f1 f7       	brne	.-4      	; 0x658 <LCD_voidSendData+0xa0>
 65c:	00 c0       	rjmp	.+0      	; 0x65e <LCD_voidSendData+0xa6>
 65e:	00 00       	nop
	_delay_ms(1);
	Dio_enuWriteChannel(EN,DIO_u8LEVEL_LOW);
 660:	60 e0       	ldi	r22, 0x00	; 0
 662:	82 e0       	ldi	r24, 0x02	; 2
 664:	0e 94 49 00 	call	0x92	; 0x92 <Dio_enuWriteChannel>
 668:	8f e9       	ldi	r24, 0x9F	; 159
 66a:	9f e0       	ldi	r25, 0x0F	; 15
 66c:	01 97       	sbiw	r24, 0x01	; 1
 66e:	f1 f7       	brne	.-4      	; 0x66c <LCD_voidSendData+0xb4>
 670:	00 c0       	rjmp	.+0      	; 0x672 <LCD_voidSendData+0xba>
 672:	00 00       	nop
	_delay_ms(1);
}
 674:	cf 91       	pop	r28
 676:	08 95       	ret

00000678 <LCD_voidInit>:
 678:	2f ef       	ldi	r18, 0xFF	; 255
 67a:	80 e7       	ldi	r24, 0x70	; 112
 67c:	92 e0       	ldi	r25, 0x02	; 2
 67e:	21 50       	subi	r18, 0x01	; 1
 680:	80 40       	sbci	r24, 0x00	; 0
 682:	90 40       	sbci	r25, 0x00	; 0
 684:	e1 f7       	brne	.-8      	; 0x67e <LCD_voidInit+0x6>
 686:	00 c0       	rjmp	.+0      	; 0x688 <LCD_voidInit+0x10>
 688:	00 00       	nop

void LCD_voidInit()
{
	_delay_ms(50);
	
	LCD_voidSendCommand(0x02); //Dummy Data for Init
 68a:	82 e0       	ldi	r24, 0x02	; 2
 68c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_voidSendCommand>
	LCD_voidSendCommand(LCD_FunctionSetCommand);
 690:	88 e2       	ldi	r24, 0x28	; 40
 692:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_voidSendCommand>
 696:	8f e9       	ldi	r24, 0x9F	; 159
 698:	9f e0       	ldi	r25, 0x0F	; 15
 69a:	01 97       	sbiw	r24, 0x01	; 1
 69c:	f1 f7       	brne	.-4      	; 0x69a <LCD_voidInit+0x22>
 69e:	00 c0       	rjmp	.+0      	; 0x6a0 <LCD_voidInit+0x28>
 6a0:	00 00       	nop
	_delay_ms(1);
	
	LCD_voidSendCommand(LCD_DisplayOnOffCommand);
 6a2:	8c e0       	ldi	r24, 0x0C	; 12
 6a4:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_voidSendCommand>
 6a8:	8f e9       	ldi	r24, 0x9F	; 159
 6aa:	9f e0       	ldi	r25, 0x0F	; 15
 6ac:	01 97       	sbiw	r24, 0x01	; 1
 6ae:	f1 f7       	brne	.-4      	; 0x6ac <LCD_voidInit+0x34>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <LCD_voidInit+0x3a>
 6b2:	00 00       	nop
	_delay_ms(1);
	
	LCD_voidSendCommand(LCD_DisplayClearCommand);
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_voidSendCommand>
 6ba:	8f e3       	ldi	r24, 0x3F	; 63
 6bc:	9f e1       	ldi	r25, 0x1F	; 31
 6be:	01 97       	sbiw	r24, 0x01	; 1
 6c0:	f1 f7       	brne	.-4      	; 0x6be <LCD_voidInit+0x46>
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <LCD_voidInit+0x4c>
 6c4:	00 00       	nop
	_delay_ms(2);
	
	LCD_voidSendCommand(LCD_EntryModeCommand);
 6c6:	86 e0       	ldi	r24, 0x06	; 6
 6c8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_voidSendCommand>
 6cc:	8f e3       	ldi	r24, 0x3F	; 63
 6ce:	9f e1       	ldi	r25, 0x1F	; 31
 6d0:	01 97       	sbiw	r24, 0x01	; 1
 6d2:	f1 f7       	brne	.-4      	; 0x6d0 <LCD_voidInit+0x58>
 6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <LCD_voidInit+0x5e>
 6d6:	00 00       	nop
 6d8:	08 95       	ret

000006da <LCD_voidDisplayChar>:
	_delay_ms(2);	
}

void LCD_voidDisplayChar(u8 Copy_u8Character)
{
	LCD_voidSendData(Copy_u8Character);
 6da:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_voidSendData>
 6de:	08 95       	ret

000006e0 <LCD_voidDisplayString>:
}

void LCD_voidDisplayString(u8* Ptr_u8String)
{
 6e0:	0f 93       	push	r16
 6e2:	1f 93       	push	r17
 6e4:	cf 93       	push	r28
 6e6:	8c 01       	movw	r16, r24
	u8 i;
	for(i=0;Ptr_u8String[i];i++)
 6e8:	c0 e0       	ldi	r28, 0x00	; 0
 6ea:	03 c0       	rjmp	.+6      	; 0x6f2 <LCD_voidDisplayString+0x12>
	{
		LCD_voidDisplayChar(Ptr_u8String[i]);
 6ec:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_voidDisplayChar>
}

void LCD_voidDisplayString(u8* Ptr_u8String)
{
	u8 i;
	for(i=0;Ptr_u8String[i];i++)
 6f0:	cf 5f       	subi	r28, 0xFF	; 255
 6f2:	f8 01       	movw	r30, r16
 6f4:	ec 0f       	add	r30, r28
 6f6:	f1 1d       	adc	r31, r1
 6f8:	80 81       	ld	r24, Z
 6fa:	81 11       	cpse	r24, r1
 6fc:	f7 cf       	rjmp	.-18     	; 0x6ec <LCD_voidDisplayString+0xc>
	{
		LCD_voidDisplayChar(Ptr_u8String[i]);
	}
}
 6fe:	cf 91       	pop	r28
 700:	1f 91       	pop	r17
 702:	0f 91       	pop	r16
 704:	08 95       	ret

00000706 <Calc_voidGetInput>:
#include "Keypad.h"
#include "LCD.h"

u8 Global_u8InputArr[10] = {0};
void Calc_voidGetInput()
{
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	1f 92       	push	r1
 70c:	cd b7       	in	r28, 0x3d	; 61
 70e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Button = 0;
 710:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8StrPointer=0;
	{
		KeyPad_voidGetButton(&Local_u8Button);
 712:	ce 01       	movw	r24, r28
 714:	01 96       	adiw	r24, 0x01	; 1
 716:	0e 94 2f 02 	call	0x45e	; 0x45e <KeyPad_voidGetButton>
		if(Local_u8Button != 0  && Local_u8Button != '=')
 71a:	89 81       	ldd	r24, Y+1	; 0x01
 71c:	88 23       	and	r24, r24
 71e:	39 f0       	breq	.+14     	; 0x72e <Calc_voidGetInput+0x28>
 720:	8d 33       	cpi	r24, 0x3D	; 61
 722:	39 f0       	breq	.+14     	; 0x732 <Calc_voidGetInput+0x2c>
		{
			Global_u8InputArr[Local_u8StrPointer] = Local_u8Button;
 724:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
			Local_u8StrPointer++;
			Local_u8Button=0;
 728:	19 82       	std	Y+1, r1	; 0x01
	{
		KeyPad_voidGetButton(&Local_u8Button);
		if(Local_u8Button != 0  && Local_u8Button != '=')
		{
			Global_u8InputArr[Local_u8StrPointer] = Local_u8Button;
			Local_u8StrPointer++;
 72a:	e1 e0       	ldi	r30, 0x01	; 1
 72c:	03 c0       	rjmp	.+6      	; 0x734 <Calc_voidGetInput+0x2e>

u8 Global_u8InputArr[10] = {0};
void Calc_voidGetInput()
{
	u8 Local_u8Button = 0;
	u8 Local_u8StrPointer=0;
 72e:	e0 e0       	ldi	r30, 0x00	; 0
 730:	01 c0       	rjmp	.+2      	; 0x734 <Calc_voidGetInput+0x2e>
 732:	e0 e0       	ldi	r30, 0x00	; 0
		{
			Global_u8InputArr[Local_u8StrPointer] = Local_u8Button;
			Local_u8StrPointer++;
			Local_u8Button=0;
		}
	}while(Local_u8Button != '=');
 734:	89 81       	ldd	r24, Y+1	; 0x01
 736:	8d 33       	cpi	r24, 0x3D	; 61
 738:	e9 f7       	brne	.-6      	; 0x734 <Calc_voidGetInput+0x2e>
	Global_u8InputArr[Local_u8StrPointer] = '\0';
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	ec 58       	subi	r30, 0x8C	; 140
 73e:	ff 4f       	sbci	r31, 0xFF	; 255
 740:	10 82       	st	Z, r1
}
 742:	0f 90       	pop	r0
 744:	df 91       	pop	r29
 746:	cf 91       	pop	r28
 748:	08 95       	ret

0000074a <main>:

int main(void)
{
	Port_vidInit();
 74a:	0e 94 b0 03 	call	0x760	; 0x760 <Port_vidInit>
	LCD_voidInit();
 74e:	0e 94 3c 03 	call	0x678	; 0x678 <LCD_voidInit>
	Calc_voidGetInput();
 752:	0e 94 83 03 	call	0x706	; 0x706 <Calc_voidGetInput>
	LCD_voidDisplayString(Global_u8InputArr);
 756:	84 e7       	ldi	r24, 0x74	; 116
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_voidDisplayString>
 75e:	ff cf       	rjmp	.-2      	; 0x75e <main+0x14>

00000760 <Port_vidInit>:
#define PORT_u8OUTPUT_LOW		1

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		0

	DDRA = CONC(PORT_u8MODEPIN07,PORT_u8MODEPIN06,PORT_u8MODEPIN05,PORT_u8MODEPIN04,PORT_u8MODEPIN03,PORT_u8MODEPIN02,PORT_u8MODEPIN01,PORT_u8MODEPIN00);
 760:	8f ef       	ldi	r24, 0xFF	; 255
 762:	8a bb       	out	0x1a, r24	; 26
	DDRB = CONC(PORT_u8MODEPIN15,PORT_u8MODEPIN14,PORT_u8MODEPIN13,PORT_u8MODEPIN12,PORT_u8MODEPIN11,PORT_u8MODEPIN10,PORT_u8MODEPIN09,PORT_u8MODEPIN08);
 764:	87 bb       	out	0x17, r24	; 23
	DDRC = CONC(PORT_u8MODEPIN23,PORT_u8MODEPIN22,PORT_u8MODEPIN21,PORT_u8MODEPIN20,PORT_u8MODEPIN19,PORT_u8MODEPIN18,PORT_u8MODEPIN17,PORT_u8MODEPIN16);
 766:	97 e0       	ldi	r25, 0x07	; 7
 768:	94 bb       	out	0x14, r25	; 20
	DDRD = CONC(PORT_u8MODEPIN31,PORT_u8MODEPIN30,PORT_u8MODEPIN29,PORT_u8MODEPIN28,PORT_u8MODEPIN27,PORT_u8MODEPIN26,PORT_u8MODEPIN25,PORT_u8MODEPIN24);
 76a:	9f e0       	ldi	r25, 0x0F	; 15
 76c:	91 bb       	out	0x11, r25	; 17
#define PORT_u8OUTPUT_LOW		0

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		1

	PORTA = CONC(PORT_u8MODEPIN07,PORT_u8MODEPIN06,PORT_u8MODEPIN05,PORT_u8MODEPIN04,PORT_u8MODEPIN03,PORT_u8MODEPIN02,PORT_u8MODEPIN01,PORT_u8MODEPIN00);
 76e:	1b ba       	out	0x1b, r1	; 27
	PORTB = CONC(PORT_u8MODEPIN15,PORT_u8MODEPIN14,PORT_u8MODEPIN13,PORT_u8MODEPIN12,PORT_u8MODEPIN11,PORT_u8MODEPIN10,PORT_u8MODEPIN09,PORT_u8MODEPIN08);
 770:	18 ba       	out	0x18, r1	; 24
	PORTC = CONC(PORT_u8MODEPIN23,PORT_u8MODEPIN22,PORT_u8MODEPIN21,PORT_u8MODEPIN20,PORT_u8MODEPIN19,PORT_u8MODEPIN18,PORT_u8MODEPIN17,PORT_u8MODEPIN16);
 772:	15 ba       	out	0x15, r1	; 21
	PORTD = CONC(PORT_u8MODEPIN31,PORT_u8MODEPIN30,PORT_u8MODEPIN29,PORT_u8MODEPIN28,PORT_u8MODEPIN27,PORT_u8MODEPIN26,PORT_u8MODEPIN25,PORT_u8MODEPIN24);
 774:	82 bb       	out	0x12, r24	; 18
 776:	08 95       	ret

00000778 <_exit>:
 778:	f8 94       	cli

0000077a <__stop_program>:
 77a:	ff cf       	rjmp	.-2      	; 0x77a <__stop_program>
