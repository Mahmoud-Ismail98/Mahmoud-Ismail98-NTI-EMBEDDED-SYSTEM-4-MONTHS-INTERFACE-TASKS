
ADC_VmV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000009e4  00000a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800072  00800072  00000a8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000abc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001af0  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9c  00000000  00000000  000027a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d2  00000000  00000000  0000323c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000450  00000000  00000000  00004410  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f4  00000000  00000000  00004860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f12  00000000  00000000  00005154  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00007066  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__vector_1>
   8:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_2>
   c:	0c 94 49 02 	jmp	0x492	; 0x492 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 61 04 	call	0x8c2	; 0x8c2 <main>
  8a:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidInit>:
}


void ADC_InterruptDisable()
{
	CLR_BIT(ADCSRA,ADIE);
  92:	97 b1       	in	r25, 0x07	; 7
  94:	9f 73       	andi	r25, 0x3F	; 63
  96:	97 b9       	out	0x07, r25	; 7
  98:	27 b1       	in	r18, 0x07	; 7
  9a:	30 e4       	ldi	r19, 0x40	; 64
  9c:	83 9f       	mul	r24, r19
  9e:	c0 01       	movw	r24, r0
  a0:	11 24       	eor	r1, r1
  a2:	82 2b       	or	r24, r18
  a4:	87 b9       	out	0x07, r24	; 7
  a6:	86 b1       	in	r24, 0x06	; 6
  a8:	88 7f       	andi	r24, 0xF8	; 248
  aa:	86 b9       	out	0x06, r24	; 6
  ac:	86 b1       	in	r24, 0x06	; 6
  ae:	68 2b       	or	r22, r24
  b0:	66 b9       	out	0x06, r22	; 6
  b2:	08 95       	ret

000000b4 <ADC_Enable>:
  b4:	86 b1       	in	r24, 0x06	; 6
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	86 b9       	out	0x06, r24	; 6
  ba:	08 95       	ret

000000bc <ADC_voidReadPolling>:
  bc:	97 b1       	in	r25, 0x07	; 7
  be:	90 7e       	andi	r25, 0xE0	; 224
  c0:	97 b9       	out	0x07, r25	; 7
  c2:	97 b1       	in	r25, 0x07	; 7
  c4:	89 2b       	or	r24, r25
  c6:	87 b9       	out	0x07, r24	; 7
  c8:	86 b1       	in	r24, 0x06	; 6
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	86 b9       	out	0x06, r24	; 6
  ce:	36 99       	sbic	0x06, 6	; 6
  d0:	fe cf       	rjmp	.-4      	; 0xce <ADC_voidReadPolling+0x12>
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	95 b1       	in	r25, 0x05	; 5
  d6:	fb 01       	movw	r30, r22
  d8:	91 83       	std	Z+1, r25	; 0x01
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <__vector_16>:
}



ISR(ADC_vect)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	3f 93       	push	r19
  ec:	4f 93       	push	r20
  ee:	5f 93       	push	r21
  f0:	6f 93       	push	r22
  f2:	7f 93       	push	r23
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	af 93       	push	r26
  fa:	bf 93       	push	r27
  fc:	ef 93       	push	r30
  fe:	ff 93       	push	r31
	FptrG();
 100:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <__data_end>
 104:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <__data_end+0x1>
 108:	09 95       	icall
}
 10a:	ff 91       	pop	r31
 10c:	ef 91       	pop	r30
 10e:	bf 91       	pop	r27
 110:	af 91       	pop	r26
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	7f 91       	pop	r23
 118:	6f 91       	pop	r22
 11a:	5f 91       	pop	r21
 11c:	4f 91       	pop	r20
 11e:	3f 91       	pop	r19
 120:	2f 91       	pop	r18
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <Dio_enuWriteChannel>:

	u8 LOC_u8Port;

	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {
 12c:	80 32       	cpi	r24, 0x20	; 32
 12e:	08 f0       	brcs	.+2      	; 0x132 <Dio_enuWriteChannel+0x6>
 130:	c1 c0       	rjmp	.+386    	; 0x2b4 <Dio_enuWriteChannel+0x188>

		LOC_enuReturnStatus = Dio_enuChannelError;
	}

	else if (Copy_u8Level > DIO_u8NUMBER_OF_LEVELS) {
 132:	63 30       	cpi	r22, 0x03	; 3
 134:	08 f0       	brcs	.+2      	; 0x138 <Dio_enuWriteChannel+0xc>
 136:	c0 c0       	rjmp	.+384    	; 0x2b8 <Dio_enuWriteChannel+0x18c>
		LOC_enuReturnStatus = Dio_enuLevelError;
	}

	else {

		LOC_u8Port = Copy_u8ChannelId / DIO_u8REGISTER_SIZE;
 138:	98 2f       	mov	r25, r24
 13a:	96 95       	lsr	r25
 13c:	96 95       	lsr	r25
 13e:	96 95       	lsr	r25
		LOC_u8Pin = Copy_u8ChannelId % DIO_u8REGISTER_SIZE;
 140:	87 70       	andi	r24, 0x07	; 7

		switch (LOC_u8Port) {
 142:	91 30       	cpi	r25, 0x01	; 1
 144:	a1 f1       	breq	.+104    	; 0x1ae <Dio_enuWriteChannel+0x82>
 146:	38 f0       	brcs	.+14     	; 0x156 <Dio_enuWriteChannel+0x2a>
 148:	92 30       	cpi	r25, 0x02	; 2
 14a:	09 f4       	brne	.+2      	; 0x14e <Dio_enuWriteChannel+0x22>
 14c:	5c c0       	rjmp	.+184    	; 0x206 <Dio_enuWriteChannel+0xda>
 14e:	93 30       	cpi	r25, 0x03	; 3
 150:	09 f4       	brne	.+2      	; 0x154 <Dio_enuWriteChannel+0x28>
 152:	85 c0       	rjmp	.+266    	; 0x25e <Dio_enuWriteChannel+0x132>
 154:	b3 c0       	rjmp	.+358    	; 0x2bc <Dio_enuWriteChannel+0x190>

		case DIO_u8PORTA:
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
 156:	2a b3       	in	r18, 0x1a	; 26
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	08 2e       	mov	r0, r24
 15c:	02 c0       	rjmp	.+4      	; 0x162 <Dio_enuWriteChannel+0x36>
 15e:	35 95       	asr	r19
 160:	27 95       	ror	r18
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <Dio_enuWriteChannel+0x32>
 166:	20 ff       	sbrs	r18, 0
 168:	ab c0       	rjmp	.+342    	; 0x2c0 <Dio_enuWriteChannel+0x194>
				switch (Copy_u8Level) {
 16a:	66 23       	and	r22, r22
 16c:	89 f0       	breq	.+34     	; 0x190 <Dio_enuWriteChannel+0x64>
 16e:	61 30       	cpi	r22, 0x01	; 1
 170:	09 f0       	breq	.+2      	; 0x174 <Dio_enuWriteChannel+0x48>
 172:	a8 c0       	rjmp	.+336    	; 0x2c4 <Dio_enuWriteChannel+0x198>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTA, LOC_u8Pin);
 174:	4b b3       	in	r20, 0x1b	; 27
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	b9 01       	movw	r22, r18
 17c:	02 c0       	rjmp	.+4      	; 0x182 <Dio_enuWriteChannel+0x56>
 17e:	66 0f       	add	r22, r22
 180:	77 1f       	adc	r23, r23
 182:	8a 95       	dec	r24
 184:	e2 f7       	brpl	.-8      	; 0x17e <Dio_enuWriteChannel+0x52>
 186:	cb 01       	movw	r24, r22
 188:	84 2b       	or	r24, r20
 18a:	8b bb       	out	0x1b, r24	; 27
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 18c:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTA, LOC_u8Pin);
					break;
 18e:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTA, LOC_u8Pin);
 190:	4b b3       	in	r20, 0x1b	; 27
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	b9 01       	movw	r22, r18
 198:	02 c0       	rjmp	.+4      	; 0x19e <Dio_enuWriteChannel+0x72>
 19a:	66 0f       	add	r22, r22
 19c:	77 1f       	adc	r23, r23
 19e:	8a 95       	dec	r24
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <Dio_enuWriteChannel+0x6e>
 1a2:	cb 01       	movw	r24, r22
 1a4:	80 95       	com	r24
 1a6:	84 23       	and	r24, r20
 1a8:	8b bb       	out	0x1b, r24	; 27
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTA, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTA, LOC_u8Pin);
					break;
 1ac:	08 95       	ret
			}
			break;

		case DIO_u8PORTB:

			if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
 1ae:	27 b3       	in	r18, 0x17	; 23
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	08 2e       	mov	r0, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <Dio_enuWriteChannel+0x8e>
 1b6:	35 95       	asr	r19
 1b8:	27 95       	ror	r18
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <Dio_enuWriteChannel+0x8a>
 1be:	20 ff       	sbrs	r18, 0
 1c0:	83 c0       	rjmp	.+262    	; 0x2c8 <Dio_enuWriteChannel+0x19c>
				switch (Copy_u8Level) {
 1c2:	66 23       	and	r22, r22
 1c4:	89 f0       	breq	.+34     	; 0x1e8 <Dio_enuWriteChannel+0xbc>
 1c6:	61 30       	cpi	r22, 0x01	; 1
 1c8:	09 f0       	breq	.+2      	; 0x1cc <Dio_enuWriteChannel+0xa0>
 1ca:	80 c0       	rjmp	.+256    	; 0x2cc <Dio_enuWriteChannel+0x1a0>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTB, LOC_u8Pin);
 1cc:	48 b3       	in	r20, 0x18	; 24
 1ce:	21 e0       	ldi	r18, 0x01	; 1
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	b9 01       	movw	r22, r18
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <Dio_enuWriteChannel+0xae>
 1d6:	66 0f       	add	r22, r22
 1d8:	77 1f       	adc	r23, r23
 1da:	8a 95       	dec	r24
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <Dio_enuWriteChannel+0xaa>
 1de:	cb 01       	movw	r24, r22
 1e0:	84 2b       	or	r24, r20
 1e2:	88 bb       	out	0x18, r24	; 24
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 1e4:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTB, LOC_u8Pin);
					break;
 1e6:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTB, LOC_u8Pin);
 1e8:	48 b3       	in	r20, 0x18	; 24
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	b9 01       	movw	r22, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <Dio_enuWriteChannel+0xca>
 1f2:	66 0f       	add	r22, r22
 1f4:	77 1f       	adc	r23, r23
 1f6:	8a 95       	dec	r24
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <Dio_enuWriteChannel+0xc6>
 1fa:	cb 01       	movw	r24, r22
 1fc:	80 95       	com	r24
 1fe:	84 23       	and	r24, r20
 200:	88 bb       	out	0x18, r24	; 24
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 202:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTB, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTB, LOC_u8Pin);
					break;
 204:	08 95       	ret

			break;

		case DIO_u8PORTC:

			if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
 206:	24 b3       	in	r18, 0x14	; 20
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	08 2e       	mov	r0, r24
 20c:	02 c0       	rjmp	.+4      	; 0x212 <Dio_enuWriteChannel+0xe6>
 20e:	35 95       	asr	r19
 210:	27 95       	ror	r18
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <Dio_enuWriteChannel+0xe2>
 216:	20 ff       	sbrs	r18, 0
 218:	5b c0       	rjmp	.+182    	; 0x2d0 <Dio_enuWriteChannel+0x1a4>
				switch (Copy_u8Level) {
 21a:	66 23       	and	r22, r22
 21c:	89 f0       	breq	.+34     	; 0x240 <Dio_enuWriteChannel+0x114>
 21e:	61 30       	cpi	r22, 0x01	; 1
 220:	09 f0       	breq	.+2      	; 0x224 <Dio_enuWriteChannel+0xf8>
 222:	58 c0       	rjmp	.+176    	; 0x2d4 <Dio_enuWriteChannel+0x1a8>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTC, LOC_u8Pin);
 224:	45 b3       	in	r20, 0x15	; 21
 226:	21 e0       	ldi	r18, 0x01	; 1
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	b9 01       	movw	r22, r18
 22c:	02 c0       	rjmp	.+4      	; 0x232 <Dio_enuWriteChannel+0x106>
 22e:	66 0f       	add	r22, r22
 230:	77 1f       	adc	r23, r23
 232:	8a 95       	dec	r24
 234:	e2 f7       	brpl	.-8      	; 0x22e <Dio_enuWriteChannel+0x102>
 236:	cb 01       	movw	r24, r22
 238:	84 2b       	or	r24, r20
 23a:	85 bb       	out	0x15, r24	; 21
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 23c:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTC, LOC_u8Pin);
					break;
 23e:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTC, LOC_u8Pin);
 240:	45 b3       	in	r20, 0x15	; 21
 242:	21 e0       	ldi	r18, 0x01	; 1
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	b9 01       	movw	r22, r18
 248:	02 c0       	rjmp	.+4      	; 0x24e <Dio_enuWriteChannel+0x122>
 24a:	66 0f       	add	r22, r22
 24c:	77 1f       	adc	r23, r23
 24e:	8a 95       	dec	r24
 250:	e2 f7       	brpl	.-8      	; 0x24a <Dio_enuWriteChannel+0x11e>
 252:	cb 01       	movw	r24, r22
 254:	80 95       	com	r24
 256:	84 23       	and	r24, r20
 258:	85 bb       	out	0x15, r24	; 21
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 25a:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTC, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTC, LOC_u8Pin);
					break;
 25c:	08 95       	ret
			}
			break;

		case DIO_u8PORTD:

			if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
 25e:	21 b3       	in	r18, 0x11	; 17
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	08 2e       	mov	r0, r24
 264:	02 c0       	rjmp	.+4      	; 0x26a <Dio_enuWriteChannel+0x13e>
 266:	35 95       	asr	r19
 268:	27 95       	ror	r18
 26a:	0a 94       	dec	r0
 26c:	e2 f7       	brpl	.-8      	; 0x266 <Dio_enuWriteChannel+0x13a>
 26e:	20 ff       	sbrs	r18, 0
 270:	33 c0       	rjmp	.+102    	; 0x2d8 <Dio_enuWriteChannel+0x1ac>
				switch (Copy_u8Level) {
 272:	66 23       	and	r22, r22
 274:	81 f0       	breq	.+32     	; 0x296 <Dio_enuWriteChannel+0x16a>
 276:	61 30       	cpi	r22, 0x01	; 1
 278:	89 f5       	brne	.+98     	; 0x2dc <Dio_enuWriteChannel+0x1b0>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTD, LOC_u8Pin);
 27a:	42 b3       	in	r20, 0x12	; 18
 27c:	21 e0       	ldi	r18, 0x01	; 1
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	b9 01       	movw	r22, r18
 282:	02 c0       	rjmp	.+4      	; 0x288 <Dio_enuWriteChannel+0x15c>
 284:	66 0f       	add	r22, r22
 286:	77 1f       	adc	r23, r23
 288:	8a 95       	dec	r24
 28a:	e2 f7       	brpl	.-8      	; 0x284 <Dio_enuWriteChannel+0x158>
 28c:	cb 01       	movw	r24, r22
 28e:	84 2b       	or	r24, r20
 290:	82 bb       	out	0x12, r24	; 18
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 292:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTD, LOC_u8Pin);
					break;
 294:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTD, LOC_u8Pin);
 296:	42 b3       	in	r20, 0x12	; 18
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	b9 01       	movw	r22, r18
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <Dio_enuWriteChannel+0x178>
 2a0:	66 0f       	add	r22, r22
 2a2:	77 1f       	adc	r23, r23
 2a4:	8a 95       	dec	r24
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <Dio_enuWriteChannel+0x174>
 2a8:	cb 01       	movw	r24, r22
 2aa:	80 95       	com	r24
 2ac:	84 23       	and	r24, r20
 2ae:	82 bb       	out	0x12, r24	; 18
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2b0:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTD, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTD, LOC_u8Pin);
					break;
 2b2:	08 95       	ret

	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {

		LOC_enuReturnStatus = Dio_enuChannelError;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	08 95       	ret
	}

	else if (Copy_u8Level > DIO_u8NUMBER_OF_LEVELS) {

		LOC_enuReturnStatus = Dio_enuLevelError;
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	08 95       	ret
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	08 95       	ret
					CLR_BIT(PORTA, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 2c0:	83 e0       	ldi	r24, 0x03	; 3
 2c2:	08 95       	ret
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	08 95       	ret
					CLR_BIT(PORTB, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	08 95       	ret
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	08 95       	ret
					CLR_BIT(PORTC, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 2d0:	83 e0       	ldi	r24, 0x03	; 3
 2d2:	08 95       	ret
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	08 95       	ret
					CLR_BIT(PORTD, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	08 95       	ret
#include"Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 2dc:	80 e0       	ldi	r24, 0x00	; 0

		}

	}
	return LOC_enuReturnStatus;
}
 2de:	08 95       	ret

000002e0 <EXTI_voidEnable>:
		break;
		case EXTI_INT1:
		CLR_BIT(EXTI_GICR,INT1);
		break;
		case EXTI_INT2:
		CLR_BIT(EXTI_GICR,INT2);
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	41 f0       	breq	.+16     	; 0x2f4 <EXTI_voidEnable+0x14>
 2e4:	18 f0       	brcs	.+6      	; 0x2ec <EXTI_voidEnable+0xc>
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	49 f0       	breq	.+18     	; 0x2fc <EXTI_voidEnable+0x1c>
 2ea:	08 95       	ret
 2ec:	8b b7       	in	r24, 0x3b	; 59
 2ee:	80 64       	ori	r24, 0x40	; 64
 2f0:	8b bf       	out	0x3b, r24	; 59
 2f2:	08 95       	ret
 2f4:	8b b7       	in	r24, 0x3b	; 59
 2f6:	80 68       	ori	r24, 0x80	; 128
 2f8:	8b bf       	out	0x3b, r24	; 59
 2fa:	08 95       	ret
 2fc:	8b b7       	in	r24, 0x3b	; 59
 2fe:	80 62       	ori	r24, 0x20	; 32
 300:	8b bf       	out	0x3b, r24	; 59
 302:	08 95       	ret

00000304 <EXTI_voidSetPinMode>:
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	49 f1       	breq	.+82     	; 0x35a <EXTI_voidSetPinMode+0x56>
 308:	20 f0       	brcs	.+8      	; 0x312 <EXTI_voidSetPinMode+0xe>
 30a:	82 30       	cpi	r24, 0x02	; 2
 30c:	09 f4       	brne	.+2      	; 0x310 <EXTI_voidSetPinMode+0xc>
 30e:	49 c0       	rjmp	.+146    	; 0x3a2 <EXTI_voidSetPinMode+0x9e>
 310:	08 95       	ret
 312:	61 30       	cpi	r22, 0x01	; 1
 314:	d9 f0       	breq	.+54     	; 0x34c <EXTI_voidSetPinMode+0x48>
 316:	98 f0       	brcs	.+38     	; 0x33e <EXTI_voidSetPinMode+0x3a>
 318:	62 30       	cpi	r22, 0x02	; 2
 31a:	19 f0       	breq	.+6      	; 0x322 <EXTI_voidSetPinMode+0x1e>
 31c:	63 30       	cpi	r22, 0x03	; 3
 31e:	41 f0       	breq	.+16     	; 0x330 <EXTI_voidSetPinMode+0x2c>
 320:	08 95       	ret
 322:	85 b7       	in	r24, 0x35	; 53
 324:	8e 7f       	andi	r24, 0xFE	; 254
 326:	85 bf       	out	0x35, r24	; 53
 328:	85 b7       	in	r24, 0x35	; 53
 32a:	8d 7f       	andi	r24, 0xFD	; 253
 32c:	85 bf       	out	0x35, r24	; 53
 32e:	08 95       	ret
 330:	85 b7       	in	r24, 0x35	; 53
 332:	81 60       	ori	r24, 0x01	; 1
 334:	85 bf       	out	0x35, r24	; 53
 336:	85 b7       	in	r24, 0x35	; 53
 338:	8d 7f       	andi	r24, 0xFD	; 253
 33a:	85 bf       	out	0x35, r24	; 53
 33c:	08 95       	ret
 33e:	85 b7       	in	r24, 0x35	; 53
 340:	8e 7f       	andi	r24, 0xFE	; 254
 342:	85 bf       	out	0x35, r24	; 53
 344:	85 b7       	in	r24, 0x35	; 53
 346:	82 60       	ori	r24, 0x02	; 2
 348:	85 bf       	out	0x35, r24	; 53
 34a:	08 95       	ret
 34c:	85 b7       	in	r24, 0x35	; 53
 34e:	81 60       	ori	r24, 0x01	; 1
 350:	85 bf       	out	0x35, r24	; 53
 352:	85 b7       	in	r24, 0x35	; 53
 354:	82 60       	ori	r24, 0x02	; 2
 356:	85 bf       	out	0x35, r24	; 53
 358:	08 95       	ret
 35a:	61 30       	cpi	r22, 0x01	; 1
 35c:	d9 f0       	breq	.+54     	; 0x394 <EXTI_voidSetPinMode+0x90>
 35e:	98 f0       	brcs	.+38     	; 0x386 <EXTI_voidSetPinMode+0x82>
 360:	62 30       	cpi	r22, 0x02	; 2
 362:	19 f0       	breq	.+6      	; 0x36a <EXTI_voidSetPinMode+0x66>
 364:	63 30       	cpi	r22, 0x03	; 3
 366:	41 f0       	breq	.+16     	; 0x378 <EXTI_voidSetPinMode+0x74>
 368:	08 95       	ret
 36a:	85 b7       	in	r24, 0x35	; 53
 36c:	8b 7f       	andi	r24, 0xFB	; 251
 36e:	85 bf       	out	0x35, r24	; 53
 370:	85 b7       	in	r24, 0x35	; 53
 372:	87 7f       	andi	r24, 0xF7	; 247
 374:	85 bf       	out	0x35, r24	; 53
 376:	08 95       	ret
 378:	85 b7       	in	r24, 0x35	; 53
 37a:	84 60       	ori	r24, 0x04	; 4
 37c:	85 bf       	out	0x35, r24	; 53
 37e:	85 b7       	in	r24, 0x35	; 53
 380:	87 7f       	andi	r24, 0xF7	; 247
 382:	85 bf       	out	0x35, r24	; 53
 384:	08 95       	ret
 386:	85 b7       	in	r24, 0x35	; 53
 388:	8b 7f       	andi	r24, 0xFB	; 251
 38a:	85 bf       	out	0x35, r24	; 53
 38c:	85 b7       	in	r24, 0x35	; 53
 38e:	88 60       	ori	r24, 0x08	; 8
 390:	85 bf       	out	0x35, r24	; 53
 392:	08 95       	ret
 394:	85 b7       	in	r24, 0x35	; 53
 396:	84 60       	ori	r24, 0x04	; 4
 398:	85 bf       	out	0x35, r24	; 53
 39a:	85 b7       	in	r24, 0x35	; 53
 39c:	88 60       	ori	r24, 0x08	; 8
 39e:	85 bf       	out	0x35, r24	; 53
 3a0:	08 95       	ret
 3a2:	66 23       	and	r22, r22
 3a4:	19 f0       	breq	.+6      	; 0x3ac <EXTI_voidSetPinMode+0xa8>
 3a6:	61 30       	cpi	r22, 0x01	; 1
 3a8:	29 f0       	breq	.+10     	; 0x3b4 <EXTI_voidSetPinMode+0xb0>
 3aa:	08 c0       	rjmp	.+16     	; 0x3bc <EXTI_voidSetPinMode+0xb8>
 3ac:	84 b7       	in	r24, 0x34	; 52
 3ae:	8f 7b       	andi	r24, 0xBF	; 191
 3b0:	84 bf       	out	0x34, r24	; 52
 3b2:	08 95       	ret
 3b4:	84 b7       	in	r24, 0x34	; 52
 3b6:	80 64       	ori	r24, 0x40	; 64
 3b8:	84 bf       	out	0x34, r24	; 52
 3ba:	08 95       	ret
 3bc:	84 b7       	in	r24, 0x34	; 52
 3be:	8f 7b       	andi	r24, 0xBF	; 191
 3c0:	84 bf       	out	0x34, r24	; 52
 3c2:	08 95       	ret

000003c4 <EXTI_voidSetCallBack>:
		break;
	}
}
void EXTI_voidSetCallBack(u8 Copy_u8EXTI_PIN, void (*CallBack_func) (void))
{
	switch(Copy_u8EXTI_PIN){
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	49 f0       	breq	.+18     	; 0x3da <EXTI_voidSetCallBack+0x16>
 3c8:	18 f0       	brcs	.+6      	; 0x3d0 <EXTI_voidSetCallBack+0xc>
 3ca:	82 30       	cpi	r24, 0x02	; 2
 3cc:	59 f0       	breq	.+22     	; 0x3e4 <EXTI_voidSetCallBack+0x20>
 3ce:	08 95       	ret
		case EXTI_INT0:
		EXTI_INT0_Fptr=CallBack_func;
 3d0:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <EXTI_INT0_Fptr+0x1>
 3d4:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <EXTI_INT0_Fptr>
		break;
 3d8:	08 95       	ret
		case EXTI_INT1:
		EXTI_INT1_Fptr=CallBack_func;
 3da:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <EXTI_INT1_Fptr+0x1>
 3de:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <EXTI_INT1_Fptr>
		break;
 3e2:	08 95       	ret
		case EXTI_INT2:
		EXTI_INT2_Fptr=CallBack_func;
 3e4:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <EXTI_INT2_Fptr+0x1>
 3e8:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <EXTI_INT2_Fptr>
 3ec:	08 95       	ret

000003ee <__vector_1>:




ISR(EXTI_INT0_vect)
{
 3ee:	1f 92       	push	r1
 3f0:	0f 92       	push	r0
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	0f 92       	push	r0
 3f6:	11 24       	eor	r1, r1
 3f8:	2f 93       	push	r18
 3fa:	3f 93       	push	r19
 3fc:	4f 93       	push	r20
 3fe:	5f 93       	push	r21
 400:	6f 93       	push	r22
 402:	7f 93       	push	r23
 404:	8f 93       	push	r24
 406:	9f 93       	push	r25
 408:	af 93       	push	r26
 40a:	bf 93       	push	r27
 40c:	ef 93       	push	r30
 40e:	ff 93       	push	r31
	
	if (EXTI_INT0_Fptr!=NULL)
 410:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <EXTI_INT0_Fptr>
 414:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <EXTI_INT0_Fptr+0x1>
 418:	30 97       	sbiw	r30, 0x00	; 0
 41a:	09 f0       	breq	.+2      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
	{
		EXTI_INT0_Fptr();
 41c:	09 95       	icall
	}
}
 41e:	ff 91       	pop	r31
 420:	ef 91       	pop	r30
 422:	bf 91       	pop	r27
 424:	af 91       	pop	r26
 426:	9f 91       	pop	r25
 428:	8f 91       	pop	r24
 42a:	7f 91       	pop	r23
 42c:	6f 91       	pop	r22
 42e:	5f 91       	pop	r21
 430:	4f 91       	pop	r20
 432:	3f 91       	pop	r19
 434:	2f 91       	pop	r18
 436:	0f 90       	pop	r0
 438:	0f be       	out	0x3f, r0	; 63
 43a:	0f 90       	pop	r0
 43c:	1f 90       	pop	r1
 43e:	18 95       	reti

00000440 <__vector_2>:
ISR(EXTI_INT1_vect)
{
 440:	1f 92       	push	r1
 442:	0f 92       	push	r0
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	0f 92       	push	r0
 448:	11 24       	eor	r1, r1
 44a:	2f 93       	push	r18
 44c:	3f 93       	push	r19
 44e:	4f 93       	push	r20
 450:	5f 93       	push	r21
 452:	6f 93       	push	r22
 454:	7f 93       	push	r23
 456:	8f 93       	push	r24
 458:	9f 93       	push	r25
 45a:	af 93       	push	r26
 45c:	bf 93       	push	r27
 45e:	ef 93       	push	r30
 460:	ff 93       	push	r31
	if (EXTI_INT1_Fptr!=NULL)
 462:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <EXTI_INT1_Fptr>
 466:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <EXTI_INT1_Fptr+0x1>
 46a:	30 97       	sbiw	r30, 0x00	; 0
 46c:	09 f0       	breq	.+2      	; 0x470 <__vector_2+0x30>
	{
		EXTI_INT1_Fptr();
 46e:	09 95       	icall
	}
}
 470:	ff 91       	pop	r31
 472:	ef 91       	pop	r30
 474:	bf 91       	pop	r27
 476:	af 91       	pop	r26
 478:	9f 91       	pop	r25
 47a:	8f 91       	pop	r24
 47c:	7f 91       	pop	r23
 47e:	6f 91       	pop	r22
 480:	5f 91       	pop	r21
 482:	4f 91       	pop	r20
 484:	3f 91       	pop	r19
 486:	2f 91       	pop	r18
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <__vector_3>:
ISR(EXTI_INT2_vect)
{
 492:	1f 92       	push	r1
 494:	0f 92       	push	r0
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	0f 92       	push	r0
 49a:	11 24       	eor	r1, r1
 49c:	2f 93       	push	r18
 49e:	3f 93       	push	r19
 4a0:	4f 93       	push	r20
 4a2:	5f 93       	push	r21
 4a4:	6f 93       	push	r22
 4a6:	7f 93       	push	r23
 4a8:	8f 93       	push	r24
 4aa:	9f 93       	push	r25
 4ac:	af 93       	push	r26
 4ae:	bf 93       	push	r27
 4b0:	ef 93       	push	r30
 4b2:	ff 93       	push	r31
	if (EXTI_INT2_Fptr!=NULL)
 4b4:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <EXTI_INT2_Fptr>
 4b8:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <EXTI_INT2_Fptr+0x1>
 4bc:	30 97       	sbiw	r30, 0x00	; 0
 4be:	09 f0       	breq	.+2      	; 0x4c2 <__vector_3+0x30>
	{
		EXTI_INT2_Fptr();
 4c0:	09 95       	icall
	}
}
 4c2:	ff 91       	pop	r31
 4c4:	ef 91       	pop	r30
 4c6:	bf 91       	pop	r27
 4c8:	af 91       	pop	r26
 4ca:	9f 91       	pop	r25
 4cc:	8f 91       	pop	r24
 4ce:	7f 91       	pop	r23
 4d0:	6f 91       	pop	r22
 4d2:	5f 91       	pop	r21
 4d4:	4f 91       	pop	r20
 4d6:	3f 91       	pop	r19
 4d8:	2f 91       	pop	r18
 4da:	0f 90       	pop	r0
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	0f 90       	pop	r0
 4e0:	1f 90       	pop	r1
 4e2:	18 95       	reti

000004e4 <LCD_voidSendCommand>:
	LCD_voidSendCommand(Local_u8add);
	for(u8 i = 0 ; i < 8 ; i++)
	{
		LCD_voidSendData(Copy_pu8CharArray[i]);
	}
}
 4e4:	cf 93       	push	r28
 4e6:	c8 2f       	mov	r28, r24
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	83 e0       	ldi	r24, 0x03	; 3
 4ec:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 4f0:	6c 2f       	mov	r22, r28
 4f2:	66 1f       	adc	r22, r22
 4f4:	66 27       	eor	r22, r22
 4f6:	66 1f       	adc	r22, r22
 4f8:	8c e0       	ldi	r24, 0x0C	; 12
 4fa:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 4fe:	c6 fb       	bst	r28, 6
 500:	66 27       	eor	r22, r22
 502:	60 f9       	bld	r22, 0
 504:	8a e0       	ldi	r24, 0x0A	; 10
 506:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 50a:	c5 fb       	bst	r28, 5
 50c:	66 27       	eor	r22, r22
 50e:	60 f9       	bld	r22, 0
 510:	89 e0       	ldi	r24, 0x09	; 9
 512:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 516:	c4 fb       	bst	r28, 4
 518:	66 27       	eor	r22, r22
 51a:	60 f9       	bld	r22, 0
 51c:	88 e0       	ldi	r24, 0x08	; 8
 51e:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 522:	61 e0       	ldi	r22, 0x01	; 1
 524:	82 e0       	ldi	r24, 0x02	; 2
 526:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 52a:	8f e9       	ldi	r24, 0x9F	; 159
 52c:	9f e0       	ldi	r25, 0x0F	; 15
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <LCD_voidSendCommand+0x4a>
 532:	00 c0       	rjmp	.+0      	; 0x534 <LCD_voidSendCommand+0x50>
 534:	00 00       	nop
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	82 e0       	ldi	r24, 0x02	; 2
 53a:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 53e:	8f e9       	ldi	r24, 0x9F	; 159
 540:	9f e0       	ldi	r25, 0x0F	; 15
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <LCD_voidSendCommand+0x5e>
 546:	00 c0       	rjmp	.+0      	; 0x548 <LCD_voidSendCommand+0x64>
 548:	00 00       	nop
 54a:	c3 fb       	bst	r28, 3
 54c:	66 27       	eor	r22, r22
 54e:	60 f9       	bld	r22, 0
 550:	8c e0       	ldi	r24, 0x0C	; 12
 552:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 556:	c2 fb       	bst	r28, 2
 558:	66 27       	eor	r22, r22
 55a:	60 f9       	bld	r22, 0
 55c:	8a e0       	ldi	r24, 0x0A	; 10
 55e:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 562:	c1 fb       	bst	r28, 1
 564:	66 27       	eor	r22, r22
 566:	60 f9       	bld	r22, 0
 568:	89 e0       	ldi	r24, 0x09	; 9
 56a:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 56e:	6c 2f       	mov	r22, r28
 570:	61 70       	andi	r22, 0x01	; 1
 572:	88 e0       	ldi	r24, 0x08	; 8
 574:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 578:	61 e0       	ldi	r22, 0x01	; 1
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 580:	8f e9       	ldi	r24, 0x9F	; 159
 582:	9f e0       	ldi	r25, 0x0F	; 15
 584:	01 97       	sbiw	r24, 0x01	; 1
 586:	f1 f7       	brne	.-4      	; 0x584 <LCD_voidSendCommand+0xa0>
 588:	00 c0       	rjmp	.+0      	; 0x58a <LCD_voidSendCommand+0xa6>
 58a:	00 00       	nop
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 594:	8f e9       	ldi	r24, 0x9F	; 159
 596:	9f e0       	ldi	r25, 0x0F	; 15
 598:	01 97       	sbiw	r24, 0x01	; 1
 59a:	f1 f7       	brne	.-4      	; 0x598 <LCD_voidSendCommand+0xb4>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <LCD_voidSendCommand+0xba>
 59e:	00 00       	nop
 5a0:	cf 91       	pop	r28
 5a2:	08 95       	ret

000005a4 <LCD_voidSendData>:
 5a4:	cf 93       	push	r28
 5a6:	c8 2f       	mov	r28, r24
 5a8:	61 e0       	ldi	r22, 0x01	; 1
 5aa:	83 e0       	ldi	r24, 0x03	; 3
 5ac:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 5b0:	6c 2f       	mov	r22, r28
 5b2:	66 1f       	adc	r22, r22
 5b4:	66 27       	eor	r22, r22
 5b6:	66 1f       	adc	r22, r22
 5b8:	8c e0       	ldi	r24, 0x0C	; 12
 5ba:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 5be:	c6 fb       	bst	r28, 6
 5c0:	66 27       	eor	r22, r22
 5c2:	60 f9       	bld	r22, 0
 5c4:	8a e0       	ldi	r24, 0x0A	; 10
 5c6:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 5ca:	c5 fb       	bst	r28, 5
 5cc:	66 27       	eor	r22, r22
 5ce:	60 f9       	bld	r22, 0
 5d0:	89 e0       	ldi	r24, 0x09	; 9
 5d2:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 5d6:	c4 fb       	bst	r28, 4
 5d8:	66 27       	eor	r22, r22
 5da:	60 f9       	bld	r22, 0
 5dc:	88 e0       	ldi	r24, 0x08	; 8
 5de:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 5e2:	61 e0       	ldi	r22, 0x01	; 1
 5e4:	82 e0       	ldi	r24, 0x02	; 2
 5e6:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 5ea:	8f e9       	ldi	r24, 0x9F	; 159
 5ec:	9f e0       	ldi	r25, 0x0F	; 15
 5ee:	01 97       	sbiw	r24, 0x01	; 1
 5f0:	f1 f7       	brne	.-4      	; 0x5ee <LCD_voidSendData+0x4a>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <LCD_voidSendData+0x50>
 5f4:	00 00       	nop
 5f6:	60 e0       	ldi	r22, 0x00	; 0
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 5fe:	8f e9       	ldi	r24, 0x9F	; 159
 600:	9f e0       	ldi	r25, 0x0F	; 15
 602:	01 97       	sbiw	r24, 0x01	; 1
 604:	f1 f7       	brne	.-4      	; 0x602 <LCD_voidSendData+0x5e>
 606:	00 c0       	rjmp	.+0      	; 0x608 <LCD_voidSendData+0x64>
 608:	00 00       	nop
 60a:	c3 fb       	bst	r28, 3
 60c:	66 27       	eor	r22, r22
 60e:	60 f9       	bld	r22, 0
 610:	8c e0       	ldi	r24, 0x0C	; 12
 612:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 616:	c2 fb       	bst	r28, 2
 618:	66 27       	eor	r22, r22
 61a:	60 f9       	bld	r22, 0
 61c:	8a e0       	ldi	r24, 0x0A	; 10
 61e:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 622:	c1 fb       	bst	r28, 1
 624:	66 27       	eor	r22, r22
 626:	60 f9       	bld	r22, 0
 628:	89 e0       	ldi	r24, 0x09	; 9
 62a:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 62e:	6c 2f       	mov	r22, r28
 630:	61 70       	andi	r22, 0x01	; 1
 632:	88 e0       	ldi	r24, 0x08	; 8
 634:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 638:	61 e0       	ldi	r22, 0x01	; 1
 63a:	82 e0       	ldi	r24, 0x02	; 2
 63c:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 640:	8f e9       	ldi	r24, 0x9F	; 159
 642:	9f e0       	ldi	r25, 0x0F	; 15
 644:	01 97       	sbiw	r24, 0x01	; 1
 646:	f1 f7       	brne	.-4      	; 0x644 <LCD_voidSendData+0xa0>
 648:	00 c0       	rjmp	.+0      	; 0x64a <LCD_voidSendData+0xa6>
 64a:	00 00       	nop
 64c:	60 e0       	ldi	r22, 0x00	; 0
 64e:	82 e0       	ldi	r24, 0x02	; 2
 650:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_enuWriteChannel>
 654:	8f e9       	ldi	r24, 0x9F	; 159
 656:	9f e0       	ldi	r25, 0x0F	; 15
 658:	01 97       	sbiw	r24, 0x01	; 1
 65a:	f1 f7       	brne	.-4      	; 0x658 <LCD_voidSendData+0xb4>
 65c:	00 c0       	rjmp	.+0      	; 0x65e <LCD_voidSendData+0xba>
 65e:	00 00       	nop
 660:	cf 91       	pop	r28
 662:	08 95       	ret

00000664 <LCD_voidInit>:
 664:	2f ef       	ldi	r18, 0xFF	; 255
 666:	80 e7       	ldi	r24, 0x70	; 112
 668:	92 e0       	ldi	r25, 0x02	; 2
 66a:	21 50       	subi	r18, 0x01	; 1
 66c:	80 40       	sbci	r24, 0x00	; 0
 66e:	90 40       	sbci	r25, 0x00	; 0
 670:	e1 f7       	brne	.-8      	; 0x66a <LCD_voidInit+0x6>
 672:	00 c0       	rjmp	.+0      	; 0x674 <LCD_voidInit+0x10>
 674:	00 00       	nop
 676:	82 e0       	ldi	r24, 0x02	; 2
 678:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSendCommand>
 67c:	88 e2       	ldi	r24, 0x28	; 40
 67e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSendCommand>
 682:	8f e9       	ldi	r24, 0x9F	; 159
 684:	9f e0       	ldi	r25, 0x0F	; 15
 686:	01 97       	sbiw	r24, 0x01	; 1
 688:	f1 f7       	brne	.-4      	; 0x686 <LCD_voidInit+0x22>
 68a:	00 c0       	rjmp	.+0      	; 0x68c <LCD_voidInit+0x28>
 68c:	00 00       	nop
 68e:	8c e0       	ldi	r24, 0x0C	; 12
 690:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSendCommand>
 694:	8f e9       	ldi	r24, 0x9F	; 159
 696:	9f e0       	ldi	r25, 0x0F	; 15
 698:	01 97       	sbiw	r24, 0x01	; 1
 69a:	f1 f7       	brne	.-4      	; 0x698 <LCD_voidInit+0x34>
 69c:	00 c0       	rjmp	.+0      	; 0x69e <LCD_voidInit+0x3a>
 69e:	00 00       	nop
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSendCommand>
 6a6:	8f e3       	ldi	r24, 0x3F	; 63
 6a8:	9f e1       	ldi	r25, 0x1F	; 31
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <LCD_voidInit+0x46>
 6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <LCD_voidInit+0x4c>
 6b0:	00 00       	nop
 6b2:	86 e0       	ldi	r24, 0x06	; 6
 6b4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSendCommand>
 6b8:	8f e3       	ldi	r24, 0x3F	; 63
 6ba:	9f e1       	ldi	r25, 0x1F	; 31
 6bc:	01 97       	sbiw	r24, 0x01	; 1
 6be:	f1 f7       	brne	.-4      	; 0x6bc <LCD_voidInit+0x58>
 6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <LCD_voidInit+0x5e>
 6c2:	00 00       	nop
 6c4:	08 95       	ret

000006c6 <LCD_voidDisplayChar>:
 6c6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <LCD_voidSendData>
 6ca:	08 95       	ret

000006cc <LCD_voidDisplayString>:
 6cc:	0f 93       	push	r16
 6ce:	1f 93       	push	r17
 6d0:	cf 93       	push	r28
 6d2:	8c 01       	movw	r16, r24
 6d4:	c0 e0       	ldi	r28, 0x00	; 0
 6d6:	03 c0       	rjmp	.+6      	; 0x6de <LCD_voidDisplayString+0x12>
 6d8:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_voidDisplayChar>
 6dc:	cf 5f       	subi	r28, 0xFF	; 255
 6de:	f8 01       	movw	r30, r16
 6e0:	ec 0f       	add	r30, r28
 6e2:	f1 1d       	adc	r31, r1
 6e4:	80 81       	ld	r24, Z
 6e6:	81 11       	cpse	r24, r1
 6e8:	f7 cf       	rjmp	.-18     	; 0x6d8 <LCD_voidDisplayString+0xc>
 6ea:	cf 91       	pop	r28
 6ec:	1f 91       	pop	r17
 6ee:	0f 91       	pop	r16
 6f0:	08 95       	ret

000006f2 <LCD_voidGoToXY>:
 6f2:	61 11       	cpse	r22, r1
 6f4:	04 c0       	rjmp	.+8      	; 0x6fe <LCD_voidGoToXY+0xc>
 6f6:	80 58       	subi	r24, 0x80	; 128
 6f8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSendCommand>
 6fc:	08 95       	ret
 6fe:	61 30       	cpi	r22, 0x01	; 1
 700:	21 f4       	brne	.+8      	; 0x70a <LCD_voidGoToXY+0x18>
 702:	80 54       	subi	r24, 0x40	; 64
 704:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSendCommand>
 708:	08 95       	ret
 70a:	62 30       	cpi	r22, 0x02	; 2
 70c:	21 f4       	brne	.+8      	; 0x716 <LCD_voidGoToXY+0x24>
 70e:	8c 56       	subi	r24, 0x6C	; 108
 710:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSendCommand>
 714:	08 95       	ret
 716:	63 30       	cpi	r22, 0x03	; 3
 718:	19 f4       	brne	.+6      	; 0x720 <LCD_voidGoToXY+0x2e>
 71a:	8c 52       	subi	r24, 0x2C	; 44
 71c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSendCommand>
 720:	08 95       	ret

00000722 <LCD_voidDisplayNumbers>:


void LCD_voidDisplayNumbers(u32 Copy_u32Number)
{
 722:	1f 93       	push	r17
 724:	cf 93       	push	r28
 726:	df 93       	push	r29
 728:	cd b7       	in	r28, 0x3d	; 61
 72a:	de b7       	in	r29, 0x3e	; 62
 72c:	60 97       	sbiw	r28, 0x10	; 16
 72e:	0f b6       	in	r0, 0x3f	; 63
 730:	f8 94       	cli
 732:	de bf       	out	0x3e, r29	; 62
 734:	0f be       	out	0x3f, r0	; 63
 736:	cd bf       	out	0x3d, r28	; 61
	u8 rem,i=0,str[16];
	s8 j;
	if (Copy_u32Number==0)
 738:	61 15       	cp	r22, r1
 73a:	71 05       	cpc	r23, r1
 73c:	81 05       	cpc	r24, r1
 73e:	91 05       	cpc	r25, r1
 740:	c1 f4       	brne	.+48     	; 0x772 <LCD_voidDisplayNumbers+0x50>
	{
		LCD_voidDisplayChar('0');
 742:	80 e3       	ldi	r24, 0x30	; 48
 744:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_voidDisplayChar>
 748:	2a c0       	rjmp	.+84     	; 0x79e <LCD_voidDisplayNumbers+0x7c>
		LCD_voidDisplayChar('-');
	}
	
	while(Copy_u32Number)
	{
		rem=Copy_u32Number%10;
 74a:	2a e0       	ldi	r18, 0x0A	; 10
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	40 e0       	ldi	r20, 0x00	; 0
 750:	50 e0       	ldi	r21, 0x00	; 0
 752:	0e 94 bf 04 	call	0x97e	; 0x97e <__udivmodsi4>
		rem=rem+'0';
 756:	60 5d       	subi	r22, 0xD0	; 208
		str[i]=rem;
 758:	e1 e0       	ldi	r30, 0x01	; 1
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	ec 0f       	add	r30, r28
 75e:	fd 1f       	adc	r31, r29
 760:	e1 0f       	add	r30, r17
 762:	f1 1d       	adc	r31, r1
 764:	60 83       	st	Z, r22
		i++;
 766:	1f 5f       	subi	r17, 0xFF	; 255
		Copy_u32Number=Copy_u32Number/10;
 768:	62 2f       	mov	r22, r18
 76a:	73 2f       	mov	r23, r19
 76c:	84 2f       	mov	r24, r20
 76e:	95 2f       	mov	r25, r21
 770:	01 c0       	rjmp	.+2      	; 0x774 <LCD_voidDisplayNumbers+0x52>
 772:	10 e0       	ldi	r17, 0x00	; 0
	{
		Copy_u32Number=Copy_u32Number*(-1);
		LCD_voidDisplayChar('-');
	}
	
	while(Copy_u32Number)
 774:	61 15       	cp	r22, r1
 776:	71 05       	cpc	r23, r1
 778:	81 05       	cpc	r24, r1
 77a:	91 05       	cpc	r25, r1
 77c:	31 f7       	brne	.-52     	; 0x74a <LCD_voidDisplayNumbers+0x28>
		str[i]=rem;
		i++;
		Copy_u32Number=Copy_u32Number/10;
	}
	
	for (j=i-1;j>=0;j--)
 77e:	11 50       	subi	r17, 0x01	; 1
 780:	0c c0       	rjmp	.+24     	; 0x79a <LCD_voidDisplayNumbers+0x78>
	{
		LCD_voidDisplayChar(str[j]);
 782:	e1 e0       	ldi	r30, 0x01	; 1
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	ec 0f       	add	r30, r28
 788:	fd 1f       	adc	r31, r29
 78a:	e1 0f       	add	r30, r17
 78c:	f1 1d       	adc	r31, r1
 78e:	17 fd       	sbrc	r17, 7
 790:	fa 95       	dec	r31
 792:	80 81       	ld	r24, Z
 794:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_voidDisplayChar>
		str[i]=rem;
		i++;
		Copy_u32Number=Copy_u32Number/10;
	}
	
	for (j=i-1;j>=0;j--)
 798:	11 50       	subi	r17, 0x01	; 1
 79a:	11 23       	and	r17, r17
 79c:	94 f7       	brge	.-28     	; 0x782 <LCD_voidDisplayNumbers+0x60>
	{
		LCD_voidDisplayChar(str[j]);
	}
}
 79e:	60 96       	adiw	r28, 0x10	; 16
 7a0:	0f b6       	in	r0, 0x3f	; 63
 7a2:	f8 94       	cli
 7a4:	de bf       	out	0x3e, r29	; 62
 7a6:	0f be       	out	0x3f, r0	; 63
 7a8:	cd bf       	out	0x3d, r28	; 61
 7aa:	df 91       	pop	r29
 7ac:	cf 91       	pop	r28
 7ae:	1f 91       	pop	r17
 7b0:	08 95       	ret

000007b2 <T_voidSetMode>:
	return Local_u8Result;
}

void T_voidSetMode()
{
	Global_u8Mode = Global_u8Mode ^ 1;
 7b2:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	89 27       	eor	r24, r25
 7ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(Global_u8Mode == 0)
 7be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7c2:	81 11       	cpse	r24, r1
 7c4:	09 c0       	rjmp	.+18     	; 0x7d8 <T_voidSetMode+0x26>
	{
		LCD_voidGoToXY(18,1);
 7c6:	61 e0       	ldi	r22, 0x01	; 1
 7c8:	82 e1       	ldi	r24, 0x12	; 18
 7ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_voidGoToXY>
		LCD_voidDisplayString("V ");
 7ce:	81 e6       	ldi	r24, 0x61	; 97
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	0e 94 66 03 	call	0x6cc	; 0x6cc <LCD_voidDisplayString>
 7d6:	08 95       	ret
	}
	else if(Global_u8Mode == 1)
 7d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7dc:	81 30       	cpi	r24, 0x01	; 1
 7de:	41 f4       	brne	.+16     	; 0x7f0 <T_voidSetMode+0x3e>
	{
		LCD_voidGoToXY(18,1);
 7e0:	61 e0       	ldi	r22, 0x01	; 1
 7e2:	82 e1       	ldi	r24, 0x12	; 18
 7e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_voidGoToXY>
		LCD_voidDisplayString("mV");
 7e8:	84 e6       	ldi	r24, 0x64	; 100
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	0e 94 66 03 	call	0x6cc	; 0x6cc <LCD_voidDisplayString>
 7f0:	08 95       	ret

000007f2 <ADC_voidReadMVolt>:
#include "EXTI.h"

volatile u8 Global_u8Mode = 1;

u16 ADC_voidReadMVolt(u8 Copy_u8Channel)
{
 7f2:	cf 93       	push	r28
 7f4:	df 93       	push	r29
 7f6:	00 d0       	rcall	.+0      	; 0x7f8 <ADC_voidReadMVolt+0x6>
 7f8:	cd b7       	in	r28, 0x3d	; 61
 7fa:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u8read = 0;
 7fc:	1a 82       	std	Y+2, r1	; 0x02
 7fe:	19 82       	std	Y+1, r1	; 0x01
	ADC_voidReadPolling(Copy_u8Channel,&Local_u8read);
 800:	be 01       	movw	r22, r28
 802:	6f 5f       	subi	r22, 0xFF	; 255
 804:	7f 4f       	sbci	r23, 0xFF	; 255
 806:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_voidReadPolling>
	u16 Local_u8Result = ((u32)Local_u8read*5000)/1023;
 80a:	29 81       	ldd	r18, Y+1	; 0x01
 80c:	3a 81       	ldd	r19, Y+2	; 0x02
 80e:	a8 e8       	ldi	r26, 0x88	; 136
 810:	b3 e1       	ldi	r27, 0x13	; 19
 812:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__umulhisi3>
 816:	2f ef       	ldi	r18, 0xFF	; 255
 818:	33 e0       	ldi	r19, 0x03	; 3
 81a:	40 e0       	ldi	r20, 0x00	; 0
 81c:	50 e0       	ldi	r21, 0x00	; 0
 81e:	0e 94 bf 04 	call	0x97e	; 0x97e <__udivmodsi4>
	return Local_u8Result;
}
 822:	c9 01       	movw	r24, r18
 824:	0f 90       	pop	r0
 826:	0f 90       	pop	r0
 828:	df 91       	pop	r29
 82a:	cf 91       	pop	r28
 82c:	08 95       	ret

0000082e <LCD_DisplayVolt>:
		LCD_voidDisplayString("mV");
	}
}

void LCD_DisplayVolt(u16 Copy_u16Volt)
{
 82e:	cf 93       	push	r28
 830:	df 93       	push	r29
 832:	00 d0       	rcall	.+0      	; 0x834 <LCD_DisplayVolt+0x6>
 834:	00 d0       	rcall	.+0      	; 0x836 <LCD_DisplayVolt+0x8>
 836:	cd b7       	in	r28, 0x3d	; 61
 838:	de b7       	in	r29, 0x3e	; 62
 83a:	fc 01       	movw	r30, r24
	u8 Local_u8Arr[4];
	for(u8 i = 0 ; i < 4; i++)
 83c:	40 e0       	ldi	r20, 0x00	; 0
 83e:	2d c0       	rjmp	.+90     	; 0x89a <__stack+0x3b>
	{
		Local_u8Arr[i] = Copy_u16Volt%10;
 840:	9f 01       	movw	r18, r30
 842:	ad ec       	ldi	r26, 0xCD	; 205
 844:	bc ec       	ldi	r27, 0xCC	; 204
 846:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__umulhisi3>
 84a:	96 95       	lsr	r25
 84c:	87 95       	ror	r24
 84e:	96 95       	lsr	r25
 850:	87 95       	ror	r24
 852:	96 95       	lsr	r25
 854:	87 95       	ror	r24
 856:	9c 01       	movw	r18, r24
 858:	22 0f       	add	r18, r18
 85a:	33 1f       	adc	r19, r19
 85c:	88 0f       	add	r24, r24
 85e:	99 1f       	adc	r25, r25
 860:	88 0f       	add	r24, r24
 862:	99 1f       	adc	r25, r25
 864:	88 0f       	add	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	82 0f       	add	r24, r18
 86a:	93 1f       	adc	r25, r19
 86c:	9f 01       	movw	r18, r30
 86e:	28 1b       	sub	r18, r24
 870:	39 0b       	sbc	r19, r25
 872:	a1 e0       	ldi	r26, 0x01	; 1
 874:	b0 e0       	ldi	r27, 0x00	; 0
 876:	ac 0f       	add	r26, r28
 878:	bd 1f       	adc	r27, r29
 87a:	a4 0f       	add	r26, r20
 87c:	b1 1d       	adc	r27, r1
 87e:	2c 93       	st	X, r18
		Copy_u16Volt/=10;
 880:	9f 01       	movw	r18, r30
 882:	ad ec       	ldi	r26, 0xCD	; 205
 884:	bc ec       	ldi	r27, 0xCC	; 204
 886:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__umulhisi3>
 88a:	fc 01       	movw	r30, r24
 88c:	f6 95       	lsr	r31
 88e:	e7 95       	ror	r30
 890:	f6 95       	lsr	r31
 892:	e7 95       	ror	r30
 894:	f6 95       	lsr	r31
 896:	e7 95       	ror	r30
}

void LCD_DisplayVolt(u16 Copy_u16Volt)
{
	u8 Local_u8Arr[4];
	for(u8 i = 0 ; i < 4; i++)
 898:	4f 5f       	subi	r20, 0xFF	; 255
 89a:	44 30       	cpi	r20, 0x04	; 4
 89c:	88 f2       	brcs	.-94     	; 0x840 <LCD_DisplayVolt+0x12>
	{
		Local_u8Arr[i] = Copy_u16Volt%10;
		Copy_u16Volt/=10;
	}
	LCD_voidDisplayChar(Local_u8Arr[3] + '0');
 89e:	8c 81       	ldd	r24, Y+4	; 0x04
 8a0:	80 5d       	subi	r24, 0xD0	; 208
 8a2:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_voidDisplayChar>
	LCD_voidDisplayChar('.');
 8a6:	8e e2       	ldi	r24, 0x2E	; 46
 8a8:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_voidDisplayChar>
	LCD_voidDisplayChar(Local_u8Arr[2] + '0');
 8ac:	8b 81       	ldd	r24, Y+3	; 0x03
 8ae:	80 5d       	subi	r24, 0xD0	; 208
 8b0:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_voidDisplayChar>
	//LCD_voidDisplayChar(Local_u8Arr[1] + '0');
	//LCD_voidDisplayChar(Local_u8Arr[0] + '0');
}
 8b4:	0f 90       	pop	r0
 8b6:	0f 90       	pop	r0
 8b8:	0f 90       	pop	r0
 8ba:	0f 90       	pop	r0
 8bc:	df 91       	pop	r29
 8be:	cf 91       	pop	r28
 8c0:	08 95       	ret

000008c2 <main>:
int main(void)
{
	Port_vidInit();
 8c2:	0e 94 b1 04 	call	0x962	; 0x962 <Port_vidInit>
	LCD_voidInit();
 8c6:	0e 94 32 03 	call	0x664	; 0x664 <LCD_voidInit>
	ADC_voidInit(ADC_VREF_AVCC,ADC_Prescaler_128);
 8ca:	67 e0       	ldi	r22, 0x07	; 7
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidInit>
	ADC_Enable();
 8d2:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_Enable>
	EXTI_voidEnable(EXTI_INT0);
 8d6:	80 e0       	ldi	r24, 0x00	; 0
 8d8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <EXTI_voidEnable>
	EXTI_voidSetCallBack(EXTI_INT0,T_voidSetMode);
 8dc:	69 ed       	ldi	r22, 0xD9	; 217
 8de:	73 e0       	ldi	r23, 0x03	; 3
 8e0:	80 e0       	ldi	r24, 0x00	; 0
 8e2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <EXTI_voidSetCallBack>
	EXTI_voidSetPinMode(EXTI_INT0,EXTI_FALLING);
 8e6:	60 e0       	ldi	r22, 0x00	; 0
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	0e 94 82 01 	call	0x304	; 0x304 <EXTI_voidSetPinMode>
	
	//ADC_InterruptEnable();
	
	GIE();
 8ee:	78 94       	sei
	LCD_voidDisplayString("VOLT:");
 8f0:	87 e6       	ldi	r24, 0x67	; 103
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 94 66 03 	call	0x6cc	; 0x6cc <LCD_voidDisplayString>
	LCD_voidGoToXY(18,1);
 8f8:	61 e0       	ldi	r22, 0x01	; 1
 8fa:	82 e1       	ldi	r24, 0x12	; 18
 8fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_voidGoToXY>
	LCD_voidDisplayString("mV");
 900:	84 e6       	ldi	r24, 0x64	; 100
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	0e 94 66 03 	call	0x6cc	; 0x6cc <LCD_voidDisplayString>
	u16 V;
	
	
	while (1)
	{
		switch(Global_u8Mode)
 908:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 90c:	88 23       	and	r24, r24
 90e:	19 f0       	breq	.+6      	; 0x916 <main+0x54>
 910:	81 30       	cpi	r24, 0x01	; 1
 912:	99 f0       	breq	.+38     	; 0x93a <main+0x78>
 914:	f9 cf       	rjmp	.-14     	; 0x908 <main+0x46>
		{
			case 0 :
			V = ADC_voidReadMVolt(ADC_CH0);
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ADC_voidReadMVolt>
 91c:	ec 01       	movw	r28, r24
			GID();
 91e:	f8 94       	cli
			LCD_voidGoToXY(5,0);
 920:	60 e0       	ldi	r22, 0x00	; 0
 922:	85 e0       	ldi	r24, 0x05	; 5
 924:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_voidGoToXY>
			LCD_DisplayVolt(V);
 928:	ce 01       	movw	r24, r28
 92a:	0e 94 17 04 	call	0x82e	; 0x82e <LCD_DisplayVolt>
			LCD_voidDisplayString("    ");
 92e:	8d e6       	ldi	r24, 0x6D	; 109
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	0e 94 66 03 	call	0x6cc	; 0x6cc <LCD_voidDisplayString>
			GIE();
 936:	78 94       	sei
			break;
 938:	e7 cf       	rjmp	.-50     	; 0x908 <main+0x46>
			case 1 :
			mV = ADC_voidReadMVolt(ADC_CH0);
 93a:	80 e0       	ldi	r24, 0x00	; 0
 93c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ADC_voidReadMVolt>
 940:	ec 01       	movw	r28, r24
			GID();
 942:	f8 94       	cli
			LCD_voidGoToXY(5,0);
 944:	60 e0       	ldi	r22, 0x00	; 0
 946:	85 e0       	ldi	r24, 0x05	; 5
 948:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_voidGoToXY>
			LCD_voidDisplayNumbers(mV);
 94c:	be 01       	movw	r22, r28
 94e:	80 e0       	ldi	r24, 0x00	; 0
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	0e 94 91 03 	call	0x722	; 0x722 <LCD_voidDisplayNumbers>
			LCD_voidDisplayString("    ");
 956:	8d e6       	ldi	r24, 0x6D	; 109
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	0e 94 66 03 	call	0x6cc	; 0x6cc <LCD_voidDisplayString>
			GIE();
 95e:	78 94       	sei
			break;
 960:	d3 cf       	rjmp	.-90     	; 0x908 <main+0x46>

00000962 <Port_vidInit>:
#define PORT_u8OUTPUT_LOW		1

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		0

	DDRA = CONC(PORT_u8MODEPIN07,PORT_u8MODEPIN06,PORT_u8MODEPIN05,PORT_u8MODEPIN04,PORT_u8MODEPIN03,PORT_u8MODEPIN02,PORT_u8MODEPIN01,PORT_u8MODEPIN00);
 962:	8e ef       	ldi	r24, 0xFE	; 254
 964:	8a bb       	out	0x1a, r24	; 26
	DDRB = CONC(PORT_u8MODEPIN15,PORT_u8MODEPIN14,PORT_u8MODEPIN13,PORT_u8MODEPIN12,PORT_u8MODEPIN11,PORT_u8MODEPIN10,PORT_u8MODEPIN09,PORT_u8MODEPIN08);
 966:	8f ef       	ldi	r24, 0xFF	; 255
 968:	87 bb       	out	0x17, r24	; 23
	DDRC = CONC(PORT_u8MODEPIN23,PORT_u8MODEPIN22,PORT_u8MODEPIN21,PORT_u8MODEPIN20,PORT_u8MODEPIN19,PORT_u8MODEPIN18,PORT_u8MODEPIN17,PORT_u8MODEPIN16);
 96a:	84 bb       	out	0x14, r24	; 20
	DDRD = CONC(PORT_u8MODEPIN31,PORT_u8MODEPIN30,PORT_u8MODEPIN29,PORT_u8MODEPIN28,PORT_u8MODEPIN27,PORT_u8MODEPIN26,PORT_u8MODEPIN25,PORT_u8MODEPIN24);
 96c:	83 e1       	ldi	r24, 0x13	; 19
 96e:	81 bb       	out	0x11, r24	; 17
#define PORT_u8OUTPUT_LOW		0

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		1

	PORTA = CONC(PORT_u8MODEPIN07,PORT_u8MODEPIN06,PORT_u8MODEPIN05,PORT_u8MODEPIN04,PORT_u8MODEPIN03,PORT_u8MODEPIN02,PORT_u8MODEPIN01,PORT_u8MODEPIN00);
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	8b bb       	out	0x1b, r24	; 27
	PORTB = CONC(PORT_u8MODEPIN15,PORT_u8MODEPIN14,PORT_u8MODEPIN13,PORT_u8MODEPIN12,PORT_u8MODEPIN11,PORT_u8MODEPIN10,PORT_u8MODEPIN09,PORT_u8MODEPIN08);
 974:	18 ba       	out	0x18, r1	; 24
	PORTC = CONC(PORT_u8MODEPIN23,PORT_u8MODEPIN22,PORT_u8MODEPIN21,PORT_u8MODEPIN20,PORT_u8MODEPIN19,PORT_u8MODEPIN18,PORT_u8MODEPIN17,PORT_u8MODEPIN16);
 976:	15 ba       	out	0x15, r1	; 21
	PORTD = CONC(PORT_u8MODEPIN31,PORT_u8MODEPIN30,PORT_u8MODEPIN29,PORT_u8MODEPIN28,PORT_u8MODEPIN27,PORT_u8MODEPIN26,PORT_u8MODEPIN25,PORT_u8MODEPIN24);
 978:	8c ee       	ldi	r24, 0xEC	; 236
 97a:	82 bb       	out	0x12, r24	; 18
 97c:	08 95       	ret

0000097e <__udivmodsi4>:
 97e:	a1 e2       	ldi	r26, 0x21	; 33
 980:	1a 2e       	mov	r1, r26
 982:	aa 1b       	sub	r26, r26
 984:	bb 1b       	sub	r27, r27
 986:	fd 01       	movw	r30, r26
 988:	0d c0       	rjmp	.+26     	; 0x9a4 <__udivmodsi4_ep>

0000098a <__udivmodsi4_loop>:
 98a:	aa 1f       	adc	r26, r26
 98c:	bb 1f       	adc	r27, r27
 98e:	ee 1f       	adc	r30, r30
 990:	ff 1f       	adc	r31, r31
 992:	a2 17       	cp	r26, r18
 994:	b3 07       	cpc	r27, r19
 996:	e4 07       	cpc	r30, r20
 998:	f5 07       	cpc	r31, r21
 99a:	20 f0       	brcs	.+8      	; 0x9a4 <__udivmodsi4_ep>
 99c:	a2 1b       	sub	r26, r18
 99e:	b3 0b       	sbc	r27, r19
 9a0:	e4 0b       	sbc	r30, r20
 9a2:	f5 0b       	sbc	r31, r21

000009a4 <__udivmodsi4_ep>:
 9a4:	66 1f       	adc	r22, r22
 9a6:	77 1f       	adc	r23, r23
 9a8:	88 1f       	adc	r24, r24
 9aa:	99 1f       	adc	r25, r25
 9ac:	1a 94       	dec	r1
 9ae:	69 f7       	brne	.-38     	; 0x98a <__udivmodsi4_loop>
 9b0:	60 95       	com	r22
 9b2:	70 95       	com	r23
 9b4:	80 95       	com	r24
 9b6:	90 95       	com	r25
 9b8:	9b 01       	movw	r18, r22
 9ba:	ac 01       	movw	r20, r24
 9bc:	bd 01       	movw	r22, r26
 9be:	cf 01       	movw	r24, r30
 9c0:	08 95       	ret

000009c2 <__umulhisi3>:
 9c2:	a2 9f       	mul	r26, r18
 9c4:	b0 01       	movw	r22, r0
 9c6:	b3 9f       	mul	r27, r19
 9c8:	c0 01       	movw	r24, r0
 9ca:	a3 9f       	mul	r26, r19
 9cc:	70 0d       	add	r23, r0
 9ce:	81 1d       	adc	r24, r1
 9d0:	11 24       	eor	r1, r1
 9d2:	91 1d       	adc	r25, r1
 9d4:	b2 9f       	mul	r27, r18
 9d6:	70 0d       	add	r23, r0
 9d8:	81 1d       	adc	r24, r1
 9da:	11 24       	eor	r1, r1
 9dc:	91 1d       	adc	r25, r1
 9de:	08 95       	ret

000009e0 <_exit>:
 9e0:	f8 94       	cli

000009e2 <__stop_program>:
 9e2:	ff cf       	rjmp	.-2      	; 0x9e2 <__stop_program>
