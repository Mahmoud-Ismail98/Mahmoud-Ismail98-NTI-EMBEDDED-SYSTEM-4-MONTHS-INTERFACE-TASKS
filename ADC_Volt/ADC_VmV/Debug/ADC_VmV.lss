
ADC_VmV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000009e4  00000a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800072  00800072  00000a8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000abc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b14  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa5  00000000  00000000  000027c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012d3  00000000  00000000  00003269  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000450  00000000  00000000  0000453c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000090d  00000000  00000000  0000498c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f58  00000000  00000000  00005299  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000071f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 04 	jmp	0x86c	; 0x86c <__vector_1>
   8:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__vector_2>
   c:	0c 94 88 04 	jmp	0x910	; 0x910 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 38 02 	call	0x470	; 0x470 <main>
  8a:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_voidSendCommand>:
	LCD_voidSendCommand(Local_u8add);
	for(u8 i = 0 ; i < 8 ; i++)
	{
		LCD_voidSendData(Copy_pu8CharArray[i]);
	}
}
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
  9e:	6c 2f       	mov	r22, r28
  a0:	66 1f       	adc	r22, r22
  a2:	66 27       	eor	r22, r22
  a4:	66 1f       	adc	r22, r22
  a6:	8c e0       	ldi	r24, 0x0C	; 12
  a8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
  ac:	c6 fb       	bst	r28, 6
  ae:	66 27       	eor	r22, r22
  b0:	60 f9       	bld	r22, 0
  b2:	8a e0       	ldi	r24, 0x0A	; 10
  b4:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
  b8:	c5 fb       	bst	r28, 5
  ba:	66 27       	eor	r22, r22
  bc:	60 f9       	bld	r22, 0
  be:	89 e0       	ldi	r24, 0x09	; 9
  c0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
  c4:	c4 fb       	bst	r28, 4
  c6:	66 27       	eor	r22, r22
  c8:	60 f9       	bld	r22, 0
  ca:	88 e0       	ldi	r24, 0x08	; 8
  cc:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
  d8:	8f e9       	ldi	r24, 0x9F	; 159
  da:	9f e0       	ldi	r25, 0x0F	; 15
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_voidSendCommand+0x4a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_voidSendCommand+0x50>
  e2:	00 00       	nop
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
  ec:	8f e9       	ldi	r24, 0x9F	; 159
  ee:	9f e0       	ldi	r25, 0x0F	; 15
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCD_voidSendCommand+0x5e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCD_voidSendCommand+0x64>
  f6:	00 00       	nop
  f8:	c3 fb       	bst	r28, 3
  fa:	66 27       	eor	r22, r22
  fc:	60 f9       	bld	r22, 0
  fe:	8c e0       	ldi	r24, 0x0C	; 12
 100:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
 104:	c2 fb       	bst	r28, 2
 106:	66 27       	eor	r22, r22
 108:	60 f9       	bld	r22, 0
 10a:	8a e0       	ldi	r24, 0x0A	; 10
 10c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
 110:	c1 fb       	bst	r28, 1
 112:	66 27       	eor	r22, r22
 114:	60 f9       	bld	r22, 0
 116:	89 e0       	ldi	r24, 0x09	; 9
 118:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
 11c:	6c 2f       	mov	r22, r28
 11e:	61 70       	andi	r22, 0x01	; 1
 120:	88 e0       	ldi	r24, 0x08	; 8
 122:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
 12e:	8f e9       	ldi	r24, 0x9F	; 159
 130:	9f e0       	ldi	r25, 0x0F	; 15
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_voidSendCommand+0xa0>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_voidSendCommand+0xa6>
 138:	00 00       	nop
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
 142:	8f e9       	ldi	r24, 0x9F	; 159
 144:	9f e0       	ldi	r25, 0x0F	; 15
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <LCD_voidSendCommand+0xb4>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCD_voidSendCommand+0xba>
 14c:	00 00       	nop
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <LCD_voidSendData>:
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
 15e:	6c 2f       	mov	r22, r28
 160:	66 1f       	adc	r22, r22
 162:	66 27       	eor	r22, r22
 164:	66 1f       	adc	r22, r22
 166:	8c e0       	ldi	r24, 0x0C	; 12
 168:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
 16c:	c6 fb       	bst	r28, 6
 16e:	66 27       	eor	r22, r22
 170:	60 f9       	bld	r22, 0
 172:	8a e0       	ldi	r24, 0x0A	; 10
 174:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
 178:	c5 fb       	bst	r28, 5
 17a:	66 27       	eor	r22, r22
 17c:	60 f9       	bld	r22, 0
 17e:	89 e0       	ldi	r24, 0x09	; 9
 180:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
 184:	c4 fb       	bst	r28, 4
 186:	66 27       	eor	r22, r22
 188:	60 f9       	bld	r22, 0
 18a:	88 e0       	ldi	r24, 0x08	; 8
 18c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
 198:	8f e9       	ldi	r24, 0x9F	; 159
 19a:	9f e0       	ldi	r25, 0x0F	; 15
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_voidSendData+0x4a>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_voidSendData+0x50>
 1a2:	00 00       	nop
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
 1ac:	8f e9       	ldi	r24, 0x9F	; 159
 1ae:	9f e0       	ldi	r25, 0x0F	; 15
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCD_voidSendData+0x5e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <LCD_voidSendData+0x64>
 1b6:	00 00       	nop
 1b8:	c3 fb       	bst	r28, 3
 1ba:	66 27       	eor	r22, r22
 1bc:	60 f9       	bld	r22, 0
 1be:	8c e0       	ldi	r24, 0x0C	; 12
 1c0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
 1c4:	c2 fb       	bst	r28, 2
 1c6:	66 27       	eor	r22, r22
 1c8:	60 f9       	bld	r22, 0
 1ca:	8a e0       	ldi	r24, 0x0A	; 10
 1cc:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
 1d0:	c1 fb       	bst	r28, 1
 1d2:	66 27       	eor	r22, r22
 1d4:	60 f9       	bld	r22, 0
 1d6:	89 e0       	ldi	r24, 0x09	; 9
 1d8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
 1dc:	6c 2f       	mov	r22, r28
 1de:	61 70       	andi	r22, 0x01	; 1
 1e0:	88 e0       	ldi	r24, 0x08	; 8
 1e2:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
 1ee:	8f e9       	ldi	r24, 0x9F	; 159
 1f0:	9f e0       	ldi	r25, 0x0F	; 15
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LCD_voidSendData+0xa0>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <LCD_voidSendData+0xa6>
 1f8:	00 00       	nop
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Dio_enuWriteChannel>
 202:	8f e9       	ldi	r24, 0x9F	; 159
 204:	9f e0       	ldi	r25, 0x0F	; 15
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <LCD_voidSendData+0xb4>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <LCD_voidSendData+0xba>
 20c:	00 00       	nop
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <LCD_voidInit>:
 212:	2f ef       	ldi	r18, 0xFF	; 255
 214:	80 e7       	ldi	r24, 0x70	; 112
 216:	92 e0       	ldi	r25, 0x02	; 2
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <LCD_voidInit+0x6>
 220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_voidInit+0x10>
 222:	00 00       	nop
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 22a:	88 e2       	ldi	r24, 0x28	; 40
 22c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 230:	8f e9       	ldi	r24, 0x9F	; 159
 232:	9f e0       	ldi	r25, 0x0F	; 15
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <LCD_voidInit+0x22>
 238:	00 c0       	rjmp	.+0      	; 0x23a <LCD_voidInit+0x28>
 23a:	00 00       	nop
 23c:	8c e0       	ldi	r24, 0x0C	; 12
 23e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 242:	8f e9       	ldi	r24, 0x9F	; 159
 244:	9f e0       	ldi	r25, 0x0F	; 15
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <LCD_voidInit+0x34>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <LCD_voidInit+0x3a>
 24c:	00 00       	nop
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 254:	8f e3       	ldi	r24, 0x3F	; 63
 256:	9f e1       	ldi	r25, 0x1F	; 31
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCD_voidInit+0x46>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <LCD_voidInit+0x4c>
 25e:	00 00       	nop
 260:	86 e0       	ldi	r24, 0x06	; 6
 262:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 266:	8f e3       	ldi	r24, 0x3F	; 63
 268:	9f e1       	ldi	r25, 0x1F	; 31
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <LCD_voidInit+0x58>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <LCD_voidInit+0x5e>
 270:	00 00       	nop
 272:	08 95       	ret

00000274 <LCD_voidDisplayChar>:
 274:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_voidSendData>
 278:	08 95       	ret

0000027a <LCD_voidDisplayString>:
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	8c 01       	movw	r16, r24
 282:	c0 e0       	ldi	r28, 0x00	; 0
 284:	03 c0       	rjmp	.+6      	; 0x28c <LCD_voidDisplayString+0x12>
 286:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_voidDisplayChar>
 28a:	cf 5f       	subi	r28, 0xFF	; 255
 28c:	f8 01       	movw	r30, r16
 28e:	ec 0f       	add	r30, r28
 290:	f1 1d       	adc	r31, r1
 292:	80 81       	ld	r24, Z
 294:	81 11       	cpse	r24, r1
 296:	f7 cf       	rjmp	.-18     	; 0x286 <LCD_voidDisplayString+0xc>
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	08 95       	ret

000002a0 <LCD_voidGoToXY>:
 2a0:	61 11       	cpse	r22, r1
 2a2:	04 c0       	rjmp	.+8      	; 0x2ac <LCD_voidGoToXY+0xc>
 2a4:	80 58       	subi	r24, 0x80	; 128
 2a6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 2aa:	08 95       	ret
 2ac:	61 30       	cpi	r22, 0x01	; 1
 2ae:	21 f4       	brne	.+8      	; 0x2b8 <LCD_voidGoToXY+0x18>
 2b0:	80 54       	subi	r24, 0x40	; 64
 2b2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 2b6:	08 95       	ret
 2b8:	62 30       	cpi	r22, 0x02	; 2
 2ba:	21 f4       	brne	.+8      	; 0x2c4 <LCD_voidGoToXY+0x24>
 2bc:	8c 56       	subi	r24, 0x6C	; 108
 2be:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 2c2:	08 95       	ret
 2c4:	63 30       	cpi	r22, 0x03	; 3
 2c6:	19 f4       	brne	.+6      	; 0x2ce <LCD_voidGoToXY+0x2e>
 2c8:	8c 52       	subi	r24, 0x2C	; 44
 2ca:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 2ce:	08 95       	ret

000002d0 <LCD_voidDisplayNumbers>:


void LCD_voidDisplayNumbers(u32 Copy_u32Number)
{
 2d0:	1f 93       	push	r17
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	60 97       	sbiw	r28, 0x10	; 16
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	f8 94       	cli
 2e0:	de bf       	out	0x3e, r29	; 62
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	cd bf       	out	0x3d, r28	; 61
	u8 rem,i=0,str[16];
	s8 j;
	if (Copy_u32Number==0)
 2e6:	61 15       	cp	r22, r1
 2e8:	71 05       	cpc	r23, r1
 2ea:	81 05       	cpc	r24, r1
 2ec:	91 05       	cpc	r25, r1
 2ee:	c1 f4       	brne	.+48     	; 0x320 <LCD_voidDisplayNumbers+0x50>
	{
		LCD_voidDisplayChar('0');
 2f0:	80 e3       	ldi	r24, 0x30	; 48
 2f2:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_voidDisplayChar>
 2f6:	2a c0       	rjmp	.+84     	; 0x34c <LCD_voidDisplayNumbers+0x7c>
		LCD_voidDisplayChar('-');
	}

	while(Copy_u32Number)
	{
		rem=Copy_u32Number%10;
 2f8:	2a e0       	ldi	r18, 0x0A	; 10
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	50 e0       	ldi	r21, 0x00	; 0
 300:	0e 94 bf 04 	call	0x97e	; 0x97e <__udivmodsi4>
		rem=rem+'0';
 304:	60 5d       	subi	r22, 0xD0	; 208
		str[i]=rem;
 306:	e1 e0       	ldi	r30, 0x01	; 1
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	ec 0f       	add	r30, r28
 30c:	fd 1f       	adc	r31, r29
 30e:	e1 0f       	add	r30, r17
 310:	f1 1d       	adc	r31, r1
 312:	60 83       	st	Z, r22
		i++;
 314:	1f 5f       	subi	r17, 0xFF	; 255
		Copy_u32Number=Copy_u32Number/10;
 316:	62 2f       	mov	r22, r18
 318:	73 2f       	mov	r23, r19
 31a:	84 2f       	mov	r24, r20
 31c:	95 2f       	mov	r25, r21
 31e:	01 c0       	rjmp	.+2      	; 0x322 <LCD_voidDisplayNumbers+0x52>
 320:	10 e0       	ldi	r17, 0x00	; 0
	{
		Copy_u32Number=Copy_u32Number*(-1);
		LCD_voidDisplayChar('-');
	}

	while(Copy_u32Number)
 322:	61 15       	cp	r22, r1
 324:	71 05       	cpc	r23, r1
 326:	81 05       	cpc	r24, r1
 328:	91 05       	cpc	r25, r1
 32a:	31 f7       	brne	.-52     	; 0x2f8 <LCD_voidDisplayNumbers+0x28>
		str[i]=rem;
		i++;
		Copy_u32Number=Copy_u32Number/10;
	}

	for (j=i-1;j>=0;j--)
 32c:	11 50       	subi	r17, 0x01	; 1
 32e:	0c c0       	rjmp	.+24     	; 0x348 <LCD_voidDisplayNumbers+0x78>
	{
		LCD_voidDisplayChar(str[j]);
 330:	e1 e0       	ldi	r30, 0x01	; 1
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	ec 0f       	add	r30, r28
 336:	fd 1f       	adc	r31, r29
 338:	e1 0f       	add	r30, r17
 33a:	f1 1d       	adc	r31, r1
 33c:	17 fd       	sbrc	r17, 7
 33e:	fa 95       	dec	r31
 340:	80 81       	ld	r24, Z
 342:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_voidDisplayChar>
		str[i]=rem;
		i++;
		Copy_u32Number=Copy_u32Number/10;
	}

	for (j=i-1;j>=0;j--)
 346:	11 50       	subi	r17, 0x01	; 1
 348:	11 23       	and	r17, r17
 34a:	94 f7       	brge	.-28     	; 0x330 <LCD_voidDisplayNumbers+0x60>
	{
		LCD_voidDisplayChar(str[j]);
	}
}
 34c:	60 96       	adiw	r28, 0x10	; 16
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	08 95       	ret

00000360 <T_voidSetMode>:


//Interrupt Function
void T_voidSetMode()
{
	Global_u8Mode = Global_u8Mode ^ 1;
 360:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	89 27       	eor	r24, r25
 368:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(Global_u8Mode == 0)
 36c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 370:	81 11       	cpse	r24, r1
 372:	09 c0       	rjmp	.+18     	; 0x386 <T_voidSetMode+0x26>
	{
		LCD_voidGoToXY(18,1);
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	82 e1       	ldi	r24, 0x12	; 18
 378:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_voidGoToXY>
		LCD_voidDisplayString("V ");
 37c:	81 e6       	ldi	r24, 0x61	; 97
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_voidDisplayString>
 384:	08 95       	ret
	}
	else if(Global_u8Mode == 1)
 386:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	41 f4       	brne	.+16     	; 0x39e <T_voidSetMode+0x3e>
	{
		LCD_voidGoToXY(18,1);
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	82 e1       	ldi	r24, 0x12	; 18
 392:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_voidGoToXY>
		LCD_voidDisplayString("mV");
 396:	84 e6       	ldi	r24, 0x64	; 100
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_voidDisplayString>
 39e:	08 95       	ret

000003a0 <ADC_voidReadMVolt>:
volatile u8 Global_u8Mode = 1;


//Helper function to get reading in mv
u16 ADC_voidReadMVolt(u8 Copy_u8Channel)
{
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	00 d0       	rcall	.+0      	; 0x3a6 <ADC_voidReadMVolt+0x6>
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u8read = 0;
 3aa:	1a 82       	std	Y+2, r1	; 0x02
 3ac:	19 82       	std	Y+1, r1	; 0x01
	ADC_voidReadPolling(Copy_u8Channel,&Local_u8read);
 3ae:	be 01       	movw	r22, r28
 3b0:	6f 5f       	subi	r22, 0xFF	; 255
 3b2:	7f 4f       	sbci	r23, 0xFF	; 255
 3b4:	0e 94 9d 02 	call	0x53a	; 0x53a <ADC_voidReadPolling>
	u16 Local_u8Result = ((u32)Local_u8read*5000)/1023;
 3b8:	29 81       	ldd	r18, Y+1	; 0x01
 3ba:	3a 81       	ldd	r19, Y+2	; 0x02
 3bc:	a8 e8       	ldi	r26, 0x88	; 136
 3be:	b3 e1       	ldi	r27, 0x13	; 19
 3c0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__umulhisi3>
 3c4:	2f ef       	ldi	r18, 0xFF	; 255
 3c6:	33 e0       	ldi	r19, 0x03	; 3
 3c8:	40 e0       	ldi	r20, 0x00	; 0
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	0e 94 bf 04 	call	0x97e	; 0x97e <__udivmodsi4>
	return Local_u8Result;
}
 3d0:	c9 01       	movw	r24, r18
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <LCD_DisplayVolt>:



//Helper function to display volt with decimal point
void LCD_DisplayVolt(u16 Copy_u16Volt)
{
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	00 d0       	rcall	.+0      	; 0x3e2 <LCD_DisplayVolt+0x6>
 3e2:	00 d0       	rcall	.+0      	; 0x3e4 <LCD_DisplayVolt+0x8>
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
 3e8:	fc 01       	movw	r30, r24
	u8 Local_u8Arr[4];
	for(u8 i = 0 ; i < 4; i++)
 3ea:	40 e0       	ldi	r20, 0x00	; 0
 3ec:	2d c0       	rjmp	.+90     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
	{
		Local_u8Arr[i] = Copy_u16Volt%10;
 3ee:	9f 01       	movw	r18, r30
 3f0:	ad ec       	ldi	r26, 0xCD	; 205
 3f2:	bc ec       	ldi	r27, 0xCC	; 204
 3f4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__umulhisi3>
 3f8:	96 95       	lsr	r25
 3fa:	87 95       	ror	r24
 3fc:	96 95       	lsr	r25
 3fe:	87 95       	ror	r24
 400:	96 95       	lsr	r25
 402:	87 95       	ror	r24
 404:	9c 01       	movw	r18, r24
 406:	22 0f       	add	r18, r18
 408:	33 1f       	adc	r19, r19
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	82 0f       	add	r24, r18
 418:	93 1f       	adc	r25, r19
 41a:	9f 01       	movw	r18, r30
 41c:	28 1b       	sub	r18, r24
 41e:	39 0b       	sbc	r19, r25
 420:	a1 e0       	ldi	r26, 0x01	; 1
 422:	b0 e0       	ldi	r27, 0x00	; 0
 424:	ac 0f       	add	r26, r28
 426:	bd 1f       	adc	r27, r29
 428:	a4 0f       	add	r26, r20
 42a:	b1 1d       	adc	r27, r1
 42c:	2c 93       	st	X, r18
		Copy_u16Volt/=10;
 42e:	9f 01       	movw	r18, r30
 430:	ad ec       	ldi	r26, 0xCD	; 205
 432:	bc ec       	ldi	r27, 0xCC	; 204
 434:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__umulhisi3>
 438:	fc 01       	movw	r30, r24
 43a:	f6 95       	lsr	r31
 43c:	e7 95       	ror	r30
 43e:	f6 95       	lsr	r31
 440:	e7 95       	ror	r30
 442:	f6 95       	lsr	r31
 444:	e7 95       	ror	r30

//Helper function to display volt with decimal point
void LCD_DisplayVolt(u16 Copy_u16Volt)
{
	u8 Local_u8Arr[4];
	for(u8 i = 0 ; i < 4; i++)
 446:	4f 5f       	subi	r20, 0xFF	; 255
 448:	44 30       	cpi	r20, 0x04	; 4
 44a:	88 f2       	brcs	.-94     	; 0x3ee <LCD_DisplayVolt+0x12>
	{
		Local_u8Arr[i] = Copy_u16Volt%10;
		Copy_u16Volt/=10;
	}
	LCD_voidDisplayChar(Local_u8Arr[3] + '0');
 44c:	8c 81       	ldd	r24, Y+4	; 0x04
 44e:	80 5d       	subi	r24, 0xD0	; 208
 450:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_voidDisplayChar>
	LCD_voidDisplayChar('.');
 454:	8e e2       	ldi	r24, 0x2E	; 46
 456:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_voidDisplayChar>
	LCD_voidDisplayChar(Local_u8Arr[2] + '0');
 45a:	8b 81       	ldd	r24, Y+3	; 0x03
 45c:	80 5d       	subi	r24, 0xD0	; 208
 45e:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_voidDisplayChar>

}
 462:	0f 90       	pop	r0
 464:	0f 90       	pop	r0
 466:	0f 90       	pop	r0
 468:	0f 90       	pop	r0
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	08 95       	ret

00000470 <main>:
//////////////////////////////////////////////


int main(void)
{
	Port_vidInit();
 470:	0e 94 b1 04 	call	0x962	; 0x962 <Port_vidInit>

	LCD_voidInit();
 474:	0e 94 09 01 	call	0x212	; 0x212 <LCD_voidInit>

	ADC_voidInit(ADC_VREF_AVCC,ADC_Prescaler_128);
 478:	67 e0       	ldi	r22, 0x07	; 7
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	0e 94 88 02 	call	0x510	; 0x510 <ADC_voidInit>
	ADC_Enable();
 480:	0e 94 99 02 	call	0x532	; 0x532 <ADC_Enable>

	EXTI_voidEnable(EXTI_INT0);
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	0e 94 af 03 	call	0x75e	; 0x75e <EXTI_voidEnable>
	EXTI_voidSetCallBack(EXTI_INT0,T_voidSetMode);
 48a:	60 eb       	ldi	r22, 0xB0	; 176
 48c:	71 e0       	ldi	r23, 0x01	; 1
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	0e 94 21 04 	call	0x842	; 0x842 <EXTI_voidSetCallBack>
	EXTI_voidSetPinMode(EXTI_INT0,EXTI_FALLING);
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 c1 03 	call	0x782	; 0x782 <EXTI_voidSetPinMode>

	GIE();
 49c:	78 94       	sei

	LCD_voidDisplayString("VOLT:");
 49e:	87 e6       	ldi	r24, 0x67	; 103
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_voidDisplayString>
	LCD_voidGoToXY(18,1);
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	82 e1       	ldi	r24, 0x12	; 18
 4aa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_voidGoToXY>
	LCD_voidDisplayString("mV");
 4ae:	84 e6       	ldi	r24, 0x64	; 100
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_voidDisplayString>
	u16 V;


	while (1)
	{
		switch(Global_u8Mode)
 4b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4ba:	88 23       	and	r24, r24
 4bc:	19 f0       	breq	.+6      	; 0x4c4 <main+0x54>
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	99 f0       	breq	.+38     	; 0x4e8 <main+0x78>
 4c2:	f9 cf       	rjmp	.-14     	; 0x4b6 <main+0x46>
		{
			case 0 :
			V = ADC_voidReadMVolt(ADC_CH0);
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_voidReadMVolt>
 4ca:	ec 01       	movw	r28, r24
			GID();
 4cc:	f8 94       	cli
			LCD_voidGoToXY(5,0);
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	85 e0       	ldi	r24, 0x05	; 5
 4d2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_voidGoToXY>
			LCD_DisplayVolt(V);
 4d6:	ce 01       	movw	r24, r28
 4d8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_DisplayVolt>
			LCD_voidDisplayString("    ");
 4dc:	8d e6       	ldi	r24, 0x6D	; 109
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_voidDisplayString>
			GIE();
 4e4:	78 94       	sei
			break;
 4e6:	e7 cf       	rjmp	.-50     	; 0x4b6 <main+0x46>
			case 1 :
			mV = ADC_voidReadMVolt(ADC_CH0);
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_voidReadMVolt>
 4ee:	ec 01       	movw	r28, r24
			GID();
 4f0:	f8 94       	cli
			LCD_voidGoToXY(5,0);
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	85 e0       	ldi	r24, 0x05	; 5
 4f6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_voidGoToXY>
			LCD_voidDisplayNumbers(mV);
 4fa:	be 01       	movw	r22, r28
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_voidDisplayNumbers>
			LCD_voidDisplayString("    ");
 504:	8d e6       	ldi	r24, 0x6D	; 109
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_voidDisplayString>
			GIE();
 50c:	78 94       	sei
			break;
 50e:	d3 cf       	rjmp	.-90     	; 0x4b6 <main+0x46>

00000510 <ADC_voidInit>:
}


void ADC_InterruptDisable()
{
	CLR_BIT(ADCSRA,ADIE);
 510:	97 b1       	in	r25, 0x07	; 7
 512:	9f 73       	andi	r25, 0x3F	; 63
 514:	97 b9       	out	0x07, r25	; 7
 516:	27 b1       	in	r18, 0x07	; 7
 518:	30 e4       	ldi	r19, 0x40	; 64
 51a:	83 9f       	mul	r24, r19
 51c:	c0 01       	movw	r24, r0
 51e:	11 24       	eor	r1, r1
 520:	82 2b       	or	r24, r18
 522:	87 b9       	out	0x07, r24	; 7
 524:	86 b1       	in	r24, 0x06	; 6
 526:	88 7f       	andi	r24, 0xF8	; 248
 528:	86 b9       	out	0x06, r24	; 6
 52a:	86 b1       	in	r24, 0x06	; 6
 52c:	68 2b       	or	r22, r24
 52e:	66 b9       	out	0x06, r22	; 6
 530:	08 95       	ret

00000532 <ADC_Enable>:
 532:	86 b1       	in	r24, 0x06	; 6
 534:	80 68       	ori	r24, 0x80	; 128
 536:	86 b9       	out	0x06, r24	; 6
 538:	08 95       	ret

0000053a <ADC_voidReadPolling>:
 53a:	97 b1       	in	r25, 0x07	; 7
 53c:	90 7e       	andi	r25, 0xE0	; 224
 53e:	97 b9       	out	0x07, r25	; 7
 540:	97 b1       	in	r25, 0x07	; 7
 542:	89 2b       	or	r24, r25
 544:	87 b9       	out	0x07, r24	; 7
 546:	86 b1       	in	r24, 0x06	; 6
 548:	80 64       	ori	r24, 0x40	; 64
 54a:	86 b9       	out	0x06, r24	; 6
 54c:	36 99       	sbic	0x06, 6	; 6
 54e:	fe cf       	rjmp	.-4      	; 0x54c <ADC_voidReadPolling+0x12>
 550:	84 b1       	in	r24, 0x04	; 4
 552:	95 b1       	in	r25, 0x05	; 5
 554:	fb 01       	movw	r30, r22
 556:	91 83       	std	Z+1, r25	; 0x01
 558:	80 83       	st	Z, r24
 55a:	08 95       	ret

0000055c <__vector_16>:
}



ISR(ADC_vect)
{
 55c:	1f 92       	push	r1
 55e:	0f 92       	push	r0
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	0f 92       	push	r0
 564:	11 24       	eor	r1, r1
 566:	2f 93       	push	r18
 568:	3f 93       	push	r19
 56a:	4f 93       	push	r20
 56c:	5f 93       	push	r21
 56e:	6f 93       	push	r22
 570:	7f 93       	push	r23
 572:	8f 93       	push	r24
 574:	9f 93       	push	r25
 576:	af 93       	push	r26
 578:	bf 93       	push	r27
 57a:	ef 93       	push	r30
 57c:	ff 93       	push	r31
	FptrG();
 57e:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <__data_end>
 582:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <__data_end+0x1>
 586:	09 95       	icall
}
 588:	ff 91       	pop	r31
 58a:	ef 91       	pop	r30
 58c:	bf 91       	pop	r27
 58e:	af 91       	pop	r26
 590:	9f 91       	pop	r25
 592:	8f 91       	pop	r24
 594:	7f 91       	pop	r23
 596:	6f 91       	pop	r22
 598:	5f 91       	pop	r21
 59a:	4f 91       	pop	r20
 59c:	3f 91       	pop	r19
 59e:	2f 91       	pop	r18
 5a0:	0f 90       	pop	r0
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	0f 90       	pop	r0
 5a6:	1f 90       	pop	r1
 5a8:	18 95       	reti

000005aa <Dio_enuWriteChannel>:

	u8 LOC_u8Port;

	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {
 5aa:	80 32       	cpi	r24, 0x20	; 32
 5ac:	08 f0       	brcs	.+2      	; 0x5b0 <Dio_enuWriteChannel+0x6>
 5ae:	c1 c0       	rjmp	.+386    	; 0x732 <Dio_enuWriteChannel+0x188>

		LOC_enuReturnStatus = Dio_enuChannelError;
	}

	else if (Copy_u8Level > DIO_u8NUMBER_OF_LEVELS) {
 5b0:	63 30       	cpi	r22, 0x03	; 3
 5b2:	08 f0       	brcs	.+2      	; 0x5b6 <Dio_enuWriteChannel+0xc>
 5b4:	c0 c0       	rjmp	.+384    	; 0x736 <Dio_enuWriteChannel+0x18c>
		LOC_enuReturnStatus = Dio_enuLevelError;
	}

	else {

		LOC_u8Port = Copy_u8ChannelId / DIO_u8REGISTER_SIZE;
 5b6:	98 2f       	mov	r25, r24
 5b8:	96 95       	lsr	r25
 5ba:	96 95       	lsr	r25
 5bc:	96 95       	lsr	r25
		LOC_u8Pin = Copy_u8ChannelId % DIO_u8REGISTER_SIZE;
 5be:	87 70       	andi	r24, 0x07	; 7

		switch (LOC_u8Port) {
 5c0:	91 30       	cpi	r25, 0x01	; 1
 5c2:	a1 f1       	breq	.+104    	; 0x62c <Dio_enuWriteChannel+0x82>
 5c4:	38 f0       	brcs	.+14     	; 0x5d4 <Dio_enuWriteChannel+0x2a>
 5c6:	92 30       	cpi	r25, 0x02	; 2
 5c8:	09 f4       	brne	.+2      	; 0x5cc <Dio_enuWriteChannel+0x22>
 5ca:	5c c0       	rjmp	.+184    	; 0x684 <Dio_enuWriteChannel+0xda>
 5cc:	93 30       	cpi	r25, 0x03	; 3
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <Dio_enuWriteChannel+0x28>
 5d0:	85 c0       	rjmp	.+266    	; 0x6dc <Dio_enuWriteChannel+0x132>
 5d2:	b3 c0       	rjmp	.+358    	; 0x73a <Dio_enuWriteChannel+0x190>

		case DIO_u8PORTA:
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
 5d4:	2a b3       	in	r18, 0x1a	; 26
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	08 2e       	mov	r0, r24
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <Dio_enuWriteChannel+0x36>
 5dc:	35 95       	asr	r19
 5de:	27 95       	ror	r18
 5e0:	0a 94       	dec	r0
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <Dio_enuWriteChannel+0x32>
 5e4:	20 ff       	sbrs	r18, 0
 5e6:	ab c0       	rjmp	.+342    	; 0x73e <Dio_enuWriteChannel+0x194>
				switch (Copy_u8Level) {
 5e8:	66 23       	and	r22, r22
 5ea:	89 f0       	breq	.+34     	; 0x60e <Dio_enuWriteChannel+0x64>
 5ec:	61 30       	cpi	r22, 0x01	; 1
 5ee:	09 f0       	breq	.+2      	; 0x5f2 <Dio_enuWriteChannel+0x48>
 5f0:	a8 c0       	rjmp	.+336    	; 0x742 <Dio_enuWriteChannel+0x198>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTA, LOC_u8Pin);
 5f2:	4b b3       	in	r20, 0x1b	; 27
 5f4:	21 e0       	ldi	r18, 0x01	; 1
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	b9 01       	movw	r22, r18
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <Dio_enuWriteChannel+0x56>
 5fc:	66 0f       	add	r22, r22
 5fe:	77 1f       	adc	r23, r23
 600:	8a 95       	dec	r24
 602:	e2 f7       	brpl	.-8      	; 0x5fc <Dio_enuWriteChannel+0x52>
 604:	cb 01       	movw	r24, r22
 606:	84 2b       	or	r24, r20
 608:	8b bb       	out	0x1b, r24	; 27
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 60a:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTA, LOC_u8Pin);
					break;
 60c:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTA, LOC_u8Pin);
 60e:	4b b3       	in	r20, 0x1b	; 27
 610:	21 e0       	ldi	r18, 0x01	; 1
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	b9 01       	movw	r22, r18
 616:	02 c0       	rjmp	.+4      	; 0x61c <Dio_enuWriteChannel+0x72>
 618:	66 0f       	add	r22, r22
 61a:	77 1f       	adc	r23, r23
 61c:	8a 95       	dec	r24
 61e:	e2 f7       	brpl	.-8      	; 0x618 <Dio_enuWriteChannel+0x6e>
 620:	cb 01       	movw	r24, r22
 622:	80 95       	com	r24
 624:	84 23       	and	r24, r20
 626:	8b bb       	out	0x1b, r24	; 27
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 628:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTA, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTA, LOC_u8Pin);
					break;
 62a:	08 95       	ret
			}
			break;

		case DIO_u8PORTB:

			if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
 62c:	27 b3       	in	r18, 0x17	; 23
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	08 2e       	mov	r0, r24
 632:	02 c0       	rjmp	.+4      	; 0x638 <Dio_enuWriteChannel+0x8e>
 634:	35 95       	asr	r19
 636:	27 95       	ror	r18
 638:	0a 94       	dec	r0
 63a:	e2 f7       	brpl	.-8      	; 0x634 <Dio_enuWriteChannel+0x8a>
 63c:	20 ff       	sbrs	r18, 0
 63e:	83 c0       	rjmp	.+262    	; 0x746 <Dio_enuWriteChannel+0x19c>
				switch (Copy_u8Level) {
 640:	66 23       	and	r22, r22
 642:	89 f0       	breq	.+34     	; 0x666 <Dio_enuWriteChannel+0xbc>
 644:	61 30       	cpi	r22, 0x01	; 1
 646:	09 f0       	breq	.+2      	; 0x64a <Dio_enuWriteChannel+0xa0>
 648:	80 c0       	rjmp	.+256    	; 0x74a <Dio_enuWriteChannel+0x1a0>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTB, LOC_u8Pin);
 64a:	48 b3       	in	r20, 0x18	; 24
 64c:	21 e0       	ldi	r18, 0x01	; 1
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	b9 01       	movw	r22, r18
 652:	02 c0       	rjmp	.+4      	; 0x658 <Dio_enuWriteChannel+0xae>
 654:	66 0f       	add	r22, r22
 656:	77 1f       	adc	r23, r23
 658:	8a 95       	dec	r24
 65a:	e2 f7       	brpl	.-8      	; 0x654 <Dio_enuWriteChannel+0xaa>
 65c:	cb 01       	movw	r24, r22
 65e:	84 2b       	or	r24, r20
 660:	88 bb       	out	0x18, r24	; 24
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 662:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTB, LOC_u8Pin);
					break;
 664:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTB, LOC_u8Pin);
 666:	48 b3       	in	r20, 0x18	; 24
 668:	21 e0       	ldi	r18, 0x01	; 1
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	b9 01       	movw	r22, r18
 66e:	02 c0       	rjmp	.+4      	; 0x674 <Dio_enuWriteChannel+0xca>
 670:	66 0f       	add	r22, r22
 672:	77 1f       	adc	r23, r23
 674:	8a 95       	dec	r24
 676:	e2 f7       	brpl	.-8      	; 0x670 <Dio_enuWriteChannel+0xc6>
 678:	cb 01       	movw	r24, r22
 67a:	80 95       	com	r24
 67c:	84 23       	and	r24, r20
 67e:	88 bb       	out	0x18, r24	; 24
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 680:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTB, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTB, LOC_u8Pin);
					break;
 682:	08 95       	ret

			break;

		case DIO_u8PORTC:

			if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
 684:	24 b3       	in	r18, 0x14	; 20
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	08 2e       	mov	r0, r24
 68a:	02 c0       	rjmp	.+4      	; 0x690 <Dio_enuWriteChannel+0xe6>
 68c:	35 95       	asr	r19
 68e:	27 95       	ror	r18
 690:	0a 94       	dec	r0
 692:	e2 f7       	brpl	.-8      	; 0x68c <Dio_enuWriteChannel+0xe2>
 694:	20 ff       	sbrs	r18, 0
 696:	5b c0       	rjmp	.+182    	; 0x74e <Dio_enuWriteChannel+0x1a4>
				switch (Copy_u8Level) {
 698:	66 23       	and	r22, r22
 69a:	89 f0       	breq	.+34     	; 0x6be <Dio_enuWriteChannel+0x114>
 69c:	61 30       	cpi	r22, 0x01	; 1
 69e:	09 f0       	breq	.+2      	; 0x6a2 <Dio_enuWriteChannel+0xf8>
 6a0:	58 c0       	rjmp	.+176    	; 0x752 <Dio_enuWriteChannel+0x1a8>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTC, LOC_u8Pin);
 6a2:	45 b3       	in	r20, 0x15	; 21
 6a4:	21 e0       	ldi	r18, 0x01	; 1
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	b9 01       	movw	r22, r18
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <Dio_enuWriteChannel+0x106>
 6ac:	66 0f       	add	r22, r22
 6ae:	77 1f       	adc	r23, r23
 6b0:	8a 95       	dec	r24
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <Dio_enuWriteChannel+0x102>
 6b4:	cb 01       	movw	r24, r22
 6b6:	84 2b       	or	r24, r20
 6b8:	85 bb       	out	0x15, r24	; 21
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 6ba:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTC, LOC_u8Pin);
					break;
 6bc:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTC, LOC_u8Pin);
 6be:	45 b3       	in	r20, 0x15	; 21
 6c0:	21 e0       	ldi	r18, 0x01	; 1
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	b9 01       	movw	r22, r18
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <Dio_enuWriteChannel+0x122>
 6c8:	66 0f       	add	r22, r22
 6ca:	77 1f       	adc	r23, r23
 6cc:	8a 95       	dec	r24
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <Dio_enuWriteChannel+0x11e>
 6d0:	cb 01       	movw	r24, r22
 6d2:	80 95       	com	r24
 6d4:	84 23       	and	r24, r20
 6d6:	85 bb       	out	0x15, r24	; 21
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 6d8:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTC, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTC, LOC_u8Pin);
					break;
 6da:	08 95       	ret
			}
			break;

		case DIO_u8PORTD:

			if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
 6dc:	21 b3       	in	r18, 0x11	; 17
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	08 2e       	mov	r0, r24
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <Dio_enuWriteChannel+0x13e>
 6e4:	35 95       	asr	r19
 6e6:	27 95       	ror	r18
 6e8:	0a 94       	dec	r0
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <Dio_enuWriteChannel+0x13a>
 6ec:	20 ff       	sbrs	r18, 0
 6ee:	33 c0       	rjmp	.+102    	; 0x756 <Dio_enuWriteChannel+0x1ac>
				switch (Copy_u8Level) {
 6f0:	66 23       	and	r22, r22
 6f2:	81 f0       	breq	.+32     	; 0x714 <Dio_enuWriteChannel+0x16a>
 6f4:	61 30       	cpi	r22, 0x01	; 1
 6f6:	89 f5       	brne	.+98     	; 0x75a <Dio_enuWriteChannel+0x1b0>

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTD, LOC_u8Pin);
 6f8:	42 b3       	in	r20, 0x12	; 18
 6fa:	21 e0       	ldi	r18, 0x01	; 1
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	b9 01       	movw	r22, r18
 700:	02 c0       	rjmp	.+4      	; 0x706 <Dio_enuWriteChannel+0x15c>
 702:	66 0f       	add	r22, r22
 704:	77 1f       	adc	r23, r23
 706:	8a 95       	dec	r24
 708:	e2 f7       	brpl	.-8      	; 0x702 <Dio_enuWriteChannel+0x158>
 70a:	cb 01       	movw	r24, r22
 70c:	84 2b       	or	r24, r20
 70e:	82 bb       	out	0x12, r24	; 18
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 710:	80 e0       	ldi	r24, 0x00	; 0
			if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
				switch (Copy_u8Level) {

				case DIO_u8LEVEL_HIGH:
					SET_BIT(PORTD, LOC_u8Pin);
					break;
 712:	08 95       	ret

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTD, LOC_u8Pin);
 714:	42 b3       	in	r20, 0x12	; 18
 716:	21 e0       	ldi	r18, 0x01	; 1
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	b9 01       	movw	r22, r18
 71c:	02 c0       	rjmp	.+4      	; 0x722 <Dio_enuWriteChannel+0x178>
 71e:	66 0f       	add	r22, r22
 720:	77 1f       	adc	r23, r23
 722:	8a 95       	dec	r24
 724:	e2 f7       	brpl	.-8      	; 0x71e <Dio_enuWriteChannel+0x174>
 726:	cb 01       	movw	r24, r22
 728:	80 95       	com	r24
 72a:	84 23       	and	r24, r20
 72c:	82 bb       	out	0x12, r24	; 18
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 72e:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(PORTD, LOC_u8Pin);
					break;

				case DIO_u8LEVEL_LOW:
					CLR_BIT(PORTD, LOC_u8Pin);
					break;
 730:	08 95       	ret

	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {

		LOC_enuReturnStatus = Dio_enuChannelError;
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	08 95       	ret
	}

	else if (Copy_u8Level > DIO_u8NUMBER_OF_LEVELS) {

		LOC_enuReturnStatus = Dio_enuLevelError;
 736:	82 e0       	ldi	r24, 0x02	; 2
 738:	08 95       	ret
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	08 95       	ret
					CLR_BIT(PORTA, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 73e:	83 e0       	ldi	r24, 0x03	; 3
 740:	08 95       	ret
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	08 95       	ret
					CLR_BIT(PORTB, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 746:	83 e0       	ldi	r24, 0x03	; 3
 748:	08 95       	ret
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 74a:	80 e0       	ldi	r24, 0x00	; 0
 74c:	08 95       	ret
					CLR_BIT(PORTC, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 74e:	83 e0       	ldi	r24, 0x03	; 3
 750:	08 95       	ret
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 752:	80 e0       	ldi	r24, 0x00	; 0
 754:	08 95       	ret
					CLR_BIT(PORTD, LOC_u8Pin);
					break;

				}
			} else {
				LOC_enuReturnStatus = Dio_enuDirectionError;
 756:	83 e0       	ldi	r24, 0x03	; 3
 758:	08 95       	ret
#include "../inc/Dio_cfg.h"					 /*INCLUDING "Port_cfg.h" HEADER FILE */
#include <avr/io.h>						 /*INCLUDING "avr/io.h" HEADER FILE */

Dio_tenuErrorStatus Dio_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8Level) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 75a:	80 e0       	ldi	r24, 0x00	; 0

		}

	}
	return LOC_enuReturnStatus;
}
 75c:	08 95       	ret

0000075e <EXTI_voidEnable>:
		break;
		case EXTI_INT1:
		CLR_BIT(EXTI_GICR,INT1);
		break;
		case EXTI_INT2:
		CLR_BIT(EXTI_GICR,INT2);
 75e:	81 30       	cpi	r24, 0x01	; 1
 760:	41 f0       	breq	.+16     	; 0x772 <EXTI_voidEnable+0x14>
 762:	18 f0       	brcs	.+6      	; 0x76a <EXTI_voidEnable+0xc>
 764:	82 30       	cpi	r24, 0x02	; 2
 766:	49 f0       	breq	.+18     	; 0x77a <EXTI_voidEnable+0x1c>
 768:	08 95       	ret
 76a:	8b b7       	in	r24, 0x3b	; 59
 76c:	80 64       	ori	r24, 0x40	; 64
 76e:	8b bf       	out	0x3b, r24	; 59
 770:	08 95       	ret
 772:	8b b7       	in	r24, 0x3b	; 59
 774:	80 68       	ori	r24, 0x80	; 128
 776:	8b bf       	out	0x3b, r24	; 59
 778:	08 95       	ret
 77a:	8b b7       	in	r24, 0x3b	; 59
 77c:	80 62       	ori	r24, 0x20	; 32
 77e:	8b bf       	out	0x3b, r24	; 59
 780:	08 95       	ret

00000782 <EXTI_voidSetPinMode>:
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	49 f1       	breq	.+82     	; 0x7d8 <EXTI_voidSetPinMode+0x56>
 786:	20 f0       	brcs	.+8      	; 0x790 <EXTI_voidSetPinMode+0xe>
 788:	82 30       	cpi	r24, 0x02	; 2
 78a:	09 f4       	brne	.+2      	; 0x78e <EXTI_voidSetPinMode+0xc>
 78c:	49 c0       	rjmp	.+146    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 78e:	08 95       	ret
 790:	61 30       	cpi	r22, 0x01	; 1
 792:	d9 f0       	breq	.+54     	; 0x7ca <EXTI_voidSetPinMode+0x48>
 794:	98 f0       	brcs	.+38     	; 0x7bc <EXTI_voidSetPinMode+0x3a>
 796:	62 30       	cpi	r22, 0x02	; 2
 798:	19 f0       	breq	.+6      	; 0x7a0 <EXTI_voidSetPinMode+0x1e>
 79a:	63 30       	cpi	r22, 0x03	; 3
 79c:	41 f0       	breq	.+16     	; 0x7ae <EXTI_voidSetPinMode+0x2c>
 79e:	08 95       	ret
 7a0:	85 b7       	in	r24, 0x35	; 53
 7a2:	8e 7f       	andi	r24, 0xFE	; 254
 7a4:	85 bf       	out	0x35, r24	; 53
 7a6:	85 b7       	in	r24, 0x35	; 53
 7a8:	8d 7f       	andi	r24, 0xFD	; 253
 7aa:	85 bf       	out	0x35, r24	; 53
 7ac:	08 95       	ret
 7ae:	85 b7       	in	r24, 0x35	; 53
 7b0:	81 60       	ori	r24, 0x01	; 1
 7b2:	85 bf       	out	0x35, r24	; 53
 7b4:	85 b7       	in	r24, 0x35	; 53
 7b6:	8d 7f       	andi	r24, 0xFD	; 253
 7b8:	85 bf       	out	0x35, r24	; 53
 7ba:	08 95       	ret
 7bc:	85 b7       	in	r24, 0x35	; 53
 7be:	8e 7f       	andi	r24, 0xFE	; 254
 7c0:	85 bf       	out	0x35, r24	; 53
 7c2:	85 b7       	in	r24, 0x35	; 53
 7c4:	82 60       	ori	r24, 0x02	; 2
 7c6:	85 bf       	out	0x35, r24	; 53
 7c8:	08 95       	ret
 7ca:	85 b7       	in	r24, 0x35	; 53
 7cc:	81 60       	ori	r24, 0x01	; 1
 7ce:	85 bf       	out	0x35, r24	; 53
 7d0:	85 b7       	in	r24, 0x35	; 53
 7d2:	82 60       	ori	r24, 0x02	; 2
 7d4:	85 bf       	out	0x35, r24	; 53
 7d6:	08 95       	ret
 7d8:	61 30       	cpi	r22, 0x01	; 1
 7da:	d9 f0       	breq	.+54     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7dc:	98 f0       	brcs	.+38     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7de:	62 30       	cpi	r22, 0x02	; 2
 7e0:	19 f0       	breq	.+6      	; 0x7e8 <EXTI_voidSetPinMode+0x66>
 7e2:	63 30       	cpi	r22, 0x03	; 3
 7e4:	41 f0       	breq	.+16     	; 0x7f6 <EXTI_voidSetPinMode+0x74>
 7e6:	08 95       	ret
 7e8:	85 b7       	in	r24, 0x35	; 53
 7ea:	8b 7f       	andi	r24, 0xFB	; 251
 7ec:	85 bf       	out	0x35, r24	; 53
 7ee:	85 b7       	in	r24, 0x35	; 53
 7f0:	87 7f       	andi	r24, 0xF7	; 247
 7f2:	85 bf       	out	0x35, r24	; 53
 7f4:	08 95       	ret
 7f6:	85 b7       	in	r24, 0x35	; 53
 7f8:	84 60       	ori	r24, 0x04	; 4
 7fa:	85 bf       	out	0x35, r24	; 53
 7fc:	85 b7       	in	r24, 0x35	; 53
 7fe:	87 7f       	andi	r24, 0xF7	; 247
 800:	85 bf       	out	0x35, r24	; 53
 802:	08 95       	ret
 804:	85 b7       	in	r24, 0x35	; 53
 806:	8b 7f       	andi	r24, 0xFB	; 251
 808:	85 bf       	out	0x35, r24	; 53
 80a:	85 b7       	in	r24, 0x35	; 53
 80c:	88 60       	ori	r24, 0x08	; 8
 80e:	85 bf       	out	0x35, r24	; 53
 810:	08 95       	ret
 812:	85 b7       	in	r24, 0x35	; 53
 814:	84 60       	ori	r24, 0x04	; 4
 816:	85 bf       	out	0x35, r24	; 53
 818:	85 b7       	in	r24, 0x35	; 53
 81a:	88 60       	ori	r24, 0x08	; 8
 81c:	85 bf       	out	0x35, r24	; 53
 81e:	08 95       	ret
 820:	66 23       	and	r22, r22
 822:	19 f0       	breq	.+6      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 824:	61 30       	cpi	r22, 0x01	; 1
 826:	29 f0       	breq	.+10     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 828:	08 c0       	rjmp	.+16     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 82a:	84 b7       	in	r24, 0x34	; 52
 82c:	8f 7b       	andi	r24, 0xBF	; 191
 82e:	84 bf       	out	0x34, r24	; 52
 830:	08 95       	ret
 832:	84 b7       	in	r24, 0x34	; 52
 834:	80 64       	ori	r24, 0x40	; 64
 836:	84 bf       	out	0x34, r24	; 52
 838:	08 95       	ret
 83a:	84 b7       	in	r24, 0x34	; 52
 83c:	8f 7b       	andi	r24, 0xBF	; 191
 83e:	84 bf       	out	0x34, r24	; 52
 840:	08 95       	ret

00000842 <EXTI_voidSetCallBack>:
		break;
	}
}
void EXTI_voidSetCallBack(u8 Copy_u8EXTI_PIN, void (*CallBack_func) (void))
{
	switch(Copy_u8EXTI_PIN){
 842:	81 30       	cpi	r24, 0x01	; 1
 844:	49 f0       	breq	.+18     	; 0x858 <EXTI_voidSetCallBack+0x16>
 846:	18 f0       	brcs	.+6      	; 0x84e <EXTI_voidSetCallBack+0xc>
 848:	82 30       	cpi	r24, 0x02	; 2
 84a:	59 f0       	breq	.+22     	; 0x862 <__stack+0x3>
 84c:	08 95       	ret
		case EXTI_INT0:
		EXTI_INT0_Fptr=CallBack_func;
 84e:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <EXTI_INT0_Fptr+0x1>
 852:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <EXTI_INT0_Fptr>
		break;
 856:	08 95       	ret
		case EXTI_INT1:
		EXTI_INT1_Fptr=CallBack_func;
 858:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <EXTI_INT1_Fptr+0x1>
 85c:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <EXTI_INT1_Fptr>
		break;
 860:	08 95       	ret
		case EXTI_INT2:
		EXTI_INT2_Fptr=CallBack_func;
 862:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <EXTI_INT2_Fptr+0x1>
 866:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <EXTI_INT2_Fptr>
 86a:	08 95       	ret

0000086c <__vector_1>:




ISR(EXTI_INT0_vect)
{
 86c:	1f 92       	push	r1
 86e:	0f 92       	push	r0
 870:	0f b6       	in	r0, 0x3f	; 63
 872:	0f 92       	push	r0
 874:	11 24       	eor	r1, r1
 876:	2f 93       	push	r18
 878:	3f 93       	push	r19
 87a:	4f 93       	push	r20
 87c:	5f 93       	push	r21
 87e:	6f 93       	push	r22
 880:	7f 93       	push	r23
 882:	8f 93       	push	r24
 884:	9f 93       	push	r25
 886:	af 93       	push	r26
 888:	bf 93       	push	r27
 88a:	ef 93       	push	r30
 88c:	ff 93       	push	r31

	if (EXTI_INT0_Fptr!=NULL)
 88e:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <EXTI_INT0_Fptr>
 892:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <EXTI_INT0_Fptr+0x1>
 896:	30 97       	sbiw	r30, 0x00	; 0
 898:	09 f0       	breq	.+2      	; 0x89c <__vector_1+0x30>
	{
		EXTI_INT0_Fptr();
 89a:	09 95       	icall
	}
}
 89c:	ff 91       	pop	r31
 89e:	ef 91       	pop	r30
 8a0:	bf 91       	pop	r27
 8a2:	af 91       	pop	r26
 8a4:	9f 91       	pop	r25
 8a6:	8f 91       	pop	r24
 8a8:	7f 91       	pop	r23
 8aa:	6f 91       	pop	r22
 8ac:	5f 91       	pop	r21
 8ae:	4f 91       	pop	r20
 8b0:	3f 91       	pop	r19
 8b2:	2f 91       	pop	r18
 8b4:	0f 90       	pop	r0
 8b6:	0f be       	out	0x3f, r0	; 63
 8b8:	0f 90       	pop	r0
 8ba:	1f 90       	pop	r1
 8bc:	18 95       	reti

000008be <__vector_2>:
ISR(EXTI_INT1_vect)
{
 8be:	1f 92       	push	r1
 8c0:	0f 92       	push	r0
 8c2:	0f b6       	in	r0, 0x3f	; 63
 8c4:	0f 92       	push	r0
 8c6:	11 24       	eor	r1, r1
 8c8:	2f 93       	push	r18
 8ca:	3f 93       	push	r19
 8cc:	4f 93       	push	r20
 8ce:	5f 93       	push	r21
 8d0:	6f 93       	push	r22
 8d2:	7f 93       	push	r23
 8d4:	8f 93       	push	r24
 8d6:	9f 93       	push	r25
 8d8:	af 93       	push	r26
 8da:	bf 93       	push	r27
 8dc:	ef 93       	push	r30
 8de:	ff 93       	push	r31
	if (EXTI_INT1_Fptr!=NULL)
 8e0:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <EXTI_INT1_Fptr>
 8e4:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <EXTI_INT1_Fptr+0x1>
 8e8:	30 97       	sbiw	r30, 0x00	; 0
 8ea:	09 f0       	breq	.+2      	; 0x8ee <__vector_2+0x30>
	{
		EXTI_INT1_Fptr();
 8ec:	09 95       	icall
	}
}
 8ee:	ff 91       	pop	r31
 8f0:	ef 91       	pop	r30
 8f2:	bf 91       	pop	r27
 8f4:	af 91       	pop	r26
 8f6:	9f 91       	pop	r25
 8f8:	8f 91       	pop	r24
 8fa:	7f 91       	pop	r23
 8fc:	6f 91       	pop	r22
 8fe:	5f 91       	pop	r21
 900:	4f 91       	pop	r20
 902:	3f 91       	pop	r19
 904:	2f 91       	pop	r18
 906:	0f 90       	pop	r0
 908:	0f be       	out	0x3f, r0	; 63
 90a:	0f 90       	pop	r0
 90c:	1f 90       	pop	r1
 90e:	18 95       	reti

00000910 <__vector_3>:
ISR(EXTI_INT2_vect)
{
 910:	1f 92       	push	r1
 912:	0f 92       	push	r0
 914:	0f b6       	in	r0, 0x3f	; 63
 916:	0f 92       	push	r0
 918:	11 24       	eor	r1, r1
 91a:	2f 93       	push	r18
 91c:	3f 93       	push	r19
 91e:	4f 93       	push	r20
 920:	5f 93       	push	r21
 922:	6f 93       	push	r22
 924:	7f 93       	push	r23
 926:	8f 93       	push	r24
 928:	9f 93       	push	r25
 92a:	af 93       	push	r26
 92c:	bf 93       	push	r27
 92e:	ef 93       	push	r30
 930:	ff 93       	push	r31
	if (EXTI_INT2_Fptr!=NULL)
 932:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <EXTI_INT2_Fptr>
 936:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <EXTI_INT2_Fptr+0x1>
 93a:	30 97       	sbiw	r30, 0x00	; 0
 93c:	09 f0       	breq	.+2      	; 0x940 <__vector_3+0x30>
	{
		EXTI_INT2_Fptr();
 93e:	09 95       	icall
	}
}
 940:	ff 91       	pop	r31
 942:	ef 91       	pop	r30
 944:	bf 91       	pop	r27
 946:	af 91       	pop	r26
 948:	9f 91       	pop	r25
 94a:	8f 91       	pop	r24
 94c:	7f 91       	pop	r23
 94e:	6f 91       	pop	r22
 950:	5f 91       	pop	r21
 952:	4f 91       	pop	r20
 954:	3f 91       	pop	r19
 956:	2f 91       	pop	r18
 958:	0f 90       	pop	r0
 95a:	0f be       	out	0x3f, r0	; 63
 95c:	0f 90       	pop	r0
 95e:	1f 90       	pop	r1
 960:	18 95       	reti

00000962 <Port_vidInit>:
#define PORT_u8OUTPUT_LOW		1

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		0

	DDRA = CONC(PORT_u8MODEPIN07,PORT_u8MODEPIN06,PORT_u8MODEPIN05,PORT_u8MODEPIN04,PORT_u8MODEPIN03,PORT_u8MODEPIN02,PORT_u8MODEPIN01,PORT_u8MODEPIN00);
 962:	8e ef       	ldi	r24, 0xFE	; 254
 964:	8a bb       	out	0x1a, r24	; 26
	DDRB = CONC(PORT_u8MODEPIN15,PORT_u8MODEPIN14,PORT_u8MODEPIN13,PORT_u8MODEPIN12,PORT_u8MODEPIN11,PORT_u8MODEPIN10,PORT_u8MODEPIN09,PORT_u8MODEPIN08);
 966:	8f ef       	ldi	r24, 0xFF	; 255
 968:	87 bb       	out	0x17, r24	; 23
	DDRC = CONC(PORT_u8MODEPIN23,PORT_u8MODEPIN22,PORT_u8MODEPIN21,PORT_u8MODEPIN20,PORT_u8MODEPIN19,PORT_u8MODEPIN18,PORT_u8MODEPIN17,PORT_u8MODEPIN16);
 96a:	84 bb       	out	0x14, r24	; 20
	DDRD = CONC(PORT_u8MODEPIN31,PORT_u8MODEPIN30,PORT_u8MODEPIN29,PORT_u8MODEPIN28,PORT_u8MODEPIN27,PORT_u8MODEPIN26,PORT_u8MODEPIN25,PORT_u8MODEPIN24);
 96c:	83 e1       	ldi	r24, 0x13	; 19
 96e:	81 bb       	out	0x11, r24	; 17
#define PORT_u8OUTPUT_LOW		0

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		1

	PORTA = CONC(PORT_u8MODEPIN07,PORT_u8MODEPIN06,PORT_u8MODEPIN05,PORT_u8MODEPIN04,PORT_u8MODEPIN03,PORT_u8MODEPIN02,PORT_u8MODEPIN01,PORT_u8MODEPIN00);
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	8b bb       	out	0x1b, r24	; 27
	PORTB = CONC(PORT_u8MODEPIN15,PORT_u8MODEPIN14,PORT_u8MODEPIN13,PORT_u8MODEPIN12,PORT_u8MODEPIN11,PORT_u8MODEPIN10,PORT_u8MODEPIN09,PORT_u8MODEPIN08);
 974:	18 ba       	out	0x18, r1	; 24
	PORTC = CONC(PORT_u8MODEPIN23,PORT_u8MODEPIN22,PORT_u8MODEPIN21,PORT_u8MODEPIN20,PORT_u8MODEPIN19,PORT_u8MODEPIN18,PORT_u8MODEPIN17,PORT_u8MODEPIN16);
 976:	15 ba       	out	0x15, r1	; 21
	PORTD = CONC(PORT_u8MODEPIN31,PORT_u8MODEPIN30,PORT_u8MODEPIN29,PORT_u8MODEPIN28,PORT_u8MODEPIN27,PORT_u8MODEPIN26,PORT_u8MODEPIN25,PORT_u8MODEPIN24);
 978:	8c ee       	ldi	r24, 0xEC	; 236
 97a:	82 bb       	out	0x12, r24	; 18
 97c:	08 95       	ret

0000097e <__udivmodsi4>:
 97e:	a1 e2       	ldi	r26, 0x21	; 33
 980:	1a 2e       	mov	r1, r26
 982:	aa 1b       	sub	r26, r26
 984:	bb 1b       	sub	r27, r27
 986:	fd 01       	movw	r30, r26
 988:	0d c0       	rjmp	.+26     	; 0x9a4 <__udivmodsi4_ep>

0000098a <__udivmodsi4_loop>:
 98a:	aa 1f       	adc	r26, r26
 98c:	bb 1f       	adc	r27, r27
 98e:	ee 1f       	adc	r30, r30
 990:	ff 1f       	adc	r31, r31
 992:	a2 17       	cp	r26, r18
 994:	b3 07       	cpc	r27, r19
 996:	e4 07       	cpc	r30, r20
 998:	f5 07       	cpc	r31, r21
 99a:	20 f0       	brcs	.+8      	; 0x9a4 <__udivmodsi4_ep>
 99c:	a2 1b       	sub	r26, r18
 99e:	b3 0b       	sbc	r27, r19
 9a0:	e4 0b       	sbc	r30, r20
 9a2:	f5 0b       	sbc	r31, r21

000009a4 <__udivmodsi4_ep>:
 9a4:	66 1f       	adc	r22, r22
 9a6:	77 1f       	adc	r23, r23
 9a8:	88 1f       	adc	r24, r24
 9aa:	99 1f       	adc	r25, r25
 9ac:	1a 94       	dec	r1
 9ae:	69 f7       	brne	.-38     	; 0x98a <__udivmodsi4_loop>
 9b0:	60 95       	com	r22
 9b2:	70 95       	com	r23
 9b4:	80 95       	com	r24
 9b6:	90 95       	com	r25
 9b8:	9b 01       	movw	r18, r22
 9ba:	ac 01       	movw	r20, r24
 9bc:	bd 01       	movw	r22, r26
 9be:	cf 01       	movw	r24, r30
 9c0:	08 95       	ret

000009c2 <__umulhisi3>:
 9c2:	a2 9f       	mul	r26, r18
 9c4:	b0 01       	movw	r22, r0
 9c6:	b3 9f       	mul	r27, r19
 9c8:	c0 01       	movw	r24, r0
 9ca:	a3 9f       	mul	r26, r19
 9cc:	70 0d       	add	r23, r0
 9ce:	81 1d       	adc	r24, r1
 9d0:	11 24       	eor	r1, r1
 9d2:	91 1d       	adc	r25, r1
 9d4:	b2 9f       	mul	r27, r18
 9d6:	70 0d       	add	r23, r0
 9d8:	81 1d       	adc	r24, r1
 9da:	11 24       	eor	r1, r1
 9dc:	91 1d       	adc	r25, r1
 9de:	08 95       	ret

000009e0 <_exit>:
 9e0:	f8 94       	cli

000009e2 <__stop_program>:
 9e2:	ff cf       	rjmp	.-2      	; 0x9e2 <__stop_program>
