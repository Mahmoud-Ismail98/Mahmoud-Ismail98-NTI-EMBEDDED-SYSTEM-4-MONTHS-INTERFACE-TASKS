
DIO_Timer_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000768  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000798  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e55  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087e  00000000  00000000  000016f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c02  00000000  00000000  00001f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00002b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062b  00000000  00000000  00002d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013fe  00000000  00000000  0000334b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004749  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <main>
  74:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Choose_Seg>:
 void SegBCD_vInit(void)
 {
	 Dio_enuWriteChannel(SEG1_COM,DIO_u8LEVEL_HIGH);
	 Dio_enuWriteChannel(SEG2_COM,DIO_u8LEVEL_HIGH);
	 Dio_enuWriteChannel(SEG3_COM,DIO_u8LEVEL_HIGH);
	 Dio_enuWriteChannel(SEG4_COM,DIO_u8LEVEL_HIGH);
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	39 f0       	breq	.+14     	; 0x8e <Choose_Seg+0x12>
  80:	60 f0       	brcs	.+24     	; 0x9a <Choose_Seg+0x1e>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	31 f0       	breq	.+12     	; 0x92 <Choose_Seg+0x16>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	31 f0       	breq	.+12     	; 0x96 <Choose_Seg+0x1a>
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	08 95       	ret
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	08 95       	ret
  92:	8d e0       	ldi	r24, 0x0D	; 13
  94:	08 95       	ret
  96:	8e e0       	ldi	r24, 0x0E	; 14
  98:	08 95       	ret
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	08 95       	ret

0000009e <SegBSD_vWriteVal>:
 }

void SegBSD_vWriteVal(u8 Copy_u8Num)
{
  9e:	cf 93       	push	r28
  a0:	c8 2f       	mov	r28, r24
	if(Copy_u8Num <= 7)
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	b0 f4       	brcc	.+44     	; 0xd2 <SegBSD_vWriteVal+0x34>
	{
		Dio_enuWriteChannel(BCD_BIT0,GET_BIT(Copy_u8Num,0));
  a6:	68 2f       	mov	r22, r24
  a8:	61 70       	andi	r22, 0x01	; 1
  aa:	88 e0       	ldi	r24, 0x08	; 8
  ac:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Dio_enuWriteChannel>
		Dio_enuWriteChannel(BCD_BIT1,GET_BIT(Copy_u8Num,1));
  b0:	c1 fb       	bst	r28, 1
  b2:	66 27       	eor	r22, r22
  b4:	60 f9       	bld	r22, 0
  b6:	89 e0       	ldi	r24, 0x09	; 9
  b8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Dio_enuWriteChannel>
		Dio_enuWriteChannel(BCD_BIT2,GET_BIT(Copy_u8Num,2));
  bc:	c2 fb       	bst	r28, 2
  be:	66 27       	eor	r22, r22
  c0:	60 f9       	bld	r22, 0
  c2:	8a e0       	ldi	r24, 0x0A	; 10
  c4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Dio_enuWriteChannel>
		Dio_enuWriteChannel(BCD_BIT3,DIO_u8LEVEL_LOW);
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	8c e0       	ldi	r24, 0x0C	; 12
  cc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Dio_enuWriteChannel>
  d0:	19 c0       	rjmp	.+50     	; 0x104 <SegBSD_vWriteVal+0x66>

	}
	else if(Copy_u8Num > 7 && Copy_u8Num <=9)
  d2:	88 ef       	ldi	r24, 0xF8	; 248
  d4:	8c 0f       	add	r24, r28
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	a8 f4       	brcc	.+42     	; 0x104 <SegBSD_vWriteVal+0x66>
	{
		Dio_enuWriteChannel(BCD_BIT3,DIO_u8LEVEL_HIGH);
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	8c e0       	ldi	r24, 0x0C	; 12
  de:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Dio_enuWriteChannel>

		Dio_enuWriteChannel(BCD_BIT0,GET_BIT(Copy_u8Num,0));
  e2:	6c 2f       	mov	r22, r28
  e4:	61 70       	andi	r22, 0x01	; 1
  e6:	88 e0       	ldi	r24, 0x08	; 8
  e8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Dio_enuWriteChannel>
		Dio_enuWriteChannel(BCD_BIT1,GET_BIT(Copy_u8Num,1));
  ec:	c1 fb       	bst	r28, 1
  ee:	66 27       	eor	r22, r22
  f0:	60 f9       	bld	r22, 0
  f2:	89 e0       	ldi	r24, 0x09	; 9
  f4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Dio_enuWriteChannel>
		Dio_enuWriteChannel(BCD_BIT2,GET_BIT(Copy_u8Num,2));
  f8:	c2 fb       	bst	r28, 2
  fa:	66 27       	eor	r22, r22
  fc:	60 f9       	bld	r22, 0
  fe:	8a e0       	ldi	r24, 0x0A	; 10
 100:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Dio_enuWriteChannel>

	}
}
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <SegBSD_vWriteValMUX>:
	return R_val;
}


void SegBSD_vWriteValMUX(u32 Copy_u32Num)
{
 108:	af 92       	push	r10
 10a:	bf 92       	push	r11
 10c:	cf 92       	push	r12
 10e:	df 92       	push	r13
 110:	ef 92       	push	r14
 112:	ff 92       	push	r15
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	6b 01       	movw	r12, r22
 11e:	7c 01       	movw	r14, r24

	u8 x = 0;
 120:	c0 e0       	ldi	r28, 0x00	; 0
	while(Copy_u32Num != 0  || x<4)
 122:	25 c0       	rjmp	.+74     	; 0x16e <SegBSD_vWriteValMUX+0x66>
	{
		Dio_enuWriteChannel(Choose_Seg(x),DIO_u8LEVEL_LOW);
 124:	8c 2f       	mov	r24, r28
 126:	0e 94 3e 00 	call	0x7c	; 0x7c <Choose_Seg>
 12a:	d8 2f       	mov	r29, r24
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Dio_enuWriteChannel>
		SegBSD_vWriteVal(Copy_u32Num%10);
 132:	c7 01       	movw	r24, r14
 134:	b6 01       	movw	r22, r12
 136:	2a e0       	ldi	r18, 0x0A	; 10
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	0e 94 56 03 	call	0x6ac	; 0x6ac <__udivmodsi4>
 142:	a2 2e       	mov	r10, r18
 144:	b3 2e       	mov	r11, r19
 146:	04 2f       	mov	r16, r20
 148:	15 2f       	mov	r17, r21
 14a:	86 2f       	mov	r24, r22
 14c:	0e 94 4f 00 	call	0x9e	; 0x9e <SegBSD_vWriteVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	8f e9       	ldi	r24, 0x9F	; 159
 152:	9f e0       	ldi	r25, 0x0F	; 15
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <SegBSD_vWriteValMUX+0x4c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <SegBSD_vWriteValMUX+0x52>
 15a:	00 00       	nop
		_delay_ms(1);
		Dio_enuWriteChannel(Choose_Seg(x),DIO_u8LEVEL_HIGH);
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	8d 2f       	mov	r24, r29
 160:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Dio_enuWriteChannel>
		x++;
 164:	cf 5f       	subi	r28, 0xFF	; 255
		Copy_u32Num/=10;
 166:	ca 2c       	mov	r12, r10
 168:	db 2c       	mov	r13, r11
 16a:	e0 2e       	mov	r14, r16
 16c:	f1 2e       	mov	r15, r17

void SegBSD_vWriteValMUX(u32 Copy_u32Num)
{

	u8 x = 0;
	while(Copy_u32Num != 0  || x<4)
 16e:	c1 14       	cp	r12, r1
 170:	d1 04       	cpc	r13, r1
 172:	e1 04       	cpc	r14, r1
 174:	f1 04       	cpc	r15, r1
 176:	b1 f6       	brne	.-84     	; 0x124 <SegBSD_vWriteValMUX+0x1c>
 178:	c4 30       	cpi	r28, 0x04	; 4
 17a:	a0 f2       	brcs	.-88     	; 0x124 <SegBSD_vWriteValMUX+0x1c>
		Dio_enuWriteChannel(Choose_Seg(x),DIO_u8LEVEL_HIGH);
		x++;
		Copy_u32Num/=10;

	}
}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	ff 90       	pop	r15
 186:	ef 90       	pop	r14
 188:	df 90       	pop	r13
 18a:	cf 90       	pop	r12
 18c:	bf 90       	pop	r11
 18e:	af 90       	pop	r10
 190:	08 95       	ret

00000192 <SegBSD_vTime>:
#define F_CPU 16000000
#include "util/delay.h"

//Counting time function
void SegBSD_vTime(void)
{
 192:	8f 92       	push	r8
 194:	9f 92       	push	r9
 196:	af 92       	push	r10
 198:	bf 92       	push	r11
 19a:	cf 92       	push	r12
 19c:	df 92       	push	r13
 19e:	ef 92       	push	r14
 1a0:	ff 92       	push	r15
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	00 d0       	rcall	.+0      	; 0x1a8 <SegBSD_vTime+0x16>
 1a8:	1f 92       	push	r1
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
	u32 TEMP_u32Counter=Copy_u32Counter;
	u8 Reset_B;
	u8 Pause_B;
	u8 Resume_B;
	static u8 Pause_flag = 0;
	Dio_enuReadChannel(DIO_u8CHANNEL31,&Reset_B);
 1ae:	be 01       	movw	r22, r28
 1b0:	6f 5f       	subi	r22, 0xFF	; 255
 1b2:	7f 4f       	sbci	r23, 0xFF	; 255
 1b4:	8f e1       	ldi	r24, 0x1F	; 31
 1b6:	0e 94 4b 02 	call	0x496	; 0x496 <Dio_enuReadChannel>
	Dio_enuReadChannel(DIO_u8CHANNEL30,&Pause_B);
 1ba:	be 01       	movw	r22, r28
 1bc:	6e 5f       	subi	r22, 0xFE	; 254
 1be:	7f 4f       	sbci	r23, 0xFF	; 255
 1c0:	8e e1       	ldi	r24, 0x1E	; 30
 1c2:	0e 94 4b 02 	call	0x496	; 0x496 <Dio_enuReadChannel>
	Dio_enuReadChannel(DIO_u8CHANNEL29,&Resume_B);
 1c6:	be 01       	movw	r22, r28
 1c8:	6d 5f       	subi	r22, 0xFD	; 253
 1ca:	7f 4f       	sbci	r23, 0xFF	; 255
 1cc:	8d e1       	ldi	r24, 0x1D	; 29
 1ce:	0e 94 4b 02 	call	0x496	; 0x496 <Dio_enuReadChannel>
	if(!Pause_B)
 1d2:	8a 81       	ldd	r24, Y+2	; 0x02
 1d4:	81 11       	cpse	r24, r1
 1d6:	03 c0       	rjmp	.+6      	; 0x1de <SegBSD_vTime+0x4c>
	{
		Pause_flag = 1;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	if(!Resume_B)
 1de:	8b 81       	ldd	r24, Y+3	; 0x03
 1e0:	81 11       	cpse	r24, r1
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <SegBSD_vTime+0x56>
	{
		Pause_flag = 0;
 1e4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	if(Pause_flag == 0)
 1e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ec:	88 23       	and	r24, r24
 1ee:	39 f1       	breq	.+78     	; 0x23e <SegBSD_vTime+0xac>
 1f0:	50 c0       	rjmp	.+160    	; 0x292 <SegBSD_vTime+0x100>
	{
		while(Counter <= 249)
		{
			TEMP_u32Counter=Copy_u32Counter;
 1f2:	80 90 61 00 	lds	r8, 0x0061	; 0x800061 <Copy_u32Counter.1780>
 1f6:	90 90 62 00 	lds	r9, 0x0062	; 0x800062 <Copy_u32Counter.1780+0x1>
 1fa:	a0 90 63 00 	lds	r10, 0x0063	; 0x800063 <Copy_u32Counter.1780+0x2>
 1fe:	b0 90 64 00 	lds	r11, 0x0064	; 0x800064 <Copy_u32Counter.1780+0x3>
			Dio_enuReadChannel(DIO_u8CHANNEL31,&Reset_B);
 202:	be 01       	movw	r22, r28
 204:	6f 5f       	subi	r22, 0xFF	; 255
 206:	7f 4f       	sbci	r23, 0xFF	; 255
 208:	8f e1       	ldi	r24, 0x1F	; 31
 20a:	0e 94 4b 02 	call	0x496	; 0x496 <Dio_enuReadChannel>
			/*Display TEMP*/
			SegBSD_vWriteValMUX(TEMP_u32Counter);
 20e:	c5 01       	movw	r24, r10
 210:	b4 01       	movw	r22, r8
 212:	0e 94 84 00 	call	0x108	; 0x108 <SegBSD_vWriteValMUX>
			/**/
			Counter++;
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	c2 1a       	sub	r12, r18
 21a:	d2 0a       	sbc	r13, r18
 21c:	e2 0a       	sbc	r14, r18
 21e:	f2 0a       	sbc	r15, r18
			Dio_enuFlipChannel(DIO_u8CHANNEL06);
 220:	86 e0       	ldi	r24, 0x06	; 6
 222:	0e 94 ce 02 	call	0x59c	; 0x59c <Dio_enuFlipChannel>
			if(!Reset_B)
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	81 11       	cpse	r24, r1
 22a:	0c c0       	rjmp	.+24     	; 0x244 <SegBSD_vTime+0xb2>
			{
				Copy_u32Counter = 0;
 22c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Copy_u32Counter.1780>
 230:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Copy_u32Counter.1780+0x1>
 234:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Copy_u32Counter.1780+0x2>
 238:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Copy_u32Counter.1780+0x3>
 23c:	03 c0       	rjmp	.+6      	; 0x244 <SegBSD_vTime+0xb2>
 23e:	c1 2c       	mov	r12, r1
 240:	d1 2c       	mov	r13, r1
 242:	76 01       	movw	r14, r12
	{
		Pause_flag = 0;
	}
	if(Pause_flag == 0)
	{
		while(Counter <= 249)
 244:	8a ef       	ldi	r24, 0xFA	; 250
 246:	c8 16       	cp	r12, r24
 248:	d1 04       	cpc	r13, r1
 24a:	e1 04       	cpc	r14, r1
 24c:	f1 04       	cpc	r15, r1
 24e:	88 f2       	brcs	.-94     	; 0x1f2 <SegBSD_vTime+0x60>
			if(!Reset_B)
			{
				Copy_u32Counter = 0;
			}
		}
		Copy_u32Counter++;
 250:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Copy_u32Counter.1780>
 254:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <Copy_u32Counter.1780+0x1>
 258:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <Copy_u32Counter.1780+0x2>
 25c:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <Copy_u32Counter.1780+0x3>
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	a1 1d       	adc	r26, r1
 264:	b1 1d       	adc	r27, r1
 266:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Copy_u32Counter.1780>
 26a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <Copy_u32Counter.1780+0x1>
 26e:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <Copy_u32Counter.1780+0x2>
 272:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <Copy_u32Counter.1780+0x3>
		if(Copy_u32Counter == 10000)
 276:	80 31       	cpi	r24, 0x10	; 16
 278:	97 42       	sbci	r25, 0x27	; 39
 27a:	a1 05       	cpc	r26, r1
 27c:	b1 05       	cpc	r27, r1
 27e:	f1 f4       	brne	.+60     	; 0x2bc <SegBSD_vTime+0x12a>
		{
			Copy_u32Counter = 0;
 280:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Copy_u32Counter.1780>
 284:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Copy_u32Counter.1780+0x1>
 288:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Copy_u32Counter.1780+0x2>
 28c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Copy_u32Counter.1780+0x3>
 290:	15 c0       	rjmp	.+42     	; 0x2bc <SegBSD_vTime+0x12a>
		}

	}
	else
	{
		SegBSD_vWriteValMUX(Copy_u32Counter);
 292:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <Copy_u32Counter.1780>
 296:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <Copy_u32Counter.1780+0x1>
 29a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Copy_u32Counter.1780+0x2>
 29e:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <Copy_u32Counter.1780+0x3>
 2a2:	0e 94 84 00 	call	0x108	; 0x108 <SegBSD_vWriteValMUX>
		if(!Reset_B)
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	81 11       	cpse	r24, r1
 2aa:	08 c0       	rjmp	.+16     	; 0x2bc <SegBSD_vTime+0x12a>
		{
			Copy_u32Counter = 0;
 2ac:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Copy_u32Counter.1780>
 2b0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Copy_u32Counter.1780+0x1>
 2b4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Copy_u32Counter.1780+0x2>
 2b8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Copy_u32Counter.1780+0x3>
		}
	}

}
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	ff 90       	pop	r15
 2c8:	ef 90       	pop	r14
 2ca:	df 90       	pop	r13
 2cc:	cf 90       	pop	r12
 2ce:	bf 90       	pop	r11
 2d0:	af 90       	pop	r10
 2d2:	9f 90       	pop	r9
 2d4:	8f 90       	pop	r8
 2d6:	08 95       	ret

000002d8 <main>:



int main(void)
{
	Port_vidInit();
 2d8:	0e 94 4b 03 	call	0x696	; 0x696 <Port_vidInit>


    while (1)
    {

		 SegBSD_vTime();
 2dc:	0e 94 c9 00 	call	0x192	; 0x192 <SegBSD_vTime>
 2e0:	fd cf       	rjmp	.-6      	; 0x2dc <main+0x4>

000002e2 <Dio_enuWriteChannel>:

		}

	}
	return LOC_enuReturnStatus;
}
 2e2:	80 32       	cpi	r24, 0x20	; 32
 2e4:	08 f0       	brcs	.+2      	; 0x2e8 <Dio_enuWriteChannel+0x6>
 2e6:	c1 c0       	rjmp	.+386    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 2e8:	63 30       	cpi	r22, 0x03	; 3
 2ea:	08 f0       	brcs	.+2      	; 0x2ee <Dio_enuWriteChannel+0xc>
 2ec:	c0 c0       	rjmp	.+384    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 2ee:	98 2f       	mov	r25, r24
 2f0:	96 95       	lsr	r25
 2f2:	96 95       	lsr	r25
 2f4:	96 95       	lsr	r25
 2f6:	87 70       	andi	r24, 0x07	; 7
 2f8:	91 30       	cpi	r25, 0x01	; 1
 2fa:	a1 f1       	breq	.+104    	; 0x364 <Dio_enuWriteChannel+0x82>
 2fc:	38 f0       	brcs	.+14     	; 0x30c <Dio_enuWriteChannel+0x2a>
 2fe:	92 30       	cpi	r25, 0x02	; 2
 300:	09 f4       	brne	.+2      	; 0x304 <Dio_enuWriteChannel+0x22>
 302:	5c c0       	rjmp	.+184    	; 0x3bc <Dio_enuWriteChannel+0xda>
 304:	93 30       	cpi	r25, 0x03	; 3
 306:	09 f4       	brne	.+2      	; 0x30a <Dio_enuWriteChannel+0x28>
 308:	85 c0       	rjmp	.+266    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 30a:	b3 c0       	rjmp	.+358    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 30c:	2a b3       	in	r18, 0x1a	; 26
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	08 2e       	mov	r0, r24
 312:	02 c0       	rjmp	.+4      	; 0x318 <Dio_enuWriteChannel+0x36>
 314:	35 95       	asr	r19
 316:	27 95       	ror	r18
 318:	0a 94       	dec	r0
 31a:	e2 f7       	brpl	.-8      	; 0x314 <Dio_enuWriteChannel+0x32>
 31c:	20 ff       	sbrs	r18, 0
 31e:	ab c0       	rjmp	.+342    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 320:	66 23       	and	r22, r22
 322:	89 f0       	breq	.+34     	; 0x346 <Dio_enuWriteChannel+0x64>
 324:	61 30       	cpi	r22, 0x01	; 1
 326:	09 f0       	breq	.+2      	; 0x32a <Dio_enuWriteChannel+0x48>
 328:	a8 c0       	rjmp	.+336    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 32a:	4b b3       	in	r20, 0x1b	; 27
 32c:	21 e0       	ldi	r18, 0x01	; 1
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	b9 01       	movw	r22, r18
 332:	02 c0       	rjmp	.+4      	; 0x338 <Dio_enuWriteChannel+0x56>
 334:	66 0f       	add	r22, r22
 336:	77 1f       	adc	r23, r23
 338:	8a 95       	dec	r24
 33a:	e2 f7       	brpl	.-8      	; 0x334 <Dio_enuWriteChannel+0x52>
 33c:	cb 01       	movw	r24, r22
 33e:	84 2b       	or	r24, r20
 340:	8b bb       	out	0x1b, r24	; 27
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	08 95       	ret
 346:	4b b3       	in	r20, 0x1b	; 27
 348:	21 e0       	ldi	r18, 0x01	; 1
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	b9 01       	movw	r22, r18
 34e:	02 c0       	rjmp	.+4      	; 0x354 <Dio_enuWriteChannel+0x72>
 350:	66 0f       	add	r22, r22
 352:	77 1f       	adc	r23, r23
 354:	8a 95       	dec	r24
 356:	e2 f7       	brpl	.-8      	; 0x350 <Dio_enuWriteChannel+0x6e>
 358:	cb 01       	movw	r24, r22
 35a:	80 95       	com	r24
 35c:	84 23       	and	r24, r20
 35e:	8b bb       	out	0x1b, r24	; 27
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	08 95       	ret
 364:	27 b3       	in	r18, 0x17	; 23
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	08 2e       	mov	r0, r24
 36a:	02 c0       	rjmp	.+4      	; 0x370 <Dio_enuWriteChannel+0x8e>
 36c:	35 95       	asr	r19
 36e:	27 95       	ror	r18
 370:	0a 94       	dec	r0
 372:	e2 f7       	brpl	.-8      	; 0x36c <Dio_enuWriteChannel+0x8a>
 374:	20 ff       	sbrs	r18, 0
 376:	83 c0       	rjmp	.+262    	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 378:	66 23       	and	r22, r22
 37a:	89 f0       	breq	.+34     	; 0x39e <Dio_enuWriteChannel+0xbc>
 37c:	61 30       	cpi	r22, 0x01	; 1
 37e:	09 f0       	breq	.+2      	; 0x382 <Dio_enuWriteChannel+0xa0>
 380:	80 c0       	rjmp	.+256    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 382:	48 b3       	in	r20, 0x18	; 24
 384:	21 e0       	ldi	r18, 0x01	; 1
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	b9 01       	movw	r22, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <Dio_enuWriteChannel+0xae>
 38c:	66 0f       	add	r22, r22
 38e:	77 1f       	adc	r23, r23
 390:	8a 95       	dec	r24
 392:	e2 f7       	brpl	.-8      	; 0x38c <Dio_enuWriteChannel+0xaa>
 394:	cb 01       	movw	r24, r22
 396:	84 2b       	or	r24, r20
 398:	88 bb       	out	0x18, r24	; 24
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	08 95       	ret
 39e:	48 b3       	in	r20, 0x18	; 24
 3a0:	21 e0       	ldi	r18, 0x01	; 1
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	b9 01       	movw	r22, r18
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <Dio_enuWriteChannel+0xca>
 3a8:	66 0f       	add	r22, r22
 3aa:	77 1f       	adc	r23, r23
 3ac:	8a 95       	dec	r24
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <Dio_enuWriteChannel+0xc6>
 3b0:	cb 01       	movw	r24, r22
 3b2:	80 95       	com	r24
 3b4:	84 23       	and	r24, r20
 3b6:	88 bb       	out	0x18, r24	; 24
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	08 95       	ret
 3bc:	24 b3       	in	r18, 0x14	; 20
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	08 2e       	mov	r0, r24
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <Dio_enuWriteChannel+0xe6>
 3c4:	35 95       	asr	r19
 3c6:	27 95       	ror	r18
 3c8:	0a 94       	dec	r0
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <Dio_enuWriteChannel+0xe2>
 3cc:	20 ff       	sbrs	r18, 0
 3ce:	5b c0       	rjmp	.+182    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 3d0:	66 23       	and	r22, r22
 3d2:	89 f0       	breq	.+34     	; 0x3f6 <Dio_enuWriteChannel+0x114>
 3d4:	61 30       	cpi	r22, 0x01	; 1
 3d6:	09 f0       	breq	.+2      	; 0x3da <Dio_enuWriteChannel+0xf8>
 3d8:	58 c0       	rjmp	.+176    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 3da:	45 b3       	in	r20, 0x15	; 21
 3dc:	21 e0       	ldi	r18, 0x01	; 1
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	b9 01       	movw	r22, r18
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <Dio_enuWriteChannel+0x106>
 3e4:	66 0f       	add	r22, r22
 3e6:	77 1f       	adc	r23, r23
 3e8:	8a 95       	dec	r24
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <Dio_enuWriteChannel+0x102>
 3ec:	cb 01       	movw	r24, r22
 3ee:	84 2b       	or	r24, r20
 3f0:	85 bb       	out	0x15, r24	; 21
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	08 95       	ret
 3f6:	45 b3       	in	r20, 0x15	; 21
 3f8:	21 e0       	ldi	r18, 0x01	; 1
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	b9 01       	movw	r22, r18
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	66 0f       	add	r22, r22
 402:	77 1f       	adc	r23, r23
 404:	8a 95       	dec	r24
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	cb 01       	movw	r24, r22
 40a:	80 95       	com	r24
 40c:	84 23       	and	r24, r20
 40e:	85 bb       	out	0x15, r24	; 21
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	08 95       	ret
 414:	21 b3       	in	r18, 0x11	; 17
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	08 2e       	mov	r0, r24
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41c:	35 95       	asr	r19
 41e:	27 95       	ror	r18
 420:	0a 94       	dec	r0
 422:	e2 f7       	brpl	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 424:	20 ff       	sbrs	r18, 0
 426:	33 c0       	rjmp	.+102    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 428:	66 23       	and	r22, r22
 42a:	81 f0       	breq	.+32     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 42c:	61 30       	cpi	r22, 0x01	; 1
 42e:	89 f5       	brne	.+98     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 430:	42 b3       	in	r20, 0x12	; 18
 432:	21 e0       	ldi	r18, 0x01	; 1
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	b9 01       	movw	r22, r18
 438:	02 c0       	rjmp	.+4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43a:	66 0f       	add	r22, r22
 43c:	77 1f       	adc	r23, r23
 43e:	8a 95       	dec	r24
 440:	e2 f7       	brpl	.-8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 442:	cb 01       	movw	r24, r22
 444:	84 2b       	or	r24, r20
 446:	82 bb       	out	0x12, r24	; 18
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	08 95       	ret
 44c:	42 b3       	in	r20, 0x12	; 18
 44e:	21 e0       	ldi	r18, 0x01	; 1
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	b9 01       	movw	r22, r18
 454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 456:	66 0f       	add	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	8a 95       	dec	r24
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 45e:	cb 01       	movw	r24, r22
 460:	80 95       	com	r24
 462:	84 23       	and	r24, r20
 464:	82 bb       	out	0x12, r24	; 18
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	08 95       	ret
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	08 95       	ret
 46e:	82 e0       	ldi	r24, 0x02	; 2
 470:	08 95       	ret
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	08 95       	ret
 476:	83 e0       	ldi	r24, 0x03	; 3
 478:	08 95       	ret
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	08 95       	ret
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	08 95       	ret
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	08 95       	ret
 486:	83 e0       	ldi	r24, 0x03	; 3
 488:	08 95       	ret
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	08 95       	ret
 48e:	83 e0       	ldi	r24, 0x03	; 3
 490:	08 95       	ret
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	08 95       	ret

00000496 <Dio_enuReadChannel>:
 496:	80 32       	cpi	r24, 0x20	; 32
 498:	08 f0       	brcs	.+2      	; 0x49c <Dio_enuReadChannel+0x6>
 49a:	72 c0       	rjmp	.+228    	; 0x580 <Dio_enuReadChannel+0xea>
 49c:	61 15       	cp	r22, r1
 49e:	71 05       	cpc	r23, r1
 4a0:	09 f4       	brne	.+2      	; 0x4a4 <Dio_enuReadChannel+0xe>
 4a2:	70 c0       	rjmp	.+224    	; 0x584 <Dio_enuReadChannel+0xee>
 4a4:	98 2f       	mov	r25, r24
 4a6:	96 95       	lsr	r25
 4a8:	96 95       	lsr	r25
 4aa:	96 95       	lsr	r25
 4ac:	87 70       	andi	r24, 0x07	; 7
 4ae:	91 30       	cpi	r25, 0x01	; 1
 4b0:	f9 f0       	breq	.+62     	; 0x4f0 <Dio_enuReadChannel+0x5a>
 4b2:	30 f0       	brcs	.+12     	; 0x4c0 <Dio_enuReadChannel+0x2a>
 4b4:	92 30       	cpi	r25, 0x02	; 2
 4b6:	a1 f1       	breq	.+104    	; 0x520 <Dio_enuReadChannel+0x8a>
 4b8:	93 30       	cpi	r25, 0x03	; 3
 4ba:	09 f4       	brne	.+2      	; 0x4be <Dio_enuReadChannel+0x28>
 4bc:	49 c0       	rjmp	.+146    	; 0x550 <Dio_enuReadChannel+0xba>
 4be:	64 c0       	rjmp	.+200    	; 0x588 <Dio_enuReadChannel+0xf2>
 4c0:	2a b3       	in	r18, 0x1a	; 26
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	08 2e       	mov	r0, r24
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <Dio_enuReadChannel+0x36>
 4c8:	35 95       	asr	r19
 4ca:	27 95       	ror	r18
 4cc:	0a 94       	dec	r0
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <Dio_enuReadChannel+0x32>
 4d0:	20 fd       	sbrc	r18, 0
 4d2:	5c c0       	rjmp	.+184    	; 0x58c <Dio_enuReadChannel+0xf6>
 4d4:	29 b3       	in	r18, 0x19	; 25
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	a9 01       	movw	r20, r18
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <Dio_enuReadChannel+0x4a>
 4dc:	55 95       	asr	r21
 4de:	47 95       	ror	r20
 4e0:	8a 95       	dec	r24
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <Dio_enuReadChannel+0x46>
 4e4:	ca 01       	movw	r24, r20
 4e6:	81 70       	andi	r24, 0x01	; 1
 4e8:	fb 01       	movw	r30, r22
 4ea:	80 83       	st	Z, r24
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	08 95       	ret
 4f0:	27 b3       	in	r18, 0x17	; 23
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	08 2e       	mov	r0, r24
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <Dio_enuReadChannel+0x66>
 4f8:	35 95       	asr	r19
 4fa:	27 95       	ror	r18
 4fc:	0a 94       	dec	r0
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <Dio_enuReadChannel+0x62>
 500:	20 fd       	sbrc	r18, 0
 502:	46 c0       	rjmp	.+140    	; 0x590 <Dio_enuReadChannel+0xfa>
 504:	26 b3       	in	r18, 0x16	; 22
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	a9 01       	movw	r20, r18
 50a:	02 c0       	rjmp	.+4      	; 0x510 <Dio_enuReadChannel+0x7a>
 50c:	55 95       	asr	r21
 50e:	47 95       	ror	r20
 510:	8a 95       	dec	r24
 512:	e2 f7       	brpl	.-8      	; 0x50c <Dio_enuReadChannel+0x76>
 514:	ca 01       	movw	r24, r20
 516:	81 70       	andi	r24, 0x01	; 1
 518:	fb 01       	movw	r30, r22
 51a:	80 83       	st	Z, r24
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	08 95       	ret
 520:	24 b3       	in	r18, 0x14	; 20
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	08 2e       	mov	r0, r24
 526:	02 c0       	rjmp	.+4      	; 0x52c <Dio_enuReadChannel+0x96>
 528:	35 95       	asr	r19
 52a:	27 95       	ror	r18
 52c:	0a 94       	dec	r0
 52e:	e2 f7       	brpl	.-8      	; 0x528 <Dio_enuReadChannel+0x92>
 530:	20 fd       	sbrc	r18, 0
 532:	30 c0       	rjmp	.+96     	; 0x594 <Dio_enuReadChannel+0xfe>
 534:	23 b3       	in	r18, 0x13	; 19
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	a9 01       	movw	r20, r18
 53a:	02 c0       	rjmp	.+4      	; 0x540 <Dio_enuReadChannel+0xaa>
 53c:	55 95       	asr	r21
 53e:	47 95       	ror	r20
 540:	8a 95       	dec	r24
 542:	e2 f7       	brpl	.-8      	; 0x53c <Dio_enuReadChannel+0xa6>
 544:	ca 01       	movw	r24, r20
 546:	81 70       	andi	r24, 0x01	; 1
 548:	fb 01       	movw	r30, r22
 54a:	80 83       	st	Z, r24
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	08 95       	ret
 550:	21 b3       	in	r18, 0x11	; 17
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	08 2e       	mov	r0, r24
 556:	02 c0       	rjmp	.+4      	; 0x55c <Dio_enuReadChannel+0xc6>
 558:	35 95       	asr	r19
 55a:	27 95       	ror	r18
 55c:	0a 94       	dec	r0
 55e:	e2 f7       	brpl	.-8      	; 0x558 <Dio_enuReadChannel+0xc2>
 560:	20 fd       	sbrc	r18, 0
 562:	1a c0       	rjmp	.+52     	; 0x598 <Dio_enuReadChannel+0x102>
 564:	20 b3       	in	r18, 0x10	; 16
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	a9 01       	movw	r20, r18
 56a:	02 c0       	rjmp	.+4      	; 0x570 <Dio_enuReadChannel+0xda>
 56c:	55 95       	asr	r21
 56e:	47 95       	ror	r20
 570:	8a 95       	dec	r24
 572:	e2 f7       	brpl	.-8      	; 0x56c <Dio_enuReadChannel+0xd6>
 574:	ca 01       	movw	r24, r20
 576:	81 70       	andi	r24, 0x01	; 1
 578:	fb 01       	movw	r30, r22
 57a:	80 83       	st	Z, r24
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	08 95       	ret
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	08 95       	ret
 584:	84 e0       	ldi	r24, 0x04	; 4
 586:	08 95       	ret
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	08 95       	ret
 58c:	83 e0       	ldi	r24, 0x03	; 3
 58e:	08 95       	ret
 590:	83 e0       	ldi	r24, 0x03	; 3
 592:	08 95       	ret
 594:	83 e0       	ldi	r24, 0x03	; 3
 596:	08 95       	ret
 598:	83 e0       	ldi	r24, 0x03	; 3
 59a:	08 95       	ret

0000059c <Dio_enuFlipChannel>:

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
	u8 LOC_u8Port;
	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {
 59c:	80 32       	cpi	r24, 0x20	; 32
 59e:	08 f0       	brcs	.+2      	; 0x5a2 <Dio_enuFlipChannel+0x6>
 5a0:	6e c0       	rjmp	.+220    	; 0x67e <Dio_enuFlipChannel+0xe2>

		LOC_enuReturnStatus = Dio_enuChannelError;
	}

	else {
		LOC_u8Port = Copy_u8ChannelId / DIO_u8REGISTER_SIZE;
 5a2:	98 2f       	mov	r25, r24
 5a4:	96 95       	lsr	r25
 5a6:	96 95       	lsr	r25
 5a8:	96 95       	lsr	r25
		LOC_u8Pin = Copy_u8ChannelId % DIO_u8REGISTER_SIZE;
 5aa:	87 70       	andi	r24, 0x07	; 7

		switch (LOC_u8Port) {
 5ac:	91 30       	cpi	r25, 0x01	; 1
 5ae:	f9 f0       	breq	.+62     	; 0x5ee <Dio_enuFlipChannel+0x52>
 5b0:	30 f0       	brcs	.+12     	; 0x5be <Dio_enuFlipChannel+0x22>
 5b2:	92 30       	cpi	r25, 0x02	; 2
 5b4:	a1 f1       	breq	.+104    	; 0x61e <Dio_enuFlipChannel+0x82>
 5b6:	93 30       	cpi	r25, 0x03	; 3
 5b8:	09 f4       	brne	.+2      	; 0x5bc <Dio_enuFlipChannel+0x20>
 5ba:	49 c0       	rjmp	.+146    	; 0x64e <Dio_enuFlipChannel+0xb2>
 5bc:	62 c0       	rjmp	.+196    	; 0x682 <Dio_enuFlipChannel+0xe6>

		case DIO_u8PORTA:

			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
 5be:	2a b3       	in	r18, 0x1a	; 26
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	08 2e       	mov	r0, r24
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <Dio_enuFlipChannel+0x2e>
 5c6:	35 95       	asr	r19
 5c8:	27 95       	ror	r18
 5ca:	0a 94       	dec	r0
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <Dio_enuFlipChannel+0x2a>
 5ce:	20 ff       	sbrs	r18, 0
 5d0:	5a c0       	rjmp	.+180    	; 0x686 <Dio_enuFlipChannel+0xea>

				TGL_BIT(PORTA, LOC_u8Pin);
 5d2:	4b b3       	in	r20, 0x1b	; 27
 5d4:	21 e0       	ldi	r18, 0x01	; 1
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	b9 01       	movw	r22, r18
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <Dio_enuFlipChannel+0x44>
 5dc:	66 0f       	add	r22, r22
 5de:	77 1f       	adc	r23, r23
 5e0:	8a 95       	dec	r24
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <Dio_enuFlipChannel+0x40>
 5e4:	cb 01       	movw	r24, r22
 5e6:	84 27       	eor	r24, r20
 5e8:	8b bb       	out	0x1b, r24	; 27
	return LOC_enuReturnStatus;
}

Dio_tenuErrorStatus Dio_enuFlipChannel(u8 Copy_u8ChannelId) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	08 95       	ret
			}
			break;

		case DIO_u8PORTB:

			if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
 5ee:	27 b3       	in	r18, 0x17	; 23
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	08 2e       	mov	r0, r24
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <Dio_enuFlipChannel+0x5e>
 5f6:	35 95       	asr	r19
 5f8:	27 95       	ror	r18
 5fa:	0a 94       	dec	r0
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <Dio_enuFlipChannel+0x5a>
 5fe:	20 ff       	sbrs	r18, 0
 600:	44 c0       	rjmp	.+136    	; 0x68a <Dio_enuFlipChannel+0xee>

				TGL_BIT(PORTB, LOC_u8Pin);
 602:	48 b3       	in	r20, 0x18	; 24
 604:	21 e0       	ldi	r18, 0x01	; 1
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	b9 01       	movw	r22, r18
 60a:	02 c0       	rjmp	.+4      	; 0x610 <Dio_enuFlipChannel+0x74>
 60c:	66 0f       	add	r22, r22
 60e:	77 1f       	adc	r23, r23
 610:	8a 95       	dec	r24
 612:	e2 f7       	brpl	.-8      	; 0x60c <Dio_enuFlipChannel+0x70>
 614:	cb 01       	movw	r24, r22
 616:	84 27       	eor	r24, r20
 618:	88 bb       	out	0x18, r24	; 24
	return LOC_enuReturnStatus;
}

Dio_tenuErrorStatus Dio_enuFlipChannel(u8 Copy_u8ChannelId) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	08 95       	ret
			}
			break;

		case DIO_u8PORTC:

			if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
 61e:	24 b3       	in	r18, 0x14	; 20
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	08 2e       	mov	r0, r24
 624:	02 c0       	rjmp	.+4      	; 0x62a <Dio_enuFlipChannel+0x8e>
 626:	35 95       	asr	r19
 628:	27 95       	ror	r18
 62a:	0a 94       	dec	r0
 62c:	e2 f7       	brpl	.-8      	; 0x626 <Dio_enuFlipChannel+0x8a>
 62e:	20 ff       	sbrs	r18, 0
 630:	2e c0       	rjmp	.+92     	; 0x68e <Dio_enuFlipChannel+0xf2>

				TGL_BIT(PORTC, LOC_u8Pin);
 632:	45 b3       	in	r20, 0x15	; 21
 634:	21 e0       	ldi	r18, 0x01	; 1
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	b9 01       	movw	r22, r18
 63a:	02 c0       	rjmp	.+4      	; 0x640 <Dio_enuFlipChannel+0xa4>
 63c:	66 0f       	add	r22, r22
 63e:	77 1f       	adc	r23, r23
 640:	8a 95       	dec	r24
 642:	e2 f7       	brpl	.-8      	; 0x63c <Dio_enuFlipChannel+0xa0>
 644:	cb 01       	movw	r24, r22
 646:	84 27       	eor	r24, r20
 648:	85 bb       	out	0x15, r24	; 21
	return LOC_enuReturnStatus;
}

Dio_tenuErrorStatus Dio_enuFlipChannel(u8 Copy_u8ChannelId) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	08 95       	ret
			}
			break;

		case DIO_u8PORTD:

			if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
 64e:	21 b3       	in	r18, 0x11	; 17
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	08 2e       	mov	r0, r24
 654:	02 c0       	rjmp	.+4      	; 0x65a <Dio_enuFlipChannel+0xbe>
 656:	35 95       	asr	r19
 658:	27 95       	ror	r18
 65a:	0a 94       	dec	r0
 65c:	e2 f7       	brpl	.-8      	; 0x656 <Dio_enuFlipChannel+0xba>
 65e:	20 ff       	sbrs	r18, 0
 660:	18 c0       	rjmp	.+48     	; 0x692 <Dio_enuFlipChannel+0xf6>

				TGL_BIT(PORTD, LOC_u8Pin);
 662:	42 b3       	in	r20, 0x12	; 18
 664:	21 e0       	ldi	r18, 0x01	; 1
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	b9 01       	movw	r22, r18
 66a:	02 c0       	rjmp	.+4      	; 0x670 <Dio_enuFlipChannel+0xd4>
 66c:	66 0f       	add	r22, r22
 66e:	77 1f       	adc	r23, r23
 670:	8a 95       	dec	r24
 672:	e2 f7       	brpl	.-8      	; 0x66c <Dio_enuFlipChannel+0xd0>
 674:	cb 01       	movw	r24, r22
 676:	84 27       	eor	r24, r20
 678:	82 bb       	out	0x12, r24	; 18
	return LOC_enuReturnStatus;
}

Dio_tenuErrorStatus Dio_enuFlipChannel(u8 Copy_u8ChannelId) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	08 95       	ret
	u8 LOC_u8Port;
	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {

		LOC_enuReturnStatus = Dio_enuChannelError;
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	08 95       	ret
	return LOC_enuReturnStatus;
}

Dio_tenuErrorStatus Dio_enuFlipChannel(u8 Copy_u8ChannelId) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	08 95       	ret
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	08 95       	ret
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	08 95       	ret
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	08 95       	ret
 692:	80 e0       	ldi	r24, 0x00	; 0

		}

	}
	return LOC_enuReturnStatus;
}
 694:	08 95       	ret

00000696 <Port_vidInit>:
#define PORT_u8OUTPUT_LOW		1

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		0

	DDRA = CONC(PORT_u8MODEPIN07,PORT_u8MODEPIN06,PORT_u8MODEPIN05,PORT_u8MODEPIN04,PORT_u8MODEPIN03,PORT_u8MODEPIN02,PORT_u8MODEPIN01,PORT_u8MODEPIN00);
 696:	8f ef       	ldi	r24, 0xFF	; 255
 698:	8a bb       	out	0x1a, r24	; 26
	DDRB = CONC(PORT_u8MODEPIN15,PORT_u8MODEPIN14,PORT_u8MODEPIN13,PORT_u8MODEPIN12,PORT_u8MODEPIN11,PORT_u8MODEPIN10,PORT_u8MODEPIN09,PORT_u8MODEPIN08);
 69a:	87 bb       	out	0x17, r24	; 23
	DDRC = CONC(PORT_u8MODEPIN23,PORT_u8MODEPIN22,PORT_u8MODEPIN21,PORT_u8MODEPIN20,PORT_u8MODEPIN19,PORT_u8MODEPIN18,PORT_u8MODEPIN17,PORT_u8MODEPIN16);
 69c:	84 bb       	out	0x14, r24	; 20
	DDRD = CONC(PORT_u8MODEPIN31,PORT_u8MODEPIN30,PORT_u8MODEPIN29,PORT_u8MODEPIN28,PORT_u8MODEPIN27,PORT_u8MODEPIN26,PORT_u8MODEPIN25,PORT_u8MODEPIN24);
 69e:	87 e1       	ldi	r24, 0x17	; 23
 6a0:	81 bb       	out	0x11, r24	; 17
#define PORT_u8OUTPUT_LOW		0

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		1

	PORTA = CONC(PORT_u8MODEPIN07,PORT_u8MODEPIN06,PORT_u8MODEPIN05,PORT_u8MODEPIN04,PORT_u8MODEPIN03,PORT_u8MODEPIN02,PORT_u8MODEPIN01,PORT_u8MODEPIN00);
 6a2:	1b ba       	out	0x1b, r1	; 27
	PORTB = CONC(PORT_u8MODEPIN15,PORT_u8MODEPIN14,PORT_u8MODEPIN13,PORT_u8MODEPIN12,PORT_u8MODEPIN11,PORT_u8MODEPIN10,PORT_u8MODEPIN09,PORT_u8MODEPIN08);
 6a4:	18 ba       	out	0x18, r1	; 24
	PORTC = CONC(PORT_u8MODEPIN23,PORT_u8MODEPIN22,PORT_u8MODEPIN21,PORT_u8MODEPIN20,PORT_u8MODEPIN19,PORT_u8MODEPIN18,PORT_u8MODEPIN17,PORT_u8MODEPIN16);
 6a6:	15 ba       	out	0x15, r1	; 21
	PORTD = CONC(PORT_u8MODEPIN31,PORT_u8MODEPIN30,PORT_u8MODEPIN29,PORT_u8MODEPIN28,PORT_u8MODEPIN27,PORT_u8MODEPIN26,PORT_u8MODEPIN25,PORT_u8MODEPIN24);
 6a8:	12 ba       	out	0x12, r1	; 18
 6aa:	08 95       	ret

000006ac <__udivmodsi4>:
 6ac:	a1 e2       	ldi	r26, 0x21	; 33
 6ae:	1a 2e       	mov	r1, r26
 6b0:	aa 1b       	sub	r26, r26
 6b2:	bb 1b       	sub	r27, r27
 6b4:	fd 01       	movw	r30, r26
 6b6:	0d c0       	rjmp	.+26     	; 0x6d2 <__udivmodsi4_ep>

000006b8 <__udivmodsi4_loop>:
 6b8:	aa 1f       	adc	r26, r26
 6ba:	bb 1f       	adc	r27, r27
 6bc:	ee 1f       	adc	r30, r30
 6be:	ff 1f       	adc	r31, r31
 6c0:	a2 17       	cp	r26, r18
 6c2:	b3 07       	cpc	r27, r19
 6c4:	e4 07       	cpc	r30, r20
 6c6:	f5 07       	cpc	r31, r21
 6c8:	20 f0       	brcs	.+8      	; 0x6d2 <__udivmodsi4_ep>
 6ca:	a2 1b       	sub	r26, r18
 6cc:	b3 0b       	sbc	r27, r19
 6ce:	e4 0b       	sbc	r30, r20
 6d0:	f5 0b       	sbc	r31, r21

000006d2 <__udivmodsi4_ep>:
 6d2:	66 1f       	adc	r22, r22
 6d4:	77 1f       	adc	r23, r23
 6d6:	88 1f       	adc	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	1a 94       	dec	r1
 6dc:	69 f7       	brne	.-38     	; 0x6b8 <__udivmodsi4_loop>
 6de:	60 95       	com	r22
 6e0:	70 95       	com	r23
 6e2:	80 95       	com	r24
 6e4:	90 95       	com	r25
 6e6:	9b 01       	movw	r18, r22
 6e8:	ac 01       	movw	r20, r24
 6ea:	bd 01       	movw	r22, r26
 6ec:	cf 01       	movw	r24, r30
 6ee:	08 95       	ret

000006f0 <_exit>:
 6f0:	f8 94       	cli

000006f2 <__stop_program>:
 6f2:	ff cf       	rjmp	.-2      	; 0x6f2 <__stop_program>
