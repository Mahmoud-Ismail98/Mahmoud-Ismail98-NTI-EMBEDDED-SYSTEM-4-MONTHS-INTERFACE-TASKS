
DIO_Timer_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000768  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000798  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e55  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087e  00000000  00000000  000016f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b43  00000000  00000000  00001f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00002abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060a  00000000  00000000  00002c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013fe  00000000  00000000  0000326a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 bb 02 	call	0x576	; 0x576 <main>
  74:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Dio_enuWriteChannel>:

		}

	}
	return LOC_enuReturnStatus;
}
  7c:	80 32       	cpi	r24, 0x20	; 32
  7e:	08 f0       	brcs	.+2      	; 0x82 <Dio_enuWriteChannel+0x6>
  80:	c1 c0       	rjmp	.+386    	; 0x204 <Dio_enuWriteChannel+0x188>
  82:	63 30       	cpi	r22, 0x03	; 3
  84:	08 f0       	brcs	.+2      	; 0x88 <Dio_enuWriteChannel+0xc>
  86:	c0 c0       	rjmp	.+384    	; 0x208 <Dio_enuWriteChannel+0x18c>
  88:	98 2f       	mov	r25, r24
  8a:	96 95       	lsr	r25
  8c:	96 95       	lsr	r25
  8e:	96 95       	lsr	r25
  90:	87 70       	andi	r24, 0x07	; 7
  92:	91 30       	cpi	r25, 0x01	; 1
  94:	a1 f1       	breq	.+104    	; 0xfe <Dio_enuWriteChannel+0x82>
  96:	38 f0       	brcs	.+14     	; 0xa6 <Dio_enuWriteChannel+0x2a>
  98:	92 30       	cpi	r25, 0x02	; 2
  9a:	09 f4       	brne	.+2      	; 0x9e <Dio_enuWriteChannel+0x22>
  9c:	5c c0       	rjmp	.+184    	; 0x156 <Dio_enuWriteChannel+0xda>
  9e:	93 30       	cpi	r25, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <Dio_enuWriteChannel+0x28>
  a2:	85 c0       	rjmp	.+266    	; 0x1ae <Dio_enuWriteChannel+0x132>
  a4:	b3 c0       	rjmp	.+358    	; 0x20c <Dio_enuWriteChannel+0x190>
  a6:	2a b3       	in	r18, 0x1a	; 26
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	08 2e       	mov	r0, r24
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <Dio_enuWriteChannel+0x36>
  ae:	35 95       	asr	r19
  b0:	27 95       	ror	r18
  b2:	0a 94       	dec	r0
  b4:	e2 f7       	brpl	.-8      	; 0xae <Dio_enuWriteChannel+0x32>
  b6:	20 ff       	sbrs	r18, 0
  b8:	ab c0       	rjmp	.+342    	; 0x210 <Dio_enuWriteChannel+0x194>
  ba:	66 23       	and	r22, r22
  bc:	89 f0       	breq	.+34     	; 0xe0 <Dio_enuWriteChannel+0x64>
  be:	61 30       	cpi	r22, 0x01	; 1
  c0:	09 f0       	breq	.+2      	; 0xc4 <Dio_enuWriteChannel+0x48>
  c2:	a8 c0       	rjmp	.+336    	; 0x214 <Dio_enuWriteChannel+0x198>
  c4:	4b b3       	in	r20, 0x1b	; 27
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	b9 01       	movw	r22, r18
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <Dio_enuWriteChannel+0x56>
  ce:	66 0f       	add	r22, r22
  d0:	77 1f       	adc	r23, r23
  d2:	8a 95       	dec	r24
  d4:	e2 f7       	brpl	.-8      	; 0xce <Dio_enuWriteChannel+0x52>
  d6:	cb 01       	movw	r24, r22
  d8:	84 2b       	or	r24, r20
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	08 95       	ret
  e0:	4b b3       	in	r20, 0x1b	; 27
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	b9 01       	movw	r22, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <Dio_enuWriteChannel+0x72>
  ea:	66 0f       	add	r22, r22
  ec:	77 1f       	adc	r23, r23
  ee:	8a 95       	dec	r24
  f0:	e2 f7       	brpl	.-8      	; 0xea <Dio_enuWriteChannel+0x6e>
  f2:	cb 01       	movw	r24, r22
  f4:	80 95       	com	r24
  f6:	84 23       	and	r24, r20
  f8:	8b bb       	out	0x1b, r24	; 27
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	08 95       	ret
  fe:	27 b3       	in	r18, 0x17	; 23
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	08 2e       	mov	r0, r24
 104:	02 c0       	rjmp	.+4      	; 0x10a <Dio_enuWriteChannel+0x8e>
 106:	35 95       	asr	r19
 108:	27 95       	ror	r18
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <Dio_enuWriteChannel+0x8a>
 10e:	20 ff       	sbrs	r18, 0
 110:	83 c0       	rjmp	.+262    	; 0x218 <Dio_enuWriteChannel+0x19c>
 112:	66 23       	and	r22, r22
 114:	89 f0       	breq	.+34     	; 0x138 <Dio_enuWriteChannel+0xbc>
 116:	61 30       	cpi	r22, 0x01	; 1
 118:	09 f0       	breq	.+2      	; 0x11c <Dio_enuWriteChannel+0xa0>
 11a:	80 c0       	rjmp	.+256    	; 0x21c <Dio_enuWriteChannel+0x1a0>
 11c:	48 b3       	in	r20, 0x18	; 24
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	b9 01       	movw	r22, r18
 124:	02 c0       	rjmp	.+4      	; 0x12a <Dio_enuWriteChannel+0xae>
 126:	66 0f       	add	r22, r22
 128:	77 1f       	adc	r23, r23
 12a:	8a 95       	dec	r24
 12c:	e2 f7       	brpl	.-8      	; 0x126 <Dio_enuWriteChannel+0xaa>
 12e:	cb 01       	movw	r24, r22
 130:	84 2b       	or	r24, r20
 132:	88 bb       	out	0x18, r24	; 24
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	08 95       	ret
 138:	48 b3       	in	r20, 0x18	; 24
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	b9 01       	movw	r22, r18
 140:	02 c0       	rjmp	.+4      	; 0x146 <Dio_enuWriteChannel+0xca>
 142:	66 0f       	add	r22, r22
 144:	77 1f       	adc	r23, r23
 146:	8a 95       	dec	r24
 148:	e2 f7       	brpl	.-8      	; 0x142 <Dio_enuWriteChannel+0xc6>
 14a:	cb 01       	movw	r24, r22
 14c:	80 95       	com	r24
 14e:	84 23       	and	r24, r20
 150:	88 bb       	out	0x18, r24	; 24
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret
 156:	24 b3       	in	r18, 0x14	; 20
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	08 2e       	mov	r0, r24
 15c:	02 c0       	rjmp	.+4      	; 0x162 <Dio_enuWriteChannel+0xe6>
 15e:	35 95       	asr	r19
 160:	27 95       	ror	r18
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <Dio_enuWriteChannel+0xe2>
 166:	20 ff       	sbrs	r18, 0
 168:	5b c0       	rjmp	.+182    	; 0x220 <Dio_enuWriteChannel+0x1a4>
 16a:	66 23       	and	r22, r22
 16c:	89 f0       	breq	.+34     	; 0x190 <Dio_enuWriteChannel+0x114>
 16e:	61 30       	cpi	r22, 0x01	; 1
 170:	09 f0       	breq	.+2      	; 0x174 <Dio_enuWriteChannel+0xf8>
 172:	58 c0       	rjmp	.+176    	; 0x224 <Dio_enuWriteChannel+0x1a8>
 174:	45 b3       	in	r20, 0x15	; 21
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	b9 01       	movw	r22, r18
 17c:	02 c0       	rjmp	.+4      	; 0x182 <Dio_enuWriteChannel+0x106>
 17e:	66 0f       	add	r22, r22
 180:	77 1f       	adc	r23, r23
 182:	8a 95       	dec	r24
 184:	e2 f7       	brpl	.-8      	; 0x17e <Dio_enuWriteChannel+0x102>
 186:	cb 01       	movw	r24, r22
 188:	84 2b       	or	r24, r20
 18a:	85 bb       	out	0x15, r24	; 21
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	08 95       	ret
 190:	45 b3       	in	r20, 0x15	; 21
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	b9 01       	movw	r22, r18
 198:	02 c0       	rjmp	.+4      	; 0x19e <Dio_enuWriteChannel+0x122>
 19a:	66 0f       	add	r22, r22
 19c:	77 1f       	adc	r23, r23
 19e:	8a 95       	dec	r24
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <Dio_enuWriteChannel+0x11e>
 1a2:	cb 01       	movw	r24, r22
 1a4:	80 95       	com	r24
 1a6:	84 23       	and	r24, r20
 1a8:	85 bb       	out	0x15, r24	; 21
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret
 1ae:	21 b3       	in	r18, 0x11	; 17
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	08 2e       	mov	r0, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <Dio_enuWriteChannel+0x13e>
 1b6:	35 95       	asr	r19
 1b8:	27 95       	ror	r18
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <Dio_enuWriteChannel+0x13a>
 1be:	20 ff       	sbrs	r18, 0
 1c0:	33 c0       	rjmp	.+102    	; 0x228 <Dio_enuWriteChannel+0x1ac>
 1c2:	66 23       	and	r22, r22
 1c4:	81 f0       	breq	.+32     	; 0x1e6 <Dio_enuWriteChannel+0x16a>
 1c6:	61 30       	cpi	r22, 0x01	; 1
 1c8:	89 f5       	brne	.+98     	; 0x22c <Dio_enuWriteChannel+0x1b0>
 1ca:	42 b3       	in	r20, 0x12	; 18
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	b9 01       	movw	r22, r18
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <Dio_enuWriteChannel+0x15c>
 1d4:	66 0f       	add	r22, r22
 1d6:	77 1f       	adc	r23, r23
 1d8:	8a 95       	dec	r24
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <Dio_enuWriteChannel+0x158>
 1dc:	cb 01       	movw	r24, r22
 1de:	84 2b       	or	r24, r20
 1e0:	82 bb       	out	0x12, r24	; 18
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	08 95       	ret
 1e6:	42 b3       	in	r20, 0x12	; 18
 1e8:	21 e0       	ldi	r18, 0x01	; 1
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	b9 01       	movw	r22, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <Dio_enuWriteChannel+0x178>
 1f0:	66 0f       	add	r22, r22
 1f2:	77 1f       	adc	r23, r23
 1f4:	8a 95       	dec	r24
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <Dio_enuWriteChannel+0x174>
 1f8:	cb 01       	movw	r24, r22
 1fa:	80 95       	com	r24
 1fc:	84 23       	and	r24, r20
 1fe:	82 bb       	out	0x12, r24	; 18
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	08 95       	ret
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	08 95       	ret
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	08 95       	ret
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	08 95       	ret
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	08 95       	ret
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	08 95       	ret
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	08 95       	ret
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	08 95       	ret
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	08 95       	ret
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	08 95       	ret
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	08 95       	ret

00000230 <Dio_enuReadChannel>:
 230:	80 32       	cpi	r24, 0x20	; 32
 232:	08 f0       	brcs	.+2      	; 0x236 <Dio_enuReadChannel+0x6>
 234:	72 c0       	rjmp	.+228    	; 0x31a <Dio_enuReadChannel+0xea>
 236:	61 15       	cp	r22, r1
 238:	71 05       	cpc	r23, r1
 23a:	09 f4       	brne	.+2      	; 0x23e <Dio_enuReadChannel+0xe>
 23c:	70 c0       	rjmp	.+224    	; 0x31e <Dio_enuReadChannel+0xee>
 23e:	98 2f       	mov	r25, r24
 240:	96 95       	lsr	r25
 242:	96 95       	lsr	r25
 244:	96 95       	lsr	r25
 246:	87 70       	andi	r24, 0x07	; 7
 248:	91 30       	cpi	r25, 0x01	; 1
 24a:	f9 f0       	breq	.+62     	; 0x28a <Dio_enuReadChannel+0x5a>
 24c:	30 f0       	brcs	.+12     	; 0x25a <Dio_enuReadChannel+0x2a>
 24e:	92 30       	cpi	r25, 0x02	; 2
 250:	a1 f1       	breq	.+104    	; 0x2ba <Dio_enuReadChannel+0x8a>
 252:	93 30       	cpi	r25, 0x03	; 3
 254:	09 f4       	brne	.+2      	; 0x258 <Dio_enuReadChannel+0x28>
 256:	49 c0       	rjmp	.+146    	; 0x2ea <Dio_enuReadChannel+0xba>
 258:	64 c0       	rjmp	.+200    	; 0x322 <Dio_enuReadChannel+0xf2>
 25a:	2a b3       	in	r18, 0x1a	; 26
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	08 2e       	mov	r0, r24
 260:	02 c0       	rjmp	.+4      	; 0x266 <Dio_enuReadChannel+0x36>
 262:	35 95       	asr	r19
 264:	27 95       	ror	r18
 266:	0a 94       	dec	r0
 268:	e2 f7       	brpl	.-8      	; 0x262 <Dio_enuReadChannel+0x32>
 26a:	20 fd       	sbrc	r18, 0
 26c:	5c c0       	rjmp	.+184    	; 0x326 <Dio_enuReadChannel+0xf6>
 26e:	29 b3       	in	r18, 0x19	; 25
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	a9 01       	movw	r20, r18
 274:	02 c0       	rjmp	.+4      	; 0x27a <Dio_enuReadChannel+0x4a>
 276:	55 95       	asr	r21
 278:	47 95       	ror	r20
 27a:	8a 95       	dec	r24
 27c:	e2 f7       	brpl	.-8      	; 0x276 <Dio_enuReadChannel+0x46>
 27e:	ca 01       	movw	r24, r20
 280:	81 70       	andi	r24, 0x01	; 1
 282:	fb 01       	movw	r30, r22
 284:	80 83       	st	Z, r24
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	08 95       	ret
 28a:	27 b3       	in	r18, 0x17	; 23
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	08 2e       	mov	r0, r24
 290:	02 c0       	rjmp	.+4      	; 0x296 <Dio_enuReadChannel+0x66>
 292:	35 95       	asr	r19
 294:	27 95       	ror	r18
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <Dio_enuReadChannel+0x62>
 29a:	20 fd       	sbrc	r18, 0
 29c:	46 c0       	rjmp	.+140    	; 0x32a <Dio_enuReadChannel+0xfa>
 29e:	26 b3       	in	r18, 0x16	; 22
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	a9 01       	movw	r20, r18
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <Dio_enuReadChannel+0x7a>
 2a6:	55 95       	asr	r21
 2a8:	47 95       	ror	r20
 2aa:	8a 95       	dec	r24
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <Dio_enuReadChannel+0x76>
 2ae:	ca 01       	movw	r24, r20
 2b0:	81 70       	andi	r24, 0x01	; 1
 2b2:	fb 01       	movw	r30, r22
 2b4:	80 83       	st	Z, r24
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	08 95       	ret
 2ba:	24 b3       	in	r18, 0x14	; 20
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	08 2e       	mov	r0, r24
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <Dio_enuReadChannel+0x96>
 2c2:	35 95       	asr	r19
 2c4:	27 95       	ror	r18
 2c6:	0a 94       	dec	r0
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <Dio_enuReadChannel+0x92>
 2ca:	20 fd       	sbrc	r18, 0
 2cc:	30 c0       	rjmp	.+96     	; 0x32e <Dio_enuReadChannel+0xfe>
 2ce:	23 b3       	in	r18, 0x13	; 19
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	a9 01       	movw	r20, r18
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <Dio_enuReadChannel+0xaa>
 2d6:	55 95       	asr	r21
 2d8:	47 95       	ror	r20
 2da:	8a 95       	dec	r24
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <Dio_enuReadChannel+0xa6>
 2de:	ca 01       	movw	r24, r20
 2e0:	81 70       	andi	r24, 0x01	; 1
 2e2:	fb 01       	movw	r30, r22
 2e4:	80 83       	st	Z, r24
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	08 95       	ret
 2ea:	21 b3       	in	r18, 0x11	; 17
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	08 2e       	mov	r0, r24
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <Dio_enuReadChannel+0xc6>
 2f2:	35 95       	asr	r19
 2f4:	27 95       	ror	r18
 2f6:	0a 94       	dec	r0
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <Dio_enuReadChannel+0xc2>
 2fa:	20 fd       	sbrc	r18, 0
 2fc:	1a c0       	rjmp	.+52     	; 0x332 <Dio_enuReadChannel+0x102>
 2fe:	20 b3       	in	r18, 0x10	; 16
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	a9 01       	movw	r20, r18
 304:	02 c0       	rjmp	.+4      	; 0x30a <Dio_enuReadChannel+0xda>
 306:	55 95       	asr	r21
 308:	47 95       	ror	r20
 30a:	8a 95       	dec	r24
 30c:	e2 f7       	brpl	.-8      	; 0x306 <Dio_enuReadChannel+0xd6>
 30e:	ca 01       	movw	r24, r20
 310:	81 70       	andi	r24, 0x01	; 1
 312:	fb 01       	movw	r30, r22
 314:	80 83       	st	Z, r24
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	08 95       	ret
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	08 95       	ret
 31e:	84 e0       	ldi	r24, 0x04	; 4
 320:	08 95       	ret
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	08 95       	ret
 326:	83 e0       	ldi	r24, 0x03	; 3
 328:	08 95       	ret
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	08 95       	ret
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	08 95       	ret
 332:	83 e0       	ldi	r24, 0x03	; 3
 334:	08 95       	ret

00000336 <Dio_enuFlipChannel>:

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
	u8 LOC_u8Port;
	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {
 336:	80 32       	cpi	r24, 0x20	; 32
 338:	08 f0       	brcs	.+2      	; 0x33c <Dio_enuFlipChannel+0x6>
 33a:	6e c0       	rjmp	.+220    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>

		LOC_enuReturnStatus = Dio_enuChannelError;
	}

	else {
		LOC_u8Port = Copy_u8ChannelId / DIO_u8REGISTER_SIZE;
 33c:	98 2f       	mov	r25, r24
 33e:	96 95       	lsr	r25
 340:	96 95       	lsr	r25
 342:	96 95       	lsr	r25
		LOC_u8Pin = Copy_u8ChannelId % DIO_u8REGISTER_SIZE;
 344:	87 70       	andi	r24, 0x07	; 7

		switch (LOC_u8Port) {
 346:	91 30       	cpi	r25, 0x01	; 1
 348:	f9 f0       	breq	.+62     	; 0x388 <Dio_enuFlipChannel+0x52>
 34a:	30 f0       	brcs	.+12     	; 0x358 <Dio_enuFlipChannel+0x22>
 34c:	92 30       	cpi	r25, 0x02	; 2
 34e:	a1 f1       	breq	.+104    	; 0x3b8 <Dio_enuFlipChannel+0x82>
 350:	93 30       	cpi	r25, 0x03	; 3
 352:	09 f4       	brne	.+2      	; 0x356 <Dio_enuFlipChannel+0x20>
 354:	49 c0       	rjmp	.+146    	; 0x3e8 <Dio_enuFlipChannel+0xb2>
 356:	62 c0       	rjmp	.+196    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>

		case DIO_u8PORTA:

			if (GET_BIT(DDRA,LOC_u8Pin) == DIO_u8OUTPUT) {
 358:	2a b3       	in	r18, 0x1a	; 26
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	08 2e       	mov	r0, r24
 35e:	02 c0       	rjmp	.+4      	; 0x364 <Dio_enuFlipChannel+0x2e>
 360:	35 95       	asr	r19
 362:	27 95       	ror	r18
 364:	0a 94       	dec	r0
 366:	e2 f7       	brpl	.-8      	; 0x360 <Dio_enuFlipChannel+0x2a>
 368:	20 ff       	sbrs	r18, 0
 36a:	5a c0       	rjmp	.+180    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>

				TGL_BIT(PORTA, LOC_u8Pin);
 36c:	4b b3       	in	r20, 0x1b	; 27
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	b9 01       	movw	r22, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <Dio_enuFlipChannel+0x44>
 376:	66 0f       	add	r22, r22
 378:	77 1f       	adc	r23, r23
 37a:	8a 95       	dec	r24
 37c:	e2 f7       	brpl	.-8      	; 0x376 <Dio_enuFlipChannel+0x40>
 37e:	cb 01       	movw	r24, r22
 380:	84 27       	eor	r24, r20
 382:	8b bb       	out	0x1b, r24	; 27
	return LOC_enuReturnStatus;
}

Dio_tenuErrorStatus Dio_enuFlipChannel(u8 Copy_u8ChannelId) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	08 95       	ret
			}
			break;

		case DIO_u8PORTB:

			if (GET_BIT(DDRB,LOC_u8Pin) == DIO_u8OUTPUT) {
 388:	27 b3       	in	r18, 0x17	; 23
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	08 2e       	mov	r0, r24
 38e:	02 c0       	rjmp	.+4      	; 0x394 <Dio_enuFlipChannel+0x5e>
 390:	35 95       	asr	r19
 392:	27 95       	ror	r18
 394:	0a 94       	dec	r0
 396:	e2 f7       	brpl	.-8      	; 0x390 <Dio_enuFlipChannel+0x5a>
 398:	20 ff       	sbrs	r18, 0
 39a:	44 c0       	rjmp	.+136    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>

				TGL_BIT(PORTB, LOC_u8Pin);
 39c:	48 b3       	in	r20, 0x18	; 24
 39e:	21 e0       	ldi	r18, 0x01	; 1
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	b9 01       	movw	r22, r18
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <Dio_enuFlipChannel+0x74>
 3a6:	66 0f       	add	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	8a 95       	dec	r24
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <Dio_enuFlipChannel+0x70>
 3ae:	cb 01       	movw	r24, r22
 3b0:	84 27       	eor	r24, r20
 3b2:	88 bb       	out	0x18, r24	; 24
	return LOC_enuReturnStatus;
}

Dio_tenuErrorStatus Dio_enuFlipChannel(u8 Copy_u8ChannelId) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	08 95       	ret
			}
			break;

		case DIO_u8PORTC:

			if (GET_BIT(DDRC,LOC_u8Pin) == DIO_u8OUTPUT) {
 3b8:	24 b3       	in	r18, 0x14	; 20
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	08 2e       	mov	r0, r24
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <Dio_enuFlipChannel+0x8e>
 3c0:	35 95       	asr	r19
 3c2:	27 95       	ror	r18
 3c4:	0a 94       	dec	r0
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <Dio_enuFlipChannel+0x8a>
 3c8:	20 ff       	sbrs	r18, 0
 3ca:	2e c0       	rjmp	.+92     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>

				TGL_BIT(PORTC, LOC_u8Pin);
 3cc:	45 b3       	in	r20, 0x15	; 21
 3ce:	21 e0       	ldi	r18, 0x01	; 1
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	b9 01       	movw	r22, r18
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <Dio_enuFlipChannel+0xa4>
 3d6:	66 0f       	add	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	8a 95       	dec	r24
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <Dio_enuFlipChannel+0xa0>
 3de:	cb 01       	movw	r24, r22
 3e0:	84 27       	eor	r24, r20
 3e2:	85 bb       	out	0x15, r24	; 21
	return LOC_enuReturnStatus;
}

Dio_tenuErrorStatus Dio_enuFlipChannel(u8 Copy_u8ChannelId) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	08 95       	ret
			}
			break;

		case DIO_u8PORTD:

			if (GET_BIT(DDRD,LOC_u8Pin) == DIO_u8OUTPUT) {
 3e8:	21 b3       	in	r18, 0x11	; 17
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	08 2e       	mov	r0, r24
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <Dio_enuFlipChannel+0xbe>
 3f0:	35 95       	asr	r19
 3f2:	27 95       	ror	r18
 3f4:	0a 94       	dec	r0
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <Dio_enuFlipChannel+0xba>
 3f8:	20 ff       	sbrs	r18, 0
 3fa:	18 c0       	rjmp	.+48     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>

				TGL_BIT(PORTD, LOC_u8Pin);
 3fc:	42 b3       	in	r20, 0x12	; 18
 3fe:	21 e0       	ldi	r18, 0x01	; 1
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	b9 01       	movw	r22, r18
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	66 0f       	add	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	8a 95       	dec	r24
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	cb 01       	movw	r24, r22
 410:	84 27       	eor	r24, r20
 412:	82 bb       	out	0x12, r24	; 18
	return LOC_enuReturnStatus;
}

Dio_tenuErrorStatus Dio_enuFlipChannel(u8 Copy_u8ChannelId) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	08 95       	ret
	u8 LOC_u8Port;
	u8 LOC_u8Pin;

	if (Copy_u8ChannelId > DIO_u8NUMBER_OF_CHANNELS) {

		LOC_enuReturnStatus = Dio_enuChannelError;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	08 95       	ret
	return LOC_enuReturnStatus;
}

Dio_tenuErrorStatus Dio_enuFlipChannel(u8 Copy_u8ChannelId) {

	Dio_tenuErrorStatus LOC_enuReturnStatus = Dio_enuOk;
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	08 95       	ret
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	08 95       	ret
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	08 95       	ret
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	08 95       	ret
 42c:	80 e0       	ldi	r24, 0x00	; 0

		}

	}
	return LOC_enuReturnStatus;
}
 42e:	08 95       	ret

00000430 <SegBSD_vTime>:
#define F_CPU 16000000
#include "util/delay.h"

//Counting time function
void SegBSD_vTime(void)
{
 430:	8f 92       	push	r8
 432:	9f 92       	push	r9
 434:	af 92       	push	r10
 436:	bf 92       	push	r11
 438:	cf 92       	push	r12
 43a:	df 92       	push	r13
 43c:	ef 92       	push	r14
 43e:	ff 92       	push	r15
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	00 d0       	rcall	.+0      	; 0x446 <SegBSD_vTime+0x16>
 446:	1f 92       	push	r1
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
	u32 TEMP_u32Counter=Copy_u32Counter;
	u8 Reset_B;
	u8 Pause_B;
	u8 Resume_B;
	static u8 Pause_flag = 0;
	Dio_enuReadChannel(DIO_u8CHANNEL31,&Reset_B);
 44c:	be 01       	movw	r22, r28
 44e:	6f 5f       	subi	r22, 0xFF	; 255
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	8f e1       	ldi	r24, 0x1F	; 31
 454:	0e 94 18 01 	call	0x230	; 0x230 <Dio_enuReadChannel>
	Dio_enuReadChannel(DIO_u8CHANNEL30,&Pause_B);
 458:	be 01       	movw	r22, r28
 45a:	6e 5f       	subi	r22, 0xFE	; 254
 45c:	7f 4f       	sbci	r23, 0xFF	; 255
 45e:	8e e1       	ldi	r24, 0x1E	; 30
 460:	0e 94 18 01 	call	0x230	; 0x230 <Dio_enuReadChannel>
	Dio_enuReadChannel(DIO_u8CHANNEL29,&Resume_B);
 464:	be 01       	movw	r22, r28
 466:	6d 5f       	subi	r22, 0xFD	; 253
 468:	7f 4f       	sbci	r23, 0xFF	; 255
 46a:	8d e1       	ldi	r24, 0x1D	; 29
 46c:	0e 94 18 01 	call	0x230	; 0x230 <Dio_enuReadChannel>
	if(!Pause_B)
 470:	8a 81       	ldd	r24, Y+2	; 0x02
 472:	81 11       	cpse	r24, r1
 474:	03 c0       	rjmp	.+6      	; 0x47c <SegBSD_vTime+0x4c>
	{
		Pause_flag = 1;
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	if(!Resume_B)
 47c:	8b 81       	ldd	r24, Y+3	; 0x03
 47e:	81 11       	cpse	r24, r1
 480:	02 c0       	rjmp	.+4      	; 0x486 <SegBSD_vTime+0x56>
	{
		Pause_flag = 0;
 482:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	if(Pause_flag == 0)
 486:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 48a:	88 23       	and	r24, r24
 48c:	39 f1       	breq	.+78     	; 0x4dc <SegBSD_vTime+0xac>
 48e:	50 c0       	rjmp	.+160    	; 0x530 <SegBSD_vTime+0x100>
	{
		while(Counter <= 249)
		{
			TEMP_u32Counter=Copy_u32Counter;
 490:	80 90 61 00 	lds	r8, 0x0061	; 0x800061 <Copy_u32Counter.1780>
 494:	90 90 62 00 	lds	r9, 0x0062	; 0x800062 <Copy_u32Counter.1780+0x1>
 498:	a0 90 63 00 	lds	r10, 0x0063	; 0x800063 <Copy_u32Counter.1780+0x2>
 49c:	b0 90 64 00 	lds	r11, 0x0064	; 0x800064 <Copy_u32Counter.1780+0x3>
			Dio_enuReadChannel(DIO_u8CHANNEL31,&Reset_B);
 4a0:	be 01       	movw	r22, r28
 4a2:	6f 5f       	subi	r22, 0xFF	; 255
 4a4:	7f 4f       	sbci	r23, 0xFF	; 255
 4a6:	8f e1       	ldi	r24, 0x1F	; 31
 4a8:	0e 94 18 01 	call	0x230	; 0x230 <Dio_enuReadChannel>
			/*Display TEMP*/
			SegBSD_vWriteValMUX(TEMP_u32Counter);
 4ac:	c5 01       	movw	r24, r10
 4ae:	b4 01       	movw	r22, r8
 4b0:	0e 94 11 03 	call	0x622	; 0x622 <SegBSD_vWriteValMUX>
			/**/
			Counter++;
 4b4:	2f ef       	ldi	r18, 0xFF	; 255
 4b6:	c2 1a       	sub	r12, r18
 4b8:	d2 0a       	sbc	r13, r18
 4ba:	e2 0a       	sbc	r14, r18
 4bc:	f2 0a       	sbc	r15, r18
			Dio_enuFlipChannel(DIO_u8CHANNEL06);
 4be:	86 e0       	ldi	r24, 0x06	; 6
 4c0:	0e 94 9b 01 	call	0x336	; 0x336 <Dio_enuFlipChannel>
			if(!Reset_B)
 4c4:	89 81       	ldd	r24, Y+1	; 0x01
 4c6:	81 11       	cpse	r24, r1
 4c8:	0c c0       	rjmp	.+24     	; 0x4e2 <SegBSD_vTime+0xb2>
			{
				Copy_u32Counter = 0;
 4ca:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Copy_u32Counter.1780>
 4ce:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Copy_u32Counter.1780+0x1>
 4d2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Copy_u32Counter.1780+0x2>
 4d6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Copy_u32Counter.1780+0x3>
 4da:	03 c0       	rjmp	.+6      	; 0x4e2 <SegBSD_vTime+0xb2>
 4dc:	c1 2c       	mov	r12, r1
 4de:	d1 2c       	mov	r13, r1
 4e0:	76 01       	movw	r14, r12
	{
		Pause_flag = 0;
	}
	if(Pause_flag == 0)
	{
		while(Counter <= 249)
 4e2:	8a ef       	ldi	r24, 0xFA	; 250
 4e4:	c8 16       	cp	r12, r24
 4e6:	d1 04       	cpc	r13, r1
 4e8:	e1 04       	cpc	r14, r1
 4ea:	f1 04       	cpc	r15, r1
 4ec:	88 f2       	brcs	.-94     	; 0x490 <SegBSD_vTime+0x60>
			if(!Reset_B)
			{
				Copy_u32Counter = 0;
			}
		}
		Copy_u32Counter++;
 4ee:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Copy_u32Counter.1780>
 4f2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <Copy_u32Counter.1780+0x1>
 4f6:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <Copy_u32Counter.1780+0x2>
 4fa:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <Copy_u32Counter.1780+0x3>
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	a1 1d       	adc	r26, r1
 502:	b1 1d       	adc	r27, r1
 504:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Copy_u32Counter.1780>
 508:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <Copy_u32Counter.1780+0x1>
 50c:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <Copy_u32Counter.1780+0x2>
 510:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <Copy_u32Counter.1780+0x3>
		if(Copy_u32Counter == 10000)
 514:	80 31       	cpi	r24, 0x10	; 16
 516:	97 42       	sbci	r25, 0x27	; 39
 518:	a1 05       	cpc	r26, r1
 51a:	b1 05       	cpc	r27, r1
 51c:	f1 f4       	brne	.+60     	; 0x55a <SegBSD_vTime+0x12a>
		{
			Copy_u32Counter = 0;
 51e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Copy_u32Counter.1780>
 522:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Copy_u32Counter.1780+0x1>
 526:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Copy_u32Counter.1780+0x2>
 52a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Copy_u32Counter.1780+0x3>
 52e:	15 c0       	rjmp	.+42     	; 0x55a <SegBSD_vTime+0x12a>
		}

	}
	else
	{
		SegBSD_vWriteValMUX(Copy_u32Counter);
 530:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <Copy_u32Counter.1780>
 534:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <Copy_u32Counter.1780+0x1>
 538:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Copy_u32Counter.1780+0x2>
 53c:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <Copy_u32Counter.1780+0x3>
 540:	0e 94 11 03 	call	0x622	; 0x622 <SegBSD_vWriteValMUX>
		if(!Reset_B)
 544:	89 81       	ldd	r24, Y+1	; 0x01
 546:	81 11       	cpse	r24, r1
 548:	08 c0       	rjmp	.+16     	; 0x55a <SegBSD_vTime+0x12a>
		{
			Copy_u32Counter = 0;
 54a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Copy_u32Counter.1780>
 54e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Copy_u32Counter.1780+0x1>
 552:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Copy_u32Counter.1780+0x2>
 556:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Copy_u32Counter.1780+0x3>
		}
	}

}
 55a:	0f 90       	pop	r0
 55c:	0f 90       	pop	r0
 55e:	0f 90       	pop	r0
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	ff 90       	pop	r15
 566:	ef 90       	pop	r14
 568:	df 90       	pop	r13
 56a:	cf 90       	pop	r12
 56c:	bf 90       	pop	r11
 56e:	af 90       	pop	r10
 570:	9f 90       	pop	r9
 572:	8f 90       	pop	r8
 574:	08 95       	ret

00000576 <main>:



int main(void)
{
	Port_vidInit();
 576:	0e 94 c0 02 	call	0x580	; 0x580 <Port_vidInit>


    while (1)
    {

		 SegBSD_vTime();
 57a:	0e 94 18 02 	call	0x430	; 0x430 <SegBSD_vTime>
 57e:	fd cf       	rjmp	.-6      	; 0x57a <main+0x4>

00000580 <Port_vidInit>:
#define PORT_u8OUTPUT_LOW		1

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		0

	DDRA = CONC(PORT_u8MODEPIN07,PORT_u8MODEPIN06,PORT_u8MODEPIN05,PORT_u8MODEPIN04,PORT_u8MODEPIN03,PORT_u8MODEPIN02,PORT_u8MODEPIN01,PORT_u8MODEPIN00);
 580:	8f ef       	ldi	r24, 0xFF	; 255
 582:	8a bb       	out	0x1a, r24	; 26
	DDRB = CONC(PORT_u8MODEPIN15,PORT_u8MODEPIN14,PORT_u8MODEPIN13,PORT_u8MODEPIN12,PORT_u8MODEPIN11,PORT_u8MODEPIN10,PORT_u8MODEPIN09,PORT_u8MODEPIN08);
 584:	87 bb       	out	0x17, r24	; 23
	DDRC = CONC(PORT_u8MODEPIN23,PORT_u8MODEPIN22,PORT_u8MODEPIN21,PORT_u8MODEPIN20,PORT_u8MODEPIN19,PORT_u8MODEPIN18,PORT_u8MODEPIN17,PORT_u8MODEPIN16);
 586:	84 bb       	out	0x14, r24	; 20
	DDRD = CONC(PORT_u8MODEPIN31,PORT_u8MODEPIN30,PORT_u8MODEPIN29,PORT_u8MODEPIN28,PORT_u8MODEPIN27,PORT_u8MODEPIN26,PORT_u8MODEPIN25,PORT_u8MODEPIN24);
 588:	87 e1       	ldi	r24, 0x17	; 23
 58a:	81 bb       	out	0x11, r24	; 17
#define PORT_u8OUTPUT_LOW		0

#undef 	PORT_u8INPUT_PULLUP
#define PORT_u8INPUT_PULLUP		1

	PORTA = CONC(PORT_u8MODEPIN07,PORT_u8MODEPIN06,PORT_u8MODEPIN05,PORT_u8MODEPIN04,PORT_u8MODEPIN03,PORT_u8MODEPIN02,PORT_u8MODEPIN01,PORT_u8MODEPIN00);
 58c:	1b ba       	out	0x1b, r1	; 27
	PORTB = CONC(PORT_u8MODEPIN15,PORT_u8MODEPIN14,PORT_u8MODEPIN13,PORT_u8MODEPIN12,PORT_u8MODEPIN11,PORT_u8MODEPIN10,PORT_u8MODEPIN09,PORT_u8MODEPIN08);
 58e:	18 ba       	out	0x18, r1	; 24
	PORTC = CONC(PORT_u8MODEPIN23,PORT_u8MODEPIN22,PORT_u8MODEPIN21,PORT_u8MODEPIN20,PORT_u8MODEPIN19,PORT_u8MODEPIN18,PORT_u8MODEPIN17,PORT_u8MODEPIN16);
 590:	15 ba       	out	0x15, r1	; 21
	PORTD = CONC(PORT_u8MODEPIN31,PORT_u8MODEPIN30,PORT_u8MODEPIN29,PORT_u8MODEPIN28,PORT_u8MODEPIN27,PORT_u8MODEPIN26,PORT_u8MODEPIN25,PORT_u8MODEPIN24);
 592:	12 ba       	out	0x12, r1	; 18
 594:	08 95       	ret

00000596 <Choose_Seg>:
 void SegBCD_vInit(void)
 {
	 Dio_enuWriteChannel(SEG1_COM,DIO_u8LEVEL_HIGH);
	 Dio_enuWriteChannel(SEG2_COM,DIO_u8LEVEL_HIGH);
	 Dio_enuWriteChannel(SEG3_COM,DIO_u8LEVEL_HIGH);
	 Dio_enuWriteChannel(SEG4_COM,DIO_u8LEVEL_HIGH);
 596:	81 30       	cpi	r24, 0x01	; 1
 598:	39 f0       	breq	.+14     	; 0x5a8 <Choose_Seg+0x12>
 59a:	60 f0       	brcs	.+24     	; 0x5b4 <Choose_Seg+0x1e>
 59c:	82 30       	cpi	r24, 0x02	; 2
 59e:	31 f0       	breq	.+12     	; 0x5ac <Choose_Seg+0x16>
 5a0:	83 30       	cpi	r24, 0x03	; 3
 5a2:	31 f0       	breq	.+12     	; 0x5b0 <Choose_Seg+0x1a>
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	08 95       	ret
 5a8:	82 e0       	ldi	r24, 0x02	; 2
 5aa:	08 95       	ret
 5ac:	8d e0       	ldi	r24, 0x0D	; 13
 5ae:	08 95       	ret
 5b0:	8e e0       	ldi	r24, 0x0E	; 14
 5b2:	08 95       	ret
 5b4:	83 e0       	ldi	r24, 0x03	; 3
 5b6:	08 95       	ret

000005b8 <SegBSD_vWriteVal>:
 }

void SegBSD_vWriteVal(u8 Copy_u8Num)
{
 5b8:	cf 93       	push	r28
 5ba:	c8 2f       	mov	r28, r24
	if(Copy_u8Num <= 7)
 5bc:	88 30       	cpi	r24, 0x08	; 8
 5be:	b0 f4       	brcc	.+44     	; 0x5ec <SegBSD_vWriteVal+0x34>
	{
		Dio_enuWriteChannel(BCD_BIT0,GET_BIT(Copy_u8Num,0));
 5c0:	68 2f       	mov	r22, r24
 5c2:	61 70       	andi	r22, 0x01	; 1
 5c4:	88 e0       	ldi	r24, 0x08	; 8
 5c6:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_enuWriteChannel>
		Dio_enuWriteChannel(BCD_BIT1,GET_BIT(Copy_u8Num,1));
 5ca:	c1 fb       	bst	r28, 1
 5cc:	66 27       	eor	r22, r22
 5ce:	60 f9       	bld	r22, 0
 5d0:	89 e0       	ldi	r24, 0x09	; 9
 5d2:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_enuWriteChannel>
		Dio_enuWriteChannel(BCD_BIT2,GET_BIT(Copy_u8Num,2));
 5d6:	c2 fb       	bst	r28, 2
 5d8:	66 27       	eor	r22, r22
 5da:	60 f9       	bld	r22, 0
 5dc:	8a e0       	ldi	r24, 0x0A	; 10
 5de:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_enuWriteChannel>
		Dio_enuWriteChannel(BCD_BIT3,DIO_u8LEVEL_LOW);
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	8c e0       	ldi	r24, 0x0C	; 12
 5e6:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_enuWriteChannel>
 5ea:	19 c0       	rjmp	.+50     	; 0x61e <SegBSD_vWriteVal+0x66>

	}
	else if(Copy_u8Num > 7 && Copy_u8Num <=9)
 5ec:	88 ef       	ldi	r24, 0xF8	; 248
 5ee:	8c 0f       	add	r24, r28
 5f0:	82 30       	cpi	r24, 0x02	; 2
 5f2:	a8 f4       	brcc	.+42     	; 0x61e <SegBSD_vWriteVal+0x66>
	{
		Dio_enuWriteChannel(BCD_BIT3,DIO_u8LEVEL_HIGH);
 5f4:	61 e0       	ldi	r22, 0x01	; 1
 5f6:	8c e0       	ldi	r24, 0x0C	; 12
 5f8:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_enuWriteChannel>

		Dio_enuWriteChannel(BCD_BIT0,GET_BIT(Copy_u8Num,0));
 5fc:	6c 2f       	mov	r22, r28
 5fe:	61 70       	andi	r22, 0x01	; 1
 600:	88 e0       	ldi	r24, 0x08	; 8
 602:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_enuWriteChannel>
		Dio_enuWriteChannel(BCD_BIT1,GET_BIT(Copy_u8Num,1));
 606:	c1 fb       	bst	r28, 1
 608:	66 27       	eor	r22, r22
 60a:	60 f9       	bld	r22, 0
 60c:	89 e0       	ldi	r24, 0x09	; 9
 60e:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_enuWriteChannel>
		Dio_enuWriteChannel(BCD_BIT2,GET_BIT(Copy_u8Num,2));
 612:	c2 fb       	bst	r28, 2
 614:	66 27       	eor	r22, r22
 616:	60 f9       	bld	r22, 0
 618:	8a e0       	ldi	r24, 0x0A	; 10
 61a:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_enuWriteChannel>

	}
}
 61e:	cf 91       	pop	r28
 620:	08 95       	ret

00000622 <SegBSD_vWriteValMUX>:
	return R_val;
}


void SegBSD_vWriteValMUX(u32 Copy_u32Num)
{
 622:	af 92       	push	r10
 624:	bf 92       	push	r11
 626:	cf 92       	push	r12
 628:	df 92       	push	r13
 62a:	ef 92       	push	r14
 62c:	ff 92       	push	r15
 62e:	0f 93       	push	r16
 630:	1f 93       	push	r17
 632:	cf 93       	push	r28
 634:	df 93       	push	r29
 636:	6b 01       	movw	r12, r22
 638:	7c 01       	movw	r14, r24

	u8 x = 0;
 63a:	c0 e0       	ldi	r28, 0x00	; 0
	while(Copy_u32Num != 0  || x<4)
 63c:	25 c0       	rjmp	.+74     	; 0x688 <SegBSD_vWriteValMUX+0x66>
	{
		Dio_enuWriteChannel(Choose_Seg(x),DIO_u8LEVEL_LOW);
 63e:	8c 2f       	mov	r24, r28
 640:	0e 94 cb 02 	call	0x596	; 0x596 <Choose_Seg>
 644:	d8 2f       	mov	r29, r24
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_enuWriteChannel>
		SegBSD_vWriteVal(Copy_u32Num%10);
 64c:	c7 01       	movw	r24, r14
 64e:	b6 01       	movw	r22, r12
 650:	2a e0       	ldi	r18, 0x0A	; 10
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	40 e0       	ldi	r20, 0x00	; 0
 656:	50 e0       	ldi	r21, 0x00	; 0
 658:	0e 94 56 03 	call	0x6ac	; 0x6ac <__udivmodsi4>
 65c:	a2 2e       	mov	r10, r18
 65e:	b3 2e       	mov	r11, r19
 660:	04 2f       	mov	r16, r20
 662:	15 2f       	mov	r17, r21
 664:	86 2f       	mov	r24, r22
 666:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <SegBSD_vWriteVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 66a:	8f e9       	ldi	r24, 0x9F	; 159
 66c:	9f e0       	ldi	r25, 0x0F	; 15
 66e:	01 97       	sbiw	r24, 0x01	; 1
 670:	f1 f7       	brne	.-4      	; 0x66e <SegBSD_vWriteValMUX+0x4c>
 672:	00 c0       	rjmp	.+0      	; 0x674 <SegBSD_vWriteValMUX+0x52>
 674:	00 00       	nop
		_delay_ms(1);
		Dio_enuWriteChannel(Choose_Seg(x),DIO_u8LEVEL_HIGH);
 676:	61 e0       	ldi	r22, 0x01	; 1
 678:	8d 2f       	mov	r24, r29
 67a:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_enuWriteChannel>
		x++;
 67e:	cf 5f       	subi	r28, 0xFF	; 255
		Copy_u32Num/=10;
 680:	ca 2c       	mov	r12, r10
 682:	db 2c       	mov	r13, r11
 684:	e0 2e       	mov	r14, r16
 686:	f1 2e       	mov	r15, r17

void SegBSD_vWriteValMUX(u32 Copy_u32Num)
{

	u8 x = 0;
	while(Copy_u32Num != 0  || x<4)
 688:	c1 14       	cp	r12, r1
 68a:	d1 04       	cpc	r13, r1
 68c:	e1 04       	cpc	r14, r1
 68e:	f1 04       	cpc	r15, r1
 690:	b1 f6       	brne	.-84     	; 0x63e <SegBSD_vWriteValMUX+0x1c>
 692:	c4 30       	cpi	r28, 0x04	; 4
 694:	a0 f2       	brcs	.-88     	; 0x63e <SegBSD_vWriteValMUX+0x1c>
		Dio_enuWriteChannel(Choose_Seg(x),DIO_u8LEVEL_HIGH);
		x++;
		Copy_u32Num/=10;

	}
}
 696:	df 91       	pop	r29
 698:	cf 91       	pop	r28
 69a:	1f 91       	pop	r17
 69c:	0f 91       	pop	r16
 69e:	ff 90       	pop	r15
 6a0:	ef 90       	pop	r14
 6a2:	df 90       	pop	r13
 6a4:	cf 90       	pop	r12
 6a6:	bf 90       	pop	r11
 6a8:	af 90       	pop	r10
 6aa:	08 95       	ret

000006ac <__udivmodsi4>:
 6ac:	a1 e2       	ldi	r26, 0x21	; 33
 6ae:	1a 2e       	mov	r1, r26
 6b0:	aa 1b       	sub	r26, r26
 6b2:	bb 1b       	sub	r27, r27
 6b4:	fd 01       	movw	r30, r26
 6b6:	0d c0       	rjmp	.+26     	; 0x6d2 <__udivmodsi4_ep>

000006b8 <__udivmodsi4_loop>:
 6b8:	aa 1f       	adc	r26, r26
 6ba:	bb 1f       	adc	r27, r27
 6bc:	ee 1f       	adc	r30, r30
 6be:	ff 1f       	adc	r31, r31
 6c0:	a2 17       	cp	r26, r18
 6c2:	b3 07       	cpc	r27, r19
 6c4:	e4 07       	cpc	r30, r20
 6c6:	f5 07       	cpc	r31, r21
 6c8:	20 f0       	brcs	.+8      	; 0x6d2 <__udivmodsi4_ep>
 6ca:	a2 1b       	sub	r26, r18
 6cc:	b3 0b       	sbc	r27, r19
 6ce:	e4 0b       	sbc	r30, r20
 6d0:	f5 0b       	sbc	r31, r21

000006d2 <__udivmodsi4_ep>:
 6d2:	66 1f       	adc	r22, r22
 6d4:	77 1f       	adc	r23, r23
 6d6:	88 1f       	adc	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	1a 94       	dec	r1
 6dc:	69 f7       	brne	.-38     	; 0x6b8 <__udivmodsi4_loop>
 6de:	60 95       	com	r22
 6e0:	70 95       	com	r23
 6e2:	80 95       	com	r24
 6e4:	90 95       	com	r25
 6e6:	9b 01       	movw	r18, r22
 6e8:	ac 01       	movw	r20, r24
 6ea:	bd 01       	movw	r22, r26
 6ec:	cf 01       	movw	r24, r30
 6ee:	08 95       	ret

000006f0 <_exit>:
 6f0:	f8 94       	cli

000006f2 <__stop_program>:
 6f2:	ff cf       	rjmp	.-2      	; 0x6f2 <__stop_program>
