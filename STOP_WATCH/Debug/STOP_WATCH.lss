
STOP_WATCH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000211e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000211e  000021b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800078  00800078  000021ca  2**0
                  ALLOC
  3 .stab         000018e4  00000000  00000000  000021cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001047  00000000  00000000  00003ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00004c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00004de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00006e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00007f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00008eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009030  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000092f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009b80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <main>
      8a:	0c 94 8d 10 	jmp	0x211a	; 0x211a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5e 10 	jmp	0x20bc	; 0x20bc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <PORT_voidInit>:
#include "../Include/PORT_private.h"
#include "../Include/PORT_config.h"


void PORT_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/* Initialization Direction for all Pins */
	// PORTA
	PORT_u8_DDRA_REG = CONC(PORT_u8_PA7_DIRECTION,PORT_u8_PA6_DIRECTION,PORT_u8_PA5_DIRECTION,PORT_u8_PA4_DIRECTION,
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	88 ef       	ldi	r24, 0xF8	; 248
     cac:	80 83       	st	Z, r24
	                        PORT_u8_PA3_DIRECTION,PORT_u8_PA2_DIRECTION,PORT_u8_PA1_DIRECTION,PORT_u8_PA0_DIRECTION);
	// PORTB
	PORT_u8_DDRB_REG = CONC(PORT_u8_PB7_DIRECTION,PORT_u8_PB6_DIRECTION,PORT_u8_PB5_DIRECTION,PORT_u8_PB4_DIRECTION,
     cae:	e7 e3       	ldi	r30, 0x37	; 55
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	80 83       	st	Z, r24
	                        PORT_u8_PB3_DIRECTION,PORT_u8_PB2_DIRECTION,PORT_u8_PB1_DIRECTION,PORT_u8_PB0_DIRECTION);
	// PORTC
	PORT_u8_DDRC_REG = CONC(PORT_u8_PC7_DIRECTION,PORT_u8_PC6_DIRECTION,PORT_u8_PC5_DIRECTION,PORT_u8_PC4_DIRECTION,
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	80 83       	st	Z, r24
							PORT_u8_PC3_DIRECTION,PORT_u8_PC2_DIRECTION,PORT_u8_PC1_DIRECTION,PORT_u8_PC0_DIRECTION);
	// PORTD
	PORT_u8_DDRD_REG = CONC(PORT_u8_PD7_DIRECTION,PORT_u8_PD6_DIRECTION,PORT_u8_PD5_DIRECTION,PORT_u8_PD4_DIRECTION,
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	8b ef       	ldi	r24, 0xFB	; 251
     cc4:	80 83       	st	Z, r24
							PORT_u8_PD3_DIRECTION,PORT_u8_PD2_DIRECTION,PORT_u8_PD1_DIRECTION,PORT_u8_PD0_DIRECTION);
					
	/* Initialization Value for all Pins  */
	// PORTA
	PORT_u8_PORTA_REG = CONC(PORT_u8_PA7_VALUE,PORT_u8_PA6_VALUE,PORT_u8_PA5_VALUE,PORT_u8_PA4_VALUE,
     cc6:	eb e3       	ldi	r30, 0x3B	; 59
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	87 e0       	ldi	r24, 0x07	; 7
     ccc:	80 83       	st	Z, r24
							 PORT_u8_PA3_VALUE,PORT_u8_PA2_VALUE,PORT_u8_PA1_VALUE,PORT_u8_PA0_VALUE);
	// PORTB
	PORT_u8_PORTB_REG = CONC(PORT_u8_PB7_VALUE,PORT_u8_PB6_VALUE,PORT_u8_PB5_VALUE,PORT_u8_PB4_VALUE,
     cce:	e8 e3       	ldi	r30, 0x38	; 56
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	10 82       	st	Z, r1
							 PORT_u8_PB3_VALUE,PORT_u8_PB2_VALUE,PORT_u8_PB1_VALUE,PORT_u8_PB0_VALUE);
	// PORTC
	PORT_u8_PORTC_REG = CONC(PORT_u8_PC7_VALUE,PORT_u8_PC6_VALUE,PORT_u8_PC5_VALUE,PORT_u8_PC4_VALUE,
     cd4:	e5 e3       	ldi	r30, 0x35	; 53
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	10 82       	st	Z, r1
							 PORT_u8_PC3_VALUE,PORT_u8_PC2_VALUE,PORT_u8_PC1_VALUE,PORT_u8_PC0_VALUE);
	// PORTD
	PORT_u8_PORTD_REG = CONC(PORT_u8_PD7_VALUE,PORT_u8_PD6_VALUE,PORT_u8_PD5_VALUE,PORT_u8_PD4_VALUE,
     cda:	e2 e3       	ldi	r30, 0x32	; 50
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	84 e0       	ldi	r24, 0x04	; 4
     ce0:	80 83       	st	Z, r24
							 PORT_u8_PD3_VALUE,PORT_u8_PD2_VALUE,PORT_u8_PD1_VALUE,PORT_u8_PD0_VALUE);
}
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <PORT_PortEnumSetPinDirection>:

PortEnum PORT_PortEnumSetPinDirection(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Direction)
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	2e 97       	sbiw	r28, 0x0e	; 14
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
     cfc:	8a 83       	std	Y+2, r24	; 0x02
     cfe:	6b 83       	std	Y+3, r22	; 0x03
     d00:	4c 83       	std	Y+4, r20	; 0x04
	PortEnum local_PortEnumErrorState = PORT_DIRECTION_OK;
     d02:	19 82       	std	Y+1, r1	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= PORT_u8_PORTD) && (copy_u8PinId <= PORT_u8_PIN7))
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	08 f0       	brcs	.+2      	; 0xd0c <PORT_PortEnumSetPinDirection+0x24>
     d0a:	05 c1       	rjmp	.+522    	; 0xf16 <PORT_PortEnumSetPinDirection+0x22e>
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	88 30       	cpi	r24, 0x08	; 8
     d10:	08 f0       	brcs	.+2      	; 0xd14 <PORT_PortEnumSetPinDirection+0x2c>
     d12:	01 c1       	rjmp	.+514    	; 0xf16 <PORT_PortEnumSetPinDirection+0x22e>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	3e 87       	std	Y+14, r19	; 0x0e
     d1c:	2d 87       	std	Y+13, r18	; 0x0d
     d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d20:	9e 85       	ldd	r25, Y+14	; 0x0e
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	91 05       	cpc	r25, r1
     d26:	09 f4       	brne	.+2      	; 0xd2a <PORT_PortEnumSetPinDirection+0x42>
     d28:	4f c0       	rjmp	.+158    	; 0xdc8 <PORT_PortEnumSetPinDirection+0xe0>
     d2a:	2d 85       	ldd	r18, Y+13	; 0x0d
     d2c:	3e 85       	ldd	r19, Y+14	; 0x0e
     d2e:	22 30       	cpi	r18, 0x02	; 2
     d30:	31 05       	cpc	r19, r1
     d32:	2c f4       	brge	.+10     	; 0xd3e <PORT_PortEnumSetPinDirection+0x56>
     d34:	8d 85       	ldd	r24, Y+13	; 0x0d
     d36:	9e 85       	ldd	r25, Y+14	; 0x0e
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	71 f0       	breq	.+28     	; 0xd58 <PORT_PortEnumSetPinDirection+0x70>
     d3c:	ee c0       	rjmp	.+476    	; 0xf1a <PORT_PortEnumSetPinDirection+0x232>
     d3e:	2d 85       	ldd	r18, Y+13	; 0x0d
     d40:	3e 85       	ldd	r19, Y+14	; 0x0e
     d42:	22 30       	cpi	r18, 0x02	; 2
     d44:	31 05       	cpc	r19, r1
     d46:	09 f4       	brne	.+2      	; 0xd4a <PORT_PortEnumSetPinDirection+0x62>
     d48:	77 c0       	rjmp	.+238    	; 0xe38 <PORT_PortEnumSetPinDirection+0x150>
     d4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4e:	83 30       	cpi	r24, 0x03	; 3
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <PORT_PortEnumSetPinDirection+0x6e>
     d54:	a9 c0       	rjmp	.+338    	; 0xea8 <PORT_PortEnumSetPinDirection+0x1c0>
     d56:	e1 c0       	rjmp	.+450    	; 0xf1a <PORT_PortEnumSetPinDirection+0x232>
		{
			case PORT_u8_PORTA:   // PORTA
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
     d58:	8c 81       	ldd	r24, Y+4	; 0x04
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	3c 87       	std	Y+12, r19	; 0x0c
     d60:	2b 87       	std	Y+11, r18	; 0x0b
     d62:	8b 85       	ldd	r24, Y+11	; 0x0b
     d64:	9c 85       	ldd	r25, Y+12	; 0x0c
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	d1 f0       	breq	.+52     	; 0xd9e <PORT_PortEnumSetPinDirection+0xb6>
     d6a:	2b 85       	ldd	r18, Y+11	; 0x0b
     d6c:	3c 85       	ldd	r19, Y+12	; 0x0c
     d6e:	21 30       	cpi	r18, 0x01	; 1
     d70:	31 05       	cpc	r19, r1
     d72:	09 f0       	breq	.+2      	; 0xd76 <PORT_PortEnumSetPinDirection+0x8e>
     d74:	d2 c0       	rjmp	.+420    	; 0xf1a <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRA_REG,copy_u8PinId);     break;
     d76:	aa e3       	ldi	r26, 0x3A	; 58
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	ea e3       	ldi	r30, 0x3A	; 58
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	48 2f       	mov	r20, r24
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 2e       	mov	r0, r18
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <PORT_PortEnumSetPinDirection+0xac>
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	0a 94       	dec	r0
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <PORT_PortEnumSetPinDirection+0xa8>
     d98:	84 2b       	or	r24, r20
     d9a:	8c 93       	st	X, r24
     d9c:	be c0       	rjmp	.+380    	; 0xf1a <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRA_REG,copy_u8PinId);     break;
     d9e:	aa e3       	ldi	r26, 0x3A	; 58
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	ea e3       	ldi	r30, 0x3A	; 58
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	48 2f       	mov	r20, r24
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	02 2e       	mov	r0, r18
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <PORT_PortEnumSetPinDirection+0xd4>
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	0a 94       	dec	r0
     dbe:	e2 f7       	brpl	.-8      	; 0xdb8 <PORT_PortEnumSetPinDirection+0xd0>
     dc0:	80 95       	com	r24
     dc2:	84 23       	and	r24, r20
     dc4:	8c 93       	st	X, r24
     dc6:	a9 c0       	rjmp	.+338    	; 0xf1a <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTB:   // PORTB
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	3a 87       	std	Y+10, r19	; 0x0a
     dd0:	29 87       	std	Y+9, r18	; 0x09
     dd2:	89 85       	ldd	r24, Y+9	; 0x09
     dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd6:	00 97       	sbiw	r24, 0x00	; 0
     dd8:	d1 f0       	breq	.+52     	; 0xe0e <PORT_PortEnumSetPinDirection+0x126>
     dda:	29 85       	ldd	r18, Y+9	; 0x09
     ddc:	3a 85       	ldd	r19, Y+10	; 0x0a
     dde:	21 30       	cpi	r18, 0x01	; 1
     de0:	31 05       	cpc	r19, r1
     de2:	09 f0       	breq	.+2      	; 0xde6 <PORT_PortEnumSetPinDirection+0xfe>
     de4:	9a c0       	rjmp	.+308    	; 0xf1a <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRB_REG,copy_u8PinId);     break;
     de6:	a7 e3       	ldi	r26, 0x37	; 55
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e7 e3       	ldi	r30, 0x37	; 55
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <PORT_PortEnumSetPinDirection+0x11c>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <PORT_PortEnumSetPinDirection+0x118>
     e08:	84 2b       	or	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	86 c0       	rjmp	.+268    	; 0xf1a <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRB_REG,copy_u8PinId);     break;
     e0e:	a7 e3       	ldi	r26, 0x37	; 55
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e7 e3       	ldi	r30, 0x37	; 55
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <PORT_PortEnumSetPinDirection+0x144>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <PORT_PortEnumSetPinDirection+0x140>
     e30:	80 95       	com	r24
     e32:	84 23       	and	r24, r20
     e34:	8c 93       	st	X, r24
     e36:	71 c0       	rjmp	.+226    	; 0xf1a <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTC:  // PORTC
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
     e38:	8c 81       	ldd	r24, Y+4	; 0x04
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	38 87       	std	Y+8, r19	; 0x08
     e40:	2f 83       	std	Y+7, r18	; 0x07
     e42:	8f 81       	ldd	r24, Y+7	; 0x07
     e44:	98 85       	ldd	r25, Y+8	; 0x08
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	d1 f0       	breq	.+52     	; 0xe7e <PORT_PortEnumSetPinDirection+0x196>
     e4a:	2f 81       	ldd	r18, Y+7	; 0x07
     e4c:	38 85       	ldd	r19, Y+8	; 0x08
     e4e:	21 30       	cpi	r18, 0x01	; 1
     e50:	31 05       	cpc	r19, r1
     e52:	09 f0       	breq	.+2      	; 0xe56 <PORT_PortEnumSetPinDirection+0x16e>
     e54:	62 c0       	rjmp	.+196    	; 0xf1a <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRC_REG,copy_u8PinId);     break;
     e56:	a4 e3       	ldi	r26, 0x34	; 52
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e4 e3       	ldi	r30, 0x34	; 52
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <PORT_PortEnumSetPinDirection+0x18c>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <PORT_PortEnumSetPinDirection+0x188>
     e78:	84 2b       	or	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	4e c0       	rjmp	.+156    	; 0xf1a <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRC_REG,copy_u8PinId);     break;
     e7e:	a4 e3       	ldi	r26, 0x34	; 52
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e4 e3       	ldi	r30, 0x34	; 52
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <PORT_PortEnumSetPinDirection+0x1b4>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <PORT_PortEnumSetPinDirection+0x1b0>
     ea0:	80 95       	com	r24
     ea2:	84 23       	and	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	39 c0       	rjmp	.+114    	; 0xf1a <PORT_PortEnumSetPinDirection+0x232>
			}
			break;
			case PORT_u8_PORTD:  // PORTD
			/* step2: check about which direction you want to configure */
			switch(copy_u8Direction)
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	3e 83       	std	Y+6, r19	; 0x06
     eb0:	2d 83       	std	Y+5, r18	; 0x05
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	c9 f0       	breq	.+50     	; 0xeec <PORT_PortEnumSetPinDirection+0x204>
     eba:	2d 81       	ldd	r18, Y+5	; 0x05
     ebc:	3e 81       	ldd	r19, Y+6	; 0x06
     ebe:	21 30       	cpi	r18, 0x01	; 1
     ec0:	31 05       	cpc	r19, r1
     ec2:	59 f5       	brne	.+86     	; 0xf1a <PORT_PortEnumSetPinDirection+0x232>
			{
				case PORT_u8_OUTPUT: SET_BIT(PORT_u8_DDRD_REG,copy_u8PinId);     break;
     ec4:	a1 e3       	ldi	r26, 0x31	; 49
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e1 e3       	ldi	r30, 0x31	; 49
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	48 2f       	mov	r20, r24
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 2e       	mov	r0, r18
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <PORT_PortEnumSetPinDirection+0x1fa>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	0a 94       	dec	r0
     ee4:	e2 f7       	brpl	.-8      	; 0xede <PORT_PortEnumSetPinDirection+0x1f6>
     ee6:	84 2b       	or	r24, r20
     ee8:	8c 93       	st	X, r24
     eea:	17 c0       	rjmp	.+46     	; 0xf1a <PORT_PortEnumSetPinDirection+0x232>
				case PORT_u8_INPUT : CLR_BIT(PORT_u8_DDRD_REG,copy_u8PinId);     break;
     eec:	a1 e3       	ldi	r26, 0x31	; 49
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e1 e3       	ldi	r30, 0x31	; 49
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <PORT_PortEnumSetPinDirection+0x222>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <PORT_PortEnumSetPinDirection+0x21e>
     f0e:	80 95       	com	r24
     f10:	84 23       	and	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <PORT_PortEnumSetPinDirection+0x232>
			break;
		}
	}
	else
	{
		local_PortEnumErrorState = PORT_DIRECTION_NOK;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_PortEnumErrorState;
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f1c:	2e 96       	adiw	r28, 0x0e	; 14
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <PORT_PortEnumSetPinMode>:


PortEnum PORT_PortEnumSetPinMode(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Mode)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	2e 97       	sbiw	r28, 0x0e	; 14
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	8a 83       	std	Y+2, r24	; 0x02
     f44:	6b 83       	std	Y+3, r22	; 0x03
     f46:	4c 83       	std	Y+4, r20	; 0x04
	PortEnum local_PortEnumErrorState = PORT_MODE_OK;
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= PORT_u8_PORTD) && (copy_u8PinId <= PORT_u8_PIN7))
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	84 30       	cpi	r24, 0x04	; 4
     f50:	08 f0       	brcs	.+2      	; 0xf54 <PORT_PortEnumSetPinMode+0x26>
     f52:	ee c1       	rjmp	.+988    	; 0x1330 <PORT_PortEnumSetPinMode+0x402>
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	88 30       	cpi	r24, 0x08	; 8
     f58:	08 f0       	brcs	.+2      	; 0xf5c <PORT_PortEnumSetPinMode+0x2e>
     f5a:	ea c1       	rjmp	.+980    	; 0x1330 <PORT_PortEnumSetPinMode+0x402>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	3e 87       	std	Y+14, r19	; 0x0e
     f64:	2d 87       	std	Y+13, r18	; 0x0d
     f66:	8d 85       	ldd	r24, Y+13	; 0x0d
     f68:	9e 85       	ldd	r25, Y+14	; 0x0e
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	91 05       	cpc	r25, r1
     f6e:	09 f4       	brne	.+2      	; 0xf72 <PORT_PortEnumSetPinMode+0x44>
     f70:	89 c0       	rjmp	.+274    	; 0x1084 <PORT_PortEnumSetPinMode+0x156>
     f72:	2d 85       	ldd	r18, Y+13	; 0x0d
     f74:	3e 85       	ldd	r19, Y+14	; 0x0e
     f76:	22 30       	cpi	r18, 0x02	; 2
     f78:	31 05       	cpc	r19, r1
     f7a:	2c f4       	brge	.+10     	; 0xf86 <PORT_PortEnumSetPinMode+0x58>
     f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	71 f0       	breq	.+28     	; 0xfa0 <PORT_PortEnumSetPinMode+0x72>
     f84:	d7 c1       	rjmp	.+942    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
     f86:	2d 85       	ldd	r18, Y+13	; 0x0d
     f88:	3e 85       	ldd	r19, Y+14	; 0x0e
     f8a:	22 30       	cpi	r18, 0x02	; 2
     f8c:	31 05       	cpc	r19, r1
     f8e:	09 f4       	brne	.+2      	; 0xf92 <PORT_PortEnumSetPinMode+0x64>
     f90:	eb c0       	rjmp	.+470    	; 0x1168 <PORT_PortEnumSetPinMode+0x23a>
     f92:	8d 85       	ldd	r24, Y+13	; 0x0d
     f94:	9e 85       	ldd	r25, Y+14	; 0x0e
     f96:	83 30       	cpi	r24, 0x03	; 3
     f98:	91 05       	cpc	r25, r1
     f9a:	09 f4       	brne	.+2      	; 0xf9e <PORT_PortEnumSetPinMode+0x70>
     f9c:	57 c1       	rjmp	.+686    	; 0x124c <PORT_PortEnumSetPinMode+0x31e>
     f9e:	ca c1       	rjmp	.+916    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
		{
			case PORT_u8_PORTA:  // PORTA
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	3c 87       	std	Y+12, r19	; 0x0c
     fa8:	2b 87       	std	Y+11, r18	; 0x0b
     faa:	8b 85       	ldd	r24, Y+11	; 0x0b
     fac:	9c 85       	ldd	r25, Y+12	; 0x0c
     fae:	81 30       	cpi	r24, 0x01	; 1
     fb0:	91 05       	cpc	r25, r1
     fb2:	b1 f0       	breq	.+44     	; 0xfe0 <PORT_PortEnumSetPinMode+0xb2>
     fb4:	2b 85       	ldd	r18, Y+11	; 0x0b
     fb6:	3c 85       	ldd	r19, Y+12	; 0x0c
     fb8:	22 30       	cpi	r18, 0x02	; 2
     fba:	31 05       	cpc	r19, r1
     fbc:	2c f4       	brge	.+10     	; 0xfc8 <PORT_PortEnumSetPinMode+0x9a>
     fbe:	8b 85       	ldd	r24, Y+11	; 0x0b
     fc0:	9c 85       	ldd	r25, Y+12	; 0x0c
     fc2:	00 97       	sbiw	r24, 0x00	; 0
     fc4:	09 f1       	breq	.+66     	; 0x1008 <PORT_PortEnumSetPinMode+0xda>
     fc6:	b6 c1       	rjmp	.+876    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
     fc8:	2b 85       	ldd	r18, Y+11	; 0x0b
     fca:	3c 85       	ldd	r19, Y+12	; 0x0c
     fcc:	22 30       	cpi	r18, 0x02	; 2
     fce:	31 05       	cpc	r19, r1
     fd0:	81 f1       	breq	.+96     	; 0x1032 <PORT_PortEnumSetPinMode+0x104>
     fd2:	8b 85       	ldd	r24, Y+11	; 0x0b
     fd4:	9c 85       	ldd	r25, Y+12	; 0x0c
     fd6:	83 30       	cpi	r24, 0x03	; 3
     fd8:	91 05       	cpc	r25, r1
     fda:	09 f4       	brne	.+2      	; 0xfde <PORT_PortEnumSetPinMode+0xb0>
     fdc:	3e c0       	rjmp	.+124    	; 0x105a <PORT_PortEnumSetPinMode+0x12c>
     fde:	aa c1       	rjmp	.+852    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
     fe0:	ab e3       	ldi	r26, 0x3B	; 59
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	eb e3       	ldi	r30, 0x3B	; 59
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <PORT_PortEnumSetPinMode+0xd0>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <PORT_PortEnumSetPinMode+0xcc>
    1002:	84 2b       	or	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	96 c1       	rjmp	.+812    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
    1008:	ab e3       	ldi	r26, 0x3B	; 59
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	eb e3       	ldi	r30, 0x3B	; 59
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <PORT_PortEnumSetPinMode+0xf8>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <PORT_PortEnumSetPinMode+0xf4>
    102a:	80 95       	com	r24
    102c:	84 23       	and	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	81 c1       	rjmp	.+770    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
    1032:	ab e3       	ldi	r26, 0x3B	; 59
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	eb e3       	ldi	r30, 0x3B	; 59
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <PORT_PortEnumSetPinMode+0x122>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <PORT_PortEnumSetPinMode+0x11e>
    1054:	84 2b       	or	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	6d c1       	rjmp	.+730    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTA_REG,copy_u8PinId);     break;
    105a:	ab e3       	ldi	r26, 0x3B	; 59
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	eb e3       	ldi	r30, 0x3B	; 59
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <PORT_PortEnumSetPinMode+0x14a>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <PORT_PortEnumSetPinMode+0x146>
    107c:	80 95       	com	r24
    107e:	84 23       	and	r24, r20
    1080:	8c 93       	st	X, r24
    1082:	58 c1       	rjmp	.+688    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTB:  // PORTB
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    1084:	8c 81       	ldd	r24, Y+4	; 0x04
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	3a 87       	std	Y+10, r19	; 0x0a
    108c:	29 87       	std	Y+9, r18	; 0x09
    108e:	89 85       	ldd	r24, Y+9	; 0x09
    1090:	9a 85       	ldd	r25, Y+10	; 0x0a
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	91 05       	cpc	r25, r1
    1096:	b1 f0       	breq	.+44     	; 0x10c4 <PORT_PortEnumSetPinMode+0x196>
    1098:	29 85       	ldd	r18, Y+9	; 0x09
    109a:	3a 85       	ldd	r19, Y+10	; 0x0a
    109c:	22 30       	cpi	r18, 0x02	; 2
    109e:	31 05       	cpc	r19, r1
    10a0:	2c f4       	brge	.+10     	; 0x10ac <PORT_PortEnumSetPinMode+0x17e>
    10a2:	89 85       	ldd	r24, Y+9	; 0x09
    10a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	09 f1       	breq	.+66     	; 0x10ec <PORT_PortEnumSetPinMode+0x1be>
    10aa:	44 c1       	rjmp	.+648    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
    10ac:	29 85       	ldd	r18, Y+9	; 0x09
    10ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    10b0:	22 30       	cpi	r18, 0x02	; 2
    10b2:	31 05       	cpc	r19, r1
    10b4:	81 f1       	breq	.+96     	; 0x1116 <PORT_PortEnumSetPinMode+0x1e8>
    10b6:	89 85       	ldd	r24, Y+9	; 0x09
    10b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ba:	83 30       	cpi	r24, 0x03	; 3
    10bc:	91 05       	cpc	r25, r1
    10be:	09 f4       	brne	.+2      	; 0x10c2 <PORT_PortEnumSetPinMode+0x194>
    10c0:	3e c0       	rjmp	.+124    	; 0x113e <PORT_PortEnumSetPinMode+0x210>
    10c2:	38 c1       	rjmp	.+624    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
    10c4:	a8 e3       	ldi	r26, 0x38	; 56
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e8 e3       	ldi	r30, 0x38	; 56
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <PORT_PortEnumSetPinMode+0x1b4>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <PORT_PortEnumSetPinMode+0x1b0>
    10e6:	84 2b       	or	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	24 c1       	rjmp	.+584    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
    10ec:	a8 e3       	ldi	r26, 0x38	; 56
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e8 e3       	ldi	r30, 0x38	; 56
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <PORT_PortEnumSetPinMode+0x1dc>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <PORT_PortEnumSetPinMode+0x1d8>
    110e:	80 95       	com	r24
    1110:	84 23       	and	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	0f c1       	rjmp	.+542    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
    1116:	a8 e3       	ldi	r26, 0x38	; 56
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e8 e3       	ldi	r30, 0x38	; 56
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <PORT_PortEnumSetPinMode+0x206>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <PORT_PortEnumSetPinMode+0x202>
    1138:	84 2b       	or	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	fb c0       	rjmp	.+502    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTB_REG,copy_u8PinId);     break;
    113e:	a8 e3       	ldi	r26, 0x38	; 56
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e8 e3       	ldi	r30, 0x38	; 56
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <PORT_PortEnumSetPinMode+0x22e>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <PORT_PortEnumSetPinMode+0x22a>
    1160:	80 95       	com	r24
    1162:	84 23       	and	r24, r20
    1164:	8c 93       	st	X, r24
    1166:	e6 c0       	rjmp	.+460    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTC:  // PORTC
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	38 87       	std	Y+8, r19	; 0x08
    1170:	2f 83       	std	Y+7, r18	; 0x07
    1172:	8f 81       	ldd	r24, Y+7	; 0x07
    1174:	98 85       	ldd	r25, Y+8	; 0x08
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	91 05       	cpc	r25, r1
    117a:	b1 f0       	breq	.+44     	; 0x11a8 <PORT_PortEnumSetPinMode+0x27a>
    117c:	2f 81       	ldd	r18, Y+7	; 0x07
    117e:	38 85       	ldd	r19, Y+8	; 0x08
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	2c f4       	brge	.+10     	; 0x1190 <PORT_PortEnumSetPinMode+0x262>
    1186:	8f 81       	ldd	r24, Y+7	; 0x07
    1188:	98 85       	ldd	r25, Y+8	; 0x08
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	09 f1       	breq	.+66     	; 0x11d0 <PORT_PortEnumSetPinMode+0x2a2>
    118e:	d2 c0       	rjmp	.+420    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
    1190:	2f 81       	ldd	r18, Y+7	; 0x07
    1192:	38 85       	ldd	r19, Y+8	; 0x08
    1194:	22 30       	cpi	r18, 0x02	; 2
    1196:	31 05       	cpc	r19, r1
    1198:	81 f1       	breq	.+96     	; 0x11fa <PORT_PortEnumSetPinMode+0x2cc>
    119a:	8f 81       	ldd	r24, Y+7	; 0x07
    119c:	98 85       	ldd	r25, Y+8	; 0x08
    119e:	83 30       	cpi	r24, 0x03	; 3
    11a0:	91 05       	cpc	r25, r1
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <PORT_PortEnumSetPinMode+0x278>
    11a4:	3e c0       	rjmp	.+124    	; 0x1222 <PORT_PortEnumSetPinMode+0x2f4>
    11a6:	c6 c0       	rjmp	.+396    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    11a8:	a5 e3       	ldi	r26, 0x35	; 53
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e5 e3       	ldi	r30, 0x35	; 53
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <PORT_PortEnumSetPinMode+0x298>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <PORT_PortEnumSetPinMode+0x294>
    11ca:	84 2b       	or	r24, r20
    11cc:	8c 93       	st	X, r24
    11ce:	b2 c0       	rjmp	.+356    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    11d0:	a5 e3       	ldi	r26, 0x35	; 53
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e5 e3       	ldi	r30, 0x35	; 53
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <PORT_PortEnumSetPinMode+0x2c0>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <PORT_PortEnumSetPinMode+0x2bc>
    11f2:	80 95       	com	r24
    11f4:	84 23       	and	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	9d c0       	rjmp	.+314    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    11fa:	a5 e3       	ldi	r26, 0x35	; 53
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e5 e3       	ldi	r30, 0x35	; 53
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <PORT_PortEnumSetPinMode+0x2ea>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <PORT_PortEnumSetPinMode+0x2e6>
    121c:	84 2b       	or	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	89 c0       	rjmp	.+274    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTC_REG,copy_u8PinId);     break;
    1222:	a5 e3       	ldi	r26, 0x35	; 53
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e5 e3       	ldi	r30, 0x35	; 53
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <PORT_PortEnumSetPinMode+0x312>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <PORT_PortEnumSetPinMode+0x30e>
    1244:	80 95       	com	r24
    1246:	84 23       	and	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	74 c0       	rjmp	.+232    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
			}
			break;
			case PORT_u8_PORTD:  // PORTD
			/* step2: check about which mode you want to configure */
			switch(copy_u8Mode)
    124c:	8c 81       	ldd	r24, Y+4	; 0x04
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	3e 83       	std	Y+6, r19	; 0x06
    1254:	2d 83       	std	Y+5, r18	; 0x05
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	91 05       	cpc	r25, r1
    125e:	b1 f0       	breq	.+44     	; 0x128c <PORT_PortEnumSetPinMode+0x35e>
    1260:	2d 81       	ldd	r18, Y+5	; 0x05
    1262:	3e 81       	ldd	r19, Y+6	; 0x06
    1264:	22 30       	cpi	r18, 0x02	; 2
    1266:	31 05       	cpc	r19, r1
    1268:	2c f4       	brge	.+10     	; 0x1274 <PORT_PortEnumSetPinMode+0x346>
    126a:	8d 81       	ldd	r24, Y+5	; 0x05
    126c:	9e 81       	ldd	r25, Y+6	; 0x06
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	09 f1       	breq	.+66     	; 0x12b4 <PORT_PortEnumSetPinMode+0x386>
    1272:	60 c0       	rjmp	.+192    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
    1274:	2d 81       	ldd	r18, Y+5	; 0x05
    1276:	3e 81       	ldd	r19, Y+6	; 0x06
    1278:	22 30       	cpi	r18, 0x02	; 2
    127a:	31 05       	cpc	r19, r1
    127c:	81 f1       	breq	.+96     	; 0x12de <PORT_PortEnumSetPinMode+0x3b0>
    127e:	8d 81       	ldd	r24, Y+5	; 0x05
    1280:	9e 81       	ldd	r25, Y+6	; 0x06
    1282:	83 30       	cpi	r24, 0x03	; 3
    1284:	91 05       	cpc	r25, r1
    1286:	09 f4       	brne	.+2      	; 0x128a <PORT_PortEnumSetPinMode+0x35c>
    1288:	3e c0       	rjmp	.+124    	; 0x1306 <PORT_PortEnumSetPinMode+0x3d8>
    128a:	54 c0       	rjmp	.+168    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
			{
				case PORT_u8_HIGH     : SET_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    128c:	a2 e3       	ldi	r26, 0x32	; 50
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e2 e3       	ldi	r30, 0x32	; 50
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <PORT_PortEnumSetPinMode+0x37c>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <PORT_PortEnumSetPinMode+0x378>
    12ae:	84 2b       	or	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	40 c0       	rjmp	.+128    	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_LOW      : CLR_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    12b4:	a2 e3       	ldi	r26, 0x32	; 50
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e2 e3       	ldi	r30, 0x32	; 50
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <PORT_PortEnumSetPinMode+0x3a4>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <PORT_PortEnumSetPinMode+0x3a0>
    12d6:	80 95       	com	r24
    12d8:	84 23       	and	r24, r20
    12da:	8c 93       	st	X, r24
    12dc:	2b c0       	rjmp	.+86     	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_PULLUP   : SET_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    12de:	a2 e3       	ldi	r26, 0x32	; 50
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e2 e3       	ldi	r30, 0x32	; 50
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	48 2f       	mov	r20, r24
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	02 2e       	mov	r0, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <PORT_PortEnumSetPinMode+0x3ce>
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	0a 94       	dec	r0
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <PORT_PortEnumSetPinMode+0x3ca>
    1300:	84 2b       	or	r24, r20
    1302:	8c 93       	st	X, r24
    1304:	17 c0       	rjmp	.+46     	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
				case PORT_u8_FLOATING : CLR_BIT(PORT_u8_PORTD_REG,copy_u8PinId);     break;
    1306:	a2 e3       	ldi	r26, 0x32	; 50
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e2 e3       	ldi	r30, 0x32	; 50
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	48 2f       	mov	r20, r24
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 2e       	mov	r0, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <PORT_PortEnumSetPinMode+0x3f6>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	0a 94       	dec	r0
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <PORT_PortEnumSetPinMode+0x3f2>
    1328:	80 95       	com	r24
    132a:	84 23       	and	r24, r20
    132c:	8c 93       	st	X, r24
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <PORT_PortEnumSetPinMode+0x406>
			break;
		}
	}
	else
	{
		local_PortEnumErrorState = PORT_MODE_NOK;
    1330:	83 e0       	ldi	r24, 0x03	; 3
    1332:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_PortEnumErrorState;
    1334:	89 81       	ldd	r24, Y+1	; 0x01
}
    1336:	2e 96       	adiw	r28, 0x0e	; 14
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <DIO_DioEnumWriteChannel>:
#include "../Include/DIO_interface.h"
#include "../Include/DIO_private.h"
#include "../Include/DIO_config.h"

DioEnum DIO_DioEnumWriteChannel(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8Level)
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	2e 97       	sbiw	r28, 0x0e	; 14
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	8a 83       	std	Y+2, r24	; 0x02
    135e:	6b 83       	std	Y+3, r22	; 0x03
    1360:	4c 83       	std	Y+4, r20	; 0x04
	DioEnum local_DioEnumErrorState = DIO_WRITE_OK;
    1362:	19 82       	std	Y+1, r1	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7))
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	84 30       	cpi	r24, 0x04	; 4
    1368:	08 f0       	brcs	.+2      	; 0x136c <DIO_DioEnumWriteChannel+0x24>
    136a:	05 c1       	rjmp	.+522    	; 0x1576 <DIO_DioEnumWriteChannel+0x22e>
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	88 30       	cpi	r24, 0x08	; 8
    1370:	08 f0       	brcs	.+2      	; 0x1374 <DIO_DioEnumWriteChannel+0x2c>
    1372:	01 c1       	rjmp	.+514    	; 0x1576 <DIO_DioEnumWriteChannel+0x22e>
	{
		/* step1: check about which port you want to configure */
		switch(copy_u8PortId)
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	3e 87       	std	Y+14, r19	; 0x0e
    137c:	2d 87       	std	Y+13, r18	; 0x0d
    137e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1380:	9e 85       	ldd	r25, Y+14	; 0x0e
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	91 05       	cpc	r25, r1
    1386:	09 f4       	brne	.+2      	; 0x138a <DIO_DioEnumWriteChannel+0x42>
    1388:	4f c0       	rjmp	.+158    	; 0x1428 <DIO_DioEnumWriteChannel+0xe0>
    138a:	2d 85       	ldd	r18, Y+13	; 0x0d
    138c:	3e 85       	ldd	r19, Y+14	; 0x0e
    138e:	22 30       	cpi	r18, 0x02	; 2
    1390:	31 05       	cpc	r19, r1
    1392:	2c f4       	brge	.+10     	; 0x139e <DIO_DioEnumWriteChannel+0x56>
    1394:	8d 85       	ldd	r24, Y+13	; 0x0d
    1396:	9e 85       	ldd	r25, Y+14	; 0x0e
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	71 f0       	breq	.+28     	; 0x13b8 <DIO_DioEnumWriteChannel+0x70>
    139c:	ee c0       	rjmp	.+476    	; 0x157a <DIO_DioEnumWriteChannel+0x232>
    139e:	2d 85       	ldd	r18, Y+13	; 0x0d
    13a0:	3e 85       	ldd	r19, Y+14	; 0x0e
    13a2:	22 30       	cpi	r18, 0x02	; 2
    13a4:	31 05       	cpc	r19, r1
    13a6:	09 f4       	brne	.+2      	; 0x13aa <DIO_DioEnumWriteChannel+0x62>
    13a8:	77 c0       	rjmp	.+238    	; 0x1498 <DIO_DioEnumWriteChannel+0x150>
    13aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ae:	83 30       	cpi	r24, 0x03	; 3
    13b0:	91 05       	cpc	r25, r1
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <DIO_DioEnumWriteChannel+0x6e>
    13b4:	a9 c0       	rjmp	.+338    	; 0x1508 <DIO_DioEnumWriteChannel+0x1c0>
    13b6:	e1 c0       	rjmp	.+450    	; 0x157a <DIO_DioEnumWriteChannel+0x232>
		{
			case DIO_u8_PORTA:  // PORTA
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	3c 87       	std	Y+12, r19	; 0x0c
    13c0:	2b 87       	std	Y+11, r18	; 0x0b
    13c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    13c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	d1 f0       	breq	.+52     	; 0x13fe <DIO_DioEnumWriteChannel+0xb6>
    13ca:	2b 85       	ldd	r18, Y+11	; 0x0b
    13cc:	3c 85       	ldd	r19, Y+12	; 0x0c
    13ce:	21 30       	cpi	r18, 0x01	; 1
    13d0:	31 05       	cpc	r19, r1
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <DIO_DioEnumWriteChannel+0x8e>
    13d4:	d2 c0       	rjmp	.+420    	; 0x157a <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,copy_u8PinId);     break;
    13d6:	ab e3       	ldi	r26, 0x3B	; 59
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	eb e3       	ldi	r30, 0x3B	; 59
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	48 2f       	mov	r20, r24
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_DioEnumWriteChannel+0xac>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <DIO_DioEnumWriteChannel+0xa8>
    13f8:	84 2b       	or	r24, r20
    13fa:	8c 93       	st	X, r24
    13fc:	be c0       	rjmp	.+380    	; 0x157a <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,copy_u8PinId);     break;
    13fe:	ab e3       	ldi	r26, 0x3B	; 59
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	eb e3       	ldi	r30, 0x3B	; 59
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	48 2f       	mov	r20, r24
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 2e       	mov	r0, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <DIO_DioEnumWriteChannel+0xd4>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <DIO_DioEnumWriteChannel+0xd0>
    1420:	80 95       	com	r24
    1422:	84 23       	and	r24, r20
    1424:	8c 93       	st	X, r24
    1426:	a9 c0       	rjmp	.+338    	; 0x157a <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTB:  // PORTB
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    1428:	8c 81       	ldd	r24, Y+4	; 0x04
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	3a 87       	std	Y+10, r19	; 0x0a
    1430:	29 87       	std	Y+9, r18	; 0x09
    1432:	89 85       	ldd	r24, Y+9	; 0x09
    1434:	9a 85       	ldd	r25, Y+10	; 0x0a
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	d1 f0       	breq	.+52     	; 0x146e <DIO_DioEnumWriteChannel+0x126>
    143a:	29 85       	ldd	r18, Y+9	; 0x09
    143c:	3a 85       	ldd	r19, Y+10	; 0x0a
    143e:	21 30       	cpi	r18, 0x01	; 1
    1440:	31 05       	cpc	r19, r1
    1442:	09 f0       	breq	.+2      	; 0x1446 <DIO_DioEnumWriteChannel+0xfe>
    1444:	9a c0       	rjmp	.+308    	; 0x157a <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,copy_u8PinId);     break;
    1446:	a8 e3       	ldi	r26, 0x38	; 56
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e8 e3       	ldi	r30, 0x38	; 56
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <DIO_DioEnumWriteChannel+0x11c>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <DIO_DioEnumWriteChannel+0x118>
    1468:	84 2b       	or	r24, r20
    146a:	8c 93       	st	X, r24
    146c:	86 c0       	rjmp	.+268    	; 0x157a <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,copy_u8PinId);     break;
    146e:	a8 e3       	ldi	r26, 0x38	; 56
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e8 e3       	ldi	r30, 0x38	; 56
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	48 2f       	mov	r20, r24
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 2e       	mov	r0, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <DIO_DioEnumWriteChannel+0x144>
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	0a 94       	dec	r0
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <DIO_DioEnumWriteChannel+0x140>
    1490:	80 95       	com	r24
    1492:	84 23       	and	r24, r20
    1494:	8c 93       	st	X, r24
    1496:	71 c0       	rjmp	.+226    	; 0x157a <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTC:  // PORTC
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    1498:	8c 81       	ldd	r24, Y+4	; 0x04
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	38 87       	std	Y+8, r19	; 0x08
    14a0:	2f 83       	std	Y+7, r18	; 0x07
    14a2:	8f 81       	ldd	r24, Y+7	; 0x07
    14a4:	98 85       	ldd	r25, Y+8	; 0x08
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	d1 f0       	breq	.+52     	; 0x14de <DIO_DioEnumWriteChannel+0x196>
    14aa:	2f 81       	ldd	r18, Y+7	; 0x07
    14ac:	38 85       	ldd	r19, Y+8	; 0x08
    14ae:	21 30       	cpi	r18, 0x01	; 1
    14b0:	31 05       	cpc	r19, r1
    14b2:	09 f0       	breq	.+2      	; 0x14b6 <DIO_DioEnumWriteChannel+0x16e>
    14b4:	62 c0       	rjmp	.+196    	; 0x157a <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,copy_u8PinId);     break;
    14b6:	a5 e3       	ldi	r26, 0x35	; 53
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e5 e3       	ldi	r30, 0x35	; 53
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_DioEnumWriteChannel+0x18c>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_DioEnumWriteChannel+0x188>
    14d8:	84 2b       	or	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	4e c0       	rjmp	.+156    	; 0x157a <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,copy_u8PinId);     break;
    14de:	a5 e3       	ldi	r26, 0x35	; 53
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e5 e3       	ldi	r30, 0x35	; 53
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	48 2f       	mov	r20, r24
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 2e       	mov	r0, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <DIO_DioEnumWriteChannel+0x1b4>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <DIO_DioEnumWriteChannel+0x1b0>
    1500:	80 95       	com	r24
    1502:	84 23       	and	r24, r20
    1504:	8c 93       	st	X, r24
    1506:	39 c0       	rjmp	.+114    	; 0x157a <DIO_DioEnumWriteChannel+0x232>
			}
			break;
			case DIO_u8_PORTD:  // PORTD
			/* step2: check about which level you want to configure */
			switch(copy_u8Level)
    1508:	8c 81       	ldd	r24, Y+4	; 0x04
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	3e 83       	std	Y+6, r19	; 0x06
    1510:	2d 83       	std	Y+5, r18	; 0x05
    1512:	8d 81       	ldd	r24, Y+5	; 0x05
    1514:	9e 81       	ldd	r25, Y+6	; 0x06
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	c9 f0       	breq	.+50     	; 0x154c <DIO_DioEnumWriteChannel+0x204>
    151a:	2d 81       	ldd	r18, Y+5	; 0x05
    151c:	3e 81       	ldd	r19, Y+6	; 0x06
    151e:	21 30       	cpi	r18, 0x01	; 1
    1520:	31 05       	cpc	r19, r1
    1522:	59 f5       	brne	.+86     	; 0x157a <DIO_DioEnumWriteChannel+0x232>
			{
				case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,copy_u8PinId);     break;
    1524:	a2 e3       	ldi	r26, 0x32	; 50
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e2 e3       	ldi	r30, 0x32	; 50
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	48 2f       	mov	r20, r24
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	02 2e       	mov	r0, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <DIO_DioEnumWriteChannel+0x1fa>
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	0a 94       	dec	r0
    1544:	e2 f7       	brpl	.-8      	; 0x153e <DIO_DioEnumWriteChannel+0x1f6>
    1546:	84 2b       	or	r24, r20
    1548:	8c 93       	st	X, r24
    154a:	17 c0       	rjmp	.+46     	; 0x157a <DIO_DioEnumWriteChannel+0x232>
				case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,copy_u8PinId);     break;
    154c:	a2 e3       	ldi	r26, 0x32	; 50
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e2 e3       	ldi	r30, 0x32	; 50
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	48 2f       	mov	r20, r24
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 2e       	mov	r0, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <DIO_DioEnumWriteChannel+0x222>
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	0a 94       	dec	r0
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <DIO_DioEnumWriteChannel+0x21e>
    156e:	80 95       	com	r24
    1570:	84 23       	and	r24, r20
    1572:	8c 93       	st	X, r24
    1574:	02 c0       	rjmp	.+4      	; 0x157a <DIO_DioEnumWriteChannel+0x232>
			break;
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_WRITE_NOK;
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    157a:	89 81       	ldd	r24, Y+1	; 0x01
}
    157c:	2e 96       	adiw	r28, 0x0e	; 14
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <DIO_DioEnumReadChannel>:

DioEnum DIO_DioEnumReadChannel(u8 copy_u8PortId,u8 copy_u8PinId,pu8 copy_pu8ReadChannel)
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	28 97       	sbiw	r28, 0x08	; 8
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	8b 83       	std	Y+3, r24	; 0x03
    15a4:	6c 83       	std	Y+4, r22	; 0x04
    15a6:	5e 83       	std	Y+6, r21	; 0x06
    15a8:	4d 83       	std	Y+5, r20	; 0x05
	DioEnum local_DioEnumErrorState = DIO_READ_OK;
    15aa:	82 e0       	ldi	r24, 0x02	; 2
    15ac:	8a 83       	std	Y+2, r24	; 0x02
	/* local variable to store in value of the pin */
	u8 local_u8GetValue;
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7) && (copy_pu8ReadChannel != NULL))
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	84 30       	cpi	r24, 0x04	; 4
    15b2:	08 f0       	brcs	.+2      	; 0x15b6 <DIO_DioEnumReadChannel+0x28>
    15b4:	9f c0       	rjmp	.+318    	; 0x16f4 <DIO_DioEnumReadChannel+0x166>
    15b6:	8c 81       	ldd	r24, Y+4	; 0x04
    15b8:	88 30       	cpi	r24, 0x08	; 8
    15ba:	08 f0       	brcs	.+2      	; 0x15be <DIO_DioEnumReadChannel+0x30>
    15bc:	9b c0       	rjmp	.+310    	; 0x16f4 <DIO_DioEnumReadChannel+0x166>
    15be:	8d 81       	ldd	r24, Y+5	; 0x05
    15c0:	9e 81       	ldd	r25, Y+6	; 0x06
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <DIO_DioEnumReadChannel+0x3a>
    15c6:	96 c0       	rjmp	.+300    	; 0x16f4 <DIO_DioEnumReadChannel+0x166>
	{
		/* step1: check about which port you want to read */
		switch(copy_u8PortId)
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	38 87       	std	Y+8, r19	; 0x08
    15d0:	2f 83       	std	Y+7, r18	; 0x07
    15d2:	4f 81       	ldd	r20, Y+7	; 0x07
    15d4:	58 85       	ldd	r21, Y+8	; 0x08
    15d6:	41 30       	cpi	r20, 0x01	; 1
    15d8:	51 05       	cpc	r21, r1
    15da:	a9 f1       	breq	.+106    	; 0x1646 <DIO_DioEnumReadChannel+0xb8>
    15dc:	8f 81       	ldd	r24, Y+7	; 0x07
    15de:	98 85       	ldd	r25, Y+8	; 0x08
    15e0:	82 30       	cpi	r24, 0x02	; 2
    15e2:	91 05       	cpc	r25, r1
    15e4:	34 f4       	brge	.+12     	; 0x15f2 <DIO_DioEnumReadChannel+0x64>
    15e6:	2f 81       	ldd	r18, Y+7	; 0x07
    15e8:	38 85       	ldd	r19, Y+8	; 0x08
    15ea:	21 15       	cp	r18, r1
    15ec:	31 05       	cpc	r19, r1
    15ee:	71 f0       	breq	.+28     	; 0x160c <DIO_DioEnumReadChannel+0x7e>
    15f0:	83 c0       	rjmp	.+262    	; 0x16f8 <DIO_DioEnumReadChannel+0x16a>
    15f2:	4f 81       	ldd	r20, Y+7	; 0x07
    15f4:	58 85       	ldd	r21, Y+8	; 0x08
    15f6:	42 30       	cpi	r20, 0x02	; 2
    15f8:	51 05       	cpc	r21, r1
    15fa:	09 f4       	brne	.+2      	; 0x15fe <DIO_DioEnumReadChannel+0x70>
    15fc:	41 c0       	rjmp	.+130    	; 0x1680 <DIO_DioEnumReadChannel+0xf2>
    15fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1600:	98 85       	ldd	r25, Y+8	; 0x08
    1602:	83 30       	cpi	r24, 0x03	; 3
    1604:	91 05       	cpc	r25, r1
    1606:	09 f4       	brne	.+2      	; 0x160a <DIO_DioEnumReadChannel+0x7c>
    1608:	58 c0       	rjmp	.+176    	; 0x16ba <DIO_DioEnumReadChannel+0x12c>
    160a:	76 c0       	rjmp	.+236    	; 0x16f8 <DIO_DioEnumReadChannel+0x16a>
		{
			case DIO_u8_PORTA:  // PORTA
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINA_REG,copy_u8PinId);
    160c:	e9 e3       	ldi	r30, 0x39	; 57
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	8c 81       	ldd	r24, Y+4	; 0x04
    1618:	88 2f       	mov	r24, r24
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	a9 01       	movw	r20, r18
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <DIO_DioEnumReadChannel+0x96>
    1620:	55 95       	asr	r21
    1622:	47 95       	ror	r20
    1624:	8a 95       	dec	r24
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <DIO_DioEnumReadChannel+0x92>
    1628:	ca 01       	movw	r24, r20
    162a:	81 70       	andi	r24, 0x01	; 1
    162c:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	88 23       	and	r24, r24
    1632:	21 f4       	brne	.+8      	; 0x163c <DIO_DioEnumReadChannel+0xae>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    1634:	ed 81       	ldd	r30, Y+5	; 0x05
    1636:	fe 81       	ldd	r31, Y+6	; 0x06
    1638:	10 82       	st	Z, r1
    163a:	5e c0       	rjmp	.+188    	; 0x16f8 <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    163c:	ed 81       	ldd	r30, Y+5	; 0x05
    163e:	fe 81       	ldd	r31, Y+6	; 0x06
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	80 83       	st	Z, r24
    1644:	59 c0       	rjmp	.+178    	; 0x16f8 <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTB:  // PORTB
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINB_REG,copy_u8PinId);
    1646:	e6 e3       	ldi	r30, 0x36	; 54
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	8c 81       	ldd	r24, Y+4	; 0x04
    1652:	88 2f       	mov	r24, r24
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	a9 01       	movw	r20, r18
    1658:	02 c0       	rjmp	.+4      	; 0x165e <DIO_DioEnumReadChannel+0xd0>
    165a:	55 95       	asr	r21
    165c:	47 95       	ror	r20
    165e:	8a 95       	dec	r24
    1660:	e2 f7       	brpl	.-8      	; 0x165a <DIO_DioEnumReadChannel+0xcc>
    1662:	ca 01       	movw	r24, r20
    1664:	81 70       	andi	r24, 0x01	; 1
    1666:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	88 23       	and	r24, r24
    166c:	21 f4       	brne	.+8      	; 0x1676 <DIO_DioEnumReadChannel+0xe8>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    166e:	ed 81       	ldd	r30, Y+5	; 0x05
    1670:	fe 81       	ldd	r31, Y+6	; 0x06
    1672:	10 82       	st	Z, r1
    1674:	41 c0       	rjmp	.+130    	; 0x16f8 <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    1676:	ed 81       	ldd	r30, Y+5	; 0x05
    1678:	fe 81       	ldd	r31, Y+6	; 0x06
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	80 83       	st	Z, r24
    167e:	3c c0       	rjmp	.+120    	; 0x16f8 <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTC:  // PORTC
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PINC_REG,copy_u8PinId);
    1680:	e3 e3       	ldi	r30, 0x33	; 51
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	8c 81       	ldd	r24, Y+4	; 0x04
    168c:	88 2f       	mov	r24, r24
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	a9 01       	movw	r20, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <DIO_DioEnumReadChannel+0x10a>
    1694:	55 95       	asr	r21
    1696:	47 95       	ror	r20
    1698:	8a 95       	dec	r24
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <DIO_DioEnumReadChannel+0x106>
    169c:	ca 01       	movw	r24, r20
    169e:	81 70       	andi	r24, 0x01	; 1
    16a0:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	88 23       	and	r24, r24
    16a6:	21 f4       	brne	.+8      	; 0x16b0 <DIO_DioEnumReadChannel+0x122>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    16a8:	ed 81       	ldd	r30, Y+5	; 0x05
    16aa:	fe 81       	ldd	r31, Y+6	; 0x06
    16ac:	10 82       	st	Z, r1
    16ae:	24 c0       	rjmp	.+72     	; 0x16f8 <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    16b0:	ed 81       	ldd	r30, Y+5	; 0x05
    16b2:	fe 81       	ldd	r31, Y+6	; 0x06
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	80 83       	st	Z, r24
    16b8:	1f c0       	rjmp	.+62     	; 0x16f8 <DIO_DioEnumReadChannel+0x16a>
			}
			break;
			case DIO_u8_PORTD:  // PORTD
			/* to get the pin value */
			local_u8GetValue = GET_BIT(DIO_u8_PIND_REG,copy_u8PinId);
    16ba:	e0 e3       	ldi	r30, 0x30	; 48
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	8c 81       	ldd	r24, Y+4	; 0x04
    16c6:	88 2f       	mov	r24, r24
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	a9 01       	movw	r20, r18
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <DIO_DioEnumReadChannel+0x144>
    16ce:	55 95       	asr	r21
    16d0:	47 95       	ror	r20
    16d2:	8a 95       	dec	r24
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <DIO_DioEnumReadChannel+0x140>
    16d6:	ca 01       	movw	r24, r20
    16d8:	81 70       	andi	r24, 0x01	; 1
    16da:	89 83       	std	Y+1, r24	; 0x01
			if(local_u8GetValue == 0)
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	88 23       	and	r24, r24
    16e0:	21 f4       	brne	.+8      	; 0x16ea <DIO_DioEnumReadChannel+0x15c>
			{
				*copy_pu8ReadChannel = DIO_u8_LOW;
    16e2:	ed 81       	ldd	r30, Y+5	; 0x05
    16e4:	fe 81       	ldd	r31, Y+6	; 0x06
    16e6:	10 82       	st	Z, r1
    16e8:	07 c0       	rjmp	.+14     	; 0x16f8 <DIO_DioEnumReadChannel+0x16a>
			}
			else
			{
				*copy_pu8ReadChannel = DIO_u8_HIGH;
    16ea:	ed 81       	ldd	r30, Y+5	; 0x05
    16ec:	fe 81       	ldd	r31, Y+6	; 0x06
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	80 83       	st	Z, r24
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <DIO_DioEnumReadChannel+0x16a>
			break;
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_READ_NOK;
    16f4:	83 e0       	ldi	r24, 0x03	; 3
    16f6:	8a 83       	std	Y+2, r24	; 0x02
	}
	return local_DioEnumErrorState;
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    16fa:	28 96       	adiw	r28, 0x08	; 8
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <DIO_DioEnumWritePort>:

DioEnum DIO_DioEnumWritePort(u8 copy_u8PortId,u8 copy_u8Value)
{
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	00 d0       	rcall	.+0      	; 0x1712 <DIO_DioEnumWritePort+0x6>
    1712:	00 d0       	rcall	.+0      	; 0x1714 <DIO_DioEnumWritePort+0x8>
    1714:	0f 92       	push	r0
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	8a 83       	std	Y+2, r24	; 0x02
    171c:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_WPORT_OK;
    171e:	84 e0       	ldi	r24, 0x04	; 4
    1720:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if(copy_u8PortId <= DIO_u8_PORTD)
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	84 30       	cpi	r24, 0x04	; 4
    1726:	98 f5       	brcc	.+102    	; 0x178e <DIO_DioEnumWritePort+0x82>
	{
		/* check about which port you want to write into the value */
		switch(copy_u8PortId)
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	3d 83       	std	Y+5, r19	; 0x05
    1730:	2c 83       	std	Y+4, r18	; 0x04
    1732:	8c 81       	ldd	r24, Y+4	; 0x04
    1734:	9d 81       	ldd	r25, Y+5	; 0x05
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	91 05       	cpc	r25, r1
    173a:	d1 f0       	breq	.+52     	; 0x1770 <DIO_DioEnumWritePort+0x64>
    173c:	2c 81       	ldd	r18, Y+4	; 0x04
    173e:	3d 81       	ldd	r19, Y+5	; 0x05
    1740:	22 30       	cpi	r18, 0x02	; 2
    1742:	31 05       	cpc	r19, r1
    1744:	2c f4       	brge	.+10     	; 0x1750 <DIO_DioEnumWritePort+0x44>
    1746:	8c 81       	ldd	r24, Y+4	; 0x04
    1748:	9d 81       	ldd	r25, Y+5	; 0x05
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	61 f0       	breq	.+24     	; 0x1766 <DIO_DioEnumWritePort+0x5a>
    174e:	21 c0       	rjmp	.+66     	; 0x1792 <DIO_DioEnumWritePort+0x86>
    1750:	2c 81       	ldd	r18, Y+4	; 0x04
    1752:	3d 81       	ldd	r19, Y+5	; 0x05
    1754:	22 30       	cpi	r18, 0x02	; 2
    1756:	31 05       	cpc	r19, r1
    1758:	81 f0       	breq	.+32     	; 0x177a <DIO_DioEnumWritePort+0x6e>
    175a:	8c 81       	ldd	r24, Y+4	; 0x04
    175c:	9d 81       	ldd	r25, Y+5	; 0x05
    175e:	83 30       	cpi	r24, 0x03	; 3
    1760:	91 05       	cpc	r25, r1
    1762:	81 f0       	breq	.+32     	; 0x1784 <DIO_DioEnumWritePort+0x78>
    1764:	16 c0       	rjmp	.+44     	; 0x1792 <DIO_DioEnumWritePort+0x86>
		{
			case DIO_u8_PORTA: DIO_u8_PORTA_REG = copy_u8Value;      break;
    1766:	eb e3       	ldi	r30, 0x3B	; 59
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	80 83       	st	Z, r24
    176e:	11 c0       	rjmp	.+34     	; 0x1792 <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTB: DIO_u8_PORTB_REG = copy_u8Value;      break;
    1770:	e8 e3       	ldi	r30, 0x38	; 56
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	80 83       	st	Z, r24
    1778:	0c c0       	rjmp	.+24     	; 0x1792 <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTC: DIO_u8_PORTC_REG = copy_u8Value;      break;
    177a:	e5 e3       	ldi	r30, 0x35	; 53
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	80 83       	st	Z, r24
    1782:	07 c0       	rjmp	.+14     	; 0x1792 <DIO_DioEnumWritePort+0x86>
			case DIO_u8_PORTD: DIO_u8_PORTD_REG = copy_u8Value;      break;
    1784:	e2 e3       	ldi	r30, 0x32	; 50
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	80 83       	st	Z, r24
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <DIO_DioEnumWritePort+0x86>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_WPORT_NOK;
    178e:	85 e0       	ldi	r24, 0x05	; 5
    1790:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    1792:	89 81       	ldd	r24, Y+1	; 0x01
}
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <DIO_DioEnumReadPort>:

DioEnum DIO_DioEnumReadPort(u8 copy_u8PortId,pu8 copy_pu8ReadPort)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <DIO_DioEnumReadPort+0x6>
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <DIO_DioEnumReadPort+0x8>
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <DIO_DioEnumReadPort+0xa>
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	8a 83       	std	Y+2, r24	; 0x02
    17b4:	7c 83       	std	Y+4, r23	; 0x04
    17b6:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_RPORT_OK;
    17b8:	86 e0       	ldi	r24, 0x06	; 6
    17ba:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_pu8ReadPort != NULL))
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	84 30       	cpi	r24, 0x04	; 4
    17c0:	08 f0       	brcs	.+2      	; 0x17c4 <DIO_DioEnumReadPort+0x20>
    17c2:	3f c0       	rjmp	.+126    	; 0x1842 <DIO_DioEnumReadPort+0x9e>
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	d9 f1       	breq	.+118    	; 0x1842 <DIO_DioEnumReadPort+0x9e>
	{
		/* check about which port you want to read this value */
		switch(copy_u8PortId)
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	3e 83       	std	Y+6, r19	; 0x06
    17d4:	2d 83       	std	Y+5, r18	; 0x05
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	9e 81       	ldd	r25, Y+6	; 0x06
    17da:	81 30       	cpi	r24, 0x01	; 1
    17dc:	91 05       	cpc	r25, r1
    17de:	e1 f0       	breq	.+56     	; 0x1818 <DIO_DioEnumReadPort+0x74>
    17e0:	2d 81       	ldd	r18, Y+5	; 0x05
    17e2:	3e 81       	ldd	r19, Y+6	; 0x06
    17e4:	22 30       	cpi	r18, 0x02	; 2
    17e6:	31 05       	cpc	r19, r1
    17e8:	2c f4       	brge	.+10     	; 0x17f4 <DIO_DioEnumReadPort+0x50>
    17ea:	8d 81       	ldd	r24, Y+5	; 0x05
    17ec:	9e 81       	ldd	r25, Y+6	; 0x06
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	61 f0       	breq	.+24     	; 0x180a <DIO_DioEnumReadPort+0x66>
    17f2:	29 c0       	rjmp	.+82     	; 0x1846 <DIO_DioEnumReadPort+0xa2>
    17f4:	2d 81       	ldd	r18, Y+5	; 0x05
    17f6:	3e 81       	ldd	r19, Y+6	; 0x06
    17f8:	22 30       	cpi	r18, 0x02	; 2
    17fa:	31 05       	cpc	r19, r1
    17fc:	a1 f0       	breq	.+40     	; 0x1826 <DIO_DioEnumReadPort+0x82>
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	9e 81       	ldd	r25, Y+6	; 0x06
    1802:	83 30       	cpi	r24, 0x03	; 3
    1804:	91 05       	cpc	r25, r1
    1806:	b1 f0       	breq	.+44     	; 0x1834 <DIO_DioEnumReadPort+0x90>
    1808:	1e c0       	rjmp	.+60     	; 0x1846 <DIO_DioEnumReadPort+0xa2>
		{
			case DIO_u8_PORTA: *copy_pu8ReadPort = DIO_u8_PINA_REG;      break;
    180a:	e9 e3       	ldi	r30, 0x39	; 57
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	eb 81       	ldd	r30, Y+3	; 0x03
    1812:	fc 81       	ldd	r31, Y+4	; 0x04
    1814:	80 83       	st	Z, r24
    1816:	17 c0       	rjmp	.+46     	; 0x1846 <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTB: *copy_pu8ReadPort = DIO_u8_PINB_REG;      break;
    1818:	e6 e3       	ldi	r30, 0x36	; 54
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	eb 81       	ldd	r30, Y+3	; 0x03
    1820:	fc 81       	ldd	r31, Y+4	; 0x04
    1822:	80 83       	st	Z, r24
    1824:	10 c0       	rjmp	.+32     	; 0x1846 <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTC: *copy_pu8ReadPort = DIO_u8_PINC_REG;      break;
    1826:	e3 e3       	ldi	r30, 0x33	; 51
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	eb 81       	ldd	r30, Y+3	; 0x03
    182e:	fc 81       	ldd	r31, Y+4	; 0x04
    1830:	80 83       	st	Z, r24
    1832:	09 c0       	rjmp	.+18     	; 0x1846 <DIO_DioEnumReadPort+0xa2>
			case DIO_u8_PORTD: *copy_pu8ReadPort = DIO_u8_PIND_REG;      break;
    1834:	e0 e3       	ldi	r30, 0x30	; 48
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	eb 81       	ldd	r30, Y+3	; 0x03
    183c:	fc 81       	ldd	r31, Y+4	; 0x04
    183e:	80 83       	st	Z, r24
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <DIO_DioEnumReadPort+0xa2>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_RPORT_NOK;
    1842:	87 e0       	ldi	r24, 0x07	; 7
    1844:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    1846:	89 81       	ldd	r24, Y+1	; 0x01
}
    1848:	26 96       	adiw	r28, 0x06	; 6
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <DIO_DioEnumFlibChannel>:

DioEnum DIO_DioEnumFlibChannel(u8 copy_u8PortId,u8 copy_u8PinId)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	00 d0       	rcall	.+0      	; 0x1860 <DIO_DioEnumFlibChannel+0x6>
    1860:	00 d0       	rcall	.+0      	; 0x1862 <DIO_DioEnumFlibChannel+0x8>
    1862:	0f 92       	push	r0
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	8a 83       	std	Y+2, r24	; 0x02
    186a:	6b 83       	std	Y+3, r22	; 0x03
	DioEnum local_DioEnumErrorState = DIO_FLIB_OK;
    186c:	88 e0       	ldi	r24, 0x08	; 8
    186e:	89 83       	std	Y+1, r24	; 0x01
	/* check about input parameters  */
	if((copy_u8PortId <= DIO_u8_PORTD) && (copy_u8PinId <= DIO_u8_PIN7))
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	84 30       	cpi	r24, 0x04	; 4
    1874:	08 f0       	brcs	.+2      	; 0x1878 <DIO_DioEnumFlibChannel+0x1e>
    1876:	73 c0       	rjmp	.+230    	; 0x195e <DIO_DioEnumFlibChannel+0x104>
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	88 30       	cpi	r24, 0x08	; 8
    187c:	08 f0       	brcs	.+2      	; 0x1880 <DIO_DioEnumFlibChannel+0x26>
    187e:	6f c0       	rjmp	.+222    	; 0x195e <DIO_DioEnumFlibChannel+0x104>
	{
		/* check about which port you want to toggle your pins */
		switch(copy_u8PortId)
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	3d 83       	std	Y+5, r19	; 0x05
    1888:	2c 83       	std	Y+4, r18	; 0x04
    188a:	8c 81       	ldd	r24, Y+4	; 0x04
    188c:	9d 81       	ldd	r25, Y+5	; 0x05
    188e:	81 30       	cpi	r24, 0x01	; 1
    1890:	91 05       	cpc	r25, r1
    1892:	49 f1       	breq	.+82     	; 0x18e6 <DIO_DioEnumFlibChannel+0x8c>
    1894:	2c 81       	ldd	r18, Y+4	; 0x04
    1896:	3d 81       	ldd	r19, Y+5	; 0x05
    1898:	22 30       	cpi	r18, 0x02	; 2
    189a:	31 05       	cpc	r19, r1
    189c:	2c f4       	brge	.+10     	; 0x18a8 <DIO_DioEnumFlibChannel+0x4e>
    189e:	8c 81       	ldd	r24, Y+4	; 0x04
    18a0:	9d 81       	ldd	r25, Y+5	; 0x05
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	61 f0       	breq	.+24     	; 0x18be <DIO_DioEnumFlibChannel+0x64>
    18a6:	5d c0       	rjmp	.+186    	; 0x1962 <DIO_DioEnumFlibChannel+0x108>
    18a8:	2c 81       	ldd	r18, Y+4	; 0x04
    18aa:	3d 81       	ldd	r19, Y+5	; 0x05
    18ac:	22 30       	cpi	r18, 0x02	; 2
    18ae:	31 05       	cpc	r19, r1
    18b0:	71 f1       	breq	.+92     	; 0x190e <DIO_DioEnumFlibChannel+0xb4>
    18b2:	8c 81       	ldd	r24, Y+4	; 0x04
    18b4:	9d 81       	ldd	r25, Y+5	; 0x05
    18b6:	83 30       	cpi	r24, 0x03	; 3
    18b8:	91 05       	cpc	r25, r1
    18ba:	e9 f1       	breq	.+122    	; 0x1936 <DIO_DioEnumFlibChannel+0xdc>
    18bc:	52 c0       	rjmp	.+164    	; 0x1962 <DIO_DioEnumFlibChannel+0x108>
		{
			case DIO_u8_PORTA: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    18be:	ab e3       	ldi	r26, 0x3B	; 59
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	eb e3       	ldi	r30, 0x3B	; 59
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	48 2f       	mov	r20, r24
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 2e       	mov	r0, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <DIO_DioEnumFlibChannel+0x82>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <DIO_DioEnumFlibChannel+0x7e>
    18e0:	84 27       	eor	r24, r20
    18e2:	8c 93       	st	X, r24
    18e4:	3e c0       	rjmp	.+124    	; 0x1962 <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTB: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    18e6:	ab e3       	ldi	r26, 0x3B	; 59
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	eb e3       	ldi	r30, 0x3B	; 59
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	48 2f       	mov	r20, r24
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 2e       	mov	r0, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <DIO_DioEnumFlibChannel+0xaa>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	0a 94       	dec	r0
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <DIO_DioEnumFlibChannel+0xa6>
    1908:	84 27       	eor	r24, r20
    190a:	8c 93       	st	X, r24
    190c:	2a c0       	rjmp	.+84     	; 0x1962 <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTC: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    190e:	ab e3       	ldi	r26, 0x3B	; 59
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	eb e3       	ldi	r30, 0x3B	; 59
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	48 2f       	mov	r20, r24
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	02 2e       	mov	r0, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <DIO_DioEnumFlibChannel+0xd2>
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	0a 94       	dec	r0
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <DIO_DioEnumFlibChannel+0xce>
    1930:	84 27       	eor	r24, r20
    1932:	8c 93       	st	X, r24
    1934:	16 c0       	rjmp	.+44     	; 0x1962 <DIO_DioEnumFlibChannel+0x108>
			case DIO_u8_PORTD: TOG_BIT(DIO_u8_PORTA_REG,copy_u8PinId);       break;
    1936:	ab e3       	ldi	r26, 0x3B	; 59
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	eb e3       	ldi	r30, 0x3B	; 59
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	48 2f       	mov	r20, r24
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	02 2e       	mov	r0, r18
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <DIO_DioEnumFlibChannel+0xfa>
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	0a 94       	dec	r0
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <DIO_DioEnumFlibChannel+0xf6>
    1958:	84 27       	eor	r24, r20
    195a:	8c 93       	st	X, r24
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <DIO_DioEnumFlibChannel+0x108>
		}
	}
	else
	{
		local_DioEnumErrorState = DIO_FLIB_NOK;
    195e:	89 e0       	ldi	r24, 0x09	; 9
    1960:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_DioEnumErrorState;
    1962:	89 81       	ldd	r24, Y+1	; 0x01
}
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	08 95       	ret

00001974 <SSD_voidEnable1>:

void (*Enable_Apf[4])(void) = {SSD_voidEnable4,SSD_voidEnable3,SSD_voidEnable2,SSD_voidEnable1};
void (*Disable_Apf[4])(void) = {SSD_voidDisable4,SSD_voidDisable3,SSD_voidDisable2,SSD_voidDisable1};

void SSD_voidEnable1(void)
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    DIO_DioEnumWriteChannel(SSD_ENABLE_PORT,SSD_ENABLE_PIN_0,DIO_u8_HIGH);
    197c:	82 e0       	ldi	r24, 0x02	; 2
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	41 e0       	ldi	r20, 0x01	; 1
    1982:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_DioEnumWriteChannel>
}
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <SSD_voidEnable2>:
void SSD_voidEnable2(void)
{
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    DIO_DioEnumWriteChannel(SSD_ENABLE_PORT,SSD_ENABLE_PIN_1,DIO_u8_HIGH);
    1994:	82 e0       	ldi	r24, 0x02	; 2
    1996:	61 e0       	ldi	r22, 0x01	; 1
    1998:	41 e0       	ldi	r20, 0x01	; 1
    199a:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_DioEnumWriteChannel>
}
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <SSD_voidEnable3>:
void SSD_voidEnable3(void)
{
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    DIO_DioEnumWriteChannel(SSD_ENABLE_PORT,SSD_ENABLE_PIN_2,DIO_u8_HIGH);
    19ac:	82 e0       	ldi	r24, 0x02	; 2
    19ae:	62 e0       	ldi	r22, 0x02	; 2
    19b0:	41 e0       	ldi	r20, 0x01	; 1
    19b2:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_DioEnumWriteChannel>
}
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <SSD_voidEnable4>:
void SSD_voidEnable4(void)
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    DIO_DioEnumWriteChannel(SSD_ENABLE_PORT,SSD_ENABLE_PIN_3,DIO_u8_HIGH);
    19c4:	82 e0       	ldi	r24, 0x02	; 2
    19c6:	63 e0       	ldi	r22, 0x03	; 3
    19c8:	41 e0       	ldi	r20, 0x01	; 1
    19ca:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_DioEnumWriteChannel>
}
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <SSD_voidDisable1>:

void SSD_voidDisable1(void)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    DIO_DioEnumWriteChannel(SSD_ENABLE_PORT,SSD_ENABLE_PIN_0,DIO_u8_LOW);
    19dc:	82 e0       	ldi	r24, 0x02	; 2
    19de:	60 e0       	ldi	r22, 0x00	; 0
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_DioEnumWriteChannel>
}
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <SSD_voidDisable2>:
void SSD_voidDisable2(void)
{
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    DIO_DioEnumWriteChannel(SSD_ENABLE_PORT,SSD_ENABLE_PIN_1,DIO_u8_LOW);
    19f4:	82 e0       	ldi	r24, 0x02	; 2
    19f6:	61 e0       	ldi	r22, 0x01	; 1
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_DioEnumWriteChannel>
}
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <SSD_voidDisable3>:
void SSD_voidDisable3(void)
{
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    DIO_DioEnumWriteChannel(SSD_ENABLE_PORT,SSD_ENABLE_PIN_2,DIO_u8_LOW);
    1a0c:	82 e0       	ldi	r24, 0x02	; 2
    1a0e:	62 e0       	ldi	r22, 0x02	; 2
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_DioEnumWriteChannel>
}
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <SSD_voidDisable4>:
void SSD_voidDisable4(void)
{
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    DIO_DioEnumWriteChannel(SSD_ENABLE_PORT,SSD_ENABLE_PIN_3,DIO_u8_LOW);
    1a24:	82 e0       	ldi	r24, 0x02	; 2
    1a26:	63 e0       	ldi	r22, 0x03	; 3
    1a28:	40 e0       	ldi	r20, 0x00	; 0
    1a2a:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_DioEnumWriteChannel>
}
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <SSD_voidWriteNumber>:

void SSD_voidWriteNumber(u8 copy_u8Number)
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	0f 92       	push	r0
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    if(copy_u8Number < 10)
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	8a 30       	cpi	r24, 0x0A	; 10
    1a44:	30 f5       	brcc	.+76     	; 0x1a92 <SSD_voidWriteNumber+0x5e>
    {
        DIO_DioEnumWriteChannel(SSD_DATA_PORT,SSD_DATA_PIN_0,GET_BIT(copy_u8Number,0));
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	98 2f       	mov	r25, r24
    1a4a:	91 70       	andi	r25, 0x01	; 1
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	49 2f       	mov	r20, r25
    1a52:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_DioEnumWriteChannel>
        DIO_DioEnumWriteChannel(SSD_DATA_PORT,SSD_DATA_PIN_1,GET_BIT(copy_u8Number,1));
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	86 95       	lsr	r24
    1a5a:	98 2f       	mov	r25, r24
    1a5c:	91 70       	andi	r25, 0x01	; 1
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	61 e0       	ldi	r22, 0x01	; 1
    1a62:	49 2f       	mov	r20, r25
    1a64:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_DioEnumWriteChannel>
        DIO_DioEnumWriteChannel(SSD_DATA_PORT,SSD_DATA_PIN_2,GET_BIT(copy_u8Number,2));
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	86 95       	lsr	r24
    1a6c:	86 95       	lsr	r24
    1a6e:	98 2f       	mov	r25, r24
    1a70:	91 70       	andi	r25, 0x01	; 1
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	62 e0       	ldi	r22, 0x02	; 2
    1a76:	49 2f       	mov	r20, r25
    1a78:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_DioEnumWriteChannel>
        DIO_DioEnumWriteChannel(SSD_DATA_PORT,SSD_DATA_PIN_3,GET_BIT(copy_u8Number,3));
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	86 95       	lsr	r24
    1a80:	86 95       	lsr	r24
    1a82:	86 95       	lsr	r24
    1a84:	98 2f       	mov	r25, r24
    1a86:	91 70       	andi	r25, 0x01	; 1
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	63 e0       	ldi	r22, 0x03	; 3
    1a8c:	49 2f       	mov	r20, r25
    1a8e:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_DioEnumWriteChannel>
    }
}
    1a92:	0f 90       	pop	r0
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <SSD_voidWriteTo2SS>:

void SSD_voidWriteTo2SS(u8 copy_u8Num,f32 copy_f32TimeSec)
{
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	ab 97       	sbiw	r28, 0x2b	; 43
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	8f a3       	std	Y+39, r24	; 0x27
    1ab0:	48 a7       	std	Y+40, r20	; 0x28
    1ab2:	59 a7       	std	Y+41, r21	; 0x29
    1ab4:	6a a7       	std	Y+42, r22	; 0x2a
    1ab6:	7b a7       	std	Y+43, r23	; 0x2b
    u32 local_u32TimeMs = (copy_f32TimeSec * 1000) / 20;
    1ab8:	68 a5       	ldd	r22, Y+40	; 0x28
    1aba:	79 a5       	ldd	r23, Y+41	; 0x29
    1abc:	8a a5       	ldd	r24, Y+42	; 0x2a
    1abe:	9b a5       	ldd	r25, Y+43	; 0x2b
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	4a e7       	ldi	r20, 0x7A	; 122
    1ac6:	54 e4       	ldi	r21, 0x44	; 68
    1ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	bc 01       	movw	r22, r24
    1ad2:	cd 01       	movw	r24, r26
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 ea       	ldi	r20, 0xA0	; 160
    1ada:	51 e4       	ldi	r21, 0x41	; 65
    1adc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	bc 01       	movw	r22, r24
    1ae6:	cd 01       	movw	r24, r26
    1ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	8b a3       	std	Y+35, r24	; 0x23
    1af2:	9c a3       	std	Y+36, r25	; 0x24
    1af4:	ad a3       	std	Y+37, r26	; 0x25
    1af6:	be a3       	std	Y+38, r27	; 0x26
    if(copy_u8Num < 100)
    1af8:	8f a1       	ldd	r24, Y+39	; 0x27
    1afa:	84 36       	cpi	r24, 0x64	; 100
    1afc:	08 f0       	brcs	.+2      	; 0x1b00 <SSD_voidWriteTo2SS+0x66>
    1afe:	1f c1       	rjmp	.+574    	; 0x1d3e <SSD_voidWriteTo2SS+0x2a4>
    {
        u8 local_u8RightNum = copy_u8Num % 10;
    1b00:	8f a1       	ldd	r24, Y+39	; 0x27
    1b02:	9a e0       	ldi	r25, 0x0A	; 10
    1b04:	69 2f       	mov	r22, r25
    1b06:	0e 94 28 10 	call	0x2050	; 0x2050 <__udivmodqi4>
    1b0a:	89 2f       	mov	r24, r25
    1b0c:	8a a3       	std	Y+34, r24	; 0x22
        u8 local_u8LeftNum  = copy_u8Num / 10;
    1b0e:	8f a1       	ldd	r24, Y+39	; 0x27
    1b10:	9a e0       	ldi	r25, 0x0A	; 10
    1b12:	69 2f       	mov	r22, r25
    1b14:	0e 94 28 10 	call	0x2050	; 0x2050 <__udivmodqi4>
    1b18:	89 a3       	std	Y+33, r24	; 0x21
        for(u32 count = 0;count < local_u32TimeMs;count++)
    1b1a:	1d 8e       	std	Y+29, r1	; 0x1d
    1b1c:	1e 8e       	std	Y+30, r1	; 0x1e
    1b1e:	1f 8e       	std	Y+31, r1	; 0x1f
    1b20:	18 a2       	std	Y+32, r1	; 0x20
    1b22:	ff c0       	rjmp	.+510    	; 0x1d22 <SSD_voidWriteTo2SS+0x288>
        {
            SSD_voidDisable3();
    1b24:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <SSD_voidDisable3>
            SSD_voidDisable4();
    1b28:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <SSD_voidDisable4>
            SSD_voidWriteNumber(local_u8RightNum);
    1b2c:	8a a1       	ldd	r24, Y+34	; 0x22
    1b2e:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <SSD_voidWriteNumber>
            SSD_voidEnable4();
    1b32:	0e 94 de 0c 	call	0x19bc	; 0x19bc <SSD_voidEnable4>
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	a0 e2       	ldi	r26, 0x20	; 32
    1b3c:	b1 e4       	ldi	r27, 0x41	; 65
    1b3e:	89 8f       	std	Y+25, r24	; 0x19
    1b40:	9a 8f       	std	Y+26, r25	; 0x1a
    1b42:	ab 8f       	std	Y+27, r26	; 0x1b
    1b44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b46:	69 8d       	ldd	r22, Y+25	; 0x19
    1b48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	4a ef       	ldi	r20, 0xFA	; 250
    1b54:	54 e4       	ldi	r21, 0x44	; 68
    1b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	8d 8b       	std	Y+21, r24	; 0x15
    1b60:	9e 8b       	std	Y+22, r25	; 0x16
    1b62:	af 8b       	std	Y+23, r26	; 0x17
    1b64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b66:	6d 89       	ldd	r22, Y+21	; 0x15
    1b68:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	40 e8       	ldi	r20, 0x80	; 128
    1b74:	5f e3       	ldi	r21, 0x3F	; 63
    1b76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b7a:	88 23       	and	r24, r24
    1b7c:	2c f4       	brge	.+10     	; 0x1b88 <SSD_voidWriteTo2SS+0xee>
		__ticks = 1;
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	9c 8b       	std	Y+20, r25	; 0x14
    1b84:	8b 8b       	std	Y+19, r24	; 0x13
    1b86:	3f c0       	rjmp	.+126    	; 0x1c06 <SSD_voidWriteTo2SS+0x16c>
	else if (__tmp > 65535)
    1b88:	6d 89       	ldd	r22, Y+21	; 0x15
    1b8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	3f ef       	ldi	r19, 0xFF	; 255
    1b94:	4f e7       	ldi	r20, 0x7F	; 127
    1b96:	57 e4       	ldi	r21, 0x47	; 71
    1b98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b9c:	18 16       	cp	r1, r24
    1b9e:	4c f5       	brge	.+82     	; 0x1bf2 <SSD_voidWriteTo2SS+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ba2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ba4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ba6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e2       	ldi	r20, 0x20	; 32
    1bae:	51 e4       	ldi	r21, 0x41	; 65
    1bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	bc 01       	movw	r22, r24
    1bba:	cd 01       	movw	r24, r26
    1bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	9c 8b       	std	Y+20, r25	; 0x14
    1bc6:	8b 8b       	std	Y+19, r24	; 0x13
    1bc8:	0f c0       	rjmp	.+30     	; 0x1be8 <SSD_voidWriteTo2SS+0x14e>
    1bca:	88 ec       	ldi	r24, 0xC8	; 200
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	9a 8b       	std	Y+18, r25	; 0x12
    1bd0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bd2:	89 89       	ldd	r24, Y+17	; 0x11
    1bd4:	9a 89       	ldd	r25, Y+18	; 0x12
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	f1 f7       	brne	.-4      	; 0x1bd6 <SSD_voidWriteTo2SS+0x13c>
    1bda:	9a 8b       	std	Y+18, r25	; 0x12
    1bdc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bde:	8b 89       	ldd	r24, Y+19	; 0x13
    1be0:	9c 89       	ldd	r25, Y+20	; 0x14
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	9c 8b       	std	Y+20, r25	; 0x14
    1be6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bea:	9c 89       	ldd	r25, Y+20	; 0x14
    1bec:	00 97       	sbiw	r24, 0x00	; 0
    1bee:	69 f7       	brne	.-38     	; 0x1bca <SSD_voidWriteTo2SS+0x130>
    1bf0:	14 c0       	rjmp	.+40     	; 0x1c1a <SSD_voidWriteTo2SS+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	9c 8b       	std	Y+20, r25	; 0x14
    1c04:	8b 8b       	std	Y+19, r24	; 0x13
    1c06:	8b 89       	ldd	r24, Y+19	; 0x13
    1c08:	9c 89       	ldd	r25, Y+20	; 0x14
    1c0a:	98 8b       	std	Y+16, r25	; 0x10
    1c0c:	8f 87       	std	Y+15, r24	; 0x0f
    1c0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c10:	98 89       	ldd	r25, Y+16	; 0x10
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	f1 f7       	brne	.-4      	; 0x1c12 <SSD_voidWriteTo2SS+0x178>
    1c16:	98 8b       	std	Y+16, r25	; 0x10
    1c18:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(10);
            SSD_voidDisable4();
    1c1a:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <SSD_voidDisable4>
            SSD_voidWriteNumber(local_u8LeftNum);
    1c1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c20:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <SSD_voidWriteNumber>
            SSD_voidEnable3();
    1c24:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <SSD_voidEnable3>
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	a0 e2       	ldi	r26, 0x20	; 32
    1c2e:	b1 e4       	ldi	r27, 0x41	; 65
    1c30:	8b 87       	std	Y+11, r24	; 0x0b
    1c32:	9c 87       	std	Y+12, r25	; 0x0c
    1c34:	ad 87       	std	Y+13, r26	; 0x0d
    1c36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	4a ef       	ldi	r20, 0xFA	; 250
    1c46:	54 e4       	ldi	r21, 0x44	; 68
    1c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	8f 83       	std	Y+7, r24	; 0x07
    1c52:	98 87       	std	Y+8, r25	; 0x08
    1c54:	a9 87       	std	Y+9, r26	; 0x09
    1c56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c58:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5a:	78 85       	ldd	r23, Y+8	; 0x08
    1c5c:	89 85       	ldd	r24, Y+9	; 0x09
    1c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e8       	ldi	r20, 0x80	; 128
    1c66:	5f e3       	ldi	r21, 0x3F	; 63
    1c68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c6c:	88 23       	and	r24, r24
    1c6e:	2c f4       	brge	.+10     	; 0x1c7a <SSD_voidWriteTo2SS+0x1e0>
		__ticks = 1;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9e 83       	std	Y+6, r25	; 0x06
    1c76:	8d 83       	std	Y+5, r24	; 0x05
    1c78:	3f c0       	rjmp	.+126    	; 0x1cf8 <SSD_voidWriteTo2SS+0x25e>
	else if (__tmp > 65535)
    1c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7c:	78 85       	ldd	r23, Y+8	; 0x08
    1c7e:	89 85       	ldd	r24, Y+9	; 0x09
    1c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	3f ef       	ldi	r19, 0xFF	; 255
    1c86:	4f e7       	ldi	r20, 0x7F	; 127
    1c88:	57 e4       	ldi	r21, 0x47	; 71
    1c8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c8e:	18 16       	cp	r1, r24
    1c90:	4c f5       	brge	.+82     	; 0x1ce4 <SSD_voidWriteTo2SS+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	40 e2       	ldi	r20, 0x20	; 32
    1ca0:	51 e4       	ldi	r21, 0x41	; 65
    1ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	bc 01       	movw	r22, r24
    1cac:	cd 01       	movw	r24, r26
    1cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	9e 83       	std	Y+6, r25	; 0x06
    1cb8:	8d 83       	std	Y+5, r24	; 0x05
    1cba:	0f c0       	rjmp	.+30     	; 0x1cda <SSD_voidWriteTo2SS+0x240>
    1cbc:	88 ec       	ldi	r24, 0xC8	; 200
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	9c 83       	std	Y+4, r25	; 0x04
    1cc2:	8b 83       	std	Y+3, r24	; 0x03
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <SSD_voidWriteTo2SS+0x22e>
    1ccc:	9c 83       	std	Y+4, r25	; 0x04
    1cce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	9e 83       	std	Y+6, r25	; 0x06
    1cd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cda:	8d 81       	ldd	r24, Y+5	; 0x05
    1cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	69 f7       	brne	.-38     	; 0x1cbc <SSD_voidWriteTo2SS+0x222>
    1ce2:	14 c0       	rjmp	.+40     	; 0x1d0c <SSD_voidWriteTo2SS+0x272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce6:	78 85       	ldd	r23, Y+8	; 0x08
    1ce8:	89 85       	ldd	r24, Y+9	; 0x09
    1cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9e 83       	std	Y+6, r25	; 0x06
    1cf6:	8d 83       	std	Y+5, r24	; 0x05
    1cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfc:	9a 83       	std	Y+2, r25	; 0x02
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	9a 81       	ldd	r25, Y+2	; 0x02
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <SSD_voidWriteTo2SS+0x26a>
    1d08:	9a 83       	std	Y+2, r25	; 0x02
    1d0a:	89 83       	std	Y+1, r24	; 0x01
    u32 local_u32TimeMs = (copy_f32TimeSec * 1000) / 20;
    if(copy_u8Num < 100)
    {
        u8 local_u8RightNum = copy_u8Num % 10;
        u8 local_u8LeftNum  = copy_u8Num / 10;
        for(u32 count = 0;count < local_u32TimeMs;count++)
    1d0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d10:	af 8d       	ldd	r26, Y+31	; 0x1f
    1d12:	b8 a1       	ldd	r27, Y+32	; 0x20
    1d14:	01 96       	adiw	r24, 0x01	; 1
    1d16:	a1 1d       	adc	r26, r1
    1d18:	b1 1d       	adc	r27, r1
    1d1a:	8d 8f       	std	Y+29, r24	; 0x1d
    1d1c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d1e:	af 8f       	std	Y+31, r26	; 0x1f
    1d20:	b8 a3       	std	Y+32, r27	; 0x20
    1d22:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1d24:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1d26:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1d28:	58 a1       	ldd	r21, Y+32	; 0x20
    1d2a:	8b a1       	ldd	r24, Y+35	; 0x23
    1d2c:	9c a1       	ldd	r25, Y+36	; 0x24
    1d2e:	ad a1       	ldd	r26, Y+37	; 0x25
    1d30:	be a1       	ldd	r27, Y+38	; 0x26
    1d32:	28 17       	cp	r18, r24
    1d34:	39 07       	cpc	r19, r25
    1d36:	4a 07       	cpc	r20, r26
    1d38:	5b 07       	cpc	r21, r27
    1d3a:	08 f4       	brcc	.+2      	; 0x1d3e <SSD_voidWriteTo2SS+0x2a4>
    1d3c:	f3 ce       	rjmp	.-538    	; 0x1b24 <SSD_voidWriteTo2SS+0x8a>
            SSD_voidWriteNumber(local_u8LeftNum);
            SSD_voidEnable3();
            _delay_ms(10);
        }
    }
}
    1d3e:	ab 96       	adiw	r28, 0x2b	; 43
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <SSD_voidWriteTo4SS>:

void SSD_voidWriteTo4SS(u32 copy_u32Num)
{
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	63 97       	sbiw	r28, 0x13	; 19
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	de bf       	out	0x3e, r29	; 62
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	cd bf       	out	0x3d, r28	; 61
    1d64:	68 8b       	std	Y+16, r22	; 0x10
    1d66:	79 8b       	std	Y+17, r23	; 0x11
    1d68:	8a 8b       	std	Y+18, r24	; 0x12
    1d6a:	9b 8b       	std	Y+19, r25	; 0x13
	u8 x = 0;
    1d6c:	1f 86       	std	Y+15, r1	; 0x0f
    1d6e:	af c0       	rjmp	.+350    	; 0x1ece <SSD_voidWriteTo4SS+0x17e>
	while((copy_u32Num != 0) || (x < 4))
	{
		Enable_Apf[x]();
    1d70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d72:	88 2f       	mov	r24, r24
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	e8 59       	subi	r30, 0x98	; 152
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	01 90       	ld	r0, Z+
    1d82:	f0 81       	ld	r31, Z
    1d84:	e0 2d       	mov	r30, r0
    1d86:	09 95       	icall
		SSD_voidWriteNumber(copy_u32Num%10);
    1d88:	88 89       	ldd	r24, Y+16	; 0x10
    1d8a:	99 89       	ldd	r25, Y+17	; 0x11
    1d8c:	aa 89       	ldd	r26, Y+18	; 0x12
    1d8e:	bb 89       	ldd	r27, Y+19	; 0x13
    1d90:	2a e0       	ldi	r18, 0x0A	; 10
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	50 e0       	ldi	r21, 0x00	; 0
    1d98:	bc 01       	movw	r22, r24
    1d9a:	cd 01       	movw	r24, r26
    1d9c:	0e 94 34 10 	call	0x2068	; 0x2068 <__udivmodsi4>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <SSD_voidWriteNumber>
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	a0 e2       	ldi	r26, 0x20	; 32
    1dae:	b1 e4       	ldi	r27, 0x41	; 65
    1db0:	8b 87       	std	Y+11, r24	; 0x0b
    1db2:	9c 87       	std	Y+12, r25	; 0x0c
    1db4:	ad 87       	std	Y+13, r26	; 0x0d
    1db6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	4a ef       	ldi	r20, 0xFA	; 250
    1dc6:	54 e4       	ldi	r21, 0x44	; 68
    1dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	8f 83       	std	Y+7, r24	; 0x07
    1dd2:	98 87       	std	Y+8, r25	; 0x08
    1dd4:	a9 87       	std	Y+9, r26	; 0x09
    1dd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dda:	78 85       	ldd	r23, Y+8	; 0x08
    1ddc:	89 85       	ldd	r24, Y+9	; 0x09
    1dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e8       	ldi	r20, 0x80	; 128
    1de6:	5f e3       	ldi	r21, 0x3F	; 63
    1de8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dec:	88 23       	and	r24, r24
    1dee:	2c f4       	brge	.+10     	; 0x1dfa <SSD_voidWriteTo4SS+0xaa>
		__ticks = 1;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	9e 83       	std	Y+6, r25	; 0x06
    1df6:	8d 83       	std	Y+5, r24	; 0x05
    1df8:	3f c0       	rjmp	.+126    	; 0x1e78 <SSD_voidWriteTo4SS+0x128>
	else if (__tmp > 65535)
    1dfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfc:	78 85       	ldd	r23, Y+8	; 0x08
    1dfe:	89 85       	ldd	r24, Y+9	; 0x09
    1e00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	3f ef       	ldi	r19, 0xFF	; 255
    1e06:	4f e7       	ldi	r20, 0x7F	; 127
    1e08:	57 e4       	ldi	r21, 0x47	; 71
    1e0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e0e:	18 16       	cp	r1, r24
    1e10:	4c f5       	brge	.+82     	; 0x1e64 <SSD_voidWriteTo4SS+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	40 e2       	ldi	r20, 0x20	; 32
    1e20:	51 e4       	ldi	r21, 0x41	; 65
    1e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	bc 01       	movw	r22, r24
    1e2c:	cd 01       	movw	r24, r26
    1e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9e 83       	std	Y+6, r25	; 0x06
    1e38:	8d 83       	std	Y+5, r24	; 0x05
    1e3a:	0f c0       	rjmp	.+30     	; 0x1e5a <SSD_voidWriteTo4SS+0x10a>
    1e3c:	88 ec       	ldi	r24, 0xC8	; 200
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	9c 83       	std	Y+4, r25	; 0x04
    1e42:	8b 83       	std	Y+3, r24	; 0x03
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	9c 81       	ldd	r25, Y+4	; 0x04
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <SSD_voidWriteTo4SS+0xf8>
    1e4c:	9c 83       	std	Y+4, r25	; 0x04
    1e4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e50:	8d 81       	ldd	r24, Y+5	; 0x05
    1e52:	9e 81       	ldd	r25, Y+6	; 0x06
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	9e 83       	std	Y+6, r25	; 0x06
    1e58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	69 f7       	brne	.-38     	; 0x1e3c <SSD_voidWriteTo4SS+0xec>
    1e62:	14 c0       	rjmp	.+40     	; 0x1e8c <SSD_voidWriteTo4SS+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e64:	6f 81       	ldd	r22, Y+7	; 0x07
    1e66:	78 85       	ldd	r23, Y+8	; 0x08
    1e68:	89 85       	ldd	r24, Y+9	; 0x09
    1e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	9e 83       	std	Y+6, r25	; 0x06
    1e76:	8d 83       	std	Y+5, r24	; 0x05
    1e78:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7c:	9a 83       	std	Y+2, r25	; 0x02
    1e7e:	89 83       	std	Y+1, r24	; 0x01
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	9a 81       	ldd	r25, Y+2	; 0x02
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	f1 f7       	brne	.-4      	; 0x1e84 <SSD_voidWriteTo4SS+0x134>
    1e88:	9a 83       	std	Y+2, r25	; 0x02
    1e8a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		Disable_Apf[x]();
    1e8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e8e:	88 2f       	mov	r24, r24
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	fc 01       	movw	r30, r24
    1e98:	e0 59       	subi	r30, 0x90	; 144
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	01 90       	ld	r0, Z+
    1e9e:	f0 81       	ld	r31, Z
    1ea0:	e0 2d       	mov	r30, r0
    1ea2:	09 95       	icall
		x++;
    1ea4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ea6:	8f 5f       	subi	r24, 0xFF	; 255
    1ea8:	8f 87       	std	Y+15, r24	; 0x0f
		copy_u32Num /= 10;
    1eaa:	88 89       	ldd	r24, Y+16	; 0x10
    1eac:	99 89       	ldd	r25, Y+17	; 0x11
    1eae:	aa 89       	ldd	r26, Y+18	; 0x12
    1eb0:	bb 89       	ldd	r27, Y+19	; 0x13
    1eb2:	2a e0       	ldi	r18, 0x0A	; 10
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	50 e0       	ldi	r21, 0x00	; 0
    1eba:	bc 01       	movw	r22, r24
    1ebc:	cd 01       	movw	r24, r26
    1ebe:	0e 94 34 10 	call	0x2068	; 0x2068 <__udivmodsi4>
    1ec2:	da 01       	movw	r26, r20
    1ec4:	c9 01       	movw	r24, r18
    1ec6:	88 8b       	std	Y+16, r24	; 0x10
    1ec8:	99 8b       	std	Y+17, r25	; 0x11
    1eca:	aa 8b       	std	Y+18, r26	; 0x12
    1ecc:	bb 8b       	std	Y+19, r27	; 0x13
}

void SSD_voidWriteTo4SS(u32 copy_u32Num)
{
	u8 x = 0;
	while((copy_u32Num != 0) || (x < 4))
    1ece:	88 89       	ldd	r24, Y+16	; 0x10
    1ed0:	99 89       	ldd	r25, Y+17	; 0x11
    1ed2:	aa 89       	ldd	r26, Y+18	; 0x12
    1ed4:	bb 89       	ldd	r27, Y+19	; 0x13
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	a1 05       	cpc	r26, r1
    1eda:	b1 05       	cpc	r27, r1
    1edc:	09 f0       	breq	.+2      	; 0x1ee0 <SSD_voidWriteTo4SS+0x190>
    1ede:	48 cf       	rjmp	.-368    	; 0x1d70 <SSD_voidWriteTo4SS+0x20>
    1ee0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ee2:	84 30       	cpi	r24, 0x04	; 4
    1ee4:	08 f4       	brcc	.+2      	; 0x1ee8 <SSD_voidWriteTo4SS+0x198>
    1ee6:	44 cf       	rjmp	.-376    	; 0x1d70 <SSD_voidWriteTo4SS+0x20>
		_delay_ms(10);
		Disable_Apf[x]();
		x++;
		copy_u32Num /= 10;
	}
}
    1ee8:	63 96       	adiw	r28, 0x13	; 19
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <main>:
#define START            0
#define STOP             1
#define CLEAR            2
u32 NUM;
int main(void)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	2a 97       	sbiw	r28, 0x0a	; 10
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8Flag = CLEAR;
    1f0e:	82 e0       	ldi	r24, 0x02	; 2
    1f10:	8d 83       	std	Y+5, r24	; 0x05
	u32 local_u32Count;
	u8 local_u8ReadPB1,local_u8ReadPB2,local_u8ReadPB3;
	PORT_voidInit();
    1f12:	0e 94 4f 06 	call	0xc9e	; 0xc9e <PORT_voidInit>
	while(1)
	{
		DIO_DioEnumReadChannel(DIO_u8_PORTA,DIO_u8_PIN0,&local_u8ReadPB1);
    1f16:	9e 01       	movw	r18, r28
    1f18:	2a 5f       	subi	r18, 0xFA	; 250
    1f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	60 e0       	ldi	r22, 0x00	; 0
    1f20:	a9 01       	movw	r20, r18
    1f22:	0e 94 c7 0a 	call	0x158e	; 0x158e <DIO_DioEnumReadChannel>
		DIO_DioEnumReadChannel(DIO_u8_PORTA,DIO_u8_PIN1,&local_u8ReadPB2);
    1f26:	9e 01       	movw	r18, r28
    1f28:	29 5f       	subi	r18, 0xF9	; 249
    1f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	61 e0       	ldi	r22, 0x01	; 1
    1f30:	a9 01       	movw	r20, r18
    1f32:	0e 94 c7 0a 	call	0x158e	; 0x158e <DIO_DioEnumReadChannel>
		DIO_DioEnumReadChannel(DIO_u8_PORTA,DIO_u8_PIN2,&local_u8ReadPB3);
    1f36:	9e 01       	movw	r18, r28
    1f38:	28 5f       	subi	r18, 0xF8	; 248
    1f3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	62 e0       	ldi	r22, 0x02	; 2
    1f40:	a9 01       	movw	r20, r18
    1f42:	0e 94 c7 0a 	call	0x158e	; 0x158e <DIO_DioEnumReadChannel>
		if(local_u8ReadPB1 == DIO_u8_LOW)
    1f46:	8e 81       	ldd	r24, Y+6	; 0x06
    1f48:	88 23       	and	r24, r24
    1f4a:	09 f4       	brne	.+2      	; 0x1f4e <main+0x54>
		{
			local_u8Flag = START;
    1f4c:	1d 82       	std	Y+5, r1	; 0x05
		}
		if(local_u8ReadPB2 == DIO_u8_LOW)
    1f4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f50:	88 23       	and	r24, r24
    1f52:	11 f4       	brne	.+4      	; 0x1f58 <main+0x5e>
		{
			local_u8Flag = STOP;
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	8d 83       	std	Y+5, r24	; 0x05
		}
		if(local_u8ReadPB3 == DIO_u8_LOW)
    1f58:	88 85       	ldd	r24, Y+8	; 0x08
    1f5a:	88 23       	and	r24, r24
    1f5c:	11 f4       	brne	.+4      	; 0x1f62 <main+0x68>
		{
			local_u8Flag = CLEAR;
    1f5e:	82 e0       	ldi	r24, 0x02	; 2
    1f60:	8d 83       	std	Y+5, r24	; 0x05
		}
		switch(local_u8Flag)
    1f62:	8d 81       	ldd	r24, Y+5	; 0x05
    1f64:	28 2f       	mov	r18, r24
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	3a 87       	std	Y+10, r19	; 0x0a
    1f6a:	29 87       	std	Y+9, r18	; 0x09
    1f6c:	89 85       	ldd	r24, Y+9	; 0x09
    1f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f70:	81 30       	cpi	r24, 0x01	; 1
    1f72:	91 05       	cpc	r25, r1
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <main+0x7e>
    1f76:	58 c0       	rjmp	.+176    	; 0x2028 <main+0x12e>
    1f78:	29 85       	ldd	r18, Y+9	; 0x09
    1f7a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f7c:	22 30       	cpi	r18, 0x02	; 2
    1f7e:	31 05       	cpc	r19, r1
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <main+0x8a>
    1f82:	5f c0       	rjmp	.+190    	; 0x2042 <main+0x148>
    1f84:	89 85       	ldd	r24, Y+9	; 0x09
    1f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	29 f6       	brne	.-118    	; 0x1f16 <main+0x1c>
		{
			case START:
			for(local_u32Count=0;local_u32Count<=9999;local_u32Count++)
    1f8c:	19 82       	std	Y+1, r1	; 0x01
    1f8e:	1a 82       	std	Y+2, r1	; 0x02
    1f90:	1b 82       	std	Y+3, r1	; 0x03
    1f92:	1c 82       	std	Y+4, r1	; 0x04
    1f94:	3b c0       	rjmp	.+118    	; 0x200c <main+0x112>
			{
				SSD_voidWriteTo4SS(local_u32Count);
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9a:	ab 81       	ldd	r26, Y+3	; 0x03
    1f9c:	bc 81       	ldd	r27, Y+4	; 0x04
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	cd 01       	movw	r24, r26
    1fa2:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <SSD_voidWriteTo4SS>
				NUM = local_u32Count;
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1faa:	ab 81       	ldd	r26, Y+3	; 0x03
    1fac:	bc 81       	ldd	r27, Y+4	; 0x04
    1fae:	80 93 78 00 	sts	0x0078, r24
    1fb2:	90 93 79 00 	sts	0x0079, r25
    1fb6:	a0 93 7a 00 	sts	0x007A, r26
    1fba:	b0 93 7b 00 	sts	0x007B, r27
				DIO_DioEnumReadChannel(DIO_u8_PORTA,DIO_u8_PIN1,&local_u8ReadPB2);
    1fbe:	9e 01       	movw	r18, r28
    1fc0:	29 5f       	subi	r18, 0xF9	; 249
    1fc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	61 e0       	ldi	r22, 0x01	; 1
    1fc8:	a9 01       	movw	r20, r18
    1fca:	0e 94 c7 0a 	call	0x158e	; 0x158e <DIO_DioEnumReadChannel>
				if(local_u8ReadPB2 == DIO_u8_LOW)
    1fce:	8f 81       	ldd	r24, Y+7	; 0x07
    1fd0:	88 23       	and	r24, r24
    1fd2:	19 f4       	brne	.+6      	; 0x1fda <main+0xe0>
				{
					local_u8Flag = STOP;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	8d 83       	std	Y+5, r24	; 0x05
    1fd8:	9e cf       	rjmp	.-196    	; 0x1f16 <main+0x1c>
					//SSD_voidWriteTo4SS(NUM);
					break;
				}
				DIO_DioEnumReadChannel(DIO_u8_PORTA,DIO_u8_PIN2,&local_u8ReadPB3);
    1fda:	9e 01       	movw	r18, r28
    1fdc:	28 5f       	subi	r18, 0xF8	; 248
    1fde:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	62 e0       	ldi	r22, 0x02	; 2
    1fe4:	a9 01       	movw	r20, r18
    1fe6:	0e 94 c7 0a 	call	0x158e	; 0x158e <DIO_DioEnumReadChannel>
				if(local_u8ReadPB3 == DIO_u8_LOW)
    1fea:	88 85       	ldd	r24, Y+8	; 0x08
    1fec:	88 23       	and	r24, r24
    1fee:	19 f4       	brne	.+6      	; 0x1ff6 <main+0xfc>
				{
					local_u8Flag = CLEAR;
    1ff0:	82 e0       	ldi	r24, 0x02	; 2
    1ff2:	8d 83       	std	Y+5, r24	; 0x05
    1ff4:	90 cf       	rjmp	.-224    	; 0x1f16 <main+0x1c>
			local_u8Flag = CLEAR;
		}
		switch(local_u8Flag)
		{
			case START:
			for(local_u32Count=0;local_u32Count<=9999;local_u32Count++)
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffa:	ab 81       	ldd	r26, Y+3	; 0x03
    1ffc:	bc 81       	ldd	r27, Y+4	; 0x04
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	a1 1d       	adc	r26, r1
    2002:	b1 1d       	adc	r27, r1
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	9a 83       	std	Y+2, r25	; 0x02
    2008:	ab 83       	std	Y+3, r26	; 0x03
    200a:	bc 83       	std	Y+4, r27	; 0x04
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	9a 81       	ldd	r25, Y+2	; 0x02
    2010:	ab 81       	ldd	r26, Y+3	; 0x03
    2012:	bc 81       	ldd	r27, Y+4	; 0x04
    2014:	80 31       	cpi	r24, 0x10	; 16
    2016:	27 e2       	ldi	r18, 0x27	; 39
    2018:	92 07       	cpc	r25, r18
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	a2 07       	cpc	r26, r18
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	b2 07       	cpc	r27, r18
    2022:	08 f4       	brcc	.+2      	; 0x2026 <main+0x12c>
    2024:	b8 cf       	rjmp	.-144    	; 0x1f96 <main+0x9c>
    2026:	77 cf       	rjmp	.-274    	; 0x1f16 <main+0x1c>
					//SSD_voidWriteTo4SS(0);
					break;
				}
			}
			break;
			case STOP : SSD_voidWriteTo4SS(NUM);            break;
    2028:	80 91 78 00 	lds	r24, 0x0078
    202c:	90 91 79 00 	lds	r25, 0x0079
    2030:	a0 91 7a 00 	lds	r26, 0x007A
    2034:	b0 91 7b 00 	lds	r27, 0x007B
    2038:	bc 01       	movw	r22, r24
    203a:	cd 01       	movw	r24, r26
    203c:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <SSD_voidWriteTo4SS>
    2040:	6a cf       	rjmp	.-300    	; 0x1f16 <main+0x1c>
			case CLEAR: SSD_voidWriteTo4SS(0);              break;
    2042:	60 e0       	ldi	r22, 0x00	; 0
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <SSD_voidWriteTo4SS>
    204e:	63 cf       	rjmp	.-314    	; 0x1f16 <main+0x1c>

00002050 <__udivmodqi4>:
    2050:	99 1b       	sub	r25, r25
    2052:	79 e0       	ldi	r23, 0x09	; 9
    2054:	04 c0       	rjmp	.+8      	; 0x205e <__udivmodqi4_ep>

00002056 <__udivmodqi4_loop>:
    2056:	99 1f       	adc	r25, r25
    2058:	96 17       	cp	r25, r22
    205a:	08 f0       	brcs	.+2      	; 0x205e <__udivmodqi4_ep>
    205c:	96 1b       	sub	r25, r22

0000205e <__udivmodqi4_ep>:
    205e:	88 1f       	adc	r24, r24
    2060:	7a 95       	dec	r23
    2062:	c9 f7       	brne	.-14     	; 0x2056 <__udivmodqi4_loop>
    2064:	80 95       	com	r24
    2066:	08 95       	ret

00002068 <__udivmodsi4>:
    2068:	a1 e2       	ldi	r26, 0x21	; 33
    206a:	1a 2e       	mov	r1, r26
    206c:	aa 1b       	sub	r26, r26
    206e:	bb 1b       	sub	r27, r27
    2070:	fd 01       	movw	r30, r26
    2072:	0d c0       	rjmp	.+26     	; 0x208e <__udivmodsi4_ep>

00002074 <__udivmodsi4_loop>:
    2074:	aa 1f       	adc	r26, r26
    2076:	bb 1f       	adc	r27, r27
    2078:	ee 1f       	adc	r30, r30
    207a:	ff 1f       	adc	r31, r31
    207c:	a2 17       	cp	r26, r18
    207e:	b3 07       	cpc	r27, r19
    2080:	e4 07       	cpc	r30, r20
    2082:	f5 07       	cpc	r31, r21
    2084:	20 f0       	brcs	.+8      	; 0x208e <__udivmodsi4_ep>
    2086:	a2 1b       	sub	r26, r18
    2088:	b3 0b       	sbc	r27, r19
    208a:	e4 0b       	sbc	r30, r20
    208c:	f5 0b       	sbc	r31, r21

0000208e <__udivmodsi4_ep>:
    208e:	66 1f       	adc	r22, r22
    2090:	77 1f       	adc	r23, r23
    2092:	88 1f       	adc	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	1a 94       	dec	r1
    2098:	69 f7       	brne	.-38     	; 0x2074 <__udivmodsi4_loop>
    209a:	60 95       	com	r22
    209c:	70 95       	com	r23
    209e:	80 95       	com	r24
    20a0:	90 95       	com	r25
    20a2:	9b 01       	movw	r18, r22
    20a4:	ac 01       	movw	r20, r24
    20a6:	bd 01       	movw	r22, r26
    20a8:	cf 01       	movw	r24, r30
    20aa:	08 95       	ret

000020ac <__prologue_saves__>:
    20ac:	2f 92       	push	r2
    20ae:	3f 92       	push	r3
    20b0:	4f 92       	push	r4
    20b2:	5f 92       	push	r5
    20b4:	6f 92       	push	r6
    20b6:	7f 92       	push	r7
    20b8:	8f 92       	push	r8
    20ba:	9f 92       	push	r9
    20bc:	af 92       	push	r10
    20be:	bf 92       	push	r11
    20c0:	cf 92       	push	r12
    20c2:	df 92       	push	r13
    20c4:	ef 92       	push	r14
    20c6:	ff 92       	push	r15
    20c8:	0f 93       	push	r16
    20ca:	1f 93       	push	r17
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	ca 1b       	sub	r28, r26
    20d6:	db 0b       	sbc	r29, r27
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	f8 94       	cli
    20dc:	de bf       	out	0x3e, r29	; 62
    20de:	0f be       	out	0x3f, r0	; 63
    20e0:	cd bf       	out	0x3d, r28	; 61
    20e2:	09 94       	ijmp

000020e4 <__epilogue_restores__>:
    20e4:	2a 88       	ldd	r2, Y+18	; 0x12
    20e6:	39 88       	ldd	r3, Y+17	; 0x11
    20e8:	48 88       	ldd	r4, Y+16	; 0x10
    20ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    20ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    20ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    20f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    20f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    20f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    20f6:	b9 84       	ldd	r11, Y+9	; 0x09
    20f8:	c8 84       	ldd	r12, Y+8	; 0x08
    20fa:	df 80       	ldd	r13, Y+7	; 0x07
    20fc:	ee 80       	ldd	r14, Y+6	; 0x06
    20fe:	fd 80       	ldd	r15, Y+5	; 0x05
    2100:	0c 81       	ldd	r16, Y+4	; 0x04
    2102:	1b 81       	ldd	r17, Y+3	; 0x03
    2104:	aa 81       	ldd	r26, Y+2	; 0x02
    2106:	b9 81       	ldd	r27, Y+1	; 0x01
    2108:	ce 0f       	add	r28, r30
    210a:	d1 1d       	adc	r29, r1
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	f8 94       	cli
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	cd bf       	out	0x3d, r28	; 61
    2116:	ed 01       	movw	r28, r26
    2118:	08 95       	ret

0000211a <_exit>:
    211a:	f8 94       	cli

0000211c <__stop_program>:
    211c:	ff cf       	rjmp	.-2      	; 0x211c <__stop_program>
